{
  "cve_id": "CVE-2021-41248",
  "cve_desc": "GraphiQL is the reference implementation of this monorepo, GraphQL IDE, an official project under the GraphQL Foundation. All versions of graphiql older than graphiql@1.4.7 are vulnerable to compromised HTTP schema introspection responses or schema prop values with malicious GraphQL type names, exposing a dynamic XSS attack surface that can allow code injection on operation autocomplete. In order for the attack to take place, the user must load a vulnerable schema in graphiql. There are a number of ways that can occur. By default, the schema URL is not attacker-controllable in graphiql or in its suggested implementations or examples, leaving only very complex attack vectors. If a custom implementation of graphiql's fetcher allows the schema URL to be set dynamically, such as a URL query parameter like ?endpoint= in graphql-playground, or a database provided value, then this custom graphiql implementation is vulnerable to phishing attacks, and thus much more readily available, low or no privelege level xss attacks. The URLs could look like any generic looking graphql schema URL. It should be noted that desktop clients such as Altair, Insomnia, Postwoman, do not appear to be impacted by this. This vulnerability does not impact codemirror-graphql, monaco-graphql or other dependents, as it exists in onHasCompletion.ts in graphiql. It does impact all forks of graphiql, and every released version of graphiql.",
  "repo": "graphql/graphiql",
  "patch_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
  "patch_info": {
    "commit_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
    "repo": "graphql/graphiql",
    "commit_url": "https://github.com/graphql/graphiql/commit/cb237eeeaf7333c4954c752122261db7520f7bf4",
    "files": [
      "README.md",
      "SECURITY.md",
      "docs/security/2021-introspection-schema-xss.md",
      "packages/graphiql/README.md",
      "packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/package.json",
      "packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js",
      "yarn.lock"
    ],
    "message": "Merge pull request from GHSA-x4r7-m2q9-69c8\n\nThis change fixes an XSS vulnerability that has been present since the first\ncommit of GraphiQL when used with an untrusted GraphQL server. It applies three\nstrategies to fix via defense-in-depth: HTML escaping a string in a contexts\nthat uses innerHTML; validating incoming schemas with graphql-js validateSchema;\nand updating markdown-it to the latest version.\n\nSee docs/security/2021-introspection-schema-xss.md for more details.\n\nCo-authored-by: Rikki <rikki.schulte@gmail.com>",
    "before_after_code_files": [
      "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
      "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:   it('Executes a GraphQL query over HTTP that has the expected result', () => {",
      "45:     cy.assertQueryResult({ query: testQuery }, mockSuccess);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:   it('Shows the expected error when the schema is invalid', () => {",
      "48:     cy.visit(`/?bad=true`);",
      "49:     cy.assertResult({",
      "50:       errors: [",
      "51:         {",
      "52:           message:",
      "53:             'Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"<img src=x onerror=alert(document.domain)>\" does not.',",
      "54:         },",
      "55:       ],",
      "56:     });",
      "57:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts": [
      "File: packages/graphiql/cypress/support/commands.ts -> packages/graphiql/cypress/support/commands.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:   type MockResult =",
      "20:     | { data: any }",
      "21:     | { data: any; hasNext?: boolean }",
      "23:   interface Chainable<Subject = any> {",
      "",
      "[Removed Lines]",
      "22:     | { error: any[] };",
      "",
      "[Added Lines]",
      "22:     | { error: any[] }",
      "23:     | { errors: any[] };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     visitWithOp(op: Op): Chainable<Element>;",
      "32:     clickPrettify(): Chainable<Element>;",
      "33:     assertHasValues(op: Op): Chainable<Element>;",
      "34:     assertQueryResult(",
      "35:       op: Op,",
      "36:       expectedResult: MockResult,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:     assertResult(result: MockResult): Chainable<Element>;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:     expect(value).to.deep.equal(JSON.stringify(mockSuccess, null, 2));",
      "92:   });",
      "93: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "97: Cypress.Commands.add('assertResult', (expectedResult, timeout = 200) => {",
      "98:   cy.wait(timeout);",
      "99:   cy.window().then(w => {",
      "101:     const value = w.g.resultComponent.viewer.getValue();",
      "102:     expect(value).to.deep.equal(JSON.stringify(expectedResult, null, 2));",
      "103:   });",
      "104: });",
      "",
      "---------------"
    ],
    "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js": [
      "File: packages/graphiql/resources/renderExample.js -> packages/graphiql/resources/renderExample.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:   history.replaceState(null, null, newSearch);",
      "92: }",
      "",
      "[Removed Lines]",
      "94: const isDev = window.location.hostname.match(/localhost$/);",
      "95: const api = isDev ? '/graphql' : '/.netlify/functions/schema-demo';",
      "",
      "[Added Lines]",
      "94: function getSchemaUrl() {",
      "95:   const isDev = window.location.hostname.match(/localhost$/);",
      "97:   if (isDev) {",
      "99:     if (parameters.bad && parameters.bad === 'true') {",
      "100:       return '/bad/graphql';",
      "101:     } else {",
      "102:       return '/graphql';",
      "103:     }",
      "104:   }",
      "105:   return '/.netlify/functions/schema-demo';",
      "106: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101: ReactDOM.render(",
      "102:   React.createElement(GraphiQL, {",
      "104:     query: parameters.query,",
      "105:     variables: parameters.variables,",
      "106:     headers: parameters.headers,",
      "",
      "[Removed Lines]",
      "103:     fetcher: GraphiQL.createFetcher({ url: api }),",
      "",
      "[Added Lines]",
      "114:     fetcher: GraphiQL.createFetcher({ url: getSchemaUrl() }),",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
      "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import React from 'react';",
      "10: import { FieldType } from './DocExplorer/types';",
      "12: import FieldDoc from './DocExplorer/FieldDoc';",
      "",
      "[Removed Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType } from 'graphql';",
      "",
      "[Added Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType, GraphQLError } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: type DocExplorerProps = {",
      "31:   schema?: GraphQLSchema | null;",
      "32: };",
      "34: type DocExplorerState = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:   ) {",
      "69:     return (",
      "70:       this.props.schema !== nextProps.schema ||",
      "72:     );",
      "73:   }",
      "75:   render() {",
      "77:     const navStack = this.state.navStack;",
      "78:     const navItem = navStack[navStack.length - 1];",
      "80:     let content;",
      "83:       content = (",
      "84:         <div className=\"spinner-container\">",
      "",
      "[Removed Lines]",
      "71:       this.state.navStack !== nextState.navStack",
      "76:     const { schema } = this.props;",
      "81:     if (schema === undefined) {",
      "",
      "[Added Lines]",
      "72:       this.state.navStack !== nextState.navStack ||",
      "73:       this.props.schemaErrors !== nextProps.schemaErrors",
      "78:     const { schema, schemaErrors } = this.props;",
      "83:     if (schemaErrors) {",
      "84:       content = (",
      "85:         <div className=\"error-container\">{'Error fetching schema'}</div>",
      "86:       );",
      "87:     } else if (schema === undefined) {",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
      "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:   ValidationRule,",
      "24:   FragmentDefinitionNode,",
      "25:   DocumentNode,",
      "26: } from 'graphql';",
      "27: import copyToClipboard from 'copy-to-clipboard';",
      "28: import { getFragmentDependenciesForAST } from 'graphql-language-service-utils';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26:   GraphQLError,",
      "27:   formatError as formatGraphQLError,",
      "28:   GraphQLFormattedError,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66: } from '@graphiql/toolkit';",
      "67: import HistoryStore from '../utility/HistoryStore';",
      "69: const DEFAULT_DOC_EXPLORER_WIDTH = 350;",
      "71: const majorVersion = parseInt(React.version.slice(0, 2), 10);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72: import { validateSchema } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95:   additionalContent?: React.ReactNode;",
      "96: };",
      "98: export type GraphiQLProps = {",
      "99:   fetcher: Fetcher;",
      "100:   schema?: GraphQLSchema;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103: export type GenericError =",
      "104:   | Error",
      "105:   | string",
      "106:   | readonly Error[]",
      "107:   | readonly string[]",
      "108:   | GraphQLError",
      "109:   | readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "121:   editorTheme?: string;",
      "122:   onToggleHistory?: (historyPaneOpen: boolean) => void;",
      "123:   ResultsTooltip?: typeof Component | FunctionComponent;",
      "124:   readOnly?: boolean;",
      "125:   docExplorerOpen?: boolean;",
      "126:   toolbar?: GraphiQLToolbarConfig;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "140:   dangerouslyAssumeSchemaIsValid?: boolean;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "143:   headerEditorEnabled: boolean;",
      "144:   shouldPersistHeaders: boolean;",
      "145:   historyPaneOpen: boolean;",
      "146:   docExplorerWidth: number;",
      "147:   isWaitingForResponse: boolean;",
      "148:   subscription?: Unsubscribable | null;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "152:   maxHistoryLength: number;",
      "153: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "173: const stringify = (obj: unknown): string => JSON.stringify(obj, null, 2);",
      "175: const formatSingleError = (error: Error): Error => ({",
      "176:   ...error,",
      "178:   message: error.message,",
      "179:   stack: error.stack,",
      "180: });",
      "182: type InputError = Error | GraphQLError | string;",
      "184: const handleSingleError = (",
      "185:   error: InputError,",
      "186: ): GraphQLFormattedError | Error | string => {",
      "187:   if (error instanceof GraphQLError) {",
      "188:     return formatGraphQLError(error);",
      "189:   }",
      "190:   if (error instanceof Error) {",
      "191:     return formatSingleError(error);",
      "192:   }",
      "193:   return error;",
      "194: };",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "166:     return JSON.stringify(result, null, 2);",
      "167:   }",
      "177:   _editorQueryID = 0;",
      "",
      "[Removed Lines]",
      "169:   static formatError(rawError: Error) {",
      "170:     const result = Array.isArray(rawError)",
      "171:       ? rawError.map(formatSingleError)",
      "172:       : formatSingleError(rawError);",
      "173:     return JSON.stringify(result, null, 2);",
      "174:   }",
      "",
      "[Added Lines]",
      "210:   static formatError = (error: GenericError): string => {",
      "211:     if (Array.isArray(error)) {",
      "212:       return stringify({",
      "213:         errors: error.map((e: InputError) => handleSingleError(e)),",
      "214:       });",
      "215:     }",
      "217:     return stringify({ errors: handleSingleError(error) });",
      "218:   };",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "266:     const headerEditorEnabled = props.headerEditorEnabled ?? false;",
      "267:     const shouldPersistHeaders = props.shouldPersistHeaders ?? false;",
      "270:     this.state = {",
      "272:       query,",
      "273:       variables: variables as string,",
      "274:       headers: headers as string,",
      "275:       operationName,",
      "276:       docExplorerOpen,",
      "278:       editorFlex: Number(this._storage.get('editorFlex')) || 1,",
      "279:       secondaryEditorOpen,",
      "280:       secondaryEditorHeight:",
      "",
      "[Removed Lines]",
      "271:       schema: props.schema,",
      "277:       response: props.response,",
      "",
      "[Added Lines]",
      "313:     let schema = props.schema;",
      "314:     let response = props.response;",
      "315:     let schemaErrors: readonly GraphQLError[] | undefined = undefined;",
      "316:     if (schema && !this.props.dangerouslyAssumeSchemaIsValid) {",
      "317:       const validationErrors = validateSchema(schema);",
      "318:       if (validationErrors && validationErrors.length > 0) {",
      "321:         response = GraphiQL.formatError(validationErrors);",
      "322:         schema = undefined;",
      "323:         schemaErrors = validationErrors;",
      "324:       }",
      "325:     }",
      "329:       schema,",
      "335:       schemaErrors,",
      "336:       response,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "357:         nextQuery !== this.state.query ||",
      "358:         nextOperationName !== this.state.operationName)",
      "359:     ) {",
      "360:       const updatedQueryAttributes = this._updateQueryFacts(",
      "361:         nextQuery,",
      "362:         nextOperationName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:       if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "420:         const validationErrors = validateSchema(nextSchema);",
      "421:         if (validationErrors && validationErrors.length > 0) {",
      "422:           this.handleSchemaErrors(validationErrors);",
      "423:           nextSchema = undefined;",
      "424:         }",
      "425:       }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "665:               ref={c => {",
      "666:                 this.docExplorerComponent = c;",
      "667:               }}",
      "668:               schema={this.state.schema}>",
      "669:               <button",
      "670:                 className=\"docExplorerHide\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "735:               schemaErrors={this.state.schemaErrors}",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "871:         }",
      "873:         if (typeof result !== 'string' && 'data' in result) {",
      "877:         } else {",
      "878:           const responseString =",
      "879:             typeof result === 'string' ? result : GraphiQL.formatResult(result);",
      "885:         }",
      "886:       })",
      "887:       .catch(error => {",
      "892:       });",
      "893:   }",
      "895:   private async _fetchQuery(",
      "896:     query: string,",
      "897:     variables: string,",
      "",
      "[Removed Lines]",
      "874:           const schema = buildClientSchema(result.data);",
      "875:           const queryFacts = getOperationFacts(schema, this.state.query);",
      "876:           this.safeSetState({ schema, ...queryFacts });",
      "880:           this.safeSetState({",
      "882:             schema: undefined,",
      "883:             response: responseString,",
      "884:           });",
      "888:         this.safeSetState({",
      "889:           schema: undefined,",
      "890:           response: error ? GraphiQL.formatError(error) : undefined,",
      "891:         });",
      "",
      "[Added Lines]",
      "942:           let schema: GraphQLSchema | undefined = buildClientSchema(",
      "943:             result.data,",
      "944:           );",
      "945:           if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "946:             const errors = validateSchema(schema);",
      "948:             if (errors && errors.length > 0) {",
      "949:               schema = undefined;",
      "950:               this.handleSchemaErrors(errors);",
      "951:             }",
      "952:           }",
      "953:           if (schema) {",
      "954:             const queryFacts = getOperationFacts(schema, this.state.query);",
      "955:             this.safeSetState({",
      "956:               schema,",
      "957:               ...queryFacts,",
      "958:               schemaErrors: undefined,",
      "959:             });",
      "960:           }",
      "965:           this.handleSchemaErrors([responseString]);",
      "969:         this.handleSchemaErrors([error]);",
      "973:   private handleSchemaErrors(",
      "974:     schemaErrors: readonly GraphQLError[] | readonly string[],",
      "975:   ) {",
      "976:     this.safeSetState({",
      "977:       response: schemaErrors ? GraphiQL.formatError(schemaErrors) : undefined,",
      "978:       schema: undefined,",
      "979:       schemaErrors,",
      "980:     });",
      "981:   }",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "908:       jsonVariables =",
      "909:         variables && variables.trim() !== '' ? JSON.parse(variables) : null;",
      "910:     } catch (error) {",
      "912:     }",
      "914:     if (typeof jsonVariables !== 'object') {",
      "",
      "[Removed Lines]",
      "911:       throw new Error(`Variables are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "999:       throw new Error(",
      "1000:         `Variables are invalid JSON: ${(error as Error).message}.`,",
      "1001:       );",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "919:       jsonHeaders =",
      "920:         headers && headers.trim() !== '' ? JSON.parse(headers) : null;",
      "921:     } catch (error) {",
      "923:     }",
      "925:     if (typeof jsonHeaders !== 'object') {",
      "",
      "[Removed Lines]",
      "922:       throw new Error(`Headers are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "1012:       throw new Error(`Headers are invalid JSON: ${(error as Error).message}.`);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1008:             } catch (error) {",
      "1009:               this.safeSetState({",
      "1010:                 isWaitingForResponse: false,",
      "1012:                 subscription: null,",
      "1013:               });",
      "1014:             }",
      "",
      "[Removed Lines]",
      "1011:                 response: error ? GraphiQL.formatError(error) : undefined,",
      "",
      "[Added Lines]",
      "1101:                 response: error",
      "1102:                   ? GraphiQL.formatError(error as Error)",
      "1103:                   : undefined,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1167:     } catch (error) {",
      "1168:       this.setState({",
      "1169:         isWaitingForResponse: false,",
      "1171:       });",
      "1172:     }",
      "1173:   };",
      "",
      "[Removed Lines]",
      "1170:         response: error.message,",
      "",
      "[Added Lines]",
      "1262:         response: (error as Error).message,",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1699: }",
      "1700: GraphiQLFooter.displayName = 'GraphiQLFooter';",
      "1709: const defaultQuery = `# Welcome to GraphiQL",
      "1710: #",
      "1711: # GraphiQL is an in-browser tool for writing, validating, and",
      "",
      "[Removed Lines]",
      "1702: const formatSingleError = (error: Error) => ({",
      "1703:   ...error,",
      "1705:   message: error.message,",
      "1706:   stack: error.stack,",
      "1707: });",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts": [
      "File: packages/graphiql/src/utility/onHasCompletion.ts -> packages/graphiql/src/utility/onHasCompletion.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:   GraphQLType,",
      "13:   GraphQLField,",
      "14: } from 'graphql';",
      "15: import MD from 'markdown-it';",
      "17: const md = new MD();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: import escapeHTML from 'escape-html';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:   if (type instanceof GraphQLList) {",
      "109:     return `[${renderType(type.ofType)}]`;",
      "110:   }",
      "112: }",
      "",
      "[Removed Lines]",
      "111:   return `<a class=\"typeName\">${type.name}</a>`;",
      "",
      "[Added Lines]",
      "112:   return `<a class=\"typeName\">${escapeHTML(type.name)}</a>`;",
      "",
      "---------------"
    ],
    "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js": [
      "File: packages/graphiql/test/bad-schema.js -> packages/graphiql/test/bad-schema.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: const { buildClientSchema } = require('graphql');",
      "3: module.exports.schema = {",
      "4:   __schema: {",
      "5:     queryType: {",
      "6:       name: 'Query',",
      "7:     },",
      "8:     mutationType: null,",
      "9:     subscriptionType: null,",
      "10:     types: [",
      "11:       {",
      "12:         kind: 'OBJECT',",
      "13:         name: 'Query',",
      "14:         description: null,",
      "15:         fields: [",
      "16:           {",
      "17:             name: 'user',",
      "18:             description: null,",
      "19:             args: [",
      "20:               {",
      "21:                 name: 'id',",
      "22:                 description: null,",
      "23:                 type: {",
      "24:                   kind: 'NON_NULL',",
      "25:                   name: null,",
      "26:                   ofType: {",
      "27:                     kind: 'SCALAR',",
      "28:                     name: 'ID',",
      "29:                     ofType: null,",
      "30:                   },",
      "31:                 },",
      "32:                 defaultValue: null,",
      "33:               },",
      "34:             ],",
      "35:             type: {",
      "36:               kind: 'OBJECT',",
      "37:               name: '<img src=x onerror=alert(document.domain)>',",
      "38:               ofType: null,",
      "39:             },",
      "40:             isDeprecated: false,",
      "41:             deprecationReason: null,",
      "42:           },",
      "43:         ],",
      "44:         inputFields: null,",
      "45:         interfaces: [],",
      "46:         enumValues: null,",
      "47:         possibleTypes: null,",
      "48:       },",
      "49:       {",
      "50:         kind: 'SCALAR',",
      "51:         name: 'ID',",
      "52:         description: '',",
      "53:         fields: null,",
      "54:         inputFields: null,",
      "55:         interfaces: null,",
      "56:         enumValues: null,",
      "57:         possibleTypes: null,",
      "58:       },",
      "59:       {",
      "60:         kind: 'OBJECT',",
      "61:         name: '<img src=x onerror=alert(document.domain)>',",
      "62:         description: null,",
      "63:         fields: [",
      "64:           {",
      "65:             name: 'name',",
      "66:             description: null,",
      "67:             args: [],",
      "68:             type: {",
      "69:               kind: 'NON_NULL',",
      "70:               name: null,",
      "71:               ofType: {",
      "72:                 kind: 'SCALAR',",
      "73:                 name: 'String',",
      "74:                 ofType: null,",
      "75:               },",
      "76:             },",
      "77:             isDeprecated: false,",
      "78:             deprecationReason: null,",
      "79:           },",
      "80:         ],",
      "81:         inputFields: null,",
      "82:         interfaces: [],",
      "83:         enumValues: null,",
      "84:         possibleTypes: null,",
      "85:       },",
      "86:       {",
      "87:         kind: 'SCALAR',",
      "88:         name: 'String',",
      "89:         description: '',",
      "90:         fields: null,",
      "91:         inputFields: null,",
      "92:         interfaces: null,",
      "93:         enumValues: null,",
      "94:         possibleTypes: null,",
      "95:       },",
      "96:     ],",
      "97:     directives: [],",
      "98:   },",
      "99: };",
      "",
      "---------------"
    ],
    "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js": [
      "File: packages/graphiql/test/beforeDevServer.js -> packages/graphiql/test/beforeDevServer.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: const path = require('path');",
      "10: const { graphqlHTTP } = require('express-graphql');",
      "11: const schema = require('./schema');",
      "13: module.exports = function beforeDevServer(app, _server, _compiler) {",
      "15:   app.post('/graphql', graphqlHTTP({ schema }));",
      "17:   app.get(",
      "18:     '/graphql',",
      "19:     graphqlHTTP({",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: const { schema: badSchema } = require('./bad-schema');",
      "18:   app.post('/bad/graphql', (_req, res, next) => {",
      "19:     res.json({ data: badSchema });",
      "20:     next();",
      "21:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js": [
      "File: packages/graphiql/test/e2e-server.js -> packages/graphiql/test/e2e-server.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: const path = require('path');",
      "11: const { graphqlHTTP } = require('express-graphql');",
      "12: const schema = require('./schema');",
      "14: const app = express();",
      "17: app.post('/graphql', graphqlHTTP({ schema }));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: const { schema: badSchema } = require('./bad-schema');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23:   }),",
      "24: );",
      "26: app.use(express.static(path.resolve(__dirname, '../')));",
      "28: app.listen(process.env.PORT || 0, function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: app.post('/bad/graphql', (_req, res, next) => {",
      "27:   res.json({ data: badSchema });",
      "28:   next();",
      "29: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "3288:   integrity sha512-6U71C2Wp7r5XtFtQzYrW5iKFT67OixrSxjI4MptCHzdSVlgabczzqLe0ZSgnub/5Kp4hSbpDB1tMytZY9pwxxA==",
      "3290: \"@graphiql/toolkit@file:packages/graphiql-toolkit\":",
      "3292:   dependencies:",
      "3293:     \"@n1ru4l/push-pull-async-iterable-iterator\" \"^3.0.0\"",
      "3294:     graphql-ws \"^4.9.0\"",
      "",
      "[Removed Lines]",
      "3291:   version \"0.3.0\"",
      "",
      "[Added Lines]",
      "3291:   version \"0.3.2\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4881:   dependencies:",
      "4882:     \"@types/node\" \"*\"",
      "4884: \"@types/eslint-visitor-keys@^1.0.0\":",
      "4885:   version \"1.0.0\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz#1ee30d79544ca84d68d4b3cdb0af4f205663dd2d\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4884: \"@types/escape-html@^1.0.1\":",
      "4885:   version \"1.0.1\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/escape-html/-/escape-html-1.0.1.tgz#b19b4646915f0ae2c306bf984dc0a59c5cfc97ba\"",
      "4887:   integrity sha512-4mI1FuUUZiuT95fSVqvZxp/ssQK9zsa86S43h9x3zPOSU9BBJ+BfDkXwuaU7BfsD+e7U0/cUUfJFk3iW2M4okA==",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5021:   dependencies:",
      "5022:     \"@types/linkify-it\" \"*\"",
      "5024: \"@types/mime@^1\":",
      "5025:   version \"1.3.2\"",
      "5026:   resolved \"https://registry.yarnpkg.com/@types/mime/-/mime-1.3.2.tgz#93e25bf9ee75fe0fd80b594bc4feb0e862111b5a\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029: \"@types/markdown-it@^12.2.3\":",
      "5030:   version \"12.2.3\"",
      "5031:   resolved \"https://registry.yarnpkg.com/@types/markdown-it/-/markdown-it-12.2.3.tgz#0d6f6e5e413f8daaa26522904597be3d6cd93b51\"",
      "5032:   integrity sha512-GKMHFfv3458yYy+v/N8gjufHO6MSZKCOXpZc5GXIWWy8uldwfmPn98vp81gZ5f9SVw8YYBctgfJ22a2d7AOMeQ==",
      "5033:   dependencies:",
      "5034:     \"@types/linkify-it\" \"*\"",
      "5035:     \"@types/mdurl\" \"*\"",
      "5037: \"@types/mdurl@*\":",
      "5038:   version \"1.0.2\"",
      "5039:   resolved \"https://registry.yarnpkg.com/@types/mdurl/-/mdurl-1.0.2.tgz#e2ce9d83a613bacf284c7be7d491945e39e1f8e9\"",
      "5040:   integrity sha512-eC4U9MlIcu2q0KQmXszyn5Akca/0jrQmwDRgpAMJai7qBWq4amIQhZyNau4VYGtCeALvW1/NtjzJJ567aZxfKA==",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6121:   dependencies:",
      "6122:     sprintf-js \"~1.0.2\"",
      "6124: aria-query@^3.0.0:",
      "6125:   version \"3.0.0\"",
      "6126:   resolved \"https://registry.yarnpkg.com/aria-query/-/aria-query-3.0.0.tgz#65b3fcc1ca1155a8c9ae64d6eee297f15d5133cc\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6142: argparse@^2.0.1:",
      "6143:   version \"2.0.1\"",
      "6144:   resolved \"https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38\"",
      "6145:   integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "9586:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.0.3.tgz#5c487e5742ab93c15abb5da22759b8590ec03b7f\"",
      "9587:   integrity sha512-MyoZ0jgnLvB2X3Lg5HqpFmn1kybDiIfEQmKzTb5apr51Rb+T3KdmMiqa70T+bhGnyv7bQ6WMj2QMHpGMmlrUYQ==",
      "9589: envinfo@^7.3.1:",
      "9590:   version \"7.8.1\"",
      "9591:   resolved \"https://registry.yarnpkg.com/envinfo/-/envinfo-7.8.1.tgz#06377e3e5f4d379fea7ac592d5ad8927e0c4d475\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9612: entities@~2.1.0:",
      "9613:   version \"2.1.0\"",
      "9614:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.1.0.tgz#992d3129cf7df6870b96c57858c249a120f8b8b5\"",
      "9615:   integrity sha512-hCx1oky9PFrJ611mf0ifBLBRW8lUUVRlFolb5gWRfIELabBlbp9xZvrqZLZAs+NxFnbfQoeGd8wDkygjg7U85w==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9751:   resolved \"https://registry.yarnpkg.com/escalade/-/escalade-3.1.1.tgz#d8cfdc7000965c5a0174b4a82eaa5c0552742e40\"",
      "9752:   integrity sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "9755:   version \"1.0.3\"",
      "9756:   resolved \"https://registry.yarnpkg.com/escape-html/-/escape-html-1.0.3.tgz#0258eae4d3d0c0974de1c169188ef0051d1d1988\"",
      "9757:   integrity sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=",
      "",
      "[Removed Lines]",
      "9754: escape-html@~1.0.3:",
      "",
      "[Added Lines]",
      "9782: escape-html@^1.0.3, escape-html@~1.0.3:",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "11512:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
      "11514: \"graphiql@file:packages/graphiql\":",
      "11516:   dependencies:",
      "11518:     codemirror \"^5.58.2\"",
      "11520:     copy-to-clipboard \"^3.2.0\"",
      "11521:     dset \"^3.1.0\"",
      "11522:     entities \"^2.0.0\"",
      "11526: graphql-config@^3.0.2:",
      "11527:   version \"3.0.3\"",
      "",
      "[Removed Lines]",
      "11515:   version \"1.4.3\"",
      "11517:     \"@graphiql/toolkit\" \"^0.3.0\"",
      "11519:     codemirror-graphql \"^1.0.0\"",
      "11523:     graphql-language-service \"^3.1.5\"",
      "11524:     markdown-it \"^10.0.0\"",
      "",
      "[Added Lines]",
      "11543:   version \"1.4.6\"",
      "11545:     \"@graphiql/toolkit\" \"^0.3.2\"",
      "11547:     codemirror-graphql \"^1.0.3\"",
      "11551:     escape-html \"^1.0.3\"",
      "11552:     graphql-language-service \"^3.1.6\"",
      "11553:     markdown-it \"^12.2.0\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "14280:   dependencies:",
      "14281:     uc.micro \"^1.0.1\"",
      "14283: lint-staged@^10.1.2:",
      "14284:   version \"10.1.3\"",
      "14285:   resolved \"https://registry.yarnpkg.com/lint-staged/-/lint-staged-10.1.3.tgz#da27713d3ac519da305381b4de87d5f866b1d2f1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14312: linkify-it@^3.0.1:",
      "14313:   version \"3.0.3\"",
      "14314:   resolved \"https://registry.yarnpkg.com/linkify-it/-/linkify-it-3.0.3.tgz#a98baf44ce45a550efb4d49c769d07524cc2fa2e\"",
      "14315:   integrity sha512-ynTsyrFSdE5oZ/O9GEf00kPngmOfVwazR5GKDq6EYfhlpFug3J2zybX56a2PRRpc9P+FuSoGNAwjlbDs9jJBPQ==",
      "14316:   dependencies:",
      "14317:     uc.micro \"^1.0.1\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "14711:     mdurl \"^1.0.1\"",
      "14712:     uc.micro \"^1.0.5\"",
      "14714: markdown-to-jsx@^6.11.4:",
      "14715:   version \"6.11.4\"",
      "14716:   resolved \"https://registry.yarnpkg.com/markdown-to-jsx/-/markdown-to-jsx-6.11.4.tgz#b4528b1ab668aef7fe61c1535c27e837819392c5\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14750: markdown-it@^12.2.0:",
      "14751:   version \"12.2.0\"",
      "14752:   resolved \"https://registry.yarnpkg.com/markdown-it/-/markdown-it-12.2.0.tgz#091f720fd5db206f80de7a8d1f1a7035fd0d38db\"",
      "14753:   integrity sha512-Wjws+uCrVQRqOoJvze4HCqkKl1AsSh95iFAeQDwnyfxM09divCBSXlDR1uTvyUP3Grzpn4Ru8GeCxYPM8vkCQg==",
      "14754:   dependencies:",
      "14755:     argparse \"^2.0.1\"",
      "14756:     entities \"~2.1.0\"",
      "14757:     linkify-it \"^3.0.1\"",
      "14758:     mdurl \"^1.0.1\"",
      "14759:     uc.micro \"^1.0.5\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c97cf63f0d6a8c27265905af1a2da243925ff01",
      "candidate_info": {
        "commit_hash": "3c97cf63f0d6a8c27265905af1a2da243925ff01",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/3c97cf63f0d6a8c27265905af1a2da243925ff01",
        "files": [
          ".changeset/light-rocks-smell.md",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "yarn.lock"
        ],
        "message": "fix: A query request was sent for subscriptions after tab change (#2312)\n\n* fix: A query request was sent for subscriptions after tab change\n\n* added the changeset",
        "before_after_code_files": [
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:     this.handleStopQuery();",
          "779:     this.setState(",
          "780:       state => stateOnSelectTabReducer(index, state),",
          "782:     );",
          "783:   };",
          "",
          "[Removed Lines]",
          "781:       this.persistTabsState,",
          "",
          "[Added Lines]",
          "781:       () => {",
          "782:         this.persistTabsState();",
          "783:         if (this.state.query) {",
          "784:           this.handleEditQuery(this.state.query);",
          "785:         }",
          "786:       },",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "7439:     tunnel \"0.0.6\"",
          "7440:     typed-rest-client \"^1.8.4\"",
          "7452: babel-code-frame@^6.22.0:",
          "7453:   version \"6.26.0\"",
          "7454:   resolved \"https://registry.yarnpkg.com/babel-code-frame/-/babel-code-frame-6.26.0.tgz#63fd43f7dc1e3bb7ce35947db8fe369a3f58c74b\"",
          "",
          "[Removed Lines]",
          "7442: azure-devops-node-api@^7.2.0:",
          "7443:   version \"7.2.0\"",
          "7444:   resolved \"https://registry.yarnpkg.com/azure-devops-node-api/-/azure-devops-node-api-7.2.0.tgz#131d4e01cf12ebc6e45569b5e0c5c249e4114d6d\"",
          "7445:   integrity sha512-pMfGJ6gAQ7LRKTHgiRF+8iaUUeGAI0c8puLaqHLc7B8AR7W6GJLozK9RFeUHFjEGybC9/EB3r67WPd7e46zQ8w==",
          "7446:   dependencies:",
          "7447:     os \"0.1.1\"",
          "7448:     tunnel \"0.0.4\"",
          "7449:     typed-rest-client \"1.2.0\"",
          "7450:     underscore \"1.8.3\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8726:     domhandler \"^4.2.0\"",
          "8727:     domutils \"^2.7.0\"",
          "8730:   version \"1.0.0-rc.10\"",
          "8731:   resolved \"https://registry.yarnpkg.com/cheerio/-/cheerio-1.0.0-rc.10.tgz#2ba3dcdfcc26e7956fc1f440e61d51c643379f3e\"",
          "8732:   integrity sha512-g0J0q/O6mW8z5zxQ3A8E8J1hUgp4SMOvEoW/x84OwyHKe/Zccz83PVT4y5Crcr530FV6NgmKI1qvGTKVl9XXVw==",
          "",
          "[Removed Lines]",
          "8729: cheerio@^1.0.0-rc.1, cheerio@^1.0.0-rc.9:",
          "",
          "[Added Lines]",
          "8719: cheerio@^1.0.0-rc.9:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9109:   resolved \"https://registry.yarnpkg.com/comma-separated-tokens/-/comma-separated-tokens-1.0.8.tgz#632b80b6117867a158f1080ad498b2fbe7e3f5ea\"",
          "9110:   integrity sha512-GHuDRO12Sypu2cV70d1dkA2EUmXHgntrzbpvOB+Qy+49ypNfGgFQIC2fhhXbnyrJRynDCAARsT7Ou0M6hirpfw==",
          "9113:   version \"2.20.3\"",
          "9114:   resolved \"https://registry.yarnpkg.com/commander/-/commander-2.20.3.tgz#fd485e84c03eb4881c20722ba48035e8531aeb33\"",
          "9115:   integrity sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
          "",
          "[Removed Lines]",
          "9112: commander@^2.18.0, commander@^2.19.0, commander@^2.20.0, commander@^2.8.1, commander@~2.20.3:",
          "",
          "[Added Lines]",
          "9102: commander@^2.18.0, commander@^2.19.0, commander@^2.20.0, commander@~2.20.3:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10092:   resolved \"https://registry.yarnpkg.com/delegates/-/delegates-1.0.0.tgz#84c6e159b81904fdca59a0ef44cd870d31250f9a\"",
          "10093:   integrity sha1-hMbhWbgZBP3KWaDvRM2HDTElD5o=",
          "10100: depd@~1.1.2:",
          "10101:   version \"1.1.2\"",
          "10102:   resolved \"https://registry.yarnpkg.com/depd/-/depd-1.1.2.tgz#9bcd52e14c097763e749b274c4346ed2e560b5a9\"",
          "",
          "[Removed Lines]",
          "10095: denodeify@^1.2.1:",
          "10096:   version \"1.2.1\"",
          "10097:   resolved \"https://registry.yarnpkg.com/denodeify/-/denodeify-1.2.1.tgz#3a36287f5034e699e7577901052c2e6c94251631\"",
          "10098:   integrity sha1-OjYof1A05pnnV3kBBSwubJQlFjE=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "10166:     address \"^1.0.1\"",
          "10167:     debug \"^2.6.0\"",
          "10174: diff-sequences@^24.9.0:",
          "10175:   version \"24.9.0\"",
          "10176:   resolved \"https://registry.yarnpkg.com/diff-sequences/-/diff-sequences-24.9.0.tgz#5715d6244e2aa65f48bba0bc972db0b0b11e95b5\"",
          "",
          "[Removed Lines]",
          "10169: didyoumean@^1.2.1:",
          "10170:   version \"1.2.2\"",
          "10171:   resolved \"https://registry.yarnpkg.com/didyoumean/-/didyoumean-1.2.2.tgz#989346ffe9e839b4555ecf5666edea0d3e8ad037\"",
          "10172:   integrity sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "10581:   dependencies:",
          "10582:     ansi-colors \"^4.1.1\"",
          "10585:   version \"1.1.2\"",
          "10586:   resolved \"https://registry.yarnpkg.com/entities/-/entities-1.1.2.tgz#bdfa735299664dfafd34529ed4f8522a275fea56\"",
          "10587:   integrity sha512-f2LZMYl1Fzu7YSBKg+RoROelpOaNrcGmE9AZubeDfrCEia483oW4MI4VyFd5VNHIgQ/7qm1I0wUHK1eJnn2y2w==",
          "",
          "[Removed Lines]",
          "10584: entities@^1.1.1, entities@^1.1.2, entities@~1.1.1:",
          "",
          "[Added Lines]",
          "10564: entities@^1.1.1, entities@^1.1.2:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "12557:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
          "12559: \"graphiql@file:packages/graphiql\":",
          "12561:   dependencies:",
          "12562:     \"@graphiql/toolkit\" \"^0.4.3\"",
          "12563:     codemirror \"^5.58.2\"",
          "12565:     copy-to-clipboard \"^3.2.0\"",
          "12566:     entities \"^2.0.0\"",
          "12567:     escape-html \"^1.0.3\"",
          "12569:     markdown-it \"^12.2.0\"",
          "12570:     set-value \"^4.1.0\"",
          "",
          "[Removed Lines]",
          "12560:   version \"1.8.4\"",
          "12564:     codemirror-graphql \"^1.2.15\"",
          "12568:     graphql-language-service \"^5.0.1\"",
          "",
          "[Added Lines]",
          "12540:   version \"1.8.5\"",
          "12544:     codemirror-graphql \"^1.2.16\"",
          "12548:     graphql-language-service \"^5.0.2\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "15729:   resolved \"https://registry.yarnpkg.com/lodash.uniq/-/lodash.uniq-4.5.0.tgz#d0225373aeb652adc1bc82e4945339a842754773\"",
          "15730:   integrity sha1-0CJTc662Uq3BvILklFM5qEJ1R3M=",
          "15733:   version \"4.17.21\"",
          "15734:   resolved \"https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c\"",
          "15735:   integrity sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
          "",
          "[Removed Lines]",
          "15732: lodash@^4.17.10, lodash@^4.17.11, lodash@^4.17.12, lodash@^4.17.13, lodash@^4.17.14, lodash@^4.17.15, lodash@^4.17.19, lodash@^4.17.21, lodash@^4.7.0:",
          "",
          "[Added Lines]",
          "15712: lodash@^4.17.11, lodash@^4.17.12, lodash@^4.17.13, lodash@^4.17.14, lodash@^4.17.15, lodash@^4.17.19, lodash@^4.17.21, lodash@^4.7.0:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "15933:     mdurl \"^1.0.1\"",
          "15934:     uc.micro \"^1.0.5\"",
          "15947: markdown-to-jsx@^6.11.4:",
          "15948:   version \"6.11.4\"",
          "15949:   resolved \"https://registry.yarnpkg.com/markdown-to-jsx/-/markdown-to-jsx-6.11.4.tgz#b4528b1ab668aef7fe61c1535c27e837819392c5\"",
          "",
          "[Removed Lines]",
          "15936: markdown-it@^8.3.1:",
          "15937:   version \"8.4.2\"",
          "15938:   resolved \"https://registry.yarnpkg.com/markdown-it/-/markdown-it-8.4.2.tgz#386f98998dc15a37722aa7722084f4020bdd9b54\"",
          "15939:   integrity sha512-GcRz3AWTqSUphY3vsUqQSFMbgR38a4Lh3GWlHRh/7MRwz8mcu9n2IO7HOh+bXHrR9kOPDl5RNCaEsrneb+xhHQ==",
          "15940:   dependencies:",
          "15941:     argparse \"^1.0.7\"",
          "15942:     entities \"~1.1.1\"",
          "15943:     linkify-it \"^2.0.0\"",
          "15944:     mdurl \"^1.0.1\"",
          "15945:     uc.micro \"^1.0.5\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "17056:   resolved \"https://registry.yarnpkg.com/os-browserify/-/os-browserify-0.3.0.tgz#854373c7f5c2315914fc9bfc6bd8238fdda1ec27\"",
          "17057:   integrity sha1-hUNzx/XCMVkU/Jv8a9gjj92h7Cc=",
          "17060:   version \"1.0.2\"",
          "17061:   resolved \"https://registry.yarnpkg.com/os-homedir/-/os-homedir-1.0.2.tgz#ffbc4988336e0e833de0c168c7ef152121aa7fb3\"",
          "17062:   integrity sha1-/7xJiDNuDoM94MFox+8VISGqf7M=",
          "17065:   version \"1.0.2\"",
          "17066:   resolved \"https://registry.yarnpkg.com/os-tmpdir/-/os-tmpdir-1.0.2.tgz#bbe67406c79aa85c5cfec766fe5734555dfa1274\"",
          "17067:   integrity sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=",
          "17082: ospath@^1.2.2:",
          "17083:   version \"1.2.2\"",
          "17084:   resolved \"https://registry.yarnpkg.com/ospath/-/ospath-1.2.2.tgz#1276639774a3f8ef2572f7fe4280e0ea4550c07b\"",
          "",
          "[Removed Lines]",
          "17059: os-homedir@^1.0.0, os-homedir@^1.0.1:",
          "17064: os-tmpdir@^1.0.0, os-tmpdir@~1.0.1, os-tmpdir@~1.0.2:",
          "17069: os@0.1.1:",
          "17070:   version \"0.1.1\"",
          "17071:   resolved \"https://registry.yarnpkg.com/os/-/os-0.1.1.tgz#208845e89e193ad4d971474b93947736a56d13f3\"",
          "17072:   integrity sha1-IIhF6J4ZOtTZcUdLk5R3NqVtE/M=",
          "17074: osenv@^0.1.3:",
          "17075:   version \"0.1.5\"",
          "17076:   resolved \"https://registry.yarnpkg.com/osenv/-/osenv-0.1.5.tgz#85cdfafaeb28e8677f416e287592b5f3f49ea410\"",
          "17077:   integrity sha512-0CWcCECdMVc2Rw3U5w9ZjqX6ga6ubk1xDVKxtBQPK7wis/0F2r9T6k4ydGYhecl7YUBxBVxhL5oisPsNxAPe2g==",
          "17078:   dependencies:",
          "17079:     os-homedir \"^1.0.0\"",
          "17080:     os-tmpdir \"^1.0.0\"",
          "",
          "[Added Lines]",
          "17028: os-homedir@^1.0.1:",
          "17033: os-tmpdir@~1.0.2:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "21200:   resolved \"https://registry.yarnpkg.com/tiny-emitter/-/tiny-emitter-2.1.0.tgz#1d1a56edfc51c43e863cbb5382a72330e3555423\"",
          "21201:   integrity sha512-NB6Dk1A9xgQPMoGqC5CVXn123gWyte215ONT5Pp5a0yt4nlEoO1ZWeCwpncaekPHXO60i47ihFnZPiRPjRMq4Q==",
          "21210: tmp@^0.0.33:",
          "21211:   version \"0.0.33\"",
          "21212:   resolved \"https://registry.yarnpkg.com/tmp/-/tmp-0.0.33.tgz#6d34335889768d21b2bcda0aa277ced3b1bfadf9\"",
          "",
          "[Removed Lines]",
          "21203: tmp@0.0.29:",
          "21204:   version \"0.0.29\"",
          "21205:   resolved \"https://registry.yarnpkg.com/tmp/-/tmp-0.0.29.tgz#f25125ff0dd9da3ccb0c2dd371ee1288bb9128c0\"",
          "21206:   integrity sha1-8lEl/w3Z2jzLDC3Tce4SiLuRKMA=",
          "21207:   dependencies:",
          "21208:     os-tmpdir \"~1.0.1\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "21485:   dependencies:",
          "21486:     safe-buffer \"^5.0.1\"",
          "21493: tunnel@0.0.6:",
          "21494:   version \"0.0.6\"",
          "21495:   resolved \"https://registry.yarnpkg.com/tunnel/-/tunnel-0.0.6.tgz#72f1314b34a5b192db012324df2cc587ca47f92c\"",
          "",
          "[Removed Lines]",
          "21488: tunnel@0.0.4:",
          "21489:   version \"0.0.4\"",
          "21490:   resolved \"https://registry.yarnpkg.com/tunnel/-/tunnel-0.0.4.tgz#2d3785a158c174c9a16dc2c046ec5fc5f1742213\"",
          "21491:   integrity sha1-LTeFoVjBdMmhbcLARuxfxfF0IhM=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "21545:     media-typer \"0.3.0\"",
          "21546:     mime-types \"~2.1.24\"",
          "21556: typed-rest-client@^1.8.4:",
          "21557:   version \"1.8.6\"",
          "21558:   resolved \"https://registry.yarnpkg.com/typed-rest-client/-/typed-rest-client-1.8.6.tgz#d8facd6abd98cbd8ad14cccf056ca5cc306919d7\"",
          "",
          "[Removed Lines]",
          "21548: typed-rest-client@1.2.0:",
          "21549:   version \"1.2.0\"",
          "21550:   resolved \"https://registry.yarnpkg.com/typed-rest-client/-/typed-rest-client-1.2.0.tgz#723085d203f38d7d147271e5ed3a75488eb44a02\"",
          "21551:   integrity sha512-FrUshzZ1yxH8YwGR29PWWnfksLEILbWJydU7zfIRkyH7kAEzB62uMAl2WY6EyolWpLpVHeJGgQm45/MaruaHpw==",
          "21552:   dependencies:",
          "21553:     tunnel \"0.0.4\"",
          "21554:     underscore \"1.8.3\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "21634:   resolved \"https://registry.yarnpkg.com/unc-path-regex/-/unc-path-regex-0.1.2.tgz#e73dd3d7b0d7c5ed86fbac6b0ae7d8c6a69d50fa\"",
          "21635:   integrity sha1-5z3T17DXxe2G+6xrCufYxqadUPo=",
          "21642: underscore@^1.12.1:",
          "21643:   version \"1.13.2\"",
          "21644:   resolved \"https://registry.yarnpkg.com/underscore/-/underscore-1.13.2.tgz#276cea1e8b9722a8dbed0100a407dda572125881\"",
          "",
          "[Removed Lines]",
          "21637: underscore@1.8.3:",
          "21638:   version \"1.8.3\"",
          "21639:   resolved \"https://registry.yarnpkg.com/underscore/-/underscore-1.8.3.tgz#4f3fb53b106e6097fcf9cb4109f2a5e9bdfa5022\"",
          "21640:   integrity sha1-Tz+1OxBuYJf8+ctBCfKl6b36UCI=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "21804:   resolved \"https://registry.yarnpkg.com/urix/-/urix-0.1.0.tgz#da937f7a62e21fec1fd18d49b35c2935067a6c72\"",
          "21805:   integrity sha1-2pN/emLiH+wf0Y1Js1wpNQZ6bHI=",
          "21812: url-join@^4.0.1:",
          "21813:   version \"4.0.1\"",
          "21814:   resolved \"https://registry.yarnpkg.com/url-join/-/url-join-4.0.1.tgz#b642e21a2646808ffa178c4c5fda39844e12cde7\"",
          "",
          "[Removed Lines]",
          "21807: url-join@^1.1.0:",
          "21808:   version \"1.1.0\"",
          "21809:   resolved \"https://registry.yarnpkg.com/url-join/-/url-join-1.1.0.tgz#741c6c2f4596c4830d6718460920d0c92202dc78\"",
          "21810:   integrity sha1-dBxsL0WWxIMNZxhGCSDQySIC3Hg=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "22026:   resolved \"https://registry.yarnpkg.com/void-elements/-/void-elements-2.0.1.tgz#c066afb582bb1cb4128d60ea92392e94d5e9dbec\"",
          "22027:   integrity sha1-wGavtYK7HLQSjWDqkjkulNXp2+w=",
          "22056:   version \"2.7.0\"",
          "22057:   resolved \"https://registry.yarnpkg.com/vsce/-/vsce-2.7.0.tgz#7be8deebd1e673b996238d608e7f7324c98744ed\"",
          "22058:   integrity sha512-CKU34wrQlbKDeJCRBkd1a8iwF9EvNxcYMg9hAUH6AxFGR6Wo2IKWwt3cJIcusHxx6XdjDHWlfAS/fJN30uvVnA==",
          "",
          "[Removed Lines]",
          "22029: vsce-yarn-patch@^1.66.2:",
          "22030:   version \"1.66.2\"",
          "22031:   resolved \"https://registry.yarnpkg.com/vsce-yarn-patch/-/vsce-yarn-patch-1.66.2.tgz#b217a9d73ee715ad41ec44393a5d78ed0955ab44\"",
          "22032:   integrity sha512-IJjBF/WQWQvEIikI93qDEhiugjVFDgibqsBa2roawp5abeovPZ9/bzLt0b9AylBtP60q2qSMWsGtf1hZBAs7fw==",
          "22033:   dependencies:",
          "22034:     azure-devops-node-api \"^7.2.0\"",
          "22035:     chalk \"^2.4.2\"",
          "22036:     cheerio \"^1.0.0-rc.1\"",
          "22037:     commander \"^2.8.1\"",
          "22038:     denodeify \"^1.2.1\"",
          "22039:     didyoumean \"^1.2.1\"",
          "22040:     glob \"^7.0.6\"",
          "22041:     lodash \"^4.17.10\"",
          "22042:     markdown-it \"^8.3.1\"",
          "22043:     mime \"^1.3.4\"",
          "22044:     minimatch \"^3.0.3\"",
          "22045:     osenv \"^0.1.3\"",
          "22046:     parse-semver \"^1.1.1\"",
          "22047:     read \"^1.0.7\"",
          "22048:     semver \"^5.1.0\"",
          "22049:     tmp \"0.0.29\"",
          "22050:     typed-rest-client \"1.2.0\"",
          "22051:     url-join \"^1.1.0\"",
          "22052:     yauzl \"^2.3.1\"",
          "22053:     yazl \"^2.2.2\"",
          "22055: vsce@^2.6.3:",
          "",
          "[Added Lines]",
          "21955: vsce@^2.6.3, vsce@^2.7.0:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24e7266a67eb82388af6fedf23d9173475258043",
      "candidate_info": {
        "commit_hash": "24e7266a67eb82388af6fedf23d9173475258043",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/24e7266a67eb82388af6fedf23d9173475258043",
        "files": [
          ".changeset/five-pillows-fail.md",
          "custom-words.txt",
          "packages/graphiql-react/package.json",
          "packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts",
          "packages/graphiql-react/src/explorer/components/search.css",
          "packages/graphiql-react/src/explorer/components/search.tsx",
          "packages/graphiql-react/src/explorer/components/type-link.tsx",
          "packages/graphiql-react/src/explorer/components/utils.tsx",
          "packages/graphiql-react/src/explorer/context.tsx",
          "packages/graphiql-react/src/explorer/index.ts",
          "packages/graphiql-react/src/icons/index.tsx",
          "packages/graphiql-react/src/icons/magnifying-glass.svg",
          "packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.tsx",
          "packages/graphiql/cypress/integration/docs.spec.ts",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/DocExplorer/SearchBox.tsx",
          "packages/graphiql/src/components/DocExplorer/SearchResults.tsx",
          "yarn.lock"
        ],
        "message": "add `Search` component to `@graphiql/react` (#2586)",
        "before_after_code_files": [
          "packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts||packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts",
          "packages/graphiql-react/src/explorer/components/search.css||packages/graphiql-react/src/explorer/components/search.css",
          "packages/graphiql-react/src/explorer/components/search.tsx||packages/graphiql-react/src/explorer/components/search.tsx",
          "packages/graphiql-react/src/explorer/components/type-link.tsx||packages/graphiql-react/src/explorer/components/type-link.tsx",
          "packages/graphiql-react/src/explorer/components/utils.tsx||packages/graphiql-react/src/explorer/components/utils.tsx",
          "packages/graphiql-react/src/explorer/context.tsx||packages/graphiql-react/src/explorer/context.tsx",
          "packages/graphiql-react/src/explorer/index.ts||packages/graphiql-react/src/explorer/index.ts",
          "packages/graphiql-react/src/icons/index.tsx||packages/graphiql-react/src/icons/index.tsx",
          "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.tsx||packages/graphiql/__mocks__/@graphiql/react.tsx",
          "packages/graphiql/cypress/integration/docs.spec.ts||packages/graphiql/cypress/integration/docs.spec.ts",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/DocExplorer/SearchBox.tsx||packages/graphiql/src/components/DocExplorer/SearchBox.tsx",
          "packages/graphiql/src/components/DocExplorer/SearchResults.tsx||packages/graphiql/src/components/DocExplorer/SearchResults.tsx",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts||packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts": [
          "File: packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts -> packages/graphiql-react/src/explorer/components/__tests__/test-utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     push() {},",
          "14:     reset() {},",
          "15:     show() {},",
          "17:   };",
          "18: }",
          "",
          "[Removed Lines]",
          "16:     showSearch() {},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer/components/search.css||packages/graphiql-react/src/explorer/components/search.css": [
          "File: packages/graphiql-react/src/explorer/components/search.css -> packages/graphiql-react/src/explorer/components/search.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: @import url('@reach/combobox/styles.css');",
          "3: [data-reach-combobox] {",
          "4:   color: var(--color-neutral-60);",
          "6:   &:not([data-state='idle']) {",
          "7:     border-radius: var(--border-radius-4);",
          "8:     box-shadow: var(--box-shadow);",
          "9:     color: var(--color-neutral-100);",
          "11:     & .graphiql-doc-explorer-search-input {",
          "12:       background: var(--color-neutral-0);",
          "13:       border-bottom-left-radius: 0;",
          "14:       border-bottom-right-radius: 0;",
          "15:     }",
          "16:   }",
          "17: }",
          "19: .graphiql-doc-explorer-search-input {",
          "20:   align-items: center;",
          "21:   background-color: var(--color-neutral-7);",
          "22:   border-radius: var(--border-radius-4);",
          "23:   display: flex;",
          "24:   padding: var(--px-8) var(--px-12);",
          "25: }",
          "27: [data-reach-combobox-input] {",
          "28:   border: none;",
          "29:   background-color: transparent;",
          "30:   margin-left: var(--px-4);",
          "31:   width: 100%;",
          "33:   &:focus {",
          "34:     outline: none;",
          "35:   }",
          "36: }",
          "38: [data-reach-combobox-popover] {",
          "39:   border: none;",
          "40:   border-bottom-left-radius: var(--border-radius-4);",
          "41:   border-bottom-right-radius: var(--border-radius-4);",
          "42:   border-top: 1px solid var(--color-neutral-15);",
          "43:   max-height: 400px;",
          "44:   overflow-y: auto;",
          "50:   position: relative;",
          "51: }",
          "53: [data-reach-combobox-list] {",
          "54:   font-size: var(--font-size-body);",
          "55:   padding: var(--px-4);",
          "56: }",
          "58: [data-reach-combobox-option] {",
          "59:   border-radius: var(--border-radius-4);",
          "60:   color: var(--color-neutral-60);",
          "61:   overflow-x: hidden;",
          "62:   padding: var(--px-8) var(--px-12);",
          "63:   text-overflow: ellipsis;",
          "64:   white-space: nowrap;",
          "66:   &[data-highlighted] {",
          "67:     background-color: var(--color-neutral-7);",
          "68:   }",
          "70:   &:hover {",
          "71:     background-color: var(--color-neutral-10);",
          "72:   }",
          "74:   & + & {",
          "75:     margin-top: var(--px-4);",
          "76:   }",
          "77: }",
          "79: .graphiql-doc-explorer-search-type {",
          "80:   color: var(--color-blue);",
          "81: }",
          "83: .graphiql-doc-explorer-search-field {",
          "84:   color: var(--color-orche);",
          "85: }",
          "87: .graphiql-doc-explorer-search-argument {",
          "88:   color: var(--color-purple);",
          "89: }",
          "91: .graphiql-doc-explorer-search-divider {",
          "92:   color: var(--color-neutral-60);",
          "93:   font-size: var(--font-size-hint);",
          "94:   font-weight: var(--font-weight-medium);",
          "95:   margin-top: var(--px-8);",
          "96:   padding: var(--px-8) var(--px-12);",
          "97: }",
          "99: .graphiql-doc-explorer-search-empty {",
          "100:   color: var(--color-neutral-60);",
          "101:   padding: var(--px-8) var(--px-12);",
          "102: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer/components/search.tsx||packages/graphiql-react/src/explorer/components/search.tsx": [
          "File: packages/graphiql-react/src/explorer/components/search.tsx -> packages/graphiql-react/src/explorer/components/search.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   Combobox,",
          "3:   ComboboxInput,",
          "4:   ComboboxPopover,",
          "5:   ComboboxList,",
          "6:   ComboboxOption,",
          "7: } from '@reach/combobox';",
          "8: import {",
          "9:   GraphQLArgument,",
          "10:   GraphQLField,",
          "11:   GraphQLInputField,",
          "12:   GraphQLNamedType,",
          "13:   isInputObjectType,",
          "14:   isInterfaceType,",
          "15:   isObjectType,",
          "16: } from 'graphql';",
          "17: import { useCallback, useEffect, useMemo, useRef, useState } from 'react';",
          "18: import { MagnifyingGlassIcon } from '../../icons';",
          "19: import { useSchemaContext } from '../../schema';",
          "20: import debounce from '../../utility/debounce';",
          "22: import { useExplorerContext } from '../context';",
          "24: import './search.css';",
          "25: import { renderType } from './utils';",
          "27: export function Search() {",
          "28:   const { explorerNavStack, push } = useExplorerContext({",
          "29:     nonNull: true,",
          "30:     caller: Search,",
          "31:   });",
          "33:   const inputRef = useRef<HTMLInputElement>(null);",
          "34:   const popoverRef = useRef<HTMLDivElement>(null);",
          "36:   const getSearchResults = useSearchResults();",
          "37:   const [searchValue, setSearchValue] = useState('');",
          "39:   const [results, setResults] = useState(getSearchResults(searchValue));",
          "40:   const debouncedGetSearchResults = useMemo(",
          "41:     () =>",
          "42:       debounce(200, (search: string) => {",
          "43:         setResults(getSearchResults(search));",
          "44:       }),",
          "45:     [getSearchResults],",
          "46:   );",
          "47:   useEffect(() => {",
          "48:     debouncedGetSearchResults(searchValue);",
          "49:   }, [debouncedGetSearchResults, searchValue]);",
          "51:   useEffect(() => {",
          "52:     function handleKeyDown(event: KeyboardEvent) {",
          "53:       if (event.metaKey && event.keyCode === 75 && inputRef.current) {",
          "54:         inputRef.current.focus();",
          "55:       }",
          "56:     }",
          "57:     window.addEventListener('keydown', handleKeyDown);",
          "58:     return () => window.removeEventListener('keydown', handleKeyDown);",
          "59:   }, []);",
          "61:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "63:   const shouldSearchBoxAppear =",
          "64:     explorerNavStack.length === 1 ||",
          "65:     isObjectType(navItem.def) ||",
          "66:     isInterfaceType(navItem.def) ||",
          "67:     isInputObjectType(navItem.def);",
          "69:   return shouldSearchBoxAppear ? (",
          "70:     <Combobox",
          "71:       aria-label={`Search ${navItem.name}...`}",
          "72:       onSelect={value => {",
          "73:         const def = value as unknown as TypeMatch | FieldMatch;",
          "74:         push(",
          "75:           'field' in def",
          "76:             ? { name: def.field.name, def: def.field }",
          "77:             : { name: def.type.name, def: def.type },",
          "78:         );",
          "79:       }}",
          "80:     >",
          "81:       <div",
          "82:         className=\"graphiql-doc-explorer-search-input\"",
          "83:         onClick={() => {",
          "84:           if (inputRef.current) {",
          "85:             inputRef.current.focus();",
          "86:           }",
          "87:         }}",
          "88:       >",
          "89:         <MagnifyingGlassIcon />",
          "90:         <ComboboxInput",
          "91:           autocomplete={false}",
          "92:           onChange={event => {",
          "93:             setSearchValue(event.target.value);",
          "94:           }}",
          "95:           onKeyDown={event => {",
          "96:             if (!event.isDefaultPrevented()) {",
          "97:               const container = popoverRef.current;",
          "98:               if (!container) {",
          "99:                 return;",
          "100:               }",
          "102:               window.requestAnimationFrame(() => {",
          "103:                 const element = container.querySelector('[aria-selected=true]');",
          "104:                 if (!(element instanceof HTMLElement)) {",
          "105:                   return;",
          "106:                 }",
          "107:                 const top = element.offsetTop - container.scrollTop;",
          "108:                 const bottom =",
          "109:                   container.scrollTop +",
          "110:                   container.clientHeight -",
          "111:                   (element.offsetTop + element.clientHeight);",
          "112:                 if (bottom < 0) {",
          "113:                   container.scrollTop -= bottom;",
          "114:                 }",
          "115:                 if (top < 0) {",
          "116:                   container.scrollTop += top;",
          "117:                 }",
          "118:               });",
          "119:             }",
          "120:           }}",
          "121:           placeholder=\"&#x2318; K\"",
          "122:           ref={inputRef}",
          "123:           value={searchValue}",
          "124:         />",
          "125:       </div>",
          "126:       <ComboboxPopover portal={false} ref={popoverRef}>",
          "127:         <ComboboxList>",
          "128:           {/**",
          "134:           {results.within.map((result, i) => (",
          "135:             <ComboboxOption key={`within-${i}`} index={i} value={result as any}>",
          "136:               <Field field={result.field} argument={result.argument} />",
          "137:             </ComboboxOption>",
          "138:           ))}",
          "139:           {results.within.length > 0 &&",
          "140:           results.types.length + results.fields.length > 0 ? (",
          "141:             <div className=\"graphiql-doc-explorer-search-divider\">",
          "142:               Other results",
          "143:             </div>",
          "144:           ) : null}",
          "145:           {results.types.map((result, i) => (",
          "146:             <ComboboxOption",
          "147:               key={`type-${i}`}",
          "148:               index={results.within.length + i}",
          "149:               value={result as any}",
          "150:             >",
          "151:               <Type type={result.type} />",
          "152:             </ComboboxOption>",
          "153:           ))}",
          "154:           {results.fields.map((result, i) => (",
          "155:             <ComboboxOption",
          "156:               key={`field-${i}`}",
          "157:               index={results.within.length + results.types.length + i}",
          "158:               value={result as any}",
          "159:             >",
          "160:               <Type type={result.type} />.",
          "161:               <Field field={result.field} argument={result.argument} />",
          "162:             </ComboboxOption>",
          "163:           ))}",
          "164:           {results.within.length +",
          "165:             results.types.length +",
          "166:             results.fields.length ===",
          "167:           0 ? (",
          "168:             <div className=\"graphiql-doc-explorer-search-empty\">",
          "169:               No results found",
          "170:             </div>",
          "171:           ) : null}",
          "172:         </ComboboxList>",
          "173:       </ComboboxPopover>",
          "174:     </Combobox>",
          "175:   ) : null;",
          "176: }",
          "178: type TypeMatch = { type: GraphQLNamedType };",
          "180: type FieldMatch = {",
          "181:   type: GraphQLNamedType;",
          "182:   field: GraphQLField<unknown, unknown> | GraphQLInputField;",
          "183:   argument?: GraphQLArgument;",
          "184: };",
          "186: export function useSearchResults(caller?: Function) {",
          "187:   const { explorerNavStack } = useExplorerContext({",
          "188:     nonNull: true,",
          "189:     caller: caller || useSearchResults,",
          "190:   });",
          "191:   const { schema } = useSchemaContext({",
          "192:     nonNull: true,",
          "193:     caller: caller || useSearchResults,",
          "194:   });",
          "196:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "198:   return useCallback(",
          "199:     (searchValue: string) => {",
          "200:       const matches: {",
          "201:         within: FieldMatch[];",
          "202:         types: TypeMatch[];",
          "203:         fields: FieldMatch[];",
          "204:       } = {",
          "205:         within: [],",
          "206:         types: [],",
          "207:         fields: [],",
          "208:       };",
          "210:       if (!schema) {",
          "211:         return matches;",
          "212:       }",
          "214:       const withinType = navItem.def;",
          "216:       const typeMap = schema.getTypeMap();",
          "217:       let typeNames = Object.keys(typeMap);",
          "220:       if (withinType) {",
          "221:         typeNames = typeNames.filter(n => n !== withinType.name);",
          "222:         typeNames.unshift(withinType.name);",
          "223:       }",
          "225:       for (const typeName of typeNames) {",
          "226:         if (",
          "227:           matches.within.length +",
          "228:             matches.types.length +",
          "229:             matches.fields.length >=",
          "230:           100",
          "231:         ) {",
          "232:           break;",
          "233:         }",
          "235:         const type = typeMap[typeName];",
          "236:         if (withinType !== type && isMatch(typeName, searchValue)) {",
          "237:           matches.types.push({ type });",
          "238:         }",
          "240:         if (",
          "241:           !isObjectType(type) &&",
          "242:           !isInterfaceType(type) &&",
          "243:           !isInputObjectType(type)",
          "244:         ) {",
          "245:           continue;",
          "246:         }",
          "248:         const fields = type.getFields();",
          "249:         for (const fieldName in fields) {",
          "250:           const field = fields[fieldName];",
          "251:           let matchingArgs: GraphQLArgument[] | undefined;",
          "253:           if (!isMatch(fieldName, searchValue)) {",
          "254:             if ('args' in field) {",
          "255:               matchingArgs = field.args.filter(arg =>",
          "256:                 isMatch(arg.name, searchValue),",
          "257:               );",
          "258:               if (matchingArgs.length === 0) {",
          "259:                 continue;",
          "260:               }",
          "261:             } else {",
          "262:               continue;",
          "263:             }",
          "264:           }",
          "266:           matches[withinType === type ? 'within' : 'fields'].push(",
          "267:             ...(matchingArgs",
          "268:               ? matchingArgs.map(argument => ({ type, field, argument }))",
          "269:               : [{ type, field }]),",
          "270:           );",
          "271:         }",
          "272:       }",
          "274:       return matches;",
          "275:     },",
          "276:     [navItem.def, schema],",
          "277:   );",
          "278: }",
          "280: function isMatch(sourceText: string, searchValue: string) {",
          "281:   try {",
          "282:     const escaped = searchValue.replace(/[^_0-9A-Za-z]/g, ch => '\\\\' + ch);",
          "283:     return sourceText.search(new RegExp(escaped, 'i')) !== -1;",
          "284:   } catch (e) {",
          "285:     return sourceText.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1;",
          "286:   }",
          "287: }",
          "289: type TypeProps = { type: GraphQLNamedType };",
          "291: function Type(props: TypeProps) {",
          "292:   return (",
          "293:     <span className=\"graphiql-doc-explorer-search-type\">{props.type.name}</span>",
          "294:   );",
          "295: }",
          "297: type FieldProps = {",
          "298:   field: GraphQLField<unknown, unknown> | GraphQLInputField;",
          "299:   argument?: GraphQLArgument;",
          "300: };",
          "302: function Field(props: FieldProps) {",
          "303:   return (",
          "304:     <>",
          "305:       <span className=\"graphiql-doc-explorer-search-field\">",
          "306:         {props.field.name}",
          "307:       </span>",
          "308:       {props.argument ? (",
          "309:         <>",
          "310:           (",
          "311:           <span className=\"graphiql-doc-explorer-search-argument\">",
          "312:             {props.argument.name}",
          "313:           </span>",
          "314:           :{' '}",
          "315:           {renderType(props.argument.type, namedType => (",
          "316:             <Type type={namedType} />",
          "317:           ))}",
          "318:           )",
          "319:         </>",
          "320:       ) : null}",
          "321:     </>",
          "322:   );",
          "323: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer/components/type-link.tsx||packages/graphiql-react/src/explorer/components/type-link.tsx": [
          "File: packages/graphiql-react/src/explorer/components/type-link.tsx -> packages/graphiql-react/src/explorer/components/type-link.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { useExplorerContext } from '../context';",
          "5: import './type-link.css';",
          "",
          "[Removed Lines]",
          "1: import { GraphQLType, isListType, isNonNullType } from 'graphql';",
          "",
          "[Added Lines]",
          "1: import { GraphQLType } from 'graphql';",
          "4: import { renderType } from './utils';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:     return null;",
          "16:   }",
          "34:     <a",
          "35:       className=\"graphiql-doc-explorer-type-name\"",
          "36:       onClick={event => {",
          "37:         event.preventDefault();",
          "39:       }}",
          "40:       href=\"#\"",
          "41:     >",
          "43:     </a>",
          "45: }",
          "",
          "[Removed Lines]",
          "18:   const type = props.type;",
          "19:   if (isNonNullType(type)) {",
          "20:     return (",
          "21:       <>",
          "22:         <TypeLink type={type.ofType} />!",
          "23:       </>",
          "24:     );",
          "25:   }",
          "26:   if (isListType(type)) {",
          "27:     return (",
          "28:       <>",
          "29:         [<TypeLink type={type.ofType} />]",
          "30:       </>",
          "31:     );",
          "32:   }",
          "33:   return (",
          "38:         push({ name: type.name, def: type });",
          "42:       {type.name}",
          "44:   );",
          "",
          "[Added Lines]",
          "19:   return renderType(props.type, namedType => (",
          "24:         push({ name: namedType.name, def: namedType });",
          "28:       {namedType.name}",
          "30:   ));",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer/components/utils.tsx||packages/graphiql-react/src/explorer/components/utils.tsx": [
          "File: packages/graphiql-react/src/explorer/components/utils.tsx -> packages/graphiql-react/src/explorer/components/utils.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   GraphQLNamedType,",
          "3:   GraphQLType,",
          "4:   isListType,",
          "5:   isNonNullType,",
          "6: } from 'graphql';",
          "8: export function renderType(",
          "9:   type: GraphQLType,",
          "10:   renderNamedType: (namedType: GraphQLNamedType) => JSX.Element,",
          "11: ): JSX.Element {",
          "12:   if (isNonNullType(type)) {",
          "13:     return <>{renderType(type.ofType, renderNamedType)}!</>;",
          "14:   }",
          "15:   if (isListType(type)) {",
          "16:     return <>[{renderType(type.ofType, renderNamedType)}]</>;",
          "17:   }",
          "18:   return renderNamedType(type);",
          "19: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer/context.tsx||packages/graphiql-react/src/explorer/context.tsx": [
          "File: packages/graphiql-react/src/explorer/context.tsx -> packages/graphiql-react/src/explorer/context.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: export type ExplorerNavStackItem = {",
          "26:   name: string;",
          "27:   title?: string;",
          "29:   def?: GraphQLNamedType | ExplorerFieldDef;",
          "30: };",
          "",
          "[Removed Lines]",
          "28:   search?: string;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   pop(): void;",
          "49:   reset(): void;",
          "50:   show(): void;",
          "52: };",
          "54: export const ExplorerContext =",
          "",
          "[Removed Lines]",
          "51:   showSearch(search: string): void;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:     setIsVisible(true);",
          "122:   }, [onToggleVisibility, storage]);",
          "132:   useEffect(() => {",
          "133:     if (isFetching) {",
          "134:       reset();",
          "",
          "[Removed Lines]",
          "124:   const showSearch = useCallback((search: string) => {",
          "125:     setNavStack(currentState => {",
          "126:       const lastItem = currentState[currentState.length - 1];",
          "127:       const allButLastItem = currentState.slice(0, -1) as ExplorerNavStack;",
          "128:       return [...allButLastItem, { ...lastItem, search }] as ExplorerNavStack;",
          "129:     });",
          "130:   }, []);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:       pop,",
          "145:       reset,",
          "146:       show,",
          "148:     }),",
          "150:   );",
          "152:   return (",
          "",
          "[Removed Lines]",
          "147:       showSearch,",
          "149:     [hide, isVisible, navStack, push, pop, reset, show, showSearch],",
          "",
          "[Added Lines]",
          "138:     [hide, isVisible, navStack, push, pop, reset, show],",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer/index.ts||packages/graphiql-react/src/explorer/index.ts": [
          "File: packages/graphiql-react/src/explorer/index.ts -> packages/graphiql-react/src/explorer/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: export { DefaultValue } from './components/default-value';",
          "3: export { Directive } from './components/directive';",
          "4: export { FieldLink } from './components/field-link';",
          "5: export { TypeLink } from './components/type-link';",
          "6: export {",
          "7:   ExplorerContext,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: export { Search } from './components/search';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/icons/index.tsx||packages/graphiql-react/src/icons/index.tsx": [
          "File: packages/graphiql-react/src/icons/index.tsx -> packages/graphiql-react/src/icons/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import _DocsIcon from './docs.svg';",
          "6: import _HistoryIcon from './history.svg';",
          "7: import _KeyboardShortcutIcon from './keyboard-shortcut.svg';",
          "8: import _MergeIcon from './merge.svg';",
          "9: import _PenIcon from './pen.svg';",
          "10: import _PlayIcon from './play.svg';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import _MagnifyingGlassIcon from './magnifying-glass.svg';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:   _KeyboardShortcutIcon,",
          "29:   'keyboard shortcut icon',",
          "30: );",
          "31: export const MergeIcon = generateIcon(_MergeIcon, 'merge icon');",
          "32: export const PenIcon = generateIcon(_PenIcon, 'pen icon');",
          "33: export const PlayIcon = generateIcon(_PlayIcon, 'play icon');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: export const MagnifyingGlassIcon = generateIcon(",
          "33:   _MagnifyingGlassIcon,",
          "34:   'magnifying glass icon',",
          "35: );",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts": [
          "File: packages/graphiql-react/src/index.ts -> packages/graphiql-react/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   ExplorerContext,",
          "30:   ExplorerContextProvider,",
          "31:   FieldLink,",
          "32:   TypeLink,",
          "33:   useExplorerContext,",
          "34: } from './explorer';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:   Search,",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.tsx||packages/graphiql/__mocks__/@graphiql/react.tsx": [
          "File: packages/graphiql/__mocks__/@graphiql/react.tsx -> packages/graphiql/__mocks__/@graphiql/react.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   ReloadIcon,",
          "45:   SchemaContext,",
          "46:   SchemaContextProvider,",
          "47:   SettingsIcon,",
          "48:   Spinner,",
          "49:   StarFilledIcon,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   Search,",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/integration/docs.spec.ts||packages/graphiql/cypress/integration/docs.spec.ts": [
          "File: packages/graphiql/cypress/integration/docs.spec.ts -> packages/graphiql/cypress/integration/docs.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   });",
          "25:   it('Searches docs for values', () => {",
          "28:   });",
          "30:   it('Navigates to a docs entry on selecting a search result', () => {",
          "32:     cy.get('.doc-explorer-title').should('have.text', 'TestInput');",
          "33:   });",
          "35:   it('Allows searching fields within a type', () => {",
          "38:   });",
          "40:   it('Shows \"other results\" section', () => {",
          "46:   });",
          "49:     cy.get('.doc-explorer-back').click();",
          "50:     cy.get('.doc-explorer-title').should('have.text', 'Docs');",
          "55:   });",
          "57:   it('Type fields link to their own docs entry', () => {",
          "63:     cy.get('.doc-explorer-title').should('have.text', 'isTest');",
          "64:     cy.get('.graphiql-markdown-description').should(",
          "",
          "[Removed Lines]",
          "26:     cy.get('label.search-box input').type('test');",
          "27:     cy.get('.doc-category-item').should('have.length', 7);",
          "31:     cy.get('.doc-search-items>.doc-category-item').eq(4).children().click();",
          "36:     cy.get('label.search-box input').type('list');",
          "37:     cy.get('.doc-category-item').should('have.length', 8);",
          "41:     cy.get('.doc-category-title').should('have.text', 'other results');",
          "42:     cy.get('.doc-category .graphiql-doc-explorer-field-name').should(",
          "43:       'have.text',",
          "44:       'hasArgs',",
          "45:     );",
          "48:   it('Navigates back to search results when existing', () => {",
          "51:   });",
          "53:   it('Retains the parent search value', () => {",
          "54:     cy.get('label.search-box input').should('have.value', 'test');",
          "58:     cy.get('.doc-search-items>.doc-category-item')",
          "59:       .last()",
          "60:       .find('a:nth-child(2)')",
          "61:       .click();",
          "",
          "[Added Lines]",
          "26:     cy.get('[data-reach-combobox-input]').type('test');",
          "27:     cy.get('[data-reach-combobox-popover]').should('not.have.attr', 'hidden');",
          "28:     cy.get('[data-reach-combobox-option]').should('have.length', 7);",
          "32:     cy.get('[data-reach-combobox-option]').eq(4).children().click();",
          "37:     cy.get('[data-reach-combobox-input]').type('list');",
          "38:     cy.get('[data-reach-combobox-option]').should('have.length', 14);",
          "42:     cy.get(",
          "43:       '[data-reach-combobox-popover] .graphiql-doc-explorer-search-divider',",
          "44:     ).should('have.text', 'Other results');",
          "45:     cy.get('[data-reach-combobox-option]').contains('hasArgs');",
          "48:   it('Navigates back and closes popover', () => {",
          "51:     cy.get('[data-reach-combobox-popover]').should('have.attr', 'hidden');",
          "55:     cy.get('[data-reach-combobox-input]').type('test');",
          "56:     cy.wait(250);",
          "57:     cy.get('[data-reach-combobox-option]').last().click();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:       'Is this a test schema? Sure it is.\\n',",
          "67:     );",
          "68:   });",
          "79: });",
          "81: describe('GraphQL DocExplorer - deprecated fields', () => {",
          "",
          "[Removed Lines]",
          "70:   it('Allows clearing the search', () => {",
          "71:     cy.visit(`/`);",
          "72:     cy.get('.graphiql-sidebar button').eq(0).click();",
          "73:     cy.get('label.search-box input').type('test');",
          "74:     cy.get('.doc-category-item').should('have.length', 7);",
          "75:     cy.get('.search-box-clear').click();",
          "76:     cy.get('.doc-category-title').should('have.text', 'root types');",
          "77:     cy.get('label.search-box input').should('have.value', '');",
          "78:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { GraphQLSchema, isType } from 'graphql';",
          "10: import React, { ReactNode } from 'react';",
          "12: import FieldDoc from './DocExplorer/FieldDoc';",
          "13: import SchemaDoc from './DocExplorer/SchemaDoc';",
          "16: import TypeDoc from './DocExplorer/TypeDoc';",
          "18: type DocExplorerProps = {",
          "",
          "[Removed Lines]",
          "8: import { Spinner, useExplorerContext, useSchemaContext } from '@graphiql/react';",
          "14: import SearchBox from './DocExplorer/SearchBox';",
          "15: import SearchResults from './DocExplorer/SearchResults';",
          "",
          "[Added Lines]",
          "8: import {",
          "9:   Search,",
          "10:   Spinner,",
          "11:   useExplorerContext,",
          "12:   useSchemaContext,",
          "13: } from '@graphiql/react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     schema: schemaFromContext,",
          "41:     validationErrors,",
          "42:   } = useSchemaContext({ nonNull: true });",
          "44:     nonNull: true,",
          "45:   });",
          "",
          "[Removed Lines]",
          "43:   const { explorerNavStack, hide, pop, showSearch } = useExplorerContext({",
          "",
          "[Added Lines]",
          "46:   const { explorerNavStack, hide, pop } = useExplorerContext({",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     content = <div className=\"error-container\">No Schema Available</div>;",
          "70:   } else if (explorerNavStack.length === 1) {",
          "71:     content = <SchemaDoc />;",
          "72:   } else if (isType(navItem.def)) {",
          "",
          "[Removed Lines]",
          "68:   } else if (navItem.search) {",
          "69:     content = <SearchResults />;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:     content = <FieldDoc />;",
          "76:   }",
          "82:   let prevName;",
          "83:   if (explorerNavStack.length > 1) {",
          "84:     prevName = explorerNavStack[explorerNavStack.length - 2].name;",
          "",
          "[Removed Lines]",
          "78:   const shouldSearchBoxAppear =",
          "79:     explorerNavStack.length === 1 ||",
          "80:     (isType(navItem.def) && 'getFields' in navItem.def);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "119:         </div>",
          "120:       </div>",
          "121:       <div className=\"doc-explorer-contents\">",
          "129:         {content}",
          "130:       </div>",
          "131:     </section>",
          "",
          "[Removed Lines]",
          "122:         {shouldSearchBoxAppear && (",
          "123:           <SearchBox",
          "124:             value={navItem.search}",
          "125:             placeholder={`Search ${navItem.name}...`}",
          "126:             onSearch={showSearch}",
          "127:           />",
          "128:         )}",
          "",
          "[Added Lines]",
          "119:         <Search key={navItem.def?.name || '__schema'} />",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/SearchBox.tsx||packages/graphiql/src/components/DocExplorer/SearchBox.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/SearchBox.tsx -> packages/graphiql/src/components/DocExplorer/SearchBox.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/SearchResults.tsx||packages/graphiql/src/components/DocExplorer/SearchResults.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/SearchResults.tsx -> packages/graphiql/src/components/DocExplorer/SearchResults.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "4435:     tslib \"^2.4.0\"",
          "4436:     webcrypto-core \"^1.7.4\"",
          "4438: \"@rollup/pluginutils@^4.1.1\":",
          "4439:   version \"4.1.1\"",
          "4440:   resolved \"https://registry.yarnpkg.com/@rollup/pluginutils/-/pluginutils-4.1.1.tgz#1d4da86dd4eded15656a57d933fda2b9a08d47ec\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4438: \"@reach/auto-id@0.17.0\":",
          "4439:   version \"0.17.0\"",
          "4440:   resolved \"https://registry.yarnpkg.com/@reach/auto-id/-/auto-id-0.17.0.tgz#60cce65eb7a0d6de605820727f00dfe2b03b5f17\"",
          "4441:   integrity sha512-ud8iPwF52RVzEmkHq1twuqGuPA+moreumUHdtgvU3sr3/15BNhwp3KyDLrKKSz0LP1r3V4pSdyF9MbYM8BoSjA==",
          "4442:   dependencies:",
          "4443:     \"@reach/utils\" \"0.17.0\"",
          "4444:     tslib \"^2.3.0\"",
          "4446: \"@reach/combobox@^0.17.0\":",
          "4447:   version \"0.17.0\"",
          "4448:   resolved \"https://registry.yarnpkg.com/@reach/combobox/-/combobox-0.17.0.tgz#fb9d71d2d5aff3b339dce0ec5e3b73628a51b009\"",
          "4449:   integrity sha512-2mYvU5agOBCQBMdlM4cri+P1BbNwp05P1OuDyc33xJSNiBG7BMy4+ZSHJ0X4fyle6rHwSgCAOCLOeWV1XUYjoQ==",
          "4450:   dependencies:",
          "4451:     \"@reach/auto-id\" \"0.17.0\"",
          "4452:     \"@reach/descendants\" \"0.17.0\"",
          "4453:     \"@reach/popover\" \"0.17.0\"",
          "4454:     \"@reach/portal\" \"0.17.0\"",
          "4455:     \"@reach/utils\" \"0.17.0\"",
          "4456:     prop-types \"^15.7.2\"",
          "4457:     tiny-warning \"^1.0.3\"",
          "4458:     tslib \"^2.3.0\"",
          "4460: \"@reach/descendants@0.17.0\":",
          "4461:   version \"0.17.0\"",
          "4462:   resolved \"https://registry.yarnpkg.com/@reach/descendants/-/descendants-0.17.0.tgz#3fb087125a67870acd4dee1528449ed546829b67\"",
          "4463:   integrity sha512-c7lUaBfjgcmKFZiAWqhG+VnXDMEhPkI4kAav/82XKZD6NVvFjsQOTH+v3tUkskrAPV44Yuch0mFW/u5Ntifr7Q==",
          "4464:   dependencies:",
          "4465:     \"@reach/utils\" \"0.17.0\"",
          "4466:     tslib \"^2.3.0\"",
          "4468: \"@reach/observe-rect@1.2.0\":",
          "4469:   version \"1.2.0\"",
          "4470:   resolved \"https://registry.yarnpkg.com/@reach/observe-rect/-/observe-rect-1.2.0.tgz#d7a6013b8aafcc64c778a0ccb83355a11204d3b2\"",
          "4471:   integrity sha512-Ba7HmkFgfQxZqqaeIWWkNK0rEhpxVQHIoVyW1YDSkGsGIXzcaW4deC8B0pZrNSSyLTdIk7y+5olKt5+g0GmFIQ==",
          "4473: \"@reach/popover@0.17.0\":",
          "4474:   version \"0.17.0\"",
          "4475:   resolved \"https://registry.yarnpkg.com/@reach/popover/-/popover-0.17.0.tgz#feda6961f37d17b8738d2d52af6bfc5c4584464f\"",
          "4476:   integrity sha512-yYbBF4fMz4Ml4LB3agobZjcZ/oPtPsNv70ZAd7lEC2h7cvhF453pA+zOBGYTPGupKaeBvgAnrMjj7RnxDU5hoQ==",
          "4477:   dependencies:",
          "4478:     \"@reach/portal\" \"0.17.0\"",
          "4479:     \"@reach/rect\" \"0.17.0\"",
          "4480:     \"@reach/utils\" \"0.17.0\"",
          "4481:     tabbable \"^4.0.0\"",
          "4482:     tslib \"^2.3.0\"",
          "4484: \"@reach/portal@0.17.0\":",
          "4485:   version \"0.17.0\"",
          "4486:   resolved \"https://registry.yarnpkg.com/@reach/portal/-/portal-0.17.0.tgz#1dd69ffc8ffc8ba3e26dd127bf1cc4b15f0c6bdc\"",
          "4487:   integrity sha512-+IxsgVycOj+WOeNPL2NdgooUdHPSY285wCtj/iWID6akyr4FgGUK7sMhRM9aGFyrGpx2vzr+eggbUmAVZwOz+A==",
          "4488:   dependencies:",
          "4489:     \"@reach/utils\" \"0.17.0\"",
          "4490:     tiny-warning \"^1.0.3\"",
          "4491:     tslib \"^2.3.0\"",
          "4493: \"@reach/rect@0.17.0\":",
          "4494:   version \"0.17.0\"",
          "4495:   resolved \"https://registry.yarnpkg.com/@reach/rect/-/rect-0.17.0.tgz#804f0cfb211e0beb81632c64d4532ec9d1d73c48\"",
          "4496:   integrity sha512-3YB7KA5cLjbLc20bmPkJ06DIfXSK06Cb5BbD2dHgKXjUkT9WjZaLYIbYCO8dVjwcyO3GCNfOmPxy62VsPmZwYA==",
          "4497:   dependencies:",
          "4498:     \"@reach/observe-rect\" \"1.2.0\"",
          "4499:     \"@reach/utils\" \"0.17.0\"",
          "4500:     prop-types \"^15.7.2\"",
          "4501:     tiny-warning \"^1.0.3\"",
          "4502:     tslib \"^2.3.0\"",
          "4504: \"@reach/utils@0.17.0\":",
          "4505:   version \"0.17.0\"",
          "4506:   resolved \"https://registry.yarnpkg.com/@reach/utils/-/utils-0.17.0.tgz#3d1d2ec56d857f04fe092710d8faee2b2b121303\"",
          "4507:   integrity sha512-M5y8fCBbrWeIsxedgcSw6oDlAMQDkl5uv3VnMVJ7guwpf4E48Xlh1v66z/1BgN/WYe2y8mB/ilFD2nysEfdGeA==",
          "4508:   dependencies:",
          "4509:     tiny-warning \"^1.0.3\"",
          "4510:     tslib \"^2.3.0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15345:     object-assign \"^4.1.1\"",
          "15346:     react-is \"^16.8.1\"",
          "15349:   version \"15.8.1\"",
          "15350:   resolved \"https://registry.yarnpkg.com/prop-types/-/prop-types-15.8.1.tgz#67d87bf1a694f48435cf332c24af10214a3140b5\"",
          "15351:   integrity sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
          "",
          "[Removed Lines]",
          "15348: prop-types@^15.8.1:",
          "",
          "[Added Lines]",
          "15422: prop-types@^15.7.2, prop-types@^15.8.1:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "17303:   resolved \"https://registry.yarnpkg.com/symbol-tree/-/symbol-tree-3.2.4.tgz#430637d248ba77e078883951fb9aa0eed7c63fa2\"",
          "17304:   integrity sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==",
          "17306: tapable@^1.0.0, tapable@^1.1.3:",
          "17307:   version \"1.1.3\"",
          "17308:   resolved \"https://registry.yarnpkg.com/tapable/-/tapable-1.1.3.tgz#a1fccc06b58db61fd7a45da2da44f5f3a3e67ba2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17380: tabbable@^4.0.0:",
          "17381:   version \"4.0.0\"",
          "17382:   resolved \"https://registry.yarnpkg.com/tabbable/-/tabbable-4.0.0.tgz#5bff1d1135df1482cf0f0206434f15eadbeb9261\"",
          "17383:   integrity sha512-H1XoH1URcBOa/rZZWxLxHCtOdVUEev+9vo5YdYhC9tCY4wnybX+VQrCYuy9ubkg69fCBxCONJOSLGfw0DWMffQ==",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "17432:   resolved \"https://registry.yarnpkg.com/timsort/-/timsort-0.3.0.tgz#405411a8e7e6339fe64db9a234de11dc31e02bd4\"",
          "17433:   integrity sha1-QFQRqOfmM5/mTbmiNN4R3DHgK9Q=",
          "17435: tmp@^0.0.33:",
          "17436:   version \"0.0.33\"",
          "17437:   resolved \"https://registry.yarnpkg.com/tmp/-/tmp-0.0.33.tgz#6d34335889768d21b2bcda0aa277ced3b1bfadf9\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17514: tiny-warning@^1.0.3:",
          "17515:   version \"1.0.3\"",
          "17516:   resolved \"https://registry.yarnpkg.com/tiny-warning/-/tiny-warning-1.0.3.tgz#94a30db453df4c643d0fd566060d60a875d84754\"",
          "17517:   integrity sha512-lBN9zLN/oAf68o3zNXYrdCt1kP8WsiGW8Oo2ka41b2IM5JL/S1CTyX1rW0mb/zSuJun0ZUrDxx4sqvYS2FWzPA==",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "17641:   resolved \"https://registry.yarnpkg.com/tslib/-/tslib-1.14.1.tgz#cf2d38bdc34a134bcaf1091c41f6619e2f672d00\"",
          "17642:   integrity sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
          "17645:   version \"2.4.0\"",
          "17646:   resolved \"https://registry.yarnpkg.com/tslib/-/tslib-2.4.0.tgz#7cecaa7f073ce680a05847aa77be941098f36dc3\"",
          "17647:   integrity sha512-d6xOpEDfsi2CZVlPQzGeux8XMwLT9hssAsaPYExaQMuYskwb+x1x7J371tWlbBdWHroy99KnVB6qIkUbs5X3UQ==",
          "",
          "[Removed Lines]",
          "17644: tslib@^2, tslib@^2.0.0, tslib@^2.4.0, tslib@~2.4.0:",
          "",
          "[Added Lines]",
          "17728: tslib@^2, tslib@^2.0.0, tslib@^2.3.0, tslib@^2.4.0, tslib@~2.4.0:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c98fa5924eadaee33713ccd8a9be6419d50cab1",
      "candidate_info": {
        "commit_hash": "0c98fa5924eadaee33713ccd8a9be6419d50cab1",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/0c98fa5924eadaee33713ccd8a9be6419d50cab1",
        "files": [
          ".changeset/nine-elephants-retire.md",
          ".changeset/nine-eyes-relax.md",
          ".changeset/serious-ties-compete.md",
          "packages/graphiql-react/src/schema.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx"
        ],
        "message": "feat(graphiql): pass introspection data to `schema` prop (#2574)\n\n* allow passing introspection data as alternative to schema instance\n\n* set schema correctly after refetching",
        "before_after_code_files": [
          "packages/graphiql-react/src/schema.tsx||packages/graphiql-react/src/schema.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/schema.tsx||packages/graphiql-react/src/schema.tsx": [
          "File: packages/graphiql-react/src/schema.tsx -> packages/graphiql-react/src/schema.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   GraphQLError,",
          "13:   GraphQLSchema,",
          "14:   IntrospectionQuery,",
          "15:   validateSchema,",
          "16: } from 'graphql';",
          "17: import {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:   isSchema,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   dangerouslyAssumeSchemaIsValid?: boolean;",
          "56:   fetcher: Fetcher;",
          "57:   onSchemaChange?(schema: GraphQLSchema): void;",
          "59: } & IntrospectionArgs;",
          "61: export function SchemaContextProvider(props: SchemaContextProviderProps) {",
          "",
          "[Removed Lines]",
          "58:   schema?: GraphQLSchema | null;",
          "",
          "[Added Lines]",
          "59:   schema?: GraphQLSchema | IntrospectionQuery | null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:     nonNull: true,",
          "64:     caller: SchemaContextProvider,",
          "65:   });",
          "69:   const [isFetching, setIsFetching] = useState(false);",
          "70:   const [fetchError, setFetchError] = useState<string | null>(null);",
          "",
          "[Removed Lines]",
          "66:   const [schema, setSchema] = useState<MaybeGraphQLSchema>(",
          "67:     props.schema || null,",
          "68:   );",
          "",
          "[Added Lines]",
          "67:   const [schema, setSchema] = useState<MaybeGraphQLSchema>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:   useEffect(() => {",
          "77:   }, [props.schema]);",
          "",
          "[Removed Lines]",
          "76:     setSchema(props.schema);",
          "",
          "[Added Lines]",
          "75:     setSchema(",
          "76:       isSchema(props.schema) ||",
          "77:         props.schema === null ||",
          "78:         props.schema === undefined",
          "79:         ? props.schema",
          "80:         : undefined,",
          "81:     );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "105:   const { fetcher, onSchemaChange } = props;",
          "106:   useEffect(() => {",
          "109:       return;",
          "110:     }",
          "112:     let isActive = true;",
          "149:         const fetch2 = fetcherReturnToPromise(",
          "",
          "[Removed Lines]",
          "108:     if (props.schema !== undefined) {",
          "114:     const parsedHeaders = parseHeaderString(headersRef.current);",
          "115:     if (!parsedHeaders.isValidJSON) {",
          "116:       setFetchError('Introspection failed as headers are invalid.');",
          "117:       return;",
          "118:     }",
          "120:     const fetcherOpts: FetcherOpts = parsedHeaders.headers",
          "121:       ? { headers: parsedHeaders.headers }",
          "122:       : {};",
          "124:     const fetch = fetcherReturnToPromise(",
          "125:       fetcher(",
          "126:         {",
          "127:           query: introspectionQuery,",
          "128:           operationName: introspectionQueryName,",
          "129:         },",
          "130:         fetcherOpts,",
          "131:       ),",
          "132:     );",
          "134:     if (!isPromise(fetch)) {",
          "135:       setFetchError('Fetcher did not return a Promise for introspection.');",
          "136:       return;",
          "137:     }",
          "139:     setIsFetching(true);",
          "141:     fetch",
          "142:       .then(result => {",
          "143:         if (typeof result === 'object' && result !== null && 'data' in result) {",
          "144:           return result;",
          "145:         }",
          "",
          "[Added Lines]",
          "117:     if (isSchema(props.schema) || props.schema === null) {",
          "122:     setSchema(undefined);",
          "124:     const maybeIntrospectionData = props.schema;",
          "125:     async function introspect() {",
          "126:       if (maybeIntrospectionData) {",
          "128:         return maybeIntrospectionData;",
          "129:       }",
          "131:       const parsedHeaders = parseHeaderString(headersRef.current);",
          "132:       if (!parsedHeaders.isValidJSON) {",
          "133:         setFetchError('Introspection failed as headers are invalid.');",
          "134:         return;",
          "135:       }",
          "137:       const fetcherOpts: FetcherOpts = parsedHeaders.headers",
          "138:         ? { headers: parsedHeaders.headers }",
          "139:         : {};",
          "141:       const fetch = fetcherReturnToPromise(",
          "142:         fetcher(",
          "143:           {",
          "144:             query: introspectionQuery,",
          "145:             operationName: introspectionQueryName,",
          "146:           },",
          "147:           fetcherOpts,",
          "148:         ),",
          "149:       );",
          "151:       if (!isPromise(fetch)) {",
          "152:         setFetchError('Fetcher did not return a Promise for introspection.');",
          "153:         return;",
          "154:       }",
          "156:       setIsFetching(true);",
          "158:       let result = await fetch;",
          "160:       if (",
          "161:         typeof result !== 'object' ||",
          "162:         result === null ||",
          "163:         !('data' in result)",
          "164:       ) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "160:             'Fetcher did not return a Promise for introspection.',",
          "161:           );",
          "162:         }",
          "168:           return;",
          "169:         }",
          "195:         }",
          "198:       })",
          "199:       .catch(error => {",
          "",
          "[Removed Lines]",
          "163:         return fetch2;",
          "164:       })",
          "165:       .then(result => {",
          "167:         if (!isActive) {",
          "171:         if (result?.data && '__schema' in result.data) {",
          "172:           try {",
          "173:             const newSchema = buildClientSchema(",
          "174:               result.data as IntrospectionQuery,",
          "175:             );",
          "180:             setSchema(current => {",
          "181:               if (current === undefined) {",
          "182:                 onSchemaChange?.(newSchema);",
          "183:                 return newSchema;",
          "184:               }",
          "185:               return current;",
          "186:             });",
          "187:           } catch (error) {",
          "188:             setFetchError(formatError(error as Error));",
          "189:           }",
          "190:         } else {",
          "192:           const responseString =",
          "193:             typeof result === 'string' ? result : formatResult(result);",
          "194:           setFetchError(responseString);",
          "197:         setIsFetching(false);",
          "",
          "[Added Lines]",
          "181:         result = await fetch2;",
          "182:       }",
          "184:       setIsFetching(false);",
          "186:       if (result?.data && '__schema' in result.data) {",
          "187:         return result.data as IntrospectionQuery;",
          "188:       }",
          "191:       const responseString =",
          "192:         typeof result === 'string' ? result : formatResult(result);",
          "193:       setFetchError(responseString);",
          "194:     }",
          "196:     introspect()",
          "197:       .then(introspectionData => {",
          "199:         if (!isActive || !introspectionData) {",
          "203:         try {",
          "204:           const newSchema = buildClientSchema(introspectionData);",
          "209:           setSchema(current => {",
          "210:             if (current === undefined) {",
          "211:               onSchemaChange?.(newSchema);",
          "212:               return newSchema;",
          "213:             }",
          "214:             return current;",
          "215:           });",
          "216:         } catch (error) {",
          "217:           setFetchError(formatError(error as Error));",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   ValidationRule,",
          "19:   FragmentDefinitionNode,",
          "20:   DocumentNode,",
          "21: } from 'graphql';",
          "23: import {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:   IntrospectionQuery,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:   fetcher: Fetcher;",
          "",
          "[Removed Lines]",
          "111:   schema?: GraphQLSchema | null;",
          "",
          "[Added Lines]",
          "114:   schema?: GraphQLSchema | IntrospectionQuery | null;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3467cd33264e0766a0a43cf53e52ec371df26962",
      "candidate_info": {
        "commit_hash": "3467cd33264e0766a0a43cf53e52ec371df26962",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/3467cd33264e0766a0a43cf53e52ec371df26962",
        "files": [
          ".changeset/spicy-moose-look.md",
          ".changeset/three-bugs-develop.md",
          ".changeset/unlucky-chefs-hope.md",
          "packages/graphiql-react/src/editor/context.tsx",
          "packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/explorer.tsx",
          "packages/graphiql-react/src/index.ts",
          "packages/graphiql-react/src/schema/context.tsx",
          "packages/graphiql-react/src/schema/hooks.ts",
          "packages/graphiql-react/src/schema/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx",
          "packages/graphiql/src/utility/introspectionQueries.ts"
        ],
        "message": "add `SchemaContext` to `@graphiql/react` (#2420)\n\n* set initial value for editors\n\n* make editor context non-null\n\n* remove unused prop\n\n* add schema context\n\n* consume schema context in doc explorer\n\n* stop fetching and validating schema in GraphiQL component\n\n* avoid passing schema as prop to query editor\n\n* replace schema from state with schema from context\n\n* move auto-complete logic to context\n\n* fix tests\n\n* adjust changesets",
        "before_after_code_files": [
          "packages/graphiql-react/src/editor/context.tsx||packages/graphiql-react/src/editor/context.tsx",
          "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/explorer.tsx||packages/graphiql-react/src/explorer.tsx",
          "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts",
          "packages/graphiql-react/src/schema/context.tsx||packages/graphiql-react/src/schema/context.tsx",
          "packages/graphiql-react/src/schema/hooks.ts||packages/graphiql-react/src/schema/hooks.ts",
          "packages/graphiql-react/src/schema/index.ts||packages/graphiql-react/src/schema/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx||packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx",
          "packages/graphiql/src/utility/introspectionQueries.ts||packages/graphiql/src/utility/introspectionQueries.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/editor/context.tsx||packages/graphiql-react/src/editor/context.tsx": [
          "File: packages/graphiql-react/src/editor/context.tsx -> packages/graphiql-react/src/editor/context.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { CodeMirrorEditor } from './types';",
          "5: export type EditorContextType = {",
          "6:   headerEditor: CodeMirrorEditor | null;",
          "7:   queryEditor: CodeMirrorEditor | null;",
          "8:   responseEditor: CodeMirrorEditor | null;",
          "",
          "[Removed Lines]",
          "1: import { createContext, ReactNode, useState } from 'react';",
          "",
          "[Added Lines]",
          "1: import { fillLeafs, GetDefaultFieldNamesFn } from '@graphiql/toolkit';",
          "2: import {",
          "3:   createContext,",
          "4:   ReactNode,",
          "5:   useCallback,",
          "6:   useMemo,",
          "7:   useState,",
          "8: } from 'react';",
          "9: import { useSchemaWithError } from '../schema';",
          "14:   autoCompleteLeafs(): string | undefined;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: };",
          "16: export const EditorContext = createContext<EditorContextType>({",
          "17:   headerEditor: null,",
          "18:   queryEditor: null,",
          "19:   responseEditor: null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:   autoCompleteLeafs() {",
          "27:     return undefined;",
          "28:   },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24:   setVariableEditor() {},",
          "25: });",
          "28:   children: ReactNode;",
          "31:   const [headerEditor, setHeaderEditor] = useState<CodeMirrorEditor | null>(",
          "32:     null,",
          "33:   );",
          "",
          "[Removed Lines]",
          "27: export function EditorContextProvider(props: {",
          "29:   initialValue?: string;",
          "30: }) {",
          "",
          "[Added Lines]",
          "39: type EditorContextProviderProps = {",
          "41:   getDefaultFieldNames?: GetDefaultFieldNamesFn;",
          "42: };",
          "44: export function EditorContextProvider(props: EditorContextProviderProps) {",
          "45:   const { schema } = useSchemaWithError('component', 'EditorContextProvider');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "38:   const [variableEditor, setVariableEditor] = useState<CodeMirrorEditor | null>(",
          "39:     null,",
          "40:   );",
          "41:   return (",
          "53:       {props.children}",
          "54:     </EditorContext.Provider>",
          "55:   );",
          "",
          "[Removed Lines]",
          "42:     <EditorContext.Provider",
          "43:       value={{",
          "44:         headerEditor,",
          "45:         queryEditor,",
          "46:         responseEditor,",
          "47:         variableEditor,",
          "48:         setHeaderEditor,",
          "49:         setQueryEditor,",
          "50:         setResponseEditor,",
          "51:         setVariableEditor,",
          "52:       }}>",
          "",
          "[Added Lines]",
          "57:   const autoCompleteLeafs = useCallback<",
          "58:     EditorContextType['autoCompleteLeafs']",
          "59:   >(() => {",
          "60:     if (!queryEditor) {",
          "61:       return;",
          "62:     }",
          "64:     const query = queryEditor.getValue();",
          "65:     const { insertions, result } = fillLeafs(",
          "66:       schema,",
          "67:       query,",
          "68:       props.getDefaultFieldNames,",
          "69:     );",
          "70:     if (insertions && insertions.length > 0) {",
          "71:       queryEditor.operation(() => {",
          "72:         const cursor = queryEditor.getCursor();",
          "73:         const cursorIndex = queryEditor.indexFromPos(cursor);",
          "74:         queryEditor.setValue(result || '');",
          "75:         let added = 0;",
          "76:         const markers = insertions.map(({ index, string }) =>",
          "77:           queryEditor.markText(",
          "78:             queryEditor.posFromIndex(index + added),",
          "79:             queryEditor.posFromIndex(index + (added += string.length)),",
          "80:             {",
          "81:               className: 'autoInsertedLeaf',",
          "82:               clearOnEnter: true,",
          "83:               title: 'Automatically added leaf fields',",
          "84:             },",
          "85:           ),",
          "86:         );",
          "87:         setTimeout(() => markers.forEach(marker => marker.clear()), 7000);",
          "88:         let newCursorIndex = cursorIndex;",
          "89:         insertions.forEach(({ index, string }) => {",
          "90:           if (index < cursorIndex) {",
          "91:             newCursorIndex += string.length;",
          "92:           }",
          "93:         });",
          "94:         queryEditor.setCursor(queryEditor.posFromIndex(newCursorIndex));",
          "95:       });",
          "96:     }",
          "98:     return result;",
          "99:   }, [props.getDefaultFieldNames, queryEditor, schema]);",
          "101:   const value = useMemo<EditorContextType>(",
          "102:     () => ({",
          "103:       autoCompleteLeafs,",
          "104:       headerEditor,",
          "105:       queryEditor,",
          "106:       responseEditor,",
          "107:       variableEditor,",
          "108:       setHeaderEditor,",
          "109:       setQueryEditor,",
          "110:       setResponseEditor,",
          "111:       setVariableEditor,",
          "112:     }),",
          "113:     [",
          "114:       autoCompleteLeafs,",
          "115:       headerEditor,",
          "116:       queryEditor,",
          "117:       responseEditor,",
          "118:       variableEditor,",
          "119:     ],",
          "120:   );",
          "123:     <EditorContext.Provider value={value}>",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx": [
          "File: packages/graphiql-react/src/editor/header-editor.tsx -> packages/graphiql-react/src/editor/header-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   const { headerEditor, setHeaderEditor } = context;",
          "48:   useEffect(() => {",
          "49:     let isActive = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   const initialValue = useRef(value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:       }",
          "65:       const newEditor = CodeMirror(container, {",
          "66:         lineNumbers: true,",
          "67:         tabSize: 2,",
          "68:         mode: { name: 'javascript', json: true },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:         value: initialValue.current || '',",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts": [
          "File: packages/graphiql-react/src/editor/hooks.ts -> packages/graphiql-react/src/editor/hooks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   value: string | undefined,",
          "10: ) {",
          "11:   useEffect(() => {",
          "16:     }",
          "17:   }, [editor, value]);",
          "18: }",
          "",
          "[Removed Lines]",
          "12:     if (editor && typeof value !== 'undefined') {",
          "13:       if (value !== editor.getValue()) {",
          "14:         editor.setValue(value);",
          "15:       }",
          "",
          "[Added Lines]",
          "12:     if (editor && typeof value !== 'undefined' && value !== editor.getValue()) {",
          "13:       editor.setValue(value);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx": [
          "File: packages/graphiql-react/src/editor/query-editor.tsx -> packages/graphiql-react/src/editor/query-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import { markdown } from '../markdown';",
          "22: import { normalizeWhitespace } from './whitespace';",
          "23: import { CodeMirrorType, CodeMirrorEditor } from './types';",
          "25: type OnClickReference = (reference: SchemaReference) => void;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import { useSchemaWithError } from '../schema';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:   onMergeQuery?: EmptyCallback;",
          "36:   onRunQuery?: EmptyCallback;",
          "37:   readOnly?: boolean;",
          "39:   validationRules?: ValidationRule[];",
          "40:   value?: string;",
          "41: };",
          "",
          "[Removed Lines]",
          "38:   schema?: GraphQLSchema | null;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:   onPrettifyQuery,",
          "52:   onRunQuery,",
          "53:   readOnly = false,",
          "55:   validationRules,",
          "56:   value,",
          "57: }: UseQueryEditorArgs = {}) {",
          "59:   const ref = useRef<HTMLDivElement>(null);",
          "60:   const codeMirrorRef = useRef<CodeMirrorType>();",
          "63:     throw new Error(",
          "64:       'Tried to call the `useQueryEditor` hook without the necessary context. Make sure that the `EditorContextProvider` from `@graphiql/react` is rendered higher in the tree.',",
          "65:     );",
          "66:   }",
          "70:   const onClickReferenceRef = useRef<OnClickReference>();",
          "71:   useEffect(() => {",
          "72:     onClickReferenceRef.current = onClickReference;",
          "73:   }, [onClickReference]);",
          "75:   useEffect(() => {",
          "76:     let isActive = true;",
          "",
          "[Removed Lines]",
          "54:   schema,",
          "58:   const context = useContext(EditorContext);",
          "62:   if (!context) {",
          "68:   const { queryEditor, setQueryEditor } = context;",
          "",
          "[Added Lines]",
          "57:   const { schema } = useSchemaWithError('hook', 'useQueryEditor');",
          "58:   const editorContext = useContext(EditorContext);",
          "62:   if (!editorContext) {",
          "68:   const { queryEditor, setQueryEditor } = editorContext;",
          "75:   const initialValue = useRef(value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:       }",
          "99:       const newEditor = CodeMirror(container, {",
          "100:         lineNumbers: true,",
          "101:         tabSize: 2,",
          "102:         foldGutter: true,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:         value: initialValue.current || '',",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx": [
          "File: packages/graphiql-react/src/editor/response-editor.tsx -> packages/graphiql-react/src/editor/response-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import type { Position, Token } from 'codemirror';",
          "2: import { ComponentType, useContext, useEffect, useRef } from 'react';",
          "3: import ReactDOM from 'react-dom';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { formatError } from '@graphiql/toolkit';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7: import { EditorContext } from './context';",
          "8: import { useResizeEditor, useSynchronizeValue } from './hooks';",
          "9: import { CodeMirrorEditor } from './types';",
          "11: export type ResponseTooltipType = ComponentType<{ pos: Position }>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: import { useSchemaWithError } from '../schema';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "21:   editorTheme = 'graphiql',",
          "22:   value,",
          "23: }: UseResponseEditorArgs = {}) {",
          "25:   const ref = useRef<HTMLDivElement>(null);",
          "27:   const responseTooltipRef = useRef<ResponseTooltipType | undefined>(",
          "",
          "[Removed Lines]",
          "24:   const context = useContext(EditorContext);",
          "",
          "[Added Lines]",
          "26:   const { fetchError, validationErrors } = useSchemaWithError(",
          "27:     'hook',",
          "28:     'useResponseEditor',",
          "29:   );",
          "30:   const editorContext = useContext(EditorContext);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "31:     responseTooltipRef.current = ResponseTooltip;",
          "32:   }, [ResponseTooltip]);",
          "35:     throw new Error(",
          "36:       'Tried to call the `useResponseEditor` hook without the necessary context. Make sure that the `EditorContextProvider` from `@graphiql/react` is rendered higher in the tree.',",
          "37:     );",
          "38:   }",
          "42:   useEffect(() => {",
          "43:     let isActive = true;",
          "",
          "[Removed Lines]",
          "34:   if (!context) {",
          "40:   const { responseEditor, setResponseEditor } = context;",
          "",
          "[Added Lines]",
          "40:   if (!editorContext) {",
          "46:   const { responseEditor, setResponseEditor } = editorContext;",
          "48:   const initialValue = useRef(value);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95:       }",
          "97:       const newEditor = CodeMirror(container, {",
          "98:         lineWrapping: true,",
          "99:         readOnly: true,",
          "100:         theme: editorTheme,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:         value: initialValue.current || '',",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "120:   useResizeEditor(responseEditor, ref);",
          "122:   return ref;",
          "123: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:   useEffect(() => {",
          "132:     if (fetchError) {",
          "133:       responseEditor?.setValue(fetchError);",
          "134:     }",
          "135:     if (validationErrors) {",
          "136:       responseEditor?.setValue(formatError(validationErrors));",
          "137:     }",
          "138:   }, [responseEditor, fetchError, validationErrors]);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx": [
          "File: packages/graphiql-react/src/editor/variable-editor.tsx -> packages/graphiql-react/src/editor/variable-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   const { variableEditor, setVariableEditor } = context;",
          "53:   useEffect(() => {",
          "54:     let isActive = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   const initialValue = useRef(value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:       }",
          "73:       const newEditor = CodeMirror(container, {",
          "75:         lineNumbers: true,",
          "76:         tabSize: 2,",
          "77:         mode: 'graphql-variables',",
          "",
          "[Removed Lines]",
          "74:         value: '',",
          "",
          "[Added Lines]",
          "76:         value: initialValue.current || '',",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/explorer.tsx||packages/graphiql-react/src/explorer.tsx": [
          "File: packages/graphiql-react/src/explorer.tsx -> packages/graphiql-react/src/explorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   ReactNode,",
          "10:   useCallback,",
          "11:   useContext,",
          "12:   useState,",
          "13: } from 'react';",
          "15: export type ExplorerFieldDef =",
          "16:   | GraphQLField<{}, {}, {}>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:   useEffect,",
          "13:   useMemo,",
          "16: import { useSchemaWithError } from './schema';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: export const ExplorerContext = createContext<ExplorerContextType | null>(null);",
          "48: export function ExplorerContextProvider(props: { children: ReactNode }) {",
          "49:   const [state, setState] = useState<ExplorerNavStack>([initialNavStackItem]);",
          "51:   const push = useCallback((item: ExplorerNavStackItem) => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:   const { isFetching } = useSchemaWithError(",
          "53:     'component',",
          "54:     'ExplorerContextProvider',",
          "55:   );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:     });",
          "81:   }, []);",
          "83:   return (",
          "86:       {props.children}",
          "87:     </ExplorerContext.Provider>",
          "88:   );",
          "",
          "[Removed Lines]",
          "84:     <ExplorerContext.Provider",
          "85:       value={{ explorerNavStack: state, push, pop, reset, showSearch }}>",
          "",
          "[Added Lines]",
          "91:   useEffect(() => {",
          "92:     if (isFetching) {",
          "93:       reset();",
          "94:     }",
          "95:   }, [isFetching, reset]);",
          "97:   const value = useMemo<ExplorerContextType>(",
          "98:     () => ({ explorerNavStack: state, push, pop, reset, showSearch }),",
          "99:     [state, push, pop, reset, showSearch],",
          "100:   );",
          "103:     <ExplorerContext.Provider value={value}>",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts": [
          "File: packages/graphiql-react/src/index.ts -> packages/graphiql-react/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:   useExplorerNavStack,",
          "15: } from './explorer';",
          "16: import { HistoryContext, HistoryContextProvider } from './history';",
          "17: import { StorageContext, StorageContextProvider } from './storage';",
          "19: import type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import { SchemaContext, SchemaContextProvider, useSchema } from './schema';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:   ExplorerNavStackItem,",
          "32: } from './explorer';",
          "33: import type { HistoryContextType } from './history';",
          "34: import type { StorageContextType } from './storage';",
          "36: export {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import type { SchemaContextType } from './schema';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:   HistoryContext,",
          "52:   HistoryContextProvider,",
          "54:   StorageContext,",
          "55:   StorageContextProvider,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:   SchemaContext,",
          "57:   SchemaContextProvider,",
          "58:   useSchema,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:   ExplorerNavStackItem,",
          "72:   HistoryContextType,",
          "74:   StorageContextType,",
          "75: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   SchemaContextType,",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/schema/context.tsx||packages/graphiql-react/src/schema/context.tsx": [
          "File: packages/graphiql-react/src/schema/context.tsx -> packages/graphiql-react/src/schema/context.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   Fetcher,",
          "3:   FetcherOpts,",
          "4:   fetcherReturnToPromise,",
          "5:   formatError,",
          "6:   formatResult,",
          "7:   isPromise,",
          "8: } from '@graphiql/toolkit';",
          "9: import {",
          "10:   buildClientSchema,",
          "11:   getIntrospectionQuery,",
          "12:   GraphQLError,",
          "13:   GraphQLSchema,",
          "14:   IntrospectionQuery,",
          "15:   validateSchema,",
          "16: } from 'graphql';",
          "17: import {",
          "18:   createContext,",
          "19:   Dispatch,",
          "20:   ReactNode,",
          "21:   SetStateAction,",
          "22:   useContext,",
          "23:   useEffect,",
          "24:   useMemo,",
          "25:   useRef,",
          "26:   useState,",
          "27: } from 'react';",
          "28: import { EditorContext } from '../editor';",
          "38: type MaybeGraphQLSchema = GraphQLSchema | null | undefined;",
          "40: export type SchemaContextType = {",
          "41:   fetchError: string | null;",
          "42:   isFetching: boolean;",
          "43:   schema: MaybeGraphQLSchema;",
          "44:   setFetchError: Dispatch<SetStateAction<string | null>>;",
          "45:   setSchema: Dispatch<SetStateAction<MaybeGraphQLSchema>>;",
          "46:   validationErrors: readonly GraphQLError[] | null;",
          "47: };",
          "49: export const SchemaContext = createContext<SchemaContextType>({",
          "50:   fetchError: null,",
          "51:   isFetching: false,",
          "52:   schema: null,",
          "53:   setFetchError() {},",
          "54:   setSchema() {},",
          "55:   validationErrors: null,",
          "56: });",
          "58: type SchemaContextProviderProps = {",
          "59:   children: ReactNode;",
          "60:   dangerouslyAssumeSchemaIsValid?: boolean;",
          "61:   fetcher: Fetcher;",
          "62:   initialHeaders?: string;",
          "63:   schema?: GraphQLSchema | null;",
          "64: } & IntrospectionArgs;",
          "66: export function SchemaContextProvider(props: SchemaContextProviderProps) {",
          "67:   const [schema, setSchema] = useState<MaybeGraphQLSchema>(",
          "68:     props.schema || null,",
          "69:   );",
          "70:   const [isFetching, setIsFetching] = useState(false);",
          "71:   const [fetchError, setFetchError] = useState<string | null>(null);",
          "76:   useEffect(() => {",
          "77:     setSchema(props.schema);",
          "78:   }, [props.schema]);",
          "83:   const headersRef = useRef(parseHeaderString(props.initialHeaders));",
          "84:   const { headerEditor } = useContext(EditorContext);",
          "85:   useEffect(() => {",
          "86:     if (!headerEditor) {",
          "87:       return;",
          "88:     }",
          "89:     headersRef.current = parseHeaderString(headerEditor.getValue());",
          "90:   }, [headerEditor]);",
          "95:   const {",
          "96:     introspectionQuery,",
          "97:     introspectionQueryName,",
          "98:     introspectionQuerySansSubscriptions,",
          "99:   } = useIntrospectionQuery({",
          "100:     inputValueDeprecation: props.inputValueDeprecation,",
          "101:     introspectionQueryName: props.introspectionQueryName,",
          "102:     schemaDescription: props.schemaDescription,",
          "103:   });",
          "108:   const { fetcher } = props;",
          "109:   useEffect(() => {",
          "110:     let isActive = true;",
          "112:     if (!headersRef.current.isValidJSON) {",
          "113:       setFetchError('Introspection failed as headers are invalid.');",
          "114:       return;",
          "115:     }",
          "117:     const fetcherOpts: FetcherOpts = headersRef.current.headers",
          "118:       ? { headers: headersRef.current.headers }",
          "119:       : {};",
          "121:     const fetch = fetcherReturnToPromise(",
          "122:       fetcher(",
          "123:         {",
          "124:           query: introspectionQuery,",
          "125:           operationName: introspectionQueryName,",
          "126:         },",
          "127:         fetcherOpts,",
          "128:       ),",
          "129:     );",
          "131:     if (!isPromise(fetch)) {",
          "132:       setFetchError('Fetcher did not return a Promise for introspection.');",
          "133:       return;",
          "134:     }",
          "136:     setIsFetching(true);",
          "138:     fetch",
          "139:       .then(result => {",
          "140:         if (typeof result === 'object' && result !== null && 'data' in result) {",
          "141:           return result;",
          "142:         }",
          "146:         const fetch2 = fetcherReturnToPromise(",
          "147:           fetcher(",
          "148:             {",
          "149:               query: introspectionQuerySansSubscriptions,",
          "150:               operationName: introspectionQueryName,",
          "151:             },",
          "152:             fetcherOpts,",
          "153:           ),",
          "154:         );",
          "155:         if (!isPromise(fetch2)) {",
          "156:           throw new Error(",
          "157:             'Fetcher did not return a Promise for introspection.',",
          "158:           );",
          "159:         }",
          "160:         return fetch2;",
          "161:       })",
          "162:       .then(result => {",
          "164:         if (!isActive) {",
          "165:           return;",
          "166:         }",
          "168:         if (result && result.data && '__schema' in result.data) {",
          "169:           try {",
          "170:             const newSchema = buildClientSchema(",
          "171:               result.data as IntrospectionQuery,",
          "172:             );",
          "173:             setSchema(newSchema);",
          "174:           } catch (error) {",
          "175:             setFetchError(formatError(error as Error));",
          "176:           }",
          "177:         } else {",
          "179:           const responseString =",
          "180:             typeof result === 'string' ? result : formatResult(result);",
          "181:           setFetchError(responseString);",
          "182:         }",
          "184:         setIsFetching(false);",
          "185:       })",
          "186:       .catch(error => {",
          "188:         if (!isActive) {",
          "189:           return;",
          "190:         }",
          "192:         setFetchError(formatError(error));",
          "193:         setIsFetching(false);",
          "194:       });",
          "196:     return () => {",
          "197:       isActive = false;",
          "198:     };",
          "199:   }, [",
          "200:     fetcher,",
          "201:     introspectionQueryName,",
          "202:     introspectionQuery,",
          "203:     introspectionQuerySansSubscriptions,",
          "204:   ]);",
          "209:   const validationErrors = useMemo(() => {",
          "210:     if (!schema || props.dangerouslyAssumeSchemaIsValid) {",
          "211:       return null;",
          "212:     }",
          "213:     const errors = validateSchema(schema);",
          "214:     return errors.length > 0 ? errors : null;",
          "215:   }, [schema, props.dangerouslyAssumeSchemaIsValid]);",
          "220:   const value = useMemo(",
          "221:     () => ({",
          "222:       fetchError,",
          "223:       isFetching,",
          "224:       schema,",
          "225:       setFetchError,",
          "226:       setSchema,",
          "227:       validationErrors,",
          "228:     }),",
          "229:     [fetchError, isFetching, schema, validationErrors],",
          "230:   );",
          "232:   return (",
          "233:     <SchemaContext.Provider value={value}>",
          "234:       {props.children}",
          "235:     </SchemaContext.Provider>",
          "236:   );",
          "237: }",
          "239: type IntrospectionArgs = {",
          "240:   inputValueDeprecation?: boolean;",
          "241:   introspectionQueryName?: string;",
          "242:   schemaDescription?: boolean;",
          "243: };",
          "245: function useIntrospectionQuery({",
          "246:   inputValueDeprecation,",
          "247:   introspectionQueryName,",
          "248:   schemaDescription,",
          "249: }: IntrospectionArgs) {",
          "250:   return useMemo(() => {",
          "251:     const queryName = introspectionQueryName || 'IntrospectionQuery';",
          "253:     let query = getIntrospectionQuery({",
          "254:       inputValueDeprecation,",
          "255:       schemaDescription,",
          "256:     });",
          "257:     if (introspectionQueryName) {",
          "258:       query = query.replace('query IntrospectionQuery', `query ${queryName}`);",
          "259:     }",
          "261:     const querySansSubscriptions = query.replace(",
          "262:       'subscriptionType { name }',",
          "263:       '',",
          "264:     );",
          "266:     return {",
          "267:       introspectionQueryName: queryName,",
          "268:       introspectionQuery: query,",
          "269:       introspectionQuerySansSubscriptions: querySansSubscriptions,",
          "270:     };",
          "271:   }, [inputValueDeprecation, introspectionQueryName, schemaDescription]);",
          "272: }",
          "274: function parseHeaderString(headersString: string | undefined) {",
          "275:   let headers: Record<string, unknown> | null = null;",
          "276:   let isValidJSON = true;",
          "278:   try {",
          "279:     if (headersString) {",
          "280:       headers = JSON.parse(headersString);",
          "281:     }",
          "282:   } catch (err) {",
          "283:     isValidJSON = false;",
          "284:   }",
          "285:   return { headers, isValidJSON };",
          "286: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/schema/hooks.ts||packages/graphiql-react/src/schema/hooks.ts": [
          "File: packages/graphiql-react/src/schema/hooks.ts -> packages/graphiql-react/src/schema/hooks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { useContext } from 'react';",
          "3: import { SchemaContext } from './context';",
          "5: export function useSchemaWithError(type: 'component' | 'hook', name: string) {",
          "6:   const context = useContext(SchemaContext);",
          "7:   if (!context) {",
          "8:     throw new Error(",
          "9:       `Tried to call the \\`${name}\\` ${type} without the necessary context. Make sure that the \\`SchemaContextProvider\\` from \\`@graphiql/react\\` is rendered higher in the tree.`,",
          "10:     );",
          "11:   }",
          "12:   return context;",
          "13: }",
          "15: export function useSchema() {",
          "16:   return useSchemaWithError('hook', 'useSchema');",
          "17: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/schema/index.ts||packages/graphiql-react/src/schema/index.ts": [
          "File: packages/graphiql-react/src/schema/index.ts -> packages/graphiql-react/src/schema/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { SchemaContext, SchemaContextProvider } from './context';",
          "2: import { useSchema, useSchemaWithError } from './hooks';",
          "4: import type { SchemaContextType } from './context';",
          "6: export { SchemaContext, SchemaContextProvider, useSchema, useSchemaWithError };",
          "8: export type { SchemaContextType };",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts": [
          "File: packages/graphiql/__mocks__/@graphiql/react.ts -> packages/graphiql/__mocks__/@graphiql/react.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   HistoryContextProvider,",
          "8:   ImagePreview,",
          "9:   onHasCompletion,",
          "10:   StorageContext,",
          "11:   StorageContextProvider,",
          "12:   useExplorerNavStack,",
          "13:   useHeaderEditor as _useHeaderEditor,",
          "14:   useQueryEditor as _useQueryEditor,",
          "15:   useResponseEditor as _useResponseEditor,",
          "16:   useVariableEditor as _useVariableEditor,",
          "17: } from '@graphiql/react';",
          "18: import type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:   SchemaContext,",
          "11:   SchemaContextProvider,",
          "18:   useSchema,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:   ExplorerNavStackItem,",
          "24:   HistoryContextType,",
          "25:   ResponseTooltipType,",
          "26:   StorageContextType,",
          "27:   UseHeaderEditorArgs,",
          "28:   UseResponseEditorArgs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:   SchemaContextType,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:   HistoryContextProvider,",
          "41:   ImagePreview,",
          "42:   onHasCompletion,",
          "43:   StorageContext,",
          "44:   StorageContextProvider,",
          "45:   useExplorerNavStack,",
          "46: };",
          "48: export type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   SchemaContext,",
          "48:   SchemaContextProvider,",
          "52:   useSchema,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "53:   ExplorerNavStackItem,",
          "54:   HistoryContextType,",
          "55:   ResponseTooltipType,",
          "56:   StorageContextType,",
          "57:   UseHeaderEditorArgs,",
          "58:   UseResponseEditorArgs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:   SchemaContextType,",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import FieldDoc from './DocExplorer/FieldDoc';",
          "13: import SchemaDoc from './DocExplorer/SchemaDoc';",
          "",
          "[Removed Lines]",
          "8: import React, { memo, ReactNode } from 'react';",
          "9: import { GraphQLSchema, isType, GraphQLNamedType, GraphQLError } from 'graphql';",
          "10: import { ExplorerFieldDef, useExplorerNavStack } from '@graphiql/react';",
          "",
          "[Added Lines]",
          "8: import React, { ReactNode } from 'react';",
          "9: import { isType, GraphQLNamedType } from 'graphql';",
          "10: import {",
          "11:   ExplorerFieldDef,",
          "12:   useExplorerNavStack,",
          "13:   useSchema,",
          "14: } from '@graphiql/react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: import SearchResults from './DocExplorer/SearchResults';",
          "16: import TypeDoc from './DocExplorer/TypeDoc';",
          "126:         </div>",
          "",
          "[Removed Lines]",
          "18: type DocExplorerProps = {",
          "19:   schema?: GraphQLSchema | null;",
          "20:   schemaErrors?: readonly GraphQLError[];",
          "21:   children?: ReactNode;",
          "22: };",
          "40: export const DocExplorer = memo(",
          "41:   function DocExplorer({ children, schema, schemaErrors }: DocExplorerProps) {",
          "42:     const explorerContext = useExplorerNavStack();",
          "43:     if (!explorerContext) {",
          "44:       throw new Error(",
          "45:         'Tried to render the `DocExplorer` component without the necessary context. Make sure that the `ExplorerContextProvider` from `@graphiql/react` is rendered higher in the tree.',",
          "46:       );",
          "47:     }",
          "49:     const { explorerNavStack, pop, push, showSearch } = explorerContext;",
          "50:     const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "52:     function handleClickType(type: GraphQLNamedType) {",
          "53:       push({ name: type.name, def: type });",
          "54:     }",
          "56:     function handleClickField(field: ExplorerFieldDef) {",
          "57:       push({ name: field.name, def: field });",
          "58:     }",
          "60:     let content: ReactNode;",
          "61:     if (schemaErrors) {",
          "62:       content = <div className=\"error-container\">Error fetching schema</div>;",
          "63:     } else if (schema === undefined) {",
          "65:       content = (",
          "66:         <div className=\"spinner-container\">",
          "67:           <div className=\"spinner\" />",
          "68:         </div>",
          "69:       );",
          "70:     } else if (!schema) {",
          "73:       content = <div className=\"error-container\">No Schema Available</div>;",
          "74:     } else if (navItem.search) {",
          "75:       content = (",
          "76:         <SearchResults",
          "77:           searchValue={navItem.search}",
          "78:           withinType={navItem.def as GraphQLNamedType}",
          "79:           schema={schema}",
          "80:           onClickType={handleClickType}",
          "81:           onClickField={handleClickField}",
          "82:         />",
          "83:       );",
          "84:     } else if (explorerNavStack.length === 1) {",
          "85:       content = <SchemaDoc schema={schema} onClickType={handleClickType} />;",
          "86:     } else if (isType(navItem.def)) {",
          "87:       content = (",
          "88:         <TypeDoc",
          "89:           schema={schema}",
          "90:           type={navItem.def}",
          "91:           onClickType={handleClickType}",
          "92:           onClickField={handleClickField}",
          "93:         />",
          "94:       );",
          "95:     } else {",
          "96:       content = <FieldDoc field={navItem.def} onClickType={handleClickType} />;",
          "97:     }",
          "99:     const shouldSearchBoxAppear =",
          "100:       explorerNavStack.length === 1 ||",
          "101:       (isType(navItem.def) && 'getFields' in navItem.def);",
          "103:     let prevName;",
          "104:     if (explorerNavStack.length > 1) {",
          "105:       prevName = explorerNavStack[explorerNavStack.length - 2].name;",
          "106:     }",
          "108:     return (",
          "109:       <section",
          "110:         className=\"doc-explorer\"",
          "111:         key={navItem.name}",
          "112:         aria-label=\"Documentation Explorer\">",
          "113:         <div className=\"doc-explorer-title-bar\">",
          "114:           {prevName && (",
          "115:             <button",
          "116:               className=\"doc-explorer-back\"",
          "117:               onClick={pop}",
          "118:               aria-label={`Go back to ${prevName}`}>",
          "119:               {prevName}",
          "120:             </button>",
          "121:           )}",
          "122:           <div className=\"doc-explorer-title\">",
          "123:             {navItem.title || navItem.name}",
          "124:           </div>",
          "125:           <div className=\"doc-explorer-rhs\">{children}</div>",
          "127:         <div className=\"doc-explorer-contents\">",
          "128:           {shouldSearchBoxAppear && (",
          "129:             <SearchBox",
          "130:               value={navItem.search}",
          "131:               placeholder={`Search ${navItem.name}...`}",
          "132:               onSearch={showSearch}",
          "133:             />",
          "134:           )}",
          "135:           {content}",
          "136:         </div>",
          "137:       </section>",
          "138:     );",
          "139:   },",
          "140:   (prevProps, nextProps) =>",
          "141:     prevProps.schema === nextProps.schema &&",
          "142:     prevProps.schemaErrors === nextProps.schemaErrors,",
          "143: );",
          "",
          "[Added Lines]",
          "33: export function DocExplorer(props: { children?: ReactNode }) {",
          "34:   const { fetchError, isFetching, schema, validationErrors } = useSchema();",
          "35:   const explorerContext = useExplorerNavStack();",
          "36:   if (!explorerContext) {",
          "37:     throw new Error(",
          "38:       'Tried to render the `DocExplorer` component without the necessary context. Make sure that the `ExplorerContextProvider` from `@graphiql/react` is rendered higher in the tree.',",
          "39:     );",
          "40:   }",
          "42:   const { explorerNavStack, pop, push, showSearch } = explorerContext;",
          "43:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "45:   function handleClickType(type: GraphQLNamedType) {",
          "46:     push({ name: type.name, def: type });",
          "47:   }",
          "49:   function handleClickField(field: ExplorerFieldDef) {",
          "50:     push({ name: field.name, def: field });",
          "51:   }",
          "53:   let content: ReactNode;",
          "54:   if (fetchError) {",
          "55:     content = <div className=\"error-container\">Error fetching schema</div>;",
          "56:   } else if (validationErrors) {",
          "57:     content = (",
          "58:       <div className=\"error-container\">",
          "59:         Schema is invalid: {validationErrors[0].message}",
          "60:       </div>",
          "61:     );",
          "62:   } else if (isFetching) {",
          "64:     content = (",
          "65:       <div className=\"spinner-container\">",
          "66:         <div className=\"spinner\" />",
          "67:       </div>",
          "68:     );",
          "69:   } else if (!schema) {",
          "72:     content = <div className=\"error-container\">No Schema Available</div>;",
          "73:   } else if (navItem.search) {",
          "74:     content = (",
          "75:       <SearchResults",
          "76:         searchValue={navItem.search}",
          "77:         withinType={navItem.def as GraphQLNamedType}",
          "78:         schema={schema}",
          "79:         onClickType={handleClickType}",
          "80:         onClickField={handleClickField}",
          "81:       />",
          "82:     );",
          "83:   } else if (explorerNavStack.length === 1) {",
          "84:     content = <SchemaDoc schema={schema} onClickType={handleClickType} />;",
          "85:   } else if (isType(navItem.def)) {",
          "86:     content = (",
          "87:       <TypeDoc",
          "88:         schema={schema}",
          "89:         type={navItem.def}",
          "90:         onClickType={handleClickType}",
          "91:         onClickField={handleClickField}",
          "92:       />",
          "93:     );",
          "94:   } else {",
          "95:     content = <FieldDoc field={navItem.def} onClickType={handleClickType} />;",
          "96:   }",
          "98:   const shouldSearchBoxAppear =",
          "99:     explorerNavStack.length === 1 ||",
          "100:     (isType(navItem.def) && 'getFields' in navItem.def);",
          "102:   let prevName;",
          "103:   if (explorerNavStack.length > 1) {",
          "104:     prevName = explorerNavStack[explorerNavStack.length - 2].name;",
          "105:   }",
          "107:   return (",
          "108:     <section",
          "109:       className=\"doc-explorer\"",
          "110:       key={navItem.name}",
          "111:       aria-label=\"Documentation Explorer\">",
          "112:       <div className=\"doc-explorer-title-bar\">",
          "113:         {prevName && (",
          "114:           <button",
          "115:             className=\"doc-explorer-back\"",
          "116:             onClick={pop}",
          "117:             aria-label={`Go back to ${prevName}`}>",
          "118:             {prevName}",
          "119:           </button>",
          "120:         )}",
          "121:         <div className=\"doc-explorer-title\">",
          "122:           {navItem.title || navItem.name}",
          "124:         <div className=\"doc-explorer-rhs\">{props.children}</div>",
          "125:       </div>",
          "126:       <div className=\"doc-explorer-contents\">",
          "127:         {shouldSearchBoxAppear && (",
          "128:           <SearchBox",
          "129:             value={navItem.search}",
          "130:             placeholder={`Search ${navItem.name}...`}",
          "131:             onSearch={showSearch}",
          "132:           />",
          "133:         )}",
          "134:         {content}",
          "135:       </div>",
          "136:     </section>",
          "137:   );",
          "138: }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   ReactNode,",
          "13: } from 'react';",
          "14: import {",
          "16:   GraphQLSchema,",
          "17:   parse,",
          "18:   print,",
          "",
          "[Removed Lines]",
          "15:   buildClientSchema,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:   ValidationRule,",
          "22:   FragmentDefinitionNode,",
          "23:   DocumentNode,",
          "27:   GraphQLNamedType,",
          "28: } from 'graphql';",
          "29: import copyToClipboard from 'copy-to-clipboard';",
          "",
          "[Removed Lines]",
          "24:   GraphQLError,",
          "25:   IntrospectionQuery,",
          "26:   getIntrospectionQuery,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:   ExplorerContextProvider,",
          "42:   HistoryContext,",
          "43:   HistoryContextProvider,",
          "44:   StorageContext,",
          "45:   StorageContextProvider,",
          "46: } from '@graphiql/react';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   SchemaContext,",
          "41:   SchemaContextProvider,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:   ExplorerFieldDef,",
          "51:   HistoryContextType,",
          "52:   ResponseTooltipType,",
          "53:   StorageContextType,",
          "54: } from '@graphiql/react';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   SchemaContextType,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "66: import debounce from '../utility/debounce';",
          "67: import find from '../utility/find';",
          "68: import { getLeft, getTop } from '../utility/elementPosition';",
          "70: import setValue from 'set-value';",
          "72: import {",
          "75:   formatError,",
          "76:   formatResult,",
          "77:   getSelectedOperationName,",
          "78:   isAsyncIterable,",
          "79:   isObservable,",
          "81:   mergeAst,",
          "82: } from '@graphiql/toolkit';",
          "83: import type {",
          "84:   Fetcher,",
          "86:   FetcherResult,",
          "87:   FetcherResultPayload,",
          "88:   GetDefaultFieldNamesFn,",
          "",
          "[Removed Lines]",
          "69: import { introspectionQueryName } from '../utility/introspectionQueries';",
          "73:   fetcherReturnToPromise,",
          "74:   fillLeafs,",
          "80:   isPromise,",
          "85:   FetcherOpts,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "91:   Unsubscribable,",
          "92: } from '@graphiql/toolkit';",
          "95: import { Tab, TabAddButton, Tabs } from './Tabs';",
          "96: import { fuzzyExtractOperationTitle } from '../utility/fuzzyExtractOperationTitle';",
          "97: import { idFromTabContents } from '../utility/id-from-tab-contents';",
          "",
          "[Removed Lines]",
          "94: import { validateSchema } from 'graphql';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "340:   headerEditorActive: boolean;",
          "341:   headerEditorEnabled: boolean;",
          "342:   shouldPersistHeaders: boolean;",
          "344:   docExplorerWidth: number;",
          "345:   isWaitingForResponse: boolean;",
          "346:   subscription?: Unsubscribable | null;",
          "",
          "[Removed Lines]",
          "343:   schemaErrors?: readonly GraphQLError[];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "377:     <StorageContextProvider storage={props.storage}>",
          "378:       <StorageContext.Consumer>",
          "379:         {storageContext => (",
          "407:         )}",
          "408:       </StorageContext.Consumer>",
          "409:     </StorageContextProvider>",
          "",
          "[Removed Lines]",
          "380:           <EditorContextProvider>",
          "381:             <HistoryContextProvider",
          "382:               maxHistoryLength={props.maxHistoryLength}",
          "383:               onToggle={props.onToggleHistory}>",
          "384:               <ExplorerContextProvider>",
          "385:                 <EditorContext.Consumer>",
          "386:                   {editorContext => (",
          "387:                     <HistoryContext.Consumer>",
          "388:                       {historyContext => (",
          "389:                         <ExplorerContext.Consumer>",
          "390:                           {explorerContext => (",
          "391:                             <GraphiQLWithContext",
          "392:                               {...props}",
          "393:                               editorContext={editorContext}",
          "394:                               explorerContext={explorerContext}",
          "395:                               historyContext={historyContext}",
          "396:                               storageContext={storageContext}",
          "397:                             />",
          "398:                           )}",
          "399:                         </ExplorerContext.Consumer>",
          "400:                       )}",
          "401:                     </HistoryContext.Consumer>",
          "402:                   )}",
          "403:                 </EditorContext.Consumer>",
          "404:               </ExplorerContextProvider>",
          "405:             </HistoryContextProvider>",
          "406:           </EditorContextProvider>",
          "",
          "[Added Lines]",
          "372:           <SchemaContextProvider",
          "373:             dangerouslyAssumeSchemaIsValid={",
          "374:               props.dangerouslyAssumeSchemaIsValid",
          "375:             }",
          "376:             fetcher={props.fetcher}",
          "377:             initialHeaders={",
          "378:               props.headers !== undefined",
          "379:                 ? props.headers",
          "380:                 : storageContext?.get('headers') ?? undefined",
          "381:             }",
          "382:             inputValueDeprecation={props.inputValueDeprecation}",
          "383:             introspectionQueryName={props.introspectionQueryName}",
          "384:             schema={props.schema}",
          "385:             schemaDescription={props.schemaDescription}>",
          "386:             <EditorContextProvider>",
          "387:               <HistoryContextProvider",
          "388:                 maxHistoryLength={props.maxHistoryLength}",
          "389:                 onToggle={props.onToggleHistory}>",
          "390:                 <ExplorerContextProvider>",
          "391:                   <SchemaContext.Consumer>",
          "392:                     {schemaContext => (",
          "393:                       <EditorContext.Consumer>",
          "394:                         {editorContext => (",
          "395:                           <HistoryContext.Consumer>",
          "396:                             {historyContext => (",
          "397:                               <ExplorerContext.Consumer>",
          "398:                                 {explorerContext => (",
          "399:                                   <GraphiQLWithContext",
          "400:                                     {...props}",
          "401:                                     editorContext={editorContext}",
          "402:                                     explorerContext={explorerContext}",
          "403:                                     historyContext={historyContext}",
          "404:                                     schemaContext={schemaContext}",
          "405:                                     storageContext={storageContext}",
          "406:                                   />",
          "407:                                 )}",
          "408:                               </ExplorerContext.Consumer>",
          "409:                             )}",
          "410:                           </HistoryContext.Consumer>",
          "411:                         )}",
          "412:                       </EditorContext.Consumer>",
          "413:                     )}",
          "414:                   </SchemaContext.Consumer>",
          "415:                 </ExplorerContextProvider>",
          "416:               </HistoryContextProvider>",
          "417:             </EditorContextProvider>",
          "418:           </SchemaContextProvider>",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "452:   GraphiQLProps,",
          "453:   'maxHistoryLength' | 'onToggleHistory' | 'storage'",
          "454: > & {",
          "456:   explorerContext: ExplorerContextType | null;",
          "457:   historyContext: HistoryContextType | null;",
          "458:   storageContext: StorageContextType | null;",
          "459: };",
          "",
          "[Removed Lines]",
          "455:   editorContext: EditorContextType | null;",
          "",
          "[Added Lines]",
          "467:   editorContext: EditorContextType;",
          "470:   schemaContext: SchemaContextType;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "464: > {",
          "466:   _editorQueryID = 0;",
          "472:   componentIsMounted: boolean;",
          "",
          "[Removed Lines]",
          "467:   _introspectionQuery: string;",
          "468:   _introspectionQueryName: string;",
          "469:   _introspectionQuerySansSubscriptions: string;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "535:     const headerEditorEnabled = props.headerEditorEnabled ?? true;",
          "536:     const shouldPersistHeaders = props.shouldPersistHeaders ?? false;",
          "568:     const initialTabHash = idFromTabContents({",
          "569:       query,",
          "570:       variables: variables ?? undefined,",
          "",
          "[Removed Lines]",
          "538:     let schema = props.schema;",
          "539:     let response = props.response;",
          "540:     let schemaErrors: readonly GraphQLError[] | undefined = undefined;",
          "541:     if (schema && !this.props.dangerouslyAssumeSchemaIsValid) {",
          "542:       const validationErrors = validateSchema(schema);",
          "543:       if (validationErrors && validationErrors.length > 0) {",
          "546:         response = formatError(validationErrors);",
          "547:         schema = undefined;",
          "548:         schemaErrors = validationErrors;",
          "549:       }",
          "550:     }",
          "552:     this._introspectionQuery = getIntrospectionQuery({",
          "553:       schemaDescription: props.schemaDescription ?? undefined,",
          "554:       inputValueDeprecation: props.inputValueDeprecation ?? undefined,",
          "555:     });",
          "557:     this._introspectionQueryName =",
          "558:       props.introspectionQueryName ?? introspectionQueryName;",
          "563:     this._introspectionQuerySansSubscriptions = this._introspectionQuery.replace(",
          "564:       'subscriptionType { name }',",
          "565:       '',",
          "566:     );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "635:     this.state = {",
          "636:       tabs: tabsState,",
          "638:       query: activeTab?.query,",
          "639:       operationName: activeTab?.operationName,",
          "641:       docExplorerOpen,",
          "643:       editorFlex: Number(this.props.storageContext?.get('editorFlex')) || 1,",
          "644:       secondaryEditorOpen,",
          "645:       secondaryEditorHeight:",
          "",
          "[Removed Lines]",
          "637:       schema,",
          "640:       response: activeTab?.response ?? response,",
          "642:       schemaErrors,",
          "",
          "[Added Lines]",
          "617:       schema: props.schema,",
          "620:       response: activeTab?.response,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "670:     this.componentIsMounted = true;",
          "678:     if (typeof window !== 'undefined') {",
          "679:       window.g = this;",
          "680:     }",
          "",
          "[Removed Lines]",
          "674:     if (this.state.schema === undefined) {",
          "675:       this.fetchSchema();",
          "676:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "711:         nextQuery !== this.state.query ||",
          "712:         nextOperationName !== this.state.operationName)",
          "713:     ) {",
          "722:       const updatedQueryAttributes = this._updateQueryFacts(",
          "723:         nextQuery,",
          "724:         nextOperationName,",
          "",
          "[Removed Lines]",
          "714:       if (!this.props.dangerouslyAssumeSchemaIsValid) {",
          "715:         const validationErrors = validateSchema(nextSchema);",
          "716:         if (validationErrors && validationErrors.length > 0) {",
          "717:           this.handleSchemaErrors(validationErrors);",
          "718:           nextSchema = undefined;",
          "719:         }",
          "720:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "744:     if (nextOperationName !== undefined) {",
          "745:       this.props.storageContext?.set('operationName', nextOperationName);",
          "746:     }",
          "761:   }",
          "",
          "[Removed Lines]",
          "747:     this.setState(",
          "748:       {",
          "749:         schema: nextSchema,",
          "750:         query: nextQuery,",
          "751:         operationName: nextOperationName,",
          "752:         response: nextResponse,",
          "753:       },",
          "754:       () => {",
          "755:         if (this.state.schema === undefined) {",
          "756:           this.props.explorerContext?.reset();",
          "757:           this.fetchSchema();",
          "758:         }",
          "759:       },",
          "760:     );",
          "",
          "[Added Lines]",
          "712:     this.setState({",
          "713:       schema: nextSchema,",
          "714:       query: nextQuery,",
          "715:       operationName: nextOperationName,",
          "716:       response: nextResponse,",
          "717:     });",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "949:             onMouseDown={this.handleResizeStart}>",
          "950:             <div className=\"queryWrap\" style={queryWrapStyle}>",
          "951:               <QueryEditor",
          "953:                 validationRules={this.props.validationRules}",
          "954:                 value={this.state.query}",
          "955:                 onEdit={this.handleEditQuery}",
          "",
          "[Removed Lines]",
          "952:                 schema={this.state.schema}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1049:               onDoubleClick={this.handleDocsResetResize}",
          "1050:               onMouseDown={this.handleDocsResizeStart}",
          "1051:             />",
          "1055:               <button",
          "1056:                 className=\"docExplorerHide\"",
          "1057:                 onClick={this.handleToggleDocs}",
          "",
          "[Removed Lines]",
          "1052:             <DocExplorer",
          "1053:               schemaErrors={this.state.schemaErrors}",
          "1054:               schema={this.state.schema}>",
          "",
          "[Added Lines]",
          "1008:             <DocExplorer>",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1073:   getQueryEditor() {",
          "1075:   }",
          "",
          "[Removed Lines]",
          "1074:     return this.props.editorContext?.queryEditor || null;",
          "",
          "[Added Lines]",
          "1028:     return this.props.editorContext.queryEditor || null;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1082:   public getVariableEditor() {",
          "1084:   }",
          "",
          "[Removed Lines]",
          "1083:     return this.props.editorContext?.variableEditor || null;",
          "",
          "[Added Lines]",
          "1037:     return this.props.editorContext.variableEditor || null;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1091:   public getHeaderEditor() {",
          "1093:   }",
          "",
          "[Removed Lines]",
          "1092:     return this.props.editorContext?.headerEditor || null;",
          "",
          "[Added Lines]",
          "1046:     return this.props.editorContext.headerEditor || null;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1100:   public refresh() {",
          "1105:   }",
          "",
          "[Removed Lines]",
          "1101:     this.props.editorContext?.queryEditor?.refresh();",
          "1102:     this.props.editorContext?.variableEditor?.refresh();",
          "1103:     this.props.editorContext?.headerEditor?.refresh();",
          "1104:     this.props.editorContext?.responseEditor?.refresh();",
          "",
          "[Added Lines]",
          "1055:     this.props.editorContext.queryEditor?.refresh();",
          "1056:     this.props.editorContext.variableEditor?.refresh();",
          "1057:     this.props.editorContext.headerEditor?.refresh();",
          "1058:     this.props.editorContext.responseEditor?.refresh();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1113:   public autoCompleteLeafs() {",
          "1118:     );",
          "1151:   }",
          "1269:   private async _fetchQuery(",
          "1270:     query: string,",
          "1271:     variables: string | undefined,",
          "",
          "[Removed Lines]",
          "1114:     const { insertions, result } = fillLeafs(",
          "1115:       this.state.schema,",
          "1116:       this.state.query,",
          "1117:       this.props.getDefaultFieldNames,",
          "1119:     if (insertions && insertions.length > 0) {",
          "1120:       const editor = this.getQueryEditor();",
          "1121:       if (editor) {",
          "1122:         editor.operation(() => {",
          "1123:           const cursor = editor.getCursor();",
          "1124:           const cursorIndex = editor.indexFromPos(cursor);",
          "1125:           editor.setValue(result || '');",
          "1126:           let added = 0;",
          "1127:           const markers = insertions.map(({ index, string }) =>",
          "1128:             editor.markText(",
          "1129:               editor.posFromIndex(index + added),",
          "1130:               editor.posFromIndex(index + (added += string.length)),",
          "1131:               {",
          "1132:                 className: 'autoInsertedLeaf',",
          "1133:                 clearOnEnter: true,",
          "1134:                 title: 'Automatically added leaf fields',",
          "1135:               },",
          "1136:             ),",
          "1137:           );",
          "1138:           setTimeout(() => markers.forEach(marker => marker.clear()), 7000);",
          "1139:           let newCursorIndex = cursorIndex;",
          "1140:           insertions.forEach(({ index, string }) => {",
          "1141:             if (index < cursorIndex) {",
          "1142:               newCursorIndex += string.length;",
          "1143:             }",
          "1144:           });",
          "1145:           editor.setCursor(editor.posFromIndex(newCursorIndex));",
          "1146:         });",
          "1147:       }",
          "1148:     }",
          "1150:     return result;",
          "1155:   private fetchSchema() {",
          "1156:     const fetcher = this.props.fetcher;",
          "1158:     const fetcherOpts: FetcherOpts = {",
          "1159:       shouldPersistHeaders: Boolean(this.props.shouldPersistHeaders),",
          "1160:       documentAST: this.state.documentAST,",
          "1161:     };",
          "1162:     const headers = getHeaders(this.props);",
          "1163:     try {",
          "1164:       if (headers && headers.trim().length > 2) {",
          "1165:         fetcherOpts.headers = JSON.parse(headers);",
          "1167:       } else if (this.props.headers) {",
          "1168:         fetcherOpts.headers = JSON.parse(this.props.headers);",
          "1169:       }",
          "1170:     } catch (err) {",
          "1171:       this.setState({",
          "1172:         response: 'Introspection failed as headers are invalid.',",
          "1173:       });",
          "1174:       return;",
          "1175:     }",
          "1177:     const fetch = fetcherReturnToPromise(",
          "1178:       fetcher(",
          "1179:         {",
          "1180:           query: this._introspectionQuery,",
          "1181:           operationName: this._introspectionQueryName,",
          "1182:         },",
          "1183:         fetcherOpts,",
          "1184:       ),",
          "1185:     );",
          "1187:     if (!isPromise(fetch)) {",
          "1188:       this.setState({",
          "1189:         response: 'Fetcher did not return a Promise for introspection.',",
          "1190:       });",
          "1191:       return;",
          "1192:     }",
          "1194:     fetch",
          "1195:       .then(result => {",
          "1196:         if (typeof result !== 'string' && 'data' in result) {",
          "1197:           return result;",
          "1198:         }",
          "1202:         const fetch2 = fetcherReturnToPromise(",
          "1203:           fetcher(",
          "1204:             {",
          "1205:               query: this._introspectionQuerySansSubscriptions,",
          "1206:               operationName: this._introspectionQueryName,",
          "1207:             },",
          "1208:             fetcherOpts,",
          "1209:           ),",
          "1210:         );",
          "1211:         if (!isPromise(fetch)) {",
          "1212:           throw new Error(",
          "1213:             'Fetcher did not return a Promise for introspection.',",
          "1214:           );",
          "1215:         }",
          "1216:         return fetch2;",
          "1217:       })",
          "1218:       .then(result => {",
          "1222:         if (this.state.schema !== undefined) {",
          "1223:           return;",
          "1224:         }",
          "1226:         if (result && result.data && '__schema' in result?.data) {",
          "1227:           let schema: GraphQLSchema | undefined = buildClientSchema(",
          "1228:             result.data as IntrospectionQuery,",
          "1229:           );",
          "1230:           if (!this.props.dangerouslyAssumeSchemaIsValid) {",
          "1231:             const errors = validateSchema(schema);",
          "1233:             if (errors && errors.length > 0) {",
          "1234:               schema = undefined;",
          "1235:               this.handleSchemaErrors(errors);",
          "1236:             }",
          "1237:           }",
          "1238:           if (schema) {",
          "1239:             const queryFacts = getOperationFacts(schema, this.state.query);",
          "1240:             this.safeSetState({",
          "1241:               schema,",
          "1242:               ...queryFacts,",
          "1243:               schemaErrors: undefined,",
          "1244:             });",
          "1245:             this.props.onSchemaChange?.(schema);",
          "1246:           }",
          "1247:         } else {",
          "1249:           const responseString =",
          "1250:             typeof result === 'string' ? result : formatResult(result);",
          "1251:           this.handleSchemaErrors([responseString]);",
          "1252:         }",
          "1253:       })",
          "1254:       .catch(error => {",
          "1255:         this.handleSchemaErrors([error]);",
          "1256:       });",
          "1257:   }",
          "1259:   private handleSchemaErrors(",
          "1260:     schemaErrors: readonly GraphQLError[] | readonly string[],",
          "1261:   ) {",
          "1262:     this.safeSetState({",
          "1263:       response: schemaErrors ? formatError(schemaErrors) : undefined,",
          "1264:       schema: undefined,",
          "1265:       schemaErrors,",
          "1266:     });",
          "1267:   }",
          "",
          "[Added Lines]",
          "1068:     console.warn(",
          "1069:       'The method `GraphiQL.autoCompleteLeafs` is deprecated and will be removed in the next major version. Please switch to using the `autoCompleteLeafs` function provided by the `EditorContext` from the `@graphiql/react` package.',",
          "1071:     return this.props.editorContext.autoCompleteLeafs();",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1431:     const variables = getVariables(this.props);",
          "1432:     const headers = getHeaders(this.props);",
          "1433:     const shouldPersistHeaders = this.state.shouldPersistHeaders;",
          "",
          "[Removed Lines]",
          "1430:     const editedQuery = this.autoCompleteLeafs() || this.state.query || '';",
          "",
          "[Added Lines]",
          "1237:     const editedQuery =",
          "1238:       this.props.editorContext.autoCompleteLeafs() || this.state.query || '';",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1472:             let maybeMultipart = Array.isArray(result) ? result : false;",
          "1473:             if (",
          "1474:               !maybeMultipart &&",
          "1476:               result !== null &&",
          "1477:               'hasNext' in result",
          "1478:             ) {",
          "",
          "[Removed Lines]",
          "1475:               typeof result !== 'string' &&",
          "",
          "[Added Lines]",
          "1283:               typeof result === 'object' &&",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1657:       return;",
          "1658:     }",
          "1661:   };",
          "1663:   handleEditQuery = debounce(100, (value: string) => {",
          "",
          "[Removed Lines]",
          "1660:     editor.setValue(print(mergeAst(this.state.documentAST, this.state.schema)));",
          "",
          "[Added Lines]",
          "1468:     editor.setValue(",
          "1469:       print(mergeAst(this.state.documentAST, this.props.schemaContext.schema)),",
          "1470:     );",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1665:       value,",
          "1666:       this.state.operationName,",
          "1667:       this.state.operations,",
          "1669:     );",
          "1671:     this.setState(",
          "",
          "[Removed Lines]",
          "1668:       this.state.schema,",
          "",
          "[Added Lines]",
          "1478:       this.props.schemaContext.schema,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1796:       event.currentTarget.className === 'typeName'",
          "1797:     ) {",
          "1798:       const typeName = event.currentTarget.innerHTML;",
          "1800:       if (schema) {",
          "1801:         const type = schema.getType(typeName);",
          "1802:         if (type) {",
          "",
          "[Removed Lines]",
          "1799:       const schema = this.state.schema;",
          "",
          "[Added Lines]",
          "1609:       const schema = this.props.schemaContext.schema;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2366: }",
          "2368: function getVariables(props: GraphiQLWithContextProps) {",
          "2370: }",
          "2372: function setVariables(props: GraphiQLWithContextProps, value: string) {",
          "2374: }",
          "2376: function getHeaders(props: GraphiQLWithContextProps) {",
          "2378: }",
          "2380: function setHeaders(props: GraphiQLWithContextProps, value: string) {",
          "2382: }",
          "",
          "[Removed Lines]",
          "2369:   return props.editorContext?.variableEditor?.getValue();",
          "2373:   props.editorContext?.variableEditor?.setValue(value);",
          "2377:   return props.editorContext?.headerEditor?.getValue();",
          "2381:   props.editorContext?.headerEditor?.setValue(value);",
          "",
          "[Added Lines]",
          "2179:   return props.editorContext.variableEditor?.getValue();",
          "2183:   props.editorContext.variableEditor?.setValue(value);",
          "2187:   return props.editorContext.headerEditor?.getValue();",
          "2191:   props.editorContext.headerEditor?.setValue(value);",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx||packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx": [
          "File: packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx -> packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import React from 'react';",
          "8: import { render } from '@testing-library/react';",
          "11: import { DocExplorer } from '../DocExplorer';",
          "12: import { ExampleSchema } from './ExampleSchema';",
          "14: function DocExplorerWithContext(",
          "15:   props: React.ComponentProps<typeof DocExplorer>,",
          "16: ) {",
          "",
          "[Removed Lines]",
          "9: import { ExplorerContextProvider } from '@graphiql/react';",
          "",
          "[Added Lines]",
          "9: import {",
          "10:   ExplorerContextProvider,",
          "11:   SchemaContext,",
          "12:   SchemaContextType,",
          "13: } from '@graphiql/react';",
          "18: const defaultSchemaContext: SchemaContextType = {",
          "19:   fetchError: null,",
          "20:   isFetching: false,",
          "21:   schema: ExampleSchema,",
          "22:   setFetchError() {},",
          "23:   setSchema() {},",
          "24:   validationErrors: null,",
          "25: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: }",
          "24: describe('DocExplorer', () => {",
          "27:     const spinner = container.querySelectorAll('.spinner-container');",
          "28:     expect(spinner).toHaveLength(1);",
          "29:   });",
          "30:   it('renders with null schema', () => {",
          "32:     const error = container.querySelectorAll('.error-container');",
          "33:     expect(error).toHaveLength(1);",
          "34:     expect(error[0]).toHaveTextContent('No Schema Available');",
          "35:   });",
          "36:   it('renders with schema', () => {",
          "37:     const { container } = render(",
          "39:     );",
          "40:     const error = container.querySelectorAll('.error-container');",
          "41:     expect(error).toHaveLength(0);",
          "",
          "[Removed Lines]",
          "25:   it('renders spinner when no schema prop is present', () => {",
          "26:     const { container } = render(<DocExplorerWithContext />);",
          "31:     const { container } = render(<DocExplorerWithContext schema={null} />);",
          "38:       <DocExplorerWithContext schema={ExampleSchema} />,",
          "",
          "[Added Lines]",
          "38:   it('renders spinner when the schema is loading', () => {",
          "39:     const { container } = render(",
          "40:       <SchemaContext.Provider",
          "41:         value={{",
          "42:           ...defaultSchemaContext,",
          "43:           isFetching: true,",
          "44:           schema: undefined,",
          "45:         }}>",
          "46:         <DocExplorerWithContext />",
          "47:       </SchemaContext.Provider>,",
          "48:     );",
          "53:     const { container } = render(",
          "54:       <SchemaContext.Provider value={{ ...defaultSchemaContext, schema: null }}>",
          "55:         <DocExplorerWithContext />",
          "56:       </SchemaContext.Provider>,",
          "57:     );",
          "64:       <SchemaContext.Provider value={defaultSchemaContext}>",
          "65:         <DocExplorerWithContext />,",
          "66:       </SchemaContext.Provider>,",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/introspectionQueries.ts||packages/graphiql/src/utility/introspectionQueries.ts": [
          "File: packages/graphiql/src/utility/introspectionQueries.ts -> packages/graphiql/src/utility/introspectionQueries.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77450323570bdae6ad5278cdbd059534141e8fc9",
      "candidate_info": {
        "commit_hash": "77450323570bdae6ad5278cdbd059534141e8fc9",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/77450323570bdae6ad5278cdbd059534141e8fc9",
        "files": [
          ".changeset/five-pillows-fail.md",
          ".changeset/spotty-fans-lie.md",
          "packages/graphiql-react/src/icons/index.tsx",
          "packages/graphiql-react/src/icons/plus.svg",
          "packages/graphiql-react/src/style/root.css",
          "packages/graphiql-react/src/ui/tabs.css",
          "packages/graphiql-react/src/ui/tabs.tsx",
          "packages/graphiql-react/src/utility/compose.ts",
          "packages/graphiql/__mocks__/@graphiql/react.tsx",
          "packages/graphiql/cypress/integration/init.spec.ts",
          "packages/graphiql/cypress/integration/tabs.spec.ts",
          "packages/graphiql/resources/renderExample.js",
          "packages/graphiql/src/cdn.ts",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "packages/graphiql/src/css/app.css",
          "packages/graphiql/src/style.css"
        ],
        "message": "[redesign] implement new design for tabs (#2592)\n\n* implement new design for tabs\n\n* add back `tab` role",
        "before_after_code_files": [
          "packages/graphiql-react/src/icons/index.tsx||packages/graphiql-react/src/icons/index.tsx",
          "packages/graphiql-react/src/style/root.css||packages/graphiql-react/src/style/root.css",
          "packages/graphiql-react/src/ui/tabs.css||packages/graphiql-react/src/ui/tabs.css",
          "packages/graphiql-react/src/ui/tabs.tsx||packages/graphiql-react/src/ui/tabs.tsx",
          "packages/graphiql-react/src/utility/compose.ts||packages/graphiql-react/src/utility/compose.ts",
          "packages/graphiql/__mocks__/@graphiql/react.tsx||packages/graphiql/__mocks__/@graphiql/react.tsx",
          "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
          "packages/graphiql/cypress/integration/tabs.spec.ts||packages/graphiql/cypress/integration/tabs.spec.ts",
          "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
          "packages/graphiql/src/cdn.ts||packages/graphiql/src/cdn.ts",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx||packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "packages/graphiql/src/css/app.css||packages/graphiql/src/css/app.css",
          "packages/graphiql/src/style.css||packages/graphiql/src/style.css"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
            "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
            "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/icons/index.tsx||packages/graphiql-react/src/icons/index.tsx": [
          "File: packages/graphiql-react/src/icons/index.tsx -> packages/graphiql-react/src/icons/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import _MergeIcon from './merge.svg';",
          "19: import _PenIcon from './pen.svg';",
          "20: import _PlayIcon from './play.svg';",
          "21: import _PrettifyIcon from './prettify.svg';",
          "22: import _ReloadIcon from './reload.svg';",
          "23: import _RootTypeIcon from './root-type.svg';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import _PlusIcon from './plus.svg';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: export const MergeIcon = generateIcon(_MergeIcon, 'merge icon');",
          "69: export const PenIcon = generateIcon(_PenIcon, 'pen icon');",
          "70: export const PlayIcon = generateIcon(_PlayIcon, 'play icon');",
          "71: export const PrettifyIcon = generateIcon(_PrettifyIcon, 'prettify icon');",
          "72: export const ReloadIcon = generateIcon(_ReloadIcon, 'reload icon');",
          "73: export const RootTypeIcon = generateIcon(_RootTypeIcon, 'root type icon');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: export const PlusIcon = generateIcon(_PlusIcon, 'plus icon');",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/style/root.css||packages/graphiql-react/src/style/root.css": [
          "File: packages/graphiql-react/src/style/root.css -> packages/graphiql-react/src/style/root.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   --sidebar-width: 44px;",
          "63:   --toolbar-width: 40px;",
          "64: }",
          "66: .graphiql-container,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   --session-header-height: 51px;",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/ui/tabs.css||packages/graphiql-react/src/ui/tabs.css": [
          "File: packages/graphiql-react/src/ui/tabs.css -> packages/graphiql-react/src/ui/tabs.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: .graphiql-tabs {",
          "2:   display: flex;",
          "3:   overflow-y: auto;",
          "4:   padding: var(--px-12);",
          "6:   & > :not(:first-child) {",
          "7:     margin-left: var(--px-12);",
          "8:   }",
          "9: }",
          "11: .graphiql-tab {",
          "12:   align-items: stretch;",
          "13:   border-radius: var(--border-radius-8);",
          "14:   color: var(--color-neutral-60);",
          "15:   display: flex;",
          "17:   & > button.graphiql-tab-close {",
          "18:     visibility: hidden;",
          "19:   }",
          "20:   &.graphiql-tab-active > button.graphiql-tab-close,",
          "21:   &:hover > button.graphiql-tab-close,",
          "22:   &:focus-within > button.graphiql-tab-close {",
          "23:     visibility: unset;",
          "24:   }",
          "26:   &.graphiql-tab-active {",
          "27:     background-color: var(--color-neutral-15);",
          "28:     color: var(--color-neutral-100);",
          "29:   }",
          "30: }",
          "32: button.graphiql-tab-button {",
          "33:   padding: var(--px-4) 0 var(--px-4) var(--px-8);",
          "34: }",
          "36: button.graphiql-tab-close {",
          "37:   align-items: center;",
          "38:   display: flex;",
          "39:   padding: var(--px-4) var(--px-8);",
          "41:   & > svg {",
          "42:     height: var(--px-8);",
          "43:     width: var(--px-8);",
          "44:   }",
          "45: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/ui/tabs.tsx||packages/graphiql-react/src/ui/tabs.tsx": [
          "File: packages/graphiql-react/src/ui/tabs.tsx -> packages/graphiql-react/src/ui/tabs.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: type TabProps = {",
          "24: };",
          "30:   return (",
          "33:       role=\"tab\"",
          "34:       type=\"button\"",
          "39:     >",
          "45:   );",
          "46: }",
          "49:   return (",
          "51:       type=\"button\"",
          "55:     >",
          "58:   );",
          "59: }",
          "69:   return (",
          "71:       {props.children}",
          "72:     </div>",
          "73:   );",
          "",
          "[Removed Lines]",
          "1: function TabCloseButton(props: { onClick: () => void }) {",
          "2:   return (",
          "3:     <div",
          "4:       role=\"button\"",
          "5:       aria-pressed={false}",
          "6:       className=\"close\"",
          "7:       aria-label=\"Close Tab\"",
          "8:       title=\"Close Tab\"",
          "9:       onClick={ev => {",
          "10:         ev.stopPropagation();",
          "11:         props.onClick();",
          "12:       }}",
          "13:     />",
          "14:   );",
          "15: }",
          "18:   isActive: boolean;",
          "19:   title: string;",
          "20:   isCloseable: boolean;",
          "21:   onSelect: () => void;",
          "22:   onClose: () => void;",
          "23:   tabProps?: React.ButtonHTMLAttributes<{}>;",
          "29: export function Tab(props: TabProps): React.ReactElement {",
          "31:     <button",
          "32:       {...props.tabProps}",
          "35:       aria-selected={props.isActive}",
          "36:       title={props.title}",
          "37:       className={`tab${props.isActive ? ' active' : ''}`}",
          "38:       onClick={props.onSelect}",
          "40:       {props.title}",
          "41:       {props.isCloseable ? (",
          "42:         <TabCloseButton onClick={() => props.onClose()} />",
          "43:       ) : null}",
          "44:     </button>",
          "48: export function TabAddButton(props: { onClick: () => void }) {",
          "50:     <button",
          "52:       onClick={props.onClick}",
          "53:       className=\"tab-add\"",
          "54:       title=\"Create new tab\"",
          "56:       <span>+</span>",
          "57:     </button>",
          "61: type TabsProps = {",
          "62:   children: Array<React.ReactNode>;",
          "63:   tabsProps?: React.HTMLAttributes<{}>;",
          "64: };",
          "68: export function Tabs(props: TabsProps) {",
          "70:     <div role=\"tablist\" className=\"tabs\" {...props.tabsProps}>",
          "",
          "[Added Lines]",
          "1: import { CloseIcon } from '../icons';",
          "2: import { compose } from '../utility/compose';",
          "3: import { UnStyledButton } from './button';",
          "5: import './tabs.css';",
          "8:   isActive?: boolean;",
          "11: export function Tab({",
          "12:   isActive,",
          "13:   ...props",
          "14: }: TabProps & JSX.IntrinsicElements['div']) {",
          "16:     <div",
          "17:       {...props}",
          "19:       aria-selected={isActive}",
          "20:       className={compose(",
          "21:         'graphiql-tab',",
          "22:         isActive ? 'graphiql-tab-active' : '',",
          "23:         props.className,",
          "24:       )}",
          "25:     >",
          "26:       {props.children}",
          "27:     </div>",
          "28:   );",
          "29: }",
          "31: function TabButton(props: JSX.IntrinsicElements['button']) {",
          "32:   return (",
          "33:     <UnStyledButton",
          "34:       {...props}",
          "36:       className={compose('graphiql-tab-button', props.className)}",
          "38:       {props.children}",
          "39:     </UnStyledButton>",
          "43: Tab.Button = TabButton;",
          "45: function TabClose(props: JSX.IntrinsicElements['button']) {",
          "47:     <UnStyledButton",
          "48:       aria-label=\"Close Tab\"",
          "49:       title=\"Close Tab\"",
          "50:       {...props}",
          "52:       className={compose('graphiql-tab-close', props.className)}",
          "54:       <CloseIcon />",
          "55:     </UnStyledButton>",
          "59: Tab.Close = TabClose;",
          "61: export function Tabs(props: JSX.IntrinsicElements['div']) {",
          "63:     <div",
          "64:       {...props}",
          "65:       role=\"tablist\"",
          "66:       className={compose('graphiql-tabs', props.className)}",
          "67:     >",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/utility/compose.ts||packages/graphiql-react/src/utility/compose.ts": [
          "File: packages/graphiql-react/src/utility/compose.ts -> packages/graphiql-react/src/utility/compose.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export function compose(...classes: (string | null | undefined)[]) {",
          "2:   let result = '';",
          "3:   for (const c of classes) {",
          "4:     if (c) {",
          "5:       result += (result ? ' ' : '') + c;",
          "6:     }",
          "7:   }",
          "8:   return result;",
          "9: }",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.tsx||packages/graphiql/__mocks__/@graphiql/react.tsx": [
          "File: packages/graphiql/__mocks__/@graphiql/react.tsx -> packages/graphiql/__mocks__/@graphiql/react.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   onHasCompletion,",
          "56:   PenIcon,",
          "57:   PlayIcon,",
          "58:   PrettifyIcon,",
          "59:   ReloadIcon,",
          "60:   RootTypeIcon,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   PlusIcon,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   StorageContext,",
          "71:   StorageContextProvider,",
          "72:   Tab,",
          "74:   Tabs,",
          "75:   ToolbarButton,",
          "76:   TypeDocumentation,",
          "",
          "[Removed Lines]",
          "73:   TabAddButton,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
          "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     const containers = [",
          "32:       '#graphiql',",
          "33:       '.graphiql-container',",
          "36:       '.graphiql-editors',",
          "37:       '.graphiql-response',",
          "38:       '.graphiql-editor-tool',",
          "",
          "[Removed Lines]",
          "34:       '.topBarWrap',",
          "35:       '.editorWrap',",
          "",
          "[Added Lines]",
          "34:       '.graphiql-sessions',",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/integration/tabs.spec.ts||packages/graphiql/cypress/integration/tabs.spec.ts": [
          "File: packages/graphiql/cypress/integration/tabs.spec.ts -> packages/graphiql/cypress/integration/tabs.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: describe('Tabs', () => {",
          "2:   it('Should store editor contents when switching between tabs', () => {",
          "3:     cy.visit('/?query=');",
          "7:     cy.get('.graphiql-query-editor textarea')",
          "8:       .type('{id', { force: true })",
          "9:       .wait(500);",
          "13:     cy.clickExecuteQuery().wait(500);",
          "19:     cy.get('.graphiql-query-editor textarea')",
          "20:       .type('query Foo {image', { force: true })",
          "21:       .wait(500);",
          "25:     cy.get('.graphiql-editor-tool textarea')",
          "",
          "[Removed Lines]",
          "4:     cy.get('#session-tab-0').should('have.text', '<untitled>');",
          "10:     cy.get('#session-tab-0').should('have.text', '<untitled>');",
          "16:     cy.get('.tab-add').click();",
          "22:     cy.get('#session-tab-1').should('have.text', 'Foo');",
          "",
          "[Added Lines]",
          "6:     cy.get('#graphiql-session-tab-0').should('not.exist');",
          "17:     cy.get('.graphiql-tab-add').click();",
          "23:     cy.get('#graphiql-session-tab-1').should('have.text', 'Foo');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     cy.clickExecuteQuery().wait(500);",
          "46:     cy.assertHasValues({",
          "",
          "[Removed Lines]",
          "39:     cy.get('#session-tab-0').click();",
          "42:     cy.get('#session-tab-0').should('have.text', '<untitled>');",
          "43:     cy.get('#session-tab-1').should('have.text', 'Foo');",
          "",
          "[Added Lines]",
          "40:     cy.get('#graphiql-session-tab-0').click();",
          "43:     cy.get('#graphiql-session-tab-0').should('have.text', '<untitled>');",
          "44:     cy.get('#graphiql-session-tab-1').should('have.text', 'Foo');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:     });",
          "61:     cy.assertHasValues({",
          "",
          "[Removed Lines]",
          "54:     cy.get('#session-tab-1').click();",
          "57:     cy.get('#session-tab-0').should('have.text', '<untitled>');",
          "58:     cy.get('#session-tab-1').should('have.text', 'Foo');",
          "",
          "[Added Lines]",
          "55:     cy.get('#graphiql-session-tab-1').click();",
          "58:     cy.get('#graphiql-session-tab-0').should('have.text', '<untitled>');",
          "59:     cy.get('#graphiql-session-tab-1').should('have.text', 'Foo');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66:     });",
          "75:     cy.assertHasValues({",
          "",
          "[Removed Lines]",
          "69:     cy.get('#session-tab-1 .close').click();",
          "72:     cy.get('#session-tab-0').should('have.text', '<untitled>');",
          "",
          "[Added Lines]",
          "70:     cy.get('#graphiql-session-tab-1 + .graphiql-tab-close').click();",
          "73:     cy.get('#graphiql-session-tab-0').should('not.exist');",
          "",
          "---------------"
        ],
        "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js": [
          "File: packages/graphiql/resources/renderExample.js -> packages/graphiql/resources/renderExample.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     headerEditorEnabled: true,",
          "105:     shouldPersistHeaders: true,",
          "106:     inputValueDeprecation: GraphQLVersion.includes('15.5') ? undefined : true,",
          "110:   }),",
          "111:   document.getElementById('graphiql'),",
          "112: );",
          "",
          "[Removed Lines]",
          "107:     tabs: {",
          "108:       onTabChange: onTabChange,",
          "109:     },",
          "",
          "[Added Lines]",
          "107:     onTabChange,",
          "",
          "---------------"
        ],
        "packages/graphiql/src/cdn.ts||packages/graphiql/src/cdn.ts": [
          "File: packages/graphiql/src/cdn.ts -> packages/graphiql/src/cdn.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import '@graphiql/react/dist/style.css';",
          "14: import './style.css';",
          "19: import { GraphiQL } from './components/GraphiQL';",
          "",
          "[Removed Lines]",
          "17: import './css/app.css';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   HistoryIcon,",
          "39:   KeyboardShortcutIcon,",
          "40:   MergeIcon,",
          "41:   PrettifyIcon,",
          "42:   QueryEditor,",
          "43:   ReloadIcon,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:   PlusIcon,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   Spinner,",
          "48:   StorageContextProvider,",
          "49:   Tab,",
          "51:   Tabs,",
          "52:   ToolbarButton,",
          "53:   UnStyledButton,",
          "",
          "[Removed Lines]",
          "50:   TabAddButton,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295:   onSchemaChange?: (schema: GraphQLSchema) => void;",
          "314:   children?: ReactNode;",
          "315: };",
          "",
          "[Removed Lines]",
          "299:   beforeTopBarContent?: React.ReactElement | null;",
          "305:   tabs?:",
          "306:     | boolean",
          "307:     | {",
          "311:         onTabChange?: (tab: TabsState) => void;",
          "312:       };",
          "",
          "[Added Lines]",
          "300:   onTabChange?: (tab: TabsState) => void;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "449:     maxHistoryLength,",
          "450:     onEditOperationName,",
          "451:     onSchemaChange,",
          "452:     onToggleHistory,",
          "453:     onToggleDocs,",
          "454:     operationName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440:     onTabChange,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "480:           externalFragments={externalFragments}",
          "481:           headers={headers}",
          "482:           onEditOperationName={onEditOperationName}",
          "486:           query={query}",
          "487:           response={response}",
          "488:           shouldPersistHeaders={shouldPersistHeaders}",
          "",
          "[Removed Lines]",
          "483:           onTabChange={",
          "484:             typeof props.tabs === 'object' ? props.tabs.onTabChange : undefined",
          "485:           }",
          "",
          "[Added Lines]",
          "472:           onTabChange={onTabChange}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "533:   | 'maxHistoryLength'",
          "534:   | 'onEditOperationName'",
          "535:   | 'onSchemaChange'",
          "536:   | 'onToggleDocs'",
          "537:   | 'onToggleHistory'",
          "538:   | 'operationName'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523:   | 'onTabChange'",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "814:             ) : null}",
          "815:           </div>",
          "816:           <div ref={this.props.pluginResize.secondRef}>",
          "857:                 </Tabs>",
          "859:               <div",
          "860:                 role=\"tabpanel\"",
          "861:                 id=\"graphiql-session\"",
          "862:                 className=\"graphiql-session\"",
          "864:               >",
          "865:                 <div ref={this.props.editorResize.firstRef}>",
          "867:                     <div ref={this.props.editorToolsResize.firstRef}>",
          "868:                       <section",
          "869:                         className=\"graphiql-query-editor\"",
          "",
          "[Removed Lines]",
          "817:             <div className=\"editorWrap\">",
          "818:               <div className=\"topBarWrap\">",
          "819:                 {this.props.beforeTopBarContent}",
          "820:                 <div className=\"topBar\">{logo}</div>",
          "821:               </div>",
          "822:               {this.props.tabs ? (",
          "823:                 <Tabs",
          "824:                   tabsProps={{",
          "825:                     'aria-label': 'Select active operation',",
          "826:                   }}",
          "827:                 >",
          "828:                   {this.props.editorContext.tabs.map((tab, index) => (",
          "829:                     <Tab",
          "830:                       key={tab.id}",
          "831:                       isActive={",
          "832:                         index === this.props.editorContext.activeTabIndex",
          "833:                       }",
          "834:                       title={tab.title}",
          "835:                       isCloseable={this.props.editorContext.tabs.length > 1}",
          "836:                       onSelect={() => {",
          "837:                         this.props.executionContext.stop();",
          "838:                         this.props.editorContext.changeTab(index);",
          "839:                       }}",
          "840:                       onClose={() => {",
          "841:                         if (this.props.editorContext.activeTabIndex === index) {",
          "842:                           this.props.executionContext.stop();",
          "843:                         }",
          "844:                         this.props.editorContext.closeTab(index);",
          "845:                       }}",
          "846:                       tabProps={{",
          "847:                         'aria-controls': 'graphiql-session',",
          "848:                         id: `session-tab-${index}`,",
          "849:                       }}",
          "850:                     />",
          "851:                   ))}",
          "852:                   <TabAddButton",
          "853:                     onClick={() => {",
          "854:                       this.props.editorContext.addTab();",
          "855:                     }}",
          "856:                   />",
          "858:               ) : null}",
          "863:                 aria-labelledby={`session-tab-${this.props.editorContext.activeTabIndex}`}",
          "866:                   <div className=\"graphiql-editors\">",
          "",
          "[Added Lines]",
          "805:             <div className=\"graphiql-sessions\">",
          "806:               <div className=\"graphiql-session-header\">",
          "807:                 <Tabs aria-label=\"Select active operation\">",
          "808:                   {this.props.editorContext.tabs.length > 1 ? (",
          "809:                     <>",
          "810:                       {this.props.editorContext.tabs.map((tab, index) => (",
          "811:                         <Tab",
          "812:                           key={tab.id}",
          "813:                           isActive={",
          "814:                             index === this.props.editorContext.activeTabIndex",
          "815:                           }",
          "816:                           title={tab.title}",
          "817:                         >",
          "818:                           <Tab.Button",
          "819:                             aria-controls=\"graphiql-session\"",
          "820:                             id={`graphiql-session-tab-${index}`}",
          "821:                             onClick={() => {",
          "822:                               this.props.executionContext.stop();",
          "823:                               this.props.editorContext.changeTab(index);",
          "824:                             }}",
          "825:                           >",
          "826:                             {tab.title}",
          "827:                           </Tab.Button>",
          "828:                           <Tab.Close",
          "829:                             onClick={() => {",
          "830:                               if (",
          "831:                                 this.props.editorContext.activeTabIndex ===",
          "832:                                 index",
          "833:                               ) {",
          "834:                                 this.props.executionContext.stop();",
          "835:                               }",
          "836:                               this.props.editorContext.closeTab(index);",
          "837:                             }}",
          "838:                           />",
          "839:                         </Tab>",
          "840:                       ))}",
          "841:                       <UnStyledButton",
          "842:                         type=\"button\"",
          "843:                         className=\"graphiql-tab-add\"",
          "844:                         onClick={() => {",
          "845:                           this.props.editorContext.addTab();",
          "846:                         }}",
          "847:                       >",
          "848:                         <PlusIcon />",
          "849:                       </UnStyledButton>",
          "850:                     </>",
          "851:                   ) : null}",
          "853:                 <div className=\"graphiql-session-header-right\">",
          "854:                   {this.props.editorContext.tabs.length === 1 ? (",
          "855:                     <UnStyledButton",
          "856:                       type=\"button\"",
          "857:                       className=\"graphiql-tab-add\"",
          "858:                       onClick={() => {",
          "859:                         this.props.editorContext.addTab();",
          "860:                       }}",
          "861:                     >",
          "862:                       <PlusIcon />",
          "863:                     </UnStyledButton>",
          "864:                   ) : null}",
          "865:                   <div className=\"graphiql-logo\">{logo}</div>",
          "866:                 </div>",
          "867:               </div>",
          "872:                 aria-labelledby={`graphiql-session-tab-${this.props.editorContext.activeTabIndex}`}",
          "875:                   <div",
          "876:                     className={`graphiql-editors${",
          "877:                       this.props.editorContext.tabs.length === 1",
          "878:                         ? ' full-height'",
          "879:                         : ''",
          "880:                     }`}",
          "881:                   >",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx||packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx": [
          "File: packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx -> packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "597:   });",
          "599:   describe('Tabs', () => {",
          "601:       const { container } = render(<GraphiQL fetcher={noOpFetcher} />);",
          "629:     });",
          "630:     it('each tab has a close button when multiple tabs are open', () => {",
          "637:     });",
          "638:     it('close button removes a tab', () => {",
          "645:     });",
          "646:   });",
          "647: });",
          "",
          "[Removed Lines]",
          "600:     it('not enabled by default', () => {",
          "602:       expect(container.querySelector('.tabs')).not.toBeInTheDocument();",
          "603:     });",
          "604:     it('enable tabs via \"tabs\" property boolean', () => {",
          "605:       const { container } = render(<GraphiQL fetcher={noOpFetcher} tabs />);",
          "606:       expect(container.querySelector('.tabs')).toBeInTheDocument();",
          "607:     });",
          "608:     it('enable tabs via \"tabs\" property object', () => {",
          "609:       const { container } = render(",
          "610:         <GraphiQL fetcher={noOpFetcher} tabs={{}} />,",
          "611:       );",
          "612:       expect(container.querySelector('.tabs')).toBeInTheDocument();",
          "613:     });",
          "614:     it('only one tab is open by default', () => {",
          "615:       const { container } = render(<GraphiQL fetcher={noOpFetcher} tabs />);",
          "616:       expect(container.querySelectorAll('.tabs .tab')).toHaveLength(1);",
          "617:     });",
          "618:     it('single tab has no close button', () => {",
          "619:       const { container } = render(<GraphiQL fetcher={noOpFetcher} tabs />);",
          "620:       expect(container.querySelector('.tab .close')).not.toBeInTheDocument();",
          "621:     });",
          "622:     it('open multiple tabs', () => {",
          "623:       const { container } = render(<GraphiQL fetcher={noOpFetcher} tabs />);",
          "624:       expect(container.querySelectorAll('.tabs .tab')).toHaveLength(1);",
          "625:       fireEvent.click(container.querySelector('.tab-add'));",
          "626:       expect(container.querySelectorAll('.tabs .tab')).toHaveLength(2);",
          "627:       fireEvent.click(container.querySelector('.tab-add'));",
          "628:       expect(container.querySelectorAll('.tabs .tab')).toHaveLength(3);",
          "631:       const { container } = render(<GraphiQL fetcher={noOpFetcher} tabs />);",
          "632:       expect(container.querySelectorAll('.tab .close')).toHaveLength(0);",
          "633:       fireEvent.click(container.querySelector('.tab-add'));",
          "634:       expect(container.querySelectorAll('.tab .close')).toHaveLength(2);",
          "635:       fireEvent.click(container.querySelector('.tab-add'));",
          "636:       expect(container.querySelectorAll('.tab .close')).toHaveLength(3);",
          "639:       const { container } = render(<GraphiQL fetcher={noOpFetcher} tabs />);",
          "640:       fireEvent.click(container.querySelector('.tab-add'));",
          "641:       expect(container.querySelectorAll('.tab .close')).toHaveLength(2);",
          "642:       fireEvent.click(container.querySelector('.tab .close'));",
          "643:       expect(container.querySelectorAll('.tabs .tab')).toHaveLength(1);",
          "644:       expect(container.querySelectorAll('.tab .close')).toHaveLength(0);",
          "",
          "[Added Lines]",
          "600:     it('show tabs if there are more than one', () => {",
          "603:       expect(",
          "604:         container.querySelectorAll('.graphiql-tabs .graphiql-tab'),",
          "605:       ).toHaveLength(0);",
          "607:       fireEvent.click(container.querySelector('.graphiql-tab-add'));",
          "608:       expect(",
          "609:         container.querySelectorAll('.graphiql-tabs .graphiql-tab'),",
          "610:       ).toHaveLength(2);",
          "612:       fireEvent.click(container.querySelector('.graphiql-tab-add'));",
          "613:       expect(",
          "614:         container.querySelectorAll('.graphiql-tabs .graphiql-tab'),",
          "615:       ).toHaveLength(3);",
          "618:       const { container } = render(<GraphiQL fetcher={noOpFetcher} />);",
          "620:       expect(",
          "621:         container.querySelectorAll('.graphiql-tab .graphiql-tab-close'),",
          "622:       ).toHaveLength(0);",
          "624:       fireEvent.click(container.querySelector('.graphiql-tab-add'));",
          "625:       expect(",
          "626:         container.querySelectorAll('.graphiql-tab .graphiql-tab-close'),",
          "627:       ).toHaveLength(2);",
          "629:       fireEvent.click(container.querySelector('.graphiql-tab-add'));",
          "630:       expect(",
          "631:         container.querySelectorAll('.graphiql-tab .graphiql-tab-close'),",
          "632:       ).toHaveLength(3);",
          "635:       const { container } = render(<GraphiQL fetcher={noOpFetcher} />);",
          "637:       fireEvent.click(container.querySelector('.graphiql-tab-add'));",
          "639:       expect(",
          "640:         container.querySelectorAll('.graphiql-tab .graphiql-tab-close'),",
          "641:       ).toHaveLength(2);",
          "643:       fireEvent.click(",
          "644:         container.querySelector('.graphiql-tab .graphiql-tab-close'),",
          "645:       );",
          "646:       expect(",
          "647:         container.querySelectorAll('.graphiql-tabs .graphiql-tab'),",
          "648:       ).toHaveLength(0);",
          "649:       expect(",
          "650:         container.querySelectorAll('.graphiql-tab .graphiql-tab-close'),",
          "651:       ).toHaveLength(0);",
          "",
          "---------------"
        ],
        "packages/graphiql/src/css/app.css||packages/graphiql/src/css/app.css": [
          "File: packages/graphiql/src/css/app.css -> packages/graphiql/src/css/app.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/style.css||packages/graphiql/src/style.css": [
          "File: packages/graphiql/src/style.css -> packages/graphiql/src/style.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   flex: 1;",
          "40: }",
          "44:   background-color: var(--color-neutral-7);",
          "46:   border-radius: calc(var(--border-radius-12) + var(--px-8));",
          "47:   display: flex;",
          "48:   flex: 1;",
          "49:   max-height: 100%;",
          "51: }",
          "",
          "[Removed Lines]",
          "43: .graphiql-container .graphiql-session {",
          "50:   padding: var(--px-8);",
          "",
          "[Added Lines]",
          "43: .graphiql-container .graphiql-sessions {",
          "48:   flex-direction: column;",
          "51:   margin: var(--px-16);",
          "52:   margin-left: 0;",
          "53: }",
          "56: .graphiql-container .graphiql-session-header {",
          "57:   align-items: center;",
          "58:   display: flex;",
          "59:   justify-content: space-between;",
          "60:   height: var(--session-header-height);",
          "61: }",
          "64: button.graphiql-tab-add {",
          "65:   margin-left: var(--px-12);",
          "66: }",
          "67: button.graphiql-tab-add > svg {",
          "68:   color: var(--color-neutral-60);",
          "69:   display: block;",
          "70:   height: var(--px-16);",
          "71:   width: var(--px-16);",
          "72: }",
          "75: .graphiql-container .graphiql-session-header-right {",
          "76:   align-items: center;",
          "77:   display: flex;",
          "78: }",
          "81: .graphiql-container .graphiql-logo {",
          "82:   color: var(--color-neutral-60);",
          "83:   font-size: var(--font-size-h4);",
          "84:   font-weight: var(--font-weight-medium);",
          "85:   padding: var(--px-12) var(--px-16);",
          "86: }",
          "89: .graphiql-container .graphiql-session {",
          "90:   display: flex;",
          "91:   flex: 1;",
          "92:   padding: 0 var(--px-8) var(--px-8);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   flex: 1;",
          "59:   flex-direction: column;",
          "60: }",
          "63: .graphiql-container .graphiql-query-editor {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: .graphiql-container .graphiql-editors.full-height {",
          "104:   margin-top: calc(var(--px-8) - var(--session-header-height));",
          "105: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128: .graphiql-container .graphiql-response {",
          "129:   display: flex;",
          "130:   flex: 1;",
          "131:   flex-direction: column;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:   --editor-background: var(--color-neutral-7);",
          "",
          "---------------"
        ]
      }
    }
  ]
}