{
  "cve_id": "CVE-2022-24775",
  "cve_desc": "guzzlehttp/psr7 is a PSR-7 HTTP message library. Versions prior to 1.8.4 and 2.1.1 are vulnerable to improper header parsing. An attacker could sneak in a new line character and pass untrusted values. The issue is patched in 1.8.4 and 2.1.1. There are currently no known workarounds.",
  "repo": "guzzle/psr7",
  "patch_hash": "9a96d9db668b485361ed9de7b5bf1e54895df1dc",
  "patch_info": {
    "commit_hash": "9a96d9db668b485361ed9de7b5bf1e54895df1dc",
    "repo": "guzzle/psr7",
    "commit_url": "https://github.com/guzzle/psr7/pull/486/commits/9a96d9db668b485361ed9de7b5bf1e54895df1dc",
    "files": [
      "CHANGELOG.md",
      "composer.json",
      "src/MessageTrait.php",
      "tests/RequestTest.php"
    ],
    "message": "Release 1.8.4",
    "before_after_code_files": [
      "src/MessageTrait.php||src/MessageTrait.php",
      "tests/RequestTest.php||tests/RequestTest.php"
    ]
  },
  "patch_diff": {
    "src/MessageTrait.php||src/MessageTrait.php": [
      "File: src/MessageTrait.php -> src/MessageTrait.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "157:         }",
      "158:     }",
      "160:     private function normalizeHeaderValue($value)",
      "161:     {",
      "162:         if (!is_array($value)) {",
      "164:         }",
      "166:         if (count($value) === 0) {",
      "167:             throw new \\InvalidArgumentException('Header value can not be an empty array.');",
      "168:         }",
      "171:     }",
      "",
      "[Removed Lines]",
      "163:             return $this->trimHeaderValues([$value]);",
      "170:         return $this->trimHeaderValues($value);",
      "",
      "[Added Lines]",
      "168:             return $this->trimAndValidateHeaderValues([$value]);",
      "175:         return $this->trimAndValidateHeaderValues($value);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:     {",
      "189:         return array_map(function ($value) {",
      "190:             if (!is_scalar($value) && null !== $value) {",
      "",
      "[Removed Lines]",
      "187:     private function trimHeaderValues(array $values)",
      "",
      "[Added Lines]",
      "192:     private function trimAndValidateHeaderValues(array $values)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "194:                 ));",
      "195:             }",
      "198:         }, array_values($values));",
      "199:     }",
      "201:     private function assertHeader($header)",
      "202:     {",
      "203:         if (!is_string($header)) {",
      "",
      "[Removed Lines]",
      "197:             return trim((string) $value, \" \\t\");",
      "",
      "[Added Lines]",
      "202:             $trimmed = trim((string) $value, \" \\t\");",
      "203:             $this->assertValue($trimmed);",
      "205:             return $trimmed;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "210:         if ($header === '') {",
      "211:             throw new \\InvalidArgumentException('Header name can not be empty.');",
      "212:         }",
      "213:     }",
      "214: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "229:         if (! preg_match('/^[a-zA-Z0-9\\'`#$%&*+.^_|~!-]+$/', $header)) {",
      "230:             throw new \\InvalidArgumentException(",
      "231:                 sprintf(",
      "232:                     '\"%s\" is not valid header name',",
      "233:                     $header",
      "234:                 )",
      "235:             );",
      "236:         }",
      "237:     }",
      "253:     private function assertValue($value)",
      "254:     {",
      "266:         if (! preg_match('/^(?:[\\x21-\\x7E\\x80-\\xFF](?:[\\x20\\x09]+[\\x21-\\x7E\\x80-\\xFF])?)*$/', $value)) {",
      "267:             throw new \\InvalidArgumentException(sprintf('\"%s\" is not valid header value', $value));",
      "268:         }",
      "",
      "---------------"
    ],
    "tests/RequestTest.php||tests/RequestTest.php": [
      "File: tests/RequestTest.php -> tests/RequestTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "229:         $r = $r->withUri(new Uri('http://foo.com:8125/bar'));",
      "230:         self::assertSame('foo.com:8125', $r->getHeaderLine('host'));",
      "231:     }",
      "232: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "237:     public function testContainsNotAllowedCharsOnHeaderValue($value)",
      "238:     {",
      "239:         $this->expectExceptionMessage(sprintf('\"%s\" is not valid header value', $value));",
      "240:         $r = new Request(",
      "241:             'GET',",
      "242:             'http://foo.com/baz?bar=bam',",
      "243:             [",
      "244:                 'testing' => $value",
      "245:             ]",
      "246:         );",
      "247:     }",
      "249:     public function provideHeaderValuesContainingNotAllowedChars(): iterable",
      "250:     {",
      "252:         $tests = [",
      "253:             [\"new\\nline\"],",
      "254:             [\"new\\r\\nline\"],",
      "255:             [\"new\\rline\"],",
      "258:             [\"new\\r\\n line\"],",
      "259:         ];",
      "261:         for ($i = 0; $i <= 0xff; $i++) {",
      "262:             if (\\chr($i) == \"\\t\") {",
      "263:                 continue;",
      "264:             }",
      "265:             if (\\chr($i) == \" \") {",
      "266:                 continue;",
      "267:             }",
      "268:             if ($i >= 0x21 && $i <= 0x7e) {",
      "269:                 continue;",
      "270:             }",
      "271:             if ($i >= 0x80) {",
      "272:                 continue;",
      "273:             }",
      "275:             $tests[] = [\"foo\" . \\chr($i) . \"bar\"];",
      "276:         }",
      "278:         return $tests;",
      "279:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "902db15a551a4a415e732b622282e21ce1b508b4",
      "candidate_info": {
        "commit_hash": "902db15a551a4a415e732b622282e21ce1b508b4",
        "repo": "guzzle/psr7",
        "commit_url": "https://github.com/guzzle/psr7/commit/902db15a551a4a415e732b622282e21ce1b508b4",
        "files": [
          "CHANGELOG.md",
          "composer.json",
          "src/MessageTrait.php",
          "tests/RequestTest.php"
        ],
        "message": "Release 1.8.4 (#486)\n\nCo-authored-by: Tim D\u00fcsterhus <tim@bastelstu.be>",
        "before_after_code_files": [
          "src/MessageTrait.php||src/MessageTrait.php",
          "tests/RequestTest.php||tests/RequestTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/guzzle/psr7/pull/486"
        ],
        "olp_code_files": {
          "patch": [
            "src/MessageTrait.php||src/MessageTrait.php",
            "tests/RequestTest.php||tests/RequestTest.php"
          ],
          "candidate": [
            "src/MessageTrait.php||src/MessageTrait.php",
            "tests/RequestTest.php||tests/RequestTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/MessageTrait.php||src/MessageTrait.php": [
          "File: src/MessageTrait.php -> src/MessageTrait.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:         }",
          "158:     }",
          "160:     private function normalizeHeaderValue($value)",
          "161:     {",
          "162:         if (!is_array($value)) {",
          "164:         }",
          "166:         if (count($value) === 0) {",
          "167:             throw new \\InvalidArgumentException('Header value can not be an empty array.');",
          "168:         }",
          "171:     }",
          "",
          "[Removed Lines]",
          "163:             return $this->trimHeaderValues([$value]);",
          "170:         return $this->trimHeaderValues($value);",
          "",
          "[Added Lines]",
          "168:             return $this->trimAndValidateHeaderValues([$value]);",
          "175:         return $this->trimAndValidateHeaderValues($value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:     {",
          "189:         return array_map(function ($value) {",
          "190:             if (!is_scalar($value) && null !== $value) {",
          "",
          "[Removed Lines]",
          "187:     private function trimHeaderValues(array $values)",
          "",
          "[Added Lines]",
          "192:     private function trimAndValidateHeaderValues(array $values)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:                 ));",
          "195:             }",
          "198:         }, array_values($values));",
          "199:     }",
          "201:     private function assertHeader($header)",
          "202:     {",
          "203:         if (!is_string($header)) {",
          "",
          "[Removed Lines]",
          "197:             return trim((string) $value, \" \\t\");",
          "",
          "[Added Lines]",
          "202:             $trimmed = trim((string) $value, \" \\t\");",
          "203:             $this->assertValue($trimmed);",
          "205:             return $trimmed;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "210:         if ($header === '') {",
          "211:             throw new \\InvalidArgumentException('Header name can not be empty.');",
          "212:         }",
          "213:     }",
          "214: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:         if (! preg_match('/^[a-zA-Z0-9\\'`#$%&*+.^_|~!-]+$/', $header)) {",
          "230:             throw new \\InvalidArgumentException(",
          "231:                 sprintf(",
          "232:                     '\"%s\" is not valid header name',",
          "233:                     $header",
          "234:                 )",
          "235:             );",
          "236:         }",
          "237:     }",
          "253:     private function assertValue($value)",
          "254:     {",
          "266:         if (! preg_match('/^(?:[\\x21-\\x7E\\x80-\\xFF](?:[\\x20\\x09]+[\\x21-\\x7E\\x80-\\xFF])?)*$/', $value)) {",
          "267:             throw new \\InvalidArgumentException(sprintf('\"%s\" is not valid header value', $value));",
          "268:         }",
          "",
          "---------------"
        ],
        "tests/RequestTest.php||tests/RequestTest.php": [
          "File: tests/RequestTest.php -> tests/RequestTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:         $r = $r->withUri(new Uri('http://foo.com:8125/bar'));",
          "230:         self::assertSame('foo.com:8125', $r->getHeaderLine('host'));",
          "231:     }",
          "232: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:     public function testContainsNotAllowedCharsOnHeaderValue($value)",
          "237:     {",
          "238:         $this->expectExceptionGuzzle('InvalidArgumentException', sprintf('\"%s\" is not valid header value', $value));",
          "239:         $r = new Request(",
          "240:             'GET',",
          "241:             'http://foo.com/baz?bar=bam',",
          "242:             [",
          "243:                 'testing' => $value",
          "244:             ]",
          "245:         );",
          "246:     }",
          "251:     public function provideHeaderValuesContainingNotAllowedChars()",
          "252:     {",
          "254:         $tests = [",
          "255:             [\"new\\nline\"],",
          "256:             [\"new\\r\\nline\"],",
          "257:             [\"new\\rline\"],",
          "260:             [\"new\\r\\n line\"],",
          "261:         ];",
          "263:         for ($i = 0; $i <= 0xff; $i++) {",
          "264:             if (\\chr($i) == \"\\t\") {",
          "265:                 continue;",
          "266:             }",
          "267:             if (\\chr($i) == \" \") {",
          "268:                 continue;",
          "269:             }",
          "270:             if ($i >= 0x21 && $i <= 0x7e) {",
          "271:                 continue;",
          "272:             }",
          "273:             if ($i >= 0x80) {",
          "274:                 continue;",
          "275:             }",
          "277:             $tests[] = [\"foo\" . \\chr($i) . \"bar\"];",
          "278:         }",
          "280:         return $tests;",
          "281:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}