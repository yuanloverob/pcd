{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5cad250133f518433e025fbf81c5be9f5a58573",
      "candidate_info": {
        "commit_hash": "b5cad250133f518433e025fbf81c5be9f5a58573",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/b5cad250133f518433e025fbf81c5be9f5a58573",
        "files": [
          "lib/cJSON.c"
        ],
        "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr\n(cherry picked from commit 417568707520af25ec5c5dd91da18e6db3649dcb)",
        "before_after_code_files": [
          "lib/cJSON.c||lib/cJSON.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/cJSON.c||lib/cJSON.c"
          ],
          "candidate": [
            "lib/cJSON.c||lib/cJSON.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/cJSON.c||lib/cJSON.c": [
          "File: lib/cJSON.c -> lib/cJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1483: fail:",
          "1484:     if (item->child != NULL)",
          "1485:     {",
          "1487:         item->child = NULL;",
          "1488:     }",
          "",
          "[Removed Lines]",
          "1486:         cJSON_Delete(child);",
          "",
          "[Added Lines]",
          "1486:         cJSON_Delete(item->child);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92614e94def104e947f89112e55114ab0730831e",
      "candidate_info": {
        "commit_hash": "92614e94def104e947f89112e55114ab0730831e",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/92614e94def104e947f89112e55114ab0730831e",
        "files": [
          "lib/cJSON.c"
        ],
        "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr\n(cherry picked from commit 417568707520af25ec5c5dd91da18e6db3649dcb)",
        "before_after_code_files": [
          "lib/cJSON.c||lib/cJSON.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/cJSON.c||lib/cJSON.c"
          ],
          "candidate": [
            "lib/cJSON.c||lib/cJSON.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/cJSON.c||lib/cJSON.c": [
          "File: lib/cJSON.c -> lib/cJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1483: fail:",
          "1484:     if (item->child != NULL)",
          "1485:     {",
          "1487:         item->child = NULL;",
          "1488:     }",
          "",
          "[Removed Lines]",
          "1486:         cJSON_Delete(child);",
          "",
          "[Added Lines]",
          "1486:         cJSON_Delete(item->child);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a518e41c0d03de7e8e000214785c64a444dbfe5d",
      "candidate_info": {
        "commit_hash": "a518e41c0d03de7e8e000214785c64a444dbfe5d",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/a518e41c0d03de7e8e000214785c64a444dbfe5d",
        "files": [
          "modules/b2b_entities/b2be_load.h",
          "modules/media_exchange/media_sessions.c",
          "modules/siprec/siprec_logic.c",
          "modules/siprec/siprec_sess.c",
          "modules/siprec/siprec_sess.h"
        ],
        "message": "b2b*: consider dlginfo for requests an replies as well\n\n(cherry picked from commit 7aa2007300fac85645bb4edaea3085557aae7923)",
        "before_after_code_files": [
          "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h",
          "modules/media_exchange/media_sessions.c||modules/media_exchange/media_sessions.c",
          "modules/siprec/siprec_logic.c||modules/siprec/siprec_logic.c",
          "modules/siprec/siprec_sess.c||modules/siprec/siprec_sess.c",
          "modules/siprec/siprec_sess.h||modules/siprec/siprec_sess.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h": [
          "File: modules/b2b_entities/b2be_load.h -> modules/b2b_entities/b2be_load.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:  return load_b2b( b2b_api );",
          "188: }",
          "191: {",
          "192:  b2b_dlginfo_t* dlg = NULL;",
          "193:  int size;",
          "200:  dlg = shm_malloc(size);",
          "201:  if (!dlg)",
          "202:   return NULL;",
          "203:  memset(dlg, 0, size);",
          "205:  dlg->callid.s = (char *)(dlg + 1);",
          "210:   dlg->totag.s = dlg->callid.s + dlg->callid.len;",
          "212:  }",
          "215:   dlg->fromtag.s = dlg->callid.s + dlg->callid.len + dlg->totag.len;",
          "217:  }",
          "218:  return dlg;",
          "219: }",
          "221: #endif",
          "",
          "[Removed Lines]",
          "190: static inline b2b_dlginfo_t *b2b_dup_dlginfo(b2b_dlginfo_t *info)",
          "195:  size = sizeof(b2b_dlginfo_t) + info->callid.len;",
          "196:  if (info->totag.s)",
          "197:   size += info->totag.len;",
          "198:  if (info->fromtag.s)",
          "199:   size += info->fromtag.len;",
          "206:  dlg->callid.len = info->callid.len;",
          "207:  memcpy(dlg->callid.s, info->callid.s, dlg->callid.len);",
          "208:  if (info->totag.s) {",
          "209:   dlg->totag.len = info->totag.len;",
          "211:   memcpy(dlg->totag.s, info->totag.s, dlg->totag.len);",
          "213:  if (info->fromtag.s) {",
          "214:   dlg->fromtag.len = info->fromtag.len;",
          "216:   memcpy(dlg->fromtag.s, info->fromtag.s, dlg->fromtag.len);",
          "",
          "[Added Lines]",
          "190: static inline b2b_dlginfo_t *b2b_new_dlginfo(str *callid, str *fromtag, str *totag)",
          "195:  size = sizeof(b2b_dlginfo_t) + callid->len;",
          "196:  if (totag && totag->s)",
          "197:   size += totag->len;",
          "198:  if (fromtag && fromtag->s)",
          "199:   size += fromtag->len;",
          "206:  dlg->callid.len = callid->len;",
          "207:  memcpy(dlg->callid.s, callid->s, callid->len);",
          "208:  if (totag->s) {",
          "209:   dlg->totag.len = totag->len;",
          "211:   memcpy(dlg->totag.s, totag->s, totag->len);",
          "213:  if (fromtag->s) {",
          "214:   dlg->fromtag.len = fromtag->len;",
          "216:   memcpy(dlg->fromtag.s, fromtag->s, fromtag->len);",
          "221: static inline b2b_dlginfo_t *b2b_dup_dlginfo(b2b_dlginfo_t *info)",
          "222: {",
          "223:  return b2b_new_dlginfo(&info->callid, &info->fromtag, &info->totag);",
          "224: }",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_sessions.c||modules/media_exchange/media_sessions.c": [
          "File: modules/media_exchange/media_sessions.c -> modules/media_exchange/media_sessions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:  memset(&req, 0, sizeof(req));",
          "251:  req.et = msl->b2b_entity;",
          "252:  req.b2b_key = &msl->b2b_key;",
          "253:  req.method = &m;",
          "254:  req.body = body;",
          "255:  if (body)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:  req.dlginfo = msl->dlginfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:  reply_data.code = code;",
          "278:  reply_data.text = reason;",
          "279:  reply_data.body = body;",
          "280:  if (body)",
          "281:   reply_data.extra_headers = &content_type_sdp_hdr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:  reply_data.dlginfo = msl->dlginfo;",
          "",
          "---------------"
        ],
        "modules/siprec/siprec_logic.c||modules/siprec/siprec_logic.c": [
          "File: modules/siprec/siprec_logic.c -> modules/siprec/siprec_logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:  req.et = B2B_CLIENT;",
          "125:  req.b2b_key = &ss->b2b_key;",
          "126:  req.method = &bye;",
          "129:  if (srec_b2b.send_request(&req) < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  req.dlginfo = ss->dlginfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:  req.et = B2B_CLIENT;",
          "244:  req.b2b_key = &ss->b2b_key;",
          "245:  req.method = &ack;",
          "248:  if (srec_b2b.send_request(&req) < 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:  req.dlginfo = ss->dlginfo;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:   req.et = B2B_CLIENT;",
          "282:   req.b2b_key = &ss->b2b_key;",
          "283:   req.method = &bye;",
          "286:   if (srec_b2b.send_request(&req) < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:   req.dlginfo = ss->dlginfo;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311: static int srec_b2b_confirm(str* key, str* entity_key, int src, b2b_dlginfo_t* info)",
          "312: {",
          "314:  struct src_sess *ss;",
          "316:  ss = *(struct src_sess **)key->s;",
          "",
          "[Removed Lines]",
          "313:  char *tmp;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "319:     entity_key->len, entity_key->s);",
          "320:   return -1;",
          "321:  }",
          "343:   return -1;",
          "344:  }",
          "348:  return 0;",
          "349: }",
          "",
          "[Removed Lines]",
          "322:  tmp = shm_malloc(info->fromtag.len);",
          "323:  if (!tmp) {",
          "324:   LM_ERR(\"cannot allocate dialog info fromtag!\\n\");",
          "325:   return -1;",
          "326:  }",
          "327:  ss->b2b_fromtag.s = tmp;",
          "328:  ss->b2b_fromtag.len = info->fromtag.len;",
          "329:  memcpy(ss->b2b_fromtag.s, info->fromtag.s, ss->b2b_fromtag.len);",
          "331:  tmp = shm_malloc(info->totag.len);",
          "332:  if (!tmp) {",
          "333:   LM_ERR(\"cannot allocate dialog info totag!\\n\");",
          "334:   return -1;",
          "335:  }",
          "336:  ss->b2b_totag.s = tmp;",
          "337:  ss->b2b_totag.len = info->totag.len;",
          "338:  memcpy(ss->b2b_totag.s, info->totag.s, ss->b2b_totag.len);",
          "340:  tmp = shm_malloc(info->callid.len);",
          "341:  if (!tmp) {",
          "342:   LM_ERR(\"cannot allocate dialog info callid!\\n\");",
          "345:  ss->b2b_callid.s = tmp;",
          "346:  ss->b2b_callid.len = info->callid.len;",
          "347:  memcpy(ss->b2b_callid.s, info->callid.s, ss->b2b_callid.len);",
          "",
          "[Added Lines]",
          "324:  ss->dlginfo = b2b_dup_dlginfo(info);",
          "325:  if (!ss->dlginfo) {",
          "326:   LM_ERR(\"could not duplicate b2b dialog info!\\n\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "498:   goto error;",
          "499:  }",
          "500:  req.body = &body;",
          "502:  if (srec_b2b.send_request(&req) < 0)",
          "503:   LM_ERR(\"Cannot end recording session for key %.*s\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:  req.dlginfo = sess->dlginfo;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "547: void srec_logic_destroy(struct src_sess *sess)",
          "548: {",
          "550:  if (!sess->b2b_key.s)",
          "551:   return;",
          "552:  shm_free(sess->b2b_key.s);",
          "566:  sess->b2b_key.s = NULL;",
          "567: }",
          "",
          "[Removed Lines]",
          "549:  b2b_dlginfo_t info;",
          "554:  info.fromtag = sess->b2b_fromtag;",
          "555:  info.totag = sess->b2b_totag;",
          "556:  info.callid = sess->b2b_callid;",
          "557:  srec_b2b.entity_delete(B2B_CLIENT, &sess->b2b_key,",
          "558:    (info.callid.s ? &info: NULL), 1, 1);",
          "559:  if (sess->b2b_fromtag.s)",
          "560:   shm_free(sess->b2b_fromtag.s);",
          "561:  if (sess->b2b_totag.s)",
          "562:   shm_free(sess->b2b_totag.s);",
          "563:  if (sess->b2b_callid.s)",
          "564:   shm_free(sess->b2b_callid.s);",
          "565:  sess->b2b_callid.s = sess->b2b_totag.s = sess->b2b_fromtag.s = NULL;",
          "",
          "[Added Lines]",
          "535:  srec_b2b.entity_delete(B2B_CLIENT, &sess->b2b_key, sess->dlginfo, 1, 1);",
          "536:  if (sess->dlginfo)",
          "537:   shm_free(sess->dlginfo);",
          "",
          "---------------"
        ],
        "modules/siprec/siprec_sess.c||modules/siprec/siprec_sess.c": [
          "File: modules/siprec/siprec_sess.c -> modules/siprec/siprec_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:  struct socket_info *si;",
          "252:  int p, port, proto, c, label, medianum;",
          "253:  int p_type;",
          "255:  if (!dlg) {",
          "256:   LM_ERR(\"null dialog - cannot fetch siprec info!\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:  str from_tag, to_tag;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:  }",
          "332:  memcpy(sess->b2b_key.s, tmp.s, tmp.len);",
          "333:  sess->b2b_key.len = tmp.len;",
          "334:  SIPREC_BIN_POP(str, &tmp);",
          "355:  }",
          "359:  SIPREC_BIN_POP(int, &p);",
          "360:  for (; p > 0; p--) {",
          "",
          "[Removed Lines]",
          "335:  sess->b2b_fromtag.s = shm_malloc(tmp.len);",
          "336:  if (!sess->b2b_fromtag.s) {",
          "337:   LM_ERR(\"cannot allocate memory for b2b_fromtag!\\n\");",
          "338:   goto error;",
          "339:  }",
          "340:  memcpy(sess->b2b_fromtag.s, tmp.s, tmp.len);",
          "341:  sess->b2b_fromtag.len = tmp.len;",
          "342:  SIPREC_BIN_POP(str, &tmp);",
          "343:  sess->b2b_totag.s = shm_malloc(tmp.len);",
          "344:  if (!sess->b2b_totag.s) {",
          "345:   LM_ERR(\"cannot allocate memory for b2b_totag!\\n\");",
          "346:   goto error;",
          "347:  }",
          "348:  memcpy(sess->b2b_totag.s, tmp.s, tmp.len);",
          "349:  sess->b2b_totag.len = tmp.len;",
          "350:  SIPREC_BIN_POP(str, &tmp);",
          "351:  sess->b2b_callid.s = shm_malloc(tmp.len);",
          "352:  if (!sess->b2b_callid.s) {",
          "353:   LM_ERR(\"cannot allocate memory for b2b_callid!\\n\");",
          "354:   goto error;",
          "356:  memcpy(sess->b2b_callid.s, tmp.s, tmp.len);",
          "357:  sess->b2b_callid.len = tmp.len;",
          "",
          "[Added Lines]",
          "335:  SIPREC_BIN_POP(str, &from_tag);",
          "336:  SIPREC_BIN_POP(str, &to_tag);",
          "339:  if (tmp.len) {",
          "340:   sess->dlginfo = b2b_new_dlginfo(&tmp, &from_tag, &to_tag);",
          "341:   if (!sess->dlginfo) {",
          "342:    LM_ERR(\"could not create b2b dlginfo for %.*s/%.*s/%.*s!\\n\",",
          "343:      tmp.len, tmp.s, from_tag.len, from_tag.s, to_tag.len, to_tag.s);",
          "344:    goto error;",
          "345:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "483:   SIPREC_BIN_PUSH(str, &empty);",
          "484:  SIPREC_BIN_PUSH(str, SIPREC_SERIALIZE(ss->uuid));",
          "485:  SIPREC_BIN_PUSH(str, &ss->b2b_key);",
          "489:  SIPREC_BIN_PUSH(int, ss->participants_no);",
          "491:  for (p = 0; p < ss->participants_no; p++) {",
          "",
          "[Removed Lines]",
          "486:  SIPREC_BIN_PUSH(str, &ss->b2b_fromtag);",
          "487:  SIPREC_BIN_PUSH(str, &ss->b2b_totag);",
          "488:  SIPREC_BIN_PUSH(str, &ss->b2b_callid);",
          "",
          "[Added Lines]",
          "475:  if (ss->dlginfo) {",
          "476:   SIPREC_BIN_PUSH(str, &ss->dlginfo->fromtag);",
          "477:   SIPREC_BIN_PUSH(str, &ss->dlginfo->totag);",
          "478:   SIPREC_BIN_PUSH(str, &ss->dlginfo->callid);",
          "479:  } else {",
          "480:   SIPREC_BIN_PUSH(str, &empty);",
          "481:   SIPREC_BIN_PUSH(str, &empty);",
          "482:   SIPREC_BIN_PUSH(str, &empty);",
          "483:  }",
          "",
          "---------------"
        ],
        "modules/siprec/siprec_sess.h||modules/siprec/siprec_sess.h": [
          "File: modules/siprec/siprec_sess.h -> modules/siprec/siprec_sess.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"siprec_body.h\"",
          "30: #include \"../dialog/dlg_load.h\"",
          "31: #include \"../tm//tm_load.h\"",
          "32: #include \"../../ut.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include \"../b2b_entities/b2be_load.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:  str b2b_key;",
          "103: };",
          "105: void src_unref_session(void *p);",
          "",
          "[Removed Lines]",
          "100:  str b2b_fromtag;",
          "101:  str b2b_totag;",
          "102:  str b2b_callid;",
          "",
          "[Added Lines]",
          "101:  b2b_dlginfo_t *dlginfo;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a1012bcd9e97a6c95f62c2dfe0f6fd55918e9aa",
      "candidate_info": {
        "commit_hash": "2a1012bcd9e97a6c95f62c2dfe0f6fd55918e9aa",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/2a1012bcd9e97a6c95f62c2dfe0f6fd55918e9aa",
        "files": [
          "modules/xml/xml.c"
        ],
        "message": "xml: fix accessing node value with CDATA sections\n\n(cherry picked from commit 4a4248cbfd9c289ea16d68b45d1dbaa8a5daf064)",
        "before_after_code_files": [
          "modules/xml/xml.c||modules/xml/xml.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/xml/xml.c||modules/xml/xml.c": [
          "File: modules/xml/xml.c -> modules/xml/xml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:  xmlNode *n_it;",
          "464:  for (n_it = node->children; n_it; n_it = n_it->next)",
          "466:    LM_ERR(\"Unable to append string to xml buffer\\n\");",
          "467:    return -1;",
          "468:   }",
          "",
          "[Removed Lines]",
          "465:   if (n_it->type == XML_TEXT_NODE && xmlBufferCat(xml_buf, n_it->content) < 0) {",
          "",
          "[Added Lines]",
          "465:   if ((n_it->type == XML_TEXT_NODE ||",
          "466:    n_it->type == XML_CDATA_SECTION_NODE) &&",
          "467:    xmlBufferCat(xml_buf, n_it->content) < 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "686:  return 0;",
          "687: }",
          "690: {",
          "691:  xmlNode *n_it, *tmp = NULL, *new_txt;",
          "692:  int set = 0;",
          "695:  if (!new_content.s)",
          "696:   set = 1;",
          "698:  for (n_it = node->children; n_it; n_it = tmp) {",
          "699:   tmp = n_it->next;",
          "702:    if (!set) {",
          "706:    } else {",
          "708:     xmlUnlinkNode(n_it);",
          "709:     xmlFreeNode(n_it);",
          "710:    }",
          "",
          "[Removed Lines]",
          "689: static int set_node_content(xmlNode *node, str new_content)",
          "701:   if (n_it->type == XML_TEXT_NODE && !xmlIsBlankNode(n_it)) {",
          "704:     xmlNodeSetContentLen(n_it, BAD_CAST new_content.s, new_content.len);",
          "705:     set = 1;",
          "",
          "[Added Lines]",
          "691: #define TMP_TAG_S \"<x>\"",
          "692: #define TMP_TAG_END_S \"</x>\"",
          "693: #define TMP_TAG_LEN (sizeof(TMP_TAG_S) - 1)",
          "694: #define TMP_TAG_END_LEN (sizeof(TMP_TAG_END_S) - 1)",
          "696: static int set_node_content_w_cdata(xmlNode *node, str new_content,",
          "697:  xmlDoc *xml_doc)",
          "698: {",
          "699:  xmlNode *n, *tmp = NULL, *tmp_root;",
          "700:  xmlDoc *tmp_doc = NULL;",
          "701:  str tmp_doc_str = STR_NULL;",
          "704:  for (n = node->children; n; n = tmp) {",
          "705:   tmp = n->next;",
          "707:   if (n->type == XML_TEXT_NODE || n->type == XML_CDATA_SECTION_NODE) {",
          "708:    xmlUnlinkNode(n);",
          "709:    xmlFreeNode(n);",
          "710:   }",
          "711:  }",
          "716:  tmp_doc_str.len = new_content.len + TMP_TAG_LEN + TMP_TAG_END_LEN;",
          "717:  tmp_doc_str.s = pkg_malloc(tmp_doc_str.len);",
          "718:  if (!tmp_doc_str.s) {",
          "719:   LM_ERR(\"no more pkg memory\\n\");",
          "720:   return -1;",
          "721:  }",
          "723:  memcpy(tmp_doc_str.s, TMP_TAG_S, TMP_TAG_LEN);",
          "724:  memcpy(tmp_doc_str.s+TMP_TAG_LEN, new_content.s, new_content.len);",
          "725:  memcpy(tmp_doc_str.s+TMP_TAG_LEN+new_content.len,",
          "726:   TMP_TAG_END_S, TMP_TAG_END_LEN);",
          "728:  tmp_doc = xmlParseMemory(tmp_doc_str.s, tmp_doc_str.len);",
          "729:  if (!tmp_doc) {",
          "730:   LM_ERR(\"Failed to parse xml block\\n\");",
          "731:   goto error;",
          "732:  }",
          "734:  tmp_root = xmlDocGetRootElement(tmp_doc);",
          "735:  for (n = tmp_root->children; n; n = n->next) {",
          "736:   if (n->type == XML_TEXT_NODE || n->type == XML_CDATA_SECTION_NODE) {",
          "737:    tmp = xmlDocCopyNode(n, xml_doc, 0);",
          "738:    if (!tmp) {",
          "739:     LM_ERR(\"Failed to copy node\\n\");",
          "740:     goto error;",
          "741:    }",
          "743:    if (!xmlAddChild(node, tmp)) {",
          "744:     LM_ERR(\"Unable to link copied node\\n\");",
          "745:     goto error;",
          "746:    }",
          "747:   }",
          "748:  }",
          "750:  xmlFreeDoc(tmp_doc);",
          "751:  pkg_free(tmp_doc_str.s);",
          "753:  return 0;",
          "754: error:",
          "755:  if (tmp_doc_str.s)",
          "756:   pkg_free(tmp_doc_str.s);",
          "757:  if (tmp_doc)",
          "758:   xmlFreeDoc(tmp_doc);",
          "759:  return -1;",
          "760: }",
          "762: #define CDATA_PREFIX_S \"<![CDATA[\"",
          "763: #define CDATA_SUFFIX_S \"]]>\"",
          "764: #define CDATA_PREFIX_LEN (sizeof(CDATA_PREFIX_S) - 1)",
          "765: #define CDATA_SUFFIX_LEN (sizeof(CDATA_SUFFIX_S) - 1)",
          "767: static int set_node_content(xmlNode *node, str new_content, xmlDoc *xml_doc)",
          "772:  if ((new_content.len > CDATA_PREFIX_LEN + CDATA_SUFFIX_LEN) &&",
          "773:   str_strstr(&new_content, &str_init(CDATA_PREFIX_S)))",
          "774:   return set_node_content_w_cdata(node, new_content, xml_doc);",
          "783:   if (n_it->type == XML_TEXT_NODE || n_it->type == XML_CDATA_SECTION_NODE) {",
          "785:     if (n_it->type == XML_CDATA_SECTION_NODE) {",
          "786:      xmlUnlinkNode(n_it);",
          "787:      xmlFreeNode(n_it);",
          "788:     } else {",
          "790:      xmlNodeSetContentLen(n_it,",
          "791:       BAD_CAST new_content.s, new_content.len);",
          "792:      set = 1;",
          "793:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "793:     return -1;",
          "794:    }",
          "797:     LM_ERR(\"Unable to clear text content for element <%s>\\n\", node->name);",
          "798:     return -1;",
          "799:    }",
          "",
          "[Removed Lines]",
          "796:    if (set_node_content(node, empty_str) < 0) {",
          "",
          "[Added Lines]",
          "884:    if (set_node_content(node, empty_str, obj->xml_doc) < 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "895:     return -1;",
          "896:    }",
          "899:     LM_ERR(\"Unable to set content for element <%s>\\n\", node->name);",
          "900:     return -1;",
          "901:    }",
          "",
          "[Removed Lines]",
          "898:    if (set_node_content(node, val->rs) < 0) {",
          "",
          "[Added Lines]",
          "986:    if (set_node_content(node, val->rs, obj->xml_doc) < 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e3b402452ea7ab3e39795d40d1c231883612bd8",
      "candidate_info": {
        "commit_hash": "0e3b402452ea7ab3e39795d40d1c231883612bd8",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/0e3b402452ea7ab3e39795d40d1c231883612bd8",
        "files": [
          "modules/b2b_entities/dlg.c",
          "modules/media_exchange/media_exchange.c",
          "modules/siprec/siprec_logic.c"
        ],
        "message": "b2b_entities: free key returned by client_new\n\nprevent pkg leak of b2b_key returned by client_new\n\n(cherry picked from commit 60043ae3713052614e535371c100a3668c47af8f)",
        "before_after_code_files": [
          "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c",
          "modules/media_exchange/media_exchange.c||modules/media_exchange/media_exchange.c",
          "modules/siprec/siprec_logic.c||modules/siprec/siprec_logic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c": [
          "File: modules/b2b_entities/dlg.c -> modules/b2b_entities/dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:    LM_ERR(\"No more shared memory\\n\");",
          "261:    if(!safe)",
          "262:     lock_release(&table[hash_index].lock);",
          "263:    return 0;",
          "264:   }",
          "265:   memcpy(dlg->tag[CALLEE_LEG].s, b2b_key->s, b2b_key->len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:    pkg_free(b2b_key);",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_exchange.c||modules/media_exchange/media_exchange.c": [
          "File: modules/media_exchange/media_exchange.c -> modules/media_exchange/media_exchange.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:   LM_ERR(\"could not copy b2b client key\\n\");",
          "335:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, msl->dlginfo, 1, 1);",
          "336:   goto release;",
          "337:  }",
          "338:  msl->params = mf;",
          "339:  msl->b2b_entity = B2B_CLIENT;",
          "340:  media_util_release_static();",
          "341:  return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:   pkg_free(b2b_key);",
          "340:  pkg_free(b2b_key);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "614:   LM_ERR(\"could not copy b2b client key\\n\");",
          "616:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, msl->dlginfo, 1, 1);",
          "617:   goto unref;",
          "618:  }",
          "619:  msl->b2b_entity = B2B_CLIENT;",
          "620:  return 1;",
          "621: unref:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:   pkg_free(b2b_key);",
          "622:  pkg_free(b2b_key);",
          "",
          "---------------"
        ],
        "modules/siprec/siprec_logic.c||modules/siprec/siprec_logic.c": [
          "File: modules/siprec/siprec_logic.c -> modules/siprec/siprec_logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:  sess->b2b_key.s = shm_malloc(client->len);",
          "407:  if (!sess->b2b_key.s) {",
          "408:   LM_ERR(\"out of shm memory!\\n\");",
          "409:   return -1;",
          "410:  }",
          "411:  memcpy(sess->b2b_key.s, client->s, client->len);",
          "412:  sess->b2b_key.len = client->len;",
          "414:  return 0;",
          "415: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:   pkg_free(client);",
          "414:  pkg_free(client);",
          "",
          "---------------"
        ]
      }
    }
  ]
}