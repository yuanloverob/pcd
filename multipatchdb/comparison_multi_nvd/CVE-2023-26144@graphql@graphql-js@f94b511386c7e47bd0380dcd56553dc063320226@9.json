{
  "cve_id": "CVE-2023-26144",
  "cve_desc": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
  "repo": "graphql/graphql-js",
  "patch_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
  "patch_info": {
    "commit_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
    "repo": "graphql/graphql-js",
    "commit_url": "https://github.com/graphql/graphql-js/commit/f94b511386c7e47bd0380dcd56553dc063320226",
    "files": [
      "benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ],
    "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3958)\n\nCo-authored-by: AaronMoat <AaronMoat@users.noreply.github.com>\nCo-authored-by: Ivan Goncharov <ivan.goncharov.ua@gmail.com>\nResolves https://github.com/graphql/graphql-js/issues/3955 (at least",
    "before_after_code_files": [
      "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ]
  },
  "patch_diff": {
    "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
      "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { graphqlSync } from 'graphql/graphql.js';",
      "2: import { buildSchema } from 'graphql/utilities/buildASTSchema.js';",
      "4: const schema = buildSchema('type Query { hello: String! }');",
      "5: const source = `{ ${'hello '.repeat(250)}}`;",
      "7: export const benchmark = {",
      "8:   name: 'Many repeated fields',",
      "9:   count: 5,",
      "10:   measure() {",
      "11:     graphqlSync({ schema, source });",
      "12:   },",
      "13: };",
      "",
      "---------------"
    ],
    "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts": [
      "File: src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts -> src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "179:     ]);",
      "180:   });",
      "182:   it('mix of stream and no stream', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:   it('different stream directive extra argument', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "185:         name @stream(label: \"streamLabel\", initialCount: 1)",
      "186:         name @stream(label: \"streamLabel\", initialCount: 1, extraArg: true)",
      "187:       }",
      "188:     `).toDeepEqual([",
      "189:       {",
      "190:         message:",
      "191:           'Fields \"name\" conflict because they have differing stream directives. Use different aliases on the fields to fetch both if this was intentional.',",
      "192:         locations: [",
      "193:           { line: 3, column: 9 },",
      "194:           { line: 4, column: 9 },",
      "195:         ],",
      "196:       },",
      "197:     ]);",
      "198:   });",
      "",
      "---------------"
    ],
    "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
      "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   DirectiveNode,",
      "8:   FieldNode,",
      "9:   FragmentDefinitionNode,",
      "11:   SelectionSetNode,",
      "12: } from '../../language/ast.js';",
      "13: import { Kind } from '../../language/kinds.js';",
      "14: import { print } from '../../language/printer.js';",
      "",
      "[Removed Lines]",
      "10:   ObjectValueNode,",
      "",
      "[Added Lines]",
      "11:   ValueNode,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "592:     }",
      "596:       return [",
      "597:         [responseName, 'they have differing arguments'],",
      "598:         [node1],",
      "",
      "[Removed Lines]",
      "595:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
      "",
      "[Added Lines]",
      "595:     if (!sameArguments(node1, node2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "649:   }",
      "650: }",
      "665: }",
      "667: function getStreamDirective(",
      "",
      "[Removed Lines]",
      "652: function stringifyArguments(fieldNode: FieldNode | DirectiveNode): string {",
      "654:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
      "656:   const inputObjectWithArgs: ObjectValueNode = {",
      "657:     kind: Kind.OBJECT,",
      "658:     fields: args.map((argNode) => ({",
      "659:       kind: Kind.OBJECT_FIELD,",
      "660:       name: argNode.name,",
      "661:       value: argNode.value,",
      "662:     })),",
      "663:   };",
      "664:   return print(sortValueNode(inputObjectWithArgs));",
      "",
      "[Added Lines]",
      "652: function sameArguments(",
      "653:   node1: FieldNode | DirectiveNode,",
      "654:   node2: FieldNode | DirectiveNode,",
      "655: ): boolean {",
      "656:   const args1 = node1.arguments;",
      "657:   const args2 = node2.arguments;",
      "659:   if (args1 === undefined || args1.length === 0) {",
      "660:     return args2 === undefined || args2.length === 0;",
      "661:   }",
      "662:   if (args2 === undefined || args2.length === 0) {",
      "663:     return false;",
      "664:   }",
      "666:   if (args1.length !== args2.length) {",
      "667:     return false;",
      "668:   }",
      "670:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
      "671:   return args1.every((arg1) => {",
      "672:     const value1 = arg1.value;",
      "673:     const value2 = values2.get(arg1.name.value);",
      "674:     if (value2 === undefined) {",
      "675:       return false;",
      "676:     }",
      "678:     return stringifyValue(value1) === stringifyValue(value2);",
      "679:   });",
      "680: }",
      "682: function stringifyValue(value: ValueNode): string | null {",
      "683:   return print(sortValueNode(value));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "681:     return true;",
      "682:   } else if (stream1 && stream2) {",
      "685:   }",
      "687:   return false;",
      "",
      "[Removed Lines]",
      "684:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
      "",
      "[Added Lines]",
      "703:     return sameArguments(stream1, stream2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d245e653064746ebcd9e80617025a82a4c60a031",
      "candidate_info": {
        "commit_hash": "d245e653064746ebcd9e80617025a82a4c60a031",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/d245e653064746ebcd9e80617025a82a4c60a031",
        "files": [
          "src/execution/execute.ts"
        ],
        "message": "incremental: avoid double loop with stream from sync iterables (#4076)",
        "before_after_code_files": [
          "src/execution/execute.ts||src/execution/execute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2163:   info: GraphQLResolveInfo,",
          "2164:   itemType: GraphQLOutputType,",
          "2165: ): StreamItemsRecord {",
          "2170:     streamRecord,",
          "2171:     result: Promise.resolve().then(() => {",
          "2172:       let result = completeStreamItems(",
          "2173:         streamRecord,",
          "2174:         initialPath,",
          "",
          "[Removed Lines]",
          "2166:   const path = streamRecord.path;",
          "2167:   const initialPath = addPath(path, initialIndex, undefined);",
          "2169:   const firstStreamItems: StreamItemsRecord = {",
          "",
          "[Added Lines]",
          "2166:   return {",
          "2169:       const path = streamRecord.path;",
          "2170:       const initialPath = addPath(path, initialIndex, undefined);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2179:         info,",
          "2180:         itemType,",
          "2181:       );",
          "2183:       let currentIndex = initialIndex;",
          "2184:       let iteration = iterator.next();",
          "2185:       let erroredSynchronously = false;",
          "",
          "[Removed Lines]",
          "2182:       const results = [result];",
          "",
          "[Added Lines]",
          "2182:       const firstStreamItems = { result };",
          "2183:       let currentStreamItems = firstStreamItems;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2201:           info,",
          "2202:           itemType,",
          "2203:         );",
          "2205:         iteration = iterator.next();",
          "2206:       }",
          "2223:       }",
          "2226:     }),",
          "2227:   };",
          "2229: }",
          "2231: function prependNextStreamItems(",
          "",
          "[Removed Lines]",
          "2204:         results.push(result);",
          "2208:       currentIndex = results.length - 1;",
          "2211:       let currentResult = erroredSynchronously",
          "2212:         ? results[currentIndex]",
          "2213:         : prependNextStreamItems(results[currentIndex], {",
          "2214:             streamRecord,",
          "2215:             result: { streamRecord },",
          "2216:           });",
          "2218:       while (currentIndex-- > 0) {",
          "2219:         currentResult = prependNextStreamItems(results[currentIndex], {",
          "2220:           streamRecord,",
          "2221:           result: currentResult,",
          "2222:         });",
          "2225:       return currentResult;",
          "2228:   return firstStreamItems;",
          "",
          "[Added Lines]",
          "2206:         const nextStreamItems: StreamItemsRecord = { streamRecord, result };",
          "2207:         currentStreamItems.result = prependNextStreamItems(",
          "2208:           currentStreamItems.result,",
          "2209:           nextStreamItems,",
          "2210:         );",
          "2211:         currentStreamItems = nextStreamItems;",
          "2218:       if (!erroredSynchronously) {",
          "2219:         currentStreamItems.result = prependNextStreamItems(",
          "2220:           currentStreamItems.result,",
          "2221:           { streamRecord, result: { streamRecord } },",
          "2222:         );",
          "2225:       return firstStreamItems.result;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e160b6f593ffb3b8078af1f3192d938bf0c7df62",
      "candidate_info": {
        "commit_hash": "e160b6f593ffb3b8078af1f3192d938bf0c7df62",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/e160b6f593ffb3b8078af1f3192d938bf0c7df62",
        "files": [
          "src/execution/IncrementalPublisher.ts"
        ],
        "message": "polish(IncrementalPublisher): remove unnecessary check and method call (#4106)\n\npolished IncrementalPublisher:\n\n= completeDeferredFragment will always return undefined if the\ndeferredFragmentRecord has already been removed from the graph\n= removeDeferredFragment need not be called twice",
        "before_after_code_files": [
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:           id,",
          "245:           errors: deferredGroupedFieldSetResult.errors,",
          "246:         });",
          "248:       }",
          "249:       return;",
          "250:     }",
          "",
          "[Removed Lines]",
          "247:         this._incrementalGraph.removeDeferredFragment(deferredFragmentRecord);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult",
          "263:       .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "272:       const reconcilableResults =",
          "273:         this._incrementalGraph.completeDeferredFragment(deferredFragmentRecord);",
          "274:       if (reconcilableResults === undefined) {",
          "275:         continue;",
          "276:       }",
          "277:       const incremental = context.incremental;",
          "278:       for (const reconcilableResult of reconcilableResults) {",
          "279:         const { bestId, subPath } = this._getBestIdAndSubPath(",
          "",
          "[Removed Lines]",
          "264:       const id = deferredFragmentRecord.id;",
          "269:       if (id === undefined) {",
          "270:         continue;",
          "271:       }",
          "",
          "[Added Lines]",
          "268:       const id = deferredFragmentRecord.id;",
          "269:       invariant(id !== undefined);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb43c83890cb3e2d7e3a5504d68f6ac860663a31",
      "candidate_info": {
        "commit_hash": "cb43c83890cb3e2d7e3a5504d68f6ac860663a31",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/cb43c83890cb3e2d7e3a5504d68f6ac860663a31",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts",
          "src/execution/types.ts"
        ],
        "message": "refactor: extract incremental graph to separate file",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts",
          "src/execution/types.ts||src/execution/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { isPromise } from '../jsutils/isPromise.js';",
          "2: import { promiseWithResolvers } from '../jsutils/promiseWithResolvers.js';",
          "4: import type {",
          "5:   DeferredFragmentRecord,",
          "6:   DeferredGroupedFieldSetResult,",
          "7:   IncrementalDataRecord,",
          "8:   IncrementalDataRecordResult,",
          "9:   ReconcilableDeferredGroupedFieldSetResult,",
          "10:   StreamItemsResult,",
          "11:   SubsequentResultRecord,",
          "12: } from './types.js';",
          "13: import {",
          "14:   isDeferredFragmentRecord,",
          "15:   isDeferredGroupedFieldSetRecord,",
          "16: } from './types.js';",
          "21: export class IncrementalGraph {",
          "23:   newCompletedResultAvailable!: Promise<unknown>;",
          "24:   private _resolve!: () => void;",
          "26:   private _pending: Set<SubsequentResultRecord>;",
          "27:   private _newPending: Set<SubsequentResultRecord>;",
          "28:   private _completedResultQueue: Array<IncrementalDataRecordResult>;",
          "30:   constructor() {",
          "31:     this._pending = new Set();",
          "32:     this._newPending = new Set();",
          "33:     this._completedResultQueue = [];",
          "34:     this._reset();",
          "35:   }",
          "37:   addIncrementalDataRecords(",
          "38:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "39:   ): void {",
          "40:     for (const incrementalDataRecord of incrementalDataRecords) {",
          "41:       if (isDeferredGroupedFieldSetRecord(incrementalDataRecord)) {",
          "42:         for (const deferredFragmentRecord of incrementalDataRecord.deferredFragmentRecords) {",
          "43:           deferredFragmentRecord.expectedReconcilableResults++;",
          "45:           this._addDeferredFragmentRecord(deferredFragmentRecord);",
          "46:         }",
          "48:         const result = incrementalDataRecord.result;",
          "49:         if (isPromise(result)) {",
          "51:           result.then((resolved) => {",
          "52:             this._enqueueCompletedDeferredGroupedFieldSet(resolved);",
          "53:           });",
          "54:         } else {",
          "55:           this._enqueueCompletedDeferredGroupedFieldSet(result);",
          "56:         }",
          "58:         continue;",
          "59:       }",
          "61:       const streamRecord = incrementalDataRecord.streamRecord;",
          "62:       if (streamRecord.id === undefined) {",
          "63:         this._newPending.add(streamRecord);",
          "64:       }",
          "66:       const result = incrementalDataRecord.result;",
          "67:       if (isPromise(result)) {",
          "69:         result.then((resolved) => {",
          "70:           this._enqueueCompletedStreamItems(resolved);",
          "71:         });",
          "72:       } else {",
          "73:         this._enqueueCompletedStreamItems(result);",
          "74:       }",
          "75:     }",
          "76:   }",
          "78:   getNewPending(): ReadonlyArray<SubsequentResultRecord> {",
          "79:     const maybeEmptyNewPending = this._newPending;",
          "80:     const newPending = [];",
          "81:     for (const node of maybeEmptyNewPending) {",
          "82:       if (isDeferredFragmentRecord(node)) {",
          "83:         if (node.expectedReconcilableResults) {",
          "84:           this._pending.add(node);",
          "85:           newPending.push(node);",
          "86:           continue;",
          "87:         }",
          "88:         for (const child of node.children) {",
          "89:           this._addNonEmptyNewPending(child, newPending);",
          "90:         }",
          "91:       } else {",
          "92:         this._pending.add(node);",
          "93:         newPending.push(node);",
          "94:       }",
          "95:     }",
          "96:     this._newPending.clear();",
          "97:     return newPending;",
          "98:   }",
          "101:     let completedResult: IncrementalDataRecordResult | undefined;",
          "102:     while (",
          "103:       (completedResult = this._completedResultQueue.shift()) !== undefined",
          "104:     ) {",
          "105:       yield completedResult;",
          "106:     }",
          "107:   }",
          "109:   hasNext(): boolean {",
          "110:     return this._pending.size > 0;",
          "111:   }",
          "113:   completeDeferredFragment(",
          "114:     deferredFragmentRecord: DeferredFragmentRecord,",
          "115:   ): Array<ReconcilableDeferredGroupedFieldSetResult> | undefined {",
          "116:     const reconcilableResults = deferredFragmentRecord.reconcilableResults;",
          "117:     if (",
          "118:       deferredFragmentRecord.expectedReconcilableResults !==",
          "119:       reconcilableResults.length",
          "120:     ) {",
          "121:       return;",
          "122:     }",
          "123:     this._pending.delete(deferredFragmentRecord);",
          "124:     for (const child of deferredFragmentRecord.children) {",
          "125:       this._newPending.add(child);",
          "126:       this._completedResultQueue.push(...child.results);",
          "127:     }",
          "128:     return reconcilableResults;",
          "129:   }",
          "131:   removeSubsequentResultRecord(",
          "132:     subsequentResultRecord: SubsequentResultRecord,",
          "133:   ): void {",
          "134:     this._pending.delete(subsequentResultRecord);",
          "135:   }",
          "137:   private _addDeferredFragmentRecord(",
          "138:     deferredFragmentRecord: DeferredFragmentRecord,",
          "139:   ): void {",
          "140:     const parent = deferredFragmentRecord.parent;",
          "141:     if (parent === undefined) {",
          "145:       if (deferredFragmentRecord.id !== undefined) {",
          "146:         return;",
          "147:       }",
          "149:       this._newPending.add(deferredFragmentRecord);",
          "150:       return;",
          "151:     }",
          "153:     if (parent.children.has(deferredFragmentRecord)) {",
          "154:       return;",
          "155:     }",
          "157:     parent.children.add(deferredFragmentRecord);",
          "159:     this._addDeferredFragmentRecord(parent);",
          "160:   }",
          "162:   private _addNonEmptyNewPending(",
          "163:     deferredFragmentRecord: DeferredFragmentRecord,",
          "164:     newPending: Array<SubsequentResultRecord>,",
          "165:   ): void {",
          "166:     if (deferredFragmentRecord.expectedReconcilableResults) {",
          "167:       this._pending.add(deferredFragmentRecord);",
          "168:       newPending.push(deferredFragmentRecord);",
          "169:       return;",
          "170:     }",
          "173:     for (const child of deferredFragmentRecord.children) {",
          "174:       this._addNonEmptyNewPending(child, newPending);",
          "175:     }",
          "176:   }",
          "178:   private _enqueueCompletedDeferredGroupedFieldSet(",
          "179:     result: DeferredGroupedFieldSetResult,",
          "180:   ): void {",
          "181:     let hasPendingParent = false;",
          "182:     for (const deferredFragmentRecord of result.deferredFragmentRecords) {",
          "183:       if (deferredFragmentRecord.id !== undefined) {",
          "184:         hasPendingParent = true;",
          "185:       }",
          "186:       deferredFragmentRecord.results.push(result);",
          "187:     }",
          "188:     if (hasPendingParent) {",
          "189:       this._completedResultQueue.push(result);",
          "190:       this._trigger();",
          "191:     }",
          "192:   }",
          "194:   private _enqueueCompletedStreamItems(result: StreamItemsResult): void {",
          "195:     this._completedResultQueue.push(result);",
          "196:     this._trigger();",
          "197:   }",
          "199:   private _trigger() {",
          "200:     this._resolve();",
          "201:     this._reset();",
          "202:   }",
          "204:   private _reset() {",
          "205:     const { promise: newCompletedResultAvailable, resolve } =",
          "209:       promiseWithResolvers<void>();",
          "210:     this._resolve = resolve;",
          "211:     this.newCompletedResultAvailable = newCompletedResultAvailable;",
          "212:   }",
          "213: }",
          "",
          "---------------"
        ],
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { invariant } from '../jsutils/invariant.js';",
          "3: import type { ObjMap } from '../jsutils/ObjMap.js';",
          "4: import { pathToArray } from '../jsutils/Path.js';",
          "7: import type { GraphQLError } from '../error/GraphQLError.js';",
          "9: import type {",
          "10:   CancellableStreamRecord,",
          "11:   CompletedResult,",
          "",
          "[Removed Lines]",
          "2: import { isPromise } from '../jsutils/isPromise.js';",
          "5: import { promiseWithResolvers } from '../jsutils/promiseWithResolvers.js';",
          "",
          "[Added Lines]",
          "7: import { IncrementalGraph } from './IncrementalGraph.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:   DeferredGroupedFieldSetResult,",
          "14:   ExperimentalIncrementalExecutionResults,",
          "15:   IncrementalDataRecord,",
          "17:   IncrementalDeferResult,",
          "18:   IncrementalResult,",
          "19:   IncrementalStreamResult,",
          "",
          "[Removed Lines]",
          "16:   IncrementalDataRecordResult,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "25: } from './types.js';",
          "26: import {",
          "27:   isCancellableStreamRecord,",
          "30:   isDeferredGroupedFieldSetResult,",
          "31:   isNonReconcilableDeferredGroupedFieldSetResult,",
          "32: } from './types.js';",
          "",
          "[Removed Lines]",
          "28:   isDeferredFragmentRecord,",
          "29:   isDeferredGroupedFieldSetRecord,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "58: class IncrementalPublisher {",
          "59:   private _context: IncrementalPublisherContext;",
          "60:   private _nextId: number;",
          "64:   private _incremental: Array<IncrementalResult>;",
          "65:   private _completed: Array<CompletedResult>;",
          "70:   constructor(context: IncrementalPublisherContext) {",
          "71:     this._context = context;",
          "72:     this._nextId = 0;",
          "76:     this._incremental = [];",
          "77:     this._completed = [];",
          "79:   }",
          "81:   buildResponse(",
          "",
          "[Removed Lines]",
          "61:   private _pending: Set<SubsequentResultRecord>;",
          "62:   private _completedResultQueue: Array<IncrementalDataRecordResult>;",
          "63:   private _newPending: Set<SubsequentResultRecord>;",
          "67:   private _signalled!: Promise<unknown>;",
          "68:   private _resolve!: () => void;",
          "73:     this._pending = new Set();",
          "74:     this._completedResultQueue = [];",
          "75:     this._newPending = new Set();",
          "78:     this._reset();",
          "",
          "[Added Lines]",
          "57:   private _incrementalGraph: IncrementalGraph;",
          "64:     this._incrementalGraph = new IncrementalGraph();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "83:     errors: ReadonlyArray<GraphQLError> | undefined,",
          "84:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "85:   ): ExperimentalIncrementalExecutionResults {",
          "91:     const initialResult: InitialIncrementalExecutionResult =",
          "92:       errors === undefined",
          "",
          "[Removed Lines]",
          "86:     this._addIncrementalDataRecords(incrementalDataRecords);",
          "87:     this._pruneEmpty();",
          "89:     const pending = this._pendingSourcesToResults();",
          "",
          "[Added Lines]",
          "74:     this._incrementalGraph.addIncrementalDataRecords(incrementalDataRecords);",
          "75:     const newPending = this._incrementalGraph.getNewPending();",
          "77:     const pending = this._pendingSourcesToResults(newPending);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "99:     };",
          "100:   }",
          "222:     const pendingResults: Array<PendingResult> = [];",
          "224:       const id = String(this._getNextId());",
          "226:       pendingSource.id = id;",
          "227:       const pendingResult: PendingResult = {",
          "228:         id,",
          "",
          "[Removed Lines]",
          "102:   private _addIncrementalDataRecords(",
          "103:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "104:   ): void {",
          "105:     for (const incrementalDataRecord of incrementalDataRecords) {",
          "106:       if (isDeferredGroupedFieldSetRecord(incrementalDataRecord)) {",
          "107:         for (const deferredFragmentRecord of incrementalDataRecord.deferredFragmentRecords) {",
          "108:           deferredFragmentRecord.expectedReconcilableResults++;",
          "110:           this._addDeferredFragmentRecord(deferredFragmentRecord);",
          "111:         }",
          "113:         const result = incrementalDataRecord.result;",
          "114:         if (isPromise(result)) {",
          "116:           result.then((resolved) => {",
          "117:             this._enqueueCompletedDeferredGroupedFieldSet(resolved);",
          "118:           });",
          "119:         } else {",
          "120:           this._enqueueCompletedDeferredGroupedFieldSet(result);",
          "121:         }",
          "123:         continue;",
          "124:       }",
          "126:       const streamRecord = incrementalDataRecord.streamRecord;",
          "127:       if (streamRecord.id === undefined) {",
          "128:         this._newPending.add(streamRecord);",
          "129:       }",
          "131:       const result = incrementalDataRecord.result;",
          "132:       if (isPromise(result)) {",
          "134:         result.then((resolved) => {",
          "135:           this._enqueueCompletedStreamItems(resolved);",
          "136:         });",
          "137:       } else {",
          "138:         this._enqueueCompletedStreamItems(result);",
          "139:       }",
          "140:     }",
          "141:   }",
          "143:   private _addDeferredFragmentRecord(",
          "144:     deferredFragmentRecord: DeferredFragmentRecord,",
          "145:   ): void {",
          "146:     const parent = deferredFragmentRecord.parent;",
          "147:     if (parent === undefined) {",
          "151:       if (deferredFragmentRecord.id !== undefined) {",
          "152:         return;",
          "153:       }",
          "155:       this._newPending.add(deferredFragmentRecord);",
          "156:       return;",
          "157:     }",
          "159:     if (parent.children.has(deferredFragmentRecord)) {",
          "160:       return;",
          "161:     }",
          "163:     parent.children.add(deferredFragmentRecord);",
          "165:     this._addDeferredFragmentRecord(parent);",
          "166:   }",
          "168:   private _pruneEmpty() {",
          "169:     const maybeEmptyNewPending = this._newPending;",
          "170:     this._newPending = new Set();",
          "171:     for (const node of maybeEmptyNewPending) {",
          "172:       if (isDeferredFragmentRecord(node)) {",
          "173:         if (node.expectedReconcilableResults) {",
          "174:           this._newPending.add(node);",
          "175:           continue;",
          "176:         }",
          "177:         for (const child of node.children) {",
          "178:           this._addNonEmptyNewPending(child);",
          "179:         }",
          "180:       } else {",
          "181:         this._newPending.add(node);",
          "182:       }",
          "183:     }",
          "184:   }",
          "186:   private _addNonEmptyNewPending(",
          "187:     deferredFragmentRecord: DeferredFragmentRecord,",
          "188:   ): void {",
          "189:     if (deferredFragmentRecord.expectedReconcilableResults) {",
          "190:       this._newPending.add(deferredFragmentRecord);",
          "191:       return;",
          "192:     }",
          "195:     for (const child of deferredFragmentRecord.children) {",
          "196:       this._addNonEmptyNewPending(child);",
          "197:     }",
          "198:   }",
          "200:   private _enqueueCompletedDeferredGroupedFieldSet(",
          "201:     result: DeferredGroupedFieldSetResult,",
          "202:   ): void {",
          "203:     let hasPendingParent = false;",
          "204:     for (const deferredFragmentRecord of result.deferredFragmentRecords) {",
          "205:       if (deferredFragmentRecord.id !== undefined) {",
          "206:         hasPendingParent = true;",
          "207:       }",
          "208:       deferredFragmentRecord.results.push(result);",
          "209:     }",
          "210:     if (hasPendingParent) {",
          "211:       this._completedResultQueue.push(result);",
          "212:       this._trigger();",
          "213:     }",
          "214:   }",
          "216:   private _enqueueCompletedStreamItems(result: StreamItemsResult): void {",
          "217:     this._completedResultQueue.push(result);",
          "218:     this._trigger();",
          "219:   }",
          "221:   private _pendingSourcesToResults(): Array<PendingResult> {",
          "223:     for (const pendingSource of this._newPending) {",
          "225:       this._pending.add(pendingSource);",
          "",
          "[Added Lines]",
          "90:   private _pendingSourcesToResults(",
          "91:     newPending: ReadonlyArray<SubsequentResultRecord>,",
          "92:   ): Array<PendingResult> {",
          "94:     for (const pendingSource of newPending) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "233:       }",
          "234:       pendingResults.push(pendingResult);",
          "235:     }",
          "237:     return pendingResults;",
          "238:   }",
          "",
          "[Removed Lines]",
          "236:     this._newPending.clear();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "254:       while (!isDone) {",
          "255:         let pending: Array<PendingResult> = [];",
          "261:           if (isDeferredGroupedFieldSetResult(completedResult)) {",
          "262:             this._handleCompletedDeferredGroupedFieldSet(completedResult);",
          "263:           } else {",
          "264:             this._handleCompletedStreamItems(completedResult);",
          "265:           }",
          "268:         }",
          "270:         if (this._incremental.length > 0 || this._completed.length > 0) {",
          "273:           if (!hasNext) {",
          "274:             isDone = true;",
          "",
          "[Removed Lines]",
          "257:         let completedResult: IncrementalDataRecordResult | undefined;",
          "258:         while (",
          "259:           (completedResult = this._completedResultQueue.shift()) !== undefined",
          "260:         ) {",
          "267:           pending = [...pending, ...this._pendingSourcesToResults()];",
          "271:           const hasNext = this._pending.size > 0;",
          "",
          "[Added Lines]",
          "126:         for (const completedResult of this._incrementalGraph.completedResults()) {",
          "133:           const newPending = this._incrementalGraph.getNewPending();",
          "134:           pending = [...pending, ...this._pendingSourcesToResults(newPending)];",
          "138:           const hasNext = this._incrementalGraph.hasNext();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "295:         }",
          "299:       }",
          "301:       await returnStreamIterators().catch(() => {",
          "",
          "[Removed Lines]",
          "298:         await this._signalled;",
          "",
          "[Added Lines]",
          "165:         await this._incrementalGraph.newCompletedResultAvailable;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "345:     };",
          "346:   }",
          "362:   private _handleCompletedDeferredGroupedFieldSet(",
          "363:     deferredGroupedFieldSetResult: DeferredGroupedFieldSetResult,",
          "364:   ): void {",
          "",
          "[Removed Lines]",
          "348:   private _trigger() {",
          "349:     this._resolve();",
          "350:     this._reset();",
          "351:   }",
          "353:   private _reset() {",
          "357:     const { promise: signalled, resolve } = promiseWithResolvers<void>();",
          "358:     this._resolve = resolve;",
          "359:     this._signalled = signalled;",
          "360:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "374:             id,",
          "375:             errors: deferredGroupedFieldSetResult.errors,",
          "376:           });",
          "378:         }",
          "379:       }",
          "380:       return;",
          "",
          "[Removed Lines]",
          "377:           this._pending.delete(deferredFragmentRecord);",
          "",
          "[Added Lines]",
          "230:           this._incrementalGraph.removeSubsequentResultRecord(",
          "231:             deferredFragmentRecord,",
          "232:           );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "388:     const incrementalDataRecords =",
          "389:       deferredGroupedFieldSetResult.incrementalDataRecords;",
          "390:     if (incrementalDataRecords !== undefined) {",
          "392:     }",
          "394:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult.deferredFragmentRecords) {",
          "",
          "[Removed Lines]",
          "391:       this._addIncrementalDataRecords(incrementalDataRecords);",
          "",
          "[Added Lines]",
          "246:       this._incrementalGraph.addIncrementalDataRecords(incrementalDataRecords);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "400:       if (id === undefined) {",
          "401:         continue;",
          "402:       }",
          "408:         continue;",
          "409:       }",
          "410:       for (const reconcilableResult of reconcilableResults) {",
          "",
          "[Removed Lines]",
          "403:       const reconcilableResults = deferredFragmentRecord.reconcilableResults;",
          "404:       if (",
          "405:         deferredFragmentRecord.expectedReconcilableResults !==",
          "406:         reconcilableResults.length",
          "407:       ) {",
          "",
          "[Added Lines]",
          "258:       const reconcilableResults =",
          "259:         this._incrementalGraph.completeDeferredFragment(deferredFragmentRecord);",
          "260:       if (reconcilableResults === undefined) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "427:         this._incremental.push(incrementalEntry);",
          "428:       }",
          "429:       this._completed.push({ id });",
          "435:     }",
          "438:   }",
          "440:   private _handleCompletedStreamItems(",
          "",
          "[Removed Lines]",
          "430:       this._pending.delete(deferredFragmentRecord);",
          "431:       for (const child of deferredFragmentRecord.children) {",
          "432:         this._newPending.add(child);",
          "433:         this._completedResultQueue.push(...child.results);",
          "434:       }",
          "437:     this._pruneEmpty();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "453:         id,",
          "454:         errors: streamItemsResult.errors,",
          "455:       });",
          "457:       if (isCancellableStreamRecord(streamRecord)) {",
          "458:         invariant(this._context.cancellableStreams !== undefined);",
          "459:         this._context.cancellableStreams.delete(streamRecord);",
          "",
          "[Removed Lines]",
          "456:       this._pending.delete(streamRecord);",
          "",
          "[Added Lines]",
          "302:       this._incrementalGraph.removeSubsequentResultRecord(streamRecord);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "464:       }",
          "465:     } else if (streamItemsResult.result === undefined) {",
          "466:       this._completed.push({ id });",
          "468:       if (isCancellableStreamRecord(streamRecord)) {",
          "469:         invariant(this._context.cancellableStreams !== undefined);",
          "470:         this._context.cancellableStreams.delete(streamRecord);",
          "",
          "[Removed Lines]",
          "467:       this._pending.delete(streamRecord);",
          "",
          "[Added Lines]",
          "313:       this._incrementalGraph.removeSubsequentResultRecord(streamRecord);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "478:       this._incremental.push(incrementalEntry);",
          "480:       if (streamItemsResult.incrementalDataRecords !== undefined) {",
          "482:           streamItemsResult.incrementalDataRecords,",
          "483:         );",
          "485:       }",
          "486:     }",
          "487:   }",
          "",
          "[Removed Lines]",
          "481:         this._addIncrementalDataRecords(",
          "484:         this._pruneEmpty();",
          "",
          "[Added Lines]",
          "327:         this._incrementalGraph.addIncrementalDataRecords(",
          "",
          "---------------"
        ],
        "src/execution/types.ts||src/execution/types.ts": [
          "File: src/execution/types.ts -> src/execution/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:   return 'deferredFragmentRecords' in subsequentResult;",
          "189: }",
          "192:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "193:   path: Array<string | number>;",
          "194:   result: BareDeferredGroupedFieldSetResult;",
          "",
          "[Removed Lines]",
          "191: interface ReconcilableDeferredGroupedFieldSetResult {",
          "",
          "[Added Lines]",
          "191: export interface ReconcilableDeferredGroupedFieldSetResult {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e081838d1cd8212e215b9fe6a2e1926cdbf0010c",
      "candidate_info": {
        "commit_hash": "e081838d1cd8212e215b9fe6a2e1926cdbf0010c",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/e081838d1cd8212e215b9fe6a2e1926cdbf0010c",
        "files": [
          "src/execution/IncrementalPublisher.ts"
        ],
        "message": "fix(incremental): fix logic around selecting id/subPath (#3987)\n\ncurrent loop assumes that the first analyzed DeferredFragmentRecord has been released as pending and thereofre has an `id`, which happens to be the case in this scenario, but is not reliable, uncovered by #3982.\n\nDemonstrates the peril of `!` which might point to requiring additional types, but we can leave that for a different PR.\n\nAnother option is to include an `invariant` call -- that should be unnecessary, but would indeed be safer.",
        "before_after_code_files": [
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "609:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "610:   ): IncrementalDeferResult {",
          "611:     const { data, deferredFragmentRecords } = deferredGroupedFieldSetRecord;",
          "616:       const length = deferredFragmentRecord.path.length;",
          "618:         maxLength = length;",
          "620:       }",
          "621:     }",
          "628:     const incrementalDeferResult: IncrementalDeferResult = {",
          "631:       data: data!,",
          "635:     };",
          "637:     if (subPath.length > 0) {",
          "",
          "[Removed Lines]",
          "612:     let maxLength = deferredFragmentRecords[0].path.length;",
          "613:     let maxIndex = 0;",
          "614:     for (let i = 1; i < deferredFragmentRecords.length; i++) {",
          "615:       const deferredFragmentRecord = deferredFragmentRecords[i];",
          "617:       if (length > maxLength) {",
          "619:         maxIndex = i;",
          "622:     const recordWithLongestPath = deferredFragmentRecords[maxIndex];",
          "623:     const longestPath = recordWithLongestPath.path;",
          "624:     const subPath = deferredGroupedFieldSetRecord.path.slice(",
          "625:       longestPath.length,",
          "626:     );",
          "627:     const id = recordWithLongestPath.id;",
          "634:       id: id!,",
          "",
          "[Added Lines]",
          "612:     let maxLength: number | undefined;",
          "613:     let idWithLongestPath: string | undefined;",
          "614:     for (const deferredFragmentRecord of deferredFragmentRecords) {",
          "615:       const id = deferredFragmentRecord.id;",
          "616:       if (id === undefined) {",
          "617:         continue;",
          "618:       }",
          "620:       if (maxLength === undefined || length > maxLength) {",
          "622:         idWithLongestPath = id;",
          "625:     const subPath = deferredGroupedFieldSetRecord.path.slice(maxLength);",
          "634:       id: idWithLongestPath!,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6acf33fcbf67388d03c648dd82d7c365133364a5",
      "candidate_info": {
        "commit_hash": "6acf33fcbf67388d03c648dd82d7c365133364a5",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/6acf33fcbf67388d03c648dd82d7c365133364a5",
        "files": [
          "src/execution/execute.ts"
        ],
        "message": "perf: introduce completePromisedListItemValue  (#4051)\n\ndepends on #4050",
        "before_after_code_files": [
          "src/execution/execute.ts||src/execution/execute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1108:     if (isPromise(item)) {",
          "1109:       completedResults.push(",
          "1111:           exeContext,",
          "1112:           itemType,",
          "1113:           fieldGroup,",
          "1114:           info,",
          "1115:           itemPath,",
          "1117:           incrementalContext,",
          "1118:           deferMap,",
          "1123:       );",
          "1124:       containsPromise = true;",
          "1125:     } else if (",
          "",
          "[Removed Lines]",
          "1110:         completePromisedValue(",
          "1116:           item,",
          "1119:         ).then((resolved) => {",
          "1120:           graphqlWrappedResult[1].push(...resolved[1]);",
          "1121:           return resolved[0];",
          "1122:         }),",
          "",
          "[Added Lines]",
          "1110:         completePromisedListItemValue(",
          "1111:           item,",
          "1112:           graphqlWrappedResult,",
          "1120:         ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1233:     if (isPromise(item)) {",
          "1234:       completedResults.push(",
          "1236:           exeContext,",
          "1237:           itemType,",
          "1238:           fieldGroup,",
          "1239:           info,",
          "1240:           itemPath,",
          "1242:           incrementalContext,",
          "1243:           deferMap,",
          "1248:       );",
          "1249:       containsPromise = true;",
          "1250:     } else if (",
          "",
          "[Removed Lines]",
          "1235:         completePromisedValue(",
          "1241:           item,",
          "1244:         ).then((resolved) => {",
          "1245:           graphqlWrappedResult[1].push(...resolved[1]);",
          "1246:           return resolved[0];",
          "1247:         }),",
          "",
          "[Added Lines]",
          "1233:         completePromisedListItemValue(",
          "1234:           item,",
          "1235:           graphqlWrappedResult,",
          "1243:         ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1334:   return false;",
          "1335: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1333: async function completePromisedListItemValue(",
          "1334:   item: unknown,",
          "1335:   parent: GraphQLWrappedResult<Array<unknown>>,",
          "1336:   exeContext: ExecutionContext,",
          "1337:   itemType: GraphQLOutputType,",
          "1338:   fieldGroup: FieldGroup,",
          "1339:   info: GraphQLResolveInfo,",
          "1340:   itemPath: Path,",
          "1341:   incrementalContext: IncrementalContext | undefined,",
          "1342:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1343: ): Promise<unknown> {",
          "1344:   try {",
          "1345:     const resolved = await item;",
          "1346:     let completed = completeValue(",
          "1347:       exeContext,",
          "1348:       itemType,",
          "1349:       fieldGroup,",
          "1350:       info,",
          "1351:       itemPath,",
          "1352:       resolved,",
          "1353:       incrementalContext,",
          "1354:       deferMap,",
          "1355:     );",
          "1356:     if (isPromise(completed)) {",
          "1357:       completed = await completed;",
          "1358:     }",
          "1359:     parent[1].push(...completed[1]);",
          "1360:     return completed[0];",
          "1361:   } catch (rawError) {",
          "1362:     const errors = (incrementalContext ?? exeContext).errors;",
          "1363:     handleFieldError(rawError, itemType, fieldGroup, itemPath, errors);",
          "1364:     return null;",
          "1365:   }",
          "1366: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}