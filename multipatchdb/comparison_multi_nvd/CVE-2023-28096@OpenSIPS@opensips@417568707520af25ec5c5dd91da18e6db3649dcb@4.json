{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "205667d85c26646f7f86024b6d1865e9057c011b",
      "candidate_info": {
        "commit_hash": "205667d85c26646f7f86024b6d1865e9057c011b",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/205667d85c26646f7f86024b6d1865e9057c011b",
        "files": [
          "modules/clusterer/clusterer.c"
        ],
        "message": "clusterer: use the proper locking type when we might switch for writing\n\nAquire lock for switchable reading when handling a full topology update,\nwich might trigger the insert of a new node in the list and thus using\nthe lock switch mechanism.\n\n(cherry picked from commit ead6f1fcae3881a15b6ec4e8e6026bdd5d99ecb3)",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1109:   return;",
          "1110:  }",
          "1113:   lock_start_sw_read(cl_list_lock);",
          "1114:  else",
          "1115:   lock_start_read(cl_list_lock);",
          "",
          "[Removed Lines]",
          "1112:  if (!db_mode && packet_type == CLUSTERER_NODE_DESCRIPTION)",
          "",
          "[Added Lines]",
          "1112:  if (!db_mode && (packet_type == CLUSTERER_NODE_DESCRIPTION ||",
          "1113:   packet_type == CLUSTERER_FULL_TOP_UPDATE))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1156:  }",
          "1158: exit:",
          "1160:   lock_stop_sw_read(cl_list_lock);",
          "1161:  else",
          "1162:   lock_stop_read(cl_list_lock);",
          "",
          "[Removed Lines]",
          "1159:  if (!db_mode && packet_type == CLUSTERER_NODE_DESCRIPTION)",
          "",
          "[Added Lines]",
          "1160:  if (!db_mode && (packet_type == CLUSTERER_NODE_DESCRIPTION ||",
          "1161:   packet_type == CLUSTERER_FULL_TOP_UPDATE))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c46af85cadd91a05cbb52687ab27f94ae79b3aa6",
      "candidate_info": {
        "commit_hash": "c46af85cadd91a05cbb52687ab27f94ae79b3aa6",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c46af85cadd91a05cbb52687ab27f94ae79b3aa6",
        "files": [
          "parser/parse_uri.c"
        ],
        "message": "parse_uri: Complete the fix for undefined bitwise left-shift (OSS-Fuzz)\n\nThe default auto-cast to (int) is not enough, as a value such as\n255 << 24 can still overflow the 31 value bits...\n\nFixes OSS-Fuzz#51542\n\n(cherry picked from commit e0d90ec107484051e6c769056036447361c5724d)",
        "before_after_code_files": [
          "parser/parse_uri.c||parser/parse_uri.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "parser/parse_uri.c||parser/parse_uri.c": [
          "File: parser/parse_uri.c -> parser/parse_uri.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:  if (len<5) goto error_too_short;",
          "664:  scheme|=0x20202020;",
          "665:  if (scheme==SIP_SCH){",
          "666:   uri->type=SIP_URI_T;",
          "",
          "[Removed Lines]",
          "662:  scheme=(unsigned char)buf[0]+((unsigned char)buf[1]<<8)+",
          "663:    ((unsigned char)buf[2]<<16)+((unsigned char)buf[3]<<24);",
          "",
          "[Added Lines]",
          "662:  scheme=(unsigned)(unsigned char)buf[0]",
          "663:    + (((unsigned)(unsigned char)buf[1])<<8)",
          "664:    + (((unsigned)(unsigned char)buf[2])<<16)",
          "665:    + (((unsigned)(unsigned char)buf[3])<<24);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d030bfa744546ddfd2fc31e13d29bae6f5a6b37b",
      "candidate_info": {
        "commit_hash": "d030bfa744546ddfd2fc31e13d29bae6f5a6b37b",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/d030bfa744546ddfd2fc31e13d29bae6f5a6b37b",
        "files": [
          "modules/rtp_relay/rtp_relay_ctx.c"
        ],
        "message": "fix engaging rtp_relay in branch route\n\nClose #2879",
        "before_after_code_files": [
          "modules/rtp_relay/rtp_relay_ctx.c||modules/rtp_relay/rtp_relay_ctx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/rtp_relay/rtp_relay_ctx.c||modules/rtp_relay/rtp_relay_ctx.c": [
          "File: modules/rtp_relay/rtp_relay_ctx.c -> modules/rtp_relay/rtp_relay_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:  return rtp_relay_dlg.get_direction() == DLG_DIR_UPSTREAM;",
          "413: }",
          "416: {",
          "417:  struct list_head *it;",
          "418:  struct rtp_relay_sess *sess;",
          "421:  list_for_each(it, &ctx->sessions) {",
          "422:   sess = list_entry(it, struct rtp_relay_sess, list);",
          "423:   if (sess->index == index)",
          "",
          "[Removed Lines]",
          "415: struct rtp_relay_sess *rtp_relay_get_sess(struct rtp_relay_ctx *ctx, int index)",
          "419:  if (index == RTP_RELAY_ALL_BRANCHES)",
          "420:   return ctx->main;",
          "",
          "[Added Lines]",
          "415: struct rtp_relay_sess *rtp_relay_get_sess_index(struct rtp_relay_ctx *ctx, int index)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426:  return NULL;",
          "427: }",
          "429: static struct rtp_relay_sess *rtp_relay_sess_empty(void)",
          "430: {",
          "431:  struct rtp_relay_sess *sess;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428: struct rtp_relay_sess *rtp_relay_get_sess(struct rtp_relay_ctx *ctx, int index)",
          "429: {",
          "430:  struct rtp_relay_sess *sess = rtp_relay_get_sess_index(ctx, index);",
          "431:  return sess?sess:rtp_relay_get_sess_index(ctx, RTP_RELAY_ALL_BRANCHES);",
          "432: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1023:  memset(&info, 0, sizeof info);",
          "1024:  info.body = get_body_part(msg, TYPE_APPLICATION, SUBTYPE_SDP);",
          "1026:   rtp_sess_set_late(sess);",
          "1032: }",
          "1034: static mi_response_t *mi_rtp_relay_params(const mi_params_t *params,",
          "",
          "[Removed Lines]",
          "1025:  if (!info.body) {",
          "1027:   return 1;",
          "1028:  }",
          "1029:  info.msg = msg;",
          "1030:  info.branch = sess->index;",
          "1031:  return rtp_relay_offer(&info, sess, ctx->main, RTP_RELAY_OFFER, NULL);",
          "",
          "[Added Lines]",
          "1030:  if (!info.body)",
          "1032:  return 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9c092ede40af311c9b27317a3029f785f0eb14c",
      "candidate_info": {
        "commit_hash": "b9c092ede40af311c9b27317a3029f785f0eb14c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/b9c092ede40af311c9b27317a3029f785f0eb14c",
        "files": [
          "modules/b2b_entities/b2be_db.c"
        ],
        "message": "b2b_entities: fix the right number of rows when leg is missing\n\nThanks go to Norm Brandinger from Five9 for reporting, testing and\nproviding all the help to pinpoint this issue!\n\n(cherry picked from commit b005a3795f9a762011f488cb403f2e9bd7a7ade1)",
        "before_after_code_files": [
          "modules/b2b_entities/b2be_db.c||modules/b2b_entities/b2be_db.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2be_db.c||modules/b2b_entities/b2be_db.c": [
          "File: modules/b2b_entities/b2be_db.c -> modules/b2b_entities/b2be_db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:  int i;",
          "280:  dlg_leg_t* leg;",
          "281:  b2b_dlg_t* dlg;",
          "283:  if (!b2be_dbf.init)",
          "284:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:  int cols_no = DB_COLS_NO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346:    qvals[20].val.int_val = dlg->last_invite_cseq;",
          "347:    qvals[21].val.str_val = dlg->contact[0];",
          "348:    qvals[22].val.str_val = dlg->contact[1];",
          "350:    leg = dlg->legs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350:    cols_no = 23;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "354:     qvals[24].val.int_val= leg->cseq;",
          "355:     qvals[25].val.str_val= leg->contact;",
          "356:     qvals[26].val.str_val= leg->route_set;",
          "357:    }",
          "359:    if(dlg->db_flag == INSERTDB_FLAG)",
          "360:    {",
          "363:     {",
          "364:      LM_ERR(\"Sql insert failed\\n\");",
          "365:      if(!no_lock)",
          "",
          "[Removed Lines]",
          "362:     if(b2be_dbf.insert(b2be_db, qcols, qvals, DB_COLS_NO)< 0)",
          "",
          "[Added Lines]",
          "359:     cols_no = 27;",
          "365:     if(b2be_dbf.insert(b2be_db, qcols, qvals, cols_no)< 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "371:    {",
          "372:     if(b2be_dbf.update(b2be_db, qcols, 0, qvals,",
          "373:        qcols+n_start_update, qvals+n_start_update,",
          "375:     {",
          "376:      LM_ERR(\"Sql update failed\\n\");",
          "377:      if(!no_lock)",
          "",
          "[Removed Lines]",
          "374:        n_query_update, DB_COLS_NO-n_start_update)< 0)",
          "",
          "[Added Lines]",
          "377:        n_query_update, cols_no-n_start_update)< 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07a6b2e3e83d992d76ff611bfa485768ed209389",
      "candidate_info": {
        "commit_hash": "07a6b2e3e83d992d76ff611bfa485768ed209389",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/07a6b2e3e83d992d76ff611bfa485768ed209389",
        "files": [
          "modules/clusterer/node_info.c",
          "modules/clusterer/topology.c"
        ],
        "message": "clusterer: make sure a discovered node is not added multiple times\n\nDo not insert a new node into the list multiple times when:\n* receiving multiple CLUSTERER_NODE_DESCRIPTION BIN messages\n* we receive a CLUSTERER_NODE_DESCRIPTION message and the node also\n  appears in CLUSTERER_FULL_TOP_UPDATE messages.\n\n(cherry picked from commit b8e107517fd032f16f16df242a02474efc2312d2)",
        "before_after_code_files": [
          "modules/clusterer/node_info.c||modules/clusterer/node_info.c",
          "modules/clusterer/topology.c||modules/clusterer/topology.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/node_info.c||modules/clusterer/node_info.c": [
          "File: modules/clusterer/node_info.c -> modules/clusterer/node_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:  }",
          "114:  if (!*new_info) {",
          "115:   LM_ERR(\"no more shm memory\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:  if (get_node_by_id(cluster, int_vals[INT_VALS_NODE_ID_COL])) {",
          "114:   LM_DBG(\"Node [%d] already exists\\n\", int_vals[INT_VALS_NODE_ID_COL]);",
          "115:   return 0;",
          "116:  }",
          "",
          "---------------"
        ],
        "modules/clusterer/topology.c||modules/clusterer/topology.c": [
          "File: modules/clusterer/topology.c -> modules/clusterer/topology.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698:   lock_switch_read(cl_list_lock, lock_old_flag);",
          "699:   return NULL;",
          "700:  }",
          "707:  lock_switch_read(cl_list_lock, lock_old_flag);",
          "",
          "[Removed Lines]",
          "701:  if (!new_node) {",
          "702:   LM_ERR(\"Unable to add node info to backing list\\n\");",
          "703:   lock_switch_read(cl_list_lock, lock_old_flag);",
          "704:   return NULL;",
          "705:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}