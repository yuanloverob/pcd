{
  "cve_id": "CVE-2023-34109",
  "cve_desc": "zxcvbn-ts is an open source password strength estimator written in typescript. This vulnerability affects users running on the nodeJS platform which are using the second argument of the zxcvbn function. It can result in an unbounded resource consumption as the user inputs array is extended with every function call. Browsers are impacted, too but a single user need to do a lot of input changes so that it affects the browser, while the node process gets the inputs of every user of a platform and can be killed that way. This problem has been patched in version 3.0.2. Users are advised to upgrade. Users unable to upgrade should stop using the second argument of the zxcvbn function and use the zxcvbnOptions.setOptions function.",
  "repo": "zxcvbn-ts/zxcvbn",
  "patch_hash": "3f9bed21b5d01f6f6863476822ca857355fba22f",
  "patch_info": {
    "commit_hash": "3f9bed21b5d01f6f6863476822ca857355fba22f",
    "repo": "zxcvbn-ts/zxcvbn",
    "commit_url": "https://github.com/zxcvbn-ts/zxcvbn/commit/3f9bed21b5d01f6f6863476822ca857355fba22f",
    "files": [
      "packages/libraries/main/src/Options.ts"
    ],
    "message": "fix(user-inputs): resolve memory leak with user inputs on the fly",
    "before_after_code_files": [
      "packages/libraries/main/src/Options.ts||packages/libraries/main/src/Options.ts"
    ]
  },
  "patch_diff": {
    "packages/libraries/main/src/Options.ts||packages/libraries/main/src/Options.ts": [
      "File: packages/libraries/main/src/Options.ts -> packages/libraries/main/src/Options.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "112:     const rankedDictionaries: RankedDictionaries = {}",
      "113:     const rankedDictionariesMaxWorkSize: Record<string, number> = {}",
      "114:     Object.keys(this.dictionary).forEach((name) => {",
      "116:       rankedDictionariesMaxWorkSize[name] =",
      "118:     })",
      "119:     this.rankedDictionaries = rankedDictionaries",
      "120:     this.rankedDictionariesMaxWordSize = rankedDictionariesMaxWorkSize",
      "121:   }",
      "125:       if (typeof el !== 'string') {",
      "126:         return el.toString().length",
      "127:       }",
      "",
      "[Removed Lines]",
      "115:       rankedDictionaries[name] = this.getRankedDictionary(name)",
      "117:         this.getRankedDictionariesMaxWordSize(name)",
      "123:   getRankedDictionariesMaxWordSize(name: string) {",
      "124:     const data = this.dictionary[name].map((el) => {",
      "",
      "[Added Lines]",
      "115:       rankedDictionaries[name] = buildRankedDictionary(this.dictionary[name])",
      "117:         this.getRankedDictionariesMaxWordSize(this.dictionary[name])",
      "123:   getRankedDictionariesMaxWordSize(list: (string | number)[]) {",
      "124:     const data = list.map((el) => {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "135:     return data.reduce((a, b) => Math.max(a, b), -Infinity)",
      "136:   }",
      "157:   }",
      "159:   extendUserInputsDictionary(dictionary: (string | number)[]) {",
      "167:     }",
      "170:     this.rankedDictionariesMaxWordSize.userInputs =",
      "172:   }",
      "174:   public addMatcher(name: string, matcher: Matcher) {",
      "",
      "[Removed Lines]",
      "138:   getRankedDictionary(name: string) {",
      "139:     const list = this.dictionary[name]",
      "140:     if (name === 'userInputs') {",
      "141:       const sanitizedInputs: string[] = []",
      "143:       list.forEach((input: string | number | boolean) => {",
      "144:         const inputType = typeof input",
      "145:         if (",
      "146:           inputType === 'string' ||",
      "147:           inputType === 'number' ||",
      "148:           inputType === 'boolean'",
      "149:         ) {",
      "150:           sanitizedInputs.push(input.toString().toLowerCase())",
      "151:         }",
      "152:       })",
      "154:       return buildRankedDictionary(sanitizedInputs)",
      "155:     }",
      "156:     return buildRankedDictionary(list)",
      "160:     if (this.dictionary.userInputs) {",
      "161:       this.dictionary.userInputs = [",
      "162:         ...this.dictionary.userInputs,",
      "163:         ...dictionary,",
      "164:       ]",
      "165:     } else {",
      "166:       this.dictionary.userInputs = dictionary",
      "169:     this.rankedDictionaries.userInputs = this.getRankedDictionary('userInputs')",
      "171:       this.getRankedDictionariesMaxWordSize('userInputs')",
      "",
      "[Added Lines]",
      "138:   buildSanitizedRankedDictionary(list: (string | number)[]) {",
      "139:     const sanitizedInputs: string[] = []",
      "141:     list.forEach((input: string | number | boolean) => {",
      "142:       const inputType = typeof input",
      "143:       if (",
      "144:         inputType === 'string' ||",
      "145:         inputType === 'number' ||",
      "146:         inputType === 'boolean'",
      "147:       ) {",
      "148:         sanitizedInputs.push(input.toString().toLowerCase())",
      "149:       }",
      "150:     })",
      "152:     return buildRankedDictionary(sanitizedInputs)",
      "156:     if (!this.dictionary.userInputs) {",
      "157:       this.dictionary.userInputs = []",
      "160:     const newList = [...this.dictionary.userInputs, ...dictionary]",
      "161:     this.rankedDictionaries.userInputs =",
      "162:       this.buildSanitizedRankedDictionary(newList)",
      "164:       this.getRankedDictionariesMaxWordSize(newList)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1c2af7d032a73e4829340c98a65035d3a53b120",
      "candidate_info": {
        "commit_hash": "f1c2af7d032a73e4829340c98a65035d3a53b120",
        "repo": "zxcvbn-ts/zxcvbn",
        "commit_url": "https://github.com/zxcvbn-ts/zxcvbn/commit/f1c2af7d032a73e4829340c98a65035d3a53b120",
        "files": [
          "packages/libraries/main/src/Matching.ts",
          "packages/libraries/main/src/Options.ts",
          "packages/libraries/main/src/index.ts",
          "packages/libraries/main/src/matcher/date/matching.ts",
          "packages/libraries/main/src/matcher/dictionary/matching.ts",
          "packages/libraries/main/src/matcher/dictionary/types.ts",
          "packages/libraries/main/src/matcher/dictionary/variants/matching/l33t.ts",
          "packages/libraries/main/src/matcher/dictionary/variants/matching/reverse.ts",
          "packages/libraries/main/src/matcher/regex/matching.ts",
          "packages/libraries/main/src/matcher/repeat/matching.ts",
          "packages/libraries/main/src/matcher/separator/matching.ts",
          "packages/libraries/main/src/matcher/sequence/matching.ts",
          "packages/libraries/main/src/matcher/spatial/matching.ts",
          "packages/libraries/main/src/types.ts",
          "packages/libraries/main/src/utils/mergeUserInputDictionary.ts",
          "packages/libraries/main/test/options.spec.ts",
          "packages/libraries/main/test/scoring/guesses/calc.spec.ts",
          "packages/libraries/pwned/src/matching.ts"
        ],
        "message": "fix(dictionary): do not add userInputs on the fly to the options dictionary",
        "before_after_code_files": [
          "packages/libraries/main/src/Matching.ts||packages/libraries/main/src/Matching.ts",
          "packages/libraries/main/src/Options.ts||packages/libraries/main/src/Options.ts",
          "packages/libraries/main/src/index.ts||packages/libraries/main/src/index.ts",
          "packages/libraries/main/src/matcher/date/matching.ts||packages/libraries/main/src/matcher/date/matching.ts",
          "packages/libraries/main/src/matcher/dictionary/matching.ts||packages/libraries/main/src/matcher/dictionary/matching.ts",
          "packages/libraries/main/src/matcher/dictionary/types.ts||packages/libraries/main/src/matcher/dictionary/types.ts",
          "packages/libraries/main/src/matcher/dictionary/variants/matching/l33t.ts||packages/libraries/main/src/matcher/dictionary/variants/matching/l33t.ts",
          "packages/libraries/main/src/matcher/dictionary/variants/matching/reverse.ts||packages/libraries/main/src/matcher/dictionary/variants/matching/reverse.ts",
          "packages/libraries/main/src/matcher/regex/matching.ts||packages/libraries/main/src/matcher/regex/matching.ts",
          "packages/libraries/main/src/matcher/repeat/matching.ts||packages/libraries/main/src/matcher/repeat/matching.ts",
          "packages/libraries/main/src/matcher/separator/matching.ts||packages/libraries/main/src/matcher/separator/matching.ts",
          "packages/libraries/main/src/matcher/sequence/matching.ts||packages/libraries/main/src/matcher/sequence/matching.ts",
          "packages/libraries/main/src/matcher/spatial/matching.ts||packages/libraries/main/src/matcher/spatial/matching.ts",
          "packages/libraries/main/src/types.ts||packages/libraries/main/src/types.ts",
          "packages/libraries/main/src/utils/mergeUserInputDictionary.ts||packages/libraries/main/src/utils/mergeUserInputDictionary.ts",
          "packages/libraries/main/test/options.spec.ts||packages/libraries/main/test/options.spec.ts",
          "packages/libraries/main/test/scoring/guesses/calc.spec.ts||packages/libraries/main/test/scoring/guesses/calc.spec.ts",
          "packages/libraries/pwned/src/matching.ts||packages/libraries/pwned/src/matching.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/libraries/main/src/Options.ts||packages/libraries/main/src/Options.ts"
          ],
          "candidate": [
            "packages/libraries/main/src/Options.ts||packages/libraries/main/src/Options.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/libraries/main/src/Matching.ts||packages/libraries/main/src/Matching.ts": [
          "File: packages/libraries/main/src/Matching.ts -> packages/libraries/main/src/Matching.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { extend, sorted } from './utils/helper'",
          "3: import dateMatcher from './matcher/date/matching'",
          "4: import dictionaryMatcher from './matcher/dictionary/matching'",
          "5: import regexMatcher from './matcher/regex/matching'",
          "",
          "[Removed Lines]",
          "2: import { MatchExtended, MatchingType } from './types'",
          "",
          "[Added Lines]",
          "2: import { MatchExtended, MatchingType, UserInputsOptions } from './types'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     return new Matcher(this.options)",
          "45:   }",
          "48:     const matches: MatchExtended[] = []",
          "50:     const promises: Promise<MatchExtended[]>[] = []",
          "",
          "[Removed Lines]",
          "47:   match(password: string): MatchExtended[] | Promise<MatchExtended[]> {",
          "",
          "[Added Lines]",
          "47:   match(",
          "48:     password: string,",
          "49:     userInputsOptions?: UserInputsOptions,",
          "50:   ): MatchExtended[] | Promise<MatchExtended[]> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:       const result = matcher.match({",
          "61:         password,",
          "62:         omniMatch: this,",
          "63:       })",
          "65:       if (result instanceof Promise) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:         userInputsOptions,",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/Options.ts||packages/libraries/main/src/Options.ts": [
          "File: packages/libraries/main/src/Options.ts -> packages/libraries/main/src/Options.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   RankedDictionaries,",
          "9:   Matchers,",
          "10:   Matcher,",
          "11: } from './types'",
          "12: import l33tTable from './data/l33tTable'",
          "13: import translationKeys from './data/translationKeys'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:   UserInputsOptions,",
          "12:   RankedDictionary,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:     return buildRankedDictionary(sanitizedInputs)",
          "159:   }",
          "164:     }",
          "171:   }",
          "173:   private addMatcher(name: string, matcher: Matcher) {",
          "",
          "[Removed Lines]",
          "161:   public extendUserInputsDictionary(dictionary: (string | number)[]) {",
          "162:     if (!this.dictionary.userInputs) {",
          "163:       this.dictionary.userInputs = []",
          "166:     const newList = [...this.dictionary.userInputs, ...dictionary]",
          "167:     this.rankedDictionaries.userInputs =",
          "168:       this.buildSanitizedRankedDictionary(newList)",
          "169:     this.rankedDictionariesMaxWordSize.userInputs =",
          "170:       this.getRankedDictionariesMaxWordSize(newList)",
          "",
          "[Added Lines]",
          "163:   public getUserInputsOptions(",
          "164:     dictionary?: (string | number)[],",
          "165:   ): UserInputsOptions {",
          "166:     let rankedDictionary: RankedDictionary = {}",
          "167:     let rankedDictionaryMaxWordSize: number = 0",
          "168:     if (dictionary) {",
          "169:       rankedDictionary = this.buildSanitizedRankedDictionary(dictionary)",
          "170:       rankedDictionaryMaxWordSize =",
          "171:         this.getRankedDictionariesMaxWordSize(dictionary)",
          "174:     return {",
          "175:       rankedDictionary,",
          "176:       rankedDictionaryMaxWordSize,",
          "177:     }",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/index.ts||packages/libraries/main/src/index.ts": [
          "File: packages/libraries/main/src/index.ts -> packages/libraries/main/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   }",
          "46:   private main(password: string, userInputs?: (string | number)[]) {",
          "51:     const matching = new Matching(this.options)",
          "54:   }",
          "56:   public check(password: string, userInputs?: (string | number)[]) {",
          "",
          "[Removed Lines]",
          "47:     if (userInputs) {",
          "48:       this.options.extendUserInputsDictionary(userInputs)",
          "49:     }",
          "53:     return matching.match(password)",
          "",
          "[Added Lines]",
          "47:     const userInputsOptions = this.options.getUserInputsOptions(userInputs)",
          "51:     return matching.match(password, userInputsOptions)",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/matcher/date/matching.ts||packages/libraries/main/src/matcher/date/matching.ts": [
          "File: packages/libraries/main/src/matcher/date/matching.ts -> packages/libraries/main/src/matcher/date/matching.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   REFERENCE_YEAR,",
          "6: } from '../../data/const'",
          "7: import { sorted } from '../../utils/helper'",
          "9: import { Options } from '../../Options'",
          "",
          "[Removed Lines]",
          "8: import { DateMatch } from '../../types'",
          "11: interface DateMatchOptions {",
          "12:   password: string",
          "13: }",
          "",
          "[Added Lines]",
          "8: import { DateMatch, MatchOptions } from '../../types'",
          "11: type DateMatchOptions = Pick<MatchOptions, 'password'>",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/matcher/dictionary/matching.ts||packages/libraries/main/src/matcher/dictionary/matching.ts": [
          "File: packages/libraries/main/src/matcher/dictionary/matching.ts -> packages/libraries/main/src/matcher/dictionary/matching.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import Reverse from './variants/matching/reverse'",
          "8: import L33t from './variants/matching/l33t'",
          "9: import { DictionaryMatchOptions } from './types'",
          "11: class MatchDictionary {",
          "12:   l33t: L33t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import mergeUserInputDictionary from '../../utils/mergeUserInputDictionary'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     this.reverse = new Reverse(options, this.defaultMatch)",
          "19:   }",
          "22:     const matches = [",
          "28:     ]",
          "29:     return sorted(matches)",
          "30:   }",
          "33:     const matches: DictionaryMatch[] = []",
          "34:     const passwordLength = password.length",
          "35:     const passwordLower = password.toLowerCase()",
          "41:       const longestDictionaryWordSize =",
          "43:       const searchWidth = Math.min(longestDictionaryWordSize, passwordLength)",
          "44:       for (let i = 0; i < passwordLength; i += 1) {",
          "45:         const searchEnd = Math.min(i + searchWidth, passwordLength)",
          "",
          "[Removed Lines]",
          "21:   match({ password }: DictionaryMatchOptions) {",
          "23:       ...(this.defaultMatch({",
          "24:         password,",
          "25:       }) as DictionaryMatch[]),",
          "26:       ...(this.reverse.match({ password }) as DictionaryMatch[]),",
          "27:       ...(this.l33t.match({ password }) as L33tMatch[]),",
          "32:   defaultMatch({ password, useLevenshtein = true }: DictionaryMatchOptions) {",
          "38:     Object.keys(this.options.rankedDictionaries).forEach((dictionaryName) => {",
          "39:       const rankedDict =",
          "40:         this.options.rankedDictionaries[dictionaryName as DictionaryNames]",
          "42:         this.options.rankedDictionariesMaxWordSize[dictionaryName]",
          "",
          "[Added Lines]",
          "22:   match(matchOptions: DictionaryMatchOptions) {",
          "24:       ...(this.defaultMatch(matchOptions) as DictionaryMatch[]),",
          "25:       ...(this.reverse.match(matchOptions) as DictionaryMatch[]),",
          "26:       ...(this.l33t.match(matchOptions) as L33tMatch[]),",
          "31:   defaultMatch({",
          "32:     password,",
          "33:     userInputsOptions,",
          "34:     useLevenshtein = true,",
          "35:   }: DictionaryMatchOptions) {",
          "40:     const { rankedDictionaries, rankedDictionariesMaxWordSize } =",
          "41:       mergeUserInputDictionary(",
          "42:         this.options.rankedDictionaries,",
          "43:         this.options.rankedDictionariesMaxWordSize,",
          "44:         userInputsOptions,",
          "45:       )",
          "47:     Object.keys(rankedDictionaries).forEach((dictionaryName) => {",
          "48:       const rankedDict = rankedDictionaries[dictionaryName as DictionaryNames]",
          "50:         rankedDictionariesMaxWordSize[dictionaryName]",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/matcher/dictionary/types.ts||packages/libraries/main/src/matcher/dictionary/types.ts": [
          "File: packages/libraries/main/src/matcher/dictionary/types.ts -> packages/libraries/main/src/matcher/dictionary/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   useLevenshtein?: boolean",
          "6: }",
          "8: export type DefaultMatch = (",
          "9:   options: DictionaryMatchOptions,",
          "10: ) => DictionaryMatch[]",
          "",
          "[Removed Lines]",
          "1: import { DictionaryMatch } from '../../types'",
          "3: export interface DictionaryMatchOptions {",
          "4:   password: string",
          "",
          "[Added Lines]",
          "1: import { DictionaryMatch, MatchOptions } from '../../types'",
          "3: export interface DictionaryMatchOptionsLevenshtein extends MatchOptions {",
          "7: export type DictionaryMatchOptions = Pick<",
          "8:   DictionaryMatchOptionsLevenshtein,",
          "9:   'password' | 'userInputsOptions' | 'useLevenshtein'",
          "10: >",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/matcher/dictionary/variants/matching/l33t.ts||packages/libraries/main/src/matcher/dictionary/variants/matching/l33t.ts": [
          "File: packages/libraries/main/src/matcher/dictionary/variants/matching/l33t.ts -> packages/libraries/main/src/matcher/dictionary/variants/matching/l33t.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { Options } from '../../../../Options'",
          "2: import { DictionaryMatch, L33tMatch } from '../../../../types'",
          "4: import getCleanPasswords, {",
          "5:   PasswordChanges,",
          "6:   PasswordWithSubs,",
          "",
          "[Removed Lines]",
          "3: import { DefaultMatch } from '../../types'",
          "",
          "[Added Lines]",
          "3: import { DefaultMatch, DictionaryMatchOptions } from '../../types'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     })",
          "68:   }",
          "71:     const matches: L33tMatch[] = []",
          "72:     const subbedPasswords = getCleanPasswords(",
          "74:       this.options.l33tMaxSubstitutions,",
          "75:       this.options.trieNodeRoot,",
          "76:     )",
          "",
          "[Removed Lines]",
          "70:   match({ password }: { password: string }) {",
          "73:       password,",
          "",
          "[Added Lines]",
          "70:   match(matchOptions: DictionaryMatchOptions) {",
          "73:       matchOptions.password,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:         return",
          "82:       }",
          "83:       const matchedDictionary = this.defaultMatch({",
          "84:         password: subbedPassword.password,",
          "85:         useLevenshtein: isFullSubstitution,",
          "86:       })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:         ...matchOptions,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:       isFullSubstitution = false",
          "89:       matchedDictionary.forEach((match: DictionaryMatch) => {",
          "90:         if (!hasFullMatch) {",
          "92:         }",
          "93:         const extras = getExtras(subbedPassword, match.i, match.j)",
          "95:         const newMatch: L33tMatch = {",
          "96:           ...match,",
          "97:           l33t: true,",
          "",
          "[Removed Lines]",
          "91:           hasFullMatch = match.i === 0 && match.j === password.length - 1",
          "94:         const token = password.slice(extras.i, +extras.j + 1 || 9e9)",
          "",
          "[Added Lines]",
          "92:           hasFullMatch =",
          "93:             match.i === 0 && match.j === matchOptions.password.length - 1",
          "96:         const token = matchOptions.password.slice(",
          "97:           extras.i,",
          "98:           +extras.j + 1 || 9e9,",
          "99:         )",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/matcher/dictionary/variants/matching/reverse.ts||packages/libraries/main/src/matcher/dictionary/variants/matching/reverse.ts": [
          "File: packages/libraries/main/src/matcher/dictionary/variants/matching/reverse.ts -> packages/libraries/main/src/matcher/dictionary/variants/matching/reverse.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { Options } from '../../../../Options'",
          "",
          "[Removed Lines]",
          "1: import { DictionaryMatch } from '../../../../types'",
          "2: import { DefaultMatch } from '../../types'",
          "",
          "[Added Lines]",
          "1: import { DictionaryMatch, MatchOptions } from '../../../../types'",
          "2: import { DefaultMatch, DictionaryMatchOptions } from '../../types'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     private defaultMatch: DefaultMatch,",
          "14:   ) {}",
          "18:     return this.defaultMatch({",
          "19:       password: passwordReversed,",
          "20:     }).map((match: DictionaryMatch) => ({",
          "21:       ...match,",
          "22:       token: match.token.split('').reverse().join(''), // reverse back",
          "23:       reversed: true,",
          "27:     }))",
          "28:   }",
          "29: }",
          "",
          "[Removed Lines]",
          "16:   match({ password }: { password: string }) {",
          "17:     const passwordReversed = password.split('').reverse().join('')",
          "25:       i: password.length - 1 - match.j,",
          "26:       j: password.length - 1 - match.i,",
          "",
          "[Added Lines]",
          "16:   match(matchOptions: DictionaryMatchOptions) {",
          "17:     const passwordReversed = matchOptions.password.split('').reverse().join('')",
          "19:       ...matchOptions,",
          "26:       i: matchOptions.password.length - 1 - match.j,",
          "27:       j: matchOptions.password.length - 1 - match.i,",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/matcher/regex/matching.ts||packages/libraries/main/src/matcher/regex/matching.ts": [
          "File: packages/libraries/main/src/matcher/regex/matching.ts -> packages/libraries/main/src/matcher/regex/matching.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { REGEXEN } from '../../data/const'",
          "2: import { sorted } from '../../utils/helper'",
          "4: import { Options } from '../../Options'",
          "11: type RegexesKeys = keyof typeof REGEXEN",
          "",
          "[Removed Lines]",
          "3: import { RegexMatch } from '../../types'",
          "6: interface RegexMatchOptions {",
          "7:   password: string",
          "8:   regexes?: typeof REGEXEN",
          "9: }",
          "",
          "[Added Lines]",
          "3: import { MatchOptions, RegexMatch } from '../../types'",
          "6: type RegexMatchOptions = Pick<MatchOptions, 'password'>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: class MatchRegex {",
          "18:   constructor(private options: Options) {}",
          "21:     const matches: RegexMatch[] = []",
          "24:       regex.lastIndex = 0 // keeps regexMatch stateless",
          "26:       let regexMatch: RegExpExecArray | null",
          "",
          "[Removed Lines]",
          "20:   match({ password, regexes = REGEXEN }: RegexMatchOptions) {",
          "22:     Object.keys(regexes).forEach((name) => {",
          "23:       const regex = regexes[name as RegexesKeys]",
          "",
          "[Added Lines]",
          "17:   match({ password }: RegexMatchOptions) {",
          "19:     Object.keys(REGEXEN).forEach((name) => {",
          "20:       const regex = REGEXEN[name as RegexesKeys]",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/matcher/repeat/matching.ts||packages/libraries/main/src/matcher/repeat/matching.ts": [
          "File: packages/libraries/main/src/matcher/repeat/matching.ts -> packages/libraries/main/src/matcher/repeat/matching.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import Scoring from '../../scoring'",
          "3: import Matching from '../../Matching'",
          "4: import { Options } from '../../Options'",
          "",
          "[Removed Lines]",
          "1: import { RepeatMatch } from '../../types'",
          "6: interface RepeatMatchOptions {",
          "7:   password: string",
          "8:   omniMatch: Matching",
          "9: }",
          "",
          "[Added Lines]",
          "1: import { MatchOptions, RepeatMatch } from '../../types'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:   }",
          "24:     const matches: (RepeatMatch | Promise<RepeatMatch>)[] = []",
          "25:     let lastIndex = 0",
          "26:     while (lastIndex < password.length) {",
          "",
          "[Removed Lines]",
          "23:   match({ password, omniMatch }: RepeatMatchOptions) {",
          "",
          "[Added Lines]",
          "19:   match({ password, omniMatch }: MatchOptions) {",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/matcher/separator/matching.ts||packages/libraries/main/src/matcher/separator/matching.ts": [
          "File: packages/libraries/main/src/matcher/separator/matching.ts -> packages/libraries/main/src/matcher/separator/matching.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { SEPERATOR_CHARS } from '../../data/const'",
          "3: import { Options } from '../../Options'",
          "9: const separatorRegex = new RegExp(`[${SEPERATOR_CHARS.join('')}]`)",
          "",
          "[Removed Lines]",
          "2: import { SeparatorMatch } from '../../types'",
          "5: interface SeparatorMatchOptions {",
          "6:   password: string",
          "7: }",
          "",
          "[Added Lines]",
          "2: import { MatchOptions, SeparatorMatch } from '../../types'",
          "5: type SeparatorMatchOptions = Pick<MatchOptions, 'password'>",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/matcher/sequence/matching.ts||packages/libraries/main/src/matcher/sequence/matching.ts": [
          "File: packages/libraries/main/src/matcher/sequence/matching.ts -> packages/libraries/main/src/matcher/sequence/matching.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ALL_UPPER, ALL_LOWER, ALL_DIGIT } from '../../data/const'",
          "3: import { Options } from '../../Options'",
          "5: type UpdateParams = {",
          "",
          "[Removed Lines]",
          "2: import { SequenceMatch } from '../../types'",
          "",
          "[Added Lines]",
          "2: import { MatchOptions, SequenceMatch } from '../../types'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:   result: any[]",
          "11: }",
          "",
          "[Removed Lines]",
          "13: interface SequenceMatchOptions {",
          "14:   password: string",
          "15: }",
          "",
          "[Added Lines]",
          "13: type SequenceMatchOptions = Pick<MatchOptions, 'password'>",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/matcher/spatial/matching.ts||packages/libraries/main/src/matcher/spatial/matching.ts": [
          "File: packages/libraries/main/src/matcher/spatial/matching.ts -> packages/libraries/main/src/matcher/spatial/matching.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { sorted, extend } from '../../utils/helper'",
          "2: import { Options } from '../../Options'",
          "",
          "[Removed Lines]",
          "3: import { LooseObject, SpatialMatch } from '../../types'",
          "5: interface SpatialMatchOptions {",
          "6:   password: string",
          "7: }",
          "",
          "[Added Lines]",
          "3: import { LooseObject, MatchOptions, SpatialMatch } from '../../types'",
          "5: type SpatialMatchOptions = Pick<MatchOptions, 'password'>",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/types.ts||packages/libraries/main/src/types.ts": [
          "File: packages/libraries/main/src/types.ts -> packages/libraries/main/src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:   options: Options,",
          "232: ) => number | DictionaryReturn",
          "234: export interface MatchOptions {",
          "235:   password: string",
          "239:   omniMatch: Matching",
          "240: }",
          "242: export type MatchingType = new (options: Options) => {",
          "243:   match({",
          "244:     password,",
          "245:     omniMatch,",
          "246:   }: MatchOptions): MatchExtended[] | Promise<MatchExtended[]>",
          "247: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234: export interface UserInputsOptions {",
          "235:   rankedDictionary: RankedDictionary",
          "236:   rankedDictionaryMaxWordSize: number",
          "237: }",
          "244:   userInputsOptions?: UserInputsOptions",
          "251:     userInputsOptions,",
          "",
          "---------------"
        ],
        "packages/libraries/main/src/utils/mergeUserInputDictionary.ts||packages/libraries/main/src/utils/mergeUserInputDictionary.ts": [
          "File: packages/libraries/main/src/utils/mergeUserInputDictionary.ts -> packages/libraries/main/src/utils/mergeUserInputDictionary.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { RankedDictionaries, UserInputsOptions } from '../types'",
          "3: export default (",
          "4:   optionsRankedDictionaries: RankedDictionaries,",
          "5:   optionsRankedDictionariesMaxWordSize: Record<string, number>,",
          "6:   userInputsOptions?: UserInputsOptions,",
          "7: ) => {",
          "8:   const rankedDictionaries = {",
          "9:     ...optionsRankedDictionaries,",
          "10:   }",
          "11:   const rankedDictionariesMaxWordSize = {",
          "12:     ...optionsRankedDictionariesMaxWordSize,",
          "13:   }",
          "14:   if (!userInputsOptions) {",
          "15:     return {",
          "16:       rankedDictionaries,",
          "17:       rankedDictionariesMaxWordSize,",
          "18:     }",
          "19:   }",
          "21:   if (rankedDictionaries.userInputs) {",
          "22:     const isWordSizeBigger =",
          "23:       rankedDictionariesMaxWordSize.userInputs <",
          "24:       userInputsOptions.rankedDictionaryMaxWordSize",
          "26:     rankedDictionaries.userInputs = {",
          "27:       ...rankedDictionaries.userInputs,",
          "28:       ...userInputsOptions.rankedDictionary,",
          "29:     }",
          "31:     rankedDictionariesMaxWordSize.userInputs = isWordSizeBigger",
          "32:       ? userInputsOptions.rankedDictionaryMaxWordSize",
          "33:       : rankedDictionariesMaxWordSize.userInputs",
          "34:   } else {",
          "35:     rankedDictionaries.userInputs = userInputsOptions.rankedDictionary",
          "36:     rankedDictionariesMaxWordSize.userInputs =",
          "37:       userInputsOptions.rankedDictionaryMaxWordSize",
          "38:   }",
          "40:   return {",
          "41:     rankedDictionaries,",
          "42:     rankedDictionariesMaxWordSize,",
          "43:   }",
          "44: }",
          "",
          "---------------"
        ],
        "packages/libraries/main/test/options.spec.ts||packages/libraries/main/test/options.spec.ts": [
          "File: packages/libraries/main/test/options.spec.ts -> packages/libraries/main/test/options.spec.ts"
        ],
        "packages/libraries/main/test/scoring/guesses/calc.spec.ts||packages/libraries/main/test/scoring/guesses/calc.spec.ts": [
          "File: packages/libraries/main/test/scoring/guesses/calc.spec.ts -> packages/libraries/main/test/scoring/guesses/calc.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:       day: 14,",
          "33:       guesses: dateGuesses(match),",
          "35:     })",
          "36:   })",
          "37: })",
          "",
          "[Removed Lines]",
          "34:       guessesLog10: 4.225050696138048,",
          "",
          "[Added Lines]",
          "34:       guessesLog10: 4.234390722392192,",
          "",
          "---------------"
        ],
        "packages/libraries/pwned/src/matching.ts||packages/libraries/pwned/src/matching.ts": [
          "File: packages/libraries/pwned/src/matching.ts -> packages/libraries/pwned/src/matching.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import haveIBeenPwned from './haveIBeenPwned'",
          "4: import { FetchApi, MatcherPwnedFactoryConfig } from './types'",
          "",
          "[Removed Lines]",
          "2: import { MatchExtended, MatchOptions, Options } from '@zxcvbn-ts/core'",
          "",
          "[Added Lines]",
          "2: import { MatchExtended, MatchOptions } from '@zxcvbn-ts/core'",
          "",
          "---------------"
        ]
      }
    }
  ]
}