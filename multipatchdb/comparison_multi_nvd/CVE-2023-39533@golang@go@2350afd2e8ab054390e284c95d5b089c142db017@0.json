{
  "cve_id": "CVE-2023-39533",
  "cve_desc": "go-libp2p is the Go implementation of the libp2p Networking Stack. Prior to versions 0.27.8, 0.28.2, and 0.29.1 malicious peer can use large RSA keys to run a resource exhaustion attack & force a node to spend time doing signature verification of the large key. This vulnerability is present in the core/crypto module of go-libp2p and can occur during the Noise handshake and the libp2p x509 extension verification step. To prevent this attack, go-libp2p versions 0.27.8, 0.28.2, and 0.29.1 restrict RSA keys to <= 8192 bits. To protect one's application, it is necessary to update to these patch releases and to use the updated Go compiler in 1.20.7 or 1.19.12. There are no known workarounds for this issue.",
  "repo": "golang/go",
  "patch_hash": "2350afd2e8ab054390e284c95d5b089c142db017",
  "patch_info": {
    "commit_hash": "2350afd2e8ab054390e284c95d5b089c142db017",
    "repo": "golang/go",
    "commit_url": "https://github.com/golang/go/commit/2350afd2e8ab054390e284c95d5b089c142db017",
    "files": [
      "src/crypto/tls/handshake_client.go",
      "src/crypto/tls/handshake_client_test.go",
      "src/crypto/tls/handshake_server.go"
    ],
    "message": "crypto/tls: restrict RSA keys in certificates to <= 8192 bits\n\nExtremely large RSA keys in certificate chains can cause a client/server\nto expend significant CPU time verifying signatures. Limit this by\nrestricting the size of RSA keys transmitted during handshakes to <=\n8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only\nthree certificates in circulation with keys larger than this, and all\nthree appear to be test certificates that are not actively deployed. It\nis possible there are larger keys in use in private PKIs, but we target\nthe web PKI, so causing breakage here in the interests of increasing the\ndefault safety of users of crypto/tls seems reasonable.\n\nThanks to Mateusz Poliwczak for reporting this issue.\n\nFixes #61460\nFixes CVE-2023-29409\n\nChange-Id: Ie35038515a649199a36a12fc2c5df3af855dca6c\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/1912161\nReviewed-by: Damien Neil <dneil@google.com>\nReviewed-by: Tatiana Bradley <tatianabradley@google.com>\nRun-TryBot: Roland Shoemaker <bracewell@google.com>\nReviewed-on: https://go-review.googlesource.com/c/go/+/515257\nTryBot-Result: Gopher Robot <gobot@golang.org>\nAuto-Submit: David Chase <drchase@google.com>\nRun-TryBot: David Chase <drchase@google.com>",
    "before_after_code_files": [
      "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
      "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go",
      "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go"
    ]
  },
  "patch_diff": {
    "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go": [
      "File: src/crypto/tls/handshake_client.go -> src/crypto/tls/handshake_client.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "936:  return nil",
      "937: }",
      "941: func (c *Conn) verifyServerCertificate(certificates [][]byte) error {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "941: const maxRSAKeySize = 8192",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "947:    c.sendAlert(alertBadCertificate)",
      "948:    return errors.New(\"tls: failed to parse certificate from server: \" + err.Error())",
      "949:   }",
      "950:   activeHandles[i] = cert",
      "951:   certs[i] = cert.cert",
      "952:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "954:   if cert.cert.PublicKeyAlgorithm == x509.RSA && cert.cert.PublicKey.(*rsa.PublicKey).N.BitLen() > maxRSAKeySize {",
      "955:    c.sendAlert(alertBadCertificate)",
      "956:    return fmt.Errorf(\"tls: server sent certificate containing RSA key larger than %d bits\", maxRSAKeySize)",
      "957:   }",
      "",
      "---------------"
    ],
    "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go": [
      "File: src/crypto/tls/handshake_client_test.go -> src/crypto/tls/handshake_client_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "2721:   t.Fatalf(\"handshake failed: %s\", err)",
      "2722:  }",
      "2723: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2726: type discardConn struct {",
      "2727:  net.Conn",
      "2728: }",
      "2730: func (dc *discardConn) Write(data []byte) (int, error) {",
      "2731:  return len(data), nil",
      "2732: }",
      "2735: const largeRSAKeyCertPEM = `-----BEGIN CERTIFICATE-----",
      "2736: MIIInjCCBIWgAwIBAgIBAjANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQDEwd0ZXN0",
      "2737: aW5nMB4XDTIzMDYwNzIxMjMzNloXDTIzMDYwNzIzMjMzNlowEjEQMA4GA1UEAxMH",
      "2738: dGVzdGluZzCCBCIwDQYJKoZIhvcNAQEBBQADggQPADCCBAoCggQBAWdHsf6Rh2Ca",
      "2739: n2SQwn4t4OQrOjbLLdGE1pM6TBKKrHUFy62uEL8atNjlcfXIsa4aEu3xNGiqxqur",
      "2740: ZectlkZbm0FkaaQ1Wr9oikDY3KfjuaXdPdO/XC/h8AKNxlDOylyXwUSK/CuYb+1j",
      "2741: gy8yF5QFvVfwW/xwTlHmhUeSkVSQPosfQ6yXNNsmMzkd+ZPWLrfq4R+wiNtwYGu0",
      "2742: WSBcI/M9o8/vrNLnIppoiBJJ13j9CR1ToEAzOFh9wwRWLY10oZhoh1ONN1KQURx4",
      "2743: qedzvvP2DSjZbUccdvl2rBGvZpzfOiFdm1FCnxB0c72Cqx+GTHXBFf8bsa7KHky9",
      "2744: sNO1GUanbq17WoDNgwbY6H51bfShqv0CErxatwWox3we4EcAmFHPVTCYL1oWVMGo",
      "2745: a3Eth91NZj+b/nGhF9lhHKGzXSv9brmLLkfvM1jA6XhNhA7BQ5Vz67lj2j3XfXdh",
      "2746: t/BU5pBXbL4Ut4mIhT1YnKXAjX2/LF5RHQTE8Vwkx5JAEKZyUEGOReD/B+7GOrLp",
      "2747: HduMT9vZAc5aR2k9I8qq1zBAzsL69lyQNAPaDYd1BIAjUety9gAYaSQffCgAgpRO",
      "2748: Gt+DYvxS+7AT/yEd5h74MU2AH7KrAkbXOtlwupiGwhMVTstncDJWXMJqbBhyHPF8",
      "2749: 3UmZH0hbL4PYmzSj9LDWQQXI2tv6vrCpfts3Cqhqxz9vRpgY7t1Wu6l/r+KxYYz3",
      "2750: 1pcGpPvRmPh0DJm7cPTiXqPnZcPt+ulSaSdlxmd19OnvG5awp0fXhxryZVwuiT8G",
      "2751: VDkhyARrxYrdjlINsZJZbQjO0t8ketXAELJOnbFXXzeCOosyOHkLwsqOO96AVJA8",
      "2752: 45ZVL5m95ClGy0RSrjVIkXsxTAMVG6SPAqKwk6vmTdRGuSPS4rhgckPVDHmccmuq",
      "2753: dfnT2YkX+wB2/M3oCgU+s30fAHGkbGZ0pCdNbFYFZLiH0iiMbTDl/0L/z7IdK0nH",
      "2754: GLHVE7apPraKC6xl6rPWsD2iSfrmtIPQa0+rqbIVvKP5JdfJ8J4alI+OxFw/znQe",
      "2755: V0/Rez0j22Fe119LZFFSXhRv+ZSvcq20xDwh00mzcumPWpYuCVPozA18yIhC9tNn",
      "2756: ALHndz0tDseIdy9vC71jQWy9iwri3ueN0DekMMF8JGzI1Z6BAFzgyAx3DkHtwHg7",
      "2757: B7qD0jPG5hJ5+yt323fYgJsuEAYoZ8/jzZ01pkX8bt+UsVN0DGnSGsI2ktnIIk3J",
      "2758: l+8krjmUy6EaW79nITwoOqaeHOIp8m3UkjEcoKOYrzHRKqRy+A09rY+m/cAQaafW",
      "2759: 4xp0Zv7qZPLwnu0jsqB4jD8Ll9yPB02ndsoV6U5PeHzTkVhPml19jKUAwFfs7TJg",
      "2760: kXy+/xFhYVUCAwEAATANBgkqhkiG9w0BAQsFAAOCBAIAAQnZY77pMNeypfpba2WK",
      "2761: aDasT7dk2JqP0eukJCVPTN24Zca+xJNPdzuBATm/8SdZK9lddIbjSnWRsKvTnO2r",
      "2762: /rYdlPf3jM5uuJtb8+Uwwe1s+gszelGS9G/lzzq+ehWicRIq2PFcs8o3iQMfENiv",
      "2763: qILJ+xjcrvms5ZPDNahWkfRx3KCg8Q+/at2n5p7XYjMPYiLKHnDC+RE2b1qT20IZ",
      "2764: FhuK/fTWLmKbfYFNNga6GC4qcaZJ7x0pbm4SDTYp0tkhzcHzwKhidfNB5J2vNz6l",
      "2765: Ur6wiYwamFTLqcOwWo7rdvI+sSn05WQBv0QZlzFX+OAu0l7WQ7yU+noOxBhjvHds",
      "2766: 14+r9qcQZg2q9kG+evopYZqYXRUNNlZKo9MRBXhfrISulFAc5lRFQIXMXnglvAu+",
      "2767: Ipz2gomEAOcOPNNVldhKAU94GAMJd/KfN0ZP7gX3YvPzuYU6XDhag5RTohXLm18w",
      "2768: 5AF+ES3DOQ6ixu3DTf0D+6qrDuK+prdX8ivcdTQVNOQ+MIZeGSc6NWWOTaMGJ3lg",
      "2769: aZIxJUGdo6E7GBGiC1YTjgFKFbHzek1LRTh/LX3vbSudxwaG0HQxwsU9T4DWiMqa",
      "2770: Fkf2KteLEUA6HrR+0XlAZrhwoqAmrJ+8lCFX3V0gE9lpENfVHlFXDGyx10DpTB28",
      "2771: DdjnY3F7EPWNzwf9P3oNT69CKW3Bk6VVr3ROOJtDxVu1ioWo3TaXltQ0VOnap2Pu",
      "2772: sa5wfrpfwBDuAS9JCDg4ttNp2nW3F7tgXC6xPqw5pvGwUppEw9XNrqV8TZrxduuv",
      "2773: rQ3NyZ7KSzIpmFlD3UwV/fGfz3UQmHS6Ng1evrUID9DjfYNfRqSGIGjDfxGtYD+j",
      "2774: Z1gLJZuhjJpNtwBkKRtlNtrCWCJK2hidK/foxwD7kwAPo2I9FjpltxCRywZUs07X",
      "2775: KwXTfBR9v6ij1LV6K58hFS+8ezZyZ05CeVBFkMQdclTOSfuPxlMkQOtjp8QWDj+F",
      "2776: j/MYziT5KBkHvcbrjdRtUJIAi4N7zCsPZtjik918AK1WBNRVqPbrgq/XSEXMfuvs",
      "2777: 6JbfK0B76vdBDRtJFC1JsvnIrGbUztxXzyQwFLaR/AjVJqpVlysLWzPKWVX6/+SJ",
      "2778: u1NQOl2E8P6ycyBsuGnO89p0S4F8cMRcI2X1XQsZ7/q0NBrOMaEp5T3SrWo9GiQ3",
      "2779: o2SBdbs3Y6MBPBtTu977Z/0RO63J3M5i2tjUiDfrFy7+VRLKr7qQ7JibohyB8QaR",
      "2780: 9tedgjn2f+of7PnP/PEl1cCphUZeHM7QKUMPT8dbqwmKtlYY43EHXcvNOT5IBk3X",
      "2781: 9lwJoZk/B2i+ZMRNSP34ztAwtxmasPt6RAWGQpWCn9qmttAHAnMfDqe7F7jVR6rS",
      "2782: u58=",
      "2783: -----END CERTIFICATE-----`",
      "2785: func TestHandshakeRSATooBig(t *testing.T) {",
      "2786:  testCert, _ := pem.Decode([]byte(largeRSAKeyCertPEM))",
      "2788:  c := &Conn{conn: &discardConn{}, config: testConfig.Clone()}",
      "2790:  expectedErr := \"tls: server sent certificate containing RSA key larger than 8192 bits\"",
      "2791:  err := c.verifyServerCertificate([][]byte{testCert.Bytes})",
      "2792:  if err == nil || err.Error() != expectedErr {",
      "2793:   t.Errorf(\"Conn.verifyServerCertificate unexpected error: want %q, got %q\", expectedErr, err)",
      "2794:  }",
      "2796:  expectedErr = \"tls: client sent certificate containing RSA key larger than 8192 bits\"",
      "2797:  err = c.processCertsFromClient(Certificate{Certificate: [][]byte{testCert.Bytes}})",
      "2798:  if err == nil || err.Error() != expectedErr {",
      "2799:   t.Errorf(\"Conn.processCertsFromClient unexpected error: want %q, got %q\", expectedErr, err)",
      "2800:  }",
      "2801: }",
      "",
      "---------------"
    ],
    "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go": [
      "File: src/crypto/tls/handshake_server.go -> src/crypto/tls/handshake_server.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "864:    c.sendAlert(alertBadCertificate)",
      "865:    return errors.New(\"tls: failed to parse client certificate: \" + err.Error())",
      "866:   }",
      "867:  }",
      "869:  if len(certs) == 0 && requiresClientCert(c.config.ClientAuth) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "867:   if certs[i].PublicKeyAlgorithm == x509.RSA && certs[i].PublicKey.(*rsa.PublicKey).N.BitLen() > maxRSAKeySize {",
      "868:    c.sendAlert(alertBadCertificate)",
      "869:    return fmt.Errorf(\"tls: client sent certificate containing RSA key larger than %d bits\", maxRSAKeySize)",
      "870:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "162469b3cfbaac12b74100e80ccd3c6dd0126233",
      "candidate_info": {
        "commit_hash": "162469b3cfbaac12b74100e80ccd3c6dd0126233",
        "repo": "golang/go",
        "commit_url": "https://github.com/golang/go/commit/162469b3cfbaac12b74100e80ccd3c6dd0126233",
        "files": [
          "doc/godebug.md",
          "src/crypto/tls/conn.go",
          "src/crypto/tls/handshake_client.go",
          "src/crypto/tls/handshake_server.go",
          "src/internal/godebugs/table.go",
          "src/runtime/metrics/doc.go"
        ],
        "message": "crypto/tls: add GODEBUG to control max RSA key size\n\nAdd a new GODEBUG setting, tlsmaxrsasize, which allows controlling the\nmaximum RSA key size we will accept during TLS handshakes.\n\nChange-Id: I52f060be132014d219f4cd438f59990011a35c96\nReviewed-on: https://go-review.googlesource.com/c/go/+/517495\nAuto-Submit: Roland Shoemaker <roland@golang.org>\nReviewed-by: Russ Cox <rsc@golang.org>\nRun-TryBot: Roland Shoemaker <roland@golang.org>\nTryBot-Result: Gopher Robot <gobot@golang.org>",
        "before_after_code_files": [
          "src/crypto/tls/conn.go||src/crypto/tls/conn.go",
          "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
          "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go",
          "src/internal/godebugs/table.go||src/internal/godebugs/table.go",
          "src/runtime/metrics/doc.go||src/runtime/metrics/doc.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
            "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go"
          ],
          "candidate": [
            "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
            "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/tls/conn.go||src/crypto/tls/conn.go": [
          "File: src/crypto/tls/conn.go -> src/crypto/tls/conn.go"
        ],
        "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go": [
          "File: src/crypto/tls/handshake_client.go -> src/crypto/tls/handshake_client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  \"errors\"",
          "18:  \"fmt\"",
          "19:  \"hash\"",
          "20:  \"io\"",
          "21:  \"net\"",
          "22:  \"strings\"",
          "23:  \"time\"",
          "24: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:  \"internal/godebug\"",
          "23:  \"strconv\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "936:  return nil",
          "937: }",
          "",
          "[Removed Lines]",
          "941: const maxRSAKeySize = 8192",
          "",
          "[Added Lines]",
          "943: const defaultMaxRSAKeySize = 8192",
          "945: var tlsmaxrsasize = godebug.New(\"tlsmaxrsasize\")",
          "947: func checkKeySize(n int) (max int, ok bool) {",
          "948:  if v := tlsmaxrsasize.Value(); v != \"\" {",
          "949:   if max, err := strconv.Atoi(v); err == nil {",
          "950:    if (n <= max) != (n <= defaultMaxRSAKeySize) {",
          "951:     tlsmaxrsasize.IncNonDefault()",
          "952:    }",
          "953:    return max, n <= max",
          "954:   }",
          "955:  }",
          "956:  return defaultMaxRSAKeySize, n <= defaultMaxRSAKeySize",
          "957: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "951:    c.sendAlert(alertBadCertificate)",
          "952:    return errors.New(\"tls: failed to parse certificate from server: \" + err.Error())",
          "953:   }",
          "957:   }",
          "958:   activeHandles[i] = cert",
          "959:   certs[i] = cert.cert",
          "",
          "[Removed Lines]",
          "954:   if cert.cert.PublicKeyAlgorithm == x509.RSA && cert.cert.PublicKey.(*rsa.PublicKey).N.BitLen() > maxRSAKeySize {",
          "955:    c.sendAlert(alertBadCertificate)",
          "956:    return fmt.Errorf(\"tls: server sent certificate containing RSA key larger than %d bits\", maxRSAKeySize)",
          "",
          "[Added Lines]",
          "970:   if cert.cert.PublicKeyAlgorithm == x509.RSA {",
          "971:    n := cert.cert.PublicKey.(*rsa.PublicKey).N.BitLen()",
          "972:    if max, ok := checkKeySize(n); !ok {",
          "973:     c.sendAlert(alertBadCertificate)",
          "974:     return fmt.Errorf(\"tls: server sent certificate containing RSA key larger than %d bits\", max)",
          "975:    }",
          "",
          "---------------"
        ],
        "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go": [
          "File: src/crypto/tls/handshake_server.go -> src/crypto/tls/handshake_server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:    c.sendAlert(alertBadCertificate)",
          "865:    return errors.New(\"tls: failed to parse client certificate: \" + err.Error())",
          "866:   }",
          "870:   }",
          "871:  }",
          "",
          "[Removed Lines]",
          "867:   if certs[i].PublicKeyAlgorithm == x509.RSA && certs[i].PublicKey.(*rsa.PublicKey).N.BitLen() > maxRSAKeySize {",
          "868:    c.sendAlert(alertBadCertificate)",
          "869:    return fmt.Errorf(\"tls: client sent certificate containing RSA key larger than %d bits\", maxRSAKeySize)",
          "",
          "[Added Lines]",
          "867:   if certs[i].PublicKeyAlgorithm == x509.RSA {",
          "868:    n := certs[i].PublicKey.(*rsa.PublicKey).N.BitLen()",
          "869:    if max, ok := checkKeySize(n); !ok {",
          "870:     c.sendAlert(alertBadCertificate)",
          "871:     return fmt.Errorf(\"tls: client sent certificate containing RSA key larger than %d bits\", max)",
          "872:    }",
          "",
          "---------------"
        ],
        "src/internal/godebugs/table.go||src/internal/godebugs/table.go": [
          "File: src/internal/godebugs/table.go -> src/internal/godebugs/table.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  {Name: \"panicnil\", Package: \"runtime\", Changed: 21, Old: \"1\"},",
          "43:  {Name: \"randautoseed\", Package: \"math/rand\"},",
          "44:  {Name: \"tarinsecurepath\", Package: \"archive/tar\"},",
          "45:  {Name: \"x509sha1\", Package: \"crypto/x509\"},",
          "46:  {Name: \"x509usefallbackroots\", Package: \"crypto/x509\"},",
          "47:  {Name: \"zipinsecurepath\", Package: \"archive/zip\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:  {Name: \"tlsmaxrsasize\", Package: \"crypto/tls\"},",
          "",
          "---------------"
        ],
        "src/runtime/metrics/doc.go||src/runtime/metrics/doc.go": [
          "File: src/runtime/metrics/doc.go -> src/runtime/metrics/doc.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:   package due to a non-default GODEBUG=tarinsecurepath=...",
          "291:   setting.",
          "293:  /godebug/non-default-behavior/x509sha1:events",
          "294:   The number of non-default behaviors executed by the crypto/x509",
          "295:   package due to a non-default GODEBUG=x509sha1=... setting.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:  /godebug/non-default-behavior/tlsmaxrsasize:events",
          "294:   The number of non-default behaviors executed by the crypto/tls",
          "295:   package due to a non-default GODEBUG=tlsmaxrsasize=... setting.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "659f2a22076713bd2500adc82e026b6a746d8ba1",
      "candidate_info": {
        "commit_hash": "659f2a22076713bd2500adc82e026b6a746d8ba1",
        "repo": "golang/go",
        "commit_url": "https://github.com/golang/go/commit/659f2a22076713bd2500adc82e026b6a746d8ba1",
        "files": [
          "src/crypto/tls/handshake_client.go",
          "src/crypto/tls/handshake_client_test.go",
          "src/crypto/tls/handshake_server.go"
        ],
        "message": "[release-branch.go1.20] crypto/tls: restrict RSA keys in certificates to <= 8192 bits\n\nExtremely large RSA keys in certificate chains can cause a client/server\nto expend significant CPU time verifying signatures. Limit this by\nrestricting the size of RSA keys transmitted during handshakes to <=\n8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only\nthree certificates in circulation with keys larger than this, and all\nthree appear to be test certificates that are not actively deployed. It\nis possible there are larger keys in use in private PKIs, but we target\nthe web PKI, so causing breakage here in the interests of increasing the\ndefault safety of users of crypto/tls seems reasonable.\n\nThanks to Mateusz Poliwczak for reporting this issue.\n\nUpdates #61460\nFixes #61580\nFixes CVE-2023-29409\n\nChange-Id: Ie35038515a649199a36a12fc2c5df3af855dca6c\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/1912161\nReviewed-by: Damien Neil <dneil@google.com>\nReviewed-by: Tatiana Bradley <tatianabradley@google.com>\nRun-TryBot: Roland Shoemaker <bracewell@google.com>\n(cherry picked from commit d865c715d92887361e4bd5596e19e513f27781b7)\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/1965747\nTryBot-Result: Security TryBots <security-trybots@go-security-trybots.iam.gserviceaccount.com>\nReviewed-on: https://go-review.googlesource.com/c/go/+/514900\nRun-TryBot: David Chase <drchase@google.com>\nReviewed-by: Matthew Dempsky <mdempsky@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>",
        "before_after_code_files": [
          "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
          "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go",
          "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
            "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go",
            "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go"
          ],
          "candidate": [
            "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
            "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go",
            "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go": [
          "File: src/crypto/tls/handshake_client.go -> src/crypto/tls/handshake_client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "857:  return nil",
          "858: }",
          "862: func (c *Conn) verifyServerCertificate(certificates [][]byte) error {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "862: const maxRSAKeySize = 8192",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "868:    c.sendAlert(alertBadCertificate)",
          "869:    return errors.New(\"tls: failed to parse certificate from server: \" + err.Error())",
          "870:   }",
          "871:   activeHandles[i] = cert",
          "872:   certs[i] = cert.cert",
          "873:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "875:   if cert.cert.PublicKeyAlgorithm == x509.RSA && cert.cert.PublicKey.(*rsa.PublicKey).N.BitLen() > maxRSAKeySize {",
          "876:    c.sendAlert(alertBadCertificate)",
          "877:    return fmt.Errorf(\"tls: server sent certificate containing RSA key larger than %d bits\", maxRSAKeySize)",
          "878:   }",
          "",
          "---------------"
        ],
        "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go": [
          "File: src/crypto/tls/handshake_client_test.go -> src/crypto/tls/handshake_client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2616:   t.Error(\"Client connection was not closed when the context was canceled\")",
          "2617:  }",
          "2618: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2621: type discardConn struct {",
          "2622:  net.Conn",
          "2623: }",
          "2625: func (dc *discardConn) Write(data []byte) (int, error) {",
          "2626:  return len(data), nil",
          "2627: }",
          "2630: const largeRSAKeyCertPEM = `-----BEGIN CERTIFICATE-----",
          "2631: MIIInjCCBIWgAwIBAgIBAjANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQDEwd0ZXN0",
          "2632: aW5nMB4XDTIzMDYwNzIxMjMzNloXDTIzMDYwNzIzMjMzNlowEjEQMA4GA1UEAxMH",
          "2633: dGVzdGluZzCCBCIwDQYJKoZIhvcNAQEBBQADggQPADCCBAoCggQBAWdHsf6Rh2Ca",
          "2634: n2SQwn4t4OQrOjbLLdGE1pM6TBKKrHUFy62uEL8atNjlcfXIsa4aEu3xNGiqxqur",
          "2635: ZectlkZbm0FkaaQ1Wr9oikDY3KfjuaXdPdO/XC/h8AKNxlDOylyXwUSK/CuYb+1j",
          "2636: gy8yF5QFvVfwW/xwTlHmhUeSkVSQPosfQ6yXNNsmMzkd+ZPWLrfq4R+wiNtwYGu0",
          "2637: WSBcI/M9o8/vrNLnIppoiBJJ13j9CR1ToEAzOFh9wwRWLY10oZhoh1ONN1KQURx4",
          "2638: qedzvvP2DSjZbUccdvl2rBGvZpzfOiFdm1FCnxB0c72Cqx+GTHXBFf8bsa7KHky9",
          "2639: sNO1GUanbq17WoDNgwbY6H51bfShqv0CErxatwWox3we4EcAmFHPVTCYL1oWVMGo",
          "2640: a3Eth91NZj+b/nGhF9lhHKGzXSv9brmLLkfvM1jA6XhNhA7BQ5Vz67lj2j3XfXdh",
          "2641: t/BU5pBXbL4Ut4mIhT1YnKXAjX2/LF5RHQTE8Vwkx5JAEKZyUEGOReD/B+7GOrLp",
          "2642: HduMT9vZAc5aR2k9I8qq1zBAzsL69lyQNAPaDYd1BIAjUety9gAYaSQffCgAgpRO",
          "2643: Gt+DYvxS+7AT/yEd5h74MU2AH7KrAkbXOtlwupiGwhMVTstncDJWXMJqbBhyHPF8",
          "2644: 3UmZH0hbL4PYmzSj9LDWQQXI2tv6vrCpfts3Cqhqxz9vRpgY7t1Wu6l/r+KxYYz3",
          "2645: 1pcGpPvRmPh0DJm7cPTiXqPnZcPt+ulSaSdlxmd19OnvG5awp0fXhxryZVwuiT8G",
          "2646: VDkhyARrxYrdjlINsZJZbQjO0t8ketXAELJOnbFXXzeCOosyOHkLwsqOO96AVJA8",
          "2647: 45ZVL5m95ClGy0RSrjVIkXsxTAMVG6SPAqKwk6vmTdRGuSPS4rhgckPVDHmccmuq",
          "2648: dfnT2YkX+wB2/M3oCgU+s30fAHGkbGZ0pCdNbFYFZLiH0iiMbTDl/0L/z7IdK0nH",
          "2649: GLHVE7apPraKC6xl6rPWsD2iSfrmtIPQa0+rqbIVvKP5JdfJ8J4alI+OxFw/znQe",
          "2650: V0/Rez0j22Fe119LZFFSXhRv+ZSvcq20xDwh00mzcumPWpYuCVPozA18yIhC9tNn",
          "2651: ALHndz0tDseIdy9vC71jQWy9iwri3ueN0DekMMF8JGzI1Z6BAFzgyAx3DkHtwHg7",
          "2652: B7qD0jPG5hJ5+yt323fYgJsuEAYoZ8/jzZ01pkX8bt+UsVN0DGnSGsI2ktnIIk3J",
          "2653: l+8krjmUy6EaW79nITwoOqaeHOIp8m3UkjEcoKOYrzHRKqRy+A09rY+m/cAQaafW",
          "2654: 4xp0Zv7qZPLwnu0jsqB4jD8Ll9yPB02ndsoV6U5PeHzTkVhPml19jKUAwFfs7TJg",
          "2655: kXy+/xFhYVUCAwEAATANBgkqhkiG9w0BAQsFAAOCBAIAAQnZY77pMNeypfpba2WK",
          "2656: aDasT7dk2JqP0eukJCVPTN24Zca+xJNPdzuBATm/8SdZK9lddIbjSnWRsKvTnO2r",
          "2657: /rYdlPf3jM5uuJtb8+Uwwe1s+gszelGS9G/lzzq+ehWicRIq2PFcs8o3iQMfENiv",
          "2658: qILJ+xjcrvms5ZPDNahWkfRx3KCg8Q+/at2n5p7XYjMPYiLKHnDC+RE2b1qT20IZ",
          "2659: FhuK/fTWLmKbfYFNNga6GC4qcaZJ7x0pbm4SDTYp0tkhzcHzwKhidfNB5J2vNz6l",
          "2660: Ur6wiYwamFTLqcOwWo7rdvI+sSn05WQBv0QZlzFX+OAu0l7WQ7yU+noOxBhjvHds",
          "2661: 14+r9qcQZg2q9kG+evopYZqYXRUNNlZKo9MRBXhfrISulFAc5lRFQIXMXnglvAu+",
          "2662: Ipz2gomEAOcOPNNVldhKAU94GAMJd/KfN0ZP7gX3YvPzuYU6XDhag5RTohXLm18w",
          "2663: 5AF+ES3DOQ6ixu3DTf0D+6qrDuK+prdX8ivcdTQVNOQ+MIZeGSc6NWWOTaMGJ3lg",
          "2664: aZIxJUGdo6E7GBGiC1YTjgFKFbHzek1LRTh/LX3vbSudxwaG0HQxwsU9T4DWiMqa",
          "2665: Fkf2KteLEUA6HrR+0XlAZrhwoqAmrJ+8lCFX3V0gE9lpENfVHlFXDGyx10DpTB28",
          "2666: DdjnY3F7EPWNzwf9P3oNT69CKW3Bk6VVr3ROOJtDxVu1ioWo3TaXltQ0VOnap2Pu",
          "2667: sa5wfrpfwBDuAS9JCDg4ttNp2nW3F7tgXC6xPqw5pvGwUppEw9XNrqV8TZrxduuv",
          "2668: rQ3NyZ7KSzIpmFlD3UwV/fGfz3UQmHS6Ng1evrUID9DjfYNfRqSGIGjDfxGtYD+j",
          "2669: Z1gLJZuhjJpNtwBkKRtlNtrCWCJK2hidK/foxwD7kwAPo2I9FjpltxCRywZUs07X",
          "2670: KwXTfBR9v6ij1LV6K58hFS+8ezZyZ05CeVBFkMQdclTOSfuPxlMkQOtjp8QWDj+F",
          "2671: j/MYziT5KBkHvcbrjdRtUJIAi4N7zCsPZtjik918AK1WBNRVqPbrgq/XSEXMfuvs",
          "2672: 6JbfK0B76vdBDRtJFC1JsvnIrGbUztxXzyQwFLaR/AjVJqpVlysLWzPKWVX6/+SJ",
          "2673: u1NQOl2E8P6ycyBsuGnO89p0S4F8cMRcI2X1XQsZ7/q0NBrOMaEp5T3SrWo9GiQ3",
          "2674: o2SBdbs3Y6MBPBtTu977Z/0RO63J3M5i2tjUiDfrFy7+VRLKr7qQ7JibohyB8QaR",
          "2675: 9tedgjn2f+of7PnP/PEl1cCphUZeHM7QKUMPT8dbqwmKtlYY43EHXcvNOT5IBk3X",
          "2676: 9lwJoZk/B2i+ZMRNSP34ztAwtxmasPt6RAWGQpWCn9qmttAHAnMfDqe7F7jVR6rS",
          "2677: u58=",
          "2678: -----END CERTIFICATE-----`",
          "2680: func TestHandshakeRSATooBig(t *testing.T) {",
          "2681:  testCert, _ := pem.Decode([]byte(largeRSAKeyCertPEM))",
          "2683:  c := &Conn{conn: &discardConn{}, config: testConfig.Clone()}",
          "2685:  expectedErr := \"tls: server sent certificate containing RSA key larger than 8192 bits\"",
          "2686:  err := c.verifyServerCertificate([][]byte{testCert.Bytes})",
          "2687:  if err == nil || err.Error() != expectedErr {",
          "2688:   t.Errorf(\"Conn.verifyServerCertificate unexpected error: want %q, got %q\", expectedErr, err)",
          "2689:  }",
          "2691:  expectedErr = \"tls: client sent certificate containing RSA key larger than 8192 bits\"",
          "2692:  err = c.processCertsFromClient(Certificate{Certificate: [][]byte{testCert.Bytes}})",
          "2693:  if err == nil || err.Error() != expectedErr {",
          "2694:   t.Errorf(\"Conn.processCertsFromClient unexpected error: want %q, got %q\", expectedErr, err)",
          "2695:  }",
          "2696: }",
          "",
          "---------------"
        ],
        "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go": [
          "File: src/crypto/tls/handshake_server.go -> src/crypto/tls/handshake_server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "818:    c.sendAlert(alertBadCertificate)",
          "819:    return errors.New(\"tls: failed to parse client certificate: \" + err.Error())",
          "820:   }",
          "821:  }",
          "823:  if len(certs) == 0 && requiresClientCert(c.config.ClientAuth) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "821:   if certs[i].PublicKeyAlgorithm == x509.RSA && certs[i].PublicKey.(*rsa.PublicKey).N.BitLen() > maxRSAKeySize {",
          "822:    c.sendAlert(alertBadCertificate)",
          "823:    return fmt.Errorf(\"tls: client sent certificate containing RSA key larger than %d bits\", maxRSAKeySize)",
          "824:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a51957fb0b20bb6c91d0415efca222cc9ecdb770",
      "candidate_info": {
        "commit_hash": "a51957fb0b20bb6c91d0415efca222cc9ecdb770",
        "repo": "golang/go",
        "commit_url": "https://github.com/golang/go/commit/a51957fb0b20bb6c91d0415efca222cc9ecdb770",
        "files": [
          "src/crypto/tls/handshake_client.go",
          "src/crypto/tls/handshake_client_test.go",
          "src/crypto/tls/handshake_server.go"
        ],
        "message": "[release-branch.go1.21] crypto/tls: restrict RSA keys in certificates to <= 8192 bits\n\nExtremely large RSA keys in certificate chains can cause a client/server\nto expend significant CPU time verifying signatures. Limit this by\nrestricting the size of RSA keys transmitted during handshakes to <=\n8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only\nthree certificates in circulation with keys larger than this, and all\nthree appear to be test certificates that are not actively deployed. It\nis possible there are larger keys in use in private PKIs, but we target\nthe web PKI, so causing breakage here in the interests of increasing the\ndefault safety of users of crypto/tls seems reasonable.\n\nThanks to Mateusz Poliwczak for reporting this issue.\n\nUpdates #61460\nFixes CVE-2023-29409\n\nChange-Id: Ie35038515a649199a36a12fc2c5df3af855dca6c\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/1912161\nReviewed-by: Damien Neil <dneil@google.com>\nReviewed-by: Tatiana Bradley <tatianabradley@google.com>\nRun-TryBot: Roland Shoemaker <bracewell@google.com>\n(cherry picked from commit d865c715d92887361e4bd5596e19e513f27781b7)\nReviewed-on: https://go-review.googlesource.com/c/go/+/515056\nRun-TryBot: David Chase <drchase@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>",
        "before_after_code_files": [
          "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
          "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go",
          "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
            "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go",
            "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go"
          ],
          "candidate": [
            "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
            "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go",
            "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go": [
          "File: src/crypto/tls/handshake_client.go -> src/crypto/tls/handshake_client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "936:  return nil",
          "937: }",
          "941: func (c *Conn) verifyServerCertificate(certificates [][]byte) error {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941: const maxRSAKeySize = 8192",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "947:    c.sendAlert(alertBadCertificate)",
          "948:    return errors.New(\"tls: failed to parse certificate from server: \" + err.Error())",
          "949:   }",
          "950:   activeHandles[i] = cert",
          "951:   certs[i] = cert.cert",
          "952:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "954:   if cert.cert.PublicKeyAlgorithm == x509.RSA && cert.cert.PublicKey.(*rsa.PublicKey).N.BitLen() > maxRSAKeySize {",
          "955:    c.sendAlert(alertBadCertificate)",
          "956:    return fmt.Errorf(\"tls: server sent certificate containing RSA key larger than %d bits\", maxRSAKeySize)",
          "957:   }",
          "",
          "---------------"
        ],
        "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go": [
          "File: src/crypto/tls/handshake_client_test.go -> src/crypto/tls/handshake_client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2721:   t.Fatalf(\"handshake failed: %s\", err)",
          "2722:  }",
          "2723: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2726: type discardConn struct {",
          "2727:  net.Conn",
          "2728: }",
          "2730: func (dc *discardConn) Write(data []byte) (int, error) {",
          "2731:  return len(data), nil",
          "2732: }",
          "2735: const largeRSAKeyCertPEM = `-----BEGIN CERTIFICATE-----",
          "2736: MIIInjCCBIWgAwIBAgIBAjANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQDEwd0ZXN0",
          "2737: aW5nMB4XDTIzMDYwNzIxMjMzNloXDTIzMDYwNzIzMjMzNlowEjEQMA4GA1UEAxMH",
          "2738: dGVzdGluZzCCBCIwDQYJKoZIhvcNAQEBBQADggQPADCCBAoCggQBAWdHsf6Rh2Ca",
          "2739: n2SQwn4t4OQrOjbLLdGE1pM6TBKKrHUFy62uEL8atNjlcfXIsa4aEu3xNGiqxqur",
          "2740: ZectlkZbm0FkaaQ1Wr9oikDY3KfjuaXdPdO/XC/h8AKNxlDOylyXwUSK/CuYb+1j",
          "2741: gy8yF5QFvVfwW/xwTlHmhUeSkVSQPosfQ6yXNNsmMzkd+ZPWLrfq4R+wiNtwYGu0",
          "2742: WSBcI/M9o8/vrNLnIppoiBJJ13j9CR1ToEAzOFh9wwRWLY10oZhoh1ONN1KQURx4",
          "2743: qedzvvP2DSjZbUccdvl2rBGvZpzfOiFdm1FCnxB0c72Cqx+GTHXBFf8bsa7KHky9",
          "2744: sNO1GUanbq17WoDNgwbY6H51bfShqv0CErxatwWox3we4EcAmFHPVTCYL1oWVMGo",
          "2745: a3Eth91NZj+b/nGhF9lhHKGzXSv9brmLLkfvM1jA6XhNhA7BQ5Vz67lj2j3XfXdh",
          "2746: t/BU5pBXbL4Ut4mIhT1YnKXAjX2/LF5RHQTE8Vwkx5JAEKZyUEGOReD/B+7GOrLp",
          "2747: HduMT9vZAc5aR2k9I8qq1zBAzsL69lyQNAPaDYd1BIAjUety9gAYaSQffCgAgpRO",
          "2748: Gt+DYvxS+7AT/yEd5h74MU2AH7KrAkbXOtlwupiGwhMVTstncDJWXMJqbBhyHPF8",
          "2749: 3UmZH0hbL4PYmzSj9LDWQQXI2tv6vrCpfts3Cqhqxz9vRpgY7t1Wu6l/r+KxYYz3",
          "2750: 1pcGpPvRmPh0DJm7cPTiXqPnZcPt+ulSaSdlxmd19OnvG5awp0fXhxryZVwuiT8G",
          "2751: VDkhyARrxYrdjlINsZJZbQjO0t8ketXAELJOnbFXXzeCOosyOHkLwsqOO96AVJA8",
          "2752: 45ZVL5m95ClGy0RSrjVIkXsxTAMVG6SPAqKwk6vmTdRGuSPS4rhgckPVDHmccmuq",
          "2753: dfnT2YkX+wB2/M3oCgU+s30fAHGkbGZ0pCdNbFYFZLiH0iiMbTDl/0L/z7IdK0nH",
          "2754: GLHVE7apPraKC6xl6rPWsD2iSfrmtIPQa0+rqbIVvKP5JdfJ8J4alI+OxFw/znQe",
          "2755: V0/Rez0j22Fe119LZFFSXhRv+ZSvcq20xDwh00mzcumPWpYuCVPozA18yIhC9tNn",
          "2756: ALHndz0tDseIdy9vC71jQWy9iwri3ueN0DekMMF8JGzI1Z6BAFzgyAx3DkHtwHg7",
          "2757: B7qD0jPG5hJ5+yt323fYgJsuEAYoZ8/jzZ01pkX8bt+UsVN0DGnSGsI2ktnIIk3J",
          "2758: l+8krjmUy6EaW79nITwoOqaeHOIp8m3UkjEcoKOYrzHRKqRy+A09rY+m/cAQaafW",
          "2759: 4xp0Zv7qZPLwnu0jsqB4jD8Ll9yPB02ndsoV6U5PeHzTkVhPml19jKUAwFfs7TJg",
          "2760: kXy+/xFhYVUCAwEAATANBgkqhkiG9w0BAQsFAAOCBAIAAQnZY77pMNeypfpba2WK",
          "2761: aDasT7dk2JqP0eukJCVPTN24Zca+xJNPdzuBATm/8SdZK9lddIbjSnWRsKvTnO2r",
          "2762: /rYdlPf3jM5uuJtb8+Uwwe1s+gszelGS9G/lzzq+ehWicRIq2PFcs8o3iQMfENiv",
          "2763: qILJ+xjcrvms5ZPDNahWkfRx3KCg8Q+/at2n5p7XYjMPYiLKHnDC+RE2b1qT20IZ",
          "2764: FhuK/fTWLmKbfYFNNga6GC4qcaZJ7x0pbm4SDTYp0tkhzcHzwKhidfNB5J2vNz6l",
          "2765: Ur6wiYwamFTLqcOwWo7rdvI+sSn05WQBv0QZlzFX+OAu0l7WQ7yU+noOxBhjvHds",
          "2766: 14+r9qcQZg2q9kG+evopYZqYXRUNNlZKo9MRBXhfrISulFAc5lRFQIXMXnglvAu+",
          "2767: Ipz2gomEAOcOPNNVldhKAU94GAMJd/KfN0ZP7gX3YvPzuYU6XDhag5RTohXLm18w",
          "2768: 5AF+ES3DOQ6ixu3DTf0D+6qrDuK+prdX8ivcdTQVNOQ+MIZeGSc6NWWOTaMGJ3lg",
          "2769: aZIxJUGdo6E7GBGiC1YTjgFKFbHzek1LRTh/LX3vbSudxwaG0HQxwsU9T4DWiMqa",
          "2770: Fkf2KteLEUA6HrR+0XlAZrhwoqAmrJ+8lCFX3V0gE9lpENfVHlFXDGyx10DpTB28",
          "2771: DdjnY3F7EPWNzwf9P3oNT69CKW3Bk6VVr3ROOJtDxVu1ioWo3TaXltQ0VOnap2Pu",
          "2772: sa5wfrpfwBDuAS9JCDg4ttNp2nW3F7tgXC6xPqw5pvGwUppEw9XNrqV8TZrxduuv",
          "2773: rQ3NyZ7KSzIpmFlD3UwV/fGfz3UQmHS6Ng1evrUID9DjfYNfRqSGIGjDfxGtYD+j",
          "2774: Z1gLJZuhjJpNtwBkKRtlNtrCWCJK2hidK/foxwD7kwAPo2I9FjpltxCRywZUs07X",
          "2775: KwXTfBR9v6ij1LV6K58hFS+8ezZyZ05CeVBFkMQdclTOSfuPxlMkQOtjp8QWDj+F",
          "2776: j/MYziT5KBkHvcbrjdRtUJIAi4N7zCsPZtjik918AK1WBNRVqPbrgq/XSEXMfuvs",
          "2777: 6JbfK0B76vdBDRtJFC1JsvnIrGbUztxXzyQwFLaR/AjVJqpVlysLWzPKWVX6/+SJ",
          "2778: u1NQOl2E8P6ycyBsuGnO89p0S4F8cMRcI2X1XQsZ7/q0NBrOMaEp5T3SrWo9GiQ3",
          "2779: o2SBdbs3Y6MBPBtTu977Z/0RO63J3M5i2tjUiDfrFy7+VRLKr7qQ7JibohyB8QaR",
          "2780: 9tedgjn2f+of7PnP/PEl1cCphUZeHM7QKUMPT8dbqwmKtlYY43EHXcvNOT5IBk3X",
          "2781: 9lwJoZk/B2i+ZMRNSP34ztAwtxmasPt6RAWGQpWCn9qmttAHAnMfDqe7F7jVR6rS",
          "2782: u58=",
          "2783: -----END CERTIFICATE-----`",
          "2785: func TestHandshakeRSATooBig(t *testing.T) {",
          "2786:  testCert, _ := pem.Decode([]byte(largeRSAKeyCertPEM))",
          "2788:  c := &Conn{conn: &discardConn{}, config: testConfig.Clone()}",
          "2790:  expectedErr := \"tls: server sent certificate containing RSA key larger than 8192 bits\"",
          "2791:  err := c.verifyServerCertificate([][]byte{testCert.Bytes})",
          "2792:  if err == nil || err.Error() != expectedErr {",
          "2793:   t.Errorf(\"Conn.verifyServerCertificate unexpected error: want %q, got %q\", expectedErr, err)",
          "2794:  }",
          "2796:  expectedErr = \"tls: client sent certificate containing RSA key larger than 8192 bits\"",
          "2797:  err = c.processCertsFromClient(Certificate{Certificate: [][]byte{testCert.Bytes}})",
          "2798:  if err == nil || err.Error() != expectedErr {",
          "2799:   t.Errorf(\"Conn.processCertsFromClient unexpected error: want %q, got %q\", expectedErr, err)",
          "2800:  }",
          "2801: }",
          "",
          "---------------"
        ],
        "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go": [
          "File: src/crypto/tls/handshake_server.go -> src/crypto/tls/handshake_server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:    c.sendAlert(alertBadCertificate)",
          "865:    return errors.New(\"tls: failed to parse client certificate: \" + err.Error())",
          "866:   }",
          "867:  }",
          "869:  if len(certs) == 0 && requiresClientCert(c.config.ClientAuth) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867:   if certs[i].PublicKeyAlgorithm == x509.RSA && certs[i].PublicKey.(*rsa.PublicKey).N.BitLen() > maxRSAKeySize {",
          "868:    c.sendAlert(alertBadCertificate)",
          "869:    return fmt.Errorf(\"tls: client sent certificate containing RSA key larger than %d bits\", maxRSAKeySize)",
          "870:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2300f7ef07718f6be4d8aa8486c7de99836e233f",
      "candidate_info": {
        "commit_hash": "2300f7ef07718f6be4d8aa8486c7de99836e233f",
        "repo": "golang/go",
        "commit_url": "https://github.com/golang/go/commit/2300f7ef07718f6be4d8aa8486c7de99836e233f",
        "files": [
          "src/crypto/tls/handshake_client.go",
          "src/crypto/tls/handshake_client_test.go",
          "src/crypto/tls/handshake_server.go"
        ],
        "message": "[release-branch.go1.19] crypto/tls: restrict RSA keys in certificates to <= 8192 bits\n\nExtremely large RSA keys in certificate chains can cause a client/server\nto expend significant CPU time verifying signatures. Limit this by\nrestricting the size of RSA keys transmitted during handshakes to <=\n8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only\nthree certificates in circulation with keys larger than this, and all\nthree appear to be test certificates that are not actively deployed. It\nis possible there are larger keys in use in private PKIs, but we target\nthe web PKI, so causing breakage here in the interests of increasing the\ndefault safety of users of crypto/tls seems reasonable.\n\nThanks to Mateusz Poliwczak for reporting this issue.\n\nUpdates #61460\nFixes #61579\nFixes CVE-2023-29409\n\nChange-Id: Ie35038515a649199a36a12fc2c5df3af855dca6c\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/1912161\nReviewed-by: Damien Neil <dneil@google.com>\nReviewed-by: Tatiana Bradley <tatianabradley@google.com>\nRun-TryBot: Roland Shoemaker <bracewell@google.com>\n(cherry picked from commit d865c715d92887361e4bd5596e19e513f27781b7)\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/1965487\nReviewed-on: https://go-review.googlesource.com/c/go/+/514915\nRun-TryBot: David Chase <drchase@google.com>\nReviewed-by: Matthew Dempsky <mdempsky@google.com>\nTryBot-Bypass: David Chase <drchase@google.com>",
        "before_after_code_files": [
          "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
          "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go",
          "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
            "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go",
            "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go"
          ],
          "candidate": [
            "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go",
            "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go",
            "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto/tls/handshake_client.go||src/crypto/tls/handshake_client.go": [
          "File: src/crypto/tls/handshake_client.go -> src/crypto/tls/handshake_client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "857:  return nil",
          "858: }",
          "862: func (c *Conn) verifyServerCertificate(certificates [][]byte) error {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "862: const maxRSAKeySize = 8192",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "867:    c.sendAlert(alertBadCertificate)",
          "868:    return errors.New(\"tls: failed to parse certificate from server: \" + err.Error())",
          "869:   }",
          "870:   certs[i] = cert",
          "871:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "874:   if cert.PublicKeyAlgorithm == x509.RSA && cert.PublicKey.(*rsa.PublicKey).N.BitLen() > maxRSAKeySize {",
          "875:    c.sendAlert(alertBadCertificate)",
          "876:    return fmt.Errorf(\"tls: server sent certificate containing RSA key larger than %d bits\", maxRSAKeySize)",
          "877:   }",
          "",
          "---------------"
        ],
        "src/crypto/tls/handshake_client_test.go||src/crypto/tls/handshake_client_test.go": [
          "File: src/crypto/tls/handshake_client_test.go -> src/crypto/tls/handshake_client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2616:   t.Error(\"Client connection was not closed when the context was canceled\")",
          "2617:  }",
          "2618: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2621: type discardConn struct {",
          "2622:  net.Conn",
          "2623: }",
          "2625: func (dc *discardConn) Write(data []byte) (int, error) {",
          "2626:  return len(data), nil",
          "2627: }",
          "2630: const largeRSAKeyCertPEM = `-----BEGIN CERTIFICATE-----",
          "2631: MIIInjCCBIWgAwIBAgIBAjANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQDEwd0ZXN0",
          "2632: aW5nMB4XDTIzMDYwNzIxMjMzNloXDTIzMDYwNzIzMjMzNlowEjEQMA4GA1UEAxMH",
          "2633: dGVzdGluZzCCBCIwDQYJKoZIhvcNAQEBBQADggQPADCCBAoCggQBAWdHsf6Rh2Ca",
          "2634: n2SQwn4t4OQrOjbLLdGE1pM6TBKKrHUFy62uEL8atNjlcfXIsa4aEu3xNGiqxqur",
          "2635: ZectlkZbm0FkaaQ1Wr9oikDY3KfjuaXdPdO/XC/h8AKNxlDOylyXwUSK/CuYb+1j",
          "2636: gy8yF5QFvVfwW/xwTlHmhUeSkVSQPosfQ6yXNNsmMzkd+ZPWLrfq4R+wiNtwYGu0",
          "2637: WSBcI/M9o8/vrNLnIppoiBJJ13j9CR1ToEAzOFh9wwRWLY10oZhoh1ONN1KQURx4",
          "2638: qedzvvP2DSjZbUccdvl2rBGvZpzfOiFdm1FCnxB0c72Cqx+GTHXBFf8bsa7KHky9",
          "2639: sNO1GUanbq17WoDNgwbY6H51bfShqv0CErxatwWox3we4EcAmFHPVTCYL1oWVMGo",
          "2640: a3Eth91NZj+b/nGhF9lhHKGzXSv9brmLLkfvM1jA6XhNhA7BQ5Vz67lj2j3XfXdh",
          "2641: t/BU5pBXbL4Ut4mIhT1YnKXAjX2/LF5RHQTE8Vwkx5JAEKZyUEGOReD/B+7GOrLp",
          "2642: HduMT9vZAc5aR2k9I8qq1zBAzsL69lyQNAPaDYd1BIAjUety9gAYaSQffCgAgpRO",
          "2643: Gt+DYvxS+7AT/yEd5h74MU2AH7KrAkbXOtlwupiGwhMVTstncDJWXMJqbBhyHPF8",
          "2644: 3UmZH0hbL4PYmzSj9LDWQQXI2tv6vrCpfts3Cqhqxz9vRpgY7t1Wu6l/r+KxYYz3",
          "2645: 1pcGpPvRmPh0DJm7cPTiXqPnZcPt+ulSaSdlxmd19OnvG5awp0fXhxryZVwuiT8G",
          "2646: VDkhyARrxYrdjlINsZJZbQjO0t8ketXAELJOnbFXXzeCOosyOHkLwsqOO96AVJA8",
          "2647: 45ZVL5m95ClGy0RSrjVIkXsxTAMVG6SPAqKwk6vmTdRGuSPS4rhgckPVDHmccmuq",
          "2648: dfnT2YkX+wB2/M3oCgU+s30fAHGkbGZ0pCdNbFYFZLiH0iiMbTDl/0L/z7IdK0nH",
          "2649: GLHVE7apPraKC6xl6rPWsD2iSfrmtIPQa0+rqbIVvKP5JdfJ8J4alI+OxFw/znQe",
          "2650: V0/Rez0j22Fe119LZFFSXhRv+ZSvcq20xDwh00mzcumPWpYuCVPozA18yIhC9tNn",
          "2651: ALHndz0tDseIdy9vC71jQWy9iwri3ueN0DekMMF8JGzI1Z6BAFzgyAx3DkHtwHg7",
          "2652: B7qD0jPG5hJ5+yt323fYgJsuEAYoZ8/jzZ01pkX8bt+UsVN0DGnSGsI2ktnIIk3J",
          "2653: l+8krjmUy6EaW79nITwoOqaeHOIp8m3UkjEcoKOYrzHRKqRy+A09rY+m/cAQaafW",
          "2654: 4xp0Zv7qZPLwnu0jsqB4jD8Ll9yPB02ndsoV6U5PeHzTkVhPml19jKUAwFfs7TJg",
          "2655: kXy+/xFhYVUCAwEAATANBgkqhkiG9w0BAQsFAAOCBAIAAQnZY77pMNeypfpba2WK",
          "2656: aDasT7dk2JqP0eukJCVPTN24Zca+xJNPdzuBATm/8SdZK9lddIbjSnWRsKvTnO2r",
          "2657: /rYdlPf3jM5uuJtb8+Uwwe1s+gszelGS9G/lzzq+ehWicRIq2PFcs8o3iQMfENiv",
          "2658: qILJ+xjcrvms5ZPDNahWkfRx3KCg8Q+/at2n5p7XYjMPYiLKHnDC+RE2b1qT20IZ",
          "2659: FhuK/fTWLmKbfYFNNga6GC4qcaZJ7x0pbm4SDTYp0tkhzcHzwKhidfNB5J2vNz6l",
          "2660: Ur6wiYwamFTLqcOwWo7rdvI+sSn05WQBv0QZlzFX+OAu0l7WQ7yU+noOxBhjvHds",
          "2661: 14+r9qcQZg2q9kG+evopYZqYXRUNNlZKo9MRBXhfrISulFAc5lRFQIXMXnglvAu+",
          "2662: Ipz2gomEAOcOPNNVldhKAU94GAMJd/KfN0ZP7gX3YvPzuYU6XDhag5RTohXLm18w",
          "2663: 5AF+ES3DOQ6ixu3DTf0D+6qrDuK+prdX8ivcdTQVNOQ+MIZeGSc6NWWOTaMGJ3lg",
          "2664: aZIxJUGdo6E7GBGiC1YTjgFKFbHzek1LRTh/LX3vbSudxwaG0HQxwsU9T4DWiMqa",
          "2665: Fkf2KteLEUA6HrR+0XlAZrhwoqAmrJ+8lCFX3V0gE9lpENfVHlFXDGyx10DpTB28",
          "2666: DdjnY3F7EPWNzwf9P3oNT69CKW3Bk6VVr3ROOJtDxVu1ioWo3TaXltQ0VOnap2Pu",
          "2667: sa5wfrpfwBDuAS9JCDg4ttNp2nW3F7tgXC6xPqw5pvGwUppEw9XNrqV8TZrxduuv",
          "2668: rQ3NyZ7KSzIpmFlD3UwV/fGfz3UQmHS6Ng1evrUID9DjfYNfRqSGIGjDfxGtYD+j",
          "2669: Z1gLJZuhjJpNtwBkKRtlNtrCWCJK2hidK/foxwD7kwAPo2I9FjpltxCRywZUs07X",
          "2670: KwXTfBR9v6ij1LV6K58hFS+8ezZyZ05CeVBFkMQdclTOSfuPxlMkQOtjp8QWDj+F",
          "2671: j/MYziT5KBkHvcbrjdRtUJIAi4N7zCsPZtjik918AK1WBNRVqPbrgq/XSEXMfuvs",
          "2672: 6JbfK0B76vdBDRtJFC1JsvnIrGbUztxXzyQwFLaR/AjVJqpVlysLWzPKWVX6/+SJ",
          "2673: u1NQOl2E8P6ycyBsuGnO89p0S4F8cMRcI2X1XQsZ7/q0NBrOMaEp5T3SrWo9GiQ3",
          "2674: o2SBdbs3Y6MBPBtTu977Z/0RO63J3M5i2tjUiDfrFy7+VRLKr7qQ7JibohyB8QaR",
          "2675: 9tedgjn2f+of7PnP/PEl1cCphUZeHM7QKUMPT8dbqwmKtlYY43EHXcvNOT5IBk3X",
          "2676: 9lwJoZk/B2i+ZMRNSP34ztAwtxmasPt6RAWGQpWCn9qmttAHAnMfDqe7F7jVR6rS",
          "2677: u58=",
          "2678: -----END CERTIFICATE-----`",
          "2680: func TestHandshakeRSATooBig(t *testing.T) {",
          "2681:  testCert, _ := pem.Decode([]byte(largeRSAKeyCertPEM))",
          "2683:  c := &Conn{conn: &discardConn{}, config: testConfig.Clone()}",
          "2685:  expectedErr := \"tls: server sent certificate containing RSA key larger than 8192 bits\"",
          "2686:  err := c.verifyServerCertificate([][]byte{testCert.Bytes})",
          "2687:  if err == nil || err.Error() != expectedErr {",
          "2688:   t.Errorf(\"Conn.verifyServerCertificate unexpected error: want %q, got %q\", expectedErr, err)",
          "2689:  }",
          "2691:  expectedErr = \"tls: client sent certificate containing RSA key larger than 8192 bits\"",
          "2692:  err = c.processCertsFromClient(Certificate{Certificate: [][]byte{testCert.Bytes}})",
          "2693:  if err == nil || err.Error() != expectedErr {",
          "2694:   t.Errorf(\"Conn.processCertsFromClient unexpected error: want %q, got %q\", expectedErr, err)",
          "2695:  }",
          "2696: }",
          "",
          "---------------"
        ],
        "src/crypto/tls/handshake_server.go||src/crypto/tls/handshake_server.go": [
          "File: src/crypto/tls/handshake_server.go -> src/crypto/tls/handshake_server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "819:    c.sendAlert(alertBadCertificate)",
          "820:    return errors.New(\"tls: failed to parse client certificate: \" + err.Error())",
          "821:   }",
          "822:  }",
          "824:  if len(certs) == 0 && requiresClientCert(c.config.ClientAuth) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "822:   if certs[i].PublicKeyAlgorithm == x509.RSA && certs[i].PublicKey.(*rsa.PublicKey).N.BitLen() > maxRSAKeySize {",
          "823:    c.sendAlert(alertBadCertificate)",
          "824:    return fmt.Errorf(\"tls: client sent certificate containing RSA key larger than %d bits\", maxRSAKeySize)",
          "825:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}