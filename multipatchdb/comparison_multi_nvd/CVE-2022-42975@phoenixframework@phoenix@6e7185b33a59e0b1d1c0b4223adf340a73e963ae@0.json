{
  "cve_id": "CVE-2022-42975",
  "cve_desc": "socket/transport.ex in Phoenix before 1.6.14 mishandles check_origin wildcarding. NOTE: LiveView applications are unaffected by default because of the presence of a LiveView CSRF token.",
  "repo": "phoenixframework/phoenix",
  "patch_hash": "6e7185b33a59e0b1d1c0b4223adf340a73e963ae",
  "patch_info": {
    "commit_hash": "6e7185b33a59e0b1d1c0b4223adf340a73e963ae",
    "repo": "phoenixframework/phoenix",
    "commit_url": "https://github.com/phoenixframework/phoenix/commit/6e7185b33a59e0b1d1c0b4223adf340a73e963ae",
    "files": [
      "lib/phoenix/socket/transport.ex",
      "test/phoenix/socket/transport_test.exs"
    ],
    "message": "Fix wildcard check_origin vulnerability.\n\nPreviously, our documentation points to a wilcard example of:\n\n    check_origin: [\n      \"//*.other.com\"\n    ]\n\nWhich should allow any subdomain of \"other.com\", but our comparison\nfor `\"//*.other.com\"` would allow `api.any-other.com`, which would\nallow an attacker to register a domain with a custom prefix of a target\ndomain and pass origin checks. This patch ensures the `String.ends_with?`\ncheck includes the subdomain dot prefix.\n\nWho is affected?\n\nOnly those using a wildcard check origin are affected, and potential\nexploits are limited to allowing unauthenticated channel connections\nfrom a bad host. Because LiveView adds its own csrf token to the\nconnection by default, LiveView applications with wildcard check origin\nwould refuse connection under this scenario. Additionally, channel\napplications utilizing token based authentication would require the\nattacker to also have a valid token to connection from a bad host.\nPhoenix channels does not allow access to cookies, so an attacker would\nalso not be able to pass their own cookies from a bad host.",
    "before_after_code_files": [
      "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex",
      "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs"
    ]
  },
  "patch_diff": {
    "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex": [
      "File: lib/phoenix/socket/transport.ex -> lib/phoenix/socket/transport.ex",
      "--- Hunk 1 ---",
      "[Context before]",
      "624:   defp compare_host?(_request_host, nil),",
      "625:     do: true",
      "626:   defp compare_host?(request_host, \"*.\" <> allowed_host),",
      "628:   defp compare_host?(request_host, allowed_host),",
      "629:     do: request_host == allowed_host",
      "",
      "[Removed Lines]",
      "627:     do: String.ends_with?(request_host, allowed_host)",
      "",
      "[Added Lines]",
      "627:     do: request_host == allowed_host or String.ends_with?(request_host, \".\" <> allowed_host)",
      "",
      "---------------"
    ],
    "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs": [
      "File: test/phoenix/socket/transport_test.exs -> test/phoenix/socket/transport_test.exs",
      "--- Hunk 1 ---",
      "[Context before]",
      "85:       refute conn.halted",
      "86:       conn = check_origin(\"https://org1.ex.com\", check_origin: origins)",
      "87:       refute conn.halted",
      "88:     end",
      "90:     test \"nested wildcard subdomains\" do",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "89:       conn = check_origin(\"https://ex.com\", check_origin: origins)",
      "90:       refute conn.halted",
      "92:       conn = check_origin(\"https://org1.prefix-ex.com\", check_origin: origins)",
      "93:       assert conn.halted",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "93:       conn = check_origin(\"http://org1.foo.example.com\", check_origin: origins)",
      "94:       refute conn.halted",
      "96:       conn = check_origin(\"http://org1.bar.example.com\", check_origin: origins)",
      "97:       assert conn.halted",
      "98:       assert conn.status == 403",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "102:       conn = check_origin(\"http://foo.example.com\", check_origin: origins)",
      "103:       refute conn.halted",
      "105:       conn = check_origin(\"http://bad.example.com\", check_origin: origins)",
      "106:       assert conn.halted",
      "108:       conn = check_origin(\"http://org1.prefix-foo.example.com\", check_origin: origins)",
      "109:       assert conn.halted",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "611e1600ec90164ac4a91705ca2a606ada6ae309",
      "candidate_info": {
        "commit_hash": "611e1600ec90164ac4a91705ca2a606ada6ae309",
        "repo": "phoenixframework/phoenix",
        "commit_url": "https://github.com/phoenixframework/phoenix/commit/611e1600ec90164ac4a91705ca2a606ada6ae309",
        "files": [
          "lib/phoenix/socket/transport.ex",
          "test/phoenix/socket/transport_test.exs"
        ],
        "message": "Fix wildcard check_origin vulnerability.\n\nPreviously, our documentation points to a wilcard example of:\n\n    check_origin: [\n      \"//*.other.com\"\n    ]\n\nWhich should allow any subdomain of \"other.com\", but our comparison\nfor `\"//*.other.com\"` would allow `api.any-other.com`, which would\nallow an attacker to register a domain with a custom prefix of a target\ndomain and pass origin checks. This patch ensures the `String.ends_with?`\ncheck includes the subdomain dot prefix.\n\nWho is affected?\n\nOnly those using a wildcard check origin are affected, and potential\nexploits are limited to allowing unauthenticated channel connections\nfrom a bad host. Because LiveView adds its own csrf token to the\nconnection by default, LiveView applications with wildcard check origin\nwould refuse connection under this scenario. Additionally, channel\napplications utilizing token based authentication would require the\nattacker to also have a valid token to connection from a bad host.\nPhoenix channels does not allow access to cookies, so an attacker would\nalso not be able to pass their own cookies from a bad host.",
        "before_after_code_files": [
          "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex",
          "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex",
            "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs"
          ],
          "candidate": [
            "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex",
            "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs"
          ]
        }
      },
      "candidate_diff": {
        "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex": [
          "File: lib/phoenix/socket/transport.ex -> lib/phoenix/socket/transport.ex",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:   defp compare_host?(_request_host, nil),",
          "616:     do: true",
          "617:   defp compare_host?(request_host, \"*.\" <> allowed_host),",
          "619:   defp compare_host?(request_host, allowed_host),",
          "620:     do: request_host == allowed_host",
          "",
          "[Removed Lines]",
          "618:     do: String.ends_with?(request_host, allowed_host)",
          "",
          "[Added Lines]",
          "618:     do: request_host == allowed_host or String.ends_with?(request_host, \".\" <> allowed_host)",
          "",
          "---------------"
        ],
        "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs": [
          "File: test/phoenix/socket/transport_test.exs -> test/phoenix/socket/transport_test.exs",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:       refute conn.halted",
          "64:       conn = check_origin(\"https://org1.ex.com\", check_origin: origins)",
          "65:       refute conn.halted",
          "66:     end",
          "68:     test \"nested wildcard subdomains\" do",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:       conn = check_origin(\"https://ex.com\", check_origin: origins)",
          "68:       refute conn.halted",
          "70:       conn = check_origin(\"https://org1.prefix-ex.com\", check_origin: origins)",
          "71:       assert conn.halted",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:       conn = check_origin(\"http://org1.foo.example.com\", check_origin: origins)",
          "72:       refute conn.halted",
          "74:       conn = check_origin(\"http://org1.bar.example.com\", check_origin: origins)",
          "75:       assert conn.halted",
          "76:       assert conn.status == 403",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:       conn = check_origin(\"http://foo.example.com\", check_origin: origins)",
          "81:       refute conn.halted",
          "83:       conn = check_origin(\"http://bad.example.com\", check_origin: origins)",
          "84:       assert conn.halted",
          "86:       conn = check_origin(\"http://org1.prefix-foo.example.com\", check_origin: origins)",
          "87:       assert conn.halted",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2fc631f00267cd58255cffd5b12f8206e3cabae",
      "candidate_info": {
        "commit_hash": "b2fc631f00267cd58255cffd5b12f8206e3cabae",
        "repo": "phoenixframework/phoenix",
        "commit_url": "https://github.com/phoenixframework/phoenix/commit/b2fc631f00267cd58255cffd5b12f8206e3cabae",
        "files": [
          "lib/phoenix/socket/transport.ex",
          "test/phoenix/socket/transport_test.exs"
        ],
        "message": "Fix wildcard check_origin vulnerability.\n\nPreviously, our documentation points to a wilcard example of:\n\n    check_origin: [\n      \"//*.other.com\"\n    ]\n\nWhich should allow any subdomain of \"other.com\", but our comparison\nfor `\"//*.other.com\"` would allow `api.any-other.com`, which would\nallow an attacker to register a domain with a custom prefix of a target\ndomain and pass origin checks. This patch ensures the `String.ends_with?`\ncheck includes the subdomain dot prefix.\n\nWho is affected?\n\nOnly those using a wildcard check origin are affected, and potential\nexploits are limited to allowing unauthenticated channel connections\nfrom a bad host. Because LiveView adds its own csrf token to the\nconnection by default, LiveView applications with wildcard check origin\nwould refuse connection under this scenario. Additionally, channel\napplications utilizing token based authentication would require the\nattacker to also have a valid token to connection from a bad host.\nPhoenix channels does not allow access to cookies, so an attacker would\nalso not be able to pass their own cookies from a bad host.",
        "before_after_code_files": [
          "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex",
          "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex",
            "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs"
          ],
          "candidate": [
            "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex",
            "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs"
          ]
        }
      },
      "candidate_diff": {
        "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex": [
          "File: lib/phoenix/socket/transport.ex -> lib/phoenix/socket/transport.ex",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:   defp compare_host?(_request_host, nil),",
          "625:     do: true",
          "626:   defp compare_host?(request_host, \"*.\" <> allowed_host),",
          "628:   defp compare_host?(request_host, allowed_host),",
          "629:     do: request_host == allowed_host",
          "",
          "[Removed Lines]",
          "627:     do: String.ends_with?(request_host, allowed_host)",
          "",
          "[Added Lines]",
          "627:     do: request_host == allowed_host or String.ends_with?(request_host, \".\" <> allowed_host)",
          "",
          "---------------"
        ],
        "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs": [
          "File: test/phoenix/socket/transport_test.exs -> test/phoenix/socket/transport_test.exs",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:       refute conn.halted",
          "88:       conn = check_origin(\"https://org1.ex.com\", check_origin: origins)",
          "89:       refute conn.halted",
          "90:     end",
          "92:     test \"nested wildcard subdomains\" do",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:       conn = check_origin(\"https://ex.com\", check_origin: origins)",
          "92:       refute conn.halted",
          "94:       conn = check_origin(\"https://org1.prefix-ex.com\", check_origin: origins)",
          "95:       assert conn.halted",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:       conn = check_origin(\"http://org1.foo.example.com\", check_origin: origins)",
          "96:       refute conn.halted",
          "98:       conn = check_origin(\"http://org1.bar.example.com\", check_origin: origins)",
          "99:       assert conn.halted",
          "100:       assert conn.status == 403",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:       conn = check_origin(\"http://foo.example.com\", check_origin: origins)",
          "105:       refute conn.halted",
          "107:       conn = check_origin(\"http://bad.example.com\", check_origin: origins)",
          "108:       assert conn.halted",
          "110:       conn = check_origin(\"http://org1.prefix-foo.example.com\", check_origin: origins)",
          "111:       assert conn.halted",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74f13fdae33f2dcef3139eca1e09e14f271ea433",
      "candidate_info": {
        "commit_hash": "74f13fdae33f2dcef3139eca1e09e14f271ea433",
        "repo": "phoenixframework/phoenix",
        "commit_url": "https://github.com/phoenixframework/phoenix/commit/74f13fdae33f2dcef3139eca1e09e14f271ea433",
        "files": [
          "lib/phoenix/socket/transport.ex",
          "test/phoenix/socket/transport_test.exs"
        ],
        "message": "Fix wildcard check_origin vulnerability.\n\nPreviously, our documentation points to a wilcard example of:\n\n    check_origin: [\n      \"//*.other.com\"\n    ]\n\nWhich should allow any subdomain of \"other.com\", but our comparison\nfor `\"//*.other.com\"` would allow `api.any-other.com`, which would\nallow an attacker to register a domain with a custom prefix of a target\ndomain and pass origin checks. This patch ensures the `String.ends_with?`\ncheck includes the subdomain dot prefix.\n\nWho is affected?\n\nOnly those using a wildcard check origin are affected, and potential\nexploits are limited to allowing unauthenticated channel connections\nfrom a bad host. Because LiveView adds its own csrf token to the\nconnection by default, LiveView applications with wildcard check origin\nwould refuse connection under this scenario. Additionally, channel\napplications utilizing token based authentication would require the\nattacker to also have a valid token to connection from a bad host.\nPhoenix channels does not allow access to cookies, so an attacker would\nalso not be able to pass their own cookies from a bad host.",
        "before_after_code_files": [
          "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex",
          "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex",
            "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs"
          ],
          "candidate": [
            "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex",
            "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs"
          ]
        }
      },
      "candidate_diff": {
        "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex": [
          "File: lib/phoenix/socket/transport.ex -> lib/phoenix/socket/transport.ex",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:   defp compare_host?(_request_host, nil),",
          "615:     do: true",
          "616:   defp compare_host?(request_host, \"*.\" <> allowed_host),",
          "618:   defp compare_host?(request_host, allowed_host),",
          "619:     do: request_host == allowed_host",
          "",
          "[Removed Lines]",
          "617:     do: String.ends_with?(request_host, allowed_host)",
          "",
          "[Added Lines]",
          "617:     do: request_host == allowed_host or String.ends_with?(request_host, \".\" <> allowed_host)",
          "",
          "---------------"
        ],
        "test/phoenix/socket/transport_test.exs||test/phoenix/socket/transport_test.exs": [
          "File: test/phoenix/socket/transport_test.exs -> test/phoenix/socket/transport_test.exs",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:       refute conn.halted",
          "86:       conn = check_origin(\"https://org1.ex.com\", check_origin: origins)",
          "87:       refute conn.halted",
          "88:     end",
          "90:     test \"nested wildcard subdomains\" do",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:       conn = check_origin(\"https://ex.com\", check_origin: origins)",
          "90:       refute conn.halted",
          "92:       conn = check_origin(\"https://org1.prefix-ex.com\", check_origin: origins)",
          "93:       assert conn.halted",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:       conn = check_origin(\"http://org1.foo.example.com\", check_origin: origins)",
          "94:       refute conn.halted",
          "96:       conn = check_origin(\"http://org1.bar.example.com\", check_origin: origins)",
          "97:       assert conn.halted",
          "98:       assert conn.status == 403",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:       conn = check_origin(\"http://foo.example.com\", check_origin: origins)",
          "103:       refute conn.halted",
          "105:       conn = check_origin(\"http://bad.example.com\", check_origin: origins)",
          "106:       assert conn.halted",
          "108:       conn = check_origin(\"http://org1.prefix-foo.example.com\", check_origin: origins)",
          "109:       assert conn.halted",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b5157eb81eefaa9b67d53b6be14c72c9324ec91",
      "candidate_info": {
        "commit_hash": "2b5157eb81eefaa9b67d53b6be14c72c9324ec91",
        "repo": "phoenixframework/phoenix",
        "commit_url": "https://github.com/phoenixframework/phoenix/commit/2b5157eb81eefaa9b67d53b6be14c72c9324ec91",
        "files": [
          "lib/phoenix/socket/transport.ex"
        ],
        "message": "Fix wildcard check_origin vulnerability. Previously, our documentation points to a wilcard example of:\n\n    check_origin: [\n      \"//*.other.com\"\n    ]\n\nWhich should allow any subdomain of \"other.com\", but our comparison\nfor `\"//*.other.com\"` would allow `api.any-other.com`, which would\nallow an attacker to register a domain with a custom prefix of a target\ndomain and pass origin checks. This patch ensures the `String.ends_with?`\ncheck includes the subdomain dot prefix.\n\nWho is affected?\n\nOnly those using a wildcard check origin are affected, and potential\nexploits are limited to allowing unauthenticated channel connections\nfrom a bad host. Because LiveView adds its own csrf token to the\nconnection by default, LiveView applications with wildcard check origin\nwould refuse connection under this scenario. Additionally, channel\napplications utilizing token based authentication would require the\nattacker to also have a valid token to connection from a bad host.\nPhoenix channels does not allow access to cookies, so an attacker would\nalso not be able to pass their own cookies from a bad host.",
        "before_after_code_files": [
          "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex"
          ],
          "candidate": [
            "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex"
          ]
        }
      },
      "candidate_diff": {
        "lib/phoenix/socket/transport.ex||lib/phoenix/socket/transport.ex": [
          "File: lib/phoenix/socket/transport.ex -> lib/phoenix/socket/transport.ex",
          "--- Hunk 1 ---",
          "[Context before]",
          "470:   defp compare_host?(_request_host, nil),",
          "471:     do: true",
          "472:   defp compare_host?(request_host, \"*.\" <> allowed_host),",
          "474:   defp compare_host?(request_host, allowed_host),",
          "475:     do: request_host == allowed_host",
          "",
          "[Removed Lines]",
          "473:     do: String.ends_with?(request_host, allowed_host)",
          "",
          "[Added Lines]",
          "473:     do: request_host == allowed_host or String.ends_with?(request_host, \".\" <> allowed_host)",
          "",
          "---------------"
        ]
      }
    }
  ]
}