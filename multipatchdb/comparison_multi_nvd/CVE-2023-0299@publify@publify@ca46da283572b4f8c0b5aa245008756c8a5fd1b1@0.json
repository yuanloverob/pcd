{
  "cve_id": "CVE-2023-0299",
  "cve_desc": "Improper Input Validation in GitHub repository publify/publify prior to 9.2.10.",
  "repo": "publify/publify",
  "patch_hash": "ca46da283572b4f8c0b5aa245008756c8a5fd1b1",
  "patch_info": {
    "commit_hash": "ca46da283572b4f8c0b5aa245008756c8a5fd1b1",
    "repo": "publify/publify",
    "commit_url": "https://github.com/publify/publify/commit/ca46da283572b4f8c0b5aa245008756c8a5fd1b1",
    "files": [
      "publify_core/Manifest.txt",
      "publify_core/app/models/blog.rb",
      "publify_core/app/models/concerns/string_length_limit.rb",
      "publify_core/app/models/content.rb",
      "publify_core/app/models/feedback.rb",
      "publify_core/app/models/ping.rb",
      "publify_core/app/models/post_type.rb",
      "publify_core/app/models/redirect.rb",
      "publify_core/app/models/resource.rb",
      "publify_core/app/models/tag.rb",
      "publify_core/app/models/user.rb",
      "publify_core/spec/models/blog_spec.rb",
      "publify_core/spec/models/content_spec.rb",
      "publify_core/spec/models/feedback_spec.rb",
      "publify_core/spec/models/ping_spec.rb",
      "publify_core/spec/models/post_type_spec.rb",
      "publify_core/spec/models/redirect_spec.rb",
      "publify_core/spec/models/resource_spec.rb",
      "publify_core/spec/models/tag_spec.rb",
      "publify_core/spec/models/user_spec.rb"
    ],
    "message": "Validate lengths of string attributes\n\nWhen using the MySQL database, Rails automatically sets a limit of 255\ncharacters for string columns. This changes ensures this limit is also\nenforced in the validations. For several columns with a different limit,\nthat different limit is enforced instead.\n\nFor the PostgreSQL database, there is no limit in the database, but it\nis useful to set a limit anyway to prevent absurdly large values from\nbeing submitted.",
    "before_after_code_files": [
      "publify_core/app/models/blog.rb||publify_core/app/models/blog.rb",
      "publify_core/app/models/concerns/string_length_limit.rb||publify_core/app/models/concerns/string_length_limit.rb",
      "publify_core/app/models/content.rb||publify_core/app/models/content.rb",
      "publify_core/app/models/feedback.rb||publify_core/app/models/feedback.rb",
      "publify_core/app/models/ping.rb||publify_core/app/models/ping.rb",
      "publify_core/app/models/post_type.rb||publify_core/app/models/post_type.rb",
      "publify_core/app/models/redirect.rb||publify_core/app/models/redirect.rb",
      "publify_core/app/models/resource.rb||publify_core/app/models/resource.rb",
      "publify_core/app/models/tag.rb||publify_core/app/models/tag.rb",
      "publify_core/app/models/user.rb||publify_core/app/models/user.rb",
      "publify_core/spec/models/blog_spec.rb||publify_core/spec/models/blog_spec.rb",
      "publify_core/spec/models/content_spec.rb||publify_core/spec/models/content_spec.rb",
      "publify_core/spec/models/feedback_spec.rb||publify_core/spec/models/feedback_spec.rb",
      "publify_core/spec/models/ping_spec.rb||publify_core/spec/models/ping_spec.rb",
      "publify_core/spec/models/post_type_spec.rb||publify_core/spec/models/post_type_spec.rb",
      "publify_core/spec/models/redirect_spec.rb||publify_core/spec/models/redirect_spec.rb",
      "publify_core/spec/models/resource_spec.rb||publify_core/spec/models/resource_spec.rb",
      "publify_core/spec/models/tag_spec.rb||publify_core/spec/models/tag_spec.rb",
      "publify_core/spec/models/user_spec.rb||publify_core/spec/models/user_spec.rb"
    ]
  },
  "patch_diff": {
    "publify_core/app/models/blog.rb||publify_core/app/models/blog.rb": [
      "File: publify_core/app/models/blog.rb -> publify_core/app/models/blog.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: #",
      "10: class Blog < ApplicationRecord",
      "11:   include ConfigManager",
      "12:   include Rails.application.routes.url_helpers",
      "14:   has_many :contents",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12:   include StringLengthLimit",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "140:   validate :permalink_has_identifier",
      "141:   # validates :base_url, presence: true",
      "143:   # Find the Blog that matches a specific base URL. If no Blog object is found",
      "144:   # that matches, then grab the first blog. If *that* fails, then create a new",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:   validates_default_string_length :base_url",
      "",
      "---------------"
    ],
    "publify_core/app/models/concerns/string_length_limit.rb||publify_core/app/models/concerns/string_length_limit.rb": [
      "File: publify_core/app/models/concerns/string_length_limit.rb -> publify_core/app/models/concerns/string_length_limit.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # frozen_string_literal: true",
      "3: module StringLengthLimit",
      "4:   # Default string length limit for model attributes. When running on MySQL,",
      "5:   # this is equal to the default string length in the database as set by Rails.",
      "6:   STRING_LIMIT = 255",
      "8:   extend ActiveSupport::Concern",
      "10:   class_methods do",
      "11:     def validates_default_string_length(*names)",
      "12:       names.each do |name|",
      "13:         validates name, length: { maximum: STRING_LIMIT }",
      "14:       end",
      "15:     end",
      "16:   end",
      "17: end",
      "",
      "---------------"
    ],
    "publify_core/app/models/content.rb||publify_core/app/models/content.rb": [
      "File: publify_core/app/models/content.rb -> publify_core/app/models/content.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: class Content < ApplicationRecord",
      "7:   include ContentBase",
      "9:   belongs_to :user, optional: true, touch: true",
      "10:   belongs_to :blog",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8:   include StringLengthLimit",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39:   serialize :whiteboard",
      "41:   def author=(user)",
      "42:     if user.respond_to?(:login)",
      "43:       self[:author] = user.login",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42:   validates_default_string_length :title, :author, :permalink, :name,",
      "43:                                   :post_type, :text_filter_name",
      "",
      "---------------"
    ],
    "publify_core/app/models/feedback.rb||publify_core/app/models/feedback.rb": [
      "File: publify_core/app/models/feedback.rb -> publify_core/app/models/feedback.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:   include PublifyGuid",
      "12:   include ContentBase",
      "14:   validate :feedback_allowed, on: :create",
      "15:   validates :article, presence: true",
      "17:   before_save :correct_url, :classify_content",
      "18:   before_create :create_guid",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13:   include StringLengthLimit",
      "18:   validates_default_string_length :title, :author, :email, :url, :blog_name,",
      "19:                                   :user_agent, :text_filter_name",
      "21:   validates :ip, length: { maximum: 40 }",
      "",
      "---------------"
    ],
    "publify_core/app/models/ping.rb||publify_core/app/models/ping.rb": [
      "File: publify_core/app/models/ping.rb -> publify_core/app/models/ping.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: # frozen_string_literal: true",
      "3: class Ping < ApplicationRecord",
      "4:   belongs_to :article",
      "5: end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4:   include StringLengthLimit",
      "7:   validates_default_string_length :url",
      "",
      "---------------"
    ],
    "publify_core/app/models/post_type.rb||publify_core/app/models/post_type.rb": [
      "File: publify_core/app/models/post_type.rb -> publify_core/app/models/post_type.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: # frozen_string_literal: true",
      "3: class PostType < ApplicationRecord",
      "4:   validates :name, uniqueness: true",
      "5:   validates :name, presence: true",
      "6:   validate :name_is_not_read",
      "7:   before_save :sanitize_title",
      "9:   def name_is_not_read",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4:   include StringLengthLimit",
      "9:   validates_default_string_length :name, :permalink, :description",
      "",
      "---------------"
    ],
    "publify_core/app/models/redirect.rb||publify_core/app/models/redirect.rb": [
      "File: publify_core/app/models/redirect.rb -> publify_core/app/models/redirect.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: # frozen_string_literal: true",
      "3: class Redirect < ApplicationRecord",
      "4:   belongs_to :content, optional: true, touch: true",
      "5:   belongs_to :blog",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4:   include StringLengthLimit",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "8:   validates :to_path, presence: true",
      "9:   validates :blog, presence: true",
      "11:   def full_to_path",
      "12:     path = to_path",
      "13:     # FIXME: Unify HTTP URI matchers",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13:   validates_default_string_length :from_path, :to_path",
      "",
      "---------------"
    ],
    "publify_core/app/models/resource.rb||publify_core/app/models/resource.rb": [
      "File: publify_core/app/models/resource.rb -> publify_core/app/models/resource.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: require \"carrierwave/orm/activerecord\"",
      "6: class Resource < ApplicationRecord",
      "7:   belongs_to :blog",
      "8:   belongs_to :content, optional: true",
      "10:   mount_uploader :upload, ResourceUploader",
      "11:   validates :upload, presence: true",
      "12: end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7:   include StringLengthLimit",
      "14:   validates_default_string_length :mime",
      "",
      "---------------"
    ],
    "publify_core/app/models/tag.rb||publify_core/app/models/tag.rb": [
      "File: publify_core/app/models/tag.rb -> publify_core/app/models/tag.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: # frozen_string_literal: true",
      "3: class Tag < ApplicationRecord",
      "4:   belongs_to :blog",
      "5:   has_and_belongs_to_many :contents, order: \"created_at DESC\"",
      "7:   validates :name, uniqueness: { scope: :blog_id }",
      "8:   validates :blog, presence: true",
      "9:   validates :name, presence: true",
      "11:   before_validation :ensure_naming_conventions",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4:   include StringLengthLimit",
      "12:   validates_default_string_length :display_name",
      "",
      "---------------"
    ],
    "publify_core/app/models/user.rb||publify_core/app/models/user.rb": [
      "File: publify_core/app/models/user.rb -> publify_core/app/models/user.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "14:   devise :database_authenticatable, :registerable,",
      "15:          :recoverable, :rememberable, :trackable, :validatable",
      "16:   include ConfigManager",
      "18:   before_validation :set_default_profile",
      "20:   validates :login, uniqueness: true",
      "21:   validates :email, :login, presence: true",
      "22:   validates :login, length: { in: 3..40 }",
      "24:   belongs_to :resource, optional: true",
      "25:   has_many :notifications, foreign_key: \"notify_user_id\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17:   include StringLengthLimit",
      "24:   validates_default_string_length :email, :text_filter_name",
      "",
      "---------------"
    ],
    "publify_core/spec/models/blog_spec.rb||publify_core/spec/models/blog_spec.rb": [
      "File: publify_core/spec/models/blog_spec.rb -> publify_core/spec/models/blog_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "113:   describe \"validations\" do",
      "114:     let(:blog) { described_class.new }",
      "116:     it \"requires blog name to not be too long\" do",
      "117:       expect(blog).to validate_length_of(:blog_name).is_at_most(256)",
      "118:     end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:     it \"requires base url to not be too long\" do",
      "117:       expect(blog).to validate_length_of(:base_url).is_at_most(255)",
      "118:     end",
      "",
      "---------------"
    ],
    "publify_core/spec/models/content_spec.rb||publify_core/spec/models/content_spec.rb": [
      "File: publify_core/spec/models/content_spec.rb -> publify_core/spec/models/content_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "144:       it { expect(content.author_name).to eq(author.login) }",
      "145:     end",
      "146:   end",
      "147: end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:   describe \"validations\" do",
      "149:     let(:content) { described_class.new }",
      "151:     it \"requires title to not be too long\" do",
      "152:       expect(content).to validate_length_of(:title).is_at_most(255)",
      "153:     end",
      "155:     it \"requires author to not be too long\" do",
      "156:       expect(content).to validate_length_of(:author).is_at_most(255)",
      "157:     end",
      "159:     it \"requires permalink to not be too long\" do",
      "160:       expect(content).to validate_length_of(:permalink).is_at_most(255)",
      "161:     end",
      "163:     it \"requires name to not be too long\" do",
      "164:       expect(content).to validate_length_of(:name).is_at_most(255)",
      "165:     end",
      "167:     it \"requires post_type to not be too long\" do",
      "168:       expect(content).to validate_length_of(:post_type).is_at_most(255)",
      "169:     end",
      "171:     it \"requires text_filter_name to not be too long\" do",
      "172:       expect(content).to validate_length_of(:text_filter_name).is_at_most(255)",
      "173:     end",
      "174:   end",
      "",
      "---------------"
    ],
    "publify_core/spec/models/feedback_spec.rb||publify_core/spec/models/feedback_spec.rb": [
      "File: publify_core/spec/models/feedback_spec.rb -> publify_core/spec/models/feedback_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "178:       assert !@comment.published?",
      "179:     end",
      "180:   end",
      "181: end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:   describe \"validations\" do",
      "183:     let(:feedback) { described_class.new }",
      "185:     it \"requires title to not be too long\" do",
      "186:       expect(feedback).to validate_length_of(:title).is_at_most(255)",
      "187:     end",
      "189:     it \"requires author to not be too long\" do",
      "190:       expect(feedback).to validate_length_of(:author).is_at_most(255)",
      "191:     end",
      "193:     it \"requires email to not be too long\" do",
      "194:       expect(feedback).to validate_length_of(:email).is_at_most(255)",
      "195:     end",
      "197:     it \"requires url to not be too long\" do",
      "198:       expect(feedback).to validate_length_of(:url).is_at_most(255)",
      "199:     end",
      "201:     it \"requires ip to not be too long\" do",
      "202:       expect(feedback).to validate_length_of(:ip).is_at_most(40)",
      "203:     end",
      "205:     it \"requires blog_name to not be too long\" do",
      "206:       expect(feedback).to validate_length_of(:blog_name).is_at_most(255)",
      "207:     end",
      "209:     it \"requires user_agent to not be too long\" do",
      "210:       expect(feedback).to validate_length_of(:user_agent).is_at_most(255)",
      "211:     end",
      "213:     it \"requires text_filter_name to not be too long\" do",
      "214:       expect(feedback).to validate_length_of(:text_filter_name).is_at_most(255)",
      "215:     end",
      "216:   end",
      "",
      "---------------"
    ],
    "publify_core/spec/models/ping_spec.rb||publify_core/spec/models/ping_spec.rb": [
      "File: publify_core/spec/models/ping_spec.rb -> publify_core/spec/models/ping_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: require \"rails_helper\"",
      "5: describe Ping, type: :model do",
      "6: end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6:   describe \"validations\" do",
      "7:     let(:ping) { described_class.new }",
      "9:     it \"requires url to not be too long\" do",
      "10:       expect(ping).to validate_length_of(:url).is_at_most(255)",
      "11:     end",
      "12:   end",
      "",
      "---------------"
    ],
    "publify_core/spec/models/post_type_spec.rb||publify_core/spec/models/post_type_spec.rb": [
      "File: publify_core/spec/models/post_type_spec.rb -> publify_core/spec/models/post_type_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:     expect(test_type).not_to be_valid",
      "30:     expect(test_type.errors[:name]).to eq([\"has already been taken\"])",
      "31:   end",
      "32: end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:   describe \"validations\" do",
      "34:     let(:post_type) { described_class.new }",
      "36:     it \"requires name to not be too long\" do",
      "37:       expect(post_type).to validate_length_of(:name).is_at_most(255)",
      "38:     end",
      "40:     it \"requires permalink to not be too long\" do",
      "41:       expect(post_type).to validate_length_of(:permalink).is_at_most(255)",
      "42:     end",
      "44:     it \"requires description to not be too long\" do",
      "45:       expect(post_type).to validate_length_of(:description).is_at_most(255)",
      "46:     end",
      "47:   end",
      "",
      "---------------"
    ],
    "publify_core/spec/models/redirect_spec.rb||publify_core/spec/models/redirect_spec.rb": [
      "File: publify_core/spec/models/redirect_spec.rb -> publify_core/spec/models/redirect_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "20:       expect(redirect.from_url).to eq \"#{blog.base_url}/right/here\"",
      "21:     end",
      "22:   end",
      "23: end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:   describe \"validations\" do",
      "25:     let(:redirect) { described_class.new }",
      "27:     it \"requires from_path to not be too long\" do",
      "28:       expect(redirect).to validate_length_of(:from_path).is_at_most(255)",
      "29:     end",
      "31:     it \"requires to_path to not be too long\" do",
      "32:       expect(redirect).to validate_length_of(:to_path).is_at_most(255)",
      "33:     end",
      "34:   end",
      "",
      "---------------"
    ],
    "publify_core/spec/models/resource_spec.rb||publify_core/spec/models/resource_spec.rb": [
      "File: publify_core/spec/models/resource_spec.rb -> publify_core/spec/models/resource_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:       expect(img_resource.upload_url(:thumb)).to eq \"/files/resource/1/thumb_testfile.png\"",
      "34:     end",
      "35:   end",
      "36: end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37:   describe \"validations\" do",
      "38:     let(:resource) { described_class.new }",
      "40:     it \"requires mime to not be too long\" do",
      "41:       expect(resource).to validate_length_of(:mime).is_at_most(255)",
      "42:     end",
      "43:   end",
      "",
      "---------------"
    ],
    "publify_core/spec/models/tag_spec.rb||publify_core/spec/models/tag_spec.rb": [
      "File: publify_core/spec/models/tag_spec.rb -> publify_core/spec/models/tag_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:     expect(test_tag.errors[:name]).to eq([\"has already been taken\"])",
      "13:   end",
      "16:     it \"requires name to be present\" do",
      "18:     end",
      "19:   end",
      "",
      "[Removed Lines]",
      "15:   describe \"validation\" do",
      "17:       expect(blog.tags.build(name: \"\")).not_to be_valid",
      "",
      "[Added Lines]",
      "15:   describe \"validations\" do",
      "16:     let(:tag) { described_class.new }",
      "19:       expect(tag).to validate_presence_of(:name)",
      "20:     end",
      "22:     it \"requires display_name to not be too long\" do",
      "23:       expect(tag).to validate_length_of(:display_name).is_at_most(255)",
      "",
      "---------------"
    ],
    "publify_core/spec/models/user_spec.rb||publify_core/spec/models/user_spec.rb": [
      "File: publify_core/spec/models/user_spec.rb -> publify_core/spec/models/user_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:   describe \"validations\" do",
      "46:     let(:user) { described_class.new }",
      "48:     it \"requires first name to not be too long\" do",
      "49:       expect(user).to validate_length_of(:firstname).is_at_most(256)",
      "50:     end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:     it \"requires email to not be too long\" do",
      "49:       expect(user).to validate_length_of(:email).is_at_most(255)",
      "50:     end",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73:       expect(user).to validate_presence_of(:login)",
      "74:     end",
      "76:     it \"does not allow duplicate logins when updating a user\" do",
      "77:       create :user, login: \"foo\"",
      "78:       bar = create :user, login: \"bar\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80:     it \"requires text_filter_name to not be too long\" do",
      "81:       expect(user).to validate_length_of(:text_filter_name).is_at_most(255)",
      "82:     end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3674ca8814b7a49d6b56d84cea358e26bf5af299",
      "candidate_info": {
        "commit_hash": "3674ca8814b7a49d6b56d84cea358e26bf5af299",
        "repo": "publify/publify",
        "commit_url": "https://github.com/publify/publify/commit/3674ca8814b7a49d6b56d84cea358e26bf5af299",
        "files": [
          "publify_core/app/models/config_manager.rb"
        ],
        "message": "Use preferred method of taking action when ConfigManager is included\n\nModule#included is preferred over #append_features",
        "before_after_code_files": [
          "publify_core/app/models/config_manager.rb||publify_core/app/models/config_manager.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/publify/publify/pull/1077"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "publify_core/app/models/config_manager.rb||publify_core/app/models/config_manager.rb": [
          "File: publify_core/app/models/config_manager.rb -> publify_core/app/models/config_manager.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # frozen_string_literal: true",
          "3: module ConfigManager",
          "6:     base.extend(ClassMethods)",
          "7:   end",
          "",
          "[Removed Lines]",
          "4:   def self.append_features(base)",
          "5:     super",
          "",
          "[Added Lines]",
          "4:   def self.included(base)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29a5837c29620e33857d7a5afce01384e3f8e41a",
      "candidate_info": {
        "commit_hash": "29a5837c29620e33857d7a5afce01384e3f8e41a",
        "repo": "publify/publify",
        "commit_url": "https://github.com/publify/publify/commit/29a5837c29620e33857d7a5afce01384e3f8e41a",
        "files": [
          "publify_core/app/models/user.rb",
          "publify_core/spec/models/user_spec.rb"
        ],
        "message": "Validate length of user's name attribute\n\nThis attribute is a text column, so it could be very long even in a\nMySQL database. Limit it to a generous length.",
        "before_after_code_files": [
          "publify_core/app/models/user.rb||publify_core/app/models/user.rb",
          "publify_core/spec/models/user_spec.rb||publify_core/spec/models/user_spec.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/publify/publify/pull/1077"
        ],
        "olp_code_files": {
          "patch": [
            "publify_core/app/models/user.rb||publify_core/app/models/user.rb",
            "publify_core/spec/models/user_spec.rb||publify_core/spec/models/user_spec.rb"
          ],
          "candidate": [
            "publify_core/app/models/user.rb||publify_core/app/models/user.rb",
            "publify_core/spec/models/user_spec.rb||publify_core/spec/models/user_spec.rb"
          ]
        }
      },
      "candidate_diff": {
        "publify_core/app/models/user.rb||publify_core/app/models/user.rb": [
          "File: publify_core/app/models/user.rb -> publify_core/app/models/user.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:   validates :email, :login, presence: true",
          "23:   validates :login, length: { in: 3..40 }",
          "24:   validates_default_string_length :email, :text_filter_name",
          "26:   belongs_to :resource, optional: true",
          "27:   has_many :notifications, foreign_key: \"notify_user_id\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:   validates :name, length: { maximum: 2048 }",
          "",
          "---------------"
        ],
        "publify_core/spec/models/user_spec.rb||publify_core/spec/models/user_spec.rb": [
          "File: publify_core/spec/models/user_spec.rb -> publify_core/spec/models/user_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:       expect(user).to validate_length_of(:email).is_at_most(255)",
          "50:     end",
          "52:     it \"requires first name to not be too long\" do",
          "53:       expect(user).to validate_length_of(:firstname).is_at_most(256)",
          "54:     end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     it \"requires name to not be too long\" do",
          "53:       expect(user).to validate_length_of(:name).is_at_most(2048)",
          "54:     end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68599ec27f3bd410544eb9e7eaa174e849ff4a26",
      "candidate_info": {
        "commit_hash": "68599ec27f3bd410544eb9e7eaa174e849ff4a26",
        "repo": "publify/publify",
        "commit_url": "https://github.com/publify/publify/commit/68599ec27f3bd410544eb9e7eaa174e849ff4a26",
        "files": [
          "publify_core/app/models/comment.rb",
          "publify_core/app/models/feedback.rb",
          "publify_core/app/models/trackback.rb",
          "publify_core/spec/models/comment_spec.rb",
          "publify_core/spec/models/trackback_spec.rb"
        ],
        "message": "Refactor Feedback validations\n\nThis moves most of the implementation up to the Feedback base class,\nensures that checks on allowed feedback only happen if article is set,\nand ensures that at most one error message is set on article.",
        "before_after_code_files": [
          "publify_core/app/models/comment.rb||publify_core/app/models/comment.rb",
          "publify_core/app/models/feedback.rb||publify_core/app/models/feedback.rb",
          "publify_core/app/models/trackback.rb||publify_core/app/models/trackback.rb",
          "publify_core/spec/models/comment_spec.rb||publify_core/spec/models/comment_spec.rb",
          "publify_core/spec/models/trackback_spec.rb||publify_core/spec/models/trackback_spec.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/publify/publify/pull/1077"
        ],
        "olp_code_files": {
          "patch": [
            "publify_core/app/models/feedback.rb||publify_core/app/models/feedback.rb"
          ],
          "candidate": [
            "publify_core/app/models/feedback.rb||publify_core/app/models/feedback.rb"
          ]
        }
      },
      "candidate_diff": {
        "publify_core/app/models/comment.rb||publify_core/app/models/comment.rb": [
          "File: publify_core/app/models/comment.rb -> publify_core/app/models/comment.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   private",
          "43:   def article_allows_feedback?",
          "48:   end",
          "50:   def blog_allows_feedback?",
          "51:     true",
          "52:   end",
          "56:   end",
          "58:   def originator",
          "",
          "[Removed Lines]",
          "44:     return true if article.allow_comments?",
          "46:     errors.add(:article, \"Article is not open to comments\")",
          "47:     false",
          "54:   def check_article_closed_for_feedback",
          "55:     errors.add(:article, \"Comment are closed\") if article.comments_closed?",
          "",
          "[Added Lines]",
          "44:     article.allow_comments?",
          "51:   def article_closed_for_feedback?",
          "52:     article.comments_closed?",
          "",
          "---------------"
        ],
        "publify_core/app/models/feedback.rb||publify_core/app/models/feedback.rb": [
          "File: publify_core/app/models/feedback.rb -> publify_core/app/models/feedback.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   include PublifyGuid",
          "12:   include ContentBase",
          "16:   validates :article, presence: true",
          "18:   before_save :correct_url, :classify_content",
          "",
          "[Removed Lines]",
          "14:   validate :article_allows_this_feedback, on: :create",
          "15:   validate :feedback_not_closed, on: :create",
          "",
          "[Added Lines]",
          "14:   validate :feedback_allowed, on: :create",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     self.url = \"http://#{url}\" unless %r{^https?://}.match?(url)",
          "100:   end",
          "104:   end",
          "106:   def akismet_options",
          "",
          "[Removed Lines]",
          "102:   def article_allows_this_feedback",
          "103:     article && blog_allows_feedback? && article_allows_feedback?",
          "",
          "[Added Lines]",
          "101:   def feedback_allowed",
          "102:     return unless article",
          "104:     unless blog_allows_feedback?",
          "105:       errors.add(:base, \"#{plural_model_name} are disabled\")",
          "106:       return",
          "107:     end",
          "109:     unless article_allows_feedback?",
          "110:       errors.add(:article, \"Article is not open for #{plural_model_name.downcase}\")",
          "111:       return",
          "112:     end",
          "114:     errors.add(:article, \"#{plural_model_name} are closed\") if article_closed_for_feedback?",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:     end",
          "201:   end",
          "207:   def send_notifications",
          "208:     nil",
          "209:   end",
          "",
          "[Removed Lines]",
          "203:   def feedback_not_closed",
          "204:     check_article_closed_for_feedback",
          "205:   end",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:   def blog_id",
          "243:     article.blog_id if article.present?",
          "244:   end",
          "245: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:   def plural_model_name",
          "254:     self.class.model_name.human.pluralize",
          "255:   end",
          "",
          "---------------"
        ],
        "publify_core/app/models/trackback.rb||publify_core/app/models/trackback.rb": [
          "File: publify_core/app/models/trackback.rb -> publify_core/app/models/trackback.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     end",
          "15:   end",
          "35:   def originator",
          "36:     blog_name",
          "37:   end",
          "",
          "[Removed Lines]",
          "17:   def article_allows_feedback?",
          "18:     return true if article.allow_pings?",
          "20:     errors.add(:article, \"Article is not pingable\")",
          "21:     false",
          "22:   end",
          "24:   def blog_allows_feedback?",
          "25:     return true unless blog.global_pings_disable",
          "27:     errors.add(:base, \"Pings are disabled\")",
          "28:     false",
          "29:   end",
          "31:   def check_article_closed_for_feedback",
          "32:     errors.add(:article, \"Pings are closed\") if article.pings_closed?",
          "33:   end",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   def feed_title",
          "48:     \"Trackback from #{blog_name}: #{title} on #{article.title}\"",
          "49:   end",
          "50: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:   private",
          "35:   def article_allows_feedback?",
          "36:     article.allow_pings?",
          "37:   end",
          "39:   def blog_allows_feedback?",
          "40:     !blog.global_pings_disable",
          "41:   end",
          "43:   def article_closed_for_feedback?",
          "44:     article.pings_closed?",
          "45:   end",
          "",
          "---------------"
        ],
        "publify_core/spec/models/comment_spec.rb||publify_core/spec/models/comment_spec.rb": [
          "File: publify_core/spec/models/comment_spec.rb -> publify_core/spec/models/comment_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   let(:published_article) { build_stubbed(:article, published_at: 1.hour.ago, blog: blog) }",
          "14:   end",
          "16:   describe \"#permalink_url\" do",
          "",
          "[Removed Lines]",
          "11:   def valid_comment(options = {})",
          "12:     Comment.new({ author: \"Bob\", article: published_article, body: \"nice post\",",
          "13:                   ip: \"1.2.3.4\" }.merge(options))",
          "",
          "[Added Lines]",
          "11:   describe \"validations\" do",
          "12:     let(:comment) { described_class.new }",
          "14:     it \"allows an article with open comment window\" do",
          "15:       article = Article.new(blog: blog, allow_comments: true, state: \"published\",",
          "16:                             published_at: 1.day.ago)",
          "18:       expect(comment).to allow_value(article).for(:article)",
          "19:     end",
          "21:     it \"requires article comment window to be open\" do",
          "22:       article = Article.new(blog: blog, allow_comments: true)",
          "24:       expect(comment).not_to allow_value(article).for(:article).",
          "25:         with_message(\"Comments are closed\")",
          "26:     end",
          "28:     it \"requires article to be open to comments\" do",
          "29:       article = Article.new(blog: blog, allow_comments: false)",
          "31:       expect(comment).not_to allow_value(article).for(:article).",
          "32:         with_message(\"Article is not open for comments\")",
          "33:     end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:   end",
          "90:   describe \"#classify_content\" do",
          "91:     it \"rejects spam rbl\" do",
          "92:       comment = valid_comment(",
          "93:         author: \"Spammer\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     def valid_comment(options = {})",
          "112:       Comment.new({ author: \"Bob\", article: published_article, body: \"nice post\",",
          "113:                     ip: \"1.2.3.4\" }.merge(options))",
          "114:     end",
          "",
          "---------------"
        ],
        "publify_core/spec/models/trackback_spec.rb||publify_core/spec/models/trackback_spec.rb": [
          "File: publify_core/spec/models/trackback_spec.rb -> publify_core/spec/models/trackback_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: require \"publify_core/testing_support/dns_mock\"",
          "6: describe Trackback, type: :model do",
          "54:   end",
          "59:   end",
          "60: end",
          "",
          "[Removed Lines]",
          "7:   let(:article) { create(:article) }",
          "9:   before do",
          "10:     @blog = create(:blog)",
          "11:     @blog.sp_global = true",
          "12:     @blog.default_moderate_comments = false",
          "13:     @blog.save!",
          "14:   end",
          "16:   it \"Incomplete trackbacks should not be accepted\" do",
          "17:     tb = described_class.new(blog_name: \"Blog name\",",
          "18:                              title: \"Title\",",
          "19:                              excerpt: \"Excerpt\",",
          "20:                              article_id: create(:article).id)",
          "21:     expect(tb).not_to be_valid",
          "22:     expect(tb.errors[\"url\"]).to be_any",
          "23:   end",
          "25:   it \"A valid trackback should be accepted\" do",
          "26:     tb = described_class.new(blog_name: \"Blog name\",",
          "27:                              title: \"Title\",",
          "28:                              url: \"http://foo.com\",",
          "29:                              excerpt: \"Excerpt\",",
          "30:                              article_id: create(:article).id)",
          "31:     expect(tb).to be_valid",
          "32:     tb.save",
          "33:     expect(tb.guid.size).to be > 15",
          "34:     expect(tb).not_to be_spam",
          "35:   end",
          "37:   it \"Trackbacks with a spammy link in the excerpt should be rejected\" do",
          "38:     tb = article.trackbacks.",
          "39:       build(ham_params.merge(excerpt: '<a href=\"http://chinaaircatering.com\">spam</a>'))",
          "40:     tb.classify_content",
          "41:     expect(tb).to be_spammy",
          "42:   end",
          "44:   it \"Trackbacks with a spammy source url should be rejected\" do",
          "45:     tb = article.trackbacks.build(ham_params.merge(url: \"http://www.chinaircatering.com\"))",
          "46:     tb.classify_content",
          "47:     expect(tb).to be_spammy",
          "48:   end",
          "50:   it \"Trackbacks from a spammy ip address should be rejected\" do",
          "51:     tb = article.trackbacks.build(ham_params.merge(ip: \"212.42.230.207\"))",
          "52:     tb.classify_content",
          "53:     expect(tb).to be_spammy",
          "56:   def ham_params",
          "57:     { blog_name: \"Blog\", title: \"trackback\", excerpt: \"bland\",",
          "58:       url: \"http://notaspammer.com\", ip: \"212.42.230.206\" }",
          "",
          "[Added Lines]",
          "7:   describe \"validations\" do",
          "8:     let(:blog) { build_stubbed :blog }",
          "9:     let(:trackback) { described_class.new }",
          "11:     it \"allows an article with open trackback window\" do",
          "12:       article = Article.new(blog: blog, allow_pings: true, state: \"published\",",
          "13:                             published_at: 1.day.ago)",
          "15:       expect(trackback).to allow_value(article).for(:article)",
          "16:     end",
          "18:     it \"requires article trackback window to be open\" do",
          "19:       article = Article.new(blog: blog, allow_pings: true)",
          "21:       expect(trackback).not_to allow_value(article).for(:article).",
          "22:         with_message(\"Trackbacks are closed\")",
          "23:     end",
          "25:     it \"requires article to be open to trackback\" do",
          "26:       article = Article.new(blog: blog, allow_pings: false)",
          "28:       expect(trackback).not_to allow_value(article).for(:article).",
          "29:         with_message(\"Article is not open for trackbacks\")",
          "30:     end",
          "33:   describe \"spam detection\" do",
          "34:     let(:article) { create(:article) }",
          "36:     before do",
          "37:       @blog = create(:blog)",
          "38:       @blog.sp_global = true",
          "39:       @blog.default_moderate_comments = false",
          "40:       @blog.save!",
          "41:     end",
          "43:     it \"Incomplete trackbacks should not be accepted\" do",
          "44:       tb = described_class.new(blog_name: \"Blog name\",",
          "45:                                title: \"Title\",",
          "46:                                excerpt: \"Excerpt\",",
          "47:                                article_id: create(:article).id)",
          "48:       expect(tb).not_to be_valid",
          "49:       expect(tb.errors[\"url\"]).to be_any",
          "50:     end",
          "52:     it \"A valid trackback should be accepted\" do",
          "53:       tb = described_class.new(blog_name: \"Blog name\",",
          "54:                                title: \"Title\",",
          "55:                                url: \"http://foo.com\",",
          "56:                                excerpt: \"Excerpt\",",
          "57:                                article_id: create(:article).id)",
          "58:       expect(tb).to be_valid",
          "59:       tb.save",
          "60:       expect(tb.guid.size).to be > 15",
          "61:       expect(tb).not_to be_spam",
          "62:     end",
          "64:     it \"Trackbacks with a spammy link in the excerpt should be rejected\" do",
          "65:       tb = article.trackbacks.",
          "66:         build(ham_params.merge(excerpt: '<a href=\"http://chinaaircatering.com\">spam</a>'))",
          "67:       tb.classify_content",
          "68:       expect(tb).to be_spammy",
          "69:     end",
          "71:     it \"Trackbacks with a spammy source url should be rejected\" do",
          "72:       tb = article.trackbacks.build(ham_params.merge(url: \"http://www.chinaircatering.com\"))",
          "73:       tb.classify_content",
          "74:       expect(tb).to be_spammy",
          "75:     end",
          "77:     it \"Trackbacks from a spammy ip address should be rejected\" do",
          "78:       tb = article.trackbacks.build(ham_params.merge(ip: \"212.42.230.207\"))",
          "79:       tb.classify_content",
          "80:       expect(tb).to be_spammy",
          "81:     end",
          "83:     def ham_params",
          "84:       { blog_name: \"Blog\", title: \"trackback\", excerpt: \"bland\",",
          "85:         url: \"http://notaspammer.com\", ip: \"212.42.230.206\" }",
          "86:     end",
          "",
          "---------------"
        ]
      }
    }
  ]
}