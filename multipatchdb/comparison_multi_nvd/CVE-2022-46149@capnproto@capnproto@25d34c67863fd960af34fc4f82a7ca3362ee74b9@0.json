{
  "cve_id": "CVE-2022-46149",
  "cve_desc": "Cap'n Proto is a data interchange format and remote procedure call (RPC) system. Cap'n Proro prior to versions 0.7.1, 0.8.1, 0.9.2, and 0.10.3, as well as versions of Cap'n Proto's Rust implementation prior to 0.13.7, 0.14.11, and 0.15.2 are vulnerable to out-of-bounds read due to logic error handling list-of-list. This issue may lead someone to remotely segfault a peer by sending it a malicious message, if the victim performs certain actions on a list-of-pointer type. Exfiltration of memory is possible if the victim performs additional certain actions on a list-of-pointer type. To be vulnerable, an application must perform a specific sequence of actions, described in the GitHub Security Advisory. The bug is present in inlined code, therefore the fix will require rebuilding dependent applications. Cap'n Proto has C++ fixes available in versions 0.7.1, 0.8.1, 0.9.2, and 0.10.3. The `capnp` Rust crate has fixes available in versions 0.13.7, 0.14.11, and 0.15.2.",
  "repo": "capnproto/capnproto",
  "patch_hash": "25d34c67863fd960af34fc4f82a7ca3362ee74b9",
  "patch_info": {
    "commit_hash": "25d34c67863fd960af34fc4f82a7ca3362ee74b9",
    "repo": "capnproto/capnproto",
    "commit_url": "https://github.com/capnproto/capnproto/commit/25d34c67863fd960af34fc4f82a7ca3362ee74b9",
    "files": [
      "c++/src/capnp/layout.c++",
      "c++/src/capnp/layout.h"
    ],
    "message": "Apply data offset for list-of-pointers at access time rather than ListReader creation time.\n\nBaking this offset into `ptr` reduced ops needed at access time but made the interpretation of `ptr` inconsistent depending on what type of list was expected.",
    "before_after_code_files": [
      "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
      "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
    ]
  },
  "patch_diff": {
    "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
      "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
      "--- Hunk 1 ---",
      "[Context before]",
      "2360:             break;",
      "2362:           case ElementSize::POINTER:",
      "2367:             KJ_REQUIRE(tag->structRef.ptrCount.get() > ZERO * POINTERS,",
      "2368:                        \"Schema mismatch: Expected a pointer list, but got a list of data-only \"",
      "2369:                        \"structs.\") {",
      "",
      "[Removed Lines]",
      "2366:             ptr += tag->structRef.dataSize.get();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "c++/src/capnp/layout.h||c++/src/capnp/layout.h": [
      "File: c++/src/capnp/layout.h -> c++/src/capnp/layout.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1227: }",
      "1229: inline PointerReader ListReader::getPointerElement(ElementCount index) const {",
      "1230:   return PointerReader(segment, capTable, reinterpret_cast<const WirePointer*>(",
      "1232: }",
      "",
      "[Removed Lines]",
      "1231:       ptr + upgradeBound<uint64_t>(index) * step / BITS_PER_BYTE), nestingLimit);",
      "",
      "[Added Lines]",
      "1233:   auto offset = structDataSize / BITS_PER_BYTE;",
      "1235:       ptr + offset + upgradeBound<uint64_t>(index) * step / BITS_PER_BYTE), nestingLimit);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bb30b640c54e3f1c9ba2f5a826be3c8c16457b7c",
      "candidate_info": {
        "commit_hash": "bb30b640c54e3f1c9ba2f5a826be3c8c16457b7c",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/bb30b640c54e3f1c9ba2f5a826be3c8c16457b7c",
        "files": [
          "c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h"
        ],
        "message": "Apply data offset for list-of-pointers at access time rather than ListReader creation time.\n\nBaking this offset into `ptr` reduced ops needed at access time but made the interpretation of `ptr` inconsistent depending on what type of list was expected.",
        "before_after_code_files": [
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
            "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
          ],
          "candidate": [
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
            "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "1999:             break;",
          "2001:           case ElementSize::POINTER:",
          "2006:             KJ_REQUIRE(tag->structRef.ptrCount.get() > 0 * POINTERS,",
          "2007:                        \"Expected a pointer list, but got a list of data-only structs.\") {",
          "2008:               goto useDefault;",
          "",
          "[Removed Lines]",
          "2005:             ptr += tag->structRef.dataSize.get();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.h||c++/src/capnp/layout.h": [
          "File: c++/src/capnp/layout.h -> c++/src/capnp/layout.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1052: }",
          "1054: inline PointerReader ListReader::getPointerElement(ElementCount index) const {",
          "1057: }",
          "",
          "[Removed Lines]",
          "1055:   return PointerReader(segment,",
          "1056:       reinterpret_cast<const WirePointer*>(ptr + index * step / BITS_PER_BYTE), nestingLimit);",
          "",
          "[Added Lines]",
          "1058:   auto offset = structDataSize / BITS_PER_BYTE;",
          "1059:   return PointerReader(segment, reinterpret_cast<const WirePointer*>(",
          "1060:       ptr + offset + index * step / BITS_PER_BYTE), nestingLimit);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23f9c59275c839da8e8b94ffe9194c49e66e0bd0",
      "candidate_info": {
        "commit_hash": "23f9c59275c839da8e8b94ffe9194c49e66e0bd0",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/23f9c59275c839da8e8b94ffe9194c49e66e0bd0",
        "files": [
          "c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h"
        ],
        "message": "Apply data offset for list-of-pointers at access time rather than ListReader creation time.\n\nBaking this offset into `ptr` reduced ops needed at access time but made the interpretation of `ptr` inconsistent depending on what type of list was expected.",
        "before_after_code_files": [
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
            "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
          ],
          "candidate": [
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
            "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "2333:             break;",
          "2335:           case ElementSize::POINTER:",
          "2340:             KJ_REQUIRE(tag->structRef.ptrCount.get() > ZERO * POINTERS,",
          "2341:                        \"Expected a pointer list, but got a list of data-only structs.\") {",
          "2342:               goto useDefault;",
          "",
          "[Removed Lines]",
          "2339:             ptr += tag->structRef.dataSize.get();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.h||c++/src/capnp/layout.h": [
          "File: c++/src/capnp/layout.h -> c++/src/capnp/layout.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1227: }",
          "1229: inline PointerReader ListReader::getPointerElement(ElementCount index) const {",
          "1230:   return PointerReader(segment, capTable, reinterpret_cast<const WirePointer*>(",
          "1232: }",
          "",
          "[Removed Lines]",
          "1231:       ptr + upgradeBound<uint64_t>(index) * step / BITS_PER_BYTE), nestingLimit);",
          "",
          "[Added Lines]",
          "1233:   auto offset = structDataSize / BITS_PER_BYTE;",
          "1235:       ptr + offset + upgradeBound<uint64_t>(index) * step / BITS_PER_BYTE), nestingLimit);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14adbb11e98db714f09c30b8c40415325a55157a",
      "candidate_info": {
        "commit_hash": "14adbb11e98db714f09c30b8c40415325a55157a",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/14adbb11e98db714f09c30b8c40415325a55157a",
        "files": [
          "c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h"
        ],
        "message": "Apply data offset for list-of-pointers at access time rather than ListReader creation time.\n\nBaking this offset into `ptr` reduced ops needed at access time but made the interpretation of `ptr` inconsistent depending on what type of list was expected.",
        "before_after_code_files": [
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
            "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
          ],
          "candidate": [
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
            "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "2322:             break;",
          "2324:           case ElementSize::POINTER:",
          "2329:             KJ_REQUIRE(tag->structRef.ptrCount.get() > ZERO * POINTERS,",
          "2330:                        \"Expected a pointer list, but got a list of data-only structs.\") {",
          "2331:               goto useDefault;",
          "",
          "[Removed Lines]",
          "2328:             ptr += tag->structRef.dataSize.get();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.h||c++/src/capnp/layout.h": [
          "File: c++/src/capnp/layout.h -> c++/src/capnp/layout.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1235: }",
          "1237: inline PointerReader ListReader::getPointerElement(ElementCount index) const {",
          "1238:   return PointerReader(segment, capTable, reinterpret_cast<const WirePointer*>(",
          "1240: }",
          "",
          "[Removed Lines]",
          "1239:       ptr + upgradeBound<uint64_t>(index) * step / BITS_PER_BYTE), nestingLimit);",
          "",
          "[Added Lines]",
          "1241:   auto offset = structDataSize / BITS_PER_BYTE;",
          "1243:       ptr + offset + upgradeBound<uint64_t>(index) * step / BITS_PER_BYTE), nestingLimit);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5cc6b387cb62d9ea9d23e38cd4d81e374dbfd9bf",
      "candidate_info": {
        "commit_hash": "5cc6b387cb62d9ea9d23e38cd4d81e374dbfd9bf",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/5cc6b387cb62d9ea9d23e38cd4d81e374dbfd9bf",
        "files": [
          "c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h"
        ],
        "message": "Apply data offset for list-of-pointers at access time rather than ListReader creation time.\n\nBaking this offset into `ptr` reduced ops needed at access time but made the interpretation of `ptr` inconsistent depending on what type of list was expected.",
        "before_after_code_files": [
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
            "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
          ],
          "candidate": [
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
            "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "2318:             break;",
          "2320:           case ElementSize::POINTER:",
          "2325:             KJ_REQUIRE(tag->structRef.ptrCount.get() > ZERO * POINTERS,",
          "2326:                        \"Expected a pointer list, but got a list of data-only structs.\") {",
          "2327:               goto useDefault;",
          "",
          "[Removed Lines]",
          "2324:             ptr += tag->structRef.dataSize.get();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.h||c++/src/capnp/layout.h": [
          "File: c++/src/capnp/layout.h -> c++/src/capnp/layout.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1227: }",
          "1229: inline PointerReader ListReader::getPointerElement(ElementCount index) const {",
          "1230:   return PointerReader(segment, capTable, reinterpret_cast<const WirePointer*>(",
          "1232: }",
          "",
          "[Removed Lines]",
          "1231:       ptr + upgradeBound<uint64_t>(index) * step / BITS_PER_BYTE), nestingLimit);",
          "",
          "[Added Lines]",
          "1233:   auto offset = structDataSize / BITS_PER_BYTE;",
          "1235:       ptr + offset + upgradeBound<uint64_t>(index) * step / BITS_PER_BYTE), nestingLimit);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1bf490174ffb0b7d4b278b08c1da6fd01802e927",
      "candidate_info": {
        "commit_hash": "1bf490174ffb0b7d4b278b08c1da6fd01802e927",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/1bf490174ffb0b7d4b278b08c1da6fd01802e927",
        "files": [
          "c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h"
        ],
        "message": "Apply data offset for list-of-pointers at access time rather than ListReader creation time.\n\nBaking this offset into `ptr` reduced ops needed at access time but made the interpretation of `ptr` inconsistent depending on what type of list was expected.",
        "before_after_code_files": [
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
            "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
          ],
          "candidate": [
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
            "c++/src/capnp/layout.h||c++/src/capnp/layout.h"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "2333:             break;",
          "2335:           case ElementSize::POINTER:",
          "2340:             KJ_REQUIRE(tag->structRef.ptrCount.get() > ZERO * POINTERS,",
          "2341:                        \"Expected a pointer list, but got a list of data-only structs.\") {",
          "2342:               goto useDefault;",
          "",
          "[Removed Lines]",
          "2339:             ptr += tag->structRef.dataSize.get();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.h||c++/src/capnp/layout.h": [
          "File: c++/src/capnp/layout.h -> c++/src/capnp/layout.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1227: }",
          "1229: inline PointerReader ListReader::getPointerElement(ElementCount index) const {",
          "1230:   return PointerReader(segment, capTable, reinterpret_cast<const WirePointer*>(",
          "1232: }",
          "",
          "[Removed Lines]",
          "1231:       ptr + upgradeBound<uint64_t>(index) * step / BITS_PER_BYTE), nestingLimit);",
          "",
          "[Added Lines]",
          "1233:   auto offset = structDataSize / BITS_PER_BYTE;",
          "1235:       ptr + offset + upgradeBound<uint64_t>(index) * step / BITS_PER_BYTE), nestingLimit);",
          "",
          "---------------"
        ]
      }
    }
  ]
}