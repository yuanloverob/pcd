{
  "cve_id": "CVE-2022-24815",
  "cve_desc": "JHipster is a development platform to quickly generate, develop, & deploy modern web applications & microservice architectures. SQL Injection vulnerability in entities for applications generated with the option \"reactive with Spring WebFlux\" enabled and an SQL database using r2dbc. Applications created without \"reactive with Spring WebFlux\" and applications with NoSQL databases are not affected. Users who have generated a microservice Gateway using the affected version may be impacted as Gateways are reactive by default. Currently, SQL injection is possible in the findAllBy(Pageable pageable, Criteria criteria) method of an entity repository class generated in these applications as the where clause using Criteria for queries are not sanitized and user input is passed on as it is by the criteria. This issue has been patched in v7.8.1. Users unable to upgrade should be careful when combining criterias and conditions as the root of the issue lies in the `EntityManager.java` class when creating the where clause via `Conditions.just(criteria.toString())`. `just` accepts the literal string provided. Criteria's `toString` method returns a plain string and this combination is vulnerable to sql injection as the string is not sanitized and will contain whatever used passed as input using any plain SQL.",
  "repo": "jhipster/generator-jhipster",
  "patch_hash": "c220a210fd7742c53eea72bd5fadbb96220faa98",
  "patch_info": {
    "commit_hash": "c220a210fd7742c53eea72bd5fadbb96220faa98",
    "repo": "jhipster/generator-jhipster",
    "commit_url": "https://github.com/jhipster/generator-jhipster/commit/c220a210fd7742c53eea72bd5fadbb96220faa98",
    "files": [
      "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
      "generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs",
      "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs"
    ],
    "message": "use conditions instead of criteria as workaround\n\ncloses #18269",
    "before_after_code_files": [
      "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
      "generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs",
      "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs||generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs"
    ]
  },
  "patch_diff": {
    "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs": [
      "File: generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs -> generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: import org.springframework.data.r2dbc.repository.support.SimpleR2dbcRepository;",
      "51: import org.springframework.data.relational.core.query.Criteria;",
      "52: import org.springframework.data.relational.core.sql.Column;",
      "53: import org.springframework.data.relational.core.sql.Expression;",
      "54: import org.springframework.data.relational.core.sql.Select;",
      "55: import org.springframework.data.relational.core.sql.SelectBuilder.SelectFromAndJoin<% if (reactiveEagerRelations.length > 0) { %>Condition<% } %>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53: import org.springframework.data.relational.core.sql.Comparison;",
      "54: import org.springframework.data.relational.core.sql.Condition;",
      "55: import org.springframework.data.relational.core.sql.Conditions;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "122:     @Override",
      "123:     public Flux<<%= persistClass %>> findAllBy(Pageable pageable) {",
      "125:     }",
      "133:         List<Expression> columns = <%= entityClass %>SqlHelper.getColumns(entityTable, EntityManager.ENTITY_ALIAS);",
      "134: <%_ reactiveEagerRelations.forEach(function(rel) { _%>",
      "135:         columns.addAll(<%= rel.otherEntityNameCapitalized %>SqlHelper.getColumns(<%= rel.relationshipName %>Table, \"<%= rel.relationshipName %>\"));",
      "",
      "[Removed Lines]",
      "124:         return findAllBy(pageable, null);",
      "127:     @Override",
      "128:     public Flux<<%= persistClass %>> findAllBy(Pageable pageable, Criteria criteria) {",
      "129:         return createQuery(pageable, criteria).all();",
      "130:     }",
      "132:     RowsFetchSpec<<%= persistClass %>> createQuery(Pageable pageable, Criteria criteria) {",
      "",
      "[Added Lines]",
      "127:         return createQuery(pageable, null).all();",
      "130:     RowsFetchSpec<<%= persistClass %>> createQuery(Pageable pageable, Condition whereClause) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "138: <%_ reactiveEagerRelations.forEach(function(rel) { _%>",
      "139:             .leftOuterJoin(<%= rel.relationshipName %>Table).on(Column.create(\"<%= rel.joinColumnNames[0] %>\", entityTable)).equals(Column.create(\"<%= rel.otherEntity.primaryKey.fields[0].columnName %>\", <%= rel.relationshipName %>Table ))",
      "140: <%_ }); _%>;",
      "143:         return db.sql(select).map(this::process);",
      "144:     }",
      "146:     @Override",
      "147:     public Flux<<%= persistClass %>> findAll() {",
      "149:     }",
      "151:     @Override",
      "152:     public Mono<<%= persistClass %>> findById(<%= primaryKey.type %> id) {",
      "154:     }",
      "156: <%_ if (implementsEagerLoadApis) { _%>",
      "",
      "[Removed Lines]",
      "142:         String select = entityManager.createSelect(selectFrom, <%= persistClass %>.class, pageable, criteria);",
      "148:         return findAllBy(null, null);",
      "153:         return createQuery(null, where(EntityManager.ENTITY_ALIAS + \".<%= primaryKey.fields[0].columnName %>\").is(id)).one();",
      "",
      "[Added Lines]",
      "140:         String select = entityManager.createSelect(selectFrom, <%= persistClass %>.class, pageable, whereClause);",
      "146:         return findAllBy(null);",
      "151:         Comparison whereClause = Conditions.isEqual(entityTable.column(\"<%= primaryKey.fields[0].columnName %>\"), Conditions.just(id.toString()));",
      "152:         return createQuery(null, whereClause).one();",
      "",
      "---------------"
    ],
    "generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs||generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs": [
      "File: generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs -> generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs",
      "--- Hunk 1 ---",
      "[Context before]",
      "144:     Flux<<%= persistClass %>> findAll();",
      "146:     Mono<<%= persistClass %>> findById(<%= primaryKey.type %> id);",
      "150:   <%_ if (implementsEagerLoadApis) { _%>",
      "",
      "[Removed Lines]",
      "148:     Flux<<%= persistClass %>> findAllBy(Pageable pageable, Criteria criteria);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs||generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs": [
      "File: generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs -> generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: import org.springframework.data.r2dbc.mapping.OutboundRow;",
      "34: import org.springframework.data.r2dbc.query.UpdateMapper;",
      "35: import org.springframework.data.relational.core.query.Criteria;",
      "36: import org.springframework.data.relational.core.mapping.RelationalPersistentEntity;",
      "37: import org.springframework.data.relational.core.sql.Conditions;",
      "38: import org.springframework.data.relational.core.sql.OrderByField;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: import org.springframework.data.relational.core.sql.Condition;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "97:         if (pageable != null) {",
      "103:         } else {",
      "109:         }",
      "110:     }",
      "",
      "[Removed Lines]",
      "96:     public String createSelect(SelectFromAndJoin selectFrom, Class<?> entityType, Pageable pageable, Criteria criteria) {",
      "98:             if (criteria != null) {",
      "99:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(Conditions.just(criteria.toString())), entityType, pageable.getSort());",
      "100:             } else {",
      "101:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
      "102:             }",
      "104:             if (criteria != null) {",
      "105:                 return createSelectImpl(selectFrom.where(Conditions.just(criteria.toString())), entityType, null);",
      "106:             } else {",
      "107:                 return createSelectImpl(selectFrom, entityType, null);",
      "108:             }",
      "",
      "[Added Lines]",
      "97:     public String createSelect(SelectFromAndJoin selectFrom, Class<?> entityType, Pageable pageable) {",
      "99:             return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
      "101:             return createSelectImpl(selectFrom, entityType, null);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "120:         if (pageable != null) {",
      "126:         } else {",
      "132:         }",
      "133:     }",
      "",
      "[Removed Lines]",
      "119:     public String createSelect(SelectFromAndJoinCondition selectFrom, Class<?> entityType, Pageable pageable, Criteria criteria) {",
      "121:             if (criteria != null) {",
      "122:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(Conditions.just(criteria.toString())), entityType, pageable.getSort());",
      "123:             } else {",
      "124:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
      "125:             }",
      "127:             if (criteria != null) {",
      "128:                 return createSelectImpl(selectFrom.where(Conditions.just(criteria.toString())), entityType, null);",
      "129:             } else {",
      "130:                 return createSelectImpl(selectFrom, entityType, null);",
      "131:             }",
      "",
      "[Added Lines]",
      "112:     public String createSelect(SelectFromAndJoinCondition selectFrom, Class<?> entityType, Pageable pageable, Condition where) {",
      "114:             return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
      "116:             return createSelectImpl(selectFrom.where(where), entityType, null);",
      "117:         }",
      "118:     }",
      "120:     public String createSelect(SelectFromAndJoin selectFrom, Class<?> entityType, Pageable pageable, Condition where) {",
      "121:         if (pageable != null) {",
      "122:             return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(where), entityType, pageable.getSort());",
      "123:         } else {",
      "124:             return createSelectImpl(selectFrom.where(where), entityType, null);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd8debc6809567a8734368c7f045bb2c7ae1657a",
      "candidate_info": {
        "commit_hash": "bd8debc6809567a8734368c7f045bb2c7ae1657a",
        "repo": "jhipster/generator-jhipster",
        "commit_url": "https://github.com/jhipster/generator-jhipster/commit/bd8debc6809567a8734368c7f045bb2c7ae1657a",
        "files": [
          "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs"
        ],
        "message": "Update conditions to take where into consideration",
        "before_after_code_files": [
          "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs||generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jhipster/generator-jhipster/pull/18294"
        ],
        "olp_code_files": {
          "patch": [
            "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs||generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs"
          ],
          "candidate": [
            "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs||generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs"
          ]
        }
      },
      "candidate_diff": {
        "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs||generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs": [
          "File: generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs -> generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     public String createSelect(SelectFromAndJoinCondition selectFrom, Class<?> entityType, Pageable pageable, Condition where) {",
          "113:         if (pageable != null) {",
          "115:         } else {",
          "117:         }",
          "118:     }",
          "120:     public String createSelect(SelectFromAndJoin selectFrom, Class<?> entityType, Pageable pageable, Condition where) {",
          "121:         if (pageable != null) {",
          "123:         } else {",
          "125:         }",
          "126:     }",
          "",
          "[Removed Lines]",
          "114:             return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
          "116:             return createSelectImpl(selectFrom.where(where), entityType, null);",
          "122:             return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(where), entityType, pageable.getSort());",
          "124:             return createSelectImpl(selectFrom.where(where), entityType, null);",
          "",
          "[Added Lines]",
          "114:             if (where != null) {",
          "115:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(where), entityType, pageable.getSort());",
          "116:             } else {",
          "117:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
          "118:             }",
          "120:             if (where != null) {",
          "121:                 return createSelectImpl(selectFrom.where(where), entityType, null);",
          "122:             } else {",
          "123:                 return createSelectImpl(selectFrom, entityType, null);",
          "124:             }",
          "130:             if (where != null) {",
          "131:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(where), entityType, pageable.getSort());",
          "132:             } else {",
          "133:                 return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());",
          "134:             }",
          "136:             if (where != null) {",
          "137:                 return createSelectImpl(selectFrom.where(where), entityType, null);",
          "138:             } else {",
          "139:                 return createSelectImpl(selectFrom, entityType, null);",
          "140:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}