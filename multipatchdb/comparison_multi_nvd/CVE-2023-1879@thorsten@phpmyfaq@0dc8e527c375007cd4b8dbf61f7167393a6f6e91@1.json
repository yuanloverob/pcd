{
  "cve_id": "CVE-2023-1879",
  "cve_desc": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.12.",
  "repo": "thorsten/phpmyfaq",
  "patch_hash": "0dc8e527c375007cd4b8dbf61f7167393a6f6e91",
  "patch_info": {
    "commit_hash": "0dc8e527c375007cd4b8dbf61f7167393a6f6e91",
    "repo": "thorsten/phpmyfaq",
    "commit_url": "https://github.com/thorsten/phpmyfaq/commit/0dc8e527c375007cd4b8dbf61f7167393a6f6e91",
    "files": [
      "phpmyfaq/admin/category.edit.php",
      "phpmyfaq/admin/category.main.php"
    ],
    "message": "fix: added missing conversion to HTML entities",
    "before_after_code_files": [
      "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php",
      "phpmyfaq/admin/category.main.php||phpmyfaq/admin/category.main.php"
    ]
  },
  "patch_diff": {
    "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php": [
      "File: phpmyfaq/admin/category.edit.php -> phpmyfaq/admin/category.edit.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: use phpMyFAQ\\Category\\CategoryPermission;",
      "20: use phpMyFAQ\\Filter;",
      "21: use phpMyFAQ\\Helper\\UserHelper;",
      "23: if (!defined('IS_VALID_PHPMYFAQ')) {",
      "24:     http_response_code(400);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: use phpMyFAQ\\Strings;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "58:         $restrictedGroups = true;",
      "59:     }",
      "62:     ?>",
      "63:         <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">",
      "64:           <h1 class=\"h2\">",
      "",
      "[Removed Lines]",
      "61:     $header = $PMF_LANG['ad_categ_edit_1'] . ' \"' . $categoryData->getName() . '\" ' . $PMF_LANG['ad_categ_edit_2'];",
      "",
      "[Added Lines]",
      "62:     $header = $PMF_LANG['ad_categ_edit_1'] . ' \"' . Strings::htmlentities($categoryData->getName()) .",
      "63:         '\" ' . $PMF_LANG['ad_categ_edit_2'];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "81:                   <?= $PMF_LANG['ad_categ_titel'] ?>:",
      "82:               </label>",
      "83:               <div class=\"col-lg-4\">",
      "85:                        class=\"form-control\">",
      "86:               </div>",
      "87:             </div>",
      "",
      "[Removed Lines]",
      "84:                 <input type=\"text\" id=\"name\" name=\"name\" value=\"<?= $categoryData->getName() ?>\"",
      "",
      "[Added Lines]",
      "86:                 <input type=\"text\" id=\"name\" name=\"name\" value=\"<?= Strings::htmlentities($categoryData->getName()) ?>\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "92:               </label>",
      "93:               <div class=\"col-lg-4\">",
      "94:                 <textarea id=\"description\" name=\"description\" rows=\"3\"",
      "96:               </div>",
      "97:             </div>",
      "",
      "[Removed Lines]",
      "95:                           class=\"form-control\"><?= $categoryData->getDescription() ?></textarea>",
      "",
      "[Added Lines]",
      "97:                           class=\"form-control\"><?= Strings::htmlentities($categoryData->getDescription()) ?></textarea>",
      "",
      "---------------"
    ],
    "phpmyfaq/admin/category.main.php||phpmyfaq/admin/category.main.php": [
      "File: phpmyfaq/admin/category.main.php -> phpmyfaq/admin/category.main.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "156:                 $parentId = Filter::filterInput(INPUT_POST, 'parent_id', FILTER_VALIDATE_INT);",
      "157:                 $categoryId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);",
      "160:                 $image = count($uploadedFile) ? $categoryImage->getFileName(",
      "161:                     $categoryId,",
      "162:                     $categoryLang",
      "",
      "[Removed Lines]",
      "158:                 $categoryLang = Filter::filterInput(INPUT_POST, 'catlang', FILTER_UNSAFE_RAW);",
      "159:                 $existingImage = Filter::filterInput(INPUT_POST, 'existing_image', FILTER_UNSAFE_RAW);",
      "",
      "[Added Lines]",
      "158:                 $categoryLang = Filter::filterInput(INPUT_POST, 'catlang', FILTER_SANITIZE_SPECIAL_CHARS);",
      "159:                 $existingImage = Filter::filterInput(INPUT_POST, 'existing_image', FILTER_SANITIZE_SPECIAL_CHARS);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "305596e0be61fbecc626013eba5a4b624b8e7c53",
      "candidate_info": {
        "commit_hash": "305596e0be61fbecc626013eba5a4b624b8e7c53",
        "repo": "thorsten/phpmyfaq",
        "commit_url": "https://github.com/thorsten/phpmyfaq/commit/305596e0be61fbecc626013eba5a4b624b8e7c53",
        "files": [
          "CHANGELOG.md",
          "phpmyfaq/admin/api/faqs.php",
          "phpmyfaq/admin/api/user.php",
          "phpmyfaq/admin/category.edit.php",
          "phpmyfaq/admin/category.main.php",
          "phpmyfaq/admin/configuration.php",
          "phpmyfaq/admin/group.php",
          "phpmyfaq/admin/news.php",
          "phpmyfaq/admin/record.add.php",
          "phpmyfaq/admin/record.comments.php",
          "phpmyfaq/admin/record.edit.php",
          "phpmyfaq/admin/stat.adminlog.php",
          "phpmyfaq/admin/user.php",
          "phpmyfaq/api.service.php",
          "phpmyfaq/contact.php",
          "phpmyfaq/index.php",
          "phpmyfaq/send2friend.php",
          "phpmyfaq/src/phpMyFAQ/Captcha/BuiltinCaptcha.php",
          "phpmyfaq/src/phpMyFAQ/Comments.php",
          "phpmyfaq/src/phpMyFAQ/Export/Html5.php",
          "phpmyfaq/src/phpMyFAQ/Faq.php",
          "phpmyfaq/src/phpMyFAQ/Helper/UserHelper.php",
          "phpmyfaq/src/phpMyFAQ/News.php",
          "phpmyfaq/src/phpMyFAQ/StopWords.php"
        ],
        "message": "Merge branch '3.1'",
        "before_after_code_files": [
          "phpmyfaq/admin/api/faqs.php||phpmyfaq/admin/api/faqs.php",
          "phpmyfaq/admin/api/user.php||phpmyfaq/admin/api/user.php",
          "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php",
          "phpmyfaq/admin/category.main.php||phpmyfaq/admin/category.main.php",
          "phpmyfaq/admin/configuration.php||phpmyfaq/admin/configuration.php",
          "phpmyfaq/admin/group.php||phpmyfaq/admin/group.php",
          "phpmyfaq/admin/news.php||phpmyfaq/admin/news.php",
          "phpmyfaq/admin/record.add.php||phpmyfaq/admin/record.add.php",
          "phpmyfaq/admin/record.comments.php||phpmyfaq/admin/record.comments.php",
          "phpmyfaq/admin/record.edit.php||phpmyfaq/admin/record.edit.php",
          "phpmyfaq/admin/stat.adminlog.php||phpmyfaq/admin/stat.adminlog.php",
          "phpmyfaq/admin/user.php||phpmyfaq/admin/user.php",
          "phpmyfaq/api.service.php||phpmyfaq/api.service.php",
          "phpmyfaq/contact.php||phpmyfaq/contact.php",
          "phpmyfaq/index.php||phpmyfaq/index.php",
          "phpmyfaq/send2friend.php||phpmyfaq/send2friend.php",
          "phpmyfaq/src/phpMyFAQ/Captcha/BuiltinCaptcha.php||phpmyfaq/src/phpMyFAQ/Captcha/BuiltinCaptcha.php",
          "phpmyfaq/src/phpMyFAQ/Comments.php||phpmyfaq/src/phpMyFAQ/Comments.php",
          "phpmyfaq/src/phpMyFAQ/Export/Html5.php||phpmyfaq/src/phpMyFAQ/Export/Html5.php",
          "phpmyfaq/src/phpMyFAQ/Faq.php||phpmyfaq/src/phpMyFAQ/Faq.php",
          "phpmyfaq/src/phpMyFAQ/Helper/UserHelper.php||phpmyfaq/src/phpMyFAQ/Helper/UserHelper.php",
          "phpmyfaq/src/phpMyFAQ/News.php||phpmyfaq/src/phpMyFAQ/News.php",
          "phpmyfaq/src/phpMyFAQ/StopWords.php||phpmyfaq/src/phpMyFAQ/StopWords.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php",
            "phpmyfaq/admin/category.main.php||phpmyfaq/admin/category.main.php"
          ],
          "candidate": [
            "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php",
            "phpmyfaq/admin/category.main.php||phpmyfaq/admin/category.main.php"
          ]
        }
      },
      "candidate_diff": {
        "phpmyfaq/admin/api/faqs.php||phpmyfaq/admin/api/faqs.php": [
          "File: phpmyfaq/admin/api/faqs.php -> phpmyfaq/admin/api/faqs.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:                     $questionIds = [$questionIds];",
          "187:                 }",
          "188:                 foreach ($questionIds as $questionId) {",
          "190:                 }",
          "192:                 $http->setStatus(200);",
          "",
          "[Removed Lines]",
          "189:                     #$question->deleteQuestion((int)$questionId);",
          "",
          "[Added Lines]",
          "189:                     $question->deleteQuestion((int)$questionId);",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/api/user.php||phpmyfaq/admin/api/user.php": [
          "File: phpmyfaq/admin/api/user.php -> phpmyfaq/admin/api/user.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:                 if (strlen($userPassword) <= 7 || strlen($userPasswordConfirm) <= 7) {",
          "164:                     $errorMessage[] = Translation::get('ad_passwd_fail');",
          "165:                 }",
          "166:             }",
          "168:             if (count($errorMessage) === 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:             } else {",
          "167:                 $userPassword = ''; // set password to empty, so a new one is created",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php": [
          "File: phpmyfaq/admin/category.edit.php -> phpmyfaq/admin/category.edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use phpMyFAQ\\Filter;",
          "21: use phpMyFAQ\\Helper\\UserHelper;",
          "22: use phpMyFAQ\\Session\\Token;",
          "23: use phpMyFAQ\\Translation;",
          "25: if (!defined('IS_VALID_PHPMYFAQ')) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: use phpMyFAQ\\Strings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:         $restrictedGroups = true;",
          "61:     }",
          "64:         Translation::get('ad_categ_edit_2');",
          "65:     ?>",
          "66:         <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">",
          "",
          "[Removed Lines]",
          "63:     $header = Translation::get('ad_categ_edit_1') . ' \"' . $categoryData->getName() . '\" ' .",
          "",
          "[Added Lines]",
          "64:     $header = Translation::get('ad_categ_edit_1') . ' \"' . Strings::htmlentities($categoryData->getName()) . '\" ' .",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:                   <?= Translation::get('ad_categ_titel') ?>",
          "85:               </label>",
          "86:               <div class=\"col-lg-4\">",
          "88:               </div>",
          "89:             </div>",
          "",
          "[Removed Lines]",
          "87:                 <input type=\"text\" id=\"name\" name=\"name\" value=\"<?= $categoryData->getName() ?>\" class=\"form-control\">",
          "",
          "[Added Lines]",
          "88:                 <input type=\"text\" id=\"name\" name=\"name\" value=\"<?= Strings::htmlentities($categoryData->getName()) ?>\" class=\"form-control\">",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:               </label>",
          "95:               <div class=\"col-lg-4\">",
          "96:                 <textarea id=\"description\" name=\"description\" rows=\"3\"",
          "98:               </div>",
          "99:             </div>",
          "",
          "[Removed Lines]",
          "97:                           class=\"form-control\"><?= $categoryData->getDescription() ?></textarea>",
          "",
          "[Added Lines]",
          "98:                           class=\"form-control\"><?= Strings::htmlentities($categoryData->getDescription()) ?></textarea>",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/category.main.php||phpmyfaq/admin/category.main.php": [
          "File: phpmyfaq/admin/category.main.php -> phpmyfaq/admin/category.main.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: use phpMyFAQ\\Filter;",
          "25: use phpMyFAQ\\Language\\LanguageCodes;",
          "26: use phpMyFAQ\\Session\\Token;",
          "27: use phpMyFAQ\\Translation;",
          "29: if (!defined('IS_VALID_PHPMYFAQ')) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: use phpMyFAQ\\Strings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:             foreach ($category->getCategoryTree() as $cat) {",
          "328:                 if ($cat['lang'] == $lang) {",
          "330:                 } else {",
          "332:                 }",
          "",
          "[Removed Lines]",
          "329:                     $categoryName = $cat['name'];",
          "331:                     $categoryName = $cat['name'] . ' (' . LanguageCodes::get($cat['lang']) . ')';",
          "",
          "[Added Lines]",
          "330:                     $categoryName = Strings::htmlentities($cat['name']);",
          "332:                     $categoryName = Strings::htmlentities($cat['name']) . ' (' . LanguageCodes::get($cat['lang']) . ')';",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/configuration.php||phpmyfaq/admin/configuration.php": [
          "File: phpmyfaq/admin/configuration.php -> phpmyfaq/admin/configuration.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         if (isset($editData['edit']['main.enableMarkdownEditor'])) {",
          "56:             $editData['edit']['main.enableWysiwygEditor'] = false; // Disable WYSIWYG editor if Markdown is enabled",
          "57:         }",
          "59:         foreach ($editData['edit'] as $key => $value) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:         if (isset($editData['edit']['main.currentVersion'])) {",
          "59:             unset($editData['edit']['main.currentVersion']); // don't update the version number",
          "60:         }",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/group.php||phpmyfaq/admin/group.php": [
          "File: phpmyfaq/admin/group.php -> phpmyfaq/admin/group.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use phpMyFAQ\\Component\\Alert;",
          "21: use phpMyFAQ\\Filter;",
          "22: use phpMyFAQ\\Session\\Token;",
          "23: use phpMyFAQ\\Translation;",
          "24: use phpMyFAQ\\User;",
          "25: use phpMyFAQ\\User\\CurrentUser;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: use phpMyFAQ\\Strings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:         <div class=\"col-lg-12\">",
          "171:           <h2 class=\"page-header\">",
          "172:             <i aria-hidden=\"true\" class=\"fa fa-users fa-fw\"></i>",
          "174:           </h2>",
          "175:         </div>",
          "176:       </header>",
          "",
          "[Removed Lines]",
          "173:               <?= Translation::get('ad_group_deleteGroup') ?> \"<?= $groupData['name'] ?>\"",
          "",
          "[Added Lines]",
          "174:               <?= Translation::get('ad_group_deleteGroup') ?> \"<?= Strings::htmlentities($groupData['name']) ?>\"",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/news.php||phpmyfaq/admin/news.php": [
          "File: phpmyfaq/admin/news.php -> phpmyfaq/admin/news.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "263: <div class=\"row\">",
          "264:     <div class=\"col-12\">",
          "266:               data-pmf-enable-editor=\"<?= $faqConfig->get('main.enableWysiwygEditor') ?>\"",
          "267:               data-pmf-editor-language=\"<?= (Language::isASupportedTinyMCELanguage($newsData['lang']) ? $newsData['lang'] : 'en') ?>\"",
          "268:               data-pmf-default-url=\"<?= $faqConfig->getDefaultUrl() ?>\">",
          "",
          "[Removed Lines]",
          "265:         <form id=\"faqEditor\" action=\"?action=update-news\" method=\"post\" accept-charset=\"utf-8\"",
          "",
          "[Added Lines]",
          "265:         <form id=\"faqEditor\" action=\"?action=update-news\" method=\"post\" accept-charset=\"utf-8\" class=\"needs-validation\"",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/record.add.php||phpmyfaq/admin/record.add.php": [
          "File: phpmyfaq/admin/record.add.php -> phpmyfaq/admin/record.add.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     exit();",
          "44: }",
          "47:     $faqPermission = new FaqPermission($faqConfig);",
          "",
          "[Removed Lines]",
          "46: if ($user->perm->hasPermission($user->getUserId(), 'edit_faq') || $user->perm->hasPermission($user->getUserId(), 'add_faq')) {",
          "",
          "[Added Lines]",
          "46: if ($user->perm->hasPermission($user->getUserId(), 'add_faq')) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/record.comments.php||phpmyfaq/admin/record.comments.php": [
          "File: phpmyfaq/admin/record.comments.php -> phpmyfaq/admin/record.comments.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:                 <td>",
          "129:                 <span style=\"font-weight: bold;\">",
          "130:                     <a href=\"mailto:<?= $newsComment->getEmail() ?>\">",
          "132:                     </a> |",
          "135:                         <i class=\"fa fa-newspaper-o\" aria-hidden=\"true\"></i>",
          "136:                     </a>",
          "137:                 </span><br/>",
          "",
          "[Removed Lines]",
          "131:                         <?= $newsComment->getUsername() ?>",
          "133:                     <?= $date->format(date('Y-m-d H:i', $faqComment->getDate())) ?> |",
          "134:                     <a href=\"<?php printf('../?action=news&id=%d&artlang=%s', $faqComment->getRecordId(), $faqLangCode) ?>\">",
          "",
          "[Added Lines]",
          "131:                         <?= Strings::htmlentities($newsComment->getUsername()) ?>",
          "133:                     <?= $date->format(date('Y-m-d H:i', $newsComment->getDate())) ?> |",
          "134:                     <a href=\"<?php printf('../?action=news&id=%d&artlang=%s', $newsComment->getRecordId(), $faqLangCode) ?>\">",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/record.edit.php||phpmyfaq/admin/record.edit.php": [
          "File: phpmyfaq/admin/record.edit.php -> phpmyfaq/admin/record.edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:     $faqData['title'] = (isset($faqData['title']) ? Strings::htmlspecialchars($faqData['title']) : '');",
          "221:     $faqData['tags'] = (isset($faqData['tags']) ? Strings::htmlspecialchars($faqData['tags']) : '');",
          "222:     $faqData['keywords'] = (isset($faqData['keywords']) ? Strings::htmlspecialchars($faqData['keywords']) : '');",
          "223:     $faqData['author'] = (isset($faqData['author']) ? Strings::htmlspecialchars(",
          "",
          "[Removed Lines]",
          "220:     $faqData['content'] = (isset($faqData['content']) ? trim(Strings::htmlentities($faqData['content'])) : '');",
          "",
          "[Added Lines]",
          "220:     $faqData['content'] =",
          "221:         (isset($faqData['content']) ? trim(Strings::htmlentities($faqData['content'], ENT_COMPAT, 'utf-8', true)) : '');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "664:                                                     );",
          "665:                                                     ?>",
          "666:                                                     <br>",
          "668:                                                 </li>",
          "669:                                             <?php } ?>",
          "670:                                         </ul>",
          "",
          "[Removed Lines]",
          "667:                                                     <?= $entry['changelog'] ?>",
          "",
          "[Added Lines]",
          "668:                                                     <?= Strings::htmlentities($entry['changelog'] ?? '') ?>",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/stat.adminlog.php||phpmyfaq/admin/stat.adminlog.php": [
          "File: phpmyfaq/admin/stat.adminlog.php -> phpmyfaq/admin/stat.adminlog.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     $deleteLog = true;",
          "39: }",
          "42:     $date = new Date($faqConfig);",
          "43:     $perpage = 15;",
          "44:     $pages = Filter::filterInput(INPUT_GET, 'pages', FILTER_VALIDATE_INT);",
          "",
          "[Removed Lines]",
          "41: if ($user->perm->hasPermission($user->getUserId(), 'adminlog') && 'adminlog' == $action) {",
          "",
          "[Added Lines]",
          "41: if ($user->perm->hasPermission($user->getUserId(), 'adminlog') && 'adminlog' === $action) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:             <td><?= Strings::htmlentities($user->getLogin()) ?></td>",
          "122:             <td><?= $loggingValue['ip'] ?></td>",
          "123:             <td><small><?php",
          "125:             $text = str_replace('Loginerror', Translation::get('ad_log_lger'), (string) $text);",
          "126:             $text = str_replace('Session expired', Translation::get('ad_log_sess'), $text);",
          "127:             $text = str_replace('Useredit, ', Translation::get('ad_log_edit'), $text);",
          "",
          "[Removed Lines]",
          "124:             $text = $loggingValue['text'];",
          "",
          "[Added Lines]",
          "124:             $text = Strings::htmlentities($loggingValue['text']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:     </table>",
          "144:     <?php",
          "146:     if ($logging->delete()) {",
          "147:         echo Alert::success('ad_adminlog_delete_success');",
          "148:     } else {",
          "",
          "[Removed Lines]",
          "145: } elseif ($user->perm->hasPermission($user->getUserId(), 'adminlog') && 'deleteadminlog' == $action && $deleteLog) {",
          "",
          "[Added Lines]",
          "145: } elseif ($user->perm->hasPermission($user->getUserId(), 'adminlog') && 'deleteadminlog' === $action && $deleteLog) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/user.php||phpmyfaq/admin/user.php": [
          "File: phpmyfaq/admin/user.php -> phpmyfaq/admin/user.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:         $message = '';",
          "110:         $userAction = $defaultUserAction;",
          "111:         $userId = Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT, 0);",
          "113:             $message .= Alert::danger('ad_user_error_noId');",
          "114:         } else {",
          "115:             $userData = [];",
          "",
          "[Removed Lines]",
          "112:         if ($userId == 0) {",
          "",
          "[Added Lines]",
          "112:         if ($userId === 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "692:                             </div>",
          "693:                         </div>",
          "695:                         <div class=\"row mb-2\">",
          "696:                             <div class=\"col-lg-4\"></div>",
          "697:                             <div class=\"col-lg-8\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "695:                         <?php if ($user->isSuperAdmin()) { ?>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "704:                                 </div>",
          "705:                             </div>",
          "706:                         </div>",
          "708:                     </form>",
          "709:                 </div>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:                         <?php } ?>",
          "",
          "---------------"
        ],
        "phpmyfaq/api.service.php||phpmyfaq/api.service.php": [
          "File: phpmyfaq/api.service.php -> phpmyfaq/api.service.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: if (",
          "134:     'savevoting' !== $action && 'submit-user-data' !== $action && 'change-password' !== $action &&",
          "136: ) {",
          "137:     $message = ['error' => Translation::get('msgCaptcha')];",
          "138: }",
          "",
          "[Removed Lines]",
          "135:     'submit-request-removal' !== $action && !$captcha->checkCaptchaCode($code)",
          "",
          "[Added Lines]",
          "135:     'submit-request-removal' !== $action && !$captcha->checkCaptchaCode($code ?? '')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:             case 'news':",
          "182:                 $id = $newsId;",
          "183:                 break;",
          "185:                 $id = $faqId;",
          "186:                 break;",
          "187:         }",
          "",
          "[Removed Lines]",
          "184:             case 'faq';",
          "",
          "[Added Lines]",
          "184:             case 'faq':",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:         }",
          "204:         if (",
          "212:         ) {",
          "213:             try {",
          "214:                 $faqSession->userTracking('save_comment', $id);",
          "",
          "[Removed Lines]",
          "205:             !is_null($username) && !is_null($mailer) && !is_null($comment) && $stopWords->checkBannedWord(",
          "206:                 $comment",
          "207:             ) && !$faq->commentDisabled(",
          "208:                 $id,",
          "209:                 $languageCode,",
          "210:                 $type",
          "211:             )",
          "",
          "[Added Lines]",
          "205:             !is_null($username) && !is_null($mailer) && !is_null($comment) && $stopWords->checkBannedWord($comment) &&",
          "206:             !$faq->commentDisabled($id, $languageCode, $type) && !$faq->isActive($id, $languageCode, $type)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "222:                 ->setType($type)",
          "223:                 ->setUsername($username)",
          "224:                 ->setEmail($mailer)",
          "226:                 ->setDate($_SERVER['REQUEST_TIME']);",
          "228:             if ($oComment->addComment($commentEntity)) {",
          "",
          "[Removed Lines]",
          "225:                 ->setComment(nl2br((string) $comment))",
          "",
          "[Added Lines]",
          "220:                 ->setComment(nl2br(strip_tags((string) $comment)))",
          "",
          "---------------"
        ],
        "phpmyfaq/contact.php||phpmyfaq/contact.php": [
          "File: phpmyfaq/contact.php -> phpmyfaq/contact.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:         'msgContactOwnText' => nl2br(Strings::htmlspecialchars($faqConfig->get('main.contactInformations'))),",
          "51:         'msgContactEMail' => Translation::get('msgContactEMail'),",
          "52:         'msgContactPrivacyNote' => Translation::get('msgContactPrivacyNote'),",
          "54:         'msgPrivacyNote' => Translation::get('msgPrivacyNote'),",
          "55:         'msgNewContentName' => Translation::get('msgNewContentName'),",
          "56:         'msgNewContentMail' => Translation::get('msgNewContentMail'),",
          "",
          "[Removed Lines]",
          "53:         'privacyURL' => $faqConfig->get('main.privacyURL'),",
          "",
          "[Added Lines]",
          "53:         'privacyURL' => Strings::htmlentities($faqConfig->get('main.privacyURL')),",
          "",
          "---------------"
        ],
        "phpmyfaq/index.php||phpmyfaq/index.php": [
          "File: phpmyfaq/index.php -> phpmyfaq/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:             Translation::get('ad_menu_glossary') . '</a>',",
          "636:         'privacyLink' => sprintf(",
          "637:             '<a class=\"nav-link px-1 \" target=\"_blank\" href=\"%s\">%s</a>',",
          "639:             Translation::get('msgPrivacyNote')",
          "640:         ),",
          "641:         'faqOverview' => '<a class=\"nav-link px-1 \" href=\"./overview.html\">' . Translation::get('faqOverview') . '</a>',",
          "",
          "[Removed Lines]",
          "638:             $faqConfig->get('main.privacyURL'),",
          "",
          "[Added Lines]",
          "638:             Strings::htmlentities($faqConfig->get('main.privacyURL')),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "669:             Translation::get('ad_menu_glossary') . '</a>',",
          "670:         'privacyLink' => sprintf(",
          "671:             '<a target=\"_blank\" href=\"%s\">%s</a>',",
          "673:             Translation::get('msgPrivacyNote')",
          "674:         ),",
          "675:         'faqOverview' => '<a href=\"index.php?' . $sids . 'action=overview\">' . Translation::get('faqOverview') . '</a>',",
          "",
          "[Removed Lines]",
          "672:             $faqConfig->get('main.privacyURL'),",
          "",
          "[Added Lines]",
          "672:             Strings::htmlentities($faqConfig->get('main.privacyURL')),",
          "",
          "---------------"
        ],
        "phpmyfaq/send2friend.php||phpmyfaq/send2friend.php": [
          "File: phpmyfaq/send2friend.php -> phpmyfaq/send2friend.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: $template->parse(",
          "68:     'mainPageContent',",
          "69:     [",
          "71:         'msgSend2Friend' => Translation::get('msgSend2Friend'),",
          "72:         'msgS2FReferrer' => 'link',",
          "73:         'msgS2FName' => Translation::get('msgS2FName'),",
          "",
          "[Removed Lines]",
          "70:         'lang' => $faqLanguage,",
          "",
          "[Added Lines]",
          "70:         'lang' => Strings::htmlentities($faqLanguage),",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/Captcha/BuiltinCaptcha.php||phpmyfaq/src/phpMyFAQ/Captcha/BuiltinCaptcha.php": [
          "File: phpmyfaq/src/phpMyFAQ/Captcha/BuiltinCaptcha.php -> phpmyfaq/src/phpMyFAQ/Captcha/BuiltinCaptcha.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:     {",
          "420:         if ($this->isUserIsLoggedIn()) {",
          "421:             return true;",
          "",
          "[Removed Lines]",
          "418:     public function checkCaptchaCode(string $code): bool",
          "",
          "[Added Lines]",
          "419:     public function checkCaptchaCode(string $code = null): bool",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/Comments.php||phpmyfaq/src/phpMyFAQ/Comments.php": [
          "File: phpmyfaq/src/phpMyFAQ/Comments.php -> phpmyfaq/src/phpMyFAQ/Comments.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:             $output .= sprintf(",
          "66:                 '<strong><a href=\"mailto:%s\">%s</a></strong>',",
          "67:                 $mail->safeEmail($item->getEmail()),",
          "69:             );",
          "70:             $output .= sprintf(' <span class=\"text-muted\">(%s)</span>', $date->format($item->getDate()));",
          "71:             $output .= '     </div>';",
          "",
          "[Removed Lines]",
          "68:                 $item->getUsername()",
          "",
          "[Added Lines]",
          "68:                 Strings::htmlentities($item->getUsername())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:         $comment = '';",
          "139:         foreach ($words as $word) {",
          "141:             if (15 === $numWords) {",
          "142:                 $comment .= '<span class=\"comment-dots-' . $id . '\">&hellip; </span>' .",
          "143:                     '<a href=\"#\" data-comment-id=\"' . $id . '\" class=\"pmf-comments-show-more comment-show-more-' . $id .",
          "",
          "[Removed Lines]",
          "140:             $comment .= $word . ' ';",
          "",
          "[Added Lines]",
          "140:             $comment .= Strings::htmlentities($word . ' ');",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/Export/Html5.php||phpmyfaq/src/phpMyFAQ/Export/Html5.php": [
          "File: phpmyfaq/src/phpMyFAQ/Export/Html5.php -> phpmyfaq/src/phpMyFAQ/Export/Html5.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: use phpMyFAQ\\Date;",
          "23: use phpMyFAQ\\Export;",
          "24: use phpMyFAQ\\Faq;",
          "25: use phpMyFAQ\\Translation;",
          "26: use XMLWriter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: use phpMyFAQ\\Strings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:         $this->xml->startElement('meta');",
          "88:         $this->xml->writeAttribute('charset', 'utf-8');",
          "89:         $this->xml->endElement();",
          "90:         $this->xml->endElement(); // </head>",
          "92:         $this->xml->startElement('body');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:         $this->xml->startElement('meta');",
          "92:         $this->xml->writeAttribute('http-equiv', 'Content-Security-Policy');",
          "93:         $this->xml->writeAttribute('content', 'default-src \\'self\\'; img-src https://*; child-src \\'none\\';');",
          "94:         $this->xml->endElement();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:                 $this->xml->startElement('h2');",
          "103:                 $this->xml->writeAttribute('id', \"entry-\" . $data['solution_id']);",
          "105:                 $this->xml->endElement();",
          "106:                 $this->xml->startElement('p');",
          "108:                 $this->xml->endElement();",
          "109:                 $this->xml->writeElement('p', Translation::get('msgAuthor') . ': ' . $data['author_email']);",
          "110:                 $this->xml->writeElement(",
          "",
          "[Removed Lines]",
          "104:                 $this->xml->text(strip_tags((string) $data['topic']));",
          "107:                 $this->xml->writeCdata(html_entity_decode((string) $data['content'], ENT_QUOTES, 'UTF-8'));",
          "",
          "[Added Lines]",
          "109:                 $this->xml->text(Strings::htmlentities((string) $data['topic']));",
          "112:                 $this->xml->writeCdata(html_entity_decode((string) $data['content'], ENT_HTML5, 'UTF-8'));",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/Faq.php||phpmyfaq/src/phpMyFAQ/Faq.php": [
          "File: phpmyfaq/src/phpMyFAQ/Faq.php -> phpmyfaq/src/phpMyFAQ/Faq.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:                 );",
          "280:             } else {",
          "281:                 return sprintf(",
          "284:                     $this->user,",
          "285:                     implode(', ', $this->groups)",
          "286:                 );",
          "",
          "[Removed Lines]",
          "282:                     'AND ( fdg.group_id IN (%s) OR (fdu.user_id = %d OR fdg.group_id IN (%s)) )',",
          "283:                     implode(', ', $this->groups),",
          "",
          "[Added Lines]",
          "282:                     'AND ( fdu.user_id = %d OR fdg.group_id IN (%s) )',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1269:         return false;",
          "1270:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1271:     public function isActive(int $recordId, string $recordLang, string $commentType = 'faq'): bool",
          "1272:     {",
          "1273:         if ('news' === $commentType) {",
          "1274:             $table = 'faqnews';",
          "1275:         } else {",
          "1276:             $table = 'faqdata';",
          "1277:         }",
          "1279:         $query = sprintf(",
          "1280:             \"",
          "1281:             SELECT",
          "1282:                 active",
          "1283:             FROM",
          "1284:                 %s%s",
          "1285:             WHERE",
          "1286:                 id = %d",
          "1287:             AND",
          "1288:                 lang = '%s'\",",
          "1289:             Database::getTablePrefix(),",
          "1290:             $table,",
          "1291:             $recordId,",
          "1292:             $this->config->getDb()->escape($recordLang)",
          "1293:         );",
          "1295:         $result = $this->config->getDb()->query($query);",
          "1297:         if ($row = $this->config->getDb()->fetchObject($result)) {",
          "1298:             return !(($row->active === 'y' || $row->active === 'yes'));",
          "1299:         } else {",
          "1300:             return true;",
          "1301:         }",
          "1302:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1280:     public function commentDisabled(int $recordId, string $recordLang, string $commentType = 'faq'): bool",
          "1281:     {",
          "1283:             $table = 'faqnews';",
          "1284:         } else {",
          "1285:             $table = 'faqdata';",
          "",
          "[Removed Lines]",
          "1282:         if ('news' == $commentType) {",
          "",
          "[Added Lines]",
          "1314:         if ('news' === $commentType) {",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/Helper/UserHelper.php||phpmyfaq/src/phpMyFAQ/Helper/UserHelper.php": [
          "File: phpmyfaq/src/phpMyFAQ/Helper/UserHelper.php -> phpmyfaq/src/phpMyFAQ/Helper/UserHelper.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace phpMyFAQ\\Helper;",
          "20: use phpMyFAQ\\User;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: use phpMyFAQ\\Strings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:                     '<option value=\"%d\" %s>%s (%s)</option>',",
          "52:                     $userId,",
          "53:                     (($userId === $id) ? 'selected' : ''),",
          "55:                     $this->user->getLogin()",
          "56:                 );",
          "57:             }",
          "",
          "[Removed Lines]",
          "54:                     $this->user->getUserData('display_name'),",
          "",
          "[Added Lines]",
          "55:                     Strings::htmlentities($this->user->getUserData('display_name')),",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/News.php||phpmyfaq/src/phpMyFAQ/News.php": [
          "File: phpmyfaq/src/phpMyFAQ/News.php -> phpmyfaq/src/phpMyFAQ/News.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:                 Strings::htmlentities($item['header'])",
          "71:             );",
          "75:         }",
          "77:         return ('' == $output) ? Translation::get('msgNoNews') : $output;",
          "",
          "[Removed Lines]",
          "73:             $output .= sprintf('<div class=\"mb-1\">%s</div>', strip_tags((string) $item['content']));",
          "74:             $output .= sprintf('<div class=\"small text-muted\">%s</div>', $date->format($item['date']));",
          "",
          "[Added Lines]",
          "73:             $output .= sprintf('%s', $item['content']);",
          "75:             if (strlen($item['link']) > 1) {",
          "76:                 $output .= sprintf(",
          "77:                     '<br>%s <a href=\"%s\" target=\"_%s\">%s</a>',",
          "78:                     $this->pmfLang['msgInfo'],",
          "79:                     Strings::htmlentities($item['link']),",
          "80:                     $item['target'],",
          "81:                     Strings::htmlentities($item['linkTitle'])",
          "82:                 );",
          "83:             }",
          "85:             $output .= sprintf('<small class=\"text-muted\">%s</small>', $date->format($item['date']));",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/StopWords.php||phpmyfaq/src/phpMyFAQ/StopWords.php": [
          "File: phpmyfaq/src/phpMyFAQ/StopWords.php -> phpmyfaq/src/phpMyFAQ/StopWords.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:         if ($wordsOnly) {",
          "155:             while (($row = $this->config->getDb()->fetchObject($result)) == true) {",
          "157:             }",
          "158:         } else {",
          "159:             return $this->config->getDb()->fetchAll($result);",
          "",
          "[Removed Lines]",
          "156:                 $stopWords[] = $row->stopword;",
          "",
          "[Added Lines]",
          "156:                 $stopWords[] = Strings::htmlentities($row->stopword);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aca0663d2be0e65f4b596e4ee9a82583174db858",
      "candidate_info": {
        "commit_hash": "aca0663d2be0e65f4b596e4ee9a82583174db858",
        "repo": "thorsten/phpmyfaq",
        "commit_url": "https://github.com/thorsten/phpmyfaq/commit/aca0663d2be0e65f4b596e4ee9a82583174db858",
        "files": [
          "phpmyfaq/admin/category.edit.php",
          "phpmyfaq/index.php",
          "phpmyfaq/src/phpMyFAQ/Category.php",
          "phpmyfaq/src/phpMyFAQ/User/CurrentUser.php",
          "phpmyfaq/src/phpMyFAQ/User/TwoFactor.php",
          "phpmyfaq/src/phpMyFAQ/User/UserAuthentication.php"
        ],
        "message": "Merge branch '3.2' into 'main'",
        "before_after_code_files": [
          "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php",
          "phpmyfaq/index.php||phpmyfaq/index.php",
          "phpmyfaq/src/phpMyFAQ/Category.php||phpmyfaq/src/phpMyFAQ/Category.php",
          "phpmyfaq/src/phpMyFAQ/User/CurrentUser.php||phpmyfaq/src/phpMyFAQ/User/CurrentUser.php",
          "phpmyfaq/src/phpMyFAQ/User/TwoFactor.php||phpmyfaq/src/phpMyFAQ/User/TwoFactor.php",
          "phpmyfaq/src/phpMyFAQ/User/UserAuthentication.php||phpmyfaq/src/phpMyFAQ/User/UserAuthentication.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php"
          ],
          "candidate": [
            "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php"
          ]
        }
      },
      "candidate_diff": {
        "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php": [
          "File: phpmyfaq/admin/category.edit.php -> phpmyfaq/admin/category.edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:                           </label>",
          "210:                       </div>",
          "211:                       <select name=\"restricted_users\" id=\"restricted_users\" class=\"form-select\">",
          "213:                       </select>",
          "214:                   </div>",
          "215:               </div>",
          "",
          "[Removed Lines]",
          "212:                           <?= $userHelper->getAllUserOptions($userPermission[0]) ?>",
          "",
          "[Added Lines]",
          "212:                           <?= $userHelper->getAllUserOptions($categoryData->getUserId()) ?>",
          "",
          "---------------"
        ],
        "phpmyfaq/index.php||phpmyfaq/index.php": [
          "File: phpmyfaq/index.php -> phpmyfaq/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     if (strlen((string) $token) === 6 && is_numeric((string) $token)) {",
          "149:         $user = new CurrentUser($faqConfig);",
          "150:         $user->getUserById($userid);",
          "",
          "[Removed Lines]",
          "147: if ($token !== '' && $userid !== '') {",
          "",
          "[Added Lines]",
          "147: if ($token !== '' && !is_null($userid)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186: if (isset($userAuth)) {",
          "187:     if ($userAuth instanceof UserAuthentication) {",
          "189:             $action = 'twofactor';",
          "190:         }",
          "191:     }",
          "",
          "[Removed Lines]",
          "188:         if ($userAuth->hasTwoFactorAuthentication() === true) {",
          "",
          "[Added Lines]",
          "188:         if ($userAuth->hasTwoFactorAuthentication()) {",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/Category.php||phpmyfaq/src/phpMyFAQ/Category.php": [
          "File: phpmyfaq/src/phpMyFAQ/Category.php -> phpmyfaq/src/phpMyFAQ/Category.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:     {",
          "150:         $categories = [];",
          "151:         $where = '';",
          "",
          "[Removed Lines]",
          "148:     public function getOrderedCategories(bool $withPermission = true): array",
          "",
          "[Added Lines]",
          "148:     public function getOrderedCategories(bool $withPermission = true, bool $withInactive = false): array",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:                     ( fg.group_id IN (%s)",
          "158:                 OR",
          "159:                     (fu.user_id = %d AND fg.group_id IN (%s)))",
          "162:                 implode(', ', $this->groups),",
          "163:                 $this->user,",
          "165:             );",
          "166:         }",
          "",
          "[Removed Lines]",
          "160:                 AND",
          "161:                     fc.active = 1',",
          "164:                 implode(', ', $this->groups)",
          "",
          "[Added Lines]",
          "160:                 %s',",
          "163:                 implode(', ', $this->groups),",
          "164:                 $withInactive ? '' : 'AND fc.active = 1'",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/User/CurrentUser.php||phpmyfaq/src/phpMyFAQ/User/CurrentUser.php": [
          "File: phpmyfaq/src/phpMyFAQ/User/CurrentUser.php -> phpmyfaq/src/phpMyFAQ/User/CurrentUser.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:             $this->getUserByLogin($login);",
          "190:                 $this->setLoggedIn(true);",
          "191:                 $this->updateSessionId(true);",
          "192:                 $this->saveToSession();",
          "",
          "[Removed Lines]",
          "189:             if ($this->getUserData('twofactor_enabled') !== 1) {",
          "",
          "[Added Lines]",
          "189:             if ((int)$this->getUserData('twofactor_enabled') !== 1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:             }",
          "214:                 $this->setSuccess(true);",
          "215:             }",
          "",
          "[Removed Lines]",
          "213:             if ($this->getUserData('twofactor_enabled') !== 1) {",
          "",
          "[Added Lines]",
          "213:             if ((int)$this->getUserData('twofactor_enabled') !== 1) {",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/User/TwoFactor.php||phpmyfaq/src/phpMyFAQ/User/TwoFactor.php": [
          "File: phpmyfaq/src/phpMyFAQ/User/TwoFactor.php -> phpmyfaq/src/phpMyFAQ/User/TwoFactor.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     public function getQrCode(string $secret): string",
          "98:     {",
          "100:         $label = $this->config->getTitle() . ':' . $user->getUserData('email');",
          "101:         $qrCodeText = $this->twoFactorAuth->getQrText($label, $secret) . '&image=' . $this->config->getDefaultUrl() .",
          "102:         'assets/themes/' . Template::getTplSetName() . '/img/logo.png';",
          "",
          "[Removed Lines]",
          "99:         $user = CurrentUser::getFromSession($this->config);",
          "",
          "[Added Lines]",
          "101:         $user = CurrentUser::getCurrentUser($this->config);",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/User/UserAuthentication.php||phpmyfaq/src/phpMyFAQ/User/UserAuthentication.php": [
          "File: phpmyfaq/src/phpMyFAQ/User/UserAuthentication.php -> phpmyfaq/src/phpMyFAQ/User/UserAuthentication.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:         if ($this->user->login($username, $password)) {",
          "91:                 $this->setTwoFactorAuthentication(true);",
          "92:                 $this->user->setLoggedIn(false);",
          "93:             } else {",
          "",
          "[Removed Lines]",
          "90:             if ($this->user->getUserData('twofactor_enabled') == 1) {",
          "",
          "[Added Lines]",
          "90:             if ($this->user->getUserData('twofactor_enabled')) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c7c50b1286e335f148af56d4109fe68d0ea89db",
      "candidate_info": {
        "commit_hash": "1c7c50b1286e335f148af56d4109fe68d0ea89db",
        "repo": "thorsten/phpmyfaq",
        "commit_url": "https://github.com/thorsten/phpmyfaq/commit/1c7c50b1286e335f148af56d4109fe68d0ea89db",
        "files": [
          "phpmyfaq/admin/attachments.php",
          "phpmyfaq/admin/backup.export.php",
          "phpmyfaq/admin/backup.import.php",
          "phpmyfaq/admin/backup.main.php",
          "phpmyfaq/admin/category.add.php",
          "phpmyfaq/admin/category.edit.php",
          "phpmyfaq/admin/category.main.php",
          "phpmyfaq/admin/category.showstructure.php",
          "phpmyfaq/admin/category.translate.php",
          "phpmyfaq/admin/configuration.php",
          "phpmyfaq/admin/elasticsearch.php",
          "phpmyfaq/admin/export.php",
          "phpmyfaq/admin/faqs.overview.php",
          "phpmyfaq/admin/glossary.add.php",
          "phpmyfaq/admin/glossary.edit.php",
          "phpmyfaq/admin/glossary.main.php",
          "phpmyfaq/admin/group.php",
          "phpmyfaq/admin/import.csv.php",
          "phpmyfaq/src/phpMyFAQ/Enums/PermissionType.php"
        ],
        "message": "refactor: changed permission strings to permission enums",
        "before_after_code_files": [
          "phpmyfaq/admin/attachments.php||phpmyfaq/admin/attachments.php",
          "phpmyfaq/admin/backup.export.php||phpmyfaq/admin/backup.export.php",
          "phpmyfaq/admin/backup.import.php||phpmyfaq/admin/backup.import.php",
          "phpmyfaq/admin/backup.main.php||phpmyfaq/admin/backup.main.php",
          "phpmyfaq/admin/category.add.php||phpmyfaq/admin/category.add.php",
          "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php",
          "phpmyfaq/admin/category.main.php||phpmyfaq/admin/category.main.php",
          "phpmyfaq/admin/category.showstructure.php||phpmyfaq/admin/category.showstructure.php",
          "phpmyfaq/admin/category.translate.php||phpmyfaq/admin/category.translate.php",
          "phpmyfaq/admin/configuration.php||phpmyfaq/admin/configuration.php",
          "phpmyfaq/admin/elasticsearch.php||phpmyfaq/admin/elasticsearch.php",
          "phpmyfaq/admin/export.php||phpmyfaq/admin/export.php",
          "phpmyfaq/admin/faqs.overview.php||phpmyfaq/admin/faqs.overview.php",
          "phpmyfaq/admin/glossary.add.php||phpmyfaq/admin/glossary.add.php",
          "phpmyfaq/admin/glossary.edit.php||phpmyfaq/admin/glossary.edit.php",
          "phpmyfaq/admin/glossary.main.php||phpmyfaq/admin/glossary.main.php",
          "phpmyfaq/admin/group.php||phpmyfaq/admin/group.php",
          "phpmyfaq/admin/import.csv.php||phpmyfaq/admin/import.csv.php",
          "phpmyfaq/src/phpMyFAQ/Enums/PermissionType.php||phpmyfaq/src/phpMyFAQ/Enums/PermissionType.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php",
            "phpmyfaq/admin/category.main.php||phpmyfaq/admin/category.main.php"
          ],
          "candidate": [
            "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php",
            "phpmyfaq/admin/category.main.php||phpmyfaq/admin/category.main.php"
          ]
        }
      },
      "candidate_diff": {
        "phpmyfaq/admin/attachments.php||phpmyfaq/admin/attachments.php": [
          "File: phpmyfaq/admin/attachments.php -> phpmyfaq/admin/attachments.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: use phpMyFAQ\\Attachment\\AttachmentCollection;",
          "19: use phpMyFAQ\\Configuration;",
          "20: use phpMyFAQ\\Filter;",
          "21: use phpMyFAQ\\Pagination;",
          "22: use phpMyFAQ\\Session\\Token;",
          "23: use phpMyFAQ\\Template\\FormatBytesTwigExtension;",
          "24: use phpMyFAQ\\Template\\TwigWrapper;",
          "25: use phpMyFAQ\\Translation;",
          "26: use Symfony\\Component\\HttpFoundation\\Request;",
          "28: if (!defined('IS_VALID_PHPMYFAQ')) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: use phpMyFAQ\\Enums\\PermissionType;",
          "27: use phpMyFAQ\\User\\CurrentUser;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: $request = Request::createFromGlobals();",
          "34: $faqConfig = Configuration::getConfigurationInstance();",
          "",
          "[Removed Lines]",
          "36: $page = Filter::filterVar($request->query->get('page'), FILTER_VALIDATE_INT);",
          "37: $page = max(1, $page);",
          "39: $attachmentCollection = new AttachmentCollection($faqConfig);",
          "40: $itemsPerPage = 24;",
          "41: $allCrumbs = $attachmentCollection->getBreadcrumbs();",
          "43: $crumbs = array_slice($allCrumbs, ($page - 1) * $itemsPerPage, $itemsPerPage);",
          "45: $pagination = new Pagination(",
          "46:     [",
          "47:         'baseUrl' => $faqConfig->getDefaultUrl() . $request->getRequestUri(),",
          "48:         'total' => is_countable($allCrumbs) ? count($allCrumbs) : 0,",
          "49:         'perPage' => $itemsPerPage,",
          "50:     ]",
          "51: );",
          "53: $twig = new TwigWrapper(PMF_ROOT_DIR . '/assets/templates');",
          "54: $twig->addExtension(new FormatBytesTwigExtension());",
          "55: $template = $twig->loadTemplate('./admin/content/attachments.twig');",
          "57: $templateVars = [",
          "58:     'adminHeaderAttachments' => Translation::get('ad_menu_attachment_admin'),",
          "59:     'adminMsgAttachmentsFilename' => Translation::get('msgAttachmentsFilename'),",
          "60:     'adminMsgTransToolLanguage' => Translation::get('msgTransToolLanguage'),",
          "61:     'adminMsgAttachmentsFilesize' => Translation::get('msgAttachmentsFilesize'),",
          "62:     'adminMsgAttachmentsMimeType' => Translation::get('msgAttachmentsMimeType'),",
          "63:     'csrfToken' => Token::getInstance()->getTokenString('delete-attachment'),",
          "64:     'attachments' => $crumbs,",
          "65:     'adminMsgButtonDelete' => Translation::get('ad_gen_delete'),",
          "66:     'adminMsgFaqTitle' => Translation::get('ad_entry_faq_record'),",
          "67:     'adminAttachmentPagination' => $pagination->render()",
          "68: ];",
          "70: echo $template->render($templateVars);",
          "",
          "[Added Lines]",
          "37: $user = CurrentUser::getCurrentUser($faqConfig);",
          "39: if ($user->perm->hasPermission($user->getUserId(), PermissionType::ATTACHMENT_DELETE->value)) {",
          "40:     $page = Filter::filterVar($request->query->get('page'), FILTER_VALIDATE_INT);",
          "41:     $page = max(1, $page);",
          "43:     $attachmentCollection = new AttachmentCollection($faqConfig);",
          "44:     $itemsPerPage = 24;",
          "45:     $allCrumbs = $attachmentCollection->getBreadcrumbs();",
          "47:     $crumbs = array_slice($allCrumbs, ($page - 1) * $itemsPerPage, $itemsPerPage);",
          "49:     $pagination = new Pagination(",
          "50:         [",
          "51:             'baseUrl' => $faqConfig->getDefaultUrl() . $request->getRequestUri(),",
          "52:             'total' => is_countable($allCrumbs) ? count($allCrumbs) : 0,",
          "53:             'perPage' => $itemsPerPage,",
          "54:         ]",
          "55:     );",
          "57:     $twig = new TwigWrapper(PMF_ROOT_DIR . '/assets/templates');",
          "58:     $twig->addExtension(new FormatBytesTwigExtension());",
          "59:     $template = $twig->loadTemplate('./admin/content/attachments.twig');",
          "61:     $templateVars = [",
          "62:         'adminHeaderAttachments' => Translation::get('ad_menu_attachment_admin'),",
          "63:         'adminMsgAttachmentsFilename' => Translation::get('msgAttachmentsFilename'),",
          "64:         'adminMsgTransToolLanguage' => Translation::get('msgTransToolLanguage'),",
          "65:         'adminMsgAttachmentsFilesize' => Translation::get('msgAttachmentsFilesize'),",
          "66:         'adminMsgAttachmentsMimeType' => Translation::get('msgAttachmentsMimeType'),",
          "67:         'csrfToken' => Token::getInstance()->getTokenString('delete-attachment'),",
          "68:         'attachments' => $crumbs,",
          "69:         'adminMsgButtonDelete' => Translation::get('ad_gen_delete'),",
          "70:         'adminMsgFaqTitle' => Translation::get('ad_entry_faq_record'),",
          "71:         'adminAttachmentPagination' => $pagination->render()",
          "72:     ];",
          "74:     echo $template->render($templateVars);",
          "75: } else {",
          "76:     require 'no-permission.php';",
          "77: }",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/backup.export.php||phpmyfaq/admin/backup.export.php": [
          "File: phpmyfaq/admin/backup.export.php -> phpmyfaq/admin/backup.export.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use phpMyFAQ\\Database;",
          "21: use phpMyFAQ\\Database\\DatabaseHelper;",
          "22: use phpMyFAQ\\Enums\\BackupType;",
          "23: use phpMyFAQ\\Filter;",
          "24: use phpMyFAQ\\User\\CurrentUser;",
          "25: use Symfony\\Component\\HttpFoundation\\HeaderUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: $user = CurrentUser::getCurrentUser($faqConfig);",
          "52:     $tables = $faqConfig->getDb()->getTableNames(Database::getTablePrefix());",
          "53:     $tableNames = '';",
          "",
          "[Removed Lines]",
          "51: if ($user->perm->hasPermission($user->getUserId(), 'backup')) {",
          "",
          "[Added Lines]",
          "52: if ($user->perm->hasPermission($user->getUserId(), PermissionType::BACKUP->value)) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/backup.import.php||phpmyfaq/admin/backup.import.php": [
          "File: phpmyfaq/admin/backup.import.php -> phpmyfaq/admin/backup.import.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: use phpMyFAQ\\Configuration;",
          "20: use phpMyFAQ\\Database;",
          "21: use phpMyFAQ\\Database\\DatabaseHelper;",
          "22: use phpMyFAQ\\Filter;",
          "23: use phpMyFAQ\\Session\\Token;",
          "24: use phpMyFAQ\\Strings;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: $csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_SANITIZE_SPECIAL_CHARS);",
          "39: if (",
          "41:     Token::getInstance()->verifyToken('restore', $csrfToken)",
          "42: ) {",
          "43:     $twig = new TwigWrapper(PMF_ROOT_DIR . '/assets/templates');",
          "",
          "[Removed Lines]",
          "40:     $user->perm->hasPermission($user->getUserId(), 'restore') &&",
          "",
          "[Added Lines]",
          "41:     $user->perm->hasPermission($user->getUserId(), PermissionType::RESTORE->value) &&",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/backup.main.php||phpmyfaq/admin/backup.main.php": [
          "File: phpmyfaq/admin/backup.main.php -> phpmyfaq/admin/backup.main.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: use phpMyFAQ\\Configuration;",
          "19: use phpMyFAQ\\Session\\Token;",
          "20: use phpMyFAQ\\Template\\TwigWrapper;",
          "21: use phpMyFAQ\\Translation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: $faqConfig = Configuration::getConfigurationInstance();",
          "30: $user = CurrentUser::getCurrentUser($faqConfig);",
          "33:     $twig = new TwigWrapper(PMF_ROOT_DIR . '/assets/templates');",
          "34:     $template = $twig->loadTemplate('./admin/backup/main.twig');",
          "",
          "[Removed Lines]",
          "32: if ($user->perm->hasPermission($user->getUserId(), 'backup')) {",
          "",
          "[Added Lines]",
          "33: if ($user->perm->hasPermission($user->getUserId(), PermissionType::BACKUP->value)) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/category.add.php||phpmyfaq/admin/category.add.php": [
          "File: phpmyfaq/admin/category.add.php -> phpmyfaq/admin/category.add.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: use phpMyFAQ\\Category;",
          "20: use phpMyFAQ\\Category\\CategoryPermission;",
          "21: use phpMyFAQ\\Filter;",
          "22: use phpMyFAQ\\Helper\\UserHelper;",
          "23: use phpMyFAQ\\Language\\LanguageCodes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: $currentUserId = $user->getUserId();",
          "53:     $category = new Category($faqConfig, [], false);",
          "54:     $category->setUser($currentAdminUser);",
          "55:     $category->setGroups($currentAdminGroups);",
          "",
          "[Removed Lines]",
          "52: if ($user->perm->hasPermission($user->getUserId(), 'addcateg')) {",
          "",
          "[Added Lines]",
          "53: if ($user->perm->hasPermission($user->getUserId(), PermissionType::CATEGORY_ADD->value)) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/category.edit.php||phpmyfaq/admin/category.edit.php": [
          "File: phpmyfaq/admin/category.edit.php -> phpmyfaq/admin/category.edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: use phpMyFAQ\\Category;",
          "19: use phpMyFAQ\\Category\\CategoryPermission;",
          "20: use phpMyFAQ\\Filter;",
          "21: use phpMyFAQ\\Helper\\UserHelper;",
          "22: use phpMyFAQ\\Session\\Token;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: $currentUserId = $user->getUserId();",
          "34:     $categoryId = Filter::filterInput(INPUT_GET, 'cat', FILTER_VALIDATE_INT, 0);",
          "36:     $category = new Category($faqConfig, [], false);",
          "",
          "[Removed Lines]",
          "33: if ($user->perm->hasPermission($user->getUserId(), 'editcateg')) {",
          "",
          "[Added Lines]",
          "34: if ($user->perm->hasPermission($user->getUserId(), PermissionType::CATEGORY_EDIT->value)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:                   <?= Translation::get('ad_categ_titel') ?>",
          "86:               </label>",
          "87:               <div class=\"col-lg-4\">",
          "89:               </div>",
          "90:             </div>",
          "",
          "[Removed Lines]",
          "88:                 <input type=\"text\" id=\"name\" name=\"name\" value=\"<?= Strings::htmlentities($categoryData->getName()) ?>\" class=\"form-control\">",
          "",
          "[Added Lines]",
          "89:                 <input type=\"text\" id=\"name\" name=\"name\" value=\"<?= Strings::htmlentities($categoryData->getName()) ?>\"",
          "90:                        class=\"form-control\">",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/category.main.php||phpmyfaq/admin/category.main.php": [
          "File: phpmyfaq/admin/category.main.php -> phpmyfaq/admin/category.main.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: use phpMyFAQ\\Category\\CategoryRelation;",
          "22: use phpMyFAQ\\Component\\Alert;",
          "23: use phpMyFAQ\\Database;",
          "24: use phpMyFAQ\\Filter;",
          "25: use phpMyFAQ\\Language\\LanguageCodes;",
          "26: use phpMyFAQ\\Session\\Token;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: $categoryPermission = new CategoryPermission($faqConfig);",
          "59:     if ($action === 'savecategory' && Token::getInstance()->verifyToken('save-category', $csrfToken)) {",
          "60:         $category = new Category($faqConfig, [], false);",
          "",
          "[Removed Lines]",
          "57: if ($user->perm->hasPermission($user->getUserId(), 'editcateg')) {",
          "",
          "[Added Lines]",
          "58: if ($user->perm->hasPermission($user->getUserId(), PermissionType::CATEGORY_EDIT->value)) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/category.showstructure.php||phpmyfaq/admin/category.showstructure.php": [
          "File: phpmyfaq/admin/category.showstructure.php -> phpmyfaq/admin/category.showstructure.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: use phpMyFAQ\\Category;",
          "20: use phpMyFAQ\\Component\\Alert;",
          "21: use phpMyFAQ\\Filter;",
          "22: use phpMyFAQ\\Language\\LanguageCodes;",
          "23: use phpMyFAQ\\Strings;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   </div>",
          "52: <?php",
          "54:     $category = new Category($faqConfig, [], false);",
          "55:     $category->setUser($currentAdminUser);",
          "56:     $category->setGroups($currentAdminGroups);",
          "",
          "[Removed Lines]",
          "53: if ($user->perm->hasPermission($user->getUserId(), 'editcateg')) {",
          "",
          "[Added Lines]",
          "54: if ($user->perm->hasPermission($user->getUserId(), PermissionType::CATEGORY_EDIT->value)) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/category.translate.php||phpmyfaq/admin/category.translate.php": [
          "File: phpmyfaq/admin/category.translate.php -> phpmyfaq/admin/category.translate.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: use phpMyFAQ\\Category;",
          "20: use phpMyFAQ\\Category\\CategoryPermission;",
          "21: use phpMyFAQ\\Filter;",
          "22: use phpMyFAQ\\Helper\\UserHelper;",
          "23: use phpMyFAQ\\Session\\Token;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     exit();",
          "29: }",
          "32:     $category = new Category($faqConfig, [], false);",
          "33:     $category->setUser($currentAdminUser);",
          "34:     $category->setGroups($currentAdminGroups);",
          "",
          "[Removed Lines]",
          "31: if ($user->perm->hasPermission($user->getUserId(), 'editcateg')) {",
          "",
          "[Added Lines]",
          "32: if ($user->perm->hasPermission($user->getUserId(), PermissionType::CATEGORY_EDIT->value)) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/configuration.php||phpmyfaq/admin/configuration.php": [
          "File: phpmyfaq/admin/configuration.php -> phpmyfaq/admin/configuration.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: use phpMyFAQ\\Configuration;",
          "19: use phpMyFAQ\\Session\\Token;",
          "20: use phpMyFAQ\\Template\\TwigWrapper;",
          "21: use phpMyFAQ\\Translation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: $faqConfig = Configuration::getConfigurationInstance();",
          "30: $user = CurrentUser::getCurrentUser($faqConfig);",
          "33:     $twig = new TwigWrapper(PMF_ROOT_DIR . '/assets/templates');",
          "34:     $template = $twig->loadTemplate('./admin/configuration/main.twig');",
          "",
          "[Removed Lines]",
          "32: if ($user->perm->hasPermission($user->getUserId(), 'editconfig')) {",
          "",
          "[Added Lines]",
          "33: if ($user->perm->hasPermission($user->getUserId(), PermissionType::CONFIGURATION_EDIT->value)) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/elasticsearch.php||phpmyfaq/admin/elasticsearch.php": [
          "File: phpmyfaq/admin/elasticsearch.php -> phpmyfaq/admin/elasticsearch.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: use phpMyFAQ\\Configuration;",
          "19: use phpMyFAQ\\Instance\\Elasticsearch;",
          "20: use phpMyFAQ\\Template\\TwigWrapper;",
          "21: use phpMyFAQ\\Translation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: $faqConfig = Configuration::getConfigurationInstance();",
          "30: $user = CurrentUser::getCurrentUser($faqConfig);",
          "33:     $elasticsearch = new Elasticsearch($faqConfig);",
          "34:     $esConfigData = $faqConfig->getElasticsearchConfig();",
          "",
          "[Removed Lines]",
          "32: if ($user->perm->hasPermission($user->getUserId(), 'editconfig') && $faqConfig->get('search.enableElasticsearch')) {",
          "",
          "[Added Lines]",
          "33: if (",
          "34:     $user->perm->hasPermission($user->getUserId(), PermissionType::CONFIGURATION_EDIT->value) &&",
          "35:     $faqConfig->get('search.enableElasticsearch')",
          "36: ) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/export.php||phpmyfaq/admin/export.php": [
          "File: phpmyfaq/admin/export.php -> phpmyfaq/admin/export.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: use phpMyFAQ\\Category;",
          "20: use phpMyFAQ\\Configuration;",
          "21: use phpMyFAQ\\Database;",
          "22: use phpMyFAQ\\Helper\\CategoryHelper;",
          "23: use phpMyFAQ\\Template\\TwigWrapper;",
          "24: use phpMyFAQ\\Translation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: $twig = new TwigWrapper(PMF_ROOT_DIR . '/assets/templates');",
          "38: $template = $twig->loadTemplate('./admin/import-export/export.twig');",
          "41:     $category = new Category($faqConfig, [], false);",
          "42:     $category->setUser($currentAdminUser);",
          "43:     $category->setGroups($currentAdminGroups);",
          "",
          "[Removed Lines]",
          "40: if ($user->perm->hasPermission($user->getUserId(), 'export')) {",
          "",
          "[Added Lines]",
          "41: if ($user->perm->hasPermission($user->getUserId(), PermissionType::EXPORT->value)) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/faqs.overview.php||phpmyfaq/admin/faqs.overview.php": [
          "File: phpmyfaq/admin/faqs.overview.php -> phpmyfaq/admin/faqs.overview.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: use phpMyFAQ\\Session\\Token;",
          "23: use phpMyFAQ\\Template\\TwigWrapper;",
          "24: use phpMyFAQ\\Translation;",
          "25: use Symfony\\Component\\HttpFoundation\\Request;",
          "26: use Twig\\Extension\\DebugExtension;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: use phpMyFAQ\\User\\CurrentUser;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: $request = Request::createFromGlobals();",
          "34: $faqConfig = Configuration::getConfigurationInstance();",
          "36: $category = new Category($faqConfig, $currentAdminGroups, true);",
          "37: $category->setUser($currentAdminUser);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: $user = CurrentUser::getCurrentUser($faqConfig);",
          "38: [ $currentAdminUser, $currentAdminGroups ] = CurrentUser::getCurrentUserGroupId($user);",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/glossary.add.php||phpmyfaq/admin/glossary.add.php": [
          "File: phpmyfaq/admin/glossary.add.php -> phpmyfaq/admin/glossary.add.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use phpMyFAQ\\Session\\Token;",
          "21: use phpMyFAQ\\Translation;",
          "23: if (!defined('IS_VALID_PHPMYFAQ')) {",
          "24:     http_response_code(400);",
          "25:     exit();",
          "26: }",
          "27: ?>",
          "29: <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: use phpMyFAQ\\Configuration;",
          "21: use phpMyFAQ\\Enums\\PermissionType;",
          "24: use phpMyFAQ\\User\\CurrentUser;",
          "31: $faqConfig = Configuration::getConfigurationInstance();",
          "32: $user = CurrentUser::getCurrentUser($faqConfig);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: <div class=\"row\">",
          "36:   <div class=\"col-lg-12\">",
          "38:         <form action=\"?action=saveglossary\" method=\"post\" accept-charset=\"utf-8\">",
          "39:           <?= Token::getInstance()->getTokenInput('add-glossary') ?>",
          "",
          "[Removed Lines]",
          "37:       <?php if ($user->perm->hasPermission($user->getUserId(), 'addglossary')) { ?>",
          "",
          "[Added Lines]",
          "44:       <?php if ($user->perm->hasPermission($user->getUserId(), PermissionType::GLOSSARY_ADD->value)) { ?>",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/glossary.edit.php||phpmyfaq/admin/glossary.edit.php": [
          "File: phpmyfaq/admin/glossary.edit.php -> phpmyfaq/admin/glossary.edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use phpMyFAQ\\Filter;",
          "21: use phpMyFAQ\\Glossary;",
          "22: use phpMyFAQ\\Session\\Token;",
          "23: use phpMyFAQ\\Translation;",
          "25: if (!defined('IS_VALID_PHPMYFAQ')) {",
          "26:     http_response_code(400);",
          "27:     exit();",
          "28: }",
          "29: ?>",
          "31: <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: use phpMyFAQ\\Configuration;",
          "21: use phpMyFAQ\\Enums\\PermissionType;",
          "26: use phpMyFAQ\\User\\CurrentUser;",
          "33: $faqConfig = Configuration::getConfigurationInstance();",
          "34: $user = CurrentUser::getCurrentUser($faqConfig);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: <div class=\"row\">",
          "38:     <div class=\"col-lg-12\">",
          "39:     <?php",
          "41:         $id = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);",
          "42:         $glossary = new Glossary($faqConfig);",
          "43:         $glossaryItem = $glossary->getGlossaryItem($id);",
          "",
          "[Removed Lines]",
          "40:     if ($user->perm->hasPermission($user->getUserId(), 'editglossary')) {",
          "",
          "[Added Lines]",
          "47:     if ($user->perm->hasPermission($user->getUserId(), PermissionType::GLOSSARY_EDIT->value)) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/glossary.main.php||phpmyfaq/admin/glossary.main.php": [
          "File: phpmyfaq/admin/glossary.main.php -> phpmyfaq/admin/glossary.main.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: use phpMyFAQ\\Component\\Alert;",
          "19: use phpMyFAQ\\Filter;",
          "20: use phpMyFAQ\\Glossary;",
          "21: use phpMyFAQ\\Session\\Token;",
          "22: use phpMyFAQ\\Translation;",
          "24: if (!defined('IS_VALID_PHPMYFAQ')) {",
          "25:     http_response_code(400);",
          "26:     exit();",
          "27: }",
          "28: ?>",
          "30: <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: use phpMyFAQ\\Configuration;",
          "20: use phpMyFAQ\\Enums\\PermissionType;",
          "25: use phpMyFAQ\\User\\CurrentUser;",
          "32: $faqConfig = Configuration::getConfigurationInstance();",
          "33: $user = CurrentUser::getCurrentUser($faqConfig);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         $csrfTokenFromGet = Filter::filterInput(INPUT_GET, 'csrf', FILTER_SANITIZE_SPECIAL_CHARS);",
          "51:         if (",
          "55:         ) {",
          "56:             $glossary = new Glossary($faqConfig);",
          "58:             if (",
          "60:                 Token::getInstance()->verifyToken('add-glossary', $csrfTokenFromPost)",
          "61:             ) {",
          "62:                 $item = Filter::filterInput(INPUT_POST, 'item', FILTER_SANITIZE_SPECIAL_CHARS);",
          "",
          "[Removed Lines]",
          "52:             $user->perm->hasPermission($user->getUserId(), 'addglossary') ||",
          "53:             $user->perm->hasPermission($user->getUserId(), 'editglossary') ||",
          "54:             $user->perm->hasPermission($user->getUserId(), 'delglossary')",
          "59:                 'saveglossary' == $action && $user->perm->hasPermission($user->getUserId(), 'addglossary') &&",
          "",
          "[Added Lines]",
          "59:             $user->perm->hasPermission($user->getUserId(), PermissionType::GLOSSARY_ADD->value) ||",
          "60:             $user->perm->hasPermission($user->getUserId(), PermissionType::GLOSSARY_EDIT->value) ||",
          "61:             $user->perm->hasPermission($user->getUserId(), PermissionType::GLOSSARY_DELETE->value)",
          "66:                 'saveglossary' == $action &&",
          "67:                 $user->perm->hasPermission($user->getUserId(), PermissionType::GLOSSARY_ADD->value) &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:             }",
          "71:             if (",
          "73:                 Token::getInstance()->verifyToken('edit-glossary', $csrfTokenFromPost)",
          "74:             ) {",
          "75:                 $id = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);",
          "",
          "[Removed Lines]",
          "72:                 'updateglossary' == $action && $user->perm->hasPermission($user->getUserId(), 'editglossary') &&",
          "",
          "[Added Lines]",
          "80:                 'updateglossary' == $action &&",
          "81:                 $user->perm->hasPermission($user->getUserId(), PermissionType::GLOSSARY_EDIT->value) &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:             }",
          "85:             if (",
          "87:                 Token::getInstance()->verifyToken('delete-glossary', $csrfTokenFromGet)",
          "88:             ) {",
          "89:                 $id = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);",
          "",
          "[Removed Lines]",
          "86:                 'deleteglossary' == $action && $user->perm->hasPermission($user->getUserId(), 'editglossary') &&",
          "",
          "[Added Lines]",
          "95:                 'deleteglossary' == $action &&",
          "96:                 $user->perm->hasPermission($user->getUserId(), PermissionType::GLOSSARY_DELETE->value) &&",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/group.php||phpmyfaq/admin/group.php": [
          "File: phpmyfaq/admin/group.php -> phpmyfaq/admin/group.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use phpMyFAQ\\Component\\Alert;",
          "21: use phpMyFAQ\\Filter;",
          "22: use phpMyFAQ\\Session\\Token;",
          "23: use phpMyFAQ\\Strings;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: use phpMyFAQ\\Configuration;",
          "22: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     exit();",
          "31: }",
          "33: if (",
          "37: ) {",
          "38:     require 'no-permission.php';",
          "39: }",
          "",
          "[Removed Lines]",
          "34:     !$user->perm->hasPermission($user->getUserId(), 'editgroup') &&",
          "35:     !$user->perm->hasPermission($user->getUserId(), 'delgroup') &&",
          "36:     !$user->perm->hasPermission($user->getUserId(), 'addgroup')",
          "",
          "[Added Lines]",
          "35: $faqConfig = Configuration::getConfigurationInstance();",
          "36: $user = CurrentUser::getCurrentUser($faqConfig);",
          "39:     !$user->perm->hasPermission($user->getUserId(), PermissionType::GROUP_ADD->value) &&",
          "40:     !$user->perm->hasPermission($user->getUserId(), PermissionType::GROUP_DELETE->value) &&",
          "41:     !$user->perm->hasPermission($user->getUserId(), PermissionType::GROUP_EDIT->value)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71: }",
          "75:     $message = '';",
          "76:     $groupAction = $defaultGroupAction;",
          "77:     $groupId = Filter::filterInput(INPUT_POST, 'group_id', FILTER_VALIDATE_INT, 0);",
          "",
          "[Removed Lines]",
          "74: if ($groupAction == 'update_members' && $user->perm->hasPermission($user->getUserId(), 'editgroup')) {",
          "",
          "[Added Lines]",
          "79: if (",
          "80:     $groupAction == 'update_members' &&",
          "81:     $user->perm->hasPermission($user->getUserId(), PermissionType::GROUP_EDIT->value)",
          "82: ) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98: }",
          "102:     $message = '';",
          "103:     $groupAction = $defaultGroupAction;",
          "104:     $groupId = Filter::filterInput(INPUT_POST, 'group_id', FILTER_VALIDATE_INT, 0);",
          "",
          "[Removed Lines]",
          "101: if ($groupAction == 'update_rights' && $user->perm->hasPermission($user->getUserId(), 'editgroup')) {",
          "",
          "[Added Lines]",
          "109: if (",
          "110:     $groupAction == 'update_rights' &&",
          "111:     $user->perm->hasPermission($user->getUserId(), PermissionType::GROUP_EDIT->value)",
          "112: ) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "124: }",
          "128:     $message = '';",
          "129:     $groupAction = $defaultGroupAction;",
          "130:     $groupId = Filter::filterInput(INPUT_POST, 'group_id', FILTER_VALIDATE_INT, 0);",
          "",
          "[Removed Lines]",
          "127: if ($groupAction == 'update_data' && $user->perm->hasPermission($user->getUserId(), 'editgroup')) {",
          "",
          "[Added Lines]",
          "138: if (",
          "139:     $groupAction == 'update_data' &&",
          "140:     $user->perm->hasPermission($user->getUserId(), PermissionType::GROUP_EDIT->value)",
          "141: ) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "152: }",
          "156:     $message = '';",
          "157:     $user = new CurrentUser($faqConfig);",
          "158:     $perm = $user->perm;",
          "",
          "[Removed Lines]",
          "155: if ($groupAction == 'delete_confirm' && $user->perm->hasPermission($user->getUserId(), 'delgroup')) {",
          "",
          "[Added Lines]",
          "169: if (",
          "170:     $groupAction == 'delete_confirm' &&",
          "171:     $user->perm->hasPermission($user->getUserId(), PermissionType::GROUP_DELETE->value)",
          "172: ) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "193:     }",
          "194: }",
          "197:     $message = '';",
          "198:     $user = new User($faqConfig);",
          "199:     $groupId = Filter::filterInput(INPUT_POST, 'group_id', FILTER_VALIDATE_INT, 0);",
          "",
          "[Removed Lines]",
          "196: if ($groupAction == 'delete' && $user->perm->hasPermission($user->getUserId(), 'delgroup')) {",
          "",
          "[Added Lines]",
          "213: if ($groupAction == 'delete' && $user->perm->hasPermission($user->getUserId(), PermissionType::GROUP_DELETE->value)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "218:     }",
          "219: }",
          "222:     $user = new User($faqConfig);",
          "223:     $message = '';",
          "224:     $messages = [];",
          "",
          "[Removed Lines]",
          "221: if ($groupAction == 'addsave' && $user->perm->hasPermission($user->getUserId(), 'addgroup')) {",
          "",
          "[Added Lines]",
          "238: if ($groupAction == 'addsave' && $user->perm->hasPermission($user->getUserId(), PermissionType::GROUP_ADD->value)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "269: }",
          "273:     $user = new CurrentUser($faqConfig);",
          "274:     ?>",
          "",
          "[Removed Lines]",
          "272: if ($groupAction == 'add' && $user->perm->hasPermission($user->getUserId(), 'addgroup')) {",
          "",
          "[Added Lines]",
          "289: if ($groupAction == 'add' && $user->perm->hasPermission($user->getUserId(), PermissionType::GROUP_ADD->value)) {",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/import.csv.php||phpmyfaq/admin/import.csv.php": [
          "File: phpmyfaq/admin/import.csv.php -> phpmyfaq/admin/import.csv.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: use phpMyFAQ\\Configuration;",
          "19: use phpMyFAQ\\Session\\Token;",
          "20: use phpMyFAQ\\Template\\TwigWrapper;",
          "21: use phpMyFAQ\\Translation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: use phpMyFAQ\\Enums\\PermissionType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: $faqConfig = Configuration::getConfigurationInstance();",
          "30: $user = CurrentUser::getCurrentUser($faqConfig);",
          "33:     $twig = new TwigWrapper(PMF_ROOT_DIR . '/assets/templates');",
          "34:     $template = $twig->loadTemplate('./admin/import-export/import.csv.twig');",
          "",
          "[Removed Lines]",
          "32: if ($user->perm->hasPermission($user->getUserId(), 'add_faq')) {",
          "",
          "[Added Lines]",
          "33: if ($user->perm->hasPermission($user->getUserId(), PermissionType::FAQ_ADD->value)) {",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/Enums/PermissionType.php||phpmyfaq/src/phpMyFAQ/Enums/PermissionType.php": [
          "File: phpmyfaq/src/phpMyFAQ/Enums/PermissionType.php -> phpmyfaq/src/phpMyFAQ/Enums/PermissionType.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     case ATTACHMENT_DELETE = 'delattachment';",
          "26:     case CATEGORY_DELETE = 'delcateg';",
          "28:     case CATEGORY_EDIT = 'editcateg';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:     case BACKUP = 'backup';",
          "28:     case CATEGORY_ADD = 'addcateg';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     case FAQ_EDIT = 'edit_faq';",
          "44:     case INSTANCE_ADD = 'addinstances';",
          "46:     case INSTANCE_DELETE = 'delinstances';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     case GLOSSARY_ADD = 'addglossary';",
          "50:     case GLOSSARY_DELETE = 'delglossary';",
          "52:     case GLOSSARY_EDIT = 'editglossary';",
          "54:     case GROUP_ADD = 'addgroup';",
          "56:     case GROUP_DELETE = 'delgroup';",
          "58:     case GROUP_EDIT = 'editgroup';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:     case REPORTS = 'reports';",
          "54:     case STATISTICS_VIEWLOGS = 'viewlog';",
          "56:     case USER_ADD = 'add_user';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     case RESTORE = 'restore';",
          "",
          "---------------"
        ]
      }
    }
  ]
}