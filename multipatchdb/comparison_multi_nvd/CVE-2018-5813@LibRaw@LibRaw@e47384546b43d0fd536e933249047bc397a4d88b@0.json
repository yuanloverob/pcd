{
  "cve_id": "CVE-2018-5813",
  "cve_desc": "An error within the \"parse_minolta()\" function (dcraw/dcraw.c) in LibRaw versions prior to 0.18.11 can be exploited to trigger an infinite loop via a specially crafted file.",
  "repo": "LibRaw/LibRaw",
  "patch_hash": "e47384546b43d0fd536e933249047bc397a4d88b",
  "patch_info": {
    "commit_hash": "e47384546b43d0fd536e933249047bc397a4d88b",
    "repo": "LibRaw/LibRaw",
    "commit_url": "https://github.com/LibRaw/LibRaw/commit/e47384546b43d0fd536e933249047bc397a4d88b",
    "files": [
      "dcraw/dcraw.c",
      "internal/dcraw_common.cpp"
    ],
    "message": "Secunia Advisory SA83050: possible infinite loop in parse_minolta()",
    "before_after_code_files": [
      "dcraw/dcraw.c||dcraw/dcraw.c",
      "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
    ]
  },
  "patch_diff": {
    "dcraw/dcraw.c||dcraw/dcraw.c": [
      "File: dcraw/dcraw.c -> dcraw/dcraw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "15669:     return;",
      "15670:   order = fgetc(ifp) * 0x101;",
      "15671:   offset = base + get4() + 8;",
      "15672:   while ((save = ftell(ifp)) < offset)",
      "15673:   {",
      "15674:     for (tag = i = 0; i < 4; i++)",
      "15675:       tag = tag << 8 | fgetc(ifp);",
      "15676:     len = get4();",
      "15677:     switch (tag)",
      "15678:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15672: #ifdef LIBRAW_LIBRARY_BUILD",
      "15673:   if(offset>ifp->size()-8) // At least 8 bytes for tag/len",
      "15674:     offset = ifp->size()-8;",
      "15675: #endif",
      "15682:     if(len < 0)",
      "15683:       return; // just ignore wrong len?? or raise bad file exception?",
      "",
      "---------------"
    ],
    "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
      "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "14331:     return;",
      "14332:   order = fgetc(ifp) * 0x101;",
      "14333:   offset = base + get4() + 8;",
      "14334:   while ((save = ftell(ifp)) < offset)",
      "14335:   {",
      "14336:     for (tag = i = 0; i < 4; i++)",
      "14337:       tag = tag << 8 | fgetc(ifp);",
      "14338:     len = get4();",
      "14339:     switch (tag)",
      "14340:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14334: #ifdef LIBRAW_LIBRARY_BUILD",
      "14335:   if(offset>ifp->size()-8) // At least 8 bytes for tag/len",
      "14336:     offset = ifp->size()-8;",
      "14337: #endif",
      "14344:     if(len < 0)",
      "14345:       return; // just ignore wrong len?? or raise bad file exception?",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9ac8ff5213164bfd54ce7e9b789083e363304a37",
      "candidate_info": {
        "commit_hash": "9ac8ff5213164bfd54ce7e9b789083e363304a37",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/9ac8ff5213164bfd54ce7e9b789083e363304a37",
        "files": [
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp"
        ],
        "message": "more checks on file offsets/tag len in parse_minolta",
        "before_after_code_files": [
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
          ],
          "candidate": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
          ]
        }
      },
      "candidate_diff": {
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15933: void CLASS parse_minolta(int base)",
          "15934: {",
          "15936:   short sorder = order;",
          "15938:   fseek(ifp, base, SEEK_SET);",
          "15939:   if (fgetc(ifp) || fgetc(ifp) - 'M' || fgetc(ifp) - 'R')",
          "",
          "[Removed Lines]",
          "15935:   int save, tag, len, offset, high = 0, wide = 0, i, c;",
          "",
          "[Added Lines]",
          "15935:   int tag, len, offset, high = 0, wide = 0, i, c;",
          "15937: #ifdef LIBRAW_LIBRARY_BUILD",
          "15938:   INT64 save;",
          "15939: #else",
          "15940:   int save;",
          "15941: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15941:   order = fgetc(ifp) * 0x101;",
          "15942:   offset = base + get4() + 8;",
          "15943: #ifdef LIBRAW_LIBRARY_BUILD",
          "15946: #endif",
          "15948:   while ((save = ftell(ifp)) < offset)",
          "",
          "[Removed Lines]",
          "15944:   if(offset>ifp->size()-8) // At least 8 bytes for tag/len",
          "15945:     offset = ifp->size()-8;",
          "",
          "[Added Lines]",
          "15949:   INT64 fsize = ifp->size();",
          "15950:   if(offset>fsize-8) // At least 8 bytes for tag/len",
          "15951:     offset = fsize-8;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "15952:     len = get4();",
          "15953:     if(len < 0)",
          "15954:       return; // just ignore wrong len?? or raise bad file exception?",
          "15955:     switch (tag)",
          "15956:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15961: #ifdef LIBRAW_LIBRARY_BUILD",
          "15962:     if((INT64)len + save + 8ULL > save)",
          "15963:       return; // just ignore out of file metadata, stop parse",
          "15964: #endif",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14593: void CLASS parse_minolta(int base)",
          "14594: {",
          "14596:   short sorder = order;",
          "14598:   fseek(ifp, base, SEEK_SET);",
          "14599:   if (fgetc(ifp) || fgetc(ifp) - 'M' || fgetc(ifp) - 'R')",
          "",
          "[Removed Lines]",
          "14595:   int save, tag, len, offset, high = 0, wide = 0, i, c;",
          "",
          "[Added Lines]",
          "14595:   int tag, len, offset, high = 0, wide = 0, i, c;",
          "14597: #ifdef LIBRAW_LIBRARY_BUILD",
          "14598:   INT64 save;",
          "14599: #else",
          "14600:   int save;",
          "14601: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14601:   order = fgetc(ifp) * 0x101;",
          "14602:   offset = base + get4() + 8;",
          "14603: #ifdef LIBRAW_LIBRARY_BUILD",
          "14606: #endif",
          "14608:   while ((save = ftell(ifp)) < offset)",
          "",
          "[Removed Lines]",
          "14604:   if(offset>ifp->size()-8) // At least 8 bytes for tag/len",
          "14605:     offset = ifp->size()-8;",
          "",
          "[Added Lines]",
          "14609:   INT64 fsize = ifp->size();",
          "14610:   if(offset>fsize-8) // At least 8 bytes for tag/len",
          "14611:     offset = fsize-8;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "14612:     len = get4();",
          "14613:     if(len < 0)",
          "14614:       return; // just ignore wrong len?? or raise bad file exception?",
          "14615:     switch (tag)",
          "14616:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14621: #ifdef LIBRAW_LIBRARY_BUILD",
          "14622:     if((INT64)len + save + 8ULL > save)",
          "14623:       return; // just ignore out of file metadata, stop parse",
          "14624: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e413d3fc6604b6fcb00d9acb493d9e97be0b2b9",
      "candidate_info": {
        "commit_hash": "5e413d3fc6604b6fcb00d9acb493d9e97be0b2b9",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/5e413d3fc6604b6fcb00d9acb493d9e97be0b2b9",
        "files": [
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp"
        ],
        "message": "Secunia Advisory SA83050: possible infinite loop in parse_minolta()",
        "before_after_code_files": [
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
          ],
          "candidate": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
          ]
        }
      },
      "candidate_diff": {
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15751:     return;",
          "15752:   order = fgetc(ifp) * 0x101;",
          "15753:   offset = base + get4() + 8;",
          "15754:   while ((save = ftell(ifp)) < offset)",
          "15755:   {",
          "15756:     for (tag = i = 0; i < 4; i++)",
          "15757:       tag = tag << 8 | fgetc(ifp);",
          "15758:     len = get4();",
          "15759:     switch (tag)",
          "15760:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15754: #ifdef LIBRAW_LIBRARY_BUILD",
          "15755:   if(offset>ifp->size()-8) // At least 8 bytes for tag/len",
          "15756:     offset = ifp->size()-8;",
          "15757: #endif",
          "15764:     if(len < 0)",
          "15765:       return; // just ignore wrong len?? or raise bad file exception?",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14413:     return;",
          "14414:   order = fgetc(ifp) * 0x101;",
          "14415:   offset = base + get4() + 8;",
          "14416:   while ((save = ftell(ifp)) < offset)",
          "14417:   {",
          "14418:     for (tag = i = 0; i < 4; i++)",
          "14419:       tag = tag << 8 | fgetc(ifp);",
          "14420:     len = get4();",
          "14421:     switch (tag)",
          "14422:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14416: #ifdef LIBRAW_LIBRARY_BUILD",
          "14417:   if(offset>ifp->size()-8) // At least 8 bytes for tag/len",
          "14418:     offset = ifp->size()-8;",
          "14419: #endif",
          "14426:     if(len < 0)",
          "14427:       return; // just ignore wrong len?? or raise bad file exception?",
          "",
          "---------------"
        ]
      }
    }
  ]
}