{
  "cve_id": "CVE-2020-15152",
  "cve_desc": "ftp-srv is an npm package which is a modern and extensible FTP server designed to be simple yet configurable. In ftp-srv before versions 2.19.6, 3.1.2, and 4.3.4 are vulnerable to Server-Side Request Forgery. The PORT command allows arbitrary IPs which can be used to cause the server to make a connection elsewhere. A possible workaround is blocking the PORT through the configuration. This issue is fixed in version2 2.19.6, 3.1.2, and 4.3.4. More information can be found on the linked advisory.",
  "repo": "autovance/ftp-srv",
  "patch_hash": "e449e75219d918c400dec65b4b0759f60476abca",
  "patch_info": {
    "commit_hash": "e449e75219d918c400dec65b4b0759f60476abca",
    "repo": "autovance/ftp-srv",
    "commit_url": "https://github.com/autovance/ftp-srv/commit/e449e75219d918c400dec65b4b0759f60476abca",
    "files": [
      "src/commands/registration/eprt.js",
      "src/commands/registration/epsv.js",
      "src/commands/registration/pasv.js",
      "src/commands/registration/port.js",
      "src/connector/active.js",
      "src/connector/base.js",
      "test/commands/registration/eprt.spec.js",
      "test/commands/registration/epsv.spec.js",
      "test/commands/registration/opts.spec.js",
      "test/connector/active.spec.js"
    ],
    "message": "fix: disallow PORT connections to alternate hosts\n\nEnsure the data socket that the server connects to from the PORT command is the same IP as the current command socket.\n\n* fix: add error handling to additional connection commands",
    "before_after_code_files": [
      "src/commands/registration/eprt.js||src/commands/registration/eprt.js",
      "src/commands/registration/epsv.js||src/commands/registration/epsv.js",
      "src/commands/registration/pasv.js||src/commands/registration/pasv.js",
      "src/commands/registration/port.js||src/commands/registration/port.js",
      "src/connector/active.js||src/connector/active.js",
      "src/connector/base.js||src/connector/base.js",
      "test/commands/registration/eprt.spec.js||test/commands/registration/eprt.spec.js",
      "test/commands/registration/epsv.spec.js||test/commands/registration/epsv.spec.js",
      "test/commands/registration/opts.spec.js||test/commands/registration/opts.spec.js",
      "test/connector/active.spec.js||test/connector/active.spec.js"
    ]
  },
  "patch_diff": {
    "src/commands/registration/eprt.js||src/commands/registration/eprt.js": [
      "File: src/commands/registration/eprt.js -> src/commands/registration/eprt.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: module.exports = {",
      "10:   directive: 'EPRT',",
      "12:     const [, protocol, ip, port] = _.chain(command).get('arg', '').split('|').value();",
      "13:     const family = FAMILY[protocol];",
      "14:     if (!family) return this.reply(504, 'Unknown network protocol');",
      "16:     this.connector = new ActiveConnector(this);",
      "17:     return this.connector.setupConnection(ip, port, family)",
      "19:   },",
      "20:   syntax: '{{cmd}} |<protocol>|<address>|<port>|',",
      "21:   description: 'Specifies an address and port to which the server should connect'",
      "",
      "[Removed Lines]",
      "11:   handler: function ({command} = {}) {",
      "18:     .then(() => this.reply(200));",
      "",
      "[Added Lines]",
      "11:   handler: function ({log, command} = {}) {",
      "18:     .then(() => this.reply(200))",
      "19:     .catch((err) => {",
      "20:       log.error(err);",
      "21:       return this.reply(err.code || 425, err.message);",
      "22:     });",
      "",
      "---------------"
    ],
    "src/commands/registration/epsv.js||src/commands/registration/epsv.js": [
      "File: src/commands/registration/epsv.js -> src/commands/registration/epsv.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: module.exports = {",
      "4:   directive: 'EPSV',",
      "6:     this.connector = new PassiveConnector(this);",
      "7:     return this.connector.setupServer()",
      "8:     .then((server) => {",
      "9:       const {port} = server.address();",
      "11:       return this.reply(229, `EPSV OK (|||${port}|)`);",
      "12:     });",
      "13:   },",
      "14:   syntax: '{{cmd}} [<protocol>]',",
      "",
      "[Removed Lines]",
      "5:   handler: function () {",
      "",
      "[Added Lines]",
      "5:   handler: function ({log}) {",
      "12:     })",
      "13:     .catch((err) => {",
      "14:       log.error(err);",
      "15:       return this.reply(err.code || 425, err.message);",
      "",
      "---------------"
    ],
    "src/commands/registration/pasv.js||src/commands/registration/pasv.js": [
      "File: src/commands/registration/pasv.js -> src/commands/registration/pasv.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:     })",
      "26:     .catch((err) => {",
      "27:       log.error(err);",
      "29:     });",
      "30:   },",
      "31:   syntax: '{{cmd}}',",
      "",
      "[Removed Lines]",
      "28:       return this.reply(425);",
      "",
      "[Added Lines]",
      "28:       return this.reply(err.code || 425, err.message);",
      "",
      "---------------"
    ],
    "src/commands/registration/port.js||src/commands/registration/port.js": [
      "File: src/commands/registration/port.js -> src/commands/registration/port.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "17:     .then(() => this.reply(200))",
      "18:     .catch((err) => {",
      "19:       log.error(err);",
      "21:     });",
      "22:   },",
      "23:   syntax: '{{cmd}} <x>,<x>,<x>,<x>,<y>,<y>',",
      "",
      "[Removed Lines]",
      "20:       return this.reply(425);",
      "",
      "[Added Lines]",
      "20:       return this.reply(err.code || 425, err.message);",
      "",
      "---------------"
    ],
    "src/connector/active.js||src/connector/active.js": [
      "File: src/connector/active.js -> src/connector/active.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: const {Socket} = require('net');",
      "2: const tls = require('tls');",
      "3: const Promise = require('bluebird');",
      "4: const Connector = require('./base');",
      "6: class Active extends Connector {",
      "7:   constructor(connection) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: const ip = require('ip');",
      "6: const {SocketError} = require('../errors');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "28:     return closeExistingServer()",
      "29:     .then(() => {",
      "30:       this.dataSocket = new Socket();",
      "31:       this.dataSocket.on('error', (err) => this.server && this.server.emit('client-error', {connection: this.connection, context: 'dataSocket', error: err}));",
      "32:       this.dataSocket.connect({host, port, family}, () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32:       if (!ip.isEqual(this.connection.commandSocket.remoteAddress, host)) {",
      "33:         throw new SocketError('The given address is not yours', 500);",
      "34:       }",
      "",
      "---------------"
    ],
    "src/connector/base.js||src/connector/base.js": [
      "File: src/connector/base.js -> src/connector/base.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:   closeSocket() {",
      "30:     if (this.dataSocket) {",
      "31:       const socket = this.dataSocket;",
      "33:       this.dataSocket = null;",
      "34:     }",
      "35:   }",
      "",
      "[Removed Lines]",
      "32:       this.dataSocket.end(() => socket.destroy());",
      "",
      "[Added Lines]",
      "32:       this.dataSocket.end(() => socket && socket.destroy());",
      "",
      "---------------"
    ],
    "test/commands/registration/eprt.spec.js||test/commands/registration/eprt.spec.js": [
      "File: test/commands/registration/eprt.spec.js -> test/commands/registration/eprt.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:   });",
      "25:   it('// unsuccessful | no argument', () => {",
      "27:     .then(() => {",
      "28:       expect(mockClient.reply.args[0][0]).to.equal(504);",
      "29:     });",
      "",
      "[Removed Lines]",
      "26:     return cmdFn()",
      "",
      "[Added Lines]",
      "26:     return cmdFn({})",
      "",
      "---------------"
    ],
    "test/commands/registration/epsv.spec.js||test/commands/registration/epsv.spec.js": [
      "File: test/commands/registration/epsv.spec.js -> test/commands/registration/epsv.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:   });",
      "27:   it('// successful IPv4', () => {",
      "29:     .then(() => {",
      "30:       const [code, message] = mockClient.reply.args[0];",
      "31:       expect(code).to.equal(229);",
      "",
      "[Removed Lines]",
      "28:     return cmdFn()",
      "",
      "[Added Lines]",
      "28:     return cmdFn({})",
      "",
      "---------------"
    ],
    "test/commands/registration/opts.spec.js||test/commands/registration/opts.spec.js": [
      "File: test/commands/registration/opts.spec.js -> test/commands/registration/opts.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:   it('BAD // unsuccessful', () => {",
      "30:     return cmdFn({command: {arg: 'BAD', directive: CMD}})",
      "31:     .then(() => {",
      "33:     });",
      "34:   });",
      "",
      "[Removed Lines]",
      "32:       expect(mockClient.reply.args[0][0]).to.equal(500);",
      "",
      "[Added Lines]",
      "32:       expect(mockClient.reply.args[0][0]).to.equal(501);",
      "",
      "---------------"
    ],
    "test/connector/active.spec.js||test/connector/active.spec.js": [
      "File: test/connector/active.spec.js -> test/connector/active.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "13:   let getNextPort = getNextPortFactory(host, 1024);",
      "14:   let PORT;",
      "15:   let active;",
      "17:   let sandbox;",
      "18:   let server;",
      "23:   beforeEach((done) => {",
      "24:     sandbox = sinon.sandbox.create().usingPromise(Promise);",
      "26:     getNextPort()",
      "",
      "[Removed Lines]",
      "16:   let mockConnection = {};",
      "20:   before(() => {",
      "21:     active = new ActiveConnector(mockConnection);",
      "22:   });",
      "",
      "[Added Lines]",
      "16:   let mockConnection = {",
      "17:     commandSocket: {",
      "18:       remoteAddress: '::ffff:127.0.0.1'",
      "19:     }",
      "20:   };",
      "25:     active = new ActiveConnector(mockConnection);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:       .listen(PORT, () => done());",
      "32:     });",
      "33:   });",
      "35:     sandbox.restore();",
      "37:   });",
      "39:   it('sets up a connection', function () {",
      "",
      "[Removed Lines]",
      "34:   afterEach((done) => {",
      "36:     server.close(done);",
      "",
      "[Added Lines]",
      "37:   afterEach(() => {",
      "39:     server.close();",
      "40:     active.end();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "43:     });",
      "44:   });",
      "49:     return active.setupConnection(host, PORT)",
      "50:     .then(() => {",
      "53:     });",
      "54:   });",
      "",
      "[Removed Lines]",
      "46:   it('destroys existing connection, then sets up a connection', function () {",
      "47:     const destroyFnSpy = sandbox.spy(active.dataSocket, 'destroy');",
      "51:       expect(destroyFnSpy.callCount).to.equal(1);",
      "52:       expect(active.dataSocket).to.exist;",
      "",
      "[Added Lines]",
      "51:   it('rejects alternative host', function () {",
      "52:     return active.setupConnection('123.45.67.89', PORT)",
      "53:     .catch((err) => {",
      "54:       expect(err.code).to.equal(500);",
      "55:       expect(err.message).to.equal('The given address is not yours');",
      "56:     })",
      "57:     .finally(() => {",
      "58:       expect(active.dataSocket).not.to.exist;",
      "59:     });",
      "60:   });",
      "62:   it('destroys existing connection, then sets up a connection', function () {",
      "65:       const destroyFnSpy = sandbox.spy(active.dataSocket, 'destroy');",
      "67:       return active.setupConnection(host, PORT)",
      "68:       .then(() => {",
      "69:         expect(destroyFnSpy.callCount).to.equal(1);",
      "70:         expect(active.dataSocket).to.exist;",
      "71:       });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb32b012c3baf48ee804e1dc36544cbba70b00d3",
      "candidate_info": {
        "commit_hash": "fb32b012c3baf48ee804e1dc36544cbba70b00d3",
        "repo": "autovance/ftp-srv",
        "commit_url": "https://github.com/autovance/ftp-srv/commit/fb32b012c3baf48ee804e1dc36544cbba70b00d3",
        "files": [
          "src/commands/registration/eprt.js",
          "src/commands/registration/epsv.js",
          "src/commands/registration/pasv.js",
          "src/commands/registration/port.js",
          "src/connector/active.js",
          "src/connector/base.js",
          "test/commands/registration/eprt.spec.js",
          "test/commands/registration/epsv.spec.js",
          "test/commands/registration/opts.spec.js",
          "test/connector/active.spec.js"
        ],
        "message": "fix: disallow PORT connections to alternate hosts\n\nEnsure the data socket that the server connects to from the PORT command is the same IP as the current command socket.\n\n* fix: add error handling to additional connection commands",
        "before_after_code_files": [
          "src/commands/registration/eprt.js||src/commands/registration/eprt.js",
          "src/commands/registration/epsv.js||src/commands/registration/epsv.js",
          "src/commands/registration/pasv.js||src/commands/registration/pasv.js",
          "src/commands/registration/port.js||src/commands/registration/port.js",
          "src/connector/active.js||src/connector/active.js",
          "src/connector/base.js||src/connector/base.js",
          "test/commands/registration/eprt.spec.js||test/commands/registration/eprt.spec.js",
          "test/commands/registration/epsv.spec.js||test/commands/registration/epsv.spec.js",
          "test/commands/registration/opts.spec.js||test/commands/registration/opts.spec.js",
          "test/connector/active.spec.js||test/connector/active.spec.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/commands/registration/eprt.js||src/commands/registration/eprt.js",
            "src/commands/registration/epsv.js||src/commands/registration/epsv.js",
            "src/commands/registration/pasv.js||src/commands/registration/pasv.js",
            "src/commands/registration/port.js||src/commands/registration/port.js",
            "src/connector/active.js||src/connector/active.js",
            "src/connector/base.js||src/connector/base.js",
            "test/commands/registration/eprt.spec.js||test/commands/registration/eprt.spec.js",
            "test/commands/registration/epsv.spec.js||test/commands/registration/epsv.spec.js",
            "test/commands/registration/opts.spec.js||test/commands/registration/opts.spec.js",
            "test/connector/active.spec.js||test/connector/active.spec.js"
          ],
          "candidate": [
            "src/commands/registration/eprt.js||src/commands/registration/eprt.js",
            "src/commands/registration/epsv.js||src/commands/registration/epsv.js",
            "src/commands/registration/pasv.js||src/commands/registration/pasv.js",
            "src/commands/registration/port.js||src/commands/registration/port.js",
            "src/connector/active.js||src/connector/active.js",
            "src/connector/base.js||src/connector/base.js",
            "test/commands/registration/eprt.spec.js||test/commands/registration/eprt.spec.js",
            "test/commands/registration/epsv.spec.js||test/commands/registration/epsv.spec.js",
            "test/commands/registration/opts.spec.js||test/commands/registration/opts.spec.js",
            "test/connector/active.spec.js||test/connector/active.spec.js"
          ]
        }
      },
      "candidate_diff": {
        "src/commands/registration/eprt.js||src/commands/registration/eprt.js": [
          "File: src/commands/registration/eprt.js -> src/commands/registration/eprt.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: module.exports = {",
          "10:   directive: 'EPRT',",
          "12:     const [, protocol, ip, port] = _.chain(command).get('arg', '').split('|').value();",
          "13:     const family = FAMILY[protocol];",
          "14:     if (!family) return this.reply(504, 'Unknown network protocol');",
          "16:     this.connector = new ActiveConnector(this);",
          "17:     return this.connector.setupConnection(ip, port, family)",
          "19:   },",
          "20:   syntax: '{{cmd}} |<protocol>|<address>|<port>|',",
          "21:   description: 'Specifies an address and port to which the server should connect'",
          "",
          "[Removed Lines]",
          "11:   handler: function ({command} = {}) {",
          "18:     .then(() => this.reply(200));",
          "",
          "[Added Lines]",
          "11:   handler: function ({log, command} = {}) {",
          "18:     .then(() => this.reply(200))",
          "19:     .catch((err) => {",
          "20:       log.error(err);",
          "21:       return this.reply(err.code || 425, err.message);",
          "22:     });",
          "",
          "---------------"
        ],
        "src/commands/registration/epsv.js||src/commands/registration/epsv.js": [
          "File: src/commands/registration/epsv.js -> src/commands/registration/epsv.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: module.exports = {",
          "4:   directive: 'EPSV',",
          "6:     this.connector = new PassiveConnector(this);",
          "7:     return this.connector.setupServer()",
          "8:     .then(server => {",
          "9:       const {port} = server.address();",
          "11:       return this.reply(229, `EPSV OK (|||${port}|)`);",
          "12:     });",
          "13:   },",
          "14:   syntax: '{{cmd}} [<protocol>]',",
          "",
          "[Removed Lines]",
          "5:   handler: function () {",
          "",
          "[Added Lines]",
          "5:   handler: function ({log}) {",
          "12:     })",
          "13:     .catch((err) => {",
          "14:       log.error(err);",
          "15:       return this.reply(err.code || 425, err.message);",
          "",
          "---------------"
        ],
        "src/commands/registration/pasv.js||src/commands/registration/pasv.js": [
          "File: src/commands/registration/pasv.js -> src/commands/registration/pasv.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:       const portByte2 = port % 256;",
          "15:       return this.reply(227, `PASV OK (${host},${portByte1},${portByte2})`);",
          "16:     });",
          "17:   },",
          "18:   syntax: '{{cmd}}',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:     })",
          "17:     .catch((err) => {",
          "18:       log.error(err);",
          "19:       return this.reply(err.code || 425, err.message);",
          "",
          "---------------"
        ],
        "src/commands/registration/port.js||src/commands/registration/port.js": [
          "File: src/commands/registration/port.js -> src/commands/registration/port.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     const port = portBytes[0] * 256 + portBytes[1];",
          "16:     return this.connector.setupConnection(ip, port)",
          "18:   },",
          "19:   syntax: '{{cmd}} <x>,<x>,<x>,<x>,<y>,<y>',",
          "20:   description: 'Specifies an address and port to which the server should connect'",
          "",
          "[Removed Lines]",
          "17:     .then(() => this.reply(200));",
          "",
          "[Added Lines]",
          "17:     .then(() => this.reply(200))",
          "18:     .catch((err) => {",
          "19:       log.error(err);",
          "20:       return this.reply(err.code || 425, err.message);",
          "21:     });",
          "",
          "---------------"
        ],
        "src/connector/active.js||src/connector/active.js": [
          "File: src/connector/active.js -> src/connector/active.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const {Socket} = require('net');",
          "2: const tls = require('tls');",
          "3: const Promise = require('bluebird');",
          "4: const Connector = require('./base');",
          "6: class Active extends Connector {",
          "7:   constructor(connection) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: const ip = require('ip');",
          "6: const {SocketError} = require('../errors');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     return closeExistingServer()",
          "29:     .then(() => {",
          "30:       this.dataSocket = new Socket();",
          "31:       this.dataSocket.setEncoding(this.connection.transferType);",
          "32:       this.dataSocket.on('error', err => this.server && this.server.emit('client-error', {connection: this.connection, context: 'dataSocket', error: err}));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:       if (!ip.isEqual(this.connection.commandSocket.remoteAddress, host)) {",
          "33:         throw new SocketError('The given address is not yours', 500);",
          "34:       }",
          "",
          "---------------"
        ],
        "src/connector/base.js||src/connector/base.js": [
          "File: src/connector/base.js -> src/connector/base.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   end() {",
          "30:     const closeDataSocket = new Promise(resolve => {",
          "32:       else resolve();",
          "33:     });",
          "34:     const closeDataServer = new Promise(resolve => {",
          "",
          "[Removed Lines]",
          "31:       if (this.dataSocket) this.dataSocket.end();",
          "",
          "[Added Lines]",
          "31:       if (this.dataSocket) this.dataSocket.end(() => socket && socket.destroy());",
          "",
          "---------------"
        ],
        "test/commands/registration/eprt.spec.js||test/commands/registration/eprt.spec.js": [
          "File: test/commands/registration/eprt.spec.js -> test/commands/registration/eprt.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   });",
          "25:   it('// unsuccessful | no argument', () => {",
          "27:     .then(() => {",
          "28:       expect(mockClient.reply.args[0][0]).to.equal(504);",
          "29:     });",
          "",
          "[Removed Lines]",
          "26:     return cmdFn()",
          "",
          "[Added Lines]",
          "26:     return cmdFn({})",
          "",
          "---------------"
        ],
        "test/commands/registration/epsv.spec.js||test/commands/registration/epsv.spec.js": [
          "File: test/commands/registration/epsv.spec.js -> test/commands/registration/epsv.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   });",
          "27:   it('// successful IPv4', () => {",
          "29:     .then(() => {",
          "30:       const [code, message] = mockClient.reply.args[0];",
          "31:       expect(code).to.equal(229);",
          "",
          "[Removed Lines]",
          "28:     return cmdFn()",
          "",
          "[Added Lines]",
          "28:     return cmdFn({})",
          "",
          "---------------"
        ],
        "test/commands/registration/opts.spec.js||test/commands/registration/opts.spec.js": [
          "File: test/commands/registration/opts.spec.js -> test/commands/registration/opts.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   it('BAD // unsuccessful', () => {",
          "30:     return cmdFn({command: {arg: 'BAD', directive: CMD}})",
          "31:     .then(() => {",
          "33:     });",
          "34:   });",
          "",
          "[Removed Lines]",
          "32:       expect(mockClient.reply.args[0][0]).to.equal(500);",
          "",
          "[Added Lines]",
          "32:       expect(mockClient.reply.args[0][0]).to.equal(501);",
          "",
          "---------------"
        ],
        "test/connector/active.spec.js||test/connector/active.spec.js": [
          "File: test/connector/active.spec.js -> test/connector/active.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: const {expect} = require('chai');",
          "3: const sinon = require('sinon');",
          "5: const net = require('net');",
          "6: const tls = require('tls');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: const Promise = require('bluebird');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: describe('Connector - Active //', function () {",
          "12:   let PORT;",
          "13:   let active;",
          "15:   let sandbox;",
          "16:   let server;",
          "19:     active = new ActiveConnector(mockConnection);",
          "24:     findPort()",
          "25:     .then(port => {",
          "",
          "[Removed Lines]",
          "14:   let mockConnection = {};",
          "18:   before(() => {",
          "20:   });",
          "21:   beforeEach(done => {",
          "22:     sandbox = sinon.sandbox.create();",
          "",
          "[Added Lines]",
          "15:   let mockConnection = {",
          "16:     commandSocket: {",
          "17:       remoteAddress: '::ffff:127.0.0.1'",
          "18:     }",
          "19:   };",
          "23:   beforeEach((done) => {",
          "25:     sandbox = sinon.sandbox.create().usingPromise(Promise);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29:       .listen(PORT, () => done());",
          "30:     });",
          "31:   });",
          "33:     sandbox.restore();",
          "35:   });",
          "37:   it('sets up a connection', function () {",
          "",
          "[Removed Lines]",
          "32:   afterEach(done => {",
          "34:     server.close(done);",
          "",
          "[Added Lines]",
          "36:   afterEach(() => {",
          "38:     server.close();",
          "39:     active.end();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "41:     });",
          "42:   });",
          "47:     return active.setupConnection('127.0.0.1', PORT)",
          "48:     .then(() => {",
          "51:     });",
          "52:   });",
          "",
          "[Removed Lines]",
          "44:   it('destroys existing connection, then sets up a connection', function () {",
          "45:     const destroyFnSpy = sandbox.spy(active.dataSocket, 'destroy');",
          "49:       expect(destroyFnSpy.callCount).to.equal(1);",
          "50:       expect(active.dataSocket).to.exist;",
          "",
          "[Added Lines]",
          "49:   it('rejects alternative host', function () {",
          "50:     return active.setupConnection('123.45.67.89', PORT)",
          "51:     .catch((err) => {",
          "52:       expect(err.code).to.equal(500);",
          "53:       expect(err.message).to.equal('The given address is not yours');",
          "54:     })",
          "55:     .finally(() => {",
          "56:       expect(active.dataSocket).not.to.exist;",
          "57:     });",
          "58:   });",
          "60:   it('destroys existing connection, then sets up a connection', function () {",
          "63:       const destroyFnSpy = sandbox.spy(active.dataSocket, 'destroy');",
          "65:       return active.setupConnection('127.0.0.1', PORT)",
          "66:       .then(() => {",
          "67:         expect(destroyFnSpy.callCount).to.equal(1);",
          "68:         expect(active.dataSocket).to.exist;",
          "69:       });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5508c2346cf23b24c20070ff2e8a47c647d3d5b5",
      "candidate_info": {
        "commit_hash": "5508c2346cf23b24c20070ff2e8a47c647d3d5b5",
        "repo": "autovance/ftp-srv",
        "commit_url": "https://github.com/autovance/ftp-srv/commit/5508c2346cf23b24c20070ff2e8a47c647d3d5b5",
        "files": [
          "src/commands/registration/eprt.js",
          "src/commands/registration/epsv.js",
          "src/commands/registration/pasv.js",
          "src/commands/registration/port.js",
          "src/connector/active.js",
          "src/connector/base.js",
          "test/commands/registration/eprt.spec.js",
          "test/commands/registration/epsv.spec.js",
          "test/commands/registration/opts.spec.js",
          "test/connector/active.spec.js"
        ],
        "message": "fix: disallow PORT connections to alternate hosts\n\nEnsure the data socket that the server connects to from the PORT command is the same IP as the current command socket.\n\n* fix: add error handling to additional connection commands",
        "before_after_code_files": [
          "src/commands/registration/eprt.js||src/commands/registration/eprt.js",
          "src/commands/registration/epsv.js||src/commands/registration/epsv.js",
          "src/commands/registration/pasv.js||src/commands/registration/pasv.js",
          "src/commands/registration/port.js||src/commands/registration/port.js",
          "src/connector/active.js||src/connector/active.js",
          "src/connector/base.js||src/connector/base.js",
          "test/commands/registration/eprt.spec.js||test/commands/registration/eprt.spec.js",
          "test/commands/registration/epsv.spec.js||test/commands/registration/epsv.spec.js",
          "test/commands/registration/opts.spec.js||test/commands/registration/opts.spec.js",
          "test/connector/active.spec.js||test/connector/active.spec.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/commands/registration/eprt.js||src/commands/registration/eprt.js",
            "src/commands/registration/epsv.js||src/commands/registration/epsv.js",
            "src/commands/registration/pasv.js||src/commands/registration/pasv.js",
            "src/commands/registration/port.js||src/commands/registration/port.js",
            "src/connector/active.js||src/connector/active.js",
            "src/connector/base.js||src/connector/base.js",
            "test/commands/registration/eprt.spec.js||test/commands/registration/eprt.spec.js",
            "test/commands/registration/epsv.spec.js||test/commands/registration/epsv.spec.js",
            "test/commands/registration/opts.spec.js||test/commands/registration/opts.spec.js",
            "test/connector/active.spec.js||test/connector/active.spec.js"
          ],
          "candidate": [
            "src/commands/registration/eprt.js||src/commands/registration/eprt.js",
            "src/commands/registration/epsv.js||src/commands/registration/epsv.js",
            "src/commands/registration/pasv.js||src/commands/registration/pasv.js",
            "src/commands/registration/port.js||src/commands/registration/port.js",
            "src/connector/active.js||src/connector/active.js",
            "src/connector/base.js||src/connector/base.js",
            "test/commands/registration/eprt.spec.js||test/commands/registration/eprt.spec.js",
            "test/commands/registration/epsv.spec.js||test/commands/registration/epsv.spec.js",
            "test/commands/registration/opts.spec.js||test/commands/registration/opts.spec.js",
            "test/connector/active.spec.js||test/connector/active.spec.js"
          ]
        }
      },
      "candidate_diff": {
        "src/commands/registration/eprt.js||src/commands/registration/eprt.js": [
          "File: src/commands/registration/eprt.js -> src/commands/registration/eprt.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: module.exports = {",
          "10:   directive: 'EPRT',",
          "12:     const [, protocol, ip, port] = _.chain(command).get('arg', '').split('|').value();",
          "13:     const family = FAMILY[protocol];",
          "14:     if (!family) return this.reply(504, 'Unknown network protocol');",
          "16:     this.connector = new ActiveConnector(this);",
          "17:     return this.connector.setupConnection(ip, port, family)",
          "19:   },",
          "20:   syntax: '{{cmd}} |<protocol>|<address>|<port>|',",
          "21:   description: 'Specifies an address and port to which the server should connect'",
          "",
          "[Removed Lines]",
          "11:   handler: function ({command} = {}) {",
          "18:     .then(() => this.reply(200));",
          "",
          "[Added Lines]",
          "11:   handler: function ({log, command} = {}) {",
          "18:     .then(() => this.reply(200))",
          "19:     .catch((err) => {",
          "20:       log.error(err);",
          "21:       return this.reply(err.code || 425, err.message);",
          "22:     });",
          "",
          "---------------"
        ],
        "src/commands/registration/epsv.js||src/commands/registration/epsv.js": [
          "File: src/commands/registration/epsv.js -> src/commands/registration/epsv.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: module.exports = {",
          "4:   directive: 'EPSV',",
          "6:     this.connector = new PassiveConnector(this);",
          "7:     return this.connector.setupServer()",
          "8:     .then((server) => {",
          "9:       const {port} = server.address();",
          "11:       return this.reply(229, `EPSV OK (|||${port}|)`);",
          "12:     });",
          "13:   },",
          "14:   syntax: '{{cmd}} [<protocol>]',",
          "",
          "[Removed Lines]",
          "5:   handler: function () {",
          "",
          "[Added Lines]",
          "5:   handler: function ({log}) {",
          "12:     })",
          "13:     .catch((err) => {",
          "14:       log.error(err);",
          "15:       return this.reply(err.code || 425, err.message);",
          "",
          "---------------"
        ],
        "src/commands/registration/pasv.js||src/commands/registration/pasv.js": [
          "File: src/commands/registration/pasv.js -> src/commands/registration/pasv.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:       const portByte2 = port % 256;",
          "15:       return this.reply(227, `PASV OK (${host},${portByte1},${portByte2})`);",
          "16:     });",
          "17:   },",
          "18:   syntax: '{{cmd}}',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:     })",
          "17:     .catch((err) => {",
          "18:       log.error(err);",
          "19:       return this.reply(err.code || 425, err.message);",
          "",
          "---------------"
        ],
        "src/commands/registration/port.js||src/commands/registration/port.js": [
          "File: src/commands/registration/port.js -> src/commands/registration/port.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     const port = portBytes[0] * 256 + portBytes[1];",
          "16:     return this.connector.setupConnection(ip, port)",
          "18:   },",
          "19:   syntax: '{{cmd}} <x>,<x>,<x>,<x>,<y>,<y>',",
          "20:   description: 'Specifies an address and port to which the server should connect'",
          "",
          "[Removed Lines]",
          "17:     .then(() => this.reply(200));",
          "",
          "[Added Lines]",
          "17:     .then(() => this.reply(200))",
          "18:     .catch((err) => {",
          "19:       log.error(err);",
          "20:       return this.reply(err.code || 425, err.message);",
          "21:     });",
          "",
          "---------------"
        ],
        "src/connector/active.js||src/connector/active.js": [
          "File: src/connector/active.js -> src/connector/active.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const {Socket} = require('net');",
          "2: const tls = require('tls');",
          "3: const Promise = require('bluebird');",
          "4: const Connector = require('./base');",
          "6: class Active extends Connector {",
          "7:   constructor(connection) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: const ip = require('ip');",
          "6: const {SocketError} = require('../errors');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     return closeExistingServer()",
          "29:     .then(() => {",
          "30:       this.dataSocket = new Socket();",
          "31:       this.dataSocket.setEncoding(this.connection.transferType);",
          "32:       this.dataSocket.on('error', (err) => this.server && this.server.emit('client-error', {connection: this.connection, context: 'dataSocket', error: err}));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:       if (!ip.isEqual(this.connection.commandSocket.remoteAddress, host)) {",
          "33:         throw new SocketError('The given address is not yours', 500);",
          "34:       }",
          "",
          "---------------"
        ],
        "src/connector/base.js||src/connector/base.js": [
          "File: src/connector/base.js -> src/connector/base.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   closeSocket() {",
          "30:     if (this.dataSocket) {",
          "31:       const socket = this.dataSocket;",
          "33:       this.dataSocket = null;",
          "34:     }",
          "35:   }",
          "",
          "[Removed Lines]",
          "32:       this.dataSocket.end(() => socket.destroy());",
          "",
          "[Added Lines]",
          "32:       this.dataSocket.end(() => socket && socket.destroy());",
          "",
          "---------------"
        ],
        "test/commands/registration/eprt.spec.js||test/commands/registration/eprt.spec.js": [
          "File: test/commands/registration/eprt.spec.js -> test/commands/registration/eprt.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   });",
          "25:   it('// unsuccessful | no argument', () => {",
          "27:     .then(() => {",
          "28:       expect(mockClient.reply.args[0][0]).to.equal(504);",
          "29:     });",
          "",
          "[Removed Lines]",
          "26:     return cmdFn()",
          "",
          "[Added Lines]",
          "26:     return cmdFn({})",
          "",
          "---------------"
        ],
        "test/commands/registration/epsv.spec.js||test/commands/registration/epsv.spec.js": [
          "File: test/commands/registration/epsv.spec.js -> test/commands/registration/epsv.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   });",
          "27:   it('// successful IPv4', () => {",
          "29:     .then(() => {",
          "30:       const [code, message] = mockClient.reply.args[0];",
          "31:       expect(code).to.equal(229);",
          "",
          "[Removed Lines]",
          "28:     return cmdFn()",
          "",
          "[Added Lines]",
          "28:     return cmdFn({})",
          "",
          "---------------"
        ],
        "test/commands/registration/opts.spec.js||test/commands/registration/opts.spec.js": [
          "File: test/commands/registration/opts.spec.js -> test/commands/registration/opts.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   it('BAD // unsuccessful', () => {",
          "30:     return cmdFn({command: {arg: 'BAD', directive: CMD}})",
          "31:     .then(() => {",
          "33:     });",
          "34:   });",
          "",
          "[Removed Lines]",
          "32:       expect(mockClient.reply.args[0][0]).to.equal(500);",
          "",
          "[Added Lines]",
          "32:       expect(mockClient.reply.args[0][0]).to.equal(501);",
          "",
          "---------------"
        ],
        "test/connector/active.spec.js||test/connector/active.spec.js": [
          "File: test/connector/active.spec.js -> test/connector/active.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   let getNextPort = getNextPortFactory(1024);",
          "13:   let PORT;",
          "14:   let active;",
          "16:   let sandbox;",
          "17:   let server;",
          "22:   beforeEach((done) => {",
          "23:     sandbox = sinon.sandbox.create().usingPromise(Promise);",
          "25:     getNextPort()",
          "",
          "[Removed Lines]",
          "15:   let mockConnection = {};",
          "19:   before(() => {",
          "20:     active = new ActiveConnector(mockConnection);",
          "21:   });",
          "",
          "[Added Lines]",
          "15:   let mockConnection = {",
          "16:     commandSocket: {",
          "17:       remoteAddress: '::ffff:127.0.0.1'",
          "18:     }",
          "19:   };",
          "24:     active = new ActiveConnector(mockConnection);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:       .listen(PORT, () => done());",
          "31:     });",
          "32:   });",
          "34:     sandbox.restore();",
          "36:   });",
          "38:   it('sets up a connection', function () {",
          "",
          "[Removed Lines]",
          "33:   afterEach((done) => {",
          "35:     server.close(done);",
          "",
          "[Added Lines]",
          "36:   afterEach(() => {",
          "38:     server.close();",
          "39:     active.end();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:     });",
          "43:   });",
          "49:     .then(() => {",
          "52:     });",
          "53:   });",
          "",
          "[Removed Lines]",
          "45:   it('destroys existing connection, then sets up a connection', function () {",
          "46:     const destroyFnSpy = sandbox.spy(active.dataSocket, 'destroy');",
          "48:     return active.setupConnection('127.0.0.1', PORT)",
          "50:       expect(destroyFnSpy.callCount).to.equal(1);",
          "51:       expect(active.dataSocket).to.exist;",
          "",
          "[Added Lines]",
          "50:   it('rejects alternative host', function () {",
          "51:     return active.setupConnection('123.45.67.89', PORT)",
          "52:     .catch((err) => {",
          "53:       expect(err.code).to.equal(500);",
          "54:       expect(err.message).to.equal('The given address is not yours');",
          "55:     })",
          "56:     .finally(() => {",
          "57:       expect(active.dataSocket).not.to.exist;",
          "58:     });",
          "59:   });",
          "61:   it('destroys existing connection, then sets up a connection', function () {",
          "62:     return active.setupConnection(host, PORT)",
          "64:       const destroyFnSpy = sandbox.spy(active.dataSocket, 'destroy');",
          "66:       return active.setupConnection(host, PORT)",
          "67:       .then(() => {",
          "68:         expect(destroyFnSpy.callCount).to.equal(1);",
          "69:         expect(active.dataSocket).to.exist;",
          "70:       });",
          "",
          "---------------"
        ]
      }
    }
  ]
}