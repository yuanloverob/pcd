{
  "cve_id": "CVE-2023-27483",
  "cve_desc": "crossplane-runtime is a set of go libraries used to build Kubernetes controllers in Crossplane and its related stacks. An out of memory panic vulnerability has been discovered in affected versions. Applications that use the `Paved` type's `SetValue` method with user provided input without proper validation might use excessive amounts of memory and cause an out of memory panic. In the fieldpath package, the Paved.SetValue method sets a value on the Paved object according to the provided path, without any validation. This allows setting values in slices at any provided index, which grows the target array up to the requested index, the index is currently capped at max uint32 (4294967295) given how indexes are parsed,  but that is still an unnecessarily large value. If callers are not validating paths' indexes on their own, which most probably are not going to do, given that the input is parsed directly in the SetValue method, this could allow users to consume arbitrary amounts of memory. Applications that do not use the `Paved` type's `SetValue` method are not affected. This issue has been addressed in versions 0.16.1 and 0.19.2. Users are advised to upgrade. Users unable to upgrade can parse and validate the path before passing it to the `SetValue` method of the `Paved` type, constraining the index size as deemed appropriate.",
  "repo": "crossplane/crossplane-runtime",
  "patch_hash": "53508a9f4374604db140dd8ab2fa52276441e738",
  "patch_info": {
    "commit_hash": "53508a9f4374604db140dd8ab2fa52276441e738",
    "repo": "crossplane/crossplane-runtime",
    "commit_url": "https://github.com/crossplane/crossplane-runtime/commit/53508a9f4374604db140dd8ab2fa52276441e738",
    "files": [
      "pkg/fieldpath/paved.go",
      "pkg/fieldpath/paved_test.go"
    ],
    "message": "Merge pull request from GHSA-vfvj-3m3g-m532\n\nfix: enforce max index value for paths",
    "before_after_code_files": [
      "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go",
      "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go"
    ]
  },
  "patch_diff": {
    "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go": [
      "File: pkg/fieldpath/paved.go -> pkg/fieldpath/paved.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:  \"github.com/crossplane/crossplane-runtime/pkg/errors\"",
      "26: )",
      "28: type errNotFound struct {",
      "29:  error",
      "30: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: const DefaultMaxFieldPathIndex = 1024",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48: type Paved struct {",
      "50: }",
      "55:  u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(o)",
      "57: }",
      "62: }",
      "",
      "[Removed Lines]",
      "49:  object map[string]any",
      "54: func PaveObject(o runtime.Object) (*Paved, error) {",
      "56:  return Pave(u), errors.Wrap(err, \"cannot convert object to unstructured data\")",
      "60: func Pave(object map[string]any) *Paved {",
      "61:  return &Paved{object: object}",
      "",
      "[Added Lines]",
      "52:  object            map[string]any",
      "53:  maxFieldPathIndex uint",
      "56: type PavedOption func(paved *Paved)",
      "60: func PaveObject(o runtime.Object, opts ...PavedOption) (*Paved, error) {",
      "62:  return Pave(u, opts...), errors.Wrap(err, \"cannot convert object to unstructured data\")",
      "66: func Pave(object map[string]any, opts ...PavedOption) *Paved {",
      "67:  p := &Paved{object: object, maxFieldPathIndex: DefaultMaxFieldPathIndex}",
      "69:  for _, opt := range opts {",
      "70:   opt(p)",
      "71:  }",
      "73:  return p",
      "74: }",
      "77: func WithMaxFieldPathIndex(max uint) PavedOption {",
      "78:  return func(paved *Paved) {",
      "79:   paved.maxFieldPathIndex = max",
      "80:  }",
      "81: }",
      "83: func (p *Paved) maxFieldPathIndexEnabled() bool {",
      "84:  return p.maxFieldPathIndex > 0",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "358:     return errors.Errorf(\"%s is not an array\", s[:i])",
      "359:    }",
      "361:    if final {",
      "362:     array[current.Index] = v",
      "363:     return nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "384:    if p.maxFieldPathIndexEnabled() && current.Index > p.maxFieldPathIndex {",
      "385:     return errors.Errorf(\"index %d is greater than max allowed index %d\", current.Index, p.maxFieldPathIndex)",
      "386:    }",
      "",
      "---------------"
    ],
    "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go": [
      "File: pkg/fieldpath/paved_test.go -> pkg/fieldpath/paved_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package fieldpath",
      "19: import (",
      "20:  \"testing\"",
      "22:  \"github.com/google/go-cmp/cmp\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20:  \"fmt\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "593:  type args struct {",
      "594:   path  string",
      "595:   value any",
      "596:  }",
      "597:  type want struct {",
      "598:   object map[string]any",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "597:   opts  []PavedOption",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "737:     },",
      "738:    },",
      "739:   },",
      "740:   \"MapStringString\": {",
      "741:    reason: \"A map of string to string should be converted to a map of string to any\",",
      "742:    data:   []byte(`{\"metadata\":{}}`),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "742:   \"RejectsHighIndexes\": {",
      "743:    reason: \"Paths having indexes above the maximum default value are rejected\",",
      "744:    data:   []byte(`{\"data\":[\"a\"]}`),",
      "745:    args: args{",
      "746:     path:  fmt.Sprintf(\"data[%v]\", MaxFieldPathIndex+1),",
      "747:     value: \"c\",",
      "748:    },",
      "749:    want: want{",
      "750:     object: map[string]any{",
      "751:      \"data\": []any{\"a\"}},",
      "752:     err: errors.Wrap(errors.Errorf(\"found index above max (%[1]v > %[2]v): data[%[1]v]\",",
      "753:      MaxFieldPathIndex+1, MaxFieldPathIndex), \"invalid segments\"),",
      "754:    },",
      "755:   },",
      "756:   \"NotRejectsHighIndexesIfNoDefaultOptions\": {",
      "757:    reason: \"Paths having indexes above the maximum default value are not rejected if default disabled\",",
      "758:    data:   []byte(`{\"data\":[\"a\"]}`),",
      "759:    args: args{",
      "760:     path:  fmt.Sprintf(\"data[%v]\", MaxFieldPathIndex+1),",
      "761:     value: \"c\",",
      "762:     opts:  []PavedOption{},",
      "763:    },",
      "764:    want: want{",
      "765:     object: map[string]any{",
      "766:      \"data\": func() []any {",
      "767:       res := make([]any, MaxFieldPathIndex+2)",
      "768:       res[0] = \"a\"",
      "769:       res[MaxFieldPathIndex+1] = \"c\"",
      "770:       return res",
      "771:      }()},",
      "772:    },",
      "773:   },",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "817:   t.Run(name, func(t *testing.T) {",
      "818:    in := make(map[string]any)",
      "819:    _ = json.Unmarshal(tc.data, &in)",
      "822:    err := p.SetValue(tc.args.path, tc.args.value)",
      "823:    if diff := cmp.Diff(tc.want.err, err, test.EquateErrors()); diff != \"\" {",
      "",
      "[Removed Lines]",
      "820:    p := Pave(in)",
      "",
      "[Added Lines]",
      "854:    p := Pave(in, tc.args.opts...)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "12c1e9f8ecd731afc4e092967508fa226b80a461",
      "candidate_info": {
        "commit_hash": "12c1e9f8ecd731afc4e092967508fa226b80a461",
        "repo": "crossplane/crossplane-runtime",
        "commit_url": "https://github.com/crossplane/crossplane-runtime/commit/12c1e9f8ecd731afc4e092967508fa226b80a461",
        "files": [
          "pkg/fieldpath/paved.go",
          "pkg/fieldpath/paved_test.go"
        ],
        "message": "fix: enforce max index value for paths\n\nSigned-off-by: Philippe Scorsolini <p.scorsolini@gmail.com>\n(cherry picked from commit 7560fbc0415bf69c219b96949f3b2d2839538d56)",
        "before_after_code_files": [
          "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go",
          "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go",
            "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go"
          ],
          "candidate": [
            "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go",
            "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go": [
          "File: pkg/fieldpath/paved.go -> pkg/fieldpath/paved.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  \"github.com/crossplane/crossplane-runtime/pkg/errors\"",
          "26: )",
          "28: type errNotFound struct {",
          "29:  error",
          "30: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: const DefaultMaxFieldPathIndex = 1024",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: type Paved struct {",
          "50: }",
          "55:  u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(o)",
          "57: }",
          "62: }",
          "",
          "[Removed Lines]",
          "49:  object map[string]any",
          "54: func PaveObject(o runtime.Object) (*Paved, error) {",
          "56:  return Pave(u), errors.Wrap(err, \"cannot convert object to unstructured data\")",
          "60: func Pave(object map[string]any) *Paved {",
          "61:  return &Paved{object: object}",
          "",
          "[Added Lines]",
          "52:  object            map[string]any",
          "53:  maxFieldPathIndex uint",
          "56: type PavedOption func(paved *Paved)",
          "60: func PaveObject(o runtime.Object, opts ...PavedOption) (*Paved, error) {",
          "62:  return Pave(u, opts...), errors.Wrap(err, \"cannot convert object to unstructured data\")",
          "66: func Pave(object map[string]any, opts ...PavedOption) *Paved {",
          "67:  p := &Paved{object: object, maxFieldPathIndex: DefaultMaxFieldPathIndex}",
          "69:  for _, opt := range opts {",
          "70:   opt(p)",
          "71:  }",
          "73:  return p",
          "74: }",
          "77: func WithMaxFieldPathIndex(max uint) PavedOption {",
          "78:  return func(paved *Paved) {",
          "79:   paved.maxFieldPathIndex = max",
          "80:  }",
          "81: }",
          "83: func (p *Paved) maxFieldPathIndexEnabled() bool {",
          "84:  return p.maxFieldPathIndex > 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "358:     return errors.Errorf(\"%s is not an array\", s[:i])",
          "359:    }",
          "361:    if final {",
          "362:     array[current.Index] = v",
          "363:     return nil",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384:    if p.maxFieldPathIndexEnabled() && current.Index > p.maxFieldPathIndex {",
          "385:     return errors.Errorf(\"index %d is greater than max allowed index %d\", current.Index, p.maxFieldPathIndex)",
          "386:    }",
          "",
          "---------------"
        ],
        "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go": [
          "File: pkg/fieldpath/paved_test.go -> pkg/fieldpath/paved_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package fieldpath",
          "19: import (",
          "20:  \"testing\"",
          "22:  \"github.com/google/go-cmp/cmp\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:  \"fmt\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593:  type args struct {",
          "594:   path  string",
          "595:   value any",
          "596:  }",
          "597:  type want struct {",
          "598:   object map[string]any",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:   opts  []PavedOption",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "737:     },",
          "738:    },",
          "739:   },",
          "740:   \"MapStringString\": {",
          "741:    reason: \"A map of string to string should be converted to a map of string to any\",",
          "742:    data:   []byte(`{\"metadata\":{}}`),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:   \"RejectsHighIndexes\": {",
          "743:    reason: \"Paths having indexes above the maximum default value are rejected\",",
          "744:    data:   []byte(`{\"data\":[\"a\"]}`),",
          "745:    args: args{",
          "746:     path:  fmt.Sprintf(\"data[%v]\", MaxFieldPathIndex+1),",
          "747:     value: \"c\",",
          "748:    },",
          "749:    want: want{",
          "750:     object: map[string]any{",
          "751:      \"data\": []any{\"a\"}},",
          "752:     err: errors.Wrap(errors.Errorf(\"found index above max (%[1]v > %[2]v): data[%[1]v]\",",
          "753:      MaxFieldPathIndex+1, MaxFieldPathIndex), \"invalid segments\"),",
          "754:    },",
          "755:   },",
          "756:   \"NotRejectsHighIndexesIfNoDefaultOptions\": {",
          "757:    reason: \"Paths having indexes above the maximum default value are not rejected if default disabled\",",
          "758:    data:   []byte(`{\"data\":[\"a\"]}`),",
          "759:    args: args{",
          "760:     path:  fmt.Sprintf(\"data[%v]\", MaxFieldPathIndex+1),",
          "761:     value: \"c\",",
          "762:     opts:  []PavedOption{},",
          "763:    },",
          "764:    want: want{",
          "765:     object: map[string]any{",
          "766:      \"data\": func() []any {",
          "767:       res := make([]any, MaxFieldPathIndex+2)",
          "768:       res[0] = \"a\"",
          "769:       res[MaxFieldPathIndex+1] = \"c\"",
          "770:       return res",
          "771:      }()},",
          "772:    },",
          "773:   },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "817:   t.Run(name, func(t *testing.T) {",
          "818:    in := make(map[string]any)",
          "819:    _ = json.Unmarshal(tc.data, &in)",
          "822:    err := p.SetValue(tc.args.path, tc.args.value)",
          "823:    if diff := cmp.Diff(tc.want.err, err, test.EquateErrors()); diff != \"\" {",
          "",
          "[Removed Lines]",
          "820:    p := Pave(in)",
          "",
          "[Added Lines]",
          "854:    p := Pave(in, tc.args.opts...)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4fccb39a42a963c67632d4120c11ff24d2eb38a",
      "candidate_info": {
        "commit_hash": "d4fccb39a42a963c67632d4120c11ff24d2eb38a",
        "repo": "crossplane/crossplane-runtime",
        "commit_url": "https://github.com/crossplane/crossplane-runtime/commit/d4fccb39a42a963c67632d4120c11ff24d2eb38a",
        "files": [
          "pkg/fieldpath/paved.go",
          "pkg/fieldpath/paved_test.go"
        ],
        "message": "fix: enforce max index value for paths\n\nSigned-off-by: Philippe Scorsolini <p.scorsolini@gmail.com>\n(cherry picked from commit 7560fbc0415bf69c219b96949f3b2d2839538d56)",
        "before_after_code_files": [
          "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go",
          "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go",
            "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go"
          ],
          "candidate": [
            "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go",
            "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go": [
          "File: pkg/fieldpath/paved.go -> pkg/fieldpath/paved.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  \"github.com/crossplane/crossplane-runtime/pkg/errors\"",
          "26: )",
          "28: type errNotFound struct {",
          "29:  error",
          "30: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: const DefaultMaxFieldPathIndex = 1024",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: type Paved struct {",
          "50: }",
          "55:  u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(o)",
          "57: }",
          "62: }",
          "",
          "[Removed Lines]",
          "49:  object map[string]interface{}",
          "54: func PaveObject(o runtime.Object) (*Paved, error) {",
          "56:  return Pave(u), errors.Wrap(err, \"cannot convert object to unstructured data\")",
          "60: func Pave(object map[string]interface{}) *Paved {",
          "61:  return &Paved{object: object}",
          "",
          "[Added Lines]",
          "52:  object            map[string]interface{}",
          "53:  maxFieldPathIndex uint",
          "56: type PavedOption func(paved *Paved)",
          "60: func PaveObject(o runtime.Object, opts ...PavedOption) (*Paved, error) {",
          "62:  return Pave(u, opts...), errors.Wrap(err, \"cannot convert object to unstructured data\")",
          "66: func Pave(object map[string]interface{}, opts ...PavedOption) *Paved {",
          "67:  p := &Paved{object: object, maxFieldPathIndex: DefaultMaxFieldPathIndex}",
          "69:  for _, opt := range opts {",
          "70:   opt(p)",
          "71:  }",
          "73:  return p",
          "74: }",
          "77: func WithMaxFieldPathIndex(max uint) PavedOption {",
          "78:  return func(paved *Paved) {",
          "79:   paved.maxFieldPathIndex = max",
          "80:  }",
          "81: }",
          "83: func (p *Paved) maxFieldPathIndexEnabled() bool {",
          "84:  return p.maxFieldPathIndex > 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "359:     return errors.Errorf(\"%s is not an array\", s[:i])",
          "360:    }",
          "362:    if final {",
          "363:     array[current.Index] = v",
          "364:     return nil",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385:    if p.maxFieldPathIndexEnabled() && current.Index > p.maxFieldPathIndex {",
          "386:     return errors.Errorf(\"index %d is greater than max allowed index %d\", current.Index, p.maxFieldPathIndex)",
          "387:    }",
          "",
          "---------------"
        ],
        "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go": [
          "File: pkg/fieldpath/paved_test.go -> pkg/fieldpath/paved_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package fieldpath",
          "19: import (",
          "20:  \"testing\"",
          "22:  \"github.com/google/go-cmp/cmp\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:  \"fmt\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593:  type args struct {",
          "594:   path  string",
          "595:   value interface{}",
          "596:  }",
          "597:  type want struct {",
          "598:   object map[string]interface{}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:   opts  []PavedOption",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "737:     },",
          "738:    },",
          "739:   },",
          "740:   \"MapStringString\": {",
          "741:    reason: \"A map of string to string should be converted to a map of string to interface{}\",",
          "742:    data:   []byte(`{\"metadata\":{}}`),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:   \"RejectsHighIndexes\": {",
          "743:    reason: \"Paths having indexes above the maximum default value are rejected\",",
          "744:    data:   []byte(`{\"data\":[\"a\"]}`),",
          "745:    args: args{",
          "746:     path:  fmt.Sprintf(\"data[%v]\", MaxFieldPathIndex+1),",
          "747:     value: \"c\",",
          "748:    },",
          "749:    want: want{",
          "750:     object: map[string]interface{}{",
          "751:      \"data\": []interface{}{\"a\"}},",
          "752:     err: errors.Wrap(errors.Errorf(\"found index above max (%[1]v > %[2]v): data[%[1]v]\",",
          "753:      MaxFieldPathIndex+1, MaxFieldPathIndex), \"invalid segments\"),",
          "754:    },",
          "755:   },",
          "756:   \"NotRejectsHighIndexesIfNoDefaultOptions\": {",
          "757:    reason: \"Paths having indexes above the maximum default value are not rejected if default disabled\",",
          "758:    data:   []byte(`{\"data\":[\"a\"]}`),",
          "759:    args: args{",
          "760:     path:  fmt.Sprintf(\"data[%v]\", MaxFieldPathIndex+1),",
          "761:     value: \"c\",",
          "762:     opts:  []PavedOption{},",
          "763:    },",
          "764:    want: want{",
          "765:     object: map[string]interface{}{",
          "766:      \"data\": func() []interface{} {",
          "767:       res := make([]interface{}, MaxFieldPathIndex+2)",
          "768:       res[0] = \"a\"",
          "769:       res[MaxFieldPathIndex+1] = \"c\"",
          "770:       return res",
          "771:      }()},",
          "772:    },",
          "773:   },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "817:   t.Run(name, func(t *testing.T) {",
          "818:    in := make(map[string]interface{})",
          "819:    _ = json.Unmarshal(tc.data, &in)",
          "822:    err := p.SetValue(tc.args.path, tc.args.value)",
          "823:    if diff := cmp.Diff(tc.want.err, err, test.EquateErrors()); diff != \"\" {",
          "",
          "[Removed Lines]",
          "820:    p := Pave(in)",
          "",
          "[Added Lines]",
          "854:    p := Pave(in, tc.args.opts...)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b5d269f55ddaf28dcdf995df929e289ca9d104a",
      "candidate_info": {
        "commit_hash": "7b5d269f55ddaf28dcdf995df929e289ca9d104a",
        "repo": "crossplane/crossplane-runtime",
        "commit_url": "https://github.com/crossplane/crossplane-runtime/commit/7b5d269f55ddaf28dcdf995df929e289ca9d104a",
        "files": [
          "pkg/fieldpath/paved.go",
          "pkg/fieldpath/paved_test.go"
        ],
        "message": "fix: enforce max index value for paths\n\nSigned-off-by: Philippe Scorsolini <p.scorsolini@gmail.com>\n(cherry picked from commit 7560fbc0415bf69c219b96949f3b2d2839538d56)",
        "before_after_code_files": [
          "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go",
          "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go",
            "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go"
          ],
          "candidate": [
            "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go",
            "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/fieldpath/paved.go||pkg/fieldpath/paved.go": [
          "File: pkg/fieldpath/paved.go -> pkg/fieldpath/paved.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  \"github.com/crossplane/crossplane-runtime/pkg/errors\"",
          "26: )",
          "28: type errNotFound struct {",
          "29:  error",
          "30: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: const DefaultMaxFieldPathIndex = 1024",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: type Paved struct {",
          "50: }",
          "55:  u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(o)",
          "57: }",
          "62: }",
          "",
          "[Removed Lines]",
          "49:  object map[string]interface{}",
          "54: func PaveObject(o runtime.Object) (*Paved, error) {",
          "56:  return Pave(u), errors.Wrap(err, \"cannot convert object to unstructured data\")",
          "60: func Pave(object map[string]interface{}) *Paved {",
          "61:  return &Paved{object: object}",
          "",
          "[Added Lines]",
          "52:  object            map[string]interface{}",
          "53:  maxFieldPathIndex uint",
          "56: type PavedOption func(paved *Paved)",
          "60: func PaveObject(o runtime.Object, opts ...PavedOption) (*Paved, error) {",
          "62:  return Pave(u, opts...), errors.Wrap(err, \"cannot convert object to unstructured data\")",
          "66: func Pave(object map[string]interface{}, opts ...PavedOption) *Paved {",
          "67:  p := &Paved{object: object, maxFieldPathIndex: DefaultMaxFieldPathIndex}",
          "69:  for _, opt := range opts {",
          "70:   opt(p)",
          "71:  }",
          "73:  return p",
          "74: }",
          "77: func WithMaxFieldPathIndex(max uint) PavedOption {",
          "78:  return func(paved *Paved) {",
          "79:   paved.maxFieldPathIndex = max",
          "80:  }",
          "81: }",
          "83: func (p *Paved) maxFieldPathIndexEnabled() bool {",
          "84:  return p.maxFieldPathIndex > 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "359:     return errors.Errorf(\"%s is not an array\", s[:i])",
          "360:    }",
          "362:    if final {",
          "363:     array[current.Index] = v",
          "364:     return nil",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385:    if p.maxFieldPathIndexEnabled() && current.Index > p.maxFieldPathIndex {",
          "386:     return errors.Errorf(\"index %d is greater than max allowed index %d\", current.Index, p.maxFieldPathIndex)",
          "387:    }",
          "",
          "---------------"
        ],
        "pkg/fieldpath/paved_test.go||pkg/fieldpath/paved_test.go": [
          "File: pkg/fieldpath/paved_test.go -> pkg/fieldpath/paved_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package fieldpath",
          "19: import (",
          "20:  \"testing\"",
          "22:  \"github.com/google/go-cmp/cmp\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:  \"fmt\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593:  type args struct {",
          "594:   path  string",
          "595:   value interface{}",
          "596:  }",
          "597:  type want struct {",
          "598:   object map[string]interface{}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:   opts  []PavedOption",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "737:     },",
          "738:    },",
          "739:   },",
          "740:   \"MapStringString\": {",
          "741:    reason: \"A map of string to string should be converted to a map of string to interface{}\",",
          "742:    data:   []byte(`{\"metadata\":{}}`),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:   \"RejectsHighIndexes\": {",
          "743:    reason: \"Paths having indexes above the maximum default value are rejected\",",
          "744:    data:   []byte(`{\"data\":[\"a\"]}`),",
          "745:    args: args{",
          "746:     path:  fmt.Sprintf(\"data[%v]\", MaxFieldPathIndex+1),",
          "747:     value: \"c\",",
          "748:    },",
          "749:    want: want{",
          "750:     object: map[string]interface{}{",
          "751:      \"data\": []interface{}{\"a\"}},",
          "752:     err: errors.Wrap(errors.Errorf(\"found index above max (%[1]v > %[2]v): data[%[1]v]\",",
          "753:      MaxFieldPathIndex+1, MaxFieldPathIndex), \"invalid segments\"),",
          "754:    },",
          "755:   },",
          "756:   \"NotRejectsHighIndexesIfNoDefaultOptions\": {",
          "757:    reason: \"Paths having indexes above the maximum default value are not rejected if default disabled\",",
          "758:    data:   []byte(`{\"data\":[\"a\"]}`),",
          "759:    args: args{",
          "760:     path:  fmt.Sprintf(\"data[%v]\", MaxFieldPathIndex+1),",
          "761:     value: \"c\",",
          "762:     opts:  []PavedOption{},",
          "763:    },",
          "764:    want: want{",
          "765:     object: map[string]interface{}{",
          "766:      \"data\": func() []interface{} {",
          "767:       res := make([]interface{}, MaxFieldPathIndex+2)",
          "768:       res[0] = \"a\"",
          "769:       res[MaxFieldPathIndex+1] = \"c\"",
          "770:       return res",
          "771:      }()},",
          "772:    },",
          "773:   },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "817:   t.Run(name, func(t *testing.T) {",
          "818:    in := make(map[string]interface{})",
          "819:    _ = json.Unmarshal(tc.data, &in)",
          "822:    err := p.SetValue(tc.args.path, tc.args.value)",
          "823:    if diff := cmp.Diff(tc.want.err, err, test.EquateErrors()); diff != \"\" {",
          "",
          "[Removed Lines]",
          "820:    p := Pave(in)",
          "",
          "[Added Lines]",
          "854:    p := Pave(in, tc.args.opts...)",
          "",
          "---------------"
        ]
      }
    }
  ]
}