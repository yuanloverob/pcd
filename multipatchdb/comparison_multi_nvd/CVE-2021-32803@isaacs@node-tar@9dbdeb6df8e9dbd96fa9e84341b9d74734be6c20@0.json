{
  "cve_id": "CVE-2021-32803",
  "cve_desc": "The npm package \"tar\" (aka node-tar) before versions 6.1.2, 5.0.7, 4.4.15, and 3.2.3 has an arbitrary File Creation/Overwrite vulnerability via insufficient symlink protection. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created. This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node-tar` checks for symlinks occur. By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite. This issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.",
  "repo": "isaacs/node-tar",
  "patch_hash": "9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20",
  "patch_info": {
    "commit_hash": "9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20",
    "repo": "isaacs/node-tar",
    "commit_url": "https://github.com/isaacs/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20",
    "files": [
      "lib/unpack.js",
      "test/unpack.js"
    ],
    "message": "Remove paths from dirCache when no longer dirs",
    "before_after_code_files": [
      "lib/unpack.js||lib/unpack.js",
      "test/unpack.js||test/unpack.js"
    ]
  },
  "patch_diff": {
    "lib/unpack.js||lib/unpack.js": [
      "File: lib/unpack.js -> lib/unpack.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "465:   }",
      "467:   [CHECKFS2] (entry, done) {",
      "468:     this[MKDIR](path.dirname(entry.absolute), this.dmode, er => {",
      "469:       if (er) {",
      "470:         done()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "472:     if (entry.type !== 'Directory') {",
      "473:       for (const path of this.dirCache.keys()) {",
      "474:         if (path === entry.absolute ||",
      "475:             path.indexOf(entry.absolute + '/') === 0 ||",
      "476:             path.indexOf(entry.absolute + '\\\\') === 0)",
      "477:           this.dirCache.delete(path)",
      "478:       }",
      "479:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "530: class UnpackSync extends Unpack {",
      "531:   [CHECKFS] (entry) {",
      "532:     const er = this[MKDIR](path.dirname(entry.absolute), this.dmode, neverCalled)",
      "533:     if (er)",
      "534:       return this[ONERROR](er, entry)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "545:     if (entry.type !== 'Directory') {",
      "546:       for (const path of this.dirCache.keys()) {",
      "547:         if (path === entry.absolute ||",
      "548:             path.indexOf(entry.absolute + '/') === 0 ||",
      "549:             path.indexOf(entry.absolute + '\\\\') === 0)",
      "550:           this.dirCache.delete(path)",
      "551:       }",
      "552:     }",
      "",
      "---------------"
    ],
    "test/unpack.js||test/unpack.js": [
      "File: test/unpack.js -> test/unpack.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "2605:     cwd: dir + '/sync', strict: true,",
      "2606:   }).end(data), poop, 'sync')",
      "2607: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2609: t.test('drop entry from dirCache if no longer a directory', t => {",
      "2610:   const dir = path.resolve(unpackdir, 'dir-cache-error')",
      "2611:   mkdirp.sync(dir + '/sync/y')",
      "2612:   mkdirp.sync(dir + '/async/y')",
      "2613:   const data = makeTar([",
      "2614:     {",
      "2615:       path: 'x',",
      "2616:       type: 'Directory',",
      "2617:     },",
      "2618:     {",
      "2619:       path: 'x',",
      "2620:       type: 'SymbolicLink',",
      "2621:       linkpath: './y',",
      "2622:     },",
      "2623:     {",
      "2624:       path: 'x/ginkoid',",
      "2625:       type: 'File',",
      "2626:       size: 'ginkoid'.length,",
      "2627:     },",
      "2628:     'ginkoid',",
      "2629:     '',",
      "2630:     '',",
      "2631:   ])",
      "2632:   t.plan(2)",
      "2633:   const WARNINGS = {}",
      "2634:   const check = (t, path) => {",
      "2635:     t.equal(fs.statSync(path + '/x').isDirectory(), true)",
      "2636:     t.equal(fs.lstatSync(path + '/x').isSymbolicLink(), true)",
      "2637:     t.equal(fs.statSync(path + '/y').isDirectory(), true)",
      "2638:     t.strictSame(fs.readdirSync(path + '/y'), [])",
      "2639:     t.throws(() => fs.readFileSync(path + '/x/ginkoid'), { code: 'ENOENT' })",
      "2640:     t.strictSame(WARNINGS[path], [",
      "2641:       'TAR_ENTRY_ERROR',",
      "2642:       'Cannot extract through symbolic link',",
      "2643:     ])",
      "2644:     t.end()",
      "2645:   }",
      "2646:   t.test('async', t => {",
      "2647:     const path = dir + '/async'",
      "2648:     new Unpack({ cwd: path })",
      "2649:       .on('warn', (code, msg) => WARNINGS[path] = [code, msg])",
      "2650:       .on('end', () => check(t, path))",
      "2651:       .end(data)",
      "2652:   })",
      "2653:   t.test('sync', t => {",
      "2654:     const path = dir + '/sync'",
      "2655:     new UnpackSync({ cwd: path })",
      "2656:       .on('warn', (code, msg) => WARNINGS[path] = [code, msg])",
      "2657:       .end(data)",
      "2658:     check(t, path)",
      "2659:   })",
      "2660: })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "23312ce7db8a12c78d0fba96d7664a01619266a3",
      "candidate_info": {
        "commit_hash": "23312ce7db8a12c78d0fba96d7664a01619266a3",
        "repo": "isaacs/node-tar",
        "commit_url": "https://github.com/isaacs/node-tar/commit/23312ce7db8a12c78d0fba96d7664a01619266a3",
        "files": [
          "lib/unpack.js",
          "test/unpack.js"
        ],
        "message": "drop dirCache for symlink on all platforms",
        "before_after_code_files": [
          "lib/unpack.js||lib/unpack.js",
          "test/unpack.js||test/unpack.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/unpack.js||lib/unpack.js",
            "test/unpack.js||test/unpack.js"
          ],
          "candidate": [
            "lib/unpack.js||lib/unpack.js",
            "test/unpack.js||test/unpack.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/unpack.js||lib/unpack.js": [
          "File: lib/unpack.js -> lib/unpack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "560:       dropCache(this.dirCache)",
          "561:     else if (entry.type !== 'Directory')",
          "562:       pruneCache(this.dirCache, entry.absolute)",
          "",
          "[Removed Lines]",
          "559:     if (isWindows && entry.type === 'SymbolicLink')",
          "",
          "[Added Lines]",
          "559:     if (entry.type === 'SymbolicLink')",
          "",
          "---------------"
        ],
        "test/unpack.js||test/unpack.js": [
          "File: test/unpack.js -> test/unpack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3027:       path: Buffer.from([0x63, 0x61, 0x66, 0x65, 0xcc, 0x81]).toString(),",
          "3028:       linkpath: 'foo',",
          "3029:     },",
          "3030:     {",
          "3031:       type: 'File',",
          "3032:       path: Buffer.from([0x63, 0x61, 0x66, 0xc3, 0xa9]).toString() + '/bar',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3030:     {",
          "3031:       type: 'Directory',",
          "3032:       path: 'foo',",
          "3033:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3040:   const check = (path, dirCache, t) => {",
          "3041:     path = path.replace(/\\\\/g, '/')",
          "3042:     t.strictSame([...dirCache.entries()], [",
          "3044:       [`${path}/foo`, true],",
          "3045:     ])",
          "3046:     t.equal(fs.readFileSync(path + '/foo/bar', 'utf8'), 'x')",
          "",
          "[Removed Lines]",
          "3043:       [path, true],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53602669f58ddbeb3294d7196b3320aaaed22728",
      "candidate_info": {
        "commit_hash": "53602669f58ddbeb3294d7196b3320aaaed22728",
        "repo": "isaacs/node-tar",
        "commit_url": "https://github.com/isaacs/node-tar/commit/53602669f58ddbeb3294d7196b3320aaaed22728",
        "files": [
          "lib/mkdir.js",
          "lib/normalize-windows-path.js",
          "lib/pack.js",
          "lib/path-reservations.js",
          "lib/unpack.js",
          "lib/write-entry.js",
          "test/normalize-windows-path.js"
        ],
        "message": "fix: normalize paths on Windows systems\n\nThis change uses / as the One True Path Separator, as the gods of POSIX\nintended in their divine wisdom.\n\nOn windows, \\ characters are converted to /, everywhere and in depth.\nHowever, on posix systems, \\ is a valid filename character, and is not\ntreated specially.  So, instead of splitting on `/[/\\\\]/`, we can now\njust split on `'/'` to get a set of path parts.\n\nThis does mean that archives with entries containing \\ will extract\ndifferently on Windows systems than on correct systems.  However, this\nis also the behavior of both bsdtar and gnutar, so it seems appropriate\nto follow suit.\n\nAdditionally, dirCache pruning is now done case-insensitively.  On\ncase-sensitive systems, this potentially results in a few extra lstat\ncalls.  However, on case-insensitive systems, it prevents incorrect\ncache hits.",
        "before_after_code_files": [
          "lib/mkdir.js||lib/mkdir.js",
          "lib/normalize-windows-path.js||lib/normalize-windows-path.js",
          "lib/pack.js||lib/pack.js",
          "lib/path-reservations.js||lib/path-reservations.js",
          "lib/unpack.js||lib/unpack.js",
          "lib/write-entry.js||lib/write-entry.js",
          "test/normalize-windows-path.js||test/normalize-windows-path.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/unpack.js||lib/unpack.js"
          ],
          "candidate": [
            "lib/unpack.js||lib/unpack.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/mkdir.js||lib/mkdir.js": [
          "File: lib/mkdir.js -> lib/mkdir.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: const fs = require('fs')",
          "9: const path = require('path')",
          "10: const chownr = require('chownr')",
          "12: class SymlinkError extends Error {",
          "13:   constructor (symlink, path) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: const normPath = require('./normalize-windows-path.js')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   }",
          "34: }",
          "36: module.exports = (dir, opt, cb) => {",
          "39:   const umask = opt.umask",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: const cGet = (cache, key) => cache.get(normPath(key))",
          "38: const cSet = (cache, key, val) => cache.set(normPath(key), val)",
          "41:   dir = normPath(dir)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   const preserve = opt.preserve",
          "50:   const unlink = opt.unlink",
          "51:   const cache = opt.cache",
          "54:   const done = (er, created) => {",
          "55:     if (er)",
          "56:       cb(er)",
          "57:     else {",
          "59:       if (created && doChown)",
          "60:         chownr(created, uid, gid, er => done(er))",
          "61:       else if (needChmod)",
          "",
          "[Removed Lines]",
          "52:   const cwd = opt.cwd",
          "58:       cache.set(dir, true)",
          "",
          "[Added Lines]",
          "57:   const cwd = normPath(opt.cwd)",
          "63:       cSet(cache, dir, true)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:     }",
          "66:   }",
          "69:     return done()",
          "71:   if (dir === cwd) {",
          "",
          "[Removed Lines]",
          "68:   if (cache && cache.get(dir) === true)",
          "",
          "[Added Lines]",
          "73:   if (cache && cGet(cache, dir) === true)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "80:     return mkdirp(dir, {mode}).then(made => done(null, made), done)",
          "82:   const sub = path.relative(cwd, dir)",
          "84:   mkdir_(cwd, parts, mode, cache, unlink, cwd, null, done)",
          "85: }",
          "",
          "[Removed Lines]",
          "83:   const parts = sub.split(/\\/|\\\\/)",
          "",
          "[Added Lines]",
          "88:   const parts = sub.split('/')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "89:     return cb(null, created)",
          "90:   const p = parts.shift()",
          "91:   const part = base + '/' + p",
          "93:     return mkdir_(part, parts, mode, cache, unlink, cwd, created, cb)",
          "94:   fs.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb))",
          "95: }",
          "",
          "[Removed Lines]",
          "92:   if (cache.get(part))",
          "",
          "[Added Lines]",
          "97:   if (cGet(cache, part))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "123: }",
          "125: module.exports.sync = (dir, opt) => {",
          "128:   const umask = opt.umask",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:   dir = normPath(dir)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "138:   const preserve = opt.preserve",
          "139:   const unlink = opt.unlink",
          "140:   const cache = opt.cache",
          "143:   const done = (created) => {",
          "145:     if (created && doChown)",
          "146:       chownr.sync(created, uid, gid)",
          "147:     if (needChmod)",
          "148:       fs.chmodSync(dir, mode)",
          "149:   }",
          "152:     return done()",
          "154:   if (dir === cwd) {",
          "",
          "[Removed Lines]",
          "141:   const cwd = opt.cwd",
          "144:     cache.set(dir, true)",
          "151:   if (cache && cache.get(dir) === true)",
          "",
          "[Added Lines]",
          "147:   const cwd = normPath(opt.cwd)",
          "150:     cSet(cache, dir, true)",
          "157:   if (cache && cGet(cache, dir) === true)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "170:     return done(mkdirp.sync(dir, mode))",
          "172:   const sub = path.relative(cwd, dir)",
          "174:   let created = null",
          "175:   for (let p = parts.shift(), part = cwd;",
          "176:     p && (part += '/' + p);",
          "177:     p = parts.shift()) {",
          "179:       continue",
          "181:     try {",
          "182:       fs.mkdirSync(part, mode)",
          "183:       created = created || part",
          "185:     } catch (er) {",
          "186:       if (er.path && path.dirname(er.path) === cwd &&",
          "187:           (er.code === 'ENOTDIR' || er.code === 'ENOENT'))",
          "",
          "[Removed Lines]",
          "173:   const parts = sub.split(/\\/|\\\\/)",
          "178:     if (cache.get(part))",
          "184:       cache.set(part, true)",
          "",
          "[Added Lines]",
          "179:   const parts = sub.split('/')",
          "184:     if (cGet(cache, part))",
          "190:       cSet(cache, part, true)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "190:       const st = fs.lstatSync(part)",
          "191:       if (st.isDirectory()) {",
          "193:         continue",
          "194:       } else if (unlink) {",
          "195:         fs.unlinkSync(part)",
          "196:         fs.mkdirSync(part, mode)",
          "197:         created = created || part",
          "199:         continue",
          "200:       } else if (st.isSymbolicLink())",
          "201:         return new SymlinkError(part, part + '/' + parts.join('/'))",
          "",
          "[Removed Lines]",
          "192:         cache.set(part, true)",
          "198:         cache.set(part, true)",
          "",
          "[Added Lines]",
          "198:         cSet(cache, part, true)",
          "204:         cSet(cache, part, true)",
          "",
          "---------------"
        ],
        "lib/normalize-windows-path.js||lib/normalize-windows-path.js": [
          "File: lib/normalize-windows-path.js -> lib/normalize-windows-path.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: const platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform",
          "7: module.exports = platform !== 'win32' ? p => p",
          "8:   : p => p.replace(/\\\\/g, '/')",
          "",
          "---------------"
        ],
        "lib/pack.js||lib/pack.js": [
          "File: lib/pack.js -> lib/pack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: const fs = require('fs')",
          "55: const path = require('path')",
          "56: const warner = require('./warn-mixin.js')",
          "58: const Pack = warner(class Pack extends MiniPass {",
          "59:   constructor (opt) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: const normPath = require('./normalize-windows-path.js')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     this.preservePaths = !!opt.preservePaths",
          "67:     this.strict = !!opt.strict",
          "68:     this.noPax = !!opt.noPax",
          "70:     this.linkCache = opt.linkCache || new Map()",
          "71:     this.statCache = opt.statCache || new Map()",
          "72:     this.readdirCache = opt.readdirCache || new Map()",
          "",
          "[Removed Lines]",
          "69:     this.prefix = (opt.prefix || '').replace(/(\\\\|\\/)+$/, '')",
          "",
          "[Added Lines]",
          "70:     this.prefix = normPath(opt.prefix || '')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:   }",
          "135:   [ADDTARENTRY] (p) {",
          "138:     if (!this.filter(p.path, p))",
          "139:       p.resume()",
          "",
          "[Removed Lines]",
          "136:     const absolute = path.resolve(this.cwd, p.path)",
          "",
          "[Added Lines]",
          "137:     const absolute = normPath(path.resolve(this.cwd, p.path))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:   }",
          "151:   [ADDFSENTRY] (p) {",
          "153:     this[QUEUE].push(new PackJob(p, absolute))",
          "154:     this[PROCESS]()",
          "155:   }",
          "",
          "[Removed Lines]",
          "152:     const absolute = path.resolve(this.cwd, p)",
          "",
          "[Added Lines]",
          "153:     const absolute = normPath(path.resolve(this.cwd, p))",
          "",
          "---------------"
        ],
        "lib/path-reservations.js||lib/path-reservations.js": [
          "File: lib/path-reservations.js -> lib/path-reservations.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const assert = require('assert')",
          "11: module.exports = () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: const normPath = require('./normalize-windows-path.js')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:   const { join } = require('path')",
          "22:   const getDirs = path =>",
          "27:   const running = new Set()",
          "",
          "[Removed Lines]",
          "23:     join(path).split(/[\\\\/]/).slice(0, -1).reduce((set, path) =>",
          "24:       set.length ? set.concat(join(set[set.length - 1], path)) : [path], [])",
          "",
          "[Added Lines]",
          "24:     normPath(join(path)).split('/').slice(0, -1).reduce((set, path) =>",
          "25:       set.length ? set.concat(normPath(join(set[set.length - 1], path)))",
          "26:       : [path], [])",
          "",
          "---------------"
        ],
        "lib/unpack.js||lib/unpack.js": [
          "File: lib/unpack.js -> lib/unpack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: const wc = require('./winchars.js')",
          "16: const pathReservations = require('./path-reservations.js')",
          "17: const stripAbsolutePath = require('./strip-absolute-path.js')",
          "19: const ONENTRY = Symbol('onEntry')",
          "20: const CHECKFS = Symbol('checkFs')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: const normPath = require('./normalize-windows-path.js')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:   : b === b >>> 0 ? b",
          "92:   : c",
          "94: class Unpack extends Parser {",
          "95:   constructor (opt) {",
          "96:     if (!opt)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: const pruneCache = (cache, abs) => {",
          "98:   abs = normPath(abs).toLowerCase()",
          "99:   for (const path of cache.keys()) {",
          "100:     const plower = path.toLowerCase()",
          "101:     if (plower === abs || plower.toLowerCase().indexOf(abs + '/') === 0)",
          "102:       cache.delete(path)",
          "103:   }",
          "104: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:     this.unlink = !!opt.unlink",
          "172:     this.strip = +opt.strip || 0",
          "174:     this.processUmask = opt.noChmod ? 0 : process.umask()",
          "",
          "[Removed Lines]",
          "171:     this.cwd = path.resolve(opt.cwd || process.cwd())",
          "",
          "[Added Lines]",
          "183:     this.cwd = normPath(path.resolve(opt.cwd || process.cwd()))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:   [CHECKPATH] (entry) {",
          "203:     if (this.strip) {",
          "205:       if (parts.length < this.strip)",
          "206:         return false",
          "207:       entry.path = parts.slice(this.strip).join('/')",
          "",
          "[Removed Lines]",
          "204:       const parts = entry.path.split(/\\/|\\\\/)",
          "",
          "[Added Lines]",
          "216:       const parts = normPath(entry.path).split('/')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "209:         return false",
          "211:       if (entry.type === 'Link') {",
          "213:         if (linkparts.length >= this.strip)",
          "214:           entry.linkpath = linkparts.slice(this.strip).join('/')",
          "215:       }",
          "216:     }",
          "218:     if (!this.preservePaths) {",
          "221:         this.warn('TAR_ENTRY_ERROR', `path contains '..'`, {",
          "222:           entry,",
          "223:           path: p,",
          "",
          "[Removed Lines]",
          "212:         const linkparts = entry.linkpath.split(/\\/|\\\\/)",
          "219:       const p = entry.path",
          "220:       if (p.match(/(^|\\/|\\\\)\\.\\.(\\\\|\\/|$)/)) {",
          "",
          "[Added Lines]",
          "224:         const linkparts = normPath(entry.linkpath).split('/')",
          "231:       const p = normPath(entry.path)",
          "232:       if (p.split('/').includes('..')) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "245:     }",
          "247:     if (path.isAbsolute(entry.path))",
          "249:     else",
          "252:     return true",
          "253:   }",
          "",
          "[Removed Lines]",
          "248:       entry.absolute = entry.path",
          "250:       entry.absolute = path.resolve(this.cwd, entry.path)",
          "",
          "[Added Lines]",
          "260:       entry.absolute = normPath(entry.path)",
          "262:       entry.absolute = normPath(path.resolve(this.cwd, entry.path))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "293:   }",
          "295:   [MKDIR] (dir, mode, cb) {",
          "297:       uid: this.uid,",
          "298:       gid: this.gid,",
          "299:       processUid: this.processUid,",
          "",
          "[Removed Lines]",
          "296:     mkdir(dir, {",
          "",
          "[Added Lines]",
          "308:     mkdir(normPath(dir), {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "451:   }",
          "453:   [HARDLINK] (entry, done) {",
          "455:   }",
          "457:   [PEND] () {",
          "",
          "[Removed Lines]",
          "454:     this[LINK](entry, path.resolve(this.cwd, entry.linkpath), 'link', done)",
          "",
          "[Added Lines]",
          "466:     const linkpath = normPath(path.resolve(this.cwd, entry.linkpath))",
          "467:     this[LINK](entry, linkpath, 'link', done)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "505:     this[MKDIR](path.dirname(entry.absolute), this.dmode, er => {",
          "506:       if (er) {",
          "",
          "[Removed Lines]",
          "496:     if (entry.type !== 'Directory') {",
          "497:       for (const path of this.dirCache.keys()) {",
          "498:         if (path === entry.absolute ||",
          "499:             path.indexOf(entry.absolute + '/') === 0 ||",
          "500:             path.indexOf(entry.absolute + '\\\\') === 0)",
          "501:           this.dirCache.delete(path)",
          "502:       }",
          "503:     }",
          "",
          "[Added Lines]",
          "509:     if (entry.type !== 'Directory')",
          "510:       pruneCache(this.dirCache, entry.absolute)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "572: class UnpackSync extends Unpack {",
          "573:   [CHECKFS] (entry) {",
          "583:     const er = this[MKDIR](path.dirname(entry.absolute), this.dmode, neverCalled)",
          "584:     if (er)",
          "",
          "[Removed Lines]",
          "574:     if (entry.type !== 'Directory') {",
          "575:       for (const path of this.dirCache.keys()) {",
          "576:         if (path === entry.absolute ||",
          "577:             path.indexOf(entry.absolute + '/') === 0 ||",
          "578:             path.indexOf(entry.absolute + '\\\\') === 0)",
          "579:           this.dirCache.delete(path)",
          "580:       }",
          "581:     }",
          "",
          "[Added Lines]",
          "581:     if (entry.type !== 'Directory')",
          "582:       pruneCache(this.dirCache, entry.absolute)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "701:   [MKDIR] (dir, mode) {",
          "702:     try {",
          "704:         uid: this.uid,",
          "705:         gid: this.gid,",
          "706:         processUid: this.processUid,",
          "",
          "[Removed Lines]",
          "703:       return mkdir.sync(dir, {",
          "",
          "[Added Lines]",
          "704:       return mkdir.sync(normPath(dir), {",
          "",
          "---------------"
        ],
        "lib/write-entry.js||lib/write-entry.js": [
          "File: lib/write-entry.js -> lib/write-entry.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: const Header = require('./header.js')",
          "5: const fs = require('fs')",
          "6: const path = require('path')",
          "8: const prefixPath = (path, prefix) => {",
          "9:   if (!prefix)",
          "10:     return path",
          "13: }",
          "15: const maxReadSize = 16 * 1024 * 1024",
          "",
          "[Removed Lines]",
          "11:   path = path.replace(/^\\.([/\\\\]|$)/, '')",
          "12:   return prefix + '/' + path",
          "",
          "[Added Lines]",
          "7: const normPath = require('./normalize-windows-path.js')",
          "8: const stripSlash = require('./strip-trailing-slashes.js')",
          "13:   path = normPath(path).replace(/^\\.(\\/|$)/, '')",
          "14:   return stripSlash(prefix) + '/' + path",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     super(opt)",
          "44:     if (typeof p !== 'string')",
          "45:       throw new TypeError('path is required')",
          "48:     this.portable = !!opt.portable",
          "",
          "[Removed Lines]",
          "46:     this.path = p",
          "",
          "[Added Lines]",
          "48:     this.path = normPath(p)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:       p = p.replace(/\\\\/g, '/')",
          "88:     }",
          "92:     if (this.path === '')",
          "93:       this.path = './'",
          "",
          "[Removed Lines]",
          "90:     this.absolute = opt.absolute || path.resolve(this.cwd, p)",
          "",
          "[Added Lines]",
          "92:     this.absolute = normPath(opt.absolute || path.resolve(this.cwd, p))",
          "",
          "---------------"
        ],
        "test/normalize-windows-path.js||test/normalize-windows-path.js": [
          "File: test/normalize-windows-path.js -> test/normalize-windows-path.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const t = require('tap')",
          "3: const realPlatform = process.platform",
          "4: const fakePlatform = realPlatform === 'win32' ? 'posix' : 'win32'",
          "6: t.test('posix', t => {",
          "7:   if (realPlatform === 'win32')",
          "8:     process.env.TESTING_TAR_FAKE_PLATFORM = fakePlatform",
          "9:   else",
          "10:     delete process.env.TESTING_TAR_FAKE_PLATFORM",
          "11:   const normPath = t.mock('../lib/normalize-windows-path.js')",
          "12:   t.equal(normPath('/some/path/back\\\\slashes'), '/some/path/back\\\\slashes')",
          "13:   t.equal(normPath('c:\\\\foo\\\\bar'), 'c:\\\\foo\\\\bar')",
          "14:   t.end()",
          "15: })",
          "17: t.test('win32', t => {",
          "18:   if (realPlatform !== 'win32')",
          "19:     process.env.TESTING_TAR_FAKE_PLATFORM = fakePlatform",
          "20:   else",
          "21:     delete process.env.TESTING_TAR_FAKE_PLATFORM",
          "22:   const normPath = t.mock('../lib/normalize-windows-path.js')",
          "23:   t.equal(normPath('/some/path/back\\\\slashes'), '/some/path/back/slashes')",
          "24:   t.equal(normPath('c:\\\\foo\\\\bar'), 'c:/foo/bar')",
          "25:   t.end()",
          "26: })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3aaf19b2501bbddb145d92b3322c80dcaed3c35f",
      "candidate_info": {
        "commit_hash": "3aaf19b2501bbddb145d92b3322c80dcaed3c35f",
        "repo": "isaacs/node-tar",
        "commit_url": "https://github.com/isaacs/node-tar/commit/3aaf19b2501bbddb145d92b3322c80dcaed3c35f",
        "files": [
          "lib/unpack.js",
          "test/unpack.js"
        ],
        "message": "fix: prune dirCache properly for unicode, windows\n\nThis prunes the dirCache in a way that catches unicode filename matches.\n\nIf a symbolic link is encountered on Windows, the entire dirCache is\ncleared, as 8.3 shortname collisions may result in a path escape\nvulnerability in the case of symbolic links.  If such a collision occurs\nin the case of other types of entries, it is not such a big problem,\nbecause the unpack will fail.",
        "before_after_code_files": [
          "lib/unpack.js||lib/unpack.js",
          "test/unpack.js||test/unpack.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/unpack.js||lib/unpack.js",
            "test/unpack.js||test/unpack.js"
          ],
          "candidate": [
            "lib/unpack.js||lib/unpack.js",
            "test/unpack.js||test/unpack.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/unpack.js||lib/unpack.js": [
          "File: lib/unpack.js -> lib/unpack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: const pathReservations = require('./path-reservations.js')",
          "17: const stripAbsolutePath = require('./strip-absolute-path.js')",
          "18: const normPath = require('./normalize-windows-path.js')",
          "20: const ONENTRY = Symbol('onEntry')",
          "21: const CHECKFS = Symbol('checkFs')",
          "22: const CHECKFS2 = Symbol('checkFs2')",
          "23: const ISREUSABLE = Symbol('isReusable')",
          "24: const MAKEFS = Symbol('makeFs')",
          "25: const FILE = Symbol('file')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: const stripSlash = require('./strip-trailing-slashes.js')",
          "24: const PRUNECACHE = Symbol('pruneCache')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: const CHECKED_CWD = Symbol('checkedCwd')",
          "44: const crypto = require('crypto')",
          "45: const getFlag = require('./get-write-flag.js')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: const platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform",
          "49: const isWindows = platform === 'win32'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: const unlinkFile = (path, cb) => {",
          "65:     return fs.unlink(path, cb)",
          "67:   const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')",
          "",
          "[Removed Lines]",
          "64:   if (process.platform !== 'win32')",
          "",
          "[Added Lines]",
          "68:   if (!isWindows)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76: const unlinkFileSync = path => {",
          "78:     return fs.unlinkSync(path)",
          "80:   const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')",
          "",
          "[Removed Lines]",
          "77:   if (process.platform !== 'win32')",
          "",
          "[Added Lines]",
          "81:   if (!isWindows)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "88:   : b === b >>> 0 ? b",
          "89:   : c",
          "91: const pruneCache = (cache, abs) => {",
          "95:   for (const path of cache.keys()) {",
          "98:       cache.delete(path)",
          "99:   }",
          "100: }",
          "102: class Unpack extends Parser {",
          "103:   constructor (opt) {",
          "104:     if (!opt)",
          "",
          "[Removed Lines]",
          "94:   abs = normPath(abs).toLowerCase()",
          "96:     const plower = path.toLowerCase()",
          "97:     if (plower === abs || plower.toLowerCase().indexOf(abs + '/') === 0)",
          "",
          "[Added Lines]",
          "104: const cacheKeyNormalize = path => stripSlash(normPath(path))",
          "105:   .normalize('NFKD')",
          "106:   .toLowerCase()",
          "109:   abs = cacheKeyNormalize(abs)",
          "111:     const pnorm = cacheKeyNormalize(path)",
          "112:     if (pnorm === abs || pnorm.indexOf(abs + '/') === 0)",
          "117: const dropCache = cache => {",
          "118:   for (const key of cache.keys())",
          "119:     cache.delete(key)",
          "120: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "158:     this.forceChown = opt.forceChown === true",
          "164:     this.newer = !!opt.newer",
          "",
          "[Removed Lines]",
          "161:     this.win32 = !!opt.win32 || process.platform === 'win32'",
          "",
          "[Added Lines]",
          "181:     this.win32 = !!opt.win32 || isWindows",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "497:       !this.unlink &&",
          "498:       st.isFile() &&",
          "499:       st.nlink <= 1 &&",
          "501:   }",
          "",
          "[Removed Lines]",
          "500:       process.platform !== 'win32'",
          "",
          "[Added Lines]",
          "520:       !isWindows",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "509:     this.reservations.reserve(paths, done => this[CHECKFS2](entry, done))",
          "510:   }",
          "518:       pruneCache(this.dirCache, entry.absolute)",
          "520:     const checkCwd = () => {",
          "521:       this[MKDIR](this.cwd, this.dmode, er => {",
          "",
          "[Removed Lines]",
          "512:   [CHECKFS2] (entry, done) {",
          "517:     if (entry.type !== 'Directory')",
          "",
          "[Added Lines]",
          "532:   [PRUNECACHE] (entry) {",
          "543:     if (isWindows && entry.type === 'SymbolicLink')",
          "544:       dropCache(this.dirCache)",
          "545:     else if (entry.type !== 'Directory')",
          "547:   }",
          "549:   [CHECKFS2] (entry, fullyDone) {",
          "550:     this[PRUNECACHE](entry)",
          "552:     const done = er => {",
          "553:       this[PRUNECACHE](entry)",
          "554:       fullyDone(er)",
          "555:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "641:   }",
          "643:   [CHECKFS] (entry) {",
          "647:     if (!this[CHECKED_CWD]) {",
          "648:       const er = this[MKDIR](this.cwd, this.dmode)",
          "",
          "[Removed Lines]",
          "644:     if (entry.type !== 'Directory')",
          "645:       pruneCache(this.dirCache, entry.absolute)",
          "",
          "[Added Lines]",
          "687:     this[PRUNECACHE](entry)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "691:     this[MAKEFS](er, entry)",
          "692:   }",
          "695:     const mode = entry.mode & 0o7777 || this.fmode",
          "697:     const oner = er => {",
          "",
          "[Removed Lines]",
          "694:   [FILE] (entry, _) {",
          "",
          "[Added Lines]",
          "736:   [FILE] (entry, done) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "703:       }",
          "704:       if (er || closeError)",
          "705:         this[ONERROR](er || closeError, entry)",
          "706:     }",
          "708:     let fd",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:       done()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "762:     })",
          "763:   }",
          "766:     const mode = entry.mode & 0o7777 || this.dmode",
          "767:     const er = this[MKDIR](entry.absolute, mode)",
          "770:     if (entry.mtime && !this.noMtime) {",
          "771:       try {",
          "772:         fs.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime)",
          "",
          "[Removed Lines]",
          "765:   [DIRECTORY] (entry, _) {",
          "768:     if (er)",
          "769:       return this[ONERROR](er, entry)",
          "",
          "[Added Lines]",
          "808:   [DIRECTORY] (entry, done) {",
          "811:     if (er) {",
          "812:       this[ONERROR](er, entry)",
          "813:       done()",
          "814:       return",
          "815:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "777:         fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry))",
          "778:       } catch (er) {}",
          "779:     }",
          "780:     entry.resume()",
          "781:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:     done()",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "799:     }",
          "800:   }",
          "803:     try {",
          "804:       fs[link + 'Sync'](linkpath, entry.absolute)",
          "805:       entry.resume()",
          "806:     } catch (er) {",
          "807:       return this[ONERROR](er, entry)",
          "",
          "[Removed Lines]",
          "802:   [LINK] (entry, linkpath, link, _) {",
          "",
          "[Added Lines]",
          "849:   [LINK] (entry, linkpath, link, done) {",
          "852:       done()",
          "",
          "---------------"
        ],
        "test/unpack.js||test/unpack.js": [
          "File: test/unpack.js -> test/unpack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3001:     })",
          "3002:   })",
          "3003: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3005: t.test('dirCache pruning unicode normalized collisions', {",
          "3006:   skip: isWindows && 'symlinks not fully supported',",
          "3007: }, t => {",
          "3008:   const data = makeTar([",
          "3009:     {",
          "3010:       type: 'Directory',",
          "3011:       path: 'foo',",
          "3012:     },",
          "3013:     {",
          "3014:       type: 'File',",
          "3015:       path: 'foo/bar',",
          "3016:       size: 1,",
          "3017:     },",
          "3018:     'x',",
          "3019:     {",
          "3020:       type: 'Directory',",
          "3022:       path: Buffer.from([0x63, 0x61, 0x66, 0xc3, 0xa9]).toString(),",
          "3023:     },",
          "3024:     {",
          "3025:       type: 'SymbolicLink',",
          "3027:       path: Buffer.from([0x63, 0x61, 0x66, 0x65, 0xcc, 0x81]).toString(),",
          "3028:       linkpath: 'foo',",
          "3029:     },",
          "3030:     {",
          "3031:       type: 'File',",
          "3032:       path: Buffer.from([0x63, 0x61, 0x66, 0xc3, 0xa9]).toString() + '/bar',",
          "3033:       size: 1,",
          "3034:     },",
          "3035:     'y',",
          "3036:     '',",
          "3037:     '',",
          "3038:   ])",
          "3040:   const check = (path, dirCache, t) => {",
          "3041:     path = path.replace(/\\\\/g, '/')",
          "3042:     t.strictSame([...dirCache.entries()], [",
          "3043:       [path, true],",
          "3044:       [`${path}/foo`, true],",
          "3045:     ])",
          "3046:     t.equal(fs.readFileSync(path + '/foo/bar', 'utf8'), 'x')",
          "3047:     t.end()",
          "3048:   }",
          "3050:   t.test('sync', t => {",
          "3051:     const path = t.testdir()",
          "3052:     const dirCache = new Map()",
          "3053:     new UnpackSync({ cwd: path, dirCache }).end(data)",
          "3054:     check(path, dirCache, t)",
          "3055:   })",
          "3056:   t.test('async', t => {",
          "3057:     const path = t.testdir()",
          "3058:     const dirCache = new Map()",
          "3059:     new Unpack({ cwd: path, dirCache })",
          "3060:       .on('close', () => check(path, dirCache, t))",
          "3061:       .end(data)",
          "3062:   })",
          "3064:   t.end()",
          "3065: })",
          "3067: t.test('dircache prune all on windows when symlink encountered', t => {",
          "3068:   if (process.platform !== 'win32') {",
          "3069:     process.env.TESTING_TAR_FAKE_PLATFORM = 'win32'",
          "3070:     t.teardown(() => {",
          "3071:       delete process.env.TESTING_TAR_FAKE_PLATFORM",
          "3072:     })",
          "3073:   }",
          "3074:   const symlinks = []",
          "3075:   const Unpack = t.mock('../lib/unpack.js', {",
          "3076:     fs: {",
          "3077:       ...fs,",
          "3078:       symlink: (target, dest, cb) => {",
          "3079:         symlinks.push(['async', target, dest])",
          "3080:         process.nextTick(cb)",
          "3081:       },",
          "3082:       symlinkSync: (target, dest) => symlinks.push(['sync', target, dest]),",
          "3083:     },",
          "3084:   })",
          "3085:   const UnpackSync = Unpack.Sync",
          "3087:   const data = makeTar([",
          "3088:     {",
          "3089:       type: 'Directory',",
          "3090:       path: 'foo',",
          "3091:     },",
          "3092:     {",
          "3093:       type: 'File',",
          "3094:       path: 'foo/bar',",
          "3095:       size: 1,",
          "3096:     },",
          "3097:     'x',",
          "3098:     {",
          "3099:       type: 'Directory',",
          "3101:       path: Buffer.from([0x63, 0x61, 0x66, 0xc3, 0xa9]).toString(),",
          "3102:     },",
          "3103:     {",
          "3104:       type: 'SymbolicLink',",
          "3106:       path: Buffer.from([0x63, 0x61, 0x66, 0x65, 0xcc, 0x81]).toString(),",
          "3107:       linkpath: 'safe/actually/but/cannot/be/too/careful',",
          "3108:     },",
          "3109:     {",
          "3110:       type: 'File',",
          "3111:       path: 'bar/baz',",
          "3112:       size: 1,",
          "3113:     },",
          "3114:     'z',",
          "3115:     '',",
          "3116:     '',",
          "3117:   ])",
          "3119:   const check = (path, dirCache, t) => {",
          "3121:     path = path.replace(/\\\\/g, '/')",
          "3122:     t.strictSame([...dirCache.entries()], [",
          "3123:       [`${path}/bar`, true],",
          "3124:     ])",
          "3125:     t.equal(fs.readFileSync(`${path}/foo/bar`, 'utf8'), 'x')",
          "3126:     t.equal(fs.readFileSync(`${path}/bar/baz`, 'utf8'), 'z')",
          "3127:     t.end()",
          "3128:   }",
          "3130:   t.test('sync', t => {",
          "3131:     const path = t.testdir()",
          "3132:     const dirCache = new Map()",
          "3133:     new UnpackSync({ cwd: path, dirCache }).end(data)",
          "3134:     check(path, dirCache, t)",
          "3135:   })",
          "3137:   t.test('async', t => {",
          "3138:     const path = t.testdir()",
          "3139:     const dirCache = new Map()",
          "3140:     new Unpack({ cwd: path, dirCache })",
          "3141:       .on('close', () => check(path, dirCache, t))",
          "3142:       .end(data)",
          "3143:   })",
          "3145:   t.end()",
          "3146: })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2a0948fb7b70862f92828e7b37b622566ed367e",
      "candidate_info": {
        "commit_hash": "c2a0948fb7b70862f92828e7b37b622566ed367e",
        "repo": "isaacs/node-tar",
        "commit_url": "https://github.com/isaacs/node-tar/commit/c2a0948fb7b70862f92828e7b37b622566ed367e",
        "files": [
          "lib/mkdir.js",
          "lib/normalize-windows-path.js",
          "lib/read-entry.js",
          "lib/replace.js",
          "lib/unpack.js",
          "lib/write-entry.js",
          "test/create.js",
          "test/extract.js",
          "test/pack.js",
          "test/read-entry.js",
          "test/replace.js",
          "test/unpack.js",
          "test/update.js",
          "test/write-entry.js"
        ],
        "message": "fix: refactoring to pass tests on Windows\n\nThis is a larger refactoring than I tend to prefer to do in a single\ncommit, but here goes.\n\n- The path normalization of \\ to / is made more comprehensive.\n\n- Checking to ensure we aren't overwriting the cwd is done earlier in\n  the unpack process, and more thoroughly, so there is less need for\n  repetitive checks later.\n\n- The cwd is checked at the start in our recursive mkdir, saving an\n  extra fs.mkdir call which would almost always result in an EEXIST.\n\n- Many edge cases resulting in dangling file descriptors were found and\n  addressed.  (Much as I complain about Windows stubbornly refusing to\n  delete files currently open, it did come in handy here.)\n\n- The Unpack[MAKEFS] methods are refactored for readability, and no\n  longer rely on fall-through behavior which made the sync and async\n  versions slightly different in some edge cases.\n\n- Many of the tests were refactored to use async rimraf (the better to\n  avoid Windows problems) and more modern tap affordances.\n\nNote: coverage on Windows is not 100%, due to skipping many tests that\nuse symbolic links.  Given the value of having those code paths covered,\nI believe that adding istanbul hints to skip coverage of those portions\nof the code would be a bad idea.  And given the complexity and hazards\ninvolved in mocking that much of the filesystem implementation, it's\nprobably best to just let Windows not have 100% coverage.",
        "before_after_code_files": [
          "lib/mkdir.js||lib/mkdir.js",
          "lib/normalize-windows-path.js||lib/normalize-windows-path.js",
          "lib/read-entry.js||lib/read-entry.js",
          "lib/replace.js||lib/replace.js",
          "lib/unpack.js||lib/unpack.js",
          "lib/write-entry.js||lib/write-entry.js",
          "test/create.js||test/create.js",
          "test/extract.js||test/extract.js",
          "test/pack.js||test/pack.js",
          "test/read-entry.js||test/read-entry.js",
          "test/replace.js||test/replace.js",
          "test/unpack.js||test/unpack.js",
          "test/update.js||test/update.js",
          "test/write-entry.js||test/write-entry.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/unpack.js||lib/unpack.js",
            "test/unpack.js||test/unpack.js"
          ],
          "candidate": [
            "lib/unpack.js||lib/unpack.js",
            "test/unpack.js||test/unpack.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/mkdir.js||lib/mkdir.js": [
          "File: lib/mkdir.js -> lib/mkdir.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: const cGet = (cache, key) => cache.get(normPath(key))",
          "38: const cSet = (cache, key, val) => cache.set(normPath(key), val)",
          "40: module.exports = (dir, opt, cb) => {",
          "41:   dir = normPath(dir)",
          "44:   const umask = opt.umask",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: const checkCwd = (dir, cb) => {",
          "41:   fs.stat(dir, (er, st) => {",
          "42:     if (er || !st.isDirectory())",
          "43:       er = new CwdError(dir, er && er.code || 'ENOTDIR')",
          "44:     cb(er)",
          "45:   })",
          "46: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   if (cache && cGet(cache, dir) === true)",
          "74:     return done()",
          "84:   if (preserve)",
          "85:     return mkdirp(dir, {mode}).then(made => done(null, made), done)",
          "88:   const parts = sub.split('/')",
          "89:   mkdir_(cwd, parts, mode, cache, unlink, cwd, null, done)",
          "90: }",
          "",
          "[Removed Lines]",
          "76:   if (dir === cwd) {",
          "77:     return fs.stat(dir, (er, st) => {",
          "78:       if (er || !st.isDirectory())",
          "79:         er = new CwdError(dir, er && er.code || 'ENOTDIR')",
          "80:       done(er)",
          "81:     })",
          "82:   }",
          "87:   const sub = path.relative(cwd, dir)",
          "",
          "[Added Lines]",
          "85:   if (dir === cwd)",
          "86:     return checkCwd(dir, done)",
          "91:   const sub = normPath(path.relative(cwd, dir))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:   if (!parts.length)",
          "94:     return cb(null, created)",
          "95:   const p = parts.shift()",
          "97:   if (cGet(cache, part))",
          "98:     return mkdir_(part, parts, mode, cache, unlink, cwd, created, cb)",
          "99:   fs.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb))",
          "",
          "[Removed Lines]",
          "96:   const part = base + '/' + p",
          "",
          "[Added Lines]",
          "100:   const part = normPath(path.resolve(base + '/' + p))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102: const onmkdir = (part, parts, mode, cache, unlink, cwd, created, cb) => er => {",
          "103:   if (er) {",
          "108:     fs.lstat(part, (statEr, st) => {",
          "110:         cb(statEr)",
          "112:         mkdir_(part, parts, mode, cache, unlink, cwd, created, cb)",
          "113:       else if (unlink) {",
          "114:         fs.unlink(part, er => {",
          "",
          "[Removed Lines]",
          "104:     if (er.path && path.dirname(er.path) === cwd &&",
          "105:         (er.code === 'ENOTDIR' || er.code === 'ENOENT'))",
          "106:       return cb(new CwdError(cwd, er.code))",
          "109:       if (statEr)",
          "111:       else if (st.isDirectory())",
          "",
          "[Added Lines]",
          "109:       if (statEr) {",
          "110:         statEr.path = statEr.path && normPath(statEr.path)",
          "112:       } else if (st.isDirectory())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127:   }",
          "128: }",
          "130: module.exports.sync = (dir, opt) => {",
          "131:   dir = normPath(dir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: const checkCwdSync = dir => {",
          "132:   let ok = false",
          "133:   let code = 'ENOTDIR'",
          "134:   try {",
          "135:     ok = fs.statSync(dir).isDirectory()",
          "136:   } catch (er) {",
          "137:     code = er.code",
          "138:   } finally {",
          "139:     if (!ok)",
          "140:       throw new CwdError(dir, code)",
          "141:   }",
          "142: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "158:     return done()",
          "160:   if (dir === cwd) {",
          "173:   }",
          "175:   if (preserve)",
          "176:     return done(mkdirp.sync(dir, mode))",
          "179:   const parts = sub.split('/')",
          "180:   let created = null",
          "181:   for (let p = parts.shift(), part = cwd;",
          "182:     p && (part += '/' + p);",
          "183:     p = parts.shift()) {",
          "184:     if (cGet(cache, part))",
          "185:       continue",
          "",
          "[Removed Lines]",
          "161:     let ok = false",
          "162:     let code = 'ENOTDIR'",
          "163:     try {",
          "164:       ok = fs.statSync(dir).isDirectory()",
          "165:     } catch (er) {",
          "166:       code = er.code",
          "167:     } finally {",
          "168:       if (!ok)",
          "169:         throw new CwdError(dir, code)",
          "170:     }",
          "171:     done()",
          "172:     return",
          "178:   const sub = path.relative(cwd, dir)",
          "",
          "[Added Lines]",
          "175:     checkCwdSync(cwd)",
          "176:     return done()",
          "182:   const sub = normPath(path.relative(cwd, dir))",
          "188:     part = normPath(path.resolve(part))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "189:       created = created || part",
          "190:       cSet(cache, part, true)",
          "191:     } catch (er) {",
          "196:       const st = fs.lstatSync(part)",
          "197:       if (st.isDirectory()) {",
          "198:         cSet(cache, part, true)",
          "",
          "[Removed Lines]",
          "192:       if (er.path && path.dirname(er.path) === cwd &&",
          "193:           (er.code === 'ENOTDIR' || er.code === 'ENOENT'))",
          "194:         return new CwdError(cwd, er.code)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/normalize-windows-path.js||lib/normalize-windows-path.js": [
          "File: lib/normalize-windows-path.js -> lib/normalize-windows-path.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: const platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform",
          "7: module.exports = platform !== 'win32' ? p => p",
          "",
          "[Removed Lines]",
          "8:   : p => p.replace(/\\\\/g, '/')",
          "",
          "[Added Lines]",
          "8:   : p => p && p.replace(/\\\\/g, '/')",
          "",
          "---------------"
        ],
        "lib/read-entry.js||lib/read-entry.js": [
          "File: lib/read-entry.js -> lib/read-entry.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "2: const MiniPass = require('minipass')",
          "4: const SLURP = Symbol('slurp')",
          "5: module.exports = class ReadEntry extends MiniPass {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: const normPath = require('./normalize-windows-path.js')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:         this.ignore = true",
          "47:     }",
          "50:     this.mode = header.mode",
          "51:     if (this.mode)",
          "52:       this.mode = this.mode & 0o7777",
          "",
          "[Removed Lines]",
          "49:     this.path = header.path",
          "",
          "[Added Lines]",
          "50:     this.path = normPath(header.path)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     this.mtime = header.mtime",
          "59:     this.atime = header.atime",
          "60:     this.ctime = header.ctime",
          "62:     this.uname = header.uname",
          "63:     this.gname = header.gname",
          "",
          "[Removed Lines]",
          "61:     this.linkpath = header.linkpath",
          "",
          "[Added Lines]",
          "62:     this.linkpath = normPath(header.linkpath)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:       if (ex[k] !== null && ex[k] !== undefined &&",
          "95:           !(global && k === 'path'))",
          "97:     }",
          "98:   }",
          "99: }",
          "",
          "[Removed Lines]",
          "96:         this[k] = ex[k]",
          "",
          "[Added Lines]",
          "97:         this[k] = k === 'path' || k === 'linkpath' ? normPath(ex[k]) : ex[k]",
          "",
          "---------------"
        ],
        "lib/replace.js||lib/replace.js": [
          "File: lib/replace.js -> lib/replace.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:       fs.fstat(fd, (er, st) => {",
          "172:         if (er)",
          "174:         getPos(fd, st.size, (er, position) => {",
          "175:           if (er)",
          "176:             return reject(er)",
          "",
          "[Removed Lines]",
          "173:           return reject(er)",
          "",
          "[Added Lines]",
          "173:           return fs.close(fd, () => reject(er))",
          "",
          "---------------"
        ],
        "lib/unpack.js||lib/unpack.js": [
          "File: lib/unpack.js -> lib/unpack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: const DOCHOWN = Symbol('doChown')",
          "41: const UID = Symbol('uid')",
          "42: const GID = Symbol('gid')",
          "43: const crypto = require('crypto')",
          "44: const getFlag = require('./get-write-flag.js')",
          "",
          "[Removed Lines]",
          "47: const neverCalled = () => {",
          "48:   throw new Error('sync function called cb somehow?!?')",
          "49: }",
          "",
          "[Added Lines]",
          "43: const CHECKED_CWD = Symbol('checkedCwd')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:     super(opt)",
          "118:     this.reservations = pathReservations()",
          "120:     this.transform = typeof opt.transform === 'function' ? opt.transform : null",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     this[CHECKED_CWD] = false",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:       if (parts.length < this.strip)",
          "218:         return false",
          "219:       entry.path = parts.slice(this.strip).join('/')",
          "223:       if (entry.type === 'Link') {",
          "224:         const linkparts = normPath(entry.linkpath).split('/')",
          "",
          "[Removed Lines]",
          "220:       if (entry.path === '' && entry.type !== 'Directory' && entry.type !== 'GNUDumpDir')",
          "221:         return false",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "249:       }",
          "250:     }",
          "259:     if (path.isAbsolute(entry.path))",
          "261:     else",
          "262:       entry.absolute = normPath(path.resolve(this.cwd, entry.path))",
          "264:     return true",
          "265:   }",
          "",
          "[Removed Lines]",
          "253:     if (this.win32) {",
          "254:       const parsed = path.win32.parse(entry.path)",
          "255:       entry.path = parsed.root === '' ? wc.encode(entry.path)",
          "256:         : parsed.root + wc.encode(entry.path.substr(parsed.root.length))",
          "257:     }",
          "260:       entry.absolute = normPath(entry.path)",
          "",
          "[Added Lines]",
          "249:       entry.absolute = normPath(path.resolve(entry.path))",
          "255:     if (entry.absolute === this.cwd &&",
          "256:         entry.type !== 'Directory' &&",
          "257:         entry.type !== 'GNUDumpDir')",
          "258:       return false",
          "261:     if (this.win32) {",
          "262:       const { root: aRoot } = path.win32.parse(entry.absolute)",
          "263:       entry.absolute = aRoot + wc.encode(entry.absolute.substr(aRoot.length))",
          "264:       const { root: pRoot } = path.win32.parse(entry.path)",
          "265:       entry.path = pRoot + wc.encode(entry.path.substr(pRoot.length))",
          "266:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "509:     if (entry.type !== 'Directory')",
          "510:       pruneCache(this.dirCache, entry.absolute)",
          "517:       }",
          "519:         if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {",
          "520:           this[SKIP](entry)",
          "521:           done()",
          "525:           if (entry.type === 'Directory') {",
          "536:       })",
          "538:   }",
          "540:   [MAKEFS] (er, entry, done) {",
          "",
          "[Removed Lines]",
          "512:     this[MKDIR](path.dirname(entry.absolute), this.dmode, er => {",
          "513:       if (er) {",
          "514:         this[ONERROR](er, entry)",
          "515:         done()",
          "516:         return",
          "518:       fs.lstat(entry.absolute, (er, st) => {",
          "522:         } else if (er || this[ISREUSABLE](entry, st))",
          "523:           this[MAKEFS](null, entry, done)",
          "524:         else if (st.isDirectory()) {",
          "526:             if (!this.noChmod && (!entry.mode || (st.mode & 0o7777) === entry.mode))",
          "527:               this[MAKEFS](null, entry, done)",
          "528:             else {",
          "529:               fs.chmod(entry.absolute, entry.mode,",
          "530:                 er => this[MAKEFS](er, entry, done))",
          "531:             }",
          "532:           } else",
          "533:             fs.rmdir(entry.absolute, er => this[MAKEFS](er, entry, done))",
          "534:         } else",
          "535:           unlinkFile(entry.absolute, er => this[MAKEFS](er, entry, done))",
          "537:     })",
          "",
          "[Added Lines]",
          "518:     const checkCwd = () => {",
          "519:       this[MKDIR](this.cwd, this.dmode, er => {",
          "520:         if (er) {",
          "521:           this[ONERROR](er, entry)",
          "522:           done()",
          "523:           return",
          "524:         }",
          "525:         this[CHECKED_CWD] = true",
          "526:         start()",
          "527:       })",
          "528:     }",
          "530:     const start = () => {",
          "531:       if (entry.absolute !== this.cwd) {",
          "532:         const parent = normPath(path.dirname(entry.absolute))",
          "533:         if (parent !== this.cwd) {",
          "534:           return this[MKDIR](parent, this.dmode, er => {",
          "535:             if (er) {",
          "536:               this[ONERROR](er, entry)",
          "537:               done()",
          "538:               return",
          "539:             }",
          "540:             afterMakeParent()",
          "541:           })",
          "542:         }",
          "544:       afterMakeParent()",
          "545:     }",
          "547:     const afterMakeParent = () => {",
          "548:       fs.lstat(entry.absolute, (lstatEr, st) => {",
          "552:           return",
          "553:         }",
          "554:         if (lstatEr || this[ISREUSABLE](entry, st))",
          "555:           return this[MAKEFS](null, entry, done)",
          "557:         if (st.isDirectory()) {",
          "559:             const needChmod = !this.noChmod &&",
          "560:               entry.mode &&",
          "561:               (st.mode & 0o7777) !== entry.mode",
          "562:             const afterChmod = er => this[MAKEFS](er, entry, done)",
          "563:             if (!needChmod)",
          "564:               return afterChmod()",
          "565:             return fs.chmod(entry.absolute, entry.mode, afterChmod)",
          "566:           }",
          "568:           if (entry.absolute !== this.cwd) {",
          "569:             return fs.rmdir(entry.absolute, er =>",
          "570:               this[MAKEFS](er, entry, done))",
          "571:           }",
          "572:         }",
          "576:         if (entry.absolute === this.cwd)",
          "577:           return this[MAKEFS](null, entry, done)",
          "579:         unlinkFile(entry.absolute, er =>",
          "580:           this[MAKEFS](er, entry, done))",
          "582:     }",
          "584:     if (this[CHECKED_CWD])",
          "585:       start()",
          "586:     else",
          "587:       checkCwd()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "576:   }",
          "577: }",
          "579: class UnpackSync extends Unpack {",
          "580:   [CHECKFS] (entry) {",
          "581:     if (entry.type !== 'Directory')",
          "582:       pruneCache(this.dirCache, entry.absolute)",
          "607:       }",
          "610:     }",
          "611:   }",
          "613:   [FILE] (entry, _) {",
          "",
          "[Removed Lines]",
          "584:     const er = this[MKDIR](path.dirname(entry.absolute), this.dmode, neverCalled)",
          "585:     if (er)",
          "586:       return this[ONERROR](er, entry)",
          "587:     try {",
          "588:       const st = fs.lstatSync(entry.absolute)",
          "589:       if (this.keep || this.newer && st.mtime > entry.mtime)",
          "590:         return this[SKIP](entry)",
          "591:       else if (this[ISREUSABLE](entry, st))",
          "592:         return this[MAKEFS](null, entry, neverCalled)",
          "593:       else {",
          "594:         try {",
          "595:           if (st.isDirectory()) {",
          "596:             if (entry.type === 'Directory') {",
          "597:               if (!this.noChmod && entry.mode && (st.mode & 0o7777) !== entry.mode)",
          "598:                 fs.chmodSync(entry.absolute, entry.mode)",
          "599:             } else",
          "600:               fs.rmdirSync(entry.absolute)",
          "601:           } else",
          "602:             unlinkFileSync(entry.absolute)",
          "603:           return this[MAKEFS](null, entry, neverCalled)",
          "604:         } catch (er) {",
          "605:           return this[ONERROR](er, entry)",
          "606:         }",
          "608:     } catch (er) {",
          "609:       return this[MAKEFS](null, entry, neverCalled)",
          "",
          "[Added Lines]",
          "629: const callSync = fn => {",
          "630:   try {",
          "631:     return [null, fn()]",
          "632:   } catch (er) {",
          "633:     return [er, null]",
          "634:   }",
          "635: }",
          "637:   [MAKEFS] (er, entry) {",
          "638:     return super[MAKEFS](er, entry, () => {})",
          "639:   }",
          "645:     if (!this[CHECKED_CWD]) {",
          "646:       const er = this[MKDIR](this.cwd, this.dmode)",
          "647:       if (er)",
          "648:         return this[ONERROR](er, entry)",
          "649:       this[CHECKED_CWD] = true",
          "650:     }",
          "654:     if (entry.absolute !== this.cwd) {",
          "655:       const parent = normPath(path.dirname(entry.absolute))",
          "656:       if (parent !== this.cwd) {",
          "657:         const mkParent = this[MKDIR](parent, this.dmode)",
          "658:         if (mkParent)",
          "659:           return this[ONERROR](mkParent, entry)",
          "663:     const [lstatEr, st] = callSync(() => fs.lstatSync(entry.absolute))",
          "664:     if (st && (this.keep || this.newer && st.mtime > entry.mtime))",
          "665:       return this[SKIP](entry)",
          "667:     if (lstatEr || this[ISREUSABLE](entry, st))",
          "668:       return this[MAKEFS](null, entry)",
          "670:     if (st.isDirectory()) {",
          "671:       if (entry.type === 'Directory') {",
          "672:         const needChmod = !this.noChmod &&",
          "673:           entry.mode &&",
          "674:           (st.mode & 0o7777) !== entry.mode",
          "675:         const [er] = needChmod ? callSync(() => {",
          "676:           fs.chmodSync(entry.absolute, entry.mode)",
          "677:         }) : []",
          "678:         return this[MAKEFS](er, entry)",
          "679:       }",
          "681:       const [er] = callSync(() => fs.rmdirSync(entry.absolute))",
          "682:       this[MAKEFS](er, entry)",
          "683:     }",
          "687:     const [er] = entry.absolute === this.cwd ? []",
          "688:       : callSync(() => unlinkFileSync(entry.absolute))",
          "689:     this[MAKEFS](er, entry)",
          "",
          "---------------"
        ],
        "lib/write-entry.js||lib/write-entry.js": [
          "File: lib/write-entry.js -> lib/write-entry.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: const prefixPath = (path, prefix) => {",
          "11:   if (!prefix)",
          "13:   path = normPath(path).replace(/^\\.(\\/|$)/, '')",
          "14:   return stripSlash(prefix) + '/' + path",
          "15: }",
          "",
          "[Removed Lines]",
          "12:     return path",
          "",
          "[Added Lines]",
          "12:     return normPath(path)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: const AWAITDRAIN = Symbol('awaitDrain')",
          "34: const ONDRAIN = Symbol('ondrain')",
          "35: const PREFIX = Symbol('prefix')",
          "36: const warner = require('./warn-mixin.js')",
          "37: const winchars = require('./winchars.js')",
          "38: const stripAbsolutePath = require('./strip-absolute-path.js')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: const HAD_ERROR = Symbol('hadError')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:     this.portable = !!opt.portable",
          "53:     this.myuser = process.env.USER || ''",
          "54:     this.maxReadSize = opt.maxReadSize || maxReadSize",
          "55:     this.linkCache = opt.linkCache || new Map()",
          "56:     this.statCache = opt.statCache || new Map()",
          "57:     this.preservePaths = !!opt.preservePaths",
          "59:     this.strict = !!opt.strict",
          "60:     this.noPax = !!opt.noPax",
          "61:     this.noMtime = !!opt.noMtime",
          "62:     this.mtime = opt.mtime || null",
          "65:     this.fd = null",
          "66:     this.blockLen = null",
          "",
          "[Removed Lines]",
          "52:     this.myuid = process.getuid && process.getuid()",
          "58:     this.cwd = opt.cwd || process.cwd()",
          "63:     this.prefix = opt.prefix || null",
          "",
          "[Added Lines]",
          "53:     this.myuid = process.getuid && process.getuid() || 0",
          "59:     this.cwd = normPath(opt.cwd || process.cwd())",
          "64:     this.prefix = opt.prefix ? normPath(opt.prefix) : null",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:       this[LSTAT]()",
          "108:   }",
          "110:   [LSTAT] () {",
          "111:     fs.lstat(this.absolute, (er, stat) => {",
          "112:       if (er)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   emit (ev, ...data) {",
          "114:     if (ev === 'error')",
          "115:       this[HAD_ERROR] = true",
          "116:     return super.emit(ev, ...data)",
          "117:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "203:   }",
          "205:   [ONREADLINK] (linkpath) {",
          "207:     this[HEADER]()",
          "208:     this.end()",
          "209:   }",
          "211:   [HARDLINK] (linkpath) {",
          "212:     this.type = 'Link'",
          "214:     this.stat.size = 0",
          "215:     this[HEADER]()",
          "216:     this.end()",
          "",
          "[Removed Lines]",
          "206:     this.linkpath = linkpath.replace(/\\\\/g, '/')",
          "213:     this.linkpath = path.relative(this.cwd, linkpath).replace(/\\\\/g, '/')",
          "",
          "[Added Lines]",
          "215:     this.linkpath = normPath(linkpath)",
          "222:     this.linkpath = normPath(path.relative(this.cwd, linkpath))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "245:   [ONOPENFILE] (fd) {",
          "246:     this.fd = fd",
          "247:     this.blockLen = 512 * Math.ceil(this.stat.size / 512)",
          "248:     this.blockRemain = this.blockLen",
          "249:     const bufLen = Math.min(this.blockLen, this.maxReadSize)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:     if (this[HAD_ERROR])",
          "257:       return this[CLOSE]()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "406:     this.prefix = opt.prefix || null",
          "409:     this.mode = this[MODE](readEntry.mode)",
          "410:     this.uid = this.portable ? null : readEntry.uid",
          "411:     this.gid = this.portable ? null : readEntry.gid",
          "",
          "[Removed Lines]",
          "408:     this.path = readEntry.path",
          "",
          "[Added Lines]",
          "420:     this.path = normPath(readEntry.path)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "415:     this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime",
          "416:     this.atime = this.portable ? null : readEntry.atime",
          "417:     this.ctime = this.portable ? null : readEntry.ctime",
          "420:     if (typeof opt.onwarn === 'function')",
          "421:       this.on('warn', opt.onwarn)",
          "",
          "[Removed Lines]",
          "418:     this.linkpath = readEntry.linkpath",
          "",
          "[Added Lines]",
          "430:     this.linkpath = normPath(readEntry.linkpath)",
          "",
          "---------------"
        ],
        "test/create.js||test/create.js": [
          "File: test/create.js -> test/create.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "3: const t = require('tap')",
          "4: const c = require('../lib/create.js')",
          "5: const list = require('../lib/list.js')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: const isWindows = process.platform === 'win32'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12: const spawn = require('child_process').spawn",
          "13: const Pack = require('../lib/pack.js')",
          "14: const mutateFS = require('mutate-fs')",
          "16: const readtar = (file, cb) => {",
          "17:   const child = spawn('tar', ['tf', file])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: const {promisify} = require('util')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "21:     cb(code, signal, Buffer.concat(out).toString()))",
          "22: }",
          "30: })",
          "32: t.test('no cb if sync or without file', t => {",
          "",
          "[Removed Lines]",
          "24: t.teardown(_ => rimraf.sync(dir))",
          "26: t.test('setup', t => {",
          "27:   rimraf.sync(dir)",
          "28:   mkdirp.sync(dir)",
          "29:   t.end()",
          "",
          "[Added Lines]",
          "26: t.teardown(() => new Promise(resolve => rimraf(dir, resolve)))",
          "28: t.before(async () => {",
          "29:   await promisify(rimraf)(dir)",
          "30:   await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:   })",
          "90:   t.test('with specific mode', t => {",
          "92:     t.test('sync', t => {",
          "93:       const file = path.resolve(dir, 'sync-mode.tar')",
          "94:       c({",
          "",
          "[Removed Lines]",
          "91:     const mode = 0o740",
          "",
          "[Added Lines]",
          "92:     const mode = isWindows ? 0o666 : 0o740",
          "",
          "---------------"
        ],
        "test/extract.js||test/extract.js": [
          "File: test/extract.js -> test/extract.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const extractdir = path.resolve(__dirname, 'fixtures/extract')",
          "8: const tars = path.resolve(__dirname, 'fixtures/tars')",
          "9: const mkdirp = require('mkdirp')",
          "11: const mutateFS = require('mutate-fs')",
          "15: t.test('basic extracting', t => {",
          "16:   const file = path.resolve(tars, 'utf8.tar')",
          "17:   const dir = path.resolve(extractdir, 'basic')",
          "22:   })",
          "25:     fs.lstatSync(dir + '/\u03a9.txt')",
          "26:     fs.lstatSync(dir + '/\ud83c\udf1f.txt')",
          "27:     t.throws(_ => fs.lstatSync(dir + '/long-path/r/e/a/l/l/y/-/d/e/e/p/-' +",
          "28:                                '/f/o/l/d/e/r/-/p/a/t/h/\u03a9.txt'))",
          "31:     t.end()",
          "32:   }",
          "34:   const files = ['\ud83c\udf1f.txt', '\u03a9.txt']",
          "35:   t.test('sync', t => {",
          "36:     x({ file: file, sync: true, C: dir }, files)",
          "38:   })",
          "40:   t.test('async promisey', t => {",
          "44:   })",
          "46:   t.test('async cb', t => {",
          "47:     return x({ file: file, cwd: dir }, files, er => {",
          "48:       if (er)",
          "49:         throw er",
          "51:     })",
          "52:   })",
          "",
          "[Removed Lines]",
          "10: const rimraf = require('rimraf')",
          "13: t.teardown(_ => rimraf.sync(extractdir))",
          "19:   t.beforeEach(() => {",
          "20:     rimraf.sync(dir)",
          "21:     mkdirp.sync(dir)",
          "24:   const check = t => {",
          "30:     rimraf.sync(dir)",
          "37:     check(t)",
          "41:     return x({ file: file, cwd: dir }, files).then(_ => {",
          "42:       check(t)",
          "43:     })",
          "50:       check(t)",
          "",
          "[Added Lines]",
          "10: const {promisify} = require('util')",
          "11: const rimraf = promisify(require('rimraf'))",
          "14: t.teardown(_ => rimraf(extractdir))",
          "20:   t.beforeEach(async () => {",
          "21:     await rimraf(dir)",
          "22:     await mkdirp(dir)",
          "25:   const check = async t => {",
          "31:     await rimraf(dir)",
          "38:     return check(t)",
          "42:     return x({ file: file, cwd: dir }, files).then(_ => check(t))",
          "49:       return check(t)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   const file = path.resolve(tars, 'utf8.tar')",
          "59:   const dir = path.resolve(extractdir, 'filter')",
          "64:   })",
          "67:     fs.lstatSync(dir + '/\u03a9.txt')",
          "68:     t.throws(_ => fs.lstatSync(dir + '/\ud83c\udf1f.txt'))",
          "69:     t.throws(_ => fs.lstatSync(dir + '/long-path/r/e/a/l/l/y/-/d/e/e/p/-' +",
          "70:                                '/f/o/l/d/e/r/-/p/a/t/h/\u03a9.txt'))",
          "73:     t.end()",
          "74:   }",
          "",
          "[Removed Lines]",
          "61:   t.beforeEach(() => {",
          "62:     rimraf.sync(dir)",
          "63:     mkdirp.sync(dir)",
          "66:   const check = t => {",
          "72:     rimraf.sync(dir)",
          "",
          "[Added Lines]",
          "60:   t.beforeEach(async () => {",
          "61:     await rimraf(dir)",
          "62:     await mkdirp(dir)",
          "65:   const check = async t => {",
          "71:     await rimraf(dir)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:   t.test('sync', t => {",
          "79:     x({ filter: filter, file: file, sync: true, C: dir }, ['\ud83c\udf1f.txt', '\u03a9.txt'])",
          "81:   })",
          "83:   t.test('async promisey', t => {",
          "84:     return x({ filter: filter, file: file, cwd: dir }, ['\ud83c\udf1f.txt', '\u03a9.txt']).then(_ => {",
          "86:     })",
          "87:   })",
          "",
          "[Removed Lines]",
          "80:     check(t)",
          "85:       check(t)",
          "",
          "[Added Lines]",
          "79:     return check(t)",
          "84:       return check(t)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:     return x({ filter: filter, file: file, cwd: dir }, ['\ud83c\udf1f.txt', '\u03a9.txt'], er => {",
          "91:       if (er)",
          "92:         throw er",
          "94:     })",
          "95:   })",
          "",
          "[Removed Lines]",
          "93:       check(t)",
          "",
          "[Added Lines]",
          "92:       return check(t)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101:   const file = path.resolve(tars, 'body-byte-counts.tar')",
          "102:   const dir = path.resolve(extractdir, 'no-list')",
          "107:   })",
          "110:     t.equal(fs.lstatSync(path.resolve(dir, '1024-bytes.txt')).size, 1024)",
          "111:     t.equal(fs.lstatSync(path.resolve(dir, '512-bytes.txt')).size, 512)",
          "112:     t.equal(fs.lstatSync(path.resolve(dir, 'one-byte.txt')).size, 1)",
          "113:     t.equal(fs.lstatSync(path.resolve(dir, 'zero-byte.txt')).size, 0)",
          "115:     t.end()",
          "116:   }",
          "118:   t.test('sync', t => {",
          "119:     x({ file: file, sync: true, C: dir })",
          "121:   })",
          "123:   t.test('async promisey', t => {",
          "124:     return x({ file: file, cwd: dir }).then(_ => {",
          "126:     })",
          "127:   })",
          "",
          "[Removed Lines]",
          "104:   t.beforeEach(() => {",
          "105:     rimraf.sync(dir)",
          "106:     mkdirp.sync(dir)",
          "109:   const check = t => {",
          "114:     rimraf.sync(dir)",
          "120:     check(t)",
          "125:       check(t)",
          "",
          "[Added Lines]",
          "103:   t.beforeEach(async () => {",
          "104:     await rimraf(dir)",
          "105:     await mkdirp(dir)",
          "108:   const check = async t => {",
          "113:     await rimraf(dir)",
          "119:     return check(t)",
          "124:       return check(t)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "130:     return x({ file: file, cwd: dir }, er => {",
          "131:       if (er)",
          "132:         throw er",
          "134:     })",
          "135:   })",
          "",
          "[Removed Lines]",
          "133:       check(t)",
          "",
          "[Added Lines]",
          "132:       return check(t)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "142:   const file = path.resolve(tars, 'body-byte-counts.tar')",
          "143:   const dir = path.resolve(extractdir, 'no-list')",
          "148:   })",
          "151:     t.equal(fs.lstatSync(path.resolve(dir, '1024-bytes.txt')).size, 1024)",
          "152:     t.equal(fs.lstatSync(path.resolve(dir, '512-bytes.txt')).size, 512)",
          "153:     t.equal(fs.lstatSync(path.resolve(dir, 'one-byte.txt')).size, 1)",
          "154:     t.equal(fs.lstatSync(path.resolve(dir, 'zero-byte.txt')).size, 0)",
          "156:     t.end()",
          "157:   }",
          "159:   t.test('sync', t => {",
          "160:     x({ file: file, sync: true, C: dir, maxReadSize: maxReadSize })",
          "162:   })",
          "164:   t.test('async promisey', t => {",
          "165:     return x({ file: file, cwd: dir, maxReadSize: maxReadSize }).then(_ => {",
          "167:     })",
          "168:   })",
          "",
          "[Removed Lines]",
          "145:   t.beforeEach(() => {",
          "146:     rimraf.sync(dir)",
          "147:     mkdirp.sync(dir)",
          "150:   const check = t => {",
          "155:     rimraf.sync(dir)",
          "161:     check(t)",
          "166:       check(t)",
          "",
          "[Added Lines]",
          "144:   t.beforeEach(async () => {",
          "145:     await rimraf(dir)",
          "146:     await mkdirp(dir)",
          "149:   const check = async t => {",
          "154:     await rimraf(dir)",
          "160:     return check(t)",
          "165:       return check(t)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "171:     return x({ file: file, cwd: dir, maxReadSize: maxReadSize }, er => {",
          "172:       if (er)",
          "173:         throw er",
          "175:     })",
          "176:   })",
          "",
          "[Removed Lines]",
          "174:       check(t)",
          "",
          "[Added Lines]",
          "173:       return check(t)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "206:   t.end()",
          "207: })",
          "210:   const file = path.resolve(__dirname, 'fixtures/sync-gzip-fail.tgz')",
          "211:   const dir = path.resolve(__dirname, 'sync-gzip-fail')",
          "212:   const cwd = process.cwd()",
          "214:   process.chdir(dir)",
          "216:     process.chdir(cwd)",
          "218:   })",
          "220:   x({",
          "",
          "[Removed Lines]",
          "209: t.test('sync gzip error edge case test', t => {",
          "213:   mkdirp.sync(dir + '/x')",
          "215:   t.teardown(() => {",
          "217:     rimraf.sync(dir)",
          "",
          "[Added Lines]",
          "208: t.test('sync gzip error edge case test', async t => {",
          "212:   await mkdirp(dir + '/x')",
          "214:   t.teardown(async () => {",
          "216:     await rimraf(dir)",
          "",
          "---------------"
        ],
        "test/pack.js||test/pack.js": [
          "File: test/pack.js -> test/pack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: const rimraf = require('rimraf')",
          "19: const mkdirp = require('mkdirp')",
          "20: const ReadEntry = require('../lib/read-entry.js')",
          "22: const ctime = new Date('2017-05-10T01:03:12.000Z')",
          "23: const atime = new Date('2017-04-17T00:00:00.000Z')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: const isWindows = process.platform === 'win32'",
          "22: const normPath = require('../lib/normalize-windows-path.js')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:         cksumValid: true,",
          "59:         needPax: false,",
          "60:         path: 'one-byte.txt',",
          "62:         size: 1,",
          "63:         mtime: mtime,",
          "64:         cksum: Number,",
          "",
          "[Removed Lines]",
          "61:         mode: 0o644,",
          "",
          "[Added Lines]",
          "63:         mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:         cksumValid: true,",
          "103:         needPax: false,",
          "104:         path: 'package/.dotfile',",
          "106:         size: 2,",
          "107:         mtime: mtime,",
          "108:         cksum: Number,",
          "",
          "[Removed Lines]",
          "105:         mode: 0o644,",
          "",
          "[Added Lines]",
          "107:         mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "217:         cksumValid: true,",
          "218:         needPax: false,",
          "219:         path: 'dir/',",
          "221:         size: 0,",
          "222:         mtime: mtime,",
          "223:         cksum: Number,",
          "",
          "[Removed Lines]",
          "220:         mode: 0o755,",
          "",
          "[Added Lines]",
          "222:         mode: isWindows ? 0o777 : 0o755,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "245:         cksumValid: true,",
          "246:         needPax: false,",
          "247:         path: 'dir/x',",
          "249:         size: 0,",
          "250:         mtime: mtime,",
          "251:         cksum: Number,",
          "",
          "[Removed Lines]",
          "248:         mode: 0o644,",
          "",
          "[Added Lines]",
          "250:         mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "283:         cksumValid: true,",
          "284:         needPax: false,",
          "285:         path: 'dir/',",
          "287:         size: 0,",
          "288:         mtime: mtime,",
          "289:         cksum: Number,",
          "",
          "[Removed Lines]",
          "286:         mode: 0o755,",
          "",
          "[Added Lines]",
          "288:         mode: isWindows ? 0o777 : 0o755,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "329:         cksumValid: true,",
          "330:         needPax: false,",
          "331:         path: 'dir/',",
          "333:         size: 0,",
          "334:         mtime: mtime,",
          "335:         cksum: Number,",
          "",
          "[Removed Lines]",
          "332:         mode: 0o755,",
          "",
          "[Added Lines]",
          "334:         mode: isWindows ? 0o777 : 0o755,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "575:       cksumValid: true,",
          "576:       needPax: false,",
          "577:       path: 'long-path/',",
          "579:       size: 0,",
          "580:       mtime: mtime,",
          "581:       cksum: Number,",
          "",
          "[Removed Lines]",
          "578:       mode: 0o755,",
          "",
          "[Added Lines]",
          "580:       mode: isWindows ? 0o777 : 0o755,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "634:       cksumValid: true,",
          "635:       needPax: false,",
          "636:       path: 'long-path/',",
          "638:       size: 0,",
          "639:       mtime: mtime,",
          "640:       cksum: Number,",
          "",
          "[Removed Lines]",
          "637:       mode: 0o755,",
          "",
          "[Added Lines]",
          "639:       mode: isWindows ? 0o777 : 0o755,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "700:       const data = Buffer.concat(out)",
          "701:       t.equal(data.length, 2048)",
          "702:       t.match(warnings, [[",
          "704:       ]])",
          "706:       t.match(new Header(data), {",
          "708:       })",
          "709:       t.end()",
          "710:     })",
          "",
          "[Removed Lines]",
          "703:         'TAR_ENTRY_INFO', /stripping .* from absolute path/, { path: f },",
          "707:         path: f.replace(/^(\\/|[a-z]:\\\\\\\\)/, ''),",
          "",
          "[Added Lines]",
          "705:         'TAR_ENTRY_INFO',",
          "706:         /stripping .* from absolute path/,",
          "707:         { path: normPath(f) },",
          "711:         path: normPath(f).replace(/^(\\/|[a-z]:\\/)/i, ''),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "728:           t.equal(warnings.length, 0)",
          "730:           t.match(new Header(data), {",
          "732:           })",
          "733:           t.end()",
          "734:         })",
          "",
          "[Removed Lines]",
          "731:             path: f,",
          "",
          "[Added Lines]",
          "735:             path: normPath(f),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "741:       strict: true,",
          "742:       cwd: files,",
          "743:     }).end(f).on('error', e => {",
          "745:       t.end()",
          "746:     })",
          "747:   })",
          "",
          "[Removed Lines]",
          "744:       t.match(e, { message: /stripping .* from absolute path/, path: f })",
          "",
          "[Added Lines]",
          "748:       t.match(e, {",
          "749:         message: /stripping .* from absolute path/,",
          "750:         path: normPath(f),",
          "751:       })",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "794:   t.end()",
          "795: })",
          "798:   const check = (out, t) => {",
          "799:     const data = Buffer.concat(out)",
          "800:     t.equal(data.length, 2048)",
          "",
          "[Removed Lines]",
          "797: t.test('follow', t => {",
          "",
          "[Added Lines]",
          "804: t.test('follow', { skip: isWindows && 'file symlinks not available' }, t => {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "803:       cksumValid: true,",
          "804:       needPax: false,",
          "805:       path: 'symlink',",
          "807:       size: 26,",
          "808:     })",
          "809:     t.match(data.slice(512).toString(), /this link is like diamond\\n\\0+$/)",
          "",
          "[Removed Lines]",
          "806:       mode: 0o644,",
          "",
          "[Added Lines]",
          "813:       mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------"
        ],
        "test/read-entry.js||test/read-entry.js": [
          "File: test/read-entry.js -> test/read-entry.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: t.test('create read entry', t => {",
          "7:   const h = new Header({",
          "9:     mode: 0o755,",
          "10:     uid: 24561,",
          "11:     gid: 20,",
          "",
          "[Removed Lines]",
          "8:     path: 'foo.txt',",
          "",
          "[Added Lines]",
          "8:     path: 'oof.txt',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:   })",
          "20:   h.encode()",
          "24:   t.ok(entry.header.cksumValid, 'header checksum should be valid')",
          "26:   t.match(entry, {",
          "28:     globalExtended: { z: 0, a: null, b: undefined },",
          "29:     header: {",
          "30:       cksumValid: true,",
          "31:       needPax: false,",
          "33:       mode: 0o755,",
          "34:       uid: 24561,",
          "35:       gid: 20,",
          "",
          "[Removed Lines]",
          "22:   const entry = new ReadEntry(h, { x: 'y' }, { z: 0, a: null, b: undefined })",
          "27:     extended: { x: 'y' },",
          "32:       path: 'foo.txt',",
          "",
          "[Added Lines]",
          "22:   const entry = new ReadEntry(h, { x: 'y', path: 'foo.txt' }, { z: 0, a: null, b: undefined })",
          "27:     extended: { x: 'y', path: 'foo.txt' },",
          "32:       path: 'oof.txt',",
          "",
          "---------------"
        ],
        "test/replace.js||test/replace.js": [
          "File: test/replace.js -> test/replace.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: const r = require('../lib/replace.js')",
          "4: const path = require('path')",
          "5: const fs = require('fs')",
          "8: const mutateFS = require('mutate-fs')",
          "9: const list = require('../lib/list.js')",
          "11: const fixtures = path.resolve(__dirname, 'fixtures')",
          "13: const tars = path.resolve(fixtures, 'tars')",
          "22: const zlib = require('zlib')",
          "24: const spawn = require('child_process').spawn",
          "47: }",
          "54: t.test('basic file add to archive (good or truncated)', t => {",
          "57:   const check = (file, t) => {",
          "58:     const c = spawn('tar', ['tf', file], { stdio: [0, 'pipe', 2] })",
          "59:     const out = []",
          "",
          "[Removed Lines]",
          "6: const mkdirp = require('mkdirp')",
          "7: const rimraf = require('rimraf')",
          "12: const dir = path.resolve(fixtures, 'replace')",
          "14: const file = dir + '/body-byte-counts.tar'",
          "15: const fileNoNulls = dir + '/no-null-eof.tar'",
          "16: const fileTruncHead = dir + '/truncated-head.tar'",
          "17: const fileTruncBody = dir + '/truncated-body.tar'",
          "18: const fileNonExistent = dir + '/does-not-exist.tar'",
          "19: const fileZeroByte = dir + '/zero.tar'",
          "20: const fileEmpty = dir + '/empty.tar'",
          "21: const fileCompressed = dir + '/compressed.tgz'",
          "26: t.teardown(_ => rimraf.sync(dir))",
          "28: const reset = () => {",
          "29:   rimraf.sync(dir)",
          "30:   mkdirp.sync(dir)",
          "31:   const data = fs.readFileSync(tars + '/body-byte-counts.tar')",
          "32:   fs.writeFileSync(file, data)",
          "34:   const dataNoNulls = data.slice(0, data.length - 1024)",
          "35:   fs.writeFileSync(fileNoNulls, dataNoNulls)",
          "37:   const dataTruncHead = Buffer.concat([dataNoNulls, data.slice(0, 500)])",
          "38:   fs.writeFileSync(fileTruncHead, dataTruncHead)",
          "40:   const dataTruncBody = Buffer.concat([dataNoNulls, data.slice(0, 700)])",
          "41:   fs.writeFileSync(fileTruncBody, dataTruncBody)",
          "43:   fs.writeFileSync(fileZeroByte, '')",
          "44:   fs.writeFileSync(fileEmpty, Buffer.alloc(1024))",
          "46:   fs.writeFileSync(fileCompressed, zlib.gzipSync(data))",
          "49: t.test('setup', t => {",
          "50:   reset()",
          "51:   t.end()",
          "52: })",
          "55:   t.beforeEach(reset)",
          "",
          "[Added Lines]",
          "8: const {resolve} = require('path')",
          "16: const data = fs.readFileSync(tars + '/body-byte-counts.tar')",
          "17: const dataNoNulls = data.slice(0, data.length - 1024)",
          "18: const fixtureDef = {",
          "19:   'body-byte-counts.tar': data,",
          "20:   'no-null-eof.tar': dataNoNulls,",
          "21:   'truncated-head.tar': Buffer.concat([dataNoNulls, data.slice(0, 500)]),",
          "22:   'truncated-body.tar': Buffer.concat([dataNoNulls, data.slice(0, 700)]),",
          "23:   'zero.tar': Buffer.from(''),",
          "24:   'empty.tar': Buffer.alloc(512),",
          "25:   'compressed.tgz': zlib.gzipSync(data),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     c.on('close', (code, signal) => {",
          "62:       t.equal(code, 0)",
          "63:       t.equal(signal, null)",
          "65:       t.same(actual, [",
          "66:         '1024-bytes.txt',",
          "67:         '512-bytes.txt',",
          "",
          "[Removed Lines]",
          "64:       const actual = Buffer.concat(out).toString().trim().split('\\n')",
          "",
          "[Added Lines]",
          "36:       const actual = Buffer.concat(out).toString().trim().split(/\\r?\\n/)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:     })",
          "74:   }",
          "84:         r({",
          "85:           sync: true,",
          "87:           cwd: __dirname,",
          "88:         }, fileList)",
          "90:       })",
          "93:         r({",
          "95:           cwd: __dirname,",
          "96:         }, fileList, er => {",
          "97:           if (er)",
          "98:             throw er",
          "100:         })",
          "101:       })",
          "104:         r({",
          "106:           cwd: __dirname,",
          "108:       })",
          "112:   })",
          "114:   t.end()",
          "115: })",
          "117: t.test('add to empty archive', t => {",
          "120:   const check = (file, t) => {",
          "121:     const c = spawn('tar', ['tf', file])",
          "122:     const out = []",
          "",
          "[Removed Lines]",
          "76:   ;[file,",
          "77:     fileNoNulls,",
          "78:     fileTruncHead,",
          "79:     fileTruncBody,",
          "80:   ].forEach(file => {",
          "81:     const fileList = [path.basename(__filename)]",
          "82:     t.test(path.basename(file), t => {",
          "83:       t.test('sync', t => {",
          "86:           file: file,",
          "89:         check(file, t)",
          "92:       t.test('async cb', t => {",
          "94:           file: file,",
          "99:           check(file, t)",
          "103:       t.test('async promise', t => {",
          "105:           file: file,",
          "107:         }, fileList).then(_ => check(file, t))",
          "110:       t.end()",
          "111:     })",
          "118:   t.beforeEach(reset)",
          "",
          "[Added Lines]",
          "48:   const files = [",
          "49:     'body-byte-counts.tar',",
          "50:     'no-null-eof.tar',",
          "51:     'truncated-head.tar',",
          "52:     'truncated-body.tar',",
          "53:   ]",
          "54:   const td = files.map(f => [f, fixtureDef[f]]).reduce((s, [k, v]) => {",
          "55:     s[k] = v",
          "56:     return s",
          "57:   }, {})",
          "58:   const fileList = [path.basename(__filename)]",
          "59:   t.test('sync', t => {",
          "60:     t.plan(files.length)",
          "61:     const dir = t.testdir(td)",
          "62:     for (const file of files) {",
          "63:       t.test(file, t => {",
          "66:           file: resolve(dir, file),",
          "69:         check(resolve(dir, file), t)",
          "71:     }",
          "72:   })",
          "74:   t.test('async cb', t => {",
          "75:     t.plan(files.length)",
          "76:     const dir = t.testdir(td)",
          "77:     for (const file of files) {",
          "78:       t.test(file, t => {",
          "80:           file: resolve(dir, file),",
          "85:           check(resolve(dir, file), t)",
          "88:     }",
          "89:   })",
          "91:   t.test('async', t => {",
          "92:     t.plan(files.length)",
          "93:     const dir = t.testdir(td)",
          "94:     for (const file of files) {",
          "95:       t.test(file, t => {",
          "97:           file: resolve(dir, file),",
          "99:         }, fileList).then(() => {",
          "100:           check(resolve(dir, file), t)",
          "101:         })",
          "103:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:     })",
          "133:   }",
          "141:         r({",
          "142:           sync: true,",
          "144:           cwd: __dirname,",
          "145:         }, [path.basename(__filename)])",
          "147:       })",
          "150:         r({",
          "152:           cwd: __dirname,",
          "153:         }, [path.basename(__filename)], er => {",
          "154:           if (er)",
          "155:             throw er",
          "157:         })",
          "158:       })",
          "161:         r({",
          "163:           cwd: __dirname,",
          "165:       })",
          "169:   })",
          "171:   t.end()",
          "172: })",
          "177:   const expect = new Error('cannot append to compressed archives')",
          "178:   const expectT = new TypeError('cannot append to compressed archives')",
          "180:   t.throws(_ => r({",
          "182:     cwd: __dirname,",
          "183:     gzip: true,",
          "184:   }, [path.basename(__filename)]), expectT)",
          "186:   t.throws(_ => r({",
          "188:     cwd: __dirname,",
          "189:     sync: true,",
          "190:   }, [path.basename(__filename)]), expect)",
          "194:     cwd: __dirname,",
          "199: })",
          "201: t.test('other throws', t => {",
          "",
          "[Removed Lines]",
          "135:   ;[fileNonExistent,",
          "136:     fileEmpty,",
          "137:     fileZeroByte,",
          "138:   ].forEach(file => {",
          "139:     t.test(path.basename(file), t => {",
          "140:       t.test('sync', t => {",
          "143:           file: file,",
          "146:         check(file, t)",
          "149:       t.test('async cb', t => {",
          "151:           file: file,",
          "156:           check(file, t)",
          "160:       t.test('async promise', t => {",
          "162:           file: file,",
          "164:         }, [path.basename(__filename)]).then(_ => check(file, t))",
          "167:       t.end()",
          "168:     })",
          "174: t.test('cannot append to gzipped archives', t => {",
          "175:   reset()",
          "181:     file: fileCompressed,",
          "187:     file: fileCompressed,",
          "192:   r({",
          "193:     file: fileCompressed,",
          "195:   }, [path.basename(__filename)], er => {",
          "196:     t.match(er, expect)",
          "197:     t.end()",
          "198:   })",
          "",
          "[Added Lines]",
          "125:   const files = [",
          "126:     'empty.tar',",
          "127:     'zero.tar',",
          "128:   ]",
          "129:   const td = files.map(f => [f, fixtureDef[f]]).reduce((s, [k, v]) => {",
          "130:     s[k] = v",
          "131:     return s",
          "132:   }, {})",
          "133:   files.push('not-existing.tar')",
          "135:   t.test('sync', t => {",
          "136:     const dir = t.testdir(td)",
          "137:     t.plan(files.length)",
          "138:     for (const file of files) {",
          "139:       t.test(file, t => {",
          "142:           file: resolve(dir, file),",
          "145:         check(resolve(dir, file), t)",
          "147:     }",
          "148:   })",
          "150:   t.test('async cb', t => {",
          "151:     const dir = t.testdir(td)",
          "152:     t.plan(files.length)",
          "153:     for (const file of files) {",
          "154:       t.test(file, t => {",
          "156:           file: resolve(dir, file),",
          "161:           check(resolve(dir, file), t)",
          "164:     }",
          "165:   })",
          "167:   t.test('async', async t => {",
          "168:     const dir = t.testdir(td)",
          "169:     t.plan(files.length)",
          "170:     for (const file of files) {",
          "171:       t.test(file, t => {",
          "173:           file: resolve(dir, file),",
          "175:         }, [path.basename(__filename)]).then(() => {",
          "176:           check(resolve(dir, file), t)",
          "177:         })",
          "179:     }",
          "185: t.test('cannot append to gzipped archives', async t => {",
          "186:   const dir = t.testdir({",
          "187:     'compressed.tgz': fixtureDef['compressed.tgz'],",
          "188:   })",
          "189:   const file = resolve(dir, 'compressed.tgz')",
          "195:     file,",
          "201:     file,",
          "206:   return r({",
          "207:     file,",
          "209:   }, [path.basename(__filename)], er => t.match(er, expect))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "206: })",
          "208: t.test('broken open', t => {",
          "209:   const poop = new Error('poop')",
          "210:   t.teardown(mutateFS.fail('open', poop))",
          "213:     t.match(er, poop)",
          "214:     t.end()",
          "215:   })",
          "216: })",
          "218: t.test('broken fstat', t => {",
          "219:   const poop = new Error('poop')",
          "224:     t.end()",
          "225:   })",
          "226: })",
          "228: t.test('broken read', t => {",
          "229:   const poop = new Error('poop')",
          "230:   t.teardown(mutateFS.fail('read', poop))",
          "233:     t.match(er, poop)",
          "234:     t.end()",
          "235:   })",
          "236: })",
          "241:   let mtimeCache",
          "",
          "[Removed Lines]",
          "211:   t.throws(_ => r({ sync: true, file: file }, ['README.md']), poop)",
          "212:   r({ file: file }, ['README.md'], er => {",
          "220:   t.teardown(mutateFS.fail('fstat', poop))",
          "221:   t.throws(_ => r({ sync: true, file: file }, ['README.md']), poop)",
          "222:   r({ file: file }, ['README.md'], er => {",
          "223:     t.match(er, poop)",
          "231:   t.throws(_ => r({ sync: true, file: file }, ['README.md']), poop)",
          "232:   r({ file: file }, ['README.md'], er => {",
          "238: t.test('mtime cache', t => {",
          "239:   t.beforeEach(reset)",
          "",
          "[Added Lines]",
          "220:   const dir = t.testdir({",
          "221:     'body-byte-counts.tar': fixtureDef['body-byte-counts.tar'],",
          "222:   })",
          "223:   const file = resolve(dir, 'body-byte-counts.tar')",
          "226:   t.throws(_ => r({ sync: true, file }, ['README.md']), poop)",
          "227:   r({ file }, ['README.md'], er => {",
          "234:   const td = {",
          "235:     'body-byte-counts.tar': fixtureDef['body-byte-counts.tar'],",
          "236:   }",
          "238:   t.test('sync', t => {",
          "239:     const dir = t.testdir(td)",
          "240:     const file = resolve(dir, 'body-byte-counts.tar')",
          "241:     t.teardown(mutateFS.fail('fstat', poop))",
          "242:     t.throws(_ => r({ sync: true, file }, ['README.md']), poop)",
          "245:   t.test('async', t => {",
          "246:     const dir = t.testdir(td)",
          "247:     const file = resolve(dir, 'body-byte-counts.tar')",
          "248:     t.teardown(mutateFS.fail('fstat', poop))",
          "249:     r({ file }, ['README.md'], async er => {",
          "250:       t.match(er, poop)",
          "251:       t.end()",
          "252:     })",
          "253:   })",
          "254:   t.end()",
          "258:   const dir = t.testdir({",
          "259:     'body-byte-counts.tar': fixtureDef['body-byte-counts.tar'],",
          "260:   })",
          "261:   const file = resolve(dir, 'body-byte-counts.tar')",
          "264:   t.throws(_ => r({ sync: true, file }, ['README.md']), poop)",
          "265:   r({ file }, ['README.md'], er => {",
          "271: t.test('mtime cache', async t => {",
          "272:   const td = {",
          "273:     'body-byte-counts.tar': fixtureDef['body-byte-counts.tar'],",
          "274:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "247:     c.on('close', (code, signal) => {",
          "248:       t.equal(code, 0)",
          "249:       t.equal(signal, null)",
          "251:       t.same(actual, [",
          "252:         '1024-bytes.txt',",
          "253:         '512-bytes.txt',",
          "",
          "[Removed Lines]",
          "250:       const actual = Buffer.concat(out).toString().trim().split('\\n')",
          "",
          "[Added Lines]",
          "285:       const actual = Buffer.concat(out).toString().trim().split(/\\r?\\n/)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "268:   }",
          "270:   t.test('sync', t => {",
          "271:     r({",
          "272:       sync: true,",
          "274:       cwd: __dirname,",
          "275:       mtimeCache: mtimeCache = new Map(),",
          "276:     }, [path.basename(__filename)])",
          "",
          "[Removed Lines]",
          "273:       file: file,",
          "",
          "[Added Lines]",
          "306:     const dir = t.testdir(td)",
          "307:     const file = resolve(dir, 'body-byte-counts.tar')",
          "310:       file,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278:   })",
          "280:   t.test('async cb', t => {",
          "281:     r({",
          "283:       cwd: __dirname,",
          "284:       mtimeCache: mtimeCache = new Map(),",
          "285:     }, [path.basename(__filename)], er => {",
          "",
          "[Removed Lines]",
          "282:       file: file,",
          "",
          "[Added Lines]",
          "318:     const dir = t.testdir(td)",
          "319:     const file = resolve(dir, 'body-byte-counts.tar')",
          "321:       file,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "290:   })",
          "292:   t.test('async promise', t => {",
          "293:     r({",
          "295:       cwd: __dirname,",
          "296:       mtimeCache: mtimeCache = new Map(),",
          "297:     }, [path.basename(__filename)]).then(_ => check(file, t))",
          "",
          "[Removed Lines]",
          "294:       file: file,",
          "",
          "[Added Lines]",
          "332:     const dir = t.testdir(td)",
          "333:     const file = resolve(dir, 'body-byte-counts.tar')",
          "335:       file,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "301: })",
          "303: t.test('create tarball out of another tarball', t => {",
          "311:     const expect = [",
          "312:       'dir/',",
          "313:       '\u03a9.txt',",
          "314:       '\ud83c\udf1f.txt',",
          "315:       'long-path/r/e/a/l/l/y/-/d/e/e/p/-/f/o/l/d/e/r/-/p/a/t/h/\u03a9.txt',",
          "316:     ]",
          "318:       sync: true,",
          "319:       onentry: entry => {",
          "320:         t.equal(entry.path, expect.shift())",
          "",
          "[Removed Lines]",
          "304:   const out = path.resolve(dir, 'out.tar')",
          "306:   t.beforeEach(() => {",
          "307:     fs.writeFileSync(out, fs.readFileSync(path.resolve(tars, 'dir.tar')))",
          "308:   })",
          "310:   const check = t => {",
          "317:     list({ f: out,",
          "",
          "[Added Lines]",
          "345:   const td = {",
          "346:     'out.tar': fs.readFileSync(path.resolve(tars, 'dir.tar')),",
          "347:   }",
          "349:   const check = (out, t) => {",
          "356:     list({",
          "357:       f: out,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "324:   }",
          "326:   t.test('sync', t => {",
          "327:     r({",
          "328:       f: out,",
          "329:       cwd: tars,",
          "330:       sync: true,",
          "331:     }, ['@utf8.tar'])",
          "333:   })",
          "335:   t.test('async', t => {",
          "336:     r({",
          "337:       f: out,",
          "338:       cwd: tars,",
          "340:   })",
          "342:   t.end()",
          "",
          "[Removed Lines]",
          "332:     check(t)",
          "339:     }, ['@utf8.tar'], _ => check(t))",
          "",
          "[Added Lines]",
          "367:     const dir = t.testdir(td)",
          "368:     const out = resolve(dir, 'out.tar')",
          "374:     check(out, t)",
          "375:   })",
          "377:   t.test('async cb', t => {",
          "378:     const dir = t.testdir(td)",
          "379:     const out = resolve(dir, 'out.tar')",
          "380:     r({",
          "381:       f: out,",
          "382:       cwd: tars,",
          "383:     }, ['@utf8.tar'], er => {",
          "384:       if (er)",
          "385:         throw er",
          "386:       check(out, t)",
          "387:     })",
          "391:     const dir = t.testdir(td)",
          "392:     const out = resolve(dir, 'out.tar')",
          "396:     }, ['@utf8.tar']).then(() => check(out, t))",
          "",
          "---------------"
        ],
        "test/unpack.js||test/unpack.js": [
          "File: test/unpack.js -> test/unpack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: const tars = path.resolve(fixtures, 'tars')",
          "17: const parses = path.resolve(fixtures, 'parse')",
          "18: const unpackdir = path.resolve(fixtures, 'unpack')",
          "20: const mkdirp = require('mkdirp')",
          "21: const mutateFS = require('mutate-fs')",
          "22: const eos = require('end-of-stream')",
          "30: })",
          "32: t.test('basic file unpack tests', t => {",
          "33:   const basedir = path.resolve(unpackdir, 'basic')",
          "36:   const cases = {",
          "37:     'emptypax.tar': {",
          "",
          "[Removed Lines]",
          "19: const rimraf = require('rimraf')",
          "24: t.teardown(_ => rimraf.sync(unpackdir))",
          "26: t.test('setup', t => {",
          "27:   rimraf.sync(unpackdir)",
          "28:   mkdirp.sync(unpackdir)",
          "29:   t.end()",
          "34:   t.teardown(_ => rimraf.sync(basedir))",
          "",
          "[Added Lines]",
          "19: const {promisify} = require('util')",
          "20: const rimraf = promisify(require('rimraf'))",
          "24: const normPath = require('../lib/normalize-windows-path.js')",
          "30: const isWindows = process.platform === 'win32'",
          "31: const isLongFile = f => f.match(/r.e.a.l.l.y.-.d.e.e.p.-.f.o.l.d.e.r.-.p.a.t.h/)",
          "33: t.teardown(_ => rimraf(unpackdir))",
          "35: t.before(async () => {",
          "36:   await rimraf(unpackdir)",
          "37:   await mkdirp(unpackdir)",
          "42:   t.teardown(_ => rimraf(basedir))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:       const tf = path.resolve(tars, tarfile)",
          "80:       const dir = path.resolve(basedir, tarfile)",
          "81:       const linkdir = path.resolve(basedir, tarfile + '.link')",
          "87:       })",
          "89:       const check = t => {",
          "90:         const expect = cases[tarfile]",
          "91:         Object.keys(expect).forEach(file => {",
          "92:           const f = path.resolve(dir, file)",
          "93:           t.equal(fs.readFileSync(f, 'utf8'), expect[file], file)",
          "94:         })",
          "95:         t.end()",
          "",
          "[Removed Lines]",
          "82:       t.beforeEach(() => {",
          "83:         rimraf.sync(dir)",
          "84:         rimraf.sync(linkdir)",
          "85:         mkdirp.sync(dir)",
          "86:         fs.symlinkSync(dir, linkdir)",
          "",
          "[Added Lines]",
          "90:       t.beforeEach(async () => {",
          "91:         await rimraf(dir)",
          "92:         await rimraf(linkdir)",
          "93:         await mkdirp(dir)",
          "94:         fs.symlinkSync(dir, linkdir, 'junction')",
          "101:           if (isWindows && isLongFile(file))",
          "102:             return",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131: t.test('cwd default to process cwd', t => {",
          "132:   const u = new Unpack()",
          "133:   const us = new UnpackSync()",
          "135:   t.equal(u.cwd, cwd)",
          "136:   t.equal(us.cwd, cwd)",
          "137:   t.end()",
          "",
          "[Removed Lines]",
          "134:   const cwd = process.cwd()",
          "",
          "[Added Lines]",
          "144:   const cwd = normPath(process.cwd())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:   const stripData = fs.readFileSync(tars + '/links-strip.tar')",
          "145:   t.plan(6)",
          "149:   const check = t => {",
          "150:     const hl1 = fs.lstatSync(dir + '/hardlink-1')",
          "",
          "[Removed Lines]",
          "146:   t.beforeEach(() => mkdirp.sync(dir))",
          "147:   t.afterEach(() => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "156:   t.beforeEach(() => mkdirp(dir))",
          "157:   t.afterEach(() => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:     t.equal(hl1.ino, hl2.ino)",
          "154:     t.equal(hl1.nlink, 2)",
          "155:     t.equal(hl2.nlink, 2)",
          "159:     t.end()",
          "160:   }",
          "161:   const checkForStrip = t => {",
          "",
          "[Removed Lines]",
          "156:     const sym = fs.lstatSync(dir + '/symlink')",
          "157:     t.ok(sym.isSymbolicLink())",
          "158:     t.equal(fs.readlinkSync(dir + '/symlink'), 'hardlink-2')",
          "",
          "[Added Lines]",
          "166:     if (!isWindows) {",
          "168:       const sym = fs.lstatSync(dir + '/symlink')",
          "169:       t.ok(sym.isSymbolicLink())",
          "170:       t.equal(fs.readlinkSync(dir + '/symlink'), 'hardlink-2')",
          "171:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "168:     t.equal(hl1.ino, hl3.ino)",
          "169:     t.equal(hl1.nlink, 3)",
          "170:     t.equal(hl2.nlink, 3)",
          "174:     t.end()",
          "175:   }",
          "176:   const checkForStrip3 = t => {",
          "",
          "[Removed Lines]",
          "171:     const sym = fs.lstatSync(dir + '/symlink')",
          "172:     t.ok(sym.isSymbolicLink())",
          "173:     t.equal(fs.readlinkSync(dir + '/symlink'), 'hardlink-2')",
          "",
          "[Added Lines]",
          "184:     if (!isWindows) {",
          "185:       const sym = fs.lstatSync(dir + '/symlink')",
          "186:       t.ok(sym.isSymbolicLink())",
          "187:       t.equal(fs.readlinkSync(dir + '/symlink'), 'hardlink-2')",
          "188:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "204:   t.test('sync strip', t => {",
          "205:     const unpack = new UnpackSync({ cwd: dir, strip: 1 })",
          "207:     checkForStrip(t)",
          "208:   })",
          "",
          "[Removed Lines]",
          "206:     unpack.end(fs.readFileSync(tars + '/links-strip.tar'))",
          "",
          "[Added Lines]",
          "222:     unpack.end(stripData)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "239:   t.plan(6)",
          "240:   mkdirp.sync(dir)",
          "243:   t.beforeEach(() => {",
          "",
          "[Removed Lines]",
          "241:   t.teardown(_ => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "257:   t.teardown(_ => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "256:     t.equal(hl1.ino, hl2.ino)",
          "257:     t.equal(hl1.nlink, 2)",
          "258:     t.equal(hl2.nlink, 2)",
          "262:     t.end()",
          "263:   }",
          "",
          "[Removed Lines]",
          "259:     const sym = fs.lstatSync(dir + '/symlink')",
          "260:     t.ok(sym.isSymbolicLink())",
          "261:     t.equal(fs.readlinkSync(dir + '/symlink'), 'hardlink-2')",
          "",
          "[Added Lines]",
          "275:     if (!isWindows) {",
          "276:       const sym = fs.lstatSync(dir + '/symlink')",
          "277:       t.ok(sym.isSymbolicLink())",
          "278:       t.equal(fs.readlinkSync(dir + '/symlink'), 'hardlink-2')",
          "279:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "306: t.test('nested dir dupe', t => {",
          "307:   const dir = path.resolve(unpackdir, 'nested-dir')",
          "308:   mkdirp.sync(dir + '/d/e/e/p')",
          "310:   const expect = {",
          "311:     'd/e/e/p/-/f/o/l/d/e/r/-/p/a/t/h/a.txt': 'short\\n',",
          "312:     'd/e/e/p/-/f/o/l/d/e/r/-/p/a/t/h/cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc': 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc',",
          "",
          "[Removed Lines]",
          "309:   t.teardown(_ => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "327:   t.teardown(_ => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "335:   zip.end(data)",
          "336: })",
          "339:   const dir = path.resolve(unpackdir, 'symlink-junk')",
          "345:   })",
          "347:   const data = makeTar([",
          "",
          "[Removed Lines]",
          "338: t.test('symlink in dir path', t => {",
          "341:   t.teardown(_ => rimraf.sync(dir))",
          "342:   t.beforeEach(() => {",
          "343:     rimraf.sync(dir)",
          "344:     mkdirp.sync(dir)",
          "",
          "[Added Lines]",
          "356: t.test('symlink in dir path', {",
          "357:   skip: isWindows && 'symlinks not fully supported',",
          "358: }, t => {",
          "361:   t.teardown(_ => rimraf(dir))",
          "362:   t.beforeEach(async () => {",
          "363:     await rimraf(dir)",
          "364:     await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "398:       onwarn: (c, w, d) => warnings.push([c, w, d]),",
          "399:     })",
          "400:     u.on('close', _ => {",
          "403:       t.ok(fs.lstatSync(dir + '/d/i/r/file').isFile(), 'got file')",
          "406:       t.equal(warnings[0][0], 'TAR_ENTRY_ERROR')",
          "413:       t.equal(warnings.length, 1)",
          "414:       t.end()",
          "415:     })",
          "",
          "[Removed Lines]",
          "401:       t.equal(fs.lstatSync(dir + '/d/i').mode & 0o7777, 0o755)",
          "402:       t.equal(fs.lstatSync(dir + '/d/i/r/dir').mode & 0o7777, 0o751)",
          "404:       t.ok(fs.lstatSync(dir + '/d/i/r/symlink').isSymbolicLink(), 'got symlink')",
          "405:       t.throws(_ => fs.statSync(dir + '/d/i/r/symlink/x'))",
          "407:       t.equal(warnings[0][1], 'Cannot extract through symbolic link')",
          "408:       t.match(warnings[0][2], {",
          "409:         name: 'SylinkError',",
          "410:         path: dir + '/d/i/r/symlink/',",
          "411:         symlink: dir + '/d/i/r/symlink',",
          "412:       })",
          "",
          "[Added Lines]",
          "421:       t.equal(fs.lstatSync(dir + '/d/i').mode & 0o7777, isWindows ? 0o666 : 0o755)",
          "422:       t.equal(fs.lstatSync(dir + '/d/i/r/dir').mode & 0o7777, isWindows ? 0o666 : 0o751)",
          "424:       if (!isWindows) {",
          "425:         t.ok(fs.lstatSync(dir + '/d/i/r/symlink').isSymbolicLink(), 'got symlink')",
          "426:         t.throws(_ => fs.statSync(dir + '/d/i/r/symlink/x'))",
          "427:       }",
          "429:       if (!isWindows) {",
          "430:         t.equal(warnings[0][1], 'Cannot extract through symbolic link')",
          "431:         t.match(warnings[0][2], {",
          "432:           name: 'SylinkError',",
          "433:           path: dir + '/d/i/r/symlink/',",
          "434:           symlink: dir + '/d/i/r/symlink',",
          "435:         })",
          "436:       }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "423:       onwarn: (c, w, d) => warnings.push([c, w, d]),",
          "424:     })",
          "425:     u.end(data)",
          "427:     t.ok(fs.lstatSync(dir + '/d/i/r/file').isFile(), 'got file')",
          "430:     t.equal(warnings.length, 1)",
          "431:     t.equal(warnings[0][0], 'TAR_ENTRY_ERROR')",
          "432:     t.equal(warnings[0][1], 'Cannot extract through symbolic link')",
          "",
          "[Removed Lines]",
          "426:     t.equal(fs.lstatSync(dir + '/d/i/r/dir').mode & 0o7777, 0o751)",
          "428:     t.ok(fs.lstatSync(dir + '/d/i/r/symlink').isSymbolicLink(), 'got symlink')",
          "429:     t.throws(_ => fs.statSync(dir + '/d/i/r/symlink/x'))",
          "",
          "[Added Lines]",
          "450:     t.equal(fs.lstatSync(dir + '/d/i/r/dir').mode & 0o7777, isWindows ? 0o666 : 0o751)",
          "452:     if (!isWindows) {",
          "453:       t.ok(fs.lstatSync(dir + '/d/i/r/symlink').isSymbolicLink(), 'got symlink')",
          "454:       t.throws(_ => fs.statSync(dir + '/d/i/r/symlink/x'))",
          "455:     }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "589: t.test('unsupported entries', t => {",
          "590:   const dir = path.resolve(unpackdir, 'unsupported-entries')",
          "591:   mkdirp.sync(dir)",
          "593:   const unknown = new Header({ path: 'qux', type: 'File', size: 4 })",
          "594:   unknown.type = 'Z'",
          "595:   unknown.encode()",
          "",
          "[Removed Lines]",
          "592:   t.teardown(_ => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "618:   t.teardown(_ => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "672: t.test('file in dir path', t => {",
          "673:   const dir = path.resolve(unpackdir, 'file-junk')",
          "679:   })",
          "681:   const data = makeTar([",
          "",
          "[Removed Lines]",
          "675:   t.teardown(_ => rimraf.sync(dir))",
          "676:   t.beforeEach(() => {",
          "677:     rimraf.sync(dir)",
          "678:     mkdirp.sync(dir)",
          "",
          "[Added Lines]",
          "701:   t.teardown(_ => rimraf(dir))",
          "702:   t.beforeEach(async () => {",
          "703:     await rimraf(dir)",
          "704:     await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "745: t.test('set umask option', t => {",
          "746:   const dir = path.resolve(unpackdir, 'umask')",
          "747:   mkdirp.sync(dir)",
          "750:   const data = makeTar([",
          "751:     {",
          "",
          "[Removed Lines]",
          "748:   t.teardown(_ => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "774:   t.teardown(_ => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "761:     umask: 0o027,",
          "762:     cwd: dir,",
          "763:   }).on('close', _ => {",
          "766:     t.end()",
          "767:   }).end(data)",
          "768: })",
          "770: t.test('absolute paths', t => {",
          "771:   const dir = path.join(unpackdir, 'absolute-paths')",
          "776:   })",
          "778:   const absolute = path.resolve(dir, 'd/i/r/absolute')",
          "",
          "[Removed Lines]",
          "764:     t.equal(fs.statSync(dir + '/d/i/r').mode & 0o7777, 0o750)",
          "765:     t.equal(fs.statSync(dir + '/d/i/r/dir').mode & 0o7777, 0o751)",
          "772:   t.teardown(_ => rimraf.sync(dir))",
          "773:   t.beforeEach(() => {",
          "774:     rimraf.sync(dir)",
          "775:     mkdirp.sync(dir)",
          "",
          "[Added Lines]",
          "790:     t.equal(fs.statSync(dir + '/d/i/r').mode & 0o7777, isWindows ? 0o666 : 0o750)",
          "791:     t.equal(fs.statSync(dir + '/d/i/r/dir').mode & 0o7777, isWindows ? 0o666 : 0o751)",
          "798:   t.teardown(_ => rimraf(dir))",
          "799:   t.beforeEach(async () => {",
          "800:     await rimraf(dir)",
          "801:     await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "801:   t.test('warn and correct', t => {",
          "802:     const check = t => {",
          "803:       t.match(warnings, [[",
          "806:       ]])",
          "807:       t.ok(fs.lstatSync(path.resolve(dir, relative)).isFile(), 'is file')",
          "808:       t.end()",
          "",
          "[Removed Lines]",
          "804:         `stripping ${root}${root}${root}${root} from absolute path`,",
          "805:         { path: absolute, code: 'TAR_ENTRY_INFO' },",
          "",
          "[Added Lines]",
          "829:       const r = normPath(root)",
          "831:         `stripping ${r}${r}${r}${r} from absolute path`,",
          "832:         { path: normPath(absolute), code: 'TAR_ENTRY_INFO' },",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "831:   })",
          "833:   t.test('preserve absolute path', t => {",
          "834:     const check = t => {",
          "835:       t.same(warnings, [])",
          "836:       t.ok(fs.lstatSync(absolute).isFile(), 'is file')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "864:     const data = makeTar([",
          "865:       {",
          "866:         path: isWindows ? absolute : extraAbsolute,",
          "867:         type: 'File',",
          "868:         size: 1,",
          "869:         atime: new Date('1979-07-01T19:10:00.000Z'),",
          "870:         ctime: new Date('2011-03-27T22:16:31.000Z'),",
          "871:         mtime: new Date('2011-03-27T22:16:31.000Z'),",
          "872:       },",
          "873:       'a',",
          "874:       '',",
          "875:       '',",
          "876:     ])",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "867: t.test('.. paths', t => {",
          "868:   const dir = path.join(unpackdir, 'dotted-paths')",
          "873:   })",
          "875:   const fmode = 0o755",
          "",
          "[Removed Lines]",
          "869:   t.teardown(_ => rimraf.sync(dir))",
          "870:   t.beforeEach(() => {",
          "871:     rimraf.sync(dir)",
          "872:     mkdirp.sync(dir)",
          "",
          "[Added Lines]",
          "912:   t.teardown(_ => rimraf(dir))",
          "913:   t.beforeEach(async () => {",
          "914:     await rimraf(dir)",
          "915:     await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "928:     const check = t => {",
          "929:       t.same(warnings, [])",
          "930:       t.ok(fs.lstatSync(resolved).isFile(), 'is file')",
          "932:       t.end()",
          "933:     }",
          "",
          "[Removed Lines]",
          "931:       t.equal(fs.lstatSync(resolved).mode & 0o777, fmode, 'mode is 0755')",
          "",
          "[Added Lines]",
          "974:       t.equal(fs.lstatSync(resolved).mode & 0o777, isWindows ? 0o666 : fmode)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "964: t.test('fail all stats', t => {",
          "965:   const poop = new Error('poop')",
          "966:   poop.code = 'EPOOP'",
          "970:   const warnings = []",
          "971:   t.beforeEach(() => {",
          "972:     warnings.length = 0",
          "973:     mkdirp.sync(dir)",
          "975:   })",
          "977:     unmutate()",
          "979:   })",
          "981:   const data = makeTar([",
          "",
          "[Removed Lines]",
          "967:   let unmutate",
          "968:   const dir = path.join(unpackdir, 'stat-fail')",
          "974:     unmutate = mutateFS.statFail(poop)",
          "976:   t.afterEach(() => {",
          "978:     rimraf.sync(dir)",
          "",
          "[Added Lines]",
          "1010:   const dir = normPath(path.join(unpackdir, 'stat-fail'))",
          "1011:   const {",
          "1012:     stat,",
          "1013:     fstat,",
          "1014:     lstat,",
          "1015:     statSync,",
          "1016:     fstatSync,",
          "1017:     lstatSync,",
          "1018:   } = fs",
          "1019:   const unmutate = () => Object.assign(fs, {",
          "1020:     stat,",
          "1021:     fstat,",
          "1022:     lstat,",
          "1023:     statSync,",
          "1024:     fstatSync,",
          "1025:     lstatSync,",
          "1026:   })",
          "1027:   const mutate = () => {",
          "1028:     fs.stat = fs.lstat = fs.fstat = (...args) => {",
          "1030:       if (normPath(args[0]) === dir)",
          "1031:         return lstat(dir, args.pop())",
          "1032:       process.nextTick(() => args.pop()(poop))",
          "1033:     }",
          "1034:     fs.statSync = fs.lstatSync = fs.fstatSync = (...args) => {",
          "1035:       if (normPath(args[0]) === dir)",
          "1036:         return lstatSync(dir)",
          "1037:       throw poop",
          "1038:     }",
          "1039:   }",
          "1045:     mutate()",
          "1047:   t.afterEach(async () => {",
          "1049:     await rimraf(dir)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1046:         String,",
          "1047:         {",
          "1048:           code: 'EISDIR',",
          "1050:           syscall: 'open',",
          "1051:         },",
          "1052:       ],",
          "1053:       [",
          "1054:         String,",
          "1055:         {",
          "1058:           syscall: 'link',",
          "1059:         },",
          "1060:       ],",
          "",
          "[Removed Lines]",
          "1049:           path: path.resolve(dir, 'd/i/r/file'),",
          "1056:           dest: path.resolve(dir, 'd/i/r/link'),",
          "1057:           path: path.resolve(dir, 'd/i/r/file'),",
          "",
          "[Added Lines]",
          "1120:           path: normPath(path.resolve(dir, 'd/i/r/file')),",
          "1127:           dest: normPath(path.resolve(dir, 'd/i/r/link')),",
          "1128:           path: normPath(path.resolve(dir, 'd/i/r/file')),",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1074:   poop.code = 'EPOOP'",
          "1075:   const unmutate = mutateFS.fail('symlink', poop)",
          "1076:   const dir = path.join(unpackdir, 'symlink-fail')",
          "1079:   const warnings = []",
          "1081:     warnings.length = 0",
          "1084:   })",
          "1086:   const data = makeTar([",
          "",
          "[Removed Lines]",
          "1077:   t.teardown(_ => (unmutate(), rimraf.sync(dir)))",
          "1080:   t.beforeEach(() => {",
          "1082:     rimraf.sync(dir)",
          "1083:     mkdirp.sync(dir)",
          "",
          "[Added Lines]",
          "1148:   t.teardown(async _ => {",
          "1149:     unmutate()",
          "1150:     await rimraf(dir)",
          "1151:   })",
          "1154:   t.beforeEach(async () => {",
          "1156:     await rimraf(dir)",
          "1157:     await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1135:   poop.code = 'EPOOP'",
          "1136:   const unmutate = mutateFS.fail('chmod', poop)",
          "1137:   const dir = path.join(unpackdir, 'chmod-fail')",
          "1140:   const warnings = []",
          "1142:     warnings.length = 0",
          "1145:   })",
          "1147:   const data = makeTar([",
          "",
          "[Removed Lines]",
          "1138:   t.teardown(_ => (unmutate(), rimraf.sync(dir)))",
          "1141:   t.beforeEach(() => {",
          "1143:     rimraf.sync(dir)",
          "1144:     mkdirp.sync(dir)",
          "",
          "[Added Lines]",
          "1212:   t.teardown(async _ => {",
          "1213:     unmutate()",
          "1214:     await rimraf(dir)",
          "1215:   })",
          "1218:   t.beforeEach(async () => {",
          "1220:     await rimraf(dir)",
          "1221:     await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1195:   poop.code = 'EPOOP'",
          "1196:   let unmutate",
          "1197:   const dir = path.join(unpackdir, 'mkdir-fail')",
          "1200:   const warnings = []",
          "1202:     warnings.length = 0",
          "1205:     unmutate = mutateFS.fail('mkdir', poop)",
          "1206:   })",
          "1207:   t.afterEach(() => unmutate())",
          "",
          "[Removed Lines]",
          "1198:   t.teardown(_ => rimraf.sync(dir))",
          "1201:   t.beforeEach(() => {",
          "1203:     rimraf.sync(dir)",
          "1204:     mkdirp.sync(dir)",
          "",
          "[Added Lines]",
          "1275:   t.teardown(_ => rimraf(dir))",
          "1278:   t.beforeEach(async () => {",
          "1280:     await rimraf(dir)",
          "1281:     await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1220:   ])",
          "1222:   const expect = [[",
          "1225:     {",
          "1226:       code: 'ENOENT',",
          "1227:       syscall: 'lstat',",
          "1229:     },",
          "1230:   ]]",
          "",
          "[Removed Lines]",
          "1223:     'ENOENT: no such file or directory, lstat \\'' +",
          "1224:     path.resolve(dir, 'dir') + '\\'',",
          "1228:       path: path.resolve(dir, 'dir'),",
          "",
          "[Added Lines]",
          "1300:     'ENOENT: no such file or directory',",
          "1304:       path: normPath(path.resolve(dir, 'dir')),",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1235:     t.end()",
          "1236:   }",
          "1245:   t.test('sync', t => {",
          "1246:     new UnpackSync({",
          "1247:       cwd: dir,",
          "",
          "[Removed Lines]",
          "1238:   t.test('async', t => {",
          "1239:     new Unpack({",
          "1240:       cwd: dir,",
          "1241:       onwarn: (c, w, d) => warnings.push([w, d]),",
          "1242:     }).on('close', _ => check(t)).end(data)",
          "1243:   })",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1250:     check(t)",
          "1251:   })",
          "1253:   t.end()",
          "1254: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1322:   t.test('async', t => {",
          "1323:     new Unpack({",
          "1324:       cwd: dir,",
          "1325:       onwarn: (c, w, d) => warnings.push([w, d]),",
          "1326:     }).on('close', _ => check(t)).end(data)",
          "1327:   })",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1258:   poop.code = 'EPOOP'",
          "1259:   const unmutate = mutateFS.fail('write', poop)",
          "1260:   const dir = path.join(unpackdir, 'write-fail')",
          "1263:   const warnings = []",
          "1265:     warnings.length = 0",
          "1268:   })",
          "1270:   const data = makeTar([",
          "",
          "[Removed Lines]",
          "1261:   t.teardown(_ => (unmutate(), rimraf.sync(dir)))",
          "1264:   t.beforeEach(() => {",
          "1266:     rimraf.sync(dir)",
          "1267:     mkdirp.sync(dir)",
          "",
          "[Added Lines]",
          "1337:   t.teardown(async _ => {",
          "1338:     unmutate()",
          "1339:     await rimraf(dir)",
          "1340:   })",
          "1343:   t.beforeEach(async () => {",
          "1345:     await rimraf(dir)",
          "1346:     await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1309: t.test('skip existing', t => {",
          "1310:   const dir = path.join(unpackdir, 'skip-newer')",
          "1313:   const date = new Date('2011-03-27T22:16:31.000Z')",
          "1317:     fs.writeFileSync(dir + '/x', 'y')",
          "1318:     fs.utimesSync(dir + '/x', date, date)",
          "1319:   })",
          "",
          "[Removed Lines]",
          "1311:   t.teardown(_ => rimraf.sync(dir))",
          "1314:   t.beforeEach(() => {",
          "1315:     rimraf.sync(dir)",
          "1316:     mkdirp.sync(dir)",
          "",
          "[Added Lines]",
          "1390:   t.teardown(_ => rimraf(dir))",
          "1393:   t.beforeEach(async () => {",
          "1394:     await rimraf(dir)",
          "1395:     await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1361: t.test('skip newer', t => {",
          "1362:   const dir = path.join(unpackdir, 'skip-newer')",
          "1365:   const date = new Date('2013-12-19T17:00:00.000Z')",
          "1369:     fs.writeFileSync(dir + '/x', 'y')",
          "1370:     fs.utimesSync(dir + '/x', date, date)",
          "1371:   })",
          "",
          "[Removed Lines]",
          "1363:   t.teardown(_ => rimraf.sync(dir))",
          "1366:   t.beforeEach(() => {",
          "1367:     rimraf.sync(dir)",
          "1368:     mkdirp.sync(dir)",
          "",
          "[Added Lines]",
          "1442:   t.teardown(_ => rimraf(dir))",
          "1445:   t.beforeEach(async () => {",
          "1446:     await rimraf(dir)",
          "1447:     await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1413: t.test('no mtime', t => {",
          "1414:   const dir = path.join(unpackdir, 'skip-newer')",
          "1420:   })",
          "1422:   const date = new Date('2011-03-27T22:16:31.000Z')",
          "",
          "[Removed Lines]",
          "1415:   t.teardown(_ => rimraf.sync(dir))",
          "1417:   t.beforeEach(() => {",
          "1418:     rimraf.sync(dir)",
          "1419:     mkdirp.sync(dir)",
          "",
          "[Added Lines]",
          "1494:   t.teardown(_ => rimraf(dir))",
          "1496:   t.beforeEach(async () => {",
          "1497:     await rimraf(dir)",
          "1498:     await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1477: t.test('unpack big enough to pause/drain', t => {",
          "1478:   const dir = path.resolve(unpackdir, 'drain-clog')",
          "1479:   mkdirp.sync(dir)",
          "1481:   const stream = fs.createReadStream(fixtures + '/parses.tar')",
          "1482:   const u = new Unpack({",
          "1483:     cwd: dir,",
          "",
          "[Removed Lines]",
          "1480:   t.teardown(_ => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "1559:   t.teardown(_ => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1600:     const unl = mutateFS.fail('lchown', poop)",
          "1601:     const unf = mutateFS.fail('fchown', poop)",
          "1605:     t.test('sync', t => {",
          "1606:       mkdirp.sync(dir)",
          "1608:       let warned = false",
          "1609:       const u = new Unpack.Sync({",
          "1610:         cwd: dir,",
          "",
          "[Removed Lines]",
          "1603:     t.teardown(_ => (un(), unf(), unl()))",
          "1607:       t.teardown(_ => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "1682:     t.teardown(async () => {",
          "1683:       un()",
          "1684:       unf()",
          "1685:       unl()",
          "1686:       await rimraf(dir)",
          "1687:     })",
          "1691:       t.teardown(_ => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1623:     t.test('async', t => {",
          "1624:       mkdirp.sync(dir)",
          "1626:       let warned = false",
          "1627:       const u = new Unpack({",
          "1628:         cwd: dir,",
          "",
          "[Removed Lines]",
          "1625:       t.teardown(_ => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "1709:       t.teardown(_ => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1638:       u.end(data)",
          "1639:     })",
          "1646:     t.end()",
          "1647:   })",
          "",
          "[Removed Lines]",
          "1641:     t.test('cleanup', t => {",
          "1642:       rimraf.sync(dir)",
          "1643:       t.end()",
          "1644:     })",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1673:     t.test('sync', t => {",
          "1674:       mkdirp.sync(dir)",
          "1676:       called = 0",
          "1677:       const u = new Unpack.Sync({ cwd: dir, preserveOwner: true })",
          "1678:       u.end(data)",
          "",
          "[Removed Lines]",
          "1675:       t.teardown(_ => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "1754:       t.teardown(_ => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1683:     t.test('async', t => {",
          "1684:       mkdirp.sync(dir)",
          "1686:       called = 0",
          "1687:       const u = new Unpack({ cwd: dir, preserveOwner: true })",
          "1688:       u.end(data)",
          "",
          "[Removed Lines]",
          "1685:       t.teardown(_ => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "1764:       t.teardown(_ => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1701:     const un = mutateFS.fail('chown', poop)",
          "1702:     const unf = mutateFS.fail('fchown', poop)",
          "1703:     const unl = mutateFS.fail('lchown', poop)",
          "1706:       un()",
          "1707:       unf()",
          "1708:       unl()",
          "1709:     })",
          "1714:     const check = t => {",
          "1715:       const dirStat = fs.statSync(dir + '/foo')",
          "",
          "[Removed Lines]",
          "1704:     t.teardown(_ => {",
          "1705:       rimraf.sync(dir)",
          "1711:     t.beforeEach(() => mkdirp.sync(dir))",
          "1712:     t.afterEach(() => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "1783:     t.teardown(async _ => {",
          "1787:       await rimraf(dir)",
          "1790:     t.beforeEach(() => mkdirp(dir))",
          "1791:     t.afterEach(() => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1761:   ])",
          "1763:   const dir = path.resolve(unpackdir, 'nowrite-dir')",
          "1767:   const check = t => {",
          "1769:     t.equal(fs.readFileSync(dir + '/a/b', 'utf8'), 'a')",
          "1770:     t.end()",
          "1771:   }",
          "",
          "[Removed Lines]",
          "1764:   t.beforeEach(() => mkdirp.sync(dir))",
          "1765:   t.afterEach(() => rimraf.sync(dir))",
          "1768:     t.equal(fs.statSync(dir + '/a').mode & 0o7777, 0o744)",
          "",
          "[Added Lines]",
          "1843:   t.beforeEach(() => mkdirp(dir))",
          "1844:   t.afterEach(() => rimraf(dir))",
          "1847:     t.equal(fs.statSync(dir + '/a').mode & 0o7777, isWindows ? 0o666 : 0o744)",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1798:   ])",
          "1800:   const dir = path.resolve(unpackdir, 'winchars')",
          "1804:   const hex = 'ef80bcef81bcef80beef80bfef80ba2e747874'",
          "1805:   const uglyName = Buffer.from(hex, 'hex').toString()",
          "",
          "[Removed Lines]",
          "1801:   t.beforeEach(() => mkdirp.sync(dir))",
          "1802:   t.afterEach(() => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "1880:   t.beforeEach(() => mkdirp(dir))",
          "1881:   t.afterEach(() => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1879:     '',",
          "1880:   ])",
          "1883:     const st = fs.statSync(basedir + '/x/y/z')",
          "1886:     t.end()",
          "1887:   }",
          "",
          "[Removed Lines]",
          "1882:   const check = t => {",
          "1884:     t.equal(st.mode & 0o777, 0o775)",
          "1885:     rimraf.sync(basedir)",
          "",
          "[Added Lines]",
          "1961:   const check = async t => {",
          "1963:     t.equal(st.mode & 0o777, isWindows ? 0o666 : 0o775)",
          "1964:     await rimraf(basedir)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1921:     '',",
          "1922:   ])",
          "1925:     const st = fs.statSync(basedir + '/x/y/z')",
          "1928:     t.end()",
          "1929:   }",
          "",
          "[Removed Lines]",
          "1924:   const check = t => {",
          "1926:     t.equal(st.mode & 0o777, 0o755)",
          "1927:     rimraf.sync(basedir)",
          "",
          "[Added Lines]",
          "2003:   const check = async t => {",
          "2005:     t.equal(st.mode & 0o777, isWindows ? 0o666 : 0o755)",
          "2006:     await rimraf(basedir)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2005:     '',",
          "2006:   ])",
          "2009:     currentTest = null",
          "2010:     t.equal(chowns, 8)",
          "2011:     chowns = 0",
          "2013:     t.end()",
          "2014:   }",
          "",
          "[Removed Lines]",
          "2008:   const check = t => {",
          "2012:     rimraf.sync(basedir)",
          "",
          "[Added Lines]",
          "2087:   const check = async t => {",
          "2091:     await rimraf(basedir)",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2059: t.test('bad cwd setting', t => {",
          "2060:   const basedir = path.resolve(unpackdir, 'bad-cwd')",
          "2061:   mkdirp.sync(basedir)",
          "2064:   const cases = [",
          "",
          "[Removed Lines]",
          "2062:   t.teardown(_ => rimraf.sync(basedir))",
          "",
          "[Added Lines]",
          "2141:   t.teardown(_ => rimraf(basedir))",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2102:       t.throws(_ => new Unpack.Sync(opt).end(data), {",
          "2103:         name: 'CwdError',",
          "2106:         code: 'ENOTDIR',",
          "2107:       })",
          "2109:       new Unpack(opt).on('error', er => {",
          "2110:         t.match(er, {",
          "2111:           name: 'CwdError',",
          "2114:           code: 'ENOTDIR',",
          "2115:         })",
          "2116:         t.end()",
          "",
          "[Removed Lines]",
          "2104:         message: 'ENOTDIR: Cannot cd into \\'' + cwd + '\\'',",
          "2105:         path: cwd,",
          "2112:           message: 'ENOTDIR: Cannot cd into \\'' + cwd + '\\'',",
          "2113:           path: cwd,",
          "",
          "[Added Lines]",
          "2183:         message: 'ENOTDIR: Cannot cd into \\'' + normPath(cwd) + '\\'',",
          "2184:         path: normPath(cwd),",
          "2191:           message: 'ENOTDIR: Cannot cd into \\'' + normPath(cwd) + '\\'',",
          "2192:           path: normPath(cwd),",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2124:       t.throws(_ => new Unpack.Sync(opt).end(data), {",
          "2125:         name: 'CwdError',",
          "2128:         code: 'ENOENT',",
          "2129:       })",
          "2131:       new Unpack(opt).on('error', er => {",
          "2132:         t.match(er, {",
          "2133:           name: 'CwdError',",
          "2136:           code: 'ENOENT',",
          "2137:         })",
          "2138:         t.end()",
          "",
          "[Removed Lines]",
          "2126:         message: 'ENOENT: Cannot cd into \\'' + cwd + '\\'',",
          "2127:         path: cwd,",
          "2134:           message: 'ENOENT: Cannot cd into \\'' + cwd + '\\'',",
          "2135:           path: cwd,",
          "",
          "[Added Lines]",
          "2205:         message: 'ENOENT: Cannot cd into \\'' + normPath(cwd) + '\\'',",
          "2206:         path: normPath(cwd),",
          "2213:           message: 'ENOENT: Cannot cd into \\'' + normPath(cwd) + '\\'',",
          "2214:           path: normPath(cwd),",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2146: t.test('transform', t => {",
          "2147:   const basedir = path.resolve(unpackdir, 'transform')",
          "2150:   const cases = {",
          "2151:     'emptypax.tar': {",
          "",
          "[Removed Lines]",
          "2148:   t.teardown(_ => rimraf.sync(basedir))",
          "",
          "[Added Lines]",
          "2227:   t.teardown(_ => rimraf(basedir))",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2193:     t.test(tarfile, t => {",
          "2194:       const tf = path.resolve(tars, tarfile)",
          "2195:       const dir = path.resolve(basedir, tarfile)",
          "2199:       })",
          "2201:       const check = t => {",
          "",
          "[Removed Lines]",
          "2196:       t.beforeEach(() => {",
          "2197:         rimraf.sync(dir)",
          "2198:         mkdirp.sync(dir)",
          "",
          "[Added Lines]",
          "2275:       t.beforeEach(async () => {",
          "2276:         await rimraf(dir)",
          "2277:         await mkdirp(dir)",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2243: t.test('transform error', t => {",
          "2244:   const dir = path.resolve(unpackdir, 'transform-error')",
          "2245:   mkdirp.sync(dir)",
          "2248:   const tarfile = path.resolve(tars, 'body-byte-counts.tar')",
          "2249:   const tardata = fs.readFileSync(tarfile)",
          "",
          "[Removed Lines]",
          "2246:   t.teardown(_ => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "2325:   t.teardown(_ => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2316:   const poop = new Error('poop')",
          "2317:   const second = new Error('second error')",
          "2327:   const methods = ['utimes', 'chown']",
          "2328:   methods.forEach(method => {",
          "",
          "[Removed Lines]",
          "2319:   const reset = () => {",
          "2320:     rimraf.sync(dir)",
          "2321:     mkdirp.sync(dir)",
          "2322:   }",
          "2324:   reset()",
          "2325:   t.teardown(() => rimraf.sync(dir))",
          "",
          "[Added Lines]",
          "2398:   t.beforeEach(async () => {",
          "2399:     await rimraf(dir)",
          "2400:     await mkdirp(dir)",
          "2401:   })",
          "2403:   t.teardown(() => rimraf(dir))",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2337:       t.test('async unpack', t => {",
          "2338:         t.plan(2)",
          "2339:         t.test('strict', t => {",
          "2341:           const unpack = new Unpack({ cwd: dir, strict: true, forceChown: fc })",
          "2342:           unpack.on('finish', t.end)",
          "2343:           unpack.end(tardata)",
          "2344:         })",
          "2345:         t.test('loose', t => {",
          "2347:           const unpack = new Unpack({ cwd: dir, forceChown: fc })",
          "2348:           unpack.on('finish', t.end)",
          "2349:           unpack.on('warn', t.fail)",
          "",
          "[Removed Lines]",
          "2340:           reset()",
          "2346:           reset()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2353:       t.test('sync unpack', t => {",
          "2354:         t.plan(2)",
          "2355:         t.test('strict', t => {",
          "2357:           const unpack = new Unpack.Sync({ cwd: dir, strict: true, forceChown: fc })",
          "2358:           unpack.end(tardata)",
          "2359:           t.end()",
          "2360:         })",
          "2361:         t.test('loose', t => {",
          "2363:           const unpack = new Unpack.Sync({ cwd: dir, forceChown: fc })",
          "2364:           unpack.on('warn', t.fail)",
          "2365:           unpack.end(tardata)",
          "",
          "[Removed Lines]",
          "2356:           reset()",
          "2362:           reset()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2379:       t.test('async unpack', t => {",
          "2380:         t.plan(2)",
          "2381:         t.test('strict', t => {",
          "2383:           const unpack = new Unpack({ cwd: dir, strict: true, forceChown: fc })",
          "2384:           t.plan(3)",
          "2385:           unpack.on('error', er => t.equal(er, poop))",
          "2386:           unpack.end(tardata)",
          "2387:         })",
          "2388:         t.test('loose', t => {",
          "2390:           const unpack = new Unpack({ cwd: dir, forceChown: fc })",
          "2391:           t.plan(3)",
          "2392:           unpack.on('warn', (code, m, er) => t.equal(er, poop))",
          "",
          "[Removed Lines]",
          "2382:           reset()",
          "2389:           reset()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2396:       t.test('sync unpack', t => {",
          "2397:         t.plan(2)",
          "2398:         t.test('strict', t => {",
          "2400:           const unpack = new Unpack.Sync({ cwd: dir, strict: true, forceChown: fc })",
          "2401:           t.plan(3)",
          "2402:           unpack.on('error', er => t.equal(er, poop))",
          "2403:           unpack.end(tardata)",
          "2404:         })",
          "2405:         t.test('loose', t => {",
          "2407:           const unpack = new Unpack.Sync({ cwd: dir, forceChown: fc })",
          "2408:           t.plan(3)",
          "2409:           unpack.on('warn', (c, m, er) => t.equal(er, poop))",
          "",
          "[Removed Lines]",
          "2399:           reset()",
          "2406:           reset()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2419: t.test('onentry option is preserved', t => {",
          "2420:   const basedir = path.resolve(unpackdir, 'onentry-method')",
          "2421:   mkdirp.sync(basedir)",
          "2424:   let oecalls = 0",
          "2425:   const onentry = entry => oecalls++",
          "",
          "[Removed Lines]",
          "2422:   t.teardown(() => rimraf.sync(basedir))",
          "",
          "[Added Lines]",
          "2492:   t.teardown(() => rimraf(basedir))",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2474: t.test('do not reuse hardlinks, only nlink=1 files', t => {",
          "2475:   const basedir = path.resolve(unpackdir, 'hardlink-reuse')",
          "2476:   mkdirp.sync(basedir)",
          "2479:   const now = new Date('2018-04-30T18:30:39.025Z')",
          "",
          "[Removed Lines]",
          "2477:   t.teardown(() => rimraf.sync(basedir))",
          "",
          "[Added Lines]",
          "2547:   t.teardown(() => rimraf(basedir))",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2545:       errno: Number,",
          "2546:       code: /^Z/,",
          "2547:       recoverable: false,",
          "2549:       tarCode: 'TAR_ABORT',",
          "2550:     }",
          "2551:     const opts = {",
          "",
          "[Removed Lines]",
          "2548:       cwd: basedir,",
          "",
          "[Added Lines]",
          "2618:       cwd: normPath(basedir),",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2580: t.test('handle errors on fs.close', t => {",
          "2581:   const poop = new Error('poop')",
          "2583:   const dir = path.resolve(unpackdir, 'close-fail')",
          "2584:   mkdirp.sync(dir + '/sync')",
          "2585:   mkdirp.sync(dir + '/async')",
          "",
          "[Removed Lines]",
          "2582:   t.teardown(mutateFS.fail('close', poop))",
          "",
          "[Added Lines]",
          "2652:   const { close, closeSync } = fs",
          "2654:   fs.close = (fd, cb) => close(fd, () => cb(poop))",
          "2655:   fs.closeSync = (fd) => {",
          "2656:     closeSync(fd)",
          "2657:     throw poop",
          "2658:   }",
          "2659:   t.teardown(() => Object.assign(fs, { close, closeSync }))",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2602:     .on('error', er => t.equal(er, poop, 'async'))",
          "2603:     .end(data)",
          "2604:   t.throws(() => new UnpackSync({",
          "2606:   }).end(data), poop, 'sync')",
          "2607: })",
          "2610:   const dir = path.resolve(unpackdir, 'dir-cache-error')",
          "2611:   mkdirp.sync(dir + '/sync/y')",
          "2612:   mkdirp.sync(dir + '/async/y')",
          "",
          "[Removed Lines]",
          "2605:     cwd: dir + '/sync', strict: true,",
          "2609: t.test('drop entry from dirCache if no longer a directory', t => {",
          "",
          "[Added Lines]",
          "2682:     cwd: normPath(dir + '/sync'), strict: true,",
          "2686: t.test('drop entry from dirCache if no longer a directory', {",
          "2687:   skip: isWindows && 'symlinks not fully supported',",
          "2688: }, t => {",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2679:       size: 'a'.length,",
          "2680:     },",
          "2681:     'a',",
          "2682:     '',",
          "2683:     '',",
          "2684:   ])",
          "2685:   t.plan(2)",
          "2686:   const check = (t, path) => {",
          "2687:     t.equal(fs.statSync(path).isDirectory(), true)",
          "2689:     t.throws(() => fs.statSync(path + '/top'), { code: 'ENOENT' })",
          "2690:     t.end()",
          "2691:   }",
          "",
          "[Removed Lines]",
          "2688:     t.equal(fs.lstatSync(path + '/a').isFile(), true)",
          "",
          "[Added Lines]",
          "2761:     {",
          "2762:       path: 'y',",
          "2763:       type: 'GNUDumpDir',",
          "2764:     },",
          "2765:     {",
          "2766:       path: 'y/b',",
          "2767:       type: 'File',",
          "2768:       size: 'b'.length,",
          "2769:     },",
          "2770:     'b',",
          "2777:     t.equal(fs.readFileSync(path + '/a', 'utf8'), 'a')",
          "2778:     t.equal(fs.readFileSync(path + '/b', 'utf8'), 'b')",
          "",
          "---------------"
        ],
        "test/update.js||test/update.js": [
          "File: test/update.js -> test/update.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: const u = require('../lib/update.js')",
          "4: const path = require('path')",
          "5: const fs = require('fs')",
          "8: const mutateFS = require('mutate-fs')",
          "10: const fixtures = path.resolve(__dirname, 'fixtures')",
          "12: const tars = path.resolve(fixtures, 'tars')",
          "21: const zlib = require('zlib')",
          "23: const spawn = require('child_process').spawn",
          "46: }",
          "53: t.test('basic file add to archive (good or truncated)', t => {",
          "56:   const check = (file, t) => {",
          "57:     const c = spawn('tar', ['tf', file])",
          "58:     const out = []",
          "",
          "[Removed Lines]",
          "6: const mkdirp = require('mkdirp')",
          "7: const rimraf = require('rimraf')",
          "11: const dir = path.resolve(fixtures, 'update')",
          "13: const file = dir + '/body-byte-counts.tar'",
          "14: const fileNoNulls = dir + '/no-null-eof.tar'",
          "15: const fileTruncHead = dir + '/truncated-head.tar'",
          "16: const fileTruncBody = dir + '/truncated-body.tar'",
          "17: const fileNonExistent = dir + '/does-not-exist.tar'",
          "18: const fileZeroByte = dir + '/zero.tar'",
          "19: const fileEmpty = dir + '/empty.tar'",
          "20: const fileCompressed = dir + '/compressed.tgz'",
          "25: t.teardown(_ => rimraf.sync(dir))",
          "27: const reset = () => {",
          "28:   rimraf.sync(dir)",
          "29:   mkdirp.sync(dir)",
          "30:   const data = fs.readFileSync(tars + '/body-byte-counts.tar')",
          "31:   fs.writeFileSync(file, data)",
          "33:   const dataNoNulls = data.slice(0, data.length - 1024)",
          "34:   fs.writeFileSync(fileNoNulls, dataNoNulls)",
          "36:   const dataTruncHead = Buffer.concat([dataNoNulls, data.slice(0, 500)])",
          "37:   fs.writeFileSync(fileTruncHead, dataTruncHead)",
          "39:   const dataTruncBody = Buffer.concat([dataNoNulls, data.slice(0, 700)])",
          "40:   fs.writeFileSync(fileTruncBody, dataTruncBody)",
          "42:   fs.writeFileSync(fileZeroByte, '')",
          "43:   fs.writeFileSync(fileEmpty, Buffer.alloc(1024))",
          "45:   fs.writeFileSync(fileCompressed, zlib.gzipSync(data))",
          "48: t.test('setup', t => {",
          "49:   reset()",
          "50:   t.end()",
          "51: })",
          "54:   t.beforeEach(reset)",
          "",
          "[Added Lines]",
          "8: const {resolve} = require('path')",
          "15: const data = fs.readFileSync(tars + '/body-byte-counts.tar')",
          "16: const dataNoNulls = data.slice(0, data.length - 1024)",
          "17: const fixtureDef = {",
          "18:   'body-byte-counts.tar': data,",
          "19:   'no-null-eof.tar': dataNoNulls,",
          "20:   'truncated-head.tar': Buffer.concat([dataNoNulls, data.slice(0, 500)]),",
          "21:   'truncated-body.tar': Buffer.concat([dataNoNulls, data.slice(0, 700)]),",
          "22:   'zero.tar': Buffer.from(''),",
          "23:   'empty.tar': Buffer.alloc(512),",
          "24:   'compressed.tgz': zlib.gzipSync(data),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     c.on('close', (code, signal) => {",
          "61:       t.equal(code, 0)",
          "62:       t.equal(signal, null)",
          "64:       t.same(actual, [",
          "65:         '1024-bytes.txt',",
          "66:         '512-bytes.txt',",
          "",
          "[Removed Lines]",
          "63:       const actual = Buffer.concat(out).toString().trim().split('\\n')",
          "",
          "[Added Lines]",
          "35:       const actual = Buffer.concat(out).toString().trim().split(/\\r?\\n/)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:     })",
          "73:   }",
          "83:         u({",
          "84:           sync: true,",
          "86:           cwd: __dirname,",
          "87:         }, fileList)",
          "89:       })",
          "92:         u({",
          "94:           cwd: __dirname,",
          "95:         }, fileList, er => {",
          "96:           if (er)",
          "97:             throw er",
          "99:         })",
          "100:       })",
          "103:         u({",
          "105:           cwd: __dirname,",
          "107:       })",
          "111:   })",
          "113:   t.end()",
          "114: })",
          "116: t.test('add to empty archive', t => {",
          "119:   const check = (file, t) => {",
          "120:     const c = spawn('tar', ['tf', file])",
          "121:     const out = []",
          "",
          "[Removed Lines]",
          "75:   ;[file,",
          "76:     fileNoNulls,",
          "77:     fileTruncHead,",
          "78:     fileTruncBody,",
          "79:   ].forEach(file => {",
          "80:     t.test(path.basename(file), t => {",
          "81:       const fileList = [path.basename(__filename)]",
          "82:       t.test('sync', t => {",
          "85:           file: file,",
          "88:         check(file, t)",
          "91:       t.test('async cb', t => {",
          "93:           file: file,",
          "98:           check(file, t)",
          "102:       t.test('async promise', t => {",
          "104:           file: file,",
          "106:         }, fileList).then(_ => check(file, t))",
          "109:       t.end()",
          "110:     })",
          "117:   t.beforeEach(reset)",
          "",
          "[Added Lines]",
          "47:   const files = [",
          "48:     'body-byte-counts.tar',",
          "49:     'no-null-eof.tar',",
          "50:     'truncated-head.tar',",
          "51:     'truncated-body.tar',",
          "52:   ]",
          "53:   const td = files.map(f => [f, fixtureDef[f]]).reduce((s, [k, v]) => {",
          "54:     s[k] = v",
          "55:     return s",
          "56:   }, {})",
          "57:   const fileList = [path.basename(__filename)]",
          "58:   t.test('sync', t => {",
          "59:     t.plan(files.length)",
          "60:     const dir = t.testdir(td)",
          "61:     for (const file of files) {",
          "62:       t.test(file, t => {",
          "65:           file: resolve(dir, file),",
          "68:         check(resolve(dir, file), t)",
          "70:     }",
          "71:   })",
          "73:   t.test('async cb', t => {",
          "74:     t.plan(files.length)",
          "75:     const dir = t.testdir(td)",
          "76:     for (const file of files) {",
          "77:       t.test(file, t => {",
          "79:           file: resolve(dir, file),",
          "84:           check(resolve(dir, file), t)",
          "87:     }",
          "88:   })",
          "90:   t.test('async', t => {",
          "91:     t.plan(files.length)",
          "92:     const dir = t.testdir(td)",
          "93:     for (const file of files) {",
          "94:       t.test(file, t => {",
          "96:           file: resolve(dir, file),",
          "98:         }, fileList).then(() => {",
          "99:           check(resolve(dir, file), t)",
          "100:         })",
          "102:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123:     c.on('close', (code, signal) => {",
          "124:       t.equal(code, 0)",
          "125:       t.equal(signal, null)",
          "127:       t.same(actual, [",
          "128:         path.basename(__filename),",
          "129:       ])",
          "",
          "[Removed Lines]",
          "126:       const actual = Buffer.concat(out).toString().trim().split('\\n')",
          "",
          "[Added Lines]",
          "116:       const actual = Buffer.concat(out).toString().trim().split(/\\r?\\n/)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131:     })",
          "132:   }",
          "141:         u({",
          "142:           sync: true,",
          "144:           cwd: __dirname,",
          "147:       })",
          "150:         u({",
          "152:           cwd: __dirname,",
          "154:           if (er)",
          "155:             throw er",
          "157:         })",
          "158:       })",
          "161:         u({",
          "163:           cwd: __dirname,",
          "165:       })",
          "169:   })",
          "171:   t.end()",
          "172: })",
          "174: t.test('cannot append to gzipped archives', t => {",
          "177:   const expect = new Error('cannot append to compressed archives')",
          "178:   const expectT = new TypeError('cannot append to compressed archives')",
          "180:   t.throws(_ => u({",
          "182:     cwd: __dirname,",
          "183:     gzip: true,",
          "184:   }, [path.basename(__filename)]), expectT)",
          "186:   t.throws(_ => u({",
          "188:     cwd: __dirname,",
          "189:     sync: true,",
          "190:   }, [path.basename(__filename)]), expect)",
          "192:   u({",
          "194:     cwd: __dirname,",
          "195:   }, [path.basename(__filename)], er => {",
          "196:     t.match(er, expect)",
          "",
          "[Removed Lines]",
          "134:   ;[fileNonExistent,",
          "135:     fileEmpty,",
          "136:     fileZeroByte,",
          "137:   ].forEach(file => {",
          "138:     t.test(path.basename(file), t => {",
          "139:       const fileList = [path.basename(__filename)]",
          "140:       t.test('sync', t => {",
          "143:           file: file,",
          "145:         }, fileList)",
          "146:         check(file, t)",
          "149:       t.test('async cb', t => {",
          "151:           file: file,",
          "153:         }, fileList, er => {",
          "156:           check(file, t)",
          "160:       t.test('async promise', t => {",
          "162:           file: file,",
          "164:         }, fileList).then(_ => check(file, t))",
          "167:       t.end()",
          "168:     })",
          "175:   reset()",
          "181:     file: fileCompressed,",
          "187:     file: fileCompressed,",
          "193:     file: fileCompressed,",
          "",
          "[Added Lines]",
          "124:   const files = [",
          "125:     'empty.tar',",
          "126:     'zero.tar',",
          "127:   ]",
          "128:   const td = files.map(f => [f, fixtureDef[f]]).reduce((s, [k, v]) => {",
          "129:     s[k] = v",
          "130:     return s",
          "131:   }, {})",
          "132:   files.push('not-existing.tar')",
          "134:   t.test('sync', t => {",
          "135:     const dir = t.testdir(td)",
          "136:     t.plan(files.length)",
          "137:     for (const file of files) {",
          "138:       t.test(file, t => {",
          "141:           file: resolve(dir, file),",
          "143:         }, [path.basename(__filename)])",
          "144:         check(resolve(dir, file), t)",
          "146:     }",
          "147:   })",
          "149:   t.test('async cb', t => {",
          "150:     const dir = t.testdir(td)",
          "151:     t.plan(files.length)",
          "152:     for (const file of files) {",
          "153:       t.test(file, t => {",
          "155:           file: resolve(dir, file),",
          "157:         }, [path.basename(__filename)], er => {",
          "160:           check(resolve(dir, file), t)",
          "163:     }",
          "164:   })",
          "166:   t.test('async', async t => {",
          "167:     const dir = t.testdir(td)",
          "168:     t.plan(files.length)",
          "169:     for (const file of files) {",
          "170:       t.test(file, t => {",
          "172:           file: resolve(dir, file),",
          "174:         }, [path.basename(__filename)]).then(() => {",
          "175:           check(resolve(dir, file), t)",
          "176:         })",
          "178:     }",
          "185:   const dir = t.testdir({",
          "186:     'compressed.tgz': fixtureDef['compressed.tgz'],",
          "187:   })",
          "188:   const file = resolve(dir, 'compressed.tgz')",
          "194:     file,",
          "200:     file,",
          "206:     file,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "206: })",
          "208: t.test('broken open', t => {",
          "209:   const poop = new Error('poop')",
          "210:   t.teardown(mutateFS.fail('open', poop))",
          "211:   t.throws(_ => u({ sync: true, file: file }, ['README.md']), poop)",
          "213:     t.match(er, poop)",
          "214:     t.end()",
          "215:   })",
          "216: })",
          "218: t.test('broken fstat', t => {",
          "219:   const poop = new Error('poop')",
          "224:     t.end()",
          "225:   })",
          "226: })",
          "228: t.test('broken read', t => {",
          "229:   const poop = new Error('poop')",
          "230:   t.teardown(mutateFS.fail('read', poop))",
          "233:     t.match(er, poop)",
          "234:     t.end()",
          "235:   })",
          "236: })",
          "238: t.test('do not add older file', t => {",
          "243:   const oldDate = new Date('1997-04-10T16:57:47.000Z')",
          "244:   fs.utimesSync(f, oldDate, oldDate)",
          "246:   const check = t => {",
          "248:     t.end()",
          "249:   }",
          "251:   t.test('sync', t => {",
          "253:     check(t)",
          "254:   })",
          "256:   t.test('async', t => {",
          "258:   })",
          "260:   t.end()",
          "261: })",
          "263: t.test('do add newer file', t => {",
          "269:     fs.utimesSync(f, newDate, newDate)",
          "274:     t.end()",
          "275:   }",
          "277:   t.test('sync', t => {",
          "278:     u({",
          "279:       mtimeCache: new Map(),",
          "281:       cwd: dir,",
          "282:       sync: true,",
          "283:       filter: path => path === '1024-bytes.txt',",
          "286:   })",
          "288:   t.test('async', t => {",
          "290:   })",
          "292:   t.end()",
          "",
          "[Removed Lines]",
          "212:   u({ file: file }, ['README.md'], er => {",
          "220:   t.teardown(mutateFS.fail('fstat', poop))",
          "221:   t.throws(_ => u({ sync: true, file: file }, ['README.md']), poop)",
          "222:   u({ file: file }, ['README.md'], er => {",
          "223:     t.match(er, poop)",
          "231:   t.throws(_ => u({ sync: true, file: file }, ['README.md']), poop)",
          "232:   u({ file: file }, ['README.md'], er => {",
          "239:   reset()",
          "241:   const f = dir + '/1024-bytes.txt'",
          "242:   fs.writeFileSync(f, new Array(1025).join('.'))",
          "247:     t.equal(fs.statSync(file).size, 5120)",
          "252:     u({ file: file, cwd: dir, sync: true }, ['1024-bytes.txt'])",
          "257:     u({ file: file, cwd: dir }, ['1024-bytes.txt']).then(_ => check(t))",
          "264:   t.beforeEach(() => {",
          "265:     reset()",
          "266:     const f = dir + '/1024-bytes.txt'",
          "267:     fs.writeFileSync(f, new Array(1025).join('.'))",
          "268:     const newDate = new Date('2017-05-01T22:06:43.736Z')",
          "270:   })",
          "272:   const check = t => {",
          "273:     t.equal(fs.statSync(file).size, 6656)",
          "280:       file: file,",
          "284:     }, ['1024-bytes.txt', 'compressed.tgz'])",
          "285:     check(t)",
          "289:     u({ file: file, cwd: dir }, ['1024-bytes.txt']).then(_ => check(t))",
          "",
          "[Added Lines]",
          "222:   const dir = t.testdir({",
          "223:     'body-byte-counts.tar': fixtureDef['body-byte-counts.tar'],",
          "224:   })",
          "225:   const file = resolve(dir, 'body-byte-counts.tar')",
          "229:   u({ file }, ['README.md'], er => {",
          "236:   const td = {",
          "237:     'body-byte-counts.tar': fixtureDef['body-byte-counts.tar'],",
          "238:   }",
          "240:   t.test('sync', t => {",
          "241:     const dir = t.testdir(td)",
          "242:     const file = resolve(dir, 'body-byte-counts.tar')",
          "243:     t.teardown(mutateFS.fail('fstat', poop))",
          "244:     t.throws(_ => u({ sync: true, file }, ['README.md']), poop)",
          "247:   t.test('async', t => {",
          "248:     const dir = t.testdir(td)",
          "249:     const file = resolve(dir, 'body-byte-counts.tar')",
          "250:     t.teardown(mutateFS.fail('fstat', poop))",
          "251:     u({ file }, ['README.md'], async er => {",
          "252:       t.match(er, poop)",
          "253:       t.end()",
          "254:     })",
          "255:   })",
          "256:   t.end()",
          "260:   const dir = t.testdir({",
          "261:     'body-byte-counts.tar': fixtureDef['body-byte-counts.tar'],",
          "262:   })",
          "263:   const file = resolve(dir, 'body-byte-counts.tar')",
          "266:   t.throws(_ => u({ sync: true, file }, ['README.md']), poop)",
          "267:   u({ file }, ['README.md'], er => {",
          "274:   const dir = t.testdir({",
          "275:     'body-byte-counts.tar': fixtureDef['body-byte-counts.tar'],",
          "276:     '1024-bytes.txt': '.'.repeat(1024),",
          "277:     foo: 'foo',",
          "278:   })",
          "279:   const file = resolve(dir, 'body-byte-counts.tar')",
          "281:   const f = resolve(dir, '1024-bytes.txt')",
          "286:   const expect = fixtureDef['body-byte-counts.tar'].length",
          "288:     t.equal(fs.statSync(file).size, expect)",
          "293:     u({",
          "294:       mtimeCache: new Map(),",
          "295:       file,",
          "296:       cwd: dir,",
          "297:       sync: true,",
          "298:       filter: path => path === '1024-bytes.txt',",
          "299:     }, ['1024-bytes.txt', 'foo'])",
          "304:     u({ file, cwd: dir }, ['1024-bytes.txt']).then(_ => check(t))",
          "305:   })",
          "307:   t.test('async cb', t => {",
          "308:     u({ file, cwd: dir }, ['1024-bytes.txt'], er => {",
          "309:       if (er)",
          "310:         throw er",
          "311:       check(t)",
          "312:     })",
          "319:   const setup = t => {",
          "320:     const dir = t.testdir({",
          "321:       'body-byte-counts.tar': fixtureDef['body-byte-counts.tar'],",
          "322:       '1024-bytes.txt': '.'.repeat(1024),",
          "323:       foo: 'foo',",
          "324:     })",
          "326:     const f = resolve(dir, '1024-bytes.txt')",
          "327:     const newDate = new Date(Date.now() + 24 * 60 * 60 * 1000)",
          "329:     return dir",
          "330:   }",
          "333:   const expect = fixtureDef['body-byte-counts.tar'].length + 512 + 1024",
          "334:   const check = (file, t) => {",
          "335:     t.equal(fs.statSync(file).size, expect)",
          "340:     const dir = setup(t)",
          "341:     const file = resolve(dir, 'body-byte-counts.tar')",
          "344:       file,",
          "348:     }, ['1024-bytes.txt', 'foo'])",
          "349:     check(file, t)",
          "353:     const dir = setup(t)",
          "354:     const file = resolve(dir, 'body-byte-counts.tar')",
          "355:     u({ file, cwd: dir }, ['1024-bytes.txt']).then(_ => check(file, t))",
          "356:   })",
          "358:   t.test('async cb', t => {",
          "359:     const dir = setup(t)",
          "360:     const file = resolve(dir, 'body-byte-counts.tar')",
          "361:     u({ file, cwd: dir }, ['1024-bytes.txt'], er => {",
          "362:       if (er)",
          "363:         throw er",
          "364:       check(file, t)",
          "365:     })",
          "",
          "---------------"
        ],
        "test/write-entry.js||test/write-entry.js": [
          "File: test/write-entry.js -> test/write-entry.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: const Parser = require('../lib/parse.js')",
          "29: const rimraf = require('rimraf')",
          "30: const isWindows = process.platform === 'win32'",
          "32: t.test('set up', t => {",
          "33:   const one = fs.statSync(files + '/hardlink-1')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: const normPath = require('../lib/normalize-windows-path.js')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     fs.unlinkSync(files + '/hardlink-2')",
          "37:     fs.linkSync(files + '/hardlink-1', files + '/hardlink-2')",
          "38:   }",
          "40:   t.end()",
          "41: })",
          "",
          "[Removed Lines]",
          "39:   chmodr.sync(files, 0o644)",
          "",
          "[Added Lines]",
          "40:   chmodr.sync(files, isWindows ? 0o666 : 0o644)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:           cksumValid: true,",
          "64:           needPax: false,",
          "65:           path: '100-byte-filename-cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc',",
          "67:           size: 100,",
          "68:           linkpath: null,",
          "69:           uname: 'isaacs',",
          "",
          "[Removed Lines]",
          "66:           mode: 0o644,",
          "",
          "[Added Lines]",
          "67:           mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:         cksumValid: true,",
          "92:         needPax: false,",
          "93:         path: '100-byte-filename-cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc',",
          "95:         size: 100,",
          "96:         linkpath: '',",
          "97:         uname: 'isaacs',",
          "",
          "[Removed Lines]",
          "94:         mode: 0o644,",
          "",
          "[Added Lines]",
          "95:         mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:       cksumValid: true,",
          "140:       needPax: false,",
          "141:       path: 'dir/',",
          "143:       size: 0,",
          "144:       linkpath: null,",
          "145:       uname: 'isaacs',",
          "",
          "[Removed Lines]",
          "142:       mode: 0o755,",
          "",
          "[Added Lines]",
          "143:       mode: isWindows ? 0o777 : 0o755,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "155:       cksumValid: true,",
          "156:       needPax: false,",
          "157:       path: 'dir/',",
          "159:       size: 0,",
          "160:       linkpath: null,",
          "161:       uname: 'isaacs',",
          "",
          "[Removed Lines]",
          "158:       mode: 0o755,",
          "",
          "[Added Lines]",
          "159:       mode: isWindows ? 0o777 : 0o755,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "179:       cksumValid: true,",
          "180:       needPax: false,",
          "181:       path: './',",
          "183:       size: 0,",
          "184:       linkpath: null,",
          "185:       uname: 'isaacs',",
          "",
          "[Removed Lines]",
          "182:       mode: fs.statSync('./').mode & 0o7777,",
          "",
          "[Added Lines]",
          "183:       mode: isWindows ? 0o777 : fs.statSync('./').mode & 0o7777,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "191:   })",
          "192: })",
          "195:   const ws = new WriteEntry('symlink', { cwd: files })",
          "196:   let out = []",
          "197:   ws.on('data', c => out.push(c))",
          "",
          "[Removed Lines]",
          "194: t.test('symlink', t => {",
          "",
          "[Added Lines]",
          "195: t.test('symlink', {",
          "196:   skip: isWindows && 'symlinks not fully supported',",
          "197: }, t => {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "230:       path: 'files/zero-byte.txt',",
          "231:       cksumValid: true,",
          "232:       needPax: false,",
          "234:       size: 0,",
          "235:       linkpath: null,",
          "236:       uname: 'isaacs',",
          "",
          "[Removed Lines]",
          "233:       mode: 0o644,",
          "",
          "[Added Lines]",
          "236:       mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "278:       path: 'files/hardlink-2',",
          "279:       cksumValid: true,",
          "280:       needPax: false,",
          "282:       size: 0,",
          "283:       linkpath: 'files/hardlink-1',",
          "284:       uname: 'isaacs',",
          "",
          "[Removed Lines]",
          "281:       mode: 0o644,",
          "",
          "[Added Lines]",
          "284:       mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "310:       path: 'files/hardlink-2',",
          "311:       cksumValid: true,",
          "312:       needPax: false,",
          "314:       size: 26,",
          "315:       linkpath: null,",
          "316:       uname: 'isaacs',",
          "",
          "[Removed Lines]",
          "313:       mode: 0o644,",
          "",
          "[Added Lines]",
          "316:       mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "334:       cksumValid: true,",
          "335:       needPax: true,",
          "336:       path: 'long-path/r/e/a/l/l/y/-/d/e/e/p/-/f/o/l/d/e/r/-/p/a/t/h/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc',",
          "338:       size: 100,",
          "339:       linkpath: null,",
          "340:       uname: 'isaacs',",
          "",
          "[Removed Lines]",
          "337:       mode: 0o644,",
          "",
          "[Added Lines]",
          "340:       mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "359:       cksumValid: true,",
          "360:       needPax: true,",
          "361:       path: 'long-path/r/e/a/l/l/y/-/d/e/e/p/-/f/o/l/d/e/r/-/p/a/t/h/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc',",
          "363:       size: 100,",
          "364:       linkpath: null,",
          "365:       uname: 'isaacs',",
          "",
          "[Removed Lines]",
          "362:       mode: 0o644,",
          "",
          "[Added Lines]",
          "365:       mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "390:   const absolute = path.resolve(files, '512-bytes.txt')",
          "391:   const { root } = path.parse(absolute)",
          "392:   const f = root + root + root + absolute",
          "394:   t.test('preservePaths=false strict=false', t => {",
          "395:     const warnings = []",
          "397:       cwd: files,",
          "398:       onwarn: (c, m, p) => warnings.push([c, m, p]),",
          "399:     })",
          "",
          "[Removed Lines]",
          "393:   const warn = root + root + root + root",
          "396:     const ws = new WriteEntry(f, {",
          "",
          "[Added Lines]",
          "396:   const warn = normPath(isWindows ? root : root + root + root + root)",
          "401:     const ws = new WriteEntry(isWindows ? absolute : f, {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "403:       out = Buffer.concat(out)",
          "404:       t.equal(out.length, 1024)",
          "405:       t.match(warnings, [[",
          "407:       ]])",
          "409:       t.match(ws.header, {",
          "410:         cksumValid: true,",
          "411:         needPax: false,",
          "414:         size: 512,",
          "415:         linkpath: null,",
          "416:         uname: 'isaacs',",
          "",
          "[Removed Lines]",
          "406:         'TAR_ENTRY_INFO', `stripping ${warn} from absolute path`, { path: f },",
          "412:         path: f.replace(/^(\\/|[a-z]:\\\\\\\\){4}/, ''),",
          "413:         mode: 0o644,",
          "",
          "[Added Lines]",
          "411:         'TAR_ENTRY_INFO',",
          "412:         `stripping ${warn} from absolute path`,",
          "413:         { path: normPath(isWindows ? absolute : f) },",
          "419:         path: normPath(absolute.replace(/^(\\/|[a-z]:[/\\\\])*/i, '')),",
          "420:         mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "428:     ;[true, false].forEach(strict => {",
          "429:       t.test('strict=' + strict, t => {",
          "430:         const warnings = []",
          "432:           cwd: files,",
          "433:           strict: strict,",
          "434:           preservePaths: true,",
          "",
          "[Removed Lines]",
          "431:         const ws = new WriteEntry(f, {",
          "",
          "[Added Lines]",
          "438:         const ws = new WriteEntry(isWindows ? absolute : f, {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "443:           t.match(ws.header, {",
          "444:             cksumValid: true,",
          "445:             needPax: false,",
          "448:             size: 512,",
          "449:             linkpath: null,",
          "450:             uname: 'isaacs',",
          "",
          "[Removed Lines]",
          "446:             path: f,",
          "447:             mode: 0o644,",
          "",
          "[Added Lines]",
          "453:             path: normPath(isWindows ? absolute : f),",
          "454:             mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "461:   t.test('preservePaths=false strict=true', t => {",
          "462:     t.throws(_ => {",
          "464:         strict: true,",
          "465:         cwd: files,",
          "466:       })",
          "468:     t.end()",
          "469:   })",
          "",
          "[Removed Lines]",
          "463:       new WriteEntry(f, {",
          "467:     }, { message: /stripping .* from absolute path/, path: f })",
          "",
          "[Added Lines]",
          "470:       new WriteEntry(isWindows ? absolute : f, {",
          "474:     }, {",
          "475:       message: /stripping .* from absolute path/,",
          "476:       path: normPath(isWindows ? absolute : f),",
          "477:     })",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "485:       cksumValid: true,",
          "486:       needPax: false,",
          "487:       path: '512-bytes.txt',",
          "489:       size: 512,",
          "490:       uname: '',",
          "491:       linkpath: null,",
          "",
          "[Removed Lines]",
          "488:       mode: 0o644,",
          "",
          "[Added Lines]",
          "498:       mode: isWindows ? 0o666 : 0o644,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "526: t.test('readlink fail', t => {",
          "527:   const expect = {",
          "530:     syscall: 'readlink',",
          "532:   }",
          "534:   t.teardown(mutateFS.statType('SymbolicLink'))",
          "537:   new WriteEntry('write-entry.js', { cwd: __dirname }).on('error', er => {",
          "538:     t.match(er, expect)",
          "539:     t.end()",
          "540:   })",
          "541: })",
          "",
          "[Removed Lines]",
          "528:     message: `EINVAL: invalid argument, readlink '${__filename}'`,",
          "529:     code: 'EINVAL',",
          "531:     path: __filename,",
          "535:   t.throws(_ => new WriteEntry.Sync('write-entry.js', { cwd: __dirname }),",
          "536:     expect)",
          "",
          "[Added Lines]",
          "539:     path: String,",
          "543:   t.throws(_ => {",
          "544:     return new WriteEntry.Sync('write-entry.js', { cwd: __dirname })",
          "545:   }, expect)",
          "548:     t.equal(normPath(er.path), normPath(__filename))",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "556:     code: 'EISDIR',",
          "557:     syscall: 'read',",
          "558:   }",
          "561:   t.throws(_ => new WriteEntry.Sync('fixtures', {",
          "562:     cwd: __dirname,",
          "563:   }), expect)",
          "",
          "[Removed Lines]",
          "560:   t.teardown(mutateFS.statType('File'))",
          "",
          "[Added Lines]",
          "570:   t.teardown(mutateFS.statMutate((er, st) => {",
          "571:     if (er)",
          "572:       return [er, st]",
          "573:     st.isFile = () => true",
          "574:     st.size = 123",
          "575:   }))",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "571:   t.teardown(mutateFS.mutate('read', (er, br) => [er, 0]))",
          "572:   const expect = {",
          "573:     message: 'encountered unexpected EOF',",
          "575:     syscall: 'read',",
          "576:     code: 'EOF',",
          "577:   }",
          "",
          "[Removed Lines]",
          "574:     path: __filename,",
          "",
          "[Added Lines]",
          "589:     path: normPath(__filename),",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "591:   const f = '512-bytes.txt'",
          "592:   const expect = {",
          "593:     message: 'did not encounter expected EOF',",
          "595:     syscall: 'read',",
          "596:     code: 'EOF',",
          "597:   }",
          "",
          "[Removed Lines]",
          "594:     path: path.resolve(files, f),",
          "",
          "[Added Lines]",
          "609:     path: normPath(path.resolve(files, f)),",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "948:       path: '$',",
          "949:       type: 'File',",
          "950:       size: 10,",
          "952:       uid: 123,",
          "953:       gid: 321,",
          "954:       ctime: new Date('1979-07-01'),",
          "",
          "[Removed Lines]",
          "951:       mode: 0o755,",
          "",
          "[Added Lines]",
          "966:       mode: isWindows ? 0o777 : 0o755,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "989:         path: '$',",
          "990:         type: 'Directory',",
          "991:         size: 0,",
          "993:         uid: 123,",
          "994:         gid: 321,",
          "995:         ctime: new Date('1979-07-01'),",
          "",
          "[Removed Lines]",
          "992:         mode: 0o755,",
          "",
          "[Added Lines]",
          "1007:         mode: isWindows ? 0o777 : 0o755,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1674:   t.end()",
          "1675: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1692: t.test('myuid set by getuid() if available, otherwise 0', t => {",
          "1693:   const {getuid} = process",
          "1694:   process.getuid = null",
          "1695:   const noUid = new WriteEntry(__filename)",
          "1696:   t.equal(noUid.myuid, 0, 'set to zero if no getuid function')",
          "1697:   process.getuid = () => 123456789",
          "1698:   const hasUid = new WriteEntry(__filename)",
          "1699:   t.equal(hasUid.myuid, 123456789, 'set to process.getuid()')",
          "1700:   process.getuid = getuid",
          "1701:   t.end()",
          "1702: })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46fe35083e2676e31c4e0a81639dce6da7aaa356",
      "candidate_info": {
        "commit_hash": "46fe35083e2676e31c4e0a81639dce6da7aaa356",
        "repo": "isaacs/node-tar",
        "commit_url": "https://github.com/isaacs/node-tar/commit/46fe35083e2676e31c4e0a81639dce6da7aaa356",
        "files": [
          "lib/unpack.js",
          "test/unpack.js"
        ],
        "message": "Remove paths from dirCache when no longer dirs",
        "before_after_code_files": [
          "lib/unpack.js||lib/unpack.js",
          "test/unpack.js||test/unpack.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/unpack.js||lib/unpack.js",
            "test/unpack.js||test/unpack.js"
          ],
          "candidate": [
            "lib/unpack.js||lib/unpack.js",
            "test/unpack.js||test/unpack.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/unpack.js||lib/unpack.js": [
          "File: lib/unpack.js -> lib/unpack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:   [CHECKFS] (entry) {",
          "416:     this[PEND]()",
          "417:     this[MKDIR](path.dirname(entry.absolute), this.dmode, er => {",
          "418:       if (er)",
          "419:         return this[ONERROR](er, entry)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "422:     if (entry.type !== 'Directory') {",
          "423:       for (const path of this.dirCache.keys()) {",
          "424:         if (path === entry.absolute ||",
          "425:             path.indexOf(entry.absolute + '/') === 0 ||",
          "426:             path.indexOf(entry.absolute + '\\\\') === 0)",
          "427:           this.dirCache.delete(path)",
          "428:       }",
          "429:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475:   }",
          "477:   [CHECKFS] (entry) {",
          "478:     const er = this[MKDIR](path.dirname(entry.absolute), this.dmode)",
          "479:     if (er)",
          "480:       return this[ONERROR](er, entry)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:     if (entry.type !== 'Directory') {",
          "493:       for (const path of this.dirCache.keys()) {",
          "494:         if (path === entry.absolute ||",
          "495:             path.indexOf(entry.absolute + '/') === 0 ||",
          "496:             path.indexOf(entry.absolute + '\\\\') === 0)",
          "497:           this.dirCache.delete(path)",
          "498:       }",
          "499:     }",
          "",
          "---------------"
        ],
        "test/unpack.js||test/unpack.js": [
          "File: test/unpack.js -> test/unpack.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2494:   t.end()",
          "2495: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2497: t.test('drop entry from dirCache if no longer a directory', t => {",
          "2498:   const dir = path.resolve(unpackdir, 'dir-cache-error')",
          "2499:   mkdirp.sync(dir + '/sync/y')",
          "2500:   mkdirp.sync(dir + '/async/y')",
          "2501:   const data = makeTar([",
          "2502:     {",
          "2503:       path: 'x',",
          "2504:       type: 'Directory',",
          "2505:     },",
          "2506:     {",
          "2507:       path: 'x',",
          "2508:       type: 'SymbolicLink',",
          "2509:       linkpath: './y',",
          "2510:     },",
          "2511:     {",
          "2512:       path: 'x/ginkoid',",
          "2513:       type: 'File',",
          "2514:       size: 'ginkoid'.length,",
          "2515:     },",
          "2516:     'ginkoid',",
          "2517:     '',",
          "2518:     '',",
          "2519:   ])",
          "2520:   t.plan(2)",
          "2521:   const WARNINGS = {}",
          "2522:   const check = (t, path) => {",
          "2523:     t.equal(fs.statSync(path + '/x').isDirectory(), true)",
          "2524:     t.equal(fs.lstatSync(path + '/x').isSymbolicLink(), true)",
          "2525:     t.equal(fs.statSync(path + '/y').isDirectory(), true)",
          "2526:     t.strictSame(fs.readdirSync(path + '/y'), [])",
          "2527:     t.throws(() => fs.readFileSync(path + '/x/ginkoid'), { code: 'ENOENT' })",
          "2528:     t.strictSame(WARNINGS[path], [",
          "2529:       'Cannot extract through symbolic link',",
          "2530:     ])",
          "2531:     t.end()",
          "2532:   }",
          "2533:   t.test('async', t => {",
          "2534:     const path = dir + '/async'",
          "2535:     new Unpack({ cwd: path })",
          "2536:       .on('warn', (msg) => WARNINGS[path] = [msg])",
          "2537:       .on('end', () => check(t, path))",
          "2538:       .end(data)",
          "2539:   })",
          "2540:   t.test('sync', t => {",
          "2541:     const path = dir + '/sync'",
          "2542:     new UnpackSync({ cwd: path })",
          "2543:       .on('warn', (msg) => WARNINGS[path] = [msg])",
          "2544:       .end(data)",
          "2545:     check(t, path)",
          "2546:   })",
          "2547: })",
          "",
          "---------------"
        ]
      }
    }
  ]
}