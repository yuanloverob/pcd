{
  "cve_id": "CVE-2024-4181",
  "cve_desc": "A command injection vulnerability exists in the RunGptLLM class of the llama_index library, version 0.9.47, used by the RunGpt framework from JinaAI to connect to Language Learning Models (LLMs). The vulnerability arises from the improper use of the eval function, allowing a malicious or compromised LLM hosting provider to execute arbitrary commands on the client's machine. This issue was fixed in version 0.10.13. The exploitation of this vulnerability could lead to a hosting provider gaining full control over client machines.",
  "repo": "run-llama/llama_index",
  "patch_hash": "d73715eaf0642705583e7897c78b9c8dd2d3a7ba",
  "patch_info": {
    "commit_hash": "d73715eaf0642705583e7897c78b9c8dd2d3a7ba",
    "repo": "run-llama/llama_index",
    "commit_url": "https://github.com/run-llama/llama_index/commit/d73715eaf0642705583e7897c78b9c8dd2d3a7ba",
    "files": [
      "llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py",
      "llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py",
      "llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py"
    ],
    "message": "remove random vuls",
    "before_after_code_files": [
      "llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py||llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py",
      "llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py||llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py",
      "llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py||llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py"
    ]
  },
  "patch_diff": {
    "llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py||llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py": [
      "File: llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py -> llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:         response = requests.post(",
      "42:             self.knowledge_request_endpoint,",
      "43:             headers=self.headers,",
      "45:             data=data,",
      "46:         )",
      "47:         if response.status_code == 200:",
      "",
      "[Removed Lines]",
      "44:             verify=False,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py||llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py": [
      "File: llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py -> llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: from typing import Any, Callable, Dict, List, Optional, Sequence, Tuple, Union",
      "4: from llama_index.core.base.llms.types import (",
      "",
      "[Removed Lines]",
      "1: import json",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "153:         def gen() -> CompletionResponseGen:",
      "154:             text = \"\"",
      "155:             for item in response_iter:",
      "157:                 delta = item_dict[\"choices\"][0][\"text\"]",
      "158:                 additional_kwargs = item_dict[\"usage\"]",
      "159:                 text = text + self._space_handler(delta)",
      "",
      "[Removed Lines]",
      "156:                 item_dict = json.loads(json.dumps(eval(item.data)))",
      "",
      "[Added Lines]",
      "155:                 item_dict = dict(item.data)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "214:         def gen() -> ChatResponseGen:",
      "215:             content = \"\"",
      "216:             for item in chat_iter:",
      "218:                 chat_message, delta = self._message_unpacker(item_dict)",
      "219:                 content = content + self._space_handler(delta)",
      "220:                 chat_message.content = content",
      "",
      "[Removed Lines]",
      "217:                 item_dict = json.loads(json.dumps(eval(item.data)))",
      "",
      "[Added Lines]",
      "216:                 item_dict = dict(item.data)",
      "",
      "---------------"
    ],
    "llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py||llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py": [
      "File: llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py -> llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:                 \"documentName\": document_name,",
      "92:                 \"documentDescription\": document_description,",
      "93:             }",
      "98:         elif file:",
      "99:             api_url = self.source_file_endpoint",
      "",
      "[Removed Lines]",
      "94:             response = requests.post(",
      "95:                 api_url, headers=headers, verify=False, data=data, files=files",
      "96:             )",
      "",
      "[Added Lines]",
      "94:             response = requests.post(api_url, headers=headers, data=data, files=files)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:                 \"documentName\": document_name,",
      "109:                 \"documentDescription\": document_description,",
      "110:             }",
      "114:         if response.status_code == 200:",
      "115:             return response.json()",
      "116:         else:",
      "",
      "[Removed Lines]",
      "111:             response = requests.post(",
      "112:                 api_url, headers=headers, verify=False, data=data, files=files",
      "113:             )",
      "",
      "[Added Lines]",
      "109:             response = requests.post(api_url, headers=headers, data=data, files=files)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "134:         headers = self.headers",
      "136:         data = {\"query\": query}",
      "138:         if response.status_code == 200:",
      "139:             return response.json()",
      "140:         else:",
      "",
      "[Removed Lines]",
      "137:         response = requests.post(api_url, headers=headers, verify=False, data=data)",
      "",
      "[Added Lines]",
      "133:         response = requests.post(api_url, headers=headers, data=data)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "157:             self.knowledge_status_endpoint,",
      "158:             headers=self.headers,",
      "159:             params=params,",
      "161:         )",
      "162:         if response.status_code == 200:",
      "163:             source_info = response.json()",
      "",
      "[Removed Lines]",
      "160:             verify=False,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ab61b32d8a8c6969f907818859170395ec80bf5e",
      "candidate_info": {
        "commit_hash": "ab61b32d8a8c6969f907818859170395ec80bf5e",
        "repo": "run-llama/llama_index",
        "commit_url": "https://github.com/run-llama/llama_index/commit/ab61b32d8a8c6969f907818859170395ec80bf5e",
        "files": [
          "llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py",
          "llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py",
          "llama-index-integrations/llms/llama-index-llms-rungpt/pyproject.toml",
          "llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py",
          "llama-index-integrations/tools/llama-index-tools-cogniswitch/pyproject.toml"
        ],
        "message": "Logan/fix vuls (#11347)",
        "before_after_code_files": [
          "llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py||llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py",
          "llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py||llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py",
          "llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py||llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/run-llama/llama_index/pull/11347"
        ],
        "olp_code_files": {
          "patch": [
            "llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py||llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py",
            "llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py||llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py",
            "llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py||llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py"
          ],
          "candidate": [
            "llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py||llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py",
            "llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py||llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py",
            "llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py||llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py"
          ]
        }
      },
      "candidate_diff": {
        "llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py||llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py": [
          "File: llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py -> llama-index-core/llama_index/core/query_engine/cogniswitch_query_engine.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         response = requests.post(",
          "42:             self.knowledge_request_endpoint,",
          "43:             headers=self.headers,",
          "45:             data=data,",
          "46:         )",
          "47:         if response.status_code == 200:",
          "",
          "[Removed Lines]",
          "44:             verify=False,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py||llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py": [
          "File: llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py -> llama-index-integrations/llms/llama-index-llms-rungpt/llama_index/llms/rungpt/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from typing import Any, Callable, Dict, List, Optional, Sequence, Tuple, Union",
          "4: from llama_index.core.base.llms.types import (",
          "",
          "[Removed Lines]",
          "1: import json",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:         def gen() -> CompletionResponseGen:",
          "154:             text = \"\"",
          "155:             for item in response_iter:",
          "157:                 delta = item_dict[\"choices\"][0][\"text\"]",
          "158:                 additional_kwargs = item_dict[\"usage\"]",
          "159:                 text = text + self._space_handler(delta)",
          "",
          "[Removed Lines]",
          "156:                 item_dict = json.loads(json.dumps(eval(item.data)))",
          "",
          "[Added Lines]",
          "155:                 item_dict = dict(item.data)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:         def gen() -> ChatResponseGen:",
          "215:             content = \"\"",
          "216:             for item in chat_iter:",
          "218:                 chat_message, delta = self._message_unpacker(item_dict)",
          "219:                 content = content + self._space_handler(delta)",
          "220:                 chat_message.content = content",
          "",
          "[Removed Lines]",
          "217:                 item_dict = json.loads(json.dumps(eval(item.data)))",
          "",
          "[Added Lines]",
          "216:                 item_dict = dict(item.data)",
          "",
          "---------------"
        ],
        "llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py||llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py": [
          "File: llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py -> llama-index-integrations/tools/llama-index-tools-cogniswitch/llama_index/tools/cogniswitch/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:                 \"documentName\": document_name,",
          "92:                 \"documentDescription\": document_description,",
          "93:             }",
          "98:         elif file:",
          "99:             api_url = self.source_file_endpoint",
          "",
          "[Removed Lines]",
          "94:             response = requests.post(",
          "95:                 api_url, headers=headers, verify=False, data=data, files=files",
          "96:             )",
          "",
          "[Added Lines]",
          "94:             response = requests.post(api_url, headers=headers, data=data, files=files)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:                 \"documentName\": document_name,",
          "109:                 \"documentDescription\": document_description,",
          "110:             }",
          "114:         if response.status_code == 200:",
          "115:             return response.json()",
          "116:         else:",
          "",
          "[Removed Lines]",
          "111:             response = requests.post(",
          "112:                 api_url, headers=headers, verify=False, data=data, files=files",
          "113:             )",
          "",
          "[Added Lines]",
          "109:             response = requests.post(api_url, headers=headers, data=data, files=files)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:         headers = self.headers",
          "136:         data = {\"query\": query}",
          "138:         if response.status_code == 200:",
          "139:             return response.json()",
          "140:         else:",
          "",
          "[Removed Lines]",
          "137:         response = requests.post(api_url, headers=headers, verify=False, data=data)",
          "",
          "[Added Lines]",
          "133:         response = requests.post(api_url, headers=headers, data=data)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:             self.knowledge_status_endpoint,",
          "158:             headers=self.headers,",
          "159:             params=params,",
          "161:         )",
          "162:         if response.status_code == 200:",
          "163:             source_info = response.json()",
          "",
          "[Removed Lines]",
          "160:             verify=False,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}