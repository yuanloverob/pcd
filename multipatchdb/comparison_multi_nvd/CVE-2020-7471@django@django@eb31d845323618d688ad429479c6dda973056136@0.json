{
  "cve_id": "CVE-2020-7471",
  "cve_desc": "Django 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3 allows SQL Injection if untrusted data is used as a StringAgg delimiter (e.g., in Django applications that offer downloads of data as a series of rows with a user-specified column delimiter). By passing a suitably crafted delimiter to a contrib.postgres.aggregates.StringAgg instance, it was possible to break escaping and inject malicious SQL.",
  "repo": "django/django",
  "patch_hash": "eb31d845323618d688ad429479c6dda973056136",
  "patch_info": {
    "commit_hash": "eb31d845323618d688ad429479c6dda973056136",
    "repo": "django/django",
    "commit_url": "https://github.com/django/django/commit/eb31d845323618d688ad429479c6dda973056136",
    "files": [
      "django/contrib/postgres/aggregates/general.py",
      "django/contrib/postgres/aggregates/mixins.py",
      "docs/releases/1.11.28.txt",
      "docs/releases/2.2.10.txt",
      "docs/releases/3.0.3.txt",
      "docs/releases/index.txt",
      "tests/postgres_tests/test_aggregates.py"
    ],
    "message": "Fixed CVE-2020-7471 -- Properly escaped StringAgg(delimiter) parameter.",
    "before_after_code_files": [
      "django/contrib/postgres/aggregates/general.py||django/contrib/postgres/aggregates/general.py",
      "django/contrib/postgres/aggregates/mixins.py||django/contrib/postgres/aggregates/mixins.py",
      "tests/postgres_tests/test_aggregates.py||tests/postgres_tests/test_aggregates.py"
    ]
  },
  "patch_diff": {
    "django/contrib/postgres/aggregates/general.py||django/contrib/postgres/aggregates/general.py": [
      "File: django/contrib/postgres/aggregates/general.py -> django/contrib/postgres/aggregates/general.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: from django.contrib.postgres.fields import ArrayField, JSONField",
      "2: from django.db.models.aggregates import Aggregate",
      "4: from .mixins import OrderableAggMixin",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: from django.db.models import Value",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52: class StringAgg(OrderableAggMixin, Aggregate):",
      "53:     function = 'STRING_AGG'",
      "55:     allow_distinct = True",
      "57:     def __init__(self, expression, delimiter, **extra):",
      "60:     def convert_value(self, value, expression, connection):",
      "61:         if not value:",
      "",
      "[Removed Lines]",
      "54:     template = \"%(function)s(%(distinct)s%(expressions)s, '%(delimiter)s'%(ordering)s)\"",
      "58:         super().__init__(expression, delimiter=delimiter, **extra)",
      "",
      "[Added Lines]",
      "55:     template = '%(function)s(%(distinct)s%(expressions)s %(ordering)s)'",
      "59:         delimiter_expr = Value(str(delimiter))",
      "60:         super().__init__(expression, delimiter_expr, **extra)",
      "",
      "---------------"
    ],
    "django/contrib/postgres/aggregates/mixins.py||django/contrib/postgres/aggregates/mixins.py": [
      "File: django/contrib/postgres/aggregates/mixins.py -> django/contrib/postgres/aggregates/mixins.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: class OrderableAggMixin:",
      "7:         if not isinstance(ordering, (list, tuple)):",
      "8:             ordering = [ordering]",
      "9:         ordering = ordering or []",
      "",
      "[Removed Lines]",
      "6:     def __init__(self, expression, ordering=(), **extra):",
      "",
      "[Added Lines]",
      "6:     def __init__(self, *expressions, ordering=(), **extra):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "12:             (OrderBy(F(o[1:]), descending=True) if isinstance(o, str) and o[0] == '-' else o)",
      "13:             for o in ordering",
      "14:         )",
      "16:         self.ordering = self._parse_expressions(*ordering)",
      "18:     def resolve_expression(self, *args, **kwargs):",
      "",
      "[Removed Lines]",
      "15:         super().__init__(expression, **extra)",
      "",
      "[Added Lines]",
      "15:         super().__init__(*expressions, **extra)",
      "",
      "---------------"
    ],
    "tests/postgres_tests/test_aggregates.py||tests/postgres_tests/test_aggregates.py": [
      "File: tests/postgres_tests/test_aggregates.py -> tests/postgres_tests/test_aggregates.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "169:         with self.assertRaises(TypeError):",
      "170:             AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field'))",
      "172:     def test_string_agg_charfield(self):",
      "173:         values = AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field', delimiter=';'))",
      "174:         self.assertEqual(values, {'stringagg': 'Foo1;Foo2;Foo4;Foo3'})",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:     def test_string_agg_delimiter_escaping(self):",
      "173:         values = AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field', delimiter=\"'\"))",
      "174:         self.assertEqual(values, {'stringagg': \"Foo1'Foo2'Foo4'Foo3\"})",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ec5eb5d74fd18a91256010706ab8b5b583526a9",
      "candidate_info": {
        "commit_hash": "6ec5eb5d74fd18a91256010706ab8b5b583526a9",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/6ec5eb5d74fd18a91256010706ab8b5b583526a9",
        "files": [
          "django/contrib/postgres/aggregates/general.py",
          "docs/ref/contrib/postgres/aggregates.txt",
          "tests/postgres_tests/test_aggregates.py"
        ],
        "message": "Refs #31720 -- Defined default output_field of BoolAnd() and BoolOr() aggregate functions.",
        "before_after_code_files": [
          "django/contrib/postgres/aggregates/general.py||django/contrib/postgres/aggregates/general.py",
          "tests/postgres_tests/test_aggregates.py||tests/postgres_tests/test_aggregates.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "django/contrib/postgres/aggregates/general.py||django/contrib/postgres/aggregates/general.py",
            "tests/postgres_tests/test_aggregates.py||tests/postgres_tests/test_aggregates.py"
          ],
          "candidate": [
            "django/contrib/postgres/aggregates/general.py||django/contrib/postgres/aggregates/general.py",
            "tests/postgres_tests/test_aggregates.py||tests/postgres_tests/test_aggregates.py"
          ]
        }
      },
      "candidate_diff": {
        "django/contrib/postgres/aggregates/general.py||django/contrib/postgres/aggregates/general.py": [
          "File: django/contrib/postgres/aggregates/general.py -> django/contrib/postgres/aggregates/general.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from django.contrib.postgres.fields import ArrayField",
          "4: from .mixins import OrderableAggMixin",
          "",
          "[Removed Lines]",
          "2: from django.db.models import Aggregate, JSONField, Value",
          "",
          "[Added Lines]",
          "2: from django.db.models import Aggregate, BooleanField, JSONField, Value",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: class BoolAnd(Aggregate):",
          "35:     function = 'BOOL_AND'",
          "38: class BoolOr(Aggregate):",
          "39:     function = 'BOOL_OR'",
          "42: class JSONBAgg(OrderableAggMixin, Aggregate):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     output_field = BooleanField()",
          "41:     output_field = BooleanField()",
          "",
          "---------------"
        ],
        "tests/postgres_tests/test_aggregates.py||tests/postgres_tests/test_aggregates.py": [
          "File: tests/postgres_tests/test_aggregates.py -> tests/postgres_tests/test_aggregates.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:         values = AggregateTestModel.objects.aggregate(booland=BoolAnd('boolean_field'))",
          "156:         self.assertEqual(values, {'booland': None})",
          "158:     def test_bool_or_general(self):",
          "159:         values = AggregateTestModel.objects.aggregate(boolor=BoolOr('boolean_field'))",
          "160:         self.assertEqual(values, {'boolor': True})",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:     def test_bool_and_q_object(self):",
          "159:         values = AggregateTestModel.objects.aggregate(",
          "160:             booland=BoolAnd(Q(integer_field__gt=2)),",
          "161:         )",
          "162:         self.assertEqual(values, {'booland': False})",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:         values = AggregateTestModel.objects.aggregate(boolor=BoolOr('boolean_field'))",
          "165:         self.assertEqual(values, {'boolor': None})",
          "167:     def test_string_agg_requires_delimiter(self):",
          "168:         with self.assertRaises(TypeError):",
          "169:             AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field'))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:     def test_bool_or_q_object(self):",
          "174:         values = AggregateTestModel.objects.aggregate(",
          "175:             boolor=BoolOr(Q(integer_field__gt=2)),",
          "176:         )",
          "177:         self.assertEqual(values, {'boolor': False})",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "505826b469b16ab36693360da9e11fd13213421b",
      "candidate_info": {
        "commit_hash": "505826b469b16ab36693360da9e11fd13213421b",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/505826b469b16ab36693360da9e11fd13213421b",
        "files": [
          "django/contrib/postgres/aggregates/general.py",
          "django/contrib/postgres/aggregates/mixins.py",
          "docs/releases/1.11.28.txt",
          "docs/releases/2.2.10.txt",
          "docs/releases/3.0.3.txt",
          "docs/releases/index.txt",
          "tests/postgres_tests/test_aggregates.py"
        ],
        "message": "[3.0.x] Fixed CVE-2020-7471 -- Properly escaped StringAgg(delimiter) parameter.",
        "before_after_code_files": [
          "django/contrib/postgres/aggregates/general.py||django/contrib/postgres/aggregates/general.py",
          "django/contrib/postgres/aggregates/mixins.py||django/contrib/postgres/aggregates/mixins.py",
          "tests/postgres_tests/test_aggregates.py||tests/postgres_tests/test_aggregates.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "django/contrib/postgres/aggregates/general.py||django/contrib/postgres/aggregates/general.py",
            "django/contrib/postgres/aggregates/mixins.py||django/contrib/postgres/aggregates/mixins.py",
            "tests/postgres_tests/test_aggregates.py||tests/postgres_tests/test_aggregates.py"
          ],
          "candidate": [
            "django/contrib/postgres/aggregates/general.py||django/contrib/postgres/aggregates/general.py",
            "django/contrib/postgres/aggregates/mixins.py||django/contrib/postgres/aggregates/mixins.py",
            "tests/postgres_tests/test_aggregates.py||tests/postgres_tests/test_aggregates.py"
          ]
        }
      },
      "candidate_diff": {
        "django/contrib/postgres/aggregates/general.py||django/contrib/postgres/aggregates/general.py": [
          "File: django/contrib/postgres/aggregates/general.py -> django/contrib/postgres/aggregates/general.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from django.contrib.postgres.fields import ArrayField, JSONField",
          "2: from django.db.models.aggregates import Aggregate",
          "4: from .mixins import OrderableAggMixin",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: from django.db.models import Value",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: class StringAgg(OrderableAggMixin, Aggregate):",
          "53:     function = 'STRING_AGG'",
          "55:     allow_distinct = True",
          "57:     def __init__(self, expression, delimiter, **extra):",
          "60:     def convert_value(self, value, expression, connection):",
          "61:         if not value:",
          "",
          "[Removed Lines]",
          "54:     template = \"%(function)s(%(distinct)s%(expressions)s, '%(delimiter)s'%(ordering)s)\"",
          "58:         super().__init__(expression, delimiter=delimiter, **extra)",
          "",
          "[Added Lines]",
          "55:     template = '%(function)s(%(distinct)s%(expressions)s %(ordering)s)'",
          "59:         delimiter_expr = Value(str(delimiter))",
          "60:         super().__init__(expression, delimiter_expr, **extra)",
          "",
          "---------------"
        ],
        "django/contrib/postgres/aggregates/mixins.py||django/contrib/postgres/aggregates/mixins.py": [
          "File: django/contrib/postgres/aggregates/mixins.py -> django/contrib/postgres/aggregates/mixins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: class OrderableAggMixin:",
          "7:         if not isinstance(ordering, (list, tuple)):",
          "8:             ordering = [ordering]",
          "9:         ordering = ordering or []",
          "",
          "[Removed Lines]",
          "6:     def __init__(self, expression, ordering=(), **extra):",
          "",
          "[Added Lines]",
          "6:     def __init__(self, *expressions, ordering=(), **extra):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:             (OrderBy(F(o[1:]), descending=True) if isinstance(o, str) and o[0] == '-' else o)",
          "13:             for o in ordering",
          "14:         )",
          "16:         self.ordering = self._parse_expressions(*ordering)",
          "18:     def resolve_expression(self, *args, **kwargs):",
          "",
          "[Removed Lines]",
          "15:         super().__init__(expression, **extra)",
          "",
          "[Added Lines]",
          "15:         super().__init__(*expressions, **extra)",
          "",
          "---------------"
        ],
        "tests/postgres_tests/test_aggregates.py||tests/postgres_tests/test_aggregates.py": [
          "File: tests/postgres_tests/test_aggregates.py -> tests/postgres_tests/test_aggregates.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:         with self.assertRaises(TypeError):",
          "164:             AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field'))",
          "166:     def test_string_agg_charfield(self):",
          "167:         values = AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field', delimiter=';'))",
          "168:         self.assertEqual(values, {'stringagg': 'Foo1;Foo2;Foo4;Foo3'})",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:     def test_string_agg_delimiter_escaping(self):",
          "167:         values = AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field', delimiter=\"'\"))",
          "168:         self.assertEqual(values, {'stringagg': \"Foo1'Foo2'Foo4'Foo3\"})",
          "",
          "---------------"
        ]
      }
    }
  ]
}