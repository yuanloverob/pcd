{
  "cve_id": "CVE-2022-24976",
  "cve_desc": "Atheme IRC Services before 7.2.12, when used in conjunction with InspIRCd, allows authentication bypass by ending an IRC handshake at a certain point during a challenge-response login sequence.",
  "repo": "atheme/atheme",
  "patch_hash": "4e664c75d0b280a052eb8b5e81aa41944e593c52",
  "patch_info": {
    "commit_hash": "4e664c75d0b280a052eb8b5e81aa41944e593c52",
    "repo": "atheme/atheme",
    "commit_url": "https://github.com/atheme/atheme/commit/4e664c75d0b280a052eb8b5e81aa41944e593c52",
    "files": [
      "include/atheme/sasl.h",
      "modules/saslserv/main.c"
    ],
    "message": "saslserv/main: Track EID we're pending login to\n\nThe existing model does not remember that we've sent a SVSLOGIN for a\ngiven SASL session, and simply assumes that if a client is introduced\nwith a SASL session open, that session must have succeeded. The security\nof this approach requires ircd to implicitly abort SASL sessions on\nclient registration.\n\nThis also means that if a client successfully authenticates and then\ndoes something else its pending login is forgotten about, even though a\nSVSLOGIN has been sent for it, and the ircd is going to think it's\nlogged in.\n\nThis change removes the dependency on ircd's state machine by keeping\nexplicit track of the pending login, i.e. the one we've most recently\nsent a SVSLOGIN for. The next commit will ensure that a client abort\n(even an implicit one) doesn't blow that information away.",
    "before_after_code_files": [
      "include/atheme/sasl.h||include/atheme/sasl.h",
      "modules/saslserv/main.c||modules/saslserv/main.c"
    ]
  },
  "patch_diff": {
    "include/atheme/sasl.h||include/atheme/sasl.h": [
      "File: include/atheme/sasl.h -> include/atheme/sasl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:  char                            authzid[NICKLEN + 1];   // Authorization identity (user being logged in)",
      "63:  char                            authceid[IDLEN + 1];    // Entity ID for authcid",
      "64:  char                            authzeid[IDLEN + 1];    // Entity ID for authzid",
      "65:  char                            uid[UIDLEN + 1];        // Network UID",
      "66: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:  char                            pendingeid[IDLEN + 1];  // Entity ID for pending login (for pre-reg clients)",
      "",
      "---------------"
    ],
    "modules/saslserv/main.c||modules/saslserv/main.c": [
      "File: modules/saslserv/main.c -> modules/saslserv/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "386:  if (! mu)",
      "387:  {",
      "389:   {",
      "391:                         MOWGLI_FUNC_NAME, u->nick);",
      "392:    (void) notice(saslsvs->nick, u->nick, LOGIN_CANCELLED_STR);",
      "393:    return false;",
      "394:   }",
      "397:   {",
      "398:    if (*p->authzid)",
      "399:     (void) notice(saslsvs->nick, u->nick, \"Account %s dropped; login cancelled\",",
      "",
      "[Removed Lines]",
      "388:   if (! *p->authzeid)",
      "390:    (void) slog(LG_INFO, \"%s: session for '%s' without an authzeid (BUG)\",",
      "396:   if (! (mu = myuser_find_uid(p->authzeid)))",
      "",
      "[Added Lines]",
      "388:   if (! *p->pendingeid)",
      "390:    (void) slog(LG_INFO, \"%s: session for '%s' without an pendingeid (BUG)\",",
      "396:   if (! (mu = myuser_find_uid(p->pendingeid)))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "638:     return false;",
      "639:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "641:    (void) mowgli_strlcpy(p->pendingeid, p->authzeid, sizeof p->pendingeid);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ceb0235695e6736ce2abe86d0fe665be9e0f283c",
      "candidate_info": {
        "commit_hash": "ceb0235695e6736ce2abe86d0fe665be9e0f283c",
        "repo": "atheme/atheme",
        "commit_url": "https://github.com/atheme/atheme/commit/ceb0235695e6736ce2abe86d0fe665be9e0f283c",
        "files": [
          "modules/saslserv/main.c"
        ],
        "message": "saslserv/main: Preserve pending login on abort\n\nThe previous patch made SaslServ aware of pending logins (i.e. SASL\nsessions which have succeeded and generated a SVSLOGIN). This one\nensures that aborting a SASL authentication attempt does not destroy\nthat information: if you successfully authenticate as user A, then begin\nand abort another authentication attempt as user B, you will log in as\nuser A.\n\nThis is only relevant in the pre-registration case, when SASL logins\ncannot be actioned immediately. It's also necessary to avoid a desync in\nthis case: if we have already sent a SVSLOGIN for a login, the user is\ngoing to be informed that they've logged in, and the ircd is going treat\nthem as though they're logged in. Other solutions are possible, but I\nthink the cleanest one is to action the last SVSLOGIN we sent, mirroring\ntheir effect ircd-side.",
        "before_after_code_files": [
          "modules/saslserv/main.c||modules/saslserv/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/saslserv/main.c||modules/saslserv/main.c"
          ],
          "candidate": [
            "modules/saslserv/main.c||modules/saslserv/main.c"
          ]
        }
      },
      "candidate_diff": {
        "modules/saslserv/main.c||modules/saslserv/main.c": [
          "File: modules/saslserv/main.c -> modules/saslserv/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:  return target_mu;",
          "317: }",
          "319: static void",
          "320: sasl_session_destroy(struct sasl_session *const restrict p)",
          "321: {",
          "322:  mowgli_node_t *n;",
          "324:  MOWGLI_ITER_FOREACH(n, sasl_sessions.head)",
          "325:  {",
          "326:   if (n == &p->node && n->data == p)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319: static void",
          "320: sasl_session_reset(struct sasl_session *const restrict p)",
          "321: {",
          "322:  if (p->mechptr && p->mechptr->mech_finish)",
          "323:   (void) p->mechptr->mech_finish(p);",
          "324:  p->mechptr = NULL;",
          "326:  struct user *const u = user_find(p->uid);",
          "327:  if (u)",
          "329:   u->flags &= ~UF_DOING_SASL;",
          "330: }",
          "337:  sasl_session_reset(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:   }",
          "331:  }",
          "336:  if (p->si)",
          "337:   (void) atheme_object_unref(p->si);",
          "344:  (void) sfree(p->certfp);",
          "345:  (void) sfree(p->host);",
          "346:  (void) sfree(p->buf);",
          "",
          "[Removed Lines]",
          "333:  if (p->mechptr && p->mechptr->mech_finish)",
          "334:   (void) p->mechptr->mech_finish(p);",
          "339:  struct user *const u = user_find(p->uid);",
          "340:  if (u)",
          "342:   u->flags &= ~UF_DOING_SASL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "348:  (void) sfree(p);",
          "349: }",
          "351: static inline void",
          "352: sasl_session_abort(struct sasl_session *const restrict p)",
          "353: {",
          "354:  (void) sasl_sts(p->uid, 'D', \"F\");",
          "356: }",
          "358: static bool",
          "",
          "[Removed Lines]",
          "355:  (void) sasl_session_destroy(p);",
          "",
          "[Added Lines]",
          "358: static void",
          "359: sasl_session_reset_or_destroy(struct sasl_session *const restrict p)",
          "360: {",
          "361:  if (p->pendingeid[0] == '\\0')",
          "362:   sasl_session_destroy(p);",
          "363:  else",
          "364:   sasl_session_reset(p);",
          "365: }",
          "371:  (void) sasl_session_reset_or_destroy(p);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "381: sasl_handle_login(struct sasl_session *const restrict p, struct user *const u, struct myuser *mu)",
          "382: {",
          "383:  bool was_killed = false;",
          "386:  if (! mu)",
          "387:  {",
          "389:   {",
          "391:                         MOWGLI_FUNC_NAME, u->nick);",
          "392:    (void) notice(saslsvs->nick, u->nick, LOGIN_CANCELLED_STR);",
          "393:    return false;",
          "394:   }",
          "397:   {",
          "398:    if (*p->authzid)",
          "399:     (void) notice(saslsvs->nick, u->nick, \"Account %s dropped; login cancelled\",",
          "",
          "[Removed Lines]",
          "388:   if (! *p->pendingeid)",
          "390:    (void) slog(LG_INFO, \"%s: session for '%s' without an pendingeid (BUG)\",",
          "396:   if (! (mu = myuser_find_uid(p->pendingeid)))",
          "",
          "[Added Lines]",
          "400:  char pendingeid[sizeof p->pendingeid];",
          "402:  mowgli_strlcpy(pendingeid, p->pendingeid, sizeof pendingeid);",
          "403:  p->pendingeid[0] = '\\0';",
          "408:   if (! *pendingeid)",
          "410:    (void) slog(LG_INFO, \"%s: session for '%s' without a pendingeid (BUG)\",",
          "416:   if (! (mu = myuser_find_uid(pendingeid)))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "860:   case 'D':",
          "863:    break;",
          "864:  }",
          "",
          "[Removed Lines]",
          "862:    (void) sasl_session_destroy(p);",
          "",
          "[Added Lines]",
          "882:    (void) sasl_session_reset_or_destroy(p);",
          "",
          "---------------"
        ]
      }
    }
  ]
}