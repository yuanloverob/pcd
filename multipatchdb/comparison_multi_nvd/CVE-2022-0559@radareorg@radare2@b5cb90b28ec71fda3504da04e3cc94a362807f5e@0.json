{
  "cve_id": "CVE-2022-0559",
  "cve_desc": "Use After Free in GitHub repository radareorg/radare2 prior to 5.6.2.",
  "repo": "radareorg/radare2",
  "patch_hash": "b5cb90b28ec71fda3504da04e3cc94a362807f5e",
  "patch_info": {
    "commit_hash": "b5cb90b28ec71fda3504da04e3cc94a362807f5e",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/b5cb90b28ec71fda3504da04e3cc94a362807f5e",
    "files": [
      "libr/io/io_bank.c",
      "libr/util/new_rbtree.c"
    ],
    "message": "Prefer memleak over usaf in io.bank's rbtree bug ##crash\n\n* That's a workaround, proper fix will come later\n* Reproducer: bins/fuzzed/iobank-crash\n* Reported by Akyne Choi via huntr.dev",
    "before_after_code_files": [
      "libr/io/io_bank.c||libr/io/io_bank.c",
      "libr/util/new_rbtree.c||libr/util/new_rbtree.c"
    ]
  },
  "patch_diff": {
    "libr/io/io_bank.c||libr/io/io_bank.c": [
      "File: libr/io/io_bank.c -> libr/io/io_bank.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "226:   r_io_submap_set_to (bd, r_io_submap_from (sm) - 1);",
      "227:   entry = r_rbnode_next (entry);",
      "228:  }",
      "231:   RRBNode *next = r_rbnode_next (entry);",
      "233:   bool a = r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
      "234:   if (!a) {",
      "235:    break;",
      "236:   }",
      "237:   entry = next;",
      "",
      "[Removed Lines]",
      "229:  while (entry && r_io_submap_to (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
      "",
      "[Added Lines]",
      "229:  ut64 smto = r_io_submap_to (sm);",
      "230:  while (entry && r_io_submap_to (((RIOSubMap *)entry->data)) <= smto) {",
      "235:   void *smfree = bank->submaps->free;",
      "236:   bank->submaps->free = NULL;",
      "238:   bank->submaps->free = smfree;",
      "240:    entry = NULL;",
      "",
      "---------------"
    ],
    "libr/util/new_rbtree.c||libr/util/new_rbtree.c": [
      "File: libr/util/new_rbtree.c -> libr/util/new_rbtree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "138:  r_return_val_if_fail (tree && data && cmp, false);",
      "139:  bool inserted = false;",
      "142:   tree->root = _node_new (data, NULL);",
      "144:    return false;",
      "145:   }",
      "146:   inserted = true;",
      "",
      "[Removed Lines]",
      "141:  if (tree->root == NULL) {",
      "143:   if (tree->root == NULL) {",
      "",
      "[Added Lines]",
      "141:  if (!tree->root) {",
      "143:   if (!tree->root) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "14189710859c27981adb4c2c2aed2863c1859ec5",
      "candidate_info": {
        "commit_hash": "14189710859c27981adb4c2c2aed2863c1859ec5",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/14189710859c27981adb4c2c2aed2863c1859ec5",
        "files": [
          "libr/util/new_rbtree.c"
        ],
        "message": "Redo minor cleanup in new_rbtree",
        "before_after_code_files": [
          "libr/util/new_rbtree.c||libr/util/new_rbtree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/util/new_rbtree.c||libr/util/new_rbtree.c"
          ],
          "candidate": [
            "libr/util/new_rbtree.c||libr/util/new_rbtree.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/util/new_rbtree.c||libr/util/new_rbtree.c": [
          "File: libr/util/new_rbtree.c -> libr/util/new_rbtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:  r_return_val_if_fail (tree && data && cmp, false);",
          "139:  bool inserted = false;",
          "142:   tree->root = _node_new (data, NULL);",
          "144:    return false;",
          "145:   }",
          "146:   inserted = true;",
          "",
          "[Removed Lines]",
          "141:  if (tree->root == NULL) {",
          "143:   if (tree->root == NULL) {",
          "",
          "[Added Lines]",
          "141:  if (!tree->root) {",
          "143:   if (!tree->root) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3345147916b9bb3da225248d571cdbac690c0c4d",
      "candidate_info": {
        "commit_hash": "3345147916b9bb3da225248d571cdbac690c0c4d",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/3345147916b9bb3da225248d571cdbac690c0c4d",
        "files": [
          "libr/io/io_bank.c"
        ],
        "message": "Properly fix the UAF in r_io_bank_map_add_top ##crash\n\n* Associated with the CVE-2022-0559\n* Reported by alkyne Choi via huntr.dev",
        "before_after_code_files": [
          "libr/io/io_bank.c||libr/io/io_bank.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ],
          "candidate": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/io/io_bank.c||libr/io/io_bank.c": [
          "File: libr/io/io_bank.c -> libr/io/io_bank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:   entry = r_rbnode_next (entry);",
          "228:  }",
          "229:  ut64 smto = r_io_submap_to (sm);",
          "242:   }",
          "244:  }",
          "245:  if (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
          "246:   bd = (RIOSubMap *)entry->data;",
          "",
          "[Removed Lines]",
          "230:  while (entry && r_io_submap_to (((RIOSubMap *)entry->data)) <= smto) {",
          "232:   RRBNode *next = r_rbnode_next (entry);",
          "235:   void *smfree = bank->submaps->free;",
          "236:   bank->submaps->free = NULL;",
          "237:   bool a = r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "238:   bank->submaps->free = smfree;",
          "239:   if (!a) {",
          "240:    entry = NULL;",
          "241:    break;",
          "243:   entry = next;",
          "",
          "[Added Lines]",
          "230:  if (entry) {",
          "231:   ut64 ento = r_io_submap_to (((RIOSubMap*)entry->data));",
          "232:   while (entry && ento <= smto) {",
          "234:    RRBNode *next = r_rbnode_next (entry);",
          "237:    ento = r_io_submap_to (((RIOSubMap*)entry->data));",
          "238:    bool a = r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "239:    if (!a) {",
          "240:     next = NULL;",
          "241:    }",
          "242:    entry = next;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2df5543b6d30c4b7b99a04510da7662f027fbe7e",
      "candidate_info": {
        "commit_hash": "2df5543b6d30c4b7b99a04510da7662f027fbe7e",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/2df5543b6d30c4b7b99a04510da7662f027fbe7e",
        "files": [
          "libr/io/io_bank.c"
        ],
        "message": "Revert \"Properly fix the UAF in r_io_bank_map_add_top ##crash\"\n\nThis reverts commit 3345147916b9bb3da225248d571cdbac690c0c4d.",
        "before_after_code_files": [
          "libr/io/io_bank.c||libr/io/io_bank.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ],
          "candidate": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/io/io_bank.c||libr/io/io_bank.c": [
          "File: libr/io/io_bank.c -> libr/io/io_bank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:   entry = r_rbnode_next (entry);",
          "234:  }",
          "235:  ut64 smto = r_io_submap_to (sm);",
          "249:   }",
          "250:  }",
          "251:  if (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
          "252:   bd = (RIOSubMap *)entry->data;",
          "",
          "[Removed Lines]",
          "236:  if (entry) {",
          "237:   ut64 ento = r_io_submap_to (((RIOSubMap*)entry->data));",
          "238:   while (entry && ento <= smto) {",
          "240:    RRBNode *next = r_rbnode_next (entry);",
          "243:    ento = r_io_submap_to (((RIOSubMap*)entry->data));",
          "244:    bool a = r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "245:    if (!a) {",
          "246:     next = NULL;",
          "247:    }",
          "248:    entry = next;",
          "",
          "[Added Lines]",
          "236:  while (entry && r_io_submap_to (((RIOSubMap *)entry->data)) <= smto) {",
          "238:   RRBNode *next = r_rbnode_next (entry);",
          "241:   void *smfree = bank->submaps->free;",
          "242:   bank->submaps->free = NULL;",
          "243:   bool a = r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "244:   bank->submaps->free = smfree;",
          "245:   if (!a) {",
          "246:    entry = NULL;",
          "247:    break;",
          "249:   entry = next;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfeb6b04036db241db8971e0bc5b68f444ace082",
      "candidate_info": {
        "commit_hash": "dfeb6b04036db241db8971e0bc5b68f444ace082",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/dfeb6b04036db241db8971e0bc5b68f444ace082",
        "files": [
          "libr/io/io_bank.c"
        ],
        "message": "Revert \"Fix use-after-free in iobank rbtree usage ##io\"\n\nThis reverts commit 37897226a1a31f982bfefdc4aeefc2e50355c73c.",
        "before_after_code_files": [
          "libr/io/io_bank.c||libr/io/io_bank.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ],
          "candidate": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/io/io_bank.c||libr/io/io_bank.c": [
          "File: libr/io/io_bank.c -> libr/io/io_bank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   RRBNode *next = r_rbnode_next (entry);",
          "243:   entry = next;",
          "244:  }",
          "245:  if (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
          "",
          "[Removed Lines]",
          "239:   bool a = r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "240:   if (!a) {",
          "241:    break;",
          "242:   }",
          "",
          "[Added Lines]",
          "239:   r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ead0cee8265df7d019065b82d36284addbf05a75",
      "candidate_info": {
        "commit_hash": "ead0cee8265df7d019065b82d36284addbf05a75",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/ead0cee8265df7d019065b82d36284addbf05a75",
        "files": [
          "libr/io/io_bank.c",
          "libr/util/new_rbtree.c"
        ],
        "message": "Revert \"Prefer memleak over usaf in io.bank's rbtree bug ##crash\"\n\nThis reverts commit b5cb90b28ec71fda3504da04e3cc94a362807f5e.",
        "before_after_code_files": [
          "libr/io/io_bank.c||libr/io/io_bank.c",
          "libr/util/new_rbtree.c||libr/util/new_rbtree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/io/io_bank.c||libr/io/io_bank.c",
            "libr/util/new_rbtree.c||libr/util/new_rbtree.c"
          ],
          "candidate": [
            "libr/io/io_bank.c||libr/io/io_bank.c",
            "libr/util/new_rbtree.c||libr/util/new_rbtree.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/io/io_bank.c||libr/io/io_bank.c": [
          "File: libr/io/io_bank.c -> libr/io/io_bank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:   r_io_submap_set_to (bd, r_io_submap_from (sm) - 1);",
          "233:   entry = r_rbnode_next (entry);",
          "234:  }",
          "238:   RRBNode *next = r_rbnode_next (entry);",
          "243:   bool a = r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);",
          "245:   if (!a) {",
          "247:    break;",
          "248:   }",
          "249:   entry = next;",
          "",
          "[Removed Lines]",
          "235:  ut64 smto = r_io_submap_to (sm);",
          "236:  while (entry && r_io_submap_to (((RIOSubMap *)entry->data)) <= smto) {",
          "241:   void *smfree = bank->submaps->free;",
          "242:   bank->submaps->free = NULL;",
          "244:   bank->submaps->free = smfree;",
          "246:    entry = NULL;",
          "",
          "[Added Lines]",
          "235:  while (entry && r_io_submap_to (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {",
          "",
          "---------------"
        ],
        "libr/util/new_rbtree.c||libr/util/new_rbtree.c": [
          "File: libr/util/new_rbtree.c -> libr/util/new_rbtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:  r_return_val_if_fail (tree && data && cmp, false);",
          "139:  bool inserted = false;",
          "142:   tree->root = _node_new (data, NULL);",
          "144:    return false;",
          "145:   }",
          "146:   inserted = true;",
          "",
          "[Removed Lines]",
          "141:  if (!tree->root) {",
          "143:   if (!tree->root) {",
          "",
          "[Added Lines]",
          "141:  if (tree->root == NULL) {",
          "143:   if (tree->root == NULL) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}