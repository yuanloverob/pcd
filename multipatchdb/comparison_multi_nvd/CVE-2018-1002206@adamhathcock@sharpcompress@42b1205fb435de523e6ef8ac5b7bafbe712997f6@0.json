{
  "cve_id": "CVE-2018-1002206",
  "cve_desc": "SharpCompress before 0.21.0 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.",
  "repo": "adamhathcock/sharpcompress",
  "patch_hash": "42b1205fb435de523e6ef8ac5b7bafbe712997f6",
  "patch_info": {
    "commit_hash": "42b1205fb435de523e6ef8ac5b7bafbe712997f6",
    "repo": "adamhathcock/sharpcompress",
    "commit_url": "https://github.com/adamhathcock/sharpcompress/commit/42b1205fb435de523e6ef8ac5b7bafbe712997f6",
    "files": [
      "src/SharpCompress/Archives/IArchiveEntryExtensions.cs",
      "tests/SharpCompress.Test/Zip/ZipArchiveTests.cs",
      "tests/TestArchives/Archives/Zip.Evil.zip"
    ],
    "message": "Merge pull request #374 from odinn1984/feat/fail_on_outside_target_files\n\nfix: prevent extracting archived files outside of target path",
    "before_after_code_files": [
      "src/SharpCompress/Archives/IArchiveEntryExtensions.cs||src/SharpCompress/Archives/IArchiveEntryExtensions.cs",
      "tests/SharpCompress.Test/Zip/ZipArchiveTests.cs||tests/SharpCompress.Test/Zip/ZipArchiveTests.cs"
    ]
  },
  "patch_diff": {
    "src/SharpCompress/Archives/IArchiveEntryExtensions.cs||src/SharpCompress/Archives/IArchiveEntryExtensions.cs": [
      "File: src/SharpCompress/Archives/IArchiveEntryExtensions.cs -> src/SharpCompress/Archives/IArchiveEntryExtensions.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:         {",
      "49:             string destinationFileName;",
      "50:             string file = Path.GetFileName(entry.Key);",
      "52:             options = options ?? new ExtractionOptions()",
      "53:                                  {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51:             string fullDestinationDirectoryPath = Path.GetFullPath(destinationDirectory);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "58:             if (options.ExtractFullPath)",
      "59:             {",
      "60:                 string folder = Path.GetDirectoryName(entry.Key);",
      "62:                 if (!Directory.Exists(destdir))",
      "63:                 {",
      "64:                     Directory.CreateDirectory(destdir);",
      "65:                 }",
      "66:                 destinationFileName = Path.Combine(destdir, file);",
      "67:             }",
      "68:             else",
      "69:             {",
      "71:             }",
      "72:             if (!entry.IsDirectory)",
      "73:             {",
      "74:                 entry.WriteToFile(destinationFileName, options);",
      "75:             }",
      "76:         }",
      "",
      "[Removed Lines]",
      "61:                 string destdir = Path.Combine(destinationDirectory, folder);",
      "70:                 destinationFileName = Path.Combine(destinationDirectory, file);",
      "",
      "[Added Lines]",
      "62:                 string destdir = Path.GetFullPath(",
      "63:                                     Path.Combine(fullDestinationDirectoryPath, folder)",
      "64:                                  );",
      "68:                     if (!destdir.StartsWith(fullDestinationDirectoryPath))",
      "69:                     {",
      "70:                         throw new ExtractionException(\"Entry is trying to create a directory outside of the destination directory.\");",
      "71:                     }",
      "79:                 destinationFileName = Path.Combine(fullDestinationDirectoryPath, file);",
      "84:                 destinationFileName = Path.GetFullPath(destinationFileName);",
      "86:                 if (!destinationFileName.StartsWith(fullDestinationDirectoryPath))",
      "87:                 {",
      "88:                     throw new ExtractionException(\"Entry is trying to write a file outside of the destination directory.\");",
      "89:                 }",
      "",
      "---------------"
    ],
    "tests/SharpCompress.Test/Zip/ZipArchiveTests.cs||tests/SharpCompress.Test/Zip/ZipArchiveTests.cs": [
      "File: tests/SharpCompress.Test/Zip/ZipArchiveTests.cs -> tests/SharpCompress.Test/Zip/ZipArchiveTests.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "433:                     }",
      "434:                 }",
      "435:             }",
      "437:         }",
      "439:         class NonSeekableMemoryStream : MemoryStream",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "436:         }",
      "438:         [Fact]",
      "439:         public void Zip_Evil_Throws_Exception()",
      "440:         {",
      "441:             Exception expectedExcetpion = null;",
      "442:             string zipFile = Path.Combine(TEST_ARCHIVES_PATH, \"Zip.Evil.zip\");",
      "444:             try",
      "445:             {",
      "446:                 using (var archive = ZipArchive.Open(zipFile))",
      "447:                 {",
      "448:                     foreach (var entry in archive.Entries.Where(entry => !entry.IsDirectory))",
      "449:                     {",
      "450:                         entry.WriteToDirectory(SCRATCH_FILES_PATH, new ExtractionOptions()",
      "451:                         {",
      "452:                             ExtractFullPath = true,",
      "453:                             Overwrite = true",
      "454:                         });",
      "455:                     }",
      "456:                 }",
      "457:             }",
      "458:             catch (Exception ex)",
      "459:             {",
      "460:                 expectedExcetpion = ex;",
      "461:             }",
      "463:             Assert.NotEqual(expectedExcetpion, null);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "80ceb1c375fdb1b4ffba16528c99089e804ce61f",
      "candidate_info": {
        "commit_hash": "80ceb1c375fdb1b4ffba16528c99089e804ce61f",
        "repo": "adamhathcock/sharpcompress",
        "commit_url": "https://github.com/adamhathcock/sharpcompress/commit/80ceb1c375fdb1b4ffba16528c99089e804ce61f",
        "files": [
          "src/SharpCompress/Archives/IArchiveEntryExtensions.cs",
          "tests/SharpCompress.Test/Zip/ZipArchiveTests.cs",
          "tests/TestArchives/Archives/Zip.Evil.zip"
        ],
        "message": "fix: prevent extracting archived files outside of target path\n\nThis PR is meant to fix an arbitrary file write vulnerability, that can be\nachieved using a specially crafted zip archive, that holds path traversal\nfilenames. When the filename gets concatenated to the target extraction\ndirectory, the final path ends up outside of the target folder.\n\nA sample malicious zip file named Zip.Evil.zip was used,\nand when running the code below, resulted in the creation of C:/Temp/evil.txt\noutside of the intended target directory.\n\nThere are various possible ways to avoid this issue, some include checking\nfor .. (dot dot) characters in the filename, but the best solution in our\nopinion is to check if the final target filename, starts with the target\nfolder (after both are resolved to their absolute path).\n\nStay secure,\nSnyk Team",
        "before_after_code_files": [
          "src/SharpCompress/Archives/IArchiveEntryExtensions.cs||src/SharpCompress/Archives/IArchiveEntryExtensions.cs",
          "tests/SharpCompress.Test/Zip/ZipArchiveTests.cs||tests/SharpCompress.Test/Zip/ZipArchiveTests.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/adamhathcock/sharpcompress/pull/374"
        ],
        "olp_code_files": {
          "patch": [
            "src/SharpCompress/Archives/IArchiveEntryExtensions.cs||src/SharpCompress/Archives/IArchiveEntryExtensions.cs",
            "tests/SharpCompress.Test/Zip/ZipArchiveTests.cs||tests/SharpCompress.Test/Zip/ZipArchiveTests.cs"
          ],
          "candidate": [
            "src/SharpCompress/Archives/IArchiveEntryExtensions.cs||src/SharpCompress/Archives/IArchiveEntryExtensions.cs",
            "tests/SharpCompress.Test/Zip/ZipArchiveTests.cs||tests/SharpCompress.Test/Zip/ZipArchiveTests.cs"
          ]
        }
      },
      "candidate_diff": {
        "src/SharpCompress/Archives/IArchiveEntryExtensions.cs||src/SharpCompress/Archives/IArchiveEntryExtensions.cs": [
          "File: src/SharpCompress/Archives/IArchiveEntryExtensions.cs -> src/SharpCompress/Archives/IArchiveEntryExtensions.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         {",
          "49:             string destinationFileName;",
          "50:             string file = Path.GetFileName(entry.Key);",
          "52:             options = options ?? new ExtractionOptions()",
          "53:                                  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:             string fullDestinationDirectoryPath = Path.GetFullPath(destinationDirectory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:             if (options.ExtractFullPath)",
          "59:             {",
          "60:                 string folder = Path.GetDirectoryName(entry.Key);",
          "62:                 if (!Directory.Exists(destdir))",
          "63:                 {",
          "64:                     Directory.CreateDirectory(destdir);",
          "65:                 }",
          "66:                 destinationFileName = Path.Combine(destdir, file);",
          "67:             }",
          "68:             else",
          "69:             {",
          "71:             }",
          "72:             if (!entry.IsDirectory)",
          "73:             {",
          "74:                 entry.WriteToFile(destinationFileName, options);",
          "75:             }",
          "76:         }",
          "",
          "[Removed Lines]",
          "61:                 string destdir = Path.Combine(destinationDirectory, folder);",
          "70:                 destinationFileName = Path.Combine(destinationDirectory, file);",
          "",
          "[Added Lines]",
          "62:                 string destdir = Path.GetFullPath(",
          "63:                                     Path.Combine(fullDestinationDirectoryPath, folder)",
          "64:                                  );",
          "68:                     if (!destdir.StartsWith(fullDestinationDirectoryPath))",
          "69:                     {",
          "70:                         throw new ExtractionException(\"Entry is trying to create a directory outside of the destination directory.\");",
          "71:                     }",
          "79:                 destinationFileName = Path.Combine(fullDestinationDirectoryPath, file);",
          "84:                 destinationFileName = Path.GetFullPath(destinationFileName);",
          "86:                 if (!destinationFileName.StartsWith(fullDestinationDirectoryPath))",
          "87:                 {",
          "88:                     throw new ExtractionException(\"Entry is trying to write a file outside of the destination directory.\");",
          "89:                 }",
          "",
          "---------------"
        ],
        "tests/SharpCompress.Test/Zip/ZipArchiveTests.cs||tests/SharpCompress.Test/Zip/ZipArchiveTests.cs": [
          "File: tests/SharpCompress.Test/Zip/ZipArchiveTests.cs -> tests/SharpCompress.Test/Zip/ZipArchiveTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:                     }",
          "434:                 }",
          "435:             }",
          "437:         }",
          "439:         class NonSeekableMemoryStream : MemoryStream",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:         }",
          "438:         [Fact]",
          "439:         public void Zip_Evil_Throws_Exception()",
          "440:         {",
          "441:             Exception expectedExcetpion = null;",
          "442:             string zipFile = Path.Combine(TEST_ARCHIVES_PATH, \"Zip.Evil.zip\");",
          "444:             try",
          "445:             {",
          "446:                 using (var archive = ZipArchive.Open(zipFile))",
          "447:                 {",
          "448:                     foreach (var entry in archive.Entries.Where(entry => !entry.IsDirectory))",
          "449:                     {",
          "450:                         entry.WriteToDirectory(SCRATCH_FILES_PATH, new ExtractionOptions()",
          "451:                         {",
          "452:                             ExtractFullPath = true,",
          "453:                             Overwrite = true",
          "454:                         });",
          "455:                     }",
          "456:                 }",
          "457:             }",
          "458:             catch (Exception ex)",
          "459:             {",
          "460:                 expectedExcetpion = ex;",
          "461:             }",
          "463:             Assert.NotEqual(expectedExcetpion, null);",
          "",
          "---------------"
        ]
      }
    }
  ]
}