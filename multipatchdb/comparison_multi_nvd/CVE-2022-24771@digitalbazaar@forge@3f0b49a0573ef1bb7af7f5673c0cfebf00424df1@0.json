{
  "cve_id": "CVE-2022-24771",
  "cve_desc": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.",
  "repo": "digitalbazaar/forge",
  "patch_hash": "3f0b49a0573ef1bb7af7f5673c0cfebf00424df1",
  "patch_info": {
    "commit_hash": "3f0b49a0573ef1bb7af7f5673c0cfebf00424df1",
    "repo": "digitalbazaar/forge",
    "commit_url": "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1",
    "files": [
      "CHANGELOG.md",
      "lib/asn1.js",
      "lib/oids.js",
      "lib/rsa.js",
      "tests/unit/rsa.js"
    ],
    "message": "Fix signature verification issues.\n\n**SECURITY**: Three RSA PKCS#1 v1.5 signature verification issues were\nreported by Moosa Yahyazadeh (moosa-yahyazadeh@uiowa.edu):\n\n- Leniency in checking `digestAlgorithm` structure can lead to signature\n  forgery.\n  - The code is lenient in checking the digest algorithm structure. This can\n    allow a crafted structure that steals padding bytes and uses unchecked\n    portion of the PKCS#1 encoded message to forge a signature when a low\n    public exponent is being used.\n- Failing to check tailing garbage bytes can lead to signature forgery.\n  - The code does not check for tailing garbage bytes after decoding a\n    `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed\n    and garbage data added to forge a signature when a low public exponent is\n    being used.\n- Leniency in checking type octet.\n  - `DigestInfo` is not properly checked for proper ASN.1 structure. This can\n    lead to successful verification with signatures that contain invalid\n    structures but a valid digest.\n\nFor more information, please see \"Bleichenbacher's RSA signature forgery based\non implementation error\" by Hal Finney:\nhttps://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/\n\nFixed with the following:\n\n- [asn1] `fromDer` is now more strict and will default to ensuring all\n  input bytes are parsed or throw an error. A new option `parseAllBytes`\n  can disable this behavior.\n  - **NOTE**: The previous behavior is being changed since it can lead\n    to security issues with crafted inputs. It is possible that code\n    doing custom DER parsing may need to adapt to this new behavior and\n    optional flag.\n- [rsa] Add and use a validator to check for proper structure of parsed\n  ASN.1 `RSASSA-PKCS-v1_5` `DigestInfo` data. Additionally check that\n  the hash algorithm identifier is a known value. An invalid\n  `DigestInfo` or algorithm identifier will now cause an error to be\n  thrown.\n- [oid] Added `1.2.840.113549.2.2` / `md2` for hash algorithm checking.\n- [tests] Tests were added for all of the reported issues. A private\n  verify option was added to assist in checking multiple possible\n  failures in the test data.",
    "before_after_code_files": [
      "lib/asn1.js||lib/asn1.js",
      "lib/oids.js||lib/oids.js",
      "lib/rsa.js||lib/rsa.js",
      "tests/unit/rsa.js||tests/unit/rsa.js"
    ]
  },
  "patch_diff": {
    "lib/asn1.js||lib/asn1.js": [
      "File: lib/asn1.js -> lib/asn1.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "423: asn1.fromDer = function(bytes, options) {",
      "424:   if(options === undefined) {",
      "425:     options = {",
      "426:       strict: true,",
      "427:       decodeBitStrings: true",
      "428:     };",
      "429:   }",
      "430:   if(typeof options === 'boolean') {",
      "431:     options = {",
      "432:       strict: options,",
      "433:       decodeBitStrings: true",
      "434:     };",
      "435:   }",
      "436:   if(!('strict' in options)) {",
      "437:     options.strict = true;",
      "438:   }",
      "439:   if(!('decodeBitStrings' in options)) {",
      "440:     options.decodeBitStrings = true;",
      "441:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "431:       parseAllBytes: true,",
      "438:       parseAllBytes: true,",
      "445:   if(!('parseAllBytes' in options)) {",
      "446:     options.parseAllBytes = true;",
      "447:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "445:     bytes = forge.util.createBuffer(bytes);",
      "446:   }",
      "449: };",
      "",
      "[Removed Lines]",
      "448:   return _fromDer(bytes, bytes.length(), 0, options);",
      "",
      "[Added Lines]",
      "457:   var byteCount = bytes.length();",
      "458:   var value = _fromDer(bytes, bytes.length(), 0, options);",
      "459:   if(options.parseAllBytes && bytes.length() !== 0) {",
      "460:     var error = new Error('Unparsed DER bytes remain after ASN.1 parsing.');",
      "461:     error.byteCount = byteCount;",
      "462:     error.remaining = bytes.length();",
      "463:     throw error;",
      "464:   }",
      "465:   return value;",
      "",
      "---------------"
    ],
    "lib/oids.js||lib/oids.js": [
      "File: lib/oids.js -> lib/oids.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "47: _IN('2.16.840.1.101.3.4.2.1', 'sha256');",
      "48: _IN('2.16.840.1.101.3.4.2.2', 'sha384');",
      "49: _IN('2.16.840.1.101.3.4.2.3', 'sha512');",
      "50: _IN('1.2.840.113549.2.5', 'md5');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "50: _IN('1.2.840.113549.2.2', 'md2');",
      "",
      "---------------"
    ],
    "lib/rsa.js||lib/rsa.js": [
      "File: lib/rsa.js -> lib/rsa.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "264:   }]",
      "265: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268: var digestInfoValidator = {",
      "269:   name: 'DigestInfo',",
      "270:   tagClass: asn1.Class.UNIVERSAL,",
      "271:   type: asn1.Type.SEQUENCE,",
      "272:   constructed: true,",
      "273:   value: [{",
      "274:     name: 'DigestInfo.DigestAlgorithm',",
      "275:     tagClass: asn1.Class.UNIVERSAL,",
      "276:     type: asn1.Type.SEQUENCE,",
      "277:     constructed: true,",
      "278:     value: [{",
      "279:       name: 'DigestInfo.DigestAlgorithm.algorithmIdentifier',",
      "280:       tagClass: asn1.Class.UNIVERSAL,",
      "281:       type: asn1.Type.OID,",
      "282:       constructed: false,",
      "283:       capture: 'algorithmIdentifier'",
      "284:     }, {",
      "286:       name: 'DigestInfo.DigestAlgorithm.parameters',",
      "287:       tagClass: asn1.Class.UNIVERSAL,",
      "288:       type: asn1.Type.NULL,",
      "289:       constructed: false",
      "290:     }]",
      "291:   }, {",
      "293:     name: 'DigestInfo.digest',",
      "294:     tagClass: asn1.Class.UNIVERSAL,",
      "295:     type: asn1.Type.OCTETSTRING,",
      "296:     constructed: false,",
      "297:     capture: 'digest'",
      "298:   }]",
      "299: };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1099:     if(typeof scheme === 'string') {",
      "1100:       scheme = scheme.toUpperCase();",
      "1101:     } else if(scheme === undefined) {",
      "1102:       scheme = 'RSASSA-PKCS1-V1_5';",
      "1103:     }",
      "1105:     if(scheme === 'RSASSA-PKCS1-V1_5') {",
      "1106:       scheme = {",
      "",
      "[Removed Lines]",
      "1098:   key.verify = function(digest, signature, scheme) {",
      "",
      "[Added Lines]",
      "1136:   key.verify = function(digest, signature, scheme, options) {",
      "1142:     if(options === undefined) {",
      "1143:       options = {",
      "1144:         _parseAllDigestBytes: true",
      "1145:       };",
      "1146:     }",
      "1147:     if(!('_parseAllDigestBytes' in options)) {",
      "1148:       options._parseAllDigestBytes = true;",
      "1149:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1109:           d = _decodePkcs1_v1_5(d, key, true);",
      "1114:         }",
      "1115:       };",
      "1116:     } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {",
      "",
      "[Removed Lines]",
      "1111:           var obj = asn1.fromDer(d);",
      "1113:           return digest === obj.value[1].value;",
      "",
      "[Added Lines]",
      "1157:           var obj = asn1.fromDer(d, {",
      "1158:             parseAllBytes: options._parseAllDigestBytes",
      "1159:           });",
      "1162:           var capture = {};",
      "1163:           var errors = [];",
      "1164:           if(!asn1.validate(obj, digestInfoValidator, capture, errors)) {",
      "1165:             var error = new Error(",
      "1166:               'ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 ' +",
      "1167:               'DigestInfo value.');",
      "1168:             error.errors = errors;",
      "1169:             throw error;",
      "1170:           }",
      "1173:           var oid = asn1.derToOid(capture.algorithmIdentifier);",
      "1174:           if(!(oid === forge.oids.md2 ||",
      "1175:             oid === forge.oids.md5 ||",
      "1176:             oid === forge.oids.sha1 ||",
      "1177:             oid === forge.oids.sha256 ||",
      "1178:             oid === forge.oids.sha384 ||",
      "1179:             oid === forge.oids.sha512)) {",
      "1180:             var error = new Error(",
      "1181:               'Unknown RSASSA-PKCS1-v1_5 DigestAlgorithm identifier.');",
      "1182:             error.oid = oid;",
      "1183:             throw error;",
      "1184:           }",
      "1187:           return digest === capture.digest;",
      "",
      "---------------"
    ],
    "tests/unit/rsa.js||tests/unit/rsa.js": [
      "File: tests/unit/rsa.js -> tests/unit/rsa.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: var ASSERT = require('assert');",
      "2: var FORGE = require('../../lib/forge');",
      "3: var MD = require('../../lib/md.all');",
      "4: var MGF = require('../../lib/mgf');",
      "5: var PKI = require('../../lib/pki');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: var JSBN = require('../../lib/jsbn');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "773:         });",
      "774:       }",
      "775:     })();",
      "776:   });",
      "777: })();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "778:     describe('bad data', function() {",
      "782:       var N = new JSBN.BigInteger(",
      "783:         'E932AC92252F585B3A80A4DD76A897C8B7652952FE788F6EC8DD640587A1EE56' +",
      "784:         '47670A8AD4C2BE0F9FA6E49C605ADF77B5174230AF7BD50E5D6D6D6D28CCF0A8' +",
      "785:         '86A514CC72E51D209CC772A52EF419F6A953F3135929588EBE9B351FCA61CED7' +",
      "786:         '8F346FE00DBB6306E5C2A4C6DFC3779AF85AB417371CF34D8387B9B30AE46D7A' +",
      "787:         '5FF5A655B8D8455F1B94AE736989D60A6F2FD5CADBFFBD504C5A756A2E6BB5CE' +",
      "788:         'CC13BCA7503F6DF8B52ACE5C410997E98809DB4DC30D943DE4E812A47553DCE5' +",
      "789:         '4844A78E36401D13F77DC650619FED88D8B3926E3D8E319C80C744779AC5D6AB' +",
      "790:         'E252896950917476ECE5E8FC27D5F053D6018D91B502C4787558A002B9283DA7',",
      "791:         16);",
      "794:       var d = new JSBN.BigInteger(",
      "795:         '009b771db6c374e59227006de8f9c5ba85cf98c63754505f9f30939803afc149' +",
      "796:         '8eda44b1b1e32c7eb51519edbd9591ea4fce0f8175ca528e09939e48f37088a0' +",
      "797:         '7059c36332f74368c06884f718c9f8114f1b8d4cb790c63b09d46778bfdc4134' +",
      "798:         '8fb4cd9feab3d24204992c6dd9ea824fbca591cd64cf68a233ad0526775c9848' +",
      "799:         'fafa31528177e1f8df9181a8b945081106fd58bd3d73799b229575c4f3b29101' +",
      "800:         'a03ee1f05472b3615784d9244ce0ed639c77e8e212ab52abddf4a928224b6b6f' +",
      "801:         '74b7114786dd6071bd9113d7870c6b52c0bc8b9c102cfe321dac357e030ed6c5' +",
      "802:         '80040ca41c13d6b4967811807ef2a225983ea9f88d67faa42620f42a4f5bdbe0' +",
      "803:         '3b',",
      "804:         16);",
      "807:       var e = new JSBN.BigInteger('3');",
      "813:       var m = 'hello world!';",
      "821:       function _checkBadTailingGarbage(publicKey, S) {",
      "822:         var md = MD.sha256.create();",
      "823:         md.update(m);",
      "825:         ASSERT.throws(function() {",
      "826:           publicKey.verify(md.digest().getBytes(), S);",
      "827:         }, {",
      "828:           message: 'Unparsed DER bytes remain after ASN.1 parsing.'",
      "829:         });",
      "830:       }",
      "832:       function _checkBadDigestInfo(publicKey, S, skipTailingGarbage) {",
      "833:         var md = MD.sha256.create();",
      "834:         md.update(m);",
      "836:         ASSERT.throws(function() {",
      "837:           publicKey.verify(md.digest().getBytes(), S, undefined, {",
      "838:             _parseAllDigestBytes: !skipTailingGarbage",
      "839:           });",
      "840:         }, {",
      "841:           message: 'ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 DigestInfo value.'",
      "842:         });",
      "843:       }",
      "845:       it('should check DigestInfo structure', function() {",
      "846:         var publicKey = RSA.setPublicKey(N, e);",
      "847:         var S = UTIL.binary.hex.decode(",
      "848:           'e7410e05bdc38d1c72fab784be41df3d3de2ae83894d9ec86cb5fe343d5dc7d45df2a36fc60363faf32f0d37ab457648af40a48a6c53ae7af0575e92cb1ffc236d55e1325af8c71b3ac313f2630fb498b8e1546093aca1ed56026a96cb525d991159a2d6ccbfd5ef63ae718f8ace2469e357ccf3f6a048bbf9760f5fb36b9dd38fb330eab504f05078b83f5d8bd95dce8fccc6b46babd56f678300f2b39083e53e04e79f503358a6222f8dd66b561fea3a51ecf3be16c9e2ea6ba8aaed9fbe6ba510ff752e4529385f759d4d6120b15f65534248ed5bbb1307a7d0a9838329697f5fbae91f48e478dcbb77190f0d173b6cb8b1299cf4202570d25d11a7862b47');",
      "850:         _checkBadDigestInfo(publicKey, S);",
      "851:       });",
      "853:       it('should check tailing garbage and DigestInfo [1]', function() {",
      "854:         var publicKey = RSA.setPublicKey(N, e);",
      "855:         var S = UTIL.binary.hex.decode(",
      "856:           'c2ad2fa23c246ee98c453d69023e7ec05956b48bd0e287341ba9d342ad49b0fff2bcbb9adc50f1ccbfc54106305cc74a88db89ff94901a08359893a08426373e7949a8794798233445af6c48bc6ccbe278bdeb62c31e40c3bf0014af2faadcc9ed7885756789a5b95c2a355fbb3f04412f42e0f9ed335ab51af8f091a62aaaaf6577422220917daaece3ca2f4e66dc4e0574356762592052b406768c31c25cf4c1754e6da9dc3440e238c4f9b25cccc174dd1b17b027e0f9ce2763b86f0e6871690ddd018d2e774bc968c9c6e907a000daf5044ba31a0b9eefbd7b4b1ec466d20bc1dd3f020cb1091af6b476416da3024ea046b09fbbbc4d2355da9a2bc6ddb9');",
      "858:         _checkBadTailingGarbage(publicKey, S);",
      "859:         _checkBadDigestInfo(publicKey, S, true);",
      "860:       });",
      "862:       it('should check tailing garbage and DigestIfno [2]', function() {",
      "863:         var publicKey = RSA.setPublicKey(N, e);",
      "864:         var S = UTIL.binary.hex.decode(",
      "865:           'a7c5812d7fc0eef766a481aac18c8c48483daf9b5ffb6614bd98ebe4ecb746dd493cf5dd2cbe16ecaa0b52109b744930eda49316605fc823fd57a68b5b2c62e8c1b158b26e1547a2e33cdd79427d7c513f07d02261ffe43db197d8cddca2b5b43c1df85aaed6e91aadd44a46bff7f5c70f1acc1a193917e3908444632f30e69cfe95d8036d3b6ad318eefd3952804f16613c969e6d13604bb4e723dfad24c42c8d9b5b16a9f5a4b40dcf17b167d319017740f9cc0836436c14d51c3d8a697f1fa2b65196deb5c21b1559c7dea7f598007fa7320909825009f8bf376491c298d8155a382e967042db952e995d14b2f961e1b22f911d1b77895def1c7ef229c87e');",
      "867:         _checkBadTailingGarbage(publicKey, S);",
      "868:         _checkBadDigestInfo(publicKey, S, true);",
      "869:       });",
      "871:       it('should check tailing garbage and DigestInfo [e=3]', function() {",
      "872:         var N = new JSBN.BigInteger(",
      "873:           '29438513389594867490232201282478838726734464161887801289068585100507839535636256317277708295678804401391394313946142335874609638666081950936114152574870224034382561784743283763961349980806819078028975594777103388280272392844112380900374508170221075553517641170327441791034393719271744724924194371070527213991317221667249077972700842199037403799480569910844701030644322616045408039715278394572328099192023924503077673178227614549351191204851805076359472439160130994385433568113626206477097769842080459156024112389406200687233341779381667082591421496870666931268548504674362230725756397511775557878046572472650613407143');",
      "874:         var e = new JSBN.BigInteger('3');",
      "875:         var publicKey = RSA.setPublicKey(N, e);",
      "877:         var S = UTIL.binary.hex.decode(",
      "878:           '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002853ccc2cd32a8d430dd3bde37e70782ac82cdb7bce3c044219b50aefd689c20d3b840299f28e2fde6c67c8a7f9e528ac222fae947a6dee0d812e3c3b3452171717396e8bedc3132d92d8317e3593642640d1431ef');",
      "880:         _checkBadTailingGarbage(publicKey, S);",
      "881:         _checkBadDigestInfo(publicKey, S, true);",
      "882:       });",
      "884:       it('should check tailing garbage and DigestInfo [e=5]', function() {",
      "885:         var N = new JSBN.BigInteger(",
      "886:           '29438513389594867490232201282478838726734464161887801289068585100507839535636256317277708295678804401391394313946142335874609638666081950936114152574870224034382561784743283763961349980806819078028975594777103388280272392844112380900374508170221075553517641170327441791034393719271744724924194371070527213991317221667249077972700842199037403799480569910844701030644322616045408039715278394572328099192023924503077673178227614549351191204851805076359472439160130994385433568113626206477097769842080459156024112389406200687233341779381667082591421496870666931268548504674362230725756397511775557878046572472650613407143');",
      "887:         var e = new JSBN.BigInteger('5');",
      "888:         var publicKey = RSA.setPublicKey(N, e);",
      "890:         var S = UTIL.binary.hex.decode(",
      "891:           '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005475fe2681d7125972bd2c2f2c7ab7b8003b03d4a487d6dee07c14eb5212a9fe0071b93f84ba5bb4b0cfaf20c976b11d902013');",
      "893:         _checkBadTailingGarbage(publicKey, S);",
      "894:         _checkBadDigestInfo(publicKey, S, true);",
      "895:       });",
      "897:       it('should check tailing garbage and DigestInfo [e=17]', function() {",
      "898:         var N = new JSBN.BigInteger(",
      "899:           '928365641661298526294114382771769657905695995680009680444002258089796055192245321020911051590379097587133341820043795407471021630328875171430160513961779154294247563032373839871165519961382202811828883364651574763124699947662060849683176689286181021501400261976653416725246403933613615758181648971537689642956474563961490989544033629566558036444831495046301215543198107208071526376318961481739278769122885031686763776874806317352741548232110892401401727195758835975800106904020775937891505819798776295294696516670437057465296389148672556848624501468669295285428387365416747516180652630054765393335211528084329716917821726670549155619986875030049107668205064454104328601041931972319966348825621299693193542460060799067674344247887198933507132592770898312271636011037138984729256515515185153334743685479709085410902269777563691615719884708908509618352792737826421059819474305949001978916949447029010362775778664826653636547333219983468955600305523140183269580452792812503399042201081785972707218144968460623663922470814889738564730816412201128810370324070680245854669130551872958017494277468722193869883705529583737211815974801292292728082721785855274147991979220001018156560009927148374995236030383474031418802554714043680969417015155298092390680188406177667101020936206754551985229636814788735090951246816765035721775759652424641736739668936540450232814857289312589998505627375553038062765493408460941597629291231866042662108291164359496334978563287523685872262509560463225096226739991402761266388226652661345282274508037924611589455395655512013078629375186805951823181371561289129616028768733583565439798508002546685505512478002960132511531323264596144585611962969372672455541953777622436993987703564293487820434112162562492086865147598436647725445230861246093950020099084994990632102506848190196407855705745530407617253129971665939853842224965079537303198339986953399517682750248394628026225887174258267456078564070387327653989505416943226163989004419377363130466566387761757272563996086708621913140580687414698126490572618509858141748692837570235128900627675422927964369356691123905362222855545719945605604307263252851081309622569225811979426856464673233875589085773616373798857001344093594417138323005260179781153950803127773817702016534081581157881295739782000814998795398671806283018844936919299070562538763900037469485135699677248580365379125702903186174995651938469412191388327852955727869345476087173047665259892129895247785416834855450881318585909376917039');",
      "900:         var e = new JSBN.BigInteger('17');",
      "901:         var publicKey = RSA.setPublicKey(N, e);",
      "903:         var S = UTIL.binary.hex.decode(",
eb90acbec1bf590ba1e50960db8381fb5bdc363d46379d09956560a616b88616ce7fa4309dc45f47f5fa47d61bf66baa3d11732ce71768ded295f962');",
      "906:         _checkBadTailingGarbage(publicKey, S);",
      "907:         _checkBadDigestInfo(publicKey, S, true);",
      "908:       });",
      "910:       it('should check DigestInfo type octet [1]', function() {",
      "911:         var publicKey = RSA.setPublicKey(N, e);",
      "912:         var S = UTIL.binary.hex.decode(",
      "913:           'd8298a199e1b6ac18f3c0067a004bd9ff7af87be6ad857d73cc3d24ef06195b82aaddb0194f8e61fc31453b9163062255e8baf9c480200d0991a5f764f63d5f6afd283b9cd6afe54f0b7f738707b4eb6b8807539bb627e74db87a50413ab18e504e37975aad1edc612bc8ecad53b81ea249deb5a2acc27e6419c61ab9acec6608f5ae6a2985ba0b6f42d831bc6cce4b044864154b935cf179967d129e0ad8eda9bfbb638121c3ff13c64d439632e62250d4be928a3deb112ef76a025c5d918051e601878eac0049fc9d82be9ae3475deb7ca515c830c20b91b7bedf2184fef66aea0bde62ccd1659afbfd1342322b095309451b1a87e007e640e368fb68a13c9');",
      "915:         _checkBadDigestInfo(publicKey, S);",
      "916:       });",
      "918:       it('should check DigestInfo type octet [2]', function() {",
      "919:         var publicKey = RSA.setPublicKey(N, e);",
      "920:         var S = UTIL.binary.hex.decode(",
      "921:           'c1acdd3aef5f0439c254980295fc0d81b628df00726310a1041d79b5dd94c11d3bcaf0236763c77c25d9ab49522ed2a7d6ea3a4e483a29838acd48f2d60a790275f4cd46e4b1d09c527a426ec373e8a21746ad3ea541d3b85ba4c303ff793ea8a0a3458e93a7ec42ed66f675d7c299b0817ac95f7f45b2f48c09b3c070171f31a33ac789da9943da5dabcda1c95b42531d45484ac1efde0fe0519077debb93183e63de8f80d7f3cbfecb03cbb44ac4a2d56699e33fca0663b79ca627755fc4fc684b4ab358a0b4ac5b7e9d0cc18b6ab6300b40781502a1c03d34f31dd19d81195f8a44bc03a2595a706f06f0cb39b8e3f4afe06675fe7439b057f1200a06f4fd');",
      "923:         _checkBadDigestInfo(publicKey, S);",
      "924:       });",
      "925:     });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4fbc010f1ad451b2fdacc9fa32007743e56ae13",
      "candidate_info": {
        "commit_hash": "b4fbc010f1ad451b2fdacc9fa32007743e56ae13",
        "repo": "digitalbazaar/forge",
        "commit_url": "https://github.com/digitalbazaar/forge/commit/b4fbc010f1ad451b2fdacc9fa32007743e56ae13",
        "files": [
          "CHANGELOG.md",
          "lib/asn1.js",
          "lib/pbe.js",
          "lib/pkcs12.js",
          "lib/pkcs7.js",
          "lib/pki.js",
          "lib/tls.js",
          "lib/x509.js",
          "tests/unit/pkcs7.js",
          "tests/unit/rsa.js"
        ],
        "message": "Support PEM BER data with unparsed trailing data.\n\n- [asn1] Add `fromPemBer()` call that is more permissive than `fromDer()` and\n  allows trailing data.\n  - [RFC 7468](https://www.rfc-editor.org/rfc/rfc7468) PEM data is BER encoded.\n    The RFC recommends to prefer DER over BER encoding throughout and is\n    described in Appendix B.\n  - PKCS#7 PEM data with trailing zeros appears in the wild. This may be\n    intentional, but unneeded, padding. In any case, it should be accepted.\n  - Recent `node-forge` releases made `fromDer` more strict to by default throw\n    an error when not all data is decoded. `fromDer` is used in many places\n    even for BER data, but in this case an alternate is needed to allow for at\n    least this trailing data.\n  - The API is named `fromPemBer` rather than `fromBer` since it is currently\n    intended to handle only the subset of PEM BER that is DER data followed by\n    possible unparsed bytes.\n  - **NOTE**: This API may not handle all PEM BER data. If other data in wild\n    is found that needs better support please file an issue with an example.\n\n- Calls to `asn1.fromDer` that occurred on data from `pem.decode()`, or\n  similar, now use `asn1.fromPemBer` to be more permissive in allowing possible\n  trailing or padding bytes.\n\n- [asn1] `fromDer` error message changed to reflect also using the API with BER\n  data. Changed from `'Unparsed DER bytes remain after ASN.1 parsing.'` to\n  `'Unparsed bytes remain after ASN.1 parsing.'`.",
        "before_after_code_files": [
          "lib/asn1.js||lib/asn1.js",
          "lib/pbe.js||lib/pbe.js",
          "lib/pkcs12.js||lib/pkcs12.js",
          "lib/pkcs7.js||lib/pkcs7.js",
          "lib/pki.js||lib/pki.js",
          "lib/tls.js||lib/tls.js",
          "lib/x509.js||lib/x509.js",
          "tests/unit/pkcs7.js||tests/unit/pkcs7.js",
          "tests/unit/rsa.js||tests/unit/rsa.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/asn1.js||lib/asn1.js",
            "tests/unit/rsa.js||tests/unit/rsa.js"
          ],
          "candidate": [
            "lib/asn1.js||lib/asn1.js",
            "tests/unit/rsa.js||tests/unit/rsa.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/asn1.js||lib/asn1.js": [
          "File: lib/asn1.js -> lib/asn1.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "457:   var byteCount = bytes.length();",
          "458:   var value = _fromDer(bytes, bytes.length(), 0, options);",
          "459:   if(options.parseAllBytes && bytes.length() !== 0) {",
          "461:     error.byteCount = byteCount;",
          "462:     error.remaining = bytes.length();",
          "463:     throw error;",
          "",
          "[Removed Lines]",
          "460:     var error = new Error('Unparsed DER bytes remain after ASN.1 parsing.');",
          "",
          "[Added Lines]",
          "460:     var error = new Error('Unparsed bytes remain after ASN.1 parsing.');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "465:   return value;",
          "466: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "496: asn1.fromPemBer = function(bytes, options) {",
          "497:   if(options === undefined) {",
          "498:     options = {",
          "499:       parseAllBytes: false",
          "500:     };",
          "501:   }",
          "502:   if(!('parseAllBytes' in options)) {",
          "503:     options.parseAllBytes = false;",
          "504:   }",
          "506:   return asn1.fromDer(bytes, options);",
          "507: };",
          "",
          "---------------"
        ],
        "lib/pbe.js||lib/pbe.js": [
          "File: lib/pbe.js -> lib/pbe.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:       'PEM is encrypted.');",
          "422:   }",
          "426: };",
          "",
          "[Removed Lines]",
          "425:   return asn1.fromDer(msg.body);",
          "",
          "[Added Lines]",
          "425:   return asn1.fromPemBer(msg.body);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "616:     rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);",
          "617:   } else {",
          "620:   }",
          "622:   if(rval !== null) {",
          "",
          "[Removed Lines]",
          "619:     rval = asn1.fromDer(rval);",
          "",
          "[Added Lines]",
          "619:     rval = asn1.fromPemBer(rval);",
          "",
          "---------------"
        ],
        "lib/pkcs12.js||lib/pkcs12.js": [
          "File: lib/pkcs12.js -> lib/pkcs12.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "519: function _decodeAuthenticatedSafe(pfx, authSafe, strict, password) {",
          "522:   if(authSafe.tagClass !== asn1.Class.UNIVERSAL ||",
          "523:      authSafe.type !== asn1.Type.SEQUENCE ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521:   authSafe = asn1.fromDer(authSafe, strict);",
          "",
          "---------------"
        ],
        "lib/pkcs7.js||lib/pkcs7.js": [
          "File: lib/pkcs7.js -> lib/pkcs7.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     throw new Error('Could not convert PKCS#7 message from PEM; PEM is encrypted.');",
          "54:   }",
          "59:   return p7.messageFromAsn1(obj);",
          "60: };",
          "",
          "[Removed Lines]",
          "57:   var obj = asn1.fromDer(msg.body);",
          "",
          "[Added Lines]",
          "57:   var obj = asn1.fromPemBer(msg.body);",
          "",
          "---------------"
        ],
        "lib/pki.js||lib/pki.js": [
          "File: lib/pki.js -> lib/pki.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     throw new Error('Could not convert private key from PEM; PEM is encrypted.');",
          "62:   }",
          "67:   return pki.privateKeyFromAsn1(obj);",
          "68: };",
          "",
          "[Removed Lines]",
          "65:   var obj = asn1.fromDer(msg.body);",
          "",
          "[Added Lines]",
          "65:   var obj = asn1.fromPemBer(msg.body);",
          "",
          "---------------"
        ],
        "lib/tls.js||lib/tls.js": [
          "File: lib/tls.js -> lib/tls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2904:         var der = forge.util.createBuffer(msg.body);",
          "2905:         if(asn1 === null) {",
          "2907:         }",
          "",
          "[Removed Lines]",
          "2906:           asn1 = forge.asn1.fromDer(der.bytes(), false);",
          "",
          "[Added Lines]",
          "2906:           asn1 = forge.asn1.fromPemBer(der.bytes(), {strict: false});",
          "",
          "---------------"
        ],
        "lib/x509.js||lib/x509.js": [
          "File: lib/x509.js -> lib/x509.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "816:       'Could not convert certificate from PEM; PEM is encrypted.');",
          "817:   }",
          "822:   return pki.certificateFromAsn1(obj, computeHash);",
          "823: };",
          "",
          "[Removed Lines]",
          "820:   var obj = asn1.fromDer(msg.body, strict);",
          "",
          "[Added Lines]",
          "820:   var obj = asn1.fromPemBer(msg.body, {strict: strict});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "859:     throw new Error('Could not convert public key from PEM; PEM is encrypted.');",
          "860:   }",
          "865:   return pki.publicKeyFromAsn1(obj);",
          "866: };",
          "",
          "[Removed Lines]",
          "863:   var obj = asn1.fromDer(msg.body);",
          "",
          "[Added Lines]",
          "863:   var obj = asn1.fromPemBer(msg.body);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "977:       'PEM is encrypted.');",
          "978:   }",
          "983:   return pki.certificationRequestFromAsn1(obj, computeHash);",
          "984: };",
          "",
          "[Removed Lines]",
          "981:   var obj = asn1.fromDer(msg.body, strict);",
          "",
          "[Added Lines]",
          "981:   var obj = asn1.fromPemBer(msg.body, {strict: strict});",
          "",
          "---------------"
        ],
        "tests/unit/pkcs7.js||tests/unit/pkcs7.js": [
          "File: tests/unit/pkcs7.js -> tests/unit/pkcs7.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:       'gEAm2mfSF5xFPLEqqFkvKTM4w8PfhnF0ehmfQNApvoWQRQanNWLCT+Q9GHx6DCFj\\r\\n' +",
          "25:       'TUHl+53x88BrCl1E7FhYPs92\\r\\n' +",
          "26:       '-----END PKCS7-----\\r\\n',",
          "27:     certificate:",
          "28:       '-----BEGIN CERTIFICATE-----\\r\\n' +",
          "29:       'MIIDtDCCApwCCQDUVBxA2DXi8zANBgkqhkiG9w0BAQUFADCBmzELMAkGA1UEBhMC\\r\\n' +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:     p7ZeroPadded:",
          "28:       '-----BEGIN PKCS7-----\\r\\n' +",
          "29:       'MIICTgYJKoZIhvcNAQcDoIICPzCCAjsCAQAxggHGMIIBwgIBADCBqTCBmzELMAkG\\r\\n' +",
          "30:       'A1UEBhMCREUxEjAQBgNVBAgMCUZyYW5jb25pYTEQMA4GA1UEBwwHQW5zYmFjaDEV\\r\\n' +",
          "31:       'MBMGA1UECgwMU3RlZmFuIFNpZWdsMRIwEAYDVQQLDAlHZWllcmxlaW4xFjAUBgNV\\r\\n' +",
          "32:       'BAMMDUdlaWVybGVpbiBERVYxIzAhBgkqhkiG9w0BCQEWFHN0ZXNpZUBicm9rZW5w\\r\\n' +",
          "33:       'aXBlLmRlAgkA1FQcQNg14vMwDQYJKoZIhvcNAQEBBQAEggEAJhWQz5SniCd1w3A8\\r\\n' +",
          "34:       'uKVZEfc8Tp21I7FMfFqou+UOVsZCq7kcEa9uv2DIj3o7zD8wbLK1fuyFi4SJxTwx\\r\\n' +",
          "35:       'kR0a6V4bbonIpXPPJ1f615dc4LydAi2tv5w14LJ1Js5XCgGVnkAmQHDaW3EHXB7X\\r\\n' +",
          "36:       'T4w9PR3+tcS/5YAnWaM6Es38zCKHd7TnHpuakplIkwSK9rBFAyA1g/IyTPI+ktrE\\r\\n' +",
          "37:       'EHcVuJcz/7eTlF6wJEa2HL8F1TVWuL0p/0GsJP/8y0MYGdCdtr+TIVo//3YGhoBl\\r\\n' +",
          "38:       'N4tnheFT/jRAzfCZtflDdgAukW24CekrJ1sG2M42p5cKQ5rGFQtzNy/n8EjtUutO\\r\\n' +",
          "39:       'HD5YITBsBgkqhkiG9w0BBwEwHQYJYIZIAWUDBAEqBBBmlpfy3WrYj3uWW7+xNEiH\\r\\n' +",
          "40:       'gEAm2mfSF5xFPLEqqFkvKTM4w8PfhnF0ehmfQNApvoWQRQanNWLCT+Q9GHx6DCFj\\r\\n' +",
          "41:       'TUHl+53x88BrCl1E7FhYPs92AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n' +",
          "42:       '-----END PKCS7-----\\r\\n',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412:       ASSERT.equal(p7.encryptedContent.parameter.data.length, 16); // IV",
          "413:     });",
          "415:     it('should import indefinite length message from PEM', function() {",
          "416:       ASSERT.doesNotThrow(function() {",
          "417:         var p7 = PKCS7.messageFromPem(_pem.p7IndefiniteLength);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "431:     it('should import padded message from PEM', function() {",
          "432:       ASSERT.doesNotThrow(function() {",
          "433:         var p7 = PKCS7.messageFromPem(_pem.p7);",
          "434:         var p7ZeroPadded = PKCS7.messageFromPem(_pem.p7ZeroPadded);",
          "435:         ASSERT.deepEqual(p7.type, p7ZeroPadded.type);",
          "436:         ASSERT.deepEqual(p7.version, p7ZeroPadded.version);",
          "437:         ASSERT.deepEqual(p7.recipients, p7ZeroPadded.recipients);",
          "438:         ASSERT.deepEqual(p7.encryptedContent, p7ZeroPadded.encryptedContent);",
          "439:         ASSERT.deepEqual(p7.rawCapture, p7ZeroPadded.rawCapture);",
          "440:       });",
          "441:     });",
          "",
          "---------------"
        ],
        "tests/unit/rsa.js||tests/unit/rsa.js": [
          "File: tests/unit/rsa.js -> tests/unit/rsa.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "830:         ASSERT.throws(function() {",
          "831:           publicKey.verify(md.digest().getBytes(), S);",
          "832:         },",
          "834:       }",
          "836:       function _checkBadDigestInfo(publicKey, S, skipTailingGarbage) {",
          "",
          "[Removed Lines]",
          "833:         /^Error: Unparsed DER bytes remain after ASN.1 parsing.$/);",
          "",
          "[Added Lines]",
          "833:         /^Error: Unparsed bytes remain after ASN.1 parsing.$/);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4405bb9d6b638084df478fa4ac60a410332c2d8",
      "candidate_info": {
        "commit_hash": "a4405bb9d6b638084df478fa4ac60a410332c2d8",
        "repo": "digitalbazaar/forge",
        "commit_url": "https://github.com/digitalbazaar/forge/commit/a4405bb9d6b638084df478fa4ac60a410332c2d8",
        "files": [
          "tests/unit/rsa.js"
        ],
        "message": "Improve signature verification tests.\n\n- Attribute tests to Moosa Yahyazadeh (moosa-yahyazadeh@uiowa.edu)\n- Add some details from initial report until it can be included in full.\n- Line wrap test data.",
        "before_after_code_files": [
          "tests/unit/rsa.js||tests/unit/rsa.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/unit/rsa.js||tests/unit/rsa.js"
          ],
          "candidate": [
            "tests/unit/rsa.js||tests/unit/rsa.js"
          ]
        }
      },
      "candidate_diff": {
        "tests/unit/rsa.js||tests/unit/rsa.js": [
          "File: tests/unit/rsa.js -> tests/unit/rsa.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "775:       }",
          "776:     })();",
          "",
          "[Removed Lines]",
          "778:     describe('bad data', function() {",
          "",
          "[Added Lines]",
          "778:     describe('signature verification', function() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "845:       it('should check DigestInfo structure', function() {",
          "846:         var publicKey = RSA.setPublicKey(N, e);",
          "847:         var S = UTIL.binary.hex.decode(",
          "850:         _checkBadDigestInfo(publicKey, S);",
          "851:       });",
          "853:       it('should check tailing garbage and DigestInfo [1]', function() {",
          "854:         var publicKey = RSA.setPublicKey(N, e);",
          "855:         var S = UTIL.binary.hex.decode(",
          "858:         _checkBadTailingGarbage(publicKey, S);",
          "859:         _checkBadDigestInfo(publicKey, S, true);",
          "860:       });",
          "863:         var publicKey = RSA.setPublicKey(N, e);",
          "864:         var S = UTIL.binary.hex.decode(",
          "867:         _checkBadTailingGarbage(publicKey, S);",
          "868:         _checkBadDigestInfo(publicKey, S, true);",
          "869:       });",
          "871:       it('should check tailing garbage and DigestInfo [e=3]', function() {",
          "872:         var N = new JSBN.BigInteger(",
          "874:         var e = new JSBN.BigInteger('3');",
          "875:         var publicKey = RSA.setPublicKey(N, e);",
          "877:         var S = UTIL.binary.hex.decode(",
          "880:         _checkBadTailingGarbage(publicKey, S);",
          "881:         _checkBadDigestInfo(publicKey, S, true);",
          "882:       });",
          "884:       it('should check tailing garbage and DigestInfo [e=5]', function() {",
          "885:         var N = new JSBN.BigInteger(",
          "887:         var e = new JSBN.BigInteger('5');",
          "888:         var publicKey = RSA.setPublicKey(N, e);",
          "890:         var S = UTIL.binary.hex.decode(",
          "893:         _checkBadTailingGarbage(publicKey, S);",
          "894:         _checkBadDigestInfo(publicKey, S, true);",
          "895:       });",
          "897:       it('should check tailing garbage and DigestInfo [e=17]', function() {",
          "898:         var N = new JSBN.BigInteger(",
          "900:         var e = new JSBN.BigInteger('17');",
          "901:         var publicKey = RSA.setPublicKey(N, e);",
          "903:         var S = UTIL.binary.hex.decode(",
          "906:         _checkBadTailingGarbage(publicKey, S);",
          "907:         _checkBadDigestInfo(publicKey, S, true);",
          "",
          "[Removed Lines]",
          "848:           'e7410e05bdc38d1c72fab784be41df3d3de2ae83894d9ec86cb5fe343d5dc7d45df2a36fc60363faf32f0d37ab457648af40a48a6c53ae7af0575e92cb1ffc236d55e1325af8c71b3ac313f2630fb498b8e1546093aca1ed56026a96cb525d991159a2d6ccbfd5ef63ae718f8ace2469e357ccf3f6a048bbf9760f5fb36b9dd38fb330eab504f05078b83f5d8bd95dce8fccc6b46babd56f678300f2b39083e53e04e79f503358a6222f8dd66b561fea3a51ecf3be16c9e2ea6ba8aaed9fbe6ba510ff752e4529385f759d4d6120b15f65534248ed5bbb1307a7d0a9838329697f5fbae91f48e478dcbb77190f0d173b6cb8b1299cf4202570d25d11a7862b47');",
          "856:           'c2ad2fa23c246ee98c453d69023e7ec05956b48bd0e287341ba9d342ad49b0fff2bcbb9adc50f1ccbfc54106305cc74a88db89ff94901a08359893a08426373e7949a8794798233445af6c48bc6ccbe278bdeb62c31e40c3bf0014af2faadcc9ed7885756789a5b95c2a355fbb3f04412f42e0f9ed335ab51af8f091a62aaaaf6577422220917daaece3ca2f4e66dc4e0574356762592052b406768c31c25cf4c1754e6da9dc3440e238c4f9b25cccc174dd1b17b027e0f9ce2763b86f0e6871690ddd018d2e774bc968c9c6e907a000daf5044ba31a0b9eefbd7b4b1ec466d20bc1dd3f020cb1091af6b476416da3024ea046b09fbbbc4d2355da9a2bc6ddb9');",
          "862:       it('should check tailing garbage and DigestIfno [2]', function() {",
          "865:           'a7c5812d7fc0eef766a481aac18c8c48483daf9b5ffb6614bd98ebe4ecb746dd493cf5dd2cbe16ecaa0b52109b744930eda49316605fc823fd57a68b5b2c62e8c1b158b26e1547a2e33cdd79427d7c513f07d02261ffe43db197d8cddca2b5b43c1df85aaed6e91aadd44a46bff7f5c70f1acc1a193917e3908444632f30e69cfe95d8036d3b6ad318eefd3952804f16613c969e6d13604bb4e723dfad24c42c8d9b5b16a9f5a4b40dcf17b167d319017740f9cc0836436c14d51c3d8a697f1fa2b65196deb5c21b1559c7dea7f598007fa7320909825009f8bf376491c298d8155a382e967042db952e995d14b2f961e1b22f911d1b77895def1c7ef229c87e');",
          "873:           '29438513389594867490232201282478838726734464161887801289068585100507839535636256317277708295678804401391394313946142335874609638666081950936114152574870224034382561784743283763961349980806819078028975594777103388280272392844112380900374508170221075553517641170327441791034393719271744724924194371070527213991317221667249077972700842199037403799480569910844701030644322616045408039715278394572328099192023924503077673178227614549351191204851805076359472439160130994385433568113626206477097769842080459156024112389406200687233341779381667082591421496870666931268548504674362230725756397511775557878046572472650613407143');",
          "878:           '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002853ccc2cd32a8d430dd3bde37e70782ac82cdb7bce3c044219b50aefd689c20d3b840299f28e2fde6c67c8a7f9e528ac222fae947a6dee0d812e3c3b3452171717396e8bedc3132d92d8317e3593642640d1431ef');",
          "886:           '29438513389594867490232201282478838726734464161887801289068585100507839535636256317277708295678804401391394313946142335874609638666081950936114152574870224034382561784743283763961349980806819078028975594777103388280272392844112380900374508170221075553517641170327441791034393719271744724924194371070527213991317221667249077972700842199037403799480569910844701030644322616045408039715278394572328099192023924503077673178227614549351191204851805076359472439160130994385433568113626206477097769842080459156024112389406200687233341779381667082591421496870666931268548504674362230725756397511775557878046572472650613407143');",
          "891:           '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005475fe2681d7125972bd2c2f2c7ab7b8003b03d4a487d6dee07c14eb5212a9fe0071b93f84ba5bb4b0cfaf20c976b11d902013');",
          "899:           '928365641661298526294114382771769657905695995680009680444002258089796055192245321020911051590379097587133341820043795407471021630328875171430160513961779154294247563032373839871165519961382202811828883364651574763124699947662060849683176689286181021501400261976653416725246403933613615758181648971537689642956474563961490989544033629566558036444831495046301215543198107208071526376318961481739278769122885031686763776874806317352741548232110892401401727195758835975800106904020775937891505819798776295294696516670437057465296389148672556848624501468669295285428387365416747516180652630054765393335211528084329716917821726670549155619986875030049107668205064454104328601041931972319966348825621299693193542460060799067674344247887198933507132592770898312271636011037138984729256515515185153334743685479709085410902269777563691615719884708908509618352792737826421059819474305949001978916949447029010362775778664826653636547333219983468955600305523140183269580452792812503399042201081785972707218144968460623663922470814889738564730816412201128810370324070680245854669130551872958017494277468722193869883705529583737211815974801292292728082721785855274147991979220001018156560009927148374995236030383474031418802554714043680969417015155298092390680188406177667101020936206754551985229636814788735090951246816765035721775759652424641736739668936540450232814857289312589998505627375553038062765493408460941597629291231866042662108291164359496334978563287523685872262509560463225096226739991402761266388226652661345282274508037924611589455395655512013078629375186805951823181371561289129616028768733583565439798508002546685505512478002960132511531323264596144585611962969372672455541953777622436993987703564293487820434112162562492086865147598436647725445230861246093950020099084994990632102506848190196407855705745530407617253129971665939853842224965079537303198339986953399517682750248394628026225887174258267456078564070387327653989505416943226163989004419377363130466566387761757272563996086708621913140580687414698126490572618509858141748692837570235128900627675422927964369356691123905362222855545719945605604307263252851081309622569225811979426856464673233875589085773616373798857001344093594417138323005260179781153950803127773817702016534081581157881295739782000814998795398671806283018844936919299070562538763900037469485135699677248580365379125702903186174995651938469412191388327852955727869345476087173047665259892129895247785416834855450881318585909376917039');",
eb90acbec1bf590ba1e50960db8381fb5bdc363d46379d09956560a616b88616ce7fa4309dc45f47f5fa47d61bf66baa3d11732ce71768ded295f962');",
          "",
          "[Added Lines]",
          "861:         var I = UTIL.binary.hex.decode(",
          "862:           '0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "863:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "864:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "865:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0030' +",
          "866:           '7f065b8888888888888888888888888888888888888888888888888888888888' +",
          "867:           '8888888888888888888888888888888888888888888888888888888888888888' +",
          "868:           '8888888888888888888888888888888888888888888888888888888888880420' +",
          "869:           '7509e5bda0c762d2bac7f90d758b5b2263fa01ccbc542ab5e3df163be08e6ca9');",
          "871:           'e7410e05bdc38d1c72fab784be41df3d3de2ae83894d9ec86cb5fe343d5dc7d4' +",
          "872:           '5df2a36fc60363faf32f0d37ab457648af40a48a6c53ae7af0575e92cb1ffc23' +",
          "873:           '6d55e1325af8c71b3ac313f2630fb498b8e1546093aca1ed56026a96cb525d99' +",
          "874:           '1159a2d6ccbfd5ef63ae718f8ace2469e357ccf3f6a048bbf9760f5fb36b9dd3' +",
          "875:           '8fb330eab504f05078b83f5d8bd95dce8fccc6b46babd56f678300f2b39083e5' +",
          "876:           '3e04e79f503358a6222f8dd66b561fea3a51ecf3be16c9e2ea6ba8aaed9fbe6b' +",
          "877:           'a510ff752e4529385f759d4d6120b15f65534248ed5bbb1307a7d0a983832969' +",
          "878:           '7f5fbae91f48e478dcbb77190f0d173b6cb8b1299cf4202570d25d11a7862b47');",
          "889:         var I = UTIL.binary.hex.decode(",
          "890:           '000100302f300b060960864801650304020104207509e5bda0c762d2bac7f90d' +",
          "891:           '758b5b2263fa01ccbc542ab5e3df163be08e6ca9888888888888888888888888' +",
          "892:           '8888888888888888888888888888888888888888888888888888888888888888' +",
          "893:           '8888888888888888888888888888888888888888888888888888888888888888' +",
          "894:           '8888888888888888888888888888888888888888888888888888888888888888' +",
          "895:           '8888888888888888888888888888888888888888888888888888888888888888' +",
          "896:           '8888888888888888888888888888888888888888888888888888888888888888' +",
          "897:           '8888888888888888888888888888888888888888888888888888888888888888');",
          "899:           'c2ad2fa23c246ee98c453d69023e7ec05956b48bd0e287341ba9d342ad49b0ff' +",
          "900:           'f2bcbb9adc50f1ccbfc54106305cc74a88db89ff94901a08359893a08426373e' +",
          "901:           '7949a8794798233445af6c48bc6ccbe278bdeb62c31e40c3bf0014af2faadcc9' +",
          "902:           'ed7885756789a5b95c2a355fbb3f04412f42e0f9ed335ab51af8f091a62aaaaf' +",
          "903:           '6577422220917daaece3ca2f4e66dc4e0574356762592052b406768c31c25cf4' +",
          "904:           'c1754e6da9dc3440e238c4f9b25cccc174dd1b17b027e0f9ce2763b86f0e6871' +",
          "905:           '690ddd018d2e774bc968c9c6e907a000daf5044ba31a0b9eefbd7b4b1ec466d2' +",
          "906:           '0bc1dd3f020cb1091af6b476416da3024ea046b09fbbbc4d2355da9a2bc6ddb9');",
          "912:       it('should check tailing garbage and DigestInfo [2]', function() {",
          "920:         var I = UTIL.binary.hex.decode(",
          "921:           '0001003024010004207509e5bda0c762d2bac7f90d758b5b2263fa01ccbc542a' +",
          "922:           'b5e3df163be08e6ca98888888888888888888888888888888888888888888888' +",
          "923:           '8888888888888888888888888888888888888888888888888888888888888888' +",
          "924:           '8888888888888888888888888888888888888888888888888888888888888888' +",
          "925:           '8888888888888888888888888888888888888888888888888888888888888888' +",
          "926:           '8888888888888888888888888888888888888888888888888888888888888888' +",
          "927:           '8888888888888888888888888888888888888888888888888888888888888888' +",
          "928:           '8888888888888888888888888888888888888888888888888888888888888888');",
          "930:           'a7c5812d7fc0eef766a481aac18c8c48483daf9b5ffb6614bd98ebe4ecb746dd' +",
          "931:           '493cf5dd2cbe16ecaa0b52109b744930eda49316605fc823fd57a68b5b2c62e8' +",
          "932:           'c1b158b26e1547a2e33cdd79427d7c513f07d02261ffe43db197d8cddca2b5b4' +",
          "933:           '3c1df85aaed6e91aadd44a46bff7f5c70f1acc1a193917e3908444632f30e69c' +",
          "934:           'fe95d8036d3b6ad318eefd3952804f16613c969e6d13604bb4e723dfad24c42c' +",
          "935:           '8d9b5b16a9f5a4b40dcf17b167d319017740f9cc0836436c14d51c3d8a697f1f' +",
          "936:           'a2b65196deb5c21b1559c7dea7f598007fa7320909825009f8bf376491c298d8' +",
          "937:           '155a382e967042db952e995d14b2f961e1b22f911d1b77895def1c7ef229c87e');",
          "949:           '2943851338959486749023220128247883872673446416188780128906858510' +",
          "950:           '0507839535636256317277708295678804401391394313946142335874609638' +",
          "951:           '6660819509361141525748702240343825617847432837639613499808068190' +",
          "952:           '7802897559477710338828027239284411238090037450817022107555351764' +",
          "953:           '1170327441791034393719271744724924194371070527213991317221667249' +",
          "954:           '0779727008421990374037994805699108447010306443226160454080397152' +",
          "955:           '7839457232809919202392450307767317822761454935119120485180507635' +",
          "956:           '9472439160130994385433568113626206477097769842080459156024112389' +",
          "957:           '4062006872333417793816670825914214968706669312685485046743622307' +",
          "958:           '25756397511775557878046572472650613407143');",
          "963:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "964:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "965:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "966:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "967:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "968:           '00000000000000000000002853ccc2cd32a8d430dd3bde37e70782ac82cdb7bc' +",
          "969:           'e3c044219b50aefd689c20d3b840299f28e2fde6c67c8a7f9e528ac222fae947' +",
          "970:           'a6dee0d812e3c3b3452171717396e8bedc3132d92d8317e3593642640d1431ef');",
          "982:           '2943851338959486749023220128247883872673446416188780128906858510' +",
          "983:           '0507839535636256317277708295678804401391394313946142335874609638' +",
          "984:           '6660819509361141525748702240343825617847432837639613499808068190' +",
          "985:           '7802897559477710338828027239284411238090037450817022107555351764' +",
          "986:           '1170327441791034393719271744724924194371070527213991317221667249' +",
          "987:           '0779727008421990374037994805699108447010306443226160454080397152' +",
          "988:           '7839457232809919202392450307767317822761454935119120485180507635' +",
          "989:           '9472439160130994385433568113626206477097769842080459156024112389' +",
          "990:           '4062006872333417793816670825914214968706669312685485046743622307' +",
          "991:           '25756397511775557878046572472650613407143');",
          "996:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "997:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "998:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "999:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1000:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1001:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1002:           '000000000000000000000000005475fe2681d7125972bd2c2f2c7ab7b8003b03' +",
          "1003:           'd4a487d6dee07c14eb5212a9fe0071b93f84ba5bb4b0cfaf20c976b11d902013');",
          "1015:           '9283656416612985262941143827717696579056959956800096804440022580' +",
          "1016:           '8979605519224532102091105159037909758713334182004379540747102163' +",
          "1017:           '0328875171430160513961779154294247563032373839871165519961382202' +",
          "1018:           '8118288833646515747631246999476620608496831766892861810215014002' +",
          "1019:           '6197665341672524640393361361575818164897153768964295647456396149' +",
          "1020:           '0989544033629566558036444831495046301215543198107208071526376318' +",
          "1021:           '9614817392787691228850316867637768748063173527415482321108924014' +",
          "1022:           '0172719575883597580010690402077593789150581979877629529469651667' +",
          "1023:           '0437057465296389148672556848624501468669295285428387365416747516' +",
          "1024:           '1806526300547653933352115280843297169178217266705491556199868750' +",
          "1025:           '3004910766820506445410432860104193197231996634882562129969319354' +",
          "1026:           '2460060799067674344247887198933507132592770898312271636011037138' +",
          "1027:           '9847292565155151851533347436854797090854109022697775636916157198' +",
          "1028:           '8470890850961835279273782642105981947430594900197891694944702901' +",
          "1029:           '0362775778664826653636547333219983468955600305523140183269580452' +",
          "1030:           '7928125033990422010817859727072181449684606236639224708148897385' +",
          "1031:           '6473081641220112881037032407068024585466913055187295801749427746' +",
          "1032:           '8722193869883705529583737211815974801292292728082721785855274147' +",
          "1033:           '9919792200010181565600099271483749952360303834740314188025547140' +",
          "1034:           '4368096941701515529809239068018840617766710102093620675455198522' +",
          "1035:           '9636814788735090951246816765035721775759652424641736739668936540' +",
          "1036:           '4502328148572893125899985056273755530380627654934084609415976292' +",
          "1037:           '9123186604266210829116435949633497856328752368587226250956046322' +",
          "1038:           '5096226739991402761266388226652661345282274508037924611589455395' +",
          "1039:           '6555120130786293751868059518231813715612891296160287687335835654' +",
          "1040:           '3979850800254668550551247800296013251153132326459614458561196296' +",
          "1041:           '9372672455541953777622436993987703564293487820434112162562492086' +",
          "1042:           '8651475984366477254452308612460939500200990849949906321025068481' +",
          "1043:           '9019640785570574553040761725312997166593985384222496507953730319' +",
          "1044:           '8339986953399517682750248394628026225887174258267456078564070387' +",
          "1045:           '3276539895054169432261639890044193773631304665663877617572725639' +",
          "1046:           '9608670862191314058068741469812649057261850985814174869283757023' +",
          "1047:           '5128900627675422927964369356691123905362222855545719945605604307' +",
          "1048:           '2632528510813096225692258119794268564646732338755890857736163737' +",
          "1049:           '9885700134409359441713832300526017978115395080312777381770201653' +",
          "1050:           '4081581157881295739782000814998795398671806283018844936919299070' +",
          "1051:           '5625387639000374694851356996772485803653791257029031861749956519' +",
          "1052:           '3846941219138832785295572786934547608717304766525989212989524778' +",
          "1053:           '5416834855450881318585909376917039');",
          "1058:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1059:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1060:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1061:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1062:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1063:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1064:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1065:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1066:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1067:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1068:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1069:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1070:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1071:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1072:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1073:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1074:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1075:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1076:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1077:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1078:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1079:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1080:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1081:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1082:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1083:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1084:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1085:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1086:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1087:           '0000000000000000000000000000000000000000000000000000000000000000' +",
          "1088:           '00000001eb90acbec1bf590ba1e50960db8381fb5bdc363d46379d09956560a6' +",
          "1089:           '16b88616ce7fa4309dc45f47f5fa47d61bf66baa3d11732ce71768ded295f962');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "910:       it('should check DigestInfo type octet [1]', function() {",
          "911:         var publicKey = RSA.setPublicKey(N, e);",
          "912:         var S = UTIL.binary.hex.decode(",
          "915:         _checkBadDigestInfo(publicKey, S);",
          "916:       });",
          "918:       it('should check DigestInfo type octet [2]', function() {",
          "919:         var publicKey = RSA.setPublicKey(N, e);",
          "920:         var S = UTIL.binary.hex.decode(",
          "923:         _checkBadDigestInfo(publicKey, S);",
          "924:       });",
          "",
          "[Removed Lines]",
          "913:           'd8298a199e1b6ac18f3c0067a004bd9ff7af87be6ad857d73cc3d24ef06195b82aaddb0194f8e61fc31453b9163062255e8baf9c480200d0991a5f764f63d5f6afd283b9cd6afe54f0b7f738707b4eb6b8807539bb627e74db87a50413ab18e504e37975aad1edc612bc8ecad53b81ea249deb5a2acc27e6419c61ab9acec6608f5ae6a2985ba0b6f42d831bc6cce4b044864154b935cf179967d129e0ad8eda9bfbb638121c3ff13c64d439632e62250d4be928a3deb112ef76a025c5d918051e601878eac0049fc9d82be9ae3475deb7ca515c830c20b91b7bedf2184fef66aea0bde62ccd1659afbfd1342322b095309451b1a87e007e640e368fb68a13c9');",
          "921:           'c1acdd3aef5f0439c254980295fc0d81b628df00726310a1041d79b5dd94c11d3bcaf0236763c77c25d9ab49522ed2a7d6ea3a4e483a29838acd48f2d60a790275f4cd46e4b1d09c527a426ec373e8a21746ad3ea541d3b85ba4c303ff793ea8a0a3458e93a7ec42ed66f675d7c299b0817ac95f7f45b2f48c09b3c070171f31a33ac789da9943da5dabcda1c95b42531d45484ac1efde0fe0519077debb93183e63de8f80d7f3cbfecb03cbb44ac4a2d56699e33fca0663b79ca627755fc4fc684b4ab358a0b4ac5b7e9d0cc18b6ab6300b40781502a1c03d34f31dd19d81195f8a44bc03a2595a706f06f0cb39b8e3f4afe06675fe7439b057f1200a06f4fd');",
          "",
          "[Added Lines]",
          "1099:         var I = UTIL.binary.hex.decode(",
          "1100:           '0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "1101:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "1102:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "1103:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "1104:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "1105:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "1106:           'ffffffffffffffffffffffff0030310c0d060960864801650304020105000420' +",
          "1107:           '7509e5bda0c762d2bac7f90d758b5b2263fa01ccbc542ab5e3df163be08e6ca9');",
          "1109:           'd8298a199e1b6ac18f3c0067a004bd9ff7af87be6ad857d73cc3d24ef06195b8' +",
          "1110:           '2aaddb0194f8e61fc31453b9163062255e8baf9c480200d0991a5f764f63d5f6' +",
          "1111:           'afd283b9cd6afe54f0b7f738707b4eb6b8807539bb627e74db87a50413ab18e5' +",
          "1112:           '04e37975aad1edc612bc8ecad53b81ea249deb5a2acc27e6419c61ab9acec660' +",
          "1113:           '8f5ae6a2985ba0b6f42d831bc6cce4b044864154b935cf179967d129e0ad8eda' +",
          "1114:           '9bfbb638121c3ff13c64d439632e62250d4be928a3deb112ef76a025c5d91805' +",
          "1115:           '1e601878eac0049fc9d82be9ae3475deb7ca515c830c20b91b7bedf2184fef66' +",
          "1116:           'aea0bde62ccd1659afbfd1342322b095309451b1a87e007e640e368fb68a13c9');",
          "1125:         var I = UTIL.binary.hex.decode(",
          "1126:           '0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "1127:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "1128:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "1129:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "1130:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "1131:           'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +",
          "1132:           'ffffffffffffffffffffffff003031300d060960864801650304020105000a20' +",
          "1133:           '7509e5bda0c762d2bac7f90d758b5b2263fa01ccbc542ab5e3df163be08e6ca9');",
          "1135:           'c1acdd3aef5f0439c254980295fc0d81b628df00726310a1041d79b5dd94c11d' +",
          "1136:           '3bcaf0236763c77c25d9ab49522ed2a7d6ea3a4e483a29838acd48f2d60a7902' +",
          "1137:           '75f4cd46e4b1d09c527a426ec373e8a21746ad3ea541d3b85ba4c303ff793ea8' +",
          "1138:           'a0a3458e93a7ec42ed66f675d7c299b0817ac95f7f45b2f48c09b3c070171f31' +",
          "1139:           'a33ac789da9943da5dabcda1c95b42531d45484ac1efde0fe0519077debb9318' +",
          "1140:           '3e63de8f80d7f3cbfecb03cbb44ac4a2d56699e33fca0663b79ca627755fc4fc' +",
          "1141:           '684b4ab358a0b4ac5b7e9d0cc18b6ab6300b40781502a1c03d34f31dd19d8119' +",
          "1142:           '5f8a44bc03a2595a706f06f0cb39b8e3f4afe06675fe7439b057f1200a06f4fd');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc77b39dd347e7f8b60a0f25a311fe5f06130579",
      "candidate_info": {
        "commit_hash": "dc77b39dd347e7f8b60a0f25a311fe5f06130579",
        "repo": "digitalbazaar/forge",
        "commit_url": "https://github.com/digitalbazaar/forge/commit/dc77b39dd347e7f8b60a0f25a311fe5f06130579",
        "files": [
          "tests/unit/rsa.js"
        ],
        "message": "Fix error checking.\n\n- Newer object style not available in older platforms.\n- Using message regex style.",
        "before_after_code_files": [
          "tests/unit/rsa.js||tests/unit/rsa.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/unit/rsa.js||tests/unit/rsa.js"
          ],
          "candidate": [
            "tests/unit/rsa.js||tests/unit/rsa.js"
          ]
        }
      },
      "candidate_diff": {
        "tests/unit/rsa.js||tests/unit/rsa.js": [
          "File: tests/unit/rsa.js -> tests/unit/rsa.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "830:         ASSERT.throws(function() {",
          "831:           publicKey.verify(md.digest().getBytes(), S);",
          "835:       }",
          "837:       function _checkBadDigestInfo(publicKey, S, skipTailingGarbage) {",
          "",
          "[Removed Lines]",
          "832:         }, {",
          "833:           message: 'Unparsed DER bytes remain after ASN.1 parsing.'",
          "834:         });",
          "",
          "[Added Lines]",
          "832:         },",
          "833:         /^Error: Unparsed DER bytes remain after ASN.1 parsing.$/);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "842:           publicKey.verify(md.digest().getBytes(), S, undefined, {",
          "843:             _parseAllDigestBytes: !skipTailingGarbage",
          "844:           });",
          "848:       }",
          "850:       it('should check DigestInfo structure', function() {",
          "",
          "[Removed Lines]",
          "845:         }, {",
          "846:           message: 'ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 DigestInfo value.'",
          "847:         });",
          "",
          "[Added Lines]",
          "844:         },",
          "845:         /^Error: ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 DigestInfo value.$/);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "740954d747ac56b76a6e1ae12a057c9548843436",
      "candidate_info": {
        "commit_hash": "740954d747ac56b76a6e1ae12a057c9548843436",
        "repo": "digitalbazaar/forge",
        "commit_url": "https://github.com/digitalbazaar/forge/commit/740954d747ac56b76a6e1ae12a057c9548843436",
        "files": [
          "CHANGELOG.md",
          "lib/rsa.js",
          "tests/unit/rsa.js"
        ],
        "message": "Allow optional DigestAlgorithm parameters.\n\nRFC 3447 and RFC 8017 allow for optional `DigestAlgorithm` `NULL`\nparameters for `sha*` algorithms and require `NULL` paramters for `md2`\nand `md5` algorithms.",
        "before_after_code_files": [
          "lib/rsa.js||lib/rsa.js",
          "tests/unit/rsa.js||tests/unit/rsa.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/rsa.js||lib/rsa.js",
            "tests/unit/rsa.js||tests/unit/rsa.js"
          ],
          "candidate": [
            "lib/rsa.js||lib/rsa.js",
            "tests/unit/rsa.js||tests/unit/rsa.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/rsa.js||lib/rsa.js": [
          "File: lib/rsa.js -> lib/rsa.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:       name: 'DigestInfo.DigestAlgorithm.parameters',",
          "287:       tagClass: asn1.Class.UNIVERSAL,",
          "288:       type: asn1.Type.NULL,",
          "289:       optional: true,",
          "290:       constructed: false",
          "291:     }]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:       capture: 'parameters',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1188:             throw error;",
          "1189:           }",
          "1192:           return digest === capture.digest;",
          "1193:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1194:           if(oid === forge.oids.md2 || oid === forge.oids.md5) {",
          "1195:             if(!('parameters' in capture)) {",
          "1196:               throw new Error(",
          "1197:                 'ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 ' +",
          "1198:                 'DigestInfo value. ' +",
          "1199:                 'Missing algorithm identifer NULL parameters.');",
          "1200:             }",
          "1201:           }",
          "",
          "---------------"
        ],
        "tests/unit/rsa.js||tests/unit/rsa.js": [
          "File: tests/unit/rsa.js -> tests/unit/rsa.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "845:         /^Error: ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 DigestInfo value.$/);",
          "846:       }",
          "848:       it('should check DigestInfo structure', function() {",
          "849:         var publicKey = RSA.setPublicKey(N, e);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "848:       function _checkGoodDigestInfo(publicKey, S, skipTailingGarbage) {",
          "849:         var md = MD.sha256.create();",
          "850:         md.update(m);",
          "852:         ASSERT.ok(publicKey.verify(md.digest().getBytes(), S, undefined, {",
          "853:           _parseAllDigestBytes: !skipTailingGarbage",
          "854:         }));",
          "855:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "904:           '0bc1dd3f020cb1091af6b476416da3024ea046b09fbbbc4d2355da9a2bc6ddb9');",
          "906:         _checkBadTailingGarbage(publicKey, S);",
          "908:       });",
          "910:       it('should check tailing garbage and DigestInfo [2]', function() {",
          "",
          "[Removed Lines]",
          "907:         _checkBadDigestInfo(publicKey, S, true);",
          "",
          "[Added Lines]",
          "916:         _checkGoodDigestInfo(publicKey, S, true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa9372d6dd78eb1479392b9274457036c2404b66",
      "candidate_info": {
        "commit_hash": "aa9372d6dd78eb1479392b9274457036c2404b66",
        "repo": "digitalbazaar/forge",
        "commit_url": "https://github.com/digitalbazaar/forge/commit/aa9372d6dd78eb1479392b9274457036c2404b66",
        "files": [
          "CHANGELOG.md",
          "lib/oids.js",
          "lib/rsa.js"
        ],
        "message": "Add missing RFC 8017 algorithm identifiers.",
        "before_after_code_files": [
          "lib/oids.js||lib/oids.js",
          "lib/rsa.js||lib/rsa.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/oids.js||lib/oids.js",
            "lib/rsa.js||lib/rsa.js"
          ],
          "candidate": [
            "lib/oids.js||lib/oids.js",
            "lib/rsa.js||lib/rsa.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/oids.js||lib/oids.js": [
          "File: lib/oids.js -> lib/oids.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: _IN('2.16.840.1.101.3.4.2.1', 'sha256');",
          "48: _IN('2.16.840.1.101.3.4.2.2', 'sha384');",
          "49: _IN('2.16.840.1.101.3.4.2.3', 'sha512');",
          "50: _IN('1.2.840.113549.2.2', 'md2');",
          "51: _IN('1.2.840.113549.2.5', 'md5');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: _IN('2.16.840.1.101.3.4.2.4', 'sha224');",
          "51: _IN('2.16.840.1.101.3.4.2.5', 'sha512-224');",
          "52: _IN('2.16.840.1.101.3.4.2.6', 'sha512-256');",
          "",
          "---------------"
        ],
        "lib/rsa.js||lib/rsa.js": [
          "File: lib/rsa.js -> lib/rsa.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1169:             throw error;",
          "1170:           }",
          "1173:           var oid = asn1.derToOid(capture.algorithmIdentifier);",
          "1174:           if(!(oid === forge.oids.md2 ||",
          "1175:             oid === forge.oids.md5 ||",
          "1176:             oid === forge.oids.sha1 ||",
          "1177:             oid === forge.oids.sha256 ||",
          "1178:             oid === forge.oids.sha384 ||",
          "1180:             var error = new Error(",
          "1181:               'Unknown RSASSA-PKCS1-v1_5 DigestAlgorithm identifier.');",
          "1182:             error.oid = oid;",
          "",
          "[Removed Lines]",
          "1179:             oid === forge.oids.sha512)) {",
          "",
          "[Added Lines]",
          "1178:             oid === forge.oids.sha224 ||",
          "1181:             oid === forge.oids.sha512 ||",
          "1182:             oid === forge.oids['sha512-224'] ||",
          "1183:             oid === forge.oids['sha512-256'])) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}