{
  "cve_id": "CVE-2024-6095",
  "cve_desc": "A vulnerability in the /models/apply endpoint of mudler/localai versions 2.15.0 allows for Server-Side Request Forgery (SSRF) and partial Local File Inclusion (LFI). The endpoint supports both http(s):// and file:// schemes, where the latter can lead to LFI. However, the output is limited due to the length of the error message. This vulnerability can be exploited by an attacker with network access to the LocalAI instance, potentially allowing unauthorized access to internal HTTP(s) servers and partial reading of local files. The issue is fixed in version 2.17.",
  "repo": "mudler/localai",
  "patch_hash": "2fc6fe806b903ac0a70218b21b5c84443a1b0866",
  "patch_info": {
    "commit_hash": "2fc6fe806b903ac0a70218b21b5c84443a1b0866",
    "repo": "mudler/localai",
    "commit_url": "https://github.com/mudler/localai/commit/2fc6fe806b903ac0a70218b21b5c84443a1b0866",
    "files": [
      "core/http/app_test.go",
      "core/services/gallery.go",
      "embedded/embedded.go",
      "pkg/downloader/uri.go",
      "pkg/downloader/uri_test.go",
      "pkg/gallery/gallery.go",
      "pkg/gallery/models.go",
      "pkg/gallery/request_test.go",
      "pkg/startup/model_preload.go"
    ],
    "message": "fix: `pkg/downloader` should respect basePath for `file://` urls (#2481)\n\n* pass basePath down to pkg/downloader\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* enforce\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n---------\n\nSigned-off-by: Dave Lee <dave@gray101.com>",
    "before_after_code_files": [
      "core/http/app_test.go||core/http/app_test.go",
      "core/services/gallery.go||core/services/gallery.go",
      "embedded/embedded.go||embedded/embedded.go",
      "pkg/downloader/uri.go||pkg/downloader/uri.go",
      "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go",
      "pkg/gallery/gallery.go||pkg/gallery/gallery.go",
      "pkg/gallery/models.go||pkg/gallery/models.go",
      "pkg/gallery/request_test.go||pkg/gallery/request_test.go",
      "pkg/startup/model_preload.go||pkg/startup/model_preload.go"
    ]
  },
  "patch_diff": {
    "core/http/app_test.go||core/http/app_test.go": [
      "File: core/http/app_test.go -> core/http/app_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "73: }",
      "75: func getModels(url string) (response []gallery.GalleryModel) {",
      "78:   return json.Unmarshal(i, &response)",
      "79:  })",
      "",
      "[Removed Lines]",
      "76:  downloader.GetURI(url, func(url string, i []byte) error {",
      "",
      "[Added Lines]",
      "77:  downloader.GetURI(url, \"\", func(url string, i []byte) error {",
      "",
      "---------------"
    ],
    "core/services/gallery.go||core/services/gallery.go": [
      "File: core/services/gallery.go -> core/services/gallery.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: func prepareModel(modelPath string, req gallery.GalleryModel, cl *config.BackendConfigLoader, downloadStatus func(string, string, string, float64)) error {",
      "36:  if err != nil {",
      "37:   return err",
      "38:  }",
      "",
      "[Removed Lines]",
      "35:  config, err := gallery.GetGalleryConfigFromURL(req.URL)",
      "",
      "[Added Lines]",
      "35:  config, err := gallery.GetGalleryConfigFromURL(req.URL, modelPath)",
      "",
      "---------------"
    ],
    "embedded/embedded.go||embedded/embedded.go": [
      "File: embedded/embedded.go -> embedded/embedded.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:  }",
      "37: }",
      "40:  remoteLibrary := map[string]string{}",
      "43:   return yaml.Unmarshal(i, &remoteLibrary)",
      "44:  })",
      "45:  if err != nil {",
      "",
      "[Removed Lines]",
      "39: func GetRemoteLibraryShorteners(url string) (map[string]string, error) {",
      "42:  err := downloader.GetURI(url, func(_ string, i []byte) error {",
      "",
      "[Added Lines]",
      "39: func GetRemoteLibraryShorteners(url string, basePath string) (map[string]string, error) {",
      "42:  err := downloader.GetURI(url, basePath, func(_ string, i []byte) error {",
      "",
      "---------------"
    ],
    "pkg/downloader/uri.go||pkg/downloader/uri.go": [
      "File: pkg/downloader/uri.go -> pkg/downloader/uri.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:  GithubURI2        = \"github://\"",
      "24: )",
      "27:  url = ConvertURL(url)",
      "29:  if strings.HasPrefix(url, \"file://\") {",
      "",
      "[Removed Lines]",
      "26: func GetURI(url string, f func(url string, i []byte) error) error {",
      "",
      "[Added Lines]",
      "26: func GetURI(url string, basePath string, f func(url string, i []byte) error) error {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "33:   if err != nil {",
      "34:    return err",
      "35:   }",
      "37:   body, err := os.ReadFile(resolvedFile)",
      "38:   if err != nil {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37:   err = utils.VerifyPath(resolvedFile, basePath)",
      "38:   if err != nil {",
      "39:    return err",
      "40:   }",
      "",
      "---------------"
    ],
    "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go": [
      "File: pkg/downloader/uri_test.go -> pkg/downloader/uri_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:  Context(\"URI\", func() {",
      "11:   It(\"parses github with a branch\", func() {",
      "12:    Expect(",
      "14:      Expect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))",
      "15:      return nil",
      "16:     }),",
      "",
      "[Removed Lines]",
      "13:     GetURI(\"github:go-skynet/model-gallery/gpt4all-j.yaml\", func(url string, i []byte) error {",
      "",
      "[Added Lines]",
      "13:     GetURI(\"github:go-skynet/model-gallery/gpt4all-j.yaml\", \"\", func(url string, i []byte) error {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "18:   })",
      "19:   It(\"parses github without a branch\", func() {",
      "20:    Expect(",
      "22:      Expect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))",
      "23:      return nil",
      "24:     }),",
      "",
      "[Removed Lines]",
      "21:     GetURI(\"github:go-skynet/model-gallery/gpt4all-j.yaml@main\", func(url string, i []byte) error {",
      "",
      "[Added Lines]",
      "21:     GetURI(\"github:go-skynet/model-gallery/gpt4all-j.yaml@main\", \"\", func(url string, i []byte) error {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "26:   })",
      "27:   It(\"parses github with urls\", func() {",
      "28:    Expect(",
      "30:      Expect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))",
      "31:      return nil",
      "32:     }),",
      "",
      "[Removed Lines]",
      "29:     GetURI(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\", func(url string, i []byte) error {",
      "",
      "[Added Lines]",
      "29:     GetURI(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\", \"\", func(url string, i []byte) error {",
      "",
      "---------------"
    ],
    "pkg/gallery/gallery.go||pkg/gallery/gallery.go": [
      "File: pkg/gallery/gallery.go -> pkg/gallery/gallery.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:   if len(model.URL) > 0 {",
      "29:    var err error",
      "31:    if err != nil {",
      "32:     return err",
      "33:    }",
      "",
      "[Removed Lines]",
      "30:    config, err = GetGalleryConfigFromURL(model.URL)",
      "",
      "[Added Lines]",
      "30:    config, err = GetGalleryConfigFromURL(model.URL, basePath)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:  return models, nil",
      "143: }",
      "146:  var refFile string",
      "148:   refFile = string(d)",
      "149:   if len(refFile) == 0 {",
      "150:    return fmt.Errorf(\"invalid reference file at url %s: %s\", url, d)",
      "",
      "[Removed Lines]",
      "145: func findGalleryURLFromReferenceURL(url string) (string, error) {",
      "147:  err := downloader.GetURI(url, func(url string, d []byte) error {",
      "",
      "[Added Lines]",
      "145: func findGalleryURLFromReferenceURL(url string, basePath string) (string, error) {",
      "147:  err := downloader.GetURI(url, basePath, func(url string, d []byte) error {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "162:  if strings.HasSuffix(gallery.URL, \".ref\") {",
      "163:   var err error",
      "165:   if err != nil {",
      "166:    return models, err",
      "167:   }",
      "168:  }",
      "171:   return yaml.Unmarshal(d, &models)",
      "172:  })",
      "173:  if err != nil {",
      "",
      "[Removed Lines]",
      "164:   gallery.URL, err = findGalleryURLFromReferenceURL(gallery.URL)",
      "170:  err := downloader.GetURI(gallery.URL, func(url string, d []byte) error {",
      "",
      "[Added Lines]",
      "164:   gallery.URL, err = findGalleryURLFromReferenceURL(gallery.URL, basePath)",
      "170:  err := downloader.GetURI(gallery.URL, basePath, func(url string, d []byte) error {",
      "",
      "---------------"
    ],
    "pkg/gallery/models.go||pkg/gallery/models.go": [
      "File: pkg/gallery/models.go -> pkg/gallery/models.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "63:  Content string `yaml:\"content\"`",
      "64: }",
      "67:  var config Config",
      "69:   return yaml.Unmarshal(d, &config)",
      "70:  })",
      "71:  if err != nil {",
      "",
      "[Removed Lines]",
      "66: func GetGalleryConfigFromURL(url string) (Config, error) {",
      "68:  err := downloader.GetURI(url, func(url string, d []byte) error {",
      "",
      "[Added Lines]",
      "66: func GetGalleryConfigFromURL(url string, basePath string) (Config, error) {",
      "68:  err := downloader.GetURI(url, basePath, func(url string, d []byte) error {",
      "",
      "---------------"
    ],
    "pkg/gallery/request_test.go||pkg/gallery/request_test.go": [
      "File: pkg/gallery/request_test.go -> pkg/gallery/request_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:  Context(\"requests\", func() {",
      "11:   It(\"parses github with a branch\", func() {",
      "12:    req := GalleryModel{URL: \"github:go-skynet/model-gallery/gpt4all-j.yaml@main\"}",
      "14:    Expect(err).ToNot(HaveOccurred())",
      "15:    Expect(e.Name).To(Equal(\"gpt4all-j\"))",
      "16:   })",
      "",
      "[Removed Lines]",
      "13:    e, err := GetGalleryConfigFromURL(req.URL)",
      "",
      "[Added Lines]",
      "13:    e, err := GetGalleryConfigFromURL(req.URL, \"\")",
      "",
      "---------------"
    ],
    "pkg/startup/model_preload.go||pkg/startup/model_preload.go": [
      "File: pkg/startup/model_preload.go -> pkg/startup/model_preload.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "22:   if modelLibraryURL != \"\" {",
      "24:    if err == nil {",
      "25:     if lib[url] != \"\" {",
      "26:      log.Debug().Msgf(\"[startup] model configuration is defined remotely: %s (%s)\", url, lib[url])",
      "",
      "[Removed Lines]",
      "23:    lib, err := embedded.GetRemoteLibraryShorteners(modelLibraryURL)",
      "",
      "[Added Lines]",
      "23:    lib, err := embedded.GetRemoteLibraryShorteners(modelLibraryURL, modelPath)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "90cacb9692f3dc374766b0e32f75be8229a47db3",
      "candidate_info": {
        "commit_hash": "90cacb9692f3dc374766b0e32f75be8229a47db3",
        "repo": "mudler/localai",
        "commit_url": "https://github.com/mudler/localai/commit/90cacb9692f3dc374766b0e32f75be8229a47db3",
        "files": [
          ".devcontainer-scripts/utils.sh",
          "Dockerfile",
          "Makefile",
          "core/gallery/gallery.go",
          "core/gallery/models.go",
          "core/http/app.go",
          "core/http/app_test.go",
          "core/http/middleware/auth.go",
          "embedded/embedded.go",
          "go.mod",
          "pkg/downloader/uri.go",
          "pkg/downloader/uri_test.go"
        ],
        "message": "test: preliminary tests and merge fix for authv2 (#3584)\n\n* add api key to existing app tests, add preliminary auth test\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* small fix, run test\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* status on non-opaque\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* tweak auth error\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* exp\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* quick fix on real laptop\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* add downloader version that allows providing an auth header\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* stash some devcontainer fixes during testing\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* s2\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* s\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* done with experiment\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* done with experiment\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* after merge fix\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* rename and fix\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n---------\n\nSigned-off-by: Dave Lee <dave@gray101.com>\nCo-authored-by: Ettore Di Giacinto <mudler@users.noreply.github.com>",
        "before_after_code_files": [
          ".devcontainer-scripts/utils.sh||.devcontainer-scripts/utils.sh",
          "core/gallery/gallery.go||core/gallery/gallery.go",
          "core/gallery/models.go||core/gallery/models.go",
          "core/http/app.go||core/http/app.go",
          "core/http/app_test.go||core/http/app_test.go",
          "core/http/middleware/auth.go||core/http/middleware/auth.go",
          "embedded/embedded.go||embedded/embedded.go",
          "go.mod||go.mod",
          "pkg/downloader/uri.go||pkg/downloader/uri.go",
          "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/http/app_test.go||core/http/app_test.go",
            "embedded/embedded.go||embedded/embedded.go",
            "pkg/downloader/uri.go||pkg/downloader/uri.go",
            "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go"
          ],
          "candidate": [
            "core/http/app_test.go||core/http/app_test.go",
            "embedded/embedded.go||embedded/embedded.go",
            "pkg/downloader/uri.go||pkg/downloader/uri.go",
            "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go"
          ]
        }
      },
      "candidate_diff": {
        ".devcontainer-scripts/utils.sh||.devcontainer-scripts/utils.sh": [
          "File: .devcontainer-scripts/utils.sh -> .devcontainer-scripts/utils.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: # Param 2: email",
          "10: #",
          "11: config_user() {",
          "12:     local gcn=$(git config --global user.name)",
          "13:     if [ -z \"${gcn}\" ]; then",
          "14:         echo \"Setting up git user / remote\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:     echo \"Configuring git for $1 <$2>\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: # Param 2: remote url",
          "25: #",
          "26: config_remote() {",
          "27:     local gr=$(git remote -v | grep $1)",
          "28:     if [ -z \"${gr}\" ]; then",
          "29:         git remote add $1 $2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:     echo \"Adding git remote and fetching $2 as $1\"",
          "",
          "---------------"
        ],
        "core/gallery/gallery.go||core/gallery/gallery.go": [
          "File: core/gallery/gallery.go -> core/gallery/gallery.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: func findGalleryURLFromReferenceURL(url string, basePath string) (string, error) {",
          "133:  var refFile string",
          "134:  uri := downloader.URI(url)",
          "136:   refFile = string(d)",
          "137:   if len(refFile) == 0 {",
          "138:    return fmt.Errorf(\"invalid reference file at url %s: %s\", url, d)",
          "",
          "[Removed Lines]",
          "135:  err := uri.DownloadAndUnmarshal(basePath, func(url string, d []byte) error {",
          "",
          "[Added Lines]",
          "135:  err := uri.DownloadWithCallback(basePath, func(url string, d []byte) error {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:  }",
          "157:  uri := downloader.URI(gallery.URL)",
          "160:   return yaml.Unmarshal(d, &models)",
          "161:  })",
          "162:  if err != nil {",
          "",
          "[Removed Lines]",
          "159:  err := uri.DownloadAndUnmarshal(basePath, func(url string, d []byte) error {",
          "",
          "[Added Lines]",
          "159:  err := uri.DownloadWithCallback(basePath, func(url string, d []byte) error {",
          "",
          "---------------"
        ],
        "core/gallery/models.go||core/gallery/models.go": [
          "File: core/gallery/models.go -> core/gallery/models.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: func GetGalleryConfigFromURL(url string, basePath string) (Config, error) {",
          "70:  var config Config",
          "71:  uri := downloader.URI(url)",
          "73:   return yaml.Unmarshal(d, &config)",
          "74:  })",
          "75:  if err != nil {",
          "",
          "[Removed Lines]",
          "72:  err := uri.DownloadAndUnmarshal(basePath, func(url string, d []byte) error {",
          "",
          "[Added Lines]",
          "72:  err := uri.DownloadWithCallback(basePath, func(url string, d []byte) error {",
          "",
          "---------------"
        ],
        "core/http/app.go||core/http/app.go": [
          "File: core/http/app.go -> core/http/app.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  \"github.com/rs/zerolog/log\"",
          "32: )",
          "",
          "[Removed Lines]",
          "34: func readAuthHeader(c *fiber.Ctx) string {",
          "35:  authHeader := c.Get(\"Authorization\")",
          "38:  xApiKey := c.Get(\"xi-api-key\")",
          "39:  if xApiKey != \"\" {",
          "40:   authHeader = \"Bearer \" + xApiKey",
          "41:  }",
          "44:  xApiKey = c.Get(\"x-api-key\")",
          "45:  if xApiKey != \"\" {",
          "46:   authHeader = \"Bearer \" + xApiKey",
          "47:  }",
          "49:  return authHeader",
          "50: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/http/app_test.go||core/http/app_test.go": [
          "File: core/http/app_test.go -> core/http/app_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  \"github.com/sashabaranov/go-openai/jsonschema\"",
          "32: )",
          "34: const testPrompt = `### System:",
          "35: You are an AI assistant that follows instruction extremely well. Help as much as you can.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: const apiKey = \"joshua\"",
          "35: const bearerKey = \"Bearer \" + apiKey",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: func getModelStatus(url string) (response map[string]interface{}) {",
          "54:  if err != nil {",
          "55:   fmt.Println(\"Error creating request:\", err)",
          "56:   return",
          "57:  }",
          "58:  defer resp.Body.Close()",
          "60:  body, err := io.ReadAll(resp.Body)",
          "",
          "[Removed Lines]",
          "53:  resp, err := http.Get(url)",
          "",
          "[Added Lines]",
          "56:  req, err := http.NewRequest(\"GET\", url, nil)",
          "57:  req.Header.Set(\"Content-Type\", \"application/json\")",
          "58:  req.Header.Set(\"Authorization\", bearerKey)",
          "63:  client := &http.Client{}",
          "64:  resp, err := client.Do(req)",
          "65:  if err != nil {",
          "66:   fmt.Println(\"Error sending request:\", err)",
          "67:   return",
          "68:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:  return",
          "73: }",
          "76:  uri := downloader.URI(url)",
          "80:   return json.Unmarshal(i, &response)",
          "81:  })",
          "83: }",
          "85: func postModelApplyRequest(url string, request modelApplyRequest) (response map[string]interface{}) {",
          "",
          "[Removed Lines]",
          "75: func getModels(url string) (response []gallery.GalleryModel) {",
          "78:  uri.DownloadAndUnmarshal(\"\", func(url string, i []byte) error {",
          "82:  return",
          "",
          "[Added Lines]",
          "86: func getModels(url string) ([]gallery.GalleryModel, error) {",
          "87:  response := []gallery.GalleryModel{}",
          "90:  err := uri.DownloadWithAuthorizationAndCallback(\"\", bearerKey, func(url string, i []byte) error {",
          "94:  return response, err",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:   return",
          "102:  }",
          "103:  req.Header.Set(\"Content-Type\", \"application/json\")",
          "106:  client := &http.Client{}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:  req.Header.Set(\"Authorization\", bearerKey)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:  }",
          "142:  req.Header.Set(\"Content-Type\", \"application/json\")",
          "144:  client := &http.Client{}",
          "145:  resp, err := client.Do(req)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:  req.Header.Set(\"Authorization\", bearerKey)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "175:  }",
          "177:  req.Header.Set(\"Content-Type\", \"application/json\")",
          "179:  client := &http.Client{}",
          "180:  resp, err := client.Do(req)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:  req.Header.Set(\"Authorization\", bearerKey)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "195:  return json.Unmarshal(body, respJson)",
          "196: }",
          "199: var backendAssets embed.FS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213: func postInvalidRequest(url string) (error, int) {",
          "215:  req, err := http.NewRequest(\"POST\", url, bytes.NewBufferString(\"invalid request\"))",
          "216:  if err != nil {",
          "217:   return err, -1",
          "218:  }",
          "220:  req.Header.Set(\"Content-Type\", \"application/json\")",
          "222:  client := &http.Client{}",
          "223:  resp, err := client.Do(req)",
          "224:  if err != nil {",
          "225:   return err, -1",
          "226:  }",
          "228:  defer resp.Body.Close()",
          "230:  body, err := io.ReadAll(resp.Body)",
          "231:  if err != nil {",
          "232:   return err, -1",
          "233:  }",
          "235:  if resp.StatusCode < 200 || resp.StatusCode >= 400 {",
          "236:   return fmt.Errorf(\"unexpected status code: %d, body: %s\", resp.StatusCode, string(body)), resp.StatusCode",
          "237:  }",
          "239:  return nil, resp.StatusCode",
          "240: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "260:      config.WithContext(c),",
          "261:      config.WithGalleries(galleries),",
          "262:      config.WithModelPath(modelDir),",
          "263:      config.WithBackendAssets(backendAssets),",
          "264:      config.WithBackendAssetsOutput(backendAssetsDir))...)",
          "265:    Expect(err).ToNot(HaveOccurred())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:      config.WithApiKeys([]string{apiKey}),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "270:    go app.Listen(\"127.0.0.1:9090\")",
          "273:    defaultConfig.BaseURL = \"http://127.0.0.1:9090/v1\"",
          "275:    client2 = openaigo.NewClient(\"\")",
          "",
          "[Removed Lines]",
          "272:    defaultConfig := openai.DefaultConfig(\"\")",
          "",
          "[Added Lines]",
          "317:    defaultConfig := openai.DefaultConfig(apiKey)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "295:    Expect(err).To(HaveOccurred())",
          "296:   })",
          "298:   Context(\"Applying models\", func() {",
          "300:    It(\"applies models from a gallery\", func() {",
          "302:     Expect(len(models)).To(Equal(2), fmt.Sprint(models))",
          "303:     Expect(models[0].Installed).To(BeFalse(), fmt.Sprint(models))",
          "304:     Expect(models[1].Installed).To(BeFalse(), fmt.Sprint(models))",
          "",
          "[Removed Lines]",
          "301:     models := getModels(\"http://127.0.0.1:9090/models/available\")",
          "",
          "[Added Lines]",
          "343:   Context(\"Auth Tests\", func() {",
          "344:    It(\"Should fail if the api key is missing\", func() {",
          "345:     err, sc := postInvalidRequest(\"http://127.0.0.1:9090/models/available\")",
          "346:     Expect(err).ToNot(BeNil())",
          "347:     Expect(sc).To(Equal(403))",
          "348:    })",
          "349:   })",
          "354:     models, err := getModels(\"http://127.0.0.1:9090/models/available\")",
          "355:     Expect(err).To(BeNil())",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "331:     Expect(content[\"backend\"]).To(Equal(\"bert-embeddings\"))",
          "332:     Expect(content[\"foo\"]).To(Equal(\"bar\"))",
          "335:     Expect(len(models)).To(Equal(2), fmt.Sprint(models))",
          "336:     Expect(models[0].Name).To(Or(Equal(\"bert\"), Equal(\"bert2\")))",
          "337:     Expect(models[1].Name).To(Or(Equal(\"bert\"), Equal(\"bert2\")))",
          "",
          "[Removed Lines]",
          "334:     models = getModels(\"http://127.0.0.1:9090/models/available\")",
          "",
          "[Added Lines]",
          "388:     models, err = getModels(\"http://127.0.0.1:9090/models/available\")",
          "389:     Expect(err).To(BeNil())",
          "",
          "---------------"
        ],
        "core/http/middleware/auth.go||core/http/middleware/auth.go": [
          "File: core/http/middleware/auth.go -> core/http/middleware/auth.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:    if applicationConfig.OpaqueErrors {",
          "39:     return ctx.SendStatus(403)",
          "40:    }",
          "41:   }",
          "42:   if applicationConfig.OpaqueErrors {",
          "43:    return ctx.SendStatus(500)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:    return ctx.Status(403).SendString(err.Error())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   }",
          "91:  }",
          "92:  return func(c *fiber.Ctx) bool { return false }",
          "",
          "[Removed Lines]",
          "93: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "embedded/embedded.go||embedded/embedded.go": [
          "File: embedded/embedded.go -> embedded/embedded.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: func GetRemoteLibraryShorteners(url string, basePath string) (map[string]string, error) {",
          "40:  remoteLibrary := map[string]string{}",
          "41:  uri := downloader.URI(url)",
          "43:   return yaml.Unmarshal(i, &remoteLibrary)",
          "44:  })",
          "45:  if err != nil {",
          "",
          "[Removed Lines]",
          "42:  err := uri.DownloadAndUnmarshal(basePath, func(_ string, i []byte) error {",
          "",
          "[Added Lines]",
          "42:  err := uri.DownloadWithCallback(basePath, func(_ string, i []byte) error {",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module github.com/mudler/LocalAI",
          "7: require (",
          "8:  dario.cat/mergo v1.0.0",
          "",
          "[Removed Lines]",
          "3: go 1.22.0",
          "5: toolchain go1.22.4",
          "",
          "[Added Lines]",
          "3: go 1.23",
          "5: toolchain go1.23.1",
          "",
          "---------------"
        ],
        "pkg/downloader/uri.go||pkg/downloader/uri.go": [
          "File: pkg/downloader/uri.go -> pkg/downloader/uri.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: type URI string",
          "35:  url := uri.ResolveURL()",
          "37:  if strings.HasPrefix(url, LocalPrefix) {",
          "",
          "[Removed Lines]",
          "34: func (uri URI) DownloadAndUnmarshal(basePath string, f func(url string, i []byte) error) error {",
          "",
          "[Added Lines]",
          "34: func (uri URI) DownloadWithCallback(basePath string, f func(url string, i []byte) error) error {",
          "35:  return uri.DownloadWithAuthorizationAndCallback(basePath, \"\", f)",
          "36: }",
          "38: func (uri URI) DownloadWithAuthorizationAndCallback(basePath string, authorization string, f func(url string, i []byte) error) error {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:  }",
          "67:  if err != nil {",
          "68:   return err",
          "69:  }",
          "",
          "[Removed Lines]",
          "66:  response, err := http.Get(url)",
          "",
          "[Added Lines]",
          "70:  req, err := http.NewRequest(\"GET\", url, nil)",
          "71:  if err != nil {",
          "72:   return err",
          "73:  }",
          "74:  if authorization != \"\" {",
          "75:   req.Header.Add(\"Authorization\", authorization)",
          "76:  }",
          "78:  response, err := http.DefaultClient.Do(req)",
          "",
          "---------------"
        ],
        "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go": [
          "File: pkg/downloader/uri_test.go -> pkg/downloader/uri_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   It(\"parses github with a branch\", func() {",
          "12:    uri := URI(\"github:go-skynet/model-gallery/gpt4all-j.yaml\")",
          "13:    Expect(",
          "15:      Expect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))",
          "16:      return nil",
          "17:     }),",
          "",
          "[Removed Lines]",
          "14:     uri.DownloadAndUnmarshal(\"\", func(url string, i []byte) error {",
          "",
          "[Added Lines]",
          "14:     uri.DownloadWithCallback(\"\", func(url string, i []byte) error {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:    uri := URI(\"github:go-skynet/model-gallery/gpt4all-j.yaml@main\")",
          "23:    Expect(",
          "25:      Expect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))",
          "26:      return nil",
          "27:     }),",
          "",
          "[Removed Lines]",
          "24:     uri.DownloadAndUnmarshal(\"\", func(url string, i []byte) error {",
          "",
          "[Added Lines]",
          "24:     uri.DownloadWithCallback(\"\", func(url string, i []byte) error {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30:   It(\"parses github with urls\", func() {",
          "31:    uri := URI(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\")",
          "32:    Expect(",
          "34:      Expect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))",
          "35:      return nil",
          "36:     }),",
          "",
          "[Removed Lines]",
          "33:     uri.DownloadAndUnmarshal(\"\", func(url string, i []byte) error {",
          "",
          "[Added Lines]",
          "33:     uri.DownloadWithCallback(\"\", func(url string, i []byte) error {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f569237a50f5e8e1f4c816aa739c66ba0edd5dc8",
      "candidate_info": {
        "commit_hash": "f569237a50f5e8e1f4c816aa739c66ba0edd5dc8",
        "repo": "mudler/localai",
        "commit_url": "https://github.com/mudler/localai/commit/f569237a50f5e8e1f4c816aa739c66ba0edd5dc8",
        "files": [
          "core/cli/models.go",
          "core/http/app_test.go",
          "core/startup/config_file_watcher.go",
          "core/startup/startup.go",
          "embedded/embedded.go",
          "go.mod",
          "go.sum",
          "pkg/downloader/uri.go",
          "pkg/downloader/uri_test.go",
          "pkg/gallery/gallery.go",
          "pkg/gallery/models.go",
          "pkg/oci/blob.go",
          "pkg/oci/blob_test.go",
          "pkg/oci/image.go",
          "pkg/oci/image_test.go",
          "pkg/oci/oci_suite_test.go",
          "pkg/oci/ollama.go",
          "pkg/oci/ollama_test.go",
          "pkg/startup/model_preload.go"
        ],
        "message": "feat(oci): support OCI images and Ollama models (#2628)\n\n* Support specifying oci:// and ollama:// for model URLs\n\nFixes: https://github.com/mudler/LocalAI/issues/2527\nFixes: https://github.com/mudler/LocalAI/issues/1028\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>\n\n* Lower watcher warnings\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>\n\n* Allow to install ollama models from CLI\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>\n\n* fixup tests\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>\n\n* Do not keep file ownership\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>\n\n* Skip test on darwin\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>\n\n---------\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>",
        "before_after_code_files": [
          "core/cli/models.go||core/cli/models.go",
          "core/http/app_test.go||core/http/app_test.go",
          "core/startup/config_file_watcher.go||core/startup/config_file_watcher.go",
          "core/startup/startup.go||core/startup/startup.go",
          "embedded/embedded.go||embedded/embedded.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/downloader/uri.go||pkg/downloader/uri.go",
          "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go",
          "pkg/gallery/gallery.go||pkg/gallery/gallery.go",
          "pkg/gallery/models.go||pkg/gallery/models.go",
          "pkg/oci/blob.go||pkg/oci/blob.go",
          "pkg/oci/blob_test.go||pkg/oci/blob_test.go",
          "pkg/oci/image.go||pkg/oci/image.go",
          "pkg/oci/image_test.go||pkg/oci/image_test.go",
          "pkg/oci/oci_suite_test.go||pkg/oci/oci_suite_test.go",
          "pkg/oci/ollama.go||pkg/oci/ollama.go",
          "pkg/oci/ollama_test.go||pkg/oci/ollama_test.go",
          "pkg/startup/model_preload.go||pkg/startup/model_preload.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/http/app_test.go||core/http/app_test.go",
            "embedded/embedded.go||embedded/embedded.go",
            "pkg/downloader/uri.go||pkg/downloader/uri.go",
            "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go",
            "pkg/gallery/gallery.go||pkg/gallery/gallery.go",
            "pkg/gallery/models.go||pkg/gallery/models.go",
            "pkg/startup/model_preload.go||pkg/startup/model_preload.go"
          ],
          "candidate": [
            "core/http/app_test.go||core/http/app_test.go",
            "embedded/embedded.go||embedded/embedded.go",
            "pkg/downloader/uri.go||pkg/downloader/uri.go",
            "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go",
            "pkg/gallery/gallery.go||pkg/gallery/gallery.go",
            "pkg/gallery/models.go||pkg/gallery/models.go",
            "pkg/startup/model_preload.go||pkg/startup/model_preload.go"
          ]
        }
      },
      "candidate_diff": {
        "core/cli/models.go||core/cli/models.go": [
          "File: core/cli/models.go -> core/cli/models.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  cliContext \"github.com/go-skynet/LocalAI/core/cli/context\"",
          "9:  \"github.com/go-skynet/LocalAI/pkg/gallery\"",
          "10:  \"github.com/go-skynet/LocalAI/pkg/startup\"",
          "11:  \"github.com/rs/zerolog/log\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  \"github.com/go-skynet/LocalAI/pkg/downloader\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:    return err",
          "80:   }",
          "89:   err = startup.InstallModels(galleries, \"\", mi.ModelsPath, progressCallback, modelName)",
          "90:   if err != nil {",
          "91:    return err",
          "",
          "[Removed Lines]",
          "82:   model := gallery.FindModel(models, modelName, mi.ModelsPath)",
          "83:   if model == nil {",
          "84:    log.Error().Str(\"model\", modelName).Msg(\"model not found\")",
          "85:    return err",
          "86:   }",
          "88:   log.Info().Str(\"model\", modelName).Str(\"license\", model.License).Msg(\"installing model\")",
          "",
          "[Added Lines]",
          "83:   if !downloader.LooksLikeOCI(modelName) {",
          "84:    model := gallery.FindModel(models, modelName, mi.ModelsPath)",
          "85:    if model == nil {",
          "86:     log.Error().Str(\"model\", modelName).Msg(\"model not found\")",
          "87:     return err",
          "88:    }",
          "90:    log.Info().Str(\"model\", modelName).Str(\"license\", model.License).Msg(\"installing model\")",
          "91:   }",
          "",
          "---------------"
        ],
        "core/http/app_test.go||core/http/app_test.go": [
          "File: core/http/app_test.go -> core/http/app_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: func getModels(url string) (response []gallery.GalleryModel) {",
          "79:   return json.Unmarshal(i, &response)",
          "80:  })",
          "",
          "[Removed Lines]",
          "77:  downloader.GetURI(url, \"\", func(url string, i []byte) error {",
          "",
          "[Added Lines]",
          "77:  downloader.DownloadAndUnmarshal(url, \"\", func(url string, i []byte) error {",
          "",
          "---------------"
        ],
        "core/startup/config_file_watcher.go||core/startup/config_file_watcher.go": [
          "File: core/startup/config_file_watcher.go -> core/startup/config_file_watcher.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:  err = c.watcher.Add(c.appConfig.DynamicConfigsDir)",
          "118:  if err != nil {",
          "120:  }",
          "122:  return nil",
          "",
          "[Removed Lines]",
          "119:   return fmt.Errorf(\"unable to establish watch on the LocalAI Configuration Directory: %+v\", err)",
          "",
          "[Added Lines]",
          "119:   return fmt.Errorf(\"unable to create a watcher on the configuration directory: %+v\", err)",
          "",
          "---------------"
        ],
        "core/startup/startup.go||core/startup/startup.go": [
          "File: core/startup/startup.go -> core/startup/startup.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:  }",
          "152:  log.Info().Msg(\"core/startup process completed!\")",
          "153:  return cl, ml, options, nil",
          "154: }",
          "158: func createApplication(appConfig *config.ApplicationConfig) *core.Application {",
          "",
          "[Removed Lines]",
          "146:  configHandler := newConfigFileHandler(options)",
          "147:  err = configHandler.Watch()",
          "148:  if err != nil {",
          "149:   log.Error().Err(err).Msg(\"error establishing configuration directory watcher\")",
          "150:  }",
          "",
          "[Added Lines]",
          "145:  startWatcher(options)",
          "151: func startWatcher(options *config.ApplicationConfig) {",
          "152:  if options.DynamicConfigsDir == \"\" {",
          "154:   return",
          "155:  }",
          "157:  if _, err := os.Stat(options.DynamicConfigsDir); err != nil {",
          "158:   if os.IsNotExist(err) {",
          "160:    if err := os.MkdirAll(options.DynamicConfigsDir, 0700); err != nil {",
          "161:     log.Error().Err(err).Msg(\"failed creating DynamicConfigsDir\")",
          "162:    }",
          "163:   } else {",
          "165:    log.Error().Err(err).Msg(\"failed to read DynamicConfigsDir, watcher will not be started\")",
          "166:    return",
          "167:   }",
          "168:  }",
          "170:  configHandler := newConfigFileHandler(options)",
          "171:  if err := configHandler.Watch(); err != nil {",
          "172:   log.Error().Err(err).Msg(\"failed creating watcher\")",
          "173:  }",
          "174: }",
          "",
          "---------------"
        ],
        "embedded/embedded.go||embedded/embedded.go": [
          "File: embedded/embedded.go -> embedded/embedded.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: func GetRemoteLibraryShorteners(url string, basePath string) (map[string]string, error) {",
          "40:  remoteLibrary := map[string]string{}",
          "43:   return yaml.Unmarshal(i, &remoteLibrary)",
          "44:  })",
          "45:  if err != nil {",
          "",
          "[Removed Lines]",
          "42:  err := downloader.GetURI(url, basePath, func(_ string, i []byte) error {",
          "",
          "[Added Lines]",
          "42:  err := downloader.DownloadAndUnmarshal(url, basePath, func(_ string, i []byte) error {",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  github.com/M0Rf30/go-tiny-dream v0.0.0-20231128165230-772a9c0d9aaf",
          "9:  github.com/Masterminds/sprig/v3 v3.2.3",
          "10:  github.com/alecthomas/kong v0.9.0",
          "11:  github.com/charmbracelet/glamour v0.7.0",
          "12:  github.com/chasefleming/elem-go v0.25.0",
          "13:  github.com/donomii/go-rwkv.cpp v0.0.0-20240228065144-661e7ae26d44",
          "14:  github.com/elliotchance/orderedmap/v2 v2.2.0",
          "15:  github.com/fsnotify/fsnotify v1.7.0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  github.com/census-instrumentation/opencensus-proto v0.4.1",
          "14:  github.com/cncf/xds/go v0.0.0-20240318125728-8a4994d93e50",
          "15:  github.com/containerd/containerd v1.7.18",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:  github.com/gofiber/fiber/v2 v2.52.4",
          "21:  github.com/gofiber/swagger v1.0.0",
          "22:  github.com/gofiber/template/html/v2 v2.1.1",
          "23:  github.com/google/uuid v1.6.0",
          "24:  github.com/hpcloud/tail v1.0.0",
          "25:  github.com/imdario/mergo v0.3.16",
          "26:  github.com/ipfs/go-log v1.0.5",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:  github.com/google/go-containerregistry v0.19.1",
          "28:  github.com/grpc-ecosystem/grpc-gateway v1.16.0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:  github.com/shirou/gopsutil/v3 v3.23.9",
          "48:  github.com/stretchr/testify v1.9.0",
          "49:  github.com/swaggo/swag v1.16.3",
          "50:  github.com/tmc/langchaingo v0.0.0-20231019140956-c636b3da7701",
          "51:  github.com/valyala/fasthttp v1.51.0",
          "53:  go.opentelemetry.io/otel/exporters/prometheus v0.42.0",
          "55:  go.opentelemetry.io/otel/sdk/metric v1.19.0",
          "56:  google.golang.org/grpc v1.64.0",
          "57:  google.golang.org/protobuf v1.34.1",
          "58:  gopkg.in/yaml.v2 v2.4.0",
          "59:  gopkg.in/yaml.v3 v3.0.1",
          "60: )",
          "62: require (",
          "63:  github.com/benbjohnson/clock v1.3.5 // indirect",
          "64:  github.com/c-robinson/iplib v1.0.8 // indirect",
          "65:  github.com/containerd/cgroups v1.1.0 // indirect",
          "66:  github.com/coreos/go-systemd/v22 v22.5.0 // indirect",
          "67:  github.com/creachadair/otp v0.4.2 // indirect",
          "68:  github.com/davidlazar/go-crypto v0.0.0-20200604182044-b73af7476f6c // indirect",
          "69:  github.com/decred/dcrd/dcrec/secp256k1/v4 v4.2.0 // indirect",
          "70:  github.com/dustin/go-humanize v1.0.1 // indirect",
          "71:  github.com/elastic/gosigar v0.14.2 // indirect",
          "72:  github.com/flynn/noise v1.0.0 // indirect",
          "73:  github.com/francoispqt/gojay v1.2.13 // indirect",
          "74:  github.com/godbus/dbus/v5 v5.1.0 // indirect",
          "75:  github.com/golang/mock v1.6.0 // indirect",
          "76:  github.com/google/btree v1.1.2 // indirect",
          "77:  github.com/google/gopacket v1.1.19 // indirect",
          "78:  github.com/gorilla/websocket v1.5.0 // indirect",
          "79:  github.com/hashicorp/errwrap v1.1.0 // indirect",
          "80:  github.com/hashicorp/go-multierror v1.1.1 // indirect",
          "",
          "[Removed Lines]",
          "52:  go.opentelemetry.io/otel v1.19.0",
          "54:  go.opentelemetry.io/otel/metric v1.19.0",
          "",
          "[Added Lines]",
          "55:  github.com/thxcode/gguf-parser-go v0.0.6",
          "58:  go.opentelemetry.io/otel v1.24.0",
          "60:  go.opentelemetry.io/otel/metric v1.24.0",
          "62:  google.golang.org/api v0.169.0",
          "67:  oras.land/oras-go/v2 v2.5.0",
          "71:  cloud.google.com/go/compute v1.25.1 // indirect",
          "72:  cloud.google.com/go/compute/metadata v0.2.3 // indirect",
          "73:  github.com/Microsoft/hcsshim v0.11.5 // indirect",
          "77:  github.com/containerd/errdefs v0.1.0 // indirect",
          "78:  github.com/containerd/log v0.1.0 // indirect",
          "79:  github.com/containerd/stargz-snapshotter/estargz v0.14.3 // indirect",
          "84:  github.com/docker/distribution v2.8.2+incompatible // indirect",
          "85:  github.com/docker/docker-credential-helpers v0.7.0 // indirect",
          "88:  github.com/envoyproxy/protoc-gen-validate v1.0.4 // indirect",
          "89:  github.com/felixge/httpsnoop v1.0.4 // indirect",
          "93:  github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect",
          "97:  github.com/google/s2a-go v0.1.7 // indirect",
          "98:  github.com/googleapis/enterprise-certificate-proxy v0.3.2 // indirect",
          "99:  github.com/googleapis/gax-go/v2 v2.12.2 // indirect",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:  github.com/mikioh/tcpinfo v0.0.0-20190314235526-30a79bb1804b // indirect",
          "112:  github.com/mikioh/tcpopt v0.0.0-20190314235656-172688c1accc // indirect",
          "113:  github.com/minio/sha256-simd v1.0.1 // indirect",
          "114:  github.com/mr-tron/base58 v1.2.0 // indirect",
          "115:  github.com/mudler/water v0.0.0-20221010214108-8c7313014ce0 // indirect",
          "116:  github.com/multiformats/go-base32 v0.1.0 // indirect",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:  github.com/moby/sys/sequential v0.5.0 // indirect",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:  github.com/smallnest/ringbuffer v0.0.0-20240423223918-bab516b2000b // indirect",
          "138:  github.com/songgao/packets v0.0.0-20160404182456-549a10cd4091 // indirect",
          "139:  github.com/spaolacci/murmur3 v1.1.0 // indirect",
          "141:  github.com/tinylib/msgp v1.1.8 // indirect",
          "143:  github.com/vishvananda/netns v0.0.0-20211101163701-50045581ed74 // indirect",
          "144:  github.com/whyrusleeping/go-keyspace v0.0.0-20160322163242-5b898ac5add1 // indirect",
          "145:  go.opencensus.io v0.24.0 // indirect",
          "146:  go.uber.org/dig v1.17.0 // indirect",
          "147:  go.uber.org/fx v1.20.0 // indirect",
          "148:  go.uber.org/multierr v1.11.0 // indirect",
          "149:  go.uber.org/zap v1.27.0 // indirect",
          "150:  golang.org/x/exp v0.0.0-20240506185415-9bf2ced13842 // indirect",
          "151:  golang.org/x/sync v0.7.0 // indirect",
          "152:  golang.org/x/sys v0.20.0 // indirect",
          "153:  golang.zx2c4.com/wintun v0.0.0-20211104114900-415007cec224 // indirect",
          "154:  golang.zx2c4.com/wireguard v0.0.0-20220703234212-c31a7b1ab478 // indirect",
          "155:  golang.zx2c4.com/wireguard/windows v0.5.3 // indirect",
          "156:  gonum.org/v1/gonum v0.13.0 // indirect",
          "157:  lukechampine.com/blake3 v1.2.1 // indirect",
          "158: )",
          "160: require (",
          "162:  github.com/KyleBanks/depth v1.2.1 // indirect",
          "163:  github.com/Masterminds/goutils v1.1.1 // indirect",
          "164:  github.com/Masterminds/semver/v3 v3.2.0 // indirect",
          "166:  github.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5 // indirect",
          "167:  github.com/StackExchange/wmi v1.2.1 // indirect",
          "168:  github.com/alecthomas/chroma/v2 v2.8.0 // indirect",
          "",
          "[Removed Lines]",
          "140:  github.com/thxcode/gguf-parser-go v0.0.6 // indirect",
          "142:  github.com/vishvananda/netlink v1.1.0 // indirect",
          "161:  github.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78 // indirect",
          "165:  github.com/Microsoft/go-winio v0.6.0 // indirect",
          "",
          "[Added Lines]",
          "164:  github.com/vbatts/tar-split v0.11.3 // indirect",
          "165:  github.com/vishvananda/netlink v1.2.1-beta.2 // indirect",
          "169:  go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.49.0 // indirect",
          "175:  golang.org/x/oauth2 v0.18.0 // indirect",
          "182:  google.golang.org/appengine v1.6.8 // indirect",
          "183:  google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9 // indirect",
          "184:  google.golang.org/genproto/googleapis/api v0.0.0-20240318140521-94a12d6c2237 // indirect",
          "189:  github.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 // indirect",
          "193:  github.com/Microsoft/go-winio v0.6.2 // indirect",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "172:  github.com/beorn7/perks v1.0.1 // indirect",
          "173:  github.com/cenkalti/backoff/v4 v4.3.0 // indirect",
          "174:  github.com/cespare/xxhash/v2 v2.2.0 // indirect",
          "176:  github.com/davecgh/go-spew v1.1.1 // indirect",
          "177:  github.com/dlclark/regexp2 v1.8.1 // indirect",
          "180:  github.com/docker/go-connections v0.4.0 // indirect",
          "181:  github.com/docker/go-units v0.5.0 // indirect",
          "182:  github.com/dsnet/compress v0.0.2-0.20210315054119-f66993602bf5 // indirect",
          "",
          "[Removed Lines]",
          "175:  github.com/containerd/continuity v0.3.0 // indirect",
          "178:  github.com/docker/cli v20.10.17+incompatible // indirect",
          "179:  github.com/docker/docker v24.0.9+incompatible // indirect",
          "",
          "[Added Lines]",
          "203:  github.com/containerd/continuity v0.4.2 // indirect",
          "206:  github.com/docker/cli v24.0.0+incompatible // indirect",
          "207:  github.com/docker/docker v24.0.9+incompatible",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "195:  github.com/gofiber/template v1.8.3 // indirect",
          "196:  github.com/gofiber/utils v1.1.0 // indirect",
          "197:  github.com/gogo/protobuf v1.3.2 // indirect",
          "199:  github.com/golang/snappy v0.0.2 // indirect",
          "200:  github.com/google/go-cmp v0.6.0 // indirect",
          "201:  github.com/google/pprof v0.0.0-20230821062121-407c9e7a662f // indirect",
          "",
          "[Removed Lines]",
          "198:  github.com/golang/protobuf v1.5.4 // indirect",
          "",
          "[Added Lines]",
          "226:  github.com/golang/protobuf v1.5.4",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "218:  github.com/mitchellh/go-homedir v1.1.0 // indirect",
          "219:  github.com/mitchellh/mapstructure v1.5.0 // indirect",
          "220:  github.com/mitchellh/reflectwalk v1.0.2 // indirect",
          "222:  github.com/mudler/go-piper v0.0.0-20230621222733-56b8a81b4760",
          "223:  github.com/muesli/reflow v0.3.0 // indirect",
          "224:  github.com/muesli/termenv v0.15.2 // indirect",
          "225:  github.com/nwaples/rardecode v1.1.0 // indirect",
          "226:  github.com/olekukonko/tablewriter v0.0.5 // indirect",
          "227:  github.com/opencontainers/go-digest v1.0.0 // indirect",
          "229:  github.com/opencontainers/runc v1.1.12 // indirect",
          "230:  github.com/pierrec/lz4/v4 v4.1.2 // indirect",
          "231:  github.com/pkg/errors v0.9.1 // indirect",
          "",
          "[Removed Lines]",
          "221:  github.com/moby/term v0.0.0-20201216013528-df9cb8a40635 // indirect",
          "228:  github.com/opencontainers/image-spec v1.0.2 // indirect",
          "",
          "[Added Lines]",
          "249:  github.com/moby/term v0.0.0-20221205130635-1aeaba878587 // indirect",
          "256:  github.com/opencontainers/image-spec v1.1.0 // indirect",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "238:  github.com/rivo/uniseg v0.2.0 // indirect",
          "239:  github.com/shoenig/go-m1cpu v0.1.6 // indirect",
          "240:  github.com/shopspring/decimal v1.3.1 // indirect",
          "242:  github.com/spf13/cast v1.5.0 // indirect",
          "243:  github.com/swaggo/files/v2 v2.0.0 // indirect",
          "244:  github.com/tklauser/go-sysconf v0.3.12 // indirect",
          "",
          "[Removed Lines]",
          "241:  github.com/sirupsen/logrus v1.8.1 // indirect",
          "",
          "[Added Lines]",
          "269:  github.com/sirupsen/logrus v1.9.3 // indirect",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "246:  github.com/ulikunitz/xz v0.5.9 // indirect",
          "247:  github.com/valyala/bytebufferpool v1.0.0 // indirect",
          "248:  github.com/valyala/tcplisten v1.0.0 // indirect",
          "250:  github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 // indirect",
          "251:  github.com/xeipuuv/gojsonschema v1.2.0 // indirect",
          "252:  github.com/xi2/xz v0.0.0-20171230120015-48954b6210f8 // indirect",
          "253:  github.com/yuin/goldmark v1.5.4 // indirect",
          "254:  github.com/yuin/goldmark-emoji v1.0.2 // indirect",
          "255:  github.com/yusufpapurcu/wmi v1.2.3 // indirect",
          "258:  golang.org/x/crypto v0.23.0 // indirect",
          "259:  golang.org/x/mod v0.17.0 // indirect",
          "260:  golang.org/x/net v0.25.0 // indirect",
          "",
          "[Removed Lines]",
          "249:  github.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f // indirect",
          "256:  go.opentelemetry.io/otel/sdk v1.19.0 // indirect",
          "257:  go.opentelemetry.io/otel/trace v1.19.0 // indirect",
          "",
          "[Added Lines]",
          "277:  github.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb // indirect",
          "284:  go.opentelemetry.io/otel/sdk v1.22.0 // indirect",
          "285:  go.opentelemetry.io/otel/trace v1.24.0 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: cloud.google.com/go v0.31.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=",
          "3: cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=",
          "4: cloud.google.com/go v0.37.0/go.mod h1:TS1dMSSfndXH133OKGwekG838Om/cQT0BUHV3HcBgoo=",
          "5: dmitri.shuralyov.com/app/changes v0.0.0-20180602232624-0a106ad413e3/go.mod h1:Yl+fi1br7+Rr3LqpNJf1/uxUdtRUV+Tnj0o93V2B9MU=",
          "6: dmitri.shuralyov.com/html/belt v0.0.0-20180602232347-f7d459c86be0/go.mod h1:JLBrvjyP0v+ecvNYvCpyZgu5/xkfAUhi6wJj28eUfSU=",
          "7: dmitri.shuralyov.com/service/change v0.0.0-20181023043359-a85b471d5412/go.mod h1:a1inKt/atXimZ4Mv927x+r7UpyzRUf4emIoiiSC2TN4=",
          "8: dmitri.shuralyov.com/state v0.0.0-20180228185332-28bcc343414c/go.mod h1:0PRwlb0D6DFvNNtx+9ybjezNCa8XF0xaYcETyp6rHWU=",
          "9: git.apache.org/thrift.git v0.0.0-20180902110319-2566ecd5d999/go.mod h1:fPE2ZNJGynbRyZ4dJvy6G277gSllfV2HJqblrnkyeyg=",
          "12: github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=",
          "13: github.com/KyleBanks/depth v1.2.1 h1:5h8fQADFrWtarTdtDudMmGsC7GPbOAu6RVB3ffsVFHc=",
          "14: github.com/KyleBanks/depth v1.2.1/go.mod h1:jzSb9d0L43HxTQfT+oSA1EEp2q+ne2uh6XgeJcm8brE=",
          "17: github.com/Masterminds/goutils v1.1.1 h1:5nUrii3FMTL5diU80unEVvNevw1nH4+ZV4DSLVJLSYI=",
          "18: github.com/Masterminds/goutils v1.1.1/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=",
          "19: github.com/Masterminds/semver/v3 v3.2.0 h1:3MEsd0SM6jqZojhjLWWeBY+Kcjy9i6MQAeY7YgDP83g=",
          "20: github.com/Masterminds/semver/v3 v3.2.0/go.mod h1:qvl/7zhW3nngYb5+80sSMF+FG2BjYrf8m9wsX0PNOMQ=",
          "21: github.com/Masterminds/sprig/v3 v3.2.3 h1:eL2fZNezLomi0uOLqjQoN6BfsDD+fyLtgbJMAj9n6YA=",
          "22: github.com/Masterminds/sprig/v3 v3.2.3/go.mod h1:rXcFaZ2zZbLRJv/xSysmlgIM1u11eBaRMhvYXJNkGuM=",
          "25: github.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5 h1:TngWCqHvy9oXAN6lEVMRuU21PR1EtLVZJmdB18Gu3Rw=",
          "26: github.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5/go.mod h1:lmUJ/7eu/Q8D7ML55dXQrVaamCz2vxCfdQBasLZfHKk=",
          "27: github.com/StackExchange/wmi v1.2.1 h1:VIkavFPXSjcnS+O8yTq7NI32k0R5Aj+v39y29VYDOSA=",
          "",
          "[Removed Lines]",
          "10: github.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78 h1:w+iIsaOQNcT7OZ575w+acHgRric5iCyQh+xv+KJ4HB8=",
          "11: github.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78/go.mod h1:LmzpDX56iTiv29bbRTIsUNlaFfuhWRQBWjQdVyAevI8=",
          "15: github.com/M0Rf30/go-tiny-dream v0.0.0-20231128165230-772a9c0d9aaf h1:UgjXLcE9I+VaVz7uBIlzAnyZIXwiDlIiTWqCh159aUI=",
          "16: github.com/M0Rf30/go-tiny-dream v0.0.0-20231128165230-772a9c0d9aaf/go.mod h1:UOf2Mb/deUri5agct5OJ4SLWjhI+kZKbsUVUeRb24I0=",
          "23: github.com/Microsoft/go-winio v0.6.0 h1:slsWYD/zyx7lCXoZVlvQrj0hPTM1HI4+v1sIda2yDvg=",
          "24: github.com/Microsoft/go-winio v0.6.0/go.mod h1:cTAf44im0RAYeL23bpB+fzCyDH2MJiz2BO69KH/soAE=",
          "",
          "[Added Lines]",
          "5: cloud.google.com/go/compute v1.25.1 h1:ZRpHJedLtTpKgr3RV1Fx23NuaAEN1Zfx9hw1u4aJdjU=",
          "6: cloud.google.com/go/compute v1.25.1/go.mod h1:oopOIR53ly6viBYxaDhBfJwzUAxf1zE//uf3IB011ls=",
          "7: cloud.google.com/go/compute/metadata v0.2.3 h1:mg4jlk7mCAj6xXp9UJ4fjI9VUI5rubuGBW5aJ7UnBMY=",
          "8: cloud.google.com/go/compute/metadata v0.2.3/go.mod h1:VAV5nSsACxMJvgaAuX6Pk2AawlZn8kiOGuCv6gTkwuA=",
          "14: github.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 h1:UQHMgLO+TxOElx5B5HZ4hJQsoJ/PvUvKRhJHDQXO8P8=",
          "15: github.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=",
          "17: github.com/BurntSushi/toml v1.2.1/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=",
          "26: github.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=",
          "27: github.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=",
          "28: github.com/Microsoft/hcsshim v0.11.5 h1:haEcLNpj9Ka1gd3B3tAEs9CpE0c+1IhoL59w/exYU38=",
          "29: github.com/Microsoft/hcsshim v0.11.5/go.mod h1:MV8xMfmECjl5HdO7U/3/hFVnkmSBjAjmA09d4bExKcU=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: github.com/andybalholm/brotli v1.0.5 h1:8uQZIdzKmjc/iuPu7O2ioW48L81FgatrcpfFmiq/cCs=",
          "39: github.com/andybalholm/brotli v1.0.5/go.mod h1:fO7iG3H7G2nSZ7m0zPUDn85XEX2GTukHGRSepvi9Eig=",
          "40: github.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239/go.mod h1:2FmKhYUyUczH0OGQWaF5ceTx0UBShxjsH6f8oGKYe2c=",
          "41: github.com/aymanbagabas/go-osc52/v2 v2.0.1 h1:HwpRHbFMcZLEVr42D4p7XBqjyuxQH5SMiErDT4WkJ2k=",
          "42: github.com/aymanbagabas/go-osc52/v2 v2.0.1/go.mod h1:uYgXzlJ7ZpABp8OJ+exZzJJhRNQ2ASbcXHWsFqH8hp8=",
          "43: github.com/aymerick/douceur v0.2.0 h1:Mv+mAeH1Q+n9Fr+oyamOlAkUNPWPlA8PPGR0QAaYuPk=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56: github.com/cenkalti/backoff/v4 v4.3.0 h1:MyRJ/UdXutAwSAT+s3wNd7MfTIcy71VQueUuFK343L8=",
          "57: github.com/cenkalti/backoff/v4 v4.3.0/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=",
          "58: github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=",
          "59: github.com/cespare/xxhash/v2 v2.2.0 h1:DC2CZ1Ep5Y4k3ZQ899DldepgrayRUGE6BBZ/cd9Cj44=",
          "60: github.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=",
          "61: github.com/charmbracelet/glamour v0.7.0 h1:2BtKGZ4iVJCDfMF229EzbeR1QRKLWztO9dMtjmqZSng=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: github.com/census-instrumentation/opencensus-proto v0.4.1 h1:iKLQ0xPNFxR/2hzXZMrBo8f1j86j5WHzznCCQxV/b8g=",
          "66: github.com/census-instrumentation/opencensus-proto v0.4.1/go.mod h1:4T9NM4+4Vw91VeyqjLS6ao50K5bOcLKN6Q42XnYaRYw=",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65: github.com/cilium/ebpf v0.2.0/go.mod h1:To2CFviqOWL/M0gIMsvSMlqe7em/l1ALkX1PyjrX2Qs=",
          "66: github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=",
          "67: github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=",
          "68: github.com/containerd/cgroups v0.0.0-20201119153540-4cbc285b3327/go.mod h1:ZJeTFisyysqgcCdecO57Dj79RfL0LNeGiFUqLYQRYLE=",
          "69: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "70: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "73: github.com/coreos/go-systemd v0.0.0-20181012123002-c6f51f82210d/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=",
          "74: github.com/coreos/go-systemd/v22 v22.1.0/go.mod h1:xO0FLkIi5MaZafQlIrOotqXZ90ih+1atmu1JpKERPPk=",
          "75: github.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=",
          "76: github.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=",
          "77: github.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=",
          "78: github.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=",
          "79: github.com/creachadair/mds v0.7.0 h1:7QoYqiPl18C0h7CLq9z9/qUH5Vr62V9677yJZHGLoQM=",
          "80: github.com/creachadair/mds v0.7.0/go.mod h1:4vrFYUzTXMJpMBU+OA292I6IUxKWCCfZkgXg+/kBZMo=",
          "81: github.com/creachadair/otp v0.4.2 h1:ngNMaD6Tzd7UUNRFyed7ykZFn/Wr5sSs5ffqZWm9pu8=",
          "82: github.com/creachadair/otp v0.4.2/go.mod h1:DqV9hJyUbcUme0pooYfiFvvMe72Aua5sfhNzwfZvk40=",
          "85: github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=",
          "86: github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=",
          "87: github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=",
          "",
          "[Removed Lines]",
          "71: github.com/containerd/continuity v0.3.0 h1:nisirsYROK15TAMVukJOUyGJjz4BNQJBVsNvAXZJ/eg=",
          "72: github.com/containerd/continuity v0.3.0/go.mod h1:wJEAIwKOm/pBZuBd0JmeTvnLquTB1Ag8espWhkykbPM=",
          "83: github.com/creack/pty v1.1.11 h1:07n33Z8lZxZ2qwegKbObQohDhXDQxiMMz1NOUGYlesw=",
          "84: github.com/creack/pty v1.1.11/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=",
          "",
          "[Added Lines]",
          "76: github.com/cncf/xds/go v0.0.0-20240318125728-8a4994d93e50 h1:DBmgJDC9dTfkVyGgipamEh2BpGYxScCH1TOF1LL1cXc=",
          "77: github.com/cncf/xds/go v0.0.0-20240318125728-8a4994d93e50/go.mod h1:5e1+Vvlzido69INQaVO6d87Qn543Xr6nooe9Kz7oBFM=",
          "81: github.com/containerd/containerd v1.7.18 h1:jqjZTQNfXGoEaZdW1WwPU0RqSn1Bm2Ay/KJPUuO8nao=",
          "82: github.com/containerd/containerd v1.7.18/go.mod h1:IYEk9/IO6wAPUz2bCMVUbsfXjzw5UNP5fLz4PsUygQ4=",
          "83: github.com/containerd/continuity v0.4.2 h1:v3y/4Yz5jwnvqPKJJ+7Wf93fyWoCB3F5EclWG023MDM=",
          "84: github.com/containerd/continuity v0.4.2/go.mod h1:F6PTNCKepoxEaXLQp3wDAjygEnImnZ/7o4JzpodfroQ=",
          "85: github.com/containerd/errdefs v0.1.0 h1:m0wCRBiu1WJT/Fr+iOoQHMQS/eP5myQ8lCv4Dz5ZURM=",
          "86: github.com/containerd/errdefs v0.1.0/go.mod h1:YgWiiHtLmSeBrvpw+UfPijzbLaB77mEG1WwJTDETIV0=",
          "87: github.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=",
          "88: github.com/containerd/log v0.1.0/go.mod h1:VRRf09a7mHDIRezVKTRCrOq78v577GXq3bSa3EhrzVo=",
          "89: github.com/containerd/stargz-snapshotter/estargz v0.14.3 h1:OqlDCK3ZVUO6C3B/5FSkDwbkEETK84kQgEeFwDC+62k=",
          "90: github.com/containerd/stargz-snapshotter/estargz v0.14.3/go.mod h1:KY//uOCIkSuNAHhJogcZtrNHdKrA99/FCCRjE3HD36o=",
          "97: github.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=",
          "102: github.com/creack/pty v1.1.18 h1:n56/Zwd5o6whRC5PMGretI4IdRLlmBXYNjScPaBgsbY=",
          "103: github.com/creack/pty v1.1.18/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "93: github.com/decred/dcrd/dcrec/secp256k1/v4 v4.2.0/go.mod h1:v57UDF4pDQJcEfFUCRop3lJL149eHGSe9Jvczhzjo/0=",
          "94: github.com/dlclark/regexp2 v1.8.1 h1:6Lcdwya6GjPUNsBct8Lg/yRPwMhABj269AAzdGSiR+0=",
          "95: github.com/dlclark/regexp2 v1.8.1/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=",
          "98: github.com/docker/docker v24.0.9+incompatible h1:HPGzNmwfLZWdxHqK9/II92pyi1EpYKsAqcl4G0Of9v0=",
          "99: github.com/docker/docker v24.0.9+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=",
          "100: github.com/docker/go-connections v0.4.0 h1:El9xVISelRB7BuFusrZozjnkIM5YnzCViNKohAFqRJQ=",
          "101: github.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=",
          "102: github.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=",
          "103: github.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=",
          "104: github.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=",
          "107: github.com/dsnet/compress v0.0.2-0.20210315054119-f66993602bf5 h1:iFaUwBSo5Svw6L7HYpRu/0lE3e0BaElwnNO1qkNQxBY=",
          "108: github.com/dsnet/compress v0.0.2-0.20210315054119-f66993602bf5/go.mod h1:qssHWj60/X5sZFNxpG4HBPDHVqxNm4DfnCKgrbZOT+s=",
          "109: github.com/dsnet/golib v0.0.0-20171103203638-1ea166775780/go.mod h1:Lj+Z9rebOhdfkVLjJ8T6VcRQv3SXugXy999NBtR9aFY=",
          "",
          "[Removed Lines]",
          "96: github.com/docker/cli v20.10.17+incompatible h1:eO2KS7ZFeov5UJeaDmIs1NFEDRf32PaqRpvoEkKBy5M=",
          "97: github.com/docker/cli v20.10.17+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=",
          "105: github.com/donomii/go-rwkv.cpp v0.0.0-20240228065144-661e7ae26d44 h1:7ugfZIj9QLUnddxOJdHk0tpwGMvUTo7vA47Yd49bPX8=",
          "106: github.com/donomii/go-rwkv.cpp v0.0.0-20240228065144-661e7ae26d44/go.mod h1:gWy7FIWioqYmYxkaoFyBnaKApeZVrUkHhv9EV9pz4dM=",
          "",
          "[Added Lines]",
          "115: github.com/docker/cli v24.0.0+incompatible h1:0+1VshNwBQzQAx9lOl+OYCTCEAD8fKs/qeXMx3O0wqM=",
          "116: github.com/docker/cli v24.0.0+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=",
          "117: github.com/docker/distribution v2.8.2+incompatible h1:T3de5rq0dB1j30rp0sA2rER+m322EBzniBPB6ZIzuh8=",
          "118: github.com/docker/distribution v2.8.2+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=",
          "121: github.com/docker/docker-credential-helpers v0.7.0 h1:xtCHsjxogADNZcdv1pKUHXryefjlVRqWqIhk/uXJp0A=",
          "122: github.com/docker/docker-credential-helpers v0.7.0/go.mod h1:rETQfLdHNT3foU5kuNkFR1R1V12OJRRO5lzt2D1b5X0=",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "119: github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=",
          "120: github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=",
          "121: github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=",
          "122: github.com/flynn/go-shlex v0.0.0-20150515145356-3f9db97f8568/go.mod h1:xEzjJPgXI435gkrCt3MPfRiAkVrwSbHsst4LCFVfpJc=",
          "123: github.com/flynn/noise v1.0.0 h1:DlTHqmzmvcEiKj+4RYo/imoswx/4r6iBlCMfVtrMXpQ=",
          "124: github.com/flynn/noise v1.0.0/go.mod h1:xbMo+0i6+IGbYdJhF31t2eR1BIU0CYc12+BNAKwUTag=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: github.com/envoyproxy/protoc-gen-validate v1.0.4 h1:gVPz/FMfvh57HdSJQyvBtF00j8JU4zdyUgIUNhlgg0A=",
          "144: github.com/envoyproxy/protoc-gen-validate v1.0.4/go.mod h1:qys6tmnRsYrQqIhm2bvKZH4Blx/1gTIZ2UKVY1M+Yew=",
          "145: github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=",
          "146: github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "130: github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=",
          "131: github.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=",
          "132: github.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=",
          "135: github.com/ghodss/yaml v1.0.0 h1:wQHKEahhL6wmXdzwWG11gIVCkOv05bNOh+Rxn0yngAk=",
          "136: github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=",
          "137: github.com/gliderlabs/ssh v0.1.1/go.mod h1:U7qILu1NlMHj9FlMhZLlkCdDnU1DBEAqr0aevW3Awn0=",
          "",
          "[Removed Lines]",
          "133: github.com/ggerganov/whisper.cpp/bindings/go v0.0.0-20230628193450-85ed71aaec8e h1:KtbU2JR3lJuXFASHG2+sVLucfMPBjWKUUKByX6C81mQ=",
          "134: github.com/ggerganov/whisper.cpp/bindings/go v0.0.0-20230628193450-85ed71aaec8e/go.mod h1:QIjZ9OktHFG7p+/m3sMvrAJKKdWrr1fZIK0rM6HZlyo=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "158: github.com/go-openapi/spec v0.21.0/go.mod h1:78u6VdPw81XU44qEWGhtr982gJ5BWg2c0I5XwVMotYk=",
          "159: github.com/go-openapi/swag v0.23.0 h1:vsEVJDUo2hPJ2tu0/Xc+4noaxyEffXNIs3cOULZ+GrE=",
          "160: github.com/go-openapi/swag v0.23.0/go.mod h1:esZ8ITTYEsH1V2trKHjAN8Ai7xHb8RV+YSZ577vPjgQ=",
          "165: github.com/go-sql-driver/mysql v1.7.1 h1:lUIinVbN1DY0xBg0eMOzmmtGoHwWBbvnWubQUrtU8EI=",
          "166: github.com/go-sql-driver/mysql v1.7.1/go.mod h1:OXbVy3sEdcQ2Doequ6Z5BW6fXNQTmx+9S1MCJN5yJMI=",
          "167: github.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0/go.mod h1:fyg7847qk6SyHyPtNmDHnmrv/HOrqktSC+C9fM+CJOE=",
          "",
          "[Removed Lines]",
          "161: github.com/go-skynet/go-bert.cpp v0.0.0-20230716133540-6abe312cded1 h1:yXvc7QfGtoZ51tUW/YVjoTwAfh8HG88XU7UOrbNlz5Y=",
          "162: github.com/go-skynet/go-bert.cpp v0.0.0-20230716133540-6abe312cded1/go.mod h1:fYjkCDRzC+oRLHSjQoajmYK6AmeJnmEanV27CClAcDc=",
          "163: github.com/go-skynet/go-llama.cpp v0.0.0-20231009155254-aeba71ee8428 h1:WYjkXL0Nw7dN2uDBMVCWQ8xLavrIhjF/DLczuh5L9TY=",
          "164: github.com/go-skynet/go-llama.cpp v0.0.0-20231009155254-aeba71ee8428/go.mod h1:iub0ugfTnflE3rcIuqV2pQSo15nEw3GLW/utm5gyERo=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "200: github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=",
          "201: github.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=",
          "202: github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=",
          "203: github.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=",
          "204: github.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=",
          "205: github.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: github.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "229: github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=",
          "230: github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=",
          "231: github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=",
          "232: github.com/google/go-github v17.0.0+incompatible/go.mod h1:zLgOLi98H3fifZn+44m+umXrS52loVEgC2AApnigrVQ=",
          "233: github.com/google/go-querystring v1.0.0/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=",
          "234: github.com/google/gopacket v1.1.19 h1:ves8RnFZPGiFnTS0uPQStjwru6uO6h+nlr9j6fL7kF8=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: github.com/google/go-containerregistry v0.19.1 h1:yMQ62Al6/V0Z7CqIrrS1iYoA5/oQCm88DeNujc7C1KY=",
          "253: github.com/google/go-containerregistry v0.19.1/go.mod h1:YCMFNQeeXeLF+dnhhWkqDItx/JSkH01j1Kis4PsjzFI=",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "238: github.com/google/pprof v0.0.0-20230821062121-407c9e7a662f h1:pDhu5sgp8yJlEF/g6osliIIpF9K4F5jvkULXa4daRDQ=",
          "239: github.com/google/pprof v0.0.0-20230821062121-407c9e7a662f/go.mod h1:czg5+yv1E0ZGTi6S6vVK1mke0fV+FaUhNGcd6VRS9Ik=",
          "240: github.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=",
          "241: github.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 h1:El6M4kTTCOh6aBiKaUGG7oYTSPP8MxqL4YI3kZKwcP4=",
          "242: github.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510/go.mod h1:pupxD2MaaD3pAXIBCelhxNneeOaAeabZDe5s4K6zSpQ=",
          "243: github.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=",
          "244: github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=",
          "245: github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=",
          "246: github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=",
          "247: github.com/googleapis/gax-go v2.0.0+incompatible/go.mod h1:SFVmujtThgffbyetf+mdk2eWhX2bMyUtNHzFKcPA9HY=",
          "248: github.com/googleapis/gax-go/v2 v2.0.3/go.mod h1:LLvjysVCY1JZeum8Z6l8qUty8fiNwE08qbEPm1M08qg=",
          "249: github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=",
          "250: github.com/gopherjs/gopherjs v0.0.0-20190430165422-3e4dfb77656c h1:7lF+Vz0LqiRidnzC1Oq86fpX1q/iEv2KJdrCtttYjT4=",
          "251: github.com/gopherjs/gopherjs v0.0.0-20190430165422-3e4dfb77656c/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263: github.com/google/s2a-go v0.1.7 h1:60BLSyTrOV4/haCDW4zb1guZItoSq8foHCXrAnjBo/o=",
          "264: github.com/google/s2a-go v0.1.7/go.mod h1:50CgR4k1jNlWBu4UfS4AcfhVe1r6pdZPygJ3R8F0Qdw=",
          "271: github.com/googleapis/enterprise-certificate-proxy v0.3.2 h1:Vie5ybvEvT75RniqhfFxPRy3Bf7vr3h0cechB90XaQs=",
          "272: github.com/googleapis/enterprise-certificate-proxy v0.3.2/go.mod h1:VLSiSSBs/ksPL8kq3OBOQ6WRI2QnaFynd1DCjZ62+V0=",
          "275: github.com/googleapis/gax-go/v2 v2.12.2 h1:mhN09QQW1jEWeMF74zGR81R30z4VJzjZsfkUhuHF+DA=",
          "276: github.com/googleapis/gax-go/v2 v2.12.2/go.mod h1:61M8vcyyXR2kqKFxKrfA22jaA8JGF7Dc8App1U3H6jc=",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "255: github.com/gorilla/websocket v1.5.0/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=",
          "256: github.com/gregjones/httpcache v0.0.0-20180305231024-9cad4c3443a7/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=",
          "257: github.com/grpc-ecosystem/grpc-gateway v1.5.0/go.mod h1:RSKVYQBd5MCa4OVpNdGskqpgL2+G+NZTnrVHpWWfpdw=",
          "258: github.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=",
          "259: github.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=",
          "260: github.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286: github.com/grpc-ecosystem/grpc-gateway v1.16.0 h1:gmcG1KaJ57LophUzW0Hy8NmPhnMZb4M0+kPpLofRdBo=",
          "287: github.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "432: github.com/mitchellh/reflectwalk v1.0.0/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=",
          "433: github.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=",
          "434: github.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=",
          "437: github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=",
          "438: github.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=",
          "439: github.com/mr-tron/base58 v1.1.2/go.mod h1:BinMc/sQntlIE1frQmRFPUoPA1Zkr8VRgBdjWI2mNwc=",
          "",
          "[Removed Lines]",
          "435: github.com/moby/term v0.0.0-20201216013528-df9cb8a40635 h1:rzf0wL0CHVc8CEsgyygG0Mn9CNCCPZqOPaz8RiiHYQk=",
          "436: github.com/moby/term v0.0.0-20201216013528-df9cb8a40635/go.mod h1:FBS0z0QWA44HXygs7VXDUOGoN/1TV3RuWkLO04am3wc=",
          "",
          "[Added Lines]",
          "465: github.com/moby/sys/mountinfo v0.6.2 h1:BzJjoreD5BMFNmD9Rus6gdd1pLuecOFPt8wC+Vygl78=",
          "466: github.com/moby/sys/mountinfo v0.6.2/go.mod h1:IJb6JQeOklcdMU9F5xQ8ZALD+CUr5VlGpwtX+VE0rpI=",
          "467: github.com/moby/sys/sequential v0.5.0 h1:OPvI35Lzn9K04PBbCLW0g4LcFAJgHsvXsRyewg5lXtc=",
          "468: github.com/moby/sys/sequential v0.5.0/go.mod h1:tH2cOOs5V9MlPiXcQzRC+eEyab644PWKGRYaaV5ZZlo=",
          "469: github.com/moby/term v0.0.0-20221205130635-1aeaba878587 h1:HfkjXDfhgVaN5rmueG8cL8KKeFNecRCXFhaJ2qZ5SKA=",
          "470: github.com/moby/term v0.0.0-20221205130635-1aeaba878587/go.mod h1:8FzsFHVUBGZdbDsJw/ot+X+d5HLUbvklYLJ9uGfcI3Y=",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "441: github.com/mr-tron/base58 v1.2.0/go.mod h1:BinMc/sQntlIE1frQmRFPUoPA1Zkr8VRgBdjWI2mNwc=",
          "442: github.com/mudler/edgevpn v0.25.3 h1:mfz1L8ks+Qdbf6VuD7JhB6xNDgjCYCdcOUE5pUVUemQ=",
          "443: github.com/mudler/edgevpn v0.25.3/go.mod h1:SQdr1svvxv6vqADXSpdWGn/cMCJse2nNNFDu+AT913M=",
          "446: github.com/mudler/go-processmanager v0.0.0-20230818213616-f204007f963c h1:CI5uGwqBpN8N7BrSKC+nmdfw+9nPQIDyjHHlaIiitZI=",
          "447: github.com/mudler/go-processmanager v0.0.0-20230818213616-f204007f963c/go.mod h1:gY3wyrhkRySJtmtI/JPt4a2mKv48h/M9pEZIW+SjeC0=",
          "450: github.com/mudler/water v0.0.0-20221010214108-8c7313014ce0 h1:Qh6ghkMgTu6siFbTf7L3IszJmshMhXxNL4V+t7IIA6w=",
          "451: github.com/mudler/water v0.0.0-20221010214108-8c7313014ce0/go.mod h1:nViSE8jcOcraZwhi34joEqn7HYFISgs0M8/YujzY5Xk=",
          "452: github.com/muesli/reflow v0.3.0 h1:IFsN6K9NfGtjeggFP+68I4chLZV2yIKsXJFNZ+eWh6s=",
          "",
          "[Removed Lines]",
          "444: github.com/mudler/go-piper v0.0.0-20230621222733-56b8a81b4760 h1:OFVkSxR7CRSRSNm5dvpMRZwmSwWa8EMMnHbc84fW5tU=",
          "445: github.com/mudler/go-piper v0.0.0-20230621222733-56b8a81b4760/go.mod h1:O7SwdSWMilAWhBZMK9N9Y/oBDyMMzshE3ju8Xkexwig=",
          "448: github.com/mudler/go-stable-diffusion v0.0.0-20230605122230-d89260f598af h1:XFq6OUqsWQam0OrEr05okXsJK/TQur3zoZTHbiZD3Ks=",
          "449: github.com/mudler/go-stable-diffusion v0.0.0-20230605122230-d89260f598af/go.mod h1:8ufRkpz/S/9ahkaxzZ5i4WMgO9w4InEhuRoT7vK5Rnw=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "479: github.com/multiformats/go-varint v0.0.7/go.mod h1:r8PUYw/fD/SjBCiKOoDlGF6QawOELpZAu9eioSos/OU=",
          "480: github.com/neelance/astrewrite v0.0.0-20160511093645-99348263ae86/go.mod h1:kHJEU3ofeGjhHklVoIGuVj85JJwZ6kWPaJwCIxgnFmo=",
          "481: github.com/neelance/sourcemap v0.0.0-20151028013722-8c68805598ab/go.mod h1:Qr6/a/Q4r9LP1IltGz7tA7iOK1WonHEYhu1HRBA7ZiM=",
          "484: github.com/nwaples/rardecode v1.1.0 h1:vSxaY8vQhOcVr4mm5e8XllHWTiM4JF507A0Katqw7MQ=",
          "485: github.com/nwaples/rardecode v1.1.0/go.mod h1:5DzqNKiOdpKKBH87u8VlvAnPZMXcGRhxWkRpHbbfGS0=",
          "486: github.com/nxadm/tail v1.4.4/go.mod h1:kenIhsEOeOJmVchQTgglprH7qJGnHDVpk1VPCcaMI8A=",
          "",
          "[Removed Lines]",
          "482: github.com/nomic-ai/gpt4all/gpt4all-bindings/golang v0.0.0-20231022042237-c25dc5193530 h1:YXMxHwHMB9jCBo2Yu5gz3mTB3T1TnZs/HmPLv15LUSA=",
          "483: github.com/nomic-ai/gpt4all/gpt4all-bindings/golang v0.0.0-20231022042237-c25dc5193530/go.mod h1:4T3CHXyrt+7FQHXaxULZfPjHbD8/99WuDDJa0YVZARI=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "502: github.com/onsi/gomega v1.33.0/go.mod h1:+925n5YtiFsLzzafLUHzVMBpvvRAzrydIBiSIxjX3wY=",
          "503: github.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=",
          "504: github.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=",
          "507: github.com/opencontainers/runc v1.1.12 h1:BOIssBaW1La0/qbNZHXOOa71dZfZEQOzW7dqQf3phss=",
          "508: github.com/opencontainers/runc v1.1.12/go.mod h1:S+lQwSfncpBha7XTy/5lBwWgm5+y5Ma/O44Ekby9FK8=",
          "509: github.com/opencontainers/runtime-spec v1.0.2/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=",
          "",
          "[Removed Lines]",
          "505: github.com/opencontainers/image-spec v1.0.2 h1:9yCKha/T5XdGtO0q9Q9a6T5NUCsTn/DrBg0D7ufOcFM=",
          "506: github.com/opencontainers/image-spec v1.0.2/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=",
          "",
          "[Added Lines]",
          "533: github.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=",
          "534: github.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "565: github.com/rivo/uniseg v0.1.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=",
          "566: github.com/rivo/uniseg v0.2.0 h1:S1pD9weZBuJdFmowNwbpi7BJ8TNftyUImj/0WQi72jY=",
          "567: github.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=",
          "568: github.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=",
          "569: github.com/rogpeppe/go-internal v1.11.0 h1:cWPaGQEPrBb5/AsnsZesgZZ9yb1OQ+GOISoDNXVBh4M=",
          "570: github.com/rogpeppe/go-internal v1.11.0/go.mod h1:ddIwULY96R17DhadqLgMfk9H9tvdUzkipdSkR5nkCZA=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596: github.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "575: github.com/russross/blackfriday v1.6.0 h1:KqfZb0pUVN2lYqZUYRddxF4OR8ZMURnJIG5Y3VRLtww=",
          "576: github.com/russross/blackfriday v1.6.0/go.mod h1:ti0ldHuxg49ri4ksnFxlkCfN+hvslNlmVHqNRXXJNAY=",
          "577: github.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=",
          "578: github.com/sashabaranov/go-openai v1.20.4 h1:095xQ/fAtRa0+Rj21sezVJABgKfGPNbyx/sAN/hJUmg=",
          "579: github.com/sashabaranov/go-openai v1.20.4/go.mod h1:lj5b/K+zjTSFxVLijLSTDZuP7adOgerWeFyZLUhAKRg=",
          "580: github.com/schollz/progressbar/v3 v3.13.1 h1:o8rySDYiQ59Mwzy2FELeHY5ZARXZTVJC7iHD6PEFUiE=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "607: github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "614: github.com/shurcooL/users v0.0.0-20180125191416-49c67e49c537/go.mod h1:QJTqeLYEDaXHZDBsXlPCDqdhQuJkuw4NOtaxYe3xii4=",
          "615: github.com/shurcooL/webdavfs v0.0.0-20170829043945-18c3829fa133/go.mod h1:hKmq5kWdCj2z2KEozexVbfEZIWiTjhE0+UjmZgPqehw=",
          "616: github.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=",
          "619: github.com/smallnest/ringbuffer v0.0.0-20240423223918-bab516b2000b h1:e9eeuSYSLmUKxy7ALzKcxo7ggTceQaVcBhjDIcewa9c=",
          "620: github.com/smallnest/ringbuffer v0.0.0-20240423223918-bab516b2000b/go.mod h1:tAG61zBM1DYRaGIPloumExGvScf08oHuo0kFoOqdbT0=",
          "621: github.com/smartystreets/assertions v1.2.0/go.mod h1:tcbTF8ujkAEcZ8TElKY+i30BzYlVhC/LOxJk7iOWnoo=",
          "",
          "[Removed Lines]",
          "617: github.com/sirupsen/logrus v1.8.1 h1:dJKuHgqk1NNQlqoA6BTlM1Wf9DOH3NBjQyu0h9+AZZE=",
          "618: github.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=",
          "",
          "[Added Lines]",
          "647: github.com/sirupsen/logrus v1.9.0/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=",
          "648: github.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=",
          "649: github.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "632: github.com/spf13/cast v1.3.1/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=",
          "633: github.com/spf13/cast v1.5.0 h1:rj3WzYc11XZaIZMPKmwP96zkFEnnAmV8s6XbB2aY32w=",
          "634: github.com/spf13/cast v1.5.0/go.mod h1:SpXXQ5YoyJw6s3/6cMTQuxvgRl3PCJiyaX9p6b155UU=",
          "636: github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=",
          "637: github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=",
          "638: github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=",
          "",
          "[Removed Lines]",
          "635: github.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "653: github.com/swaggo/swag v1.16.3 h1:PnCYjPCah8FK4I26l2F/KQ4yz3sILcVUN3cTlBFA9Pg=",
          "654: github.com/swaggo/swag v1.16.3/go.mod h1:DImHIuOFXKpMFAQjcC7FG4m3Dg4+QuUgUzJmKjI/gRk=",
          "655: github.com/tarm/serial v0.0.0-20180830185346-98f6abe2eb07/go.mod h1:kDXzergiv9cbyO7IOYJZWg1U88JhDg3PB6klq9Hg2pA=",
          "658: github.com/thxcode/gguf-parser-go v0.0.6 h1:2lbnqA9r/4kyfOUZxy3VWRP60IkfNb31l57GmzOzYKE=",
          "659: github.com/thxcode/gguf-parser-go v0.0.6/go.mod h1:xHPU1OI4c0KHVTGYjTZIkLRJhBZUb9wDTFYFvkRXo9M=",
          "660: github.com/tinylib/msgp v1.1.8 h1:FCXC1xanKO4I8plpHGH2P7koL/RzZs12l/+r7vakfm0=",
          "",
          "[Removed Lines]",
          "656: github.com/thxcode/gguf-parser-go v0.0.5 h1:fYjrrQ6DFMTOCxP5iWolFIgAS9uB6Lj0MLsabYd+WUA=",
          "657: github.com/thxcode/gguf-parser-go v0.0.5/go.mod h1:xHPU1OI4c0KHVTGYjTZIkLRJhBZUb9wDTFYFvkRXo9M=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "672: github.com/ulikunitz/xz v0.5.9/go.mod h1:nbz6k7qbPmH4IRqmfOplQw/tblSgqTqBwxkY0oWt/14=",
          "673: github.com/urfave/cli v1.22.2/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=",
          "674: github.com/urfave/cli v1.22.10/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=",
          "675: github.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=",
          "676: github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=",
          "677: github.com/valyala/fasthttp v1.51.0 h1:8b30A5JlZ6C7AS81RsWjYMQmrZG6feChmgAolCl1SqA=",
          "678: github.com/valyala/fasthttp v1.51.0/go.mod h1:oI2XroL+lI7vdXyYoQk03bXBThfFl2cVdIA3Xl7cH8g=",
          "679: github.com/valyala/tcplisten v1.0.0 h1:rBHj/Xf+E1tRGZyWIWwJDiRY0zc1Js+CV5DqwacVSA8=",
          "680: github.com/valyala/tcplisten v1.0.0/go.mod h1:T0xQ8SeCZGxckz9qRXTfG43PvQ/mcWh7FwZEA7Ioqkc=",
          "681: github.com/viant/assertly v0.4.8/go.mod h1:aGifi++jvCrUaklKEKT0BU95igDNaqkvz+49uaYMPRU=",
          "682: github.com/viant/toolbox v0.24.0/go.mod h1:OxMCG57V0PXuIP2HNQrtJf2CjqdmbrOx5EkMILuUhzM=",
          "686: github.com/vishvananda/netns v0.0.0-20211101163701-50045581ed74 h1:gga7acRE695APm9hlsSMoOoE65U4/TcqNj90mc69Rlg=",
          "687: github.com/vishvananda/netns v0.0.0-20211101163701-50045581ed74/go.mod h1:DD4vA1DwXk04H54A1oHXtwZmA0grkVMdPxx/VGLCah0=",
          "688: github.com/warpfork/go-wish v0.0.0-20220906213052-39a1cc7a02d0 h1:GDDkbFiaK8jsSDJfjId/PEGEShv6ugrt4kYsC5UIDaQ=",
          "689: github.com/warpfork/go-wish v0.0.0-20220906213052-39a1cc7a02d0/go.mod h1:x6AKhvSSexNrVSrViXSHUEbICjmGXhtgABaHIySUSGw=",
          "690: github.com/whyrusleeping/go-keyspace v0.0.0-20160322163242-5b898ac5add1 h1:EKhdznlJHPMoKr0XTrX+IlJs1LH3lyx2nfr1dOlZ79k=",
          "691: github.com/whyrusleeping/go-keyspace v0.0.0-20160322163242-5b898ac5add1/go.mod h1:8UvriyWtv5Q5EOgjHaSseUEdkQfvwFv1I/In/O2M9gc=",
          "693: github.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=",
          "694: github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 h1:EzJWgHovont7NscjpAxXsDA8S8BMYve8Y5+7cuRE7R0=",
          "695: github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=",
          "696: github.com/xeipuuv/gojsonschema v1.2.0 h1:LhYJRs+L4fBtjZUfuSZIKGeVu0QRy8e5Xi7D17UxZ74=",
          "",
          "[Removed Lines]",
          "683: github.com/vishvananda/netlink v1.1.0 h1:1iyaYNBLmP6L0220aDnYQpo1QEV4t4hJ+xEEhhJH8j0=",
          "684: github.com/vishvananda/netlink v1.1.0/go.mod h1:cTgwzPIzzgDAYoQrMm0EdrjRUBkTqKYppBueQtXaqoE=",
          "685: github.com/vishvananda/netns v0.0.0-20191106174202-0a2b9b5464df/go.mod h1:JP3t17pCcGlemwknint6hfoeCVQrEMVwxRLRjXpq+BU=",
          "692: github.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f h1:J9EGpcZtP0E/raorCMxlFGSTBrsSlaDGf3jU/qvAE2c=",
          "",
          "[Added Lines]",
          "703: github.com/urfave/cli v1.22.12/go.mod h1:sSBEIC79qR6OvcmsD4U3KABeOTxDqQtdDnaFuUN30b8=",
          "710: github.com/vbatts/tar-split v0.11.3 h1:hLFqsOLQ1SsppQNTMpkpPXClLDfC2A3Zgy9OUU+RVck=",
          "711: github.com/vbatts/tar-split v0.11.3/go.mod h1:9QlHN18E+fEH7RdG+QAJJcuya3rqT7eXSTY7wGrAokY=",
          "714: github.com/vishvananda/netlink v1.2.1-beta.2 h1:Llsql0lnQEbHj0I1OuKyp8otXp0r3q0mPkuhwHfStVs=",
          "715: github.com/vishvananda/netlink v1.2.1-beta.2/go.mod h1:twkDnbuQxJYemMlGd4JFIcuhgX83tXhKS2B/PRMpOho=",
          "716: github.com/vishvananda/netns v0.0.0-20200728191858-db3c7e526aae/go.mod h1:DD4vA1DwXk04H54A1oHXtwZmA0grkVMdPxx/VGLCah0=",
          "724: github.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb h1:zGWFAtiMcyryUHoUjUJX0/lt1H2+i2Ka2n+D3DImSNo=",
          "725: github.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "711: go.opencensus.io v0.18.0/go.mod h1:vKdFvxhtzZ9onBp9VKHK8z/sRpBMnKAsufL7wlDrCOA=",
          "712: go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=",
          "713: go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=",
          "716: go.opentelemetry.io/otel/exporters/prometheus v0.42.0 h1:jwV9iQdvp38fxXi8ZC+lNpxjK16MRcZlpDYvbuO1FiA=",
          "717: go.opentelemetry.io/otel/exporters/prometheus v0.42.0/go.mod h1:f3bYiqNqhoPxkvI2LrXqQVC546K7BuRDL/kKuxkujhA=",
          "722: go.opentelemetry.io/otel/sdk/metric v1.19.0 h1:EJoTO5qysMsYCa+w4UghwFV/ptQgqSL/8Ni+hx+8i1k=",
          "723: go.opentelemetry.io/otel/sdk/metric v1.19.0/go.mod h1:XjG0jQyFJrv2PbMvwND7LwCEhsJzCzV5210euduKcKY=",
          "726: go.uber.org/atomic v1.6.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=",
          "727: go.uber.org/atomic v1.7.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=",
          "728: go.uber.org/atomic v1.11.0 h1:ZvwS0R+56ePWxUNi+Atn9dWONBPp/AUETXlHW0DxSjE=",
          "",
          "[Removed Lines]",
          "714: go.opentelemetry.io/otel v1.19.0 h1:MuS/TNf4/j4IXsZuJegVzI1cwut7Qc00344rgH7p8bs=",
          "715: go.opentelemetry.io/otel v1.19.0/go.mod h1:i0QyjOq3UPoTzff0PJB2N66fb4S0+rSbSB15/oyH9fY=",
          "718: go.opentelemetry.io/otel/metric v1.19.0 h1:aTzpGtV0ar9wlV4Sna9sdJyII5jTVJEvKETPiOKwvpE=",
          "719: go.opentelemetry.io/otel/metric v1.19.0/go.mod h1:L5rUsV9kM1IxCj1MmSdS+JQAcVm319EUrDVLrt7jqt8=",
          "720: go.opentelemetry.io/otel/sdk v1.19.0 h1:6USY6zH+L8uMH8L3t1enZPR3WFEmSTADlqldyHtJi3o=",
          "721: go.opentelemetry.io/otel/sdk v1.19.0/go.mod h1:NedEbbS4w3C6zElbLdPJKOpJQOrGUJ+GfzpjUvI0v1A=",
          "724: go.opentelemetry.io/otel/trace v1.19.0 h1:DFVQmlVbfVeOuBRrwdtaehRrWiL1JoVs9CPIQ1Dzxpg=",
          "725: go.opentelemetry.io/otel/trace v1.19.0/go.mod h1:mfaSyvGyEJEI0nyV2I4qhNQnbBOUUmYZpYojqMnX2vo=",
          "",
          "[Added Lines]",
          "746: go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.49.0 h1:jq9TW8u3so/bN+JPT166wjOI6/vQPF6Xe7nMNIltagk=",
          "747: go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.49.0/go.mod h1:p8pYQP+m5XfbZm9fxtSKAbM6oIllS7s2AfxrChvc7iw=",
          "748: go.opentelemetry.io/otel v1.24.0 h1:0LAOdjNmQeSTzGBzduGe/rU4tZhMwL5rWgtp9Ku5Jfo=",
          "749: go.opentelemetry.io/otel v1.24.0/go.mod h1:W7b9Ozg4nkF5tWI5zsXkaKKDjdVjpD4oAt9Qi/MArHo=",
          "752: go.opentelemetry.io/otel/metric v1.24.0 h1:6EhoGWWK28x1fbpA4tYTOWBkPefTDQnb8WSGXlc88kI=",
          "753: go.opentelemetry.io/otel/metric v1.24.0/go.mod h1:VYhLe1rFfxuTXLgj4CBiyz+9WYBA8pNGJgDcSFRKBco=",
          "754: go.opentelemetry.io/otel/sdk v1.22.0 h1:6coWHw9xw7EfClIC/+O31R8IY3/+EiRFHevmHafB2Gw=",
          "755: go.opentelemetry.io/otel/sdk v1.22.0/go.mod h1:iu7luyVGYovrRpe2fmj3CVKouQNdTOkxtLzPvPz1DOc=",
          "758: go.opentelemetry.io/otel/trace v1.24.0 h1:CsKnnL4dUAr/0llH9FKuc698G04IrpWV0MQA/Y1YELI=",
          "759: go.opentelemetry.io/otel/trace v1.24.0/go.mod h1:HPc3Xr/cOApsBI154IU0OI0HJexz+aw5uPdbs3UCjNU=",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "759: golang.org/x/crypto v0.23.0 h1:dIJU/v2J8Mdglj/8rJ6UUOM3Zc9zLZxVZwwxMooUSAI=",
          "760: golang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=",
          "761: golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=",
          "764: golang.org/x/exp v0.0.0-20240506185415-9bf2ced13842 h1:vr/HnozRka3pE4EsMEg1lgkXJkTFJCVUX+S/ZT6wYzM=",
          "765: golang.org/x/exp v0.0.0-20240506185415-9bf2ced13842/go.mod h1:XtvwrStGgqGPLc4cjQfWqZHG1YFdYs6swckp8vpsjnc=",
          "766: golang.org/x/lint v0.0.0-20180702182130-06c8688daad7/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=",
          "",
          "[Removed Lines]",
          "762: golang.org/x/exp v0.0.0-20230817173708-d852ddb80c63 h1:m64FZMko/V45gv0bNmrNYoDEq8U5YUhetc9cBWKS1TQ=",
          "763: golang.org/x/exp v0.0.0-20230817173708-d852ddb80c63/go.mod h1:0v4NqG35kSWCMzLaMeX+IQrlSnVE/bqGSyC2cz/9Le8=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "776: golang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=",
          "777: golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=",
          "778: golang.org/x/mod v0.7.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=",
          "781: golang.org/x/mod v0.17.0 h1:zY54UmvipHiNd+pm+m0x9KhZ9hl1/7QNMyxXbc6ICqA=",
          "782: golang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=",
          "783: golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=",
          "",
          "[Removed Lines]",
          "779: golang.org/x/mod v0.16.0 h1:QX4fJ0Rr5cPQCF7O9lh9Se4pmwfwskqZfq5moyldzic=",
          "780: golang.org/x/mod v0.16.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "793: golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=",
          "794: golang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=",
          "795: golang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=",
          "796: golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=",
          "797: golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=",
          "798: golang.org/x/net v0.0.0-20210119194325-5f4716e94777/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826: golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "809: golang.org/x/oauth2 v0.0.0-20181017192945-9dcd33a902f4/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=",
          "810: golang.org/x/oauth2 v0.0.0-20181203162652-d668ce993890/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=",
          "811: golang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=",
          "812: golang.org/x/perf v0.0.0-20180704124530-6e6d33e29852/go.mod h1:JLpeXjPJfIyPr5TlbXLkXWLhP8nz10XfvxElABhCtcw=",
          "813: golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "814: golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "843: golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=",
          "844: golang.org/x/oauth2 v0.18.0 h1:09qnuIAgzdx1XplqJvW6CQqMCtGZykZWcXzPMPUusvI=",
          "845: golang.org/x/oauth2 v0.18.0/go.mod h1:Wf7knwG0MPoWIMMBgFlEaSUDaKskp0dCfrlJRJXbBi8=",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "820: golang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "821: golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "822: golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=",
          "825: golang.org/x/sync v0.7.0 h1:YsImfSBoP9QPYL0xyKJPq0gcaJdG3rInoqxTWbfQu9M=",
          "826: golang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=",
          "827: golang.org/x/sys v0.0.0-20180810173357-98c5dad5d1a0/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=",
          "",
          "[Removed Lines]",
          "823: golang.org/x/sync v0.6.0 h1:5BMeUDZ7vkXGfEr1x9B4bRcTH4lpkTkpdh0T/J+qjbQ=",
          "824: golang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "831: golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=",
          "832: golang.org/x/sys v0.0.0-20190316082340-a2f829d7f35f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "833: golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "835: golang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "836: golang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "837: golang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "",
          "[Removed Lines]",
          "834: golang.org/x/sys v0.0.0-20190606203320-7fc4e5ec1444/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "841: golang.org/x/sys v0.0.0-20200217220822-9197077df867/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "842: golang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "843: golang.org/x/sys v0.0.0-20200602225109-6fdc65e7d980/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "845: golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "846: golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "847: golang.org/x/sys v0.0.0-20201204225414-ed752295db88/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "",
          "[Removed Lines]",
          "844: golang.org/x/sys v0.0.0-20200831180312-196b9ba8737a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "",
          "[Added Lines]",
          "875: golang.org/x/sys v0.0.0-20200728102440-3e129f6d46b1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "852: golang.org/x/sys v0.0.0-20210426080607-c94f62235c83/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "853: golang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "854: golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "855: golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "856: golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "857: golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "858: golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "859: golang.org/x/sys v0.2.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "860: golang.org/x/sys v0.3.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "861: golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "886: golang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "889: golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "892: golang.org/x/sys v0.0.0-20220906165534-d0df966e6959/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "878: golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=",
          "879: golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=",
          "880: golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=",
          "881: golang.org/x/text v0.4.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=",
          "882: golang.org/x/text v0.5.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=",
          "883: golang.org/x/text v0.15.0 h1:h1V/4gjBv8v9cjcR6+AR5+/cIYK5N/WAgiv4xlsEtAk=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "915: golang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "894: golang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=",
          "895: golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=",
          "896: golang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=",
          "898: golang.org/x/tools v0.0.0-20191029041327-9cc4af7d6b2c/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=",
          "899: golang.org/x/tools v0.0.0-20191029190741-b9c20aec41a5/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=",
          "900: golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=",
          "",
          "[Removed Lines]",
          "897: golang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "906: golang.org/x/tools v0.1.5/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=",
          "907: golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=",
          "908: golang.org/x/tools v0.4.0/go.mod h1:UE5sM2OK9E/d67R0ANs2xJizIymRP5gJU295PvKXxjQ=",
          "911: golang.org/x/tools v0.21.0 h1:qc0xYgIbsSDt9EyWz05J5wfa7LOVW0YTLOXrqdLAWIw=",
          "912: golang.org/x/tools v0.21.0/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=",
          "913: golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=",
          "",
          "[Removed Lines]",
          "909: golang.org/x/tools v0.19.0 h1:tfGCXNR1OsFG+sVdLAitlpjAvD/I6dHDKnYrpEZUHkw=",
          "910: golang.org/x/tools v0.19.0/go.mod h1:qoJWxmGSIBmAeriMx19ogtrEPrGtDbPK634QFIcLAhc=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "925: google.golang.org/api v0.0.0-20180910000450-7ca32eb868bf/go.mod h1:4mhQ8q/RsB7i+udVvVy5NUi08OU8ZlA0gRVgrF7VFY0=",
          "926: google.golang.org/api v0.0.0-20181030000543-1d582fd0359e/go.mod h1:4mhQ8q/RsB7i+udVvVy5NUi08OU8ZlA0gRVgrF7VFY0=",
          "927: google.golang.org/api v0.1.0/go.mod h1:UGEZY7KEX120AnNLIHFMKIo4obdJhkp2tPbaPlQx13Y=",
          "928: google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=",
          "929: google.golang.org/appengine v1.2.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=",
          "930: google.golang.org/appengine v1.3.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=",
          "931: google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=",
          "932: google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=",
          "933: google.golang.org/genproto v0.0.0-20180831171423-11092d34479b/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=",
          "934: google.golang.org/genproto v0.0.0-20181029155118-b69ba1387ce2/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=",
          "935: google.golang.org/genproto v0.0.0-20181202183823-bd91e49a0898/go.mod h1:7Ep/1NZk928CDR8SjdVbjWNpdIf6nzjE3BTgJDr2Atg=",
          "936: google.golang.org/genproto v0.0.0-20190306203927-b5d61aea6440/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=",
          "937: google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=",
          "938: google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=",
          "939: google.golang.org/genproto/googleapis/rpc v0.0.0-20240528184218-531527333157 h1:Zy9XzmMEflZ/MAaA7vNcoebnRAld7FsPW1EeBB7V0m8=",
          "940: google.golang.org/genproto/googleapis/rpc v0.0.0-20240528184218-531527333157/go.mod h1:EfXuqaE1J41VCDicxHzUDm+8rk+7ZdXzHV0IhO/I6s0=",
          "941: google.golang.org/grpc v1.14.0/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "960: google.golang.org/api v0.169.0 h1:QwWPy71FgMWqJN/l6jVlFHUa29a7dcUy02I8o799nPY=",
          "961: google.golang.org/api v0.169.0/go.mod h1:gpNOiMA2tZ4mf5R9Iwf4rK/Dcz0fbdIgWYWVoxmsyLg=",
          "966: google.golang.org/appengine v1.6.8 h1:IhEN5q69dyKagZPYMSdIjS2HqprW324FRQZJcGqPAsM=",
          "967: google.golang.org/appengine v1.6.8/go.mod h1:1jJ3jBArFh5pcgW8gCtRJnepW8FzD1V44FJffLiz/Ds=",
          "974: google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=",
          "976: google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9 h1:9+tzLLstTlPTRyJTh+ah5wIMsBW5c4tQwGTN3thOW9Y=",
          "977: google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9/go.mod h1:mqHbVIp48Muh7Ywss/AD6I5kNVKZMmAa/QEW58Gxp2s=",
          "978: google.golang.org/genproto/googleapis/api v0.0.0-20240318140521-94a12d6c2237 h1:RFiFrvy37/mpSpdySBDrUdipW/dHwsRwh3J3+A9VgT4=",
          "979: google.golang.org/genproto/googleapis/api v0.0.0-20240318140521-94a12d6c2237/go.mod h1:Z5Iiy3jtmioajWHDGFk7CeugTyHtPvMHA4UTmUkyalE=",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "945: google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=",
          "946: google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=",
          "947: google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=",
          "948: google.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=",
          "949: google.golang.org/grpc v1.64.0 h1:KH3VH9y/MgNQg1dE7b3XfVK0GsPSIzJwdF617gUSbvY=",
          "950: google.golang.org/grpc v1.64.0/go.mod h1:oxjF8E3FBnjp+/gVFYdWacaLDx9na1aqy9oovLpxQYg=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "989: google.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "975: gopkg.in/yaml.v1 v1.0.0-20140924161607-9f9df34309c0/go.mod h1:WDnlLJ4WF5VGsH/HVa3CI79GS0ol3YnhVnKP89i0kNg=",
          "976: gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=",
          "977: gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=",
          "978: gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=",
          "979: gopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=",
          "980: gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1020: gopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "984: gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=",
          "985: gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=",
          "986: gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=",
          "988: gotest.tools/v3 v3.3.0 h1:MfDY1b1/0xN1CyMlQDac0ziEy9zJQd9CXBRRDHw2jJo=",
          "989: gotest.tools/v3 v3.3.0/go.mod h1:Mcr9QNxkg0uMvy/YElmo4SpXgJKWgQvYrT7Kw5RzJ1A=",
          "990: grpc.go4.org v0.0.0-20170609214715-11d0a25b4919/go.mod h1:77eQGdRu53HpSqPFJFmuJdjuHRquDANNeA4x7B8WQ9o=",
          "",
          "[Removed Lines]",
          "987: gotest.tools/v3 v3.0.2/go.mod h1:3SzNCllyD9/Y+b5r9JIKQ474KzkZyqLqEfYqMsX94Bk=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "997: howett.net/plist v1.0.0/go.mod h1:lqaXoTrLY4hg8tnEzNru53gicrbv7rrk+2xJA/7hw9g=",
          "998: lukechampine.com/blake3 v1.2.1 h1:YuqqRuaqsGV71BV/nm9xlI0MKUv4QC54jQnBChWbGnI=",
          "999: lukechampine.com/blake3 v1.2.1/go.mod h1:0OFRp7fBtAylGVCO40o87sbupkyIGgbpv1+M1k1LM6k=",
          "1000: sourcegraph.com/sourcegraph/go-diff v0.5.0/go.mod h1:kuch7UrkMzY0X+p9CRK03kfuPQ2zzQcaEFbx8wA8rck=",
          "1001: sourcegraph.com/sqs/pbtypes v0.0.0-20180604144634-d3ebe8f20ae4/go.mod h1:ketZ/q3QxT9HOBeFhu6RdvsftgpsbFHBF5Cas6cDKZ0=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1042: oras.land/oras-go/v2 v2.5.0 h1:o8Me9kLY74Vp5uw07QXPiitjsw7qNXi8Twd+19Zf02c=",
          "1043: oras.land/oras-go/v2 v2.5.0/go.mod h1:z4eisnLP530vwIOUOJeBIj0aGI0L1C3d53atvCBqZHg=",
          "",
          "---------------"
        ],
        "pkg/downloader/uri.go||pkg/downloader/uri.go": [
          "File: pkg/downloader/uri.go -> pkg/downloader/uri.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  \"strconv\"",
          "12:  \"strings\"",
          "14:  \"github.com/go-skynet/LocalAI/pkg/utils\"",
          "15:  \"github.com/rs/zerolog/log\"",
          "16: )",
          "18: const (",
          "19:  HuggingFacePrefix = \"huggingface://\"",
          "20:  HTTPPrefix        = \"http://\"",
          "21:  HTTPSPrefix       = \"https://\"",
          "22:  GithubURI         = \"github:\"",
          "23:  GithubURI2        = \"github://\"",
          "24: )",
          "27:  url = ConvertURL(url)",
          "29:  if strings.HasPrefix(url, \"file://\") {",
          "",
          "[Removed Lines]",
          "26: func GetURI(url string, basePath string, f func(url string, i []byte) error) error {",
          "",
          "[Added Lines]",
          "14:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "16:  \"github.com/go-skynet/LocalAI/pkg/oci\"",
          "23:  OCIPrefix         = \"oci://\"",
          "24:  OllamaPrefix      = \"ollama://\"",
          "31: func DownloadAndUnmarshal(url string, basePath string, f func(url string, i []byte) error) error {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   strings.HasPrefix(s, HTTPSPrefix) ||",
          "77:   strings.HasPrefix(s, HuggingFacePrefix) ||",
          "78:   strings.HasPrefix(s, GithubURI) ||",
          "79:   strings.HasPrefix(s, GithubURI2)",
          "80: }",
          "82: func ConvertURL(s string) string {",
          "83:  switch {",
          "84:  case strings.HasPrefix(s, GithubURI2):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   strings.HasPrefix(s, OllamaPrefix) ||",
          "85:   strings.HasPrefix(s, OCIPrefix) ||",
          "89: func LooksLikeOCI(s string) bool {",
          "90:  return strings.HasPrefix(s, OCIPrefix) || strings.HasPrefix(s, OllamaPrefix)",
          "91: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150: func DownloadFile(url string, filePath, sha string, fileN, total int, downloadStatus func(string, string, string, float64)) error {",
          "151:  url = ConvertURL(url)",
          "153:  _, err := os.Stat(filePath)",
          "154:  if err == nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:  if LooksLikeOCI(url) {",
          "164:   progressStatus := func(desc ocispec.Descriptor) io.Writer {",
          "165:    return &progressWriter{",
          "166:     fileName:       filePath,",
          "167:     total:          desc.Size,",
          "168:     hash:           sha256.New(),",
          "169:     fileNo:         fileN,",
          "170:     totalFiles:     total,",
          "171:     downloadStatus: downloadStatus,",
          "172:    }",
          "173:   }",
          "175:   if strings.HasPrefix(url, OllamaPrefix) {",
          "176:    url = strings.TrimPrefix(url, OllamaPrefix)",
          "177:    return oci.OllamaFetchModel(url, filePath, progressStatus)",
          "178:   }",
          "180:   url = strings.TrimPrefix(url, OCIPrefix)",
          "181:   img, err := oci.GetImage(url, \"\", nil, nil)",
          "182:   if err != nil {",
          "183:    return fmt.Errorf(\"failed to get image %q: %v\", url, err)",
          "184:   }",
          "186:   return oci.ExtractOCIImage(img, filepath.Dir(filePath))",
          "187:  }",
          "",
          "---------------"
        ],
        "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go": [
          "File: pkg/downloader/uri_test.go -> pkg/downloader/uri_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  Context(\"URI\", func() {",
          "11:   It(\"parses github with a branch\", func() {",
          "12:    Expect(",
          "14:      Expect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))",
          "15:      return nil",
          "16:     }),",
          "",
          "[Removed Lines]",
          "13:     GetURI(\"github:go-skynet/model-gallery/gpt4all-j.yaml\", \"\", func(url string, i []byte) error {",
          "",
          "[Added Lines]",
          "13:     DownloadAndUnmarshal(\"github:go-skynet/model-gallery/gpt4all-j.yaml\", \"\", func(url string, i []byte) error {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:   })",
          "19:   It(\"parses github without a branch\", func() {",
          "20:    Expect(",
          "22:      Expect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))",
          "23:      return nil",
          "24:     }),",
          "",
          "[Removed Lines]",
          "21:     GetURI(\"github:go-skynet/model-gallery/gpt4all-j.yaml@main\", \"\", func(url string, i []byte) error {",
          "",
          "[Added Lines]",
          "21:     DownloadAndUnmarshal(\"github:go-skynet/model-gallery/gpt4all-j.yaml@main\", \"\", func(url string, i []byte) error {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "26:   })",
          "27:   It(\"parses github with urls\", func() {",
          "28:    Expect(",
          "30:      Expect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))",
          "31:      return nil",
          "32:     }),",
          "",
          "[Removed Lines]",
          "29:     GetURI(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\", \"\", func(url string, i []byte) error {",
          "",
          "[Added Lines]",
          "29:     DownloadAndUnmarshal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\", \"\", func(url string, i []byte) error {",
          "",
          "---------------"
        ],
        "pkg/gallery/gallery.go||pkg/gallery/gallery.go": [
          "File: pkg/gallery/gallery.go -> pkg/gallery/gallery.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: func findGalleryURLFromReferenceURL(url string, basePath string) (string, error) {",
          "136:  var refFile string",
          "138:   refFile = string(d)",
          "139:   if len(refFile) == 0 {",
          "140:    return fmt.Errorf(\"invalid reference file at url %s: %s\", url, d)",
          "",
          "[Removed Lines]",
          "137:  err := downloader.GetURI(url, basePath, func(url string, d []byte) error {",
          "",
          "[Added Lines]",
          "137:  err := downloader.DownloadAndUnmarshal(url, basePath, func(url string, d []byte) error {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:   }",
          "158:  }",
          "161:   return yaml.Unmarshal(d, &models)",
          "162:  })",
          "163:  if err != nil {",
          "",
          "[Removed Lines]",
          "160:  err := downloader.GetURI(gallery.URL, basePath, func(url string, d []byte) error {",
          "",
          "[Added Lines]",
          "160:  err := downloader.DownloadAndUnmarshal(gallery.URL, basePath, func(url string, d []byte) error {",
          "",
          "---------------"
        ],
        "pkg/gallery/models.go||pkg/gallery/models.go": [
          "File: pkg/gallery/models.go -> pkg/gallery/models.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: func GetGalleryConfigFromURL(url string, basePath string) (Config, error) {",
          "67:  var config Config",
          "69:   return yaml.Unmarshal(d, &config)",
          "70:  })",
          "71:  if err != nil {",
          "",
          "[Removed Lines]",
          "68:  err := downloader.GetURI(url, basePath, func(url string, d []byte) error {",
          "",
          "[Added Lines]",
          "68:  err := downloader.DownloadAndUnmarshal(url, basePath, func(url string, d []byte) error {",
          "",
          "---------------"
        ],
        "pkg/oci/blob.go||pkg/oci/blob.go": [
          "File: pkg/oci/blob.go -> pkg/oci/blob.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package oci",
          "3: import (",
          "4:  \"context\"",
          "5:  \"fmt\"",
          "6:  \"io\"",
          "7:  \"os\"",
          "9:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "11:  oras \"oras.land/oras-go/v2\"",
          "12:  \"oras.land/oras-go/v2/registry/remote\"",
          "13: )",
          "15: func FetchImageBlob(r, reference, dst string, statusReader func(ocispec.Descriptor) io.Writer) error {",
          "17:  fs, err := os.Create(dst)",
          "18:  if err != nil {",
          "19:   return err",
          "20:  }",
          "21:  defer fs.Close()",
          "24:  ctx := context.Background()",
          "25:  repo, err := remote.NewRepository(r)",
          "26:  if err != nil {",
          "27:   return fmt.Errorf(\"failed to create repository: %v\", err)",
          "28:  }",
          "29:  repo.SkipReferrersGC = true",
          "33:  desc, reader, err := oras.Fetch(ctx, repo.Blobs(), reference, oras.DefaultFetchOptions)",
          "34:  if err != nil {",
          "35:   return fmt.Errorf(\"failed to fetch image: %v\", err)",
          "36:  }",
          "38:  if statusReader != nil {",
          "40:   _, err = io.Copy(io.MultiWriter(fs, statusReader(desc)), reader)",
          "41:   if err != nil {",
          "42:    return err",
          "43:   }",
          "44:  } else {",
          "45:   _, err = io.Copy(fs, reader)",
          "46:   if err != nil {",
          "47:    return err",
          "48:   }",
          "49:  }",
          "51:  return nil",
          "52: }",
          "",
          "---------------"
        ],
        "pkg/oci/blob_test.go||pkg/oci/blob_test.go": [
          "File: pkg/oci/blob_test.go -> pkg/oci/blob_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package oci_test",
          "3: import (",
          "4:  \"os\"",
          "6:  . \"github.com/go-skynet/LocalAI/pkg/oci\" // Update with your module path",
          "7:  . \"github.com/onsi/ginkgo/v2\"",
          "8:  . \"github.com/onsi/gomega\"",
          "9: )",
          "11: var _ = Describe(\"OCI\", func() {",
          "12:  Context(\"pulling images\", func() {",
          "13:   It(\"should fetch blobs correctly\", func() {",
          "14:    f, err := os.CreateTemp(\"\", \"ollama\")",
          "15:    Expect(err).NotTo(HaveOccurred())",
          "16:    defer os.RemoveAll(f.Name())",
          "17:    err = FetchImageBlob(\"registry.ollama.ai/library/gemma\", \"sha256:c1864a5eb19305c40519da12cc543519e48a0697ecd30e15d5ac228644957d12\", f.Name(), nil)",
          "18:    Expect(err).NotTo(HaveOccurred())",
          "19:   })",
          "20:  })",
          "21: })",
          "",
          "---------------"
        ],
        "pkg/oci/image.go||pkg/oci/image.go": [
          "File: pkg/oci/image.go -> pkg/oci/image.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package oci",
          "3: import (",
          "4:  \"context\"",
          "5:  \"errors\"",
          "6:  \"fmt\"",
          "7:  \"io\"",
          "8:  \"net/http\"",
          "9:  \"runtime\"",
          "10:  \"strings\"",
          "11:  \"syscall\"",
          "12:  \"time\"",
          "14:  \"github.com/containerd/containerd/archive\"",
          "15:  registrytypes \"github.com/docker/docker/api/types/registry\"",
          "16:  \"github.com/google/go-containerregistry/pkg/authn\"",
          "17:  \"github.com/google/go-containerregistry/pkg/logs\"",
          "18:  \"github.com/google/go-containerregistry/pkg/name\"",
          "19:  v1 \"github.com/google/go-containerregistry/pkg/v1\"",
          "20:  \"github.com/google/go-containerregistry/pkg/v1/mutate\"",
          "21:  \"github.com/google/go-containerregistry/pkg/v1/remote\"",
          "22:  \"github.com/google/go-containerregistry/pkg/v1/remote/transport\"",
          "23: )",
          "26: type staticAuth struct {",
          "27:  auth *registrytypes.AuthConfig",
          "28: }",
          "30: func (s staticAuth) Authorization() (*authn.AuthConfig, error) {",
          "31:  if s.auth == nil {",
          "32:   return nil, nil",
          "33:  }",
          "34:  return &authn.AuthConfig{",
          "35:   Username:      s.auth.Username,",
          "36:   Password:      s.auth.Password,",
          "37:   Auth:          s.auth.Auth,",
          "38:   IdentityToken: s.auth.IdentityToken,",
          "39:   RegistryToken: s.auth.RegistryToken,",
          "40:  }, nil",
          "41: }",
          "43: var defaultRetryBackoff = remote.Backoff{",
          "44:  Duration: 1.0 * time.Second,",
          "45:  Factor:   3.0,",
          "46:  Jitter:   0.1,",
          "47:  Steps:    3,",
          "48: }",
          "50: var defaultRetryPredicate = func(err error) bool {",
          "51:  if err == nil {",
          "52:   return false",
          "53:  }",
          "55:  if errors.Is(err, io.ErrUnexpectedEOF) || errors.Is(err, io.EOF) || errors.Is(err, syscall.EPIPE) || errors.Is(err, syscall.ECONNRESET) || strings.Contains(err.Error(), \"connection refused\") {",
          "56:   logs.Warn.Printf(\"retrying %v\", err)",
          "57:   return true",
          "58:  }",
          "59:  return false",
          "60: }",
          "63: func ExtractOCIImage(img v1.Image, targetDestination string) error {",
          "64:  reader := mutate.Extract(img)",
          "66:  _, err := archive.Apply(context.Background(), targetDestination, reader, archive.WithNoSameOwner())",
          "68:  return err",
          "69: }",
          "71: func ParseImageParts(image string) (tag, repository, dstimage string) {",
          "72:  tag = \"latest\"",
          "73:  repository = \"library\"",
          "74:  if strings.Contains(image, \":\") {",
          "75:   parts := strings.Split(image, \":\")",
          "76:   image = parts[0]",
          "77:   tag = parts[1]",
          "78:  }",
          "79:  if strings.Contains(\"/\", image) {",
          "80:   parts := strings.Split(image, \"/\")",
          "81:   repository = parts[0]",
          "82:   image = parts[1]",
          "83:  }",
          "84:  dstimage = image",
          "85:  return tag, repository, image",
          "86: }",
          "91: func GetImage(targetImage, targetPlatform string, auth *registrytypes.AuthConfig, t http.RoundTripper) (v1.Image, error) {",
          "92:  var platform *v1.Platform",
          "93:  var image v1.Image",
          "94:  var err error",
          "96:  if targetPlatform != \"\" {",
          "97:   platform, err = v1.ParsePlatform(targetPlatform)",
          "98:   if err != nil {",
          "99:    return image, err",
          "100:   }",
          "101:  } else {",
          "102:   platform, err = v1.ParsePlatform(fmt.Sprintf(\"%s/%s\", runtime.GOOS, runtime.GOARCH))",
          "103:   if err != nil {",
          "104:    return image, err",
          "105:   }",
          "106:  }",
          "108:  ref, err := name.ParseReference(targetImage)",
          "109:  if err != nil {",
          "110:   return image, err",
          "111:  }",
          "113:  if t == nil {",
          "114:   t = http.DefaultTransport",
          "115:  }",
          "117:  tr := transport.NewRetry(t,",
          "118:   transport.WithRetryBackoff(defaultRetryBackoff),",
          "119:   transport.WithRetryPredicate(defaultRetryPredicate),",
          "120:  )",
          "122:  opts := []remote.Option{",
          "123:   remote.WithTransport(tr),",
          "124:   remote.WithPlatform(*platform),",
          "125:  }",
          "126:  if auth != nil {",
          "127:   opts = append(opts, remote.WithAuth(staticAuth{auth}))",
          "128:  } else {",
          "129:   opts = append(opts, remote.WithAuthFromKeychain(authn.DefaultKeychain))",
          "130:  }",
          "132:  image, err = remote.Image(ref, opts...)",
          "134:  return image, err",
          "135: }",
          "137: func GetOCIImageSize(targetImage, targetPlatform string, auth *registrytypes.AuthConfig, t http.RoundTripper) (int64, error) {",
          "138:  var size int64",
          "139:  var img v1.Image",
          "140:  var err error",
          "142:  img, err = GetImage(targetImage, targetPlatform, auth, t)",
          "143:  if err != nil {",
          "144:   return size, err",
          "145:  }",
          "146:  layers, _ := img.Layers()",
          "147:  for _, layer := range layers {",
          "148:   s, _ := layer.Size()",
          "149:   size += s",
          "150:  }",
          "152:  return size, nil",
          "153: }",
          "",
          "---------------"
        ],
        "pkg/oci/image_test.go||pkg/oci/image_test.go": [
          "File: pkg/oci/image_test.go -> pkg/oci/image_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package oci_test",
          "3: import (",
          "4:  \"os\"",
          "5:  \"runtime\"",
          "7:  . \"github.com/go-skynet/LocalAI/pkg/oci\" // Update with your module path",
          "8:  . \"github.com/onsi/ginkgo/v2\"",
          "9:  . \"github.com/onsi/gomega\"",
          "10: )",
          "12: var _ = Describe(\"OCI\", func() {",
          "14:  Context(\"when template is loaded successfully\", func() {",
          "15:   It(\"should evaluate the template correctly\", func() {",
          "16:    if runtime.GOOS == \"darwin\" {",
          "17:     Skip(\"Skipping test on darwin\")",
          "18:    }",
          "19:    imageName := \"alpine\"",
          "20:    img, err := GetImage(imageName, \"\", nil, nil)",
          "21:    Expect(err).NotTo(HaveOccurred())",
          "23:    size, err := GetOCIImageSize(imageName, \"\", nil, nil)",
          "24:    Expect(err).NotTo(HaveOccurred())",
          "26:    Expect(size).ToNot(Equal(int64(0)))",
          "29:    dir, err := os.MkdirTemp(\"\", \"example\")",
          "30:    Expect(err).NotTo(HaveOccurred())",
          "31:    defer os.RemoveAll(dir)",
          "33:    err = ExtractOCIImage(img, dir)",
          "34:    Expect(err).NotTo(HaveOccurred())",
          "35:   })",
          "36:  })",
          "37: })",
          "",
          "---------------"
        ],
        "pkg/oci/oci_suite_test.go||pkg/oci/oci_suite_test.go": [
          "File: pkg/oci/oci_suite_test.go -> pkg/oci/oci_suite_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package oci_test",
          "3: import (",
          "4:  \"testing\"",
          "6:  . \"github.com/onsi/ginkgo/v2\"",
          "7:  . \"github.com/onsi/gomega\"",
          "8: )",
          "10: func TestOCI(t *testing.T) {",
          "11:  RegisterFailHandler(Fail)",
          "12:  RunSpecs(t, \"OCI test suite\")",
          "13: }",
          "",
          "---------------"
        ],
        "pkg/oci/ollama.go||pkg/oci/ollama.go": [
          "File: pkg/oci/ollama.go -> pkg/oci/ollama.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package oci",
          "3: import (",
          "4:  \"encoding/json\"",
          "5:  \"fmt\"",
          "6:  \"io\"",
          "7:  \"net/http\"",
          "9:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "10: )",
          "13: type Manifest struct {",
          "14:  SchemaVersion int           `json:\"schemaVersion\"`",
          "15:  MediaType     string        `json:\"mediaType\"`",
          "16:  Config        Config        `json:\"config\"`",
          "17:  Layers        []LayerDetail `json:\"layers\"`",
          "18: }",
          "21: type Config struct {",
          "22:  Digest    string `json:\"digest\"`",
          "23:  MediaType string `json:\"mediaType\"`",
          "24:  Size      int    `json:\"size\"`",
          "25: }",
          "28: type LayerDetail struct {",
          "29:  Digest    string `json:\"digest\"`",
          "30:  MediaType string `json:\"mediaType\"`",
          "31:  Size      int    `json:\"size\"`",
          "32: }",
          "34: func OllamaModelManifest(image string) (*Manifest, error) {",
          "39:  tag, repository, image := ParseImageParts(image)",
          "42:  req, err := http.NewRequest(\"GET\", \"https://registry.ollama.ai/v2/\"+repository+\"/\"+image+\"/manifests/\"+tag, nil)",
          "43:  if err != nil {",
          "44:   return nil, err",
          "45:  }",
          "46:  req.Header.Set(\"Accept\", \"application/vnd.docker.distribution.manifest.v2+json\")",
          "47:  client := &http.Client{}",
          "48:  resp, err := client.Do(req)",
          "49:  if err != nil {",
          "50:   return nil, err",
          "51:  }",
          "54:  var manifest Manifest",
          "55:  err = json.NewDecoder(resp.Body).Decode(&manifest)",
          "56:  if err != nil {",
          "57:   return nil, err",
          "58:  }",
          "60:  return &manifest, nil",
          "61: }",
          "63: func OllamaModelBlob(image string) (string, error) {",
          "64:  manifest, err := OllamaModelManifest(image)",
          "65:  if err != nil {",
          "66:   return \"\", err",
          "67:  }",
          "70:  for _, layer := range manifest.Layers {",
          "71:   if layer.MediaType == \"application/vnd.ollama.image.model\" {",
          "72:    return layer.Digest, nil",
          "73:   }",
          "74:  }",
          "76:  return \"\", nil",
          "77: }",
          "79: func OllamaFetchModel(image string, output string, statusWriter func(ocispec.Descriptor) io.Writer) error {",
          "80:  _, repository, imageNoTag := ParseImageParts(image)",
          "82:  blobID, err := OllamaModelBlob(image)",
          "83:  if err != nil {",
          "84:   return err",
          "85:  }",
          "87:  return FetchImageBlob(fmt.Sprintf(\"registry.ollama.ai/%s/%s\", repository, imageNoTag), blobID, output, statusWriter)",
          "88: }",
          "",
          "---------------"
        ],
        "pkg/oci/ollama_test.go||pkg/oci/ollama_test.go": [
          "File: pkg/oci/ollama_test.go -> pkg/oci/ollama_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package oci_test",
          "3: import (",
          "4:  \"os\"",
          "6:  . \"github.com/go-skynet/LocalAI/pkg/oci\" // Update with your module path",
          "7:  . \"github.com/onsi/ginkgo/v2\"",
          "8:  . \"github.com/onsi/gomega\"",
          "9: )",
          "11: var _ = Describe(\"OCI\", func() {",
          "12:  Context(\"ollama\", func() {",
          "13:   It(\"pulls model files\", func() {",
          "14:    f, err := os.CreateTemp(\"\", \"ollama\")",
          "15:    Expect(err).NotTo(HaveOccurred())",
          "16:    defer os.RemoveAll(f.Name())",
          "17:    err = OllamaFetchModel(\"gemma:2b\", f.Name(), nil)",
          "18:    Expect(err).NotTo(HaveOccurred())",
          "19:   })",
          "20:  })",
          "21: })",
          "",
          "---------------"
        ],
        "pkg/startup/model_preload.go||pkg/startup/model_preload.go": [
          "File: pkg/startup/model_preload.go -> pkg/startup/model_preload.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"fmt\"",
          "6:  \"os\"",
          "7:  \"path/filepath\"",
          "9:  \"github.com/go-skynet/LocalAI/embedded\"",
          "10:  \"github.com/go-skynet/LocalAI/pkg/downloader\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     log.Error().Err(e).Str(\"filepath\", modelDefinitionFilePath).Msg(\"error writing model definition\")",
          "53:     err = errors.Join(err, e)",
          "54:    }",
          "55:   case downloader.LooksLikeURL(url):",
          "56:    log.Debug().Msgf(\"[startup] resolved model to download: %s\", url)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:   case downloader.LooksLikeOCI(url):",
          "57:    log.Debug().Msgf(\"[startup] resolved OCI model to download: %s\", url)",
          "60:    ociName := strings.TrimPrefix(url, downloader.OCIPrefix)",
          "61:    ociName = strings.TrimPrefix(ociName, downloader.OllamaPrefix)",
          "62:    ociName = strings.ReplaceAll(ociName, \"/\", \"__\")",
          "63:    ociName = strings.ReplaceAll(ociName, \":\", \"__\")",
          "66:    if _, e := os.Stat(filepath.Join(modelPath, ociName)); errors.Is(e, os.ErrNotExist) {",
          "67:     modelDefinitionFilePath := filepath.Join(modelPath, ociName)",
          "68:     e := downloader.DownloadFile(url, modelDefinitionFilePath, \"\", 0, 0, func(fileName, current, total string, percent float64) {",
          "69:      utils.DisplayDownloadFunction(fileName, current, total, percent)",
          "70:     })",
          "71:     if e != nil {",
          "72:      log.Error().Err(e).Str(\"url\", url).Str(\"filepath\", modelDefinitionFilePath).Msg(\"error downloading model\")",
          "73:      err = errors.Join(err, e)",
          "74:     }",
          "75:    }",
          "77:    log.Info().Msgf(\"[startup] installed model from OCI repository: %s\", ociName)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a36b721ca63436d72d18db7c39df47b506fcaba5",
      "candidate_info": {
        "commit_hash": "a36b721ca63436d72d18db7c39df47b506fcaba5",
        "repo": "mudler/localai",
        "commit_url": "https://github.com/mudler/localai/commit/a36b721ca63436d72d18db7c39df47b506fcaba5",
        "files": [
          "core/cli/models.go",
          "core/cli/util.go",
          "core/config/backend_config.go",
          "core/config/backend_config_loader.go",
          "core/dependencies_manager/manager.go",
          "core/gallery/gallery.go",
          "core/gallery/models.go",
          "core/http/app_test.go",
          "embedded/embedded.go",
          "pkg/downloader/huggingface.go",
          "pkg/downloader/uri.go",
          "pkg/downloader/uri_test.go",
          "pkg/startup/model_preload.go"
        ],
        "message": "fix: be consistent in downloading files, check for scanner errors (#3108)\n\n* fix(downloader): be consistent in downloading files\n\nThis PR puts some order in the downloader such as functions are re-used\nacross several places.\n\nThis fixes an issue with having uri's inside the model YAML file, it\nwould resolve to MD5 rather then using the filename\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>\n\n* fix(scanner): do raise error only if unsafeFiles are found\n\nFixes: https://github.com/mudler/LocalAI/issues/3114\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>\n\n---------\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>",
        "before_after_code_files": [
          "core/cli/models.go||core/cli/models.go",
          "core/cli/util.go||core/cli/util.go",
          "core/config/backend_config.go||core/config/backend_config.go",
          "core/config/backend_config_loader.go||core/config/backend_config_loader.go",
          "core/dependencies_manager/manager.go||core/dependencies_manager/manager.go",
          "core/gallery/gallery.go||core/gallery/gallery.go",
          "core/gallery/models.go||core/gallery/models.go",
          "core/http/app_test.go||core/http/app_test.go",
          "embedded/embedded.go||embedded/embedded.go",
          "pkg/downloader/huggingface.go||pkg/downloader/huggingface.go",
          "pkg/downloader/uri.go||pkg/downloader/uri.go",
          "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go",
          "pkg/startup/model_preload.go||pkg/startup/model_preload.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/http/app_test.go||core/http/app_test.go",
            "embedded/embedded.go||embedded/embedded.go",
            "pkg/downloader/uri.go||pkg/downloader/uri.go",
            "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go",
            "pkg/startup/model_preload.go||pkg/startup/model_preload.go"
          ],
          "candidate": [
            "core/http/app_test.go||core/http/app_test.go",
            "embedded/embedded.go||embedded/embedded.go",
            "pkg/downloader/uri.go||pkg/downloader/uri.go",
            "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go",
            "pkg/startup/model_preload.go||pkg/startup/model_preload.go"
          ]
        }
      },
      "candidate_diff": {
        "core/cli/models.go||core/cli/models.go": [
          "File: core/cli/models.go -> core/cli/models.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:    return err",
          "84:   }",
          "87:    model := gallery.FindModel(models, modelName, mi.ModelsPath)",
          "88:    if model == nil {",
          "89:     log.Error().Str(\"model\", modelName).Msg(\"model not found\")",
          "",
          "[Removed Lines]",
          "86:   if !downloader.LooksLikeOCI(modelName) {",
          "",
          "[Added Lines]",
          "86:   modelURI := downloader.URI(modelName)",
          "88:   if !modelURI.LooksLikeOCI() {",
          "",
          "---------------"
        ],
        "core/cli/util.go||core/cli/util.go": [
          "File: core/cli/util.go -> core/cli/util.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   var errs error = nil",
          "87:   for _, uri := range hfscmd.ToScan {",
          "88:    log.Info().Str(\"uri\", uri).Msg(\"scanning specific uri\")",
          "91:     log.Error().Err(err).Strs(\"clamAV\", scanResults.ClamAVInfectedFiles).Strs(\"pickles\", scanResults.DangerousPickles).Msg(\"! WARNING ! A known-vulnerable model is included in this repo!\")",
          "92:     errs = errors.Join(errs, err)",
          "93:    }",
          "",
          "[Removed Lines]",
          "89:    scanResults, err := downloader.HuggingFaceScan(uri)",
          "90:    if err != nil && !errors.Is(err, downloader.ErrNonHuggingFaceFile) {",
          "",
          "[Added Lines]",
          "89:    scanResults, err := downloader.HuggingFaceScan(downloader.URI(uri))",
          "90:    if err != nil && errors.Is(err, downloader.ErrUnsafeFilesFound) {",
          "",
          "---------------"
        ],
        "core/config/backend_config.go||core/config/backend_config.go": [
          "File: core/config/backend_config.go -> core/config/backend_config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"github.com/mudler/LocalAI/core/schema\"",
          "9:  \"github.com/mudler/LocalAI/pkg/downloader\"",
          "10:  \"github.com/mudler/LocalAI/pkg/functions\"",
          "12: )",
          "14: const (",
          "",
          "[Removed Lines]",
          "11:  \"github.com/mudler/LocalAI/pkg/utils\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: }",
          "74: type File struct {",
          "78: }",
          "80: type VallE struct {",
          "",
          "[Removed Lines]",
          "75:  Filename string `yaml:\"filename\" json:\"filename\"`",
          "76:  SHA256   string `yaml:\"sha256\" json:\"sha256\"`",
          "77:  URI      string `yaml:\"uri\" json:\"uri\"`",
          "",
          "[Added Lines]",
          "74:  Filename string         `yaml:\"filename\" json:\"filename\"`",
          "75:  SHA256   string         `yaml:\"sha256\" json:\"sha256\"`",
          "76:  URI      downloader.URI `yaml:\"uri\" json:\"uri\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215: func (c *BackendConfig) MMProjFileName() string {",
          "219:  }",
          "221:  return c.MMProj",
          "222: }",
          "224: func (c *BackendConfig) IsMMProjURL() bool {",
          "226: }",
          "228: func (c *BackendConfig) IsModelURL() bool {",
          "230: }",
          "234: func (c *BackendConfig) ModelFileName() string {",
          "238:  }",
          "240:  return c.Model",
          "",
          "[Removed Lines]",
          "216:  modelURL := downloader.ConvertURL(c.MMProj)",
          "217:  if downloader.LooksLikeURL(modelURL) {",
          "218:   return utils.MD5(modelURL)",
          "225:  return downloader.LooksLikeURL(downloader.ConvertURL(c.MMProj))",
          "229:  return downloader.LooksLikeURL(downloader.ConvertURL(c.Model))",
          "235:  modelURL := downloader.ConvertURL(c.Model)",
          "236:  if downloader.LooksLikeURL(modelURL) {",
          "237:   return utils.MD5(modelURL)",
          "",
          "[Added Lines]",
          "215:  uri := downloader.URI(c.MMProj)",
          "216:  if uri.LooksLikeURL() {",
          "217:   f, _ := uri.FilenameFromUrl()",
          "218:   return f",
          "225:  uri := downloader.URI(c.MMProj)",
          "226:  return uri.LooksLikeURL()",
          "230:  uri := downloader.URI(c.Model)",
          "231:  return uri.LooksLikeURL()",
          "237:  uri := downloader.URI(c.Model)",
          "238:  if uri.LooksLikeURL() {",
          "239:   f, _ := uri.FilenameFromUrl()",
          "240:   return f",
          "",
          "---------------"
        ],
        "core/config/backend_config_loader.go||core/config/backend_config_loader.go": [
          "File: core/config/backend_config_loader.go -> core/config/backend_config_loader.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:    filePath := filepath.Join(modelPath, file.Filename)",
          "248:     return err",
          "249:    }",
          "250:   }",
          "",
          "[Removed Lines]",
          "247:    if err := downloader.DownloadFile(file.URI, filePath, file.SHA256, i, len(config.DownloadFiles), status); err != nil {",
          "",
          "[Added Lines]",
          "247:    if err := file.URI.DownloadFile(filePath, file.SHA256, i, len(config.DownloadFiles), status); err != nil {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:   if config.IsModelURL() {",
          "254:    modelFileName := config.ModelFileName()",
          "257:    if _, err := os.Stat(filepath.Join(modelPath, modelFileName)); errors.Is(err, os.ErrNotExist) {",
          "259:     if err != nil {",
          "260:      return err",
          "261:     }",
          "",
          "[Removed Lines]",
          "255:    modelURL := downloader.ConvertURL(config.Model)",
          "258:     err := downloader.DownloadFile(modelURL, filepath.Join(modelPath, modelFileName), \"\", 0, 0, status)",
          "",
          "[Added Lines]",
          "255:    uri := downloader.URI(config.Model)",
          "258:     err := uri.DownloadFile(filepath.Join(modelPath, modelFileName), \"\", 0, 0, status)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "270:   if config.IsMMProjURL() {",
          "271:    modelFileName := config.MMProjFileName()",
          "274:    if _, err := os.Stat(filepath.Join(modelPath, modelFileName)); errors.Is(err, os.ErrNotExist) {",
          "276:     if err != nil {",
          "277:      return err",
          "278:     }",
          "",
          "[Removed Lines]",
          "272:    modelURL := downloader.ConvertURL(config.MMProj)",
          "275:     err := downloader.DownloadFile(modelURL, filepath.Join(modelPath, modelFileName), \"\", 0, 0, status)",
          "",
          "[Added Lines]",
          "272:    uri := downloader.URI(config.MMProj)",
          "275:     err := uri.DownloadFile(filepath.Join(modelPath, modelFileName), \"\", 0, 0, status)",
          "",
          "---------------"
        ],
        "core/dependencies_manager/manager.go||core/dependencies_manager/manager.go": [
          "File: core/dependencies_manager/manager.go -> core/dependencies_manager/manager.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  for _, asset := range assets {",
          "41:    panic(err)",
          "42:   }",
          "43:  }",
          "",
          "[Removed Lines]",
          "40:   if err := downloader.DownloadFile(asset.URL, filepath.Join(destPath, asset.FileName), asset.SHA, 1, 1, utils.DisplayDownloadFunction); err != nil {",
          "",
          "[Added Lines]",
          "40:   uri := downloader.URI(asset.URL)",
          "41:   if err := uri.DownloadFile(filepath.Join(destPath, asset.FileName), asset.SHA, 1, 1, utils.DisplayDownloadFunction); err != nil {",
          "",
          "---------------"
        ],
        "core/gallery/gallery.go||core/gallery/gallery.go": [
          "File: core/gallery/gallery.go -> core/gallery/gallery.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: func findGalleryURLFromReferenceURL(url string, basePath string) (string, error) {",
          "133:  var refFile string",
          "135:   refFile = string(d)",
          "136:   if len(refFile) == 0 {",
          "137:    return fmt.Errorf(\"invalid reference file at url %s: %s\", url, d)",
          "",
          "[Removed Lines]",
          "134:  err := downloader.DownloadAndUnmarshal(url, basePath, func(url string, d []byte) error {",
          "",
          "[Added Lines]",
          "134:  uri := downloader.URI(url)",
          "135:  err := uri.DownloadAndUnmarshal(basePath, func(url string, d []byte) error {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:    return models, err",
          "154:   }",
          "155:  }",
          "158:   return yaml.Unmarshal(d, &models)",
          "159:  })",
          "160:  if err != nil {",
          "",
          "[Removed Lines]",
          "157:  err := downloader.DownloadAndUnmarshal(gallery.URL, basePath, func(url string, d []byte) error {",
          "",
          "[Added Lines]",
          "157:  uri := downloader.URI(gallery.URL)",
          "159:  err := uri.DownloadAndUnmarshal(basePath, func(url string, d []byte) error {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "253: func SafetyScanGalleryModel(galleryModel *GalleryModel) error {",
          "254:  for _, file := range galleryModel.AdditionalFiles {",
          "257:    log.Error().Str(\"model\", galleryModel.Name).Strs(\"clamAV\", scanResults.ClamAVInfectedFiles).Strs(\"pickles\", scanResults.DangerousPickles).Msg(\"Contains unsafe file(s)!\")",
          "258:    return err",
          "259:   }",
          "",
          "[Removed Lines]",
          "255:   scanResults, err := downloader.HuggingFaceScan(file.URI)",
          "256:   if err != nil && !errors.Is(err, downloader.ErrNonHuggingFaceFile) {",
          "",
          "[Added Lines]",
          "257:   scanResults, err := downloader.HuggingFaceScan(downloader.URI(file.URI))",
          "258:   if err != nil && errors.Is(err, downloader.ErrUnsafeFilesFound) {",
          "",
          "---------------"
        ],
        "core/gallery/models.go||core/gallery/models.go": [
          "File: core/gallery/models.go -> core/gallery/models.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: func GetGalleryConfigFromURL(url string, basePath string) (Config, error) {",
          "70:  var config Config",
          "72:   return yaml.Unmarshal(d, &config)",
          "73:  })",
          "74:  if err != nil {",
          "",
          "[Removed Lines]",
          "71:  err := downloader.DownloadAndUnmarshal(url, basePath, func(url string, d []byte) error {",
          "",
          "[Added Lines]",
          "71:  uri := downloader.URI(url)",
          "72:  err := uri.DownloadAndUnmarshal(basePath, func(url string, d []byte) error {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:   filePath := filepath.Join(basePath, file.Filename)",
          "120:   if enforceScan {",
          "123:     log.Error().Str(\"model\", config.Name).Strs(\"clamAV\", scanResults.ClamAVInfectedFiles).Strs(\"pickles\", scanResults.DangerousPickles).Msg(\"Contains unsafe file(s)!\")",
          "124:     return err",
          "125:    }",
          "126:   }",
          "129:    return err",
          "130:   }",
          "131:  }",
          "",
          "[Removed Lines]",
          "121:    scanResults, err := downloader.HuggingFaceScan(file.URI)",
          "122:    if err != nil && !errors.Is(err, downloader.ErrNonHuggingFaceFile) {",
          "128:   if err := downloader.DownloadFile(file.URI, filePath, file.SHA256, i, len(config.Files), downloadStatus); err != nil {",
          "",
          "[Added Lines]",
          "122:    scanResults, err := downloader.HuggingFaceScan(downloader.URI(file.URI))",
          "123:    if err != nil && errors.Is(err, downloader.ErrUnsafeFilesFound) {",
          "128:   uri := downloader.URI(file.URI)",
          "129:   if err := uri.DownloadFile(filePath, file.SHA256, i, len(config.Files), downloadStatus); err != nil {",
          "",
          "---------------"
        ],
        "core/http/app_test.go||core/http/app_test.go": [
          "File: core/http/app_test.go -> core/http/app_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: }",
          "75: func getModels(url string) (response []gallery.GalleryModel) {",
          "79:   return json.Unmarshal(i, &response)",
          "80:  })",
          "",
          "[Removed Lines]",
          "77:  downloader.DownloadAndUnmarshal(url, \"\", func(url string, i []byte) error {",
          "",
          "[Added Lines]",
          "76:  uri := downloader.URI(url)",
          "78:  uri.DownloadAndUnmarshal(\"\", func(url string, i []byte) error {",
          "",
          "---------------"
        ],
        "embedded/embedded.go||embedded/embedded.go": [
          "File: embedded/embedded.go -> embedded/embedded.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: func GetRemoteLibraryShorteners(url string, basePath string) (map[string]string, error) {",
          "40:  remoteLibrary := map[string]string{}",
          "43:   return yaml.Unmarshal(i, &remoteLibrary)",
          "44:  })",
          "45:  if err != nil {",
          "",
          "[Removed Lines]",
          "42:  err := downloader.DownloadAndUnmarshal(url, basePath, func(_ string, i []byte) error {",
          "",
          "[Added Lines]",
          "41:  uri := downloader.URI(url)",
          "42:  err := uri.DownloadAndUnmarshal(basePath, func(_ string, i []byte) error {",
          "",
          "---------------"
        ],
        "pkg/downloader/huggingface.go||pkg/downloader/huggingface.go": [
          "File: pkg/downloader/huggingface.go -> pkg/downloader/huggingface.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package downloader",
          "3: import (",
          "4:  \"encoding/json\"",
          "5:  \"errors\"",
          "6:  \"fmt\"",
          "7:  \"io\"",
          "8:  \"net/http\"",
          "9:  \"strings\"",
          "10: )",
          "12: type HuggingFaceScanResult struct {",
          "13:  RepositoryId        string   `json:\"repositoryId\"`",
          "14:  Revision            string   `json:\"revision\"`",
          "15:  HasUnsafeFiles      bool     `json:\"hasUnsafeFile\"`",
          "16:  ClamAVInfectedFiles []string `json:\"clamAVInfectedFiles\"`",
          "17:  DangerousPickles    []string `json:\"dangerousPickles\"`",
          "18:  ScansDone           bool     `json:\"scansDone\"`",
          "19: }",
          "21: var ErrNonHuggingFaceFile = errors.New(\"not a huggingface repo\")",
          "22: var ErrUnsafeFilesFound = errors.New(\"unsafe files found\")",
          "24: func HuggingFaceScan(uri URI) (*HuggingFaceScanResult, error) {",
          "25:  cleanParts := strings.Split(uri.ResolveURL(), \"/\")",
          "26:  if len(cleanParts) <= 4 || cleanParts[2] != \"huggingface.co\" {",
          "27:   return nil, ErrNonHuggingFaceFile",
          "28:  }",
          "29:  results, err := http.Get(fmt.Sprintf(\"https://huggingface.co/api/models/%s/%s/scan\", cleanParts[3], cleanParts[4]))",
          "30:  if err != nil {",
          "31:   return nil, err",
          "32:  }",
          "33:  if results.StatusCode != 200 {",
          "34:   return nil, fmt.Errorf(\"unexpected status code during HuggingFaceScan: %d\", results.StatusCode)",
          "35:  }",
          "36:  scanResult := &HuggingFaceScanResult{}",
          "37:  bodyBytes, err := io.ReadAll(results.Body)",
          "38:  if err != nil {",
          "39:   return nil, err",
          "40:  }",
          "41:  err = json.Unmarshal(bodyBytes, scanResult)",
          "42:  if err != nil {",
          "43:   return nil, err",
          "44:  }",
          "45:  if scanResult.HasUnsafeFiles {",
          "46:   return scanResult, ErrUnsafeFilesFound",
          "47:  }",
          "48:  return scanResult, nil",
          "49: }",
          "",
          "---------------"
        ],
        "pkg/downloader/uri.go||pkg/downloader/uri.go": [
          "File: pkg/downloader/uri.go -> pkg/downloader/uri.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"crypto/sha256\"",
          "8:  \"fmt\"",
          "9:  \"io\"",
          "10:  \"net/http\"",
          "11:  \"os\"",
          "12:  \"path/filepath\"",
          "13:  \"strconv\"",
          "",
          "[Removed Lines]",
          "5:  \"encoding/base64\"",
          "6:  \"encoding/json\"",
          "7:  \"errors\"",
          "",
          "[Added Lines]",
          "8:  \"net/url\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  HTTPSPrefix       = \"https://\"",
          "29:  GithubURI         = \"github:\"",
          "30:  GithubURI2        = \"github://\"",
          "31: )",
          "39:   resolvedFile, err := filepath.EvalSymlinks(rawURL)",
          "40:   if err != nil {",
          "",
          "[Removed Lines]",
          "33: func DownloadAndUnmarshal(url string, basePath string, f func(url string, i []byte) error) error {",
          "34:  url = ConvertURL(url)",
          "36:  if strings.HasPrefix(url, \"file://\") {",
          "37:   rawURL := strings.TrimPrefix(url, \"file://\")",
          "",
          "[Added Lines]",
          "29:  LocalPrefix       = \"file://\"",
          "32: type URI string",
          "34: func (uri URI) DownloadAndUnmarshal(basePath string, f func(url string, i []byte) error) error {",
          "35:  url := uri.ResolveURL()",
          "37:  if strings.HasPrefix(url, LocalPrefix) {",
          "38:   rawURL := strings.TrimPrefix(url, LocalPrefix)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:  return f(url, body)",
          "79: }",
          "89: }",
          "93: }",
          "96:  switch {",
          "100:   repoParts := strings.Split(repository, \"@\")",
          "101:   branch := \"main\"",
          "",
          "[Removed Lines]",
          "81: func LooksLikeURL(s string) bool {",
          "82:  return strings.HasPrefix(s, HTTPPrefix) ||",
          "83:   strings.HasPrefix(s, HTTPSPrefix) ||",
          "84:   strings.HasPrefix(s, HuggingFacePrefix) ||",
          "85:   strings.HasPrefix(s, GithubURI) ||",
          "86:   strings.HasPrefix(s, OllamaPrefix) ||",
          "87:   strings.HasPrefix(s, OCIPrefix) ||",
          "88:   strings.HasPrefix(s, GithubURI2)",
          "91: func LooksLikeOCI(s string) bool {",
          "92:  return strings.HasPrefix(s, OCIPrefix) || strings.HasPrefix(s, OllamaPrefix)",
          "95: func ConvertURL(s string) string {",
          "97:  case strings.HasPrefix(s, GithubURI2):",
          "98:   repository := strings.Replace(s, GithubURI2, \"\", 1)",
          "",
          "[Added Lines]",
          "82: func (u URI) FilenameFromUrl() (string, error) {",
          "83:  f, err := filenameFromUrl(string(u))",
          "84:  if err != nil || f == \"\" {",
          "85:   f = utils.MD5(string(u))",
          "86:   if strings.HasSuffix(string(u), \".yaml\") || strings.HasSuffix(string(u), \".yml\") {",
          "87:    f = f + \".yaml\"",
          "88:   }",
          "89:   err = nil",
          "90:  }",
          "92:  return f, err",
          "93: }",
          "95: func filenameFromUrl(urlstr string) (string, error) {",
          "97:  if strings.Contains(urlstr, \"@\") {",
          "98:   urlstr = strings.Split(urlstr, \"@\")[0]",
          "99:  }",
          "101:  u, err := url.Parse(urlstr)",
          "102:  if err != nil {",
          "103:   return \"\", fmt.Errorf(\"error due to parsing url: %w\", err)",
          "104:  }",
          "105:  x, err := url.QueryUnescape(u.EscapedPath())",
          "106:  if err != nil {",
          "107:   return \"\", fmt.Errorf(\"error due to escaping: %w\", err)",
          "108:  }",
          "109:  return filepath.Base(x), nil",
          "110: }",
          "112: func (u URI) LooksLikeURL() bool {",
          "113:  return strings.HasPrefix(string(u), HTTPPrefix) ||",
          "114:   strings.HasPrefix(string(u), HTTPSPrefix) ||",
          "115:   strings.HasPrefix(string(u), HuggingFacePrefix) ||",
          "116:   strings.HasPrefix(string(u), GithubURI) ||",
          "117:   strings.HasPrefix(string(u), OllamaPrefix) ||",
          "118:   strings.HasPrefix(string(u), OCIPrefix) ||",
          "119:   strings.HasPrefix(string(u), GithubURI2)",
          "122: func (s URI) LooksLikeOCI() bool {",
          "123:  return strings.HasPrefix(string(s), OCIPrefix) || strings.HasPrefix(string(s), OllamaPrefix)",
          "126: func (s URI) ResolveURL() string {",
          "128:  case strings.HasPrefix(string(s), GithubURI2):",
          "129:   repository := strings.Replace(string(s), GithubURI2, \"\", 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:   projectPath := strings.Join(repoPath[2:], \"/\")",
          "112:   return fmt.Sprintf(\"https://raw.githubusercontent.com/%s/%s/%s/%s\", org, project, branch, projectPath)",
          "115:   repoParts := strings.Split(parts[1], \"@\")",
          "116:   branch := \"main\"",
          "",
          "[Removed Lines]",
          "113:  case strings.HasPrefix(s, GithubURI):",
          "114:   parts := strings.Split(s, \":\")",
          "",
          "[Added Lines]",
          "144:  case strings.HasPrefix(string(s), GithubURI):",
          "145:   parts := strings.Split(string(s), \":\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "125:   projectPath := strings.Join(repoPath[2:], \"/\")",
          "127:   return fmt.Sprintf(\"https://raw.githubusercontent.com/%s/%s/%s/%s\", org, project, branch, projectPath)",
          "132:   owner := strings.Split(repository, \"/\")[0]",
          "",
          "[Removed Lines]",
          "128:  case strings.HasPrefix(s, HuggingFacePrefix):",
          "129:   repository := strings.Replace(s, HuggingFacePrefix, \"\", 1)",
          "",
          "[Added Lines]",
          "159:  case strings.HasPrefix(string(s), HuggingFacePrefix):",
          "160:   repository := strings.Replace(string(s), HuggingFacePrefix, \"\", 1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "144:   return fmt.Sprintf(\"https://huggingface.co/%s/%s/resolve/%s/%s\", owner, repo, branch, filepath)",
          "145:  }",
          "148: }",
          "150: func removePartialFile(tmpFilePath string) error {",
          "",
          "[Removed Lines]",
          "147:  return s",
          "",
          "[Added Lines]",
          "178:  return string(s)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "161:  return nil",
          "162: }",
          "167:   progressStatus := func(desc ocispec.Descriptor) io.Writer {",
          "168:    return &progressWriter{",
          "169:     fileName:       filePath,",
          "",
          "[Removed Lines]",
          "164: func DownloadFile(url string, filePath, sha string, fileN, total int, downloadStatus func(string, string, string, float64)) error {",
          "165:  url = ConvertURL(url)",
          "166:  if LooksLikeOCI(url) {",
          "",
          "[Added Lines]",
          "195: func (uri URI) DownloadFile(filePath, sha string, fileN, total int, downloadStatus func(string, string, string, float64)) error {",
          "196:  url := uri.ResolveURL()",
          "197:  if uri.LooksLikeOCI() {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "298:  return nil",
          "299: }",
          "332: func formatBytes(bytes int64) string {",
          "333:  const unit = 1024",
          "334:  if bytes < unit {",
          "",
          "[Removed Lines]",
          "303: func GetBase64Image(s string) (string, error) {",
          "304:  if strings.HasPrefix(s, \"http\") {",
          "306:   resp, err := http.Get(s)",
          "307:   if err != nil {",
          "308:    return \"\", err",
          "309:   }",
          "310:   defer resp.Body.Close()",
          "313:   data, err := io.ReadAll(resp.Body)",
          "314:   if err != nil {",
          "315:    return \"\", err",
          "316:   }",
          "319:   encoded := base64.StdEncoding.EncodeToString(data)",
          "322:   return encoded, nil",
          "323:  }",
          "326:  if strings.HasPrefix(s, \"data:image/jpeg;base64,\") {",
          "327:   return strings.ReplaceAll(s, \"data:image/jpeg;base64,\", \"\"), nil",
          "328:  }",
          "329:  return \"\", fmt.Errorf(\"not valid string\")",
          "330: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "357:  return fmt.Sprintf(\"%x\", hash.Sum(nil)), nil",
          "358: }",
          "",
          "[Removed Lines]",
          "360: type HuggingFaceScanResult struct {",
          "361:  RepositoryId        string   `json:\"repositoryId\"`",
          "362:  Revision            string   `json:\"revision\"`",
          "363:  HasUnsafeFiles      bool     `json:\"hasUnsafeFile\"`",
          "364:  ClamAVInfectedFiles []string `json:\"clamAVInfectedFiles\"`",
          "365:  DangerousPickles    []string `json:\"dangerousPickles\"`",
          "366:  ScansDone           bool     `json:\"scansDone\"`",
          "367: }",
          "369: var ErrNonHuggingFaceFile = errors.New(\"not a huggingface repo\")",
          "370: var ErrUnsafeFilesFound = errors.New(\"unsafe files found\")",
          "372: func HuggingFaceScan(uri string) (*HuggingFaceScanResult, error) {",
          "373:  cleanParts := strings.Split(ConvertURL(uri), \"/\")",
          "374:  if len(cleanParts) <= 4 || cleanParts[2] != \"huggingface.co\" {",
          "375:   return nil, ErrNonHuggingFaceFile",
          "376:  }",
          "377:  results, err := http.Get(fmt.Sprintf(\"https://huggingface.co/api/models/%s/%s/scan\", cleanParts[3], cleanParts[4]))",
          "378:  if err != nil {",
          "379:   return nil, err",
          "380:  }",
          "381:  if results.StatusCode != 200 {",
          "382:   return nil, fmt.Errorf(\"unexpected status code during HuggingFaceScan: %d\", results.StatusCode)",
          "383:  }",
          "384:  scanResult := &HuggingFaceScanResult{}",
          "385:  bodyBytes, err := io.ReadAll(results.Body)",
          "386:  if err != nil {",
          "387:   return nil, err",
          "388:  }",
          "389:  err = json.Unmarshal(bodyBytes, scanResult)",
          "390:  if err != nil {",
          "391:   return nil, err",
          "392:  }",
          "393:  if scanResult.HasUnsafeFiles {",
          "394:   return scanResult, ErrUnsafeFilesFound",
          "395:  }",
          "396:  return scanResult, nil",
          "397: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/downloader/uri_test.go||pkg/downloader/uri_test.go": [
          "File: pkg/downloader/uri_test.go -> pkg/downloader/uri_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: var _ = Describe(\"Gallery API tests\", func() {",
          "10:  Context(\"URI\", func() {",
          "11:   It(\"parses github with a branch\", func() {",
          "12:    Expect(",
          "14:      Expect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))",
          "15:      return nil",
          "16:     }),",
          "17:    ).ToNot(HaveOccurred())",
          "18:   })",
          "19:   It(\"parses github without a branch\", func() {",
          "20:    Expect(",
          "22:      Expect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))",
          "23:      return nil",
          "24:     }),",
          "25:    ).ToNot(HaveOccurred())",
          "26:   })",
          "27:   It(\"parses github with urls\", func() {",
          "28:    Expect(",
          "30:      Expect(url).To(Equal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\"))",
          "31:      return nil",
          "32:     }),",
          "",
          "[Removed Lines]",
          "13:     DownloadAndUnmarshal(\"github:go-skynet/model-gallery/gpt4all-j.yaml\", \"\", func(url string, i []byte) error {",
          "21:     DownloadAndUnmarshal(\"github:go-skynet/model-gallery/gpt4all-j.yaml@main\", \"\", func(url string, i []byte) error {",
          "29:     DownloadAndUnmarshal(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\", \"\", func(url string, i []byte) error {",
          "",
          "[Added Lines]",
          "12:    uri := URI(\"github:go-skynet/model-gallery/gpt4all-j.yaml\")",
          "14:     uri.DownloadAndUnmarshal(\"\", func(url string, i []byte) error {",
          "21:    uri := URI(\"github:go-skynet/model-gallery/gpt4all-j.yaml@main\")",
          "24:     uri.DownloadAndUnmarshal(\"\", func(url string, i []byte) error {",
          "31:    uri := URI(\"https://raw.githubusercontent.com/go-skynet/model-gallery/main/gpt4all-j.yaml\")",
          "33:     uri.DownloadAndUnmarshal(\"\", func(url string, i []byte) error {",
          "",
          "---------------"
        ],
        "pkg/startup/model_preload.go||pkg/startup/model_preload.go": [
          "File: pkg/startup/model_preload.go -> pkg/startup/model_preload.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"errors\"",
          "5:  \"fmt\"",
          "7:  \"os\"",
          "8:  \"path/filepath\"",
          "9:  \"strings\"",
          "",
          "[Removed Lines]",
          "6:  \"net/url\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  var err error",
          "30:   if modelLibraryURL != \"\" {",
          "37:    }",
          "38:   }",
          "40:   url = embedded.ModelShortURL(url)",
          "41:   switch {",
          "42:   case embedded.ExistsInModelsLibrary(url):",
          "43:    modelYAML, e := embedded.ResolveContent(url)",
          "",
          "[Removed Lines]",
          "26:  for _, url := range models {",
          "31:    lib, err := embedded.GetRemoteLibraryShorteners(modelLibraryURL, modelPath)",
          "32:    if err == nil {",
          "33:     if lib[url] != \"\" {",
          "34:      log.Debug().Msgf(\"[startup] model configuration is defined remotely: %s (%s)\", url, lib[url])",
          "35:      url = lib[url]",
          "36:     }",
          "",
          "[Added Lines]",
          "25:  lib, _ := embedded.GetRemoteLibraryShorteners(modelLibraryURL, modelPath)",
          "27:  for _, url := range models {",
          "31:    if lib[url] != \"\" {",
          "32:     log.Debug().Msgf(\"[startup] model configuration is defined remotely: %s (%s)\", url, lib[url])",
          "33:     url = lib[url]",
          "38:   uri := downloader.URI(url)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:     log.Error().Err(e).Str(\"filepath\", modelDefinitionFilePath).Msg(\"error writing model definition\")",
          "56:     err = errors.Join(err, e)",
          "57:    }",
          "59:    log.Debug().Msgf(\"[startup] resolved OCI model to download: %s\", url)",
          "",
          "[Removed Lines]",
          "58:   case downloader.LooksLikeOCI(url):",
          "",
          "[Added Lines]",
          "57:   case uri.LooksLikeOCI():",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:    if _, e := os.Stat(filepath.Join(modelPath, ociName)); errors.Is(e, os.ErrNotExist) {",
          "69:     modelDefinitionFilePath := filepath.Join(modelPath, ociName)",
          "71:      utils.DisplayDownloadFunction(fileName, current, total, percent)",
          "72:     })",
          "73:     if e != nil {",
          "",
          "[Removed Lines]",
          "70:     e := downloader.DownloadFile(url, modelDefinitionFilePath, \"\", 0, 0, func(fileName, current, total string, percent float64) {",
          "",
          "[Added Lines]",
          "69:     e := uri.DownloadFile(modelDefinitionFilePath, \"\", 0, 0, func(fileName, current, total string, percent float64) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "77:    }",
          "79:    log.Info().Msgf(\"[startup] installed model from OCI repository: %s\", ociName)",
          "81:    log.Debug().Msgf(\"[startup] downloading %s\", url)",
          "90:     log.Warn().Err(e).Str(\"url\", url).Msg(\"error extracting filename from URL\")",
          "93:    }",
          "95:    modelPath := filepath.Join(modelPath, fileName)",
          "",
          "[Removed Lines]",
          "80:   case downloader.LooksLikeURL(url):",
          "84:    fileName, e := filenameFromUrl(url)",
          "85:    if e != nil || fileName == \"\" {",
          "86:     fileName = utils.MD5(url)",
          "87:     if strings.HasSuffix(url, \".yaml\") || strings.HasSuffix(url, \".yml\") {",
          "88:      fileName = fileName + \".yaml\"",
          "89:     }",
          "",
          "[Added Lines]",
          "79:   case uri.LooksLikeURL():",
          "83:    fileName, e := uri.FilenameFromUrl()",
          "84:    if e != nil {",
          "86:     err = errors.Join(err, e)",
          "87:     continue",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "104:    if _, e := os.Stat(modelPath); errors.Is(e, os.ErrNotExist) {",
          "106:      utils.DisplayDownloadFunction(fileName, current, total, percent)",
          "107:     })",
          "108:     if e != nil {",
          "",
          "[Removed Lines]",
          "105:     e := downloader.DownloadFile(url, modelPath, \"\", 0, 0, func(fileName, current, total string, percent float64) {",
          "",
          "[Added Lines]",
          "100:     e := uri.DownloadFile(modelPath, \"\", 0, 0, func(fileName, current, total string, percent float64) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "168:  return nil, true",
          "169: }",
          "",
          "[Removed Lines]",
          "171: func filenameFromUrl(urlstr string) (string, error) {",
          "173:  if strings.Contains(urlstr, \"@\") {",
          "174:   urlstr = strings.Split(urlstr, \"@\")[0]",
          "175:  }",
          "177:  u, err := url.Parse(urlstr)",
          "178:  if err != nil {",
          "179:   return \"\", fmt.Errorf(\"error due to parsing url: %w\", err)",
          "180:  }",
          "181:  x, err := url.QueryUnescape(u.EscapedPath())",
          "182:  if err != nil {",
          "183:   return \"\", fmt.Errorf(\"error due to escaping: %w\", err)",
          "184:  }",
          "185:  return filepath.Base(x), nil",
          "186: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}