{
  "cve_id": "CVE-2016-4009",
  "cve_desc": "Integer overflow in the ImagingResampleHorizontal function in libImaging/Resample.c in Pillow before 3.1.1 allows remote attackers to have unspecified impact via negative values of the new size, which triggers a heap-based buffer overflow.",
  "repo": "python-pillow/Pillow",
  "patch_hash": "4e0d9b0b9740d258ade40cce248c93777362ac1e",
  "patch_info": {
    "commit_hash": "4e0d9b0b9740d258ade40cce248c93777362ac1e",
    "repo": "python-pillow/Pillow",
    "commit_url": "https://github.com/python-pillow/Pillow/commit/4e0d9b0b9740d258ade40cce248c93777362ac1e",
    "files": [
      "libImaging/Resample.c"
    ],
    "message": "fix integer overflow in Resample.c",
    "before_after_code_files": [
      "libImaging/Resample.c||libImaging/Resample.c"
    ]
  },
  "patch_diff": {
    "libImaging/Resample.c||libImaging/Resample.c": [
      "File: libImaging/Resample.c -> libImaging/Resample.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:     kmax = (int) ceil(support) * 2 + 1;",
      "142:     kk = malloc(xsize * kmax * sizeof(float));",
      "143:     if ( ! kk)",
      "144:         return (Imaging) ImagingError_MemoryError();",
      "146:     xbounds = malloc(xsize * 2 * sizeof(int));",
      "147:     if ( ! xbounds) {",
      "148:         free(kk);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "142:     if (kmax > 0 && xsize > SIZE_MAX / kmax)",
      "143:         return (Imaging) ImagingError_MemoryError();",
      "146:     if (xsize * kmax > SIZE_MAX / sizeof(float))",
      "147:         return (Imaging) ImagingError_MemoryError();",
      "155:     if (xsize > SIZE_MAX / (2 * sizeof(int)))",
      "156:         return (Imaging) ImagingError_MemoryError();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "788810f313b923b739a67a5c7c95e17df18b0d4a",
      "candidate_info": {
        "commit_hash": "788810f313b923b739a67a5c7c95e17df18b0d4a",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/788810f313b923b739a67a5c7c95e17df18b0d4a",
        "files": [
          "libImaging/Resample.c"
        ],
        "message": "ImagingPrecompute \u2192 precompute_coeffs",
        "before_after_code_files": [
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: int",
          "129:                   int **xboundsp, double **kkp) {",
          "130:     double support, scale, filterscale;",
          "131:     double center, ww, ss;",
          "",
          "[Removed Lines]",
          "128: ImagingPrecompute(int inSize, int outSize, struct filter *filterp,",
          "",
          "[Added Lines]",
          "128: precompute_coeffs(int inSize, int outSize, struct filter *filterp,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     int *k, *kk;",
          "218:     double *prekk;",
          "222:     if ( ! kmax) {",
          "223:         return (Imaging) ImagingError_MemoryError();",
          "224:     }",
          "",
          "[Removed Lines]",
          "221:     kmax = ImagingPrecompute(imIn->xsize, xsize, filterp, &xbounds, &prekk);",
          "",
          "[Added Lines]",
          "220:     kmax = precompute_coeffs(imIn->xsize, xsize, filterp, &xbounds, &prekk);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "329:     int *k, *kk;",
          "330:     double *prekk;",
          "334:     if ( ! kmax) {",
          "335:         return (Imaging) ImagingError_MemoryError();",
          "336:     }",
          "",
          "[Removed Lines]",
          "333:     kmax = ImagingPrecompute(imIn->ysize, ysize, filterp, &xbounds, &prekk);",
          "",
          "[Added Lines]",
          "331:     kmax = precompute_coeffs(imIn->ysize, ysize, filterp, &xbounds, &prekk);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "440:     int *xbounds;",
          "441:     double *k, *kk;",
          "444:     if ( ! kmax) {",
          "445:         return (Imaging) ImagingError_MemoryError();",
          "446:     }",
          "",
          "[Removed Lines]",
          "443:     kmax = ImagingPrecompute(imIn->xsize, xsize, filterp, &xbounds, &kk);",
          "",
          "[Added Lines]",
          "441:     kmax = precompute_coeffs(imIn->xsize, xsize, filterp, &xbounds, &kk);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "500:     int *xbounds;",
          "501:     double *k, *kk;",
          "504:     if ( ! kmax) {",
          "505:         return (Imaging) ImagingError_MemoryError();",
          "506:     }",
          "",
          "[Removed Lines]",
          "503:     kmax = ImagingPrecompute(imIn->ysize, ysize, filterp, &xbounds, &kk);",
          "",
          "[Added Lines]",
          "501:     kmax = precompute_coeffs(imIn->ysize, ysize, filterp, &xbounds, &kk);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e2a8e43232ad93eef0b26971fbf8687472e8d2d",
      "candidate_info": {
        "commit_hash": "0e2a8e43232ad93eef0b26971fbf8687472e8d2d",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/0e2a8e43232ad93eef0b26971fbf8687472e8d2d",
        "files": [
          "libImaging/Resample.c"
        ],
        "message": "intermediate not normalized buffer for coefficients",
        "before_after_code_files": [
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     float center, ww, ss, ss0, ss1, ss2, ss3;",
          "105:     int xx, yy, x, kmax, xmin, xmax;",
          "106:     int *xbounds;",
          "110:     switch (filter) {",
          "",
          "[Removed Lines]",
          "107:     float *k, *kk;",
          "",
          "[Added Lines]",
          "107:     float *k, *kk, *kw;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:     if ( ! kk)",
          "152:         return (Imaging) ImagingError_MemoryError();",
          "154:     xbounds = malloc(xsize * 2 * sizeof(int));",
          "155:     if ( ! xbounds) {",
          "156:         free(kk);",
          "157:         return (Imaging) ImagingError_MemoryError();",
          "158:     }",
          "160:     for (xx = 0; xx < xsize; xx++) {",
          "162:         center = (xx + 0.5) * scale;",
          "163:         ww = 0.0;",
          "164:         ss = 1.0 / filterscale;",
          "",
          "[Removed Lines]",
          "161:         k = &kk[xx * kmax];",
          "",
          "[Added Lines]",
          "155:     kw = malloc(kmax * sizeof(float));",
          "156:     if ( ! kw) {",
          "157:         free(kk);",
          "158:         return (Imaging) ImagingError_MemoryError();",
          "159:     }",
          "164:         free(kw);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:         if (xmax > imIn->xsize)",
          "170:             xmax = imIn->xsize;",
          "171:         for (x = xmin; x < xmax; x++) {",
          "174:             ww += w;",
          "175:         }",
          "176:         for (x = 0; x < xmax - xmin; x++) {",
          "177:             if (ww != 0.0)",
          "179:         }",
          "180:         xbounds[xx * 2 + 0] = xmin;",
          "181:         xbounds[xx * 2 + 1] = xmax;",
          "182:     }",
          "184:     imOut = ImagingNew(imIn->mode, xsize, imIn->ysize);",
          "185:     if ( ! imOut) {",
          "186:         free(kk);",
          "",
          "[Removed Lines]",
          "172:             float w = filterp->filter((x - center + 0.5) * ss) * ss;",
          "173:             k[x - xmin] = w;",
          "178:                 k[x] /= ww;",
          "",
          "[Added Lines]",
          "179:             float w = filterp->filter((x - center + 0.5) * ss);",
          "180:             kw[x - xmin] = w;",
          "183:         k = &kk[xx * kmax];",
          "186:                 k[x] = kw[x] / ww;",
          "192:     free(kw);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9842505a60abe1247d804ef12295c18abbc88cba",
      "candidate_info": {
        "commit_hash": "9842505a60abe1247d804ef12295c18abbc88cba",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/9842505a60abe1247d804ef12295c18abbc88cba",
        "files": [
          "libImaging/Resample.c"
        ],
        "message": "remove fifth argument from ResampleFunction",
        "before_after_code_files": [
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240: Imaging",
          "241: ImagingResampleHorizontal_8bpc(Imaging imOut, Imaging imIn, float x0, float x1,",
          "243: {",
          "244:     ImagingSectionCookie cookie;",
          "245:     int ss0, ss1, ss2, ss3;",
          "",
          "[Removed Lines]",
          "242:                                int xsize, struct filter *filterp)",
          "",
          "[Added Lines]",
          "242:                                struct filter *filterp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:     INT32 *k, *kk;",
          "249:     double *prekk;",
          "252:                              &xbounds, &prekk);",
          "253:     if ( ! kmax) {",
          "254:         return (Imaging) ImagingError_MemoryError();",
          "255:     }",
          "258:     free(prekk);",
          "259:     if ( ! kmax) {",
          "260:         free(xbounds);",
          "",
          "[Removed Lines]",
          "251:     kmax = precompute_coeffs(imIn->xsize, x0, x1, xsize, filterp,",
          "257:     kmax = normalize_coeffs_8bpc(xsize, kmax, prekk, &kk);",
          "",
          "[Added Lines]",
          "251:     kmax = precompute_coeffs(imIn->xsize, x0, x1, imOut->xsize, filterp,",
          "257:     kmax = normalize_coeffs_8bpc(imOut->xsize, kmax, prekk, &kk);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "264:     ImagingSectionEnter(&cookie);",
          "265:     if (imIn->image8) {",
          "266:         for (yy = 0; yy < imOut->ysize; yy++) {",
          "268:                 xmin = xbounds[xx * 2 + 0];",
          "269:                 xmax = xbounds[xx * 2 + 1];",
          "270:                 k = &kk[xx * kmax];",
          "",
          "[Removed Lines]",
          "267:             for (xx = 0; xx < xsize; xx++) {",
          "",
          "[Added Lines]",
          "267:             for (xx = 0; xx < imOut->xsize; xx++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "277:     } else if (imIn->type == IMAGING_TYPE_UINT8) {",
          "278:         if (imIn->bands == 2) {",
          "279:             for (yy = 0; yy < imOut->ysize; yy++) {",
          "281:                     xmin = xbounds[xx * 2 + 0];",
          "282:                     xmax = xbounds[xx * 2 + 1];",
          "283:                     k = &kk[xx * kmax];",
          "",
          "[Removed Lines]",
          "280:                 for (xx = 0; xx < xsize; xx++) {",
          "",
          "[Added Lines]",
          "280:                 for (xx = 0; xx < imOut->xsize; xx++) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "292:             }",
          "293:         } else if (imIn->bands == 3) {",
          "294:             for (yy = 0; yy < imOut->ysize; yy++) {",
          "296:                     xmin = xbounds[xx * 2 + 0];",
          "297:                     xmax = xbounds[xx * 2 + 1];",
          "298:                     k = &kk[xx * kmax];",
          "",
          "[Removed Lines]",
          "295:                 for (xx = 0; xx < xsize; xx++) {",
          "",
          "[Added Lines]",
          "295:                 for (xx = 0; xx < imOut->xsize; xx++) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "309:             }",
          "310:         } else {",
          "311:             for (yy = 0; yy < imOut->ysize; yy++) {",
          "313:                     xmin = xbounds[xx * 2 + 0];",
          "314:                     xmax = xbounds[xx * 2 + 1];",
          "315:                     k = &kk[xx * kmax];",
          "",
          "[Removed Lines]",
          "312:                 for (xx = 0; xx < xsize; xx++) {",
          "",
          "[Added Lines]",
          "312:                 for (xx = 0; xx < imOut->xsize; xx++) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "339: Imaging",
          "340: ImagingResampleVertical_8bpc(Imaging imOut, Imaging imIn, float y0, float y1,",
          "342: {",
          "343:     ImagingSectionCookie cookie;",
          "344:     int ss0, ss1, ss2, ss3;",
          "",
          "[Removed Lines]",
          "341:                              int ysize, struct filter *filterp)",
          "",
          "[Added Lines]",
          "341:                              struct filter *filterp)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "347:     INT32 *k, *kk;",
          "348:     double *prekk;",
          "351:                              &xbounds, &prekk);",
          "352:     if ( ! kmax) {",
          "353:         return (Imaging) ImagingError_MemoryError();",
          "354:     }",
          "357:     free(prekk);",
          "358:     if ( ! kmax) {",
          "359:         free(xbounds);",
          "",
          "[Removed Lines]",
          "350:     kmax = precompute_coeffs(imIn->ysize, y0, y1, ysize, filterp,",
          "356:     kmax = normalize_coeffs_8bpc(ysize, kmax, prekk, &kk);",
          "",
          "[Added Lines]",
          "350:     kmax = precompute_coeffs(imIn->ysize, y0, y1, imOut->ysize, filterp,",
          "356:     kmax = normalize_coeffs_8bpc(imOut->ysize, kmax, prekk, &kk);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "363:     ImagingSectionEnter(&cookie);",
          "364:     if (imIn->image8) {",
          "366:             k = &kk[yy * kmax];",
          "367:             ymin = xbounds[yy * 2 + 0];",
          "368:             ymax = xbounds[yy * 2 + 1];",
          "",
          "[Removed Lines]",
          "365:         for (yy = 0; yy < ysize; yy++) {",
          "",
          "[Added Lines]",
          "365:         for (yy = 0; yy < imOut->ysize; yy++) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "375:         }",
          "376:     } else if (imIn->type == IMAGING_TYPE_UINT8) {",
          "377:         if (imIn->bands == 2) {",
          "379:                 k = &kk[yy * kmax];",
          "380:                 ymin = xbounds[yy * 2 + 0];",
          "381:                 ymax = xbounds[yy * 2 + 1];",
          "",
          "[Removed Lines]",
          "378:             for (yy = 0; yy < ysize; yy++) {",
          "",
          "[Added Lines]",
          "378:             for (yy = 0; yy < imOut->ysize; yy++) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "390:                 }",
          "391:             }",
          "392:         } else if (imIn->bands == 3) {",
          "394:                 k = &kk[yy * kmax];",
          "395:                 ymin = xbounds[yy * 2 + 0];",
          "396:                 ymax = xbounds[yy * 2 + 1];",
          "",
          "[Removed Lines]",
          "393:             for (yy = 0; yy < ysize; yy++) {",
          "",
          "[Added Lines]",
          "393:             for (yy = 0; yy < imOut->ysize; yy++) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "407:                 }",
          "408:             }",
          "409:         } else {",
          "411:                 k = &kk[yy * kmax];",
          "412:                 ymin = xbounds[yy * 2 + 0];",
          "413:                 ymax = xbounds[yy * 2 + 1];",
          "",
          "[Removed Lines]",
          "410:             for (yy = 0; yy < ysize; yy++) {",
          "",
          "[Added Lines]",
          "410:             for (yy = 0; yy < imOut->ysize; yy++) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "438: Imaging",
          "439: ImagingResampleHorizontal_32bpc(Imaging imOut, Imaging imIn, float x0, float x1,",
          "441: {",
          "442:     ImagingSectionCookie cookie;",
          "443:     double ss;",
          "",
          "[Removed Lines]",
          "440:                                 int xsize, struct filter *filterp)",
          "",
          "[Added Lines]",
          "440:                                 struct filter *filterp)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "445:     int *xbounds;",
          "446:     double *k, *kk;",
          "449:                              &xbounds, &kk);",
          "450:     if ( ! kmax) {",
          "451:         return (Imaging) ImagingError_MemoryError();",
          "",
          "[Removed Lines]",
          "448:     kmax = precompute_coeffs(imIn->xsize, x0, x1, xsize, filterp,",
          "",
          "[Added Lines]",
          "448:     kmax = precompute_coeffs(imIn->xsize, x0, x1, imOut->xsize, filterp,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "455:     switch(imIn->type) {",
          "456:         case IMAGING_TYPE_INT32:",
          "457:             for (yy = 0; yy < imOut->ysize; yy++) {",
          "459:                     xmin = xbounds[xx * 2 + 0];",
          "460:                     xmax = xbounds[xx * 2 + 1];",
          "461:                     k = &kk[xx * kmax];",
          "",
          "[Removed Lines]",
          "458:                 for (xx = 0; xx < xsize; xx++) {",
          "",
          "[Added Lines]",
          "458:                 for (xx = 0; xx < imOut->xsize; xx++) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "470:         case IMAGING_TYPE_FLOAT32:",
          "471:             for (yy = 0; yy < imOut->ysize; yy++) {",
          "473:                     xmin = xbounds[xx * 2 + 0];",
          "474:                     xmax = xbounds[xx * 2 + 1];",
          "475:                     k = &kk[xx * kmax];",
          "",
          "[Removed Lines]",
          "472:                 for (xx = 0; xx < xsize; xx++) {",
          "",
          "[Added Lines]",
          "472:                 for (xx = 0; xx < imOut->xsize; xx++) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "492: Imaging",
          "493: ImagingResampleVertical_32bpc(Imaging imOut, Imaging imIn, float y0, float y1,",
          "495: {",
          "496:     ImagingSectionCookie cookie;",
          "497:     double ss;",
          "",
          "[Removed Lines]",
          "494:                               int ysize, struct filter *filterp)",
          "",
          "[Added Lines]",
          "494:                               struct filter *filterp)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "499:     int *xbounds;",
          "500:     double *k, *kk;",
          "503:                              &xbounds, &kk);",
          "504:     if ( ! kmax) {",
          "505:         return (Imaging) ImagingError_MemoryError();",
          "",
          "[Removed Lines]",
          "502:     kmax = precompute_coeffs(imIn->ysize, y0, y1, ysize, filterp,",
          "",
          "[Added Lines]",
          "502:     kmax = precompute_coeffs(imIn->ysize, y0, y1, imOut->ysize, filterp,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "508:     ImagingSectionEnter(&cookie);",
          "509:     switch(imIn->type) {",
          "510:         case IMAGING_TYPE_INT32:",
          "512:                 ymin = xbounds[yy * 2 + 0];",
          "513:                 ymax = xbounds[yy * 2 + 1];",
          "514:                 k = &kk[yy * kmax];",
          "",
          "[Removed Lines]",
          "511:             for (yy = 0; yy < ysize; yy++) {",
          "",
          "[Added Lines]",
          "511:             for (yy = 0; yy < imOut->ysize; yy++) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "522:             break;",
          "524:         case IMAGING_TYPE_FLOAT32:",
          "526:                 ymin = xbounds[yy * 2 + 0];",
          "527:                 ymax = xbounds[yy * 2 + 1];",
          "528:                 k = &kk[yy * kmax];",
          "",
          "[Removed Lines]",
          "525:             for (yy = 0; yy < ysize; yy++) {",
          "",
          "[Added Lines]",
          "525:             for (yy = 0; yy < imOut->ysize; yy++) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "546: typedef Imaging (*ResampleFunction)(Imaging imOut, Imaging imIn,",
          "550: Imaging",
          "",
          "[Removed Lines]",
          "547:     float x0, float x1, int xsize, struct filter *filterp);",
          "",
          "[Added Lines]",
          "547:     float x0, float x1, struct filter *filterp);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "609:         if ( ! imTemp) {",
          "610:             return NULL;",
          "611:         }",
          "613:             ImagingDelete(imTemp);",
          "614:             return NULL;",
          "615:         }",
          "",
          "[Removed Lines]",
          "612:         if ( ! ResampleHorizontal(imTemp, imIn, box[0], box[2], xsize, filterp)) {",
          "",
          "[Added Lines]",
          "612:         if ( ! ResampleHorizontal(imTemp, imIn, box[0], box[2], filterp)) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "623:             return NULL;",
          "624:         }",
          "627:             ImagingDelete(imTemp);",
          "628:             ImagingDelete(imOut);",
          "629:             return NULL;",
          "",
          "[Removed Lines]",
          "626:         if ( ! ResampleVertical(imOut, imIn, box[1], box[3], ysize, filterp)) {",
          "",
          "[Added Lines]",
          "626:         if ( ! ResampleVertical(imOut, imIn, box[1], box[3], filterp)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5b99dd302cd8c84a28f2b45ba02002540129fd7",
      "candidate_info": {
        "commit_hash": "a5b99dd302cd8c84a28f2b45ba02002540129fd7",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/a5b99dd302cd8c84a28f2b45ba02002540129fd7",
        "files": [
          "libImaging/Resample.c"
        ],
        "message": "move checks before mallocs to prevent memory leaks",
        "before_after_code_files": [
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:     kmax = (int) ceil(support) * 2 + 1;",
          "143:         return (Imaging) ImagingError_MemoryError();",
          "147:         return (Imaging) ImagingError_MemoryError();",
          "",
          "[Removed Lines]",
          "142:     if (kmax > 0 && xsize > SIZE_MAX / kmax)",
          "146:     if (xsize * kmax > SIZE_MAX / sizeof(float))",
          "",
          "[Added Lines]",
          "142:     if (xsize > SIZE_MAX / (kmax * sizeof(float)))",
          "146:     if (xsize > SIZE_MAX / (2 * sizeof(int)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:     if ( ! kk)",
          "152:         return (Imaging) ImagingError_MemoryError();",
          "158:     xbounds = malloc(xsize * 2 * sizeof(int));",
          "159:     if ( ! xbounds) {",
          "160:         free(kk);",
          "",
          "[Removed Lines]",
          "155:     if (xsize > SIZE_MAX / (2 * sizeof(int)))",
          "156:         return (Imaging) ImagingError_MemoryError();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41fae6d9e2da741d2c5464775c7f1a609ea03798",
      "candidate_info": {
        "commit_hash": "41fae6d9e2da741d2c5464775c7f1a609ea03798",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/41fae6d9e2da741d2c5464775c7f1a609ea03798",
        "files": [
          "libImaging/Resample.c"
        ],
        "message": "fix integer overflow in Resample.c",
        "before_after_code_files": [
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:     kmax = (int) ceil(support) * 2 + 1;",
          "142:     kk = malloc(xsize * kmax * sizeof(float));",
          "143:     if ( ! kk)",
          "144:         return (Imaging) ImagingError_MemoryError();",
          "146:     xbounds = malloc(xsize * 2 * sizeof(int));",
          "147:     if ( ! xbounds) {",
          "148:         free(kk);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:     if (kmax > 0 && xsize > SIZE_MAX / kmax)",
          "143:         return (Imaging) ImagingError_MemoryError();",
          "146:     if (xsize * kmax > SIZE_MAX / sizeof(float))",
          "147:         return (Imaging) ImagingError_MemoryError();",
          "155:     if (xsize > SIZE_MAX / (2 * sizeof(int)))",
          "156:         return (Imaging) ImagingError_MemoryError();",
          "",
          "---------------"
        ]
      }
    }
  ]
}