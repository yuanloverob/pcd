{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c6cc088ffe6a2ac0ae87f04f1cf69de3094e6a29",
      "candidate_info": {
        "commit_hash": "c6cc088ffe6a2ac0ae87f04f1cf69de3094e6a29",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c6cc088ffe6a2ac0ae87f04f1cf69de3094e6a29",
        "files": [
          "modules/clusterer/clusterer.c"
        ],
        "message": "clusterer: fix parameters for E_CLUSTERER_REQ_RECEIVED event\n\nFixes #2899",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:  bin_pop_str(packet, &rcv_tag);",
          "906:  bin_pop_str(packet, &rcv_msg);",
          "909:   LM_ERR(\"Failed to raise event for a received generic message!\\n\");",
          "910:   return;",
          "911:  }",
          "",
          "[Removed Lines]",
          "908:  if (raise_gen_msg_ev(cluster_id, source_id, req_like, &rcv_tag, &rcv_msg)) {",
          "",
          "[Added Lines]",
          "908:  if (raise_gen_msg_ev(cluster_id, source_id, req_like, &rcv_msg, &rcv_tag)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ab4876f6232baf9b6ce53ed8ec0f816612a11de",
      "candidate_info": {
        "commit_hash": "4ab4876f6232baf9b6ce53ed8ec0f816612a11de",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/4ab4876f6232baf9b6ce53ed8ec0f816612a11de",
        "files": [
          "modules/clusterer/clusterer.c"
        ],
        "message": "clusterer: print the command that cannot be parsed\n\n(cherry picked from commit 8ba0309d4751ed5670800cf4fb0bdd85d6b6d7be)",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "869:   handle_cap_update(received, src_node);",
          "870:   break;",
          "871:  default:",
          "874:  }",
          "875: }",
          "",
          "[Removed Lines]",
          "872:   LM_WARN(\"Invalid clusterer binary packet command from node: %d\\n\",",
          "873:    src_node->node_id);",
          "",
          "[Added Lines]",
          "872:   LM_WARN(\"Invalid clusterer binary packet command [%d] from node: %d\\n\",",
          "873:    packet_type, src_node->node_id);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43f00304aa045464b753da38a989c6849549954a",
      "candidate_info": {
        "commit_hash": "43f00304aa045464b753da38a989c6849549954a",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/43f00304aa045464b753da38a989c6849549954a",
        "files": [
          "modules/b2b_entities/b2be_load.h",
          "modules/media_exchange/media_exchange.c",
          "modules/media_exchange/media_sessions.c",
          "modules/media_exchange/media_sessions.h"
        ],
        "message": "b2b_entities: provide dlginfo for entity_delete\n\nEach module that uses b2b_entities, should duplicate the dlginfo\nstructure and pass it to the entity_delete API call, otherwise wrong\nentities might be deleted due to mismatches\n\n(cherry picked from commit ce19581557c69dafee5095fecce831e2c2d80704)",
        "before_after_code_files": [
          "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h",
          "modules/media_exchange/media_exchange.c||modules/media_exchange/media_exchange.c",
          "modules/media_exchange/media_sessions.c||modules/media_exchange/media_sessions.c",
          "modules/media_exchange/media_sessions.h||modules/media_exchange/media_sessions.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h": [
          "File: modules/b2b_entities/b2be_load.h -> modules/b2b_entities/b2be_load.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:  return load_b2b( b2b_api );",
          "188: }",
          "190: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: static inline b2b_dlginfo_t *b2b_dup_dlginfo(b2b_dlginfo_t *info)",
          "191: {",
          "192:  b2b_dlginfo_t* dlg = NULL;",
          "193:  int size;",
          "195:  size = sizeof(b2b_dlginfo_t) + info->callid.len;",
          "196:  if (info->totag.s)",
          "197:   size += info->totag.len;",
          "198:  if (info->fromtag.s)",
          "199:   size += info->fromtag.len;",
          "200:  dlg = shm_malloc(size);",
          "201:  if (!dlg)",
          "202:   return NULL;",
          "203:  memset(dlg, 0, size);",
          "205:  dlg->callid.s = (char *)(dlg + 1);",
          "206:  dlg->callid.len = info->callid.len;",
          "207:  memcpy(dlg->callid.s, info->callid.s, dlg->callid.len);",
          "208:  if (info->totag.s) {",
          "209:   dlg->totag.len = info->totag.len;",
          "210:   dlg->totag.s = dlg->callid.s + dlg->callid.len;",
          "211:   memcpy(dlg->totag.s, info->totag.s, dlg->totag.len);",
          "212:  }",
          "213:  if (info->fromtag.s) {",
          "214:   dlg->fromtag.len = info->fromtag.len;",
          "215:   dlg->fromtag.s = dlg->callid.s + dlg->callid.len + dlg->totag.len;",
          "216:   memcpy(dlg->fromtag.s, info->fromtag.s, dlg->fromtag.len);",
          "217:  }",
          "218:  return dlg;",
          "219: }",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_exchange.c||modules/media_exchange/media_exchange.c": [
          "File: modules/media_exchange/media_exchange.c -> modules/media_exchange/media_exchange.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:  if (shm_str_dup(&msl->b2b_key, b2b_key) < 0) {",
          "333:   LM_ERR(\"could not copy b2b client key\\n\");",
          "336:   goto release;",
          "337:  }",
          "338:  msl->params = mf;",
          "",
          "[Removed Lines]",
          "335:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "335:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, msl->dlginfo, 1, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "532:  if (shm_str_dup(&msl->b2b_key, b2b_key) < 0) {",
          "533:   LM_ERR(\"could not copy b2b server key for callid %.*s\\n\", callid->len, callid->s);",
          "536:   goto destroy;",
          "537:  }",
          "538:  msl->b2b_entity = B2B_SERVER;",
          "",
          "[Removed Lines]",
          "535:   media_b2b.entity_delete(B2B_SERVER, b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "535:   media_b2b.entity_delete(B2B_SERVER, b2b_key, msl->dlginfo, 1, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "613:  if (shm_str_dup(&msl->b2b_key, b2b_key) < 0) {",
          "614:   LM_ERR(\"could not copy b2b client key\\n\");",
          "617:   goto unref;",
          "618:  }",
          "619:  msl->b2b_entity = B2B_CLIENT;",
          "",
          "[Removed Lines]",
          "616:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "616:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, msl->dlginfo, 1, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "805:  if (shm_str_dup(&msl->b2b_key, b2b_key) < 0) {",
          "806:   LM_ERR(\"could not copy b2b server key for callid %.*s\\n\", callid->len, callid->s);",
          "809:   goto destroy;",
          "810:  }",
          "811:  msl->b2b_entity = B2B_SERVER;",
          "",
          "[Removed Lines]",
          "808:   media_b2b.entity_delete(B2B_SERVER, b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "808:   media_b2b.entity_delete(B2B_SERVER, b2b_key, msl->dlginfo, 1, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1513: static int b2b_media_confirm(str* key, str* entity_key, int src, b2b_dlginfo_t* info)",
          "1514: {",
          "1516:  struct media_session_leg *msl = *(struct media_session_leg **)((str *)key)->s;",
          "1518:  return 0;",
          "1519: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1516:  msl->dlginfo = b2b_dup_dlginfo(info);",
          "1517:  if (!msl->dlginfo) {",
          "1518:   LM_ERR(\"could not duplicate b2be dialog info!\\n\");",
          "1519:   return -1;",
          "1520:  }",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_sessions.c||modules/media_exchange/media_sessions.c": [
          "File: modules/media_exchange/media_sessions.c -> modules/media_exchange/media_sessions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     msl, msl->ms);",
          "74:  }",
          "75:  if (msl->b2b_key.s) {",
          "77:   shm_free(msl->b2b_key.s);",
          "78:   msl->b2b_key.s = NULL;",
          "79:  }",
          "80:  LM_DBG(\"releasing media_session_leg=%p\\n\", msl);",
          "81:  if (msl->params && msl->type == MEDIA_SESSION_TYPE_FORK)",
          "82:   media_forks_free(msl->params);",
          "83:  shm_free(msl);",
          "84: }",
          "",
          "[Removed Lines]",
          "76:   media_b2b.entity_delete(msl->b2b_entity, &msl->b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "76:   media_b2b.entity_delete(msl->b2b_entity, &msl->b2b_key, msl->dlginfo, 1, 1);",
          "83:  if (msl->dlginfo)",
          "84:   shm_free(msl->dlginfo);",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_sessions.h||modules/media_exchange/media_sessions.h": [
          "File: modules/media_exchange/media_sessions.h -> modules/media_exchange/media_sessions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  str b2b_key;",
          "46:  int nohold;",
          "47:  gen_lock_t lock;",
          "48:  enum b2b_entity_type b2b_entity;",
          "49:  struct media_session_leg *next;",
          "50:  void *params;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:  b2b_dlginfo_t *dlginfo;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3dacc35a733b45af280da7be6ca2f84a1606901",
      "candidate_info": {
        "commit_hash": "f3dacc35a733b45af280da7be6ca2f84a1606901",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/f3dacc35a733b45af280da7be6ca2f84a1606901",
        "files": [
          "modules/ldap/ldap_api_fn.c",
          "modules/ldap/ldap_connect.c",
          "modules/ldap/ldap_connect.h",
          "modules/ldap/ldap_mod.c"
        ],
        "message": "Merge pull request #2779 from ppisar/openldap-2.6.1\n\nRename an ldap_connect() to opensips_ldap_connect()\n\n(cherry picked from commit 457111cebc2010225dffa668edd8155fdca6a62a)",
        "before_after_code_files": [
          "modules/ldap/ldap_api_fn.c||modules/ldap/ldap_api_fn.c",
          "modules/ldap/ldap_connect.c||modules/ldap/ldap_connect.c",
          "modules/ldap/ldap_connect.h||modules/ldap/ldap_connect.h",
          "modules/ldap/ldap_mod.c||modules/ldap/ldap_mod.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/ldap/ldap_api_fn.c||modules/ldap/ldap_api_fn.c": [
          "File: modules/ldap/ldap_api_fn.c -> modules/ldap/ldap_api_fn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   return NULL;",
          "119:  }",
          "122:    LM_ERR(\"failed to create new ldap connection!\\n\");",
          "123:    return NULL;",
          "124:  }",
          "",
          "[Removed Lines]",
          "121:  if (ldap_connect(lds->name, NULL) < 0) {",
          "",
          "[Added Lines]",
          "121:  if (opensips_ldap_connect(lds->name, NULL) < 0) {",
          "",
          "---------------"
        ],
        "modules/ldap/ldap_connect.c||modules/ldap/ldap_connect.c": [
          "File: modules/ldap/ldap_connect.c -> modules/ldap/ldap_connect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: }",
          "117: {",
          "118:  int rc;",
          "119:  int ldap_proto_version;",
          "",
          "[Removed Lines]",
          "116: int ldap_connect(char* _ld_name, struct ld_conn* conn)",
          "",
          "[Added Lines]",
          "116: int opensips_ldap_connect(char* _ld_name, struct ld_conn* conn)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:   return -1;",
          "412:  }",
          "415:  {",
          "416:   LM_ERR(\"[%s]: reconnect failed\\n\",",
          "417:     _ld_name);",
          "",
          "[Removed Lines]",
          "414:  if ((rc = ldap_connect(_ld_name, conn)) != 0)",
          "",
          "[Added Lines]",
          "414:  if ((rc = opensips_ldap_connect(_ld_name, conn)) != 0)",
          "",
          "---------------"
        ],
        "modules/ldap/ldap_connect.h||modules/ldap/ldap_connect.h": [
          "File: modules/ldap/ldap_connect.h -> modules/ldap/ldap_connect.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: struct ld_conn;",
          "47: extern int ldap_disconnect(char* _ld_name, struct ld_conn* conn);",
          "48: extern int ldap_reconnect(char* _ld_name, struct ld_conn* conn);",
          "49: extern int ldap_get_vendor_version(char** _version);",
          "",
          "[Removed Lines]",
          "46: extern int ldap_connect(char* _ld_name, struct ld_conn* conn);",
          "",
          "[Added Lines]",
          "46: extern int opensips_ldap_connect(char* _ld_name, struct ld_conn* conn);",
          "",
          "---------------"
        ],
        "modules/ldap/ldap_mod.c||modules/ldap/ldap_mod.c": [
          "File: modules/ldap/ldap_mod.c -> modules/ldap/ldap_mod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:   }",
          "190:   {",
          "191:    LM_ERR(\"[%s]: failed to connect to LDAP host(s)\\n\", ld_name);",
          "192:    ldap_disconnect(ld_name, NULL);",
          "",
          "[Removed Lines]",
          "189:   if (ldap_connect(ld_name, &get_ld_session(ld_name)->conn_s) != 0)",
          "",
          "[Added Lines]",
          "189:   if (opensips_ldap_connect(ld_name, &get_ld_session(ld_name)->conn_s) != 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81c2e75097a74b4937400a5436e6d7a91d775dca",
      "candidate_info": {
        "commit_hash": "81c2e75097a74b4937400a5436e6d7a91d775dca",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/81c2e75097a74b4937400a5436e6d7a91d775dca",
        "files": [
          "modules/mi_script/mi_script.c"
        ],
        "message": "mi_script: force a positive value in eventfd\n\nThanks go to Suchi Sahoo from Five9 for reporting it\n\n(cherry picked from commit b2c6ce6551f6469e559599bfc47d314186755f36)",
        "before_after_code_files": [
          "modules/mi_script/mi_script.c||modules/mi_script/mi_script.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/mi_script/mi_script.c||modules/mi_script/mi_script.c": [
          "File: modules/mi_script/mi_script.c -> modules/mi_script/mi_script.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "551: static void mi_script_async_resume_job(int sender, void *param)",
          "552: {",
          "553:  int ret;",
          "555:  struct mi_script_async_job *job = (struct mi_script_async_job *)param;",
          "557:  do {",
          "",
          "[Removed Lines]",
          "554:  unsigned long r;",
          "",
          "[Added Lines]",
          "554:  static unsigned long r = 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}