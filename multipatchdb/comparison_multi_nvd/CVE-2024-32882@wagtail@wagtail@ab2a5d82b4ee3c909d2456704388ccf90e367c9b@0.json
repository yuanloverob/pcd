{
  "cve_id": "CVE-2024-32882",
  "cve_desc": "Wagtail is an open source content management system built on Django. In affected versions if a model has been made available for editing through the `wagtail.contrib.settings` module or `ModelViewSet`, and the `permission` argument on `FieldPanel` has been used to further restrict access to one or more fields of the model, a user with edit permission over the model but not the specific field can craft an HTTP POST request that bypasses the permission check on the individual field, allowing them to update its value. This vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin, or by a user who has not been granted edit access to the model in question. The editing interfaces for pages and snippets are also unaffected. Patched versions have been released as Wagtail 6.0.3 and 6.1. Wagtail releases prior to 6.0 are unaffected. Users are advised to upgrade. Site owners who are unable to upgrade to a patched version can avoid the vulnerability as follows: 1.For models registered through `ModelViewSet`, register the model as a snippet instead; 2. For settings models, place the restricted fields in a separate settings model, and configure permission at the model level.",
  "repo": "wagtail/wagtail",
  "patch_hash": "ab2a5d82b4ee3c909d2456704388ccf90e367c9b",
  "patch_info": {
    "commit_hash": "ab2a5d82b4ee3c909d2456704388ccf90e367c9b",
    "repo": "wagtail/wagtail",
    "commit_url": "https://github.com/wagtail/wagtail/commit/ab2a5d82b4ee3c909d2456704388ccf90e367c9b",
    "files": [
      "wagtail/admin/tests/viewsets/test_model_viewset.py",
      "wagtail/admin/views/generic/models.py",
      "wagtail/contrib/settings/tests/generic/test_admin.py",
      "wagtail/contrib/settings/tests/site_specific/test_admin.py",
      "wagtail/snippets/views/snippets.py",
      "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
      "wagtail/test/testapp/models.py",
      "wagtail/test/testapp/views.py"
    ],
    "message": "Revert \"Merge pull request from GHSA-w2v8-php4-p8hc\"\n\nThis reverts commit fa0d4829f9c81eefb37cc058e2fa1b6a918741da.",
    "before_after_code_files": [
      "wagtail/admin/tests/viewsets/test_model_viewset.py||wagtail/admin/tests/viewsets/test_model_viewset.py",
      "wagtail/admin/views/generic/models.py||wagtail/admin/views/generic/models.py",
      "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
      "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py",
      "wagtail/snippets/views/snippets.py||wagtail/snippets/views/snippets.py",
      "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
      "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py",
      "wagtail/test/testapp/views.py||wagtail/test/testapp/views.py"
    ]
  },
  "patch_diff": {
    "wagtail/admin/tests/viewsets/test_model_viewset.py||wagtail/admin/tests/viewsets/test_model_viewset.py": [
      "File: wagtail/admin/tests/viewsets/test_model_viewset.py -> wagtail/admin/tests/viewsets/test_model_viewset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1474:         modal_workflow_script = soup.select_one(f'script[src=\"{modal_workflow_js}\"]')",
      "1475:         self.assertIsNotNone(modal_workflow_script)",
      "1507: class TestDefaultMessages(WagtailTestUtils, TestCase):",
      "1508:     def setUp(self):",
      "",
      "[Removed Lines]",
      "1477:     def test_field_permissions(self):",
      "1478:         self.user.is_superuser = False",
      "1479:         self.user.save()",
      "1480:         self.user.user_permissions.add(",
      "1481:             Permission.objects.get(",
      "1482:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
      "1483:             ),",
      "1484:             Permission.objects.get(",
      "1485:                 content_type__app_label=self.object._meta.app_label,",
      "1486:                 codename=get_permission_codename(\"change\", self.object._meta),",
      "1487:             ),",
      "1488:         )",
      "1490:         response = self.client.get(self.url)",
      "1491:         self.assertEqual(response.status_code, 200)",
      "1492:         self.assertEqual(list(response.context[\"form\"].fields), [\"name\"])",
      "1494:         self.user.user_permissions.add(",
      "1495:             Permission.objects.get(",
      "1496:                 codename=\"can_set_release_date\",",
      "1497:             )",
      "1498:         )",
      "1500:         response = self.client.get(self.url)",
      "1501:         self.assertEqual(response.status_code, 200)",
      "1502:         self.assertEqual(",
      "1503:             list(response.context[\"form\"].fields), [\"name\", \"release_date\"]",
      "1504:         )",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "wagtail/admin/views/generic/models.py||wagtail/admin/views/generic/models.py": [
      "File: wagtail/admin/views/generic/models.py -> wagtail/admin/views/generic/models.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: from wagtail.actions.unpublish import UnpublishAction",
      "28: from wagtail.admin import messages",
      "29: from wagtail.admin.filters import WagtailFilterSet",
      "31: from wagtail.admin.forms.search import SearchForm",
      "32: from wagtail.admin.panels import get_edit_handler",
      "33: from wagtail.admin.ui.components import Component, MediaContainer",
      "",
      "[Removed Lines]",
      "30: from wagtail.admin.forms.models import WagtailAdminModelForm",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "617:             for locale in Locale.objects.all().exclude(id=self.locale.id)",
      "618:         ]",
      "638:     def save_instance(self):",
      "639:         \"\"\"",
      "640:         Called after the form is successfully validated - saves the object to the db",
      "",
      "[Removed Lines]",
      "620:     def get_initial_form_instance(self):",
      "621:         if self.locale:",
      "622:             instance = self.model()",
      "623:             instance.locale = self.locale",
      "624:             return instance",
      "626:     def get_form_kwargs(self):",
      "627:         if instance := self.get_initial_form_instance():",
      "628:             # super().get_form_kwargs() will use self.object as the instance kwarg",
      "629:             self.object = instance",
      "630:         kwargs = super().get_form_kwargs()",
      "632:         form_class = self.get_form_class()",
      "633:         # Add for_user support for PermissionedForm",
      "634:         if issubclass(form_class, WagtailAdminModelForm):",
      "635:             kwargs[\"for_user\"] = self.request.user",
      "636:         return kwargs",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "805:             for translation in self.object.get_translations().select_related(\"locale\")",
      "806:         ]",
      "815:     def save_instance(self):",
      "816:         \"\"\"",
      "817:         Called after the form is successfully validated - saves the object to the db.",
      "",
      "[Removed Lines]",
      "808:     def get_form_kwargs(self):",
      "809:         kwargs = super().get_form_kwargs()",
      "810:         form_class = self.get_form_class()",
      "811:         if issubclass(form_class, WagtailAdminModelForm):",
      "812:             kwargs[\"for_user\"] = self.request.user",
      "813:         return kwargs",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py": [
      "File: wagtail/contrib/settings/tests/generic/test_admin.py -> wagtail/contrib/settings/tests/generic/test_admin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "14:     PanelGenericSettings,",
      "15:     TabbedGenericSettings,",
      "16:     TestGenericSetting,",
      "18: )",
      "19: from wagtail.test.utils import WagtailTestUtils",
      "",
      "[Removed Lines]",
      "17:     TestPermissionedGenericSetting,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: class TestGenericSettingCreateView(BaseTestGenericSettingView):",
      "78:     def setUp(self):",
      "79:         self.user = self.login()",
      "86:     def test_get_edit(self):",
      "87:         response = self.get()",
      "",
      "[Removed Lines]",
      "80:         self.user.user_permissions.add(",
      "81:             Permission.objects.get(",
      "82:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
      "83:             )",
      "84:         )",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "113:         # Ensure the form supports file uploads",
      "114:         self.assertContains(response, 'enctype=\"multipart/form-data\"')",
      "149: class TestGenericSettingEditView(BaseTestGenericSettingView):",
      "150:     def setUp(self):",
      "",
      "[Removed Lines]",
      "116:     def test_create_restricted_field_without_permission(self):",
      "117:         self.user.is_superuser = False",
      "118:         self.user.save()",
      "120:         self.assertFalse(TestPermissionedGenericSetting.objects.exists())",
      "121:         response = self.post(",
      "122:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
      "123:             setting=TestPermissionedGenericSetting,",
      "124:         )",
      "125:         self.assertEqual(response.status_code, 302)",
      "127:         settings = TestPermissionedGenericSetting.objects.get()",
      "128:         self.assertEqual(settings.title, \"test\")",
      "129:         self.assertEqual(settings.sensitive_email, \"\")",
      "131:     def test_create_restricted_field(self):",
      "132:         self.user.is_superuser = False",
      "133:         self.user.save()",
      "134:         self.user.user_permissions.add(",
      "135:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")",
      "136:         )",
      "137:         self.assertFalse(TestPermissionedGenericSetting.objects.exists())",
      "138:         response = self.post(",
      "139:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
      "140:             setting=TestPermissionedGenericSetting,",
      "141:         )",
      "142:         self.assertEqual(response.status_code, 302)",
      "144:         settings = TestPermissionedGenericSetting.objects.get()",
      "145:         self.assertEqual(settings.title, \"test\")",
      "146:         self.assertEqual(settings.sensitive_email, \"test@example.com\")",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "152:         self.test_setting.title = \"Setting title\"",
      "153:         self.test_setting.save()",
      "162:     def test_get_edit(self):",
      "163:         response = self.get()",
      "",
      "[Removed Lines]",
      "155:         self.user = self.login()",
      "156:         self.user.user_permissions.add(",
      "157:             Permission.objects.get(",
      "158:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
      "159:             )",
      "160:         )",
      "",
      "[Added Lines]",
      "117:         self.login()",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "196:             expected_url=f\"{url}{TestGenericSetting.objects.first().pk}/\",",
      "197:         )",
      "244: class TestAdminPermission(WagtailTestUtils, TestCase):",
      "245:     def test_registered_permission(self):",
      "",
      "[Removed Lines]",
      "199:     def test_edit_restricted_field(self):",
      "200:         test_setting = TestPermissionedGenericSetting()",
      "201:         test_setting.sensitive_email = \"test@example.com\"",
      "202:         test_setting.save()",
      "203:         self.user.is_superuser = False",
      "204:         self.user.save()",
      "206:         self.user.user_permissions.add(",
      "207:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")",
      "208:         )",
      "210:         response = self.get(setting=TestPermissionedGenericSetting)",
      "211:         self.assertEqual(response.status_code, 200)",
      "212:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
      "214:         response = self.post(",
      "215:             setting=TestPermissionedGenericSetting,",
      "216:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
      "217:         )",
      "218:         self.assertEqual(response.status_code, 302)",
      "220:         test_setting.refresh_from_db()",
      "221:         self.assertEqual(test_setting.sensitive_email, \"test-updated@example.com\")",
      "223:     def test_edit_restricted_field_without_permission(self):",
      "224:         test_setting = TestPermissionedGenericSetting()",
      "225:         test_setting.sensitive_email = \"test@example.com\"",
      "226:         test_setting.save()",
      "227:         self.user.is_superuser = False",
      "228:         self.user.save()",
      "230:         response = self.get(setting=TestPermissionedGenericSetting)",
      "231:         self.assertEqual(response.status_code, 200)",
      "232:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
      "234:         response = self.post(",
      "235:             setting=TestPermissionedGenericSetting,",
      "236:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
      "237:         )",
      "238:         self.assertEqual(response.status_code, 302)",
      "240:         test_setting.refresh_from_db()",
      "241:         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py": [
      "File: wagtail/contrib/settings/tests/site_specific/test_admin.py -> wagtail/contrib/settings/tests/site_specific/test_admin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "14:     IconSiteSetting,",
      "15:     PanelSiteSettings,",
      "16:     TabbedSiteSettings,",
      "18:     TestSiteSetting,",
      "19: )",
      "20: from wagtail.test.utils import WagtailTestUtils",
      "",
      "[Removed Lines]",
      "17:     TestPermissionedSiteSetting,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73: class TestSiteSettingCreateView(BaseTestSiteSettingView):",
      "74:     def setUp(self):",
      "75:         self.user = self.login()",
      "82:     def test_get_edit(self):",
      "83:         response = self.get()",
      "",
      "[Removed Lines]",
      "76:         self.user.user_permissions.add(",
      "77:             Permission.objects.get(",
      "78:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
      "79:             )",
      "80:         )",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "109:         # Ensure the form supports file uploads",
      "110:         self.assertContains(response, 'enctype=\"multipart/form-data\"')",
      "145: class TestSiteSettingEditView(BaseTestSiteSettingView):",
      "146:     def setUp(self):",
      "149:         self.test_setting = TestSiteSetting()",
      "150:         self.test_setting.title = \"Site title\"",
      "151:         self.test_setting.email = \"initial@example.com\"",
      "153:         self.test_setting.save()",
      "162:     def test_get_edit(self):",
      "163:         response = self.get()",
      "",
      "[Removed Lines]",
      "112:     def test_create_restricted_field_without_permission(self):",
      "113:         self.user.is_superuser = False",
      "114:         self.user.save()",
      "116:         self.assertFalse(TestPermissionedSiteSetting.objects.exists())",
      "117:         response = self.post(",
      "118:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
      "119:             setting=TestPermissionedSiteSetting,",
      "120:         )",
      "121:         self.assertEqual(response.status_code, 302)",
      "123:         settings = TestPermissionedSiteSetting.objects.get()",
      "124:         self.assertEqual(settings.title, \"test\")",
      "125:         self.assertEqual(settings.sensitive_email, \"\")",
      "127:     def test_create_restricted_field(self):",
      "128:         self.user.is_superuser = False",
      "129:         self.user.save()",
      "130:         self.user.user_permissions.add(",
      "131:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")",
      "132:         )",
      "133:         self.assertFalse(TestPermissionedSiteSetting.objects.exists())",
      "134:         response = self.post(",
      "135:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
      "136:             setting=TestPermissionedSiteSetting,",
      "137:         )",
      "138:         self.assertEqual(response.status_code, 302)",
      "140:         settings = TestPermissionedSiteSetting.objects.get()",
      "141:         self.assertEqual(settings.title, \"test\")",
      "142:         self.assertEqual(settings.sensitive_email, \"test@example.com\")",
      "147:         self.default_site = Site.objects.get(is_default_site=True)",
      "152:         self.test_setting.site = self.default_site",
      "155:         self.user = self.login()",
      "156:         self.user.user_permissions.add(",
      "157:             Permission.objects.get(",
      "158:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
      "159:             )",
      "160:         )",
      "",
      "[Added Lines]",
      "109:         default_site = Site.objects.get(is_default_site=True)",
      "114:         self.test_setting.site = default_site",
      "117:         self.login()",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "201:         response = self.client.get(url)",
      "202:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
      "251: @override_settings(",
      "252:     ALLOWED_HOSTS=[\"testserver\", \"example.com\", \"noneoftheabove.example.com\"]",
      "",
      "[Removed Lines]",
      "204:     def test_edit_restricted_field(self):",
      "205:         test_setting = TestPermissionedSiteSetting()",
      "206:         test_setting.sensitive_email = \"test@example.com\"",
      "207:         test_setting.site = self.default_site",
      "208:         test_setting.save()",
      "209:         self.user.is_superuser = False",
      "210:         self.user.save()",
      "212:         self.user.user_permissions.add(",
      "213:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")",
      "214:         )",
      "216:         response = self.get(setting=TestPermissionedSiteSetting)",
      "217:         self.assertEqual(response.status_code, 200)",
      "218:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
      "220:         response = self.post(",
      "221:             setting=TestPermissionedSiteSetting,",
      "222:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
      "223:         )",
      "224:         self.assertEqual(response.status_code, 302)",
      "226:         test_setting.refresh_from_db()",
      "227:         self.assertEqual(test_setting.sensitive_email, \"test-updated@example.com\")",
      "229:     def test_edit_restricted_field_without_permission(self):",
      "230:         test_setting = TestPermissionedSiteSetting()",
      "231:         test_setting.sensitive_email = \"test@example.com\"",
      "232:         test_setting.site = self.default_site",
      "233:         test_setting.save()",
      "234:         self.user.is_superuser = False",
      "235:         self.user.save()",
      "237:         response = self.get(setting=TestPermissionedSiteSetting)",
      "238:         self.assertEqual(response.status_code, 200)",
      "239:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
      "241:         response = self.post(",
      "242:             setting=TestPermissionedSiteSetting,",
      "243:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
      "244:         )",
      "245:         self.assertEqual(response.status_code, 302)",
      "247:         test_setting.refresh_from_db()",
      "248:         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "wagtail/snippets/views/snippets.py||wagtail/snippets/views/snippets.py": [
      "File: wagtail/snippets/views/snippets.py -> wagtail/snippets/views/snippets.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "235:     def _get_action_menu(self):",
      "236:         return SnippetActionMenu(self.request, view=self.view_name, model=self.model)",
      "238:     def get_side_panels(self):",
      "239:         side_panels = [",
      "240:             SnippetStatusSidePanel(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "238:     def _get_initial_form_instance(self):",
      "239:         instance = self.model()",
      "241:         # Set locale of the new instance",
      "242:         if self.locale:",
      "243:             instance.locale = self.locale",
      "245:         return instance",
      "247:     def get_form_kwargs(self):",
      "248:         return {",
      "250:             \"instance\": self._get_initial_form_instance(),",
      "251:             \"for_user\": self.request.user,",
      "252:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "294:             locked_for_user=self.locked_for_user,",
      "295:         )",
      "297:     def get_side_panels(self):",
      "298:         side_panels = [",
      "299:             SnippetStatusSidePanel(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "313:     def get_form_kwargs(self):",
      "314:         return {**super().get_form_kwargs(), \"for_user\": self.request.user}",
      "",
      "---------------"
    ],
    "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py": [
      "File: wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py -> wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py": [
      "File: wagtail/test/testapp/models.py -> wagtail/test/testapp/models.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1640:     email = models.EmailField(max_length=50)",
      "1686: @register_setting",
      "1687: class ImportantPagesSiteSetting(BaseSiteSetting):",
      "1688:     sign_up_page = models.ForeignKey(",
      "",
      "[Removed Lines]",
      "1643: @register_setting",
      "1644: class TestPermissionedGenericSetting(BaseGenericSetting):",
      "1645:     title = models.CharField(max_length=100)",
      "1646:     sensitive_email = models.EmailField(max_length=50)",
      "1648:     panels = [",
      "1649:         FieldPanel(\"title\"),",
      "1650:         FieldPanel(",
      "1651:             \"sensitive_email\",",
      "1652:             permission=\"tests.can_edit_sensitive_email_generic_setting\",",
      "1653:         ),",
      "1654:     ]",
      "1656:     class Meta:",
      "1657:         permissions = [",
      "1658:             (",
      "1659:                 \"can_edit_sensitive_email_generic_setting\",",
      "1660:                 \"Can edit sensitive email generic setting.\",",
      "1661:             ),",
      "1662:         ]",
      "1665: @register_setting",
      "1666: class TestPermissionedSiteSetting(BaseSiteSetting):",
      "1667:     title = models.CharField(max_length=100)",
      "1668:     sensitive_email = models.EmailField(max_length=50)",
      "1670:     panels = [",
      "1671:         FieldPanel(\"title\"),",
      "1672:         FieldPanel(",
      "1673:             \"sensitive_email\", permission=\"tests.can_edit_sensitive_email_site_setting\"",
      "1674:         ),",
      "1675:     ]",
      "1677:     class Meta:",
      "1678:         permissions = [",
      "1679:             (",
      "1680:                 \"can_edit_sensitive_email_site_setting\",",
      "1681:                 \"Can edit sensitive email site setting.\",",
      "1682:             ),",
      "1683:         ]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2272:     def __str__(self):",
      "2273:         return f\"{self.name} ({self.release_date})\"",
      "2279: class PurgeRevisionsProtectedTestModel(models.Model):",
      "2280:     revision = models.OneToOneField(",
      "",
      "[Removed Lines]",
      "2275:     class Meta:",
      "2276:         permissions = [(\"can_set_release_date\", \"Can set release date\")]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "wagtail/test/testapp/views.py||wagtail/test/testapp/views.py": [
      "File: wagtail/test/testapp/views.py -> wagtail/test/testapp/views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "228:     panels = [",
      "229:         FieldPanel(\"name\"),",
      "231:     ]",
      "",
      "[Removed Lines]",
      "230:         FieldPanel(\"release_date\", permission=\"tests.can_set_release_date\"),",
      "",
      "[Added Lines]",
      "230:         FieldPanel(\"release_date\"),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fa0d4829f9c81eefb37cc058e2fa1b6a918741da",
      "candidate_info": {
        "commit_hash": "fa0d4829f9c81eefb37cc058e2fa1b6a918741da",
        "repo": "wagtail/wagtail",
        "commit_url": "https://github.com/wagtail/wagtail/commit/fa0d4829f9c81eefb37cc058e2fa1b6a918741da",
        "files": [
          "wagtail/admin/tests/viewsets/test_model_viewset.py",
          "wagtail/admin/views/generic/models.py",
          "wagtail/contrib/settings/tests/generic/test_admin.py",
          "wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "wagtail/snippets/views/snippets.py",
          "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
          "wagtail/test/testapp/models.py",
          "wagtail/test/testapp/views.py"
        ],
        "message": "Merge pull request from GHSA-w2v8-php4-p8hc\n\n* Pass user to settings form to enable permissions checks\n\n* Add tests for settings creation and editing\n\n* Ensure all generic create / edit view forms receive `for_user`\n\nCo-authored-by: Sage Abdullah <sage.abdullah@torchbox.com>\n\n* Test field permissions on ModelViewTest\n\n---------\n\nCo-authored-by: Sage Abdullah <sage.abdullah@torchbox.com>",
        "before_after_code_files": [
          "wagtail/admin/tests/viewsets/test_model_viewset.py||wagtail/admin/tests/viewsets/test_model_viewset.py",
          "wagtail/admin/views/generic/models.py||wagtail/admin/views/generic/models.py",
          "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
          "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "wagtail/snippets/views/snippets.py||wagtail/snippets/views/snippets.py",
          "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
          "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py",
          "wagtail/test/testapp/views.py||wagtail/test/testapp/views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wagtail/admin/tests/viewsets/test_model_viewset.py||wagtail/admin/tests/viewsets/test_model_viewset.py",
            "wagtail/admin/views/generic/models.py||wagtail/admin/views/generic/models.py",
            "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
            "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py",
            "wagtail/snippets/views/snippets.py||wagtail/snippets/views/snippets.py",
            "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
            "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py",
            "wagtail/test/testapp/views.py||wagtail/test/testapp/views.py"
          ],
          "candidate": [
            "wagtail/admin/tests/viewsets/test_model_viewset.py||wagtail/admin/tests/viewsets/test_model_viewset.py",
            "wagtail/admin/views/generic/models.py||wagtail/admin/views/generic/models.py",
            "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
            "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py",
            "wagtail/snippets/views/snippets.py||wagtail/snippets/views/snippets.py",
            "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
            "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py",
            "wagtail/test/testapp/views.py||wagtail/test/testapp/views.py"
          ]
        }
      },
      "candidate_diff": {
        "wagtail/admin/tests/viewsets/test_model_viewset.py||wagtail/admin/tests/viewsets/test_model_viewset.py": [
          "File: wagtail/admin/tests/viewsets/test_model_viewset.py -> wagtail/admin/tests/viewsets/test_model_viewset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1474:         modal_workflow_script = soup.select_one(f'script[src=\"{modal_workflow_js}\"]')",
          "1475:         self.assertIsNotNone(modal_workflow_script)",
          "1478: class TestDefaultMessages(WagtailTestUtils, TestCase):",
          "1479:     def setUp(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1477:     def test_field_permissions(self):",
          "1478:         self.user.is_superuser = False",
          "1479:         self.user.save()",
          "1480:         self.user.user_permissions.add(",
          "1481:             Permission.objects.get(",
          "1482:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "1483:             ),",
          "1484:             Permission.objects.get(",
          "1485:                 content_type__app_label=self.object._meta.app_label,",
          "1486:                 codename=get_permission_codename(\"change\", self.object._meta),",
          "1487:             ),",
          "1488:         )",
          "1490:         response = self.client.get(self.url)",
          "1491:         self.assertEqual(response.status_code, 200)",
          "1492:         self.assertEqual(list(response.context[\"form\"].fields), [\"name\"])",
          "1494:         self.user.user_permissions.add(",
          "1495:             Permission.objects.get(",
          "1496:                 codename=\"can_set_release_date\",",
          "1497:             )",
          "1498:         )",
          "1500:         response = self.client.get(self.url)",
          "1501:         self.assertEqual(response.status_code, 200)",
          "1502:         self.assertEqual(",
          "1503:             list(response.context[\"form\"].fields), [\"name\", \"release_date\"]",
          "1504:         )",
          "",
          "---------------"
        ],
        "wagtail/admin/views/generic/models.py||wagtail/admin/views/generic/models.py": [
          "File: wagtail/admin/views/generic/models.py -> wagtail/admin/views/generic/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from wagtail.actions.unpublish import UnpublishAction",
          "28: from wagtail.admin import messages",
          "29: from wagtail.admin.filters import WagtailFilterSet",
          "30: from wagtail.admin.forms.search import SearchForm",
          "31: from wagtail.admin.panels import get_edit_handler",
          "32: from wagtail.admin.ui.components import Component, MediaContainer",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: from wagtail.admin.forms.models import WagtailAdminModelForm",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "616:             for locale in Locale.objects.all().exclude(id=self.locale.id)",
          "617:         ]",
          "619:     def save_instance(self):",
          "620:         \"\"\"",
          "621:         Called after the form is successfully validated - saves the object to the db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:     def get_initial_form_instance(self):",
          "621:         if self.locale:",
          "622:             instance = self.model()",
          "623:             instance.locale = self.locale",
          "624:             return instance",
          "626:     def get_form_kwargs(self):",
          "627:         if instance := self.get_initial_form_instance():",
          "628:             # super().get_form_kwargs() will use self.object as the instance kwarg",
          "629:             self.object = instance",
          "630:         kwargs = super().get_form_kwargs()",
          "632:         form_class = self.get_form_class()",
          "633:         # Add for_user support for PermissionedForm",
          "634:         if issubclass(form_class, WagtailAdminModelForm):",
          "635:             kwargs[\"for_user\"] = self.request.user",
          "636:         return kwargs",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "786:             for translation in self.object.get_translations().select_related(\"locale\")",
          "787:         ]",
          "789:     def save_instance(self):",
          "790:         \"\"\"",
          "791:         Called after the form is successfully validated - saves the object to the db.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "808:     def get_form_kwargs(self):",
          "809:         kwargs = super().get_form_kwargs()",
          "810:         form_class = self.get_form_class()",
          "811:         if issubclass(form_class, WagtailAdminModelForm):",
          "812:             kwargs[\"for_user\"] = self.request.user",
          "813:         return kwargs",
          "",
          "---------------"
        ],
        "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py": [
          "File: wagtail/contrib/settings/tests/generic/test_admin.py -> wagtail/contrib/settings/tests/generic/test_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     PanelGenericSettings,",
          "15:     TabbedGenericSettings,",
          "16:     TestGenericSetting,",
          "17: )",
          "18: from wagtail.test.utils import WagtailTestUtils",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:     TestPermissionedGenericSetting,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: class TestGenericSettingCreateView(BaseTestGenericSettingView):",
          "77:     def setUp(self):",
          "78:         self.user = self.login()",
          "80:     def test_get_edit(self):",
          "81:         response = self.get()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:         self.user.user_permissions.add(",
          "81:             Permission.objects.get(",
          "82:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "83:             )",
          "84:         )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:         # Ensure the form supports file uploads",
          "108:         self.assertContains(response, 'enctype=\"multipart/form-data\"')",
          "111: class TestGenericSettingEditView(BaseTestGenericSettingView):",
          "112:     def setUp(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     def test_create_restricted_field_without_permission(self):",
          "117:         self.user.is_superuser = False",
          "118:         self.user.save()",
          "120:         self.assertFalse(TestPermissionedGenericSetting.objects.exists())",
          "121:         response = self.post(",
          "122:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "123:             setting=TestPermissionedGenericSetting,",
          "124:         )",
          "125:         self.assertEqual(response.status_code, 302)",
          "127:         settings = TestPermissionedGenericSetting.objects.get()",
          "128:         self.assertEqual(settings.title, \"test\")",
          "129:         self.assertEqual(settings.sensitive_email, \"\")",
          "131:     def test_create_restricted_field(self):",
          "132:         self.user.is_superuser = False",
          "133:         self.user.save()",
          "134:         self.user.user_permissions.add(",
          "135:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")",
          "136:         )",
          "137:         self.assertFalse(TestPermissionedGenericSetting.objects.exists())",
          "138:         response = self.post(",
          "139:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "140:             setting=TestPermissionedGenericSetting,",
          "141:         )",
          "142:         self.assertEqual(response.status_code, 302)",
          "144:         settings = TestPermissionedGenericSetting.objects.get()",
          "145:         self.assertEqual(settings.title, \"test\")",
          "146:         self.assertEqual(settings.sensitive_email, \"test@example.com\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:         self.test_setting.title = \"Setting title\"",
          "115:         self.test_setting.save()",
          "119:     def test_get_edit(self):",
          "120:         response = self.get()",
          "",
          "[Removed Lines]",
          "117:         self.login()",
          "",
          "[Added Lines]",
          "155:         self.user = self.login()",
          "156:         self.user.user_permissions.add(",
          "157:             Permission.objects.get(",
          "158:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "159:             )",
          "160:         )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:             expected_url=f\"{url}{TestGenericSetting.objects.first().pk}/\",",
          "154:         )",
          "157: class TestAdminPermission(WagtailTestUtils, TestCase):",
          "158:     def test_registered_permission(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:     def test_edit_restricted_field(self):",
          "200:         test_setting = TestPermissionedGenericSetting()",
          "201:         test_setting.sensitive_email = \"test@example.com\"",
          "202:         test_setting.save()",
          "203:         self.user.is_superuser = False",
          "204:         self.user.save()",
          "206:         self.user.user_permissions.add(",
          "207:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")",
          "208:         )",
          "210:         response = self.get(setting=TestPermissionedGenericSetting)",
          "211:         self.assertEqual(response.status_code, 200)",
          "212:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "214:         response = self.post(",
          "215:             setting=TestPermissionedGenericSetting,",
          "216:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
          "217:         )",
          "218:         self.assertEqual(response.status_code, 302)",
          "220:         test_setting.refresh_from_db()",
          "221:         self.assertEqual(test_setting.sensitive_email, \"test-updated@example.com\")",
          "223:     def test_edit_restricted_field_without_permission(self):",
          "224:         test_setting = TestPermissionedGenericSetting()",
          "225:         test_setting.sensitive_email = \"test@example.com\"",
          "226:         test_setting.save()",
          "227:         self.user.is_superuser = False",
          "228:         self.user.save()",
          "230:         response = self.get(setting=TestPermissionedGenericSetting)",
          "231:         self.assertEqual(response.status_code, 200)",
          "232:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "234:         response = self.post(",
          "235:             setting=TestPermissionedGenericSetting,",
          "236:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
          "237:         )",
          "238:         self.assertEqual(response.status_code, 302)",
          "240:         test_setting.refresh_from_db()",
          "241:         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")",
          "",
          "---------------"
        ],
        "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py": [
          "File: wagtail/contrib/settings/tests/site_specific/test_admin.py -> wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     IconSiteSetting,",
          "15:     PanelSiteSettings,",
          "16:     TabbedSiteSettings,",
          "17:     TestSiteSetting,",
          "18: )",
          "19: from wagtail.test.utils import WagtailTestUtils",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:     TestPermissionedSiteSetting,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: class TestSiteSettingCreateView(BaseTestSiteSettingView):",
          "73:     def setUp(self):",
          "74:         self.user = self.login()",
          "76:     def test_get_edit(self):",
          "77:         response = self.get()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:         self.user.user_permissions.add(",
          "77:             Permission.objects.get(",
          "78:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "79:             )",
          "80:         )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:         # Ensure the form supports file uploads",
          "104:         self.assertContains(response, 'enctype=\"multipart/form-data\"')",
          "107: class TestSiteSettingEditView(BaseTestSiteSettingView):",
          "108:     def setUp(self):",
          "111:         self.test_setting = TestSiteSetting()",
          "112:         self.test_setting.title = \"Site title\"",
          "113:         self.test_setting.email = \"initial@example.com\"",
          "115:         self.test_setting.save()",
          "119:     def test_get_edit(self):",
          "120:         response = self.get()",
          "",
          "[Removed Lines]",
          "109:         default_site = Site.objects.get(is_default_site=True)",
          "114:         self.test_setting.site = default_site",
          "117:         self.login()",
          "",
          "[Added Lines]",
          "112:     def test_create_restricted_field_without_permission(self):",
          "113:         self.user.is_superuser = False",
          "114:         self.user.save()",
          "116:         self.assertFalse(TestPermissionedSiteSetting.objects.exists())",
          "117:         response = self.post(",
          "118:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "119:             setting=TestPermissionedSiteSetting,",
          "120:         )",
          "121:         self.assertEqual(response.status_code, 302)",
          "123:         settings = TestPermissionedSiteSetting.objects.get()",
          "124:         self.assertEqual(settings.title, \"test\")",
          "125:         self.assertEqual(settings.sensitive_email, \"\")",
          "127:     def test_create_restricted_field(self):",
          "128:         self.user.is_superuser = False",
          "129:         self.user.save()",
          "130:         self.user.user_permissions.add(",
          "131:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")",
          "132:         )",
          "133:         self.assertFalse(TestPermissionedSiteSetting.objects.exists())",
          "134:         response = self.post(",
          "135:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "136:             setting=TestPermissionedSiteSetting,",
          "137:         )",
          "138:         self.assertEqual(response.status_code, 302)",
          "140:         settings = TestPermissionedSiteSetting.objects.get()",
          "141:         self.assertEqual(settings.title, \"test\")",
          "142:         self.assertEqual(settings.sensitive_email, \"test@example.com\")",
          "147:         self.default_site = Site.objects.get(is_default_site=True)",
          "152:         self.test_setting.site = self.default_site",
          "155:         self.user = self.login()",
          "156:         self.user.user_permissions.add(",
          "157:             Permission.objects.get(",
          "158:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "159:             )",
          "160:         )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:         response = self.client.get(url)",
          "159:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "162: @override_settings(",
          "163:     ALLOWED_HOSTS=[\"testserver\", \"example.com\", \"noneoftheabove.example.com\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:     def test_edit_restricted_field(self):",
          "205:         test_setting = TestPermissionedSiteSetting()",
          "206:         test_setting.sensitive_email = \"test@example.com\"",
          "207:         test_setting.site = self.default_site",
          "208:         test_setting.save()",
          "209:         self.user.is_superuser = False",
          "210:         self.user.save()",
          "212:         self.user.user_permissions.add(",
          "213:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")",
          "214:         )",
          "216:         response = self.get(setting=TestPermissionedSiteSetting)",
          "217:         self.assertEqual(response.status_code, 200)",
          "218:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "220:         response = self.post(",
          "221:             setting=TestPermissionedSiteSetting,",
          "222:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
          "223:         )",
          "224:         self.assertEqual(response.status_code, 302)",
          "226:         test_setting.refresh_from_db()",
          "227:         self.assertEqual(test_setting.sensitive_email, \"test-updated@example.com\")",
          "229:     def test_edit_restricted_field_without_permission(self):",
          "230:         test_setting = TestPermissionedSiteSetting()",
          "231:         test_setting.sensitive_email = \"test@example.com\"",
          "232:         test_setting.site = self.default_site",
          "233:         test_setting.save()",
          "234:         self.user.is_superuser = False",
          "235:         self.user.save()",
          "237:         response = self.get(setting=TestPermissionedSiteSetting)",
          "238:         self.assertEqual(response.status_code, 200)",
          "239:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "241:         response = self.post(",
          "242:             setting=TestPermissionedSiteSetting,",
          "243:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
          "244:         )",
          "245:         self.assertEqual(response.status_code, 302)",
          "247:         test_setting.refresh_from_db()",
          "248:         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")",
          "",
          "---------------"
        ],
        "wagtail/snippets/views/snippets.py||wagtail/snippets/views/snippets.py": [
          "File: wagtail/snippets/views/snippets.py -> wagtail/snippets/views/snippets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     def _get_action_menu(self):",
          "236:         return SnippetActionMenu(self.request, view=self.view_name, model=self.model)",
          "254:     def get_side_panels(self):",
          "255:         side_panels = [",
          "256:             SnippetStatusSidePanel(",
          "",
          "[Removed Lines]",
          "238:     def _get_initial_form_instance(self):",
          "239:         instance = self.model()",
          "241:         # Set locale of the new instance",
          "242:         if self.locale:",
          "243:             instance.locale = self.locale",
          "245:         return instance",
          "247:     def get_form_kwargs(self):",
          "248:         return {",
          "250:             \"instance\": self._get_initial_form_instance(),",
          "251:             \"for_user\": self.request.user,",
          "252:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:             locked_for_user=self.locked_for_user,",
          "311:         )",
          "316:     def get_side_panels(self):",
          "317:         side_panels = [",
          "318:             SnippetStatusSidePanel(",
          "",
          "[Removed Lines]",
          "313:     def get_form_kwargs(self):",
          "314:         return {**super().get_form_kwargs(), \"for_user\": self.request.user}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py": [
          "File: wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py -> wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Generated by Django 4.2.11 on 2024-04-25 15:51",
          "3: from django.db import migrations, models",
          "4: import django.db.models.deletion",
          "7: class Migration(migrations.Migration):",
          "9:     dependencies = [",
          "10:         ('wagtailcore', '0091_remove_revision_submitted_for_moderation'),",
          "11:         ('tests', '0033_customcopyformpage'),",
          "12:     ]",
          "14:     operations = [",
          "15:         migrations.CreateModel(",
          "16:             name='TestPermissionedGenericSetting',",
          "17:             fields=[",
          "18:                 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
          "19:                 ('title', models.CharField(max_length=100)),",
          "20:                 ('sensitive_email', models.EmailField(max_length=50)),",
          "21:             ],",
          "22:             options={",
          "23:                 'permissions': [('can_edit_sensitive_email_generic_setting', 'Can edit sensitive email generic setting.')],",
          "24:             },",
          "25:         ),",
          "26:         migrations.AlterModelOptions(",
          "27:             name='featurecompletetoy',",
          "28:             options={'permissions': [('can_set_release_date', 'Can set release date')]},",
          "29:         ),",
          "30:         migrations.CreateModel(",
          "31:             name='TestPermissionedSiteSetting',",
          "32:             fields=[",
          "33:                 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
          "34:                 ('title', models.CharField(max_length=100)),",
          "35:                 ('sensitive_email', models.EmailField(max_length=50)),",
          "36:                 ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),",
          "37:             ],",
          "38:             options={",
          "39:                 'permissions': [('can_edit_sensitive_email_site_setting', 'Can edit sensitive email site setting.')],",
          "40:             },",
          "41:         ),",
          "42:     ]",
          "",
          "---------------"
        ],
        "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py": [
          "File: wagtail/test/testapp/models.py -> wagtail/test/testapp/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1640:     email = models.EmailField(max_length=50)",
          "1643: @register_setting",
          "1644: class ImportantPagesSiteSetting(BaseSiteSetting):",
          "1645:     sign_up_page = models.ForeignKey(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1643: @register_setting",
          "1644: class TestPermissionedGenericSetting(BaseGenericSetting):",
          "1645:     title = models.CharField(max_length=100)",
          "1646:     sensitive_email = models.EmailField(max_length=50)",
          "1648:     panels = [",
          "1649:         FieldPanel(\"title\"),",
          "1650:         FieldPanel(",
          "1651:             \"sensitive_email\",",
          "1652:             permission=\"tests.can_edit_sensitive_email_generic_setting\",",
          "1653:         ),",
          "1654:     ]",
          "1656:     class Meta:",
          "1657:         permissions = [",
          "1658:             (",
          "1659:                 \"can_edit_sensitive_email_generic_setting\",",
          "1660:                 \"Can edit sensitive email generic setting.\",",
          "1661:             ),",
          "1662:         ]",
          "1665: @register_setting",
          "1666: class TestPermissionedSiteSetting(BaseSiteSetting):",
          "1667:     title = models.CharField(max_length=100)",
          "1668:     sensitive_email = models.EmailField(max_length=50)",
          "1670:     panels = [",
          "1671:         FieldPanel(\"title\"),",
          "1672:         FieldPanel(",
          "1673:             \"sensitive_email\", permission=\"tests.can_edit_sensitive_email_site_setting\"",
          "1674:         ),",
          "1675:     ]",
          "1677:     class Meta:",
          "1678:         permissions = [",
          "1679:             (",
          "1680:                 \"can_edit_sensitive_email_site_setting\",",
          "1681:                 \"Can edit sensitive email site setting.\",",
          "1682:             ),",
          "1683:         ]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2229:     def __str__(self):",
          "2230:         return f\"{self.name} ({self.release_date})\"",
          "2233: class PurgeRevisionsProtectedTestModel(models.Model):",
          "2234:     revision = models.OneToOneField(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2275:     class Meta:",
          "2276:         permissions = [(\"can_set_release_date\", \"Can set release date\")]",
          "",
          "---------------"
        ],
        "wagtail/test/testapp/views.py||wagtail/test/testapp/views.py": [
          "File: wagtail/test/testapp/views.py -> wagtail/test/testapp/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     panels = [",
          "229:         FieldPanel(\"name\"),",
          "231:     ]",
          "",
          "[Removed Lines]",
          "230:         FieldPanel(\"release_date\"),",
          "",
          "[Added Lines]",
          "230:         FieldPanel(\"release_date\", permission=\"tests.can_set_release_date\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab78d9ae60319baef102e2f8056a74d6349ae004",
      "candidate_info": {
        "commit_hash": "ab78d9ae60319baef102e2f8056a74d6349ae004",
        "repo": "wagtail/wagtail",
        "commit_url": "https://github.com/wagtail/wagtail/commit/ab78d9ae60319baef102e2f8056a74d6349ae004",
        "files": [
          "wagtail/contrib/settings/tests/generic/test_admin.py",
          "wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "wagtail/contrib/settings/views.py",
          "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
          "wagtail/test/testapp/models.py"
        ],
        "message": "Pass user to settings form to enable permissions checks",
        "before_after_code_files": [
          "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
          "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "wagtail/contrib/settings/views.py||wagtail/contrib/settings/views.py",
          "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
          "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
            "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py",
            "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
            "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py"
          ],
          "candidate": [
            "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
            "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py",
            "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
            "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py"
          ]
        }
      },
      "candidate_diff": {
        "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py": [
          "File: wagtail/contrib/settings/tests/generic/test_admin.py -> wagtail/contrib/settings/tests/generic/test_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     PanelGenericSettings,",
          "15:     TabbedGenericSettings,",
          "16:     TestGenericSetting,",
          "17: )",
          "18: from wagtail.test.utils import WagtailTestUtils",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:     TestPermissionedGenericSetting,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:         self.test_setting.title = \"Setting title\"",
          "115:         self.test_setting.save()",
          "119:     def test_get_edit(self):",
          "120:         response = self.get()",
          "",
          "[Removed Lines]",
          "117:         self.login()",
          "",
          "[Added Lines]",
          "118:         self.user = self.login()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153:             expected_url=f\"{url}{TestGenericSetting.objects.first().pk}/\",",
          "154:         )",
          "157: class TestAdminPermission(WagtailTestUtils, TestCase):",
          "158:     def test_registered_permission(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:     def test_permission_restricted_field(self):",
          "158:         test_setting = TestPermissionedGenericSetting()",
          "159:         test_setting.sensitive_email = \"test@example.com\"",
          "160:         test_setting.save()",
          "161:         self.user.user_permissions.add(",
          "162:             Permission.objects.get(",
          "163:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "164:             )",
          "165:         )",
          "167:         self.assertTrue(self.user.is_superuser)",
          "168:         response = self.get(setting=TestPermissionedGenericSetting)",
          "169:         self.assertEqual(response.status_code, 200)",
          "170:         self.assertIn(\"sensitive_email\", response.context[\"form\"].fields)",
          "172:         self.user.is_superuser = False",
          "173:         self.user.save()",
          "175:         self.assertFalse(self.user.is_superuser)",
          "176:         response = self.get(setting=TestPermissionedGenericSetting)",
          "177:         self.assertEqual(response.status_code, 200)",
          "178:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "180:         self.user.user_permissions.add(",
          "181:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")",
          "182:         )",
          "184:         response = self.get(setting=TestPermissionedGenericSetting)",
          "185:         self.assertEqual(response.status_code, 200)",
          "186:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "",
          "---------------"
        ],
        "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py": [
          "File: wagtail/contrib/settings/tests/site_specific/test_admin.py -> wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     IconSiteSetting,",
          "15:     PanelSiteSettings,",
          "16:     TabbedSiteSettings,",
          "17:     TestSiteSetting,",
          "18: )",
          "19: from wagtail.test.utils import WagtailTestUtils",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:     TestPermissionedSiteSetting,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107: class TestSiteSettingEditView(BaseTestSiteSettingView):",
          "108:     def setUp(self):",
          "111:         self.test_setting = TestSiteSetting()",
          "112:         self.test_setting.title = \"Site title\"",
          "113:         self.test_setting.email = \"initial@example.com\"",
          "115:         self.test_setting.save()",
          "119:     def test_get_edit(self):",
          "120:         response = self.get()",
          "",
          "[Removed Lines]",
          "109:         default_site = Site.objects.get(is_default_site=True)",
          "114:         self.test_setting.site = default_site",
          "117:         self.login()",
          "",
          "[Added Lines]",
          "110:         self.default_site = Site.objects.get(is_default_site=True)",
          "115:         self.test_setting.site = self.default_site",
          "118:         self.user = self.login()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:         response = self.client.get(url)",
          "159:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "162: @override_settings(",
          "163:     ALLOWED_HOSTS=[\"testserver\", \"example.com\", \"noneoftheabove.example.com\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:     def test_permission_restricted_field(self):",
          "163:         test_setting = TestPermissionedSiteSetting()",
          "164:         test_setting.sensitive_email = \"test@example.com\"",
          "165:         test_setting.site = self.default_site",
          "166:         test_setting.save()",
          "167:         self.user.user_permissions.add(",
          "168:             Permission.objects.get(",
          "169:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "170:             )",
          "171:         )",
          "173:         self.assertTrue(self.user.is_superuser)",
          "174:         response = self.get(setting=TestPermissionedSiteSetting)",
          "175:         self.assertEqual(response.status_code, 200)",
          "176:         self.assertIn(\"sensitive_email\", response.context[\"form\"].fields)",
          "178:         self.user.is_superuser = False",
          "179:         self.user.save()",
          "181:         self.assertFalse(self.user.is_superuser)",
          "182:         response = self.get(setting=TestPermissionedSiteSetting)",
          "183:         self.assertEqual(response.status_code, 200)",
          "184:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "186:         self.user.user_permissions.add(",
          "187:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")",
          "188:         )",
          "190:         response = self.get(setting=TestPermissionedSiteSetting)",
          "191:         self.assertEqual(response.status_code, 200)",
          "192:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "",
          "---------------"
        ],
        "wagtail/contrib/settings/views.py||wagtail/contrib/settings/views.py": [
          "File: wagtail/contrib/settings/views.py -> wagtail/contrib/settings/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     def get_form_class(self):",
          "102:         return get_setting_edit_handler(self.model).get_form_class()",
          "104:     def get_edit_url(self):",
          "105:         return reverse(",
          "106:             \"wagtailsettings:edit\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     def get_form_kwargs(self):",
          "105:         # Pass the current user, which is needed for permission-restricted fields",
          "106:         return {**super().get_form_kwargs(), \"for_user\": self.request.user}",
          "",
          "---------------"
        ],
        "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py": [
          "File: wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py -> wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Generated by Django 4.2.11 on 2024-04-23 13:53",
          "3: from django.db import migrations, models",
          "4: import django.db.models.deletion",
          "7: class Migration(migrations.Migration):",
          "9:     dependencies = [",
          "10:         (\"wagtailcore\", \"0091_remove_revision_submitted_for_moderation\"),",
          "11:         (\"tests\", \"0033_customcopyformpage\"),",
          "12:     ]",
          "14:     operations = [",
          "15:         migrations.CreateModel(",
          "16:             name=\"TestPermissionedGenericSetting\",",
          "17:             fields=[",
          "18:                 (",
          "19:                     \"id\",",
          "20:                     models.AutoField(",
          "21:                         auto_created=True,",
          "22:                         primary_key=True,",
          "23:                         serialize=False,",
          "24:                         verbose_name=\"ID\",",
          "25:                     ),",
          "26:                 ),",
          "27:                 (\"title\", models.CharField(max_length=100)),",
          "28:                 (\"sensitive_email\", models.EmailField(max_length=50)),",
          "29:             ],",
          "30:             options={",
          "31:                 \"permissions\": [",
          "32:                     (",
          "33:                         \"can_edit_sensitive_email_generic_setting\",",
          "34:                         \"Can edit sensitive email generic setting.\",",
          "35:                     )",
          "36:                 ],",
          "37:             },",
          "38:         ),",
          "39:         migrations.CreateModel(",
          "40:             name=\"TestPermissionedSiteSetting\",",
          "41:             fields=[",
          "42:                 (",
          "43:                     \"id\",",
          "44:                     models.AutoField(",
          "45:                         auto_created=True,",
          "46:                         primary_key=True,",
          "47:                         serialize=False,",
          "48:                         verbose_name=\"ID\",",
          "49:                     ),",
          "50:                 ),",
          "51:                 (\"title\", models.CharField(max_length=100)),",
          "52:                 (\"sensitive_email\", models.EmailField(max_length=50)),",
          "53:                 (",
          "54:                     \"site\",",
          "55:                     models.OneToOneField(",
          "56:                         editable=False,",
          "57:                         on_delete=django.db.models.deletion.CASCADE,",
          "58:                         to=\"wagtailcore.site\",",
          "59:                     ),",
          "60:                 ),",
          "61:             ],",
          "62:             options={",
          "63:                 \"permissions\": [",
          "64:                     (",
          "65:                         \"can_edit_sensitive_email_site_setting\",",
          "66:                         \"Can edit sensitive email site setting.\",",
          "67:                     )",
          "68:                 ],",
          "69:             },",
          "70:         ),",
          "71:     ]",
          "",
          "---------------"
        ],
        "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py": [
          "File: wagtail/test/testapp/models.py -> wagtail/test/testapp/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1640:     email = models.EmailField(max_length=50)",
          "1643: @register_setting",
          "1644: class ImportantPagesSiteSetting(BaseSiteSetting):",
          "1645:     sign_up_page = models.ForeignKey(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1643: @register_setting",
          "1644: class TestPermissionedGenericSetting(BaseGenericSetting):",
          "1645:     title = models.CharField(max_length=100)",
          "1646:     sensitive_email = models.EmailField(max_length=50)",
          "1648:     panels = [",
          "1649:         FieldPanel(\"title\"),",
          "1650:         FieldPanel(",
          "1651:             \"sensitive_email\",",
          "1652:             permission=\"tests.can_edit_sensitive_email_generic_setting\",",
          "1653:         ),",
          "1654:     ]",
          "1656:     class Meta:",
          "1657:         permissions = [",
          "1658:             (",
          "1659:                 \"can_edit_sensitive_email_generic_setting\",",
          "1660:                 \"Can edit sensitive email generic setting.\",",
          "1661:             ),",
          "1662:         ]",
          "1665: @register_setting",
          "1666: class TestPermissionedSiteSetting(BaseSiteSetting):",
          "1667:     title = models.CharField(max_length=100)",
          "1668:     sensitive_email = models.EmailField(max_length=50)",
          "1670:     panels = [",
          "1671:         FieldPanel(\"title\"),",
          "1672:         FieldPanel(",
          "1673:             \"sensitive_email\", permission=\"tests.can_edit_sensitive_email_site_setting\"",
          "1674:         ),",
          "1675:     ]",
          "1677:     class Meta:",
          "1678:         permissions = [",
          "1679:             (",
          "1680:                 \"can_edit_sensitive_email_site_setting\",",
          "1681:                 \"Can edit sensitive email site setting.\",",
          "1682:             ),",
          "1683:         ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5e068e6a64bec98d7670c00f39d92fe3a3d22db",
      "candidate_info": {
        "commit_hash": "b5e068e6a64bec98d7670c00f39d92fe3a3d22db",
        "repo": "wagtail/wagtail",
        "commit_url": "https://github.com/wagtail/wagtail/commit/b5e068e6a64bec98d7670c00f39d92fe3a3d22db",
        "files": [
          "wagtail/admin/tests/viewsets/test_model_viewset.py",
          "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
          "wagtail/test/testapp/models.py",
          "wagtail/test/testapp/views.py"
        ],
        "message": "Test field permissions on ModelViewTest",
        "before_after_code_files": [
          "wagtail/admin/tests/viewsets/test_model_viewset.py||wagtail/admin/tests/viewsets/test_model_viewset.py",
          "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
          "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py",
          "wagtail/test/testapp/views.py||wagtail/test/testapp/views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wagtail/admin/tests/viewsets/test_model_viewset.py||wagtail/admin/tests/viewsets/test_model_viewset.py",
            "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
            "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py",
            "wagtail/test/testapp/views.py||wagtail/test/testapp/views.py"
          ],
          "candidate": [
            "wagtail/admin/tests/viewsets/test_model_viewset.py||wagtail/admin/tests/viewsets/test_model_viewset.py",
            "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
            "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py",
            "wagtail/test/testapp/views.py||wagtail/test/testapp/views.py"
          ]
        }
      },
      "candidate_diff": {
        "wagtail/admin/tests/viewsets/test_model_viewset.py||wagtail/admin/tests/viewsets/test_model_viewset.py": [
          "File: wagtail/admin/tests/viewsets/test_model_viewset.py -> wagtail/admin/tests/viewsets/test_model_viewset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1470:         modal_workflow_script = soup.select_one(f'script[src=\"{modal_workflow_js}\"]')",
          "1471:         self.assertIsNotNone(modal_workflow_script)",
          "1474: class TestDefaultMessages(WagtailTestUtils, TestCase):",
          "1475:     def setUp(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1473:     def test_field_permissions(self):",
          "1474:         self.user.is_superuser = False",
          "1475:         self.user.save()",
          "1476:         self.user.user_permissions.add(",
          "1477:             Permission.objects.get(",
          "1478:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "1479:             ),",
          "1480:             Permission.objects.get(",
          "1481:                 content_type__app_label=self.object._meta.app_label,",
          "1482:                 codename=get_permission_codename(\"change\", self.object._meta),",
          "1483:             ),",
          "1484:         )",
          "1486:         response = self.client.get(self.url)",
          "1487:         self.assertEqual(response.status_code, 200)",
          "1488:         self.assertEqual(list(response.context[\"form\"].fields), [\"name\"])",
          "1490:         self.user.user_permissions.add(",
          "1491:             Permission.objects.get(",
          "1492:                 codename=\"can_set_release_date\",",
          "1493:             )",
          "1494:         )",
          "1496:         response = self.client.get(self.url)",
          "1497:         self.assertEqual(response.status_code, 200)",
          "1498:         self.assertEqual(",
          "1499:             list(response.context[\"form\"].fields), [\"name\", \"release_date\"]",
          "1500:         )",
          "",
          "---------------"
        ],
        "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py||wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py": [
          "File: wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py -> wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from django.db import migrations, models",
          "4: import django.db.models.deletion",
          "",
          "[Removed Lines]",
          "1: # Generated by Django 4.2.11 on 2024-04-23 13:53",
          "",
          "[Added Lines]",
          "1: # Generated by Django 4.2.11 on 2024-04-25 15:51",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7: class Migration(migrations.Migration):",
          "9:     dependencies = [",
          "12:     ]",
          "14:     operations = [",
          "15:         migrations.CreateModel(",
          "17:             fields=[",
          "29:             ],",
          "30:             options={",
          "37:             },",
          "38:         ),",
          "39:         migrations.CreateModel(",
          "41:             fields=[",
          "61:             ],",
          "62:             options={",
          "69:             },",
          "70:         ),",
          "71:     ]",
          "",
          "[Removed Lines]",
          "10:         (\"wagtailcore\", \"0091_remove_revision_submitted_for_moderation\"),",
          "11:         (\"tests\", \"0033_customcopyformpage\"),",
          "16:             name=\"TestPermissionedGenericSetting\",",
          "18:                 (",
          "19:                     \"id\",",
          "20:                     models.AutoField(",
          "21:                         auto_created=True,",
          "22:                         primary_key=True,",
          "23:                         serialize=False,",
          "24:                         verbose_name=\"ID\",",
          "25:                     ),",
          "26:                 ),",
          "27:                 (\"title\", models.CharField(max_length=100)),",
          "28:                 (\"sensitive_email\", models.EmailField(max_length=50)),",
          "31:                 \"permissions\": [",
          "32:                     (",
          "33:                         \"can_edit_sensitive_email_generic_setting\",",
          "34:                         \"Can edit sensitive email generic setting.\",",
          "35:                     )",
          "36:                 ],",
          "40:             name=\"TestPermissionedSiteSetting\",",
          "42:                 (",
          "43:                     \"id\",",
          "44:                     models.AutoField(",
          "45:                         auto_created=True,",
          "46:                         primary_key=True,",
          "47:                         serialize=False,",
          "48:                         verbose_name=\"ID\",",
          "49:                     ),",
          "50:                 ),",
          "51:                 (\"title\", models.CharField(max_length=100)),",
          "52:                 (\"sensitive_email\", models.EmailField(max_length=50)),",
          "53:                 (",
          "54:                     \"site\",",
          "55:                     models.OneToOneField(",
          "56:                         editable=False,",
          "57:                         on_delete=django.db.models.deletion.CASCADE,",
          "58:                         to=\"wagtailcore.site\",",
          "59:                     ),",
          "60:                 ),",
          "63:                 \"permissions\": [",
          "64:                     (",
          "65:                         \"can_edit_sensitive_email_site_setting\",",
          "66:                         \"Can edit sensitive email site setting.\",",
          "67:                     )",
          "68:                 ],",
          "",
          "[Added Lines]",
          "10:         ('wagtailcore', '0091_remove_revision_submitted_for_moderation'),",
          "11:         ('tests', '0033_customcopyformpage'),",
          "16:             name='TestPermissionedGenericSetting',",
          "18:                 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
          "19:                 ('title', models.CharField(max_length=100)),",
          "20:                 ('sensitive_email', models.EmailField(max_length=50)),",
          "23:                 'permissions': [('can_edit_sensitive_email_generic_setting', 'Can edit sensitive email generic setting.')],",
          "26:         migrations.AlterModelOptions(",
          "27:             name='featurecompletetoy',",
          "28:             options={'permissions': [('can_set_release_date', 'Can set release date')]},",
          "29:         ),",
          "31:             name='TestPermissionedSiteSetting',",
          "33:                 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
          "34:                 ('title', models.CharField(max_length=100)),",
          "35:                 ('sensitive_email', models.EmailField(max_length=50)),",
          "36:                 ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),",
          "39:                 'permissions': [('can_edit_sensitive_email_site_setting', 'Can edit sensitive email site setting.')],",
          "",
          "---------------"
        ],
        "wagtail/test/testapp/models.py||wagtail/test/testapp/models.py": [
          "File: wagtail/test/testapp/models.py -> wagtail/test/testapp/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2272:     def __str__(self):",
          "2273:         return f\"{self.name} ({self.release_date})\"",
          "2276: class PurgeRevisionsProtectedTestModel(models.Model):",
          "2277:     revision = models.OneToOneField(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2275:     class Meta:",
          "2276:         permissions = [(\"can_set_release_date\", \"Can set release date\")]",
          "",
          "---------------"
        ],
        "wagtail/test/testapp/views.py||wagtail/test/testapp/views.py": [
          "File: wagtail/test/testapp/views.py -> wagtail/test/testapp/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     panels = [",
          "229:         FieldPanel(\"name\"),",
          "231:     ]",
          "",
          "[Removed Lines]",
          "230:         FieldPanel(\"release_date\"),",
          "",
          "[Added Lines]",
          "230:         FieldPanel(\"release_date\", permission=\"tests.can_set_release_date\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "284f75a6f91f7ab18cc304d7d34f33b559ae37b1",
      "candidate_info": {
        "commit_hash": "284f75a6f91f7ab18cc304d7d34f33b559ae37b1",
        "repo": "wagtail/wagtail",
        "commit_url": "https://github.com/wagtail/wagtail/commit/284f75a6f91f7ab18cc304d7d34f33b559ae37b1",
        "files": [
          "wagtail/contrib/settings/tests/generic/test_admin.py",
          "wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "wagtail/contrib/settings/views.py"
        ],
        "message": "Restore permission check on settings EditView",
        "before_after_code_files": [
          "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
          "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "wagtail/contrib/settings/views.py||wagtail/contrib/settings/views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
            "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py"
          ],
          "candidate": [
            "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
            "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py"
          ]
        }
      },
      "candidate_diff": {
        "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py": [
          "File: wagtail/contrib/settings/tests/generic/test_admin.py -> wagtail/contrib/settings/tests/generic/test_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: class TestGenericSettingCreateView(BaseTestGenericSettingView):",
          "78:     def setUp(self):",
          "79:         self.user = self.login()",
          "86:     def test_get_edit(self):",
          "87:         response = self.get()",
          "",
          "[Removed Lines]",
          "80:         self.user.user_permissions.add(",
          "81:             Permission.objects.get(",
          "82:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "83:             )",
          "84:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:         # Ensure the form supports file uploads",
          "114:         self.assertContains(response, 'enctype=\"multipart/form-data\"')",
          "117:         self.user.is_superuser = False",
          "118:         self.user.save()",
          "120:         self.assertFalse(TestPermissionedGenericSetting.objects.exists())",
          "121:         response = self.post(",
          "122:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "123:             setting=TestPermissionedGenericSetting,",
          "",
          "[Removed Lines]",
          "116:     def test_create_restricted_field_without_permission(self):",
          "",
          "[Added Lines]",
          "111:     def test_create_restricted_field_without_any_permission(self):",
          "112:         # User has no permissions over the setting model, only access to the admin",
          "115:         self.user.user_permissions.add(",
          "116:             Permission.objects.get(",
          "117:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "118:             ),",
          "119:         )",
          "122:         # GET should redirect away with permission denied",
          "123:         response = self.get(setting=TestPermissionedGenericSetting)",
          "124:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "126:         # the GET might create a setting object, depending on when the permission check is done,",
          "127:         # so remove any created objects prior to testing the POST",
          "128:         TestPermissionedGenericSetting.objects.all().delete()",
          "130:         # POST should redirect away with permission denied",
          "131:         response = self.post(",
          "132:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "133:             setting=TestPermissionedGenericSetting,",
          "134:         )",
          "135:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "137:         # The retrieved setting should contain none of the submitted data",
          "138:         setting = TestPermissionedGenericSetting.load()",
          "139:         self.assertEqual(setting.title, \"\")",
          "140:         self.assertEqual(setting.sensitive_email, \"\")",
          "142:     def test_create_restricted_field_without_field_permission(self):",
          "143:         # User has edit permission over the setting model, but not the sensitive_email field",
          "144:         self.user.is_superuser = False",
          "145:         self.user.save()",
          "146:         self.user.user_permissions.add(",
          "147:             Permission.objects.get(",
          "148:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "149:             ),",
          "150:             Permission.objects.get(",
          "151:                 content_type__app_label=\"tests\",",
          "152:                 codename=\"change_testpermissionedgenericsetting\",",
          "153:             ),",
          "154:         )",
          "156:         self.assertFalse(TestPermissionedGenericSetting.objects.exists())",
          "157:         # GET should provide a form with title but not sensitive_email",
          "158:         response = self.get(setting=TestPermissionedGenericSetting)",
          "159:         self.assertEqual(response.status_code, 200)",
          "160:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "161:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "163:         # the GET creates a setting object, so remove any created objects prior to testing the POST",
          "164:         TestPermissionedGenericSetting.objects.all().delete()",
          "166:         # POST should allow the title to be set, but not the sensitive_email",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:         self.assertEqual(settings.sensitive_email, \"\")",
          "131:     def test_create_restricted_field(self):",
          "132:         self.user.is_superuser = False",
          "133:         self.user.save()",
          "134:         self.user.user_permissions.add(",
          "136:         )",
          "137:         self.assertFalse(TestPermissionedGenericSetting.objects.exists())",
          "138:         response = self.post(",
          "139:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "",
          "[Removed Lines]",
          "135:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")",
          "",
          "[Added Lines]",
          "178:         # User has edit permission over the setting model, including the sensitive_email field",
          "182:             Permission.objects.get(",
          "183:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "184:             ),",
          "185:             Permission.objects.get(",
          "186:                 content_type__app_label=\"tests\",",
          "187:                 codename=\"change_testpermissionedgenericsetting\",",
          "188:             ),",
          "189:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\"),",
          "192:         self.assertFalse(TestPermissionedGenericSetting.objects.exists())",
          "193:         # GET should provide a form with title and sensitive_email",
          "194:         response = self.get(setting=TestPermissionedGenericSetting)",
          "195:         self.assertEqual(response.status_code, 200)",
          "196:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "197:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "199:         # the GET creates a setting object, so remove any created objects prior to testing the POST",
          "200:         TestPermissionedGenericSetting.objects.all().delete()",
          "202:         # POST should allow both title and sensitive_email to be set",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:         self.test_setting.save()",
          "155:         self.user = self.login()",
          "162:     def test_get_edit(self):",
          "163:         response = self.get()",
          "",
          "[Removed Lines]",
          "156:         self.user.user_permissions.add(",
          "157:             Permission.objects.get(",
          "158:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "159:             )",
          "160:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "206:         )",
          "208:     def test_edit_restricted_field(self):",
          "209:         test_setting = TestPermissionedGenericSetting()",
          "210:         test_setting.sensitive_email = \"test@example.com\"",
          "211:         test_setting.save()",
          "212:         self.user.is_superuser = False",
          "213:         self.user.save()",
          "215:         self.user.user_permissions.add(",
          "217:         )",
          "219:         response = self.get(setting=TestPermissionedGenericSetting)",
          "220:         self.assertEqual(response.status_code, 200)",
          "221:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "223:         response = self.post(",
          "224:             setting=TestPermissionedGenericSetting,",
          "226:         )",
          "227:         self.assertEqual(response.status_code, 302)",
          "229:         test_setting.refresh_from_db()",
          "230:         self.assertEqual(test_setting.sensitive_email, \"test-updated@example.com\")",
          "233:         test_setting = TestPermissionedGenericSetting()",
          "234:         test_setting.sensitive_email = \"test@example.com\"",
          "235:         test_setting.save()",
          "236:         self.user.is_superuser = False",
          "237:         self.user.save()",
          "239:         response = self.get(setting=TestPermissionedGenericSetting)",
          "240:         self.assertEqual(response.status_code, 200)",
          "241:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "243:         response = self.post(",
          "244:             setting=TestPermissionedGenericSetting,",
          "246:         )",
          "247:         self.assertEqual(response.status_code, 302)",
          "249:         test_setting.refresh_from_db()",
          "250:         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")",
          "253: class TestAdminPermission(WagtailTestUtils, TestCase):",
          "",
          "[Removed Lines]",
          "216:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")",
          "225:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
          "232:     def test_edit_restricted_field_without_permission(self):",
          "245:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
          "",
          "[Added Lines]",
          "270:         # User has edit permission over the setting model, including the sensitive_email field",
          "273:         test_setting.title = \"Old title\"",
          "279:             Permission.objects.get(",
          "280:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "281:             ),",
          "282:             Permission.objects.get(",
          "283:                 content_type__app_label=\"tests\",",
          "284:                 codename=\"change_testpermissionedgenericsetting\",",
          "285:             ),",
          "286:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\"),",
          "289:         # GET should provide a form with title and sensitive_email",
          "292:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "295:         # POST should allow both title and sensitive_email to be set",
          "298:             post_data={",
          "299:                 \"sensitive_email\": \"test-updated@example.com\",",
          "300:                 \"title\": \"New title\",",
          "301:             },",
          "307:         self.assertEqual(test_setting.title, \"New title\")",
          "309:     def test_edit_restricted_field_without_field_permission(self):",
          "310:         # User has edit permission over the setting model, but not the sensitive_email field",
          "313:         test_setting.title = \"Old title\"",
          "317:         self.user.user_permissions.add(",
          "318:             Permission.objects.get(",
          "319:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "320:             ),",
          "321:             Permission.objects.get(",
          "322:                 content_type__app_label=\"tests\",",
          "323:                 codename=\"change_testpermissionedgenericsetting\",",
          "324:             ),",
          "325:         )",
          "327:         # GET should provide a form with title but not sensitive_email",
          "330:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "333:         # POST should allow the title to be set, but not the sensitive_email",
          "336:             post_data={",
          "337:                 \"sensitive_email\": \"test-updated@example.com\",",
          "338:                 \"title\": \"New title\",",
          "339:             },",
          "345:         self.assertEqual(test_setting.title, \"New title\")",
          "347:     def test_edit_restricted_field_without_any_permission(self):",
          "348:         # User has no permissions over the setting model, only access to the admin",
          "349:         test_setting = TestPermissionedGenericSetting()",
          "350:         test_setting.sensitive_email = \"test@example.com\"",
          "351:         test_setting.title = \"Old title\"",
          "352:         test_setting.save()",
          "353:         self.user.is_superuser = False",
          "354:         self.user.save()",
          "355:         self.user.user_permissions.add(",
          "356:             Permission.objects.get(",
          "357:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "358:             ),",
          "359:         )",
          "361:         # GET should redirect away with permission denied",
          "362:         response = self.get(setting=TestPermissionedGenericSetting)",
          "363:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "365:         # POST should redirect away with permission denied",
          "366:         response = self.post(",
          "367:             setting=TestPermissionedGenericSetting,",
          "368:             post_data={",
          "369:                 \"sensitive_email\": \"test-updated@example.com\",",
          "370:                 \"title\": \"new title\",",
          "371:             },",
          "372:         )",
          "373:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "375:         # The retrieved setting should be unchanged",
          "376:         test_setting.refresh_from_db()",
          "377:         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")",
          "378:         self.assertEqual(test_setting.title, \"Old title\")",
          "",
          "---------------"
        ],
        "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py": [
          "File: wagtail/contrib/settings/tests/site_specific/test_admin.py -> wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: class TestSiteSettingCreateView(BaseTestSiteSettingView):",
          "74:     def setUp(self):",
          "75:         self.user = self.login()",
          "82:     def test_get_edit(self):",
          "83:         response = self.get()",
          "",
          "[Removed Lines]",
          "76:         self.user.user_permissions.add(",
          "77:             Permission.objects.get(",
          "78:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "79:             )",
          "80:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         # Ensure the form supports file uploads",
          "110:         self.assertContains(response, 'enctype=\"multipart/form-data\"')",
          "113:         self.user.is_superuser = False",
          "114:         self.user.save()",
          "116:         self.assertFalse(TestPermissionedSiteSetting.objects.exists())",
          "117:         response = self.post(",
          "118:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "119:             setting=TestPermissionedSiteSetting,",
          "",
          "[Removed Lines]",
          "112:     def test_create_restricted_field_without_permission(self):",
          "",
          "[Added Lines]",
          "107:     def test_create_restricted_field_without_any_permission(self):",
          "108:         # User has no permissions over the setting model, only access to the admin",
          "109:         self.user.is_superuser = False",
          "110:         self.user.save()",
          "111:         self.user.user_permissions.add(",
          "112:             Permission.objects.get(",
          "113:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "114:             ),",
          "115:         )",
          "117:         self.assertFalse(TestPermissionedSiteSetting.objects.exists())",
          "118:         # GET should redirect away with permission denied",
          "119:         response = self.get(setting=TestPermissionedSiteSetting)",
          "120:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "122:         # the GET might create a setting object, depending on when the permission check is done,",
          "123:         # so remove any created objects prior to testing the POST",
          "125:         # POST should redirect away with permission denied",
          "126:         response = self.post(",
          "127:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "128:             setting=TestPermissionedSiteSetting,",
          "129:         )",
          "130:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "132:         # The retrieved setting should contain none of the submitted data",
          "133:         settings = TestPermissionedSiteSetting.for_site(Site.objects.get(pk=1))",
          "134:         self.assertEqual(settings.title, \"\")",
          "135:         self.assertEqual(settings.sensitive_email, \"\")",
          "137:     def test_create_restricted_field_without_field_permission(self):",
          "138:         # User has edit permission over the setting model, but not the sensitive_email field",
          "141:         self.user.user_permissions.add(",
          "142:             Permission.objects.get(",
          "143:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "144:             ),",
          "145:             Permission.objects.get(",
          "146:                 content_type__app_label=\"tests\",",
          "147:                 codename=\"change_testpermissionedsitesetting\",",
          "148:             ),",
          "149:         )",
          "152:         # GET should provide a form with title but not sensitive_email",
          "153:         response = self.get(setting=TestPermissionedSiteSetting)",
          "154:         self.assertEqual(response.status_code, 200)",
          "155:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "156:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "158:         # the GET creates a setting object, so remove any created objects prior to testing the POST",
          "159:         TestPermissionedSiteSetting.objects.all().delete()",
          "161:         # POST should allow the title to be set, but not the sensitive_email",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:         self.assertEqual(settings.sensitive_email, \"\")",
          "127:     def test_create_restricted_field(self):",
          "128:         self.user.is_superuser = False",
          "129:         self.user.save()",
          "130:         self.user.user_permissions.add(",
          "132:         )",
          "133:         self.assertFalse(TestPermissionedSiteSetting.objects.exists())",
          "134:         response = self.post(",
          "135:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "136:             setting=TestPermissionedSiteSetting,",
          "",
          "[Removed Lines]",
          "131:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")",
          "",
          "[Added Lines]",
          "173:         # User has edit permission over the setting model, including the sensitive_email field",
          "177:             Permission.objects.get(",
          "178:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "179:             ),",
          "180:             Permission.objects.get(",
          "181:                 content_type__app_label=\"tests\",",
          "182:                 codename=\"change_testpermissionedsitesetting\",",
          "183:             ),",
          "184:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\"),",
          "187:         # GET should provide a form with title and sensitive_email",
          "188:         response = self.get(setting=TestPermissionedSiteSetting)",
          "189:         self.assertEqual(response.status_code, 200)",
          "190:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "191:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "193:         # the GET creates a setting object, so remove any created objects prior to testing the POST",
          "194:         TestPermissionedSiteSetting.objects.all().delete()",
          "196:         # POST should allow both title and sensitive_email to be set",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:         self.test_setting.save()",
          "155:         self.user = self.login()",
          "162:     def test_get_edit(self):",
          "163:         response = self.get()",
          "",
          "[Removed Lines]",
          "156:         self.user.user_permissions.add(",
          "157:             Permission.objects.get(",
          "158:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "159:             )",
          "160:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "211:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "213:     def test_edit_restricted_field(self):",
          "214:         test_setting = TestPermissionedSiteSetting()",
          "215:         test_setting.sensitive_email = \"test@example.com\"",
          "216:         test_setting.site = self.default_site",
          "217:         test_setting.save()",
          "218:         self.user.is_superuser = False",
          "219:         self.user.save()",
          "221:         self.user.user_permissions.add(",
          "223:         )",
          "225:         response = self.get(setting=TestPermissionedSiteSetting)",
          "226:         self.assertEqual(response.status_code, 200)",
          "227:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "229:         response = self.post(",
          "230:             setting=TestPermissionedSiteSetting,",
          "232:         )",
          "233:         self.assertEqual(response.status_code, 302)",
          "235:         test_setting.refresh_from_db()",
          "236:         self.assertEqual(test_setting.sensitive_email, \"test-updated@example.com\")",
          "239:         test_setting = TestPermissionedSiteSetting()",
          "240:         test_setting.sensitive_email = \"test@example.com\"",
          "241:         test_setting.site = self.default_site",
          "242:         test_setting.save()",
          "243:         self.user.is_superuser = False",
          "244:         self.user.save()",
          "246:         response = self.get(setting=TestPermissionedSiteSetting)",
          "247:         self.assertEqual(response.status_code, 200)",
          "248:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "250:         response = self.post(",
          "251:             setting=TestPermissionedSiteSetting,",
          "253:         )",
          "254:         self.assertEqual(response.status_code, 302)",
          "256:         test_setting.refresh_from_db()",
          "257:         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")",
          "260: @override_settings(",
          "",
          "[Removed Lines]",
          "222:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")",
          "231:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
          "238:     def test_edit_restricted_field_without_permission(self):",
          "252:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
          "",
          "[Added Lines]",
          "272:         # User has edit permission over the setting model, including the sensitive_email field",
          "274:         test_setting.title = \"Old title\"",
          "281:             Permission.objects.get(",
          "282:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "283:             ),",
          "284:             Permission.objects.get(",
          "285:                 content_type__app_label=\"tests\",",
          "286:                 codename=\"change_testpermissionedsitesetting\",",
          "287:             ),",
          "288:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\"),",
          "291:         # GET should provide a form with title and sensitive_email",
          "294:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "297:         # POST should allow both title and sensitive_email to be set",
          "300:             post_data={",
          "301:                 \"sensitive_email\": \"test-updated@example.com\",",
          "302:                 \"title\": \"New title\",",
          "303:             },",
          "309:         self.assertEqual(test_setting.title, \"New title\")",
          "311:     def test_edit_restricted_field_without_field_permission(self):",
          "312:         # User has edit permission over the setting model, but not the sensitive_email field",
          "314:         test_setting.title = \"Old title\"",
          "320:         self.user.user_permissions.add(",
          "321:             Permission.objects.get(",
          "322:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "323:             ),",
          "324:             Permission.objects.get(",
          "325:                 content_type__app_label=\"tests\",",
          "326:                 codename=\"change_testpermissionedsitesetting\",",
          "327:             ),",
          "328:         )",
          "330:         # GET should provide a form with title but not sensitive_email",
          "333:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "336:         # POST should allow the title to be set, but not the sensitive_email",
          "339:             post_data={",
          "340:                 \"sensitive_email\": \"test-updated@example.com\",",
          "341:                 \"title\": \"New title\",",
          "342:             },",
          "348:         self.assertEqual(test_setting.title, \"New title\")",
          "350:     def test_edit_restricted_field_without_any_permission(self):",
          "351:         # User has no permissions over the setting model, only access to the admin",
          "352:         test_setting = TestPermissionedSiteSetting()",
          "353:         test_setting.title = \"Old title\"",
          "354:         test_setting.sensitive_email = \"test@example.com\"",
          "355:         test_setting.site = self.default_site",
          "356:         test_setting.save()",
          "357:         self.user.is_superuser = False",
          "358:         self.user.save()",
          "359:         self.user.user_permissions.add(",
          "360:             Permission.objects.get(",
          "361:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "362:             ),",
          "363:         )",
          "365:         # GET should redirect away with permission denied",
          "366:         response = self.get(setting=TestPermissionedSiteSetting)",
          "367:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "369:         # POST should redirect away with permission denied",
          "370:         response = self.post(",
          "371:             setting=TestPermissionedSiteSetting,",
          "372:             post_data={",
          "373:                 \"sensitive_email\": \"test-updated@example.com\",",
          "374:                 \"title\": \"New title\",",
          "375:             },",
          "376:         )",
          "377:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "379:         # The retrieved setting should be unchanged",
          "380:         test_setting.refresh_from_db()",
          "381:         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")",
          "382:         self.assertEqual(test_setting.title, \"Old title\")",
          "",
          "---------------"
        ],
        "wagtail/contrib/settings/views.py||wagtail/contrib/settings/views.py": [
          "File: wagtail/contrib/settings/views.py -> wagtail/contrib/settings/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: )",
          "15: from wagtail.admin.views import generic",
          "16: from wagtail.models import Site",
          "18: from .forms import SiteSwitchForm",
          "19: from .models import BaseGenericSetting, BaseSiteSetting",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: from wagtail.permission_policies import ModelPermissionPolicy",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: class EditView(generic.EditView):",
          "82:     template_name = \"wagtailsettings/edit.html\"",
          "83:     error_message = gettext_lazy(\"The setting could not be saved due to errors.\")",
          "85:     def setup(self, request, app_name, model_name, *args, **kwargs):",
          "86:         self.app_name = app_name",
          "87:         self.model_name = model_name",
          "88:         self.model = get_model_from_url_params(app_name, model_name)",
          "89:         self.pk = kwargs.get(self.pk_url_kwarg)",
          "90:         super().setup(request, app_name, model_name, *args, **kwargs)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     permission_required = \"change\"",
          "91:         self.permission_policy = ModelPermissionPolicy(self.model)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e376d23a148c30ce86dd218106bb865e8bd2075",
      "candidate_info": {
        "commit_hash": "9e376d23a148c30ce86dd218106bb865e8bd2075",
        "repo": "wagtail/wagtail",
        "commit_url": "https://github.com/wagtail/wagtail/commit/9e376d23a148c30ce86dd218106bb865e8bd2075",
        "files": [
          "wagtail/contrib/settings/tests/generic/test_admin.py",
          "wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "wagtail/contrib/settings/views.py"
        ],
        "message": "Restore permission check on settings EditView",
        "before_after_code_files": [
          "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
          "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "wagtail/contrib/settings/views.py||wagtail/contrib/settings/views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
            "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py"
          ],
          "candidate": [
            "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py",
            "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py"
          ]
        }
      },
      "candidate_diff": {
        "wagtail/contrib/settings/tests/generic/test_admin.py||wagtail/contrib/settings/tests/generic/test_admin.py": [
          "File: wagtail/contrib/settings/tests/generic/test_admin.py -> wagtail/contrib/settings/tests/generic/test_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: class TestGenericSettingCreateView(BaseTestGenericSettingView):",
          "78:     def setUp(self):",
          "79:         self.user = self.login()",
          "86:     def test_get_edit(self):",
          "87:         response = self.get()",
          "",
          "[Removed Lines]",
          "80:         self.user.user_permissions.add(",
          "81:             Permission.objects.get(",
          "82:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "83:             )",
          "84:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:         # Ensure the form supports file uploads",
          "114:         self.assertContains(response, 'enctype=\"multipart/form-data\"')",
          "117:         self.user.is_superuser = False",
          "118:         self.user.save()",
          "120:         self.assertFalse(TestPermissionedGenericSetting.objects.exists())",
          "121:         response = self.post(",
          "122:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "123:             setting=TestPermissionedGenericSetting,",
          "",
          "[Removed Lines]",
          "116:     def test_create_restricted_field_without_permission(self):",
          "",
          "[Added Lines]",
          "111:     def test_create_restricted_field_without_any_permission(self):",
          "112:         # User has no permissions over the setting model, only access to the admin",
          "115:         self.user.user_permissions.add(",
          "116:             Permission.objects.get(",
          "117:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "118:             ),",
          "119:         )",
          "122:         # GET should redirect away with permission denied",
          "123:         response = self.get(setting=TestPermissionedGenericSetting)",
          "124:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "126:         # the GET might create a setting object, depending on when the permission check is done,",
          "127:         # so remove any created objects prior to testing the POST",
          "128:         TestPermissionedGenericSetting.objects.all().delete()",
          "130:         # POST should redirect away with permission denied",
          "131:         response = self.post(",
          "132:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "133:             setting=TestPermissionedGenericSetting,",
          "134:         )",
          "135:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "137:         # The retrieved setting should contain none of the submitted data",
          "138:         setting = TestPermissionedGenericSetting.load()",
          "139:         self.assertEqual(setting.title, \"\")",
          "140:         self.assertEqual(setting.sensitive_email, \"\")",
          "142:     def test_create_restricted_field_without_field_permission(self):",
          "143:         # User has edit permission over the setting model, but not the sensitive_email field",
          "144:         self.user.is_superuser = False",
          "145:         self.user.save()",
          "146:         self.user.user_permissions.add(",
          "147:             Permission.objects.get(",
          "148:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "149:             ),",
          "150:             Permission.objects.get(",
          "151:                 content_type__app_label=\"tests\",",
          "152:                 codename=\"change_testpermissionedgenericsetting\",",
          "153:             ),",
          "154:         )",
          "156:         self.assertFalse(TestPermissionedGenericSetting.objects.exists())",
          "157:         # GET should provide a form with title but not sensitive_email",
          "158:         response = self.get(setting=TestPermissionedGenericSetting)",
          "159:         self.assertEqual(response.status_code, 200)",
          "160:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "161:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "163:         # the GET creates a setting object, so remove any created objects prior to testing the POST",
          "164:         TestPermissionedGenericSetting.objects.all().delete()",
          "166:         # POST should allow the title to be set, but not the sensitive_email",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:         self.assertEqual(settings.sensitive_email, \"\")",
          "131:     def test_create_restricted_field(self):",
          "132:         self.user.is_superuser = False",
          "133:         self.user.save()",
          "134:         self.user.user_permissions.add(",
          "136:         )",
          "137:         self.assertFalse(TestPermissionedGenericSetting.objects.exists())",
          "138:         response = self.post(",
          "139:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "",
          "[Removed Lines]",
          "135:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")",
          "",
          "[Added Lines]",
          "178:         # User has edit permission over the setting model, including the sensitive_email field",
          "182:             Permission.objects.get(",
          "183:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "184:             ),",
          "185:             Permission.objects.get(",
          "186:                 content_type__app_label=\"tests\",",
          "187:                 codename=\"change_testpermissionedgenericsetting\",",
          "188:             ),",
          "189:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\"),",
          "192:         self.assertFalse(TestPermissionedGenericSetting.objects.exists())",
          "193:         # GET should provide a form with title and sensitive_email",
          "194:         response = self.get(setting=TestPermissionedGenericSetting)",
          "195:         self.assertEqual(response.status_code, 200)",
          "196:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "197:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "199:         # the GET creates a setting object, so remove any created objects prior to testing the POST",
          "200:         TestPermissionedGenericSetting.objects.all().delete()",
          "202:         # POST should allow both title and sensitive_email to be set",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:         self.test_setting.save()",
          "155:         self.user = self.login()",
          "162:     def test_get_edit(self):",
          "163:         response = self.get()",
          "",
          "[Removed Lines]",
          "156:         self.user.user_permissions.add(",
          "157:             Permission.objects.get(",
          "158:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "159:             )",
          "160:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "206:         )",
          "208:     def test_edit_restricted_field(self):",
          "209:         test_setting = TestPermissionedGenericSetting()",
          "210:         test_setting.sensitive_email = \"test@example.com\"",
          "211:         test_setting.save()",
          "212:         self.user.is_superuser = False",
          "213:         self.user.save()",
          "215:         self.user.user_permissions.add(",
          "217:         )",
          "219:         response = self.get(setting=TestPermissionedGenericSetting)",
          "220:         self.assertEqual(response.status_code, 200)",
          "221:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "223:         response = self.post(",
          "224:             setting=TestPermissionedGenericSetting,",
          "226:         )",
          "227:         self.assertEqual(response.status_code, 302)",
          "229:         test_setting.refresh_from_db()",
          "230:         self.assertEqual(test_setting.sensitive_email, \"test-updated@example.com\")",
          "233:         test_setting = TestPermissionedGenericSetting()",
          "234:         test_setting.sensitive_email = \"test@example.com\"",
          "235:         test_setting.save()",
          "236:         self.user.is_superuser = False",
          "237:         self.user.save()",
          "239:         response = self.get(setting=TestPermissionedGenericSetting)",
          "240:         self.assertEqual(response.status_code, 200)",
          "241:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "243:         response = self.post(",
          "244:             setting=TestPermissionedGenericSetting,",
          "246:         )",
          "247:         self.assertEqual(response.status_code, 302)",
          "249:         test_setting.refresh_from_db()",
          "250:         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")",
          "253: class TestAdminPermission(WagtailTestUtils, TestCase):",
          "",
          "[Removed Lines]",
          "216:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")",
          "225:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
          "232:     def test_edit_restricted_field_without_permission(self):",
          "245:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
          "",
          "[Added Lines]",
          "270:         # User has edit permission over the setting model, including the sensitive_email field",
          "273:         test_setting.title = \"Old title\"",
          "279:             Permission.objects.get(",
          "280:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "281:             ),",
          "282:             Permission.objects.get(",
          "283:                 content_type__app_label=\"tests\",",
          "284:                 codename=\"change_testpermissionedgenericsetting\",",
          "285:             ),",
          "286:             Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\"),",
          "289:         # GET should provide a form with title and sensitive_email",
          "292:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "295:         # POST should allow both title and sensitive_email to be set",
          "298:             post_data={",
          "299:                 \"sensitive_email\": \"test-updated@example.com\",",
          "300:                 \"title\": \"New title\",",
          "301:             },",
          "307:         self.assertEqual(test_setting.title, \"New title\")",
          "309:     def test_edit_restricted_field_without_field_permission(self):",
          "310:         # User has edit permission over the setting model, but not the sensitive_email field",
          "313:         test_setting.title = \"Old title\"",
          "317:         self.user.user_permissions.add(",
          "318:             Permission.objects.get(",
          "319:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "320:             ),",
          "321:             Permission.objects.get(",
          "322:                 content_type__app_label=\"tests\",",
          "323:                 codename=\"change_testpermissionedgenericsetting\",",
          "324:             ),",
          "325:         )",
          "327:         # GET should provide a form with title but not sensitive_email",
          "330:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "333:         # POST should allow the title to be set, but not the sensitive_email",
          "336:             post_data={",
          "337:                 \"sensitive_email\": \"test-updated@example.com\",",
          "338:                 \"title\": \"New title\",",
          "339:             },",
          "345:         self.assertEqual(test_setting.title, \"New title\")",
          "347:     def test_edit_restricted_field_without_any_permission(self):",
          "348:         # User has no permissions over the setting model, only access to the admin",
          "349:         test_setting = TestPermissionedGenericSetting()",
          "350:         test_setting.sensitive_email = \"test@example.com\"",
          "351:         test_setting.title = \"Old title\"",
          "352:         test_setting.save()",
          "353:         self.user.is_superuser = False",
          "354:         self.user.save()",
          "355:         self.user.user_permissions.add(",
          "356:             Permission.objects.get(",
          "357:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "358:             ),",
          "359:         )",
          "361:         # GET should redirect away with permission denied",
          "362:         response = self.get(setting=TestPermissionedGenericSetting)",
          "363:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "365:         # POST should redirect away with permission denied",
          "366:         response = self.post(",
          "367:             setting=TestPermissionedGenericSetting,",
          "368:             post_data={",
          "369:                 \"sensitive_email\": \"test-updated@example.com\",",
          "370:                 \"title\": \"new title\",",
          "371:             },",
          "372:         )",
          "373:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "375:         # The retrieved setting should be unchanged",
          "376:         test_setting.refresh_from_db()",
          "377:         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")",
          "378:         self.assertEqual(test_setting.title, \"Old title\")",
          "",
          "---------------"
        ],
        "wagtail/contrib/settings/tests/site_specific/test_admin.py||wagtail/contrib/settings/tests/site_specific/test_admin.py": [
          "File: wagtail/contrib/settings/tests/site_specific/test_admin.py -> wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: class TestSiteSettingCreateView(BaseTestSiteSettingView):",
          "74:     def setUp(self):",
          "75:         self.user = self.login()",
          "82:     def test_get_edit(self):",
          "83:         response = self.get()",
          "",
          "[Removed Lines]",
          "76:         self.user.user_permissions.add(",
          "77:             Permission.objects.get(",
          "78:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "79:             )",
          "80:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         # Ensure the form supports file uploads",
          "110:         self.assertContains(response, 'enctype=\"multipart/form-data\"')",
          "113:         self.user.is_superuser = False",
          "114:         self.user.save()",
          "116:         self.assertFalse(TestPermissionedSiteSetting.objects.exists())",
          "117:         response = self.post(",
          "118:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "119:             setting=TestPermissionedSiteSetting,",
          "",
          "[Removed Lines]",
          "112:     def test_create_restricted_field_without_permission(self):",
          "",
          "[Added Lines]",
          "107:     def test_create_restricted_field_without_any_permission(self):",
          "108:         # User has no permissions over the setting model, only access to the admin",
          "109:         self.user.is_superuser = False",
          "110:         self.user.save()",
          "111:         self.user.user_permissions.add(",
          "112:             Permission.objects.get(",
          "113:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "114:             ),",
          "115:         )",
          "117:         self.assertFalse(TestPermissionedSiteSetting.objects.exists())",
          "118:         # GET should redirect away with permission denied",
          "119:         response = self.get(setting=TestPermissionedSiteSetting)",
          "120:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "122:         # the GET might create a setting object, depending on when the permission check is done,",
          "123:         # so remove any created objects prior to testing the POST",
          "125:         # POST should redirect away with permission denied",
          "126:         response = self.post(",
          "127:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "128:             setting=TestPermissionedSiteSetting,",
          "129:         )",
          "130:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "132:         # The retrieved setting should contain none of the submitted data",
          "133:         settings = TestPermissionedSiteSetting.for_site(Site.objects.get(pk=1))",
          "134:         self.assertEqual(settings.title, \"\")",
          "135:         self.assertEqual(settings.sensitive_email, \"\")",
          "137:     def test_create_restricted_field_without_field_permission(self):",
          "138:         # User has edit permission over the setting model, but not the sensitive_email field",
          "141:         self.user.user_permissions.add(",
          "142:             Permission.objects.get(",
          "143:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "144:             ),",
          "145:             Permission.objects.get(",
          "146:                 content_type__app_label=\"tests\",",
          "147:                 codename=\"change_testpermissionedsitesetting\",",
          "148:             ),",
          "149:         )",
          "152:         # GET should provide a form with title but not sensitive_email",
          "153:         response = self.get(setting=TestPermissionedSiteSetting)",
          "154:         self.assertEqual(response.status_code, 200)",
          "155:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "156:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "158:         # the GET creates a setting object, so remove any created objects prior to testing the POST",
          "159:         TestPermissionedSiteSetting.objects.all().delete()",
          "161:         # POST should allow the title to be set, but not the sensitive_email",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:         self.assertEqual(settings.sensitive_email, \"\")",
          "127:     def test_create_restricted_field(self):",
          "128:         self.user.is_superuser = False",
          "129:         self.user.save()",
          "130:         self.user.user_permissions.add(",
          "132:         )",
          "133:         self.assertFalse(TestPermissionedSiteSetting.objects.exists())",
          "134:         response = self.post(",
          "135:             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},",
          "136:             setting=TestPermissionedSiteSetting,",
          "",
          "[Removed Lines]",
          "131:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")",
          "",
          "[Added Lines]",
          "173:         # User has edit permission over the setting model, including the sensitive_email field",
          "177:             Permission.objects.get(",
          "178:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "179:             ),",
          "180:             Permission.objects.get(",
          "181:                 content_type__app_label=\"tests\",",
          "182:                 codename=\"change_testpermissionedsitesetting\",",
          "183:             ),",
          "184:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\"),",
          "187:         # GET should provide a form with title and sensitive_email",
          "188:         response = self.get(setting=TestPermissionedSiteSetting)",
          "189:         self.assertEqual(response.status_code, 200)",
          "190:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "191:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "193:         # the GET creates a setting object, so remove any created objects prior to testing the POST",
          "194:         TestPermissionedSiteSetting.objects.all().delete()",
          "196:         # POST should allow both title and sensitive_email to be set",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:         self.test_setting.save()",
          "155:         self.user = self.login()",
          "162:     def test_get_edit(self):",
          "163:         response = self.get()",
          "",
          "[Removed Lines]",
          "156:         self.user.user_permissions.add(",
          "157:             Permission.objects.get(",
          "158:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "159:             )",
          "160:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "211:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "213:     def test_edit_restricted_field(self):",
          "214:         test_setting = TestPermissionedSiteSetting()",
          "215:         test_setting.sensitive_email = \"test@example.com\"",
          "216:         test_setting.site = self.default_site",
          "217:         test_setting.save()",
          "218:         self.user.is_superuser = False",
          "219:         self.user.save()",
          "221:         self.user.user_permissions.add(",
          "223:         )",
          "225:         response = self.get(setting=TestPermissionedSiteSetting)",
          "226:         self.assertEqual(response.status_code, 200)",
          "227:         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "229:         response = self.post(",
          "230:             setting=TestPermissionedSiteSetting,",
          "232:         )",
          "233:         self.assertEqual(response.status_code, 302)",
          "235:         test_setting.refresh_from_db()",
          "236:         self.assertEqual(test_setting.sensitive_email, \"test-updated@example.com\")",
          "239:         test_setting = TestPermissionedSiteSetting()",
          "240:         test_setting.sensitive_email = \"test@example.com\"",
          "241:         test_setting.site = self.default_site",
          "242:         test_setting.save()",
          "243:         self.user.is_superuser = False",
          "244:         self.user.save()",
          "246:         response = self.get(setting=TestPermissionedSiteSetting)",
          "247:         self.assertEqual(response.status_code, 200)",
          "248:         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))",
          "250:         response = self.post(",
          "251:             setting=TestPermissionedSiteSetting,",
          "253:         )",
          "254:         self.assertEqual(response.status_code, 302)",
          "256:         test_setting.refresh_from_db()",
          "257:         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")",
          "260: @override_settings(",
          "",
          "[Removed Lines]",
          "222:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")",
          "231:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
          "238:     def test_edit_restricted_field_without_permission(self):",
          "252:             post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},",
          "",
          "[Added Lines]",
          "272:         # User has edit permission over the setting model, including the sensitive_email field",
          "274:         test_setting.title = \"Old title\"",
          "281:             Permission.objects.get(",
          "282:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "283:             ),",
          "284:             Permission.objects.get(",
          "285:                 content_type__app_label=\"tests\",",
          "286:                 codename=\"change_testpermissionedsitesetting\",",
          "287:             ),",
          "288:             Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\"),",
          "291:         # GET should provide a form with title and sensitive_email",
          "294:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "297:         # POST should allow both title and sensitive_email to be set",
          "300:             post_data={",
          "301:                 \"sensitive_email\": \"test-updated@example.com\",",
          "302:                 \"title\": \"New title\",",
          "303:             },",
          "309:         self.assertEqual(test_setting.title, \"New title\")",
          "311:     def test_edit_restricted_field_without_field_permission(self):",
          "312:         # User has edit permission over the setting model, but not the sensitive_email field",
          "314:         test_setting.title = \"Old title\"",
          "320:         self.user.user_permissions.add(",
          "321:             Permission.objects.get(",
          "322:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "323:             ),",
          "324:             Permission.objects.get(",
          "325:                 content_type__app_label=\"tests\",",
          "326:                 codename=\"change_testpermissionedsitesetting\",",
          "327:             ),",
          "328:         )",
          "330:         # GET should provide a form with title but not sensitive_email",
          "333:         self.assertIn(\"title\", list(response.context[\"form\"].fields))",
          "336:         # POST should allow the title to be set, but not the sensitive_email",
          "339:             post_data={",
          "340:                 \"sensitive_email\": \"test-updated@example.com\",",
          "341:                 \"title\": \"New title\",",
          "342:             },",
          "348:         self.assertEqual(test_setting.title, \"New title\")",
          "350:     def test_edit_restricted_field_without_any_permission(self):",
          "351:         # User has no permissions over the setting model, only access to the admin",
          "352:         test_setting = TestPermissionedSiteSetting()",
          "353:         test_setting.title = \"Old title\"",
          "354:         test_setting.sensitive_email = \"test@example.com\"",
          "355:         test_setting.site = self.default_site",
          "356:         test_setting.save()",
          "357:         self.user.is_superuser = False",
          "358:         self.user.save()",
          "359:         self.user.user_permissions.add(",
          "360:             Permission.objects.get(",
          "361:                 content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"",
          "362:             ),",
          "363:         )",
          "365:         # GET should redirect away with permission denied",
          "366:         response = self.get(setting=TestPermissionedSiteSetting)",
          "367:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "369:         # POST should redirect away with permission denied",
          "370:         response = self.post(",
          "371:             setting=TestPermissionedSiteSetting,",
          "372:             post_data={",
          "373:                 \"sensitive_email\": \"test-updated@example.com\",",
          "374:                 \"title\": \"New title\",",
          "375:             },",
          "376:         )",
          "377:         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")",
          "379:         # The retrieved setting should be unchanged",
          "380:         test_setting.refresh_from_db()",
          "381:         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")",
          "382:         self.assertEqual(test_setting.title, \"Old title\")",
          "",
          "---------------"
        ],
        "wagtail/contrib/settings/views.py||wagtail/contrib/settings/views.py": [
          "File: wagtail/contrib/settings/views.py -> wagtail/contrib/settings/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: )",
          "15: from wagtail.admin.views import generic",
          "16: from wagtail.models import Site",
          "18: from .forms import SiteSwitchForm",
          "19: from .models import BaseGenericSetting, BaseSiteSetting",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: from wagtail.permission_policies import ModelPermissionPolicy",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: class EditView(generic.EditView):",
          "82:     template_name = \"wagtailsettings/edit.html\"",
          "83:     error_message = gettext_lazy(\"The setting could not be saved due to errors.\")",
          "85:     def setup(self, request, app_name, model_name, *args, **kwargs):",
          "86:         self.app_name = app_name",
          "87:         self.model_name = model_name",
          "88:         self.model = get_model_from_url_params(app_name, model_name)",
          "89:         self.pk = kwargs.get(self.pk_url_kwarg)",
          "90:         super().setup(request, app_name, model_name, *args, **kwargs)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     permission_required = \"change\"",
          "91:         self.permission_policy = ModelPermissionPolicy(self.model)",
          "",
          "---------------"
        ]
      }
    }
  ]
}