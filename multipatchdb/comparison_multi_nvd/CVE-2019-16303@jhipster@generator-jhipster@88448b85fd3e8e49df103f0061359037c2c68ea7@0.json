{
  "cve_id": "CVE-2019-16303",
  "cve_desc": "A class generated by the Generator in JHipster before 6.3.0 and JHipster Kotlin through 1.1.0 produces code that uses an insecure source of randomness (apache.commons.lang3 RandomStringUtils). This allows an attacker (if able to obtain their own password reset URL) to compute the value for all other password resets for other accounts, thus allowing privilege escalation or account takeover.",
  "repo": "jhipster/generator-jhipster",
  "patch_hash": "88448b85fd3e8e49df103f0061359037c2c68ea7",
  "patch_info": {
    "commit_hash": "88448b85fd3e8e49df103f0061359037c2c68ea7",
    "repo": "jhipster/generator-jhipster",
    "commit_url": "https://github.com/jhipster/generator-jhipster/commit/88448b85fd3e8e49df103f0061359037c2c68ea7",
    "files": [
      "generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs",
      "generators/server/templates/src/main/java/package/service/UserService.java.ejs",
      "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs",
      "generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs"
    ],
    "message": "use new SecureRandom which uses non blocking /dev/urandom",
    "before_after_code_files": [
      "generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs||generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs",
      "generators/server/templates/src/main/java/package/service/UserService.java.ejs||generators/server/templates/src/main/java/package/service/UserService.java.ejs",
      "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs",
      "generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs||generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs"
    ]
  },
  "patch_diff": {
    "generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs||generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs": [
      "File: generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs -> generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:                 log.debug(\"Refreshing persistent login token for user '{}', series '{}'\", login, token.getSeries());<% if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'couchbase') { %>",
      "128:                 token.setTokenDate(LocalDate.now());<%}%><% if (databaseType === 'cassandra') { %>",
      "129:                 token.setTokenDate(new Date());<%}%>",
      "131:                 token.setIpAddress(request.getRemoteAddr());",
      "132:                 token.setUserAgent(request.getHeader(\"User-Agent\"));",
      "133:                 try {",
      "",
      "[Removed Lines]",
      "130:                 token.setTokenValue(RandomUtil.getInstance().generateTokenData());",
      "",
      "[Added Lines]",
      "130:                 token.setTokenValue(RandomUtil.generateTokenData());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "156:         log.debug(\"Creating new persistent login for user {}\", login);",
      "157:         PersistentToken token = userRepository.findOneByLogin(login).map(u -> {",
      "158:             PersistentToken t = new PersistentToken();",
      "160:             t.setUser(u);<% } else { %>",
      "161:             t.setLogin(login);<% } %><% if (databaseType === 'cassandra') { %>",
      "162:             t.setUserId(u.getId());<% } %>",
      "164:             t.setTokenDate(<% if (databaseType === 'cassandra') { %>new Date()<% } else { %>LocalDate.now()<% } %>);",
      "165:             t.setIpAddress(request.getRemoteAddr());",
      "166:             t.setUserAgent(request.getHeader(\"User-Agent\"));",
      "",
      "[Removed Lines]",
      "159:             t.setSeries(RandomUtil.getInstance().generateSeriesData());<% if (databaseType === 'sql' || databaseType === 'mongodb') { %>",
      "163:             t.setTokenValue(RandomUtil.getInstance().generateTokenData());",
      "",
      "[Added Lines]",
      "159:             t.setSeries(RandomUtil.generateSeriesData());<% if (databaseType === 'sql' || databaseType === 'mongodb') { %>",
      "163:             t.setTokenValue(RandomUtil.generateTokenData());",
      "",
      "---------------"
    ],
    "generators/server/templates/src/main/java/package/service/UserService.java.ejs||generators/server/templates/src/main/java/package/service/UserService.java.ejs": [
      "File: generators/server/templates/src/main/java/package/service/UserService.java.ejs -> generators/server/templates/src/main/java/package/service/UserService.java.ejs",
      "--- Hunk 1 ---",
      "[Context before]",
      "202:         return userRepository.findOneByEmailIgnoreCase(mail)",
      "203:             .filter(<%= asEntity('User') %>::getActivated)",
      "204:             .<% if (reactive) { %>flatMap<% } else { %>map<% } %>(user -> {",
      "206:                 user.setResetDate(Instant.now());",
      "207:             <%_ if (!reactive) { _%>",
      "208:                 <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase' || databaseType === 'cassandra') { _%>",
      "",
      "[Removed Lines]",
      "205:                 user.setResetKey(RandomUtil.getInstance().generateResetKey());",
      "",
      "[Added Lines]",
      "205:                 user.setResetKey(RandomUtil.generateResetKey());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "253:         newUser.setActivated(false);",
      "256:         <%_ if (['sql', 'mongodb'].includes(databaseType)) { _%>",
      "257:         Set<Authority> authorities = new HashSet<>();",
      "258:         authorityRepository.findById(AuthoritiesConstants.USER).ifPresent(authorities::add);",
      "",
      "[Removed Lines]",
      "255:         newUser.setActivationKey(RandomUtil.getInstance().generateActivationKey());",
      "",
      "[Added Lines]",
      "255:         newUser.setActivationKey(RandomUtil.generateActivationKey());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "311:                 newUser.setActivated(false);",
      "314:                 Set<<% if (['sql', 'mongodb'].includes(databaseType)) { %>Authority<% } else { %>String<% } %>> authorities = new HashSet<>();",
      "315:                 <%_ if (['sql', 'mongodb'].includes(databaseType)) { _%>",
      "316:                 return authorityRepository.findById(AuthoritiesConstants.USER)",
      "",
      "[Removed Lines]",
      "313:                 newUser.setActivationKey(RandomUtil.getInstance().generateActivationKey());",
      "",
      "[Added Lines]",
      "313:                 newUser.setActivationKey(RandomUtil.generateActivationKey());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "362:         } else {",
      "363:             user.setLangKey(userDTO.getLangKey());",
      "364:         }",
      "366:         user.setPassword(encryptedPassword);",
      "368:         user.setResetDate(Instant.now());",
      "369:         user.setActivated(true);",
      "370:     <%_ if (!reactive) { _%>",
      "",
      "[Removed Lines]",
      "365:         String encryptedPassword = passwordEncoder.encode(RandomUtil.getInstance().generatePassword());",
      "367:         user.setResetKey(RandomUtil.getInstance().generateResetKey());",
      "",
      "[Added Lines]",
      "365:         String encryptedPassword = passwordEncoder.encode(RandomUtil.generatePassword());",
      "367:         user.setResetKey(RandomUtil.generateResetKey());",
      "",
      "---------------"
    ],
    "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs": [
      "File: generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs -> generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:     private static final int DEF_COUNT = 20;",
      "41:     private RandomUtil() {",
      "47:     }",
      "50:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
      "51:     }",
      "",
      "[Removed Lines]",
      "33:     private static final RandomUtil INSTANCE = new RandomUtil();",
      "35:     public static RandomUtil getInstance() {",
      "36:         return INSTANCE;",
      "37:     }",
      "39:     private final SecureRandom secureRandom;",
      "42:         try {",
      "43:             secureRandom = SecureRandom.getInstanceStrong();",
      "44:         } catch (NoSuchAlgorithmException e) {",
      "45:             throw new RuntimeException(\"Unable to find secure algorithms.\", e); //NOSONAR",
      "46:         }",
      "49:     private String generateRandomAlphanumericString() {",
      "",
      "[Added Lines]",
      "33:     private static final SecureRandom secureRandom = new SecureRandom(new SecureRandom().generateSeed(128));",
      "38:     private static String generateRandomAlphanumericString() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:         return generateRandomAlphanumericString();",
      "60:     }",
      "",
      "[Removed Lines]",
      "58:     public String generatePassword() {",
      "",
      "[Added Lines]",
      "47:     public static String generatePassword() {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:         return generateRandomAlphanumericString();",
      "69:     }",
      "",
      "[Removed Lines]",
      "67:     public String generateActivationKey() {",
      "",
      "[Added Lines]",
      "56:     public static String generateActivationKey() {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "77:         return generateRandomAlphanumericString();",
      "78:     }",
      "79:     <%_ if (authenticationType === 'session' && !reactive) { _%>",
      "",
      "[Removed Lines]",
      "76:     public String generateResetKey() {",
      "",
      "[Added Lines]",
      "65:     public static String generateResetKey() {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "88:         return generateRandomAlphanumericString();",
      "89:     }",
      "",
      "[Removed Lines]",
      "87:     public String generateSeriesData() {",
      "",
      "[Added Lines]",
      "76:     public static String generateSeriesData() {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "97:         return generateRandomAlphanumericString();",
      "98:     }",
      "99:     <%_ } _%>",
      "",
      "[Removed Lines]",
      "96:     public String generateTokenData() {",
      "",
      "[Added Lines]",
      "85:     public static String generateTokenData() {",
      "",
      "---------------"
    ],
    "generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs||generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs": [
      "File: generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs -> generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs",
      "--- Hunk 1 ---",
      "[Context before]",
      "295:     <%_ } _%>",
      "296:     public void assertThatResetKeyMustNotBeOlderThan24Hours() {",
      "297:         Instant daysAgo = Instant.now().minus(25, ChronoUnit.HOURS);",
      "299:         user.setActivated(true);",
      "300:         user.setResetDate(daysAgo);",
      "301:         user.setResetKey(resetKey);",
      "",
      "[Removed Lines]",
      "298:         String resetKey = RandomUtil.getInstance().generateResetKey();",
      "",
      "[Added Lines]",
      "298:         String resetKey = RandomUtil.generateResetKey();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "329:     public void assertThatUserCanResetPassword() {",
      "330:         String oldPassword = user.getPassword();",
      "331:         Instant daysAgo = Instant.now().minus(2, ChronoUnit.HOURS);",
      "333:         user.setActivated(true);",
      "334:         user.setResetDate(daysAgo);",
      "335:         user.setResetKey(resetKey);",
      "",
      "[Removed Lines]",
      "332:         String resetKey = RandomUtil.getInstance().generateResetKey();",
      "",
      "[Added Lines]",
      "332:         String resetKey = RandomUtil.generateResetKey();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f2cd27cf6810c5707459d342f88649f4b3d11c79",
      "candidate_info": {
        "commit_hash": "f2cd27cf6810c5707459d342f88649f4b3d11c79",
        "repo": "jhipster/generator-jhipster",
        "commit_url": "https://github.com/jhipster/generator-jhipster/commit/f2cd27cf6810c5707459d342f88649f4b3d11c79",
        "files": [
          "generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs",
          "generators/server/templates/src/main/java/package/service/UserService.java.ejs",
          "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs",
          "generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs"
        ],
        "message": "use secure random instead of plain random generator",
        "before_after_code_files": [
          "generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs||generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs",
          "generators/server/templates/src/main/java/package/service/UserService.java.ejs||generators/server/templates/src/main/java/package/service/UserService.java.ejs",
          "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs",
          "generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs||generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs||generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs",
            "generators/server/templates/src/main/java/package/service/UserService.java.ejs||generators/server/templates/src/main/java/package/service/UserService.java.ejs",
            "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs",
            "generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs||generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs"
          ],
          "candidate": [
            "generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs||generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs",
            "generators/server/templates/src/main/java/package/service/UserService.java.ejs||generators/server/templates/src/main/java/package/service/UserService.java.ejs",
            "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs",
            "generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs||generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs"
          ]
        }
      },
      "candidate_diff": {
        "generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs||generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs": [
          "File: generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs -> generators/server/templates/src/main/java/package/security/PersistentTokenRememberMeServices.java.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:                 log.debug(\"Refreshing persistent login token for user '{}', series '{}'\", login, token.getSeries());<% if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'couchbase') { %>",
          "128:                 token.setTokenDate(LocalDate.now());<%}%><% if (databaseType === 'cassandra') { %>",
          "129:                 token.setTokenDate(new Date());<%}%>",
          "131:                 token.setIpAddress(request.getRemoteAddr());",
          "132:                 token.setUserAgent(request.getHeader(\"User-Agent\"));",
          "133:                 try {",
          "",
          "[Removed Lines]",
          "130:                 token.setTokenValue(RandomUtil.generateTokenData());",
          "",
          "[Added Lines]",
          "130:                 token.setTokenValue(RandomUtil.getInstance().generateTokenData());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:         log.debug(\"Creating new persistent login for user {}\", login);",
          "157:         PersistentToken token = userRepository.findOneByLogin(login).map(u -> {",
          "158:             PersistentToken t = new PersistentToken();",
          "160:             t.setUser(u);<% } else { %>",
          "161:             t.setLogin(login);<% } %><% if (databaseType === 'cassandra') { %>",
          "162:             t.setUserId(u.getId());<% } %>",
          "164:             t.setTokenDate(<% if (databaseType === 'cassandra') { %>new Date()<% } else { %>LocalDate.now()<% } %>);",
          "165:             t.setIpAddress(request.getRemoteAddr());",
          "166:             t.setUserAgent(request.getHeader(\"User-Agent\"));",
          "",
          "[Removed Lines]",
          "159:             t.setSeries(RandomUtil.generateSeriesData());<% if (databaseType === 'sql' || databaseType === 'mongodb') { %>",
          "163:             t.setTokenValue(RandomUtil.generateTokenData());",
          "",
          "[Added Lines]",
          "159:             t.setSeries(RandomUtil.getInstance().generateSeriesData());<% if (databaseType === 'sql' || databaseType === 'mongodb') { %>",
          "163:             t.setTokenValue(RandomUtil.getInstance().generateTokenData());",
          "",
          "---------------"
        ],
        "generators/server/templates/src/main/java/package/service/UserService.java.ejs||generators/server/templates/src/main/java/package/service/UserService.java.ejs": [
          "File: generators/server/templates/src/main/java/package/service/UserService.java.ejs -> generators/server/templates/src/main/java/package/service/UserService.java.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:         return userRepository.findOneByEmailIgnoreCase(mail)",
          "203:             .filter(<%= asEntity('User') %>::getActivated)",
          "204:             .<% if (reactive) { %>flatMap<% } else { %>map<% } %>(user -> {",
          "206:                 user.setResetDate(Instant.now());",
          "207:             <%_ if (!reactive) { _%>",
          "208:                 <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase' || databaseType === 'cassandra') { _%>",
          "",
          "[Removed Lines]",
          "205:                 user.setResetKey(RandomUtil.generateResetKey());",
          "",
          "[Added Lines]",
          "205:                 user.setResetKey(RandomUtil.getInstance().generateResetKey());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:         newUser.setActivated(false);",
          "256:         <%_ if (['sql', 'mongodb'].includes(databaseType)) { _%>",
          "257:         Set<Authority> authorities = new HashSet<>();",
          "258:         authorityRepository.findById(AuthoritiesConstants.USER).ifPresent(authorities::add);",
          "",
          "[Removed Lines]",
          "255:         newUser.setActivationKey(RandomUtil.generateActivationKey());",
          "",
          "[Added Lines]",
          "255:         newUser.setActivationKey(RandomUtil.getInstance().generateActivationKey());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "311:                 newUser.setActivated(false);",
          "314:                 Set<<% if (['sql', 'mongodb'].includes(databaseType)) { %>Authority<% } else { %>String<% } %>> authorities = new HashSet<>();",
          "315:                 <%_ if (['sql', 'mongodb'].includes(databaseType)) { _%>",
          "316:                 return authorityRepository.findById(AuthoritiesConstants.USER)",
          "",
          "[Removed Lines]",
          "313:                 newUser.setActivationKey(RandomUtil.generateActivationKey());",
          "",
          "[Added Lines]",
          "313:                 newUser.setActivationKey(RandomUtil.getInstance().generateActivationKey());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "362:         } else {",
          "363:             user.setLangKey(userDTO.getLangKey());",
          "364:         }",
          "366:         user.setPassword(encryptedPassword);",
          "368:         user.setResetDate(Instant.now());",
          "369:         user.setActivated(true);",
          "370:     <%_ if (!reactive) { _%>",
          "",
          "[Removed Lines]",
          "365:         String encryptedPassword = passwordEncoder.encode(RandomUtil.generatePassword());",
          "367:         user.setResetKey(RandomUtil.generateResetKey());",
          "",
          "[Added Lines]",
          "365:         String encryptedPassword = passwordEncoder.encode(RandomUtil.getInstance().generatePassword());",
          "367:         user.setResetKey(RandomUtil.getInstance().generateResetKey());",
          "",
          "---------------"
        ],
        "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs": [
          "File: generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs -> generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.commons.lang3.RandomStringUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.security.NoSuchAlgorithmException;",
          "24: import java.security.SecureRandom;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     private static final int DEF_COUNT = 20;",
          "30:     private RandomUtil() {",
          "31:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     private static final RandomUtil INSTANCE = new RandomUtil();",
          "35:     public static RandomUtil getInstance() {",
          "36:         return INSTANCE;",
          "37:     }",
          "39:     private SecureRandom secureRandom;",
          "42:         try {",
          "43:             secureRandom = SecureRandom.getInstanceStrong();",
          "44:         } catch (NoSuchAlgorithmException e) {",
          "45:             throw new RuntimeException(\"Unable to find secure algorithms.\", e); //NOSONAR",
          "46:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:     }",
          "",
          "[Removed Lines]",
          "38:     public static String generatePassword() {",
          "39:         return RandomStringUtils.randomAlphanumeric(DEF_COUNT);",
          "",
          "[Added Lines]",
          "54:     public String generatePassword() {",
          "55:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "49:     }",
          "",
          "[Removed Lines]",
          "47:     public static String generateActivationKey() {",
          "48:         return RandomStringUtils.randomNumeric(DEF_COUNT);",
          "",
          "[Added Lines]",
          "63:     public String generateActivationKey() {",
          "64:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "58:     }",
          "59:     <%_ if (authenticationType === 'session' && !reactive) { _%>",
          "",
          "[Removed Lines]",
          "56:     public static String generateResetKey() {",
          "57:         return RandomStringUtils.randomNumeric(DEF_COUNT);",
          "",
          "[Added Lines]",
          "72:     public String generateResetKey() {",
          "73:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "69:     }",
          "",
          "[Removed Lines]",
          "67:     public static String generateSeriesData() {",
          "68:         return RandomStringUtils.randomAlphanumeric(DEF_COUNT);",
          "",
          "[Added Lines]",
          "83:     public String generateSeriesData() {",
          "84:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "78:     }",
          "79:     <%_ } _%>",
          "80: }",
          "",
          "[Removed Lines]",
          "76:     public static String generateTokenData() {",
          "77:         return RandomStringUtils.randomAlphanumeric(DEF_COUNT);",
          "",
          "[Added Lines]",
          "92:     public String generateTokenData() {",
          "93:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
          "",
          "---------------"
        ],
        "generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs||generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs": [
          "File: generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs -> generators/server/templates/src/test/java/package/service/UserServiceIT.java.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:     <%_ } _%>",
          "296:     public void assertThatResetKeyMustNotBeOlderThan24Hours() {",
          "297:         Instant daysAgo = Instant.now().minus(25, ChronoUnit.HOURS);",
          "299:         user.setActivated(true);",
          "300:         user.setResetDate(daysAgo);",
          "301:         user.setResetKey(resetKey);",
          "",
          "[Removed Lines]",
          "298:         String resetKey = RandomUtil.generateResetKey();",
          "",
          "[Added Lines]",
          "298:         String resetKey = RandomUtil.getInstance().generateResetKey();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:     public void assertThatUserCanResetPassword() {",
          "330:         String oldPassword = user.getPassword();",
          "331:         Instant daysAgo = Instant.now().minus(2, ChronoUnit.HOURS);",
          "333:         user.setActivated(true);",
          "334:         user.setResetDate(daysAgo);",
          "335:         user.setResetKey(resetKey);",
          "",
          "[Removed Lines]",
          "332:         String resetKey = RandomUtil.generateResetKey();",
          "",
          "[Added Lines]",
          "332:         String resetKey = RandomUtil.getInstance().generateResetKey();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79fc081f5fe12a8fae181d9faf85258d2b594ec7",
      "candidate_info": {
        "commit_hash": "79fc081f5fe12a8fae181d9faf85258d2b594ec7",
        "repo": "jhipster/generator-jhipster",
        "commit_url": "https://github.com/jhipster/generator-jhipster/commit/79fc081f5fe12a8fae181d9faf85258d2b594ec7",
        "files": [
          "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs"
        ],
        "message": "use secure random instead of plain random generator",
        "before_after_code_files": [
          "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs"
          ],
          "candidate": [
            "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs"
          ]
        }
      },
      "candidate_diff": {
        "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs": [
          "File: generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs -> generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         return INSTANCE;",
          "37:     }",
          "41:     private RandomUtil() {",
          "42:         try {",
          "",
          "[Removed Lines]",
          "39:     private SecureRandom secureRandom;",
          "",
          "[Added Lines]",
          "39:     private final SecureRandom secureRandom;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:         }",
          "47:     }",
          "54:     public String generatePassword() {",
          "56:     }",
          "",
          "[Removed Lines]",
          "55:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
          "",
          "[Added Lines]",
          "49:     private String generateRandomAlphanumericString() {",
          "50:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
          "51:     }",
          "59:         return generateRandomAlphanumericString();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:     public String generateActivationKey() {",
          "65:     }",
          "",
          "[Removed Lines]",
          "64:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
          "",
          "[Added Lines]",
          "68:         return generateRandomAlphanumericString();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72:     public String generateResetKey() {",
          "74:     }",
          "75:     <%_ if (authenticationType === 'session' && !reactive) { _%>",
          "",
          "[Removed Lines]",
          "73:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
          "",
          "[Added Lines]",
          "77:         return generateRandomAlphanumericString();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "83:     public String generateSeriesData() {",
          "85:     }",
          "",
          "[Removed Lines]",
          "84:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
          "",
          "[Added Lines]",
          "88:         return generateRandomAlphanumericString();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "92:     public String generateTokenData() {",
          "94:     }",
          "95:     <%_ } _%>",
          "96: }",
          "",
          "[Removed Lines]",
          "93:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
          "",
          "[Added Lines]",
          "97:         return generateRandomAlphanumericString();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41ae3460d574971e97ced7111c6dfdd4e1470bb3",
      "candidate_info": {
        "commit_hash": "41ae3460d574971e97ced7111c6dfdd4e1470bb3",
        "repo": "jhipster/generator-jhipster",
        "commit_url": "https://github.com/jhipster/generator-jhipster/commit/41ae3460d574971e97ced7111c6dfdd4e1470bb3",
        "files": [
          "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs"
        ],
        "message": "initialize SecureRandom like JJWT",
        "before_after_code_files": [
          "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs"
          ],
          "candidate": [
            "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs"
          ]
        }
      },
      "candidate_diff": {
        "generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs||generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs": [
          "File: generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs -> generators/server/templates/src/main/java/package/service/util/RandomUtil.java.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     private static final int DEF_COUNT = 20;",
          "35:     }",
          "37:     private static String generateRandomAlphanumericString() {",
          "39:     }",
          "",
          "[Removed Lines]",
          "32:     private static final SecureRandom secureRandom = new SecureRandom(new SecureRandom().generateSeed(128));",
          "34:     private RandomUtil() {",
          "38:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, secureRandom);",
          "",
          "[Added Lines]",
          "32:     private static final SecureRandom SECURE_RANDOM;",
          "34:     static {",
          "35:         SECURE_RANDOM = new SecureRandom();",
          "36:         SECURE_RANDOM.nextBytes(new byte[64]);",
          "40:         return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, SECURE_RANDOM);",
          "",
          "---------------"
        ]
      }
    }
  ]
}