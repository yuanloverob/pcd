{
  "cve_id": "CVE-2023-45282",
  "cve_desc": "In NASA Open MCT (aka openmct) before 3.1.0, prototype pollution can occur via an import action.",
  "repo": "nasa/openmct",
  "patch_hash": "545a1770c523ecc3410dca884c6809d5ff0f9d52",
  "patch_info": {
    "commit_hash": "545a1770c523ecc3410dca884c6809d5ff0f9d52",
    "repo": "nasa/openmct",
    "commit_url": "https://github.com/nasa/openmct/pull/7094/commits/545a1770c523ecc3410dca884c6809d5ff0f9d52",
    "files": [
      "src/plugins/localStorage/LocalStorageObjectProvider.js"
    ],
    "message": "filter __proto__ in localstorageprovider",
    "before_after_code_files": [
      "src/plugins/localStorage/LocalStorageObjectProvider.js||src/plugins/localStorage/LocalStorageObjectProvider.js"
    ]
  },
  "patch_diff": {
    "src/plugins/localStorage/LocalStorageObjectProvider.js||src/plugins/localStorage/LocalStorageObjectProvider.js": [
      "File: src/plugins/localStorage/LocalStorageObjectProvider.js -> src/plugins/localStorage/LocalStorageObjectProvider.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: export default class LocalStorageObjectProvider {",
      "24:   constructor(spaceKey = 'mct') {",
      "25:     this.localStorage = window.localStorage;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: import { filter__proto__ } from '../../utils/sanitization';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:   getSpaceAsObject() {",
      "87:   }",
      "",
      "[Removed Lines]",
      "86:     return JSON.parse(this.getSpace());",
      "",
      "[Added Lines]",
      "88:     return JSON.parse(this.getSpace(), filter__proto__);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2243381d527c0d84cc48e9ace78be7cda5363612",
      "candidate_info": {
        "commit_hash": "2243381d527c0d84cc48e9ace78be7cda5363612",
        "repo": "nasa/openmct",
        "commit_url": "https://github.com/nasa/openmct/commit/2243381d527c0d84cc48e9ace78be7cda5363612",
        "files": [
          "src/plugins/importFromJSONAction/ImportFromJSONAction.js",
          "src/plugins/importFromJSONAction/ImportFromJSONActionSpec.js",
          "src/plugins/localStorage/LocalStorageObjectProvider.js",
          "src/plugins/localStorage/pluginSpec.js",
          "src/utils/sanitization.js"
        ],
        "message": "Protect against prototype pollution in import action (#7094)",
        "before_after_code_files": [
          "src/plugins/importFromJSONAction/ImportFromJSONAction.js||src/plugins/importFromJSONAction/ImportFromJSONAction.js",
          "src/plugins/importFromJSONAction/ImportFromJSONActionSpec.js||src/plugins/importFromJSONAction/ImportFromJSONActionSpec.js",
          "src/plugins/localStorage/LocalStorageObjectProvider.js||src/plugins/localStorage/LocalStorageObjectProvider.js",
          "src/plugins/localStorage/pluginSpec.js||src/plugins/localStorage/pluginSpec.js",
          "src/utils/sanitization.js||src/utils/sanitization.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/nasa/openmct/pull/7094"
        ],
        "olp_code_files": {
          "patch": [
            "src/plugins/localStorage/LocalStorageObjectProvider.js||src/plugins/localStorage/LocalStorageObjectProvider.js"
          ],
          "candidate": [
            "src/plugins/localStorage/LocalStorageObjectProvider.js||src/plugins/localStorage/LocalStorageObjectProvider.js"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/importFromJSONAction/ImportFromJSONAction.js||src/plugins/importFromJSONAction/ImportFromJSONAction.js": [
          "File: src/plugins/importFromJSONAction/ImportFromJSONAction.js -> src/plugins/importFromJSONAction/ImportFromJSONAction.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import objectUtils from 'objectUtils';",
          "24: import { v4 as uuid } from 'uuid';",
          "26: export default class ImportAsJSONAction {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import { filter__proto__ } from 'utils/sanitization';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   onSave(object, changes) {",
          "73:     const selectFile = changes.selectFile;",
          "76:   }",
          "",
          "[Removed Lines]",
          "74:     const objectTree = selectFile.body;",
          "75:     this._importObjectTree(object, JSON.parse(objectTree));",
          "",
          "[Added Lines]",
          "75:     const jsonTree = selectFile.body;",
          "76:     const objectTree = JSON.parse(jsonTree, filter__proto__);",
          "78:     this._importObjectTree(object, objectTree);",
          "",
          "---------------"
        ],
        "src/plugins/importFromJSONAction/ImportFromJSONActionSpec.js||src/plugins/importFromJSONAction/ImportFromJSONActionSpec.js": [
          "File: src/plugins/importFromJSONAction/ImportFromJSONActionSpec.js -> src/plugins/importFromJSONAction/ImportFromJSONActionSpec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import { createOpenMct, resetApplicationState } from 'utils/testing';",
          "27: let openmct;",
          "28: let importFromJSONAction;",
          "30: describe('The import JSON action', function () {",
          "31:   beforeEach((done) => {",
          "",
          "[Removed Lines]",
          "25: import ImportFromJSONAction from './ImportFromJSONAction';",
          "",
          "[Added Lines]",
          "27: let folderObject;",
          "28: let unObserve;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     openmct.on('start', done);",
          "35:     openmct.startHeadless();",
          "50:       composition: [],",
          "51:       name: 'Unnamed Folder',",
          "52:       type: 'folder',",
          "",
          "[Removed Lines]",
          "37:     importFromJSONAction = new ImportFromJSONAction(openmct);",
          "38:   });",
          "40:   afterEach(() => {",
          "41:     return resetApplicationState(openmct);",
          "42:   });",
          "44:   it('has import as JSON action', () => {",
          "45:     expect(importFromJSONAction.key).toBe('import.JSON');",
          "46:   });",
          "48:   it('applies to return true for objects with composition', function () {",
          "49:     const domainObject = {",
          "",
          "[Added Lines]",
          "37:     importFromJSONAction = openmct.actions.getAction('import.JSON');",
          "38:     folderObject = {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         key: '84438cda-a071-48d1-b9bf-d77bd53e59ba'",
          "60:       }",
          "61:     };",
          "65:     spyOn(openmct.composition, 'get').and.returnValue(true);",
          "",
          "[Removed Lines]",
          "63:     const objectPath = [domainObject];",
          "",
          "[Added Lines]",
          "51:   });",
          "53:   afterEach(() => {",
          "54:     importFromJSONAction = undefined;",
          "55:     folderObject = undefined;",
          "56:     unObserve?.();",
          "57:     unObserve = undefined;",
          "59:     return resetApplicationState(openmct);",
          "60:   });",
          "62:   it('has import as JSON action', () => {",
          "63:     expect(importFromJSONAction).toBeDefined();",
          "64:   });",
          "66:   it('applies to return true for objects with composition', function () {",
          "67:     const objectPath = [folderObject];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:   });",
          "99:   it('calls showForm on invoke ', function () {",
          "116:     spyOn(openmct.forms, 'showForm').and.returnValue(Promise.resolve({}));",
          "117:     spyOn(importFromJSONAction, 'onSave').and.returnValue(Promise.resolve({}));",
          "",
          "[Removed Lines]",
          "100:     const domainObject = {",
          "101:       composition: [],",
          "102:       name: 'Unnamed Folder',",
          "103:       type: 'folder',",
          "104:       location: '9f6c9dae-51c3-401d-92f1-c812de942922',",
          "105:       modified: 1637021471624,",
          "106:       persisted: 1637021471624,",
          "107:       id: '84438cda-a071-48d1-b9bf-d77bd53e59ba',",
          "108:       identifier: {",
          "109:         namespace: '',",
          "110:         key: '84438cda-a071-48d1-b9bf-d77bd53e59ba'",
          "111:       }",
          "112:     };",
          "114:     const objectPath = [domainObject];",
          "",
          "[Added Lines]",
          "104:     const objectPath = [folderObject];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:     expect(openmct.forms.showForm).toHaveBeenCalled();",
          "121:   });",
          "122: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   it('protects against prototype pollution', (done) => {",
          "114:     spyOn(console, 'warn');",
          "115:     spyOn(openmct.forms, 'showForm').and.callFake(returnResponseWithPrototypePollution);",
          "117:     unObserve = openmct.objects.observe(folderObject, '*', callback);",
          "119:     importFromJSONAction.invoke([folderObject]);",
          "121:     function callback(newObject) {",
          "122:       const hasPollutedProto =",
          "123:         Object.prototype.hasOwnProperty.call(newObject, '__proto__') ||",
          "124:         Object.prototype.hasOwnProperty.call(Object.getPrototypeOf(newObject), 'toString');",
          "127:       expect(console.warn).not.toHaveBeenCalled();",
          "128:       expect(hasPollutedProto).toBeFalse();",
          "130:       done();",
          "131:     }",
          "133:     function returnResponseWithPrototypePollution() {",
          "134:       const pollutedResponse = {",
          "135:         selectFile: {",
          "136:           name: 'imported object',",
          "138:           body: \"{\\\"openmct\\\":{\\\"c28d230d-e909-4a3e-9840-d9ef469dda70\\\":{\\\"identifier\\\":{\\\"key\\\":\\\"c28d230d-e909-4a3e-9840-d9ef469dda70\\\",\\\"namespace\\\":\\\"\\\"},\\\"name\\\":\\\"Unnamed Overlay Plot\\\",\\\"type\\\":\\\"telemetry.plot.overlay\\\",\\\"composition\\\":[],\\\"configuration\\\":{\\\"series\\\":[]},\\\"modified\\\":1695837546833,\\\"location\\\":\\\"mine\\\",\\\"created\\\":1695837546833,\\\"persisted\\\":1695837546833,\\\"__proto__\\\":{\\\"toString\\\":\\\"foobar\\\"}}},\\\"rootId\\\":\\\"c28d230d-e909-4a3e-9840-d9ef469dda70\\\"}\"",
          "139:         }",
          "140:       };",
          "142:       return Promise.resolve(pollutedResponse);",
          "143:     }",
          "144:   });",
          "",
          "---------------"
        ],
        "src/plugins/localStorage/LocalStorageObjectProvider.js||src/plugins/localStorage/LocalStorageObjectProvider.js": [
          "File: src/plugins/localStorage/LocalStorageObjectProvider.js -> src/plugins/localStorage/LocalStorageObjectProvider.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: export default class LocalStorageObjectProvider {",
          "24:   constructor(spaceKey = 'mct') {",
          "25:     this.localStorage = window.localStorage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import { filter__proto__ } from '../../utils/sanitization';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   getSpaceAsObject() {",
          "87:   }",
          "",
          "[Removed Lines]",
          "86:     return JSON.parse(this.getSpace());",
          "",
          "[Added Lines]",
          "88:     return JSON.parse(this.getSpace(), filter__proto__);",
          "",
          "---------------"
        ],
        "src/plugins/localStorage/pluginSpec.js||src/plugins/localStorage/pluginSpec.js": [
          "File: src/plugins/localStorage/pluginSpec.js -> src/plugins/localStorage/pluginSpec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     expect(testObject.anotherProperty).toEqual(domainObject.anotherProperty);",
          "74:   });",
          "76:   afterEach(() => {",
          "77:     resetApplicationState(openmct);",
          "78:     resetLocalStorage();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:   it('prevents prototype pollution from manipulated localstorage', async () => {",
          "77:     spyOn(console, 'warn');",
          "79:     const identifier = {",
          "80:       namespace: '',",
          "81:       key: 'test-key'",
          "82:     };",
          "84:     const pollutedSpaceString = `{\"test-key\":{\"__proto__\":{\"toString\":\"foobar\"},\"type\":\"folder\",\"name\":\"A test object\",\"identifier\":{\"namespace\":\"\",\"key\":\"test-key\"}}}`;",
          "85:     getLocalStorage()[space] = pollutedSpaceString;",
          "87:     let testObject = await openmct.objects.get(identifier);",
          "89:     const hasPollutedProto =",
          "90:       Object.prototype.hasOwnProperty.call(testObject, '__proto__') ||",
          "91:       Object.getPrototypeOf(testObject) !== Object.getPrototypeOf({});",
          "94:     expect(console.warn).not.toHaveBeenCalled();",
          "95:     expect(hasPollutedProto).toBeFalse();",
          "96:   });",
          "",
          "---------------"
        ],
        "src/utils/sanitization.js||src/utils/sanitization.js": [
          "File: src/utils/sanitization.js -> src/utils/sanitization.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: function filter__proto__(key, value) {",
          "24:   if (key !== '__proto__') {",
          "25:     return value;",
          "26:   }",
          "27: }",
          "29: export { filter__proto__ };",
          "",
          "---------------"
        ]
      }
    }
  ]
}