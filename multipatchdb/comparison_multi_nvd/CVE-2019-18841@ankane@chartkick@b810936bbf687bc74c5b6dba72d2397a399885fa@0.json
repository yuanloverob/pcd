{
  "cve_id": "CVE-2019-18841",
  "cve_desc": "Chartkick.js 3.1.0 through 3.1.3, as used in the Chartkick gem before 3.3.0 for Ruby, allows prototype pollution.",
  "repo": "ankane/chartkick",
  "patch_hash": "b810936bbf687bc74c5b6dba72d2397a399885fa",
  "patch_info": {
    "commit_hash": "b810936bbf687bc74c5b6dba72d2397a399885fa",
    "repo": "ankane/chartkick",
    "commit_url": "https://github.com/ankane/chartkick/commit/b810936bbf687bc74c5b6dba72d2397a399885fa",
    "files": [
      "CHANGELOG.md",
      "vendor/assets/javascripts/chartkick.js"
    ],
    "message": "Updated Chartkick.js to 3.2.0",
    "before_after_code_files": [
      "vendor/assets/javascripts/chartkick.js||vendor/assets/javascripts/chartkick.js"
    ]
  },
  "patch_diff": {
    "vendor/assets/javascripts/chartkick.js||vendor/assets/javascripts/chartkick.js": [
      "File: vendor/assets/javascripts/chartkick.js -> vendor/assets/javascripts/chartkick.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:   typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :",
      "11:   typeof define === 'function' && define.amd ? define(factory) :",
      "12:   (global = global || self, global.Chartkick = factory());",
      "15:   function isArray(variable) {",
      "16:     return Object.prototype.toString.call(variable) === \"[object Array]\";",
      "",
      "[Removed Lines]",
      "13: }(this, function () { 'use strict';",
      "",
      "[Added Lines]",
      "13: }(this, (function () { 'use strict';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:   }",
      "23:   function isPlainObject(variable) {",
      "25:   }",
      "28:   function extend(target, source) {",
      "29:     var key;",
      "30:     for (key in source) {",
      "31:       if (isPlainObject(source[key]) || isArray(source[key])) {",
      "32:         if (isPlainObject(source[key]) && !isPlainObject(target[key])) {",
      "33:           target[key] = {};",
      "",
      "[Removed Lines]",
      "24:     return Object.prototype.toString.call(variable) === \"[object Object]\";",
      "",
      "[Added Lines]",
      "25:     return Object.prototype.toString.call(variable) === \"[object Object]\" && !isFunction(variable) && variable instanceof Object;",
      "33:       if (key === \"__proto__\") { continue; }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "237:     return typeof obj === \"number\";",
      "238:   }",
      "241:     pre = pre || \"\";",
      "242:     if (options.prefix) {",
      "243:       if (value < 0) {",
      "",
      "[Removed Lines]",
      "240:   function formatValue(pre, value, options) {",
      "",
      "[Added Lines]",
      "244:   function formatValue(pre, value, options, axis) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "247:       pre += options.prefix;",
      "248:     }",
      "250:     if (options.thousands || options.decimal) {",
      "251:       value = toStr(value);",
      "252:       var parts = value.split(\".\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "254:     var suffix = options.suffix || \"\";",
      "255:     var precision = options.precision;",
      "256:     var round = options.round;",
      "258:     if (options.byteScale) {",
      "259:       var baseValue = axis ? options.byteScale : value;",
      "260:       if (baseValue >= 1099511627776) {",
      "261:         value /= 1099511627776;",
      "262:         suffix = \" TB\";",
      "263:       } else if (baseValue >= 1073741824) {",
      "264:         value /= 1073741824;",
      "265:         suffix = \" GB\";",
      "266:       } else if (baseValue >= 1048576) {",
      "267:         value /= 1048576;",
      "268:         suffix = \" MB\";",
      "269:       } else if (baseValue >= 1024) {",
      "270:         value /= 1024;",
      "271:         suffix = \" KB\";",
      "272:       } else {",
      "273:         suffix = \" bytes\";",
      "274:       }",
      "276:       if (precision === undefined && round === undefined) {",
      "277:         precision = 3;",
      "278:       }",
      "279:     }",
      "281:     if (precision !== undefined && round !== undefined) {",
      "282:       throw Error(\"Use either round or precision, not both\");",
      "283:     }",
      "285:     if (!axis) {",
      "286:       if (precision !== undefined) {",
      "287:         value = value.toPrecision(precision);",
      "288:         if (!options.zeros) {",
      "289:           value = parseFloat(value);",
      "290:         }",
      "291:       }",
      "293:       if (round !== undefined) {",
      "294:         if (round < 0) {",
      "295:           var num = Math.pow(10, -1 * round);",
      "296:           value = parseInt((1.0 * value / num).toFixed(0)) * num;",
      "297:         } else {",
      "298:           value = value.toFixed(round);",
      "299:           if (!options.zeros) {",
      "300:             value = parseFloat(value);",
      "301:           }",
      "302:         }",
      "303:       }",
      "304:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "259:       }",
      "260:     }",
      "263:   }",
      "265:   function seriesOption(chart, series, option) {",
      "",
      "[Removed Lines]",
      "262:     return pre + value + (options.suffix || \"\");",
      "",
      "[Added Lines]",
      "318:     return pre + value + suffix;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "420:       prefix: chart.options.prefix,",
      "421:       suffix: chart.options.suffix,",
      "422:       thousands: chart.options.thousands,",
      "424:     };",
      "426:     if (chartType !== \"pie\") {",
      "427:       var myAxes = options.scales.yAxes;",
      "428:       if (chartType === \"bar\") {",
      "429:         myAxes = options.scales.xAxes;",
      "430:       }",
      "432:       if (!myAxes[0].ticks.callback) {",
      "433:         myAxes[0].ticks.callback = function (value) {",
      "435:         };",
      "436:       }",
      "437:     }",
      "",
      "[Removed Lines]",
      "423:       decimal: chart.options.decimal",
      "434:           return formatValue(\"\", value, formatOptions);",
      "",
      "[Added Lines]",
      "479:       decimal: chart.options.decimal,",
      "480:       precision: chart.options.precision,",
      "481:       round: chart.options.round,",
      "482:       zeros: chart.options.zeros",
      "485:     if (chart.options.bytes) {",
      "486:       var series = chart.data;",
      "487:       if (chartType === \"pie\") {",
      "488:         series = [{data: series}];",
      "489:       }",
      "492:       var max = 0;",
      "493:       for (var i = 0; i < series.length; i++) {",
      "494:         var s = series[i];",
      "495:         for (var j = 0; j < s.data.length; j++) {",
      "496:           if (s.data[j][1] > max) {",
      "497:             max = s.data[j][1];",
      "498:           }",
      "499:         }",
      "500:       }",
      "503:       var scale = 1;",
      "504:       while (max >= 1024) {",
      "505:         scale *= 1024;",
      "506:         max /= 1024;",
      "507:       }",
      "510:       formatOptions.byteScale = scale;",
      "511:     }",
      "519:       if (formatOptions.byteScale) {",
      "520:         if (!myAxes[0].ticks.stepSize) {",
      "521:           myAxes[0].ticks.stepSize = formatOptions.byteScale / 2;",
      "522:         }",
      "523:         if (!myAxes[0].ticks.maxTicksLimit) {",
      "524:           myAxes[0].ticks.maxTicksLimit = 4;",
      "525:         }",
      "526:       }",
      "530:           return formatValue(\"\", value, formatOptions, true);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "948:       prefix: chart.options.prefix,",
      "949:       suffix: chart.options.suffix,",
      "950:       thousands: chart.options.thousands,",
      "952:     };",
      "954:     if (chartType !== \"pie\" && !options.yAxis.labels.formatter) {",
      "",
      "[Removed Lines]",
      "951:       decimal: chart.options.decimal",
      "",
      "[Added Lines]",
      "1047:       decimal: chart.options.decimal,",
      "1048:       precision: chart.options.precision,",
      "1049:       round: chart.options.round,",
      "1050:       zeros: chart.options.zeros",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2317:   return Chartkick;",
      "",
      "[Removed Lines]",
      "2319: }));",
      "",
      "[Added Lines]",
      "2418: })));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "462dda76283083f9602da6f54b6b587c42c61e1f",
      "candidate_info": {
        "commit_hash": "462dda76283083f9602da6f54b6b587c42c61e1f",
        "repo": "ankane/chartkick",
        "commit_url": "https://github.com/ankane/chartkick/commit/462dda76283083f9602da6f54b6b587c42c61e1f",
        "files": [
          "vendor/assets/javascripts/chartkick.js"
        ],
        "message": "Updated chartkick.js to fix error with GeoChart with latest Google Charts release",
        "before_after_code_files": [
          "vendor/assets/javascripts/chartkick.js||vendor/assets/javascripts/chartkick.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "vendor/assets/javascripts/chartkick.js||vendor/assets/javascripts/chartkick.js"
          ],
          "candidate": [
            "vendor/assets/javascripts/chartkick.js||vendor/assets/javascripts/chartkick.js"
          ]
        }
      },
      "candidate_diff": {
        "vendor/assets/javascripts/chartkick.js||vendor/assets/javascripts/chartkick.js": [
          "File: vendor/assets/javascripts/chartkick.js -> vendor/assets/javascripts/chartkick.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:     return typeof obj === \"number\";",
          "242:   }",
          "244:   function formatValue(pre, value, options, axis) {",
          "245:     pre = pre || \"\";",
          "246:     if (options.prefix) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:   var byteSuffixes = [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256:     var round = options.round;",
          "258:     if (options.byteScale) {",
          "259:       var baseValue = axis ? options.byteScale : value;",
          "261:         value /= 1099511627776;",
          "263:       } else if (baseValue >= 1073741824) {",
          "264:         value /= 1073741824;",
          "266:       } else if (baseValue >= 1048576) {",
          "267:         value /= 1048576;",
          "269:       } else if (baseValue >= 1024) {",
          "270:         value /= 1024;",
          "272:       } else {",
          "274:       }",
          "276:       if (precision === undefined && round === undefined) {",
          "278:       }",
          "279:     }",
          "281:     if (precision !== undefined && round !== undefined) {",
          "",
          "[Removed Lines]",
          "260:       if (baseValue >= 1099511627776) {",
          "262:         suffix = \" TB\";",
          "265:         suffix = \" GB\";",
          "268:         suffix = \" MB\";",
          "271:         suffix = \" KB\";",
          "273:         suffix = \" bytes\";",
          "277:         precision = 3;",
          "",
          "[Added Lines]",
          "261:       var suffixIdx;",
          "264:       if (baseValue >= 1152921504606846976) {",
          "265:         value /= 1152921504606846976;",
          "266:         suffixIdx = 6;",
          "267:       } else if (baseValue >= 1125899906842624) {",
          "268:         value /= 1125899906842624;",
          "269:         suffixIdx = 5;",
          "270:       } else if (baseValue >= 1099511627776) {",
          "272:         suffixIdx = 4;",
          "275:         suffixIdx = 3;",
          "278:         suffixIdx = 2;",
          "281:         suffixIdx = 1;",
          "283:         suffixIdx = 0;",
          "288:         if (value >= 1023.5) {",
          "289:           if (suffixIdx < byteSuffixes.length - 1) {",
          "290:             value = 1.0;",
          "291:             suffixIdx += 1;",
          "292:           }",
          "293:         }",
          "294:         precision = value >= 1000 ? 4 : 3;",
          "296:       suffix = \" \" + byteSuffixes[suffixIdx];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "746:       }",
          "747:     }",
          "749:     if (chart.xtype === \"datetime\" && labels.length > 0) {",
          "750:       var minTime = (notnull(xmin) ? toDate(xmin) : labels[0]).getTime();",
          "751:       var maxTime = (notnull(xmax) ? toDate(xmax) : labels[0]).getTime();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768:     if (chart.xtype === \"datetime\" && labels.length === 0) {",
          "769:       if (notnull(xmin)) {",
          "770:         labels.push(toDate(xmin));",
          "771:       }",
          "772:       if (notnull(xmax)) {",
          "773:         labels.push(toDate(xmax));",
          "774:       }",
          "775:       day = false;",
          "776:       week = false;",
          "777:       month = false;",
          "778:       year = false;",
          "779:       hour = false;",
          "780:       minute = false;",
          "781:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1448:   defaultExport$2.prototype.renderGeoChart = function renderGeoChart (chart) {",
          "1449:       var this$1 = this;",
          "1452:       var chartOptions = {",
          "1453:         legend: \"none\",",
          "1454:         colorAxis: {",
          "",
          "[Removed Lines]",
          "1451:     this.waitForLoaded(chart, function () {",
          "",
          "[Added Lines]",
          "1485:     this.waitForLoaded(chart, \"geochart\", function () {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1564:       if (config.language) {",
          "1565:         loadOptions.language = config.language;",
          "1566:       }",
          "1568:         loadOptions.mapsApiKey = config.mapsApiKey;",
          "1569:       }",
          "",
          "[Removed Lines]",
          "1567:       if (pack === \"corechart\" && config.mapsApiKey) {",
          "",
          "[Added Lines]",
          "1601:       if (pack === \"geochart\" && config.mapsApiKey) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1576:     var cb, call;",
          "1577:     for (var i = 0; i < callbacks.length; i++) {",
          "1578:       cb = callbacks[i];",
          "1580:       if (call) {",
          "1581:         cb.callback();",
          "1582:         callbacks.splice(i, 1);",
          "",
          "[Removed Lines]",
          "1579:       call = this.library.visualization && ((cb.pack === \"corechart\" && this.library.visualization.LineChart) || (cb.pack === \"timeline\" && this.library.visualization.Timeline));",
          "",
          "[Added Lines]",
          "1613:       call = this.library.visualization && ((cb.pack === \"corechart\" && this.library.visualization.LineChart) || (cb.pack === \"timeline\" && this.library.visualization.Timeline) || (cb.pack === \"geochart\" && this.library.visualization.GeoChart));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1951:     return r;",
          "1952:   };",
          "1956:       return \"number\";",
          "1957:     } else if (!noDatetime && detectXTypeWithFunction(series, isDate)) {",
          "1958:       return \"datetime\";",
          "",
          "[Removed Lines]",
          "1954:   function detectXType(series, noDatetime) {",
          "1955:     if (detectXTypeWithFunction(series, isNumber)) {",
          "",
          "[Added Lines]",
          "1988:   function detectXType(series, noDatetime, options) {",
          "1989:     if (dataEmpty(series)) {",
          "1990:       if ((options.xmin || options.xmax) && (!options.xmin || isDate(options.xmin)) && (!options.xmax || isDate(options.xmax))) {",
          "1991:         return \"datetime\";",
          "1992:       } else {",
          "1993:         return \"number\";",
          "1994:       }",
          "1995:     } else if (detectXTypeWithFunction(series, isNumber)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2004:       chart.hideLegend = false;",
          "2005:     }",
          "2011:     for (i = 0; i < series.length; i++) {",
          "2013:     }",
          "2015:     return series;",
          "",
          "[Removed Lines]",
          "2007:     chart.xtype = keyType ? keyType : (opts.discrete ? \"string\" : detectXType(series, noDatetime));",
          "2010:     series = copySeries(series);",
          "2012:       series[i].data = formatSeriesData(toArr(series[i].data), chart.xtype);",
          "",
          "[Added Lines]",
          "2049:     series = copySeries(series);",
          "2050:     for (i = 0; i < series.length; i++) {",
          "2051:       series[i].data = toArr(series[i].data);",
          "2052:     }",
          "2054:     chart.xtype = keyType ? keyType : (opts.discrete ? \"string\" : detectXType(series, noDatetime, opts));",
          "2058:       series[i].data = formatSeriesData(series[i].data, chart.xtype);",
          "",
          "---------------"
        ]
      }
    }
  ]
}