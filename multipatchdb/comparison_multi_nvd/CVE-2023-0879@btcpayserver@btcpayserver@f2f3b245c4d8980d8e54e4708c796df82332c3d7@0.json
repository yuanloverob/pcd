{
  "cve_id": "CVE-2023-0879",
  "cve_desc": "Cross-site Scripting (XSS) - Stored in GitHub repository btcpayserver/btcpayserver prior to 1.7.12.\n\n",
  "repo": "btcpayserver/btcpayserver",
  "patch_hash": "f2f3b245c4d8980d8e54e4708c796df82332c3d7",
  "patch_info": {
    "commit_hash": "f2f3b245c4d8980d8e54e4708c796df82332c3d7",
    "repo": "btcpayserver/btcpayserver",
    "commit_url": "https://github.com/btcpayserver/btcpayserver/pull/4635/commits/f2f3b245c4d8980d8e54e4708c796df82332c3d7",
    "files": [
      "BTCPayServer.Tests/FastTests.cs",
      "BTCPayServer/BufferizedFormFile.cs",
      "BTCPayServer/Controllers/UIServerController.cs",
      "BTCPayServer/Controllers/UIStoresController.cs",
      "BTCPayServer/Extensions.cs",
      "BTCPayServer/FileTypeDetector.cs",
      "BTCPayServer/Storage/StorageExtensions.cs"
    ],
    "message": "Harden file type inputs",
    "before_after_code_files": [
      "BTCPayServer.Tests/FastTests.cs||BTCPayServer.Tests/FastTests.cs",
      "BTCPayServer/BufferizedFormFile.cs||BTCPayServer/BufferizedFormFile.cs",
      "BTCPayServer/Controllers/UIServerController.cs||BTCPayServer/Controllers/UIServerController.cs",
      "BTCPayServer/Controllers/UIStoresController.cs||BTCPayServer/Controllers/UIStoresController.cs",
      "BTCPayServer/Extensions.cs||BTCPayServer/Extensions.cs",
      "BTCPayServer/FileTypeDetector.cs||BTCPayServer/FileTypeDetector.cs",
      "BTCPayServer/Storage/StorageExtensions.cs||BTCPayServer/Storage/StorageExtensions.cs"
    ]
  },
  "patch_diff": {
    "BTCPayServer.Tests/FastTests.cs||BTCPayServer.Tests/FastTests.cs": [
      "File: BTCPayServer.Tests/FastTests.cs -> BTCPayServer.Tests/FastTests.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "581:             return new DateTimeOffset(1970, 1, 1, 0, 0, 0, TimeSpan.Zero) + TimeSpan.FromDays(days);",
      "582:         }",
      "584:         [Fact]",
      "585:         public void RoundupCurrenciesCorrectly()",
      "586:         {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "584:         [Fact]",
      "585:         public void CanDetectImage()",
      "586:         {",
      "587:             Assert.True(FileTypeDetector.IsPicture(new byte[] { 0x42, 0x4D }, \"test.bmp\"));",
      "588:             Assert.False(FileTypeDetector.IsPicture(new byte[] { 0x42, 0x4D }, \".bmp\"));",
      "589:             Assert.False(FileTypeDetector.IsPicture(new byte[] { 0x42, 0x4D }, \"test.svg\"));",
      "590:             Assert.True(FileTypeDetector.IsPicture(new byte[] { 0xFF, 0xD8, 0xFF, 0xD9 }, \"test.jpg\"));",
      "591:             Assert.True(FileTypeDetector.IsPicture(new byte[] { 0xFF, 0xD8, 0xFF, 0xD9 }, \"test.jpeg\"));",
      "592:             Assert.False(FileTypeDetector.IsPicture(new byte[] { 0xFF, 0xD8, 0xFF, 0xDA }, \"test.jpg\"));",
      "593:             Assert.False(FileTypeDetector.IsPicture(new byte[] { 0xFF, 0xD8, 0xFF }, \"test.jpg\"));",
      "594:             Assert.True(FileTypeDetector.IsPicture(new byte[] { 0x3C, 0x73, 0x76, 0x67 }, \"test.svg\"));",
      "595:             Assert.False(FileTypeDetector.IsPicture(new byte[] { 0x3C, 0x73, 0x76, 0x67 }, \"test.jpg\"));",
      "596:             Assert.False(FileTypeDetector.IsPicture(new byte[] { 0xFF }, \"e.jpg\"));",
      "597:             Assert.False(FileTypeDetector.IsPicture(new byte[] { }, \"empty.jpg\"));",
      "598:         }",
      "",
      "---------------"
    ],
    "BTCPayServer/BufferizedFormFile.cs||BTCPayServer/BufferizedFormFile.cs": [
      "File: BTCPayServer/BufferizedFormFile.cs -> BTCPayServer/BufferizedFormFile.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: using Microsoft.AspNetCore.Http;",
      "2: using System.IO;",
      "3: using System.Threading;",
      "4: using System.Threading.Tasks;",
      "6: namespace BTCPayServer",
      "7: {",
      "8:     public class BufferizedFormFile : IFormFile",
      "9:     {",
      "10:         private IFormFile _formFile;",
      "11:         private MemoryStream _content;",
      "12:         public byte[] Buffer { get; }",
      "13:         BufferizedFormFile(IFormFile formFile, byte[] content)",
      "14:         {",
      "15:             _formFile = formFile;",
      "16:             Buffer = content;",
      "17:             _content = new MemoryStream(content);",
      "18:         }",
      "20:         public string ContentType => _formFile.ContentType;",
      "22:         public string ContentDisposition => _formFile.ContentDisposition;",
      "24:         public IHeaderDictionary Headers => _formFile.Headers;",
      "26:         public long Length => _formFile.Length;",
      "28:         public string Name => _formFile.Name;",
      "30:         public string FileName => _formFile.FileName;",
      "32:         public static async Task<BufferizedFormFile> Bufferize(IFormFile formFile)",
      "33:         {",
      "34:             if (formFile is BufferizedFormFile b)",
      "35:                 return b;",
      "36:             var content = new byte[formFile.Length];",
      "37:             using var fs = formFile.OpenReadStream();",
      "38:             await fs.ReadAsync(content, 0, content.Length);",
      "39:             return new BufferizedFormFile(formFile, content);",
      "40:         }",
      "42:         public void CopyTo(Stream target)",
      "43:         {",
      "44:             _content.CopyTo(target);",
      "45:         }",
      "47:         public Task CopyToAsync(Stream target, CancellationToken cancellationToken = default)",
      "48:         {",
      "49:             return _content.CopyToAsync(target, cancellationToken);",
      "50:         }",
      "52:         public Stream OpenReadStream()",
      "53:         {",
      "54:             return _content;",
      "55:         }",
      "57:         public void Rewind()",
      "58:         {",
      "59:             _content.Seek(0, SeekOrigin.Begin);",
      "60:         }",
      "61:     }",
      "62: }",
      "",
      "---------------"
    ],
    "BTCPayServer/Controllers/UIServerController.cs||BTCPayServer/Controllers/UIServerController.cs": [
      "File: BTCPayServer/Controllers/UIServerController.cs -> BTCPayServer/Controllers/UIServerController.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "1044:             if (model.LogoFile != null)",
      "1045:             {",
      "1047:                 {",
      "1056:                     {",
      "1060:                     }",
      "1062:                     {",
      "1064:                     }",
      "1065:                 }",
      "1070:             }",
      "1071:             else if (RemoveLogoFile && !string.IsNullOrEmpty(settings.LogoFileId))",
      "1072:             {",
      "",
      "[Removed Lines]",
      "1046:                 if (model.LogoFile.ContentType.StartsWith(\"image/\", StringComparison.InvariantCulture))",
      "1049:                     if (!string.IsNullOrEmpty(settings.LogoFileId))",
      "1050:                     {",
      "1051:                         await _fileService.RemoveFile(settings.LogoFileId, userId);",
      "1052:                     }",
      "1055:                     try",
      "1057:                         var storedFile = await _fileService.AddFile(model.LogoFile, userId);",
      "1058:                         settings.LogoFileId = storedFile.Id;",
      "1059:                         settingsChanged = true;",
      "1061:                     catch (Exception e)",
      "1063:                         ModelState.AddModelError(nameof(settings.LogoFile), $\"Could not save logo: {e.Message}\");",
      "1066:                 else",
      "1067:                 {",
      "1068:                     ModelState.AddModelError(nameof(settings.LogoFile), \"The uploaded logo file needs to be an image\");",
      "1069:                 }",
      "",
      "[Added Lines]",
      "1046:                 if (model.LogoFile.Length > 1_000_000)",
      "1048:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file should be less than 1MB\";",
      "1049:                 }",
      "1050:                 else if (!model.LogoFile.ContentType.StartsWith(\"image/\", StringComparison.InvariantCulture))",
      "1051:                 {",
      "1052:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file needs to be an image\";",
      "1053:                 }",
      "1054:                 else",
      "1055:                 {",
      "1056:                     var formFile = await model.LogoFile.Bufferize();",
      "1057:                     if (!FileTypeDetector.IsPicture(formFile.Buffer, formFile.FileName))",
      "1059:                         TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file needs to be an image\";",
      "1061:                     else",
      "1063:                         model.LogoFile = formFile;",
      "1065:                         if (!string.IsNullOrEmpty(settings.LogoFileId))",
      "1066:                         {",
      "1067:                             await _fileService.RemoveFile(settings.LogoFileId, userId);",
      "1068:                         }",
      "1071:                         try",
      "1072:                         {",
      "1073:                             var storedFile = await _fileService.AddFile(model.LogoFile, userId);",
      "1074:                             settings.LogoFileId = storedFile.Id;",
      "1075:                             settingsChanged = true;",
      "1076:                         }",
      "1077:                         catch (Exception e)",
      "1078:                         {",
      "1079:                             ModelState.AddModelError(nameof(settings.LogoFile), $\"Could not save logo: {e.Message}\");",
      "1080:                         }",
      "",
      "---------------"
    ],
    "BTCPayServer/Controllers/UIStoresController.cs||BTCPayServer/Controllers/UIStoresController.cs": [
      "File: BTCPayServer/Controllers/UIStoresController.cs -> BTCPayServer/Controllers/UIStoresController.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: using BTCPayServer.Services.Wallets;",
      "28: using Microsoft.AspNetCore.Authorization;",
      "29: using Microsoft.AspNetCore.DataProtection;",
      "30: using Microsoft.AspNetCore.Identity;",
      "31: using Microsoft.AspNetCore.Mvc;",
      "32: using Microsoft.AspNetCore.Mvc.Rendering;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: using Microsoft.AspNetCore.Http;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "659:             if (model.LogoFile != null)",
      "660:             {",
      "662:                 {",
      "671:                     {",
      "674:                     }",
      "676:                     {",
      "678:                     }",
      "679:                 }",
      "684:             }",
      "685:             else if (RemoveLogoFile && !string.IsNullOrEmpty(blob.LogoFileId))",
      "686:             {",
      "",
      "[Removed Lines]",
      "661:                 if (model.LogoFile.ContentType.StartsWith(\"image/\", StringComparison.InvariantCulture))",
      "664:                     if (!string.IsNullOrEmpty(blob.LogoFileId))",
      "665:                     {",
      "666:                         await _fileService.RemoveFile(blob.LogoFileId, userId);",
      "667:                     }",
      "670:                     try",
      "672:                         var storedFile = await _fileService.AddFile(model.LogoFile, userId);",
      "673:                         blob.LogoFileId = storedFile.Id;",
      "675:                     catch (Exception e)",
      "677:                         TempData[WellKnownTempData.ErrorMessage] = $\"Could not save logo: {e.Message}\";",
      "680:                 else",
      "681:                 {",
      "682:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file needs to be an image\";",
      "683:                 }",
      "",
      "[Added Lines]",
      "662:                 if (model.LogoFile.Length > 1_000_000)",
      "664:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file should be less than 1MB\";",
      "665:                 }",
      "666:                 else if (!model.LogoFile.ContentType.StartsWith(\"image/\", StringComparison.InvariantCulture))",
      "667:                 {",
      "668:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file needs to be an image\";",
      "669:                 }",
      "670:                 else",
      "671:                 {",
      "672:                     var formFile = await model.LogoFile.Bufferize();",
      "673:                     if (!FileTypeDetector.IsPicture(formFile.Buffer, formFile.FileName))",
      "675:                         TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file needs to be an image\";",
      "677:                     else",
      "679:                         model.LogoFile = formFile;",
      "681:                         if (!string.IsNullOrEmpty(blob.LogoFileId))",
      "682:                         {",
      "683:                             await _fileService.RemoveFile(blob.LogoFileId, userId);",
      "684:                         }",
      "687:                         try",
      "688:                         {",
      "689:                             var storedFile = await _fileService.AddFile(model.LogoFile, userId);",
      "690:                             blob.LogoFileId = storedFile.Id;",
      "691:                         }",
      "692:                         catch (Exception e)",
      "693:                         {",
      "694:                             TempData[WellKnownTempData.ErrorMessage] = $\"Could not save logo: {e.Message}\";",
      "695:                         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "692:             if (model.CssFile != null)",
      "693:             {",
      "695:                 {",
      "697:                     if (!string.IsNullOrEmpty(blob.CssFileId))",
      "",
      "[Removed Lines]",
      "694:                 if (model.CssFile.ContentType.Equals(\"text/css\", StringComparison.InvariantCulture))",
      "",
      "[Added Lines]",
      "708:                 if (model.CssFile.Length > 1_000_000)",
      "709:                 {",
      "710:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded file should be less than 1MB\";",
      "711:                 }",
      "712:                 else if (!model.CssFile.ContentType.Equals(\"text/css\", StringComparison.InvariantCulture))",
      "713:                 {",
      "714:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded file needs to be a CSS file\";",
      "715:                 }",
      "716:                 else if (!model.CssFile.FileName.EndsWith(\".css\", StringComparison.OrdinalIgnoreCase))",
      "717:                 {",
      "718:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded file needs to be a CSS file\";",
      "719:                 }",
      "720:                 else",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "710:                         TempData[WellKnownTempData.ErrorMessage] = $\"Could not save CSS file: {e.Message}\";",
      "711:                     }",
      "712:                 }",
      "717:             }",
      "718:             else if (RemoveCssFile && !string.IsNullOrEmpty(blob.CssFileId))",
      "719:             {",
      "",
      "[Removed Lines]",
      "713:                 else",
      "714:                 {",
      "715:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded file needs to be a CSS file\";",
      "716:                 }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "BTCPayServer/Extensions.cs||BTCPayServer/Extensions.cs": [
      "File: BTCPayServer/Extensions.cs -> BTCPayServer/Extensions.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: {",
      "37:     public static class Extensions",
      "38:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39:         public static Task<BufferizedFormFile> Bufferize(this IFormFile formFile)",
      "40:         {",
      "41:             return BufferizedFormFile.Bufferize(formFile);",
      "42:         }",
      "",
      "---------------"
    ],
    "BTCPayServer/FileTypeDetector.cs||BTCPayServer/FileTypeDetector.cs": [
      "File: BTCPayServer/FileTypeDetector.cs -> BTCPayServer/FileTypeDetector.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #nullable enable",
      "2: using System;",
      "3: using System.Linq;",
      "4: using Microsoft.EntityFrameworkCore;",
      "5: using NBitcoin.DataEncoders;",
      "7: namespace BTCPayServer",
      "8: {",
      "9:     public class FileTypeDetector",
      "10:     {",
      "13:         const string pictureSigs =",
      "14:             \"JPEG2000 image files,00 00 00 0C 6A 50 20 20,JP2,Picture,0,(null)\\n\" +",
      "15:             \"Bitmap image,42 4D,BMP|DIB,Picture,0,(null)\\n\" +",
      "16:             \"GIF file,47 49 46 38,GIF,Picture,0,00 3B\\n\" +",
      "17:             \"PNG image,89 50 4E 47 0D 0A 1A 0A,PNG|APNG,Picture,0,49 45 4E 44 AE 42 60 82\\n\" +",
      "18:             \"Generic JPEGimage fil,FF D8,JPE|JPEG|JPG,Picture,0,FF D9\\n\" +",
      "19:             \"JPEG-EXIF-SPIFF images,FF D8 FF,JFIF|JPE|JPEG|JPG,Picture,0,FF D9\\n\" +",
      "20:             \"SVG images, 3C 73 76 67,SVG,Picture,0,(null)\\n\" +",
      "21:             \"Google WebP image file, 52 49 46 46 XX XX XX XX 57 45 42 50,WEBP,Picture,0,(null)\\n\" +",
      "22:             \"AVIF image file, XX XX XX XX 66 74 79 70,AVIF,Picture,0,(null)\\n\";",
      "24:         readonly static (int[] Header, int[]? Trailer, string[] Extensions)[] headerTrailers;",
      "25:         static FileTypeDetector()",
      "26:         {",
      "27:             var lines = pictureSigs.Split('\\n', StringSplitOptions.RemoveEmptyEntries);",
      "28:             headerTrailers = new (int[] Header, int[]? Trailer, string[] Extensions)[lines.Length];",
      "29:             for (int i = 0; i < lines.Length; i++)",
      "30:             {",
      "31:                 var cells = lines[i].Split(',');",
      "32:                 headerTrailers[i] = (",
      "33:                     DecodeData(cells[1]),",
      "34:                     cells[^1] == \"(null)\" ? null : DecodeData(cells[^1]),",
      "35:                     cells[2].Split('|').Select(p => $\".{p}\").ToArray()",
      "36:                     );",
      "37:             }",
      "38:         }",
      "40:         private static int[] DecodeData(string pattern)",
      "41:         {",
      "42:             pattern = pattern.Replace(\" \", \"\");",
      "43:             int[] res = new int[pattern.Length / 2];",
      "44:             for (int i = 0; i < pattern.Length; i+=2)",
      "45:             {",
      "46:                 var b = pattern[i..(i + 2)];",
      "47:                 if (b == \"XX\")",
      "48:                     res[i/2] = -1;",
      "49:                 else",
      "50:                     res[i/2] = byte.Parse(b, System.Globalization.NumberStyles.HexNumber);",
      "51:             }",
      "52:             return res;",
      "53:         }",
      "55:         public static bool IsPicture(byte[] bytes, string? filename)",
      "56:         {",
      "57:             for (int i = 0; i < headerTrailers.Length; i++)",
      "58:             {",
      "59:                 if (headerTrailers[i].Header is int[] header)",
      "60:                 {",
      "61:                     if (header.Length > bytes.Length)",
      "62:                         goto next;",
      "63:                     for (int x = 0; x < header.Length; x++)",
      "64:                     {",
      "65:                         if (bytes[x] != header[x] && header[x] != -1)",
      "66:                             goto next;",
      "67:                     }",
      "68:                 }",
      "69:                 if (headerTrailers[i].Trailer is int[] trailer)",
      "70:                 {",
      "71:                     if (trailer.Length > bytes.Length)",
      "72:                         goto next;",
      "73:                     for (int x = 0; x < trailer.Length; x++)",
      "74:                     {",
      "75:                         if (bytes[^(trailer.Length - x)] != trailer[x] && trailer[x] != -1)",
      "76:                             goto next;",
      "77:                     }",
      "78:                 }",
      "80:                 if (filename is not null)",
      "81:                 {",
      "82:                     if (!headerTrailers[i].Extensions.Any(ext => filename.Length > ext.Length && filename.EndsWith(ext, StringComparison.OrdinalIgnoreCase)))",
      "83:                         return false;",
      "84:                 }",
      "85:                 return true;",
      "86: next:",
      "87:                 ;",
      "88:             }",
      "89:             return false;",
      "90:         }",
      "91:     }",
      "92: }",
      "",
      "---------------"
    ],
    "BTCPayServer/Storage/StorageExtensions.cs||BTCPayServer/Storage/StorageExtensions.cs": [
      "File: BTCPayServer/Storage/StorageExtensions.cs -> BTCPayServer/Storage/StorageExtensions.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:                     context.Context.Response.Headers[\"Content-Disposition\"] = \"attachment\";",
      "77:                 }",
      "78:                 context.Context.Response.Headers[\"Content-Security-Policy\"] = \"script-src ;\";",
      "79:             };",
      "80:         }",
      "81:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "79:                 context.Context.Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fea27b900c0a9be2b8ae0079b8445499361cad88",
      "candidate_info": {
        "commit_hash": "fea27b900c0a9be2b8ae0079b8445499361cad88",
        "repo": "btcpayserver/btcpayserver",
        "commit_url": "https://github.com/btcpayserver/btcpayserver/commit/fea27b900c0a9be2b8ae0079b8445499361cad88",
        "files": [
          "BTCPayServer.Tests/FastTests.cs",
          "BTCPayServer/BufferizedFormFile.cs",
          "BTCPayServer/Controllers/UIServerController.cs",
          "BTCPayServer/Controllers/UIStoresController.cs",
          "BTCPayServer/Extensions.cs",
          "BTCPayServer/FileTypeDetector.cs",
          "BTCPayServer/Storage/StorageExtensions.cs"
        ],
        "message": "Harden file type inputs (#4635)",
        "before_after_code_files": [
          "BTCPayServer.Tests/FastTests.cs||BTCPayServer.Tests/FastTests.cs",
          "BTCPayServer/BufferizedFormFile.cs||BTCPayServer/BufferizedFormFile.cs",
          "BTCPayServer/Controllers/UIServerController.cs||BTCPayServer/Controllers/UIServerController.cs",
          "BTCPayServer/Controllers/UIStoresController.cs||BTCPayServer/Controllers/UIStoresController.cs",
          "BTCPayServer/Extensions.cs||BTCPayServer/Extensions.cs",
          "BTCPayServer/FileTypeDetector.cs||BTCPayServer/FileTypeDetector.cs",
          "BTCPayServer/Storage/StorageExtensions.cs||BTCPayServer/Storage/StorageExtensions.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/btcpayserver/btcpayserver/pull/4635"
        ],
        "olp_code_files": {
          "patch": [
            "BTCPayServer.Tests/FastTests.cs||BTCPayServer.Tests/FastTests.cs",
            "BTCPayServer/BufferizedFormFile.cs||BTCPayServer/BufferizedFormFile.cs",
            "BTCPayServer/Controllers/UIServerController.cs||BTCPayServer/Controllers/UIServerController.cs",
            "BTCPayServer/Controllers/UIStoresController.cs||BTCPayServer/Controllers/UIStoresController.cs",
            "BTCPayServer/Extensions.cs||BTCPayServer/Extensions.cs",
            "BTCPayServer/FileTypeDetector.cs||BTCPayServer/FileTypeDetector.cs",
            "BTCPayServer/Storage/StorageExtensions.cs||BTCPayServer/Storage/StorageExtensions.cs"
          ],
          "candidate": [
            "BTCPayServer.Tests/FastTests.cs||BTCPayServer.Tests/FastTests.cs",
            "BTCPayServer/BufferizedFormFile.cs||BTCPayServer/BufferizedFormFile.cs",
            "BTCPayServer/Controllers/UIServerController.cs||BTCPayServer/Controllers/UIServerController.cs",
            "BTCPayServer/Controllers/UIStoresController.cs||BTCPayServer/Controllers/UIStoresController.cs",
            "BTCPayServer/Extensions.cs||BTCPayServer/Extensions.cs",
            "BTCPayServer/FileTypeDetector.cs||BTCPayServer/FileTypeDetector.cs",
            "BTCPayServer/Storage/StorageExtensions.cs||BTCPayServer/Storage/StorageExtensions.cs"
          ]
        }
      },
      "candidate_diff": {
        "BTCPayServer.Tests/FastTests.cs||BTCPayServer.Tests/FastTests.cs": [
          "File: BTCPayServer.Tests/FastTests.cs -> BTCPayServer.Tests/FastTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:             return new DateTimeOffset(1970, 1, 1, 0, 0, 0, TimeSpan.Zero) + TimeSpan.FromDays(days);",
          "582:         }",
          "584:         [Fact]",
          "585:         public void RoundupCurrenciesCorrectly()",
          "586:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584:         [Fact]",
          "585:         public void CanDetectImage()",
          "586:         {",
          "587:             Assert.True(FileTypeDetector.IsPicture(new byte[] { 0x42, 0x4D }, \"test.bmp\"));",
          "588:             Assert.False(FileTypeDetector.IsPicture(new byte[] { 0x42, 0x4D }, \".bmp\"));",
          "589:             Assert.False(FileTypeDetector.IsPicture(new byte[] { 0x42, 0x4D }, \"test.svg\"));",
          "590:             Assert.True(FileTypeDetector.IsPicture(new byte[] { 0xFF, 0xD8, 0xFF, 0xD9 }, \"test.jpg\"));",
          "591:             Assert.True(FileTypeDetector.IsPicture(new byte[] { 0xFF, 0xD8, 0xFF, 0xD9 }, \"test.jpeg\"));",
          "592:             Assert.False(FileTypeDetector.IsPicture(new byte[] { 0xFF, 0xD8, 0xFF, 0xDA }, \"test.jpg\"));",
          "593:             Assert.False(FileTypeDetector.IsPicture(new byte[] { 0xFF, 0xD8, 0xFF }, \"test.jpg\"));",
          "594:             Assert.True(FileTypeDetector.IsPicture(new byte[] { 0x3C, 0x73, 0x76, 0x67 }, \"test.svg\"));",
          "595:             Assert.False(FileTypeDetector.IsPicture(new byte[] { 0x3C, 0x73, 0x76, 0x67 }, \"test.jpg\"));",
          "596:             Assert.False(FileTypeDetector.IsPicture(new byte[] { 0xFF }, \"e.jpg\"));",
          "597:             Assert.False(FileTypeDetector.IsPicture(new byte[] { }, \"empty.jpg\"));",
          "598:         }",
          "",
          "---------------"
        ],
        "BTCPayServer/BufferizedFormFile.cs||BTCPayServer/BufferizedFormFile.cs": [
          "File: BTCPayServer/BufferizedFormFile.cs -> BTCPayServer/BufferizedFormFile.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: using Microsoft.AspNetCore.Http;",
          "2: using System.IO;",
          "3: using System.Threading;",
          "4: using System.Threading.Tasks;",
          "6: namespace BTCPayServer",
          "7: {",
          "8:     public class BufferizedFormFile : IFormFile",
          "9:     {",
          "10:         private IFormFile _formFile;",
          "11:         private MemoryStream _content;",
          "12:         public byte[] Buffer { get; }",
          "13:         BufferizedFormFile(IFormFile formFile, byte[] content)",
          "14:         {",
          "15:             _formFile = formFile;",
          "16:             Buffer = content;",
          "17:             _content = new MemoryStream(content);",
          "18:         }",
          "20:         public string ContentType => _formFile.ContentType;",
          "22:         public string ContentDisposition => _formFile.ContentDisposition;",
          "24:         public IHeaderDictionary Headers => _formFile.Headers;",
          "26:         public long Length => _formFile.Length;",
          "28:         public string Name => _formFile.Name;",
          "30:         public string FileName => _formFile.FileName;",
          "32:         public static async Task<BufferizedFormFile> Bufferize(IFormFile formFile)",
          "33:         {",
          "34:             if (formFile is BufferizedFormFile b)",
          "35:                 return b;",
          "36:             var content = new byte[formFile.Length];",
          "37:             using var fs = formFile.OpenReadStream();",
          "38:             await fs.ReadAsync(content, 0, content.Length);",
          "39:             return new BufferizedFormFile(formFile, content);",
          "40:         }",
          "42:         public void CopyTo(Stream target)",
          "43:         {",
          "44:             _content.CopyTo(target);",
          "45:         }",
          "47:         public Task CopyToAsync(Stream target, CancellationToken cancellationToken = default)",
          "48:         {",
          "49:             return _content.CopyToAsync(target, cancellationToken);",
          "50:         }",
          "52:         public Stream OpenReadStream()",
          "53:         {",
          "54:             return _content;",
          "55:         }",
          "57:         public void Rewind()",
          "58:         {",
          "59:             _content.Seek(0, SeekOrigin.Begin);",
          "60:         }",
          "61:     }",
          "62: }",
          "",
          "---------------"
        ],
        "BTCPayServer/Controllers/UIServerController.cs||BTCPayServer/Controllers/UIServerController.cs": [
          "File: BTCPayServer/Controllers/UIServerController.cs -> BTCPayServer/Controllers/UIServerController.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044:             if (model.LogoFile != null)",
          "1045:             {",
          "1047:                 {",
          "1056:                     {",
          "1060:                     }",
          "1062:                     {",
          "1064:                     }",
          "1065:                 }",
          "1070:             }",
          "1071:             else if (RemoveLogoFile && !string.IsNullOrEmpty(settings.LogoFileId))",
          "1072:             {",
          "",
          "[Removed Lines]",
          "1046:                 if (model.LogoFile.ContentType.StartsWith(\"image/\", StringComparison.InvariantCulture))",
          "1049:                     if (!string.IsNullOrEmpty(settings.LogoFileId))",
          "1050:                     {",
          "1051:                         await _fileService.RemoveFile(settings.LogoFileId, userId);",
          "1052:                     }",
          "1055:                     try",
          "1057:                         var storedFile = await _fileService.AddFile(model.LogoFile, userId);",
          "1058:                         settings.LogoFileId = storedFile.Id;",
          "1059:                         settingsChanged = true;",
          "1061:                     catch (Exception e)",
          "1063:                         ModelState.AddModelError(nameof(settings.LogoFile), $\"Could not save logo: {e.Message}\");",
          "1066:                 else",
          "1067:                 {",
          "1068:                     ModelState.AddModelError(nameof(settings.LogoFile), \"The uploaded logo file needs to be an image\");",
          "1069:                 }",
          "",
          "[Added Lines]",
          "1046:                 if (model.LogoFile.Length > 1_000_000)",
          "1048:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file should be less than 1MB\";",
          "1049:                 }",
          "1050:                 else if (!model.LogoFile.ContentType.StartsWith(\"image/\", StringComparison.InvariantCulture))",
          "1051:                 {",
          "1052:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file needs to be an image\";",
          "1053:                 }",
          "1054:                 else",
          "1055:                 {",
          "1056:                     var formFile = await model.LogoFile.Bufferize();",
          "1057:                     if (!FileTypeDetector.IsPicture(formFile.Buffer, formFile.FileName))",
          "1059:                         TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file needs to be an image\";",
          "1061:                     else",
          "1063:                         model.LogoFile = formFile;",
          "1065:                         if (!string.IsNullOrEmpty(settings.LogoFileId))",
          "1066:                         {",
          "1067:                             await _fileService.RemoveFile(settings.LogoFileId, userId);",
          "1068:                         }",
          "1071:                         try",
          "1072:                         {",
          "1073:                             var storedFile = await _fileService.AddFile(model.LogoFile, userId);",
          "1074:                             settings.LogoFileId = storedFile.Id;",
          "1075:                             settingsChanged = true;",
          "1076:                         }",
          "1077:                         catch (Exception e)",
          "1078:                         {",
          "1079:                             ModelState.AddModelError(nameof(settings.LogoFile), $\"Could not save logo: {e.Message}\");",
          "1080:                         }",
          "",
          "---------------"
        ],
        "BTCPayServer/Controllers/UIStoresController.cs||BTCPayServer/Controllers/UIStoresController.cs": [
          "File: BTCPayServer/Controllers/UIStoresController.cs -> BTCPayServer/Controllers/UIStoresController.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: using BTCPayServer.Services.Wallets;",
          "28: using Microsoft.AspNetCore.Authorization;",
          "29: using Microsoft.AspNetCore.DataProtection;",
          "30: using Microsoft.AspNetCore.Identity;",
          "31: using Microsoft.AspNetCore.Mvc;",
          "32: using Microsoft.AspNetCore.Mvc.Rendering;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: using Microsoft.AspNetCore.Http;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "659:             if (model.LogoFile != null)",
          "660:             {",
          "662:                 {",
          "671:                     {",
          "674:                     }",
          "676:                     {",
          "678:                     }",
          "679:                 }",
          "684:             }",
          "685:             else if (RemoveLogoFile && !string.IsNullOrEmpty(blob.LogoFileId))",
          "686:             {",
          "",
          "[Removed Lines]",
          "661:                 if (model.LogoFile.ContentType.StartsWith(\"image/\", StringComparison.InvariantCulture))",
          "664:                     if (!string.IsNullOrEmpty(blob.LogoFileId))",
          "665:                     {",
          "666:                         await _fileService.RemoveFile(blob.LogoFileId, userId);",
          "667:                     }",
          "670:                     try",
          "672:                         var storedFile = await _fileService.AddFile(model.LogoFile, userId);",
          "673:                         blob.LogoFileId = storedFile.Id;",
          "675:                     catch (Exception e)",
          "677:                         TempData[WellKnownTempData.ErrorMessage] = $\"Could not save logo: {e.Message}\";",
          "680:                 else",
          "681:                 {",
          "682:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file needs to be an image\";",
          "683:                 }",
          "",
          "[Added Lines]",
          "662:                 if (model.LogoFile.Length > 1_000_000)",
          "664:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file should be less than 1MB\";",
          "665:                 }",
          "666:                 else if (!model.LogoFile.ContentType.StartsWith(\"image/\", StringComparison.InvariantCulture))",
          "667:                 {",
          "668:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file needs to be an image\";",
          "669:                 }",
          "670:                 else",
          "671:                 {",
          "672:                     var formFile = await model.LogoFile.Bufferize();",
          "673:                     if (!FileTypeDetector.IsPicture(formFile.Buffer, formFile.FileName))",
          "675:                         TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file needs to be an image\";",
          "677:                     else",
          "679:                         model.LogoFile = formFile;",
          "681:                         if (!string.IsNullOrEmpty(blob.LogoFileId))",
          "682:                         {",
          "683:                             await _fileService.RemoveFile(blob.LogoFileId, userId);",
          "684:                         }",
          "687:                         try",
          "688:                         {",
          "689:                             var storedFile = await _fileService.AddFile(model.LogoFile, userId);",
          "690:                             blob.LogoFileId = storedFile.Id;",
          "691:                         }",
          "692:                         catch (Exception e)",
          "693:                         {",
          "694:                             TempData[WellKnownTempData.ErrorMessage] = $\"Could not save logo: {e.Message}\";",
          "695:                         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "692:             if (model.CssFile != null)",
          "693:             {",
          "695:                 {",
          "697:                     if (!string.IsNullOrEmpty(blob.CssFileId))",
          "",
          "[Removed Lines]",
          "694:                 if (model.CssFile.ContentType.Equals(\"text/css\", StringComparison.InvariantCulture))",
          "",
          "[Added Lines]",
          "708:                 if (model.CssFile.Length > 1_000_000)",
          "709:                 {",
          "710:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded file should be less than 1MB\";",
          "711:                 }",
          "712:                 else if (!model.CssFile.ContentType.Equals(\"text/css\", StringComparison.InvariantCulture))",
          "713:                 {",
          "714:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded file needs to be a CSS file\";",
          "715:                 }",
          "716:                 else if (!model.CssFile.FileName.EndsWith(\".css\", StringComparison.OrdinalIgnoreCase))",
          "717:                 {",
          "718:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded file needs to be a CSS file\";",
          "719:                 }",
          "720:                 else",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "710:                         TempData[WellKnownTempData.ErrorMessage] = $\"Could not save CSS file: {e.Message}\";",
          "711:                     }",
          "712:                 }",
          "717:             }",
          "718:             else if (RemoveCssFile && !string.IsNullOrEmpty(blob.CssFileId))",
          "719:             {",
          "",
          "[Removed Lines]",
          "713:                 else",
          "714:                 {",
          "715:                     TempData[WellKnownTempData.ErrorMessage] = \"The uploaded file needs to be a CSS file\";",
          "716:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "BTCPayServer/Extensions.cs||BTCPayServer/Extensions.cs": [
          "File: BTCPayServer/Extensions.cs -> BTCPayServer/Extensions.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: {",
          "37:     public static class Extensions",
          "38:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:         public static Task<BufferizedFormFile> Bufferize(this IFormFile formFile)",
          "40:         {",
          "41:             return BufferizedFormFile.Bufferize(formFile);",
          "42:         }",
          "",
          "---------------"
        ],
        "BTCPayServer/FileTypeDetector.cs||BTCPayServer/FileTypeDetector.cs": [
          "File: BTCPayServer/FileTypeDetector.cs -> BTCPayServer/FileTypeDetector.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #nullable enable",
          "2: using System;",
          "3: using System.Linq;",
          "4: using Microsoft.EntityFrameworkCore;",
          "5: using NBitcoin.DataEncoders;",
          "7: namespace BTCPayServer",
          "8: {",
          "9:     public class FileTypeDetector",
          "10:     {",
          "13:         const string pictureSigs =",
          "14:             \"JPEG2000 image files,00 00 00 0C 6A 50 20 20,JP2,Picture,0,(null)\\n\" +",
          "15:             \"Bitmap image,42 4D,BMP|DIB,Picture,0,(null)\\n\" +",
          "16:             \"GIF file,47 49 46 38,GIF,Picture,0,00 3B\\n\" +",
          "17:             \"PNG image,89 50 4E 47 0D 0A 1A 0A,PNG|APNG,Picture,0,49 45 4E 44 AE 42 60 82\\n\" +",
          "18:             \"Generic JPEGimage fil,FF D8,JPE|JPEG|JPG,Picture,0,FF D9\\n\" +",
          "19:             \"JPEG-EXIF-SPIFF images,FF D8 FF,JFIF|JPE|JPEG|JPG,Picture,0,FF D9\\n\" +",
          "20:             \"SVG images, 3C 73 76 67,SVG,Picture,0,(null)\\n\" +",
          "21:             \"Google WebP image file, 52 49 46 46 XX XX XX XX 57 45 42 50,WEBP,Picture,0,(null)\\n\" +",
          "22:             \"AVIF image file, XX XX XX XX 66 74 79 70,AVIF,Picture,0,(null)\\n\";",
          "24:         readonly static (int[] Header, int[]? Trailer, string[] Extensions)[] headerTrailers;",
          "25:         static FileTypeDetector()",
          "26:         {",
          "27:             var lines = pictureSigs.Split('\\n', StringSplitOptions.RemoveEmptyEntries);",
          "28:             headerTrailers = new (int[] Header, int[]? Trailer, string[] Extensions)[lines.Length];",
          "29:             for (int i = 0; i < lines.Length; i++)",
          "30:             {",
          "31:                 var cells = lines[i].Split(',');",
          "32:                 headerTrailers[i] = (",
          "33:                     DecodeData(cells[1]),",
          "34:                     cells[^1] == \"(null)\" ? null : DecodeData(cells[^1]),",
          "35:                     cells[2].Split('|').Select(p => $\".{p}\").ToArray()",
          "36:                     );",
          "37:             }",
          "38:         }",
          "40:         private static int[] DecodeData(string pattern)",
          "41:         {",
          "42:             pattern = pattern.Replace(\" \", \"\");",
          "43:             int[] res = new int[pattern.Length / 2];",
          "44:             for (int i = 0; i < pattern.Length; i+=2)",
          "45:             {",
          "46:                 var b = pattern[i..(i + 2)];",
          "47:                 if (b == \"XX\")",
          "48:                     res[i/2] = -1;",
          "49:                 else",
          "50:                     res[i/2] = byte.Parse(b, System.Globalization.NumberStyles.HexNumber);",
          "51:             }",
          "52:             return res;",
          "53:         }",
          "55:         public static bool IsPicture(byte[] bytes, string? filename)",
          "56:         {",
          "57:             for (int i = 0; i < headerTrailers.Length; i++)",
          "58:             {",
          "59:                 if (headerTrailers[i].Header is int[] header)",
          "60:                 {",
          "61:                     if (header.Length > bytes.Length)",
          "62:                         goto next;",
          "63:                     for (int x = 0; x < header.Length; x++)",
          "64:                     {",
          "65:                         if (bytes[x] != header[x] && header[x] != -1)",
          "66:                             goto next;",
          "67:                     }",
          "68:                 }",
          "69:                 if (headerTrailers[i].Trailer is int[] trailer)",
          "70:                 {",
          "71:                     if (trailer.Length > bytes.Length)",
          "72:                         goto next;",
          "73:                     for (int x = 0; x < trailer.Length; x++)",
          "74:                     {",
          "75:                         if (bytes[^(trailer.Length - x)] != trailer[x] && trailer[x] != -1)",
          "76:                             goto next;",
          "77:                     }",
          "78:                 }",
          "80:                 if (filename is not null)",
          "81:                 {",
          "82:                     if (!headerTrailers[i].Extensions.Any(ext => filename.Length > ext.Length && filename.EndsWith(ext, StringComparison.OrdinalIgnoreCase)))",
          "83:                         return false;",
          "84:                 }",
          "85:                 return true;",
          "86: next:",
          "87:                 ;",
          "88:             }",
          "89:             return false;",
          "90:         }",
          "91:     }",
          "92: }",
          "",
          "---------------"
        ],
        "BTCPayServer/Storage/StorageExtensions.cs||BTCPayServer/Storage/StorageExtensions.cs": [
          "File: BTCPayServer/Storage/StorageExtensions.cs -> BTCPayServer/Storage/StorageExtensions.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:                     context.Context.Response.Headers[\"Content-Disposition\"] = \"attachment\";",
          "77:                 }",
          "78:                 context.Context.Response.Headers[\"Content-Security-Policy\"] = \"script-src ;\";",
          "79:             };",
          "80:         }",
          "81:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:                 context.Context.Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}