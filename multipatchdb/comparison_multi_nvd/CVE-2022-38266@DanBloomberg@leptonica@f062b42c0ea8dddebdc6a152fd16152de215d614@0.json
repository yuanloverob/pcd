{
  "cve_id": "CVE-2022-38266",
  "cve_desc": "An issue in the Leptonica linked library (v1.79.0) allows attackers to cause an arithmetic exception leading to a Denial of Service (DoS) via a crafted JPEG file.",
  "repo": "DanBloomberg/leptonica",
  "patch_hash": "f062b42c0ea8dddebdc6a152fd16152de215d614",
  "patch_info": {
    "commit_hash": "f062b42c0ea8dddebdc6a152fd16152de215d614",
    "repo": "DanBloomberg/leptonica",
    "commit_url": "https://github.com/DanBloomberg/leptonica/commit/f062b42c0ea8dddebdc6a152fd16152de215d614",
    "files": [
      "src/convolve.c"
    ],
    "message": "Issue 26393: morphapp_fuzzer: Divide-by-zero in blockconvLow * Removed the code that allowed divide by zero for tiny pix * Ditto for 4 other block convolution functions.",
    "before_after_code_files": [
      "src/convolve.c||src/convolve.c"
    ]
  },
  "patch_diff": {
    "src/convolve.c||src/convolve.c": [
      "File: src/convolve.c -> src/convolve.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "140:     if (!pix)",
      "141:         return (PIX *)ERROR_PTR(\"pix not defined\", procName, NULL);",
      "144:     pixGetDimensions(pix, &w, &h, &d);",
      "145:     if (w < 2 * wc + 1 || h < 2 * hc + 1) {",
      "150:     }",
      "155:     if ((d == 2 || d == 4 || d == 8) && pixGetColormap(pix)) {",
      "",
      "[Removed Lines]",
      "142:     if (wc < 0) wc = 0;",
      "143:     if (hc < 0) hc = 0;",
      "146:         wc = L_MIN(wc, (w - 1) / 2);",
      "147:         hc = L_MIN(hc, (h - 1) / 2);",
      "148:         L_WARNING(\"kernel too large; reducing!\\n\", procName);",
      "149:         L_INFO(\"wc = %d, hc = %d\\n\", procName, wc, hc);",
      "152:         return pixCopy(NULL, pix);",
      "",
      "[Added Lines]",
      "143:     if (wc <= 0 || hc <= 0)",
      "144:         return pixCopy(NULL, pix);",
      "147:         L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\",",
      "148:                 procName, w, wc, h, hc);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "227:     pixGetDimensions(pixs, &w, &h, &d);",
      "228:     if (d != 8)",
      "229:         return (PIX *)ERROR_PTR(\"pixs not 8 bpp\", procName, NULL);",
      "233:         return pixCopy(NULL, pixs);",
      "234:     if (w < 2 * wc + 1 || h < 2 * hc + 1) {",
      "237:         return pixCopy(NULL, pixs);",
      "238:     }",
      "",
      "[Removed Lines]",
      "230:     if (wc < 0) wc = 0;",
      "231:     if (hc < 0) hc = 0;",
      "235:         L_WARNING(\"kernel too large; returning a copy\\n\", procName);",
      "236:         L_INFO(\"w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);",
      "",
      "[Added Lines]",
      "232:         L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\",",
      "233:                 procName, w, wc, h, hc);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "650:     pixGetDimensions(pixs, &w, &h, &d);",
      "651:     if (d != 8)",
      "652:         return (PIX *)ERROR_PTR(\"pixs not 8 bpp\", procName, NULL);",
      "655:     if (w < 2 * wc + 1 || h < 2 * hc + 1) {",
      "662:         return pixCopy(NULL, pixs);",
      "664:     if ((pixsb = pixAddMirroredBorder(pixs, wc + 1, wc, hc + 1, hc)) == NULL)",
      "665:         return (PIX *)ERROR_PTR(\"pixsb not made\", procName, NULL);",
      "",
      "[Removed Lines]",
      "653:     if (wc < 0) wc = 0;",
      "654:     if (hc < 0) hc = 0;",
      "656:         wc = L_MIN(wc, (w - 1) / 2);",
      "657:         hc = L_MIN(hc, (h - 1) / 2);",
      "658:         L_WARNING(\"kernel too large; reducing!\\n\", procName);",
      "659:         L_INFO(\"wc = %d, hc = %d\\n\", procName, wc, hc);",
      "660:     }",
      "",
      "[Added Lines]",
      "651:         return pixCopy(NULL, pixs);",
      "653:         L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\",",
      "654:                 procName, w, wc, h, hc);",
      "656:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "742:     if (!pix)",
      "743:         return (PIX *)ERROR_PTR(\"pix not defined\", procName, NULL);",
      "754:         return pixCopy(NULL, pix);",
      "755:     if (nx <= 1 && ny <= 1)",
      "756:         return pixBlockconv(pix, wc, hc);",
      "",
      "[Removed Lines]",
      "744:     if (wc < 0) wc = 0;",
      "745:     if (hc < 0) hc = 0;",
      "746:     pixGetDimensions(pix, &w, &h, &d);",
      "747:     if (w < 2 * wc + 3 || h < 2 * hc + 3) {",
      "748:         wc = L_MAX(0, L_MIN(wc, (w - 3) / 2));",
      "749:         hc = L_MAX(0, L_MIN(hc, (h - 3) / 2));",
      "750:         L_WARNING(\"kernel too large; reducing!\\n\", procName);",
      "751:         L_INFO(\"wc = %d, hc = %d\\n\", procName, wc, hc);",
      "752:     }",
      "",
      "[Added Lines]",
      "743:     pixGetDimensions(pix, &w, &h, &d);",
      "744:     if (w < 2 * wc + 3 || h < 2 * hc + 3) {",
      "745:         L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\",",
      "746:                 procName, w, wc, h, hc);",
      "747:         return pixCopy(NULL, pix);",
      "748:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "870:     pixGetDimensions(pixs, &w, &h, &d);",
      "871:     if (d != 8)",
      "872:         return (PIX *)ERROR_PTR(\"pixs not 8 bpp\", procName, NULL);",
      "875:     if (w < 2 * wc + 3 || h < 2 * hc + 3) {",
      "882:         return pixCopy(NULL, pixs);",
      "883:     wd = w - 2 * wc;",
      "884:     hd = h - 2 * hc;",
      "",
      "[Removed Lines]",
      "873:     if (wc < 0) wc = 0;",
      "874:     if (hc < 0) hc = 0;",
      "876:         wc = L_MAX(0, L_MIN(wc, (w - 3) / 2));",
      "877:         hc = L_MAX(0, L_MIN(hc, (h - 3) / 2));",
      "878:         L_WARNING(\"kernel too large; reducing!\\n\", procName);",
      "879:         L_INFO(\"wc = %d, hc = %d\\n\", procName, wc, hc);",
      "880:     }",
      "881:     if (wc == 0 && hc == 0)",
      "",
      "[Added Lines]",
      "867:         return pixCopy(NULL, pixs);",
      "869:         L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\",",
      "870:                 procName, w, wc, h, hc);",
      "872:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2bb3f8b0c3072ced150cf4a1e73f8d0860dfe0bd",
      "candidate_info": {
        "commit_hash": "2bb3f8b0c3072ced150cf4a1e73f8d0860dfe0bd",
        "repo": "DanBloomberg/leptonica",
        "commit_url": "https://github.com/DanBloomberg/leptonica/commit/2bb3f8b0c3072ced150cf4a1e73f8d0860dfe0bd",
        "files": [
          "src/convolve.c"
        ],
        "message": "Modify blocksum convolution functions * reinstate ability to reduce the kernel size if necessary",
        "before_after_code_files": [
          "src/convolve.c||src/convolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/convolve.c||src/convolve.c"
          ],
          "candidate": [
            "src/convolve.c||src/convolve.c"
          ]
        }
      },
      "candidate_diff": {
        "src/convolve.c||src/convolve.c": [
          "File: src/convolve.c -> src/convolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:         return pixCopy(NULL, pix);",
          "145:     pixGetDimensions(pix, &w, &h, &d);",
          "146:     if (w < 2 * wc + 1 || h < 2 * hc + 1) {",
          "150:     }",
          "153:     if ((d == 2 || d == 4 || d == 8) && pixGetColormap(pix)) {",
          "",
          "[Removed Lines]",
          "147:         L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\",",
          "148:                 procName, w, wc, h, hc);",
          "",
          "[Added Lines]",
          "147:         L_WARNING(\"kernel too large: wc = %d, hc = %d, w = %d, h = %d; \"",
          "148:                   \"reducing!\\n\", procName, wc, hc, w, h);",
          "149:         wc = L_MIN(wc, (w - 1) / 2);",
          "150:         hc = L_MIN(hc, (h - 1) / 2);",
          "153:         return pixCopy(NULL, pix);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:         return pixCopy(NULL, pixs);",
          "231:     if (w < 2 * wc + 1 || h < 2 * hc + 1) {",
          "235:     }",
          "237:     if (pixacc) {",
          "238:         if (pixGetDepth(pixacc) == 32) {",
          "",
          "[Removed Lines]",
          "232:         L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\",",
          "233:                 procName, w, wc, h, hc);",
          "234:         return pixCopy(NULL, pixs);",
          "",
          "[Added Lines]",
          "235:         L_WARNING(\"kernel too large: wc = %d, hc = %d, w = %d, h = %d; \"",
          "236:                   \"reducing!\\n\", procName, wc, hc, w, h);",
          "237:         wc = L_MIN(wc, (w - 1) / 2);",
          "238:         hc = L_MIN(hc, (h - 1) / 2);",
          "240:     if (wc == 0 || hc == 0)",
          "241:         return pixCopy(NULL, pixs);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "651:         return pixCopy(NULL, pixs);",
          "652:     if (w < 2 * wc + 1 || h < 2 * hc + 1) {",
          "656:     }",
          "658:     if ((pixsb = pixAddMirroredBorder(pixs, wc + 1, wc, hc + 1, hc)) == NULL)",
          "659:         return (PIX *)ERROR_PTR(\"pixsb not made\", procName, NULL);",
          "",
          "[Removed Lines]",
          "653:         L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\",",
          "654:                 procName, w, wc, h, hc);",
          "655:         return pixCopy(NULL, pixs);",
          "",
          "[Added Lines]",
          "660:         L_WARNING(\"kernel too large: wc = %d, hc = %d, w = %d, h = %d; \"",
          "661:                   \"reducing!\\n\", procName, wc, hc, w, h);",
          "662:         wc = L_MIN(wc, (w - 1) / 2);",
          "663:         hc = L_MIN(hc, (h - 1) / 2);",
          "665:     if (wc == 0 || hc == 0)",
          "666:         return pixCopy(NULL, pixs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "742:         return pixBlockconv(pix, wc, hc);",
          "743:     pixGetDimensions(pix, &w, &h, &d);",
          "744:     if (w < 2 * wc + 3 || h < 2 * hc + 3) {",
          "748:     }",
          "",
          "[Removed Lines]",
          "745:         L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\",",
          "746:                 procName, w, wc, h, hc);",
          "747:         return pixCopy(NULL, pix);",
          "",
          "[Added Lines]",
          "755:         L_WARNING(\"kernel too large: wc = %d, hc = %d, w = %d, h = %d; \"",
          "756:                   \"reducing!\\n\", procName, wc, hc, w, h);",
          "757:         wc = L_MIN(wc, (w - 1) / 2);",
          "758:         hc = L_MIN(hc, (h - 1) / 2);",
          "760:     if (wc == 0 || hc == 0)",
          "761:         return pixCopy(NULL, pix);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "867:         return pixCopy(NULL, pixs);",
          "868:     if (w < 2 * wc + 3 || h < 2 * hc + 3) {",
          "872:     }",
          "873:     wd = w - 2 * wc;",
          "874:     hd = h - 2 * hc;",
          "",
          "[Removed Lines]",
          "869:         L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\",",
          "870:                 procName, w, wc, h, hc);",
          "871:         return pixCopy(NULL, pixs);",
          "",
          "[Added Lines]",
          "882:         L_WARNING(\"kernel too large: wc = %d, hc = %d, w = %d, h = %d; \"",
          "883:                   \"reducing!\\n\", procName, wc, hc, w, h);",
          "884:         wc = L_MIN(wc, (w - 1) / 2);",
          "885:         hc = L_MIN(hc, (h - 1) / 2);",
          "887:     if (wc == 0 || hc == 0)",
          "888:         return pixCopy(NULL, pixs);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1464:         return pixd;",
          "1465:     }",
          "1469:     if (w < 2 * wc + 1 || h < 2 * hc + 1) {",
          "1470:         wc = L_MIN(wc, (w - 1) / 2);",
          "1471:         hc = L_MIN(hc, (h - 1) / 2);",
          "1474:     }",
          "1476:         return pixCopy(NULL, pixs);",
          "1478:     if ((pixt = pixBlocksum(pixs, pixacc, wc, hc)) == NULL)",
          "",
          "[Removed Lines]",
          "1467:     if (wc < 0) wc = 0;",
          "1468:     if (hc < 0) hc = 0;",
          "1472:         L_WARNING(\"kernel too large; reducing!\\n\", procName);",
          "1473:         L_INFO(\"wc = %d, hc = %d\\n\", procName, wc, hc);",
          "1475:     if (wc == 0 && hc == 0)",
          "",
          "[Added Lines]",
          "1484:     if (wc <= 0 || hc <= 0)",
          "1485:         return pixCopy(NULL, pixs);",
          "1487:         L_WARNING(\"kernel too large: wc = %d, hc = %d, w = %d, h = %d; \"",
          "1488:                   \"reducing!\\n\", procName, wc, hc, w, h);",
          "1492:     if (wc == 0 || hc == 0)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1537:     pixGetDimensions(pixs, &w, &h, &d);",
          "1538:     if (d != 1)",
          "1539:         return (PIX *)ERROR_PTR(\"pixs not 1 bpp\", procName, NULL);",
          "1542:     if (w < 2 * wc + 1 || h < 2 * hc + 1) {",
          "1543:         wc = L_MIN(wc, (w - 1) / 2);",
          "1544:         hc = L_MIN(hc, (h - 1) / 2);",
          "1547:     }",
          "1549:         return pixCopy(NULL, pixs);",
          "1551:     if (pixacc) {",
          "",
          "[Removed Lines]",
          "1540:     if (wc < 0) wc = 0;",
          "1541:     if (hc < 0) hc = 0;",
          "1545:         L_WARNING(\"kernel too large; reducing!\\n\", procName);",
          "1546:         L_INFO(\"wc = %d, hc = %d\\n\", procName, wc, hc);",
          "1548:     if (wc == 0 && hc == 0)",
          "",
          "[Added Lines]",
          "1558:     if (wc <= 0 || hc <= 0)",
          "1559:         return pixCopy(NULL, pixs);",
          "1561:         L_WARNING(\"kernel too large: wc = %d, hc = %d, w = %d, h = %d; \"",
          "1562:                   \"reducing!\\n\", procName, wc, hc, w, h);",
          "1566:     if (wc == 0 || hc == 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}