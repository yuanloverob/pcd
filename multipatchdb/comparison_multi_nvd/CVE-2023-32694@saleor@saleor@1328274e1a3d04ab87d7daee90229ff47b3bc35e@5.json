{
  "cve_id": "CVE-2023-32694",
  "cve_desc": "Saleor Core is a composable, headless commerce API. Saleor's `validate_hmac_signature` function is vulnerable to timing attacks. Malicious users could abuse this vulnerability on Saleor deployments having the Adyen plugin enabled in order to determine the secret key and forge fake events, this could affect the database integrity such as marking an order as paid when it is not. This issue has been patched in versions 3.7.68, 3.8.40, 3.9.49, 3.10.36, 3.11.35, 3.12.25, and 3.13.16.",
  "repo": "saleor/saleor",
  "patch_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
  "patch_info": {
    "commit_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "repo": "saleor/saleor",
    "commit_url": "https://github.com/saleor/saleor/commit/1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "files": [
      "saleor/graphql/schema.graphql",
      "saleor/order/__init__.py",
      "saleor/order/events.py",
      "saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py"
    ],
    "message": "Add webhooks logic",
    "before_after_code_files": [
      "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
      "saleor/order/__init__.py||saleor/order/__init__.py",
      "saleor/order/events.py||saleor/order/events.py",
      "saleor/payment/__init__.py||saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py||saleor/payment/utils.py"
    ]
  },
  "patch_diff": {
    "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
      "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   exportProducts(input: ExportProductsInput!): ExportProducts",
      "2751:   checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode",
      "2752:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate",
      "2754:   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate",
      "2755:   checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach",
      "2756:   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach",
      "",
      "[Removed Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "[Added Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3063:   EMAIL_SENT",
      "3064:   PAYMENT_AUTHORIZED",
      "3065:   PAYMENT_CAPTURED",
      "3066:   PAYMENT_REFUNDED",
      "3067:   PAYMENT_VOIDED",
      "3068:   PAYMENT_FAILED",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3066:   PAYMENT_GATEWAY_NOTIFICATION",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3388: enum PaymentChargeStatusEnum {",
      "3389:   NOT_CHARGED",
      "3390:   PARTIALLY_CHARGED",
      "3391:   FULLY_CHARGED",
      "3392:   PARTIALLY_REFUNDED",
      "3393:   FULLY_REFUNDED",
      "3394: }",
      "3396: type PaymentCountableConnection {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3391:   PENDING",
      "3396:   REFUSED",
      "3397:   CANCELLED",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3435: input PaymentInput {",
      "3436:   gateway: String!",
      "3437:   token: String",
      "3439:   amount: Decimal",
      "3440:   billingAddress: AddressInput",
      "3441: }",
      "",
      "[Removed Lines]",
      "3438:   paymentData: JSONString",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5024: enum TransactionKind {",
      "5025:   AUTH",
      "5026:   REFUND",
      "5027:   CAPTURE",
      "5028:   VOID",
      "5029:   CONFIRM",
      "5030: }",
      "5032: union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029:   PENDING",
      "5031:   REFUND_ONGOING",
      "5035:   CANCEL",
      "",
      "---------------"
    ],
    "saleor/order/__init__.py||saleor/order/__init__.py": [
      "File: saleor/order/__init__.py -> saleor/order/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     PAYMENT_REFUNDED = \"payment_refunded\"",
      "52:     PAYMENT_VOIDED = \"payment_voided\"",
      "53:     PAYMENT_FAILED = \"payment_failed\"",
      "55:     INVOICE_REQUESTED = \"invoice_requested\"",
      "56:     INVOICE_GENERATED = \"invoice_generated\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     PAYMENT_GATEWAY_NOTIFICATION = \"payment_gateway_notification\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         (EMAIL_SENT, \"The email was sent\"),",
      "81:         (PAYMENT_AUTHORIZED, \"The payment was authorized\"),",
      "82:         (PAYMENT_CAPTURED, \"The payment was captured\"),",
      "83:         (PAYMENT_REFUNDED, \"The payment was refunded\"),",
      "84:         (PAYMENT_VOIDED, \"The payment was voided\"),",
      "85:         (PAYMENT_FAILED, \"The payment was failed\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         (PAYMENT_GATEWAY_NOTIFICATION, \"Notification from payment gateway\"),",
      "",
      "---------------"
    ],
    "saleor/order/events.py||saleor/order/events.py": [
      "File: saleor/order/events.py -> saleor/order/events.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:     )",
      "263: def fulfillment_canceled_event(",
      "265: ) -> OrderEvent:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: def payment_gateway_notification_event(",
      "265: ) -> OrderEvent:",
      "266:     if not _user_is_valid(user):",
      "267:         user = None",
      "268:     parameters = {\"message\": message}",
      "270:     if payment:",
      "271:         parameters.update({\"gateway\": payment.gateway, \"payment_id\": payment.token})",
      "273:     return OrderEvent.objects.create(",
      "274:         order=order,",
      "275:         type=OrderEvents.PAYMENT_GATEWAY_NOTIFICATION,",
      "276:         user=user,",
      "277:         parameters=parameters,",
      "278:     )",
      "",
      "---------------"
    ],
    "saleor/payment/__init__.py||saleor/payment/__init__.py": [
      "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     AUTH = \"auth\"",
      "61:     CAPTURE = \"capture\"",
      "62:     VOID = \"void\"",
      "63:     PENDING = \"pending\"",
      "64:     REFUND = \"refund\"",
      "65:     REFUND_ONGOING = \"refund_ongoing\"",
      "66:     CONFIRM = \"confirm\"",
      "67:     # FIXME we could use another status like WAITING_FOR_AUTH for transactions",
      "68:     # Which were authorized, but needs to be confirmed manually by staff",
      "69:     # eg. Braintree with \"submit_for_settlement\" enabled",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     CAPTURE_FAILED = \"capture_failed\"",
      "67:     REFUND_FAILED = \"refund_failed\"",
      "68:     REFUND_REVERSED = \"refund_reversed\"",
      "70:     CANCEL = \"cancel\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         (CAPTURE, \"Capture\"),",
      "76:         (VOID, \"Void\"),",
      "77:         (CONFIRM, \"Confirm\"),",
      "78:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         (CANCEL, \"Cancel\"),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:     FULLY_CHARGED = \"fully-charged\"",
      "98:     PARTIALLY_REFUNDED = \"partially-refunded\"",
      "99:     FULLY_REFUNDED = \"fully-refunded\"",
      "101:     CHOICES = [",
      "102:         (NOT_CHARGED, \"Not charged\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     REFUSED = \"refused\"",
      "106:     CANCELLED = \"cancelled\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:         (FULLY_CHARGED, \"Fully charged\"),",
      "106:         (PARTIALLY_REFUNDED, \"Partially refunded\"),",
      "107:         (FULLY_REFUNDED, \"Fully refunded\"),",
      "108:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:         (REFUSED, \"Refused\"),",
      "116:         (CANCELLED, \"Cancelled\"),",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
      "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import json",
      "4: import Adyen",
      "5: from babel.numbers import get_currency_precision",
      "6: from django.core.handlers.wsgi import WSGIRequest",
      "8: from graphql_relay import from_global_id",
      "10: from ....checkout.models import Checkout",
      "",
      "[Removed Lines]",
      "2: from typing import Optional",
      "7: from django.http import HttpResponse, JsonResponse",
      "",
      "[Added Lines]",
      "2: from typing import List, Optional",
      "6: from django.contrib.auth.hashers import make_password",
      "8: from django.http import HttpResponse, HttpResponseNotFound, JsonResponse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     request_data_for_payment,",
      "22:     request_for_payment_refund,",
      "23: )",
      "25: GATEWAY_NAME = \"Adyen\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: from .webhooks import handle_webhook",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:         {\"name\": \"Origin Key\", \"value\": \"\"},",
      "51:         {\"name\": \"Origin Url\", \"value\": \"\"},",
      "52:         {\"name\": \"Live\", \"value\": \"\"},",
      "54:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
      "55:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
      "56:         {\"name\": \"Notification user\", \"value\": \"\"},",
      "",
      "[Removed Lines]",
      "53:         {\"name\": \"Enable notifications\", \"value\": True},",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:             \"type\": ConfigurationTypeField.BOOLEAN,",
      "110:             \"help_text\": (",
      "111:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
      "114:                 \"https://docs.adyen.com/development-resources/webhooks\"",
      "115:             ),",
      "116:             \"label\": \"Enable notifications\",",
      "",
      "[Removed Lines]",
      "112:                 \"webhook url is <your-backend-url>/plugins/mirumee.payments.adyen/\"",
      "113:                 \"webhooks/ \"",
      "",
      "[Added Lines]",
      "113:                 \"webhook url is http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:             \"help_text\": (",
      "135:                 \"Provide secret key generated on Adyen side.\"",
      "136:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
      "138:             ),",
      "139:             \"label\": \"HMAC secret key\",",
      "140:         },",
      "",
      "[Removed Lines]",
      "137:                 \"ions-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "137:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
      "138:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "143:             \"help_text\": (",
      "144:                 \"Base User provided on the Adyen side for authenticate incoming \"",
      "145:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "147:             ),",
      "148:             \"label\": \"Notification user\",",
      "149:         },",
      "",
      "[Removed Lines]",
      "146:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "147:                 \"set-up-notifications-in-your-customer-area \"",
      "148:                 \"The Saleor webhook url is \"",
      "149:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "152:             \"help_text\": (",
      "153:                 \"User password provided on the Adyen side for authenticate incoming \"",
      "154:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "156:             ),",
      "157:             \"label\": \"Notification password\",",
      "158:         },",
      "",
      "[Removed Lines]",
      "155:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "158:                 \"set-up-notifications-in-your-customer-area \"",
      "159:                 \"The Saleor webhook url is \"",
      "160:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
      "164:         self.config = GatewayConfig(",
      "165:             gateway_name=GATEWAY_NAME,",
      "167:             supported_currencies=configuration[\"Supported currencies\"],",
      "168:             connection_params={",
      "169:                 \"api_key\": configuration[\"API key\"],",
      "",
      "[Removed Lines]",
      "166:             auto_capture=True,  # FIXME check this",
      "",
      "[Added Lines]",
      "171:             auto_capture=configuration[",
      "172:                 \"Automatically mark payment as a capture\"",
      "173:             ],  # FIXME check this",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "171:                 \"return_url\": configuration[\"Return Url\"],",
      "172:                 \"origin_key\": configuration[\"Origin Key\"],",
      "173:                 \"origin_url\": configuration[\"Origin Url\"],",
      "174:             },",
      "175:         )",
      "176:         api_key = self.config.connection_params[\"api_key\"]",
      "177:         self.adyen = Adyen.Adyen(xapikey=api_key)",
      "179:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
      "184:     def _get_gateway_config(self) -> GatewayConfig:",
      "185:         return self.config",
      "",
      "[Removed Lines]",
      "181:         print(request.body)",
      "182:         return HttpResponse(\"[accepted]\")",
      "",
      "[Added Lines]",
      "181:                 \"live\": configuration[\"Live\"],",
      "182:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
      "183:                 \"webhook_user\": configuration[\"Notification user\"],",
      "184:                 \"webhook_user_password\": configuration[\"Notification password\"],",
      "191:         config = self._get_gateway_config()",
      "192:         return handle_webhook(request, config)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "238:             raw_response=result.message,",
      "239:         )",
      "241:     @require_active_plugin",
      "242:     def get_payment_config(self, previous_value):",
      "243:         return []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @classmethod",
      "252:     def _update_config_items(",
      "253:         cls, configuration_to_update: List[dict], current_config: List[dict]",
      "254:     ):",
      "255:         super()._update_config_items(configuration_to_update, current_config)",
      "256:         for item in current_config:",
      "257:             if item.get(\"name\") == \"Notification password\":",
      "258:                 item[\"value\"] = make_password(item[\"value\"])",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
      "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: logger = logging.getLogger(__name__)",
      "18: def get_price_amount(value: Decimal, currency: str):",
      "19:     \"\"\"Adyen doesn't use values with comma.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: def convert_adyen_price_format(value: str, currency: str):",
      "19:     value = Decimal(value)",
      "20:     precision = get_currency_precision(currency)",
      "21:     number_places = Decimal(10) ** -precision",
      "22:     return value * number_places",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
      "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import base64",
      "2: import binascii",
      "3: import hashlib",
      "4: import hmac",
      "5: import json",
      "6: from typing import Any, Dict, Optional",
      "8: from django.contrib.auth.hashers import check_password",
      "9: from django.core.handlers.wsgi import WSGIRequest",
      "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
      "11: from django.http.request import HttpHeaders",
      "12: from graphql_relay import from_global_id",
      "14: from ....order.events import payment_gateway_notification_event",
      "15: from ....payment.models import Payment, Transaction",
      "16: from ... import TransactionKind",
      "17: from ...interface import GatewayConfig, GatewayResponse",
      "18: from ...utils import create_transaction, gateway_postprocess",
      "19: from .utils import convert_adyen_price_format",
      "22: def get_payment(payment_id: str) -> Payment:",
      "23:     _type, payment_id = from_global_id(payment_id)",
      "24:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
      "25:     return payment",
      "28: def get_transaction(",
      "29:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
      "30: ) -> Transaction:",
      "31:     transaction = payment.transactions.filter(kind=kind, token=transaction_id)",
      "32:     return transaction",
      "35: def create_new_transaction(notification, payment, kind):",
      "36:     transaction_id = notification.get(\"pspReference\")",
      "37:     currency = notification.get(\"amount\", {}).get(\"currency\")",
      "38:     amount = convert_adyen_price_format(",
      "39:         notification.get(\"amount\", {}).get(\"value\"), currency",
      "40:     )",
      "41:     is_success = True if notification.get(\"success\") == \"true\" else False",
      "43:     gateway_response = GatewayResponse(",
      "44:         kind=kind,",
      "45:         action_required=False,",
      "46:         transaction_id=transaction_id,",
      "47:         is_success=is_success,",
      "48:         amount=amount,",
      "49:         currency=currency,",
      "50:         error=\"\",",
      "51:         raw_response={},",
      "52:     )",
      "53:     return create_transaction(",
      "54:         payment,",
      "55:         kind=kind,",
      "56:         payment_information=None,",
      "57:         action_required=False,",
      "58:         gateway_response=gateway_response,",
      "59:     )",
      "62: def create_payment_notification_for_order(",
      "63:     payment: Payment, success_msg: str, failed_msg: Optional[str], is_success: bool",
      "64: ):",
      "65:     if not payment.order:",
      "66:         # Order is not assigned",
      "67:         return",
      "68:     msg = success_msg if is_success else failed_msg",
      "70:     payment_gateway_notification_event(",
      "71:         order=payment.order, user=None, message=msg, payment=payment",
      "72:     )",
      "75: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "76:     mark_capture = gateway_config.auto_capture",
      "77:     if mark_capture:",
      "78:         # If we mark order as a capture by default we don't need to handle auth actions",
      "79:         return",
      "80:     payment = get_payment(notification.get(\"merchantReference\"))",
      "81:     if not payment:",
      "82:         # We don't know anything about that payment",
      "83:         return",
      "85:     transaction_id = notification.get(\"pspReference\")",
      "86:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
      "87:     if transaction:",
      "88:         # We already marked it as Auth",
      "89:         return",
      "91:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
      "93:     success_msg = \"Adyen: The payment request was successful.\"",
      "94:     failed_msg = \"Adyen: The payment request failed.\"",
      "95:     create_payment_notification_for_order(",
      "96:         payment, success_msg, failed_msg, transaction.is_success",
      "97:     )",
      "100: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "101:     payment = get_payment(notification.get(\"merchantReference\"))",
      "102:     if not payment:",
      "103:         return",
      "104:     transaction_id = notification.get(\"pspReference\")",
      "105:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
      "106:     if transaction:",
      "107:         # it is already cancelled",
      "108:         return",
      "109:     new_transaction = create_new_transaction(",
      "110:         notification, payment, TransactionKind.CANCEL",
      "111:     )",
      "112:     gateway_postprocess(new_transaction, payment)",
      "114:     success_msg = \"Adyen: The cancel request was successful.\"",
      "115:     failed_msg = \"Adyen: The request failed.\"",
      "116:     create_payment_notification_for_order(",
      "117:         payment, success_msg, failed_msg, transaction.is_success",
      "118:     )",
      "121: def handle_cancel_or_refund(",
      "122:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "123: ):",
      "124:     additional_data = notification.get(\"additionalData\")",
      "125:     action = additional_data.get(\"modification.action\")",
      "126:     if action == \"refund\":",
      "127:         handle_refund(notification, gateway_config)",
      "128:     elif action == \"cancel\":",
      "129:         handle_cancellation(notification, gateway_config)",
      "132: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "133:     payment = get_payment(notification.get(\"merchantReference\"))",
      "134:     if not payment:",
      "135:         return",
      "136:     transaction_id = notification.get(\"pspReference\")",
      "137:     transaction = get_transaction(payment, transaction_id, TransactionKind.CAPTURE)",
      "138:     if transaction and transaction.is_success:",
      "139:         # it is already captured",
      "140:         return",
      "142:     new_transaction = create_new_transaction(",
      "143:         notification, payment, TransactionKind.CAPTURE",
      "144:     )",
      "145:     gateway_postprocess(new_transaction, payment)",
      "147:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
      "148:     failed_msg = f\"Adyen: The capture {transaction_id} request failed.\"",
      "149:     create_payment_notification_for_order(",
      "150:         payment, success_msg, failed_msg, transaction.is_success",
      "151:     )",
      "154: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "155:     payment = get_payment(notification.get(\"merchantReference\"))",
      "156:     if not payment:",
      "157:         return",
      "158:     transaction_id = notification.get(\"pspReference\")",
      "160:     transaction = get_transaction(",
      "161:         payment, transaction_id, TransactionKind.CAPTURE_FAILED",
      "162:     )",
      "163:     if transaction and transaction.is_success:",
      "164:         # it is already failed",
      "165:         return",
      "166:     new_transaction = create_new_transaction(",
      "167:         notification, payment, TransactionKind.CAPTURE_FAILED",
      "168:     )",
      "169:     gateway_postprocess(new_transaction, payment)",
      "171:     msg = f\"Adyen: The capture for {transaction_id} failed due to a technical issue.\"",
      "172:     create_payment_notification_for_order(payment, msg, None, True)",
      "175: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "176:     mark_capture = gateway_config.auto_capture",
      "177:     if mark_capture:",
      "178:         # If we mark order as a capture by default we don't need to handle this action",
      "179:         return",
      "180:     payment = get_payment(notification.get(\"merchantReference\"))",
      "181:     if not payment:",
      "182:         return",
      "183:     transaction_id = notification.get(\"pspReference\")",
      "184:     transaction = get_transaction(payment, transaction_id, TransactionKind.PENDING)",
      "185:     if transaction and transaction.is_success:",
      "186:         # it is already pending",
      "187:         return",
      "188:     new_transaction = create_new_transaction(",
      "189:         notification, payment, TransactionKind.PENDING",
      "190:     )",
      "191:     gateway_postprocess(new_transaction, payment)",
      "193:     msg = f\"Adyen: The transaction {transaction_id} is pending.\"",
      "194:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
      "197: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "198:     payment = get_payment(notification.get(\"merchantReference\"))",
      "199:     if not payment:",
      "200:         return",
      "201:     transaction_id = notification.get(\"pspReference\")",
      "202:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "203:     if transaction and transaction.is_success:",
      "204:         # it is already refunded",
      "205:         return",
      "206:     new_transaction = create_new_transaction(",
      "207:         notification, payment, TransactionKind.REFUND",
      "208:     )",
      "209:     gateway_postprocess(new_transaction, payment)",
      "211:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "212:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "213:     create_payment_notification_for_order(",
      "214:         payment, success_msg, failed_msg, transaction.is_success",
      "215:     )",
      "218: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "219:     payment = get_payment(notification.get(\"merchantReference\"))",
      "220:     if not payment:",
      "221:         return",
      "222:     transaction_id = notification.get(\"pspReference\")",
      "223:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "224:     if transaction and not transaction.is_success:",
      "225:         # The refund is already saved",
      "226:         return",
      "227:     new_transaction = create_new_transaction(",
      "228:         notification, payment, TransactionKind.REFUND",
      "229:     )",
      "230:     gateway_postprocess(new_transaction, payment)",
      "232:     msg = (",
      "233:         f\"The refund {transaction_id} failed due to a technical issue. If you receive \"",
      "234:         f\"more than two failures on the same refund, contact Adyen Support Team.\"",
      "235:     )",
      "236:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "239: def handle_reversed_refund(",
      "240:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "241: ):",
      "242:     payment = get_payment(notification.get(\"merchantReference\"))",
      "243:     if not payment:",
      "244:         return",
      "245:     transaction_id = notification.get(\"pspReference\")",
      "246:     transaction = get_transaction(",
      "247:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
      "248:     )",
      "250:     if transaction and not transaction.is_success:",
      "251:         # it is already refunded",
      "252:         return",
      "253:     new_transaction = create_new_transaction(",
      "254:         notification, payment, TransactionKind.REFUND_REVERSED",
      "255:     )",
      "256:     gateway_postprocess(new_transaction, payment)",
      "257:     msg = (",
      "258:         f\"Adyen: The refunded amount from {transaction_id} has been returned to Adyen, \"",
      "259:         f\"and is back in your account. This may happen if the shopper's bank account \"",
      "260:         f\"is no longer valid\"",
      "261:     )",
      "262:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "265: def handle_refund_with_data(",
      "266:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "267: ):",
      "269:     payment = get_payment(notification.get(\"merchantReference\"))",
      "270:     if not payment:",
      "271:         return",
      "272:     transaction_id = notification.get(\"pspReference\")",
      "273:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "274:     if transaction:",
      "275:         # it is already refunded",
      "276:         return",
      "277:     new_transaction = create_new_transaction(",
      "278:         notification, payment, TransactionKind.REFUND",
      "279:     )",
      "280:     gateway_postprocess(new_transaction, payment)",
      "281:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "282:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "283:     create_payment_notification_for_order(",
      "284:         payment, success_msg, failed_msg, transaction.is_success",
      "285:     )",
      "288: def webhook_not_implemented(",
      "289:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "290: ):",
      "291:     adyen_id = notification.get(\"pspReference\")",
      "292:     success = notification.get(\"success\", True)",
      "293:     event = notification.get(\"eventCode\")",
      "294:     payment = get_payment(notification.get(\"merchantReference\"))",
      "295:     if not payment:",
      "296:         return",
      "297:     msg = (",
      "298:         f\"Received not implemented notification from Adyen. Event name: {event}, \"",
      "299:         f\"success: {success}, adyen reference: {adyen_id}.\"",
      "300:     )",
      "301:     create_payment_notification_for_order(payment, msg, None, True)",
      "304: EVENT_MAP = {",
      "305:     \"AUTHORISATION\": handle_authorization,",
      "306:     \"AUTHORISATION_ADJUSTMENT\": webhook_not_implemented,",
      "307:     \"CANCELLATION\": handle_cancellation,",
      "308:     \"CANCEL_OR_REFUND\": handle_cancel_or_refund,",
      "309:     \"CAPTURE\": handle_capture,",
      "310:     \"CAPTURE_FAILED\": handle_failed_capture,",
      "311:     \"HANDLED_EXTERNALLY\": webhook_not_implemented,",
      "312:     \"ORDER_OPENED\": webhook_not_implemented,",
      "313:     \"ORDER_CLOSED\": webhook_not_implemented,",
      "314:     \"PENDING\": handle_pending,",
      "315:     \"PROCESS_RETRY\": webhook_not_implemented,",
      "316:     \"REFUND\": handle_refund,",
      "317:     \"REFUND_FAILED\": handle_failed_refund,",
      "318:     \"REFUNDED_REVERSED\": handle_reversed_refund,",
      "319:     \"REFUND_WITH_DATA\": handle_refund_with_data,",
      "320:     \"REPORT_AVAILABLE\": webhook_not_implemented,",
      "321:     \"VOID_PENDING_REFUND\": webhook_not_implemented,",
      "322: }",
      "325: def validate_hmac_signature(",
      "326:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
      "327: ) -> bool:",
      "329:     \"\"\"",
      "330:     pspReference 7914073381342284",
      "331:     originalReference",
      "332:     merchantAccountCode YOUR_MERCHANT_ACCOUNT",
      "333:     merchantReference TestPayment-1407325143704",
      "334:     value 1130",
      "335:     currency EUR",
      "336:     eventCode AUTHORISATION",
      "337:     success true",
      "338:     \"\"\"",
      "339:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
      "340:     if not hmac_key:",
      "341:         return True",
      "343:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
      "344:     if not hmac_signature and hmac_key:",
      "345:         return False",
      "347:     success = \"true\" if notification.get(\"success\", \"\") else \"false\"",
      "348:     if notification.get(\"success\", None) is None:",
      "349:         success = \"\"",
      "351:     payload_list = [",
      "352:         notification.get(\"pspReference\", \"\"),",
      "353:         notification.get(\"originalReference\", \"\"),",
      "354:         notification.get(\"merchantAccountCode\", \"\"),",
      "355:         notification.get(\"merchantReference\", \"\"),",
      "356:         notification.get(\"value\", \"\"),",
      "357:         notification.get(\"currency\", \"\"),",
      "358:         notification.get(\"eventCode\", \"\"),",
      "359:         success,",
      "360:     ]",
      "361:     payload = \":\".join(payload_list)",
      "363:     hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)",
      "364:     expected_merchant_sign = base64.b64encode(hm.digest())",
      "365:     return hmac_signature == expected_merchant_sign.decode(\"utf-8\")",
      "368: def validate_auth_user(headers: HttpHeaders, gateway_config: \"GatewayConfig\") -> bool:",
      "369:     username = gateway_config.connection_params[\"webhook_user\"]",
      "370:     password = gateway_config.connection_params[\"webhook_user_password\"]",
      "371:     auth_header = headers.get(\"Authorization\")",
      "372:     if not auth_header and not username:",
      "373:         return True",
      "375:     split_auth = auth_header.split(maxsplit=1)",
      "376:     prefix = \"BASIC\"",
      "378:     if len(split_auth) != 2 or split_auth[0].upper() != prefix:",
      "379:         return False",
      "381:     auth = split_auth[1]",
      "382:     try:",
      "383:         request_username, request_password = base64.b64decode(auth).split(\":\")",
      "384:         user_is_correct = request_username == username",
      "385:         if user_is_correct and check_password(request_password, password):",
      "386:             return True",
      "387:     except binascii.Error:",
      "388:         pass",
      "389:     return False",
      "392: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
      "393:     json_data = json.loads(request.body)",
      "394:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
      "395:     # object.",
      "396:     notification = json_data.get(\"notificationItems\")[0].get(",
      "397:         \"NotificationRequestItem\", {}",
      "398:     )",
      "400:     if not validate_hmac_signature(notification, gateway_config):",
      "401:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
      "402:     if not validate_auth_user(notification, gateway_config):",
      "403:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
      "405:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
      "406:     if event_handler:",
      "407:         event_handler(notification, gateway_config)",
      "408:         return HttpResponse(\"[accepted]\")",
      "409:     return HttpResponseNotFound()",
      "",
      "---------------"
    ],
    "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py": [
      "File: saleor/payment/migrations/0019_auto_20200721_1313.py -> saleor/payment/migrations/0019_auto_20200721_1313.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Generated by Django 3.0.6 on 2020-07-21 13:13",
      "3: from django.db import migrations, models",
      "6: class Migration(migrations.Migration):",
      "8:     dependencies = [",
      "9:         (\"payment\", \"0018_auto_20200720_1118\"),",
      "10:     ]",
      "12:     operations = [",
      "13:         migrations.AlterField(",
      "14:             model_name=\"payment\",",
      "15:             name=\"charge_status\",",
      "16:             field=models.CharField(",
      "17:                 choices=[",
      "18:                     (\"not-charged\", \"Not charged\"),",
      "19:                     (\"pending\", \"Pending\"),",
      "20:                     (\"partially-charged\", \"Partially charged\"),",
      "21:                     (\"fully-charged\", \"Fully charged\"),",
      "22:                     (\"partially-refunded\", \"Partially refunded\"),",
      "23:                     (\"fully-refunded\", \"Fully refunded\"),",
      "24:                     (\"refused\", \"Refused\"),",
      "25:                     (\"cancelled\", \"Cancelled\"),",
      "26:                 ],",
      "27:                 default=\"not-charged\",",
      "28:                 max_length=20,",
      "29:             ),",
      "30:         ),",
      "31:         migrations.AlterField(",
      "32:             model_name=\"transaction\",",
      "33:             name=\"kind\",",
      "34:             field=models.CharField(",
      "35:                 choices=[",
      "36:                     (\"auth\", \"Authorization\"),",
      "37:                     (\"pending\", \"Pending\"),",
      "38:                     (\"refund\", \"Refund\"),",
      "39:                     (\"refund_ongoing\", \"Refund in progress\"),",
      "40:                     (\"capture\", \"Capture\"),",
      "41:                     (\"void\", \"Void\"),",
      "42:                     (\"confirm\", \"Confirm\"),",
      "43:                     (\"cancel\", \"Cancel\"),",
      "44:                 ],",
      "45:                 max_length=25,",
      "46:             ),",
      "47:         ),",
      "48:     ]",
      "",
      "---------------"
    ],
    "saleor/payment/utils.py||saleor/payment/utils.py": [
      "File: saleor/payment/utils.py -> saleor/payment/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: def create_transaction(",
      "133:     payment: Payment,",
      "134:     kind: str,",
      "136:     action_required: bool = False,",
      "137:     gateway_response: GatewayResponse = None,",
      "138:     error_msg=None,",
      "",
      "[Removed Lines]",
      "135:     payment_information: PaymentData,",
      "",
      "[Added Lines]",
      "135:     payment_information: Optional[PaymentData],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
      "221:     #     payment.save(update_fields=[\"charge_status\", ])",
      "224:         payment.captured_amount += transaction.amount",
      "226:         # Set payment charge status to fully charged",
      "",
      "[Removed Lines]",
      "223:     if transaction_kind in {TransactionKind.CAPTURE, TransactionKind.CONFIRM}:",
      "",
      "[Added Lines]",
      "223:     if transaction_kind in {",
      "224:         TransactionKind.CAPTURE,",
      "225:         TransactionKind.CONFIRM,",
      "226:         TransactionKind.REFUND_REVERSED,",
      "227:     }:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "249:         payment.save(",
      "250:             update_fields=[\"charge_status\",]",
      "251:         )",
      "254: def fetch_customer_id(user: User, gateway: str):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:     elif transaction_kind == TransactionKind.CANCEL:",
      "257:         payment.charge_status = ChargeStatus.CANCELLED",
      "258:         payment.save(",
      "259:             update_fields=[\"charge_status\",]",
      "260:         )",
      "261:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
      "262:         if payment.charge_status in {",
      "263:             ChargeStatus.PARTIALLY_CHARGED,",
      "264:             ChargeStatus.FULLY_CHARGED,",
      "265:         }:",
      "266:             payment.captured_amount -= transaction.amount",
      "267:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
      "268:             if payment.get_charge_amount() <= 0:",
      "269:                 payment.charge_status = ChargeStatus.FULLY_CHARGED",
      "271:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c89cde13670692ab815eb750373da80cdf0af24b",
      "candidate_info": {
        "commit_hash": "c89cde13670692ab815eb750373da80cdf0af24b",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/c89cde13670692ab815eb750373da80cdf0af24b",
        "files": [
          "saleor/graphql/payment/mutations.py",
          "saleor/graphql/payment/schema.py",
          "saleor/graphql/payment/tests/test_payment.py",
          "saleor/graphql/payment/types.py",
          "saleor/graphql/plugins/tests/test_plugins.py",
          "saleor/graphql/plugins/types.py",
          "saleor/graphql/schema.graphql",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/utils/__init__.py",
          "saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py",
          "saleor/payment/gateways/adyen/tests/utils/test_common.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/utils/__init__.py",
          "saleor/payment/gateways/adyen/utils/apple_pay.py",
          "saleor/payment/gateways/adyen/utils/common.py",
          "saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/interface.py",
          "saleor/plugins/base_plugin.py",
          "saleor/plugins/manager.py",
          "saleor/plugins/tests/sample_plugins.py"
        ],
        "message": "Support for Apple Pay on web (#6396)\n\n* Add Apple Pay certificate to configuration dict\n\n* Add new mutation to handle validation process for apple pay on the web\n\n* Add multiline secret field\n\n* Extend test to cover the multiline secret field\n\n* Fix missing dependency in tests\n\n* Use secret text for apple pay cert\n\n* Add validation of the provided configuration\n\n* Fix test, mock the checking request in tests\n\n* Apply changes after review\n\n* Update secret multiline field",
        "before_after_code_files": [
          "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py",
          "saleor/graphql/payment/schema.py||saleor/graphql/payment/schema.py",
          "saleor/graphql/payment/tests/test_payment.py||saleor/graphql/payment/tests/test_payment.py",
          "saleor/graphql/payment/types.py||saleor/graphql/payment/types.py",
          "saleor/graphql/plugins/tests/test_plugins.py||saleor/graphql/plugins/tests/test_plugins.py",
          "saleor/graphql/plugins/types.py||saleor/graphql/plugins/types.py",
          "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py||saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py",
          "saleor/payment/gateways/adyen/tests/test_utils.py||saleor/payment/gateways/adyen/tests/utils/test_common.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/utils/apple_pay.py||saleor/payment/gateways/adyen/utils/apple_pay.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils/common.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/interface.py||saleor/payment/interface.py",
          "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py",
          "saleor/plugins/manager.py||saleor/plugins/manager.py",
          "saleor/plugins/tests/sample_plugins.py||saleor/plugins/tests/sample_plugins.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py": [
          "File: saleor/graphql/payment/mutations.py -> saleor/graphql/payment/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from ..core.scalars import PositiveDecimal",
          "19: from ..core.types import common as common_types",
          "20: from ..core.utils import from_global_id_strict_type",
          "24: class PaymentInput(graphene.InputObjectType):",
          "",
          "[Removed Lines]",
          "21: from .types import Payment",
          "",
          "[Added Lines]",
          "21: from .types import Payment, PaymentInitialized",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:         except PaymentError as e:",
          "255:             raise ValidationError(str(e), code=PaymentErrorCode.PAYMENT_ERROR)",
          "256:         return PaymentVoid(payment=payment)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259: class PaymentInitialize(BaseMutation):",
          "260:     initialized_payment = graphene.Field(PaymentInitialized, required=False)",
          "262:     class Arguments:",
          "263:         gateway = graphene.String(",
          "264:             description=\"A gateway name used to initialize the payment.\", required=True,",
          "265:         )",
          "266:         payment_data = graphene.JSONString(",
          "267:             required=False,",
          "268:             description=(",
          "269:                 \"Client-side generated data required to initialize the payment.\"",
          "270:             ),",
          "271:         )",
          "273:     class Meta:",
          "274:         description = \"Initializes payment process when it is required by gateway.\"",
          "275:         error_type_class = common_types.PaymentError",
          "276:         error_type_field = \"payment_errors\"",
          "278:     @classmethod",
          "279:     def perform_mutation(cls, _root, info, gateway, payment_data):",
          "280:         try:",
          "281:             response = info.context.plugins.initialize_payment(gateway, payment_data)",
          "282:         except PaymentError as e:",
          "283:             raise ValidationError(",
          "284:                 {",
          "285:                     \"payment_data\": ValidationError(",
          "286:                         str(e), code=PaymentErrorCode.INVALID.value",
          "287:                     )",
          "288:                 }",
          "289:             )",
          "290:         return PaymentInitialize(initialized_payment=response)",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/schema.py||saleor/graphql/payment/schema.py": [
          "File: saleor/graphql/payment/schema.py -> saleor/graphql/payment/schema.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from ...core.permissions import OrderPermissions",
          "4: from ..core.fields import PrefetchingConnectionField",
          "5: from ..decorators import permission_required",
          "7: from .resolvers import resolve_payments",
          "8: from .types import Payment",
          "",
          "[Removed Lines]",
          "6: from .mutations import PaymentCapture, PaymentRefund, PaymentVoid",
          "",
          "[Added Lines]",
          "6: from .mutations import PaymentCapture, PaymentInitialize, PaymentRefund, PaymentVoid",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     payment_capture = PaymentCapture.Field()",
          "32:     payment_refund = PaymentRefund.Field()",
          "33:     payment_void = PaymentVoid.Field()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:     payment_initialize = PaymentInitialize.Field()",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/tests/test_payment.py||saleor/graphql/payment/tests/test_payment.py": [
          "File: saleor/graphql/payment/tests/test_payment.py -> saleor/graphql/payment/tests/test_payment.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from decimal import Decimal",
          "2: from unittest.mock import patch",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import json",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5: import pytest",
          "7: from ....checkout import calculations",
          "8: from ....payment.error_codes import PaymentErrorCode",
          "9: from ....payment.gateways.dummy_credit_card import (",
          "10:     TOKEN_EXPIRED,",
          "11:     TOKEN_VALIDATION_MAPPING,",
          "12: )",
          "14: from ....payment.models import ChargeStatus, Payment, TransactionKind",
          "15: from ....payment.utils import fetch_customer_id, store_customer_id",
          "16: from ...tests.utils import assert_no_permission, get_graphql_content",
          "17: from ..enums import OrderAction, PaymentChargeStatusEnum",
          "",
          "[Removed Lines]",
          "13: from ....payment.interface import CustomerSource, PaymentMethodInfo, TokenConfig",
          "",
          "[Added Lines]",
          "9: from ....payment import PaymentError",
          "15: from ....payment.interface import (",
          "16:     CustomerSource,",
          "17:     InitializedPaymentResponse,",
          "18:     PaymentMethodInfo,",
          "19:     TokenConfig,",
          "20: )",
          "23: from ....plugins.manager import PluginsManager",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "821:         query, variables, permissions=[permission_manage_users]",
          "822:     )",
          "823:     assert_no_permission(response)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "834: PAYMENT_INITIALIZE_MUTATION = \"\"\"",
          "835: mutation PaymentInitialize($gateway: String!, $paymentData: JSONString){",
          "836:       paymentInitialize(gateway: $gateway, paymentData: $paymentData)",
          "837:       {",
          "838:         initializedPayment{",
          "839:           gateway",
          "840:           name",
          "841:           data",
          "842:         }",
          "843:         paymentErrors{",
          "844:           field",
          "845:           message",
          "846:         }",
          "847:       }",
          "848: }",
          "849: \"\"\"",
          "852: @patch.object(PluginsManager, \"initialize_payment\")",
          "853: def test_payment_initialize(mocked_initialize_payment, api_client):",
          "854:     exected_initialize_payment_response = InitializedPaymentResponse(",
          "855:         gateway=\"gateway.id\",",
          "856:         name=\"PaymentPluginName\",",
          "857:         data={",
          "858:             \"epochTimestamp\": 1604652056653,",
          "859:             \"expiresAt\": 1604655656653,",
          "860:             \"merchantSessionIdentifier\": \"SSH5EFCB46BA25C4B14B3F37795A7F5B974_BB8E\",",
          "861:         },",
          "862:     )",
          "863:     mocked_initialize_payment.return_value = exected_initialize_payment_response",
          "865:     query = PAYMENT_INITIALIZE_MUTATION",
          "866:     variables = {",
          "867:         \"gateway\": exected_initialize_payment_response.gateway,",
          "868:         \"paymentData\": json.dumps(",
          "869:             {\"paymentMethod\": \"applepay\", \"validationUrl\": \"https://127.0.0.1/valid\"}",
          "870:         ),",
          "871:     }",
          "872:     response = api_client.post_graphql(query, variables)",
          "873:     content = get_graphql_content(response)",
          "874:     init_payment_data = content[\"data\"][\"paymentInitialize\"][\"initializedPayment\"]",
          "875:     assert init_payment_data[\"gateway\"] == exected_initialize_payment_response.gateway",
          "876:     assert init_payment_data[\"name\"] == exected_initialize_payment_response.name",
          "877:     assert (",
          "878:         json.loads(init_payment_data[\"data\"])",
          "879:         == exected_initialize_payment_response.data",
          "880:     )",
          "883: def test_payment_initialize_gateway_doesnt_exist(api_client):",
          "884:     query = PAYMENT_INITIALIZE_MUTATION",
          "885:     variables = {",
          "886:         \"gateway\": \"wrong.gateway\",",
          "887:         \"paymentData\": json.dumps(",
          "888:             {\"paymentMethod\": \"applepay\", \"validationUrl\": \"https://127.0.0.1/valid\"}",
          "889:         ),",
          "890:     }",
          "891:     response = api_client.post_graphql(query, variables)",
          "892:     content = get_graphql_content(response)",
          "893:     assert content[\"data\"][\"paymentInitialize\"][\"initializedPayment\"] is None",
          "896: @patch.object(PluginsManager, \"initialize_payment\")",
          "897: def test_payment_initialize_plugin_raises_error(mocked_initialize_payment, api_client):",
          "898:     error_msg = \"Missing paymentMethod field.\"",
          "899:     mocked_initialize_payment.side_effect = PaymentError(error_msg)",
          "901:     query = PAYMENT_INITIALIZE_MUTATION",
          "902:     variables = {",
          "903:         \"gateway\": \"gateway.id\",",
          "904:         \"paymentData\": json.dumps({\"validationUrl\": \"https://127.0.0.1/valid\"}),",
          "905:     }",
          "906:     response = api_client.post_graphql(query, variables)",
          "907:     content = get_graphql_content(response)",
          "908:     initialized_payment_data = content[\"data\"][\"paymentInitialize\"][",
          "909:         \"initializedPayment\"",
          "910:     ]",
          "911:     errors = content[\"data\"][\"paymentInitialize\"][\"paymentErrors\"]",
          "912:     assert initialized_payment_data is None",
          "913:     assert len(errors) == 1",
          "914:     assert errors[0][\"field\"] == \"paymentData\"",
          "915:     assert errors[0][\"message\"] == error_msg",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/types.py||saleor/graphql/payment/types.py": [
          "File: saleor/graphql/payment/types.py -> saleor/graphql/payment/types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:         if not any(data.values()):",
          "153:             return None",
          "154:         return CreditCard(**data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: class PaymentInitialized(graphene.ObjectType):",
          "158:     class Meta:",
          "159:         description = (",
          "160:             \"Server-side data generated by a payment gateway. Optional step when the \"",
          "161:             \"payment provider requires an additional action to initialize payment \"",
          "162:             \"session.\"",
          "163:         )",
          "165:     gateway = graphene.String(description=\"ID of a payment gateway.\", required=True)",
          "166:     name = graphene.String(description=\"Payment gateway name.\", required=True)",
          "167:     data = graphene.JSONString(",
          "168:         description=\"Initialized data by gateway.\", required=False",
          "169:     )",
          "",
          "---------------"
        ],
        "saleor/graphql/plugins/tests/test_plugins.py||saleor/graphql/plugins/tests/test_plugins.py": [
          "File: saleor/graphql/plugins/tests/test_plugins.py -> saleor/graphql/plugins/tests/test_plugins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: @pytest.mark.parametrize(",
          "84:     [",
          "89:     ],",
          "90: )",
          "91: def test_query_plugins_hides_secret_fields(",
          "",
          "[Removed Lines]",
          "83:     \"password, expected_password, api_key, expected_api_key\",",
          "85:         (None, None, None, None),",
          "86:         (\"ABCDEFGHIJ\", \"\", \"123456789\", \"6789\"),",
          "87:         (\"\", None, \"\", None),",
          "88:         (None, None, \"1234\", \"4\"),",
          "",
          "[Added Lines]",
          "83:     \"password, expected_password, api_key, expected_api_key, cert, expected_cert\",",
          "85:         (None, None, None, None, None, None),",
          "86:         (\"ABCDEFGHIJ\", \"\", \"123456789\", \"6789\", \"long text\\n with new\\n lines\", \"ines\"),",
          "87:         (\"\", None, \"\", None, \"\", None),",
          "88:         (None, None, \"1234\", \"4\", None, None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     expected_password,",
          "94:     api_key,",
          "95:     expected_api_key,",
          "96:     staff_api_client,",
          "97:     permission_manage_plugins,",
          "98:     settings,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     cert,",
          "97:     expected_cert,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:             conf_field[\"value\"] = password",
          "108:         if conf_field[\"name\"] == \"API private key\":",
          "109:             conf_field[\"value\"] = api_key",
          "110:     manager.save_plugin_configuration(",
          "111:         PluginSample.PLUGIN_ID,",
          "112:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:         if conf_field[\"name\"] == \"certificate\":",
          "113:             conf_field[\"value\"] = cert",
          "",
          "---------------"
        ],
        "saleor/graphql/plugins/types.py||saleor/graphql/plugins/types.py": [
          "File: saleor/graphql/plugins/types.py -> saleor/graphql/plugins/types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:         if field_type == ConfigurationTypeField.PASSWORD:",
          "23:             field[\"value\"] = \"\" if value else None",
          "26:             if not value:",
          "27:                 field[\"value\"] = None",
          "28:             elif len(value) > 4:",
          "",
          "[Removed Lines]",
          "25:         if field_type == ConfigurationTypeField.SECRET:",
          "",
          "[Added Lines]",
          "25:         if field_type in [",
          "26:             ConfigurationTypeField.SECRET,",
          "27:             ConfigurationTypeField.SECRET_MULTILINE,",
          "28:         ]:",
          "",
          "---------------"
        ],
        "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
          "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
          "--- Hunk 1 ---",
          "[Context before]",
          "1148:   BOOLEAN",
          "1149:   SECRET",
          "1150:   PASSWORD",
          "1151: }",
          "1153: type ConfirmAccount {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1151:   SECRETMULTILINE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2501:   paymentCapture(amount: PositiveDecimal, paymentId: ID!): PaymentCapture",
          "2502:   paymentRefund(amount: PositiveDecimal, paymentId: ID!): PaymentRefund",
          "2503:   paymentVoid(paymentId: ID!): PaymentVoid",
          "2504:   pageCreate(input: PageInput!): PageCreate",
          "2505:   pageDelete(id: ID!): PageDelete",
          "2506:   pageBulkDelete(ids: [ID]!): PageBulkDelete",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2505:   paymentInitialize(gateway: String!, paymentData: JSONString): PaymentInitialize",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3225:   currencies: [String]!",
          "3226: }",
          "3228: input PaymentInput {",
          "3229:   gateway: String!",
          "3230:   token: String",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3230: type PaymentInitialize {",
          "3231:   errors: [Error!]! @deprecated(reason: \"Use typed errors with error codes. This field will be removed after 2020-07-31.\")",
          "3232:   initializedPayment: PaymentInitialized",
          "3233:   paymentErrors: [PaymentError!]!",
          "3234: }",
          "3236: type PaymentInitialized {",
          "3237:   gateway: String!",
          "3238:   name: String!",
          "3239:   data: JSONString",
          "3240: }",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import Adyen",
          "6: from django.contrib.auth.hashers import make_password",
          "8: from django.core.handlers.wsgi import WSGIRequest",
          "9: from django.http import HttpResponse, HttpResponseNotFound",
          "11: from ....checkout.models import Checkout",
          "12: from ....core.utils import build_absolute_uri",
          "13: from ....core.utils.url import prepare_url",
          "14: from ....order.events import external_notification_event",
          "15: from ....plugins.base_plugin import BasePlugin, ConfigurationTypeField",
          "16: from ... import PaymentError, TransactionKind",
          "18: from ...models import Payment, Transaction",
          "19: from ..utils import get_supported_currencies",
          "21:     AUTH_STATUS,",
          "22:     FAILED_STATUSES,",
          "23:     PENDING_STATUSES,",
          "",
          "[Removed Lines]",
          "7: from django.core.exceptions import ObjectDoesNotExist",
          "17: from ...interface import GatewayConfig, GatewayResponse, PaymentData, PaymentGateway",
          "20: from .utils import (",
          "",
          "[Added Lines]",
          "7: from django.core.exceptions import ObjectDoesNotExist, ValidationError",
          "10: from requests.exceptions import SSLError",
          "17: from ....plugins.error_codes import PluginErrorCode",
          "18: from ....plugins.models import PluginConfiguration",
          "20: from ...interface import (",
          "21:     GatewayConfig,",
          "22:     GatewayResponse,",
          "23:     InitializedPaymentResponse,",
          "24:     PaymentData,",
          "25:     PaymentGateway,",
          "26: )",
          "29: from .utils.apple_pay import initialize_apple_pay, make_request_to_initialize_apple_pay",
          "30: from .utils.common import (",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         {\"name\": \"notification-user\", \"value\": \"\"},",
          "63:         {\"name\": \"notification-password\", \"value\": \"\"},",
          "64:         {\"name\": \"enable-native-3d-secure\", \"value\": False},",
          "65:     ]",
          "67:     CONFIG_STRUCTURE = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:         {\"name\": \"apple-pay-cert\", \"value\": None},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:             ),",
          "169:             \"label\": \"Enable native 3D Secure\",",
          "170:         },",
          "171:     }",
          "173:     def __init__(self, *args, **kwargs):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:         \"apple-pay-cert\": {",
          "183:             \"type\": ConfigurationTypeField.SECRET_MULTILINE,",
          "184:             \"help_text\": (",
          "185:                 \"Follow the Adyen docs related to activating the Apple Pay for the \"",
          "186:                 \"web - https://docs.adyen.com/payment-methods/apple-pay/\"",
          "187:                 \"enable-apple-pay. This certificate is only required when you offer \"",
          "188:                 \"the Apple Pay as a web payment method.  Leave it blank if you don't \"",
          "189:                 \"offer Apple Pay or offer it only as a payment method in your iOS app.\"",
          "190:             ),",
          "191:             \"label\": \"Apple Pay certificate\",",
          "192:         },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:                 \"webhook_user_password\": configuration[\"notification-password\"],",
          "188:                 \"adyen_auto_capture\": configuration[\"adyen-auto-capture\"],",
          "189:                 \"enable_native_3d_secure\": configuration[\"enable-native-3d-secure\"],",
          "190:             },",
          "191:         )",
          "192:         api_key = self.config.connection_params[\"api_key\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:                 \"apple_pay_cert\": configuration[\"apple-pay-cert\"],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "214:     def token_is_required_as_payment_input(self, previous_value):",
          "215:         return False",
          "217:     @require_active_plugin",
          "218:     def get_payment_gateway_for_checkout(",
          "219:         self, checkout: \"Checkout\", previous_value,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     @require_active_plugin",
          "241:     def initialize_payment(",
          "242:         self, payment_data, previous_value",
          "243:     ) -> \"InitializedPaymentResponse\":",
          "244:         payment_method = payment_data.get(\"paymentMethod\")",
          "245:         if payment_method == \"applepay\":",
          "246:             # The apple pay on the web requires additional step",
          "247:             session_obj = initialize_apple_pay(",
          "248:                 payment_data, self.config.connection_params[\"apple_pay_cert\"]",
          "249:             )",
          "250:             return InitializedPaymentResponse(",
          "251:                 gateway=self.PLUGIN_ID, name=self.PLUGIN_NAME, data=session_obj",
          "252:             )",
          "253:         return previous_value",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "551:             raw_response=result.message,",
          "552:             searchable_key=result.message.get(\"pspReference\", \"\"),",
          "553:         )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:     @classmethod",
          "594:     def validate_plugin_configuration(cls, plugin_configuration: \"PluginConfiguration\"):",
          "595:         \"\"\"Validate if provided configuration is correct.\"\"\"",
          "596:         configuration = plugin_configuration.configuration",
          "597:         configuration = {item[\"name\"]: item[\"value\"] for item in configuration}",
          "598:         apple_certificate = configuration[\"apple-pay-cert\"]",
          "599:         if plugin_configuration.active and apple_certificate:",
          "600:             global_apple_url = (",
          "601:                 \"https://apple-pay-gateway.apple.com/paymentservices/paymentSession\"",
          "602:             )",
          "603:             request_data = {",
          "604:                 \"merchantIdentifier\": \"\",",
          "605:                 \"displayName\": \"\",",
          "606:                 \"initiative\": \"web\",",
          "607:                 \"initiativeContext\": \"\",",
          "608:             }",
          "609:             # Try to exectue the session request without all required data. If the",
          "610:             # apple certificate is correct we will get the error related to the missing",
          "611:             # parameters. If certificate is incorrect, the SSL error will be raised.",
          "612:             try:",
          "613:                 make_request_to_initialize_apple_pay(",
          "614:                     validation_url=global_apple_url,",
          "615:                     request_data=request_data,",
          "616:                     certificate=apple_certificate,",
          "617:                 )",
          "618:             except SSLError:",
          "619:                 raise ValidationError(",
          "620:                     {",
          "621:                         \"apple-pay-cert\": ValidationError(",
          "622:                             \"The provided apple certificate is invalid.\",",
          "623:                             code=PluginErrorCode.INVALID.value,",
          "624:                         )",
          "625:                     }",
          "626:                 )",
          "627:             except Exception:",
          "628:                 pass",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py": [
          "File: saleor/payment/gateways/adyen/tests/conftest.py -> saleor/payment/gateways/adyen/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from .....checkout import calculations",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from unittest import mock",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:         origin_url=None,",
          "19:         adyen_auto_capture=None,",
          "20:         auto_capture=None,",
          "21:     ):",
          "22:         api_key = api_key or \"test_key\"",
          "23:         merchant_account = merchant_account or \"SaleorECOM\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:         apple_pay_cert=None,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:         auto_capture = auto_capture or False",
          "29:         settings.PLUGINS = [\"saleor.payment.gateways.adyen.plugin.AdyenGatewayPlugin\"]",
          "30:         manager = get_plugins_manager()",
          "48:         manager = get_plugins_manager()",
          "49:         return manager.plugins[0]",
          "",
          "[Removed Lines]",
          "31:         manager.save_plugin_configuration(",
          "32:             AdyenGatewayPlugin.PLUGIN_ID,",
          "33:             {",
          "34:                 \"active\": True,",
          "35:                 \"configuration\": [",
          "36:                     {\"name\": \"api-key\", \"value\": api_key},",
          "37:                     {\"name\": \"merchant-account\", \"value\": merchant_account},",
          "38:                     {\"name\": \"return-url\", \"value\": return_url},",
          "39:                     {\"name\": \"client-key\", \"value\": client_key},",
          "40:                     {\"name\": \"origin-url\", \"value\": origin_url},",
          "41:                     {\"name\": \"adyen-auto-capture\", \"value\": adyen_auto_capture},",
          "42:                     {\"name\": \"auto-capture\", \"value\": auto_capture},",
          "43:                     {\"name\": \"supported-currencies\", \"value\": \"USD\"},",
          "44:                 ],",
          "45:             },",
          "46:         )",
          "",
          "[Added Lines]",
          "35:         with mock.patch(\"saleor.payment.gateways.adyen.utils.apple_pay.requests.post\"):",
          "36:             manager.save_plugin_configuration(",
          "37:                 AdyenGatewayPlugin.PLUGIN_ID,",
          "38:                 {",
          "39:                     \"active\": True,",
          "40:                     \"configuration\": [",
          "41:                         {\"name\": \"api-key\", \"value\": api_key},",
          "42:                         {\"name\": \"merchant-account\", \"value\": merchant_account},",
          "43:                         {\"name\": \"return-url\", \"value\": return_url},",
          "44:                         {\"name\": \"client-key\", \"value\": client_key},",
          "45:                         {\"name\": \"origin-url\", \"value\": origin_url},",
          "46:                         {\"name\": \"adyen-auto-capture\", \"value\": adyen_auto_capture},",
          "47:                         {\"name\": \"auto-capture\", \"value\": auto_capture},",
          "48:                         {\"name\": \"supported-currencies\", \"value\": \"USD\"},",
          "49:                         {\"name\": \"apple-pay-cert\", \"value\": apple_pay_cert},",
          "50:                     ],",
          "51:                 },",
          "52:             )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py": [
          "File: saleor/payment/gateways/adyen/tests/test_plugin.py -> saleor/payment/gateways/adyen/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from unittest import mock",
          "5: import pytest",
          "7: from .... import PaymentError, TransactionKind",
          "8: from ....interface import GatewayResponse, PaymentMethodInfo",
          "9: from ....models import Payment",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: from django.core.exceptions import ValidationError",
          "7: from requests.exceptions import RequestException, SSLError",
          "9: from .....plugins.models import PluginConfiguration",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473:     assert response.currency == order_with_lines.currency",
          "474:     assert response.transaction_id == \"852595499936560C\"  # ID returned by Adyen",
          "475:     assert response.payment_method_info == PaymentMethodInfo(brand=\"visa\", type=\"test\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481: @mock.patch(\"saleor.payment.gateways.adyen.utils.apple_pay.requests.post\")",
          "482: def test_validate_plugin_configuration_incorrect_certificate(",
          "483:     mocked_request, adyen_plugin",
          "484: ):",
          "485:     plugin = adyen_plugin(apple_pay_cert=\"cert\")",
          "486:     mocked_request.side_effect = SSLError()",
          "487:     configuration = PluginConfiguration.objects.get()",
          "488:     with pytest.raises(ValidationError):",
          "489:         plugin.validate_plugin_configuration(configuration)",
          "492: @mock.patch(\"saleor.payment.gateways.adyen.utils.apple_pay.requests.post\")",
          "493: def test_validate_plugin_configuration_correct_cert(mocked_request, adyen_plugin):",
          "494:     plugin = adyen_plugin(apple_pay_cert=\"correct_cert\")",
          "495:     mocked_request.side_effect = RequestException()",
          "496:     configuration = PluginConfiguration.objects.get()",
          "497:     plugin.validate_plugin_configuration(configuration)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py||saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py": [
          "File: saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py -> saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from unittest import mock",
          "3: import pytest",
          "5: from saleor.payment import PaymentError",
          "6: from saleor.payment.gateways.adyen.utils.apple_pay import (",
          "7:     initialize_apple_pay_session,",
          "8:     validate_payment_data_for_apple_pay,",
          "9: )",
          "12: @pytest.mark.parametrize(",
          "13:     \"validation_url,merchant_identifier,domain,display_name,certificate\",",
          "14:     [",
          "15:         (",
          "16:             \"https://apple-pay-gateway.apple.com/paymentservices/startSession\",",
          "17:             \"merchant.com.identifier\",",
          "18:             \"saleor.com\",",
          "19:             None,",
          "20:             \"certifiate data\",",
          "21:         ),",
          "22:         (None, \"merchant.com.identifier\", \"saleor.com\", \"Saleor\", \"certifiate data\"),",
          "23:         (",
          "24:             \"https://apple-pay-gateway.apple.com/paymentservices/startSession\",",
          "25:             None,",
          "26:             \"saleor.com\",",
          "27:             \"Saleor\",",
          "28:             \"certifiate data\",",
          "29:         ),",
          "30:         (",
          "31:             \"https://apple-pay-gateway.apple.com/paymentservices/startSession\",",
          "32:             \"merchant.com.identifier\",",
          "33:             None,",
          "34:             \"Saleor\",",
          "35:             \"certifiate data\",",
          "36:         ),",
          "37:         (",
          "38:             \"https://not-whitelisted-domain.com/paymentservices/startSession\",",
          "39:             \"merchant.com.identifier\",",
          "40:             \"saleor.com\",",
          "41:             \"Saleor\",",
          "42:             \"certifiate data\",",
          "43:         ),",
          "44:         (",
          "45:             \"https://apple-pay-gateway.apple.com/paymentservices/startSession\",",
          "46:             \"merchant.com.identifier\",",
          "47:             \"saleor.com\",",
          "48:             \"Saleor\",",
          "49:             None,",
          "50:         ),",
          "51:     ],",
          "52: )",
          "53: def test_validate_payment_data_for_apple_pay_raises_payment_error(",
          "54:     validation_url, merchant_identifier, domain, display_name, certificate",
          "55: ):",
          "56:     with pytest.raises(PaymentError):",
          "57:         validate_payment_data_for_apple_pay(",
          "58:             validation_url, merchant_identifier, domain, display_name, certificate",
          "59:         )",
          "62: def test_validate_payment_data_for_apple_pay():",
          "63:     validation_url = \"https://apple-pay-gateway.apple.com/paymentservices/startSession\"",
          "64:     merchant_identifier = \"merchant.com.identifier\"",
          "65:     domain = \"saleor.com\"",
          "66:     display_name = \"Saleor \"",
          "67:     certificate = \"certifiate data\"",
          "69:     validate_payment_data_for_apple_pay(",
          "70:         validation_url, merchant_identifier, domain, display_name, certificate",
          "71:     )",
          "74: @mock.patch(\"saleor.payment.gateways.adyen.utils.apple_pay.NamedTemporaryFile\")",
          "75: @mock.patch(\"saleor.payment.gateways.adyen.utils.apple_pay.requests.post\")",
          "76: def test_initialize_payment_for_apple_pay(mocked_request, mocked_tmp_file):",
          "77:     mocked_cert_file_name = \"cert-file-name\"",
          "78:     mocked_file = mock.MagicMock()",
          "79:     mocked_file.__enter__.return_value = mocked_file",
          "80:     mocked_file.name = mocked_cert_file_name",
          "81:     mocked_tmp_file.return_value = mocked_file",
          "83:     mocked_response = mock.Mock()",
          "84:     mocked_response.ok = True",
          "85:     mocked_response.json.return_value = {",
          "86:         \"epochTimestamp\": 1604652056653,",
          "87:         \"expiresAt\": 1604655656653,",
          "88:         \"merchantSessionIdentifier\": \"SSH5EFCB46BA25C4B14B3F37795A7F5B974_BB8E\",",
          "89:     }",
          "90:     mocked_request.return_value = mocked_response",
          "92:     validation_url = \"https://apple-pay-gateway.apple.com/paymentservices/startSession\"",
          "93:     merchant_identifier = \"merchant.com.identifier\"",
          "94:     domain = \"saleor.com\"",
          "95:     display_name = \"Saleor Shop\"",
          "96:     certificate = \"certifiate data\"",
          "98:     initialize_apple_pay_session(",
          "99:         validation_url, merchant_identifier, domain, display_name, certificate,",
          "100:     )",
          "102:     expected_data = {",
          "103:         \"merchantIdentifier\": merchant_identifier,",
          "104:         \"displayName\": display_name,",
          "105:         \"initiative\": \"web\",",
          "106:         \"initiativeContext\": domain,",
          "107:     }",
          "109:     mocked_request.assert_called_with(",
          "110:         validation_url, json=expected_data, cert=mocked_cert_file_name",
          "111:     )",
          "114: @mock.patch(\"saleor.payment.gateways.adyen.utils.apple_pay.requests.post\")",
          "115: def test_initialize_payment_for_apple_pay_request_failed(mocked_request):",
          "117:     mocked_response = mock.Mock()",
          "118:     mocked_response.ok = False",
          "119:     mocked_response.json.return_value = {}",
          "120:     mocked_request.return_value = mocked_response",
          "122:     validation_url = \"https://apple-pay-gateway.apple.com/paymentservices/startSession\"",
          "123:     merchant_identifier = \"merchant.com.identifier\"",
          "124:     domain = \"saleor.com\"",
          "125:     display_name = \"Saleor Shop\"",
          "126:     certificate = \"certifiate data\"",
          "128:     with pytest.raises(PaymentError):",
          "129:         initialize_apple_pay_session(",
          "130:             validation_url, merchant_identifier, domain, display_name, certificate,",
          "131:         )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_utils.py||saleor/payment/gateways/adyen/tests/utils/test_common.py": [
          "File: saleor/payment/gateways/adyen/tests/test_utils.py -> saleor/payment/gateways/adyen/tests/utils/test_common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import pytest",
          "6: from prices import Money, TaxedMoney",
          "12:     append_klarna_data,",
          "13:     from_adyen_price,",
          "14:     get_payment_method_info,",
          "",
          "[Removed Lines]",
          "8: from .....core.prices import quantize_price",
          "9: from .... import PaymentError",
          "10: from ....interface import PaymentMethodInfo",
          "11: from ..utils import (",
          "",
          "[Added Lines]",
          "8: from saleor.core.prices import quantize_price",
          "9: from saleor.payment import PaymentError",
          "10: from saleor.payment.gateways.adyen.utils.common import (",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     to_adyen_price,",
          "19:     update_payment_with_action_required_data,",
          "20: )",
          "23: @pytest.mark.parametrize(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: from saleor.payment.interface import PaymentMethodInfo",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:     }",
          "81: def test_append_klarna_data_tax_included(",
          "82:     mocked_checkout_line_total,",
          "83:     dummy_payment_data,",
          "",
          "[Removed Lines]",
          "80: @mock.patch(\"saleor.payment.gateways.adyen.utils.checkout_line_total\")",
          "",
          "[Added Lines]",
          "80: @mock.patch(\"saleor.payment.gateways.adyen.utils.common.checkout_line_total\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:     }",
          "276: def test_request_data_for_payment_append_klarna_data(",
          "277:     append_klarna_data_mock, dummy_payment_data",
          "278: ):",
          "",
          "[Removed Lines]",
          "275: @mock.patch(\"saleor.payment.gateways.adyen.utils.append_klarna_data\")",
          "",
          "[Added Lines]",
          "275: @mock.patch(\"saleor.payment.gateways.adyen.utils.common.append_klarna_data\")",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from ......checkout import calculations",
          "9: from ......order import OrderEvents, OrderStatus",
          "10: from ..... import ChargeStatus, TransactionKind",
          "12: from ...webhooks import (",
          "13:     create_new_transaction,",
          "14:     handle_authorization,",
          "",
          "[Removed Lines]",
          "11: from ...utils import to_adyen_price",
          "",
          "[Added Lines]",
          "11: from ...utils.common import to_adyen_price",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils/apple_pay.py||saleor/payment/gateways/adyen/utils/apple_pay.py": [
          "File: saleor/payment/gateways/adyen/utils/apple_pay.py -> saleor/payment/gateways/adyen/utils/apple_pay.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import logging",
          "2: from tempfile import NamedTemporaryFile",
          "3: from typing import Optional",
          "4: from urllib.parse import urlsplit",
          "6: import requests",
          "8: from .... import PaymentError",
          "10: # https://developer.apple.com/documentation/apple_pay_on_the_web/",
          "11: # setting_up_your_server#3172427",
          "13: APPLE_DOMAINS = [",
          "14:     \"apple-pay-gateway.apple.com\",",
          "15:     \"cn-apple-pay-gateway.apple.com\",",
          "16:     \"apple-pay-gateway-nc-pod1.apple.com\",",
          "17:     \"apple-pay-gateway-nc-pod2.apple.com\",",
          "18:     \"apple-pay-gateway-nc-pod3.apple.com\",",
          "19:     \"apple-pay-gateway-nc-pod4.apple.com\",",
          "20:     \"apple-pay-gateway-nc-pod5.apple.com\",",
          "21:     \"apple-pay-gateway-pr-pod1.apple.com\",",
          "22:     \"apple-pay-gateway-pr-pod2.apple.com\",",
          "23:     \"apple-pay-gateway-pr-pod3.apple.com\",",
          "24:     \"apple-pay-gateway-pr-pod4.apple.com\",",
          "25:     \"apple-pay-gateway-pr-pod5.apple.com\",",
          "26:     \"cn-apple-pay-gateway-sh-pod1.apple.com\",",
          "27:     \"cn-apple-pay-gateway-sh-pod2.apple.com\",",
          "28:     \"cn-apple-pay-gateway-sh-pod3.apple.com\",",
          "29:     \"cn-apple-pay-gateway-tj-pod1.apple.com\",",
          "30:     \"cn-apple-pay-gateway-tj-pod2.apple.com\",",
          "31:     \"cn-apple-pay-gateway-tj-pod3.apple.com\",",
          "32:     \"apple-pay-gateway-cert.apple.com\",",
          "33:     \"cn-apple-pay-gateway-cert.apple.com\",",
          "34: ]",
          "36: logger = logging.getLogger(__name__)",
          "39: def validate_payment_data_for_apple_pay(",
          "40:     validation_url: Optional[str],",
          "41:     merchant_identifier: Optional[str],",
          "42:     domain: Optional[str],",
          "43:     display_name: Optional[str],",
          "44:     certificate,",
          "45: ):",
          "46:     if not certificate:",
          "47:         raise PaymentError(\"Support for Apple Pay on the web is disabled.\")",
          "49:     required_fields = [",
          "50:         (validation_url, \"validationUrl\"),",
          "51:         (merchant_identifier, \"merchantIdentifier\"),",
          "52:         (domain, \"domain\"),",
          "53:         (display_name, \"displayName\"),",
          "54:     ]",
          "55:     for field, name in required_fields:",
          "56:         if not field:",
          "57:             raise PaymentError(f\"Missing {name} in the input data.\")",
          "59:     domain = urlsplit(validation_url).netloc",
          "60:     if domain not in APPLE_DOMAINS:",
          "61:         raise PaymentError(",
          "62:             \"The domain of the validation url is not defined as an Apple Pay domain.\"",
          "63:         )",
          "66: def initialize_apple_pay_session(",
          "67:     validation_url: str,",
          "68:     merchant_identifier: str,",
          "69:     domain: str,",
          "70:     display_name: str,",
          "71:     certificate: str,",
          "72: ) -> dict:",
          "74:     request_data = {",
          "75:         \"merchantIdentifier\": merchant_identifier,",
          "76:         \"displayName\": display_name,",
          "77:         \"initiative\": \"web\",",
          "78:         \"initiativeContext\": domain,",
          "79:     }",
          "80:     request_exception = False",
          "81:     response = None",
          "82:     try:",
          "83:         response = make_request_to_initialize_apple_pay(",
          "84:             validation_url, request_data, certificate",
          "85:         )",
          "86:     except requests.exceptions.RequestException:",
          "87:         logger.warning(\"Failed to fetch the Apple Pay session\", exc_info=True)",
          "88:         request_exception = True",
          "89:     if request_exception or response and not response.ok:",
          "90:         raise PaymentError(",
          "91:             \"Unable to create Apple Pay payment session. Make sure that input data \"",
          "92:             \" and certificate are correct.\"",
          "93:         )",
          "94:     return response.json()  # type: ignore",
          "97: def make_request_to_initialize_apple_pay(",
          "98:     validation_url: str, request_data: dict, certificate: str",
          "99: ):",
          "100:     with NamedTemporaryFile() as f:",
          "101:         f.write(certificate.encode())",
          "102:         f.flush()  # ensure all data written",
          "103:         return requests.post(validation_url, json=request_data, cert=f.name)",
          "106: def initialize_apple_pay(payment_data: dict, certificate: str) -> dict:",
          "107:     # The apple pay on the web requires additional step",
          "108:     validation_url = payment_data.get(\"validationUrl\", \"\")",
          "109:     merchant_identifier = payment_data.get(\"merchantIdentifier\", \"\")",
          "110:     domain = payment_data.get(\"domain\", \"\")",
          "111:     display_name = payment_data.get(\"displayName\", \"\")",
          "112:     validate_payment_data_for_apple_pay(",
          "113:         validation_url=validation_url,",
          "114:         merchant_identifier=merchant_identifier,",
          "115:         domain=domain,",
          "116:         display_name=display_name,",
          "117:         certificate=certificate,",
          "118:     )",
          "119:     return initialize_apple_pay_session(",
          "120:         validation_url=validation_url,",
          "121:         merchant_identifier=merchant_identifier,",
          "122:         domain=domain,",
          "123:         display_name=display_name,",
          "124:         certificate=certificate,",
          "125:     )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils/common.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils/common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from django.conf import settings",
          "9: from django_countries.fields import Country",
          "12:     checkout_line_total,",
          "13:     checkout_shipping_price,",
          "14:     checkout_total,",
          "15: )",
          "23: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "11: from ....checkout.calculations import (",
          "16: from ....checkout.models import Checkout",
          "17: from ....core.prices import quantize_price",
          "18: from ....discount.utils import fetch_active_discounts",
          "19: from ....payment.models import Payment",
          "20: from ... import PaymentError",
          "21: from ...interface import PaymentData, PaymentMethodInfo",
          "",
          "[Added Lines]",
          "11: from .....checkout.calculations import (",
          "16: from .....checkout.models import Checkout",
          "17: from .....core.prices import quantize_price",
          "18: from .....discount.utils import fetch_active_discounts",
          "19: from .....payment.models import Payment",
          "20: from .... import PaymentError",
          "21: from ....interface import PaymentData, PaymentMethodInfo",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: from ...gateway import payment_refund_or_void",
          "42: from ...interface import GatewayConfig, GatewayResponse",
          "43: from ...utils import create_payment_information, create_transaction, gateway_postprocess",
          "46: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "44: from .utils import FAILED_STATUSES, api_call, from_adyen_price",
          "",
          "[Added Lines]",
          "44: from .utils.common import FAILED_STATUSES, api_call, from_adyen_price",
          "",
          "---------------"
        ],
        "saleor/payment/interface.py||saleor/payment/interface.py": [
          "File: saleor/payment/interface.py -> saleor/payment/interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:     name: str",
          "124:     currencies: List[str]",
          "125:     config: List[Dict[str, Any]]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: @dataclass",
          "129: class InitializedPaymentResponse:",
          "130:     gateway: str",
          "131:     name: str",
          "132:     data: Optional[JSONType] = None",
          "",
          "---------------"
        ],
        "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py": [
          "File: saleor/plugins/base_plugin.py -> saleor/plugins/base_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from ..payment.interface import (",
          "11:     CustomerSource,",
          "12:     GatewayResponse,",
          "13:     PaymentData,",
          "14:     PaymentGateway,",
          "15: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:     InitializedPaymentResponse,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:     STRING = \"String\"",
          "34:     BOOLEAN = \"Boolean\"",
          "35:     SECRET = \"Secret\"",
          "36:     PASSWORD = \"Password\"",
          "37:     CHOICES = [",
          "38:         (STRING, \"Field is a String\"),",
          "39:         (BOOLEAN, \"Field is a Boolean\"),",
          "40:         (SECRET, \"Field is a Secret\"),",
          "41:         (PASSWORD, \"Field is a Password\"),",
          "42:     ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     SECRET_MULTILINE = \"SecretMultiline\"",
          "44:         (SECRET_MULTILINE, \"Field is a Secret multiline\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:         \"\"\"Triggered when ShopFetchTaxRates mutation is called.\"\"\"",
          "369:         return NotImplemented",
          "371:     def authorize_payment(",
          "372:         self, payment_information: \"PaymentData\", previous_value",
          "373:     ) -> \"GatewayResponse\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374:     def initialize_payment(",
          "375:         self, payment_data: dict, previous_value",
          "376:     ) -> \"InitializedPaymentResponse\":",
          "377:         return NotImplemented",
          "",
          "---------------"
        ],
        "saleor/plugins/manager.py||saleor/plugins/manager.py": [
          "File: saleor/plugins/manager.py -> saleor/plugins/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         GatewayResponse,",
          "28:         PaymentData,",
          "29:         PaymentGateway,",
          "30:         TokenConfig,",
          "31:     )",
          "32:     from ..product.models import Product, ProductType",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:         InitializedPaymentResponse,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:         default_value = None",
          "315:         return self.__run_method_on_plugins(\"checkout_updated\", default_value, checkout)",
          "317:     def authorize_payment(",
          "318:         self, gateway: str, payment_information: \"PaymentData\"",
          "319:     ) -> \"GatewayResponse\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:     def initialize_payment(",
          "319:         self, gateway, payment_data: dict",
          "320:     ) -> Optional[\"InitializedPaymentResponse\"]:",
          "321:         method_name = \"initialize_payment\"",
          "322:         default_value = None",
          "323:         gtw = self.get_plugin(gateway)",
          "324:         if not gtw:",
          "325:             return None",
          "327:         return self.__run_method_on_single_plugin(",
          "328:             gtw, method_name, previous_value=default_value, payment_data=payment_data,",
          "329:         )",
          "",
          "---------------"
        ],
        "saleor/plugins/tests/sample_plugins.py||saleor/plugins/tests/sample_plugins.py": [
          "File: saleor/plugins/tests/sample_plugins.py -> saleor/plugins/tests/sample_plugins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:             \"help_text\": \"API key\",",
          "48:             \"label\": \"Private key\",",
          "49:         },",
          "50:     }",
          "52:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:         \"certificate\": {",
          "51:             \"type\": ConfigurationTypeField.SECRET_MULTILINE,",
          "52:             \"help_text\": \"\",",
          "53:             \"label\": \"Multiline certificate\",",
          "54:         },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8efc063150c17e91e4089c94c3d8b89336297433",
      "candidate_info": {
        "commit_hash": "8efc063150c17e91e4089c94c3d8b89336297433",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/8efc063150c17e91e4089c94c3d8b89336297433",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py"
        ],
        "message": "Fix incorrect names of field",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:     ):",
          "316:         super()._update_config_items(configuration_to_update, current_config)",
          "317:         for item in current_config:",
          "319:                 item[\"value\"] = make_password(item[\"value\"])",
          "321:     @require_active_plugin",
          "",
          "[Removed Lines]",
          "318:             if item.get(\"name\") == \"Notification password\" and item[\"value\"]:",
          "",
          "[Added Lines]",
          "318:             if item.get(\"name\") == \"notification-password\" and item[\"value\"]:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "abb558535fac84a462e9b72caea7e2d0b3018226",
      "candidate_info": {
        "commit_hash": "abb558535fac84a462e9b72caea7e2d0b3018226",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/abb558535fac84a462e9b72caea7e2d0b3018226",
        "files": [
          "saleor/order/events.py",
          "saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/interface.py",
          "saleor/payment/utils.py"
        ],
        "message": "Fix mypy errors",
        "before_after_code_files": [
          "saleor/order/events.py||saleor/order/events.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/interface.py||saleor/payment/interface.py",
          "saleor/payment/utils.py||saleor/payment/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/order/events.py||saleor/order/events.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ],
          "candidate": [
            "saleor/order/events.py||saleor/order/events.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/order/events.py||saleor/order/events.py": [
          "File: saleor/order/events.py -> saleor/order/events.py"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import logging",
          "2: from decimal import Decimal",
          "5: import Adyen",
          "6: from babel.numbers import get_currency_precision",
          "",
          "[Removed Lines]",
          "3: from typing import Any, Callable, Dict",
          "",
          "[Added Lines]",
          "3: from typing import Any, Callable, Dict, Optional",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     return str(value_without_comma.quantize(Decimal(\"1\")))",
          "39:     try:",
          "41:     except (Adyen.AdyenError, ValueError, TypeError) as e:",
          "42:         logger.error(f\"Unable to process the payment: {e}\")",
          "43:         raise PaymentError(\"Unable to process the payment request.\")",
          "",
          "[Removed Lines]",
          "38: def api_call(requst_data: Dict[str, Any], method: Callable) -> Adyen.Adyen:",
          "40:         return method(requst_data)",
          "",
          "[Added Lines]",
          "38: def api_call(request_data: Optional[Dict[str, Any]], method: Callable) -> Adyen.Adyen:",
          "40:         return method(request_data)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:         extra_request_params[\"origin\"] = origin_url",
          "115:     method = payment_data[\"paymentMethod\"].get(\"type\", [])",
          "121:         \"amount\": {",
          "122:             \"value\": get_price_amount(",
          "123:                 payment_information.amount, payment_information.currency",
          "",
          "[Removed Lines]",
          "116:     if \"klarna\" in method:",
          "117:         # TODO",
          "118:         append_klarna_data()",
          "120:     request = {",
          "",
          "[Added Lines]",
          "117:     request_data = {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130:         \"merchantAccount\": merchant_account,",
          "132:     }",
          "136: def request_data_for_gateway_config(",
          "",
          "[Removed Lines]",
          "133:     return request",
          "",
          "[Added Lines]",
          "131:     if \"klarna\" in method:",
          "132:         # TODO",
          "133:         append_klarna_data(payment_information, request_data)",
          "135:     return request_data",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from .utils import convert_adyen_price_format",
          "29:     _type, payment_id = from_global_id(payment_id)",
          "30:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
          "31:     return payment",
          "34: def get_transaction(",
          "37:     transaction = payment.transactions.filter(kind=kind, token=transaction_id).first()",
          "38:     return transaction",
          "",
          "[Removed Lines]",
          "28: def get_payment(payment_id: str) -> Payment:",
          "35:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
          "36: ) -> Transaction:",
          "",
          "[Added Lines]",
          "28: def get_payment(payment_id: Optional[str]) -> Optional[Payment]:",
          "29:     if not payment_id:",
          "30:         return None",
          "37:     payment: \"Payment\", transaction_id: Optional[str], kind: str,",
          "38: ) -> Optional[Transaction]:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141: ):",
          "142:     # https://docs.adyen.com/checkout/cancel-or-refund#cancel-or-refund-notification",
          "143:     additional_data = notification.get(\"additionalData\")",
          "144:     action = additional_data.get(\"modification.action\")",
          "145:     if action == \"refund\":",
          "146:         handle_refund(notification, gateway_config)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     if not additional_data:",
          "147:         return",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:         order_refunded(payment.order, None, new_transaction.amount, payment)",
          "256:     if transaction:",
          "257:         return transaction.kind",
          "258:     # To proceed the refund we already need to have the capture status so we will use it",
          "",
          "[Removed Lines]",
          "255: def _get_kind(transaction: Optional[Transaction]) -> TransactionKind:",
          "",
          "[Added Lines]",
          "259: def _get_kind(transaction: Optional[Transaction]) -> str:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "398: def validate_hmac_signature(",
          "399:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
          "400: ) -> bool:",
          "403:     if not hmac_key and not hmac_signature:",
          "404:         return True",
          "",
          "[Removed Lines]",
          "401:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
          "402:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
          "",
          "[Added Lines]",
          "405:     hmac_signature: Optional[str] = notification.get(\"additionalData\", {}).get(",
          "406:         \"hmacSignature\"",
          "407:     )",
          "408:     hmac_key: Optional[str] = gateway_config.connection_params.get(\"webhook_hmac\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "409:     if not hmac_signature and hmac_key:",
          "410:         return False",
          "414:     success = \"true\" if notification.get(\"success\", \"\") == \"true\" else \"false\"",
          "415:     if notification.get(\"success\", None) is None:",
          "",
          "[Removed Lines]",
          "412:     hmac_key = hmac_key.encode()",
          "",
          "[Added Lines]",
          "418:     hmac_key = hmac_key.encode()  # type: ignore",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "436: def validate_auth_user(headers: HttpHeaders, gateway_config: \"GatewayConfig\") -> bool:",
          "437:     username = gateway_config.connection_params[\"webhook_user\"]",
          "438:     password = gateway_config.connection_params[\"webhook_user_password\"]",
          "440:     if not auth_header and not username:",
          "441:         return True",
          "442:     if auth_header and not username:",
          "",
          "[Removed Lines]",
          "439:     auth_header = headers.get(\"Authorization\")",
          "",
          "[Added Lines]",
          "445:     auth_header: Optional[str] = headers.get(\"Authorization\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "444:     if not auth_header and username:",
          "445:         return False",
          "448:     prefix = \"BASIC\"",
          "450:     if len(split_auth) != 2 or split_auth[0].upper() != prefix:",
          "",
          "[Removed Lines]",
          "447:     split_auth = auth_header.split(maxsplit=1)",
          "",
          "[Added Lines]",
          "453:     split_auth = auth_header.split(maxsplit=1)  # type: ignore",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "453:     auth = split_auth[1]",
          "454:     try:",
          "457:         request_username, request_password = decoded_auth.split(\":\")",
          "458:         user_is_correct = request_username == username",
          "459:         if user_is_correct and check_password(request_password, password):",
          "",
          "[Removed Lines]",
          "455:         decoded_auth = base64.b64decode(auth)",
          "456:         decoded_auth = decoded_auth.decode()",
          "",
          "[Added Lines]",
          "461:         decoded_auth = base64.b64decode(auth).decode()",
          "",
          "---------------"
        ],
        "saleor/payment/interface.py||saleor/payment/interface.py": [
          "File: saleor/payment/interface.py -> saleor/payment/interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     token: Optional[str] = None",
          "73:     customer_id: Optional[str] = None",
          "74:     reuse_source: bool = False",
          "78: @dataclass",
          "",
          "[Removed Lines]",
          "75:     data: Optional[JSONType] = None",
          "",
          "[Added Lines]",
          "75:     data: Optional[dict] = None",
          "",
          "---------------"
        ],
        "saleor/payment/utils.py||saleor/payment/utils.py": [
          "File: saleor/payment/utils.py -> saleor/payment/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: def create_transaction(",
          "133:     payment: Payment,",
          "134:     kind: str,",
          "136:     action_required: bool = False,",
          "137:     gateway_response: GatewayResponse = None,",
          "138:     error_msg=None,",
          "",
          "[Removed Lines]",
          "135:     payment_information: Optional[PaymentData],",
          "",
          "[Added Lines]",
          "135:     payment_information: PaymentData,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f28c07ad7948aa4a5cd3aff2f80e51c96a7054f",
      "candidate_info": {
        "commit_hash": "0f28c07ad7948aa4a5cd3aff2f80e51c96a7054f",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/0f28c07ad7948aa4a5cd3aff2f80e51c96a7054f",
        "files": [
          "saleor/order/models.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Cleanup the webhooks logic. Creae order after additional actions are done",
        "before_after_code_files": [
          "saleor/order/models.py||saleor/order/models.py",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/order/models.py||saleor/order/models.py": [
          "File: saleor/order/models.py -> saleor/order/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:     def is_pre_authorized(self):",
          "243:         return (",
          "244:             self.payments.filter(",
          "246:             )",
          "247:             .filter(transactions__is_success=True)",
          "248:             .exists()",
          "",
          "[Removed Lines]",
          "245:                 is_active=True, transactions__kind=TransactionKind.AUTH",
          "",
          "[Added Lines]",
          "245:                 is_active=True,",
          "246:                 transactions__kind=TransactionKind.AUTH,",
          "247:                 transactions__action_required=False,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:     def is_captured(self):",
          "252:         return (",
          "253:             self.payments.filter(",
          "255:             )",
          "256:             .filter(transactions__is_success=True)",
          "257:             .exists()",
          "",
          "[Removed Lines]",
          "254:                 is_active=True, transactions__kind=TransactionKind.CAPTURE",
          "",
          "[Added Lines]",
          "256:                 is_active=True,",
          "257:                 transactions__kind=TransactionKind.CAPTURE,",
          "258:                 transactions__action_required=False,",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:             raise PaymentError(\"Unable to finish the payment.\")",
          "336:         result = api_call(additional_data, self.adyen.checkout.payments)",
          "341:             response = self.capture_payment(payment_information, None)",
          "342:             is_success = response.is_success",
          "",
          "[Removed Lines]",
          "337:         is_success = result.message[\"resultCode\"].strip().lower() not in FAILED_STATUSES",
          "338:         # For enabled auto_capture on Saleor side we need to proceed an additional",
          "339:         # action",
          "340:         if is_success and config.auto_capture:",
          "",
          "[Added Lines]",
          "337:         result_code = result.message[\"resultCode\"].strip().lower()",
          "338:         is_success = result_code not in FAILED_STATUSES",
          "340:         if result_code in PENDING_STATUSES:",
          "341:             kind = TransactionKind.PENDING",
          "342:         elif is_success and config.auto_capture:",
          "343:             # For enabled auto_capture on Saleor side we need to proceed an additional",
          "344:             # action",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:             # standard flow for confirming an additional action",
          "384:             return self._process_additional_action(payment_information, kind)",
          "386:         # We already have the ACTION_TO_CONFIRM transaction, it means that",
          "387:         # payment was processed asynchronous and no additional action is required",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:         result_code = transaction.gateway_response.get(\"resultCode\", \"\").strip().lower()",
          "391:         if result_code and result_code in PENDING_STATUSES:",
          "392:             kind = TransactionKind.PENDING",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "395:             currency=payment_information.currency,",
          "396:         ).first()",
          "397:         is_success = True",
          "399:             response = self.capture_payment(payment_information, None)",
          "400:             is_success = response.is_success",
          "",
          "[Removed Lines]",
          "398:         if not transaction_already_processed and config.auto_capture:",
          "",
          "[Added Lines]",
          "406:         if (",
          "407:             not transaction_already_processed",
          "408:             and config.auto_capture",
          "409:             and kind == TransactionKind.CAPTURE",
          "410:         ):",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py": [
          "File: saleor/payment/gateways/adyen/tests/test_plugin.py -> saleor/payment/gateways/adyen/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:     assert response.currency == action_transaction.currency",
          "241: def test_confirm_already_processed_payment(payment_adyen_for_order, adyen_plugin):",
          "242:     payment_info = create_payment_information(payment_adyen_for_order,)",
          "243:     gateway_response = GatewayResponse(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: def test_confirm_payment_pending_order(payment_adyen_for_checkout, adyen_plugin):",
          "242:     payment_info = create_payment_information(payment_adyen_for_checkout,)",
          "243:     gateway_response = GatewayResponse(",
          "244:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "245:         action_required=False,",
          "246:         transaction_id=\"882595494831959A\",",
          "247:         is_success=True,",
          "248:         amount=payment_info.amount,",
          "249:         currency=payment_info.currency,",
          "250:         error=\"\",",
          "251:         raw_response={\"pspReference\": \"882595494831959A\", \"resultCode\": \"Pending\"},",
          "252:     )",
          "253:     action_transaction = create_transaction(",
          "254:         payment=payment_adyen_for_checkout,",
          "255:         payment_information=payment_info,",
          "256:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "257:         gateway_response=gateway_response,",
          "258:     )",
          "259:     adyen_plugin = adyen_plugin()",
          "260:     response = adyen_plugin.confirm_payment(payment_info, None)",
          "262:     assert response is not None",
          "263:     assert response.is_success is True",
          "264:     assert response.kind == TransactionKind.PENDING",
          "265:     assert response.amount == action_transaction.amount",
          "266:     assert response.currency == action_transaction.currency",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "14:     # given",
          "15:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "16:         [{\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}]",
          "17:     )",
          "20:     transaction_count = payment_adyen_for_checkout.transactions.all().count()",
          "",
          "[Removed Lines]",
          "13: def test_handle_additional_actions_post(api_call_mock, payment_adyen_for_checkout):",
          "18:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\"])",
          "",
          "[Added Lines]",
          "13: def test_handle_additional_actions_post(",
          "14:     api_call_mock, payment_adyen_for_checkout, adyen_plugin",
          "15: ):",
          "17:     adyen_plugin()",
          "18:     payment_adyen_for_checkout.to_confirm = True",
          "22:     payment_adyen_for_checkout.save(update_fields=[\"to_confirm\", \"extra_data\"])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     payment_details_mock = mock.Mock()",
          "31:     message = {",
          "32:         \"resultCode\": \"Test\",",
          "33:     }",
          "34:     api_call_mock.return_value.message = message",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:         \"pspReference\": \"11111\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:     assert f\"checkout={quote_plus(checkout_id)}\" in response.url",
          "43:     assert f\"resultCode={message['resultCode']}\" in response.url",
          "44:     assert f\"payment={quote_plus(payment_id)}\" in response.url",
          "52: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "54:     # given",
          "55:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "56:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "57:     )",
          "60:     transaction_count = payment_adyen_for_checkout.transactions.all().count()",
          "",
          "[Removed Lines]",
          "45:     assert (",
          "46:         payment_adyen_for_checkout.transactions.all().count() == transaction_count + 1",
          "47:     )",
          "48:     transaction = payment_adyen_for_checkout.transactions.last()",
          "49:     assert transaction.kind == TransactionKind.ACTION_TO_CONFIRM",
          "53: def test_handle_additional_actions_get(api_call_mock, payment_adyen_for_checkout):",
          "58:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\"])",
          "",
          "[Added Lines]",
          "50:     transactions = payment_adyen_for_checkout.transactions.all()",
          "51:     assert transactions.count() == transaction_count + 2  # TO_CONFIRM, AUTH",
          "53:     assert transactions.first().kind == TransactionKind.ACTION_TO_CONFIRM",
          "54:     assert transactions.last().kind == TransactionKind.AUTH",
          "55:     assert payment_adyen_for_checkout.order",
          "56:     assert payment_adyen_for_checkout.checkout is None",
          "60: def test_handle_additional_actions_get(",
          "61:     api_call_mock, payment_adyen_for_checkout, adyen_plugin",
          "62: ):",
          "64:     adyen_plugin()",
          "65:     payment_adyen_for_checkout.to_confirm = True",
          "69:     payment_adyen_for_checkout.save(update_fields=[\"to_confirm\", \"extra_data\"])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "73:     payment_details_mock = mock.Mock()",
          "74:     message = {",
          "75:         \"resultCode\": \"Test\",",
          "76:     }",
          "77:     api_call_mock.return_value.message = message",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:         \"pspReference\": \"11111\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "85:     assert f\"checkout={quote_plus(checkout_id)}\" in response.url",
          "86:     assert f\"resultCode={message['resultCode']}\" in response.url",
          "87:     assert f\"payment={quote_plus(payment_id)}\" in response.url",
          "95: def test_handle_additional_actions_more_action_required(payment_adyen_for_checkout):",
          "",
          "[Removed Lines]",
          "88:     assert (",
          "89:         payment_adyen_for_checkout.transactions.all().count() == transaction_count + 1",
          "90:     )",
          "91:     transaction = payment_adyen_for_checkout.transactions.last()",
          "92:     assert transaction.kind == TransactionKind.ACTION_TO_CONFIRM",
          "",
          "[Added Lines]",
          "100:     transactions = payment_adyen_for_checkout.transactions.all()",
          "101:     assert transactions.count() == transaction_count + 2  # TO_CONFIRM, AUTH",
          "102:     assert transactions.first().kind == TransactionKind.ACTION_TO_CONFIRM",
          "103:     assert transactions.last().kind == TransactionKind.AUTH",
          "104:     assert payment_adyen_for_checkout.order",
          "105:     assert payment_adyen_for_checkout.checkout is None",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "136:     transaction = payment_adyen_for_checkout.transactions.last()",
          "137:     assert transaction.kind == TransactionKind.ACTION_TO_CONFIRM",
          "138:     assert transaction.action_required is True",
          "141: def test_handle_additional_actions_payment_does_not_exist(payment_adyen_for_checkout):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     assert payment_adyen_for_checkout.order is None",
          "153:     assert payment_adyen_for_checkout.checkout",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "166:     # then",
          "167:     assert response.status_code == 404",
          "168:     assert response.content.decode() == (",
          "171:     )",
          "",
          "[Removed Lines]",
          "169:         \"Cannot perform payment. \"",
          "170:         \"There is no active adyen payment with specified checkout.\"",
          "",
          "[Added Lines]",
          "184:         \"Cannot perform payment.There is no active adyen payment.\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "256:     # then",
          "257:     assert response.status_code == 404",
          "258:     assert response.content.decode() == (",
          "261:     )",
          "",
          "[Removed Lines]",
          "259:         \"Cannot perform payment. \"",
          "260:         \"There is no active adyen payment with specified checkout.\"",
          "",
          "[Added Lines]",
          "273:         \"Cannot perform payment.There is no checkout with this payment.\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "289:     # then",
          "290:     assert response.status_code == 404",
          "291:     assert response.content.decode() == (",
          "294:     )",
          "",
          "[Removed Lines]",
          "292:         \"Cannot perform payment. \"",
          "293:         \"There is no active adyen payment with specified checkout.\"",
          "",
          "[Added Lines]",
          "305:         \"Cannot perform payment.There is no checkout with this payment.\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "357:     # then",
          "358:     assert response.status_code == 404",
          "359:     assert response.content.decode() == (",
          "362:     )",
          "",
          "[Removed Lines]",
          "360:         \"Cannot perform payment. \"",
          "361:         \"There is no active adyen payment with specified checkout.\"",
          "",
          "[Added Lines]",
          "372:         \"Cannot perform payment.There is no active adyen payment.\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "391:     # then",
          "392:     assert response.status_code == 404",
          "393:     assert response.content.decode() == (",
          "396:     )",
          "",
          "[Removed Lines]",
          "394:         \"Cannot perform payment. \"",
          "395:         \"There is no active adyen payment with specified checkout.\"",
          "",
          "[Added Lines]",
          "405:         \"Cannot perform payment.There is no active adyen payment.\"",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import pytest",
          "7: from ......checkout import calculations",
          "9: from ..... import ChargeStatus, TransactionKind",
          "10: from ...utils import to_adyen_price",
          "11: from ...webhooks import (",
          "",
          "[Removed Lines]",
          "8: from ......order import OrderStatus",
          "",
          "[Added Lines]",
          "8: from ......order import OrderEvents, OrderStatus",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     config = adyen_plugin().config",
          "36:     handle_authorization(notification, config)",
          "40:     assert transaction.is_success is True",
          "41:     assert transaction.kind == TransactionKind.AUTH",
          "44: def test_handle_authorization_for_checkout(",
          "",
          "[Removed Lines]",
          "38:     assert payment.transactions.count() == 1",
          "39:     transaction = payment.transactions.get()",
          "",
          "[Added Lines]",
          "38:     assert payment.transactions.count() == 2",
          "39:     transaction = payment.transactions.last()",
          "42:     assert (",
          "43:         payment.order.events.filter(",
          "44:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "45:         ).count()",
          "46:         == 1",
          "47:     )",
          "50: def test_handle_multiple_authorization_notification(",
          "51:     notification, adyen_plugin, payment_adyen_for_order",
          "52: ):",
          "53:     payment = payment_adyen_for_order",
          "54:     payment.charge_status = ChargeStatus.NOT_CHARGED",
          "55:     payment.save()",
          "56:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "57:     first_notification = notification(",
          "58:         merchant_reference=payment_id,",
          "59:         success=\"false\",",
          "60:         psp_reference=\"wrong\",",
          "61:         value=to_adyen_price(payment.total, payment.currency),",
          "62:     )",
          "63:     config = adyen_plugin(adyen_auto_capture=True).config",
          "64:     handle_authorization(first_notification, config)",
          "66:     payment.refresh_from_db()",
          "67:     assert payment.charge_status == ChargeStatus.NOT_CHARGED",
          "68:     capture_transaction = payment.transactions.get(kind=TransactionKind.CAPTURE)",
          "69:     assert capture_transaction.is_success is False",
          "70:     assert (",
          "71:         payment.order.events.filter(",
          "72:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "73:         ).count()",
          "74:         == 1",
          "75:     )",
          "77:     second_notification = notification(",
          "78:         merchant_reference=payment_id,",
          "79:         value=to_adyen_price(payment.total, payment.currency),",
          "80:     )",
          "81:     handle_authorization(second_notification, config)",
          "82:     payment.refresh_from_db()",
          "83:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "84:     assert payment.captured_amount == payment.total",
          "85:     capture_transaction = payment.transactions.filter(",
          "86:         kind=TransactionKind.CAPTURE",
          "87:     ).last()",
          "88:     assert capture_transaction.is_success is True",
          "89:     assert (",
          "90:         payment.order.events.filter(",
          "91:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "92:         ).count()",
          "93:         == 2",
          "94:     )",
          "97: def test_handle_authorization_for_pending_order(",
          "98:     notification, adyen_plugin, payment_adyen_for_order",
          "99: ):",
          "100:     payment = payment_adyen_for_order",
          "101:     payment.charge_status = ChargeStatus.PENDING",
          "102:     payment.save()",
          "103:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "104:     notification = notification(",
          "105:         merchant_reference=payment_id,",
          "106:         value=to_adyen_price(payment.total, payment.currency),",
          "107:     )",
          "108:     config = adyen_plugin(adyen_auto_capture=True).config",
          "109:     handle_authorization(notification, config)",
          "111:     assert payment.transactions.count() == 2",
          "112:     transaction = payment.transactions.last()",
          "113:     assert transaction.is_success is True",
          "114:     assert transaction.kind == TransactionKind.CAPTURE",
          "115:     payment.refresh_from_db()",
          "116:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "117:     assert (",
          "118:         payment.order.events.filter(",
          "119:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "120:         ).count()",
          "121:         == 1",
          "122:     )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:     assert payment.checkout is None",
          "79:     assert payment.order",
          "80:     assert payment.order.checkout_token == checkout_token",
          "83: def test_handle_authorization_with_adyen_auto_capture(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:     assert (",
          "163:         payment.order.events.filter(",
          "164:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "165:         ).count()",
          "166:         == 1",
          "167:     )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:     plugin = adyen_plugin(adyen_auto_capture=True)",
          "109:     handle_authorization(notification, plugin.config)",
          "111:     assert payment.transactions.count() == 2",
          "112:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE).get()",
          "113:     assert transaction.is_success is True",
          "116: @pytest.mark.vcr",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:     payment.refresh_from_db()",
          "202:     assert (",
          "203:         payment.order.events.filter(",
          "204:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "205:         ).count()",
          "206:         == 1",
          "207:     )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE).get()",
          "137:     assert transaction.is_success is True",
          "138:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "141: def test_handle_authorization_with_adyen_auto_capture_and_payment_charged(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:     assert (",
          "234:         payment.order.events.filter(",
          "235:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "236:         ).count()",
          "237:         == 1",
          "238:     )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "153:     config.connection_params[\"adyen_auto_capture\"] = True",
          "154:     handle_authorization(notification, config)",
          "160: def test_handle_cancel(notification, adyen_plugin, payment_adyen_for_order):",
          "",
          "[Removed Lines]",
          "156:     # payment already has a charge status no need to handle auth action",
          "157:     assert payment.transactions.count() == 1",
          "",
          "[Added Lines]",
          "256:     payment.refresh_from_db()",
          "257:     assert payment.transactions.count() == 2",
          "258:     assert payment.transactions.filter(kind=TransactionKind.CAPTURE).exists()",
          "259:     assert (",
          "260:         payment.order.events.filter(",
          "261:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "262:         ).count()",
          "263:         == 1",
          "264:     )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "175:     assert transaction.is_success is True",
          "177:     assert payment.order.status == OrderStatus.CANCELED",
          "181:     notification, adyen_plugin, payment_adyen_for_order",
          "182: ):",
          "183:     payment = payment_adyen_for_order",
          "",
          "[Removed Lines]",
          "180: def test_handle_cancel_already_canceleld(",
          "",
          "[Added Lines]",
          "285:     assert (",
          "286:         payment.order.events.filter(",
          "287:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "288:         ).count()",
          "289:         == 1",
          "290:     )",
          "293: def test_handle_cancel_already_canceled(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "210:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE).get()",
          "211:     assert transaction.is_success is True",
          "212:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "215: def test_handle_capture_for_checkout(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:     assert (",
          "327:         payment.order.events.filter(",
          "328:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "329:         ).count()",
          "330:         == 1",
          "331:     )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "249:     assert payment.checkout is None",
          "250:     assert payment.order",
          "251:     assert payment.order.checkout_token == checkout_token",
          "254: def test_handle_capture_with_payment_already_charged(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:     assert (",
          "372:         payment.order.events.filter(",
          "373:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "374:         ).count()",
          "375:         == 1",
          "376:     )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "268:     handle_capture(notification, config)",
          "270:     # Payment is already captured so no need to save capture transaction",
          "274: @pytest.mark.parametrize(",
          "",
          "[Removed Lines]",
          "271:     assert payment.transactions.count() == 1",
          "",
          "[Added Lines]",
          "396:     payment.refresh_from_db()",
          "397:     assert payment.transactions.count() == 2",
          "398:     assert (",
          "399:         payment.order.events.filter(",
          "400:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "401:         ).count()",
          "402:         == 1",
          "403:     )",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "295:     assert transaction.is_success is True",
          "296:     payment.refresh_from_db()",
          "297:     assert payment.charge_status == ChargeStatus.NOT_CHARGED",
          "300: def test_handle_failed_capture_partial_charge(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:     assert (",
          "431:         payment.order.events.filter(",
          "432:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "433:         ).count()",
          "434:         == 1",
          "435:     )",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "318:     assert transaction.is_success is True",
          "319:     payment.refresh_from_db()",
          "320:     assert payment.charge_status == ChargeStatus.PARTIALLY_CHARGED",
          "323: def test_handle_pending(notification, adyen_plugin, payment_adyen_for_order):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:     assert (",
          "460:         payment.order.events.filter(",
          "461:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "462:         ).count()",
          "463:         == 1",
          "464:     )",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "336:     assert transaction.is_success is True",
          "337:     payment.refresh_from_db()",
          "338:     assert payment.charge_status == ChargeStatus.PENDING",
          "341: def test_handle_pending_with_adyen_auto_capture(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483:     assert (",
          "484:         payment.order.events.filter(",
          "485:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "486:         ).count()",
          "487:         == 1",
          "488:     )",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "358:     assert payment.transactions.filter(kind=TransactionKind.PENDING).first()",
          "359:     payment.refresh_from_db()",
          "360:     assert payment.charge_status == ChargeStatus.PENDING",
          "363: def test_handle_pending_already_pending(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:     assert (",
          "512:         payment.order.events.filter(",
          "513:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "514:         ).count()",
          "515:         == 1",
          "516:     )",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "405:     mock_order_refunded.assert_called_once_with(",
          "406:         payment.order, None, transaction.amount, payment",
          "407:     )",
          "410: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.order_refunded\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:     assert (",
          "565:         payment.order.events.filter(",
          "566:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "567:         ).count()",
          "568:         == 1",
          "569:     )",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "446:     handle_failed_refund(notification, config)",
          "448:     assert payment.transactions.count() == 1",
          "451: def test_handle_failed_refund_with_transaction_refund_ongoing(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "611:     assert (",
          "612:         payment.order.events.filter(",
          "613:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "614:         ).count()",
          "615:         == 1",
          "616:     )",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "469:     )  # ACTION_TO_CONFIRM, REFUND_ONGOING, REFUND_FAILED, FULLY_CHARGED",
          "470:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "471:     assert payment.total == payment.captured_amount",
          "474: def test_handle_failed_refund_with_transaction_refund(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "640:     assert (",
          "641:         payment.order.events.filter(",
          "642:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "643:         ).count()",
          "644:         == 1",
          "645:     )",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "491:     assert payment.transactions.count() == 4  # REFUND, REFUND_FAILED, FULLY_CHARGED",
          "492:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "493:     assert payment.total == payment.captured_amount",
          "496: def test_handle_reversed_refund(notification, adyen_plugin, payment_adyen_for_order):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "668:     assert (",
          "669:         payment.order.events.filter(",
          "670:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "671:         ).count()",
          "672:         == 1",
          "673:     )",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "510:     assert payment.transactions.filter(kind=TransactionKind.REFUND_REVERSED).exists()",
          "511:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "512:     assert payment.total == payment.captured_amount",
          "515: def test_handle_reversed_refund_already_processed(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "693:     assert (",
          "694:         payment.order.events.filter(",
          "695:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "696:         ).count()",
          "697:         == 1",
          "698:     )",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "528:     create_new_transaction(notification, payment, TransactionKind.REFUND_REVERSED)",
          "529:     handle_reversed_refund(notification, config)",
          "532:     assert payment.transactions.filter(kind=TransactionKind.REFUND_REVERSED).exists()",
          "",
          "[Removed Lines]",
          "531:     payment.refresh_from_db()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "547:     webhook_not_implemented(notification, config)",
          "552: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.handle_refund\")",
          "",
          "[Removed Lines]",
          "549:     assert payment.order.events.count() == 1",
          "",
          "[Added Lines]",
          "734:     assert (",
          "735:         payment.order.events.filter(",
          "736:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "737:         ).count()",
          "738:         == 1",
          "739:     )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import graphene",
          "12: from django.contrib.auth.hashers import check_password",
          "13: from django.contrib.auth.models import AnonymousUser",
          "15: from django.core.handlers.wsgi import WSGIRequest",
          "16: from django.http import (",
          "17:     HttpResponse,",
          "",
          "[Removed Lines]",
          "14: from django.core.exceptions import ObjectDoesNotExist, ValidationError",
          "",
          "[Added Lines]",
          "14: from django.core.exceptions import ValidationError",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: from ....core.transactions import transaction_with_commit_on_errors",
          "29: from ....core.utils.url import prepare_url",
          "30: from ....discount.utils import fetch_active_discounts",
          "32: from ....order.events import external_notification_event",
          "33: from ....payment.models import Payment, Transaction",
          "34: from ... import ChargeStatus, PaymentError, TransactionKind",
          "",
          "[Removed Lines]",
          "31: from ....order.actions import cancel_order, order_captured, order_refunded",
          "",
          "[Added Lines]",
          "31: from ....order.actions import (",
          "32:     cancel_order,",
          "33:     order_authorized,",
          "34:     order_captured,",
          "35:     order_refunded,",
          "36: )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43: def get_payment(",
          "45: ) -> Optional[Payment]:",
          "46:     transaction_id = transaction_id or \"\"",
          "47:     if not payment_id:",
          "",
          "[Removed Lines]",
          "44:     payment_id: Optional[str], transaction_id: Optional[str]",
          "",
          "[Added Lines]",
          "49:     payment_id: Optional[str], transaction_id: Optional[str] = None",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "59:     payment = (",
          "60:         Payment.objects.prefetch_related(\"order\", \"checkout\")",
          "61:         .select_for_update(of=(\"self\",))",
          "63:         .first()",
          "64:     )",
          "65:     if not payment:",
          "",
          "[Removed Lines]",
          "62:         .filter(id=db_payment_id)",
          "",
          "[Added Lines]",
          "67:         .filter(id=db_payment_id, is_active=True, gateway=\"mirumee.payments.adyen\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:     )",
          "143:         ChargeStatus.PARTIALLY_CHARGED,",
          "144:     }:",
          "145:         return",
          "165:     if not payment.order:",
          "187:     reason = notification.get(\"reason\", \"-\")",
          "188:     is_success = True if notification.get(\"success\") == \"true\" else False",
          "189:     success_msg = f\"Adyen: The payment  {transaction_id} request  was successful.\"",
          "191:     create_payment_notification_for_order(payment, success_msg, failed_msg, is_success)",
          "195: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "196:     # https://docs.adyen.com/checkout/cancel#cancellation-notifciation",
          "197:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Removed Lines]",
          "133: @transaction_with_commit_on_errors()",
          "134: def handle_authorization(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "135:     transaction_id = notification.get(\"pspReference\")",
          "136:     payment = get_payment(notification.get(\"merchantReference\"), transaction_id)",
          "137:     if not payment:",
          "138:         # We don't know anything about that payment",
          "139:         return",
          "140:     checkout = get_checkout(payment)",
          "141:     if payment.order and payment.charge_status in {",
          "142:         ChargeStatus.FULLY_CHARGED,",
          "147:     transaction = payment.transactions.filter(",
          "148:         token=transaction_id,",
          "149:         action_required=False,",
          "150:         is_success=True,",
          "151:         kind__in=[TransactionKind.AUTH, TransactionKind.CAPTURE],",
          "152:     ).last()",
          "154:     if transaction and payment.order:",
          "155:         # We already have this transaction and order is created",
          "156:         return",
          "158:     action_transaction = payment.transactions.filter(",
          "159:         token=transaction_id,",
          "160:         action_required=False,",
          "161:         is_success=True,",
          "162:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "163:     ).last()",
          "166:         # If the payment is not Auth/Capture, it means that user didn't return to the",
          "167:         # storefront and we need to finalize the checkout asynchronously.",
          "168:         if not action_transaction:",
          "169:             action_transaction = create_new_transaction(",
          "170:                 notification, payment, TransactionKind.ACTION_TO_CONFIRM",
          "171:             )",
          "173:         if action_transaction.is_success and checkout:  # type: ignore",
          "174:             try:",
          "175:                 discounts = fetch_active_discounts()",
          "176:                 order, _, _ = complete_checkout(",
          "177:                     checkout=checkout,",
          "178:                     payment_data={},",
          "179:                     store_source=False,",
          "180:                     discounts=discounts,",
          "181:                     user=checkout.user or AnonymousUser(),",
          "182:                 )",
          "183:             except ValidationError:",
          "184:                 payment_refund_or_void(payment)",
          "185:                 return",
          "190:     failed_msg = f\"Adyen: The payment {transaction_id} request failed. Reason: {reason}\"",
          "194: @transaction_with_commit_on_errors()",
          "",
          "[Added Lines]",
          "138: def create_order(payment, checkout):",
          "139:     try:",
          "140:         discounts = fetch_active_discounts()",
          "141:         order, _, _ = complete_checkout(",
          "142:             checkout=checkout,",
          "143:             payment_data={},",
          "144:             store_source=False,",
          "145:             discounts=discounts,",
          "146:             user=checkout.user or AnonymousUser(),",
          "147:         )",
          "148:     except ValidationError:",
          "149:         payment_refund_or_void(payment)",
          "150:         return None",
          "151:     payment.order = order",
          "152:     return order",
          "155: def handle_not_created_order(notification, payment, checkout):",
          "156:     \"\"\"Process the notification in case when payment doesn't have assigned order.\"\"\"",
          "158:     # We don't want to create order for payment that is cancelled or refunded",
          "159:     if payment.charge_status not in {",
          "160:         ChargeStatus.NOT_CHARGED,",
          "161:         ChargeStatus.PENDING,",
          "163:         ChargeStatus.FULLY_CHARGED,",
          "166:     # If the payment is not Auth/Capture, it means that user didn't return to the",
          "167:     # storefront and we need to finalize the checkout asynchronously.",
          "168:     action_transaction = create_new_transaction(",
          "169:         notification, payment, TransactionKind.ACTION_TO_CONFIRM",
          "170:     )",
          "172:     # Only when we confirm that notification is success we will create the order",
          "173:     if action_transaction.is_success and checkout:  # type: ignore",
          "174:         order = create_order(payment, checkout)",
          "175:         return order",
          "176:     return None",
          "179: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "180:     transaction_id = notification.get(\"pspReference\")",
          "181:     payment = get_payment(notification.get(\"merchantReference\"), transaction_id)",
          "182:     if not payment:",
          "183:         # We don't know anything about that payment",
          "184:         return",
          "185:     checkout = get_checkout(payment)",
          "188:         handle_not_created_order(notification, payment, checkout)",
          "189:     else:",
          "190:         adyen_auto_capture = gateway_config.connection_params[\"adyen_auto_capture\"]",
          "191:         kind = TransactionKind.AUTH",
          "192:         if adyen_auto_capture:",
          "193:             kind = TransactionKind.CAPTURE",
          "194:         transaction = payment.transactions.filter(",
          "195:             token=transaction_id,",
          "196:             action_required=False,",
          "197:             is_success=True,",
          "198:             kind__in=[TransactionKind.AUTH, TransactionKind.CAPTURE],",
          "199:         ).last()",
          "200:         new_transaction = create_new_transaction(notification, payment, kind)",
          "201:         if new_transaction.is_success and not transaction:",
          "202:             gateway_postprocess(new_transaction, payment)",
          "203:             if adyen_auto_capture:",
          "204:                 order_captured(payment.order, None, new_transaction.amount, payment)",
          "205:             else:",
          "206:                 order_authorized(payment.order, None, new_transaction.amount, payment)",
          "210:     failed_msg = (",
          "211:         f\"Adyen: The payment {transaction_id} request failed. Reason: {reason}.\"",
          "212:     )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "213:     create_payment_notification_for_order(",
          "214:         payment, success_msg, failed_msg, new_transaction.is_success",
          "215:     )",
          "217:         cancel_order(payment.order, None)",
          "",
          "[Removed Lines]",
          "216:     if payment.order:",
          "",
          "[Added Lines]",
          "237:     if payment.order and new_transaction.is_success:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "231:         handle_cancellation(notification, gateway_config)",
          "235: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "236:     # https://docs.adyen.com/checkout/capture#capture-notification",
          "237:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Removed Lines]",
          "234: @transaction_with_commit_on_errors()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "240:         return",
          "241:     checkout = get_checkout(payment)",
          "258:     if not payment.order:",
          "285:     else:",
          "286:         new_transaction = create_new_transaction(",
          "287:             notification, payment, TransactionKind.CAPTURE",
          "288:         )",
          "292:     reason = notification.get(\"reason\", \"-\")",
          "293:     is_success = True if notification.get(\"success\") == \"true\" else False",
          "",
          "[Removed Lines]",
          "243:     if payment.charge_status == ChargeStatus.FULLY_CHARGED:",
          "244:         # the payment has already status captured.",
          "245:         return",
          "247:     capture_transaction = payment.transactions.filter(",
          "248:         token=transaction_id,",
          "249:         action_required=False,",
          "250:         is_success=True,",
          "251:         kind=TransactionKind.CAPTURE,",
          "252:     ).last()",
          "254:     if capture_transaction:",
          "255:         # We already have this transaction",
          "256:         return",
          "259:         action_transaction = payment.transactions.filter(",
          "260:             token=transaction_id,",
          "261:             action_required=False,",
          "262:             is_success=True,",
          "263:             kind=TransactionKind.ACTION_TO_CONFIRM,",
          "264:         ).last()",
          "265:         # If the payment is not Auth/Capture, it means that user didn't return to the",
          "266:         # storefront and we need to finalize the checkout asynchronously.",
          "267:         if not action_transaction:",
          "268:             action_transaction = create_new_transaction(",
          "269:                 notification, payment, TransactionKind.ACTION_TO_CONFIRM",
          "270:             )",
          "272:         if action_transaction.is_success and checkout:  # type: ignore",
          "273:             try:",
          "274:                 discounts = fetch_active_discounts()",
          "275:                 order, _, _ = complete_checkout(",
          "276:                     checkout=checkout,",
          "277:                     payment_data={},",
          "278:                     store_source=False,",
          "279:                     discounts=discounts,",
          "280:                     user=checkout.user or AnonymousUser(),",
          "281:                 )",
          "282:             except ValidationError:",
          "283:                 payment_refund_or_void(payment)",
          "284:                 return",
          "289:         gateway_postprocess(new_transaction, payment)",
          "290:         order_captured(payment.order, None, new_transaction.amount, payment)",
          "",
          "[Added Lines]",
          "264:         handle_not_created_order(notification, payment, checkout)",
          "266:         capture_transaction = payment.transactions.filter(",
          "267:             action_required=False, is_success=True, kind=TransactionKind.CAPTURE,",
          "268:         ).last()",
          "272:         if new_transaction.is_success and not capture_transaction:",
          "273:             gateway_postprocess(new_transaction, payment)",
          "274:             order_captured(payment.order, None, new_transaction.amount, payment)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "296:     create_payment_notification_for_order(payment, success_msg, failed_msg, is_success)",
          "300: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "301:     # https://docs.adyen.com/checkout/capture#failed-capture",
          "302:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Removed Lines]",
          "299: @transaction_with_commit_on_errors()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "323:     create_payment_notification_for_order(payment, msg, None, True)",
          "327: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "328:     # https://docs.adyen.com/development-resources/webhooks/understand-notifications#",
          "329:     # event-codes\"",
          "",
          "[Removed Lines]",
          "326: @transaction_with_commit_on_errors()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "347:     )",
          "351: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "352:     # https://docs.adyen.com/checkout/refund#refund-notification",
          "353:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Removed Lines]",
          "350: @transaction_with_commit_on_errors()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "380:     return TransactionKind.CAPTURE",
          "384: def handle_failed_refund(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "385:     # https://docs.adyen.com/checkout/refund#failed-refund",
          "386:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Removed Lines]",
          "383: @transaction_with_commit_on_errors()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "444:         gateway_postprocess(new_transaction, payment)",
          "448: def handle_reversed_refund(",
          "449:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
          "450: ):",
          "",
          "[Removed Lines]",
          "447: @transaction_with_commit_on_errors()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "481:     handle_refund(notification, gateway_config)",
          "485: def webhook_not_implemented(",
          "486:     notification: Dict[str, Any], gateway_config: GatewayConfig",
          "487: ):",
          "",
          "[Removed Lines]",
          "484: @transaction_with_commit_on_errors()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "589:     return False",
          "592: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
          "593:     json_data = json.loads(request.body)",
          "594:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570: @transaction_with_commit_on_errors()",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "609:     return HttpResponse(\"[accepted]\")",
          "612: def handle_additional_actions(",
          "613:     request: WSGIRequest, payment_details: Callable,",
          "614: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "591: @transaction_with_commit_on_errors()",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "618:     if not payment_id or not checkout_pk:",
          "619:         return HttpResponseNotFound()",
          "628:         )",
          "630:         return HttpResponseNotFound(",
          "633:         )",
          "634:     extra_data = json.loads(payment.extra_data)",
          "635:     data = extra_data[-1] if isinstance(extra_data, list) else extra_data",
          "",
          "[Removed Lines]",
          "621:     _type, payment_pk = from_global_id(payment_id)",
          "622:     try:",
          "623:         payment = Payment.objects.get(",
          "624:             pk=payment_pk,",
          "625:             checkout__pk=checkout_pk,",
          "626:             is_active=True,",
          "627:             gateway=\"mirumee.payments.adyen\",",
          "629:     except ObjectDoesNotExist:",
          "631:             \"Cannot perform payment. \"",
          "632:             \"There is no active adyen payment with specified checkout.\"",
          "",
          "[Added Lines]",
          "601:     payment = get_payment(payment_id, transaction_id=None)",
          "602:     if not payment:",
          "603:         return HttpResponseNotFound(",
          "604:             \"Cannot perform payment.There is no active adyen payment.\"",
          "606:     if not payment.checkout or str(payment.checkout.token) != checkout_pk:",
          "608:             \"Cannot perform payment.There is no checkout with this payment.\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "706: def handle_api_response(",
          "707:     payment: Payment, response: Adyen.Adyen,",
          "708: ):",
          "709:     payment_data = create_payment_information(",
          "710:         payment=payment, payment_token=payment.token,",
          "711:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:     checkout = get_checkout(payment)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "738:         payment_information=payment_data,",
          "739:         gateway_response=gateway_response,",
          "740:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "720:     if is_success and not action_required:",
          "721:         create_order(payment, checkout)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03be7057c1f1d920d0f5498e3f7669f9f94cb327",
      "candidate_info": {
        "commit_hash": "03be7057c1f1d920d0f5498e3f7669f9f94cb327",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/03be7057c1f1d920d0f5498e3f7669f9f94cb327",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Fix failing saleor autocapture. Improve the handler for authorization (#6348)\n\n* Fix failing saleor autocapture. Improve the webhook hanlder for authorization\n\n* Handle cases when payment is already voided and when is still active",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:         result = api_call(additional_data, self.adyen.checkout.payments_details)",
          "335:         result_code = result.message[\"resultCode\"].strip().lower()",
          "336:         is_success = result_code not in FAILED_STATUSES",
          "338:         if result_code in PENDING_STATUSES:",
          "339:             kind = TransactionKind.PENDING",
          "341:             # For enabled auto_capture on Saleor side we need to proceed an additional",
          "342:             # action",
          "346:         payment_method_info = get_payment_method_info(payment_information, result)",
          "347:         action = result.message.get(\"action\")",
          "348:         return GatewayResponse(",
          "349:             is_success=is_success,",
          "351:             action_required_data=action,",
          "352:             kind=kind,",
          "353:             amount=payment_information.amount,",
          "",
          "[Removed Lines]",
          "340:         elif is_success and config.auto_capture:",
          "343:             response = self.capture_payment(payment_information, None)",
          "344:             is_success = response.is_success",
          "350:             action_required=\"action\" in result.message,",
          "",
          "[Added Lines]",
          "337:         action_required = \"action\" in result.message",
          "340:         elif is_success and config.auto_capture and not action_required:",
          "343:             kind = TransactionKind.CAPTURE",
          "344:             result = call_capture(",
          "345:                 payment_information=payment_information,",
          "346:                 merchant_account=self.config.connection_params[\"merchant_account\"],",
          "347:                 token=result.message.get(\"pspReference\"),",
          "348:                 adyen_client=self.adyen,",
          "349:             )",
          "355:             action_required=action_required,",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:     assert external_events.count() == 1",
          "276:     payment = payment_adyen_for_order",
          "277:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "278:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "279:     notification = notification(",
          "280:         merchant_reference=payment_id,",
          "",
          "[Removed Lines]",
          "275: def test_handle_cancel(notification, adyen_plugin, payment_adyen_for_order):",
          "",
          "[Added Lines]",
          "275: @pytest.mark.parametrize(\"payment_is_active\", (True, False))",
          "276: def test_handle_cancel(",
          "277:     payment_is_active, notification, adyen_plugin, payment_adyen_for_order",
          "278: ):",
          "281:     payment.is_active = payment_is_active",
          "282:     payment.save()",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     channel = payment_data.get(\"channel\", \"web\")",
          "69:     origin_url = payment_data.get(\"originUrl\")",
          "73:     if \"billingAddress\" in payment_data:",
          "74:         extra_request_params[\"billingAddress\"] = payment_data[\"billingAddress\"]",
          "75:     if \"shopperIP\" in payment_data:",
          "",
          "[Removed Lines]",
          "71:     if \"browserInfo\" in payment_data:",
          "72:         extra_request_params[\"browserInfo\"] = payment_data[\"browserInfo\"]",
          "",
          "[Added Lines]",
          "71:     browser_info = payment_data.get(\"browserInfo\")",
          "72:     if browser_info:",
          "73:         extra_request_params[\"browserInfo\"] = browser_info",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: def get_payment(",
          "51: ) -> Optional[Payment]:",
          "52:     transaction_id = transaction_id or \"\"",
          "53:     if payment_id is None or not payment_id.strip():",
          "",
          "[Removed Lines]",
          "50:     payment_id: Optional[str], transaction_id: Optional[str] = None",
          "",
          "[Added Lines]",
          "50:     payment_id: Optional[str],",
          "51:     transaction_id: Optional[str] = None,",
          "52:     check_if_active=True,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:             transaction_id,",
          "63:         )",
          "64:         return None",
          "66:         Payment.objects.prefetch_related(\"order\", \"checkout\")",
          "67:         .select_for_update(of=(\"self\",))",
          "70:     )",
          "71:     if not payment:",
          "72:         logger.warning(",
          "74:         )",
          "75:     return payment",
          "",
          "[Removed Lines]",
          "65:     payment = (",
          "68:         .filter(id=db_payment_id, is_active=True, gateway=\"mirumee.payments.adyen\")",
          "69:         .first()",
          "73:             \"Payment for %s was not found. Reference %s\", payment_id, transaction_id",
          "",
          "[Added Lines]",
          "67:     payments = (",
          "70:         .filter(id=db_payment_id, gateway=\"mirumee.payments.adyen\")",
          "72:     if check_if_active:",
          "73:         payments = payments.filter(is_active=True)",
          "74:     payment = payments.first()",
          "77:             \"Payment for %s (%s) was not found. Reference %s\",",
          "78:             payment_id,",
          "79:             db_payment_id,",
          "80:             transaction_id,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:     return order",
          "159:     \"\"\"Process the notification in case when payment doesn't have assigned order.\"\"\"",
          "161:     # We don't want to create order for payment that is cancelled or refunded",
          "",
          "[Removed Lines]",
          "158: def handle_not_created_order(notification, payment, checkout):",
          "",
          "[Added Lines]",
          "165: def handle_not_created_order(notification, payment, checkout, kind):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "166:         ChargeStatus.FULLY_CHARGED,",
          "167:     }:",
          "168:         return",
          "175:     # Only when we confirm that notification is success we will create the order",
          "177:         order = create_order(payment, checkout)",
          "178:         return order",
          "179:     return None",
          "",
          "[Removed Lines]",
          "169:     # If the payment is not Auth/Capture, it means that user didn't return to the",
          "170:     # storefront and we need to finalize the checkout asynchronously.",
          "171:     action_transaction = create_new_transaction(",
          "172:         notification, payment, TransactionKind.ACTION_TO_CONFIRM",
          "173:     )",
          "176:     if action_transaction.is_success and checkout:  # type: ignore",
          "",
          "[Added Lines]",
          "176:     transaction = payment.transactions.filter(",
          "177:         action_required=False, is_success=True, kind=kind",
          "178:     ).last()",
          "179:     if not transaction:",
          "180:         # If the payment is not Auth/Capture, it means that user didn't return to the",
          "181:         # storefront and we need to finalize the checkout asynchronously.",
          "182:         transaction = create_new_transaction(",
          "183:             notification, payment, TransactionKind.ACTION_TO_CONFIRM",
          "184:         )",
          "187:     if transaction.is_success and checkout:  # type: ignore",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "187:         return",
          "188:     checkout = get_checkout(payment)",
          "190:     if not payment.order:",
          "192:     else:",
          "193:         adyen_auto_capture = gateway_config.connection_params[\"adyen_auto_capture\"]",
          "194:         kind = TransactionKind.AUTH",
          "",
          "[Removed Lines]",
          "191:         handle_not_created_order(notification, payment, checkout)",
          "",
          "[Added Lines]",
          "201:     adyen_auto_capture = gateway_config.connection_params[\"adyen_auto_capture\"]",
          "202:     kind = TransactionKind.AUTH",
          "203:     if adyen_auto_capture:",
          "204:         kind = TransactionKind.CAPTURE",
          "206:         handle_not_created_order(notification, payment, checkout, kind)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "200:             is_success=True,",
          "201:             kind__in=[TransactionKind.AUTH, TransactionKind.CAPTURE],",
          "202:         ).last()",
          "210:     reason = notification.get(\"reason\", \"-\")",
          "211:     is_success = True if notification.get(\"success\") == \"true\" else False",
          "212:     success_msg = f\"Adyen: The payment  {transaction_id} request  was successful.\"",
          "",
          "[Removed Lines]",
          "203:         new_transaction = create_new_transaction(notification, payment, kind)",
          "204:         if new_transaction.is_success and not transaction:",
          "205:             gateway_postprocess(new_transaction, payment)",
          "206:             if adyen_auto_capture:",
          "207:                 order_captured(payment.order, None, new_transaction.amount, payment)",
          "208:             else:",
          "209:                 order_authorized(payment.order, None, new_transaction.amount, payment)",
          "",
          "[Added Lines]",
          "218:         if not transaction:",
          "219:             new_transaction = create_new_transaction(notification, payment, kind)",
          "220:             if new_transaction.is_success:",
          "221:                 gateway_postprocess(new_transaction, payment)",
          "222:                 if adyen_auto_capture:",
          "223:                     order_captured(payment.order, None, new_transaction.amount, payment)",
          "224:                 else:",
          "225:                     order_authorized(",
          "226:                         payment.order, None, new_transaction.amount, payment",
          "227:                     )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "219: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "220:     # https://docs.adyen.com/checkout/cancel#cancellation-notifciation",
          "221:     transaction_id = notification.get(\"pspReference\")",
          "223:     if not payment:",
          "224:         return",
          "225:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
          "",
          "[Removed Lines]",
          "222:     payment = get_payment(notification.get(\"merchantReference\"), transaction_id)",
          "",
          "[Added Lines]",
          "240:     payment = get_payment(",
          "241:         # check_if_active=False as the payment can be still active or already cancelled",
          "242:         notification.get(\"merchantReference\"),",
          "243:         transaction_id,",
          "244:         check_if_active=False,",
          "245:     )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "264:     checkout = get_checkout(payment)",
          "266:     if not payment.order:",
          "268:     else:",
          "269:         capture_transaction = payment.transactions.filter(",
          "270:             action_required=False, is_success=True, kind=TransactionKind.CAPTURE,",
          "",
          "[Removed Lines]",
          "267:         handle_not_created_order(notification, payment, checkout)",
          "",
          "[Added Lines]",
          "290:         handle_not_created_order(",
          "291:             notification, payment, checkout, TransactionKind.CAPTURE",
          "292:         )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "739:         payment_information=payment_data,",
          "740:         gateway_response=gateway_response,",
          "741:     )",
          "744:         create_order(payment, checkout)",
          "",
          "[Removed Lines]",
          "743:     if is_success and not action_required:",
          "",
          "[Added Lines]",
          "765:     if is_success and not action_required and not payment.order:",
          "",
          "---------------"
        ]
      }
    }
  ]
}