{
  "cve_id": "CVE-2022-25892",
  "cve_desc": "The package muhammara before 2.6.1, from 3.0.0 and before 3.1.1; all versions of package hummus are vulnerable to Denial of Service (DoS) when supplied with a maliciously crafted PDF file to be parsed.",
  "repo": "julianhille/MuhammaraJS",
  "patch_hash": "90b278d09f16062d93a4160ef0a54d449d739c51",
  "patch_info": {
    "commit_hash": "90b278d09f16062d93a4160ef0a54d449d739c51",
    "repo": "julianhille/MuhammaraJS",
    "commit_url": "https://github.com/julianhille/MuhammaraJS/commit/90b278d09f16062d93a4160ef0a54d449d739c51",
    "files": [
      "CHANGELOG.md",
      "src/deps/PDFWriter/PDFParser.cpp",
      "tests/SigSeg.js",
      "tests/TestMaterials/BrokenPdfBadHeader.txt"
    ],
    "message": "Fix npe as backport for 2.x\n\nFixes #214",
    "before_after_code_files": [
      "src/deps/PDFWriter/PDFParser.cpp||src/deps/PDFWriter/PDFParser.cpp",
      "tests/SigSeg.js||tests/SigSeg.js"
    ]
  },
  "patch_diff": {
    "src/deps/PDFWriter/PDFParser.cpp||src/deps/PDFWriter/PDFParser.cpp": [
      "File: src/deps/PDFWriter/PDFParser.cpp -> src/deps/PDFWriter/PDFParser.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "352:   mObjectParser.ResetReadState();",
      "353:   RefCountPtr<PDFObject> anObject(mObjectParser.ParseNewObject());",
      "355:   if(anObject->GetType() == PDFObject::ePDFObjectInteger)",
      "356:   {",
      "357:    mLastXrefPosition = (LongFilePositionType)((PDFInteger*)anObject.GetPtr())->GetValue();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355:   if (!anObject) {",
      "356:    status = PDFHummus::eFailure;",
      "357:    TRACE_LOG(\"PDFParser::ParseXrefPosition: Unable to find any object\");",
      "358:    break;",
      "359:   }",
      "",
      "---------------"
    ],
    "tests/SigSeg.js||tests/SigSeg.js": [
      "File: tests/SigSeg.js -> tests/SigSeg.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: var muhammara = require(\"../muhammara\");",
      "2: const { expect } = require(\"chai\");",
      "4: describe(\"SigSegv test\", function () {",
      "5:   it(\"should read fields correctly\", function () {",
      "6:     expect(() =>",
      "7:       muhammara.createReader(",
      "8:         __dirname + \"/TestMaterials/BrokenPdfBadHeader.txt\"",
      "9:       )",
      "10:     ).to.throw();",
      "11:   });",
      "12: });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "06ae97d252a64556ba97a43ea83ec3f9a2fb3305",
      "candidate_info": {
        "commit_hash": "06ae97d252a64556ba97a43ea83ec3f9a2fb3305",
        "repo": "julianhille/MuhammaraJS",
        "commit_url": "https://github.com/julianhille/MuhammaraJS/commit/06ae97d252a64556ba97a43ea83ec3f9a2fb3305",
        "files": [
          "src/deps/PDFWriter/PDFUsedFont.cpp"
        ],
        "message": "Fix segfault for FreeType createWrittenFrontObject  returning NULL",
        "before_after_code_files": [
          "src/deps/PDFWriter/PDFUsedFont.cpp||src/deps/PDFWriter/PDFUsedFont.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/julianhille/MuhammaraJS/pull/238"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/deps/PDFWriter/PDFUsedFont.cpp||src/deps/PDFWriter/PDFUsedFont.cpp": [
          "File: src/deps/PDFWriter/PDFUsedFont.cpp -> src/deps/PDFWriter/PDFUsedFont.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:  if(!mWrittenFont)",
          "70:   mWrittenFont = mFaceWrapper.CreateWrittenFontObject(mObjectsContext,mEmbedFont);",
          "72:  mWrittenFont->AppendGlyphs(inText,outCharactersToUse,outTreatCharactersAsCID,outFontObjectToUse);",
          "74:  return PDFHummus::eSuccess;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:  if(!mWrittenFont)",
          "72:   return PDFHummus::eFailure;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:  if(!mWrittenFont)",
          "110:   mWrittenFont = mFaceWrapper.CreateWrittenFontObject(mObjectsContext,mEmbedFont);",
          "112:  mWrittenFont->AppendGlyphs(inText,outCharactersToUse,outTreatCharactersAsCID,outFontObjectToUse);",
          "114:  return PDFHummus::eSuccess;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:  if(!mWrittenFont)",
          "113:   return PDFHummus::eFailure;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a6a7a8ba1d854d85d3be0b9ec6911b9ab06e355",
      "candidate_info": {
        "commit_hash": "7a6a7a8ba1d854d85d3be0b9ec6911b9ab06e355",
        "repo": "julianhille/MuhammaraJS",
        "commit_url": "https://github.com/julianhille/MuhammaraJS/commit/7a6a7a8ba1d854d85d3be0b9ec6911b9ab06e355",
        "files": [
          "src/deps/PDFWriter/PDFModifiedPage.cpp"
        ],
        "message": "Add another guard against segfault",
        "before_after_code_files": [
          "src/deps/PDFWriter/PDFModifiedPage.cpp||src/deps/PDFWriter/PDFModifiedPage.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/julianhille/MuhammaraJS/pull/238"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/deps/PDFWriter/PDFModifiedPage.cpp||src/deps/PDFWriter/PDFModifiedPage.cpp": [
          "File: src/deps/PDFWriter/PDFModifiedPage.cpp -> src/deps/PDFWriter/PDFModifiedPage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   ObjectIDType pageObjectID = copyingContext->GetSourceDocumentParser()->GetPageObjectID(mPageIndex);",
          "165:   PDFObjectCastPtr<PDFDictionary> pageDictionaryObject = copyingContext->GetSourceDocumentParser()->ParsePage(mPageIndex);",
          "166:   MapIterator<PDFNameToPDFObjectMap>  pageDictionaryObjectIt = pageDictionaryObject->GetIterator();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:   if (!pageDictionaryObject)",
          "167:       return eFailure;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4169e0b0577ed3578b5949e90c091f0ba8f2b2c",
      "candidate_info": {
        "commit_hash": "a4169e0b0577ed3578b5949e90c091f0ba8f2b2c",
        "repo": "julianhille/MuhammaraJS",
        "commit_url": "https://github.com/julianhille/MuhammaraJS/commit/a4169e0b0577ed3578b5949e90c091f0ba8f2b2c",
        "files": [
          "src/deps/PDFWriter/CFFFileInput.cpp"
        ],
        "message": "Fix segfault for getGlyphCharString returning NULL",
        "before_after_code_files": [
          "src/deps/PDFWriter/CFFFileInput.cpp||src/deps/PDFWriter/CFFFileInput.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/julianhille/MuhammaraJS/pull/238"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/deps/PDFWriter/CFFFileInput.cpp||src/deps/PDFWriter/CFFFileInput.cpp": [
          "File: src/deps/PDFWriter/CFFFileInput.cpp -> src/deps/PDFWriter/CFFFileInput.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:  if(status != PDFHummus::eFailure)",
          "1019:  {",
          "1020:   mCurrentDependencies = &ioDependenciesInfo;",
          "1022:  }",
          "1023:  else",
          "1024:   return status;",
          "",
          "[Removed Lines]",
          "1021:   return interpreter.Intepret(*GetGlyphCharString(inFontIndex,inCharStringIndex),this);",
          "",
          "[Added Lines]",
          "1021:   CharString* charString = GetGlyphCharString(inFontIndex,inCharStringIndex);",
          "1022:         if(!charString)",
          "1023:         {",
          "1024:             TRACE_LOG(\"GetGlyphCharString cannot find char string\");",
          "1025:             return PDFHummus::eFailure;",
          "1026:         }",
          "1027:   return interpreter.Intepret(*charString, this);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e6d9c10cf8be189b711ea90318d43dba7f40ce7",
      "candidate_info": {
        "commit_hash": "8e6d9c10cf8be189b711ea90318d43dba7f40ce7",
        "repo": "julianhille/MuhammaraJS",
        "commit_url": "https://github.com/julianhille/MuhammaraJS/commit/8e6d9c10cf8be189b711ea90318d43dba7f40ce7",
        "files": [
          "src/deps/PDFWriter/DocumentContext.cpp",
          "src/deps/PDFWriter/DocumentContext.h"
        ],
        "message": "Fix segfault for createPDFCopyingContext returning NULL",
        "before_after_code_files": [
          "src/deps/PDFWriter/DocumentContext.cpp||src/deps/PDFWriter/DocumentContext.cpp",
          "src/deps/PDFWriter/DocumentContext.h||src/deps/PDFWriter/DocumentContext.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/julianhille/MuhammaraJS/pull/238"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/deps/PDFWriter/DocumentContext.cpp||src/deps/PDFWriter/DocumentContext.cpp": [
          "File: src/deps/PDFWriter/DocumentContext.cpp -> src/deps/PDFWriter/DocumentContext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2300:         {",
          "2302:    PDFDocumentCopyingContext* copyingContext = CreatePDFCopyingContext(inModifiedFileParser);",
          "2303:    ModifiedDocCatalogWriterExtension catalogUpdate(copyingContext,requiresVersionUpdate,inModifiedPDFVersion);",
          "2304:             status = WriteCatalogObject(finalPageRoot,&catalogUpdate);",
          "2305:    delete copyingContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2303:    if(!copyingContext) {",
          "2304:        status = eFailure;",
          "2305:        break;",
          "2306:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2311:   WriteInfoDictionary();",
          "2316:         if(RequiresXrefStream(inModifiedFileParser))",
          "2317:         {",
          "2318:             status = WriteXrefStream(xrefTablePosition);",
          "",
          "[Removed Lines]",
          "2314:   CopyEncryptionDictionary(inModifiedFileParser);",
          "",
          "[Added Lines]",
          "2318:   status = CopyEncryptionDictionary(inModifiedFileParser);",
          "2319:         if(status != eSuccess)",
          "2320:             break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2529:     return isUpdateRequired;",
          "2530: }",
          "2533: {",
          "2535:  RefCountPtr<PDFObject> encrypt(inModifiedFileParser->GetTrailer()->QueryDirectObject(\"Encrypt\"));",
          "2536:  if (encrypt.GetPtr() == NULL)",
          "2539:  if (encrypt->GetType() == PDFObject::ePDFObjectIndirectObjectReference)",
          "2540:  {",
          "",
          "[Removed Lines]",
          "2532: void DocumentContext::CopyEncryptionDictionary(PDFParser* inModifiedFileParser)",
          "2537:   return;",
          "",
          "[Added Lines]",
          "2537: EStatusCode DocumentContext::CopyEncryptionDictionary(PDFParser* inModifiedFileParser)",
          "2542:   return eSuccess;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2543:  }",
          "2544:  else",
          "2545:  {",
          "2547:   mEncryptionHelper.PauseEncryption();",
          "2548:   ObjectIDType encryptionDictionaryID = mObjectsContext->StartNewIndirectObject();",
          "2551:   copyingContext->CopyDirectObjectAsIs(encrypt.GetPtr());",
          "2552:   delete copyingContext;",
          "2553:   mObjectsContext->EndIndirectObject();",
          "",
          "[Removed Lines]",
          "2550:   PDFDocumentCopyingContext* copyingContext = CreatePDFCopyingContext(inModifiedFileParser);",
          "",
          "[Added Lines]",
          "2552:   PDFDocumentCopyingContext* copyingContext = CreatePDFCopyingContext(inModifiedFileParser);",
          "2553:   if(!copyingContext) {",
          "2554:    return eFailure;",
          "2555:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2556:   mTrailerInformation.SetEncrypt(encryptionDictionaryID);",
          "2557:  }",
          "2558: }",
          "2560: bool DocumentContext::RequiresXrefStream(PDFParser* inModifiedFileParser)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2567:  return eSuccess;",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/DocumentContext.h||src/deps/PDFWriter/DocumentContext.h": [
          "File: src/deps/PDFWriter/DocumentContext.h -> src/deps/PDFWriter/DocumentContext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:         ObjectIDType WriteCombinedPageTree(PDFParser* inModifiedFileParser);",
          "433:         bool IsRequiredVersionHigherThanPDFVersion(PDFParser* inModifiedFileParser,EPDFVersion inModifiedPDFVersion);",
          "434:         bool DoExtendersRequireCatalogUpdate(PDFParser* inModifiedFileParser);",
          "436:   bool RequiresXrefStream(PDFParser* inModifiedFileParser);",
          "437:         PDFHummus::EStatusCode WriteXrefStream(LongFilePositionType& outXrefPosition);",
          "438:   HummusImageInformation& GetImageInformationStructFor(const std::string& inImageFile,unsigned long inImageIndex);",
          "",
          "[Removed Lines]",
          "435:   void CopyEncryptionDictionary(PDFParser* inModifiedFileParser);",
          "",
          "[Added Lines]",
          "435:      PDFHummus::EStatusCode CopyEncryptionDictionary(PDFParser* inModifiedFileParser);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0588a33efc68f22e4666d8576a57654f579d659",
      "candidate_info": {
        "commit_hash": "a0588a33efc68f22e4666d8576a57654f579d659",
        "repo": "julianhille/MuhammaraJS",
        "commit_url": "https://github.com/julianhille/MuhammaraJS/commit/a0588a33efc68f22e4666d8576a57654f579d659",
        "files": [
          "src/deps/PDFWriter/PDFParser.cpp"
        ],
        "message": "Found NP dereference in pdf parser",
        "before_after_code_files": [
          "src/deps/PDFWriter/PDFParser.cpp||src/deps/PDFWriter/PDFParser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/julianhille/MuhammaraJS/pull/238"
        ],
        "olp_code_files": {
          "patch": [
            "src/deps/PDFWriter/PDFParser.cpp||src/deps/PDFWriter/PDFParser.cpp"
          ],
          "candidate": [
            "src/deps/PDFWriter/PDFParser.cpp||src/deps/PDFWriter/PDFParser.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/deps/PDFWriter/PDFParser.cpp||src/deps/PDFWriter/PDFParser.cpp": [
          "File: src/deps/PDFWriter/PDFParser.cpp -> src/deps/PDFWriter/PDFParser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "390:    while(!foundStartXref && mStream->NotEnded())",
          "391:    {",
          "392:     PDFObjectCastPtr<PDFSymbol> startxRef(mObjectParser.ParseNewObject());",
          "393:     foundStartXref = startxRef.GetPtr() && (startxRef->GetValue() == scStartxref);",
          "394:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393:     if(!startxRef)",
          "394:     {",
          "395:      status = PDFHummus::eFailure;",
          "396:         TRACE_LOG(\"PDFParser::ParseXrefPosition, syntax error in reading xref position\");",
          "397:         break;",
          "398:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}