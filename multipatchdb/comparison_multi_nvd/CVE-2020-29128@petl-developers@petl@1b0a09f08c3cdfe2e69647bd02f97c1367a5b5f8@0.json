{
  "cve_id": "CVE-2020-29128",
  "cve_desc": "petl before 1.68, in some configurations, allows resolution of entities in an XML document.",
  "repo": "petl-developers/petl",
  "patch_hash": "1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8",
  "patch_info": {
    "commit_hash": "1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8",
    "repo": "petl-developers/petl",
    "commit_url": "https://github.com/petl-developers/petl/pull/527/commits/1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8",
    "files": [
      "petl/io/xml.py"
    ],
    "message": "allow using a custom/restricted xml parser",
    "before_after_code_files": [
      "petl/io/xml.py||petl/io/xml.py"
    ]
  },
  "patch_diff": {
    "petl/io/xml.py||petl/io/xml.py": [
      "File: petl/io/xml.py -> petl/io/xml.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:     or list of paths can be provided, e.g.,",
      "134:     ``fromxml('example.html', './/tr', ('th', 'td'))``.",
      "136:     \"\"\"",
      "138:     source = read_source_from_arg(source)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "136:     Optionally a custom parser can be provided, e.g.,",
      "137:     ``etl.fromxml('example1.xml', 'tr', 'td', parser=my_parser)``.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "162:         else:",
      "163:             assert False, 'bad parameters'",
      "164:         self.missing = kwargs.get('missing', None)",
      "166:     def __iter__(self):",
      "167:         vmatch = self.vmatch",
      "168:         vdict = self.vdict",
      "170:         with self.source.open('rb') as xmlf:",
      "173:             if not hasattr(tree, 'iterfind'):",
      "174:                 # Python 2.6 compatibility",
      "175:                 tree.iterfind = tree.findall",
      "",
      "[Removed Lines]",
      "172:             tree = etree.parse(xmlf)",
      "",
      "[Added Lines]",
      "168:         self.user_parser = kwargs.get('parser', None)",
      "175:             parser2 = _create_xml_parser(self.user_parser)",
      "176:             tree = etree.parse(xmlf, parser=parser2)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "219:                                 for f in flds)",
      "222: def element_text_getter(missing):",
      "223:     def _get(v):",
      "224:         if len(v) > 1:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226: def _create_xml_parser(user_parser):",
      "227:     if user_parser is not None:",
      "228:         return user_parser",
      "229:     try:",
      "230:         # Default lxml parser.",
      "231:         # This will throw an error if parser is not set and lxml could not be imported",
      "232:         # because Python's built XML parser doesn't like the `resolve_entities` kwarg.",
      "233:         # return etree.XMLParser(resolve_entities=False)",
      "234:         return etree.XMLParser(resolve_entities=False)",
      "235:     except TypeError:",
      "236:         # lxml not available",
      "237:         return None",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "238219ae808588e69bbe1b599ff9f3b38cd25929",
      "candidate_info": {
        "commit_hash": "238219ae808588e69bbe1b599ff9f3b38cd25929",
        "repo": "petl-developers/petl",
        "commit_url": "https://github.com/petl-developers/petl/commit/238219ae808588e69bbe1b599ff9f3b38cd25929",
        "files": [
          "petl/test/io/test_xml.py"
        ],
        "message": "fix test failure for fromxml() without lxml",
        "before_after_code_files": [
          "petl/test/io/test_xml.py||petl/test/io/test_xml.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/petl-developers/petl/pull/527"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "petl/test/io/test_xml.py||petl/test/io/test_xml.py": [
          "File: petl/test/io/test_xml.py -> petl/test/io/test_xml.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:     _EXPECT_NO = ((None, None),)",
          "291:     data_file_tmp = _write_temp_file(_DATA2)",
          "292:     doc_type_temp = _DOCTYPE % data_file_tmp",
          "",
          "[Removed Lines]",
          "287:     from lxml import etree",
          "288:     parser_off = etree.XMLParser(resolve_entities=False)",
          "289:     parser_onn = etree.XMLParser(resolve_entities=True)",
          "",
          "[Added Lines]",
          "287:     try:",
          "288:         from lxml import etree",
          "289:         parser_off = etree.XMLParser(resolve_entities=False)",
          "290:         parser_onn = etree.XMLParser(resolve_entities=True)",
          "291:         found_lxml = True",
          "292:     except:",
          "293:         found_lxml = False",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:     actual11 = fromxml(temp_file1, 'tr', 'td')",
          "300:     _compare(_TABLE1, actual11)",
          "305:     actual21 = fromxml(temp_file2, 'tr', 'td')",
          "306:     _compare(_TABLE1 + _EXPECT_NO, actual21)",
          "314:     actual31 = fromxml(temp_file3, 'tr', 'td')",
          "315:     _compare(_TABLE1 + _EXPECT_NO, actual31)",
          "323:             pass",
          "",
          "[Removed Lines]",
          "302:     actual12 = fromxml(temp_file1, 'tr', 'td', parser=parser_off)",
          "303:     _compare(_TABLE1, actual12)",
          "308:     actual22 = fromxml(temp_file2, 'tr', 'td', parser=parser_off)",
          "309:     _compare(_TABLE1 + _EXPECT_NO, actual22)",
          "311:     actual23 = fromxml(temp_file2, 'tr', 'td', parser=parser_onn)",
          "312:     _compare(_TABLE1 + _EXPECT_IT, actual23)",
          "317:     actual32 = fromxml(temp_file3, 'tr', 'td', parser=parser_off)",
          "318:     _compare(_TABLE1 + _EXPECT_NO, actual32)",
          "320:     try:",
          "321:         actual33 = fromxml(temp_file3, 'tr', 'td', parser=parser_onn)",
          "322:         for _ in actual33:",
          "324:     except etree.XMLSyntaxError:",
          "325:         # print('XMLSyntaxError', ex, file=sys.stderr)",
          "326:         pass",
          "327:     else:",
          "328:         assert True, 'Error testing XML'",
          "",
          "[Added Lines]",
          "306:     if found_lxml:",
          "307:         actual12 = fromxml(temp_file1, 'tr', 'td', parser=parser_off)",
          "308:         _compare(_TABLE1, actual12)",
          "313:     if found_lxml:",
          "314:         actual22 = fromxml(temp_file2, 'tr', 'td', parser=parser_off)",
          "315:         _compare(_TABLE1 + _EXPECT_NO, actual22)",
          "317:         actual23 = fromxml(temp_file2, 'tr', 'td', parser=parser_onn)",
          "318:         _compare(_TABLE1 + _EXPECT_IT, actual23)",
          "323:     if found_lxml:",
          "324:         actual32 = fromxml(temp_file3, 'tr', 'td', parser=parser_off)",
          "325:         _compare(_TABLE1 + _EXPECT_NO, actual32)",
          "326:         try:",
          "327:             actual33 = fromxml(temp_file3, 'tr', 'td', parser=parser_onn)",
          "328:             for _ in actual33:",
          "329:                 pass",
          "330:         except etree.XMLSyntaxError:",
          "331:             # print('XMLSyntaxError', ex, file=sys.stderr)",
          "333:         else:",
          "334:             assert True, 'Error testing XML'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3223fe9710cdb55ce5b41d2b5e5c95b71b4df9a",
      "candidate_info": {
        "commit_hash": "c3223fe9710cdb55ce5b41d2b5e5c95b71b4df9a",
        "repo": "petl-developers/petl",
        "commit_url": "https://github.com/petl-developers/petl/commit/c3223fe9710cdb55ce5b41d2b5e5c95b71b4df9a",
        "files": [
          "petl/io/xml.py"
        ],
        "message": "improve custom xml parser docs",
        "before_after_code_files": [
          "petl/io/xml.py||petl/io/xml.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/petl-developers/petl/pull/527"
        ],
        "olp_code_files": {
          "patch": [
            "petl/io/xml.py||petl/io/xml.py"
          ],
          "candidate": [
            "petl/io/xml.py||petl/io/xml.py"
          ]
        }
      },
      "candidate_diff": {
        "petl/io/xml.py||petl/io/xml.py": [
          "File: petl/io/xml.py -> petl/io/xml.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     or list of paths can be provided, e.g.,",
          "134:     ``fromxml('example.html', './/tr', ('th', 'td'))``.",
          "139:     \"\"\"",
          "",
          "[Removed Lines]",
          "136:     Optionally a custom parser can be provided, e.g.,",
          "137:     ``etl.fromxml('example1.xml', 'tr', 'td', parser=my_parser)``.",
          "",
          "[Added Lines]",
          "136:     Optionally a custom parser can be provided, e.g.::",
          "138:         >>> from lxml import etree # doctest: +SKIP",
          "139:         ... my_parser = etree.XMLParser(resolve_entities=False) # doctest: +SKIP",
          "140:         ... table4 = etl.fromxml('example1.xml', 'tr', 'td', parser=my_parser) # doctest: +SKIP",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d45e25045002ab8bfa7ce6f8015ef80828728208",
      "candidate_info": {
        "commit_hash": "d45e25045002ab8bfa7ce6f8015ef80828728208",
        "repo": "petl-developers/petl",
        "commit_url": "https://github.com/petl-developers/petl/commit/d45e25045002ab8bfa7ce6f8015ef80828728208",
        "files": [
          "petl/test/io/test_xml.py"
        ],
        "message": "test custom xml parser for fromxml()",
        "before_after_code_files": [
          "petl/test/io/test_xml.py||petl/test/io/test_xml.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/petl-developers/petl/pull/527"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "petl/test/io/test_xml.py||petl/test/io/test_xml.py": [
          "File: petl/test/io/test_xml.py -> petl/test/io/test_xml.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: from petl.test.helpers import ieq",
          "10: from petl.util import nrows, look",
          "11: from petl.io.xml import fromxml",
          "15: def test_fromxml():",
          "",
          "[Removed Lines]",
          "12: from petl.compat import urlopen",
          "",
          "[Added Lines]",
          "12: from petl.compat import urlopen, izip_longest",
          "13: from nose.tools import eq_",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:         assert nrows(actual) > 0",
          "207:         expect = fromxml('.pydevproject', 'pydev_property', {'name': ( '.', 'name'), 'prop': '.'})",
          "208:         ieq(expect, actual)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212: def _write_temp_file(data):",
          "213:     with NamedTemporaryFile(delete=False, mode='wt') as f:",
          "214:         f.write(data)",
          "215:         res = f.name",
          "216:         f.close()",
          "217:     # txt = open(res, 'r').read()",
          "218:     # print('TEST %s:\\n%s' % (res, txt), file=sys.stderr)",
          "219:     return res",
          "222: def _write_test_file(data, pre='', pos=''):",
          "223:     content = pre + '<table>' + data + pos + '</table>'",
          "224:     return _write_temp_file(content)",
          "227: def _compare(expected, actual):",
          "228:     try:",
          "229:         _eq_rows(expected, actual)",
          "230:     except Exception as ex:",
          "231:         print('Expected:\\n', look(expected), file=sys.stderr)",
          "232:         print('  Actual:\\n', look(actual), file=sys.stderr)",
          "233:         raise ex",
          "236: def _eq_rows(expect, actual, cast=None):",
          "237:     '''test when values are equals for eacfh row and column'''",
          "238:     ie = iter(expect)",
          "239:     ia = iter(actual)",
          "240:     for re, ra in izip_longest(ie, ia, fillvalue=None):",
          "241:         if cast:",
          "242:             ra = cast(ra)",
          "243:         for ve, va in izip_longest(re, ra, fillvalue=None):",
          "244:             if isinstance(ve, list):",
          "245:                 for je, ja in izip_longest(ve, va, fillvalue=None):",
          "246:                     _eq2(je, ja, re, ra)",
          "247:             elif not isinstance(ve, dict):",
          "248:                 _eq2(ve, va, re, ra)",
          "251: def _eq2(ve, va, re, ra):",
          "252:     try:",
          "253:         eq_(ve, va)",
          "254:     except AssertionError as ea:",
          "255:         print('\\nrow: ', re, ' != ', ra)",
          "256:         print('val: ', ve, ' != ', va)",
          "257:         raise ea",
          "260: def test_fromxml_entity():",
          "261:     _DATA1 = \"\"\"",
          "262:         <tr><td>foo</td><td>bar</td></tr>",
          "263:         <tr><td>a</td><td>1</td></tr>",
          "264:         <tr><td>b</td><td>2</td></tr>",
          "265:         <tr><td>c</td><td>3</td></tr>",
          "266:         \"\"\"",
          "268:     _DATA2 = '<td>X</td><td>9</td>'",
          "270:     _DOCTYPE = \"\"\"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>",
          "271:     <!DOCTYPE foo [",
          "272:         <!ELEMENT table ANY >",
          "273:         <!ENTITY inserted SYSTEM \"file://%s\" >]>",
          "274:         \"\"\"",
          "276:     _INSERTED = '<tr>&inserted;</tr>'",
          "278:     _TABLE1 = (('foo', 'bar'),",
          "279:             ('a', '1'),",
          "280:             ('b', '2'),",
          "281:             ('c', '3'))",
          "283:     _EXPECT_IT = (('X', '9'),)",
          "285:     _EXPECT_NO = ((None, None),)",
          "287:     from lxml import etree",
          "288:     parser_off = etree.XMLParser(resolve_entities=False)",
          "289:     parser_onn = etree.XMLParser(resolve_entities=True)",
          "291:     data_file_tmp = _write_temp_file(_DATA2)",
          "292:     doc_type_temp = _DOCTYPE % data_file_tmp",
          "293:     doc_type_miss = _DOCTYPE % '/tmp/doesnotexist'",
          "295:     temp_file1 = _write_test_file(_DATA1)",
          "296:     temp_file2 = _write_test_file(_DATA1, pre=doc_type_temp, pos=_INSERTED)",
          "297:     temp_file3 = _write_test_file(_DATA1, pre=doc_type_miss, pos=_INSERTED)",
          "299:     actual11 = fromxml(temp_file1, 'tr', 'td')",
          "300:     _compare(_TABLE1, actual11)",
          "302:     actual12 = fromxml(temp_file1, 'tr', 'td', parser=parser_off)",
          "303:     _compare(_TABLE1, actual12)",
          "305:     actual21 = fromxml(temp_file2, 'tr', 'td')",
          "306:     _compare(_TABLE1 + _EXPECT_NO, actual21)",
          "308:     actual22 = fromxml(temp_file2, 'tr', 'td', parser=parser_off)",
          "309:     _compare(_TABLE1 + _EXPECT_NO, actual22)",
          "311:     actual23 = fromxml(temp_file2, 'tr', 'td', parser=parser_onn)",
          "312:     _compare(_TABLE1 + _EXPECT_IT, actual23)",
          "314:     actual31 = fromxml(temp_file3, 'tr', 'td')",
          "315:     _compare(_TABLE1 + _EXPECT_NO, actual31)",
          "317:     actual32 = fromxml(temp_file3, 'tr', 'td', parser=parser_off)",
          "318:     _compare(_TABLE1 + _EXPECT_NO, actual32)",
          "320:     try:",
          "321:         actual33 = fromxml(temp_file3, 'tr', 'td', parser=parser_onn)",
          "322:         for _ in actual33:",
          "323:             pass",
          "324:     except etree.XMLSyntaxError:",
          "325:         # print('XMLSyntaxError', ex, file=sys.stderr)",
          "326:         pass",
          "327:     else:",
          "328:         assert True, 'Error testing XML'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52447c0a2ff87f2c7bdd0017a5f3b6874ad262c6",
      "candidate_info": {
        "commit_hash": "52447c0a2ff87f2c7bdd0017a5f3b6874ad262c6",
        "repo": "petl-developers/petl",
        "commit_url": "https://github.com/petl-developers/petl/commit/52447c0a2ff87f2c7bdd0017a5f3b6874ad262c6",
        "files": [
          "petl/test/io/test_xml.py"
        ],
        "message": "more fixes for xml test failure in ci",
        "before_after_code_files": [
          "petl/test/io/test_xml.py||petl/test/io/test_xml.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/petl-developers/petl/pull/527"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "petl/test/io/test_xml.py||petl/test/io/test_xml.py": [
          "File: petl/test/io/test_xml.py -> petl/test/io/test_xml.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:     _INSERTED = '<tr>&inserted;</tr>'",
          "278:     _TABLE1 = (('foo', 'bar'),",
          "287:     try:",
          "288:         from lxml import etree",
          "292:     except:",
          "295:     data_file_tmp = _write_temp_file(_DATA2)",
          "296:     doc_type_temp = _DOCTYPE % data_file_tmp",
          "297:     doc_type_miss = _DOCTYPE % '/tmp/doesnotexist'",
          "300:     temp_file2 = _write_test_file(_DATA1, pre=doc_type_temp, pos=_INSERTED)",
          "301:     temp_file3 = _write_test_file(_DATA1, pre=doc_type_miss, pos=_INSERTED)",
          "310:     actual21 = fromxml(temp_file2, 'tr', 'td')",
          "311:     _compare(_TABLE1 + _EXPECT_NO, actual21)",
          "320:     actual31 = fromxml(temp_file3, 'tr', 'td')",
          "321:     _compare(_TABLE1 + _EXPECT_NO, actual31)",
          "332:             pass",
          "",
          "[Removed Lines]",
          "279:             ('a', '1'),",
          "280:             ('b', '2'),",
          "281:             ('c', '3'))",
          "283:     _EXPECT_IT = (('X', '9'),)",
          "285:     _EXPECT_NO = ((None, None),)",
          "289:         parser_off = etree.XMLParser(resolve_entities=False)",
          "290:         parser_onn = etree.XMLParser(resolve_entities=True)",
          "291:         found_lxml = True",
          "293:         found_lxml = False",
          "299:     temp_file1 = _write_test_file(_DATA1)",
          "303:     actual11 = fromxml(temp_file1, 'tr', 'td')",
          "304:     _compare(_TABLE1, actual11)",
          "306:     if found_lxml:",
          "307:         actual12 = fromxml(temp_file1, 'tr', 'td', parser=parser_off)",
          "308:         _compare(_TABLE1, actual12)",
          "313:     if found_lxml:",
          "314:         actual22 = fromxml(temp_file2, 'tr', 'td', parser=parser_off)",
          "315:         _compare(_TABLE1 + _EXPECT_NO, actual22)",
          "317:         actual23 = fromxml(temp_file2, 'tr', 'td', parser=parser_onn)",
          "318:         _compare(_TABLE1 + _EXPECT_IT, actual23)",
          "323:     if found_lxml:",
          "324:         actual32 = fromxml(temp_file3, 'tr', 'td', parser=parser_off)",
          "325:         _compare(_TABLE1 + _EXPECT_NO, actual32)",
          "326:         try:",
          "327:             actual33 = fromxml(temp_file3, 'tr', 'td', parser=parser_onn)",
          "328:             for _ in actual33:",
          "329:                 pass",
          "330:         except etree.XMLSyntaxError:",
          "331:             # print('XMLSyntaxError', ex, file=sys.stderr)",
          "333:         else:",
          "334:             assert True, 'Error testing XML'",
          "",
          "[Added Lines]",
          "279:                ('a', '1'),",
          "280:                ('b', '2'),",
          "281:                ('c', '3'))",
          "283:     temp_file1 = _write_test_file(_DATA1)",
          "285:     actual11 = fromxml(temp_file1, 'tr', 'td')",
          "286:     _compare(_TABLE1, actual11)",
          "291:         return",
          "297:     _EXPECT_IT = (('X', '9'),)",
          "298:     _EXPECT_NO = ((None, None),)",
          "303:     parser_off = etree.XMLParser(resolve_entities=False)",
          "304:     parser_onn = etree.XMLParser(resolve_entities=True)",
          "306:     actual12 = fromxml(temp_file1, 'tr', 'td', parser=parser_off)",
          "307:     _compare(_TABLE1, actual12)",
          "312:     actual22 = fromxml(temp_file2, 'tr', 'td', parser=parser_off)",
          "313:     _compare(_TABLE1 + _EXPECT_NO, actual22)",
          "315:     actual23 = fromxml(temp_file2, 'tr', 'td', parser=parser_onn)",
          "316:     _compare(_TABLE1 + _EXPECT_IT, actual23)",
          "321:     actual32 = fromxml(temp_file3, 'tr', 'td', parser=parser_off)",
          "322:     _compare(_TABLE1 + _EXPECT_NO, actual32)",
          "324:     try:",
          "325:         actual33 = fromxml(temp_file3, 'tr', 'td', parser=parser_onn)",
          "326:         for _ in actual33:",
          "328:     except etree.XMLSyntaxError:",
          "329:         # print('XMLSyntaxError', ex, file=sys.stderr)",
          "330:         pass",
          "331:     else:",
          "332:         assert True, 'Error testing XML'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "defbc0527fe6e84c5b88a11893095adda4b8856a",
      "candidate_info": {
        "commit_hash": "defbc0527fe6e84c5b88a11893095adda4b8856a",
        "repo": "petl-developers/petl",
        "commit_url": "https://github.com/petl-developers/petl/commit/defbc0527fe6e84c5b88a11893095adda4b8856a",
        "files": [
          "petl/test/io/test_xml.py"
        ],
        "message": "fix test test_fromxml_url",
        "before_after_code_files": [
          "petl/test/io/test_xml.py||petl/test/io/test_xml.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/petl-developers/petl/pull/527"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "petl/test/io/test_xml.py||petl/test/io/test_xml.py": [
          "File: petl/test/io/test_xml.py -> petl/test/io/test_xml.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     # initial data",
          "18:     f = NamedTemporaryFile(delete=False, mode='wt')",
          "19:     data = \"\"\"<table>",
          "33:     f.write(data)",
          "34:     f.close()",
          "",
          "[Removed Lines]",
          "20:     <tr>",
          "21:         <td>foo</td><td>bar</td>",
          "22:     </tr>",
          "23:     <tr>",
          "24:         <td>a</td><td>1</td>",
          "25:     </tr>",
          "26:     <tr>",
          "27:         <td>b</td><td>2</td>",
          "28:     </tr>",
          "29:     <tr>",
          "30:         <td>c</td><td>2</td>",
          "31:     </tr>",
          "32: </table>\"\"\"",
          "",
          "[Added Lines]",
          "20:         <tr>",
          "21:             <td>foo</td><td>bar</td>",
          "22:         </tr>",
          "23:         <tr>",
          "24:             <td>a</td><td>1</td>",
          "25:         </tr>",
          "26:         <tr>",
          "27:             <td>b</td><td>2</td>",
          "28:         </tr>",
          "29:         <tr>",
          "30:             <td>c</td><td>2</td>",
          "31:         </tr>",
          "32:       </table>\"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     # initial data",
          "48:     f = NamedTemporaryFile(delete=False, mode='wt')",
          "49:     data = \"\"\"<table>",
          "63:     f.write(data)",
          "64:     f.close()",
          "",
          "[Removed Lines]",
          "50:     <tr>",
          "51:         <td v='foo'/><td v='bar'/>",
          "52:     </tr>",
          "53:     <tr>",
          "54:         <td v='a'/><td v='1'/>",
          "55:     </tr>",
          "56:     <tr>",
          "57:         <td v='b'/><td v='2'/>",
          "58:     </tr>",
          "59:     <tr>",
          "60:         <td v='c'/><td v='2'/>",
          "61:     </tr>",
          "62: </table>\"\"\"",
          "",
          "[Added Lines]",
          "50:         <tr>",
          "51:             <td v='foo'/><td v='bar'/>",
          "52:         </tr>",
          "53:         <tr>",
          "54:             <td v='a'/><td v='1'/>",
          "55:         </tr>",
          "56:         <tr>",
          "57:             <td v='b'/><td v='2'/>",
          "58:         </tr>",
          "59:         <tr>",
          "60:             <td v='c'/><td v='2'/>",
          "61:         </tr>",
          "62:       </table>\"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:     # initial data",
          "78:     f = NamedTemporaryFile(delete=False, mode='wt')",
          "79:     data = \"\"\"<table>",
          "90:     f.write(data)",
          "91:     f.close()",
          "",
          "[Removed Lines]",
          "80:     <row>",
          "81:         <foo>a</foo><baz><bar v='1'/></baz>",
          "82:     </row>",
          "83:     <row>",
          "84:         <foo>b</foo><baz><bar v='2'/></baz>",
          "85:     </row>",
          "86:     <row>",
          "87:         <foo>c</foo><baz><bar v='2'/></baz>",
          "88:     </row>",
          "89: </table>\"\"\"",
          "",
          "[Added Lines]",
          "80:         <row>",
          "81:             <foo>a</foo><baz><bar v='1'/></baz>",
          "82:         </row>",
          "83:         <row>",
          "84:             <foo>b</foo><baz><bar v='2'/></baz>",
          "85:         </row>",
          "86:         <row>",
          "87:             <foo>c</foo><baz><bar v='2'/></baz>",
          "88:         </row>",
          "89:       </table>\"\"\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:     # initial data",
          "106:     f = NamedTemporaryFile(delete=False, mode='wt')",
          "107:     data = \"\"\"<table>",
          "118:     f.write(data)",
          "119:     f.close()",
          "",
          "[Removed Lines]",
          "108:     <row>",
          "109:         <foo>a</foo><baz><bar>1</bar><bar>3</bar></baz>",
          "110:     </row>",
          "111:     <row>",
          "112:         <foo>b</foo><baz><bar>2</bar></baz>",
          "113:     </row>",
          "114:     <row>",
          "115:         <foo>c</foo><baz><bar>2</bar></baz>",
          "116:     </row>",
          "117: </table>\"\"\"",
          "",
          "[Added Lines]",
          "108:         <row>",
          "109:             <foo>a</foo><baz><bar>1</bar><bar>3</bar></baz>",
          "110:         </row>",
          "111:         <row>",
          "112:             <foo>b</foo><baz><bar>2</bar></baz>",
          "113:         </row>",
          "114:         <row>",
          "115:             <foo>c</foo><baz><bar>2</bar></baz>",
          "116:         </row>",
          "117:       </table>\"\"\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:     # initial data",
          "134:     f = NamedTemporaryFile(delete=False, mode='wt')",
          "135:     data = \"\"\"<table>",
          "146:     f.write(data)",
          "147:     f.close()",
          "",
          "[Removed Lines]",
          "136:     <row>",
          "137:         <foo>a</foo><baz><bar v='1'/><bar v='3'/></baz>",
          "138:     </row>",
          "139:     <row>",
          "140:         <foo>b</foo><baz><bar v='2'/></baz>",
          "141:     </row>",
          "142:     <row>",
          "143:         <foo>c</foo><baz><bar v='2'/></baz>",
          "144:     </row>",
          "145: </table>\"\"\"",
          "",
          "[Added Lines]",
          "136:         <row>",
          "137:             <foo>a</foo><baz><bar v='1'/><bar v='3'/></baz>",
          "138:         </row>",
          "139:         <row>",
          "140:             <foo>b</foo><baz><bar v='2'/></baz>",
          "141:         </row>",
          "142:         <row>",
          "143:             <foo>c</foo><baz><bar v='2'/></baz>",
          "144:         </row>",
          "145:       </table>\"\"\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "159: def test_fromxml_6():",
          "161:     data = \"\"\"<table class='petl'>",
          "183:     f = NamedTemporaryFile(delete=False, mode='wt')",
          "184:     f.write(data)",
          "185:     f.close()",
          "",
          "[Removed Lines]",
          "162: <thead>",
          "163: <tr>",
          "164: <th>foo</th>",
          "165: <th>bar</th>",
          "166: </tr>",
          "167: </thead>",
          "168: <tbody>",
          "169: <tr>",
          "170: <td>a</td>",
          "171: <td style='text-align: right'>2</td>",
          "172: </tr>",
          "173: <tr>",
          "174: <td>b</td>",
          "175: <td style='text-align: right'>1</td>",
          "176: </tr>",
          "177: <tr>",
          "178: <td>c</td>",
          "179: <td style='text-align: right'>3</td>",
          "180: </tr>",
          "181: </tbody>",
          "182: </table>\"\"\"",
          "",
          "[Added Lines]",
          "162:         <thead>",
          "163:         <tr>",
          "164:         <th>foo</th>",
          "165:         <th>bar</th>",
          "166:         </tr>",
          "167:         </thead>",
          "168:         <tbody>",
          "169:         <tr>",
          "170:         <td>a</td>",
          "171:         <td style='text-align: right'>2</td>",
          "172:         </tr>",
          "173:         <tr>",
          "174:         <td>b</td>",
          "175:         <td style='text-align: right'>1</td>",
          "176:         </tr>",
          "177:         <tr>",
          "178:         <td>c</td>",
          "179:         <td style='text-align: right'>3</td>",
          "180:         </tr>",
          "181:         </tbody>",
          "182:       </table>\"\"\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "194:     ieq(expect, actual)  # verify can iterate twice",
          "",
          "[Removed Lines]",
          "197: url = 'http://feeds.bbci.co.uk/news/rss.xml'",
          "198: # check internet connection",
          "199: try:",
          "200:     urlopen(url)",
          "201: except Exception as e:",
          "202:     print('SKIP test_fromxml_url: %s' % e, file=sys.stderr)",
          "203: else:",
          "205:     def test_fromxml_url():",
          "207:             tbl = fromxml(url, './/item', 'title')",
          "208:             assert nrows(tbl) > 0",
          "",
          "[Added Lines]",
          "197: def test_fromxml_url():",
          "198:     # check internet connection",
          "199:     try:",
          "200:         url = 'http://raw.githubusercontent.com/petl-developers/petl/master/.pydevproject'",
          "201:         urlopen(url)",
          "202:     except Exception as e:",
          "203:         print('SKIP test_fromxml_url: %s' % e, file=sys.stderr)",
          "204:     else:",
          "205:         actual = fromxml(url, 'pydev_property', {'name': ( '.', 'name'), 'prop': '.'})",
          "206:         assert nrows(actual) > 0",
          "207:         expect = fromxml('.pydevproject', 'pydev_property', {'name': ( '.', 'name'), 'prop': '.'})",
          "208:         ieq(expect, actual)",
          "",
          "---------------"
        ]
      }
    }
  ]
}