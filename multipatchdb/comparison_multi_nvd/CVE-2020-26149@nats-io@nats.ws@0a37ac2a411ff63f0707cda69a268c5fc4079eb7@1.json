{
  "cve_id": "CVE-2020-26149",
  "cve_desc": "NATS nats.js before 2.0.0-209, nats.ws before 1.0.0-111, and nats.deno before 1.0.0-9 allow credential disclosure from a client to a server.",
  "repo": "nats-io/nats.ws",
  "patch_hash": "0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
  "patch_info": {
    "commit_hash": "0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
    "repo": "nats-io/nats.ws",
    "commit_url": "https://github.com/nats-io/nats.ws/commit/0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
    "files": [
      ".github/workflows/natsws.yml",
      "package.json",
      "src/nats-base-client.ts",
      "src/ws_transport.ts"
    ],
    "message": "[update] [security] updated nats-base-client to v1.0.0-9 (#47)\n\n* [update] [security] updated nats-base-client to v1.0.0-9\n\n* bumped package version",
    "before_after_code_files": [
      "src/nats-base-client.ts||src/nats-base-client.ts",
      "src/ws_transport.ts||src/ws_transport.ts"
    ]
  },
  "patch_diff": {
    "src/nats-base-client.ts||src/nats-base-client.ts": [
      "File: src/nats-base-client.ts -> src/nats-base-client.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-8/nats-base-client/internal_mod.ts\";",
      "",
      "[Added Lines]",
      "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-9/nats-base-client/internal_mod.ts\";",
      "",
      "---------------"
    ],
    "src/ws_transport.ts||src/ws_transport.ts": [
      "File: src/ws_transport.ts -> src/ws_transport.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   delay,",
      "27: } from \"./nats-base-client.ts\";",
      "30: const LANG = \"nats.ws\";",
      "32: export class WsTransport implements Transport {",
      "",
      "[Removed Lines]",
      "29: const VERSION = \"1.0.0-110\";",
      "",
      "[Added Lines]",
      "29: const VERSION = \"1.0.0-111\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a0558e4b39341d7c42d9313c0844b62e750e7d56",
      "candidate_info": {
        "commit_hash": "a0558e4b39341d7c42d9313c0844b62e750e7d56",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/a0558e4b39341d7c42d9313c0844b62e750e7d56",
        "files": [
          "README.md",
          "package-lock.json",
          "package.json",
          "src/ws_transport.ts"
        ],
        "message": "preparing for release",
        "before_after_code_files": [
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   render,",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "35: const VERSION = \"1.0.0-124\";",
          "",
          "[Added Lines]",
          "35: const VERSION = \"1.0.0\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1563b4f5149c8003366d287f793ea02ec4fafa58",
      "candidate_info": {
        "commit_hash": "1563b4f5149c8003366d287f793ea02ec4fafa58",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/1563b4f5149c8003366d287f793ea02ec4fafa58",
        "files": [
          "nats.d.ts",
          "package-lock.json",
          "package.json",
          "src/connect.ts",
          "src/mod.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts"
        ],
        "message": "release 1.2.0 (#105)\n\n* [UPDATE] nbc 1.1.0 - see https://github.com/nats-io/nats.deno/releases/tag/v1.1.0",
        "before_after_code_files": [
          "nats.d.ts||nats.d.ts",
          "src/connect.ts||src/connect.ts",
          "src/mod.ts||src/mod.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "nats.d.ts||nats.d.ts": [
          "File: nats.d.ts -> nats.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     readonly deleted: string[];",
          "126: }",
          "127: export interface Sub<T> extends AsyncIterable<T> {",
          "128:     unsubscribe(max?: number): void;",
          "129:     drain(): Promise<void>;",
          "130:     isDraining(): boolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:     closed: Promise<void>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266: export interface JetStreamOptions {",
          "267:     apiPrefix?: string;",
          "268:     timeout?: number;",
          "269: }",
          "270: export interface JetStreamManager {",
          "271:     consumers: ConsumerAPI;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:     domain?: string;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "293:         lastMsgID: string;",
          "294:         streamName: string;",
          "295:         lastSequence: number;",
          "296:     }>;",
          "297: }",
          "298: export interface ConsumerInfoable {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:         lastSubjectSequence: number;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "358:     maxMessages(max: number): void;",
          "359:     queue(n: string): void;",
          "360:     callback(fn: JsMsgCallback): void;",
          "361: }",
          "362: export interface Lister<T> {",
          "363:     next(): Promise<T[]>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:     idleHeartbeat(millis: number): void;",
          "365:     flowControl(): void;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "375:     info(stream: string, opts?: StreamInfoRequestOptions): Promise<StreamInfo>;",
          "376:     add(cfg: Partial<StreamConfig>): Promise<StreamInfo>;",
          "377:     update(cfg: StreamConfig): Promise<StreamInfo>;",
          "379:     delete(stream: string): Promise<boolean>;",
          "380:     list(): Lister<StreamInfo>;",
          "383:     find(subject: string): Promise<string>;",
          "384: }",
          "385: export interface JsMsg {",
          "",
          "[Removed Lines]",
          "378:     purge(stream: string): Promise<PurgeResponse>;",
          "381:     deleteMessage(stream: string, seq: number): Promise<boolean>;",
          "382:     getMessage(stream: string, seq: number): Promise<StoredMsg>;",
          "",
          "[Added Lines]",
          "383:     purge(stream: string, opts?: PurgeOpts): Promise<PurgeResponse>;",
          "386:     deleteMessage(stream: string, seq: number, erase?: boolean): Promise<boolean>;",
          "387:     getMessage(stream: string, query: MsgRequest): Promise<StoredMsg>;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "472:     \"num_replicas\": number;",
          "473:     \"no_ack\"?: boolean;",
          "474:     \"template_owner\"?: string;",
          "476:     placement?: Placement;",
          "477:     mirror?: StreamSource;",
          "478:     sources?: StreamSource[];",
          "479: }",
          "480: export interface StreamSource {",
          "481:     name: string;",
          "485: }",
          "486: export interface Placement {",
          "487:     cluster: string;",
          "",
          "[Removed Lines]",
          "475:     \"duplicate_window\"?: number;",
          "482:     \"opt_start_seq\": number;",
          "483:     \"opt_start_time\": string;",
          "484:     \"filter_subject\": string;",
          "",
          "[Added Lines]",
          "480:     \"duplicate_window\"?: Nanos;",
          "484:     \"max_msgs_per_subject\"?: number;",
          "488:     \"opt_start_seq\"?: number;",
          "489:     \"opt_start_time\"?: string;",
          "490:     \"filter_subject\"?: string;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "551:     active: Nanos;",
          "552:     error?: ApiError;",
          "553: }",
          "554: export interface PurgeResponse extends Success {",
          "555:     purged: number;",
          "556: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560: export declare type PurgeOpts = PurgeBySeq | PurgeTrimOpts | PurgeBySubject;",
          "561: export declare type PurgeBySeq = {",
          "562:     filter?: string;",
          "563:     seq: number;",
          "564: };",
          "565: export declare type PurgeTrimOpts = {",
          "566:     filter?: string;",
          "567:     keep: number;",
          "568: };",
          "569: export declare type PurgeBySubject = {",
          "570:     filter: string;",
          "571: };",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "594:     success: boolean;",
          "595: }",
          "596: export declare type SuccessResponse = ApiResponse & Success;",
          "598:     seq: number;",
          "599: }",
          "601:     \"no_erase\"?: boolean;",
          "602: }",
          "603: export interface JetStreamAccountStats {",
          "",
          "[Removed Lines]",
          "597: export interface MsgRequest {",
          "600: export interface MsgDeleteRequest extends MsgRequest {",
          "",
          "[Added Lines]",
          "615: export interface LastForMsgRequest {",
          "616:     \"last_by_subj\": string;",
          "617: }",
          "618: export interface SeqMsgRequest {",
          "621: export declare type MsgRequest = SeqMsgRequest | LastForMsgRequest | number;",
          "622: export interface MsgDeleteRequest extends SeqMsgRequest {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "607:     consumers: number;",
          "608:     api: JetStreamApiStats;",
          "609:     limits: AccountLimits;",
          "610: }",
          "611: export interface JetStreamApiStats {",
          "612:     total: number;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632:     domain?: string;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "628:     \"opt_start_seq\"?: number;",
          "629:     \"opt_start_time\"?: string;",
          "630:     \"ack_policy\": AckPolicy;",
          "632:     \"max_deliver\"?: number;",
          "633:     \"filter_subject\"?: string;",
          "634:     \"replay_policy\": ReplayPolicy;",
          "",
          "[Removed Lines]",
          "631:     \"ack_wait\"?: number;",
          "",
          "[Added Lines]",
          "654:     \"ack_wait\"?: Nanos;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "636:     \"sample_freq\"?: string;",
          "637:     \"max_waiting\"?: number;",
          "638:     \"max_ack_pending\"?: number;",
          "639: }",
          "640: export interface Consumer {",
          "641:     \"stream_name\": string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:     \"idle_heartbeat\"?: Nanos;",
          "663:     \"flow_control\"?: boolean;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "653:     \"no_wait\": boolean;",
          "654: }",
          "656: export declare type MsgAdapter<T> = (",
          "657:   err: NatsError | null,",
          "658:   msg: Msg,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "681: export declare enum JsHeaders {",
          "682:     StreamSourceHdr = \"Nats-Stream-Source\",",
          "683:     LastConsumerSeqHdr = \"Nats-Last-Consumer\",",
          "684:     LastStreamSeqHdr = \"Nats-Last-Stream\"",
          "685: }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "672: }",
          "674: export declare type DispatchedFn<T> = (data: T | null) => void;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "707: export declare function defaultConsumer(name: string, opts?: Partial<ConsumerConfig>): ConsumerConfig;",
          "708: export declare function nanos(millis: number): Nanos;",
          "709: export declare function millis(ns: Nanos): number;",
          "710: export declare function isFlowControlMsg(msg: Msg): boolean;",
          "711: export declare function isHeartbeatMsg(msg: Msg): boolean;",
          "",
          "---------------"
        ],
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   setTransportFactory,",
          "20:   Transport,",
          "21:   TransportFactory,",
          "24: import { WsTransport } from \"./ws_transport.ts\";",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.8/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/mod.ts||src/mod.ts": [
          "File: src/mod.ts -> src/mod.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export { connect } from \"./connect.ts\";",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.8/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.8/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   Server,",
          "20:   ServerInfo,",
          "21:   Transport,",
          "23: import {",
          "24:   checkOptions,",
          "25:   DataBuffer,",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.8/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   INFO,",
          "31:   NatsError,",
          "32:   render,",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.8/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.1.6\";",
          "",
          "[Added Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.2.0\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23ebad23ff340a3b48feafd55ac8eb8d50fc3936",
      "candidate_info": {
        "commit_hash": "23ebad23ff340a3b48feafd55ac8eb8d50fc3936",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/23ebad23ff340a3b48feafd55ac8eb8d50fc3936",
        "files": [
          "package.json",
          "src/ws_transport.ts",
          "test/basics.js"
        ],
        "message": "FIX #61 - connection state was resolved too early (#66)\n\n- [fix] added peek on connect before resolving the connection\n- [fix] added check to options before resolving the connection\nFIX #61",
        "before_after_code_files": [
          "src/ws_transport.ts||src/ws_transport.ts",
          "test/basics.js||test/basics.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   ConnectionOptions,",
          "17:   Deferred,",
          "18:   Server,",
          "19:   Transport,",
          "20: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-13/nats-base-client/internal_mod.ts\";",
          "21: import {",
          "22:   deferred,",
          "23:   delay,",
          "24:   ErrorCode,",
          "25:   NatsError,",
          "26:   render,",
          "27: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-13/nats-base-client/internal_mod.ts\";",
          "30: const LANG = \"nats.ws\";",
          "32: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "29: const VERSION = \"1.0.0-116\";",
          "",
          "[Added Lines]",
          "19:   ServerInfo,",
          "23:   checkOptions,",
          "24:   DataBuffer,",
          "28:   extractProtocolMessage,",
          "29:   INFO,",
          "34: const VERSION = \"1.0.0-117\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   private options!: ConnectionOptions;",
          "41:   socketClosed: boolean;",
          "42:   encrypted: boolean;",
          "44:   yields: Uint8Array[] = [];",
          "45:   signal: Deferred<void> = deferred<void>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   peeked: boolean;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:     this.done = false;",
          "53:     this.socketClosed = false;",
          "54:     this.encrypted = false;",
          "55:   }",
          "58:     server: Server,",
          "59:     options: ConnectionOptions,",
          "60:   ): Promise<void> {",
          "61:     const connected = false;",
          "62:     const connLock = deferred<void>();",
          "64:     this.options = options;",
          "65:     const u = server.src;",
          "66:     this.encrypted = u.indexOf(\"wss://\") === 0;",
          "",
          "[Removed Lines]",
          "57:   async connect(",
          "",
          "[Added Lines]",
          "61:     this.peeked = false;",
          "64:   connect(",
          "72:     if (options.tls) {",
          "73:       connLock.reject(new NatsError(\"tls\", ErrorCode.INVALID_OPTION));",
          "74:       return connLock;",
          "75:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:     this.socket.binaryType = \"arraybuffer\";",
          "70:     this.socket.onopen = () => {",
          "73:     };",
          "75:     this.socket.onmessage = (me: MessageEvent) => {",
          "76:       this.yields.push(new Uint8Array(me.data));",
          "78:     };",
          "",
          "[Removed Lines]",
          "71:       this.connected = true;",
          "72:       connLock.resolve();",
          "77:       this.signal.resolve();",
          "",
          "[Added Lines]",
          "89:       if (this.peeked) {",
          "90:         this.signal.resolve();",
          "91:         return;",
          "92:       }",
          "93:       const t = DataBuffer.concat(...this.yields);",
          "94:       const pm = extractProtocolMessage(t);",
          "95:       if (pm) {",
          "96:         const m = INFO.exec(pm);",
          "97:         if (!m) {",
          "98:           if (options.debug) {",
          "99:             console.error(\"!!!\", render(t));",
          "100:           }",
          "101:           connLock.reject(new Error(\"unexpected response from server\"));",
          "102:           return;",
          "103:         }",
          "104:         try {",
          "105:           const info = JSON.parse(m[1]) as ServerInfo;",
          "106:           checkOptions(info, this.options);",
          "107:           this.peeked = true;",
          "108:           this.connected = true;",
          "109:           this.signal.resolve();",
          "110:           connLock.resolve();",
          "111:         } catch (err) {",
          "112:           connLock.reject(err);",
          "113:           return;",
          "114:         }",
          "115:       }",
          "",
          "---------------"
        ],
        "test/basics.js||test/basics.js": [
          "File: test/basics.js -> test/basics.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: const test = require(\"ava\");",
          "18:   \"./index\",",
          "19: );",
          "20: const { deferred, delay } = require(",
          "",
          "[Removed Lines]",
          "17: const { connect, ErrorCode, createInbox, StringCodec, Empty, Events } = require(",
          "",
          "[Added Lines]",
          "18: const { connect, ErrorCode, createInbox, StringCodec, Empty } = require(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "669:   t.pass();",
          "670: });",
          "672: test(\"basics - drain connection publisher\", async (t) => {",
          "673:   const ns = await NatsServer.start(wsConfig());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "673: test(\"basics - wsnats doesn't support tls options\", async (t) => {",
          "674:   const conf = {",
          "675:     websocket: {",
          "676:       port: -1,",
          "677:       tls: tlsConfig(),",
          "678:     },",
          "679:   };",
          "680:   const ns = await NatsServer.start(conf);",
          "681:   try {",
          "682:     await connect({ servers: `wss://127.0.0.1:${ns.websocket}`, tls: {} });",
          "683:     t.fail(`should have failed with ${ErrorCode.INVALID_OPTION}`);",
          "684:   } catch(err) {",
          "685:     t.is(err.code, ErrorCode.INVALID_OPTION)",
          "686:   }",
          "687:   await ns.stop();",
          "688:   t.pass();",
          "689: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02c6c69a3a9666e1c569f9f64bbf4bdf29289b5c",
      "candidate_info": {
        "commit_hash": "02c6c69a3a9666e1c569f9f64bbf4bdf29289b5c",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/02c6c69a3a9666e1c569f9f64bbf4bdf29289b5c",
        "files": [
          "nats.d.ts",
          "package-lock.json",
          "package.json",
          "src/connect.ts",
          "src/mod.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts",
          "test/basics.js",
          "test/jetstream.js"
        ],
        "message": "preparing for 1.3.0 (#108)\n\n* - [UPDATE] nbc to 1.2.0\n- [UPDATE] jetstreamManager.streams.getMessage(number) to use the correct api from nbc.\n- [UPDATE] index.d.ts to include changes to `PubAck` (`domain`), `ConsumerOptsBuilder#deliverLastPerSubject()`,  `DeliveryInfo` (`domain` and `account_hash`), `DeliveryPolicy#LastPerSubject`, renamed ConsumerInfo#SequencePair to ConsumerInfo#SequenceInfo, `ConsumerConfig` (`deliver_group` and `description`),\n\n- disabled wss on GA as CI seems to be rejecting cert",
        "before_after_code_files": [
          "nats.d.ts||nats.d.ts",
          "src/connect.ts||src/connect.ts",
          "src/mod.ts||src/mod.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts",
          "test/basics.js||test/basics.js",
          "test/jetstream.js||test/jetstream.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "nats.d.ts||nats.d.ts": [
          "File: nats.d.ts -> nats.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "282: }",
          "283: export interface PubAck {",
          "284:     stream: string;",
          "285:     seq: number;",
          "286:     duplicate: boolean;",
          "287:     ack(): void;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:     domain?: string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:     durable(name: string): void;",
          "350:     deliverAll(): void;",
          "351:     deliverLast(): void;",
          "352:     deliverNew(): void;",
          "353:     startSequence(seq: number): void;",
          "354:     startTime(time: Date | Nanos): void;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:     deliverLastPerSubject(): void;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "402:     ackAck(): Promise<boolean>;",
          "403: }",
          "404: export interface DeliveryInfo {",
          "405:     stream: string;",
          "406:     consumer: string;",
          "407:     redeliveryCount: number;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     domain: string;",
          "408:     account_hash?: string;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "511:     Last = \"last\",",
          "512:     New = \"new\",",
          "513:     StartSequence = \"by_start_sequence\",",
          "515: }",
          "516: export declare enum AckPolicy {",
          "517:     None = \"none\",",
          "",
          "[Removed Lines]",
          "514:     StartTime = \"by_start_time\"",
          "",
          "[Added Lines]",
          "518:     StartTime = \"by_start_time\",",
          "519:     LastPerSubject = \"last_per_subject\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "585:         time: string;",
          "586:     };",
          "587: }",
          "589:     \"consumer_seq\": number;",
          "590:     \"stream_seq\": number;",
          "591: }",
          "592: export interface ConsumerInfo {",
          "593:     \"stream_name\": string;",
          "594:     name: string;",
          "595:     created: number;",
          "596:     config: ConsumerConfig;",
          "599:     \"num_ack_pending\": number;",
          "600:     \"num_redelivered\": number;",
          "601:     \"num_waiting\": number;",
          "",
          "[Removed Lines]",
          "588: export interface SequencePair {",
          "597:     delivered: SequencePair;",
          "598:     \"ack_floor\": SequencePair;",
          "",
          "[Added Lines]",
          "593: export interface SequenceInfo {",
          "596:     \"last_active\": Nanos;",
          "603:     delivered: SequenceInfo;",
          "604:     \"ack_floor\": SequenceInfo;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "647:     name: string;",
          "648:     \"durable_name\"?: string;",
          "649:     \"deliver_subject\"?: string;",
          "650:     \"deliver_policy\": DeliverPolicy;",
          "651:     \"opt_start_seq\"?: number;",
          "652:     \"opt_start_time\"?: string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656:     \"deliver_group\"?: string;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "661:     \"max_ack_pending\"?: number;",
          "662:     \"idle_heartbeat\"?: Nanos;",
          "663:     \"flow_control\"?: boolean;",
          "664: }",
          "665: export interface Consumer {",
          "666:     \"stream_name\": string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "671:     description?: string;",
          "",
          "---------------"
        ],
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   setTransportFactory,",
          "20:   Transport,",
          "21:   TransportFactory,",
          "24: import { WsTransport } from \"./ws_transport.ts\";",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.2.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/mod.ts||src/mod.ts": [
          "File: src/mod.ts -> src/mod.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export { connect } from \"./connect.ts\";",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.2.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.2.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   Server,",
          "20:   ServerInfo,",
          "21:   Transport,",
          "23: import {",
          "24:   checkOptions,",
          "25:   DataBuffer,",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.2.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   INFO,",
          "31:   NatsError,",
          "32:   render,",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.1.0/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.2.0\";",
          "",
          "[Added Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.2.0/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.3.0\";",
          "",
          "---------------"
        ],
        "test/basics.js||test/basics.js": [
          "File: test/basics.js -> test/basics.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   t.pass();",
          "33: });",
          "36:   const conf = {",
          "37:     websocket: {",
          "38:       port: -1,",
          "39:       tls: tlsConfig(),",
          "40:     },",
          "41:   };",
          "42:   const ns = await NatsServer.start(conf);",
          "44:   await nc.flush();",
          "45:   await nc.close();",
          "46:   await ns.stop();",
          "",
          "[Removed Lines]",
          "35: test(\"basics - tls connect\", async (t) => {",
          "43:   const nc = await connect({ port: ns.websocket });",
          "",
          "[Added Lines]",
          "35: test(\"basics - wss connection\", async (t) => {",
          "36:   if (process.env.GITHUB_ACTIONS) {",
          "37:     t.log(\"skipping cert not trusted\");",
          "38:     t.pass();",
          "39:     return;",
          "40:   }",
          "50:   const nc = await connect({ servers: `wss://localhost:${ns.websocket}` });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "657:   t.pass();",
          "658: });",
          "676: test(\"basics - wsnats doesn't support tls options\", async (t) => {",
          "677:   const conf = {",
          "678:     websocket: {",
          "",
          "[Removed Lines]",
          "660: test(\"basics - wss connection\", async (t) => {",
          "661:   const conf = {",
          "662:     websocket: {",
          "663:       port: -1,",
          "664:       tls: tlsConfig(),",
          "665:     },",
          "666:   };",
          "668:   const ns = await NatsServer.start(conf);",
          "669:   const nc = await connect({ servers: `wss://127.0.0.1:${ns.websocket}` });",
          "670:   await nc.flush();",
          "671:   await nc.close();",
          "672:   await ns.stop();",
          "673:   t.pass();",
          "674: });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "682:   };",
          "683:   const ns = await NatsServer.start(conf);",
          "684:   try {",
          "686:     t.fail(`should have failed with ${ErrorCode.InvalidOption}`);",
          "687:   } catch (err) {",
          "688:     t.is(err.code, ErrorCode.InvalidOption);",
          "",
          "[Removed Lines]",
          "685:     await connect({ servers: `wss://127.0.0.1:${ns.websocket}`, tls: {} });",
          "",
          "[Added Lines]",
          "676:     await connect({ servers: `wss://localhost:${ns.websocket}`, tls: {} });",
          "",
          "---------------"
        ],
        "test/jetstream.js||test/jetstream.js": [
          "File: test/jetstream.js -> test/jetstream.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   consumers = await jsm.consumers.list(\"stream\").next();",
          "83:   t.is(consumers.length, 0);",
          "86:   t.is(sm.seq, 2);",
          "87:   t.truthy(sm.header);",
          "88:   t.is(sm.header.get(\"xxx\"), \"a\");",
          "",
          "[Removed Lines]",
          "85:   const sm = await jsm.streams.getMessage(\"stream\", 2);",
          "",
          "[Added Lines]",
          "85:   const sm = await jsm.streams.getMessage(\"stream\", { seq: 2 });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "214dca1e119e5995b93805fc2d35c6a19bd4ea9d",
      "candidate_info": {
        "commit_hash": "214dca1e119e5995b93805fc2d35c6a19bd4ea9d",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/214dca1e119e5995b93805fc2d35c6a19bd4ea9d",
        "files": [
          "package.json",
          "src/ws_transport.ts"
        ],
        "message": "bump version - 120 was built with bad packager",
        "before_after_code_files": [
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   render,",
          "32: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-rc2/nats-base-client/internal_mod.ts\";",
          "35: const LANG = \"nats.ws\";",
          "37: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "34: const VERSION = \"1.0.0-120\";",
          "",
          "[Added Lines]",
          "34: const VERSION = \"1.0.0-121\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}