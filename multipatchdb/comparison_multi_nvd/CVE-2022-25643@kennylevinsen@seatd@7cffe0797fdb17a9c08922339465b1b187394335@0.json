{
  "cve_id": "CVE-2022-25643",
  "cve_desc": "seatd-launch in seatd 0.6.x before 0.6.4 allows removing files with escalated privileges when installed setuid root. The attack vector is a user-supplied socket pathname.",
  "repo": "kennylevinsen/seatd",
  "patch_hash": "7cffe0797fdb17a9c08922339465b1b187394335",
  "patch_info": {
    "commit_hash": "7cffe0797fdb17a9c08922339465b1b187394335",
    "repo": "kennylevinsen/seatd",
    "commit_url": "https://github.com/kennylevinsen/seatd/commit/7cffe0797fdb17a9c08922339465b1b187394335",
    "files": [
      "seatd-launch/seatd-launch.c"
    ],
    "message": "seatd-launch: Remove socket path command line arg\n\nThis should not need to be configured, so remove the argument. If\ndownstream prefers a different folder, the location can be made\ncompile-time configurable like for seatd itself.",
    "before_after_code_files": [
      "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
    ]
  },
  "patch_diff": {
    "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c": [
      "File: seatd-launch/seatd-launch.c -> seatd-launch/seatd-launch.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:  const char *usage = \"Usage: seatd-launch [options] [--] command\\n\"",
      "17:        \"\\n\"",
      "21:        \"\\n\";",
      "23:  int c;",
      "26:   switch (c) {",
      "30:   case 'v':",
      "31:    printf(\"seatd-launch version %s\\n\", SEATD_VERSION);",
      "32:    return 0;",
      "",
      "[Removed Lines]",
      "18:        \"  -h  Show this help message\\n\"",
      "19:        \"  -s <path> Where to create the seatd socket\\n\"",
      "20:        \"  -v  Show the version number\\n\"",
      "24:  char *sockpath = NULL;",
      "25:  while ((c = getopt(argc, argv, \"vhs:\")) != -1) {",
      "27:   case 's':",
      "28:    sockpath = optarg;",
      "29:    break;",
      "",
      "[Added Lines]",
      "18:        \"  -h Show this help message\\n\"",
      "19:        \"  -v Show the version number\\n\"",
      "23:  while ((c = getopt(argc, argv, \"vh\")) != -1) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:  }",
      "48:  char **command = &argv[optind];",
      "56:  unlink(sockpath);",
      "",
      "[Removed Lines]",
      "50:  char sockbuf[256];",
      "51:  if (sockpath == NULL) {",
      "52:   sprintf(sockbuf, \"/tmp/seatd.%d.sock\", getpid());",
      "53:   sockpath = sockbuf;",
      "54:  }",
      "",
      "[Added Lines]",
      "45:  char sockpath[256];",
      "46:  sprintf(sockpath, \"/tmp/seatd.%d.sock\", getpid());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "10658dc5439db429af0088295a051c53925a4416",
      "candidate_info": {
        "commit_hash": "10658dc5439db429af0088295a051c53925a4416",
        "repo": "kennylevinsen/seatd",
        "commit_url": "https://github.com/kennylevinsen/seatd/commit/10658dc5439db429af0088295a051c53925a4416",
        "files": [
          "seatd-launch/seatd-launch.c"
        ],
        "message": "seatd-launch: Remove socket path command line arg\n\nThis should not need to be configured, so remove the argument. If\ndownstream prefers a different folder, the location can be made\ncompile-time configurable like for seatd itself.",
        "before_after_code_files": [
          "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
          ],
          "candidate": [
            "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
          ]
        }
      },
      "candidate_diff": {
        "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c": [
          "File: seatd-launch/seatd-launch.c -> seatd-launch/seatd-launch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  const char *usage = \"Usage: seatd-launch [options] [--] command\\n\"",
          "17:        \"\\n\"",
          "21:        \"\\n\";",
          "23:  int c;",
          "26:   switch (c) {",
          "30:   case 'v':",
          "31:    printf(\"seatd-launch version %s\\n\", SEATD_VERSION);",
          "32:    return 0;",
          "",
          "[Removed Lines]",
          "18:        \"  -h  Show this help message\\n\"",
          "19:        \"  -s <path> Where to create the seatd socket\\n\"",
          "20:        \"  -v  Show the version number\\n\"",
          "24:  char *sockpath = NULL;",
          "25:  while ((c = getopt(argc, argv, \"vhs:\")) != -1) {",
          "27:   case 's':",
          "28:    sockpath = optarg;",
          "29:    break;",
          "",
          "[Added Lines]",
          "18:        \"  -h Show this help message\\n\"",
          "19:        \"  -v Show the version number\\n\"",
          "23:  while ((c = getopt(argc, argv, \"vh\")) != -1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:  }",
          "48:  char **command = &argv[optind];",
          "56:  int fds[2];",
          "57:  if (pipe(fds) == -1) {",
          "",
          "[Removed Lines]",
          "50:  char sockbuf[256];",
          "51:  if (sockpath == NULL) {",
          "52:   sprintf(sockbuf, \"/tmp/seatd.%d.sock\", getpid());",
          "53:   sockpath = sockbuf;",
          "54:  }",
          "",
          "[Added Lines]",
          "45:  char sockpath[256];",
          "46:  sprintf(sockpath, \"/tmp/seatd.%d.sock\", getpid());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cffe0797fdb17a9c08922339465b1b187394335",
      "candidate_info": {
        "commit_hash": "7cffe0797fdb17a9c08922339465b1b187394335",
        "repo": "kennylevinsen/seatd",
        "commit_url": "https://github.com/kennylevinsen/seatd/commit/7cffe0797fdb17a9c08922339465b1b187394335",
        "files": [
          "seatd-launch/seatd-launch.c"
        ],
        "message": "seatd-launch: Remove socket path command line arg\n\nThis should not need to be configured, so remove the argument. If\ndownstream prefers a different folder, the location can be made\ncompile-time configurable like for seatd itself.",
        "before_after_code_files": [
          "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
          ],
          "candidate": [
            "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
          ]
        }
      },
      "candidate_diff": {
        "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c": [
          "File: seatd-launch/seatd-launch.c -> seatd-launch/seatd-launch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  const char *usage = \"Usage: seatd-launch [options] [--] command\\n\"",
          "17:        \"\\n\"",
          "21:        \"\\n\";",
          "23:  int c;",
          "26:   switch (c) {",
          "30:   case 'v':",
          "31:    printf(\"seatd-launch version %s\\n\", SEATD_VERSION);",
          "32:    return 0;",
          "",
          "[Removed Lines]",
          "18:        \"  -h  Show this help message\\n\"",
          "19:        \"  -s <path> Where to create the seatd socket\\n\"",
          "20:        \"  -v  Show the version number\\n\"",
          "24:  char *sockpath = NULL;",
          "25:  while ((c = getopt(argc, argv, \"vhs:\")) != -1) {",
          "27:   case 's':",
          "28:    sockpath = optarg;",
          "29:    break;",
          "",
          "[Added Lines]",
          "18:        \"  -h Show this help message\\n\"",
          "19:        \"  -v Show the version number\\n\"",
          "23:  while ((c = getopt(argc, argv, \"vh\")) != -1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:  }",
          "48:  char **command = &argv[optind];",
          "56:  unlink(sockpath);",
          "",
          "[Removed Lines]",
          "50:  char sockbuf[256];",
          "51:  if (sockpath == NULL) {",
          "52:   sprintf(sockbuf, \"/tmp/seatd.%d.sock\", getpid());",
          "53:   sockpath = sockbuf;",
          "54:  }",
          "",
          "[Added Lines]",
          "45:  char sockpath[256];",
          "46:  sprintf(sockpath, \"/tmp/seatd.%d.sock\", getpid());",
          "",
          "---------------"
        ]
      }
    }
  ]
}