{
  "cve_id": "CVE-2023-40175",
  "cve_desc": "Puma is a Ruby/Rack web server built for parallelism. Prior to versions 6.3.1 and 5.6.7, puma exhibited incorrect behavior when parsing chunked transfer encoding bodies and zero-length Content-Length headers in a way that allowed HTTP request smuggling. Severity of this issue is highly dependent on the nature of the web site using puma is. This could be caused by either incorrect parsing of trailing fields in chunked transfer encoding bodies or by parsing of blank/zero-length Content-Length headers. Both issues have been addressed and this vulnerability has been fixed in versions 6.3.1 and 5.6.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "puma/puma",
  "patch_hash": "690155e7d644b80eeef0a6094f9826ee41f1080a",
  "patch_info": {
    "commit_hash": "690155e7d644b80eeef0a6094f9826ee41f1080a",
    "repo": "puma/puma",
    "commit_url": "https://github.com/puma/puma/commit/690155e7d644b80eeef0a6094f9826ee41f1080a",
    "files": [
      "lib/puma/client.rb",
      "test/test_puma_server.rb"
    ],
    "message": "Merge pull request from GHSA-68xg-gqqm-vgj8\n\n* Reject empty string for Content-Length\n\n* Ignore trailers in last chunk\n\n* test_puma_server.rb - use heredoc, test_cl_and_te_smuggle\n\n* client.rb - stye/RubyCop\n\n* test_puma_server.rb - indented heredoc rubocop disable\n\n* Dentarg comments\n\n* Remove unused variable\n\n---------\n\nCo-authored-by: MSP-Greg <Greg.mpls@gmail.com>",
    "before_after_code_files": [
      "lib/puma/client.rb||lib/puma/client.rb",
      "test/test_puma_server.rb||test/test_puma_server.rb"
    ]
  },
  "patch_diff": {
    "lib/puma/client.rb||lib/puma/client.rb": [
      "File: lib/puma/client.rb -> lib/puma/client.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:     # chunked body validation",
      "51:     CHUNK_SIZE_INVALID = /[^\\h]/.freeze",
      "54:     # Content-Length header value validation",
      "55:     CONTENT_LENGTH_VALUE_INVALID = /[^\\d]/.freeze",
      "",
      "[Removed Lines]",
      "52:     CHUNK_VALID_ENDING = \"\\r\\n\".freeze",
      "",
      "[Added Lines]",
      "52:     CHUNK_VALID_ENDING = Const::LINE_END",
      "53:     CHUNK_VALID_ENDING_SIZE = CHUNK_VALID_ENDING.bytesize",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "382:       cl = @env[CONTENT_LENGTH]",
      "384:       if cl",
      "387:           raise HttpParserError, \"Invalid Content-Length: #{cl.inspect}\"",
      "388:         end",
      "389:       else",
      "",
      "[Removed Lines]",
      "385:         # cannot contain characters that are not \\d",
      "386:         if CONTENT_LENGTH_VALUE_INVALID.match? cl",
      "",
      "[Added Lines]",
      "386:         # cannot contain characters that are not \\d, or be empty",
      "387:         if CONTENT_LENGTH_VALUE_INVALID.match?(cl) || cl.empty?",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "545:       while !io.eof?",
      "546:         line = io.gets",
      "548:           # Puma doesn't process chunk extensions, but should parse if they're",
      "549:           # present, which is the reason for the semicolon regex",
      "550:           chunk_hex = line.strip[/\\A[^;]+/]",
      "",
      "[Removed Lines]",
      "547:         if line.end_with?(\"\\r\\n\")",
      "",
      "[Added Lines]",
      "548:         if line.end_with?(CHUNK_VALID_ENDING)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "556:             @in_last_chunk = true",
      "557:             @body.rewind",
      "558:             rest = io.read",
      "561:               @buffer = nil",
      "563:               return false",
      "564:             else",
      "566:               @buffer = nil if @buffer.empty?",
      "567:               set_ready",
      "568:               return true",
      "",
      "[Removed Lines]",
      "559:             last_crlf_size = \"\\r\\n\".bytesize",
      "560:             if rest.bytesize < last_crlf_size",
      "562:               @partial_part_left = last_crlf_size - rest.bytesize",
      "565:               @buffer = rest[last_crlf_size..-1]",
      "",
      "[Added Lines]",
      "560:             if rest.bytesize < CHUNK_VALID_ENDING_SIZE",
      "562:               @partial_part_left = CHUNK_VALID_ENDING_SIZE - rest.bytesize",
      "565:               # if the next character is a CRLF, set buffer to everything after that CRLF",
      "566:               start_of_rest = if rest.start_with?(CHUNK_VALID_ENDING)",
      "567:                 CHUNK_VALID_ENDING_SIZE",
      "568:               else # we have started a trailer section, which we do not support. skip it!",
      "569:                 rest.index(CHUNK_VALID_ENDING*2) + CHUNK_VALID_ENDING_SIZE*2",
      "570:               end",
      "572:               @buffer = rest[start_of_rest..-1]",
      "",
      "---------------"
    ],
    "test/test_puma_server.rb||test/test_puma_server.rb": [
      "File: test/test_puma_server.rb -> test/test_puma_server.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "749:       [200, {}, [\"\"]]",
      "750:     }",
      "754:     chunk_header_size = 6 # 4fb8\\r\\n",
      "755:     # Current implementation reads one chunk of CHUNK_SIZE, then more chunks of size 4096.",
      "",
      "[Removed Lines]",
      "752:     header = \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n\"",
      "",
      "[Added Lines]",
      "752:     header = \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nContent-Length: 200\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1711:     assert_match(/something wrong happened/, data)",
      "1712:   end",
      "1713: end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1714:   def test_cl_empty_string",
      "1715:     server_run do |env|",
      "1716:       [200, {}, [\"\"]]",
      "1717:     end",
      "1719:     # rubocop:disable Layout/TrailingWhitespace",
      "1720:     empty_cl_request = <<~REQ.gsub(\"\\n\", \"\\r\\n\")",
      "1721:       GET / HTTP/1.1",
      "1722:       Host: localhost",
      "1723:       Content-Length:",
      "1725:       GET / HTTP/1.1",
      "1726:       Host: localhost",
      "1728:     REQ",
      "1729:     # rubocop:enable Layout/TrailingWhitespace",
      "1731:     data = send_http_and_read empty_cl_request",
      "1732:     assert_operator data, :start_with?, 'HTTP/1.1 400 Bad Request'",
      "1733:   end",
      "1735:   def test_crlf_trailer_smuggle",
      "1736:     server_run do |env|",
      "1737:       [200, {}, [\"\"]]",
      "1738:     end",
      "1740:     smuggled_payload = <<~REQ.gsub(\"\\n\", \"\\r\\n\")",
      "1741:       GET / HTTP/1.1",
      "1742:       Transfer-Encoding: chunked",
      "1743:       Host: whatever",
      "1745:       0",
      "1746:       X:POST / HTTP/1.1",
      "1747:       Host: whatever",
      "1749:       GET / HTTP/1.1",
      "1750:       Host: whatever",
      "1752:     REQ",
      "1754:     data = send_http_and_read smuggled_payload",
      "1755:     assert_equal 2, data.scan(\"HTTP/1.1 200 OK\").size",
      "1756:   end",
      "1758:   # test to check if content-length is ignored when 'transfer-encoding: chunked'",
      "1759:   # is used.  See also test_large_chunked_request",
      "1760:   def test_cl_and_te_smuggle",
      "1761:     body = nil",
      "1762:     server_run { |env|",
      "1763:       body = env['rack.input'].read",
      "1764:       [200, {}, [\"\"]]",
      "1765:     }",
      "1767:     req = <<~REQ.gsub(\"\\n\", \"\\r\\n\")",
      "1768:       POST /search HTTP/1.1",
      "1769:       Host: vulnerable-website.com",
      "1770:       Content-Type: application/x-www-form-urlencoded",
      "1771:       Content-Length: 4",
      "1772:       Transfer-Encoding: chunked",
      "1774:       7b",
      "1775:       GET /404 HTTP/1.1",
      "1776:       Host: vulnerable-website.com",
      "1777:       Content-Type: application/x-www-form-urlencoded",
      "1778:       Content-Length: 144",
      "1780:       x=",
      "1781:       0",
      "1783:     REQ",
      "1785:     data = send_http_and_read req",
      "1787:     assert_includes body, \"GET /404 HTTP/1.1\\r\\n\"",
      "1788:     assert_includes body, \"Content-Length: 144\\r\\n\"",
      "1789:     assert_equal 1, data.scan(\"HTTP/1.1 200 OK\").size",
      "1790:   end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c4e08688fe30ae3568d4db1513a80eb638bd59bc",
      "candidate_info": {
        "commit_hash": "c4e08688fe30ae3568d4db1513a80eb638bd59bc",
        "repo": "puma/puma",
        "commit_url": "https://github.com/puma/puma/commit/c4e08688fe30ae3568d4db1513a80eb638bd59bc",
        "files": [
          ".github/workflows/tests.yaml",
          "test/config/event_on_booted_exit.rb",
          "test/helpers/integration.rb",
          "test/test_integration_cluster.rb",
          "test/test_integration_single.rb",
          "test/test_plugin_systemd_jruby.rb",
          "test/test_puma_server.rb"
        ],
        "message": "integration.rb - less blocking in wait_for_server_to_* methods (#3233)\n\n* integration.rb - update wait_for_server_to_* methods, less blocking\n\n* tests.yaml - use jdk 17 on Ubuntu\n\n* test_puma_server.rb - add wait_readable to some tests\n\n* test_plugin_systemd_jruby.rb - add require for single run\n\n* test_integration_cluster.rb - add require for single run\n\n* test_integration_single.rb - fix up test_on_booted\n\n* test_integration_cluster.rb - fix up test_on_booted\n\n* test_integration_cluster.rb - fix up 'test_load_path'\n\n* integration.rb - use StandardError instead of Exception\n\n* test/test_plugin_systemd_jruby.rb - \" instead of '\n\n* test/test_puma_server.rb - use socket instead of skt or sock",
        "before_after_code_files": [
          "test/config/event_on_booted_exit.rb||test/config/event_on_booted_exit.rb",
          "test/helpers/integration.rb||test/helpers/integration.rb",
          "test/test_integration_cluster.rb||test/test_integration_cluster.rb",
          "test/test_integration_single.rb||test/test_integration_single.rb",
          "test/test_plugin_systemd_jruby.rb||test/test_plugin_systemd_jruby.rb",
          "test/test_puma_server.rb||test/test_puma_server.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/test_puma_server.rb||test/test_puma_server.rb"
          ],
          "candidate": [
            "test/test_puma_server.rb||test/test_puma_server.rb"
          ]
        }
      },
      "candidate_diff": {
        "test/config/event_on_booted_exit.rb||test/config/event_on_booted_exit.rb": [
          "File: test/config/event_on_booted_exit.rb -> test/config/event_on_booted_exit.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: on_booted do",
          "2:   pid = Process.pid",
          "5: end",
          "",
          "[Removed Lines]",
          "3:   Process.kill :TERM, pid",
          "4:   Process.wait pid",
          "",
          "[Added Lines]",
          "3:   begin",
          "4:     Process.kill :TERM, pid",
          "5:   rescue Errno::ESRCH",
          "6:   end",
          "8:   begin",
          "9:     Process.wait2 pid",
          "10:   rescue Errno::ECHILD",
          "11:   end",
          "",
          "---------------"
        ],
        "test/helpers/integration.rb||test/helpers/integration.rb": [
          "File: test/helpers/integration.rb -> test/helpers/integration.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   RESP_READ_TIMEOUT = 10",
          "17:   RESP_SPLIT = \"\\r\\n\\r\\n\"",
          "19:   BASE = defined?(Bundler) ? \"bundle exec #{Gem.ruby} -Ilib\" :",
          "20:     \"#{Gem.ruby} -Ilib\"",
          "22:   def setup",
          "23:     @server = nil",
          "24:     @pid = nil",
          "25:     @ios_to_close = []",
          "26:     @bind_path    = tmp_path('.sock')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:   # used in wait_for_server_to_* methods",
          "20:   LOG_TIMEOUT   = Puma::IS_JRUBY ? 20 : 10",
          "21:   LOG_WAIT_READ = Puma::IS_JRUBY ? 5 : 2",
          "22:   LOG_ERROR_SLEEP = 0.2",
          "23:   LOG_ERROR_QTY   = 5",
          "30:     @server_log = +''",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:     end",
          "122:   end",
          "125:     cli_server argv",
          "126:     connection = connect",
          "127:     initial_reply = read_body(connection)",
          "129:     [initial_reply, read_body(connect)]",
          "130:   end",
          "",
          "[Removed Lines]",
          "124:   def restart_server_and_listen(argv)",
          "128:     restart_server connection",
          "",
          "[Added Lines]",
          "131:   def restart_server_and_listen(argv, log: false)",
          "135:     restart_server connection, log: log",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:   def restart_server(connection, log: false)",
          "134:     Process.kill :USR2, @pid",
          "135:     connection.write \"GET / HTTP/1.1\\r\\n\\r\\n\" # trigger it to start by sending a new request",
          "137:   end",
          "139:   # wait for server to say it booted",
          "",
          "[Removed Lines]",
          "136:     wait_for_server_to_boot(log: log)",
          "",
          "[Added Lines]",
          "143:     wait_for_server_to_boot log: log",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:     wait_for_server_to_include 'Ctrl-C', log: log",
          "143:   end",
          "167:     true",
          "168:   end",
          "170:   # Returns line if and when server log matches re, unless idx is specified,",
          "177:     begin",
          "187:       end",
          "192:       retry",
          "193:     end",
          "195:   end",
          "197:   def connect(path = nil, unix: false)",
          "",
          "[Removed Lines]",
          "145:   # Returns true if and when server log includes str.",
          "146:   # Will timeout or raise an error otherwise",
          "147:   def wait_for_server_to_include(str, log: false)",
          "148:     sleep 0.05 until @server.is_a?(IO)",
          "149:     retry_cntr = 0",
          "150:     begin",
          "151:       @server.wait_readable 1",
          "152:       if log",
          "153:         puts \"Waiting for '#{str}'\"",
          "154:         begin",
          "155:           line = @server&.gets",
          "156:           puts line if !line&.strip.empty?",
          "157:         end until line&.include?(str)",
          "158:       else",
          "159:         true until (@server.gets || '').include?(str)",
          "160:       end",
          "161:     rescue Errno::EBADF, Errno::ECONNREFUSED, Errno::ECONNRESET, IOError => e",
          "162:       retry_cntr += 1",
          "163:       raise e if retry_cntr > 10",
          "164:       sleep 0.1",
          "165:       retry",
          "166:     end",
          "171:   # then returns regex match.",
          "172:   # Will timeout or raise an error otherwise",
          "173:   def wait_for_server_to_match(re, idx = nil, log: false)",
          "174:     sleep 0.05 until @server.is_a?(IO)",
          "175:     retry_cntr = 0",
          "176:     line = nil",
          "178:       @server.wait_readable 1",
          "179:       if log",
          "180:         puts \"Waiting for '#{re.inspect}'\"",
          "181:         begin",
          "182:           line = @server&.gets",
          "183:           puts line if !line&.strip.empty?",
          "184:         end until line&.match?(re)",
          "185:       else",
          "186:         true until (line = @server.gets || '').match?(re)",
          "188:     rescue Errno::EBADF, Errno::ECONNREFUSED, Errno::ECONNRESET, IOError => e",
          "189:       retry_cntr += 1",
          "190:       raise e if retry_cntr > 10",
          "191:       sleep 0.1",
          "194:     idx ? line[re, idx] : line",
          "",
          "[Added Lines]",
          "152:   # Returns true if and when server log includes str.  Will timeout otherwise.",
          "153:   def wait_for_server_to_include(str, timeout: LOG_TIMEOUT, log: false)",
          "154:     time_timeout = Process.clock_gettime(Process::CLOCK_MONOTONIC) + timeout",
          "155:     line = ''",
          "157:     puts \"\\n\u2014\u2014\u2014 #{full_name} waiting for '#{str}'\" if log",
          "158:     line = server_gets(str, time_timeout, log: log) until line&.include?(str)",
          "163:   # then returns regex match.  Will timeout otherwise.",
          "164:   def wait_for_server_to_match(re, idx = nil, timeout: LOG_TIMEOUT, log: false)",
          "165:     time_timeout = Process.clock_gettime(Process::CLOCK_MONOTONIC) + timeout",
          "166:     line = ''",
          "168:     puts \"\\n\u2014\u2014\u2014 #{full_name} waiting for '#{re.inspect}'\" if log",
          "169:     line = server_gets(re, time_timeout, log: log) until line&.match?(re)",
          "170:     idx ? line[re, idx] : line",
          "171:   end",
          "173:   def server_gets(match_obj, time_timeout, log: false)",
          "174:     error_retries = 0",
          "175:     line = ''",
          "177:     sleep 0.05 unless @server.is_a?(IO) or Process.clock_gettime(Process::CLOCK_MONOTONIC) > time_timeout",
          "179:     raise Minitest::Assertion,  \"@server is not an IO\" unless @server.is_a?(IO)",
          "180:     if Process.clock_gettime(Process::CLOCK_MONOTONIC) > time_timeout",
          "181:       raise Minitest::Assertion, \"Timeout waiting for server to log #{match_obj.inspect}\"",
          "182:     end",
          "185:       if @server.wait_readable(LOG_WAIT_READ) and line = @server&.gets",
          "186:         @server_log << line",
          "187:         puts \"    #{line}\" if log",
          "189:     rescue StandardError => e",
          "190:       error_retries += 1",
          "191:       raise(e, \"Waiting for server to log #{match_obj.inspect}\") if error_retries == LOG_ERROR_QTY",
          "192:       sleep LOG_ERROR_SLEEP",
          "195:     if Process.clock_gettime(Process::CLOCK_MONOTONIC) > time_timeout",
          "196:       raise Minitest::Assertion, \"Timeout waiting for server to log #{match_obj.inspect}\"",
          "197:     end",
          "198:     line",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "286:   end",
          "288:   # gets worker pids from @server output",
          "290:     pids = []",
          "291:     re = /PID: (\\d+)\\) booted in [.0-9]+s, phase: #{phase}/",
          "292:     while pids.size < size",
          "294:         pids << pid",
          "295:       end",
          "296:     end",
          "",
          "[Removed Lines]",
          "289:   def get_worker_pids(phase = 0, size = workers)",
          "293:       if pid = wait_for_server_to_match(re, 1)",
          "",
          "[Added Lines]",
          "293:   def get_worker_pids(phase = 0, size = workers, log: false)",
          "297:       if pid = wait_for_server_to_match(re, 1, log: log)",
          "",
          "---------------"
        ],
        "test/test_integration_cluster.rb||test/test_integration_cluster.rb": [
          "File: test/test_integration_cluster.rb -> test/test_integration_cluster.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: require_relative \"helper\"",
          "2: require_relative \"helpers/integration\"",
          "4: require \"time\"",
          "6: class TestIntegrationCluster < TestIntegration",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: require \"puma/configuration\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:   end",
          "118:   def test_term_exit_code",
          "119:     cli_server \"-w #{workers} test/rackup/hello.ru\"",
          "120:     _, status = stop_server",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     skip_unless_signal_exist? :TERM",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:   end",
          "125:   def test_term_suppress",
          "126:     cli_server \"-w #{workers} -C test/config/suppress_exception.rb test/rackup/hello.ru\"",
          "128:     _, status = stop_server",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     skip_unless_signal_exist? :TERM",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:   end",
          "133:   def test_on_booted",
          "141:   end",
          "143:   def test_term_worker_clean_exit",
          "144:     cli_server \"-w #{workers} test/rackup/hello.ru\"",
          "146:     # Get the PIDs of the child workers.",
          "",
          "[Removed Lines]",
          "134:     cli_server \"-w #{workers} -C test/config/event_on_booted.rb -C test/config/event_on_booted_exit.rb test/rackup/hello.ru\", no_wait: true",
          "136:     output = []",
          "138:     output << $_ while @server.gets",
          "140:     assert output.any? { |msg| msg == \"on_booted called\\n\" } != nil",
          "",
          "[Added Lines]",
          "140:     skip_unless_signal_exist? :TERM",
          "141:     cli_server \"-w #{workers} -C test/config/event_on_booted.rb -C test/config/event_on_booted_exit.rb test/rackup/hello.ru\",",
          "142:       no_wait: true",
          "144:     assert wait_for_server_to_include('on_booted called')",
          "148:     skip_unless_signal_exist? :TERM",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290:   end",
          "292:   def test_load_path_includes_extra_deps",
          "295:     load_path = []",
          "298:     end",
          "299:     assert_match(%r{gems/minitest-[\\d.]+/lib$}, load_path.last)",
          "300:   end",
          "302:   def test_load_path_does_not_include_nio4r",
          "305:     load_path = []",
          "308:     end",
          "310:     load_path.each do |path|",
          "",
          "[Removed Lines]",
          "293:     cli_server \"-w #{workers} -C test/config/prune_bundler_with_deps.rb test/rackup/hello.ru\"",
          "296:     while (line = @server.gets) =~ /^LOAD_PATH/",
          "297:       load_path << line.gsub(/^LOAD_PATH: /, '')",
          "303:     cli_server \"-w #{workers} -C test/config/prune_bundler_with_deps.rb test/rackup/hello.ru\"",
          "306:     while (line = @server.gets) =~ /^LOAD_PATH/",
          "307:       load_path << line.gsub(/^LOAD_PATH: /, '')",
          "",
          "[Added Lines]",
          "298:     cli_server \"-w #{workers} -C test/config/prune_bundler_with_deps.rb test/rackup/hello.ru\",",
          "299:       no_wait: true",
          "302:     load_path << wait_for_server_to_match(/\\ALOAD_PATH: (.+)/, 1)",
          "303:     while (line = @server.gets).start_with? 'LOAD_PATH: '",
          "304:       load_path << line.sub(/\\ALOAD_PATH: /, '')",
          "310:     cli_server \"-w #{workers} -C test/config/prune_bundler_with_deps.rb test/rackup/hello.ru\",",
          "311:       no_wait: true",
          "314:     load_path << wait_for_server_to_match(/\\ALOAD_PATH: (.+)/, 1)",
          "315:     while (line = @server.gets).start_with? 'LOAD_PATH: '",
          "316:       load_path << line.sub(/\\ALOAD_PATH: /, '')",
          "",
          "---------------"
        ],
        "test/test_integration_single.rb||test/test_integration_single.rb": [
          "File: test/test_integration_single.rb -> test/test_integration_single.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   end",
          "52:   def test_on_booted",
          "60:   end",
          "62:   def test_term_suppress",
          "",
          "[Removed Lines]",
          "53:     cli_server \"-C test/config/event_on_booted.rb -C test/config/event_on_booted_exit.rb test/rackup/hello.ru\", no_wait: true",
          "55:     output = []",
          "57:     output << $_ while @server.gets",
          "59:     assert output.any? { |msg| msg == \"on_booted called\\n\" } != nil",
          "",
          "[Added Lines]",
          "53:     skip_unless_signal_exist? :TERM",
          "55:     cli_server \"-C test/config/event_on_booted.rb -C test/config/event_on_booted_exit.rb test/rackup/hello.ru\",",
          "56:       no_wait: true",
          "58:     assert wait_for_server_to_include('on_booted called')",
          "",
          "---------------"
        ],
        "test/test_plugin_systemd_jruby.rb||test/test_plugin_systemd_jruby.rb": [
          "File: test/test_plugin_systemd_jruby.rb -> test/test_plugin_systemd_jruby.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: require_relative \"helper\"",
          "4: require_relative \"helpers/integration\"",
          "6: class TestPluginSystemdJruby < TestIntegration",
          "8:   THREAD_LOG = TRUFFLE ? \"{ 0/16 threads, 16 available, 0 backlog }\" :",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: require \"puma/plugin\"",
          "",
          "---------------"
        ],
        "test/test_puma_server.rb||test/test_puma_server.rb": [
          "File: test/test_puma_server.rb -> test/test_puma_server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     @server.run",
          "50:   end",
          "53:     header = []",
          "54:     while true",
          "56:       break if line == \"\\r\\n\"",
          "57:       header << line.strip",
          "58:     end",
          "",
          "[Removed Lines]",
          "52:   def header(sock)",
          "55:       line = sock.gets",
          "",
          "[Added Lines]",
          "52:   def header(socket)",
          "55:       socket.wait_readable 5",
          "56:       line = socket.gets",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:   # only for shorter bodies!",
          "64:   def send_http_and_sysread(req)",
          "66:   end",
          "68:   def send_http_and_read(req)",
          "70:   end",
          "72:   def send_http(req)",
          "",
          "[Removed Lines]",
          "65:     send_http(req).sysread 2_048",
          "69:     send_http(req).read",
          "",
          "[Added Lines]",
          "66:     socket = send_http(req)",
          "67:     socket.wait_readable 5",
          "68:     socket.sysread 2_048",
          "72:     socket = send_http req",
          "73:     socket.wait_readable 5",
          "74:     socket.read",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:   end",
          "90:   def new_connection",
          "92:   end",
          "94:   def test_normalize_host_header_missing",
          "",
          "[Removed Lines]",
          "91:     TCPSocket.new(@host, @port).tap {|sock| @ios << sock}",
          "",
          "[Added Lines]",
          "96:     TCPSocket.new(@host, @port).tap {|socket| @ios << socket}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:     server_run { |env| [200, {}, tf] }",
          "164:     data = +''",
          "168:     ary = data.split(\"\\r\\n\\r\\n\", 2)",
          "",
          "[Removed Lines]",
          "165:     skt = send_http(\"GET / HTTP/1.1\\r\\nHost: [::ffff:127.0.0.1]:#{@port}\\r\\n\\r\\n\")",
          "166:     data << skt.sysread(65_536) while skt.wait_readable(0.1)",
          "",
          "[Added Lines]",
          "170:     socket = send_http(\"GET / HTTP/1.1\\r\\nHost: [::ffff:127.0.0.1]:#{@port}\\r\\n\\r\\n\")",
          "171:     data << socket.sysread(65_536) while socket.wait_readable(0.1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "186:     server_run { |env| [200, {}, obj] }",
          "188:     data = +''",
          "191:     ary = data.split(\"\\r\\n\\r\\n\", 2)",
          "193:     assert_equal random_bytes.bytesize, ary.last.bytesize",
          "",
          "[Removed Lines]",
          "189:     skt = send_http(\"GET / HTTP/1.1\\r\\nHost: [::ffff:127.0.0.1]:#{@port}\\r\\n\\r\\n\")",
          "190:     data << skt.sysread(65_536) while skt.wait_readable(0.1)",
          "",
          "[Added Lines]",
          "194:     socket = send_http(\"GET / HTTP/1.1\\r\\nHost: [::ffff:127.0.0.1]:#{@port}\\r\\n\\r\\n\")",
          "195:     data << socket.sysread(65_536) while socket.wait_readable(0.1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "207:     fifteen = \"1\" * 15",
          "211:     sleep 0.1 # important so that the previous data is sent as a packet",
          "216:     assert_equal \"#{fifteen}#{fifteen}\", data",
          "217:   end",
          "",
          "[Removed Lines]",
          "209:     sock = send_http \"PUT / HTTP/1.0\\r\\nContent-Length: 30\\r\\n\\r\\n#{fifteen}\"",
          "212:     sock << fifteen",
          "214:     sock.read",
          "",
          "[Added Lines]",
          "214:     socket = send_http \"PUT / HTTP/1.0\\r\\nContent-Length: 30\\r\\n\\r\\n#{fifteen}\"",
          "217:     socket << fifteen",
          "219:     socket.read",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "237:       [200, {}, [giant]]",
          "238:     end",
          "242:     while true",
          "244:       break if line == \"\\r\\n\"",
          "245:     end",
          "249:     assert_equal giant.bytesize, out.bytesize",
          "250:   end",
          "",
          "[Removed Lines]",
          "240:     sock = send_http \"GET / HTTP/1.0\\r\\n\\r\\n\"",
          "243:       line = sock.gets",
          "247:     out = sock.read",
          "",
          "[Added Lines]",
          "245:     socket = send_http \"GET / HTTP/1.0\\r\\n\\r\\n\"",
          "248:       line = socket.gets",
          "252:     out = socket.read",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "384:   def test_request_payload_too_large",
          "385:     server_run(http_content_length_limit: 10)",
          "392:     # Content Too Large",
          "393:     assert_equal \"HTTP/1.1 413 #{STATUS_CODES[413]}\\r\\n\", data",
          "",
          "[Removed Lines]",
          "387:     sock = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 19\\r\\n\\r\\n\"",
          "388:     sock << \"hello world foo bar\"",
          "390:     data = sock.gets",
          "",
          "[Added Lines]",
          "392:     socket = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 19\\r\\n\\r\\n\"",
          "393:     socket << \"hello world foo bar\"",
          "395:     data = socket.gets",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "396:   def test_http_11_keep_alive_with_large_payload",
          "397:     server_run(http_content_length_limit: 10) { [204, {}, []] }",
          "403:     # Content Too Large",
          "404:     assert_equal [\"HTTP/1.1 413 #{STATUS_CODES[413]}\", \"Content-Length: 17\"], h",
          "",
          "[Removed Lines]",
          "399:     sock = send_http \"GET / HTTP/1.1\\r\\nConnection: Keep-Alive\\r\\nContent-Length: 17\\r\\n\\r\\n\"",
          "400:     sock << \"hello world foo bar\"",
          "401:     h = header sock",
          "",
          "[Added Lines]",
          "404:     socket = send_http \"GET / HTTP/1.1\\r\\nConnection: Keep-Alive\\r\\nContent-Length: 17\\r\\n\\r\\n\"",
          "405:     socket << \"hello world foo bar\"",
          "406:     h = header socket",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "591:   def test_timeout_in_data_phase(**options)",
          "592:     server_run(first_data_timeout: 1, **options)",
          "600:     # Request Timeout",
          "601:     assert_equal \"HTTP/1.1 408 #{STATUS_CODES[408]}\\r\\n\", data",
          "",
          "[Removed Lines]",
          "594:     sock = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 5\\r\\n\\r\\n\"",
          "596:     sock << \"Hello\" unless sock.wait_readable(1.15)",
          "598:     data = sock.gets",
          "",
          "[Added Lines]",
          "599:     socket = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 5\\r\\n\\r\\n\"",
          "601:     socket << \"Hello\" unless socket.wait_readable(1.15)",
          "603:     data = socket.gets",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "610:     @server.instance_variable_set(:@first_data_timeout, 1)",
          "611:     server_run",
          "614:     sleep 0.5",
          "617:     sleep 0.5",
          "619:     sleep 0.5",
          "624:     assert_equal \"HTTP/1.1 200 OK\\r\\n\", data",
          "625:   end",
          "",
          "[Removed Lines]",
          "613:     sock = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 11\\r\\n\\r\\n\"",
          "616:     sock << \"hello\"",
          "618:     sock << \"world\"",
          "620:     sock << \"!\"",
          "622:     data = sock.gets",
          "",
          "[Added Lines]",
          "618:     socket = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 11\\r\\n\\r\\n\"",
          "621:     socket << \"hello\"",
          "623:     socket << \"world\"",
          "625:     socket << \"!\"",
          "627:     data = socket.gets",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "644:   def test_idle_timeout_before_first_request_data",
          "645:     server_run(idle_timeout: 1)",
          "649:     sleep 1.15",
          "655:     assert_equal \"HTTP/1.1 200 OK\\r\\n\", data",
          "656:   end",
          "",
          "[Removed Lines]",
          "647:     sock = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "651:     sock << \"hello world!\"",
          "653:     data = sock.gets",
          "",
          "[Added Lines]",
          "652:     socket = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "656:     socket << \"hello world!\"",
          "658:     data = socket.gets",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "658:   def test_idle_timeout_between_first_request_data",
          "659:     server_run(idle_timeout: 1)",
          "665:     sleep 1.15",
          "671:     assert_equal \"HTTP/1.1 200 OK\\r\\n\", data",
          "672:   end",
          "",
          "[Removed Lines]",
          "661:     sock = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "663:     sock << \"hello\"",
          "667:     sock << \" world!\"",
          "669:     data = sock.gets",
          "",
          "[Added Lines]",
          "666:     socket = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "668:     socket << \"hello\"",
          "672:     socket << \" world!\"",
          "674:     data = socket.gets",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "674:   def test_idle_timeout_after_first_request",
          "675:     server_run(idle_timeout: 1)",
          "683:     assert_equal \"HTTP/1.1 200 OK\\r\\n\", data",
          "",
          "[Removed Lines]",
          "677:     sock = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "679:     sock << \"hello world!\"",
          "681:     data = sock.gets",
          "",
          "[Added Lines]",
          "682:     socket = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "684:     socket << \"hello world!\"",
          "686:     data = socket.gets",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "687:     assert @server.shutting_down?",
          "690:     assert_raises Errno::ECONNREFUSED do",
          "691:       send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "692:     end",
          "",
          "[Removed Lines]",
          "689:     assert sock.wait_readable(1), 'Unexpected timeout'",
          "",
          "[Added Lines]",
          "694:     assert socket.wait_readable(1), 'Unexpected timeout'",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "695:   def test_idle_timeout_between_request_data",
          "696:     server_run(idle_timeout: 1)",
          "704:     assert_equal \"HTTP/1.1 200 OK\\r\\n\", data",
          "706:     sleep 0.5",
          "712:     sleep 1.15",
          "718:     assert_equal \"HTTP/1.1 200 OK\\r\\n\", data",
          "",
          "[Removed Lines]",
          "698:     sock = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "700:     sock << \"hello world!\"",
          "702:     data = sock.gets",
          "708:     sock = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "710:     sock << \"hello\"",
          "714:     sock << \" world!\"",
          "716:     data = sock.gets",
          "",
          "[Added Lines]",
          "703:     socket = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "705:     socket << \"hello world!\"",
          "707:     data = socket.gets",
          "713:     socket = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "715:     socket << \"hello\"",
          "719:     socket << \" world!\"",
          "721:     data = socket.gets",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "722:     assert @server.shutting_down?",
          "725:     assert_raises Errno::ECONNREFUSED do",
          "726:       send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "727:     end",
          "",
          "[Removed Lines]",
          "724:     assert sock.wait_readable(1), 'Unexpected timeout'",
          "",
          "[Added Lines]",
          "729:     assert socket.wait_readable(1), 'Unexpected timeout'",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "730:   def test_idle_timeout_between_requests",
          "731:     server_run(idle_timeout: 1)",
          "739:     assert_equal \"HTTP/1.1 200 OK\\r\\n\", data",
          "741:     sleep 0.5",
          "749:     assert_equal \"HTTP/1.1 200 OK\\r\\n\", data",
          "",
          "[Removed Lines]",
          "733:     sock = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "735:     sock << \"hello world!\"",
          "737:     data = sock.gets",
          "743:     sock = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "745:     sock << \"hello world!\"",
          "747:     data = sock.gets",
          "",
          "[Added Lines]",
          "738:     socket = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "740:     socket << \"hello world!\"",
          "742:     data = socket.gets",
          "748:     socket = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "750:     socket << \"hello world!\"",
          "752:     data = socket.gets",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "753:     assert @server.shutting_down?",
          "756:     assert_raises Errno::ECONNREFUSED do",
          "757:       send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 12\\r\\n\\r\\n\"",
          "758:     end",
          "",
          "[Removed Lines]",
          "755:     assert sock.wait_readable(1), 'Unexpected timeout'",
          "",
          "[Added Lines]",
          "760:     assert socket.wait_readable(1), 'Unexpected timeout'",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "761:   def test_http_11_keep_alive_with_body",
          "762:     server_run { [200, {\"Content-Type\" => \"plain/text\"}, [\"hello\\n\"]] }",
          "770:     assert_equal [\"HTTP/1.1 200 OK\", \"Content-Type: plain/text\", \"Content-Length: 6\"], h",
          "771:     assert_equal \"hello\\n\", body",
          "774:   end",
          "776:   def test_http_11_close_with_body",
          "",
          "[Removed Lines]",
          "764:     sock = send_http \"GET / HTTP/1.1\\r\\nConnection: Keep-Alive\\r\\n\\r\\n\"",
          "766:     h = header sock",
          "768:     body = sock.gets",
          "773:     sock.close",
          "",
          "[Added Lines]",
          "769:     socket = send_http \"GET / HTTP/1.1\\r\\nConnection: Keep-Alive\\r\\n\\r\\n\"",
          "771:     h = header socket",
          "773:     body = socket.gets",
          "778:     socket.close",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "784:   def test_http_11_keep_alive_without_body",
          "785:     server_run { [204, {}, []] }",
          "791:     # No Content",
          "792:     assert_equal [\"HTTP/1.1 204 #{STATUS_CODES[204]}\"], h",
          "",
          "[Removed Lines]",
          "787:     sock = send_http \"GET / HTTP/1.1\\r\\nConnection: Keep-Alive\\r\\n\\r\\n\"",
          "789:     h = header sock",
          "",
          "[Added Lines]",
          "792:     socket = send_http \"GET / HTTP/1.1\\r\\nConnection: Keep-Alive\\r\\n\\r\\n\"",
          "794:     h = header socket",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "795:   def test_http_11_close_without_body",
          "796:     server_run { [204, {}, []] }",
          "802:     # No Content",
          "803:     assert_equal [\"HTTP/1.1 204 #{STATUS_CODES[204]}\", \"Connection: close\"], h",
          "",
          "[Removed Lines]",
          "798:     sock = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\n\\r\\n\"",
          "800:     h = header sock",
          "",
          "[Added Lines]",
          "803:     socket = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\n\\r\\n\"",
          "805:     h = header socket",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "806:   def test_http_10_keep_alive_with_body",
          "807:     server_run { [200, {\"Content-Type\" => \"plain/text\"}, [\"hello\\n\"]] }",
          "815:     assert_equal [\"HTTP/1.0 200 OK\", \"Content-Type: plain/text\", \"Connection: Keep-Alive\", \"Content-Length: 6\"], h",
          "816:     assert_equal \"hello\\n\", body",
          "",
          "[Removed Lines]",
          "809:     sock = send_http \"GET / HTTP/1.0\\r\\nConnection: Keep-Alive\\r\\n\\r\\n\"",
          "811:     h = header sock",
          "813:     body = sock.gets",
          "",
          "[Added Lines]",
          "814:     socket = send_http \"GET / HTTP/1.0\\r\\nConnection: Keep-Alive\\r\\n\\r\\n\"",
          "816:     h = header socket",
          "818:     body = socket.gets",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "827:   def test_http_10_keep_alive_without_body",
          "828:     server_run { [204, {}, []] }",
          "834:     assert_equal [\"HTTP/1.0 204 No Content\", \"Connection: Keep-Alive\"], h",
          "835:   end",
          "",
          "[Removed Lines]",
          "830:     sock = send_http \"GET / HTTP/1.0\\r\\nConnection: Keep-Alive\\r\\n\\r\\n\"",
          "832:     h = header sock",
          "",
          "[Added Lines]",
          "835:     socket = send_http \"GET / HTTP/1.0\\r\\nConnection: Keep-Alive\\r\\n\\r\\n\"",
          "837:     h = header socket",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "908:       [200, {}, [\"\"]]",
          "909:     }",
          "912:     sleep 1",
          "918:     assert_equal \"HTTP/1.1 200 OK\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\", data",
          "919:     assert_equal \"hello\", body",
          "",
          "[Removed Lines]",
          "911:     sock = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\n\"",
          "914:     sock << \"h\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "916:     data = sock.read",
          "",
          "[Added Lines]",
          "916:     socket = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\n\"",
          "919:     socket << \"h\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "921:     data = socket.read",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "929:       [200, {}, [\"\"]]",
          "930:     }",
          "933:     sleep 1",
          "939:     assert_equal \"HTTP/1.1 200 OK\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\", data",
          "940:     assert_equal \"hello\", body",
          "",
          "[Removed Lines]",
          "932:     sock = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n\"",
          "935:     sock << \"4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "937:     data = sock.read",
          "",
          "[Added Lines]",
          "937:     socket = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n\"",
          "940:     socket << \"4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "942:     data = socket.read",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "950:       [200, {}, [\"\"]]",
          "951:     }",
          "954:     sleep 1",
          "960:     assert_equal \"HTTP/1.1 200 OK\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\", data",
          "961:     assert_equal \"hello\", body",
          "",
          "[Removed Lines]",
          "953:     sock = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\"",
          "956:     sock << \"\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "958:     data = sock.read",
          "",
          "[Added Lines]",
          "958:     socket = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\"",
          "961:     socket << \"\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "963:     data = socket.read",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "971:       [200, {}, [\"\"]]",
          "972:     }",
          "975:     sleep 1",
          "981:     assert_equal \"HTTP/1.1 200 OK\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\", data",
          "982:     assert_equal \"hello\", body",
          "",
          "[Removed Lines]",
          "974:     sock = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\"",
          "977:     sock << \"\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "979:     data = sock.read",
          "",
          "[Added Lines]",
          "979:     socket = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\"",
          "982:     socket << \"\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "984:     data = socket.read",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "992:       [200, {}, [\"\"]]",
          "993:     }",
          "996:     sleep 1",
          "1002:     assert_equal \"HTTP/1.1 200 OK\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\", data",
          "1003:     assert_equal \"hello\", body",
          "",
          "[Removed Lines]",
          "995:     sock = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\ne\"",
          "998:     sock << \"llo\\r\\n0\\r\\n\\r\\n\"",
          "1000:     data = sock.read",
          "",
          "[Added Lines]",
          "1000:     socket = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\ne\"",
          "1003:     socket << \"llo\\r\\n0\\r\\n\\r\\n\"",
          "1005:     data = socket.read",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1018:     chunked_body = \"#{part1.size.to_s(16)}\\r\\n#{part1}\\r\\n1\\r\\nb\\r\\n0\\r\\n\\r\\n\"",
          "1022:     sleep 0.1",
          "1026:     sleep 0.1",
          "1032:     assert_equal \"HTTP/1.1 200 OK\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\", data",
          "1033:     assert_equal (part1 + 'b'), body",
          "",
          "[Removed Lines]",
          "1020:     sock = send_http \"PUT /path HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n\"",
          "1024:     sock << chunked_body[0..-10]",
          "1028:     sock << chunked_body[-9..-1]",
          "1030:     data = sock.read",
          "",
          "[Added Lines]",
          "1025:     socket = send_http \"PUT /path HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n\"",
          "1029:     socket << chunked_body[0..-10]",
          "1033:     socket << chunked_body[-9..-1]",
          "1035:     data = socket.read",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1043:       [200, {}, [\"\"]]",
          "1044:     }",
          "1048:     sleep 1",
          "1054:     assert_equal \"HTTP/1.1 200 OK\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\", data",
          "1055:     assert_equal 'hello', body",
          "",
          "[Removed Lines]",
          "1046:     sock = send_http \"PUT /path HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n5\\r\\nhello\\r\"",
          "1050:     sock << \"\\n0\\r\\n\\r\\n\"",
          "1052:     data = sock.read",
          "",
          "[Added Lines]",
          "1051:     socket = send_http \"PUT /path HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n5\\r\\nhello\\r\"",
          "1055:     socket << \"\\n0\\r\\n\\r\\n\"",
          "1057:     data = socket.read",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1065:       [200, {}, [\"\"]]",
          "1066:     }",
          "1070:     sleep 1",
          "1076:     assert_equal \"HTTP/1.1 200 OK\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\", data",
          "1077:     assert_equal 'hello', body",
          "",
          "[Removed Lines]",
          "1068:     sock = send_http \"PUT /path HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n5\\r\\nhello\"",
          "1072:     sock << \"\\r\\n0\\r\\n\\r\\n\"",
          "1074:     data = sock.read",
          "",
          "[Added Lines]",
          "1073:     socket = send_http \"PUT /path HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n5\\r\\nhello\"",
          "1077:     socket << \"\\r\\n0\\r\\n\\r\\n\"",
          "1079:     data = socket.read",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1103:       [200, {}, [\"\"]]",
          "1104:     }",
          "1110:     assert_equal [\"HTTP/1.1 200 OK\", \"Content-Length: 0\"], h",
          "1111:     assert_equal \"hello\", body",
          "1112:     assert_equal \"5\", content_length",
          "1115:   end",
          "1117:   def test_chunked_keep_alive_two_back_to_back",
          "",
          "[Removed Lines]",
          "1106:     sock = send_http \"GET / HTTP/1.1\\r\\nConnection: Keep-Alive\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "1108:     h = header sock",
          "1114:     sock.close",
          "",
          "[Added Lines]",
          "1111:     socket = send_http \"GET / HTTP/1.1\\r\\nConnection: Keep-Alive\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "1113:     h = header socket",
          "1119:     socket.close",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1123:       [200, {}, [\"\"]]",
          "1124:     }",
          "1128:     last_crlf_written = false",
          "1129:     last_crlf_writer = Thread.new do",
          "1130:       sleep 0.1",
          "1132:       sleep 0.1",
          "1134:       last_crlf_written = true",
          "1135:     end",
          "1138:     assert_equal [\"HTTP/1.1 200 OK\", \"Content-Length: 0\"], h",
          "1139:     assert_equal \"hello\", body",
          "1140:     assert_equal \"5\", content_length",
          "",
          "[Removed Lines]",
          "1126:     sock = send_http \"GET / HTTP/1.1\\r\\nConnection: Keep-Alive\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\"",
          "1131:       sock << \"\\r\"",
          "1133:       sock << \"\\n\"",
          "1137:     h = header(sock)",
          "",
          "[Added Lines]",
          "1131:     socket = send_http \"GET / HTTP/1.1\\r\\nConnection: Keep-Alive\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\"",
          "1136:       socket << \"\\r\"",
          "1138:       socket << \"\\n\"",
          "1142:     h = header(socket)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1144:     last_crlf_writer.join",
          "1147:     sleep 0.1",
          "1151:     assert_equal [\"HTTP/1.1 200 OK\", \"Content-Length: 0\"], h",
          "1152:     assert_equal \"goodbye\", body",
          "1153:     assert_equal \"7\", content_length",
          "1156:   end",
          "1158:   def test_chunked_keep_alive_two_back_to_back_with_set_remote_address",
          "",
          "[Removed Lines]",
          "1146:     sock << \"GET / HTTP/1.1\\r\\nConnection: Keep-Alive\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n4\\r\\ngood\\r\\n3\\r\\nbye\\r\\n0\\r\\n\\r\\n\"",
          "1149:     h = header(sock)",
          "1155:     sock.close",
          "",
          "[Added Lines]",
          "1151:     socket << \"GET / HTTP/1.1\\r\\nConnection: Keep-Alive\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n4\\r\\ngood\\r\\n3\\r\\nbye\\r\\n0\\r\\n\\r\\n\"",
          "1154:     h = header(socket)",
          "1160:     socket.close",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1166:       [200, {}, [\"\"]]",
          "1167:     }",
          "1172:     assert_equal [\"HTTP/1.1 200 OK\", \"Content-Length: 0\"], h",
          "1173:     assert_equal \"hello\", body",
          "1174:     assert_equal \"5\", content_length",
          "1175:     assert_equal \"127.0.0.1\", remote_addr",
          "1178:     sleep 0.1",
          "1182:     assert_equal [\"HTTP/1.1 200 OK\", \"Content-Length: 0\"], h",
          "1183:     assert_equal \"goodbye\", body",
          "1184:     assert_equal \"7\", content_length",
          "1185:     assert_equal \"127.0.0.2\", remote_addr",
          "1188:   end",
          "1190:   def test_chunked_encoding",
          "",
          "[Removed Lines]",
          "1169:     sock = send_http \"GET / HTTP/1.1\\r\\nX-Forwarded-For: 127.0.0.1\\r\\nConnection: Keep-Alive\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "1171:     h = header sock",
          "1177:     sock << \"GET / HTTP/1.1\\r\\nX-Forwarded-For: 127.0.0.2\\r\\nConnection: Keep-Alive\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n4\\r\\ngood\\r\\n3\\r\\nbye\\r\\n0\\r\\n\\r\\n\"",
          "1180:     h = header(sock)",
          "1187:     sock.close",
          "",
          "[Added Lines]",
          "1174:     socket = send_http \"GET / HTTP/1.1\\r\\nX-Forwarded-For: 127.0.0.1\\r\\nConnection: Keep-Alive\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "1176:     h = header socket",
          "1182:     socket << \"GET / HTTP/1.1\\r\\nX-Forwarded-For: 127.0.0.2\\r\\nConnection: Keep-Alive\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n4\\r\\ngood\\r\\n3\\r\\nbye\\r\\n0\\r\\n\\r\\n\"",
          "1185:     h = header(socket)",
          "1192:     socket.close",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1227:       [204, {}, []]",
          "1228:     }",
          "1231:     sleep 1",
          "1236:     assert request_body_wait.is_a?(Float)",
          "1237:     # Could be 1000 but the tests get flaky. We don't care if it's extremely precise so much as that",
          "",
          "[Removed Lines]",
          "1230:     sock = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 5\\r\\n\\r\\nh\"",
          "1232:     sock << \"ello\"",
          "1234:     sock.gets",
          "",
          "[Added Lines]",
          "1235:     socket = send_http \"POST / HTTP/1.1\\r\\nHost: test.com\\r\\nContent-Type: text/plain\\r\\nContent-Length: 5\\r\\n\\r\\nh\"",
          "1237:     socket << \"ello\"",
          "1239:     socket.gets",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1246:       [204, {}, []]",
          "1247:     }",
          "1250:     sleep 3",
          "1255:     # Could be 1000 but the tests get flaky. We don't care if it's extremely precise so much as that",
          "1256:     # it is set to a reasonable number.",
          "",
          "[Removed Lines]",
          "1249:     sock = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n\"",
          "1251:     sock << \"4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "1253:     sock.gets",
          "",
          "[Added Lines]",
          "1254:     socket = send_http \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nh\\r\\n\"",
          "1256:     socket << \"4\\r\\nello\\r\\n0\\r\\n\\r\\n\"",
          "1258:     socket.gets",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1428:   def test_http11_connection_header_queue",
          "1429:     server_run { [200, {}, [\"\"]] }",
          "1438:   end",
          "1440:   def test_http10_connection_header_queue",
          "1441:     server_run { [200, {}, [\"\"]] }",
          "1449:   end",
          "1451:   def test_http11_connection_header_no_queue",
          "1452:     server_run(queue_requests: false) { [200, {}, [\"\"]] }",
          "1456:   end",
          "1458:   def test_http10_connection_header_no_queue",
          "1459:     server_run(queue_requests: false) { [200, {}, [\"\"]] }",
          "1463:   end",
          "1465:   def stub_accept_nonblock(error)",
          "",
          "[Removed Lines]",
          "1431:     sock = send_http \"GET / HTTP/1.1\\r\\n\\r\\n\"",
          "1432:     assert_equal [\"HTTP/1.1 200 OK\", \"Content-Length: 0\"], header(sock)",
          "1434:     sock << \"GET / HTTP/1.1\\r\\nConnection: close\\r\\n\\r\\n\"",
          "1435:     assert_equal [\"HTTP/1.1 200 OK\", \"Connection: close\", \"Content-Length: 0\"], header(sock)",
          "1437:     sock.close",
          "1443:     sock = send_http \"GET / HTTP/1.0\\r\\nConnection: keep-alive\\r\\n\\r\\n\"",
          "1444:     assert_equal [\"HTTP/1.0 200 OK\", \"Connection: Keep-Alive\", \"Content-Length: 0\"], header(sock)",
          "1446:     sock << \"GET / HTTP/1.0\\r\\n\\r\\n\"",
          "1447:     assert_equal [\"HTTP/1.0 200 OK\", \"Content-Length: 0\"], header(sock)",
          "1448:     sock.close",
          "1453:     sock = send_http \"GET / HTTP/1.1\\r\\n\\r\\n\"",
          "1454:     assert_equal [\"HTTP/1.1 200 OK\", \"Connection: close\", \"Content-Length: 0\"], header(sock)",
          "1455:     sock.close",
          "1460:     sock = send_http \"GET / HTTP/1.0\\r\\n\\r\\n\"",
          "1461:     assert_equal [\"HTTP/1.0 200 OK\", \"Content-Length: 0\"], header(sock)",
          "1462:     sock.close",
          "",
          "[Added Lines]",
          "1436:     socket = send_http \"GET / HTTP/1.1\\r\\n\\r\\n\"",
          "1437:     assert_equal [\"HTTP/1.1 200 OK\", \"Content-Length: 0\"], header(socket)",
          "1439:     socket << \"GET / HTTP/1.1\\r\\nConnection: close\\r\\n\\r\\n\"",
          "1440:     assert_equal [\"HTTP/1.1 200 OK\", \"Connection: close\", \"Content-Length: 0\"], header(socket)",
          "1442:     socket.close",
          "1448:     socket = send_http \"GET / HTTP/1.0\\r\\nConnection: keep-alive\\r\\n\\r\\n\"",
          "1449:     assert_equal [\"HTTP/1.0 200 OK\", \"Connection: Keep-Alive\", \"Content-Length: 0\"], header(socket)",
          "1451:     socket << \"GET / HTTP/1.0\\r\\n\\r\\n\"",
          "1452:     assert_equal [\"HTTP/1.0 200 OK\", \"Content-Length: 0\"], header(socket)",
          "1453:     socket.close",
          "1458:     socket = send_http \"GET / HTTP/1.1\\r\\n\\r\\n\"",
          "1459:     assert_equal [\"HTTP/1.1 200 OK\", \"Connection: close\", \"Content-Length: 0\"], header(socket)",
          "1460:     socket.close",
          "1465:     socket = send_http \"GET / HTTP/1.0\\r\\n\\r\\n\"",
          "1466:     assert_equal [\"HTTP/1.0 200 OK\", \"Content-Length: 0\"], header(socket)",
          "1467:     socket.close",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1503:     server_run(lowlevel_error_handler: handler) { [200, {}, ['Hello World']] }",
          "1505:     # valid req & read, close",
          "1508:     sleep 0.05  # macOS TruffleRuby may not get the body without",
          "1511:     assert_match 'Hello World', resp",
          "1512:     sleep 0.5",
          "1513:     assert_empty @log_writer.stdout.string",
          "1515:     # valid req, close",
          "1519:     sleep 0.5",
          "1520:     assert_empty @log_writer.stdout.string",
          "1522:     # invalid req, close",
          "1526:     sleep 0.5",
          "1527:     assert_empty @log_writer.stdout.string",
          "1528:   end",
          "1530:   def test_idle_connections_closed_immediately_on_shutdown",
          "1531:     server_run",
          "1533:     sleep 0.5 # give enough time for new connection to enter reactor",
          "1534:     @server.stop false",
          "1537:     assert_raises EOFError do",
          "1539:     end",
          "1540:   end",
          "",
          "[Removed Lines]",
          "1506:     sock = TCPSocket.new @host, @port",
          "1507:     sock.syswrite \"GET / HTTP/1.0\\r\\n\\r\\n\"",
          "1509:     resp = sock.sysread 256",
          "1510:     sock.close",
          "1516:     sock = TCPSocket.new @host, @port",
          "1517:     sock.syswrite \"GET / HTTP/1.0\\r\\n\\r\\n\"",
          "1518:     sock.close",
          "1523:     sock = TCPSocket.new @host, @port",
          "1524:     sock.syswrite \"GET / HTTP\"",
          "1525:     sock.close",
          "1532:     sock = new_connection",
          "1536:     assert sock.wait_readable(1), 'Unexpected timeout'",
          "1538:       sock.read_nonblock(256)",
          "",
          "[Added Lines]",
          "1511:     socket = TCPSocket.new @host, @port",
          "1512:     socket.syswrite \"GET / HTTP/1.0\\r\\n\\r\\n\"",
          "1514:     resp = socket.sysread 256",
          "1515:     socket.close",
          "1521:     socket = TCPSocket.new @host, @port",
          "1522:     socket.syswrite \"GET / HTTP/1.0\\r\\n\\r\\n\"",
          "1523:     socket.close",
          "1528:     socket = TCPSocket.new @host, @port",
          "1529:     socket.syswrite \"GET / HTTP\"",
          "1530:     socket.close",
          "1537:     socket = new_connection",
          "1541:     assert socket.wait_readable(1), 'Unexpected timeout'",
          "1543:       socket.read_nonblock(256)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1583:     bad = 0",
          "1584:     connections.each do |s|",
          "1585:       begin",
          "1587:       rescue Errno::ECONNRESET",
          "1588:         bad += 1",
          "1589:       end",
          "",
          "[Removed Lines]",
          "1586:         assert_match 'DONE', s.read",
          "",
          "[Added Lines]",
          "1591:         if s.wait_readable(1) and drain # JRuby may hang on read with drain is false",
          "1592:           assert_match 'DONE', s.read",
          "1593:         else",
          "1594:           bad += 1",
          "1595:         end",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1845:       [200, {}, [\"\"]]",
          "1846:     end",
          "1849:     empty_cl_request = <<~REQ.gsub(\"\\n\", \"\\r\\n\")",
          "1850:       GET / HTTP/1.1",
          "1851:       Host: localhost",
          "1854:       GET / HTTP/1.1",
          "1855:       Host: localhost",
          "1857:     REQ",
          "1860:     data = send_http_and_read empty_cl_request",
          "1861:     assert_operator data, :start_with?, 'HTTP/1.1 400 Bad Request'",
          "",
          "[Removed Lines]",
          "1848:     # rubocop:disable Layout/TrailingWhitespace",
          "1852:       Content-Length:",
          "1858:     # rubocop:enable Layout/TrailingWhitespace",
          "",
          "[Added Lines]",
          "1860:       Content-Length:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed0f2f94b56982c687452504b95d5f1fbbe3eed1",
      "candidate_info": {
        "commit_hash": "ed0f2f94b56982c687452504b95d5f1fbbe3eed1",
        "repo": "puma/puma",
        "commit_url": "https://github.com/puma/puma/commit/ed0f2f94b56982c687452504b95d5f1fbbe3eed1",
        "files": [
          "lib/puma/client.rb",
          "test/test_puma_server.rb"
        ],
        "message": "Merge pull request from GHSA-68xg-gqqm-vgj8\n\n* Reject empty string for Content-Length\n\n* Ignore trailers in last chunk\n\n* test_puma_server.rb - use heredoc, test_cl_and_te_smuggle\n\n* client.rb - stye/RubyCop\n\n* test_puma_server.rb - indented heredoc rubocop disable\n\n* Dentarg comments\n\n* Remove unused variable\n\n---------\n\nCo-authored-by: MSP-Greg <Greg.mpls@gmail.com>",
        "before_after_code_files": [
          "lib/puma/client.rb||lib/puma/client.rb",
          "test/test_puma_server.rb||test/test_puma_server.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/puma/client.rb||lib/puma/client.rb",
            "test/test_puma_server.rb||test/test_puma_server.rb"
          ],
          "candidate": [
            "lib/puma/client.rb||lib/puma/client.rb",
            "test/test_puma_server.rb||test/test_puma_server.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/puma/client.rb||lib/puma/client.rb": [
          "File: lib/puma/client.rb -> lib/puma/client.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     # chunked body validation",
          "51:     CHUNK_SIZE_INVALID = /[^\\h]/.freeze",
          "54:     # Content-Length header value validation",
          "55:     CONTENT_LENGTH_VALUE_INVALID = /[^\\d]/.freeze",
          "",
          "[Removed Lines]",
          "52:     CHUNK_VALID_ENDING = \"\\r\\n\".freeze",
          "",
          "[Added Lines]",
          "52:     CHUNK_VALID_ENDING = Const::LINE_END",
          "53:     CHUNK_VALID_ENDING_SIZE = CHUNK_VALID_ENDING.bytesize",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:       cl = @env[CONTENT_LENGTH]",
          "384:       if cl",
          "387:           raise HttpParserError, \"Invalid Content-Length: #{cl.inspect}\"",
          "388:         end",
          "389:       else",
          "",
          "[Removed Lines]",
          "385:         # cannot contain characters that are not \\d",
          "386:         if CONTENT_LENGTH_VALUE_INVALID.match? cl",
          "",
          "[Added Lines]",
          "386:         # cannot contain characters that are not \\d, or be empty",
          "387:         if CONTENT_LENGTH_VALUE_INVALID.match?(cl) || cl.empty?",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "545:       while !io.eof?",
          "546:         line = io.gets",
          "548:           # Puma doesn't process chunk extensions, but should parse if they're",
          "549:           # present, which is the reason for the semicolon regex",
          "550:           chunk_hex = line.strip[/\\A[^;]+/]",
          "",
          "[Removed Lines]",
          "547:         if line.end_with?(\"\\r\\n\")",
          "",
          "[Added Lines]",
          "548:         if line.end_with?(CHUNK_VALID_ENDING)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "556:             @in_last_chunk = true",
          "557:             @body.rewind",
          "558:             rest = io.read",
          "561:               @buffer = nil",
          "563:               return false",
          "564:             else",
          "566:               @buffer = nil if @buffer.empty?",
          "567:               set_ready",
          "568:               return true",
          "",
          "[Removed Lines]",
          "559:             last_crlf_size = \"\\r\\n\".bytesize",
          "560:             if rest.bytesize < last_crlf_size",
          "562:               @partial_part_left = last_crlf_size - rest.bytesize",
          "565:               @buffer = rest[last_crlf_size..-1]",
          "",
          "[Added Lines]",
          "560:             if rest.bytesize < CHUNK_VALID_ENDING_SIZE",
          "562:               @partial_part_left = CHUNK_VALID_ENDING_SIZE - rest.bytesize",
          "565:               # if the next character is a CRLF, set buffer to everything after that CRLF",
          "566:               start_of_rest = if rest.start_with?(CHUNK_VALID_ENDING)",
          "567:                 CHUNK_VALID_ENDING_SIZE",
          "568:               else # we have started a trailer section, which we do not support. skip it!",
          "569:                 rest.index(CHUNK_VALID_ENDING*2) + CHUNK_VALID_ENDING_SIZE*2",
          "570:               end",
          "572:               @buffer = rest[start_of_rest..-1]",
          "",
          "---------------"
        ],
        "test/test_puma_server.rb||test/test_puma_server.rb": [
          "File: test/test_puma_server.rb -> test/test_puma_server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:       [200, {}, [\"\"]]",
          "750:     }",
          "754:     chunk_header_size = 6 # 4fb8\\r\\n",
          "755:     # Current implementation reads one chunk of CHUNK_SIZE, then more chunks of size 4096.",
          "",
          "[Removed Lines]",
          "752:     header = \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n\"",
          "",
          "[Added Lines]",
          "752:     header = \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nContent-Length: 200\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1695:     [out_w, err_w].each(&:close)",
          "1696:     [out_r, err_r, pid]",
          "1697:   end",
          "1698: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1699:   def test_lowlevel_error_handler_response",
          "1700:     options = {",
          "1701:       lowlevel_error_handler: ->(_error) do",
          "1702:         [500, {}, [\"something wrong happened\"]]",
          "1703:       end",
          "1704:     }",
          "1705:     broken_app = ->(_env) { [200, nil, []] }",
          "1707:     server_run(**options, &broken_app)",
          "1709:     data = send_http_and_read \"GET / HTTP/1.1\\r\\n\\r\\n\"",
          "1711:     assert_match(/something wrong happened/, data)",
          "1712:   end",
          "1714:   def test_cl_empty_string",
          "1715:     server_run do |env|",
          "1716:       [200, {}, [\"\"]]",
          "1717:     end",
          "1719:     # rubocop:disable Layout/TrailingWhitespace",
          "1720:     empty_cl_request = <<~REQ.gsub(\"\\n\", \"\\r\\n\")",
          "1721:       GET / HTTP/1.1",
          "1722:       Host: localhost",
          "1723:       Content-Length:",
          "1725:       GET / HTTP/1.1",
          "1726:       Host: localhost",
          "1728:     REQ",
          "1729:     # rubocop:enable Layout/TrailingWhitespace",
          "1731:     data = send_http_and_read empty_cl_request",
          "1732:     assert_operator data, :start_with?, 'HTTP/1.1 400 Bad Request'",
          "1733:   end",
          "1735:   def test_crlf_trailer_smuggle",
          "1736:     server_run do |env|",
          "1737:       [200, {}, [\"\"]]",
          "1738:     end",
          "1740:     smuggled_payload = <<~REQ.gsub(\"\\n\", \"\\r\\n\")",
          "1741:       GET / HTTP/1.1",
          "1742:       Transfer-Encoding: chunked",
          "1743:       Host: whatever",
          "1745:       0",
          "1746:       X:POST / HTTP/1.1",
          "1747:       Host: whatever",
          "1749:       GET / HTTP/1.1",
          "1750:       Host: whatever",
          "1752:     REQ",
          "1754:     data = send_http_and_read smuggled_payload",
          "1755:     assert_equal 2, data.scan(\"HTTP/1.1 200 OK\").size",
          "1756:   end",
          "1758:   # test to check if content-length is ignored when 'transfer-encoding: chunked'",
          "1759:   # is used.  See also test_large_chunked_request",
          "1760:   def test_cl_and_te_smuggle",
          "1761:     body = nil",
          "1762:     server_run { |env|",
          "1763:       body = env['rack.input'].read",
          "1764:       [200, {}, [\"\"]]",
          "1765:     }",
          "1767:     req = <<~REQ.gsub(\"\\n\", \"\\r\\n\")",
          "1768:       POST /search HTTP/1.1",
          "1769:       Host: vulnerable-website.com",
          "1770:       Content-Type: application/x-www-form-urlencoded",
          "1771:       Content-Length: 4",
          "1772:       Transfer-Encoding: chunked",
          "1774:       7b",
          "1775:       GET /404 HTTP/1.1",
          "1776:       Host: vulnerable-website.com",
          "1777:       Content-Type: application/x-www-form-urlencoded",
          "1778:       Content-Length: 144",
          "1780:       x=",
          "1781:       0",
          "1783:     REQ",
          "1785:     data = send_http_and_read req",
          "1787:     assert_includes body, \"GET /404 HTTP/1.1\\r\\n\"",
          "1788:     assert_includes body, \"Content-Length: 144\\r\\n\"",
          "1789:     assert_equal 1, data.scan(\"HTTP/1.1 200 OK\").size",
          "1790:   end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7405a219801dcebc0ad6e0aa108d4319ca23f662",
      "candidate_info": {
        "commit_hash": "7405a219801dcebc0ad6e0aa108d4319ca23f662",
        "repo": "puma/puma",
        "commit_url": "https://github.com/puma/puma/commit/7405a219801dcebc0ad6e0aa108d4319ca23f662",
        "files": [
          "lib/puma/client.rb",
          "test/test_puma_server.rb"
        ],
        "message": "Merge pull request from GHSA-68xg-gqqm-vgj8\n\n* Reject empty string for Content-Length\n\n* Ignore trailers in last chunk\n\n* test_puma_server.rb - use heredoc, test_cl_and_te_smuggle\n\n* client.rb - stye/RubyCop\n\n* test_puma_server.rb - indented heredoc rubocop disable\n\n* Dentarg comments\n\n* Remove unused variable\n\n---------\n\nCo-authored-by: MSP-Greg <Greg.mpls@gmail.com>",
        "before_after_code_files": [
          "lib/puma/client.rb||lib/puma/client.rb",
          "test/test_puma_server.rb||test/test_puma_server.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/puma/client.rb||lib/puma/client.rb",
            "test/test_puma_server.rb||test/test_puma_server.rb"
          ],
          "candidate": [
            "lib/puma/client.rb||lib/puma/client.rb",
            "test/test_puma_server.rb||test/test_puma_server.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/puma/client.rb||lib/puma/client.rb": [
          "File: lib/puma/client.rb -> lib/puma/client.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     # chunked body validation",
          "47:     CHUNK_SIZE_INVALID = /[^\\h]/.freeze",
          "50:     # Content-Length header value validation",
          "51:     CONTENT_LENGTH_VALUE_INVALID = /[^\\d]/.freeze",
          "",
          "[Removed Lines]",
          "48:     CHUNK_VALID_ENDING = \"\\r\\n\".freeze",
          "",
          "[Added Lines]",
          "48:     CHUNK_VALID_ENDING = Const::LINE_END",
          "49:     CHUNK_VALID_ENDING_SIZE = CHUNK_VALID_ENDING.bytesize",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:       cl = @env[CONTENT_LENGTH]",
          "349:       if cl",
          "352:           raise HttpParserError, \"Invalid Content-Length: #{cl.inspect}\"",
          "353:         end",
          "354:       else",
          "",
          "[Removed Lines]",
          "350:         # cannot contain characters that are not \\d",
          "351:         if cl =~ CONTENT_LENGTH_VALUE_INVALID",
          "",
          "[Added Lines]",
          "351:         # cannot contain characters that are not \\d, or be empty",
          "352:         if cl =~ CONTENT_LENGTH_VALUE_INVALID || cl.empty?",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "510:       while !io.eof?",
          "511:         line = io.gets",
          "513:           # Puma doesn't process chunk extensions, but should parse if they're",
          "514:           # present, which is the reason for the semicolon regex",
          "515:           chunk_hex = line.strip[/\\A[^;]+/]",
          "",
          "[Removed Lines]",
          "512:         if line.end_with?(\"\\r\\n\")",
          "",
          "[Added Lines]",
          "513:         if line.end_with?(CHUNK_VALID_ENDING)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "521:             @in_last_chunk = true",
          "522:             @body.rewind",
          "523:             rest = io.read",
          "526:               @buffer = nil",
          "528:               return false",
          "529:             else",
          "531:               @buffer = nil if @buffer.empty?",
          "532:               set_ready",
          "533:               return true",
          "",
          "[Removed Lines]",
          "524:             last_crlf_size = \"\\r\\n\".bytesize",
          "525:             if rest.bytesize < last_crlf_size",
          "527:               @partial_part_left = last_crlf_size - rest.bytesize",
          "530:               @buffer = rest[last_crlf_size..-1]",
          "",
          "[Added Lines]",
          "525:             if rest.bytesize < CHUNK_VALID_ENDING_SIZE",
          "527:               @partial_part_left = CHUNK_VALID_ENDING_SIZE - rest.bytesize",
          "530:               # if the next character is a CRLF, set buffer to everything after that CRLF",
          "531:               start_of_rest = if rest.start_with?(CHUNK_VALID_ENDING)",
          "532:                 CHUNK_VALID_ENDING_SIZE",
          "533:               else # we have started a trailer section, which we do not support. skip it!",
          "534:                 rest.index(CHUNK_VALID_ENDING*2) + CHUNK_VALID_ENDING_SIZE*2",
          "535:               end",
          "537:               @buffer = rest[start_of_rest..-1]",
          "",
          "---------------"
        ],
        "test/test_puma_server.rb||test/test_puma_server.rb": [
          "File: test/test_puma_server.rb -> test/test_puma_server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "627:       [200, {}, [\"\"]]",
          "628:     }",
          "632:     chunk_header_size = 6 # 4fb8\\r\\n",
          "633:     # Current implementation reads one chunk of CHUNK_SIZE, then more chunks of size 4096.",
          "",
          "[Removed Lines]",
          "630:     header = \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n\"",
          "",
          "[Added Lines]",
          "630:     header = \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nContent-Length: 200\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1365:     data = send_http_and_read \"GET / HTTP/1.0\\r\\n\\r\\n\"",
          "1366:     assert_equal \"user\", data.split(\"\\r\\n\").last",
          "1367:   end",
          "1368: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1369:   def test_cl_empty_string",
          "1370:     server_run do |env|",
          "1371:       [200, {}, [\"\"]]",
          "1372:     end",
          "1374:     empty_cl_request = \"GET / HTTP/1.1\\r\\nHost: localhost\\r\\nContent-Length:\\r\\n\\r\\nGET / HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n\"",
          "1376:     data = send_http_and_read empty_cl_request",
          "1377:     assert_operator data, :start_with?, 'HTTP/1.1 400 Bad Request'",
          "1378:   end",
          "1380:   def test_crlf_trailer_smuggle",
          "1381:     server_run do |env|",
          "1382:       [200, {}, [\"\"]]",
          "1383:     end",
          "1385:     smuggled_payload = \"GET / HTTP/1.1\\r\\nTransfer-Encoding: chunked\\r\\nHost: whatever\\r\\n\\r\\n0\\r\\nX:POST / HTTP/1.1\\r\\nHost: whatever\\r\\n\\r\\nGET / HTTP/1.1\\r\\nHost: whatever\\r\\n\\r\\n\"",
          "1387:     data = send_http_and_read smuggled_payload",
          "1388:     assert_equal 2, data.scan(\"HTTP/1.1 200 OK\").size",
          "1389:   end",
          "1391:   # test to check if content-length is ignored when 'transfer-encoding: chunked'",
          "1392:   # is used.  See also test_large_chunked_request",
          "1393:   def test_cl_and_te_smuggle",
          "1394:     body = nil",
          "1395:     server_run { |env|",
          "1396:       body = env['rack.input'].read",
          "1397:       [200, {}, [\"\"]]",
          "1398:     }",
          "1400:     req = \"POST /search HTTP/1.1\\r\\nHost: vulnerable-website.com\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\nContent-Length: 4\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n7b\\r\\nGET /404 HTTP/1.1\\r\\nHost: vulnerable-website.com\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\nContent-Length: 144\\r\\n\\r\\nx=\\r\\n0\\r\\n\\r\\n\"",
          "1402:     data = send_http_and_read req",
          "1404:     assert_includes body, \"GET /404 HTTP/1.1\\r\\n\"",
          "1405:     assert_includes body, \"Content-Length: 144\\r\\n\"",
          "1406:     assert_equal 1, data.scan(\"HTTP/1.1 200 OK\").size",
          "1407:   end",
          "",
          "---------------"
        ]
      }
    }
  ]
}