{
  "cve_id": "CVE-2023-27476",
  "cve_desc": "OWSLib is a Python package for client programming with Open Geospatial Consortium (OGC) web service interface standards, and their related content models. OWSLib's XML parser (which supports both `lxml` and `xml.etree`) does not disable entity resolution, and could lead to arbitrary file reads from an attacker-controlled XML payload. This affects all XML parsing in the codebase. This issue has been addressed in version 0.28.1. All users are advised to upgrade. The only known workaround is to patch the library manually. See `GHSA-8h9c-r582-mggc` for details.",
  "repo": "geopython/OWSLib",
  "patch_hash": "b92687702be9576c0681bb11cad21eb631b9122f",
  "patch_info": {
    "commit_hash": "b92687702be9576c0681bb11cad21eb631b9122f",
    "repo": "geopython/OWSLib",
    "commit_url": "https://github.com/geopython/OWSLib/pull/863/commits/b92687702be9576c0681bb11cad21eb631b9122f",
    "files": [
      ".github/workflows/main.yml",
      "docs/en/installation.rst",
      "etc/debian/control",
      "owslib/catalogue/csw2.py",
      "owslib/catalogue/csw3.py",
      "owslib/etree.py",
      "owslib/feature/schema.py",
      "owslib/util.py",
      "requirements.txt"
    ],
    "message": "use only lxml for XML handling",
    "before_after_code_files": [
      "owslib/catalogue/csw2.py||owslib/catalogue/csw2.py",
      "owslib/catalogue/csw3.py||owslib/catalogue/csw3.py",
      "owslib/etree.py||owslib/etree.py",
      "owslib/feature/schema.py||owslib/feature/schema.py",
      "owslib/util.py||owslib/util.py"
    ]
  },
  "patch_diff": {
    "owslib/catalogue/csw2.py||owslib/catalogue/csw2.py": [
      "File: owslib/catalogue/csw2.py -> owslib/catalogue/csw2.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "226:         else:",
      "227:             # construct request",
      "228:             node0 = self._setrootelement('csw:GetRecords')",
      "234:             node0.set('outputSchema', outputschema)",
      "235:             node0.set('outputFormat', format)",
      "236:             node0.set('version', self.version)",
      "",
      "[Removed Lines]",
      "229:             if etree.__name__ != 'lxml.etree':  # apply nsmap manually",
      "230:                 node0.set('xmlns:ows', namespaces['ows'])",
      "231:                 node0.set('xmlns:gmd', namespaces['gmd'])",
      "232:                 node0.set('xmlns:dif', namespaces['dif'])",
      "233:                 node0.set('xmlns:fgdc', namespaces['fgdc'])",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "354:         else:",
      "355:             # construct request",
      "356:             node0 = self._setrootelement('csw:GetRecords')",
      "362:             node0.set('outputSchema', outputschema)",
      "363:             node0.set('outputFormat', format)",
      "364:             node0.set('version', self.version)",
      "",
      "[Removed Lines]",
      "357:             if etree.__name__ != 'lxml.etree':  # apply nsmap manually",
      "358:                 node0.set('xmlns:ows', namespaces['ows'])",
      "359:                 node0.set('xmlns:gmd', namespaces['gmd'])",
      "360:                 node0.set('xmlns:dif', namespaces['dif'])",
      "361:                 node0.set('xmlns:fgdc', namespaces['fgdc'])",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "622:             return el",
      "624:     def _setrootelement(self, el):",
      "630:     def _setconstraint(self, parent, qtype=None, propertyname='csw:AnyText', keywords=[], bbox=None, cql=None,",
      "631:                        identifier=None):",
      "",
      "[Removed Lines]",
      "625:         if etree.__name__ == 'lxml.etree':  # apply nsmap",
      "626:             return etree.Element(util.nspath_eval(el, namespaces), nsmap=namespaces)",
      "627:         else:",
      "628:             return etree.Element(util.nspath_eval(el, namespaces))",
      "",
      "[Added Lines]",
      "615:         return etree.Element(util.nspath_eval(el, namespaces), nsmap=namespaces)",
      "",
      "---------------"
    ],
    "owslib/catalogue/csw3.py||owslib/catalogue/csw3.py": [
      "File: owslib/catalogue/csw3.py -> owslib/catalogue/csw3.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "242:         else:",
      "243:             # construct request",
      "244:             node0 = self._setrootelement('csw30:GetRecords')",
      "250:             node0.set('outputSchema', outputschema)",
      "251:             node0.set('outputFormat', format)",
      "252:             node0.set('version', self.version)",
      "",
      "[Removed Lines]",
      "245:             if etree.__name__ != 'lxml.etree':  # apply nsmap manually",
      "246:                 node0.set('xmlns:ows110', namespaces['ows110'])",
      "247:                 node0.set('xmlns:gmd', namespaces['gmd'])",
      "248:                 node0.set('xmlns:dif', namespaces['dif'])",
      "249:                 node0.set('xmlns:fgdc', namespaces['fgdc'])",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "516:             return el",
      "518:     def _setrootelement(self, el):",
      "524:     def _setconstraint(self, parent, qtype=None, propertyname='csw30:AnyText', keywords=[], bbox=None, cql=None,",
      "525:                        identifier=None):",
      "",
      "[Removed Lines]",
      "519:         if etree.__name__ == 'lxml.etree':  # apply nsmap",
      "520:             return etree.Element(util.nspath_eval(el, namespaces), nsmap=namespaces)",
      "521:         else:",
      "522:             return etree.Element(util.nspath_eval(el, namespaces))",
      "",
      "[Added Lines]",
      "514:         return etree.Element(util.nspath_eval(el, namespaces), nsmap=namespaces)",
      "",
      "---------------"
    ],
    "owslib/etree.py||owslib/etree.py": [
      "File: owslib/etree.py -> owslib/etree.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: # Contact email: sgillies@frii.com",
      "5: # =============================================================================",
      "7: from owslib.namespaces import Namespaces",
      "13:     ns = Namespaces()",
      "15:     try:",
      "17:     except AttributeError:",
      "20:         def register_namespace(prefix, uri):",
      "23:     for k, v in list(ns.get_namespaces().items()):",
      "24:         register_namespace(k, v)",
      "",
      "[Removed Lines]",
      "10: def patch_well_known_namespaces(etree_module):",
      "11:     \"\"\"Monkey patches the etree module to add some well-known namespaces.\"\"\"",
      "16:         register_namespace = etree_module.register_namespace",
      "18:         etree_module._namespace_map",
      "21:             etree_module._namespace_map[uri] = prefix",
      "27: # try to find lxml or elementtree",
      "28: try:",
      "29:     from lxml import etree",
      "30:     from lxml.etree import ParseError",
      "31:     ElementType = etree._Element",
      "32: except ImportError:",
      "33:     import xml.etree.ElementTree as etree",
      "34:     ElementType = etree.Element",
      "35:     try:",
      "36:         from xml.etree.ElementTree import ParseError",
      "37:     except ImportError:",
      "38:         from xml.parsers.expat import ExpatError as ParseError",
      "40: patch_well_known_namespaces(etree)",
      "",
      "[Added Lines]",
      "8: from lxml import etree",
      "9: from lxml.etree import ParseError",
      "10: ElementType = etree._Element",
      "15: def patch_well_known_namespaces():",
      "16:     \"\"\"Monkey patches lxml.etree to add some well-known namespaces.\"\"\"",
      "21:         register_namespace = etree.register_namespace",
      "23:         etree._namespace_map",
      "26:             etree._namespace_map[uri] = prefix",
      "31:     etree.set_default_parser(",
      "32:         parser=etree.XMLParser(resolve_entities=False)",
      "33:     )",
      "36: patch_well_known_namespaces()",
      "",
      "---------------"
    ],
    "owslib/feature/schema.py||owslib/feature/schema.py": [
      "File: owslib/feature/schema.py -> owslib/feature/schema.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: from urllib.parse import urlencode, parse_qsl",
      "14: from owslib.etree import etree",
      "15: from owslib.namespaces import Namespaces",
      "18: MYNS = Namespaces()",
      "19: XS_NAMESPACE = MYNS.get_namespace(\"xs\")",
      "",
      "[Removed Lines]",
      "16: from owslib.util import which_etree, findall, Authentication, openURL",
      "",
      "[Added Lines]",
      "16: from owslib.util import findall, Authentication, openURL",
      "",
      "---------------"
    ],
    "owslib/util.py||owslib/util.py": [
      "File: owslib/util.py -> owslib/util.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "278: def cleanup_namespaces(element):",
      "279:     \"\"\" Remove unused namespaces from an element \"\"\"",
      "287: def add_namespaces(root, ns_keys):",
      "",
      "[Removed Lines]",
      "280:     if etree.__name__ == 'lxml.etree':",
      "281:         etree.cleanup_namespaces(element)",
      "282:         return element",
      "283:     else:",
      "284:         return etree.fromstring(etree.tostring(element))",
      "",
      "[Added Lines]",
      "280:     etree.cleanup_namespaces(element)",
      "281:     return element",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "293:     ns_keys = [(x, namespaces.get_namespace(x)) for x in ns_keys]",
      "326: def getXMLInteger(elem, tag):",
      "",
      "[Removed Lines]",
      "295:     if etree.__name__ != 'lxml.etree':",
      "296:         # We can just add more namespaces when not using lxml.",
      "297:         # We can't re-add an existing namespaces.  Get a list of current",
      "298:         # namespaces in use",
      "299:         existing_namespaces = set()",
      "300:         for elem in root.iter():",
      "301:             if elem.tag[0] == \"{\":",
      "302:                 uri, tag = elem.tag[1:].split(\"}\")",
      "303:                 existing_namespaces.add(namespaces.get_namespace_from_url(uri))",
      "304:         for key, link in ns_keys:",
      "305:             if link is not None and key not in existing_namespaces:",
      "306:                 root.set(\"xmlns:%s\" % key, link)",
      "307:         return root",
      "308:     else:",
      "309:         # lxml does not support setting xmlns attributes",
      "310:         # Update the elements nsmap with new namespaces",
      "311:         new_map = root.nsmap",
      "312:         for key, link in ns_keys:",
      "313:             if link is not None:",
      "314:                 new_map[key] = link",
      "315:         # Recreate the root element with updated nsmap",
      "316:         new_root = etree.Element(root.tag, nsmap=new_map)",
      "317:         # Carry over attributes",
      "318:         for a, v in list(root.items()):",
      "319:             new_root.set(a, v)",
      "320:         # Carry over children",
      "321:         for child in root:",
      "322:             new_root.append(deepcopy(child))",
      "323:         return new_root",
      "",
      "[Added Lines]",
      "292:     # lxml does not support setting xmlns attributes",
      "293:     # Update the elements nsmap with new namespaces",
      "294:     new_map = root.nsmap",
      "295:     for key, link in ns_keys:",
      "296:         if link is not None:",
      "297:             new_map[key] = link",
      "298:     # Recreate the root element with updated nsmap",
      "299:     new_root = etree.Element(root.tag, nsmap=new_map)",
      "300:     # Carry over attributes",
      "301:     for a, v in list(root.items()):",
      "302:         new_root.set(a, v)",
      "303:     # Carry over children",
      "304:     for child in root:",
      "305:         new_root.append(deepcopy(child))",
      "306:     return new_root",
      "308:     # We can just add more namespaces when not using lxml.",
      "309:     # We can't re-add an existing namespaces.  Get a list of current",
      "310:     # namespaces in use",
      "311:     existing_namespaces = set()",
      "312:     for elem in root.iter():",
      "313:         if elem.tag[0] == \"{\":",
      "314:             uri, tag = elem.tag[1:].split(\"}\")",
      "315:             existing_namespaces.add(namespaces.get_namespace_from_url(uri))",
      "316:     for key, link in ns_keys:",
      "317:         if link is not None and key not in existing_namespaces:",
      "318:             root.set(\"xmlns:%s\" % key, link)",
      "319:     return root",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "519:     if encoding is None:",
      "520:         encoding = \"ISO-8859-1\"",
      "529:         else:",
      "531:     else:",
      "538:     return output",
      "",
      "[Removed Lines]",
      "522:     if etree.__name__ == 'lxml.etree':",
      "523:         if xml_declaration:",
      "524:             if encoding in ['unicode', 'utf-8']:",
      "525:                 output = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\\n{}'.format(",
      "526:                     etree.tostring(element, encoding='unicode'))",
      "527:             else:",
      "528:                 output = etree.tostring(element, encoding=encoding, xml_declaration=True)",
      "530:             output = etree.tostring(element)",
      "532:         if xml_declaration:",
      "533:             output = '<?xml version=\"1.0\" encoding=\"{}\" standalone=\"no\"?>\\n{}'.format(",
      "534:                 encoding, etree.tostring(element, encoding=encoding))",
      "535:         else:",
      "536:             output = etree.tostring(element)",
      "",
      "[Added Lines]",
      "518:     if xml_declaration:",
      "519:         if encoding in ['unicode', 'utf-8']:",
      "520:             output = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\\n{}'.format(",
      "521:                 etree.tostring(element, encoding='unicode'))",
      "523:             output = etree.tostring(element, encoding=encoding, xml_declaration=True)",
      "525:         output = etree.tostring(element)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "777: log.addHandler(NullHandler())",
      "795: def findall(root, xpath, attribute_name=None, attribute_value=None):",
      "796:     \"\"\"Find elements recursively from given root element based on",
      "797:     xpath and possibly given attribute",
      "",
      "[Removed Lines]",
      "780: def which_etree():",
      "781:     \"\"\"decipher which etree library is being used by OWSLib\"\"\"",
      "783:     which_etree = None",
      "785:     if 'lxml' in etree.__file__:",
      "786:         which_etree = 'lxml.etree'",
      "787:     elif 'xml/etree' in etree.__file__:",
      "788:         which_etree = 'xml.etree'",
      "789:     elif 'elementree' in etree.__file__:",
      "790:         which_etree = 'elementtree.ElementTree'",
      "792:     return which_etree",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d91267303a695d69e73fa71efa100a035852a063",
      "candidate_info": {
        "commit_hash": "d91267303a695d69e73fa71efa100a035852a063",
        "repo": "geopython/OWSLib",
        "commit_url": "https://github.com/geopython/OWSLib/commit/d91267303a695d69e73fa71efa100a035852a063",
        "files": [
          ".github/workflows/main.yml",
          "docs/en/installation.rst",
          "etc/debian/control",
          "owslib/catalogue/csw2.py",
          "owslib/catalogue/csw3.py",
          "owslib/etree.py",
          "owslib/feature/schema.py",
          "owslib/util.py",
          "requirements.txt"
        ],
        "message": "use only lxml for XML handling (#863)",
        "before_after_code_files": [
          "owslib/catalogue/csw2.py||owslib/catalogue/csw2.py",
          "owslib/catalogue/csw3.py||owslib/catalogue/csw3.py",
          "owslib/etree.py||owslib/etree.py",
          "owslib/feature/schema.py||owslib/feature/schema.py",
          "owslib/util.py||owslib/util.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/geopython/OWSLib/pull/863"
        ],
        "olp_code_files": {
          "patch": [
            "owslib/catalogue/csw2.py||owslib/catalogue/csw2.py",
            "owslib/catalogue/csw3.py||owslib/catalogue/csw3.py",
            "owslib/etree.py||owslib/etree.py",
            "owslib/feature/schema.py||owslib/feature/schema.py",
            "owslib/util.py||owslib/util.py"
          ],
          "candidate": [
            "owslib/catalogue/csw2.py||owslib/catalogue/csw2.py",
            "owslib/catalogue/csw3.py||owslib/catalogue/csw3.py",
            "owslib/etree.py||owslib/etree.py",
            "owslib/feature/schema.py||owslib/feature/schema.py",
            "owslib/util.py||owslib/util.py"
          ]
        }
      },
      "candidate_diff": {
        "owslib/catalogue/csw2.py||owslib/catalogue/csw2.py": [
          "File: owslib/catalogue/csw2.py -> owslib/catalogue/csw2.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:         else:",
          "227:             # construct request",
          "228:             node0 = self._setrootelement('csw:GetRecords')",
          "234:             node0.set('outputSchema', outputschema)",
          "235:             node0.set('outputFormat', format)",
          "236:             node0.set('version', self.version)",
          "",
          "[Removed Lines]",
          "229:             if etree.__name__ != 'lxml.etree':  # apply nsmap manually",
          "230:                 node0.set('xmlns:ows', namespaces['ows'])",
          "231:                 node0.set('xmlns:gmd', namespaces['gmd'])",
          "232:                 node0.set('xmlns:dif', namespaces['dif'])",
          "233:                 node0.set('xmlns:fgdc', namespaces['fgdc'])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "354:         else:",
          "355:             # construct request",
          "356:             node0 = self._setrootelement('csw:GetRecords')",
          "362:             node0.set('outputSchema', outputschema)",
          "363:             node0.set('outputFormat', format)",
          "364:             node0.set('version', self.version)",
          "",
          "[Removed Lines]",
          "357:             if etree.__name__ != 'lxml.etree':  # apply nsmap manually",
          "358:                 node0.set('xmlns:ows', namespaces['ows'])",
          "359:                 node0.set('xmlns:gmd', namespaces['gmd'])",
          "360:                 node0.set('xmlns:dif', namespaces['dif'])",
          "361:                 node0.set('xmlns:fgdc', namespaces['fgdc'])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "622:             return el",
          "624:     def _setrootelement(self, el):",
          "630:     def _setconstraint(self, parent, qtype=None, propertyname='csw:AnyText', keywords=[], bbox=None, cql=None,",
          "631:                        identifier=None):",
          "",
          "[Removed Lines]",
          "625:         if etree.__name__ == 'lxml.etree':  # apply nsmap",
          "626:             return etree.Element(util.nspath_eval(el, namespaces), nsmap=namespaces)",
          "627:         else:",
          "628:             return etree.Element(util.nspath_eval(el, namespaces))",
          "",
          "[Added Lines]",
          "615:         return etree.Element(util.nspath_eval(el, namespaces), nsmap=namespaces)",
          "",
          "---------------"
        ],
        "owslib/catalogue/csw3.py||owslib/catalogue/csw3.py": [
          "File: owslib/catalogue/csw3.py -> owslib/catalogue/csw3.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:         else:",
          "243:             # construct request",
          "244:             node0 = self._setrootelement('csw30:GetRecords')",
          "250:             node0.set('outputSchema', outputschema)",
          "251:             node0.set('outputFormat', format)",
          "252:             node0.set('version', self.version)",
          "",
          "[Removed Lines]",
          "245:             if etree.__name__ != 'lxml.etree':  # apply nsmap manually",
          "246:                 node0.set('xmlns:ows110', namespaces['ows110'])",
          "247:                 node0.set('xmlns:gmd', namespaces['gmd'])",
          "248:                 node0.set('xmlns:dif', namespaces['dif'])",
          "249:                 node0.set('xmlns:fgdc', namespaces['fgdc'])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "516:             return el",
          "518:     def _setrootelement(self, el):",
          "524:     def _setconstraint(self, parent, qtype=None, propertyname='csw30:AnyText', keywords=[], bbox=None, cql=None,",
          "525:                        identifier=None):",
          "",
          "[Removed Lines]",
          "519:         if etree.__name__ == 'lxml.etree':  # apply nsmap",
          "520:             return etree.Element(util.nspath_eval(el, namespaces), nsmap=namespaces)",
          "521:         else:",
          "522:             return etree.Element(util.nspath_eval(el, namespaces))",
          "",
          "[Added Lines]",
          "514:         return etree.Element(util.nspath_eval(el, namespaces), nsmap=namespaces)",
          "",
          "---------------"
        ],
        "owslib/etree.py||owslib/etree.py": [
          "File: owslib/etree.py -> owslib/etree.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: # Contact email: sgillies@frii.com",
          "5: # =============================================================================",
          "7: from owslib.namespaces import Namespaces",
          "13:     ns = Namespaces()",
          "15:     try:",
          "17:     except AttributeError:",
          "20:         def register_namespace(prefix, uri):",
          "23:     for k, v in list(ns.get_namespaces().items()):",
          "24:         register_namespace(k, v)",
          "",
          "[Removed Lines]",
          "10: def patch_well_known_namespaces(etree_module):",
          "11:     \"\"\"Monkey patches the etree module to add some well-known namespaces.\"\"\"",
          "16:         register_namespace = etree_module.register_namespace",
          "18:         etree_module._namespace_map",
          "21:             etree_module._namespace_map[uri] = prefix",
          "27: # try to find lxml or elementtree",
          "28: try:",
          "29:     from lxml import etree",
          "30:     from lxml.etree import ParseError",
          "31:     ElementType = etree._Element",
          "32: except ImportError:",
          "33:     import xml.etree.ElementTree as etree",
          "34:     ElementType = etree.Element",
          "35:     try:",
          "36:         from xml.etree.ElementTree import ParseError",
          "37:     except ImportError:",
          "38:         from xml.parsers.expat import ExpatError as ParseError",
          "40: patch_well_known_namespaces(etree)",
          "",
          "[Added Lines]",
          "8: from lxml import etree",
          "9: from lxml.etree import ParseError",
          "10: ElementType = etree._Element",
          "15: def patch_well_known_namespaces():",
          "16:     \"\"\"Monkey patches lxml.etree to add some well-known namespaces.\"\"\"",
          "21:         register_namespace = etree.register_namespace",
          "23:         etree._namespace_map",
          "26:             etree._namespace_map[uri] = prefix",
          "31:     etree.set_default_parser(",
          "32:         parser=etree.XMLParser(resolve_entities=False)",
          "33:     )",
          "36: patch_well_known_namespaces()",
          "",
          "---------------"
        ],
        "owslib/feature/schema.py||owslib/feature/schema.py": [
          "File: owslib/feature/schema.py -> owslib/feature/schema.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: from urllib.parse import urlencode, parse_qsl",
          "14: from owslib.etree import etree",
          "15: from owslib.namespaces import Namespaces",
          "18: MYNS = Namespaces()",
          "19: XS_NAMESPACE = MYNS.get_namespace(\"xs\")",
          "",
          "[Removed Lines]",
          "16: from owslib.util import which_etree, findall, Authentication, openURL",
          "",
          "[Added Lines]",
          "16: from owslib.util import findall, Authentication, openURL",
          "",
          "---------------"
        ],
        "owslib/util.py||owslib/util.py": [
          "File: owslib/util.py -> owslib/util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "278: def cleanup_namespaces(element):",
          "279:     \"\"\" Remove unused namespaces from an element \"\"\"",
          "287: def add_namespaces(root, ns_keys):",
          "",
          "[Removed Lines]",
          "280:     if etree.__name__ == 'lxml.etree':",
          "281:         etree.cleanup_namespaces(element)",
          "282:         return element",
          "283:     else:",
          "284:         return etree.fromstring(etree.tostring(element))",
          "",
          "[Added Lines]",
          "280:     etree.cleanup_namespaces(element)",
          "281:     return element",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:     ns_keys = [(x, namespaces.get_namespace(x)) for x in ns_keys]",
          "326: def getXMLInteger(elem, tag):",
          "",
          "[Removed Lines]",
          "295:     if etree.__name__ != 'lxml.etree':",
          "296:         # We can just add more namespaces when not using lxml.",
          "297:         # We can't re-add an existing namespaces.  Get a list of current",
          "298:         # namespaces in use",
          "299:         existing_namespaces = set()",
          "300:         for elem in root.iter():",
          "301:             if elem.tag[0] == \"{\":",
          "302:                 uri, tag = elem.tag[1:].split(\"}\")",
          "303:                 existing_namespaces.add(namespaces.get_namespace_from_url(uri))",
          "304:         for key, link in ns_keys:",
          "305:             if link is not None and key not in existing_namespaces:",
          "306:                 root.set(\"xmlns:%s\" % key, link)",
          "307:         return root",
          "308:     else:",
          "309:         # lxml does not support setting xmlns attributes",
          "310:         # Update the elements nsmap with new namespaces",
          "311:         new_map = root.nsmap",
          "312:         for key, link in ns_keys:",
          "313:             if link is not None:",
          "314:                 new_map[key] = link",
          "315:         # Recreate the root element with updated nsmap",
          "316:         new_root = etree.Element(root.tag, nsmap=new_map)",
          "317:         # Carry over attributes",
          "318:         for a, v in list(root.items()):",
          "319:             new_root.set(a, v)",
          "320:         # Carry over children",
          "321:         for child in root:",
          "322:             new_root.append(deepcopy(child))",
          "323:         return new_root",
          "",
          "[Added Lines]",
          "292:     # lxml does not support setting xmlns attributes",
          "293:     # Update the elements nsmap with new namespaces",
          "294:     new_map = root.nsmap",
          "295:     for key, link in ns_keys:",
          "296:         if link is not None:",
          "297:             new_map[key] = link",
          "298:     # Recreate the root element with updated nsmap",
          "299:     new_root = etree.Element(root.tag, nsmap=new_map)",
          "300:     # Carry over attributes",
          "301:     for a, v in list(root.items()):",
          "302:         new_root.set(a, v)",
          "303:     # Carry over children",
          "304:     for child in root:",
          "305:         new_root.append(deepcopy(child))",
          "306:     return new_root",
          "308:     # We can just add more namespaces when not using lxml.",
          "309:     # We can't re-add an existing namespaces.  Get a list of current",
          "310:     # namespaces in use",
          "311:     existing_namespaces = set()",
          "312:     for elem in root.iter():",
          "313:         if elem.tag[0] == \"{\":",
          "314:             uri, tag = elem.tag[1:].split(\"}\")",
          "315:             existing_namespaces.add(namespaces.get_namespace_from_url(uri))",
          "316:     for key, link in ns_keys:",
          "317:         if link is not None and key not in existing_namespaces:",
          "318:             root.set(\"xmlns:%s\" % key, link)",
          "319:     return root",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "519:     if encoding is None:",
          "520:         encoding = \"ISO-8859-1\"",
          "529:         else:",
          "531:     else:",
          "538:     return output",
          "",
          "[Removed Lines]",
          "522:     if etree.__name__ == 'lxml.etree':",
          "523:         if xml_declaration:",
          "524:             if encoding in ['unicode', 'utf-8']:",
          "525:                 output = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\\n{}'.format(",
          "526:                     etree.tostring(element, encoding='unicode'))",
          "527:             else:",
          "528:                 output = etree.tostring(element, encoding=encoding, xml_declaration=True)",
          "530:             output = etree.tostring(element)",
          "532:         if xml_declaration:",
          "533:             output = '<?xml version=\"1.0\" encoding=\"{}\" standalone=\"no\"?>\\n{}'.format(",
          "534:                 encoding, etree.tostring(element, encoding=encoding))",
          "535:         else:",
          "536:             output = etree.tostring(element)",
          "",
          "[Added Lines]",
          "518:     if xml_declaration:",
          "519:         if encoding in ['unicode', 'utf-8']:",
          "520:             output = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\\n{}'.format(",
          "521:                 etree.tostring(element, encoding='unicode'))",
          "523:             output = etree.tostring(element, encoding=encoding, xml_declaration=True)",
          "525:         output = etree.tostring(element)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "777: log.addHandler(NullHandler())",
          "795: def findall(root, xpath, attribute_name=None, attribute_value=None):",
          "796:     \"\"\"Find elements recursively from given root element based on",
          "797:     xpath and possibly given attribute",
          "",
          "[Removed Lines]",
          "780: def which_etree():",
          "781:     \"\"\"decipher which etree library is being used by OWSLib\"\"\"",
          "783:     which_etree = None",
          "785:     if 'lxml' in etree.__file__:",
          "786:         which_etree = 'lxml.etree'",
          "787:     elif 'xml/etree' in etree.__file__:",
          "788:         which_etree = 'xml.etree'",
          "789:     elif 'elementree' in etree.__file__:",
          "790:         which_etree = 'elementtree.ElementTree'",
          "792:     return which_etree",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}