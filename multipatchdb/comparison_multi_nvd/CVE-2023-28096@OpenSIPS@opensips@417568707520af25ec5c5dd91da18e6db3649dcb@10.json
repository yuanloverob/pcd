{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a05893a631193a37548cfae292ed7f00f63044e3",
      "candidate_info": {
        "commit_hash": "a05893a631193a37548cfae292ed7f00f63044e3",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/a05893a631193a37548cfae292ed7f00f63044e3",
        "files": [
          "msg_translator.c"
        ],
        "message": "Fix body re-assembling when adding a new body part to an emptry received body\n\nThis fixes a regression introduced in b0591d285ad966c2cb13672de8071c03fcba7414\nFixes #2823\nCredits go to @pergolafabio for the detailed reporting",
        "before_after_code_files": [
          "msg_translator.c||msg_translator.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "msg_translator.c||msg_translator.c": [
          "File: msg_translator.c -> msg_translator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1262:  char *hdr, *it;",
          "1267:  if (msg->body->updated_part_count==0) {",
          "",
          "[Removed Lines]",
          "1265:  orig_offs = msg->body ? msg->body->body.s-msg->buf : msg->len ;",
          "",
          "[Added Lines]",
          "1265:  orig_offs = (msg->body && msg->body->body.s) ?",
          "1266:   msg->body->body.s-msg->buf : msg->len ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1915:  } else {",
          "1918:   memcpy(new_buf+*new_offs, msg->buf+*orig_offs, size );",
          "",
          "[Removed Lines]",
          "1917:   size = (msg->body->body.s - msg->buf) - *orig_offs;",
          "",
          "[Added Lines]",
          "1918:   size = msg->body->body.s ?",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81cb0903aedd2271e9a93789e83e1d96e28352f1",
      "candidate_info": {
        "commit_hash": "81cb0903aedd2271e9a93789e83e1d96e28352f1",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/81cb0903aedd2271e9a93789e83e1d96e28352f1",
        "files": [
          "modules/b2b_entities/dlg.c"
        ],
        "message": "b2b_entities: properly handle unexpected ACKs\n\nFixes an issue where a 487 reply is not relayed after an unexpected ACK is\nreceived following a CANCEL.\n\nThanks to David Escartin from Sonoc for reporting.",
        "before_after_code_files": [
          "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c": [
          "File: modules/b2b_entities/dlg.c -> modules/b2b_entities/dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:    dlg->state= B2B_TERMINATED;",
          "488:    break;",
          "489:   case METHOD_ACK:",
          "491:     dlg->state= B2B_ESTABLISHED;",
          "492:    break;",
          "493:   default:",
          "",
          "[Removed Lines]",
          "490:    if (dlg->state != B2B_MODIFIED || !dlg->uac_tran)",
          "",
          "[Added Lines]",
          "490:    if (dlg->state == B2B_CONFIRMED)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86915d16b33f35e139038f669475b194c6fc5856",
      "candidate_info": {
        "commit_hash": "86915d16b33f35e139038f669475b194c6fc5856",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/86915d16b33f35e139038f669475b194c6fc5856",
        "files": [
          "modules/clusterer/clusterer.c"
        ],
        "message": "clusterer: fix seed fallback during sync\n\nDo not fall back to the synced state for a capability if syncing is\nactually in progress.\n\n(cherry picked from commit 3960008a14fa75395cc4b49c7e7cae52ac68aed7)",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:    lock_get(cl->lock);",
          "78:    if ((cap->flags & CAP_STATE_ENABLED) &&",
          "79:     !(cap->flags & CAP_STATE_OK) &&",
          "80:     (cl->current_node->flags & NODE_IS_SEED) &&",
          "81:     (TIME_DIFF(cap->sync_req_time, now) >= seed_fb_interval*1000000)) {",
          "82:     cap->flags |= CAP_STATE_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     !(cap->flags & CAP_SYNC_IN_PROGRESS) &&",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d2c4bebc4c90ce4fe5df12e7edde3eff6116a889",
      "candidate_info": {
        "commit_hash": "d2c4bebc4c90ce4fe5df12e7edde3eff6116a889",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/d2c4bebc4c90ce4fe5df12e7edde3eff6116a889",
        "files": [
          "re.c"
        ],
        "message": "re.subst transformation: Fix possible pkg memleak\n\nThe leak would only happen under these simultaneous conditions:\n  1. the \"subst\" (last) part of the RE is a variable\n  2. the variable is using an index (e.g. an AVP)\n  3. there are at least two different \"subst\" strings in the script,\n     which can run alternatively (see the global \"subst_re\" logic to\n     understand more about the \"reusage\" mechanism and this effect)\n\nMany thanks to Richard Revels for a detailed report on this bug!\n\nFixes #2761\n\n(cherry picked from commit c739c2f4de2b26767e894765bb5f47d908f88603)",
        "before_after_code_files": [
          "re.c||re.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "re.c||re.c": [
          "File: re.c -> re.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: void subst_expr_free(struct subst_expr* se)",
          "46: {",
          "47:  if (se->replacement.s) pkg_free(se->replacement.s);",
          "48:  if (se->re) { regfree(se->re); pkg_free(se->re); };",
          "49:  pkg_free(se);",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:  int i;",
          "51:  for (i = 0; i < se->n_escapes; i++)",
          "52:   if (se->replace[i].type == REPLACE_SPEC",
          "53:       && se->replace[i].u.spec.pvp.pvi.type == PV_IDX_PVAR)",
          "54:           pv_spec_free(se->replace[i].u.spec.pvp.pvi.u.dval);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "570c0aafab9e2983f2b10d678823962e6c9146c1",
      "candidate_info": {
        "commit_hash": "570c0aafab9e2983f2b10d678823962e6c9146c1",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/570c0aafab9e2983f2b10d678823962e6c9146c1",
        "files": [
          "modules/tm/uac.c"
        ],
        "message": "[tm] fix adding rport in local route\n\nForce the VIA rebuild if add_local_rport() (for adding rport param to VIA) was called from local route\n\nCloses #2833\n\n(cherry picked from commit c85d93c7a3c3e9177d4621163295816b77bcdddc)",
        "before_after_code_files": [
          "modules/tm/uac.c||modules/tm/uac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/tm/uac.c||modules/tm/uac.c": [
          "File: modules/tm/uac.c -> modules/tm/uac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:  if (req->new_uri.s || req->force_send_socket!=dialog->send_sock ||",
          "208:  req->dst_uri.len != dialog->hooks.next_hop->len ||",
          "209:  memcmp(req->dst_uri.s,dialog->hooks.next_hop->s,req->dst_uri.len) ||",
          "",
          "[Removed Lines]",
          "210:  (dst_changed=0)!=0 || req->add_rm || should_update_sip_body(req)) {",
          "",
          "[Added Lines]",
          "210:  (dst_changed=0)!=0 || req->add_rm || should_update_sip_body(req)",
          "211:  || req->msg_flags&FL_FORCE_LOCAL_RPORT) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:    }",
          "237:   }",
          "242:    LM_DBG(\"Interface change in local route -> \"",
          "243:     \"rebuilding via\\n\");",
          "",
          "[Removed Lines]",
          "240:   if (new_send_sock && new_send_sock != dialog->send_sock) {",
          "",
          "[Added Lines]",
          "242:   if ( (new_send_sock && new_send_sock != dialog->send_sock)",
          "243:   || (req->msg_flags&FL_FORCE_LOCAL_RPORT &&",
          "247:   (new_send_sock=dialog->send_sock)!=NULL) ) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}