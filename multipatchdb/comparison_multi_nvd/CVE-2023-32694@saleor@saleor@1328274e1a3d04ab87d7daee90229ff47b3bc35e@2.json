{
  "cve_id": "CVE-2023-32694",
  "cve_desc": "Saleor Core is a composable, headless commerce API. Saleor's `validate_hmac_signature` function is vulnerable to timing attacks. Malicious users could abuse this vulnerability on Saleor deployments having the Adyen plugin enabled in order to determine the secret key and forge fake events, this could affect the database integrity such as marking an order as paid when it is not. This issue has been patched in versions 3.7.68, 3.8.40, 3.9.49, 3.10.36, 3.11.35, 3.12.25, and 3.13.16.",
  "repo": "saleor/saleor",
  "patch_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
  "patch_info": {
    "commit_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "repo": "saleor/saleor",
    "commit_url": "https://github.com/saleor/saleor/commit/1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "files": [
      "saleor/graphql/schema.graphql",
      "saleor/order/__init__.py",
      "saleor/order/events.py",
      "saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py"
    ],
    "message": "Add webhooks logic",
    "before_after_code_files": [
      "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
      "saleor/order/__init__.py||saleor/order/__init__.py",
      "saleor/order/events.py||saleor/order/events.py",
      "saleor/payment/__init__.py||saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py||saleor/payment/utils.py"
    ]
  },
  "patch_diff": {
    "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
      "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   exportProducts(input: ExportProductsInput!): ExportProducts",
      "2751:   checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode",
      "2752:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate",
      "2754:   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate",
      "2755:   checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach",
      "2756:   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach",
      "",
      "[Removed Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "[Added Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3063:   EMAIL_SENT",
      "3064:   PAYMENT_AUTHORIZED",
      "3065:   PAYMENT_CAPTURED",
      "3066:   PAYMENT_REFUNDED",
      "3067:   PAYMENT_VOIDED",
      "3068:   PAYMENT_FAILED",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3066:   PAYMENT_GATEWAY_NOTIFICATION",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3388: enum PaymentChargeStatusEnum {",
      "3389:   NOT_CHARGED",
      "3390:   PARTIALLY_CHARGED",
      "3391:   FULLY_CHARGED",
      "3392:   PARTIALLY_REFUNDED",
      "3393:   FULLY_REFUNDED",
      "3394: }",
      "3396: type PaymentCountableConnection {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3391:   PENDING",
      "3396:   REFUSED",
      "3397:   CANCELLED",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3435: input PaymentInput {",
      "3436:   gateway: String!",
      "3437:   token: String",
      "3439:   amount: Decimal",
      "3440:   billingAddress: AddressInput",
      "3441: }",
      "",
      "[Removed Lines]",
      "3438:   paymentData: JSONString",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5024: enum TransactionKind {",
      "5025:   AUTH",
      "5026:   REFUND",
      "5027:   CAPTURE",
      "5028:   VOID",
      "5029:   CONFIRM",
      "5030: }",
      "5032: union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029:   PENDING",
      "5031:   REFUND_ONGOING",
      "5035:   CANCEL",
      "",
      "---------------"
    ],
    "saleor/order/__init__.py||saleor/order/__init__.py": [
      "File: saleor/order/__init__.py -> saleor/order/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     PAYMENT_REFUNDED = \"payment_refunded\"",
      "52:     PAYMENT_VOIDED = \"payment_voided\"",
      "53:     PAYMENT_FAILED = \"payment_failed\"",
      "55:     INVOICE_REQUESTED = \"invoice_requested\"",
      "56:     INVOICE_GENERATED = \"invoice_generated\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     PAYMENT_GATEWAY_NOTIFICATION = \"payment_gateway_notification\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         (EMAIL_SENT, \"The email was sent\"),",
      "81:         (PAYMENT_AUTHORIZED, \"The payment was authorized\"),",
      "82:         (PAYMENT_CAPTURED, \"The payment was captured\"),",
      "83:         (PAYMENT_REFUNDED, \"The payment was refunded\"),",
      "84:         (PAYMENT_VOIDED, \"The payment was voided\"),",
      "85:         (PAYMENT_FAILED, \"The payment was failed\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         (PAYMENT_GATEWAY_NOTIFICATION, \"Notification from payment gateway\"),",
      "",
      "---------------"
    ],
    "saleor/order/events.py||saleor/order/events.py": [
      "File: saleor/order/events.py -> saleor/order/events.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:     )",
      "263: def fulfillment_canceled_event(",
      "265: ) -> OrderEvent:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: def payment_gateway_notification_event(",
      "265: ) -> OrderEvent:",
      "266:     if not _user_is_valid(user):",
      "267:         user = None",
      "268:     parameters = {\"message\": message}",
      "270:     if payment:",
      "271:         parameters.update({\"gateway\": payment.gateway, \"payment_id\": payment.token})",
      "273:     return OrderEvent.objects.create(",
      "274:         order=order,",
      "275:         type=OrderEvents.PAYMENT_GATEWAY_NOTIFICATION,",
      "276:         user=user,",
      "277:         parameters=parameters,",
      "278:     )",
      "",
      "---------------"
    ],
    "saleor/payment/__init__.py||saleor/payment/__init__.py": [
      "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     AUTH = \"auth\"",
      "61:     CAPTURE = \"capture\"",
      "62:     VOID = \"void\"",
      "63:     PENDING = \"pending\"",
      "64:     REFUND = \"refund\"",
      "65:     REFUND_ONGOING = \"refund_ongoing\"",
      "66:     CONFIRM = \"confirm\"",
      "67:     # FIXME we could use another status like WAITING_FOR_AUTH for transactions",
      "68:     # Which were authorized, but needs to be confirmed manually by staff",
      "69:     # eg. Braintree with \"submit_for_settlement\" enabled",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     CAPTURE_FAILED = \"capture_failed\"",
      "67:     REFUND_FAILED = \"refund_failed\"",
      "68:     REFUND_REVERSED = \"refund_reversed\"",
      "70:     CANCEL = \"cancel\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         (CAPTURE, \"Capture\"),",
      "76:         (VOID, \"Void\"),",
      "77:         (CONFIRM, \"Confirm\"),",
      "78:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         (CANCEL, \"Cancel\"),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:     FULLY_CHARGED = \"fully-charged\"",
      "98:     PARTIALLY_REFUNDED = \"partially-refunded\"",
      "99:     FULLY_REFUNDED = \"fully-refunded\"",
      "101:     CHOICES = [",
      "102:         (NOT_CHARGED, \"Not charged\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     REFUSED = \"refused\"",
      "106:     CANCELLED = \"cancelled\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:         (FULLY_CHARGED, \"Fully charged\"),",
      "106:         (PARTIALLY_REFUNDED, \"Partially refunded\"),",
      "107:         (FULLY_REFUNDED, \"Fully refunded\"),",
      "108:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:         (REFUSED, \"Refused\"),",
      "116:         (CANCELLED, \"Cancelled\"),",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
      "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import json",
      "4: import Adyen",
      "5: from babel.numbers import get_currency_precision",
      "6: from django.core.handlers.wsgi import WSGIRequest",
      "8: from graphql_relay import from_global_id",
      "10: from ....checkout.models import Checkout",
      "",
      "[Removed Lines]",
      "2: from typing import Optional",
      "7: from django.http import HttpResponse, JsonResponse",
      "",
      "[Added Lines]",
      "2: from typing import List, Optional",
      "6: from django.contrib.auth.hashers import make_password",
      "8: from django.http import HttpResponse, HttpResponseNotFound, JsonResponse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     request_data_for_payment,",
      "22:     request_for_payment_refund,",
      "23: )",
      "25: GATEWAY_NAME = \"Adyen\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: from .webhooks import handle_webhook",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:         {\"name\": \"Origin Key\", \"value\": \"\"},",
      "51:         {\"name\": \"Origin Url\", \"value\": \"\"},",
      "52:         {\"name\": \"Live\", \"value\": \"\"},",
      "54:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
      "55:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
      "56:         {\"name\": \"Notification user\", \"value\": \"\"},",
      "",
      "[Removed Lines]",
      "53:         {\"name\": \"Enable notifications\", \"value\": True},",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:             \"type\": ConfigurationTypeField.BOOLEAN,",
      "110:             \"help_text\": (",
      "111:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
      "114:                 \"https://docs.adyen.com/development-resources/webhooks\"",
      "115:             ),",
      "116:             \"label\": \"Enable notifications\",",
      "",
      "[Removed Lines]",
      "112:                 \"webhook url is <your-backend-url>/plugins/mirumee.payments.adyen/\"",
      "113:                 \"webhooks/ \"",
      "",
      "[Added Lines]",
      "113:                 \"webhook url is http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:             \"help_text\": (",
      "135:                 \"Provide secret key generated on Adyen side.\"",
      "136:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
      "138:             ),",
      "139:             \"label\": \"HMAC secret key\",",
      "140:         },",
      "",
      "[Removed Lines]",
      "137:                 \"ions-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "137:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
      "138:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "143:             \"help_text\": (",
      "144:                 \"Base User provided on the Adyen side for authenticate incoming \"",
      "145:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "147:             ),",
      "148:             \"label\": \"Notification user\",",
      "149:         },",
      "",
      "[Removed Lines]",
      "146:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "147:                 \"set-up-notifications-in-your-customer-area \"",
      "148:                 \"The Saleor webhook url is \"",
      "149:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "152:             \"help_text\": (",
      "153:                 \"User password provided on the Adyen side for authenticate incoming \"",
      "154:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "156:             ),",
      "157:             \"label\": \"Notification password\",",
      "158:         },",
      "",
      "[Removed Lines]",
      "155:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "158:                 \"set-up-notifications-in-your-customer-area \"",
      "159:                 \"The Saleor webhook url is \"",
      "160:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
      "164:         self.config = GatewayConfig(",
      "165:             gateway_name=GATEWAY_NAME,",
      "167:             supported_currencies=configuration[\"Supported currencies\"],",
      "168:             connection_params={",
      "169:                 \"api_key\": configuration[\"API key\"],",
      "",
      "[Removed Lines]",
      "166:             auto_capture=True,  # FIXME check this",
      "",
      "[Added Lines]",
      "171:             auto_capture=configuration[",
      "172:                 \"Automatically mark payment as a capture\"",
      "173:             ],  # FIXME check this",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "171:                 \"return_url\": configuration[\"Return Url\"],",
      "172:                 \"origin_key\": configuration[\"Origin Key\"],",
      "173:                 \"origin_url\": configuration[\"Origin Url\"],",
      "174:             },",
      "175:         )",
      "176:         api_key = self.config.connection_params[\"api_key\"]",
      "177:         self.adyen = Adyen.Adyen(xapikey=api_key)",
      "179:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
      "184:     def _get_gateway_config(self) -> GatewayConfig:",
      "185:         return self.config",
      "",
      "[Removed Lines]",
      "181:         print(request.body)",
      "182:         return HttpResponse(\"[accepted]\")",
      "",
      "[Added Lines]",
      "181:                 \"live\": configuration[\"Live\"],",
      "182:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
      "183:                 \"webhook_user\": configuration[\"Notification user\"],",
      "184:                 \"webhook_user_password\": configuration[\"Notification password\"],",
      "191:         config = self._get_gateway_config()",
      "192:         return handle_webhook(request, config)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "238:             raw_response=result.message,",
      "239:         )",
      "241:     @require_active_plugin",
      "242:     def get_payment_config(self, previous_value):",
      "243:         return []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @classmethod",
      "252:     def _update_config_items(",
      "253:         cls, configuration_to_update: List[dict], current_config: List[dict]",
      "254:     ):",
      "255:         super()._update_config_items(configuration_to_update, current_config)",
      "256:         for item in current_config:",
      "257:             if item.get(\"name\") == \"Notification password\":",
      "258:                 item[\"value\"] = make_password(item[\"value\"])",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
      "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: logger = logging.getLogger(__name__)",
      "18: def get_price_amount(value: Decimal, currency: str):",
      "19:     \"\"\"Adyen doesn't use values with comma.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: def convert_adyen_price_format(value: str, currency: str):",
      "19:     value = Decimal(value)",
      "20:     precision = get_currency_precision(currency)",
      "21:     number_places = Decimal(10) ** -precision",
      "22:     return value * number_places",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
      "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import base64",
      "2: import binascii",
      "3: import hashlib",
      "4: import hmac",
      "5: import json",
      "6: from typing import Any, Dict, Optional",
      "8: from django.contrib.auth.hashers import check_password",
      "9: from django.core.handlers.wsgi import WSGIRequest",
      "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
      "11: from django.http.request import HttpHeaders",
      "12: from graphql_relay import from_global_id",
      "14: from ....order.events import payment_gateway_notification_event",
      "15: from ....payment.models import Payment, Transaction",
      "16: from ... import TransactionKind",
      "17: from ...interface import GatewayConfig, GatewayResponse",
      "18: from ...utils import create_transaction, gateway_postprocess",
      "19: from .utils import convert_adyen_price_format",
      "22: def get_payment(payment_id: str) -> Payment:",
      "23:     _type, payment_id = from_global_id(payment_id)",
      "24:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
      "25:     return payment",
      "28: def get_transaction(",
      "29:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
      "30: ) -> Transaction:",
      "31:     transaction = payment.transactions.filter(kind=kind, token=transaction_id)",
      "32:     return transaction",
      "35: def create_new_transaction(notification, payment, kind):",
      "36:     transaction_id = notification.get(\"pspReference\")",
      "37:     currency = notification.get(\"amount\", {}).get(\"currency\")",
      "38:     amount = convert_adyen_price_format(",
      "39:         notification.get(\"amount\", {}).get(\"value\"), currency",
      "40:     )",
      "41:     is_success = True if notification.get(\"success\") == \"true\" else False",
      "43:     gateway_response = GatewayResponse(",
      "44:         kind=kind,",
      "45:         action_required=False,",
      "46:         transaction_id=transaction_id,",
      "47:         is_success=is_success,",
      "48:         amount=amount,",
      "49:         currency=currency,",
      "50:         error=\"\",",
      "51:         raw_response={},",
      "52:     )",
      "53:     return create_transaction(",
      "54:         payment,",
      "55:         kind=kind,",
      "56:         payment_information=None,",
      "57:         action_required=False,",
      "58:         gateway_response=gateway_response,",
      "59:     )",
      "62: def create_payment_notification_for_order(",
      "63:     payment: Payment, success_msg: str, failed_msg: Optional[str], is_success: bool",
      "64: ):",
      "65:     if not payment.order:",
      "66:         # Order is not assigned",
      "67:         return",
      "68:     msg = success_msg if is_success else failed_msg",
      "70:     payment_gateway_notification_event(",
      "71:         order=payment.order, user=None, message=msg, payment=payment",
      "72:     )",
      "75: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "76:     mark_capture = gateway_config.auto_capture",
      "77:     if mark_capture:",
      "78:         # If we mark order as a capture by default we don't need to handle auth actions",
      "79:         return",
      "80:     payment = get_payment(notification.get(\"merchantReference\"))",
      "81:     if not payment:",
      "82:         # We don't know anything about that payment",
      "83:         return",
      "85:     transaction_id = notification.get(\"pspReference\")",
      "86:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
      "87:     if transaction:",
      "88:         # We already marked it as Auth",
      "89:         return",
      "91:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
      "93:     success_msg = \"Adyen: The payment request was successful.\"",
      "94:     failed_msg = \"Adyen: The payment request failed.\"",
      "95:     create_payment_notification_for_order(",
      "96:         payment, success_msg, failed_msg, transaction.is_success",
      "97:     )",
      "100: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "101:     payment = get_payment(notification.get(\"merchantReference\"))",
      "102:     if not payment:",
      "103:         return",
      "104:     transaction_id = notification.get(\"pspReference\")",
      "105:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
      "106:     if transaction:",
      "107:         # it is already cancelled",
      "108:         return",
      "109:     new_transaction = create_new_transaction(",
      "110:         notification, payment, TransactionKind.CANCEL",
      "111:     )",
      "112:     gateway_postprocess(new_transaction, payment)",
      "114:     success_msg = \"Adyen: The cancel request was successful.\"",
      "115:     failed_msg = \"Adyen: The request failed.\"",
      "116:     create_payment_notification_for_order(",
      "117:         payment, success_msg, failed_msg, transaction.is_success",
      "118:     )",
      "121: def handle_cancel_or_refund(",
      "122:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "123: ):",
      "124:     additional_data = notification.get(\"additionalData\")",
      "125:     action = additional_data.get(\"modification.action\")",
      "126:     if action == \"refund\":",
      "127:         handle_refund(notification, gateway_config)",
      "128:     elif action == \"cancel\":",
      "129:         handle_cancellation(notification, gateway_config)",
      "132: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "133:     payment = get_payment(notification.get(\"merchantReference\"))",
      "134:     if not payment:",
      "135:         return",
      "136:     transaction_id = notification.get(\"pspReference\")",
      "137:     transaction = get_transaction(payment, transaction_id, TransactionKind.CAPTURE)",
      "138:     if transaction and transaction.is_success:",
      "139:         # it is already captured",
      "140:         return",
      "142:     new_transaction = create_new_transaction(",
      "143:         notification, payment, TransactionKind.CAPTURE",
      "144:     )",
      "145:     gateway_postprocess(new_transaction, payment)",
      "147:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
      "148:     failed_msg = f\"Adyen: The capture {transaction_id} request failed.\"",
      "149:     create_payment_notification_for_order(",
      "150:         payment, success_msg, failed_msg, transaction.is_success",
      "151:     )",
      "154: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "155:     payment = get_payment(notification.get(\"merchantReference\"))",
      "156:     if not payment:",
      "157:         return",
      "158:     transaction_id = notification.get(\"pspReference\")",
      "160:     transaction = get_transaction(",
      "161:         payment, transaction_id, TransactionKind.CAPTURE_FAILED",
      "162:     )",
      "163:     if transaction and transaction.is_success:",
      "164:         # it is already failed",
      "165:         return",
      "166:     new_transaction = create_new_transaction(",
      "167:         notification, payment, TransactionKind.CAPTURE_FAILED",
      "168:     )",
      "169:     gateway_postprocess(new_transaction, payment)",
      "171:     msg = f\"Adyen: The capture for {transaction_id} failed due to a technical issue.\"",
      "172:     create_payment_notification_for_order(payment, msg, None, True)",
      "175: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "176:     mark_capture = gateway_config.auto_capture",
      "177:     if mark_capture:",
      "178:         # If we mark order as a capture by default we don't need to handle this action",
      "179:         return",
      "180:     payment = get_payment(notification.get(\"merchantReference\"))",
      "181:     if not payment:",
      "182:         return",
      "183:     transaction_id = notification.get(\"pspReference\")",
      "184:     transaction = get_transaction(payment, transaction_id, TransactionKind.PENDING)",
      "185:     if transaction and transaction.is_success:",
      "186:         # it is already pending",
      "187:         return",
      "188:     new_transaction = create_new_transaction(",
      "189:         notification, payment, TransactionKind.PENDING",
      "190:     )",
      "191:     gateway_postprocess(new_transaction, payment)",
      "193:     msg = f\"Adyen: The transaction {transaction_id} is pending.\"",
      "194:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
      "197: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "198:     payment = get_payment(notification.get(\"merchantReference\"))",
      "199:     if not payment:",
      "200:         return",
      "201:     transaction_id = notification.get(\"pspReference\")",
      "202:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "203:     if transaction and transaction.is_success:",
      "204:         # it is already refunded",
      "205:         return",
      "206:     new_transaction = create_new_transaction(",
      "207:         notification, payment, TransactionKind.REFUND",
      "208:     )",
      "209:     gateway_postprocess(new_transaction, payment)",
      "211:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "212:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "213:     create_payment_notification_for_order(",
      "214:         payment, success_msg, failed_msg, transaction.is_success",
      "215:     )",
      "218: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "219:     payment = get_payment(notification.get(\"merchantReference\"))",
      "220:     if not payment:",
      "221:         return",
      "222:     transaction_id = notification.get(\"pspReference\")",
      "223:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "224:     if transaction and not transaction.is_success:",
      "225:         # The refund is already saved",
      "226:         return",
      "227:     new_transaction = create_new_transaction(",
      "228:         notification, payment, TransactionKind.REFUND",
      "229:     )",
      "230:     gateway_postprocess(new_transaction, payment)",
      "232:     msg = (",
      "233:         f\"The refund {transaction_id} failed due to a technical issue. If you receive \"",
      "234:         f\"more than two failures on the same refund, contact Adyen Support Team.\"",
      "235:     )",
      "236:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "239: def handle_reversed_refund(",
      "240:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "241: ):",
      "242:     payment = get_payment(notification.get(\"merchantReference\"))",
      "243:     if not payment:",
      "244:         return",
      "245:     transaction_id = notification.get(\"pspReference\")",
      "246:     transaction = get_transaction(",
      "247:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
      "248:     )",
      "250:     if transaction and not transaction.is_success:",
      "251:         # it is already refunded",
      "252:         return",
      "253:     new_transaction = create_new_transaction(",
      "254:         notification, payment, TransactionKind.REFUND_REVERSED",
      "255:     )",
      "256:     gateway_postprocess(new_transaction, payment)",
      "257:     msg = (",
      "258:         f\"Adyen: The refunded amount from {transaction_id} has been returned to Adyen, \"",
      "259:         f\"and is back in your account. This may happen if the shopper's bank account \"",
      "260:         f\"is no longer valid\"",
      "261:     )",
      "262:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "265: def handle_refund_with_data(",
      "266:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "267: ):",
      "269:     payment = get_payment(notification.get(\"merchantReference\"))",
      "270:     if not payment:",
      "271:         return",
      "272:     transaction_id = notification.get(\"pspReference\")",
      "273:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "274:     if transaction:",
      "275:         # it is already refunded",
      "276:         return",
      "277:     new_transaction = create_new_transaction(",
      "278:         notification, payment, TransactionKind.REFUND",
      "279:     )",
      "280:     gateway_postprocess(new_transaction, payment)",
      "281:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "282:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "283:     create_payment_notification_for_order(",
      "284:         payment, success_msg, failed_msg, transaction.is_success",
      "285:     )",
      "288: def webhook_not_implemented(",
      "289:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "290: ):",
      "291:     adyen_id = notification.get(\"pspReference\")",
      "292:     success = notification.get(\"success\", True)",
      "293:     event = notification.get(\"eventCode\")",
      "294:     payment = get_payment(notification.get(\"merchantReference\"))",
      "295:     if not payment:",
      "296:         return",
      "297:     msg = (",
      "298:         f\"Received not implemented notification from Adyen. Event name: {event}, \"",
      "299:         f\"success: {success}, adyen reference: {adyen_id}.\"",
      "300:     )",
      "301:     create_payment_notification_for_order(payment, msg, None, True)",
      "304: EVENT_MAP = {",
      "305:     \"AUTHORISATION\": handle_authorization,",
      "306:     \"AUTHORISATION_ADJUSTMENT\": webhook_not_implemented,",
      "307:     \"CANCELLATION\": handle_cancellation,",
      "308:     \"CANCEL_OR_REFUND\": handle_cancel_or_refund,",
      "309:     \"CAPTURE\": handle_capture,",
      "310:     \"CAPTURE_FAILED\": handle_failed_capture,",
      "311:     \"HANDLED_EXTERNALLY\": webhook_not_implemented,",
      "312:     \"ORDER_OPENED\": webhook_not_implemented,",
      "313:     \"ORDER_CLOSED\": webhook_not_implemented,",
      "314:     \"PENDING\": handle_pending,",
      "315:     \"PROCESS_RETRY\": webhook_not_implemented,",
      "316:     \"REFUND\": handle_refund,",
      "317:     \"REFUND_FAILED\": handle_failed_refund,",
      "318:     \"REFUNDED_REVERSED\": handle_reversed_refund,",
      "319:     \"REFUND_WITH_DATA\": handle_refund_with_data,",
      "320:     \"REPORT_AVAILABLE\": webhook_not_implemented,",
      "321:     \"VOID_PENDING_REFUND\": webhook_not_implemented,",
      "322: }",
      "325: def validate_hmac_signature(",
      "326:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
      "327: ) -> bool:",
      "329:     \"\"\"",
      "330:     pspReference 7914073381342284",
      "331:     originalReference",
      "332:     merchantAccountCode YOUR_MERCHANT_ACCOUNT",
      "333:     merchantReference TestPayment-1407325143704",
      "334:     value 1130",
      "335:     currency EUR",
      "336:     eventCode AUTHORISATION",
      "337:     success true",
      "338:     \"\"\"",
      "339:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
      "340:     if not hmac_key:",
      "341:         return True",
      "343:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
      "344:     if not hmac_signature and hmac_key:",
      "345:         return False",
      "347:     success = \"true\" if notification.get(\"success\", \"\") else \"false\"",
      "348:     if notification.get(\"success\", None) is None:",
      "349:         success = \"\"",
      "351:     payload_list = [",
      "352:         notification.get(\"pspReference\", \"\"),",
      "353:         notification.get(\"originalReference\", \"\"),",
      "354:         notification.get(\"merchantAccountCode\", \"\"),",
      "355:         notification.get(\"merchantReference\", \"\"),",
      "356:         notification.get(\"value\", \"\"),",
      "357:         notification.get(\"currency\", \"\"),",
      "358:         notification.get(\"eventCode\", \"\"),",
      "359:         success,",
      "360:     ]",
      "361:     payload = \":\".join(payload_list)",
      "363:     hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)",
      "364:     expected_merchant_sign = base64.b64encode(hm.digest())",
      "365:     return hmac_signature == expected_merchant_sign.decode(\"utf-8\")",
      "368: def validate_auth_user(headers: HttpHeaders, gateway_config: \"GatewayConfig\") -> bool:",
      "369:     username = gateway_config.connection_params[\"webhook_user\"]",
      "370:     password = gateway_config.connection_params[\"webhook_user_password\"]",
      "371:     auth_header = headers.get(\"Authorization\")",
      "372:     if not auth_header and not username:",
      "373:         return True",
      "375:     split_auth = auth_header.split(maxsplit=1)",
      "376:     prefix = \"BASIC\"",
      "378:     if len(split_auth) != 2 or split_auth[0].upper() != prefix:",
      "379:         return False",
      "381:     auth = split_auth[1]",
      "382:     try:",
      "383:         request_username, request_password = base64.b64decode(auth).split(\":\")",
      "384:         user_is_correct = request_username == username",
      "385:         if user_is_correct and check_password(request_password, password):",
      "386:             return True",
      "387:     except binascii.Error:",
      "388:         pass",
      "389:     return False",
      "392: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
      "393:     json_data = json.loads(request.body)",
      "394:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
      "395:     # object.",
      "396:     notification = json_data.get(\"notificationItems\")[0].get(",
      "397:         \"NotificationRequestItem\", {}",
      "398:     )",
      "400:     if not validate_hmac_signature(notification, gateway_config):",
      "401:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
      "402:     if not validate_auth_user(notification, gateway_config):",
      "403:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
      "405:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
      "406:     if event_handler:",
      "407:         event_handler(notification, gateway_config)",
      "408:         return HttpResponse(\"[accepted]\")",
      "409:     return HttpResponseNotFound()",
      "",
      "---------------"
    ],
    "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py": [
      "File: saleor/payment/migrations/0019_auto_20200721_1313.py -> saleor/payment/migrations/0019_auto_20200721_1313.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Generated by Django 3.0.6 on 2020-07-21 13:13",
      "3: from django.db import migrations, models",
      "6: class Migration(migrations.Migration):",
      "8:     dependencies = [",
      "9:         (\"payment\", \"0018_auto_20200720_1118\"),",
      "10:     ]",
      "12:     operations = [",
      "13:         migrations.AlterField(",
      "14:             model_name=\"payment\",",
      "15:             name=\"charge_status\",",
      "16:             field=models.CharField(",
      "17:                 choices=[",
      "18:                     (\"not-charged\", \"Not charged\"),",
      "19:                     (\"pending\", \"Pending\"),",
      "20:                     (\"partially-charged\", \"Partially charged\"),",
      "21:                     (\"fully-charged\", \"Fully charged\"),",
      "22:                     (\"partially-refunded\", \"Partially refunded\"),",
      "23:                     (\"fully-refunded\", \"Fully refunded\"),",
      "24:                     (\"refused\", \"Refused\"),",
      "25:                     (\"cancelled\", \"Cancelled\"),",
      "26:                 ],",
      "27:                 default=\"not-charged\",",
      "28:                 max_length=20,",
      "29:             ),",
      "30:         ),",
      "31:         migrations.AlterField(",
      "32:             model_name=\"transaction\",",
      "33:             name=\"kind\",",
      "34:             field=models.CharField(",
      "35:                 choices=[",
      "36:                     (\"auth\", \"Authorization\"),",
      "37:                     (\"pending\", \"Pending\"),",
      "38:                     (\"refund\", \"Refund\"),",
      "39:                     (\"refund_ongoing\", \"Refund in progress\"),",
      "40:                     (\"capture\", \"Capture\"),",
      "41:                     (\"void\", \"Void\"),",
      "42:                     (\"confirm\", \"Confirm\"),",
      "43:                     (\"cancel\", \"Cancel\"),",
      "44:                 ],",
      "45:                 max_length=25,",
      "46:             ),",
      "47:         ),",
      "48:     ]",
      "",
      "---------------"
    ],
    "saleor/payment/utils.py||saleor/payment/utils.py": [
      "File: saleor/payment/utils.py -> saleor/payment/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: def create_transaction(",
      "133:     payment: Payment,",
      "134:     kind: str,",
      "136:     action_required: bool = False,",
      "137:     gateway_response: GatewayResponse = None,",
      "138:     error_msg=None,",
      "",
      "[Removed Lines]",
      "135:     payment_information: PaymentData,",
      "",
      "[Added Lines]",
      "135:     payment_information: Optional[PaymentData],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
      "221:     #     payment.save(update_fields=[\"charge_status\", ])",
      "224:         payment.captured_amount += transaction.amount",
      "226:         # Set payment charge status to fully charged",
      "",
      "[Removed Lines]",
      "223:     if transaction_kind in {TransactionKind.CAPTURE, TransactionKind.CONFIRM}:",
      "",
      "[Added Lines]",
      "223:     if transaction_kind in {",
      "224:         TransactionKind.CAPTURE,",
      "225:         TransactionKind.CONFIRM,",
      "226:         TransactionKind.REFUND_REVERSED,",
      "227:     }:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "249:         payment.save(",
      "250:             update_fields=[\"charge_status\",]",
      "251:         )",
      "254: def fetch_customer_id(user: User, gateway: str):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:     elif transaction_kind == TransactionKind.CANCEL:",
      "257:         payment.charge_status = ChargeStatus.CANCELLED",
      "258:         payment.save(",
      "259:             update_fields=[\"charge_status\",]",
      "260:         )",
      "261:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
      "262:         if payment.charge_status in {",
      "263:             ChargeStatus.PARTIALLY_CHARGED,",
      "264:             ChargeStatus.FULLY_CHARGED,",
      "265:         }:",
      "266:             payment.captured_amount -= transaction.amount",
      "267:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
      "268:             if payment.get_charge_amount() <= 0:",
      "269:                 payment.charge_status = ChargeStatus.FULLY_CHARGED",
      "271:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "432305a857a60be3dba9566af6b4669082eb072a",
      "candidate_info": {
        "commit_hash": "432305a857a60be3dba9566af6b4669082eb072a",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/432305a857a60be3dba9566af6b4669082eb072a",
        "files": [
          ".isort.cfg",
          "saleor/checkout/base_calculations.py",
          "saleor/checkout/calculations.py",
          "saleor/checkout/utils.py",
          "saleor/core/payments.py",
          "saleor/core/prices.py",
          "saleor/core/taxes.py",
          "saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/types.py",
          "saleor/graphql/payment/mutations.py",
          "saleor/graphql/schema.graphql",
          "saleor/payment/gateways/adyen/__init__.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/interface.py",
          "saleor/payment/migrations/0017_transaction_action_required_data.py",
          "saleor/payment/models.py",
          "saleor/payment/utils.py",
          "saleor/plugins/avatax/tests/test_avatax.py",
          "saleor/plugins/base_plugin.py",
          "saleor/plugins/manager.py",
          "saleor/plugins/vatlayer/tests/test_vatlayer.py",
          "saleor/settings.py",
          "saleor/tests/fixtures.py"
        ],
        "message": "init commit for adyen payment gateway",
        "before_after_code_files": [
          ".isort.cfg||.isort.cfg",
          "saleor/checkout/base_calculations.py||saleor/checkout/base_calculations.py",
          "saleor/checkout/calculations.py||saleor/checkout/calculations.py",
          "saleor/checkout/utils.py||saleor/checkout/utils.py",
          "saleor/core/payments.py||saleor/core/payments.py",
          "saleor/core/prices.py||saleor/core/prices.py",
          "saleor/core/taxes.py||saleor/core/taxes.py",
          "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/types.py||saleor/graphql/checkout/types.py",
          "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py",
          "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/interface.py||saleor/payment/interface.py",
          "saleor/payment/migrations/0017_transaction_action_required_data.py||saleor/payment/migrations/0017_transaction_action_required_data.py",
          "saleor/payment/models.py||saleor/payment/models.py",
          "saleor/payment/utils.py||saleor/payment/utils.py",
          "saleor/plugins/avatax/tests/test_avatax.py||saleor/plugins/avatax/tests/test_avatax.py",
          "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py",
          "saleor/plugins/manager.py||saleor/plugins/manager.py",
          "saleor/plugins/vatlayer/tests/test_vatlayer.py||saleor/plugins/vatlayer/tests/test_vatlayer.py",
          "saleor/settings.py||saleor/settings.py",
          "saleor/tests/fixtures.py||saleor/tests/fixtures.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ],
          "candidate": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ]
        }
      },
      "candidate_diff": {
        ".isort.cfg||.isort.cfg": [
          "File: .isort.cfg -> .isort.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: [settings]",
          "",
          "[Removed Lines]",
          "2: known_third_party = PIL,babel,braintree,celery,dj_database_url,dj_email_url,django,django_cache_url,django_countries,django_filters,django_measurement,django_prices,django_prices_openexchangerates,django_prices_vatlayer,draftjs_sanitizer,faker,freezegun,geolite2,google_measurement_protocol,graphene,graphene_django,graphene_federation,graphql,graphql_relay,html_to_draftjs,i18naddress,jaeger_client,jwt,markdown,measurement,mptt,oauthlib,openpyxl,opentracing,petl,phonenumber_field,phonenumbers,pkg_resources,prices,promise,pytest,pythonjsonlogger,pytimeparse,pytz,razorpay,requests,sentry_sdk,storages,stripe,templated_email,tqdm,versatileimagefield,weasyprint",
          "",
          "[Added Lines]",
          "2: known_third_party = Adyen,PIL,babel,braintree,celery,dj_database_url,dj_email_url,django,django_cache_url,django_countries,django_filters,django_measurement,django_prices,django_prices_openexchangerates,django_prices_vatlayer,draftjs_sanitizer,faker,freezegun,geolite2,google_measurement_protocol,graphene,graphene_django,graphene_federation,graphql,graphql_relay,html_to_draftjs,i18naddress,jaeger_client,jwt,markdown,measurement,mptt,oauthlib,openpyxl,opentracing,petl,phonenumber_field,phonenumbers,pkg_resources,prices,promise,pytest,pythonjsonlogger,pytimeparse,pytz,razorpay,requests,sentry_sdk,storages,stripe,templated_email,tqdm,versatileimagefield,weasyprint",
          "",
          "---------------"
        ],
        "saleor/checkout/base_calculations.py||saleor/checkout/base_calculations.py": [
          "File: saleor/checkout/base_calculations.py -> saleor/checkout/base_calculations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: from prices import TaxedMoney",
          "12: from ..discount import DiscountInfo",
          "14: if TYPE_CHECKING:",
          "",
          "[Removed Lines]",
          "11: from ..core.taxes import quantize_price, zero_taxed_money",
          "",
          "[Added Lines]",
          "11: from ..core.prices import quantize_price",
          "12: from ..core.taxes import zero_taxed_money",
          "",
          "---------------"
        ],
        "saleor/checkout/calculations.py||saleor/checkout/calculations.py": [
          "File: saleor/checkout/calculations.py -> saleor/checkout/calculations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from typing import TYPE_CHECKING, Iterable, Optional",
          "4: from ..discount import DiscountInfo",
          "5: from ..plugins.manager import get_plugins_manager",
          "",
          "[Removed Lines]",
          "3: from ..core.taxes import quantize_price",
          "",
          "[Added Lines]",
          "3: from ..core.prices import quantize_price",
          "",
          "---------------"
        ],
        "saleor/checkout/utils.py||saleor/checkout/utils.py": [
          "File: saleor/checkout/utils.py -> saleor/checkout/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: from ..checkout import calculations",
          "17: from ..checkout.error_codes import CheckoutErrorCode",
          "18: from ..core.exceptions import ProductNotPublished",
          "20: from ..core.utils.promo_code import (",
          "21:     InvalidPromoCode,",
          "22:     promo_code_is_gift_card,",
          "",
          "[Removed Lines]",
          "19: from ..core.taxes import quantize_price, zero_taxed_money",
          "",
          "[Added Lines]",
          "19: from ..core.prices import quantize_price",
          "20: from ..core.taxes import zero_taxed_money",
          "",
          "---------------"
        ],
        "saleor/core/payments.py||saleor/core/payments.py": [
          "File: saleor/core/payments.py -> saleor/core/payments.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from abc import ABC, abstractmethod",
          "4: if TYPE_CHECKING:",
          "5:     # flake8: noqa",
          "7:     from ..payment.interface import (",
          "8:         PaymentData,",
          "9:         GatewayResponse,",
          "",
          "[Removed Lines]",
          "2: from typing import TYPE_CHECKING, List, Optional",
          "6:     from ..checkout.models import Checkout",
          "",
          "[Added Lines]",
          "2: from typing import TYPE_CHECKING, Iterable, List, Optional",
          "6:     from ..checkout.models import Checkout, CheckoutLine",
          "7:     from ..discount import DiscountInfo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:     @abstractmethod",
          "24:     def checkout_available_payment_gateways(",
          "26:     ) -> List[\"PaymentGateway\"]:",
          "27:         pass",
          "",
          "[Removed Lines]",
          "25:         self, checkout: \"Checkout\"",
          "",
          "[Added Lines]",
          "26:         self,",
          "27:         checkout: \"Checkout\",",
          "28:         lines: Iterable[\"CheckoutLine\"],",
          "29:         discounts: Iterable[\"DiscountInfo\"],",
          "",
          "---------------"
        ],
        "saleor/core/prices.py||saleor/core/prices.py": [
          "File: saleor/core/prices.py -> saleor/core/prices.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from decimal import Decimal",
          "2: from typing import Union",
          "4: from babel.numbers import get_currency_precision",
          "7: def quantize_price(",
          "8:     price: Union[\"TaxedMoney\", \"Money\", \"Decimal\", \"TaxedMoneyRange\"], currency: str",
          "9: ) -> Union[\"TaxedMoney\", \"Money\", \"Decimal\", \"TaxedMoneyRange\"]:",
          "10:     precision = get_currency_precision(currency)",
          "11:     number_places = Decimal(10) ** -precision",
          "12:     return price.quantize(number_places)",
          "",
          "---------------"
        ],
        "saleor/core/taxes.py||saleor/core/taxes.py": [
          "File: saleor/core/taxes.py -> saleor/core/taxes.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from dataclasses import dataclass",
          "3: from typing import Union",
          "6: from django.conf import settings",
          "7: from django.contrib.sites.models import Site",
          "8: from prices import Money, MoneyRange, TaxedMoney, TaxedMoneyRange",
          "",
          "[Removed Lines]",
          "2: from decimal import Decimal",
          "5: from babel.numbers import get_currency_precision",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:     return base",
          "65: @dataclass(frozen=True)",
          "66: class TaxType:",
          "67:     \"\"\"Dataclass for unifying tax type object that comes from tax gateway.\"\"\"",
          "",
          "[Removed Lines]",
          "57: def quantize_price(",
          "58:     price: Union[\"TaxedMoney\", \"Money\", \"Decimal\", \"TaxedMoneyRange\"], currency: str",
          "59: ) -> Union[\"TaxedMoney\", \"Money\", \"Decimal\", \"TaxedMoneyRange\"]:",
          "60:     precision = get_currency_precision(currency)",
          "61:     number_places = Decimal(10) ** -precision",
          "62:     return price.quantize(number_places)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py": [
          "File: saleor/graphql/checkout/mutations.py -> saleor/graphql/checkout/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "732:             \" before checkout is complete.\"",
          "733:         ),",
          "734:     )",
          "736:     class Arguments:",
          "737:         checkout_id = graphene.ID(description=\"Checkout ID.\", required=True)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "735:     confirmation_data = graphene.JSONString(",
          "736:         required=False,",
          "737:         description=(",
          "738:             \"Confirmation data used to process additional authorization steps.\"",
          "739:         ),",
          "740:     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "790:         payment = checkout.get_last_active_payment()",
          "792:         with transaction.atomic():",
          "793:             try:",
          "794:                 order_data = prepare_order_data(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798:         redirect_url = data.get(\"redirect_url\", \"\")",
          "799:         if redirect_url:",
          "800:             try:",
          "801:                 validate_storefront_url(redirect_url)",
          "802:             except ValidationError as error:",
          "803:                 raise ValidationError(",
          "804:                     {\"redirect_url\": error}, code=AccountErrorCode.INVALID",
          "805:                 )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "820:         if shipping_address is not None:",
          "821:             shipping_address = AddressData(**shipping_address.as_data())",
          "824:         try:",
          "832:             if not txn.is_success:",
          "833:                 raise PaymentError(txn.error)",
          "",
          "[Removed Lines]",
          "823:         payment_confirmation = payment.to_confirm",
          "825:             if payment_confirmation:",
          "826:                 txn = gateway.confirm(payment)",
          "827:             else:",
          "828:                 txn = gateway.process_payment(",
          "829:                     payment=payment, token=payment.token, store_source=store_source",
          "830:                 )",
          "",
          "[Added Lines]",
          "838:         # payment_confirmation = payment.to_confirm",
          "840:             # if payment_confirmation:",
          "841:             #     txn = gateway.confirm(payment)",
          "842:             # else:",
          "843:             txn = gateway.process_payment(",
          "844:                 payment=payment, token=payment.token, store_source=store_source",
          "845:             )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "839:         if txn.customer_id and user.is_authenticated:",
          "840:             store_customer_id(user, payment.gateway, txn.customer_id)",
          "870: class CheckoutAddPromoCode(BaseMutation):",
          "",
          "[Removed Lines]",
          "842:         redirect_url = data.get(\"redirect_url\", \"\")",
          "843:         if redirect_url:",
          "844:             try:",
          "845:                 validate_storefront_url(redirect_url)",
          "846:             except ValidationError as error:",
          "847:                 raise ValidationError(",
          "848:                     {\"redirect_url\": error}, code=AccountErrorCode.INVALID",
          "849:                 )",
          "851:         order = None",
          "852:         if not txn.action_required:",
          "853:             # create the order into the database",
          "854:             order = create_order(",
          "855:                 checkout=checkout,",
          "856:                 order_data=order_data,",
          "857:                 user=user,",
          "858:                 redirect_url=redirect_url,",
          "859:             )",
          "861:             # remove checkout after order is successfully paid",
          "862:             checkout.delete()",
          "864:             # return the success response with the newly created order data",
          "865:             return CheckoutComplete(order=order, confirmation_needed=False)",
          "867:         return CheckoutComplete(order=None, confirmation_needed=True)",
          "",
          "[Added Lines]",
          "857:         confirmation_needed = False",
          "858:         confirmation_data = {}",
          "860:         order = create_order(",
          "861:             checkout=checkout,",
          "862:             order_data=order_data,",
          "863:             user=user,",
          "864:             redirect_url=redirect_url,",
          "865:         )",
          "867:         # remove checkout after order is successfully paid",
          "868:         checkout.delete()",
          "870:         if txn.action_required:",
          "871:             # If gateway returns information that additional steps are required we need",
          "872:             # to inform the frontend and pass all required data",
          "873:             confirmation_needed = True",
          "874:             confirmation_data = txn.action_required_data",
          "876:         return CheckoutComplete(",
          "877:             order=order,",
          "878:             confirmation_needed=confirmation_needed,",
          "879:             confirmation_data=confirmation_data,",
          "880:         )",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/types.py||saleor/graphql/checkout/types.py": [
          "File: saleor/graphql/checkout/types.py -> saleor/graphql/checkout/types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:         )",
          "246:     @staticmethod",
          "250:     @staticmethod",
          "251:     def resolve_gift_cards(root: models.Checkout, _info):",
          "",
          "[Removed Lines]",
          "247:     def resolve_available_payment_gateways(root: models.Checkout, _info):",
          "248:         return get_plugins_manager().checkout_available_payment_gateways(checkout=root)",
          "",
          "[Added Lines]",
          "247:     def resolve_available_payment_gateways(root: models.Checkout, info):",
          "248:         lines = CheckoutLinesByCheckoutTokenLoader(info.context).load(root.token)",
          "249:         discounts = DiscountsByDateTimeLoader(info.context).load(",
          "250:             info.context.request_time",
          "251:         )",
          "252:         return get_plugins_manager().checkout_available_payment_gateways(",
          "253:             checkout=root, lines=lines, discounts=discounts",
          "254:         )",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py": [
          "File: saleor/graphql/payment/mutations.py -> saleor/graphql/payment/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import graphene",
          "2: from django.conf import settings",
          "3: from django.core.exceptions import ValidationError",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from typing import Optional",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:         required=True,",
          "29:     )",
          "30:     token = graphene.String(",
          "32:         description=(",
          "33:             \"Client-side generated payment token, representing customer's \"",
          "34:             \"billing data in a secure manner.\"",
          "35:         ),",
          "36:     )",
          "37:     amount = Decimal(",
          "38:         required=False,",
          "39:         description=(",
          "",
          "[Removed Lines]",
          "31:         required=True,",
          "",
          "[Added Lines]",
          "33:         required=False,",
          "39:     payment_data = graphene.JSONString(",
          "40:         required=False,",
          "41:         description=(\"Client-side generated data required to finalize the payment.\"),",
          "42:     )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:                 }",
          "119:             )",
          "121:     @classmethod",
          "122:     def perform_mutation(cls, _root, info, checkout_id, **data):",
          "123:         checkout_id = from_global_id_strict_type(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     @classmethod",
          "128:     def validate_token_or_data(cls, input_data: dict):",
          "129:         token = input_data.get(\"token\")",
          "130:         payment_data = input_data.get(\"payment_data\")",
          "131:         if not token and not payment_data:",
          "132:             raise ValidationError(",
          "133:                 {",
          "134:                     \"token\": ValidationError(",
          "135:                         \"paymentData or token is required.\",",
          "136:                         code=PaymentErrorCode.REQUIRED.value,",
          "137:                     ),",
          "138:                     \"payment_data\": ValidationError(",
          "139:                         \"paymentData or token is required.\",",
          "140:                         code=PaymentErrorCode.REQUIRED.value,",
          "141:                     ),",
          "142:                 }",
          "143:             )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:         gateway = data[\"gateway\"]",
          "133:         cls.validate_gateway(gateway, checkout.currency)",
          "135:         checkout_total = cls.calculate_total(info, checkout)",
          "136:         amount = data.get(\"amount\", checkout_total.gross.amount)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:         cls.validate_token_or_data(data)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:         )",
          "140:         clean_billing_address(checkout, PaymentErrorCode)",
          "141:         cls.clean_payment_amount(info, checkout_total, amount)",
          "144:         cancel_active_payments(checkout)",
          "146:         payment = create_payment(",
          "147:             gateway=gateway,",
          "149:             total=amount,",
          "150:             currency=settings.DEFAULT_CURRENCY,",
          "151:             email=checkout.email,",
          "152:             extra_data=extra_data,",
          "153:             customer_ip_address=get_client_ip(info.context),",
          "154:             checkout=checkout,",
          "155:         )",
          "",
          "[Removed Lines]",
          "142:         extra_data = {\"customer_user_agent\": info.context.META.get(\"HTTP_USER_AGENT\")}",
          "148:             payment_token=data[\"token\"],",
          "",
          "[Added Lines]",
          "167:         extra_data = {",
          "168:             \"customer_user_agent\": info.context.META.get(\"HTTP_USER_AGENT\"),",
          "169:         }",
          "171:         # TODO Define if we want to store it in extra data as this field is available",
          "172:         # over API",
          "173:         payment_data = data.get(\"payment_data\")",
          "174:         if payment_data:",
          "175:             extra_data[\"payment_data\"] = payment_data",
          "181:             payment_token=data.get(\"token\", \"\"),",
          "186:             # FIXME this is not a customer IP address. It is a client storefront ip",
          "",
          "---------------"
        ],
        "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
          "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
          "--- Hunk 1 ---",
          "[Context before]",
          "897:   errors: [Error!]! @deprecated(reason: \"Use typed errors with error codes. This field will be removed after 2020-07-31.\")",
          "898:   order: Order",
          "899:   confirmationNeeded: Boolean!",
          "900:   checkoutErrors: [CheckoutError!]!",
          "901: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "900:   confirmationData: JSONString",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3434: input PaymentInput {",
          "3435:   gateway: String!",
          "3437:   amount: Decimal",
          "3438:   billingAddress: AddressInput",
          "3439: }",
          "",
          "[Removed Lines]",
          "3436:   token: String!",
          "",
          "[Added Lines]",
          "3437:   token: String",
          "3438:   paymentData: JSONString",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import json",
          "2: from typing import Iterable, Optional",
          "4: import Adyen",
          "5: from django.conf import settings",
          "6: from django_countries.fields import Country",
          "7: from promise import Promise",
          "9: from ....checkout import calculations",
          "10: from ....checkout.models import Checkout, CheckoutLine",
          "11: from ....core.prices import quantize_price",
          "12: from ....discount import DiscountInfo",
          "13: from ....plugins.base_plugin import BasePlugin, ConfigurationTypeField",
          "14: from ... import PaymentError, TransactionKind",
          "15: from ...interface import GatewayConfig, GatewayResponse, PaymentData, PaymentGateway",
          "16: from ..utils import get_supported_currencies",
          "18: GATEWAY_NAME = \"Adyen\"",
          "21: def require_active_plugin(fn):",
          "22:     def wrapped(self, *args, **kwargs):",
          "23:         previous = kwargs.get(\"previous_value\", None)",
          "24:         if not self.active:",
          "25:             return previous",
          "26:         return fn(self, *args, **kwargs)",
          "28:     return wrapped",
          "31: class AdyenGatewayPlugin(BasePlugin):",
          "33:     PLUGIN_ID = \"mirumee.payments.adyen\"",
          "34:     PLUGIN_NAME = GATEWAY_NAME",
          "35:     DEFAULT_CONFIGURATION = [",
          "36:         {\"name\": \"Merchant Account\", \"value\": None},",
          "37:         {\"name\": \"API key\", \"value\": None},",
          "38:         {\"name\": \"Supported currencies\", \"value\": \"\"},",
          "39:         {\"name\": \"Return Url\", \"value\": \"\"},",
          "40:         {\"name\": \"Origin Key\", \"value\": \"\"},",
          "41:         {\"name\": \"Origin Url\", \"value\": \"\"},",
          "42:     ]",
          "44:     CONFIG_STRUCTURE = {",
          "45:         \"API key\": {",
          "46:             \"type\": ConfigurationTypeField.SECRET,",
          "47:             \"help_text\": (",
          "48:                 \"To submit payments to Adyen, you'll be making API requests that are \"",
          "49:                 \"authenticated with an API key. You can generate API keys on your \"",
          "50:                 \"Customer Area.\"",
          "51:             ),",
          "52:             \"label\": \"API key\",",
          "53:         },",
          "54:         \"Merchant Account\": {",
          "55:             \"type\": ConfigurationTypeField.STRING,",
          "56:             \"help_text\": \"Yout merchant account name.\",",
          "57:             \"label\": \"Merchant Account\",",
          "58:         },",
          "59:         \"Supported currencies\": {",
          "60:             \"type\": ConfigurationTypeField.STRING,",
          "61:             \"help_text\": \"Determines currencies supported by gateway.\"",
          "62:             \" Please enter currency codes separated by a comma.\",",
          "63:             \"label\": \"Supported currencies\",",
          "64:         },",
          "65:         \"Return Url\": {",
          "66:             \"type\": ConfigurationTypeField.STRING,",
          "67:             \"help_text\": \"\",",
          "68:             \"label\": \"Return Url\",",
          "69:         },",
          "70:         \"Origin Key\": {",
          "71:             \"type\": ConfigurationTypeField.STRING,",
          "72:             \"help_text\": \"\",",
          "73:             \"label\": \"Origin Key\",",
          "74:         },",
          "75:         \"Origin Url\": {",
          "76:             \"type\": ConfigurationTypeField.STRING,",
          "77:             \"help_text\": \"\",",
          "78:             \"label\": \"Origin Url\",",
          "79:         },",
          "80:     }",
          "82:     def __init__(self, *args, **kwargs):",
          "83:         super().__init__(*args, **kwargs)",
          "84:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
          "85:         self.config = GatewayConfig(",
          "86:             gateway_name=GATEWAY_NAME,",
          "87:             auto_capture=True,  # FIXME check this",
          "88:             supported_currencies=configuration[\"Supported currencies\"],",
          "89:             connection_params={",
          "90:                 \"api_key\": configuration[\"API key\"],",
          "91:                 \"merchant_account\": configuration[\"Merchant Account\"],",
          "92:                 \"return_url\": configuration[\"Return Url\"],",
          "93:                 \"origin_key\": configuration[\"Origin Key\"],",
          "94:             },",
          "95:         )",
          "96:         api_key = self.config.connection_params[\"api_key\"]",
          "97:         self.adyen = Adyen.Adyen(xapikey=api_key)",
          "99:     def _get_gateway_config(self) -> GatewayConfig:",
          "100:         return self.config",
          "102:     @require_active_plugin",
          "103:     def get_payment_gateway_for_checkout(",
          "104:         self,",
          "105:         checkout: \"Checkout\",",
          "106:         lines: Iterable[\"CheckoutLine\"],",
          "107:         discounts: Iterable[\"DiscountInfo\"],",
          "108:         previous_value,",
          "109:     ) -> Optional[\"PaymentGateway\"]:",
          "110:         def checkout_total(data):",
          "111:             lines, discounts = data",
          "112:             return calculations.checkout_total(",
          "113:                 checkout=checkout, lines=lines, discounts=discounts",
          "114:             )",
          "116:         total = Promise.all([lines, discounts]).then(checkout_total)",
          "118:         config = self._get_gateway_config()",
          "119:         merchant_account = config.connection_params[\"merchant_account\"]",
          "120:         address = checkout.billing_address or checkout.shipping_address",
          "122:         # FIXME check how it works if we have None here",
          "123:         country = address.country if address else None",
          "124:         if country:",
          "125:             country_code = country.code",
          "126:         else:",
          "127:             country_code = Country(settings.DEFAULT_COUNTRY).code",
          "128:         channel = checkout.get_value_from_metadata(\"channel\", \"web\")",
          "129:         checkout.get_total_gift_cards_balance()",
          "130:         request = {",
          "131:             \"merchantAccount\": merchant_account,",
          "132:             \"countryCode\": country_code,",
          "133:             # \"shopperLocale\":",
          "134:             # \"amount\": {",
          "135:             #     \"value\": float(",
          "136:             #         quantize_price(total.get().gross.amount, checkout.currency)",
          "137:             #     ),",
          "138:             #     \"currency\": checkout.currency,",
          "139:             # },",
          "140:             \"channel\": channel,",
          "141:         }",
          "142:         response = self.adyen.checkout.payment_methods(request)",
          "143:         # self.adyen.checkout.origin_keys()",
          "144:         print(response.message)",
          "145:         return PaymentGateway(",
          "146:             id=self.PLUGIN_ID,",
          "147:             name=self.PLUGIN_NAME,",
          "148:             config=[",
          "149:                 {",
          "150:                     \"field\": \"origin_key\",",
          "151:                     \"value\": config.connection_params[\"origin_key\"],",
          "152:                 },",
          "153:                 {",
          "154:                     \"field\": \"config\",",
          "155:                     \"value\": json.dumps(response.message[\"paymentMethods\"]),",
          "156:                 },",
          "157:             ],",
          "158:             currencies=self.get_supported_currencies([]),",
          "159:         )",
          "161:     @require_active_plugin",
          "162:     def process_payment(",
          "163:         self, payment_information: \"PaymentData\", previous_value",
          "164:     ) -> \"GatewayResponse\":",
          "165:         extra_data = json.loads(payment_information.extra_data)  # try catch here",
          "166:         print(extra_data)",
          "167:         payment_data = extra_data.get(\"payment_data\")",
          "168:         # this is additional parameter which comes from",
          "169:         if not payment_data.pop(\"is_valid\", True):",
          "170:             raise PaymentError(\"Payment data are not valid\")",
          "172:         extra_request_params = {}",
          "173:         if \"browserInfo\" in payment_data:",
          "174:             extra_request_params[\"browserInfo\"] = payment_data[\"browserInfo\"]",
          "175:         if \"billingAddress\" in payment_data:",
          "176:             extra_request_params[\"billingAddress\"] = payment_data[\"billingAddress\"]",
          "177:         if \"shopperIP\" in payment_data:",
          "178:             extra_request_params[\"shopperIP\"] = payment_data[\"shopperIP\"]",
          "179:         if (",
          "180:             \"browserInfo\" in extra_request_params",
          "181:             or \"billingAddress\" in extra_request_params",
          "182:         ):",
          "183:             # Replace this assigment. Add note that customer_ip_address has incorrect name",
          "184:             # Add to dashboard config the flow to combine channel with url like:",
          "185:             # web1:https://shop.com, web2:https://shop1.com",
          "186:             extra_request_params[\"origin\"] = (",
          "187:                 \"https://\" + payment_information.customer_ip_address",
          "188:             )",
          "190:         result = self.adyen.checkout.payments(",
          "191:             {",
          "192:                 \"amount\": {",
          "193:                     \"value\": float(",
          "194:                         quantize_price(",
          "195:                             payment_information.amount, payment_information.currency",
          "196:                         )",
          "197:                     ),",
          "198:                     \"currency\": payment_information.currency,",
          "199:                 },",
          "200:                 \"reference\": payment_information.payment_id,",
          "201:                 \"paymentMethod\": payment_data[\"paymentMethod\"],",
          "202:                 \"returnUrl\": self.config.connection_params[\"return_url\"],",
          "203:                 \"merchantAccount\": self.config.connection_params[\"merchant_account\"],",
          "205:             }",
          "206:         )",
          "207:         FAILED_STATUSES = [\"refused\", \"error\", \"cancelled\"]",
          "208:         # Check if further action is needed",
          "209:         # if 'action' in result.message:",
          "210:         # Pass the action object to your front end",
          "211:         # result.message['action']",
          "212:         # else:",
          "213:         # No further action needed, pass the resultCode to your front end",
          "214:         # result.message['resultCode']",
          "215:         # FIXME Assign token",
          "216:         is_success = result.message[\"resultCode\"].strip().lower() not in FAILED_STATUSES",
          "217:         return GatewayResponse(",
          "218:             is_success=is_success,",
          "219:             action_required=\"action\" in result.message,",
          "220:             kind=TransactionKind.CAPTURE,",
          "221:             amount=payment_information.amount,",
          "222:             currency=payment_information.currency,",
          "223:             transaction_id=payment_data.get(\"pspReference\", \"\"),",
          "224:             error=None,  # FIXME",
          "225:             raw_response=result.message,",
          "226:         )",
          "228:     @require_active_plugin",
          "229:     def get_payment_config(self, previous_value):",
          "230:         return []",
          "232:     @require_active_plugin",
          "233:     def get_supported_currencies(self, previous_value):",
          "234:         config = self._get_gateway_config()",
          "235:         return get_supported_currencies(config, GATEWAY_NAME)",
          "",
          "---------------"
        ],
        "saleor/payment/interface.py||saleor/payment/interface.py": [
          "File: saleor/payment/interface.py -> saleor/payment/interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from dataclasses import dataclass",
          "2: from decimal import Decimal",
          "6: @dataclass",
          "",
          "[Removed Lines]",
          "3: from typing import Any, Dict, List, Optional",
          "",
          "[Added Lines]",
          "3: from typing import Any, Dict, List, Optional, Union",
          "5: JSONValue = Union[str, int, float, bool, None, Dict[str, Any], List[Any]]",
          "6: JSONType = Union[Dict[str, JSONValue], List[JSONValue]]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     customer_id: Optional[str] = None",
          "33:     card_info: Optional[CreditCardInfo] = None",
          "34:     raw_response: Optional[Dict[str, str]] = None",
          "37: @dataclass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     action_required_data: Optional[JSONType] = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     currency: str",
          "62:     billing: Optional[AddressData]",
          "63:     shipping: Optional[AddressData]",
          "64:     order_id: Optional[int]",
          "65:     customer_ip_address: Optional[str]",
          "66:     customer_email: str",
          "67:     token: Optional[str] = None",
          "68:     customer_id: Optional[str] = None",
          "69:     reuse_source: bool = False",
          "72: @dataclass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     payment_id: str  # GraphQL id",
          "75:     extra_data: str = None",
          "",
          "---------------"
        ],
        "saleor/payment/migrations/0017_transaction_action_required_data.py||saleor/payment/migrations/0017_transaction_action_required_data.py": [
          "File: saleor/payment/migrations/0017_transaction_action_required_data.py -> saleor/payment/migrations/0017_transaction_action_required_data.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Generated by Django 3.0.6 on 2020-07-17 09:37",
          "3: import django.contrib.postgres.fields.jsonb",
          "4: import django.core.serializers.json",
          "5: from django.db import migrations",
          "8: class Migration(migrations.Migration):",
          "10:     dependencies = [",
          "11:         (\"payment\", \"0016_auto_20200423_0314\"),",
          "12:     ]",
          "14:     operations = [",
          "15:         migrations.AddField(",
          "16:             model_name=\"transaction\",",
          "17:             name=\"action_required_data\",",
          "18:             field=django.contrib.postgres.fields.jsonb.JSONField(",
          "19:                 blank=True,",
          "20:                 default=dict,",
          "21:                 encoder=django.core.serializers.json.DjangoJSONEncoder,",
          "22:             ),",
          "23:         ),",
          "24:     ]",
          "",
          "---------------"
        ],
        "saleor/payment/models.py||saleor/payment/models.py": [
          "File: saleor/payment/models.py -> saleor/payment/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:     kind = models.CharField(max_length=10, choices=TransactionKind.CHOICES)",
          "196:     is_success = models.BooleanField(default=False)",
          "197:     action_required = models.BooleanField(default=False)",
          "198:     currency = models.CharField(max_length=settings.DEFAULT_CURRENCY_CODE_LENGTH)",
          "199:     amount = models.DecimalField(",
          "200:         max_digits=settings.DEFAULT_MAX_DIGITS,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:     action_required_data = JSONField(",
          "199:         blank=True, default=dict, encoder=DjangoJSONEncoder",
          "200:     )",
          "",
          "---------------"
        ],
        "saleor/payment/utils.py||saleor/payment/utils.py": [
          "File: saleor/payment/utils.py -> saleor/payment/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import json",
          "2: import logging",
          "3: from decimal import Decimal",
          "6: from django.conf import settings",
          "7: from django.core.serializers.json import DjangoJSONEncoder",
          "8: from django.db import transaction",
          "",
          "[Removed Lines]",
          "4: from typing import Dict",
          "",
          "[Added Lines]",
          "4: from typing import Dict, Optional",
          "6: import graphene",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     shipping_address = AddressData(**shipping.as_data()) if shipping else None",
          "49:     order_id = payment.order.pk if payment.order else None",
          "51:     return PaymentData(",
          "52:         token=payment_token,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:         billing=billing_address,",
          "56:         shipping=shipping_address,",
          "57:         order_id=order_id,",
          "58:         customer_ip_address=payment.customer_ip_address,",
          "59:         customer_id=customer_id,",
          "60:         customer_email=payment.billing_email,",
          "61:         reuse_source=store_source,",
          "62:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:         payment_id=payment_id,",
          "65:         extra_data=payment.extra_data,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:     currency: str,",
          "69:     email: str,",
          "70:     customer_ip_address: str = \"\",",
          "72:     extra_data: Dict = None,",
          "73:     checkout: Checkout = None,",
          "74:     order: Order = None,",
          "",
          "[Removed Lines]",
          "71:     payment_token: str = \"\",",
          "",
          "[Added Lines]",
          "75:     payment_token: Optional[str] = \"\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "85:     data = {",
          "86:         \"is_active\": True,",
          "87:         \"customer_ip_address\": customer_ip_address,",
          "89:         \"token\": payment_token,",
          "90:     }",
          "",
          "[Removed Lines]",
          "88:         \"extra_data\": extra_data,",
          "",
          "[Added Lines]",
          "92:         \"extra_data\": json.dumps(extra_data),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "158:         error=gateway_response.error,",
          "159:         customer_id=gateway_response.customer_id,",
          "160:         gateway_response=gateway_response.raw_response or {},",
          "161:     )",
          "162:     return txn",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:         action_required_data=gateway_response.action_required_data or {},",
          "",
          "---------------"
        ],
        "saleor/plugins/avatax/tests/test_avatax.py||saleor/plugins/avatax/tests/test_avatax.py": [
          "File: saleor/plugins/avatax/tests/test_avatax.py -> saleor/plugins/avatax/tests/test_avatax.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from prices import Money, TaxedMoney",
          "7: from ....checkout.utils import add_variant_to_checkout",
          "9: from ...manager import get_plugins_manager",
          "10: from ...models import PluginConfiguration",
          "11: from .. import (",
          "",
          "[Removed Lines]",
          "8: from ....core.taxes import TaxError, quantize_price",
          "",
          "[Added Lines]",
          "8: from ....core.prices import quantize_price",
          "9: from ....core.taxes import TaxError",
          "",
          "---------------"
        ],
        "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py": [
          "File: saleor/plugins/base_plugin.py -> saleor/plugins/base_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from copy import copy",
          "2: from decimal import Decimal",
          "5: from django.core.handlers.wsgi import WSGIRequest",
          "6: from django.http import HttpResponse",
          "",
          "[Removed Lines]",
          "3: from typing import TYPE_CHECKING, Any, List, Optional, Union",
          "",
          "[Added Lines]",
          "3: from typing import TYPE_CHECKING, Any, Iterable, List, Optional, Union",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413:         )",
          "415:     def get_payment_gateway_for_checkout(",
          "417:     ) -> Optional[\"PaymentGateway\"]:",
          "418:         return self.get_payment_gateway(checkout.currency, previous_value)",
          "",
          "[Removed Lines]",
          "416:         self, checkout: \"Checkout\", previous_value",
          "",
          "[Added Lines]",
          "416:         self,",
          "417:         checkout: \"Checkout\",",
          "418:         lines: Iterable[\"CheckoutLine\"],",
          "419:         discounts: Iterable[\"DiscountInfo\"],",
          "420:         previous_value,",
          "",
          "---------------"
        ],
        "saleor/plugins/manager.py||saleor/plugins/manager.py": [
          "File: saleor/plugins/manager.py -> saleor/plugins/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: from ..checkout import base_calculations",
          "13: from ..core.payments import PaymentInterface",
          "15: from ..discount import DiscountInfo",
          "16: from .models import PluginConfiguration",
          "",
          "[Removed Lines]",
          "14: from ..core.taxes import TaxType, quantize_price, zero_taxed_money",
          "",
          "[Added Lines]",
          "14: from ..core.prices import quantize_price",
          "15: from ..core.taxes import TaxType, zero_taxed_money",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "366:         return gateways",
          "368:     def checkout_available_payment_gateways(",
          "370:     ) -> List[\"PaymentGateway\"]:",
          "371:         payment_plugins = self.list_payment_plugin(active_only=True)",
          "372:         gateways = []",
          "373:         for plugin in payment_plugins.values():",
          "374:             gateway = plugin.get_payment_gateway_for_checkout(",
          "376:             )",
          "377:             if gateway:",
          "378:                 gateways.append(gateway)",
          "",
          "[Removed Lines]",
          "369:         self, checkout: \"Checkout\"",
          "375:                 checkout, previous_value=None",
          "",
          "[Added Lines]",
          "370:         self,",
          "371:         checkout: \"Checkout\",",
          "372:         lines: Iterable[\"CheckoutLine\"],",
          "373:         discounts: Iterable[DiscountInfo],",
          "379:                 checkout, lines, discounts, previous_value=None",
          "",
          "---------------"
        ],
        "saleor/plugins/vatlayer/tests/test_vatlayer.py||saleor/plugins/vatlayer/tests/test_vatlayer.py": [
          "File: saleor/plugins/vatlayer/tests/test_vatlayer.py -> saleor/plugins/vatlayer/tests/test_vatlayer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from ....checkout import calculations",
          "11: from ....checkout.utils import add_variant_to_checkout",
          "13: from ...manager import get_plugins_manager",
          "14: from ...models import PluginConfiguration",
          "15: from ...vatlayer import (",
          "",
          "[Removed Lines]",
          "12: from ....core.taxes import quantize_price, zero_taxed_money",
          "",
          "[Added Lines]",
          "12: from ....core.prices import quantize_price",
          "13: from ....core.taxes import zero_taxed_money",
          "",
          "---------------"
        ],
        "saleor/settings.py||saleor/settings.py": [
          "File: saleor/settings.py -> saleor/settings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "515:     \"saleor.payment.gateways.stripe.plugin.StripeGatewayPlugin\",",
          "516:     \"saleor.payment.gateways.braintree.plugin.BraintreeGatewayPlugin\",",
          "517:     \"saleor.payment.gateways.razorpay.plugin.RazorpayGatewayPlugin\",",
          "518:     \"saleor.plugins.invoicing.plugin.InvoicingPlugin\",",
          "519: ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "518:     \"saleor.payment.gateways.adyen.plugin.AdyenGatewayPlugin\",",
          "",
          "---------------"
        ],
        "saleor/tests/fixtures.py||saleor/tests/fixtures.py": [
          "File: saleor/tests/fixtures.py -> saleor/tests/fixtures.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from typing import List, Optional",
          "8: from unittest.mock import MagicMock, Mock",
          "10: import pytest",
          "11: import pytz",
          "12: from django.conf import settings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import graphene",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1571: @pytest.fixture",
          "1573:     return PaymentData(",
          "1574:         amount=10,",
          "1575:         currency=\"USD\",",
          "1576:         billing=None,",
          "1577:         shipping=None,",
          "1578:         order_id=None,",
          "",
          "[Removed Lines]",
          "1572: def dummy_payment_data():",
          "",
          "[Added Lines]",
          "1573: def dummy_payment_data(payment_dummy):",
          "1577:         payment_id=graphene.Node.to_global_id(\"Payment\", payment_dummy.pk),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b55d05ddd8559ca5ae09ab37de69f45a9d23058",
      "candidate_info": {
        "commit_hash": "3b55d05ddd8559ca5ae09ab37de69f45a9d23058",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/3b55d05ddd8559ca5ae09ab37de69f45a9d23058",
        "files": [
          "CHANGELOG.md",
          "saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/tests/benchmark/test_checkout_mutations.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_billing_address_update.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_complete.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_create.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_customer_attach.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_email_update.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_language_code_update.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_line_delete.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_lines_add.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_lines_update.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_promo_codes.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_address_update.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_method_update.py",
          "saleor/graphql/checkout/tests/deprecated/test_customer_detach_mutation.py",
          "saleor/graphql/checkout/tests/test_checkout.py",
          "saleor/graphql/checkout/tests/test_checkout_complete.py",
          "saleor/graphql/checkout/tests/test_checkout_digital.py",
          "saleor/graphql/checkout/tests/test_checkout_language_code_update.py",
          "saleor/graphql/checkout/tests/test_checkout_lines.py",
          "saleor/graphql/checkout/tests/test_checkout_promo_codes.py",
          "saleor/graphql/core/validators.py",
          "saleor/graphql/payment/mutations.py",
          "saleor/graphql/payment/tests/deprecated/__init__.py",
          "saleor/graphql/payment/tests/deprecated/test_checkout_payment_create.py",
          "saleor/graphql/payment/tests/test_payment.py",
          "saleor/graphql/schema.graphql"
        ],
        "message": "Unify checkout identifier in checkout mutations and queries (#7511)\n\n* Add token and deprecate checkoutId argument in CheckoutAddPromoCode mutation\n\n* Add token argument and deprecate checkoutId argument in CheckoutBillingAddressUpdate mutation\n\n* Add token argument and deprecate checkoutId argument in CheckoutShippingMethodUpdate mutation\n\n* Add token argument and deprecate checkoutId argument in CheckoutShippingAddressUpdate mutation\n\n* Add token argument and deprecate checkoutId argument in CHECKOUT_CUSTOMER_ATTACH_MUTATION mutation\n\n* Add token argument and deprecate checkoutId argument in CheckoutCustomerDetach mutation\n\n* Add token argument and deprecate checkoutId argument in CheckoutEmailUpdate mutation\n\n* Add token argument and deprecate checkoutId argument in CheckoutLineDelete mutation\n\n* Add token argument and deprecate checkoutId argument in CheckoutLinesAdd and CheckoutLinesUpdate mutations\n\n* Add token argument and deprecate checkoutId argument in CheckoutRemovePromoCode mutation\n\n* Add token argument and deprecate checkoutId argument in CheckoutPaymentCreate mutation\n\n* Add token argument and deprecate checkoutId argument in CheckoutLanguageCodeUpdate mutation\n\n* Add token argument and deprecate checkoutId argument in CheckoutComplete mutation\n\n* Use token in checkout benchmark mutations tests\n\n* Update changelog",
        "before_after_code_files": [
          "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/tests/benchmark/test_checkout_mutations.py||saleor/graphql/checkout/tests/benchmark/test_checkout_mutations.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_billing_address_update.py||saleor/graphql/checkout/tests/deprecated/test_checkout_billing_address_update.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_complete.py||saleor/graphql/checkout/tests/deprecated/test_checkout_complete.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_customer_attach.py||saleor/graphql/checkout/tests/deprecated/test_checkout_customer_attach.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_email_update.py||saleor/graphql/checkout/tests/deprecated/test_checkout_email_update.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_language_code_update.py||saleor/graphql/checkout/tests/deprecated/test_checkout_language_code_update.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_line_delete.py||saleor/graphql/checkout/tests/deprecated/test_checkout_line_delete.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_lines_add.py||saleor/graphql/checkout/tests/deprecated/test_checkout_lines_add.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_lines_update.py||saleor/graphql/checkout/tests/deprecated/test_checkout_lines_update.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_promo_codes.py||saleor/graphql/checkout/tests/deprecated/test_checkout_promo_codes.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_address_update.py||saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_address_update.py",
          "saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_method_update.py||saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_method_update.py",
          "saleor/graphql/checkout/tests/deprecated/test_customer_detach_mutation.py||saleor/graphql/checkout/tests/deprecated/test_customer_detach_mutation.py",
          "saleor/graphql/checkout/tests/test_checkout.py||saleor/graphql/checkout/tests/test_checkout.py",
          "saleor/graphql/checkout/tests/test_checkout_complete.py||saleor/graphql/checkout/tests/test_checkout_complete.py",
          "saleor/graphql/checkout/tests/test_checkout_digital.py||saleor/graphql/checkout/tests/test_checkout_digital.py",
          "saleor/graphql/checkout/tests/test_checkout_language_code_update.py||saleor/graphql/checkout/tests/test_checkout_language_code_update.py",
          "saleor/graphql/checkout/tests/test_checkout_lines.py||saleor/graphql/checkout/tests/test_checkout_lines.py",
          "saleor/graphql/checkout/tests/test_checkout_promo_codes.py||saleor/graphql/checkout/tests/test_checkout_promo_codes.py",
          "saleor/graphql/core/validators.py||saleor/graphql/core/validators.py",
          "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py",
          "saleor/graphql/payment/tests/deprecated/test_checkout_payment_create.py||saleor/graphql/payment/tests/deprecated/test_checkout_payment_create.py",
          "saleor/graphql/payment/tests/test_payment.py||saleor/graphql/payment/tests/test_payment.py",
          "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql"
          ],
          "candidate": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql"
          ]
        }
      },
      "candidate_diff": {
        "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py": [
          "File: saleor/graphql/checkout/mutations.py -> saleor/graphql/checkout/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import datetime",
          "2: from typing import TYPE_CHECKING, Iterable, List, Optional, Tuple",
          "4: import graphene",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import uuid",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: from ..channel.utils import clean_channel",
          "43: from ..core.enums import LanguageCodeEnum",
          "44: from ..core.mutations import BaseMutation, ModelMutation",
          "45: from ..core.types.common import CheckoutError",
          "47: from ..order.types import Order",
          "48: from ..product.types import ProductVariant",
          "49: from ..shipping.types import ShippingMethod",
          "",
          "[Removed Lines]",
          "46: from ..core.validators import validate_variants_available_in_channel",
          "",
          "[Added Lines]",
          "46: from ..core.scalars import UUID",
          "48: from ..core.validators import (",
          "49:     validate_one_of_args_is_in_mutation,",
          "50:     validate_variants_available_in_channel,",
          "51: )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:         )",
          "199: class CheckoutLineInput(graphene.InputObjectType):",
          "200:     quantity = graphene.Int(required=True, description=\"The number of items purchased.\")",
          "201:     variant_id = graphene.ID(required=True, description=\"ID of the product variant.\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: def get_checkout_by_token(token: uuid.UUID, prefetch_lookups: Iterable[str] = []):",
          "205:     try:",
          "206:         checkout = models.Checkout.objects.prefetch_related(*prefetch_lookups).get(",
          "207:             token=token",
          "208:         )",
          "209:     except ObjectDoesNotExist:",
          "210:         raise ValidationError(",
          "211:             {",
          "212:                 \"token\": ValidationError(",
          "213:                     f\"Couldn't resolve to a node: {token}.\",",
          "214:                     code=CheckoutErrorCode.NOT_FOUND.value,",
          "215:                 )",
          "216:             }",
          "217:         )",
          "218:     return checkout",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "393:     checkout = graphene.Field(Checkout, description=\"An updated checkout.\")",
          "395:     class Arguments:",
          "397:         lines = graphene.List(",
          "398:             CheckoutLineInput,",
          "399:             required=True,",
          "",
          "[Removed Lines]",
          "396:         checkout_id = graphene.ID(description=\"The ID of the checkout.\", required=True)",
          "",
          "[Added Lines]",
          "418:         checkout_id = graphene.ID(",
          "419:             description=(",
          "420:                 \"The ID of the checkout.\"",
          "421:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "422:             ),",
          "423:             required=False,",
          "424:         )",
          "425:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "450:         )",
          "452:     @classmethod",
          "456:         )",
          "457:         discounts = info.context.discounts",
          "458:         manager = info.context.plugins",
          "",
          "[Removed Lines]",
          "453:     def perform_mutation(cls, _root, info, checkout_id, lines, replace=False):",
          "454:         checkout = cls.get_node_or_error(",
          "455:             info, checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "",
          "[Added Lines]",
          "482:     def perform_mutation(",
          "483:         cls, _root, info, lines, checkout_id=None, token=None, replace=False",
          "484:     ):",
          "485:         # DEPRECATED",
          "486:         validate_one_of_args_is_in_mutation(",
          "487:             CheckoutErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "490:         if token:",
          "491:             checkout = get_checkout_by_token(token)",
          "492:         # DEPRECATED",
          "493:         else:",
          "494:             checkout = cls.get_node_or_error(",
          "495:                 info, checkout_id or token, only_type=Checkout, field=\"checkout_id\"",
          "496:             )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "496:         )",
          "498:     @classmethod",
          "503: class CheckoutLineDelete(BaseMutation):",
          "504:     checkout = graphene.Field(Checkout, description=\"An updated checkout.\")",
          "506:     class Arguments:",
          "508:         line_id = graphene.ID(description=\"ID of the checkout line to delete.\")",
          "510:     class Meta:",
          "",
          "[Removed Lines]",
          "499:     def perform_mutation(cls, root, info, checkout_id, lines):",
          "500:         return super().perform_mutation(root, info, checkout_id, lines, replace=True)",
          "507:         checkout_id = graphene.ID(description=\"The ID of the checkout.\", required=True)",
          "",
          "[Added Lines]",
          "540:     def perform_mutation(cls, root, info, lines, checkout_id=None, token=None):",
          "541:         return super().perform_mutation(",
          "542:             root, info, lines, checkout_id, token, replace=True",
          "543:         )",
          "550:         checkout_id = graphene.ID(",
          "551:             description=(",
          "552:                 \"The ID of the checkout.\"",
          "553:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "554:             ),",
          "555:             required=False,",
          "556:         )",
          "557:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "513:         error_type_field = \"checkout_errors\"",
          "515:     @classmethod",
          "519:         )",
          "520:         line = cls.get_node_or_error(",
          "521:             info, line_id, only_type=CheckoutLine, field=\"line_id\"",
          "522:         )",
          "",
          "[Removed Lines]",
          "516:     def perform_mutation(cls, _root, info, checkout_id, line_id):",
          "517:         checkout = cls.get_node_or_error(",
          "518:             info, checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "",
          "[Added Lines]",
          "566:     def perform_mutation(cls, _root, info, line_id, checkout_id=None, token=None):",
          "567:         # DEPRECATED",
          "568:         validate_one_of_args_is_in_mutation(",
          "569:             CheckoutErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "572:         if token:",
          "573:             checkout = get_checkout_by_token(token)",
          "574:         # DEPRECATED",
          "575:         else:",
          "576:             checkout = cls.get_node_or_error(",
          "577:                 info, checkout_id or token, only_type=Checkout, field=\"checkout_id\"",
          "578:             )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "541:     checkout = graphene.Field(Checkout, description=\"An updated checkout.\")",
          "543:     class Arguments:",
          "546:     class Meta:",
          "547:         description = \"Sets the customer as the owner of the checkout.\"",
          "",
          "[Removed Lines]",
          "544:         checkout_id = graphene.ID(required=True, description=\"ID of the checkout.\")",
          "",
          "[Added Lines]",
          "604:         checkout_id = graphene.ID(",
          "605:             required=False,",
          "606:             description=(",
          "607:                 \"ID of the checkout.\"",
          "608:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "609:             ),",
          "610:         )",
          "611:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "553:         return context.user.is_authenticated",
          "555:     @classmethod",
          "559:         )",
          "561:         checkout.user = info.context.user",
          "562:         checkout.email = info.context.user.email",
          "563:         checkout.save(update_fields=[\"email\", \"user\", \"last_change\"])",
          "",
          "[Removed Lines]",
          "556:     def perform_mutation(cls, _root, info, checkout_id, customer_id=None):",
          "557:         checkout = cls.get_node_or_error(",
          "558:             info, checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "",
          "[Added Lines]",
          "623:     def perform_mutation(",
          "624:         cls, _root, info, checkout_id=None, token=None, customer_id=None",
          "625:     ):",
          "626:         # DEPRECATED",
          "627:         validate_one_of_args_is_in_mutation(",
          "628:             CheckoutErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "631:         if token:",
          "632:             checkout = get_checkout_by_token(token)",
          "633:         # DEPRECATED",
          "634:         else:",
          "635:             checkout = cls.get_node_or_error(",
          "636:                 info, checkout_id or token, only_type=Checkout, field=\"checkout_id\"",
          "637:             )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "570:     checkout = graphene.Field(Checkout, description=\"An updated checkout.\")",
          "572:     class Arguments:",
          "575:     class Meta:",
          "576:         description = \"Removes the user assigned as the owner of the checkout.\"",
          "",
          "[Removed Lines]",
          "573:         checkout_id = graphene.ID(description=\"Checkout ID.\", required=True)",
          "",
          "[Added Lines]",
          "651:         checkout_id = graphene.ID(",
          "652:             description=(",
          "653:                 \"Checkout ID.\"",
          "654:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "655:             ),",
          "656:             required=False,",
          "657:         )",
          "658:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "582:         return context.user.is_authenticated",
          "584:     @classmethod",
          "588:         )",
          "590:         # Raise error if the current user doesn't own the checkout of the given ID.",
          "591:         if checkout.user and checkout.user != info.context.user:",
          "592:             raise PermissionDenied()",
          "",
          "[Removed Lines]",
          "585:     def perform_mutation(cls, _root, info, checkout_id):",
          "586:         checkout = cls.get_node_or_error(",
          "587:             info, checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "",
          "[Added Lines]",
          "670:     def perform_mutation(cls, _root, info, checkout_id=None, token=None):",
          "671:         # DEPRECATED",
          "672:         validate_one_of_args_is_in_mutation(",
          "673:             CheckoutErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "676:         if token:",
          "677:             checkout = get_checkout_by_token(token)",
          "678:         # DEPRECATED",
          "679:         else:",
          "680:             checkout = cls.get_node_or_error(",
          "681:                 info, checkout_id or token, only_type=Checkout, field=\"checkout_id\"",
          "682:             )",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "602:     checkout = graphene.Field(Checkout, description=\"An updated checkout.\")",
          "604:     class Arguments:",
          "606:         shipping_address = AddressInput(",
          "607:             required=True,",
          "608:             description=\"The mailing address to where the checkout will be shipped.\",",
          "",
          "[Removed Lines]",
          "605:         checkout_id = graphene.ID(required=True, description=\"ID of the checkout.\")",
          "",
          "[Added Lines]",
          "699:         checkout_id = graphene.ID(",
          "700:             required=False,",
          "701:             description=(",
          "702:                 \"ID of the checkout.\"",
          "703:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "704:             ),",
          "705:         )",
          "706:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "627:         check_lines_quantity(variants, quantities, country, channel_slug)",
          "629:     @classmethod",
          "633:         )",
          "647:             )",
          "649:         lines = fetch_checkout_lines(checkout)",
          "650:         if not is_shipping_required(lines):",
          "",
          "[Removed Lines]",
          "630:     def perform_mutation(cls, _root, info, checkout_id, shipping_address):",
          "631:         pk = cls.get_global_id_or_error(",
          "632:             checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "635:         try:",
          "636:             checkout = models.Checkout.objects.prefetch_related(",
          "637:                 \"lines__variant__product__product_type\"",
          "638:             ).get(pk=pk)",
          "639:         except ObjectDoesNotExist:",
          "640:             raise ValidationError(",
          "641:                 {",
          "642:                     \"checkout_id\": ValidationError(",
          "643:                         f\"Couldn't resolve to a node: {checkout_id}\",",
          "644:                         code=CheckoutErrorCode.NOT_FOUND,",
          "645:                     )",
          "646:                 }",
          "",
          "[Added Lines]",
          "731:     def perform_mutation(",
          "732:         cls, _root, info, shipping_address, checkout_id=None, token=None",
          "733:     ):",
          "734:         # DEPRECATED",
          "735:         validate_one_of_args_is_in_mutation(",
          "736:             CheckoutErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "739:         if token:",
          "740:             checkout = get_checkout_by_token(",
          "741:                 token, prefetch_lookups=[\"lines__variant__product__product_type\"]",
          "743:         # DEPRECATED",
          "744:         if checkout_id:",
          "745:             pk = cls.get_global_id_or_error(",
          "746:                 checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "747:             )",
          "748:             try:",
          "749:                 checkout = models.Checkout.objects.prefetch_related(",
          "750:                     \"lines__variant__product__product_type\"",
          "751:                 ).get(pk=pk)",
          "752:             except ObjectDoesNotExist:",
          "753:                 raise ValidationError(",
          "754:                     {",
          "755:                         \"checkout_id\": ValidationError(",
          "756:                             f\"Couldn't resolve to a node: {checkout_id}\",",
          "757:                             code=CheckoutErrorCode.NOT_FOUND,",
          "758:                         )",
          "759:                     }",
          "760:                 )",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "695:     checkout = graphene.Field(Checkout, description=\"An updated checkout.\")",
          "697:     class Arguments:",
          "699:         billing_address = AddressInput(",
          "700:             required=True, description=\"The billing address of the checkout.\"",
          "701:         )",
          "",
          "[Removed Lines]",
          "698:         checkout_id = graphene.ID(required=True, description=\"ID of the checkout.\")",
          "",
          "[Added Lines]",
          "811:         checkout_id = graphene.ID(",
          "812:             required=False,",
          "813:             description=(",
          "814:                 \"ID of the checkout.\"",
          "815:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "816:             ),",
          "817:         )",
          "818:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "706:         error_type_field = \"checkout_errors\"",
          "708:     @classmethod",
          "712:         )",
          "713:         billing_address = cls.validate_address(",
          "714:             billing_address,",
          "715:             address_type=AddressType.BILLING,",
          "",
          "[Removed Lines]",
          "709:     def perform_mutation(cls, _root, info, checkout_id, billing_address):",
          "710:         checkout = cls.get_node_or_error(",
          "711:             info, checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "",
          "[Added Lines]",
          "829:     def perform_mutation(",
          "830:         cls, _root, info, billing_address, checkout_id=None, token=None",
          "831:     ):",
          "832:         # DEPRECATED",
          "833:         validate_one_of_args_is_in_mutation(",
          "834:             CheckoutErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "837:         if token:",
          "838:             checkout = get_checkout_by_token(token)",
          "839:         # DEPRECATED",
          "840:         else:",
          "841:             checkout = cls.get_node_or_error(",
          "842:                 info, checkout_id or token, only_type=Checkout, field=\"checkout_id\"",
          "843:             )",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "727:     checkout = graphene.Field(Checkout, description=\"An updated checkout.\")",
          "729:     class Arguments:",
          "731:         language_code = graphene.Argument(",
          "732:             LanguageCodeEnum, required=True, description=\"New language code.\"",
          "733:         )",
          "",
          "[Removed Lines]",
          "730:         checkout_id = graphene.ID(required=True, description=\"ID of the checkout.\")",
          "",
          "[Added Lines]",
          "862:         checkout_id = graphene.ID(",
          "863:             required=False,",
          "864:             description=(",
          "865:                 \"ID of the checkout.\"",
          "866:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "867:             ),",
          "868:         )",
          "869:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "738:         error_type_field = \"checkout_errors\"",
          "740:     @classmethod",
          "744:         )",
          "745:         checkout.language_code = language_code",
          "746:         checkout.save(update_fields=[\"language_code\", \"last_change\"])",
          "747:         info.context.plugins.checkout_updated(checkout)",
          "",
          "[Removed Lines]",
          "741:     def perform_mutation(cls, _root, info, checkout_id, language_code):",
          "742:         checkout = cls.get_node_or_error(",
          "743:             info, checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "",
          "[Added Lines]",
          "880:     def perform_mutation(cls, _root, info, language_code, checkout_id=None, token=None):",
          "881:         # DEPRECATED",
          "882:         validate_one_of_args_is_in_mutation(",
          "883:             CheckoutErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "886:         if token:",
          "887:             checkout = get_checkout_by_token(token)",
          "888:         # DEPRECATED",
          "889:         else:",
          "890:             checkout = cls.get_node_or_error(",
          "891:                 info, checkout_id or token, only_type=Checkout, field=\"checkout_id\"",
          "892:             )",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "752:     checkout = graphene.Field(Checkout, description=\"An updated checkout.\")",
          "754:     class Arguments:",
          "756:         email = graphene.String(required=True, description=\"email.\")",
          "758:     class Meta:",
          "",
          "[Removed Lines]",
          "755:         checkout_id = graphene.ID(description=\"Checkout ID.\")",
          "",
          "[Added Lines]",
          "904:         checkout_id = graphene.ID(",
          "905:             description=(",
          "906:                 \"Checkout ID.\"",
          "907:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "908:             ),",
          "909:             required=False,",
          "910:         )",
          "911:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "761:         error_type_field = \"checkout_errors\"",
          "763:     @classmethod",
          "767:         )",
          "769:         checkout.email = email",
          "770:         cls.clean_instance(info, checkout)",
          "771:         checkout.save(update_fields=[\"email\", \"last_change\"])",
          "",
          "[Removed Lines]",
          "764:     def perform_mutation(cls, _root, info, checkout_id, email):",
          "765:         checkout = cls.get_node_or_error(",
          "766:             info, checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "",
          "[Added Lines]",
          "920:     def perform_mutation(cls, _root, info, email, checkout_id=None, token=None):",
          "921:         # DEPRECATED",
          "922:         validate_one_of_args_is_in_mutation(",
          "923:             CheckoutErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "926:         if token:",
          "927:             checkout = get_checkout_by_token(token)",
          "928:         # DEPRECATED",
          "929:         else:",
          "930:             checkout = cls.get_node_or_error(",
          "931:                 info, checkout_id or token, only_type=Checkout, field=\"checkout_id\"",
          "932:             )",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "777:     checkout = graphene.Field(Checkout, description=\"An updated checkout.\")",
          "779:     class Arguments:",
          "781:         shipping_method_id = graphene.ID(required=True, description=\"Shipping method.\")",
          "783:     class Meta:",
          "",
          "[Removed Lines]",
          "780:         checkout_id = graphene.ID(description=\"Checkout ID.\")",
          "",
          "[Added Lines]",
          "945:         checkout_id = graphene.ID(",
          "946:             description=(",
          "947:                 \"Checkout ID.\"",
          "948:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "949:             ),",
          "950:             required=False,",
          "951:         )",
          "952:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "786:         error_type_field = \"checkout_errors\"",
          "788:     @classmethod",
          "792:         )",
          "793:         manager = info.context.plugins",
          "794:         lines = fetch_checkout_lines(checkout)",
          "795:         checkout_info = fetch_checkout_info(",
          "",
          "[Removed Lines]",
          "789:     def perform_mutation(cls, _root, info, checkout_id, shipping_method_id):",
          "790:         checkout = cls.get_node_or_error(",
          "791:             info, checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "",
          "[Added Lines]",
          "961:     def perform_mutation(",
          "962:         cls, _root, info, shipping_method_id, checkout_id=None, token=None",
          "963:     ):",
          "964:         # DEPRECATED",
          "965:         validate_one_of_args_is_in_mutation(",
          "966:             CheckoutErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "969:         if token:",
          "970:             checkout = get_checkout_by_token(token)",
          "971:         # DEPRECATED",
          "972:         else:",
          "973:             checkout = cls.get_node_or_error(",
          "974:                 info, checkout_id or token, only_type=Checkout, field=\"checkout_id\"",
          "975:             )",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "857:     )",
          "859:     class Arguments:",
          "861:         store_source = graphene.Boolean(",
          "862:             default_value=False,",
          "863:             description=(",
          "",
          "[Removed Lines]",
          "860:         checkout_id = graphene.ID(description=\"Checkout ID.\", required=True)",
          "",
          "[Added Lines]",
          "1044:         checkout_id = graphene.ID(",
          "1045:             description=(",
          "1046:                 \"Checkout ID.\"",
          "1047:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "1048:             ),",
          "1049:             required=False,",
          "1050:         )",
          "1051:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "891:         error_type_field = \"checkout_errors\"",
          "893:     @classmethod",
          "895:         tracking_code = analytics.get_client_id(info.context)",
          "896:         with transaction_with_commit_on_errors():",
          "897:             try:",
          "904:             except ValidationError as e:",
          "910:                 if order:",
          "911:                     if not order.channel.is_active:",
          "912:                         raise ValidationError(",
          "",
          "[Removed Lines]",
          "894:     def perform_mutation(cls, _root, info, checkout_id, store_source, **data):",
          "898:                 checkout = cls.get_node_or_error(",
          "899:                     info,",
          "900:                     checkout_id,",
          "901:                     only_type=Checkout,",
          "902:                     field=\"checkout_id\",",
          "903:                 )",
          "905:                 checkout_token = cls.get_global_id_or_error(",
          "906:                     checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "907:                 )",
          "909:                 order = order_models.Order.objects.get_by_checkout_token(checkout_token)",
          "",
          "[Added Lines]",
          "1085:     def perform_mutation(",
          "1086:         cls, _root, info, store_source, checkout_id=None, token=None, **data",
          "1087:     ):",
          "1088:         # DEPRECATED",
          "1089:         validate_one_of_args_is_in_mutation(",
          "1090:             CheckoutErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "1091:         )",
          "1096:                 if token:",
          "1097:                     checkout = get_checkout_by_token(token)",
          "1098:                 # DEPRECATED",
          "1099:                 else:",
          "1100:                     checkout = cls.get_node_or_error(",
          "1101:                         info,",
          "1102:                         checkout_id or token,",
          "1103:                         only_type=Checkout,",
          "1104:                         field=\"checkout_id\",",
          "1105:                     )",
          "1107:                 # DEPRECATED",
          "1108:                 if checkout_id:",
          "1109:                     token = cls.get_global_id_or_error(",
          "1110:                         checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "1111:                     )",
          "1113:                 order = order_models.Order.objects.get_by_checkout_token(token)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "958:     )",
          "960:     class Arguments:",
          "962:         promo_code = graphene.String(",
          "963:             description=\"Gift card code or voucher code.\", required=True",
          "964:         )",
          "",
          "[Removed Lines]",
          "961:         checkout_id = graphene.ID(description=\"Checkout ID.\", required=True)",
          "",
          "[Added Lines]",
          "1165:         checkout_id = graphene.ID(",
          "1166:             description=(",
          "1167:                 \"Checkout ID. \"",
          "1168:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "1169:             ),",
          "1170:             required=False,",
          "1171:         )",
          "1172:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "969:         error_type_field = \"checkout_errors\"",
          "971:     @classmethod",
          "975:         )",
          "976:         manager = info.context.plugins",
          "977:         lines = fetch_checkout_lines(checkout)",
          "978:         checkout_info = fetch_checkout_info(",
          "",
          "[Removed Lines]",
          "972:     def perform_mutation(cls, _root, info, checkout_id, promo_code):",
          "973:         checkout = cls.get_node_or_error(",
          "974:             info, checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "",
          "[Added Lines]",
          "1183:     def perform_mutation(cls, _root, info, promo_code, checkout_id=None, token=None):",
          "1184:         # DEPRECATED",
          "1185:         validate_one_of_args_is_in_mutation(",
          "1186:             CheckoutErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "1189:         if token:",
          "1190:             checkout = get_checkout_by_token(token)",
          "1191:         # DEPRECATED",
          "1192:         else:",
          "1193:             checkout = cls.get_node_or_error(",
          "1194:                 info, checkout_id or token, only_type=Checkout, field=\"checkout_id\"",
          "1195:             )",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1002:     )",
          "1004:     class Arguments:",
          "1006:         promo_code = graphene.String(",
          "1007:             description=\"Gift card code or voucher code.\", required=True",
          "1008:         )",
          "",
          "[Removed Lines]",
          "1005:         checkout_id = graphene.ID(description=\"Checkout ID.\", required=True)",
          "",
          "[Added Lines]",
          "1226:         checkout_id = graphene.ID(",
          "1227:             description=(",
          "1228:                 \"Checkout ID.\"",
          "1229:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "1230:             ),",
          "1231:             required=False,",
          "1232:         )",
          "1233:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1013:         error_type_field = \"checkout_errors\"",
          "1015:     @classmethod",
          "1019:         )",
          "1020:         manager = info.context.plugins",
          "1021:         checkout_info = fetch_checkout_info(",
          "1022:             checkout, [], info.context.discounts, manager",
          "",
          "[Removed Lines]",
          "1016:     def perform_mutation(cls, _root, info, checkout_id, promo_code):",
          "1017:         checkout = cls.get_node_or_error(",
          "1018:             info, checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "",
          "[Added Lines]",
          "1244:     def perform_mutation(cls, _root, info, promo_code, checkout_id=None, token=None):",
          "1245:         # DEPRECATED",
          "1246:         validate_one_of_args_is_in_mutation(",
          "1247:             CheckoutErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "1250:         if token:",
          "1251:             checkout = get_checkout_by_token(token)",
          "1252:         # DEPRECATED",
          "1253:         else:",
          "1254:             checkout = cls.get_node_or_error(",
          "1255:                 info, checkout_id or token, only_type=Checkout, field=\"checkout_id\"",
          "1256:             )",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/benchmark/test_checkout_mutations.py||saleor/graphql/checkout/tests/benchmark/test_checkout_mutations.py": [
          "File: saleor/graphql/checkout/tests/benchmark/test_checkout_mutations.py -> saleor/graphql/checkout/tests/benchmark/test_checkout_mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:         FRAGMENT_CHECKOUT",
          "243:         + \"\"\"",
          "244:             mutation updateCheckoutShippingOptions(",
          "246:             ) {",
          "247:               checkoutShippingMethodUpdate(",
          "249:               ) {",
          "250:                 errors {",
          "251:                   field",
          "",
          "[Removed Lines]",
          "245:               $checkoutId: ID!, $shippingMethodId: ID!",
          "248:                 checkoutId: $checkoutId, shippingMethodId: $shippingMethodId",
          "",
          "[Added Lines]",
          "245:               $token: UUID, $shippingMethodId: ID!",
          "248:                 token: $token, shippingMethodId: $shippingMethodId",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:         \"\"\"",
          "260:     )",
          "261:     variables = {",
          "263:         \"shippingMethodId\": Node.to_global_id(\"ShippingMethod\", shipping_method.pk),",
          "264:     }",
          "265:     response = get_graphql_content(api_client.post_graphql(query, variables))",
          "",
          "[Removed Lines]",
          "262:         \"checkoutId\": Node.to_global_id(\"Checkout\", checkout_with_shipping_address.pk),",
          "",
          "[Added Lines]",
          "262:         \"token\": checkout_with_shipping_address.token,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "275:         FRAGMENT_CHECKOUT",
          "276:         + \"\"\"",
          "277:             mutation UpdateCheckoutBillingAddress(",
          "279:             ) {",
          "280:               checkoutBillingAddressUpdate(",
          "282:               ) {",
          "283:                 errors {",
          "284:                   field",
          "",
          "[Removed Lines]",
          "278:               $checkoutId: ID!, $billingAddress: AddressInput!",
          "281:                   checkoutId: $checkoutId, billingAddress: $billingAddress",
          "",
          "[Added Lines]",
          "278:               $token: UUID, $billingAddress: AddressInput!",
          "281:                   token: $token, billingAddress: $billingAddress",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "292:         \"\"\"",
          "293:     )",
          "294:     variables = {",
          "296:         \"billingAddress\": graphql_address_data,",
          "297:     }",
          "298:     response = get_graphql_content(api_client.post_graphql(query, variables))",
          "",
          "[Removed Lines]",
          "295:         \"checkoutId\": Node.to_global_id(\"Checkout\", checkout_with_shipping_method.pk),",
          "",
          "[Added Lines]",
          "295:         \"token\": checkout_with_shipping_method.token,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "313:     query = (",
          "314:         FRAGMENT_CHECKOUT_LINE",
          "315:         + \"\"\"",
          "318:                 checkout {",
          "319:                   id",
          "320:                   lines {",
          "",
          "[Removed Lines]",
          "316:             mutation updateCheckoutLine($checkoutId: ID!, $lines: [CheckoutLineInput]!){",
          "317:               checkoutLinesUpdate(checkoutId: $checkoutId, lines: $lines) {",
          "",
          "[Added Lines]",
          "316:             mutation updateCheckoutLine($token: UUID, $lines: [CheckoutLineInput]!){",
          "317:               checkoutLinesUpdate(token: $token, lines: $lines) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "337:         \"\"\"",
          "338:     )",
          "339:     variables = {",
          "341:         \"lines\": [",
          "342:             {",
          "343:                 \"quantity\": 1,",
          "",
          "[Removed Lines]",
          "340:         \"checkoutId\": Node.to_global_id(\"Checkout\", checkout_with_items.pk),",
          "",
          "[Added Lines]",
          "340:         \"token\": checkout_with_items.token,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "461:         FRAGMENT_CHECKOUT",
          "462:         + \"\"\"",
          "463:             mutation UpdateCheckoutShippingAddress(",
          "465:             ) {",
          "466:               checkoutShippingAddressUpdate(",
          "468:               ) {",
          "469:                 errors {",
          "470:                   field",
          "",
          "[Removed Lines]",
          "464:               $checkoutId: ID!, $shippingAddress: AddressInput!",
          "467:                 checkoutId: $checkoutId, shippingAddress: $shippingAddress",
          "",
          "[Added Lines]",
          "464:               $token: UUID, $shippingAddress: AddressInput!",
          "467:                 token: $token, shippingAddress: $shippingAddress",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "478:         \"\"\"",
          "479:     )",
          "480:     variables = {",
          "482:         \"shippingAddress\": graphql_address_data,",
          "483:     }",
          "484:     response = get_graphql_content(api_client.post_graphql(query, variables))",
          "",
          "[Removed Lines]",
          "481:         \"checkoutId\": Node.to_global_id(\"Checkout\", checkout_with_variants.pk),",
          "",
          "[Added Lines]",
          "481:         \"token\": checkout_with_variants.pk,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "492:         FRAGMENT_CHECKOUT",
          "493:         + \"\"\"",
          "494:             mutation UpdateCheckoutEmail(",
          "496:             ) {",
          "498:                 checkout {",
          "499:                   ...Checkout",
          "500:                 }",
          "",
          "[Removed Lines]",
          "495:               $checkoutId: ID!, $email: String!",
          "497:               checkoutEmailUpdate(checkoutId: $checkoutId, email: $email) {",
          "",
          "[Added Lines]",
          "495:               $token: UUID, $email: String!",
          "497:               checkoutEmailUpdate(token: $token, email: $email) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "507:         \"\"\"",
          "508:     )",
          "509:     variables = {",
          "511:         \"email\": \"newEmail@example.com\",",
          "512:     }",
          "513:     response = get_graphql_content(api_client.post_graphql(query, variables))",
          "",
          "[Removed Lines]",
          "510:         \"checkoutId\": Node.to_global_id(\"Checkout\", checkout_with_variants.pk),",
          "",
          "[Added Lines]",
          "510:         \"token\": checkout_with_variants.token,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "522:     query = (",
          "523:         FRAGMENT_CHECKOUT",
          "524:         + \"\"\"",
          "527:                 checkout {",
          "528:                   ...Checkout",
          "529:                 }",
          "",
          "[Removed Lines]",
          "525:             mutation AddCheckoutPromoCode($checkoutId: ID!, $promoCode: String!) {",
          "526:               checkoutAddPromoCode(checkoutId: $checkoutId, promoCode: $promoCode) {",
          "",
          "[Added Lines]",
          "525:             mutation AddCheckoutPromoCode($token: UUID, $promoCode: String!) {",
          "526:               checkoutAddPromoCode(token: $token, promoCode: $promoCode) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "541:         \"\"\"",
          "542:     )",
          "543:     variables = {",
          "545:         \"promoCode\": voucher.code,",
          "546:     }",
          "547:     response = get_graphql_content(api_client.post_graphql(query, variables))",
          "",
          "[Removed Lines]",
          "544:         \"checkoutId\": Node.to_global_id(\"Checkout\", checkout_with_billing_address.pk),",
          "",
          "[Added Lines]",
          "544:         \"token\": checkout_with_billing_address.token,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "554:     api_client, checkout_with_billing_address, count_queries",
          "555: ):",
          "556:     query = \"\"\"",
          "559:             errors {",
          "560:               field",
          "561:               message",
          "",
          "[Removed Lines]",
          "557:         mutation createPayment($input: PaymentInput!, $checkoutId: ID!) {",
          "558:           checkoutPaymentCreate(input: $input, checkoutId: $checkoutId) {",
          "",
          "[Added Lines]",
          "557:         mutation createPayment($input: PaymentInput!, $token: UUID) {",
          "558:           checkoutPaymentCreate(input: $input, token: $token) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "578:     )",
          "580:     variables = {",
          "582:         \"input\": {",
          "583:             \"amount\": total.gross.amount,",
          "584:             \"gateway\": \"mirumee.payments.dummy\",",
          "",
          "[Removed Lines]",
          "581:         \"checkoutId\": Node.to_global_id(\"Checkout\", checkout_with_billing_address.pk),",
          "",
          "[Added Lines]",
          "581:         \"token\": checkout_with_billing_address.token,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "664: COMPLETE_CHECKOUT_MUTATION = (",
          "665:     FRAGMENT_ORDER_DETAIL",
          "666:     + \"\"\"",
          "669:         errors {",
          "670:           code",
          "671:           field",
          "",
          "[Removed Lines]",
          "667:     mutation completeCheckout($checkoutId: ID!) {",
          "668:       checkoutComplete(checkoutId: $checkoutId) {",
          "",
          "[Added Lines]",
          "667:     mutation completeCheckout($token: UUID) {",
          "668:       checkoutComplete(token: $token) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "689:     query = COMPLETE_CHECKOUT_MUTATION",
          "691:     variables = {",
          "693:     }",
          "695:     response = get_graphql_content(api_client.post_graphql(query, variables))",
          "",
          "[Removed Lines]",
          "692:         \"checkoutId\": Node.to_global_id(\"Checkout\", checkout_with_charged_payment.pk),",
          "",
          "[Added Lines]",
          "692:         \"token\": checkout_with_charged_payment.token,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "707:     )",
          "709:     variables = {",
          "711:     }",
          "713:     response = get_graphql_content(api_client.post_graphql(query, variables))",
          "",
          "[Removed Lines]",
          "710:         \"checkoutId\": Node.to_global_id(\"Checkout\", checkout_with_charged_payment.pk),",
          "",
          "[Added Lines]",
          "710:         \"token\": checkout_with_charged_payment.token,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "724:     checkout.user = customer_user",
          "725:     checkout.save()",
          "726:     variables = {",
          "728:     }",
          "730:     response = get_graphql_content(api_client.post_graphql(query, variables))",
          "",
          "[Removed Lines]",
          "727:         \"checkoutId\": Node.to_global_id(\"Checkout\", checkout.pk),",
          "",
          "[Added Lines]",
          "727:         \"token\": checkout.token,",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/deprecated/test_checkout_billing_address_update.py||saleor/graphql/checkout/tests/deprecated/test_checkout_billing_address_update.py": [
          "File: saleor/graphql/checkout/tests/deprecated/test_checkout_billing_address_update.py -> saleor/graphql/checkout/tests/deprecated/test_checkout_billing_address_update.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import graphene",
          "3: from .....checkout.error_codes import CheckoutErrorCode",
          "4: from ....tests.utils import get_graphql_content",
          "6: MUTATION_CHECKOUT_BILLING_ADDRESS_UPDATE = \"\"\"",
          "7:     mutation checkoutBillingAddressUpdate(",
          "8:             $checkoutId: ID, $token: UUID, $billingAddress: AddressInput!) {",
          "9:         checkoutBillingAddressUpdate(",
          "10:                 checkoutId: $checkoutId,",
          "11:                 token: $token,",
          "12:                 billingAddress: $billingAddress",
          "13:         ){",
          "14:             checkout {",
          "15:                 token,",
          "16:                 id",
          "17:             },",
          "18:             errors {",
          "19:                 field",
          "20:                 code",
          "21:                 message",
          "22:             }",
          "23:         }",
          "24:     }",
          "25: \"\"\"",
          "28: def test_checkout_billing_address_update_by_id(",
          "29:     user_api_client, checkout_with_item, graphql_address_data",
          "30: ):",
          "31:     checkout = checkout_with_item",
          "32:     assert checkout.shipping_address is None",
          "33:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "35:     query = MUTATION_CHECKOUT_BILLING_ADDRESS_UPDATE",
          "36:     billing_address = graphql_address_data",
          "38:     variables = {\"checkoutId\": checkout_id, \"billingAddress\": billing_address}",
          "40:     response = user_api_client.post_graphql(query, variables)",
          "41:     content = get_graphql_content(response)",
          "42:     data = content[\"data\"][\"checkoutBillingAddressUpdate\"]",
          "43:     assert not data[\"errors\"]",
          "44:     checkout.refresh_from_db()",
          "45:     assert checkout.billing_address is not None",
          "46:     assert checkout.billing_address.first_name == billing_address[\"firstName\"]",
          "47:     assert checkout.billing_address.last_name == billing_address[\"lastName\"]",
          "48:     assert (",
          "49:         checkout.billing_address.street_address_1 == billing_address[\"streetAddress1\"]",
          "50:     )",
          "51:     assert (",
          "52:         checkout.billing_address.street_address_2 == billing_address[\"streetAddress2\"]",
          "53:     )",
          "54:     assert checkout.billing_address.postal_code == billing_address[\"postalCode\"]",
          "55:     assert checkout.billing_address.country == billing_address[\"country\"]",
          "56:     assert checkout.billing_address.city == billing_address[\"city\"].upper()",
          "59: def test_checkout_billing_address_update_by_token(",
          "60:     user_api_client, checkout_with_item, graphql_address_data",
          "61: ):",
          "62:     checkout = checkout_with_item",
          "63:     assert checkout.shipping_address is None",
          "65:     query = MUTATION_CHECKOUT_BILLING_ADDRESS_UPDATE",
          "66:     billing_address = graphql_address_data",
          "68:     variables = {\"token\": checkout_with_item.token, \"billingAddress\": billing_address}",
          "70:     response = user_api_client.post_graphql(query, variables)",
          "71:     content = get_graphql_content(response)",
          "72:     data = content[\"data\"][\"checkoutBillingAddressUpdate\"]",
          "73:     assert not data[\"errors\"]",
          "74:     checkout.refresh_from_db()",
          "75:     assert checkout.billing_address is not None",
          "76:     assert checkout.billing_address.first_name == billing_address[\"firstName\"]",
          "77:     assert checkout.billing_address.last_name == billing_address[\"lastName\"]",
          "78:     assert (",
          "79:         checkout.billing_address.street_address_1 == billing_address[\"streetAddress1\"]",
          "80:     )",
          "81:     assert (",
          "82:         checkout.billing_address.street_address_2 == billing_address[\"streetAddress2\"]",
          "83:     )",
          "84:     assert checkout.billing_address.postal_code == billing_address[\"postalCode\"]",
          "85:     assert checkout.billing_address.country == billing_address[\"country\"]",
          "86:     assert checkout.billing_address.city == billing_address[\"city\"].upper()",
          "89: def test_checkout_billing_address_update_neither_token_and_id_given(",
          "90:     user_api_client, checkout_with_item, graphql_address_data",
          "91: ):",
          "92:     checkout = checkout_with_item",
          "93:     assert checkout.shipping_address is None",
          "95:     query = MUTATION_CHECKOUT_BILLING_ADDRESS_UPDATE",
          "96:     billing_address = graphql_address_data",
          "98:     variables = {\"billingAddress\": billing_address}",
          "100:     response = user_api_client.post_graphql(query, variables)",
          "101:     content = get_graphql_content(response)",
          "102:     data = content[\"data\"][\"checkoutBillingAddressUpdate\"]",
          "104:     assert len(data[\"errors\"]) == 1",
          "105:     assert not data[\"checkout\"]",
          "106:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "109: def test_checkout_billing_address_update_both_token_and_id_given(",
          "110:     user_api_client, checkout_with_item, graphql_address_data",
          "111: ):",
          "112:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "113:     checkout = checkout_with_item",
          "114:     assert checkout.shipping_address is None",
          "116:     query = MUTATION_CHECKOUT_BILLING_ADDRESS_UPDATE",
          "117:     billing_address = graphql_address_data",
          "119:     variables = {",
          "120:         \"billingAddress\": billing_address,",
          "121:         \"token\": checkout_with_item.token,",
          "122:         \"checkoutId\": checkout_id,",
          "123:     }",
          "125:     response = user_api_client.post_graphql(query, variables)",
          "126:     content = get_graphql_content(response)",
          "127:     data = content[\"data\"][\"checkoutBillingAddressUpdate\"]",
          "129:     assert len(data[\"errors\"]) == 1",
          "130:     assert not data[\"checkout\"]",
          "131:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/deprecated/test_checkout_complete.py||saleor/graphql/checkout/tests/deprecated/test_checkout_complete.py": [
          "File: saleor/graphql/checkout/tests/deprecated/test_checkout_complete.py -> saleor/graphql/checkout/tests/deprecated/test_checkout_complete.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from unittest.mock import patch",
          "3: import graphene",
          "4: import pytest",
          "6: from .....checkout import calculations",
          "7: from .....checkout.error_codes import CheckoutErrorCode",
          "8: from .....checkout.fetch import fetch_checkout_info, fetch_checkout_lines",
          "9: from .....checkout.models import Checkout",
          "10: from .....core.taxes import zero_money",
          "11: from .....order import OrderOrigin, OrderStatus",
          "12: from .....order.models import Order",
          "13: from .....plugins.manager import get_plugins_manager",
          "14: from ....tests.utils import get_graphql_content",
          "16: MUTATION_CHECKOUT_COMPLETE = \"\"\"",
          "17:     mutation checkoutComplete($checkoutId: ID, $token: UUID, $redirectUrl: String) {",
          "18:         checkoutComplete(",
          "19:             checkoutId: $checkoutId, token: $token, redirectUrl: $redirectUrl",
          "20:         ) {",
          "21:             order {",
          "22:                 id,",
          "23:                 token",
          "24:                 original",
          "25:                 origin",
          "26:             },",
          "27:             errors {",
          "28:                 field,",
          "29:                 message,",
          "30:                 variants,",
          "31:                 code",
          "32:             }",
          "33:             confirmationNeeded",
          "34:             confirmationData",
          "35:         }",
          "36:     }",
          "37:     \"\"\"",
          "40: def test_checkout_complete_order_already_exists(",
          "41:     user_api_client,",
          "42:     order_with_lines,",
          "43:     checkout_with_gift_card,",
          "44: ):",
          "45:     checkout = checkout_with_gift_card",
          "46:     orders_count = Order.objects.count()",
          "47:     order_with_lines.checkout_token = checkout.pk",
          "48:     order_with_lines.save()",
          "49:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "50:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "51:     checkout.delete()",
          "52:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "54:     content = get_graphql_content(response)",
          "55:     data = content[\"data\"][\"checkoutComplete\"]",
          "56:     assert not data[\"errors\"]",
          "58:     order_data = data[\"order\"]",
          "59:     assert Order.objects.count() == orders_count",
          "60:     assert order_with_lines.token == order_data[\"token\"]",
          "61:     assert order_data[\"origin\"] == order_with_lines.origin.upper()",
          "62:     assert not order_data[\"original\"]",
          "65: @pytest.mark.integration",
          "66: @patch(\"saleor.plugins.manager.PluginsManager.order_confirmed\")",
          "67: def test_checkout_complete(",
          "68:     order_confirmed_mock,",
          "69:     site_settings,",
          "70:     user_api_client,",
          "71:     checkout_with_gift_card,",
          "72:     gift_card,",
          "73:     payment_dummy,",
          "74:     address,",
          "75:     shipping_method,",
          "76: ):",
          "78:     assert not gift_card.last_used_on",
          "80:     checkout = checkout_with_gift_card",
          "81:     checkout.shipping_address = address",
          "82:     checkout.shipping_method = shipping_method",
          "83:     checkout.billing_address = address",
          "84:     checkout.store_value_in_metadata(items={\"accepted\": \"true\"})",
          "85:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "86:     checkout.save()",
          "88:     checkout_line = checkout.lines.first()",
          "89:     checkout_line_quantity = checkout_line.quantity",
          "90:     checkout_line_variant = checkout_line.variant",
          "92:     manager = get_plugins_manager()",
          "93:     lines = fetch_checkout_lines(checkout)",
          "94:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "95:     total = calculations.calculate_checkout_total_with_gift_cards(",
          "96:         manager, checkout_info, lines, address",
          "97:     )",
          "98:     site_settings.automatically_confirm_all_new_orders = True",
          "99:     site_settings.save()",
          "100:     payment = payment_dummy",
          "101:     payment.is_active = True",
          "102:     payment.order = None",
          "103:     payment.total = total.gross.amount",
          "104:     payment.currency = total.gross.currency",
          "105:     payment.checkout = checkout",
          "106:     payment.save()",
          "107:     assert not payment.transactions.exists()",
          "109:     orders_count = Order.objects.count()",
          "110:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "111:     redirect_url = \"https://www.example.com\"",
          "112:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": redirect_url}",
          "113:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "115:     content = get_graphql_content(response)",
          "116:     data = content[\"data\"][\"checkoutComplete\"]",
          "117:     assert not data[\"errors\"]",
          "119:     order_token = data[\"order\"][\"token\"]",
          "120:     assert Order.objects.count() == orders_count + 1",
          "121:     order = Order.objects.first()",
          "122:     assert order.status == OrderStatus.UNFULFILLED",
          "123:     assert order.origin == OrderOrigin.CHECKOUT",
          "124:     assert not order.original",
          "125:     assert order.token == order_token",
          "126:     assert order.redirect_url == redirect_url",
          "127:     assert order.total.gross == total.gross",
          "128:     assert order.metadata == checkout.metadata",
          "129:     assert order.private_metadata == checkout.private_metadata",
          "131:     order_line = order.lines.first()",
          "132:     assert checkout_line_quantity == order_line.quantity",
          "133:     assert checkout_line_variant == order_line.variant",
          "134:     assert order.shipping_address == address",
          "135:     assert order.shipping_method == checkout.shipping_method",
          "136:     assert order.payments.exists()",
          "137:     order_payment = order.payments.first()",
          "138:     assert order_payment == payment",
          "139:     assert payment.transactions.count() == 1",
          "141:     gift_card.refresh_from_db()",
          "142:     assert gift_card.current_balance == zero_money(gift_card.currency)",
          "143:     assert gift_card.last_used_on",
          "145:     assert not Checkout.objects.filter(",
          "146:         pk=checkout.pk",
          "147:     ).exists(), \"Checkout should have been deleted\"",
          "148:     order_confirmed_mock.assert_called_once_with(order)",
          "151: def test_checkout_complete_order_already_exists_neither_token_and_id_given(",
          "152:     user_api_client,",
          "153:     order_with_lines,",
          "154:     checkout_with_gift_card,",
          "155: ):",
          "156:     checkout = checkout_with_gift_card",
          "157:     order_with_lines.checkout_token = checkout.pk",
          "158:     order_with_lines.save()",
          "159:     variables = {\"redirectUrl\": \"https://www.example.com\"}",
          "160:     checkout.delete()",
          "161:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "163:     content = get_graphql_content(response)",
          "164:     data = content[\"data\"][\"checkoutComplete\"]",
          "165:     assert len(data[\"errors\"]) == 1",
          "166:     assert not data[\"order\"]",
          "167:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "170: def test_checkout_complete_order_already_exists_both_token_and_id_given(",
          "171:     user_api_client,",
          "172:     order_with_lines,",
          "173:     checkout_with_gift_card,",
          "174: ):",
          "175:     checkout = checkout_with_gift_card",
          "176:     order_with_lines.checkout_token = checkout.pk",
          "177:     order_with_lines.save()",
          "178:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "179:     variables = {",
          "180:         \"checkoutId\": checkout_id,",
          "181:         \"token\": checkout.token,",
          "182:         \"redirectUrl\": \"https://www.example.com\",",
          "183:     }",
          "184:     checkout.delete()",
          "185:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "187:     content = get_graphql_content(response)",
          "188:     data = content[\"data\"][\"checkoutComplete\"]",
          "189:     assert len(data[\"errors\"]) == 1",
          "190:     assert not data[\"order\"]",
          "191:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/deprecated/test_checkout_customer_attach.py||saleor/graphql/checkout/tests/deprecated/test_checkout_customer_attach.py": [
          "File: saleor/graphql/checkout/tests/deprecated/test_checkout_customer_attach.py -> saleor/graphql/checkout/tests/deprecated/test_checkout_customer_attach.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import graphene",
          "3: from .....checkout.error_codes import CheckoutErrorCode",
          "4: from ....tests.utils import assert_no_permission, get_graphql_content",
          "6: CHECKOUT_CUSTOMER_ATTACH_MUTATION = \"\"\"",
          "7:     mutation checkoutCustomerAttach($checkoutId: ID, $token: UUID) {",
          "8:         checkoutCustomerAttach(checkoutId: $checkoutId, token: $token) {",
          "9:             checkout {",
          "10:                 token",
          "11:             }",
          "12:             errors {",
          "13:                 field",
          "14:                 message",
          "15:                 code",
          "16:             }",
          "17:         }",
          "18:     }",
          "19: \"\"\"",
          "22: def test_checkout_customer_attach_by_id(",
          "23:     api_client, user_api_client, checkout_with_item, customer_user",
          "24: ):",
          "25:     checkout = checkout_with_item",
          "26:     checkout.email = \"old@email.com\"",
          "27:     checkout.save()",
          "28:     assert checkout.user is None",
          "30:     query = CHECKOUT_CUSTOMER_ATTACH_MUTATION",
          "31:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "32:     customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)",
          "33:     variables = {\"checkoutId\": checkout_id, \"customerId\": customer_id}",
          "35:     # Mutation should fail for unauthenticated customers",
          "36:     response = api_client.post_graphql(query, variables)",
          "37:     assert_no_permission(response)",
          "39:     # Mutation should succeed for authenticated customer",
          "40:     response = user_api_client.post_graphql(query, variables)",
          "41:     content = get_graphql_content(response)",
          "42:     data = content[\"data\"][\"checkoutCustomerAttach\"]",
          "43:     assert not data[\"errors\"]",
          "44:     checkout.refresh_from_db()",
          "45:     assert checkout.user == customer_user",
          "46:     assert checkout.email == customer_user.email",
          "49: def test_checkout_customer_attach_neither_token_and_id_given(",
          "50:     user_api_client, checkout_with_item, customer_user",
          "51: ):",
          "52:     checkout = checkout_with_item",
          "53:     checkout.email = \"old@email.com\"",
          "54:     checkout.save()",
          "55:     assert checkout.user is None",
          "57:     query = CHECKOUT_CUSTOMER_ATTACH_MUTATION",
          "58:     customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)",
          "59:     variables = {\"customerId\": customer_id}",
          "61:     # Mutation should succeed for authenticated customer",
          "62:     response = user_api_client.post_graphql(query, variables)",
          "63:     content = get_graphql_content(response)",
          "64:     data = content[\"data\"][\"checkoutCustomerAttach\"]",
          "65:     assert len(data[\"errors\"]) == 1",
          "66:     assert not data[\"checkout\"]",
          "67:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "70: def test_checkout_customer_attach_both_token_and_id_given(",
          "71:     user_api_client, checkout_with_item, customer_user",
          "72: ):",
          "73:     checkout = checkout_with_item",
          "74:     checkout.email = \"old@email.com\"",
          "75:     checkout.save()",
          "76:     assert checkout.user is None",
          "78:     query = CHECKOUT_CUSTOMER_ATTACH_MUTATION",
          "79:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "80:     customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)",
          "81:     variables = {",
          "82:         \"checkoutId\": checkout_id,",
          "83:         \"token\": checkout.token,",
          "84:         \"customerId\": customer_id,",
          "85:     }",
          "87:     # Mutation should succeed for authenticated customer",
          "88:     response = user_api_client.post_graphql(query, variables)",
          "89:     content = get_graphql_content(response)",
          "90:     data = content[\"data\"][\"checkoutCustomerAttach\"]",
          "91:     assert len(data[\"errors\"]) == 1",
          "92:     assert not data[\"checkout\"]",
          "93:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/deprecated/test_checkout_email_update.py||saleor/graphql/checkout/tests/deprecated/test_checkout_email_update.py": [
          "File: saleor/graphql/checkout/tests/deprecated/test_checkout_email_update.py -> saleor/graphql/checkout/tests/deprecated/test_checkout_email_update.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import graphene",
          "3: from .....checkout.error_codes import CheckoutErrorCode",
          "4: from ....tests.utils import get_graphql_content",
          "6: CHECKOUT_EMAIL_UPDATE_MUTATION = \"\"\"",
          "7:     mutation checkoutEmailUpdate($checkoutId: ID, $token: UUID, $email: String!) {",
          "8:         checkoutEmailUpdate(checkoutId: $checkoutId, token: $token, email: $email) {",
          "9:             checkout {",
          "10:                 id,",
          "11:                 email",
          "12:             },",
          "13:             errors {",
          "14:                 field,",
          "15:                 message",
          "16:             }",
          "17:             errors {",
          "18:                 field,",
          "19:                 message",
          "20:                 code",
          "21:             }",
          "22:         }",
          "23:     }",
          "24: \"\"\"",
          "27: def test_checkout_email_update_by_id(user_api_client, checkout_with_item):",
          "28:     checkout = checkout_with_item",
          "29:     assert not checkout.email",
          "30:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "32:     email = \"test@example.com\"",
          "33:     variables = {\"checkoutId\": checkout_id, \"email\": email}",
          "35:     response = user_api_client.post_graphql(CHECKOUT_EMAIL_UPDATE_MUTATION, variables)",
          "36:     content = get_graphql_content(response)",
          "37:     data = content[\"data\"][\"checkoutEmailUpdate\"]",
          "38:     assert not data[\"errors\"]",
          "39:     checkout.refresh_from_db()",
          "40:     assert checkout.email == email",
          "43: def test_checkout_email_update_neither_token_and_id_given(",
          "44:     user_api_client, checkout_with_item",
          "45: ):",
          "46:     checkout = checkout_with_item",
          "47:     assert not checkout.email",
          "49:     email = \"test@example.com\"",
          "50:     variables = {\"email\": email}",
          "52:     response = user_api_client.post_graphql(CHECKOUT_EMAIL_UPDATE_MUTATION, variables)",
          "53:     content = get_graphql_content(response)",
          "54:     data = content[\"data\"][\"checkoutEmailUpdate\"]",
          "55:     assert len(data[\"errors\"]) == 1",
          "56:     assert not data[\"checkout\"]",
          "57:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "60: def test_checkout_email_update_both_token_and_id_given(",
          "61:     user_api_client, checkout_with_item",
          "62: ):",
          "63:     checkout = checkout_with_item",
          "64:     assert not checkout.email",
          "65:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "67:     email = \"test@example.com\"",
          "68:     variables = {\"checkoutId\": checkout_id, \"token\": checkout.token, \"email\": email}",
          "70:     response = user_api_client.post_graphql(CHECKOUT_EMAIL_UPDATE_MUTATION, variables)",
          "71:     content = get_graphql_content(response)",
          "72:     data = content[\"data\"][\"checkoutEmailUpdate\"]",
          "73:     assert len(data[\"errors\"]) == 1",
          "74:     assert not data[\"checkout\"]",
          "75:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/deprecated/test_checkout_language_code_update.py||saleor/graphql/checkout/tests/deprecated/test_checkout_language_code_update.py": [
          "File: saleor/graphql/checkout/tests/deprecated/test_checkout_language_code_update.py -> saleor/graphql/checkout/tests/deprecated/test_checkout_language_code_update.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import graphene",
          "3: from .....checkout.error_codes import CheckoutErrorCode",
          "4: from ....tests.utils import get_graphql_content",
          "6: MUTATION_CHECKOUT_UPDATE_LANGUAGE_CODE = \"\"\"",
          "7: mutation checkoutLanguageCodeUpdate(",
          "8:     $checkoutId: ID, $token: UUID, $languageCode: LanguageCodeEnum!",
          "9: ){",
          "10:   checkoutLanguageCodeUpdate(",
          "11:       checkoutId: $checkoutId, token: $token, languageCode: $languageCode",
          "12:   ){",
          "13:     checkout{",
          "14:       id",
          "15:       languageCode",
          "16:     }",
          "17:     errors{",
          "18:       field",
          "19:       message",
          "20:       code",
          "21:     }",
          "22:   }",
          "23: }",
          "24: \"\"\"",
          "27: def test_checkout_update_language_code_by_id(",
          "28:     user_api_client,",
          "29:     checkout_with_gift_card,",
          "30: ):",
          "31:     language_code = \"PL\"",
          "32:     checkout = checkout_with_gift_card",
          "33:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "34:     variables = {\"checkoutId\": checkout_id, \"languageCode\": language_code}",
          "36:     response = user_api_client.post_graphql(",
          "37:         MUTATION_CHECKOUT_UPDATE_LANGUAGE_CODE, variables",
          "38:     )",
          "40:     content = get_graphql_content(response)",
          "41:     data = content[\"data\"][\"checkoutLanguageCodeUpdate\"]",
          "42:     assert not data[\"errors\"]",
          "44:     assert data[\"checkout\"][\"languageCode\"] == language_code",
          "45:     checkout.refresh_from_db()",
          "46:     assert checkout.language_code == language_code.lower()",
          "49: def test_checkout_update_language_code_neither_token_and_id_given(",
          "50:     user_api_client,",
          "51:     checkout_with_gift_card,",
          "52: ):",
          "53:     language_code = \"PL\"",
          "54:     variables = {\"languageCode\": language_code}",
          "56:     response = user_api_client.post_graphql(",
          "57:         MUTATION_CHECKOUT_UPDATE_LANGUAGE_CODE, variables",
          "58:     )",
          "60:     content = get_graphql_content(response)",
          "61:     data = content[\"data\"][\"checkoutLanguageCodeUpdate\"]",
          "62:     assert len(data[\"errors\"]) == 1",
          "63:     assert not data[\"checkout\"]",
          "64:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "67: def test_checkout_update_language_code_both_token_and_id_given(",
          "68:     user_api_client,",
          "69:     checkout_with_gift_card,",
          "70: ):",
          "71:     language_code = \"PL\"",
          "72:     checkout = checkout_with_gift_card",
          "73:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "74:     variables = {",
          "75:         \"checkoutId\": checkout_id,",
          "76:         \"token\": checkout.token,",
          "77:         \"languageCode\": language_code,",
          "78:     }",
          "80:     response = user_api_client.post_graphql(",
          "81:         MUTATION_CHECKOUT_UPDATE_LANGUAGE_CODE, variables",
          "82:     )",
          "84:     content = get_graphql_content(response)",
          "85:     data = content[\"data\"][\"checkoutLanguageCodeUpdate\"]",
          "86:     assert len(data[\"errors\"]) == 1",
          "87:     assert not data[\"checkout\"]",
          "88:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/deprecated/test_checkout_line_delete.py||saleor/graphql/checkout/tests/deprecated/test_checkout_line_delete.py": [
          "File: saleor/graphql/checkout/tests/deprecated/test_checkout_line_delete.py -> saleor/graphql/checkout/tests/deprecated/test_checkout_line_delete.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from unittest import mock",
          "3: import graphene",
          "5: from .....checkout.error_codes import CheckoutErrorCode",
          "6: from .....checkout.fetch import fetch_checkout_info, fetch_checkout_lines",
          "7: from .....checkout.utils import calculate_checkout_quantity",
          "8: from .....plugins.manager import get_plugins_manager",
          "9: from ....tests.utils import get_graphql_content",
          "10: from ...mutations import update_checkout_shipping_method_if_invalid",
          "12: MUTATION_CHECKOUT_LINES_DELETE = \"\"\"",
          "13:     mutation checkoutLineDelete($checkoutId: ID, $token: UUID, $lineId: ID!) {",
          "14:         checkoutLineDelete(checkoutId: $checkoutId, token: $token lineId: $lineId) {",
          "15:             checkout {",
          "16:                 token",
          "17:                 lines {",
          "18:                     quantity",
          "19:                     variant {",
          "20:                         id",
          "21:                     }",
          "22:                 }",
          "23:             }",
          "24:             errors {",
          "25:                 field",
          "26:                 message",
          "27:                 code",
          "28:             }",
          "29:         }",
          "30:     }",
          "31: \"\"\"",
          "34: @mock.patch(",
          "35:     \"saleor.graphql.checkout.mutations.update_checkout_shipping_method_if_invalid\",",
          "36:     wraps=update_checkout_shipping_method_if_invalid,",
          "37: )",
          "38: def test_checkout_line_delete_by_id(",
          "39:     mocked_update_shipping_method, user_api_client, checkout_with_item",
          "40: ):",
          "41:     checkout = checkout_with_item",
          "42:     lines = fetch_checkout_lines(checkout)",
          "43:     assert calculate_checkout_quantity(lines) == 3",
          "44:     assert checkout.lines.count() == 1",
          "45:     line = checkout.lines.first()",
          "46:     assert line.quantity == 3",
          "48:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "49:     line_id = graphene.Node.to_global_id(\"CheckoutLine\", line.pk)",
          "51:     variables = {\"checkoutId\": checkout_id, \"lineId\": line_id}",
          "52:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_DELETE, variables)",
          "53:     content = get_graphql_content(response)",
          "55:     data = content[\"data\"][\"checkoutLineDelete\"]",
          "56:     assert not data[\"errors\"]",
          "57:     checkout.refresh_from_db()",
          "58:     lines = fetch_checkout_lines(checkout)",
          "59:     assert checkout.lines.count() == 0",
          "60:     assert calculate_checkout_quantity(lines) == 0",
          "61:     manager = get_plugins_manager()",
          "62:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "63:     mocked_update_shipping_method.assert_called_once_with(checkout_info, lines)",
          "66: def test_checkout_line_delete_neither_token_and_id_given(",
          "67:     user_api_client, checkout_with_item",
          "68: ):",
          "69:     checkout = checkout_with_item",
          "70:     line = checkout.lines.first()",
          "72:     line_id = graphene.Node.to_global_id(\"CheckoutLine\", line.pk)",
          "74:     variables = {\"lineId\": line_id}",
          "75:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_DELETE, variables)",
          "76:     content = get_graphql_content(response)",
          "78:     data = content[\"data\"][\"checkoutLineDelete\"]",
          "79:     assert len(data[\"errors\"]) == 1",
          "80:     assert not data[\"checkout\"]",
          "81:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "84: def test_checkout_line_delete_both_token_and_id_given(",
          "85:     user_api_client, checkout_with_item",
          "86: ):",
          "87:     checkout = checkout_with_item",
          "88:     line = checkout.lines.first()",
          "90:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "91:     line_id = graphene.Node.to_global_id(\"CheckoutLine\", line.pk)",
          "93:     variables = {\"checkoutId\": checkout_id, \"token\": checkout.token, \"lineId\": line_id}",
          "94:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_DELETE, variables)",
          "95:     content = get_graphql_content(response)",
          "97:     data = content[\"data\"][\"checkoutLineDelete\"]",
          "98:     assert len(data[\"errors\"]) == 1",
          "99:     assert not data[\"checkout\"]",
          "100:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/deprecated/test_checkout_lines_add.py||saleor/graphql/checkout/tests/deprecated/test_checkout_lines_add.py": [
          "File: saleor/graphql/checkout/tests/deprecated/test_checkout_lines_add.py -> saleor/graphql/checkout/tests/deprecated/test_checkout_lines_add.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from unittest import mock",
          "3: import graphene",
          "5: from .....checkout.error_codes import CheckoutErrorCode",
          "6: from .....checkout.fetch import fetch_checkout_info, fetch_checkout_lines",
          "7: from .....checkout.utils import calculate_checkout_quantity",
          "8: from .....plugins.manager import get_plugins_manager",
          "9: from ....tests.utils import get_graphql_content",
          "10: from ...mutations import update_checkout_shipping_method_if_invalid",
          "12: MUTATION_CHECKOUT_LINES_ADD = \"\"\"",
          "13:     mutation checkoutLinesAdd(",
          "14:             $checkoutId: ID, $token: UUID, $lines: [CheckoutLineInput!]!) {",
          "15:         checkoutLinesAdd(checkoutId: $checkoutId, token: $token lines: $lines) {",
          "16:             checkout {",
          "17:                 token",
          "18:                 quantity",
          "19:                 lines {",
          "20:                     quantity",
          "21:                     variant {",
          "22:                         id",
          "23:                     }",
          "24:                 }",
          "25:             }",
          "26:             errors {",
          "27:                 field",
          "28:                 code",
          "29:                 message",
          "30:                 variants",
          "31:             }",
          "32:         }",
          "33:     }\"\"\"",
          "36: @mock.patch(",
          "37:     \"saleor.graphql.checkout.mutations.update_checkout_shipping_method_if_invalid\",",
          "38:     wraps=update_checkout_shipping_method_if_invalid,",
          "39: )",
          "40: def test_checkout_lines_add_by_checkout_id(",
          "41:     mocked_update_shipping_method, user_api_client, checkout_with_item, stock",
          "42: ):",
          "43:     variant = stock.product_variant",
          "44:     checkout = checkout_with_item",
          "45:     line = checkout.lines.first()",
          "46:     lines = fetch_checkout_lines(checkout)",
          "47:     assert calculate_checkout_quantity(lines) == 3",
          "48:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "49:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "51:     variables = {",
          "52:         \"checkoutId\": checkout_id,",
          "53:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "54:         \"channelSlug\": checkout.channel.slug,",
          "55:     }",
          "56:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "57:     content = get_graphql_content(response)",
          "58:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "59:     assert not data[\"errors\"]",
          "60:     checkout.refresh_from_db()",
          "61:     lines = fetch_checkout_lines(checkout)",
          "62:     line = checkout.lines.latest(\"pk\")",
          "63:     assert line.variant == variant",
          "64:     assert line.quantity == 1",
          "65:     assert calculate_checkout_quantity(lines) == 4",
          "67:     manager = get_plugins_manager()",
          "68:     lines = fetch_checkout_lines(checkout)",
          "69:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "70:     mocked_update_shipping_method.assert_called_once_with(checkout_info, lines)",
          "73: def test_checkout_lines_add_neither_token_and_id_given(",
          "74:     user_api_client, checkout_with_item, stock",
          "75: ):",
          "76:     variant = stock.product_variant",
          "77:     checkout = checkout_with_item",
          "79:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "80:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "82:     variables = {",
          "83:         \"checkoutId\": checkout_id,",
          "84:         \"token\": checkout.token,",
          "85:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "86:         \"channelSlug\": checkout.channel.slug,",
          "87:     }",
          "88:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "90:     content = get_graphql_content(response)",
          "91:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "92:     assert len(data[\"errors\"]) == 1",
          "93:     assert not data[\"checkout\"]",
          "94:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "97: def test_checkout_lines_add_both_token_and_id_given(",
          "98:     user_api_client, checkout_with_item, stock",
          "99: ):",
          "100:     variant = stock.product_variant",
          "101:     checkout = checkout_with_item",
          "102:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "104:     variables = {",
          "105:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "106:         \"channelSlug\": checkout.channel.slug,",
          "107:     }",
          "108:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "109:     content = get_graphql_content(response)",
          "110:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "111:     assert len(data[\"errors\"]) == 1",
          "112:     assert not data[\"checkout\"]",
          "113:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/deprecated/test_checkout_lines_update.py||saleor/graphql/checkout/tests/deprecated/test_checkout_lines_update.py": [
          "File: saleor/graphql/checkout/tests/deprecated/test_checkout_lines_update.py -> saleor/graphql/checkout/tests/deprecated/test_checkout_lines_update.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from unittest import mock",
          "3: import graphene",
          "5: from .....checkout.error_codes import CheckoutErrorCode",
          "6: from .....checkout.fetch import fetch_checkout_info, fetch_checkout_lines",
          "7: from .....checkout.utils import calculate_checkout_quantity",
          "8: from .....plugins.manager import get_plugins_manager",
          "9: from ....tests.utils import get_graphql_content",
          "10: from ...mutations import update_checkout_shipping_method_if_invalid",
          "12: MUTATION_CHECKOUT_LINES_UPDATE = \"\"\"",
          "13:     mutation checkoutLinesUpdate(",
          "14:             $checkoutId: ID, $token: UUID, $lines: [CheckoutLineInput!]!) {",
          "15:         checkoutLinesUpdate(checkoutId: $checkoutId, token: $token, lines: $lines) {",
          "16:             checkout {",
          "17:                 token",
          "18:                 quantity",
          "19:                 lines {",
          "20:                     quantity",
          "21:                     variant {",
          "22:                         id",
          "23:                     }",
          "24:                 }",
          "25:             }",
          "26:             errors {",
          "27:                 field",
          "28:                 code",
          "29:                 message",
          "30:                 variants",
          "31:             }",
          "32:         }",
          "33:     }",
          "34:     \"\"\"",
          "37: @mock.patch(",
          "38:     \"saleor.graphql.checkout.mutations.update_checkout_shipping_method_if_invalid\",",
          "39:     wraps=update_checkout_shipping_method_if_invalid,",
          "40: )",
          "41: def test_checkout_lines_update(",
          "42:     mocked_update_shipping_method, user_api_client, checkout_with_item",
          "43: ):",
          "44:     checkout = checkout_with_item",
          "45:     lines = fetch_checkout_lines(checkout)",
          "46:     assert checkout.lines.count() == 1",
          "47:     assert calculate_checkout_quantity(lines) == 3",
          "48:     line = checkout.lines.first()",
          "49:     variant = line.variant",
          "50:     assert line.quantity == 3",
          "52:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "53:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "55:     variables = {",
          "56:         \"checkoutId\": checkout_id,",
          "57:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "58:     }",
          "59:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "60:     content = get_graphql_content(response)",
          "62:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "63:     assert not data[\"errors\"]",
          "64:     checkout.refresh_from_db()",
          "65:     lines = fetch_checkout_lines(checkout)",
          "66:     assert checkout.lines.count() == 1",
          "67:     line = checkout.lines.first()",
          "68:     assert line.variant == variant",
          "69:     assert line.quantity == 1",
          "70:     assert calculate_checkout_quantity(lines) == 1",
          "72:     manager = get_plugins_manager()",
          "73:     lines = fetch_checkout_lines(checkout)",
          "74:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "75:     mocked_update_shipping_method.assert_called_once_with(checkout_info, lines)",
          "78: def test_checkout_lines_update_neither_token_and_id_given(",
          "79:     user_api_client, checkout_with_item",
          "80: ):",
          "81:     checkout = checkout_with_item",
          "82:     line = checkout.lines.first()",
          "83:     variant = line.variant",
          "85:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "87:     variables = {",
          "88:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "89:     }",
          "90:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "91:     content = get_graphql_content(response)",
          "93:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "94:     assert len(data[\"errors\"]) == 1",
          "95:     assert not data[\"checkout\"]",
          "96:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "99: def test_checkout_lines_update_both_token_and_id_given(",
          "100:     user_api_client, checkout_with_item",
          "101: ):",
          "102:     checkout = checkout_with_item",
          "103:     line = checkout.lines.first()",
          "104:     variant = line.variant",
          "106:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "107:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "109:     variables = {",
          "110:         \"checkoutId\": checkout_id,",
          "111:         \"token\": checkout.token,",
          "112:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "113:     }",
          "114:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "115:     content = get_graphql_content(response)",
          "117:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "118:     assert len(data[\"errors\"]) == 1",
          "119:     assert not data[\"checkout\"]",
          "120:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/deprecated/test_checkout_promo_codes.py||saleor/graphql/checkout/tests/deprecated/test_checkout_promo_codes.py": [
          "File: saleor/graphql/checkout/tests/deprecated/test_checkout_promo_codes.py -> saleor/graphql/checkout/tests/deprecated/test_checkout_promo_codes.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import graphene",
          "3: from .....checkout.error_codes import CheckoutErrorCode",
          "4: from ....tests.utils import get_graphql_content",
          "6: MUTATION_CHECKOUT_ADD_PROMO_CODE = \"\"\"",
          "7:     mutation($checkoutId: ID, $token: UUID, $promoCode: String!) {",
          "8:         checkoutAddPromoCode(",
          "9:             checkoutId: $checkoutId, token: $token, promoCode: $promoCode) {",
          "10:             errors {",
          "11:                 field",
          "12:                 message",
          "13:                 code",
          "14:             }",
          "15:             checkout {",
          "16:                 id",
          "17:                 token",
          "18:                 voucherCode",
          "19:                 giftCards {",
          "20:                     id",
          "21:                     displayCode",
          "22:                 }",
          "23:                 totalPrice {",
          "24:                     gross {",
          "25:                         amount",
          "26:                     }",
          "27:                 }",
          "28:             }",
          "29:         }",
          "30:     }",
          "31: \"\"\"",
          "34: def _mutate_checkout_add_promo_code(client, variables):",
          "35:     response = client.post_graphql(MUTATION_CHECKOUT_ADD_PROMO_CODE, variables)",
          "36:     content = get_graphql_content(response)",
          "37:     return content[\"data\"][\"checkoutAddPromoCode\"]",
          "40: def test_checkout_add_voucher_code_by_id(api_client, checkout_with_item, voucher):",
          "41:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "42:     variables = {\"checkoutId\": checkout_id, \"promoCode\": voucher.code}",
          "43:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "45:     assert not data[\"errors\"]",
          "46:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "47:     assert data[\"checkout\"][\"voucherCode\"] == voucher.code",
          "50: def test_checkout_add_voucher_code_neither_token_and_id_given(",
          "51:     api_client, checkout_with_item, voucher",
          "52: ):",
          "53:     variables = {\"promoCode\": voucher.code}",
          "54:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "56:     assert len(data[\"errors\"]) == 1",
          "57:     assert not data[\"checkout\"]",
          "58:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "61: def test_checkout_add_voucher_code_both_token_and_id_given(",
          "62:     api_client, checkout_with_item, voucher",
          "63: ):",
          "64:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "65:     variables = {",
          "66:         \"promoCode\": voucher.code,",
          "67:         \"checkoutId\": checkout_id,",
          "68:         \"token\": checkout_with_item.token,",
          "69:     }",
          "70:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "72:     assert len(data[\"errors\"]) == 1",
          "73:     assert not data[\"checkout\"]",
          "74:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "77: MUTATION_CHECKOUT_REMOVE_PROMO_CODE = \"\"\"",
          "78:     mutation($checkoutId: ID, $token: UUID, $promoCode: String!) {",
          "79:         checkoutRemovePromoCode(",
          "80:             checkoutId: $checkoutId, token: $token, promoCode: $promoCode) {",
          "81:             errors {",
          "82:                 field",
          "83:                 message",
          "84:                 code",
          "85:             }",
          "86:             checkout {",
          "87:                 id,",
          "88:                 voucherCode",
          "89:                 giftCards {",
          "90:                     id",
          "91:                     displayCode",
          "92:                 }",
          "93:             }",
          "94:         }",
          "95:     }",
          "96: \"\"\"",
          "99: def _mutate_checkout_remove_promo_code(client, variables):",
          "100:     response = client.post_graphql(MUTATION_CHECKOUT_REMOVE_PROMO_CODE, variables)",
          "101:     content = get_graphql_content(response)",
          "102:     return content[\"data\"][\"checkoutRemovePromoCode\"]",
          "105: def test_checkout_remove_voucher_code(api_client, checkout_with_voucher):",
          "106:     assert checkout_with_voucher.voucher_code is not None",
          "108:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_voucher.pk)",
          "109:     variables = {",
          "110:         \"checkoutId\": checkout_id,",
          "111:         \"promoCode\": checkout_with_voucher.voucher_code,",
          "112:     }",
          "114:     data = _mutate_checkout_remove_promo_code(api_client, variables)",
          "116:     checkout_with_voucher.refresh_from_db()",
          "117:     assert not data[\"errors\"]",
          "118:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "119:     assert data[\"checkout\"][\"voucherCode\"] is None",
          "120:     assert checkout_with_voucher.voucher_code is None",
          "123: def test_checkout_remove_voucher_code_neither_token_and_id_given(",
          "124:     api_client, checkout_with_voucher",
          "125: ):",
          "126:     assert checkout_with_voucher.voucher_code is not None",
          "128:     variables = {",
          "129:         \"promoCode\": checkout_with_voucher.voucher_code,",
          "130:     }",
          "132:     data = _mutate_checkout_remove_promo_code(api_client, variables)",
          "133:     assert len(data[\"errors\"]) == 1",
          "134:     assert not data[\"checkout\"]",
          "135:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "138: def test_checkout_remove_voucher_code_both_token_and_id_given(",
          "139:     api_client, checkout_with_voucher",
          "140: ):",
          "141:     assert checkout_with_voucher.voucher_code is not None",
          "143:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_voucher.pk)",
          "144:     variables = {",
          "145:         \"checkoutId\": checkout_id,",
          "146:         \"token\": checkout_with_voucher.token,",
          "147:         \"promoCode\": checkout_with_voucher.voucher_code,",
          "148:     }",
          "150:     data = _mutate_checkout_remove_promo_code(api_client, variables)",
          "151:     assert len(data[\"errors\"]) == 1",
          "152:     assert not data[\"checkout\"]",
          "153:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_address_update.py||saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_address_update.py": [
          "File: saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_address_update.py -> saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_address_update.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from unittest import mock",
          "3: import graphene",
          "5: from .....checkout.error_codes import CheckoutErrorCode",
          "6: from .....checkout.fetch import fetch_checkout_info, fetch_checkout_lines",
          "7: from .....plugins.manager import get_plugins_manager",
          "8: from ....tests.utils import get_graphql_content",
          "9: from ...mutations import update_checkout_shipping_method_if_invalid",
          "11: MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE = \"\"\"",
          "12:     mutation checkoutShippingAddressUpdate(",
          "13:             $checkoutId: ID, $token: UUID, $shippingAddress: AddressInput!) {",
          "14:         checkoutShippingAddressUpdate(",
          "15:                 checkoutId: $checkoutId,",
          "16:                 token: $token,",
          "17:                 shippingAddress: $shippingAddress",
          "18:         ) {",
          "19:             checkout {",
          "20:                 token,",
          "21:                 id",
          "22:             },",
          "23:             errors {",
          "24:                 field",
          "25:                 message",
          "26:                 code",
          "27:             }",
          "28:         }",
          "29:     }\"\"\"",
          "32: @mock.patch(",
          "33:     \"saleor.graphql.checkout.mutations.update_checkout_shipping_method_if_invalid\",",
          "34:     wraps=update_checkout_shipping_method_if_invalid,",
          "35: )",
          "36: def test_checkout_shipping_address_update_by_id(",
          "37:     mocked_update_shipping_method,",
          "38:     user_api_client,",
          "39:     checkout_with_item,",
          "40:     graphql_address_data,",
          "41: ):",
          "42:     checkout = checkout_with_item",
          "43:     assert checkout.shipping_address is None",
          "44:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "46:     shipping_address = graphql_address_data",
          "47:     variables = {\"checkoutId\": checkout_id, \"shippingAddress\": shipping_address}",
          "49:     response = user_api_client.post_graphql(",
          "50:         MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE, variables",
          "51:     )",
          "52:     content = get_graphql_content(response)",
          "53:     data = content[\"data\"][\"checkoutShippingAddressUpdate\"]",
          "54:     assert not data[\"errors\"]",
          "55:     checkout.refresh_from_db()",
          "56:     assert checkout.shipping_address is not None",
          "57:     assert checkout.shipping_address.first_name == shipping_address[\"firstName\"]",
          "58:     assert checkout.shipping_address.last_name == shipping_address[\"lastName\"]",
          "59:     assert (",
          "60:         checkout.shipping_address.street_address_1 == shipping_address[\"streetAddress1\"]",
          "61:     )",
          "62:     assert (",
          "63:         checkout.shipping_address.street_address_2 == shipping_address[\"streetAddress2\"]",
          "64:     )",
          "65:     assert checkout.shipping_address.postal_code == shipping_address[\"postalCode\"]",
          "66:     assert checkout.shipping_address.country == shipping_address[\"country\"]",
          "67:     assert checkout.shipping_address.city == shipping_address[\"city\"].upper()",
          "68:     manager = get_plugins_manager()",
          "69:     lines = fetch_checkout_lines(checkout)",
          "70:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "71:     mocked_update_shipping_method.assert_called_once_with(checkout_info, lines)",
          "74: def test_checkout_shipping_address_update_neither_token_and_id_given(",
          "75:     user_api_client,",
          "76:     checkout_with_item,",
          "77:     graphql_address_data,",
          "78: ):",
          "79:     checkout = checkout_with_item",
          "80:     assert checkout.shipping_address is None",
          "82:     shipping_address = graphql_address_data",
          "83:     variables = {\"shippingAddress\": shipping_address}",
          "85:     response = user_api_client.post_graphql(",
          "86:         MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE, variables",
          "87:     )",
          "88:     content = get_graphql_content(response)",
          "89:     data = content[\"data\"][\"checkoutShippingAddressUpdate\"]",
          "90:     assert len(data[\"errors\"]) == 1",
          "91:     assert not data[\"checkout\"]",
          "92:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "95: def test_checkout_shipping_address_update_both_token_and_id_given(",
          "96:     user_api_client,",
          "97:     checkout_with_item,",
          "98:     graphql_address_data,",
          "99: ):",
          "100:     checkout = checkout_with_item",
          "101:     assert checkout.shipping_address is None",
          "102:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "104:     shipping_address = graphql_address_data",
          "105:     variables = {",
          "106:         \"checkoutId\": checkout_id,",
          "107:         \"token\": checkout.token,",
          "108:         \"shippingAddress\": shipping_address,",
          "109:     }",
          "111:     response = user_api_client.post_graphql(",
          "112:         MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE, variables",
          "113:     )",
          "114:     content = get_graphql_content(response)",
          "115:     data = content[\"data\"][\"checkoutShippingAddressUpdate\"]",
          "116:     assert len(data[\"errors\"]) == 1",
          "117:     assert not data[\"checkout\"]",
          "118:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_method_update.py||saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_method_update.py": [
          "File: saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_method_update.py -> saleor/graphql/checkout/tests/deprecated/test_checkout_shipping_method_update.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from unittest.mock import patch",
          "3: import graphene",
          "5: from .....checkout.error_codes import CheckoutErrorCode",
          "6: from .....checkout.fetch import fetch_checkout_info, fetch_checkout_lines",
          "7: from .....plugins.manager import get_plugins_manager",
          "8: from ....tests.utils import get_graphql_content",
          "10: MUTATION_UPDATE_SHIPPING_METHOD = \"\"\"",
          "11:     mutation checkoutShippingMethodUpdate(",
          "12:             $checkoutId: ID, $token: UUID, $shippingMethodId: ID!){",
          "13:         checkoutShippingMethodUpdate(",
          "14:             checkoutId: $checkoutId,",
          "15:             token: $token,",
          "16:             shippingMethodId: $shippingMethodId",
          "17:         ) {",
          "18:             errors {",
          "19:                 field",
          "20:                 message",
          "21:                 code",
          "22:             }",
          "23:             checkout {",
          "24:                 id",
          "25:                 token",
          "26:             }",
          "27:         }",
          "28:     }",
          "29: \"\"\"",
          "32: @patch(\"saleor.graphql.checkout.mutations.clean_shipping_method\")",
          "33: def test_checkout_shipping_method_update_by_id(",
          "34:     mock_clean_shipping,",
          "35:     staff_api_client,",
          "36:     shipping_method,",
          "37:     checkout_with_item,",
          "38: ):",
          "39:     checkout = checkout_with_item",
          "40:     old_shipping_method = checkout.shipping_method",
          "41:     query = MUTATION_UPDATE_SHIPPING_METHOD",
          "42:     mock_clean_shipping.return_value = True",
          "44:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "45:     method_id = graphene.Node.to_global_id(\"ShippingMethod\", shipping_method.id)",
          "47:     response = staff_api_client.post_graphql(",
          "48:         query, {\"checkoutId\": checkout_id, \"shippingMethodId\": method_id}",
          "49:     )",
          "50:     data = get_graphql_content(response)[\"data\"][\"checkoutShippingMethodUpdate\"]",
          "52:     checkout.refresh_from_db()",
          "54:     manager = get_plugins_manager()",
          "55:     lines = fetch_checkout_lines(checkout)",
          "56:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "57:     checkout_info.shipping_method = old_shipping_method",
          "58:     checkout_info.shipping_method_channel_listings = None",
          "59:     mock_clean_shipping.assert_called_once_with(",
          "60:         checkout_info=checkout_info, lines=lines, method=shipping_method",
          "61:     )",
          "62:     errors = data[\"errors\"]",
          "63:     assert not errors",
          "64:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "65:     assert checkout.shipping_method == shipping_method",
          "68: @patch(\"saleor.graphql.checkout.mutations.clean_shipping_method\")",
          "69: def test_checkout_shipping_method_update_by_token(",
          "70:     mock_clean_shipping,",
          "71:     staff_api_client,",
          "72:     shipping_method,",
          "73:     checkout_with_item,",
          "74: ):",
          "75:     checkout = checkout_with_item",
          "76:     old_shipping_method = checkout.shipping_method",
          "77:     query = MUTATION_UPDATE_SHIPPING_METHOD",
          "78:     mock_clean_shipping.return_value = True",
          "80:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "81:     method_id = graphene.Node.to_global_id(\"ShippingMethod\", shipping_method.id)",
          "83:     response = staff_api_client.post_graphql(",
          "84:         query, {\"checkoutId\": checkout_id, \"shippingMethodId\": method_id}",
          "85:     )",
          "86:     data = get_graphql_content(response)[\"data\"][\"checkoutShippingMethodUpdate\"]",
          "88:     checkout.refresh_from_db()",
          "90:     manager = get_plugins_manager()",
          "91:     lines = fetch_checkout_lines(checkout)",
          "92:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "93:     checkout_info.shipping_method = old_shipping_method",
          "94:     checkout_info.shipping_method_channel_listings = None",
          "95:     mock_clean_shipping.assert_called_once_with(",
          "96:         checkout_info=checkout_info, lines=lines, method=shipping_method",
          "97:     )",
          "98:     errors = data[\"errors\"]",
          "99:     assert not errors",
          "100:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "101:     assert checkout.shipping_method == shipping_method",
          "104: @patch(\"saleor.graphql.checkout.mutations.clean_shipping_method\")",
          "105: def test_checkout_shipping_method_update_neither_token_and_id_given(",
          "106:     mock_clean_shipping, staff_api_client, checkout_with_item, shipping_method",
          "107: ):",
          "108:     query = MUTATION_UPDATE_SHIPPING_METHOD",
          "109:     mock_clean_shipping.return_value = True",
          "111:     method_id = graphene.Node.to_global_id(\"ShippingMethod\", shipping_method.id)",
          "113:     response = staff_api_client.post_graphql(query, {\"shippingMethodId\": method_id})",
          "114:     data = get_graphql_content(response)[\"data\"][\"checkoutShippingMethodUpdate\"]",
          "115:     assert len(data[\"errors\"]) == 1",
          "116:     assert not data[\"checkout\"]",
          "117:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "120: @patch(\"saleor.graphql.checkout.mutations.clean_shipping_method\")",
          "121: def test_checkout_shipping_method_update_both_token_and_id_given(",
          "122:     mock_clean_shipping, staff_api_client, checkout_with_item, shipping_method",
          "123: ):",
          "124:     checkout = checkout_with_item",
          "125:     query = MUTATION_UPDATE_SHIPPING_METHOD",
          "126:     mock_clean_shipping.return_value = True",
          "128:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "129:     method_id = graphene.Node.to_global_id(\"ShippingMethod\", shipping_method.id)",
          "131:     response = staff_api_client.post_graphql(",
          "132:         query,",
          "133:         {",
          "134:             \"checkoutId\": checkout_id,",
          "135:             \"token\": checkout_with_item.token,",
          "136:             \"shippingMethodId\": method_id,",
          "137:         },",
          "138:     )",
          "139:     data = get_graphql_content(response)[\"data\"][\"checkoutShippingMethodUpdate\"]",
          "141:     assert len(data[\"errors\"]) == 1",
          "142:     assert not data[\"checkout\"]",
          "143:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/deprecated/test_customer_detach_mutation.py||saleor/graphql/checkout/tests/deprecated/test_customer_detach_mutation.py": [
          "File: saleor/graphql/checkout/tests/deprecated/test_customer_detach_mutation.py -> saleor/graphql/checkout/tests/deprecated/test_customer_detach_mutation.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import graphene",
          "3: from .....checkout.error_codes import CheckoutErrorCode",
          "4: from ....tests.utils import get_graphql_content",
          "6: MUTATION_CHECKOUT_CUSTOMER_DETACH = \"\"\"",
          "7:     mutation checkoutCustomerDetach($checkoutId: ID, $token: UUID) {",
          "8:         checkoutCustomerDetach(checkoutId: $checkoutId, token: $token) {",
          "9:             checkout {",
          "10:                 token",
          "11:             }",
          "12:             errors {",
          "13:                 field",
          "14:                 message",
          "15:                 code",
          "16:             }",
          "17:         }",
          "18:     }",
          "19:     \"\"\"",
          "22: def test_checkout_customer_detach_by_id(",
          "23:     user_api_client, checkout_with_item, customer_user",
          "24: ):",
          "25:     checkout = checkout_with_item",
          "26:     checkout.user = customer_user",
          "27:     checkout.save(update_fields=[\"user\"])",
          "29:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "30:     variables = {\"checkoutId\": checkout_id}",
          "32:     # Mutation should succeed if the user owns this checkout.",
          "33:     response = user_api_client.post_graphql(",
          "34:         MUTATION_CHECKOUT_CUSTOMER_DETACH, variables",
          "35:     )",
          "36:     content = get_graphql_content(response)",
          "37:     data = content[\"data\"][\"checkoutCustomerDetach\"]",
          "38:     assert not data[\"errors\"]",
          "39:     checkout.refresh_from_db()",
          "40:     assert checkout.user is None",
          "43: def test_checkout_customer_detach_neither_token_and_id_given(",
          "44:     user_api_client, checkout_with_item, customer_user",
          "45: ):",
          "46:     checkout = checkout_with_item",
          "47:     checkout.user = customer_user",
          "48:     checkout.save(update_fields=[\"user\"])",
          "50:     # Mutation should succeed if the user owns this checkout.",
          "51:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_CUSTOMER_DETACH, {})",
          "52:     content = get_graphql_content(response)",
          "53:     data = content[\"data\"][\"checkoutCustomerDetach\"]",
          "54:     assert len(data[\"errors\"]) == 1",
          "55:     assert not data[\"checkout\"]",
          "56:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "59: def test_checkout_customer_detach_both_token_and_id_given(",
          "60:     user_api_client, checkout_with_item, customer_user",
          "61: ):",
          "62:     checkout = checkout_with_item",
          "63:     checkout.user = customer_user",
          "64:     checkout.save(update_fields=[\"user\"])",
          "66:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "67:     variables = {\"checkoutId\": checkout_id, \"token\": checkout.token}",
          "69:     # Mutation should succeed if the user owns this checkout.",
          "70:     response = user_api_client.post_graphql(",
          "71:         MUTATION_CHECKOUT_CUSTOMER_DETACH, variables",
          "72:     )",
          "73:     content = get_graphql_content(response)",
          "74:     data = content[\"data\"][\"checkoutCustomerDetach\"]",
          "75:     assert len(data[\"errors\"]) == 1",
          "76:     assert not data[\"checkout\"]",
          "77:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/test_checkout.py||saleor/graphql/checkout/tests/test_checkout.py": [
          "File: saleor/graphql/checkout/tests/test_checkout.py -> saleor/graphql/checkout/tests/test_checkout.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1437:     assert data[\"availableShippingMethods\"] == []",
          "1877: def test_create_checkout_with_unpublished_product(",
          "1878:     user_api_client, checkout_with_item, stock, channel_USD",
          "1879: ):",
          "",
          "[Removed Lines]",
          "1440: MUTATION_CHECKOUT_LINES_ADD = \"\"\"",
          "1441:     mutation checkoutLinesAdd(",
          "1442:             $checkoutId: ID!, $lines: [CheckoutLineInput!]!) {",
          "1443:         checkoutLinesAdd(checkoutId: $checkoutId, lines: $lines) {",
          "1444:             checkout {",
          "1445:                 token",
          "1446:                 quantity",
          "1447:                 lines {",
          "1448:                     quantity",
          "1449:                     variant {",
          "1450:                         id",
          "1451:                     }",
          "1452:                 }",
          "1453:             }",
          "1454:             errors {",
          "1455:                 field",
          "1456:                 code",
          "1457:                 message",
          "1458:                 variants",
          "1459:             }",
          "1460:         }",
          "1461:     }\"\"\"",
          "1464: @mock.patch(",
          "1465:     \"saleor.graphql.checkout.mutations.update_checkout_shipping_method_if_invalid\",",
          "1466:     wraps=update_checkout_shipping_method_if_invalid,",
          "1467: )",
          "1468: def test_checkout_lines_add(",
          "1469:     mocked_update_shipping_method, user_api_client, checkout_with_item, stock",
          "1470: ):",
          "1471:     variant = stock.product_variant",
          "1472:     checkout = checkout_with_item",
          "1473:     line = checkout.lines.first()",
          "1474:     lines = fetch_checkout_lines(checkout)",
          "1475:     assert calculate_checkout_quantity(lines) == 3",
          "1476:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1477:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1479:     variables = {",
          "1480:         \"checkoutId\": checkout_id,",
          "1481:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1482:         \"channelSlug\": checkout.channel.slug,",
          "1483:     }",
          "1484:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "1485:     content = get_graphql_content(response)",
          "1486:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "1487:     assert not data[\"errors\"]",
          "1488:     checkout.refresh_from_db()",
          "1489:     lines = fetch_checkout_lines(checkout)",
          "1490:     line = checkout.lines.latest(\"pk\")",
          "1491:     assert line.variant == variant",
          "1492:     assert line.quantity == 1",
          "1493:     assert calculate_checkout_quantity(lines) == 4",
          "1495:     manager = get_plugins_manager()",
          "1496:     lines = fetch_checkout_lines(checkout)",
          "1497:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "1498:     mocked_update_shipping_method.assert_called_once_with(checkout_info, lines)",
          "1501: def test_checkout_lines_add_with_unavailable_variant(",
          "1502:     user_api_client, checkout_with_item, stock",
          "1503: ):",
          "1504:     variant = stock.product_variant",
          "1505:     variant.channel_listings.filter(channel=checkout_with_item.channel).update(",
          "1506:         price_amount=None",
          "1507:     )",
          "1508:     checkout = checkout_with_item",
          "1509:     line = checkout.lines.first()",
          "1510:     assert line.quantity == 3",
          "1511:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1512:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1514:     variables = {",
          "1515:         \"checkoutId\": checkout_id,",
          "1516:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1517:         \"channelSlug\": checkout.channel.slug,",
          "1518:     }",
          "1519:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "1520:     content = get_graphql_content(response)",
          "1521:     errors = content[\"data\"][\"checkoutLinesAdd\"][\"errors\"]",
          "1522:     assert errors[0][\"code\"] == CheckoutErrorCode.UNAVAILABLE_VARIANT_IN_CHANNEL.name",
          "1523:     assert errors[0][\"field\"] == \"lines\"",
          "1524:     assert errors[0][\"variants\"] == [variant_id]",
          "1527: def test_checkout_lines_add_with_zero_quantity(",
          "1528:     user_api_client, checkout_with_item, stock",
          "1529: ):",
          "1530:     variant = stock.product_variant",
          "1531:     checkout = checkout_with_item",
          "1532:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1533:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1535:     variables = {",
          "1536:         \"checkoutId\": checkout_id,",
          "1537:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 0}],",
          "1538:         \"channelSlug\": checkout.channel.slug,",
          "1539:     }",
          "1540:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "1541:     content = get_graphql_content(response)",
          "1542:     errors = content[\"data\"][\"checkoutLinesAdd\"][\"errors\"]",
          "1543:     assert errors[0][\"code\"] == CheckoutErrorCode.ZERO_QUANTITY.name",
          "1544:     assert errors[0][\"field\"] == \"quantity\"",
          "1547: def test_checkout_lines_add_no_channel_shipping_zones(",
          "1548:     user_api_client, checkout_with_item, stock",
          "1549: ):",
          "1550:     variant = stock.product_variant",
          "1551:     checkout = checkout_with_item",
          "1552:     checkout.channel.shipping_zones.clear()",
          "1553:     line = checkout.lines.first()",
          "1554:     assert line.quantity == 3",
          "1555:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1556:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1558:     variables = {",
          "1559:         \"checkoutId\": checkout_id,",
          "1560:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1561:         \"channelSlug\": checkout.channel.slug,",
          "1562:     }",
          "1563:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "1564:     content = get_graphql_content(response)",
          "1566:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "1567:     errors = data[\"errors\"]",
          "1568:     assert len(errors) == 1",
          "1569:     assert errors[0][\"code\"] == CheckoutErrorCode.INSUFFICIENT_STOCK.name",
          "1570:     assert errors[0][\"field\"] == \"quantity\"",
          "1573: def test_checkout_lines_add_with_unpublished_product(",
          "1574:     user_api_client, checkout_with_item, stock, channel_USD",
          "1575: ):",
          "1576:     variant = stock.product_variant",
          "1577:     product = variant.product",
          "1578:     ProductChannelListing.objects.filter(product=product, channel=channel_USD).update(",
          "1579:         is_published=False",
          "1580:     )",
          "1582:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1583:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "1585:     variables = {",
          "1586:         \"checkoutId\": checkout_id,",
          "1587:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1588:         \"channelSlug\": checkout_with_item.channel.slug,",
          "1589:     }",
          "1591:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "1593:     content = get_graphql_content(response)",
          "1594:     error = content[\"data\"][\"checkoutLinesAdd\"][\"errors\"][0]",
          "1595:     assert error[\"code\"] == CheckoutErrorCode.PRODUCT_NOT_PUBLISHED.name",
          "1598: def test_checkout_lines_add_with_unavailable_for_purchase_product(",
          "1599:     user_api_client, checkout_with_item, stock",
          "1600: ):",
          "1601:     # given",
          "1602:     variant = stock.product_variant",
          "1603:     product = stock.product_variant.product",
          "1604:     product.channel_listings.update(available_for_purchase=None)",
          "1606:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1607:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "1609:     variables = {",
          "1610:         \"checkoutId\": checkout_id,",
          "1611:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1612:     }",
          "1614:     # when",
          "1615:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "1617:     # then",
          "1618:     content = get_graphql_content(response)",
          "1619:     error = content[\"data\"][\"checkoutLinesAdd\"][\"errors\"][0]",
          "1620:     assert error[\"field\"] == \"lines\"",
          "1621:     assert error[\"code\"] == CheckoutErrorCode.PRODUCT_UNAVAILABLE_FOR_PURCHASE.name",
          "1622:     assert error[\"variants\"] == [variant_id]",
          "1625: def test_checkout_lines_add_with_available_for_purchase_from_tomorrow_product(",
          "1626:     user_api_client, checkout_with_item, stock",
          "1627: ):",
          "1628:     # given",
          "1629:     variant = stock.product_variant",
          "1630:     product = stock.product_variant.product",
          "1631:     product.channel_listings.update(",
          "1632:         available_for_purchase=datetime.date.today() + datetime.timedelta(days=1)",
          "1633:     )",
          "1635:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1636:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "1638:     variables = {",
          "1639:         \"checkoutId\": checkout_id,",
          "1640:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1641:     }",
          "1643:     # when",
          "1644:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "1646:     # then",
          "1647:     content = get_graphql_content(response)",
          "1648:     error = content[\"data\"][\"checkoutLinesAdd\"][\"errors\"][0]",
          "1649:     assert error[\"field\"] == \"lines\"",
          "1650:     assert error[\"code\"] == CheckoutErrorCode.PRODUCT_UNAVAILABLE_FOR_PURCHASE.name",
          "1651:     assert error[\"variants\"] == [variant_id]",
          "1654: def test_checkout_lines_add_too_many(user_api_client, checkout_with_item, stock):",
          "1655:     variant = stock.product_variant",
          "1656:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1657:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "1659:     variables = {",
          "1660:         \"checkoutId\": checkout_id,",
          "1661:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 51}],",
          "1662:         \"channelSlug\": checkout_with_item.channel.slug,",
          "1663:     }",
          "1664:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "1665:     content = get_graphql_content(response)[\"data\"][\"checkoutLinesAdd\"]",
          "1667:     assert content[\"errors\"]",
          "1668:     assert content[\"errors\"] == [",
          "1669:         {",
          "1670:             \"field\": \"quantity\",",
          "1671:             \"message\": \"Cannot add more than 50 times this item.\",",
          "1672:             \"code\": \"QUANTITY_GREATER_THAN_LIMIT\",",
          "1673:             \"variants\": None,",
          "1674:         }",
          "1675:     ]",
          "1678: def test_checkout_lines_add_empty_checkout(user_api_client, checkout, stock):",
          "1679:     variant = stock.product_variant",
          "1680:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1681:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1683:     variables = {",
          "1684:         \"checkoutId\": checkout_id,",
          "1685:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1686:     }",
          "1687:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "1688:     content = get_graphql_content(response)",
          "1689:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "1690:     assert not data[\"errors\"]",
          "1691:     checkout.refresh_from_db()",
          "1692:     line = checkout.lines.first()",
          "1693:     assert line.variant == variant",
          "1694:     assert line.quantity == 1",
          "1697: def test_checkout_lines_add_variant_without_inventory_tracking(",
          "1698:     user_api_client, checkout, variant_without_inventory_tracking",
          "1699: ):",
          "1700:     variant = variant_without_inventory_tracking",
          "1701:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1702:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1704:     variables = {",
          "1705:         \"checkoutId\": checkout_id,",
          "1706:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1707:     }",
          "1708:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "1709:     content = get_graphql_content(response)",
          "1710:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "1711:     assert not data[\"errors\"]",
          "1712:     checkout.refresh_from_db()",
          "1713:     line = checkout.lines.first()",
          "1714:     assert line.variant == variant",
          "1715:     assert line.quantity == 1",
          "1718: def test_checkout_lines_add_check_lines_quantity(user_api_client, checkout, stock):",
          "1719:     variant = stock.product_variant",
          "1720:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1721:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1723:     variables = {",
          "1724:         \"checkoutId\": checkout_id,",
          "1725:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 16}],",
          "1726:     }",
          "1727:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "1728:     content = get_graphql_content(response)",
          "1729:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "1730:     assert data[\"errors\"][0][\"message\"] == (",
          "1731:         \"Could not add items SKU_A. Only 15 remaining in stock.\"",
          "1732:     )",
          "1733:     assert data[\"errors\"][0][\"field\"] == \"quantity\"",
          "1736: def test_checkout_lines_invalid_variant_id(user_api_client, checkout, stock):",
          "1737:     variant = stock.product_variant",
          "1738:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1739:     invalid_variant_id = \"InvalidId\"",
          "1740:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1742:     variables = {",
          "1743:         \"checkoutId\": checkout_id,",
          "1744:         \"lines\": [",
          "1745:             {\"variantId\": variant_id, \"quantity\": 1},",
          "1746:             {\"variantId\": invalid_variant_id, \"quantity\": 3},",
          "1747:         ],",
          "1748:     }",
          "1749:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "1750:     content = get_graphql_content(response)",
          "1751:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "1752:     error_msg = \"Could not resolve to a node with the global id list of '%s'.\"",
          "1753:     assert data[\"errors\"][0][\"message\"] == error_msg % [invalid_variant_id]",
          "1754:     assert data[\"errors\"][0][\"field\"] == \"variantId\"",
          "1757: MUTATION_CHECKOUT_LINES_UPDATE = \"\"\"",
          "1758:     mutation checkoutLinesUpdate(",
          "1759:             $checkoutId: ID!, $lines: [CheckoutLineInput!]!) {",
          "1760:         checkoutLinesUpdate(checkoutId: $checkoutId, lines: $lines) {",
          "1761:             checkout {",
          "1762:                 token",
          "1763:                 quantity",
          "1764:                 lines {",
          "1765:                     quantity",
          "1766:                     variant {",
          "1767:                         id",
          "1768:                     }",
          "1769:                 }",
          "1770:             }",
          "1771:             errors {",
          "1772:                 field",
          "1773:                 code",
          "1774:                 message",
          "1775:                 variants",
          "1776:             }",
          "1777:         }",
          "1778:     }",
          "1779:     \"\"\"",
          "1782: @mock.patch(",
          "1783:     \"saleor.graphql.checkout.mutations.update_checkout_shipping_method_if_invalid\",",
          "1784:     wraps=update_checkout_shipping_method_if_invalid,",
          "1785: )",
          "1786: def test_checkout_lines_update(",
          "1787:     mocked_update_shipping_method, user_api_client, checkout_with_item",
          "1788: ):",
          "1789:     checkout = checkout_with_item",
          "1790:     lines = fetch_checkout_lines(checkout)",
          "1791:     assert checkout.lines.count() == 1",
          "1792:     assert calculate_checkout_quantity(lines) == 3",
          "1793:     line = checkout.lines.first()",
          "1794:     variant = line.variant",
          "1795:     assert line.quantity == 3",
          "1797:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1798:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1800:     variables = {",
          "1801:         \"checkoutId\": checkout_id,",
          "1802:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1803:     }",
          "1804:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "1805:     content = get_graphql_content(response)",
          "1807:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "1808:     assert not data[\"errors\"]",
          "1809:     checkout.refresh_from_db()",
          "1810:     lines = fetch_checkout_lines(checkout)",
          "1811:     assert checkout.lines.count() == 1",
          "1812:     line = checkout.lines.first()",
          "1813:     assert line.variant == variant",
          "1814:     assert line.quantity == 1",
          "1815:     assert calculate_checkout_quantity(lines) == 1",
          "1817:     manager = get_plugins_manager()",
          "1818:     lines = fetch_checkout_lines(checkout)",
          "1819:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "1820:     mocked_update_shipping_method.assert_called_once_with(checkout_info, lines)",
          "1823: def test_checkout_lines_update_with_unavailable_variant(",
          "1824:     user_api_client, checkout_with_item",
          "1825: ):",
          "1826:     checkout = checkout_with_item",
          "1827:     assert checkout.lines.count() == 1",
          "1828:     line = checkout.lines.first()",
          "1829:     variant = line.variant",
          "1830:     variant.channel_listings.filter(channel=checkout_with_item.channel).update(",
          "1831:         price_amount=None",
          "1832:     )",
          "1833:     assert line.quantity == 3",
          "1835:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1836:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1838:     variables = {",
          "1839:         \"checkoutId\": checkout_id,",
          "1840:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1841:     }",
          "1842:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "1843:     content = get_graphql_content(response)",
          "1845:     errors = content[\"data\"][\"checkoutLinesUpdate\"][\"errors\"]",
          "1846:     assert errors[0][\"code\"] == CheckoutErrorCode.UNAVAILABLE_VARIANT_IN_CHANNEL.name",
          "1847:     assert errors[0][\"field\"] == \"lines\"",
          "1848:     assert errors[0][\"variants\"] == [variant_id]",
          "1851: def test_checkout_lines_update_channel_without_shipping_zones(",
          "1852:     user_api_client, checkout_with_item",
          "1853: ):",
          "1854:     checkout = checkout_with_item",
          "1855:     checkout.channel.shipping_zones.clear()",
          "1856:     assert checkout.lines.count() == 1",
          "1857:     line = checkout.lines.first()",
          "1858:     variant = line.variant",
          "1859:     assert line.quantity == 3",
          "1861:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1862:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1864:     variables = {",
          "1865:         \"checkoutId\": checkout_id,",
          "1866:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1867:     }",
          "1868:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "1869:     content = get_graphql_content(response)",
          "1870:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "1871:     errors = data[\"errors\"]",
          "1872:     assert len(errors) == 1",
          "1873:     assert errors[0][\"code\"] == CheckoutErrorCode.INSUFFICIENT_STOCK.name",
          "1874:     assert errors[0][\"field\"] == \"quantity\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1909:     assert error[\"code\"] == CheckoutErrorCode.PRODUCT_NOT_PUBLISHED.name",
          "2079: def test_checkout_customer_attach(",
          "2080:     api_client, user_api_client, checkout_with_item, customer_user",
          "2081: ):",
          "",
          "[Removed Lines]",
          "1912: def test_checkout_lines_update_with_unpublished_product(",
          "1913:     user_api_client, checkout_with_item, channel_USD",
          "1914: ):",
          "1915:     checkout = checkout_with_item",
          "1916:     line = checkout.lines.first()",
          "1917:     variant = line.variant",
          "1918:     product = variant.product",
          "1919:     ProductChannelListing.objects.filter(product=product, channel=channel_USD).update(",
          "1920:         is_published=False",
          "1921:     )",
          "1923:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1924:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1926:     variables = {",
          "1927:         \"checkoutId\": checkout_id,",
          "1928:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1929:     }",
          "1930:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "1932:     content = get_graphql_content(response)",
          "1933:     error = content[\"data\"][\"checkoutLinesUpdate\"][\"errors\"][0]",
          "1934:     assert error[\"code\"] == CheckoutErrorCode.PRODUCT_NOT_PUBLISHED.name",
          "1937: def test_checkout_lines_update_invalid_checkout_id(user_api_client):",
          "1938:     variables = {\"checkoutId\": \"test\", \"lines\": []}",
          "1939:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "1940:     content = get_graphql_content(response)",
          "1941:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "1942:     assert data[\"errors\"][0][\"field\"] == \"checkoutId\"",
          "1945: def test_checkout_lines_update_check_lines_quantity(",
          "1946:     user_api_client, checkout_with_item",
          "1947: ):",
          "1948:     checkout = checkout_with_item",
          "1949:     line = checkout.lines.first()",
          "1950:     variant = line.variant",
          "1952:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1953:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1955:     variables = {",
          "1956:         \"checkoutId\": checkout_id,",
          "1957:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 11}],",
          "1958:     }",
          "1959:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "1960:     content = get_graphql_content(response)",
          "1962:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "1963:     assert data[\"errors\"][0][\"message\"] == (",
          "1964:         \"Could not add items 123. Only 10 remaining in stock.\"",
          "1965:     )",
          "1966:     assert data[\"errors\"][0][\"field\"] == \"quantity\"",
          "1969: def test_checkout_lines_update_with_chosen_shipping(",
          "1970:     user_api_client, checkout, stock, address, shipping_method",
          "1971: ):",
          "1972:     checkout.shipping_address = address",
          "1973:     checkout.shipping_method = shipping_method",
          "1974:     checkout.save()",
          "1976:     variant = stock.product_variant",
          "1977:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "1978:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1979:     variables = {",
          "1980:         \"checkoutId\": checkout_id,",
          "1981:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "1982:     }",
          "1983:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "1984:     content = get_graphql_content(response)",
          "1986:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "1987:     assert not data[\"errors\"]",
          "1988:     checkout.refresh_from_db()",
          "1989:     lines = fetch_checkout_lines(checkout)",
          "1990:     assert calculate_checkout_quantity(lines) == 1",
          "1993: MUTATION_CHECKOUT_LINES_DELETE = \"\"\"",
          "1994:     mutation checkoutLineDelete($checkoutId: ID!, $lineId: ID!) {",
          "1995:         checkoutLineDelete(checkoutId: $checkoutId, lineId: $lineId) {",
          "1996:             checkout {",
          "1997:                 token",
          "1998:                 lines {",
          "1999:                     quantity",
          "2000:                     variant {",
          "2001:                         id",
          "2002:                     }",
          "2003:                 }",
          "2004:             }",
          "2005:             errors {",
          "2006:                 field",
          "2007:                 message",
          "2008:             }",
          "2009:         }",
          "2010:     }",
          "2011: \"\"\"",
          "2014: @mock.patch(",
          "2015:     \"saleor.graphql.checkout.mutations.update_checkout_shipping_method_if_invalid\",",
          "2016:     wraps=update_checkout_shipping_method_if_invalid,",
          "2017: )",
          "2018: def test_checkout_line_delete(",
          "2019:     mocked_update_shipping_method, user_api_client, checkout_with_item",
          "2020: ):",
          "2021:     checkout = checkout_with_item",
          "2022:     lines = fetch_checkout_lines(checkout)",
          "2023:     assert calculate_checkout_quantity(lines) == 3",
          "2024:     assert checkout.lines.count() == 1",
          "2025:     line = checkout.lines.first()",
          "2026:     assert line.quantity == 3",
          "2028:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2029:     line_id = graphene.Node.to_global_id(\"CheckoutLine\", line.pk)",
          "2031:     variables = {\"checkoutId\": checkout_id, \"lineId\": line_id}",
          "2032:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_DELETE, variables)",
          "2033:     content = get_graphql_content(response)",
          "2035:     data = content[\"data\"][\"checkoutLineDelete\"]",
          "2036:     assert not data[\"errors\"]",
          "2037:     checkout.refresh_from_db()",
          "2038:     lines = fetch_checkout_lines(checkout)",
          "2039:     assert checkout.lines.count() == 0",
          "2040:     assert calculate_checkout_quantity(lines) == 0",
          "2041:     manager = get_plugins_manager()",
          "2042:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "2043:     mocked_update_shipping_method.assert_called_once_with(checkout_info, lines)",
          "2046: @mock.patch(",
          "2047:     \"saleor.graphql.checkout.mutations.update_checkout_shipping_method_if_invalid\",",
          "2048:     wraps=update_checkout_shipping_method_if_invalid,",
          "2049: )",
          "2050: def test_checkout_line_delete_by_zero_quantity(",
          "2051:     mocked_update_shipping_method, user_api_client, checkout_with_item",
          "2052: ):",
          "2053:     checkout = checkout_with_item",
          "2054:     assert checkout.lines.count() == 1",
          "2055:     line = checkout.lines.first()",
          "2056:     variant = line.variant",
          "2057:     assert line.quantity == 3",
          "2059:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "2060:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2062:     variables = {",
          "2063:         \"checkoutId\": checkout_id,",
          "2064:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 0}],",
          "2065:     }",
          "2066:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "2067:     content = get_graphql_content(response)",
          "2069:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "2070:     assert not data[\"errors\"]",
          "2071:     checkout.refresh_from_db()",
          "2072:     assert checkout.lines.count() == 0",
          "2073:     manager = get_plugins_manager()",
          "2074:     lines = fetch_checkout_lines(checkout)",
          "2075:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "2076:     mocked_update_shipping_method.assert_called_once_with(checkout_info, lines)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2085:     assert checkout.user is None",
          "2087:     query = \"\"\"",
          "2090:                 checkout {",
          "2091:                     token",
          "2092:                 }",
          "",
          "[Removed Lines]",
          "2088:         mutation checkoutCustomerAttach($checkoutId: ID!) {",
          "2089:             checkoutCustomerAttach(checkoutId: $checkoutId) {",
          "",
          "[Added Lines]",
          "1484:         mutation checkoutCustomerAttach($token: UUID) {",
          "1485:             checkoutCustomerAttach(token: $token) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2097:             }",
          "2098:         }",
          "2099:     \"\"\"",
          "2101:     customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)",
          "2104:     # Mutation should fail for unauthenticated customers",
          "2105:     response = api_client.post_graphql(query, variables)",
          "",
          "[Removed Lines]",
          "2100:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2102:     variables = {\"checkoutId\": checkout_id, \"customerId\": customer_id}",
          "",
          "[Added Lines]",
          "1497:     variables = {\"token\": checkout.token, \"customerId\": customer_id}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2118: MUTATION_CHECKOUT_CUSTOMER_DETACH = \"\"\"",
          "2121:             checkout {",
          "2122:                 token",
          "2123:             }",
          "",
          "[Removed Lines]",
          "2119:     mutation checkoutCustomerDetach($checkoutId: ID!) {",
          "2120:         checkoutCustomerDetach(checkoutId: $checkoutId) {",
          "",
          "[Added Lines]",
          "1514:     mutation checkoutCustomerDetach($token: UUID) {",
          "1515:         checkoutCustomerDetach(token: $token) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2135:     checkout.user = customer_user",
          "2136:     checkout.save(update_fields=[\"user\"])",
          "2141:     # Mutation should succeed if the user owns this checkout.",
          "2142:     response = user_api_client.post_graphql(",
          "",
          "[Removed Lines]",
          "2138:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2139:     variables = {\"checkoutId\": checkout_id}",
          "",
          "[Added Lines]",
          "1533:     variables = {\"token\": checkout.token}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2161: MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE = \"\"\"",
          "2162:     mutation checkoutShippingAddressUpdate(",
          "2164:         checkoutShippingAddressUpdate(",
          "2166:             checkout {",
          "2167:                 token,",
          "2168:                 id",
          "",
          "[Removed Lines]",
          "2163:             $checkoutId: ID!, $shippingAddress: AddressInput!) {",
          "2165:                 checkoutId: $checkoutId, shippingAddress: $shippingAddress) {",
          "",
          "[Added Lines]",
          "1557:             $token: UUID, $shippingAddress: AddressInput!) {",
          "1559:                 token: $token, shippingAddress: $shippingAddress) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2188: ):",
          "2189:     checkout = checkout_with_item",
          "2190:     assert checkout.shipping_address is None",
          "2193:     shipping_address = graphql_address_data",
          "2196:     response = user_api_client.post_graphql(",
          "2197:         MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE, variables",
          "",
          "[Removed Lines]",
          "2191:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2194:     variables = {\"checkoutId\": checkout_id, \"shippingAddress\": shipping_address}",
          "",
          "[Added Lines]",
          "1587:     variables = {\"token\": checkout_with_item.token, \"shippingAddress\": shipping_address}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2236:     checkout_info = fetch_checkout_info(checkout, [], [], get_plugins_manager())",
          "2237:     add_variant_to_checkout(checkout_info, variant, 1)",
          "2238:     assert checkout.shipping_address is None",
          "2241:     shipping_address = graphql_address_data",
          "2242:     shipping_address[\"country\"] = \"US\"",
          "2243:     shipping_address[\"countryArea\"] = \"New York\"",
          "2244:     shipping_address[\"postalCode\"] = \"10001\"",
          "2247:     response = user_api_client.post_graphql(",
          "2248:         MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE, variables",
          "",
          "[Removed Lines]",
          "2239:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2245:     variables = {\"checkoutId\": checkout_id, \"shippingAddress\": shipping_address}",
          "",
          "[Added Lines]",
          "1637:     variables = {\"token\": checkout.token, \"shippingAddress\": shipping_address}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2291:         warehouse__shipping_zones__countries__contains=\"US\", product_variant=variant",
          "2292:     ).update(quantity=0)",
          "2293:     assert checkout.shipping_address is None",
          "2296:     shipping_address = graphql_address_data",
          "2297:     shipping_address[\"country\"] = \"US\"",
          "2298:     shipping_address[\"countryArea\"] = \"New York\"",
          "2299:     shipping_address[\"postalCode\"] = \"10001\"",
          "2302:     response = user_api_client.post_graphql(",
          "2303:         MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE, variables",
          "",
          "[Removed Lines]",
          "2294:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2300:     variables = {\"checkoutId\": checkout_id, \"shippingAddress\": shipping_address}",
          "",
          "[Added Lines]",
          "1691:     variables = {\"token\": checkout.token, \"shippingAddress\": shipping_address}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2317:     checkout = checkout_with_item",
          "2318:     checkout.channel.shipping_zones.clear()",
          "2319:     assert checkout.shipping_address is None",
          "2322:     shipping_address = graphql_address_data",
          "2325:     response = user_api_client.post_graphql(",
          "2326:         MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE, variables",
          "",
          "[Removed Lines]",
          "2320:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2323:     variables = {\"checkoutId\": checkout_id, \"shippingAddress\": shipping_address}",
          "",
          "[Added Lines]",
          "1713:     variables = {\"token\": checkout.token, \"shippingAddress\": shipping_address}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2345:         user_api_client.post_graphql(",
          "2346:             MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE,",
          "2347:             {",
          "2349:                 \"shippingAddress\": shipping_address,",
          "2350:             },",
          "2351:         )",
          "",
          "[Removed Lines]",
          "2348:                 \"checkoutId\": graphene.Node.to_global_id(\"Checkout\", checkout.pk),",
          "",
          "[Added Lines]",
          "1738:                 \"token\": checkout.token,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2368: ):",
          "2369:     checkout = checkout_with_item",
          "2370:     assert checkout.shipping_address is None",
          "2373:     shipping_address = graphql_address_data",
          "2374:     shipping_address[\"phone\"] = number",
          "2377:     response = user_api_client.post_graphql(",
          "2378:         MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE, variables",
          "",
          "[Removed Lines]",
          "2371:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2375:     variables = {\"checkoutId\": checkout_id, \"shippingAddress\": shipping_address}",
          "",
          "[Added Lines]",
          "1764:     variables = {\"token\": checkout.token, \"shippingAddress\": shipping_address}",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2387: ):",
          "2388:     checkout = checkout_with_item",
          "2389:     assert checkout.shipping_address is None",
          "2392:     shipping_address = graphql_address_data",
          "2393:     shipping_address[\"phone\"] = \"+1-202-555-0132\"",
          "2396:     response = user_api_client.post_graphql(",
          "2397:         MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE, variables",
          "",
          "[Removed Lines]",
          "2390:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2394:     variables = {\"checkoutId\": checkout_id, \"shippingAddress\": shipping_address}",
          "",
          "[Added Lines]",
          "1782:     variables = {\"token\": checkout.token, \"shippingAddress\": shipping_address}",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2406: ):",
          "2407:     checkout = checkout_with_item",
          "2408:     assert checkout.shipping_address is None",
          "2411:     query = \"\"\"",
          "2412:     mutation checkoutBillingAddressUpdate(",
          "2414:         checkoutBillingAddressUpdate(",
          "2416:             checkout {",
          "2417:                 token,",
          "2418:                 id",
          "",
          "[Removed Lines]",
          "2409:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2413:             $checkoutId: ID!, $billingAddress: AddressInput!) {",
          "2415:                 checkoutId: $checkoutId, billingAddress: $billingAddress) {",
          "",
          "[Added Lines]",
          "1800:             $token: UUID, $billingAddress: AddressInput!) {",
          "1802:                 token: $token, billingAddress: $billingAddress) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2426:     \"\"\"",
          "2427:     billing_address = graphql_address_data",
          "2431:     response = user_api_client.post_graphql(query, variables)",
          "2432:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "2429:     variables = {\"checkoutId\": checkout_id, \"billingAddress\": billing_address}",
          "",
          "[Added Lines]",
          "1816:     variables = {\"token\": checkout_with_item.token, \"billingAddress\": billing_address}",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2450: CHECKOUT_EMAIL_UPDATE_MUTATION = \"\"\"",
          "2453:             checkout {",
          "2454:                 id,",
          "2455:                 email",
          "",
          "[Removed Lines]",
          "2451:     mutation checkoutEmailUpdate($checkoutId: ID!, $email: String!) {",
          "2452:         checkoutEmailUpdate(checkoutId: $checkoutId, email: $email) {",
          "",
          "[Added Lines]",
          "1838:     mutation checkoutEmailUpdate($token: UUID, $email: String!) {",
          "1839:         checkoutEmailUpdate(token: $token, email: $email) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2471: def test_checkout_email_update(user_api_client, checkout_with_item):",
          "2472:     checkout = checkout_with_item",
          "2473:     assert not checkout.email",
          "2476:     email = \"test@example.com\"",
          "2479:     response = user_api_client.post_graphql(CHECKOUT_EMAIL_UPDATE_MUTATION, variables)",
          "2480:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "2474:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2477:     variables = {\"checkoutId\": checkout_id, \"email\": email}",
          "",
          "[Added Lines]",
          "1863:     variables = {\"token\": checkout.token, \"email\": email}",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2487: def test_checkout_email_update_validation(user_api_client, checkout_with_item):",
          "2491:     response = user_api_client.post_graphql(CHECKOUT_EMAIL_UPDATE_MUTATION, variables)",
          "2492:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "2488:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "2489:     variables = {\"checkoutId\": checkout_id, \"email\": \"\"}",
          "",
          "[Added Lines]",
          "1874:     variables = {\"token\": checkout_with_item.token, \"email\": \"\"}",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2830: MUTATION_UPDATE_SHIPPING_METHOD = \"\"\"",
          "2831:     mutation checkoutShippingMethodUpdate(",
          "2833:         checkoutShippingMethodUpdate(",
          "2835:             errors {",
          "2836:                 field",
          "2837:                 message",
          "2838:                 code",
          "2839:             }",
          "2840:             checkout {",
          "2842:             }",
          "2843:         }",
          "2844:     }",
          "",
          "[Removed Lines]",
          "2832:             $checkoutId:ID!, $shippingMethodId:ID!){",
          "2834:             checkoutId:$checkoutId, shippingMethodId:$shippingMethodId) {",
          "2841:                 id",
          "",
          "[Added Lines]",
          "2217:             $token: UUID, $shippingMethodId: ID!){",
          "2219:             token: $token, shippingMethodId: $shippingMethodId) {",
          "2226:                 token",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2859:     query = MUTATION_UPDATE_SHIPPING_METHOD",
          "2860:     mock_clean_shipping.return_value = is_valid_shipping_method",
          "2863:     method_id = graphene.Node.to_global_id(\"ShippingMethod\", shipping_method.id)",
          "2865:     response = staff_api_client.post_graphql(",
          "2867:     )",
          "2868:     data = get_graphql_content(response)[\"data\"][\"checkoutShippingMethodUpdate\"]",
          "",
          "[Removed Lines]",
          "2862:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2866:         query, {\"checkoutId\": checkout_id, \"shippingMethodId\": method_id}",
          "",
          "[Added Lines]",
          "2250:         query, {\"token\": checkout_with_item.token, \"shippingMethodId\": method_id}",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2880:     errors = data[\"errors\"]",
          "2881:     if is_valid_shipping_method:",
          "2882:         assert not errors",
          "2884:         assert checkout.shipping_method == shipping_method",
          "2885:     else:",
          "2886:         assert len(errors) == 1",
          "",
          "[Removed Lines]",
          "2883:         assert data[\"checkout\"][\"id\"] == checkout_id",
          "",
          "[Added Lines]",
          "2267:         assert data[\"checkout\"][\"token\"] == str(checkout_with_item.token)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2905:     query = MUTATION_UPDATE_SHIPPING_METHOD",
          "2906:     mock_is_shipping_method_available.return_value = False",
          "2909:     method_id = graphene.Node.to_global_id(\"ShippingMethod\", shipping_method.id)",
          "2911:     response = staff_api_client.post_graphql(",
          "2913:     )",
          "2914:     data = get_graphql_content(response)[\"data\"][\"checkoutShippingMethodUpdate\"]",
          "",
          "[Removed Lines]",
          "2908:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2912:         query, {\"checkoutId\": checkout_id, \"shippingMethodId\": method_id}",
          "",
          "[Added Lines]",
          "2295:         query, {\"token\": checkout_with_item.token, \"shippingMethodId\": method_id}",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2938:     checkout.save(update_fields=[\"shipping_address\"])",
          "2939:     query = MUTATION_UPDATE_SHIPPING_METHOD",
          "2942:     method_id = graphene.Node.to_global_id(\"ShippingMethod\", shipping_method.id)",
          "2944:     response = staff_api_client.post_graphql(",
          "2946:     )",
          "2947:     data = get_graphql_content(response)[\"data\"][\"checkoutShippingMethodUpdate\"]",
          "",
          "[Removed Lines]",
          "2941:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2945:         query, {\"checkoutId\": checkout_id, \"shippingMethodId\": method_id}",
          "",
          "[Added Lines]",
          "2327:         query, {\"token\": checkout_with_item.token, \"shippingMethodId\": method_id}",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2966:     checkout.save(update_fields=[\"shipping_address\"])",
          "2967:     query = MUTATION_UPDATE_SHIPPING_METHOD",
          "2970:     method_id = graphene.Node.to_global_id(\"ShippingMethod\", shipping_method.id)",
          "2972:     response = staff_api_client.post_graphql(",
          "2974:     )",
          "2975:     data = get_graphql_content(response)[\"data\"][\"checkoutShippingMethodUpdate\"]",
          "",
          "[Removed Lines]",
          "2969:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2973:         query, {\"checkoutId\": checkout_id, \"shippingMethodId\": method_id}",
          "",
          "[Added Lines]",
          "2354:         query, {\"token\": checkout_with_item.token, \"shippingMethodId\": method_id}",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2979:     checkout.refresh_from_db()",
          "2980:     errors = data[\"errors\"]",
          "2981:     assert not errors",
          "2984:     assert checkout.shipping_method == shipping_method",
          "",
          "[Removed Lines]",
          "2982:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "",
          "[Added Lines]",
          "2363:     assert data[\"checkout\"][\"token\"] == str(checkout_with_item.token)",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/test_checkout_complete.py||saleor/graphql/checkout/tests/test_checkout_complete.py": [
          "File: saleor/graphql/checkout/tests/test_checkout_complete.py -> saleor/graphql/checkout/tests/test_checkout_complete.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from decimal import Decimal",
          "2: from unittest.mock import ANY, patch",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import uuid",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: from ...tests.utils import get_graphql_content",
          "23: MUTATION_CHECKOUT_COMPLETE = \"\"\"",
          "26:             order {",
          "27:                 id,",
          "28:                 token",
          "",
          "[Removed Lines]",
          "24:     mutation checkoutComplete($checkoutId: ID!, $redirectUrl: String) {",
          "25:         checkoutComplete(checkoutId: $checkoutId, redirectUrl: $redirectUrl) {",
          "",
          "[Added Lines]",
          "25:     mutation checkoutComplete($token: UUID, $redirectUrl: String) {",
          "26:         checkoutComplete(token: $token, redirectUrl: $redirectUrl) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:     order_with_lines.status = OrderStatus.UNCONFIRMED",
          "76:     order_with_lines.checkout_token = checkout.pk",
          "77:     order_with_lines.save()",
          "80:     checkout.delete()",
          "81:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "",
          "[Removed Lines]",
          "78:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "79:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "79:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:     orders_count = Order.objects.count()",
          "101:     order_with_lines.checkout_token = checkout.pk",
          "102:     order_with_lines.save()",
          "105:     checkout.delete()",
          "106:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "",
          "[Removed Lines]",
          "103:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "104:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "103:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:     channel.save()",
          "129:     order_with_lines.save()",
          "133:     checkout.delete()",
          "134:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "",
          "[Removed Lines]",
          "131:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "132:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "130:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "180:     payment.save()",
          "181:     assert not payment.transactions.exists()",
          "185:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "187:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "183:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "184:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "181:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "235:     assert not payment.transactions.exists()",
          "237:     orders_count = Order.objects.count()",
          "239:     redirect_url = \"https://www.example.com\"",
          "241:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "243:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "238:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "240:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": redirect_url}",
          "",
          "[Added Lines]",
          "236:     variables = {\"token\": checkout.token, \"redirectUrl\": redirect_url}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "298:         price_amount=None",
          "299:     )",
          "302:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", checkout_line_variant.pk)",
          "303:     redirect_url = \"https://www.example.com\"",
          "305:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "307:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "301:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "304:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": redirect_url}",
          "",
          "[Added Lines]",
          "299:     variables = {\"token\": checkout.token, \"redirectUrl\": redirect_url}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "325:     payment.checkout = checkout_ready_to_complete",
          "326:     payment.save()",
          "330:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "331:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "328:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_ready_to_complete.pk)",
          "329:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "323:     variables = {",
          "324:         \"token\": checkout_ready_to_complete.token,",
          "325:         \"redirectUrl\": \"https://www.example.com\",",
          "326:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "380:     assert not payment.transactions.exists()",
          "382:     orders_count = Order.objects.count()",
          "385:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "387:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "383:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "384:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "380:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "449:     assert not payment.transactions.exists()",
          "451:     orders_count = Order.objects.count()",
          "454:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "456:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "452:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "453:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "448:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "525:     assert not payment.transactions.exists()",
          "527:     orders_count = Order.objects.count()",
          "530:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "532:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "528:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "529:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "523:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "598:     assert not payment.transactions.exists()",
          "600:     orders_count = Order.objects.count()",
          "603:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "604:     get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "601:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "602:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "595:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "621:     mocked_process_payment.assert_called_once()",
          "627:     orders_count = Order.objects.count()",
          "628:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "629:     content = get_graphql_content(response)",
          "630:     data = content[\"data\"][\"checkoutComplete\"]",
          "633:     assert orders_count == Order.objects.count()",
          "",
          "[Removed Lines]",
          "624: def test_checkout_complete_invalid_checkout_id(user_api_client):",
          "625:     checkout_id = \"invalidId\"",
          "626:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "631:     assert data[\"errors\"][0][\"message\"] == \"Couldn't resolve id: invalidId.\"",
          "632:     assert data[\"errors\"][0][\"field\"] == \"checkoutId\"",
          "",
          "[Added Lines]",
          "617: def test_checkout_complete_invalid_token(user_api_client):",
          "618:     token = uuid.uuid4()",
          "619:     variables = {\"token\": token, \"redirectUrl\": \"https://www.example.com\"}",
          "624:     assert data[\"errors\"][0][\"message\"] == f\"Couldn't resolve to a node: {token}.\"",
          "625:     assert data[\"errors\"][0][\"field\"] == \"token\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "641:     checkout.shipping_method = shipping_method",
          "642:     checkout.billing_address = address",
          "643:     checkout.save()",
          "646:     orders_count = Order.objects.count()",
          "647:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "648:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "644:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "645:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "637:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "684:     payment.checkout = checkout",
          "685:     payment.save()",
          "689:     orders_count = Order.objects.count()",
          "691:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "",
          "[Removed Lines]",
          "687:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "688:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "679:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "738:     payment.checkout = checkout",
          "739:     payment.save()",
          "742:     orders_count = Order.objects.count()",
          "745:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "746:     content = get_graphql_content(response)",
          "747:     data = content[\"data\"][\"checkoutComplete\"]",
          "",
          "[Removed Lines]",
          "741:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "744:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "734:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "783:     payment.currency = total.gross.currency",
          "784:     payment.checkout = checkout",
          "785:     payment.save()",
          "788:     orders_count = Order.objects.count()",
          "789:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "790:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "786:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "787:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "776:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "831:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "832:     payment.save()",
          "836:     orders_count = Order.objects.count()",
          "838:     # when",
          "",
          "[Removed Lines]",
          "834:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "835:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "823:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "888:     payment.charge_status = ChargeStatus.NOT_CHARGED",
          "889:     payment.save()",
          "893:     orders_count = Order.objects.count()",
          "895:     # when",
          "",
          "[Removed Lines]",
          "891:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "892:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "879:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "944:     assert not payment.transactions.exists()",
          "946:     orders_count = Order.objects.count()",
          "949:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "951:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "947:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "948:     variables = {\"checkoutId\": checkout_id}",
          "",
          "[Added Lines]",
          "934:     variables = {\"token\": checkout.token}",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1010:     assert not payment.transactions.exists()",
          "1012:     orders_count = Order.objects.count()",
          "1016:     # when",
          "1017:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "",
          "[Removed Lines]",
          "1013:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1014:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "999:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1035:     checkout = checkout_ready_to_complete",
          "1036:     order_with_lines.checkout_token = checkout.token",
          "1037:     order_with_lines.save()",
          "1040:     checkout.delete()",
          "1042:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "1044:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "1039:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1041:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "1023:     token = checkout.token",
          "1026:     variables = {\"token\": token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1075:     payment.checkout = checkout",
          "1076:     payment.save()",
          "1080:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "1082:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "1078:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1079:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "1063:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1096:     order_count = Order.objects.count()",
          "1097:     checkout = checkout_with_digital_item",
          "1101:     # Set a billing address",
          "1102:     checkout.billing_address = address",
          "",
          "[Removed Lines]",
          "1098:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1099:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "1082:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1177:     assert not payment.transactions.exists()",
          "1179:     orders_count = Order.objects.count()",
          "1182:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "1184:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "1180:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1181:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Added Lines]",
          "1163:     variables = {\"token\": checkout.token, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/test_checkout_digital.py||saleor/graphql/checkout/tests/test_checkout_digital.py": [
          "File: saleor/graphql/checkout/tests/test_checkout_digital.py -> saleor/graphql/checkout/tests/test_checkout_digital.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: from ...tests.utils import get_graphql_content",
          "13: from .test_checkout import (",
          "14:     MUTATION_CHECKOUT_CREATE,",
          "17:     MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE,",
          "18:     MUTATION_UPDATE_SHIPPING_METHOD,",
          "19: )",
          "22: @pytest.mark.parametrize(\"with_shipping_address\", (True, False))",
          "",
          "[Removed Lines]",
          "15:     MUTATION_CHECKOUT_LINES_DELETE,",
          "16:     MUTATION_CHECKOUT_LINES_UPDATE,",
          "",
          "[Added Lines]",
          "18: from .test_checkout_lines import (",
          "19:     MUTATION_CHECKOUT_LINES_DELETE,",
          "20:     MUTATION_CHECKOUT_LINES_UPDATE,",
          "21: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:     \"\"\"Test updating the shipping address of a digital order throws an error.\"\"\"",
          "98:     checkout = checkout_with_digital_item",
          "102:     response = api_client.post_graphql(",
          "103:         MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE, variables",
          "",
          "[Removed Lines]",
          "99:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "100:     variables = {\"checkoutId\": checkout_id, \"shippingAddress\": graphql_address_data}",
          "",
          "[Added Lines]",
          "101:     variables = {\"token\": checkout.token, \"shippingAddress\": graphql_address_data}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     \"\"\"Test updating the shipping method of a digital order throws an error.\"\"\"",
          "126:     checkout = checkout_with_digital_item",
          "128:     method_id = graphene.Node.to_global_id(\"ShippingMethod\", shipping_method.pk)",
          "131:     # Put a shipping address, to ensure it is still handled properly",
          "132:     checkout.shipping_address = address",
          "",
          "[Removed Lines]",
          "127:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "129:     variables = {\"checkoutId\": checkout_id, \"shippingMethodId\": method_id}",
          "",
          "[Added Lines]",
          "129:     variables = {\"token\": checkout.token, \"shippingMethodId\": method_id}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:     variant = line.variant",
          "183:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "186:     variables = {",
          "188:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 0}],",
          "189:     }",
          "190:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "",
          "[Removed Lines]",
          "184:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "187:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "186:         \"token\": checkout.token,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "210:     line = checkout.lines.first()",
          "212:     line_id = graphene.Node.to_global_id(\"CheckoutLine\", line.pk)",
          "216:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_DELETE, variables)",
          "217:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "213:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "215:     variables = {\"checkoutId\": checkout_id, \"lineId\": line_id}",
          "",
          "[Added Lines]",
          "213:     variables = {\"token\": checkout.token, \"lineId\": line_id}",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/test_checkout_language_code_update.py||saleor/graphql/checkout/tests/test_checkout_language_code_update.py": [
          "File: saleor/graphql/checkout/tests/test_checkout_language_code_update.py -> saleor/graphql/checkout/tests/test_checkout_language_code_update.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from saleor.graphql.tests.utils import get_graphql_content",
          "5: MUTATION_CHECKOUT_UPDATE_LANGUAGE_CODE = \"\"\"",
          "8:     checkout{",
          "9:       id",
          "10:       languageCode",
          "",
          "[Removed Lines]",
          "1: import graphene",
          "6: mutation checkoutLanguageCodeUpdate($checkoutId: ID!, $languageCode: LanguageCodeEnum!){",
          "7:   checkoutLanguageCodeUpdate(checkoutId:$checkoutId, languageCode: $languageCode){",
          "",
          "[Added Lines]",
          "4: mutation checkoutLanguageCodeUpdate($token: UUID, $languageCode: LanguageCodeEnum!){",
          "5:   checkoutLanguageCodeUpdate(token: $token, languageCode: $languageCode){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:     errors{",
          "13:       field",
          "14:       message",
          "15:     }",
          "16:   }",
          "17: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:       code",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24: ):",
          "25:     language_code = \"PL\"",
          "26:     checkout = checkout_with_gift_card",
          "30:     response = user_api_client.post_graphql(",
          "31:         MUTATION_CHECKOUT_UPDATE_LANGUAGE_CODE, variables",
          "",
          "[Removed Lines]",
          "27:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "28:     variables = {\"checkoutId\": checkout_id, \"languageCode\": language_code}",
          "",
          "[Added Lines]",
          "26:     variables = {\"token\": checkout.token, \"languageCode\": language_code}",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/test_checkout_lines.py||saleor/graphql/checkout/tests/test_checkout_lines.py": [
          "File: saleor/graphql/checkout/tests/test_checkout_lines.py -> saleor/graphql/checkout/tests/test_checkout_lines.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import datetime",
          "2: import uuid",
          "3: from unittest import mock",
          "5: import graphene",
          "7: from ....checkout.error_codes import CheckoutErrorCode",
          "8: from ....checkout.fetch import fetch_checkout_info, fetch_checkout_lines",
          "9: from ....checkout.utils import calculate_checkout_quantity",
          "10: from ....plugins.manager import get_plugins_manager",
          "11: from ....product.models import ProductChannelListing",
          "12: from ...tests.utils import get_graphql_content",
          "13: from ..mutations import update_checkout_shipping_method_if_invalid",
          "15: MUTATION_CHECKOUT_LINES_ADD = \"\"\"",
          "16:     mutation checkoutLinesAdd(",
          "17:             $token: UUID, $lines: [CheckoutLineInput!]!) {",
          "18:         checkoutLinesAdd(token: $token, lines: $lines) {",
          "19:             checkout {",
          "20:                 token",
          "21:                 quantity",
          "22:                 lines {",
          "23:                     quantity",
          "24:                     variant {",
          "25:                         id",
          "26:                     }",
          "27:                 }",
          "28:             }",
          "29:             errors {",
          "30:                 field",
          "31:                 code",
          "32:                 message",
          "33:                 variants",
          "34:             }",
          "35:         }",
          "36:     }\"\"\"",
          "39: @mock.patch(",
          "40:     \"saleor.graphql.checkout.mutations.update_checkout_shipping_method_if_invalid\",",
          "41:     wraps=update_checkout_shipping_method_if_invalid,",
          "42: )",
          "43: def test_checkout_lines_add(",
          "44:     mocked_update_shipping_method, user_api_client, checkout_with_item, stock",
          "45: ):",
          "46:     variant = stock.product_variant",
          "47:     checkout = checkout_with_item",
          "48:     line = checkout.lines.first()",
          "49:     lines = fetch_checkout_lines(checkout)",
          "50:     assert calculate_checkout_quantity(lines) == 3",
          "51:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "53:     variables = {",
          "54:         \"token\": checkout.token,",
          "55:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "56:         \"channelSlug\": checkout.channel.slug,",
          "57:     }",
          "58:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "59:     content = get_graphql_content(response)",
          "60:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "61:     assert not data[\"errors\"]",
          "62:     checkout.refresh_from_db()",
          "63:     lines = fetch_checkout_lines(checkout)",
          "64:     line = checkout.lines.latest(\"pk\")",
          "65:     assert line.variant == variant",
          "66:     assert line.quantity == 1",
          "67:     assert calculate_checkout_quantity(lines) == 4",
          "69:     manager = get_plugins_manager()",
          "70:     lines = fetch_checkout_lines(checkout)",
          "71:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "72:     mocked_update_shipping_method.assert_called_once_with(checkout_info, lines)",
          "75: def test_checkout_lines_add_with_unavailable_variant(",
          "76:     user_api_client, checkout_with_item, stock",
          "77: ):",
          "78:     variant = stock.product_variant",
          "79:     variant.channel_listings.filter(channel=checkout_with_item.channel).update(",
          "80:         price_amount=None",
          "81:     )",
          "82:     checkout = checkout_with_item",
          "83:     line = checkout.lines.first()",
          "84:     assert line.quantity == 3",
          "85:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "87:     variables = {",
          "88:         \"token\": checkout.token,",
          "89:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "90:         \"channelSlug\": checkout.channel.slug,",
          "91:     }",
          "92:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "93:     content = get_graphql_content(response)",
          "94:     errors = content[\"data\"][\"checkoutLinesAdd\"][\"errors\"]",
          "95:     assert errors[0][\"code\"] == CheckoutErrorCode.UNAVAILABLE_VARIANT_IN_CHANNEL.name",
          "96:     assert errors[0][\"field\"] == \"lines\"",
          "97:     assert errors[0][\"variants\"] == [variant_id]",
          "100: def test_checkout_lines_add_with_zero_quantity(",
          "101:     user_api_client, checkout_with_item, stock",
          "102: ):",
          "103:     variant = stock.product_variant",
          "104:     checkout = checkout_with_item",
          "105:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "107:     variables = {",
          "108:         \"token\": checkout.token,",
          "109:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 0}],",
          "110:         \"channelSlug\": checkout.channel.slug,",
          "111:     }",
          "112:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "113:     content = get_graphql_content(response)",
          "114:     errors = content[\"data\"][\"checkoutLinesAdd\"][\"errors\"]",
          "115:     assert errors[0][\"code\"] == CheckoutErrorCode.ZERO_QUANTITY.name",
          "116:     assert errors[0][\"field\"] == \"quantity\"",
          "119: def test_checkout_lines_add_no_channel_shipping_zones(",
          "120:     user_api_client, checkout_with_item, stock",
          "121: ):",
          "122:     variant = stock.product_variant",
          "123:     checkout = checkout_with_item",
          "124:     checkout.channel.shipping_zones.clear()",
          "125:     line = checkout.lines.first()",
          "126:     assert line.quantity == 3",
          "127:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "129:     variables = {",
          "130:         \"token\": checkout.token,",
          "131:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "132:         \"channelSlug\": checkout.channel.slug,",
          "133:     }",
          "134:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "135:     content = get_graphql_content(response)",
          "137:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "138:     errors = data[\"errors\"]",
          "139:     assert len(errors) == 1",
          "140:     assert errors[0][\"code\"] == CheckoutErrorCode.INSUFFICIENT_STOCK.name",
          "141:     assert errors[0][\"field\"] == \"quantity\"",
          "144: def test_checkout_lines_add_with_unpublished_product(",
          "145:     user_api_client, checkout_with_item, stock, channel_USD",
          "146: ):",
          "147:     variant = stock.product_variant",
          "148:     product = variant.product",
          "149:     ProductChannelListing.objects.filter(product=product, channel=channel_USD).update(",
          "150:         is_published=False",
          "151:     )",
          "153:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "155:     variables = {",
          "156:         \"token\": checkout_with_item.token,",
          "157:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "158:         \"channelSlug\": checkout_with_item.channel.slug,",
          "159:     }",
          "161:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "163:     content = get_graphql_content(response)",
          "164:     error = content[\"data\"][\"checkoutLinesAdd\"][\"errors\"][0]",
          "165:     assert error[\"code\"] == CheckoutErrorCode.PRODUCT_NOT_PUBLISHED.name",
          "168: def test_checkout_lines_add_with_unavailable_for_purchase_product(",
          "169:     user_api_client, checkout_with_item, stock",
          "170: ):",
          "171:     # given",
          "172:     variant = stock.product_variant",
          "173:     product = stock.product_variant.product",
          "174:     product.channel_listings.update(available_for_purchase=None)",
          "176:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "178:     variables = {",
          "179:         \"token\": checkout_with_item.token,",
          "180:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "181:     }",
          "183:     # when",
          "184:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "186:     # then",
          "187:     content = get_graphql_content(response)",
          "188:     error = content[\"data\"][\"checkoutLinesAdd\"][\"errors\"][0]",
          "189:     assert error[\"field\"] == \"lines\"",
          "190:     assert error[\"code\"] == CheckoutErrorCode.PRODUCT_UNAVAILABLE_FOR_PURCHASE.name",
          "191:     assert error[\"variants\"] == [variant_id]",
          "194: def test_checkout_lines_add_with_available_for_purchase_from_tomorrow_product(",
          "195:     user_api_client, checkout_with_item, stock",
          "196: ):",
          "197:     # given",
          "198:     variant = stock.product_variant",
          "199:     product = stock.product_variant.product",
          "200:     product.channel_listings.update(",
          "201:         available_for_purchase=datetime.date.today() + datetime.timedelta(days=1)",
          "202:     )",
          "204:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "206:     variables = {",
          "207:         \"token\": checkout_with_item.token,",
          "208:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "209:     }",
          "211:     # when",
          "212:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "214:     # then",
          "215:     content = get_graphql_content(response)",
          "216:     error = content[\"data\"][\"checkoutLinesAdd\"][\"errors\"][0]",
          "217:     assert error[\"field\"] == \"lines\"",
          "218:     assert error[\"code\"] == CheckoutErrorCode.PRODUCT_UNAVAILABLE_FOR_PURCHASE.name",
          "219:     assert error[\"variants\"] == [variant_id]",
          "222: def test_checkout_lines_add_too_many(user_api_client, checkout_with_item, stock):",
          "223:     variant = stock.product_variant",
          "224:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "226:     variables = {",
          "227:         \"token\": checkout_with_item.token,",
          "228:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 51}],",
          "229:         \"channelSlug\": checkout_with_item.channel.slug,",
          "230:     }",
          "231:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "232:     content = get_graphql_content(response)[\"data\"][\"checkoutLinesAdd\"]",
          "234:     assert content[\"errors\"]",
          "235:     assert content[\"errors\"] == [",
          "236:         {",
          "237:             \"field\": \"quantity\",",
          "238:             \"message\": \"Cannot add more than 50 times this item.\",",
          "239:             \"code\": \"QUANTITY_GREATER_THAN_LIMIT\",",
          "240:             \"variants\": None,",
          "241:         }",
          "242:     ]",
          "245: def test_checkout_lines_add_empty_checkout(user_api_client, checkout, stock):",
          "246:     variant = stock.product_variant",
          "247:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "249:     variables = {",
          "250:         \"token\": checkout.token,",
          "251:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "252:     }",
          "253:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "254:     content = get_graphql_content(response)",
          "255:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "256:     assert not data[\"errors\"]",
          "257:     checkout.refresh_from_db()",
          "258:     line = checkout.lines.first()",
          "259:     assert line.variant == variant",
          "260:     assert line.quantity == 1",
          "263: def test_checkout_lines_add_variant_without_inventory_tracking(",
          "264:     user_api_client, checkout, variant_without_inventory_tracking",
          "265: ):",
          "266:     variant = variant_without_inventory_tracking",
          "267:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "269:     variables = {",
          "270:         \"token\": checkout.token,",
          "271:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "272:     }",
          "273:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "274:     content = get_graphql_content(response)",
          "275:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "276:     assert not data[\"errors\"]",
          "277:     checkout.refresh_from_db()",
          "278:     line = checkout.lines.first()",
          "279:     assert line.variant == variant",
          "280:     assert line.quantity == 1",
          "283: def test_checkout_lines_add_check_lines_quantity(user_api_client, checkout, stock):",
          "284:     variant = stock.product_variant",
          "285:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "287:     variables = {",
          "288:         \"token\": checkout.token,",
          "289:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 16}],",
          "290:     }",
          "291:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "292:     content = get_graphql_content(response)",
          "293:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "294:     assert data[\"errors\"][0][\"message\"] == (",
          "295:         \"Could not add items SKU_A. Only 15 remaining in stock.\"",
          "296:     )",
          "297:     assert data[\"errors\"][0][\"field\"] == \"quantity\"",
          "300: def test_checkout_lines_invalid_variant_id(user_api_client, checkout, stock):",
          "301:     variant = stock.product_variant",
          "302:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "303:     invalid_variant_id = \"InvalidId\"",
          "305:     variables = {",
          "306:         \"token\": checkout.token,",
          "307:         \"lines\": [",
          "308:             {\"variantId\": variant_id, \"quantity\": 1},",
          "309:             {\"variantId\": invalid_variant_id, \"quantity\": 3},",
          "310:         ],",
          "311:     }",
          "312:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_ADD, variables)",
          "313:     content = get_graphql_content(response)",
          "314:     data = content[\"data\"][\"checkoutLinesAdd\"]",
          "315:     error_msg = \"Could not resolve to a node with the global id list of '%s'.\"",
          "316:     assert data[\"errors\"][0][\"message\"] == error_msg % [invalid_variant_id]",
          "317:     assert data[\"errors\"][0][\"field\"] == \"variantId\"",
          "320: MUTATION_CHECKOUT_LINES_UPDATE = \"\"\"",
          "321:     mutation checkoutLinesUpdate(",
          "322:             $token: UUID, $lines: [CheckoutLineInput!]!) {",
          "323:         checkoutLinesUpdate(token: $token, lines: $lines) {",
          "324:             checkout {",
          "325:                 token",
          "326:                 quantity",
          "327:                 lines {",
          "328:                     quantity",
          "329:                     variant {",
          "330:                         id",
          "331:                     }",
          "332:                 }",
          "333:             }",
          "334:             errors {",
          "335:                 field",
          "336:                 code",
          "337:                 message",
          "338:                 variants",
          "339:             }",
          "340:         }",
          "341:     }",
          "342:     \"\"\"",
          "345: @mock.patch(",
          "346:     \"saleor.graphql.checkout.mutations.update_checkout_shipping_method_if_invalid\",",
          "347:     wraps=update_checkout_shipping_method_if_invalid,",
          "348: )",
          "349: def test_checkout_lines_update(",
          "350:     mocked_update_shipping_method, user_api_client, checkout_with_item",
          "351: ):",
          "352:     checkout = checkout_with_item",
          "353:     lines = fetch_checkout_lines(checkout)",
          "354:     assert checkout.lines.count() == 1",
          "355:     assert calculate_checkout_quantity(lines) == 3",
          "356:     line = checkout.lines.first()",
          "357:     variant = line.variant",
          "358:     assert line.quantity == 3",
          "360:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "362:     variables = {",
          "363:         \"token\": checkout_with_item.token,",
          "364:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "365:     }",
          "366:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "367:     content = get_graphql_content(response)",
          "369:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "370:     assert not data[\"errors\"]",
          "371:     checkout.refresh_from_db()",
          "372:     lines = fetch_checkout_lines(checkout)",
          "373:     assert checkout.lines.count() == 1",
          "374:     line = checkout.lines.first()",
          "375:     assert line.variant == variant",
          "376:     assert line.quantity == 1",
          "377:     assert calculate_checkout_quantity(lines) == 1",
          "379:     manager = get_plugins_manager()",
          "380:     lines = fetch_checkout_lines(checkout)",
          "381:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "382:     mocked_update_shipping_method.assert_called_once_with(checkout_info, lines)",
          "385: def test_checkout_lines_update_with_unavailable_variant(",
          "386:     user_api_client, checkout_with_item",
          "387: ):",
          "388:     checkout = checkout_with_item",
          "389:     assert checkout.lines.count() == 1",
          "390:     line = checkout.lines.first()",
          "391:     variant = line.variant",
          "392:     variant.channel_listings.filter(channel=checkout_with_item.channel).update(",
          "393:         price_amount=None",
          "394:     )",
          "395:     assert line.quantity == 3",
          "397:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "399:     variables = {",
          "400:         \"token\": checkout.token,",
          "401:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "402:     }",
          "403:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "404:     content = get_graphql_content(response)",
          "406:     errors = content[\"data\"][\"checkoutLinesUpdate\"][\"errors\"]",
          "407:     assert errors[0][\"code\"] == CheckoutErrorCode.UNAVAILABLE_VARIANT_IN_CHANNEL.name",
          "408:     assert errors[0][\"field\"] == \"lines\"",
          "409:     assert errors[0][\"variants\"] == [variant_id]",
          "412: def test_checkout_lines_update_channel_without_shipping_zones(",
          "413:     user_api_client, checkout_with_item",
          "414: ):",
          "415:     checkout = checkout_with_item",
          "416:     checkout.channel.shipping_zones.clear()",
          "417:     assert checkout.lines.count() == 1",
          "418:     line = checkout.lines.first()",
          "419:     variant = line.variant",
          "420:     assert line.quantity == 3",
          "422:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "424:     variables = {",
          "425:         \"token\": checkout.token,",
          "426:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "427:     }",
          "428:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "429:     content = get_graphql_content(response)",
          "430:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "431:     errors = data[\"errors\"]",
          "432:     assert len(errors) == 1",
          "433:     assert errors[0][\"code\"] == CheckoutErrorCode.INSUFFICIENT_STOCK.name",
          "434:     assert errors[0][\"field\"] == \"quantity\"",
          "437: @mock.patch(",
          "438:     \"saleor.graphql.checkout.mutations.update_checkout_shipping_method_if_invalid\",",
          "439:     wraps=update_checkout_shipping_method_if_invalid,",
          "440: )",
          "441: def test_checkout_line_delete_by_zero_quantity(",
          "442:     mocked_update_shipping_method, user_api_client, checkout_with_item",
          "443: ):",
          "444:     checkout = checkout_with_item",
          "445:     assert checkout.lines.count() == 1",
          "446:     line = checkout.lines.first()",
          "447:     variant = line.variant",
          "448:     assert line.quantity == 3",
          "450:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "452:     variables = {",
          "453:         \"token\": checkout.token,",
          "454:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 0}],",
          "455:     }",
          "456:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "457:     content = get_graphql_content(response)",
          "459:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "460:     assert not data[\"errors\"]",
          "461:     checkout.refresh_from_db()",
          "462:     assert checkout.lines.count() == 0",
          "463:     manager = get_plugins_manager()",
          "464:     lines = fetch_checkout_lines(checkout)",
          "465:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "466:     mocked_update_shipping_method.assert_called_once_with(checkout_info, lines)",
          "469: def test_checkout_lines_update_with_unpublished_product(",
          "470:     user_api_client, checkout_with_item, channel_USD",
          "471: ):",
          "472:     checkout = checkout_with_item",
          "473:     line = checkout.lines.first()",
          "474:     variant = line.variant",
          "475:     product = variant.product",
          "476:     ProductChannelListing.objects.filter(product=product, channel=channel_USD).update(",
          "477:         is_published=False",
          "478:     )",
          "480:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "482:     variables = {",
          "483:         \"token\": checkout.token,",
          "484:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "485:     }",
          "486:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "488:     content = get_graphql_content(response)",
          "489:     error = content[\"data\"][\"checkoutLinesUpdate\"][\"errors\"][0]",
          "490:     assert error[\"code\"] == CheckoutErrorCode.PRODUCT_NOT_PUBLISHED.name",
          "493: def test_checkout_lines_update_invalid_checkout_id(user_api_client):",
          "494:     variables = {\"token\": uuid.uuid4(), \"lines\": []}",
          "495:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "496:     content = get_graphql_content(response)",
          "497:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "498:     assert data[\"errors\"][0][\"field\"] == \"token\"",
          "501: def test_checkout_lines_update_check_lines_quantity(",
          "502:     user_api_client, checkout_with_item",
          "503: ):",
          "504:     checkout = checkout_with_item",
          "505:     line = checkout.lines.first()",
          "506:     variant = line.variant",
          "508:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "510:     variables = {",
          "511:         \"token\": checkout.token,",
          "512:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 11}],",
          "513:     }",
          "514:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "515:     content = get_graphql_content(response)",
          "517:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "518:     assert data[\"errors\"][0][\"message\"] == (",
          "519:         \"Could not add items 123. Only 10 remaining in stock.\"",
          "520:     )",
          "521:     assert data[\"errors\"][0][\"field\"] == \"quantity\"",
          "524: def test_checkout_lines_update_with_chosen_shipping(",
          "525:     user_api_client, checkout, stock, address, shipping_method",
          "526: ):",
          "527:     checkout.shipping_address = address",
          "528:     checkout.shipping_method = shipping_method",
          "529:     checkout.save()",
          "531:     variant = stock.product_variant",
          "532:     variant_id = graphene.Node.to_global_id(\"ProductVariant\", variant.pk)",
          "533:     variables = {",
          "534:         \"token\": checkout.token,",
          "535:         \"lines\": [{\"variantId\": variant_id, \"quantity\": 1}],",
          "536:     }",
          "537:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_UPDATE, variables)",
          "538:     content = get_graphql_content(response)",
          "540:     data = content[\"data\"][\"checkoutLinesUpdate\"]",
          "541:     assert not data[\"errors\"]",
          "542:     checkout.refresh_from_db()",
          "543:     lines = fetch_checkout_lines(checkout)",
          "544:     assert calculate_checkout_quantity(lines) == 1",
          "547: MUTATION_CHECKOUT_LINES_DELETE = \"\"\"",
          "548:     mutation checkoutLineDelete($token: UUID, $lineId: ID!) {",
          "549:         checkoutLineDelete(token: $token, lineId: $lineId) {",
          "550:             checkout {",
          "551:                 token",
          "552:                 lines {",
          "553:                     quantity",
          "554:                     variant {",
          "555:                         id",
          "556:                     }",
          "557:                 }",
          "558:             }",
          "559:             errors {",
          "560:                 field",
          "561:                 message",
          "562:             }",
          "563:         }",
          "564:     }",
          "565: \"\"\"",
          "568: @mock.patch(",
          "569:     \"saleor.graphql.checkout.mutations.update_checkout_shipping_method_if_invalid\",",
          "570:     wraps=update_checkout_shipping_method_if_invalid,",
          "571: )",
          "572: def test_checkout_line_delete(",
          "573:     mocked_update_shipping_method, user_api_client, checkout_with_item",
          "574: ):",
          "575:     checkout = checkout_with_item",
          "576:     lines = fetch_checkout_lines(checkout)",
          "577:     assert calculate_checkout_quantity(lines) == 3",
          "578:     assert checkout.lines.count() == 1",
          "579:     line = checkout.lines.first()",
          "580:     assert line.quantity == 3",
          "582:     line_id = graphene.Node.to_global_id(\"CheckoutLine\", line.pk)",
          "584:     variables = {\"token\": checkout.token, \"lineId\": line_id}",
          "585:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_DELETE, variables)",
          "586:     content = get_graphql_content(response)",
          "588:     data = content[\"data\"][\"checkoutLineDelete\"]",
          "589:     assert not data[\"errors\"]",
          "590:     checkout.refresh_from_db()",
          "591:     lines = fetch_checkout_lines(checkout)",
          "592:     assert checkout.lines.count() == 0",
          "593:     assert calculate_checkout_quantity(lines) == 0",
          "594:     manager = get_plugins_manager()",
          "595:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "596:     mocked_update_shipping_method.assert_called_once_with(checkout_info, lines)",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/test_checkout_promo_codes.py||saleor/graphql/checkout/tests/test_checkout_promo_codes.py": [
          "File: saleor/graphql/checkout/tests/test_checkout_promo_codes.py -> saleor/graphql/checkout/tests/test_checkout_promo_codes.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from datetime import date, timedelta",
          "2: from decimal import Decimal",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import uuid",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12: from ....discount import DiscountInfo, VoucherType",
          "13: from ....plugins.manager import get_plugins_manager",
          "14: from ...tests.utils import get_graphql_content",
          "21: def test_checkout_lines_delete_with_not_applicable_voucher(",
          "",
          "[Removed Lines]",
          "15: from .test_checkout import (",
          "16:     MUTATION_CHECKOUT_LINES_DELETE,",
          "17:     MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE,",
          "18: )",
          "",
          "[Added Lines]",
          "16: from .test_checkout import MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE",
          "17: from .test_checkout_lines import MUTATION_CHECKOUT_LINES_DELETE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     line = checkout_with_item.lines.first()",
          "44:     line_id = graphene.Node.to_global_id(\"CheckoutLine\", line.pk)",
          "46:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_LINES_DELETE, variables)",
          "47:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "43:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "45:     variables = {\"checkoutId\": checkout_id, \"lineId\": line_id}",
          "",
          "[Added Lines]",
          "43:     variables = {\"token\": checkout_with_item.token, \"lineId\": line_id}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:     add_voucher_to_checkout(manager, checkout_info, lines, voucher)",
          "79:     assert checkout_with_item.voucher_code == voucher.code",
          "82:     new_address = graphql_address_data",
          "84:     response = user_api_client.post_graphql(",
          "85:         MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE, variables",
          "86:     )",
          "",
          "[Removed Lines]",
          "81:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "83:     variables = {\"checkoutId\": checkout_id, \"shippingAddress\": new_address}",
          "",
          "[Added Lines]",
          "80:     variables = {\"token\": checkout_with_item.token, \"shippingAddress\": new_address}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "227: MUTATION_CHECKOUT_ADD_PROMO_CODE = \"\"\"",
          "229:         checkoutAddPromoCode(",
          "231:             errors {",
          "232:                 field",
          "233:                 message",
          "234:                 code",
          "235:             }",
          "236:             checkout {",
          "238:                 voucherCode",
          "239:                 giftCards {",
          "240:                     id",
          "",
          "[Removed Lines]",
          "228:     mutation($checkoutId: ID!, $promoCode: String!) {",
          "230:             checkoutId: $checkoutId, promoCode: $promoCode) {",
          "237:                 id,",
          "",
          "[Added Lines]",
          "225:     mutation($token: UUID, $promoCode: String!) {",
          "227:             token: $token, promoCode: $promoCode) {",
          "234:                 id",
          "235:                 token",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "257:     return content[\"data\"][\"checkoutAddPromoCode\"]",
          "263:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "265:     assert not data[\"errors\"]",
          "267:     assert data[\"checkout\"][\"voucherCode\"] == voucher.code",
          "",
          "[Removed Lines]",
          "260: def test_checkout_add_voucher_code(api_client, checkout_with_item, voucher):",
          "261:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "262:     variables = {\"checkoutId\": checkout_id, \"promoCode\": voucher.code}",
          "266:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "",
          "[Added Lines]",
          "258: def test_checkout_add_voucher_code_by_token(api_client, checkout_with_item, voucher):",
          "259:     variables = {\"token\": checkout_with_item.token, \"promoCode\": voucher.code}",
          "263:     assert data[\"checkout\"][\"token\"] == str(checkout_with_item.token)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "285:         ),",
          "286:     )",
          "290:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "292:     assert not data[\"errors\"]",
          "294:     assert data[\"checkout\"][\"voucherCode\"] == voucher.code",
          "",
          "[Removed Lines]",
          "288:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "289:     variables = {\"checkoutId\": checkout_id, \"promoCode\": voucher.code}",
          "293:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "",
          "[Added Lines]",
          "285:     variables = {\"token\": checkout_with_item.token, \"promoCode\": voucher.code}",
          "289:     assert data[\"checkout\"][\"token\"] == str(checkout_with_item.token)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "312:         ),",
          "313:     )",
          "317:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "319:     assert data[\"errors\"][0][\"code\"] == CheckoutErrorCode.VOUCHER_NOT_APPLICABLE.name",
          "",
          "[Removed Lines]",
          "315:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "316:     variables = {\"checkoutId\": checkout_id, \"promoCode\": voucher.code}",
          "",
          "[Added Lines]",
          "311:     variables = {\"token\": checkout_with_item.token, \"promoCode\": voucher.code}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "338:         discounts=[discount_info],",
          "339:     )",
          "340:     assert subtotal > subtotal_discounted",
          "343:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "345:     checkout_with_item.refresh_from_db()",
          "",
          "[Removed Lines]",
          "341:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "342:     variables = {\"checkoutId\": checkout_id, \"promoCode\": voucher_percentage.code}",
          "",
          "[Added Lines]",
          "336:     variables = {",
          "337:         \"token\": checkout_with_item.token,",
          "338:         \"promoCode\": voucher_percentage.code,",
          "339:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "374:     )",
          "376:     assert subtotal > subtotal_discounted",
          "379:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "381:     checkout.refresh_from_db()",
          "",
          "[Removed Lines]",
          "377:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "378:     variables = {\"checkoutId\": checkout_id, \"promoCode\": voucher.code}",
          "",
          "[Added Lines]",
          "374:     variables = {\"token\": checkout_with_item.token, \"promoCode\": voucher.code}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "415:         discounts=[discount_info],",
          "416:     )",
          "417:     assert subtotal > subtotal_discounted",
          "420:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "422:     checkout.refresh_from_db()",
          "",
          "[Removed Lines]",
          "418:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "419:     variables = {\"checkoutId\": checkout_id, \"promoCode\": voucher.code}",
          "",
          "[Added Lines]",
          "414:     variables = {\"token\": checkout_with_item.token, \"promoCode\": voucher.code}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "454:         discounts=[discount_info],",
          "455:     )",
          "456:     assert subtotal > subtotal_discounted",
          "459:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "461:     checkout.refresh_from_db()",
          "",
          "[Removed Lines]",
          "457:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "458:     variables = {\"checkoutId\": checkout_id, \"promoCode\": voucher.code}",
          "",
          "[Added Lines]",
          "452:     variables = {\"token\": checkout_with_item.token, \"promoCode\": voucher.code}",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "493:         discounts=[discount_info],",
          "494:     )",
          "495:     assert subtotal > subtotal_discounted",
          "498:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "500:     checkout.refresh_from_db()",
          "",
          "[Removed Lines]",
          "496:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "497:     variables = {\"checkoutId\": checkout_id, \"promoCode\": voucher.code}",
          "",
          "[Added Lines]",
          "490:     variables = {\"token\": checkout_with_item.token, \"promoCode\": voucher.code}",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "506: def test_checkout_add_voucher_code_not_applicable_voucher(",
          "507:     api_client, checkout_with_item, voucher_with_high_min_spent_amount",
          "508: ):",
          "510:     variables = {",
          "512:         \"promoCode\": voucher_with_high_min_spent_amount.code,",
          "513:     }",
          "514:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "",
          "[Removed Lines]",
          "509:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "511:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "503:         \"token\": checkout_with_item.token,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "520: def test_checkout_add_voucher_code_not_assigned_to_channel(",
          "521:     api_client, checkout_with_item, voucher_without_channel",
          "522: ):",
          "524:     variables = {",
          "526:         \"promoCode\": voucher_without_channel.code,",
          "527:     }",
          "528:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "",
          "[Removed Lines]",
          "523:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "525:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "516:         \"token\": checkout_with_item.token,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "534: def test_checkout_add_gift_card_code(api_client, checkout_with_item, gift_card):",
          "536:     gift_card_id = graphene.Node.to_global_id(\"GiftCard\", gift_card.pk)",
          "538:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "540:     assert not data[\"errors\"]",
          "542:     assert data[\"checkout\"][\"giftCards\"][0][\"id\"] == gift_card_id",
          "543:     assert data[\"checkout\"][\"giftCards\"][0][\"displayCode\"] == gift_card.display_code",
          "",
          "[Removed Lines]",
          "535:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "537:     variables = {\"checkoutId\": checkout_id, \"promoCode\": gift_card.code}",
          "541:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "",
          "[Added Lines]",
          "527:     variables = {\"token\": checkout_with_item.token, \"promoCode\": gift_card.code}",
          "531:     assert data[\"checkout\"][\"token\"] == str(checkout_with_item.token)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "547:     api_client, checkout_with_gift_card, gift_card_created_by_staff",
          "548: ):",
          "549:     assert checkout_with_gift_card.gift_cards.count() > 0",
          "551:     gift_card_id = graphene.Node.to_global_id(\"GiftCard\", gift_card_created_by_staff.pk)",
          "552:     variables = {",
          "554:         \"promoCode\": gift_card_created_by_staff.code,",
          "555:     }",
          "556:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "558:     assert not data[\"errors\"]",
          "560:     gift_card_data = data[\"checkout\"][\"giftCards\"][-1]",
          "561:     assert gift_card_data[\"id\"] == gift_card_id",
          "562:     assert gift_card_data[\"displayCode\"] == gift_card_created_by_staff.display_code",
          "",
          "[Removed Lines]",
          "550:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_gift_card.pk)",
          "553:         \"checkoutId\": checkout_id,",
          "559:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "",
          "[Added Lines]",
          "542:         \"token\": checkout_with_gift_card.token,",
          "548:     assert data[\"checkout\"][\"token\"] == str(checkout_with_gift_card.token)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "574:     )",
          "575:     total_with_gift_card = taxed_total.gross.amount - gift_card.current_balance_amount",
          "579:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "581:     assert not data[\"errors\"]",
          "583:     assert not data[\"checkout\"][\"giftCards\"] == []",
          "584:     assert data[\"checkout\"][\"totalPrice\"][\"gross\"][\"amount\"] == total_with_gift_card",
          "",
          "[Removed Lines]",
          "577:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "578:     variables = {\"checkoutId\": checkout_id, \"promoCode\": gift_card.code}",
          "582:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "",
          "[Added Lines]",
          "566:     variables = {\"token\": checkout_with_item.token, \"promoCode\": gift_card.code}",
          "570:     assert data[\"checkout\"][\"token\"] == str(checkout_with_item.token)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "603:     )",
          "605:     assert checkout_with_gift_card.gift_cards.count() > 0",
          "607:     variables = {",
          "609:         \"promoCode\": gift_card_created_by_staff.code,",
          "610:     }",
          "611:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "613:     assert not data[\"errors\"]",
          "615:     assert data[\"checkout\"][\"totalPrice\"][\"gross\"][\"amount\"] == total_with_gift_card",
          "618: def test_checkout_get_total_with_more_money_on_gift_card(",
          "619:     api_client, checkout_with_item, gift_card_used",
          "620: ):",
          "623:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "625:     assert not data[\"errors\"]",
          "627:     assert not data[\"checkout\"][\"giftCards\"] == []",
          "628:     assert data[\"checkout\"][\"totalPrice\"][\"gross\"][\"amount\"] == 0",
          "",
          "[Removed Lines]",
          "606:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_gift_card.pk)",
          "608:         \"checkoutId\": checkout_id,",
          "614:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "621:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "622:     variables = {\"checkoutId\": checkout_id, \"promoCode\": gift_card_used.code}",
          "626:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "",
          "[Added Lines]",
          "595:         \"token\": checkout_with_gift_card.token,",
          "601:     assert data[\"checkout\"][\"token\"] == str(checkout_with_gift_card.token)",
          "608:     variables = {\"token\": checkout_with_item.token, \"promoCode\": gift_card_used.code}",
          "612:     assert data[\"checkout\"][\"token\"] == str(checkout_with_item.token)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "632:     gift_card = checkout_with_gift_card.gift_cards.first()",
          "633:     gift_card_id = graphene.Node.to_global_id(\"GiftCard\", gift_card.pk)",
          "634:     gift_card_count = checkout_with_gift_card.gift_cards.count()",
          "637:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "639:     assert not data[\"errors\"]",
          "641:     assert data[\"checkout\"][\"giftCards\"][0][\"id\"] == gift_card_id",
          "642:     assert data[\"checkout\"][\"giftCards\"][0][\"displayCode\"] == gift_card.display_code",
          "643:     assert len(data[\"checkout\"][\"giftCards\"]) == gift_card_count",
          "",
          "[Removed Lines]",
          "635:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_gift_card.pk)",
          "636:     variables = {\"checkoutId\": checkout_id, \"promoCode\": gift_card.code}",
          "640:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "",
          "[Added Lines]",
          "621:     variables = {\"token\": checkout_with_gift_card.token, \"promoCode\": gift_card.code}",
          "625:     assert data[\"checkout\"][\"token\"] == str(checkout_with_gift_card.token)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "649:     gift_card.is_active = False",
          "650:     gift_card.save()",
          "654:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "656:     assert data[\"errors\"]",
          "",
          "[Removed Lines]",
          "652:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "653:     variables = {\"checkoutId\": checkout_id, \"promoCode\": gift_card.code}",
          "",
          "[Added Lines]",
          "637:     variables = {\"token\": checkout_with_item.token, \"promoCode\": gift_card.code}",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "663:     gift_card.end_date = date.today() - timedelta(days=1)",
          "664:     gift_card.save()",
          "668:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "670:     assert data[\"errors\"]",
          "",
          "[Removed Lines]",
          "666:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "667:     variables = {\"checkoutId\": checkout_id, \"promoCode\": gift_card.code}",
          "",
          "[Added Lines]",
          "650:     variables = {\"token\": checkout_with_item.token, \"promoCode\": gift_card.code}",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "674: def test_checkout_add_promo_code_invalid_checkout(api_client, voucher):",
          "676:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "678:     assert data[\"errors\"]",
          "682: def test_checkout_add_promo_code_invalid_promo_code(api_client, checkout_with_item):",
          "685:     data = _mutate_checkout_add_promo_code(api_client, variables)",
          "687:     assert data[\"errors\"]",
          "",
          "[Removed Lines]",
          "675:     variables = {\"checkoutId\": \"unexisting_checkout\", \"promoCode\": voucher.code}",
          "679:     assert data[\"errors\"][0][\"field\"] == \"checkoutId\"",
          "683:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "684:     variables = {\"checkoutId\": checkout_id, \"promoCode\": \"unexisting_code\"}",
          "",
          "[Added Lines]",
          "658:     variables = {\"token\": uuid.uuid4(), \"promoCode\": voucher.code}",
          "662:     assert data[\"errors\"][0][\"field\"] == \"token\"",
          "666:     variables = {\"token\": checkout_with_item.token, \"promoCode\": \"unexisting_code\"}",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "691: MUTATION_CHECKOUT_REMOVE_PROMO_CODE = \"\"\"",
          "693:         checkoutRemovePromoCode(",
          "695:             errors {",
          "696:                 field",
          "697:                 message",
          "698:             }",
          "699:             checkout {",
          "701:                 voucherCode",
          "702:                 giftCards {",
          "703:                     id",
          "",
          "[Removed Lines]",
          "692:     mutation($checkoutId: ID!, $promoCode: String!) {",
          "694:             checkoutId: $checkoutId, promoCode: $promoCode) {",
          "700:                 id,",
          "",
          "[Added Lines]",
          "674:     mutation($token: UUID, $promoCode: String!) {",
          "676:             token: $token, promoCode: $promoCode) {",
          "682:                 token,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "718: def test_checkout_remove_voucher_code(api_client, checkout_with_voucher):",
          "719:     assert checkout_with_voucher.voucher_code is not None",
          "722:     variables = {",
          "724:         \"promoCode\": checkout_with_voucher.voucher_code,",
          "725:     }",
          "",
          "[Removed Lines]",
          "721:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_voucher.pk)",
          "723:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "704:         \"token\": checkout_with_voucher.token,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "729:     checkout_with_voucher.refresh_from_db()",
          "730:     assert not data[\"errors\"]",
          "732:     assert data[\"checkout\"][\"voucherCode\"] is None",
          "733:     assert checkout_with_voucher.voucher_code is None",
          "",
          "[Removed Lines]",
          "731:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "",
          "[Added Lines]",
          "712:     assert data[\"checkout\"][\"token\"] == str(checkout_with_voucher.token)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "740:     channel.is_active = False",
          "741:     channel.save()",
          "744:     variables = {",
          "746:         \"promoCode\": checkout_with_voucher.voucher_code,",
          "747:     }",
          "",
          "[Removed Lines]",
          "743:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_voucher.pk)",
          "745:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "725:         \"token\": checkout_with_voucher.token,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "751:     checkout_with_voucher.refresh_from_db()",
          "752:     assert not data[\"errors\"]",
          "754:     assert data[\"checkout\"][\"voucherCode\"] == checkout_with_voucher.voucher_code",
          "757: def test_checkout_remove_gift_card_code(api_client, checkout_with_gift_card):",
          "758:     assert checkout_with_gift_card.gift_cards.count() == 1",
          "761:     variables = {",
          "763:         \"promoCode\": checkout_with_gift_card.gift_cards.first().code,",
          "764:     }",
          "766:     data = _mutate_checkout_remove_promo_code(api_client, variables)",
          "769:     assert data[\"checkout\"][\"giftCards\"] == []",
          "770:     assert not checkout_with_gift_card.gift_cards.all().exists()",
          "",
          "[Removed Lines]",
          "753:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "760:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_gift_card.pk)",
          "762:         \"checkoutId\": checkout_id,",
          "768:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "",
          "[Added Lines]",
          "733:     assert data[\"checkout\"][\"token\"] == str(checkout_with_voucher.token)",
          "741:         \"token\": checkout_with_gift_card.token,",
          "747:     assert data[\"checkout\"][\"token\"] == str(checkout_with_gift_card.token)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "778:     gift_card_first = checkout_with_gift_card.gift_cards.first()",
          "779:     gift_card_last = checkout_with_gift_card.gift_cards.last()",
          "784:     data = _mutate_checkout_remove_promo_code(api_client, variables)",
          "786:     checkout_gift_cards = checkout_with_gift_card.gift_cards",
          "788:     assert checkout_gift_cards.filter(code=gift_card_last.code).exists()",
          "789:     assert not checkout_gift_cards.filter(code=gift_card_first.code).exists()",
          "792: def test_checkout_remove_promo_code_invalid_promo_code(api_client, checkout_with_item):",
          "796:     data = _mutate_checkout_remove_promo_code(api_client, variables)",
          "798:     assert not data[\"errors\"]",
          "802: def test_checkout_remove_promo_code_invalid_checkout(api_client, voucher):",
          "805:     data = _mutate_checkout_remove_promo_code(api_client, variables)",
          "807:     assert data[\"errors\"]",
          "",
          "[Removed Lines]",
          "781:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_gift_card.pk)",
          "782:     variables = {\"checkoutId\": checkout_id, \"promoCode\": gift_card_first.code}",
          "787:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "793:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout_with_item.pk)",
          "794:     variables = {\"checkoutId\": checkout_id, \"promoCode\": \"unexisting_code\"}",
          "799:     assert data[\"checkout\"][\"id\"] == checkout_id",
          "803:     variables = {\"checkoutId\": \"unexisting_checkout\", \"promoCode\": voucher.code}",
          "808:     assert data[\"errors\"][0][\"field\"] == \"checkoutId\"",
          "",
          "[Added Lines]",
          "760:     variables = {",
          "761:         \"token\": checkout_with_gift_card.token,",
          "762:         \"promoCode\": gift_card_first.code,",
          "763:     }",
          "768:     assert data[\"checkout\"][\"token\"] == str(checkout_with_gift_card.token)",
          "774:     variables = {\"token\": checkout_with_item.token, \"promoCode\": \"unexisting_code\"}",
          "779:     assert data[\"checkout\"][\"token\"] == str(checkout_with_item.token)",
          "783:     variables = {\"token\": uuid.uuid4(), \"promoCode\": voucher.code}",
          "788:     assert data[\"errors\"][0][\"field\"] == \"token\"",
          "",
          "---------------"
        ],
        "saleor/graphql/core/validators.py||saleor/graphql/core/validators.py": [
          "File: saleor/graphql/core/validators.py -> saleor/graphql/core/validators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     from decimal import Decimal",
          "14: def validate_one_of_args_is_in_query(*args):",
          "15:     # split args into a list with 2-element tuples:",
          "16:     # [(arg1_name, arg1_value), (arg2_name, arg2_value), ...]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: def validate_one_of_args_is_in_mutation(error_class, *args):",
          "15:     try:",
          "16:         validate_one_of_args_is_in_query(*args)",
          "17:     except GraphQLError as e:",
          "18:         raise ValidationError(str(e), code=error_class.GRAPHQL_ERROR)",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py": [
          "File: saleor/graphql/payment/mutations.py -> saleor/graphql/payment/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: from ...payment.error_codes import PaymentErrorCode",
          "14: from ...payment.utils import create_payment, is_currency_supported",
          "15: from ..account.i18n import I18nMixin",
          "16: from ..checkout.types import Checkout",
          "17: from ..core.mutations import BaseMutation",
          "19: from ..core.types import common as common_types",
          "20: from .types import Payment, PaymentInitialized",
          "",
          "[Removed Lines]",
          "18: from ..core.scalars import PositiveDecimal",
          "",
          "[Added Lines]",
          "16: from ..checkout.mutations import get_checkout_by_token",
          "19: from ..core.scalars import UUID, PositiveDecimal",
          "21: from ..core.validators import validate_one_of_args_is_in_mutation",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     payment = graphene.Field(Payment, description=\"A newly created payment.\")",
          "58:     class Arguments:",
          "60:         input = PaymentInput(",
          "61:             description=\"Data required to create a new payment.\", required=True",
          "62:         )",
          "",
          "[Removed Lines]",
          "59:         checkout_id = graphene.ID(description=\"Checkout ID.\", required=True)",
          "",
          "[Added Lines]",
          "61:         checkout_id = graphene.ID(",
          "62:             description=(",
          "63:                 \"Checkout ID.\"",
          "64:                 \"DEPRECATED: Will be removed in Saleor 4.0. Use token instead.\"",
          "65:             ),",
          "66:             required=False,",
          "67:         )",
          "68:         token = UUID(description=\"Checkout token.\", required=False)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:             )",
          "126:     @classmethod",
          "130:         )",
          "131:         data = data[\"input\"]",
          "132:         gateway = data[\"gateway\"]",
          "",
          "[Removed Lines]",
          "127:     def perform_mutation(cls, _root, info, checkout_id, **data):",
          "128:         checkout = cls.get_node_or_error(",
          "129:             info, checkout_id, only_type=Checkout, field=\"checkout_id\"",
          "",
          "[Added Lines]",
          "136:     def perform_mutation(cls, _root, info, checkout_id=None, token=None, **data):",
          "137:         # DEPRECATED",
          "138:         validate_one_of_args_is_in_mutation(",
          "139:             PaymentErrorCode, \"checkout_id\", checkout_id, \"token\", token",
          "142:         if token:",
          "143:             checkout = get_checkout_by_token(token)",
          "144:         # DEPRECATED",
          "145:         else:",
          "146:             checkout = cls.get_node_or_error(",
          "147:                 info, checkout_id or token, only_type=Checkout, field=\"checkout_id\"",
          "148:             )",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/tests/deprecated/test_checkout_payment_create.py||saleor/graphql/payment/tests/deprecated/test_checkout_payment_create.py": [
          "File: saleor/graphql/payment/tests/deprecated/test_checkout_payment_create.py -> saleor/graphql/payment/tests/deprecated/test_checkout_payment_create.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import graphene",
          "3: from .....checkout import calculations",
          "4: from .....checkout.fetch import fetch_checkout_info, fetch_checkout_lines",
          "5: from .....payment.error_codes import PaymentErrorCode",
          "6: from .....payment.models import ChargeStatus, Payment",
          "7: from .....plugins.manager import get_plugins_manager",
          "8: from ....tests.utils import get_graphql_content",
          "10: DUMMY_GATEWAY = \"mirumee.payments.dummy\"",
          "12: CREATE_PAYMENT_MUTATION = \"\"\"",
          "13:     mutation CheckoutPaymentCreate(",
          "14:         $checkoutId: ID, $token: UUID, $input: PaymentInput!",
          "15:     ) {",
          "16:         checkoutPaymentCreate(checkoutId: $checkoutId, token: $token, input: $input) {",
          "17:             payment {",
          "18:                 transactions {",
          "19:                     kind,",
          "20:                     token",
          "21:                 }",
          "22:                 chargeStatus",
          "23:             }",
          "24:             errors {",
          "25:                 code",
          "26:                 field",
          "27:             }",
          "28:         }",
          "29:     }",
          "30:     \"\"\"",
          "33: def test_checkout_add_payment_by_checkout_id(",
          "34:     user_api_client, checkout_without_shipping_required, address",
          "35: ):",
          "36:     checkout = checkout_without_shipping_required",
          "37:     checkout.billing_address = address",
          "38:     checkout.save()",
          "40:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "41:     manager = get_plugins_manager()",
          "42:     lines = fetch_checkout_lines(checkout)",
          "43:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "44:     total = calculations.checkout_total(",
          "45:         manager=manager, checkout_info=checkout_info, lines=lines, address=address",
          "46:     )",
          "47:     variables = {",
          "48:         \"checkoutId\": checkout_id,",
          "49:         \"input\": {",
          "50:             \"gateway\": DUMMY_GATEWAY,",
          "51:             \"token\": \"sample-token\",",
          "52:             \"amount\": total.gross.amount,",
          "53:         },",
          "54:     }",
          "55:     response = user_api_client.post_graphql(CREATE_PAYMENT_MUTATION, variables)",
          "56:     content = get_graphql_content(response)",
          "57:     data = content[\"data\"][\"checkoutPaymentCreate\"]",
          "58:     assert not data[\"errors\"]",
          "59:     transactions = data[\"payment\"][\"transactions\"]",
          "60:     assert not transactions",
          "61:     payment = Payment.objects.get()",
          "62:     assert payment.checkout == checkout",
          "63:     assert payment.is_active",
          "64:     assert payment.token == \"sample-token\"",
          "65:     assert payment.total == total.gross.amount",
          "66:     assert payment.currency == total.gross.currency",
          "67:     assert payment.charge_status == ChargeStatus.NOT_CHARGED",
          "68:     assert payment.billing_address_1 == checkout.billing_address.street_address_1",
          "69:     assert payment.billing_first_name == checkout.billing_address.first_name",
          "70:     assert payment.billing_last_name == checkout.billing_address.last_name",
          "73: def test_checkout_add_payment_neither_token_and_id_given(",
          "74:     user_api_client, checkout_without_shipping_required, address",
          "75: ):",
          "76:     checkout = checkout_without_shipping_required",
          "77:     checkout.billing_address = address",
          "78:     checkout.save()",
          "80:     manager = get_plugins_manager()",
          "81:     lines = fetch_checkout_lines(checkout)",
          "82:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "83:     total = calculations.checkout_total(",
          "84:         manager=manager, checkout_info=checkout_info, lines=lines, address=address",
          "85:     )",
          "86:     variables = {",
          "87:         \"input\": {",
          "88:             \"gateway\": DUMMY_GATEWAY,",
          "89:             \"token\": \"sample-token\",",
          "90:             \"amount\": total.gross.amount,",
          "91:         },",
          "92:     }",
          "93:     response = user_api_client.post_graphql(CREATE_PAYMENT_MUTATION, variables)",
          "94:     content = get_graphql_content(response)",
          "95:     data = content[\"data\"][\"checkoutPaymentCreate\"]",
          "96:     assert len(data[\"errors\"]) == 1",
          "97:     assert not data[\"payment\"]",
          "98:     assert data[\"errors\"][0][\"code\"] == PaymentErrorCode.GRAPHQL_ERROR.name",
          "101: def test_checkout_add_payment_both_token_and_id_given(",
          "102:     user_api_client, checkout_without_shipping_required, address",
          "103: ):",
          "104:     checkout = checkout_without_shipping_required",
          "105:     checkout.billing_address = address",
          "106:     checkout.save()",
          "108:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "109:     manager = get_plugins_manager()",
          "110:     lines = fetch_checkout_lines(checkout)",
          "111:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "112:     total = calculations.checkout_total(",
          "113:         manager=manager, checkout_info=checkout_info, lines=lines, address=address",
          "114:     )",
          "115:     variables = {",
          "116:         \"checkoutId\": checkout_id,",
          "117:         \"token\": checkout.token,",
          "118:         \"input\": {",
          "119:             \"gateway\": DUMMY_GATEWAY,",
          "120:             \"token\": \"sample-token\",",
          "121:             \"amount\": total.gross.amount,",
          "122:         },",
          "123:     }",
          "124:     response = user_api_client.post_graphql(CREATE_PAYMENT_MUTATION, variables)",
          "125:     content = get_graphql_content(response)",
          "126:     data = content[\"data\"][\"checkoutPaymentCreate\"]",
          "127:     assert len(data[\"errors\"]) == 1",
          "128:     assert not data[\"payment\"]",
          "129:     assert data[\"errors\"][0][\"code\"] == PaymentErrorCode.GRAPHQL_ERROR.name",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/tests/test_payment.py||saleor/graphql/payment/tests/test_payment.py": [
          "File: saleor/graphql/payment/tests/test_payment.py -> saleor/graphql/payment/tests/test_payment.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: CREATE_PAYMENT_MUTATION = \"\"\"",
          "96:             payment {",
          "97:                 transactions {",
          "98:                     kind,",
          "",
          "[Removed Lines]",
          "94:     mutation CheckoutPaymentCreate($checkoutId: ID!, $input: PaymentInput!) {",
          "95:         checkoutPaymentCreate(checkoutId: $checkoutId, input: $input) {",
          "",
          "[Added Lines]",
          "94:     mutation CheckoutPaymentCreate($token: UUID, $input: PaymentInput!) {",
          "95:         checkoutPaymentCreate(token: $token, input: $input) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:     checkout.billing_address = address",
          "117:     checkout.save()",
          "120:     manager = get_plugins_manager()",
          "121:     lines = fetch_checkout_lines(checkout)",
          "122:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "",
          "[Removed Lines]",
          "119:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:         manager=manager, checkout_info=checkout_info, lines=lines, address=address",
          "125:     )",
          "126:     variables = {",
          "128:         \"input\": {",
          "129:             \"gateway\": DUMMY_GATEWAY,",
          "130:             \"token\": \"sample-token\",",
          "",
          "[Removed Lines]",
          "127:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "126:         \"token\": checkout.token,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:     checkout.billing_address = address",
          "158:     checkout.save()",
          "161:     manager = get_plugins_manager()",
          "162:     lines = fetch_checkout_lines(checkout)",
          "163:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "",
          "[Removed Lines]",
          "160:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:         manager=manager, checkout_info=checkout_info, lines=lines, address=address",
          "166:     )",
          "167:     variables = {",
          "169:         \"input\": {",
          "170:             \"gateway\": DUMMY_GATEWAY,",
          "171:             \"token\": \"sample-token\",",
          "",
          "[Removed Lines]",
          "168:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "166:         \"token\": checkout.token,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "189:     checkout.shipping_method = other_shipping_method",
          "190:     checkout.save()",
          "193:     manager = get_plugins_manager()",
          "194:     lines = fetch_checkout_lines(checkout)",
          "195:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "",
          "[Removed Lines]",
          "192:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "197:         manager=manager, checkout_info=checkout_info, lines=lines, address=address",
          "198:     )",
          "199:     variables = {",
          "201:         \"input\": {",
          "202:             \"gateway\": DUMMY_GATEWAY,",
          "203:             \"token\": \"sample-token\",",
          "",
          "[Removed Lines]",
          "200:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "197:         \"token\": checkout.token,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "232:     checkout.user = customer_user",
          "233:     checkout.save()",
          "236:     manager = get_plugins_manager()",
          "237:     lines = fetch_checkout_lines(checkout)",
          "238:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "",
          "[Removed Lines]",
          "235:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "241:     )",
          "242:     return_url = \"https://www.example.com\"",
          "243:     variables = {",
          "245:         \"input\": {",
          "246:             \"gateway\": DUMMY_GATEWAY,",
          "247:             \"token\": \"sample-token\",",
          "",
          "[Removed Lines]",
          "244:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "240:         \"token\": checkout.token,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "277:     checkout.billing_address = address",
          "278:     checkout.save()",
          "281:     manager = get_plugins_manager()",
          "282:     lines = fetch_checkout_lines(checkout)",
          "283:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "",
          "[Removed Lines]",
          "280:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "286:     )",
          "288:     variables = {",
          "290:         \"input\": {\"gateway\": DUMMY_GATEWAY, \"token\": \"sample-token\"},",
          "291:     }",
          "292:     response = user_api_client.post_graphql(CREATE_PAYMENT_MUTATION, variables)",
          "",
          "[Removed Lines]",
          "289:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "284:         \"token\": checkout.token,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "310:     checkout = checkout_without_shipping_required",
          "311:     checkout.billing_address = address",
          "312:     checkout.save()",
          "315:     manager = get_plugins_manager()",
          "316:     lines = fetch_checkout_lines(checkout)",
          "",
          "[Removed Lines]",
          "313:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "320:     )",
          "322:     variables = {",
          "324:         \"input\": {",
          "325:             \"gateway\": DUMMY_GATEWAY,",
          "326:             \"token\": \"sample-token\",",
          "",
          "[Removed Lines]",
          "323:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "317:         \"token\": checkout.token,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "342:     checkout.billing_address = address",
          "343:     checkout.currency = \"EUR\"",
          "344:     checkout.save(update_fields=[\"billing_address\", \"currency\"])",
          "347:     variables = {",
          "349:         \"input\": {\"gateway\": DUMMY_GATEWAY, \"token\": \"sample-token\", \"amount\": \"10.0\"},",
          "350:     }",
          "351:     response = user_api_client.post_graphql(CREATE_PAYMENT_MUTATION, variables)",
          "",
          "[Removed Lines]",
          "345:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "348:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "341:         \"token\": checkout.token,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "359:     user_api_client, checkout_without_shipping_required, address",
          "360: ):",
          "361:     checkout = checkout_without_shipping_required",
          "363:     manager = get_plugins_manager()",
          "364:     lines = fetch_checkout_lines(checkout)",
          "365:     checkout_info = fetch_checkout_info(checkout, lines, [], manager)",
          "",
          "[Removed Lines]",
          "362:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "367:         manager=manager, checkout_info=checkout_info, lines=lines, address=address",
          "368:     )",
          "369:     variables = {",
          "371:         \"input\": {",
          "372:             \"gateway\": DUMMY_GATEWAY,",
          "373:             \"token\": \"sample-token\",",
          "",
          "[Removed Lines]",
          "370:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "362:         \"token\": checkout.token,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "412:     total = calculations.checkout_total(",
          "413:         manager=manager, checkout_info=checkout_info, lines=lines, address=address",
          "414:     )",
          "416:     variables = {",
          "418:         \"input\": {",
          "419:             \"gateway\": DUMMY_GATEWAY,",
          "420:             \"token\": \"sample-token\",",
          "",
          "[Removed Lines]",
          "415:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "417:         \"checkoutId\": checkout_id,",
          "",
          "[Added Lines]",
          "408:         \"token\": checkout.token,",
          "",
          "---------------"
        ],
        "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
          "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
          "--- Hunk 1 ---",
          "[Context before]",
          "2877:   voucherChannelListingUpdate(id: ID!, input: VoucherChannelListingInput!): VoucherChannelListingUpdate",
          "2878:   exportProducts(input: ExportProductsInput!): ExportProducts",
          "2879:   fileUpload(file: Upload!): FileUpload",
          "2883:   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate",
          "2895:   channelCreate(input: ChannelCreateInput!): ChannelCreate",
          "2896:   channelUpdate(id: ID!, input: ChannelUpdateInput!): ChannelUpdate",
          "2897:   channelDelete(id: ID!, input: ChannelDeleteInput): ChannelDelete",
          "",
          "[Removed Lines]",
          "2880:   checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode",
          "2881:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate",
          "2882:   checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
          "2884:   checkoutCustomerAttach(checkoutId: ID!): CheckoutCustomerAttach",
          "2885:   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach",
          "2886:   checkoutEmailUpdate(checkoutId: ID, email: String!): CheckoutEmailUpdate",
          "2887:   checkoutLineDelete(checkoutId: ID!, lineId: ID): CheckoutLineDelete",
          "2888:   checkoutLinesAdd(checkoutId: ID!, lines: [CheckoutLineInput]!): CheckoutLinesAdd",
          "2889:   checkoutLinesUpdate(checkoutId: ID!, lines: [CheckoutLineInput]!): CheckoutLinesUpdate",
          "2890:   checkoutRemovePromoCode(checkoutId: ID!, promoCode: String!): CheckoutRemovePromoCode",
          "2891:   checkoutPaymentCreate(checkoutId: ID!, input: PaymentInput!): CheckoutPaymentCreate",
          "2892:   checkoutShippingAddressUpdate(checkoutId: ID!, shippingAddress: AddressInput!): CheckoutShippingAddressUpdate",
          "2893:   checkoutShippingMethodUpdate(checkoutId: ID, shippingMethodId: ID!): CheckoutShippingMethodUpdate",
          "2894:   checkoutLanguageCodeUpdate(checkoutId: ID!, languageCode: LanguageCodeEnum!): CheckoutLanguageCodeUpdate",
          "",
          "[Added Lines]",
          "2880:   checkoutAddPromoCode(checkoutId: ID, promoCode: String!, token: UUID): CheckoutAddPromoCode",
          "2881:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID, token: UUID): CheckoutBillingAddressUpdate",
          "2882:   checkoutComplete(checkoutId: ID, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false, token: UUID): CheckoutComplete",
          "2884:   checkoutCustomerAttach(checkoutId: ID, token: UUID): CheckoutCustomerAttach",
          "2885:   checkoutCustomerDetach(checkoutId: ID, token: UUID): CheckoutCustomerDetach",
          "2886:   checkoutEmailUpdate(checkoutId: ID, email: String!, token: UUID): CheckoutEmailUpdate",
          "2887:   checkoutLineDelete(checkoutId: ID, lineId: ID, token: UUID): CheckoutLineDelete",
          "2888:   checkoutLinesAdd(checkoutId: ID, lines: [CheckoutLineInput]!, token: UUID): CheckoutLinesAdd",
          "2889:   checkoutLinesUpdate(checkoutId: ID, lines: [CheckoutLineInput]!, token: UUID): CheckoutLinesUpdate",
          "2890:   checkoutRemovePromoCode(checkoutId: ID, promoCode: String!, token: UUID): CheckoutRemovePromoCode",
          "2891:   checkoutPaymentCreate(checkoutId: ID, input: PaymentInput!, token: UUID): CheckoutPaymentCreate",
          "2892:   checkoutShippingAddressUpdate(checkoutId: ID, shippingAddress: AddressInput!, token: UUID): CheckoutShippingAddressUpdate",
          "2893:   checkoutShippingMethodUpdate(checkoutId: ID, shippingMethodId: ID!, token: UUID): CheckoutShippingMethodUpdate",
          "2894:   checkoutLanguageCodeUpdate(checkoutId: ID, languageCode: LanguageCodeEnum!, token: UUID): CheckoutLanguageCodeUpdate",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aeb535ab1e8ee19dc0941069b64b19146eff9ff4",
      "candidate_info": {
        "commit_hash": "aeb535ab1e8ee19dc0941069b64b19146eff9ff4",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/aeb535ab1e8ee19dc0941069b64b19146eff9ff4",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py"
        ],
        "message": "Fix the names for adyen configuration (#5990)\n\n* Fix the names for adyen configuration\n\n* Apply changes after review",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     PLUGIN_ID = \"mirumee.payments.adyen\"",
          "51:     PLUGIN_NAME = GATEWAY_NAME",
          "52:     DEFAULT_CONFIGURATION = [",
          "64:     ]",
          "66:     CONFIG_STRUCTURE = {",
          "68:             \"type\": ConfigurationTypeField.SECRET,",
          "69:             \"help_text\": (",
          "70:                 \"To submit payments to Adyen, you'll be making API requests that are \"",
          "",
          "[Removed Lines]",
          "53:         {\"name\": \"Merchant Account\", \"value\": None},",
          "54:         {\"name\": \"API key\", \"value\": None},",
          "55:         {\"name\": \"Supported currencies\", \"value\": \"\"},",
          "56:         {\"name\": \"Client Key\", \"value\": \"\"},",
          "57:         {\"name\": \"Origin Url\", \"value\": \"\"},",
          "58:         {\"name\": \"Live\", \"value\": \"\"},",
          "59:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
          "60:         {\"name\": \"Automatic payment capture\", \"value\": False},",
          "61:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
          "62:         {\"name\": \"Notification user\", \"value\": \"\"},",
          "63:         {\"name\": \"Notification password\", \"value\": \"\"},",
          "67:         \"API key\": {",
          "",
          "[Added Lines]",
          "53:         {\"name\": \"merchant-account\", \"value\": None},",
          "54:         {\"name\": \"api-key\", \"value\": None},",
          "55:         {\"name\": \"supported-currencies\", \"value\": \"\"},",
          "56:         {\"name\": \"client-key\", \"value\": \"\"},",
          "57:         {\"name\": \"origin-url\", \"value\": \"\"},",
          "58:         {\"name\": \"live\", \"value\": \"\"},",
          "59:         {\"name\": \"adyen-auto-capture\", \"value\": True},",
          "60:         {\"name\": \"auto-capture\", \"value\": False},",
          "61:         {\"name\": \"hmac-secret-key\", \"value\": \"\"},",
          "62:         {\"name\": \"notification-user\", \"value\": \"\"},",
          "63:         {\"name\": \"notification-password\", \"value\": \"\"},",
          "67:         \"api-key\": {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:             ),",
          "74:             \"label\": \"API key\",",
          "75:         },",
          "77:             \"type\": ConfigurationTypeField.STRING,",
          "78:             \"help_text\": \"Yout merchant account name.\",",
          "79:             \"label\": \"Merchant Account\",",
          "80:         },",
          "82:             \"type\": ConfigurationTypeField.STRING,",
          "83:             \"help_text\": \"Determines currencies supported by gateway.\"",
          "84:             \" Please enter currency codes separated by a comma.\",",
          "85:             \"label\": \"Supported currencies\",",
          "86:         },",
          "88:             \"type\": ConfigurationTypeField.STRING,",
          "89:             \"help_text\": (",
          "90:                 \"The client key is a public key that uniquely identifies a web service \"",
          "",
          "[Removed Lines]",
          "76:         \"Merchant Account\": {",
          "81:         \"Supported currencies\": {",
          "87:         \"Client Key\": {",
          "",
          "[Added Lines]",
          "76:         \"merchant-account\": {",
          "81:         \"supported-currencies\": {",
          "87:         \"client-key\": {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:             ),",
          "96:             \"label\": \"Client Key\",",
          "97:         },",
          "99:             \"type\": ConfigurationTypeField.STRING,",
          "100:             \"help_text\": (",
          "101:                 \"The origin URL of the page where you are rendering the Drop-in. This \"",
          "102:                 \"should not include subdirectories and a trailing slash. For example, \"",
          "103:                 \"if you are rendering the Drop-in on \"",
          "104:                 \"https://your-company.com/checkout/payment, specify here: \"",
          "106:             ),",
          "108:         },",
          "110:             \"type\": ConfigurationTypeField.STRING,",
          "111:             \"help_text\": (",
          "112:                 \"Leave it blank when you want to use test env. To communicate with the\"",
          "",
          "[Removed Lines]",
          "98:         \"Origin Url\": {",
          "105:                 \"https://your-company.com. Not required for Android or iOS app.\"",
          "107:             \"label\": \"Origin Url\",",
          "109:         \"Live\": {",
          "",
          "[Added Lines]",
          "98:         \"origin-url\": {",
          "105:                 \"https://your-company.com. For more details see: \"",
          "106:                 \"https://docs.adyen.com/checkout/drop-in-web\"",
          "107:                 \"Not required for Android or iOS app.\"",
          "109:             \"label\": \"Origin URL\",",
          "111:         \"live\": {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:             ),",
          "119:             \"label\": \"Live\",",
          "120:         },",
          "122:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "123:             \"help_text\": (",
          "127:             ),",
          "129:         },",
          "131:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "134:         },",
          "136:             \"type\": ConfigurationTypeField.SECRET,",
          "137:             \"help_text\": (",
          "138:                 \"Provide secret key generated on Adyen side.\"",
          "",
          "[Removed Lines]",
          "121:         \"Automatically mark payment as a capture\": {",
          "124:                 \"All authorized payments will be marked as paid. This should be enabled\"",
          "125:                 \" when Adyen uses automatically auto-capture. Saleor doesn't support \"",
          "126:                 \"delayed automatically capture.\"",
          "128:             \"label\": \"Automatically mark payment as a capture\",",
          "130:         \"Automatic payment capture\": {",
          "132:             \"help_text\": \"Determines if Saleor should automaticaly capture payments.\",",
          "133:             \"label\": \"Automatic payment capture\",",
          "135:         \"HMAC secret key\": {",
          "",
          "[Added Lines]",
          "123:         \"adyen-auto-capture\": {",
          "126:                 \"All authorized payments will be marked as captured. This should only\"",
          "127:                 \" be enabled if Adyen is configured to auto-capture payments.\"",
          "128:                 \" Saleor doesn't support the delayed capture Adyen feature.\"",
          "130:             \"label\": \"Assume all authorizations are automatically captured by Adyen\",",
          "132:         \"auto-capture\": {",
          "134:             \"help_text\": (",
          "135:                 \"If enabled, Saleor will automatically capture funds. If, disabled, the\"",
          "136:                 \" funds are blocked but need to be captured manually.\"",
          "137:             ),",
          "138:             \"label\": \"Automatically capture funds when a payment is made\",",
          "140:         \"hmac-secret-key\": {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142:             ),",
          "143:             \"label\": \"HMAC secret key\",",
          "144:         },",
          "146:             \"type\": ConfigurationTypeField.STRING,",
          "147:             \"help_text\": (",
          "148:                 \"Base User provided on the Adyen side to authenticate incoming \"",
          "",
          "[Removed Lines]",
          "145:         \"Notification user\": {",
          "",
          "[Added Lines]",
          "150:         \"notification-user\": {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "153:             ),",
          "154:             \"label\": \"Notification user\",",
          "155:         },",
          "157:             \"type\": ConfigurationTypeField.SECRET,",
          "158:             \"help_text\": (",
          "159:                 \"User password provided on the Adyen side for authenticate incoming \"",
          "",
          "[Removed Lines]",
          "156:         \"Notification password\": {",
          "",
          "[Added Lines]",
          "161:         \"notification-password\": {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "171:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
          "172:         self.config = GatewayConfig(",
          "173:             gateway_name=GATEWAY_NAME,",
          "176:             connection_params={",
          "188:             },",
          "189:         )",
          "190:         api_key = self.config.connection_params[\"api_key\"]",
          "",
          "[Removed Lines]",
          "174:             auto_capture=configuration[\"Automatic payment capture\"],",
          "175:             supported_currencies=configuration[\"Supported currencies\"],",
          "177:                 \"api_key\": configuration[\"API key\"],",
          "178:                 \"merchant_account\": configuration[\"Merchant Account\"],",
          "179:                 \"client_key\": configuration[\"Client Key\"],",
          "180:                 \"origin_url\": configuration[\"Origin Url\"],",
          "181:                 \"live\": configuration[\"Live\"],",
          "182:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
          "183:                 \"webhook_user\": configuration[\"Notification user\"],",
          "184:                 \"webhook_user_password\": configuration[\"Notification password\"],",
          "185:                 \"adyen_auto_capture\": configuration[",
          "186:                     \"Automatically mark payment as a capture\"",
          "187:                 ],",
          "",
          "[Added Lines]",
          "179:             auto_capture=configuration[\"auto-capture\"],",
          "180:             supported_currencies=configuration[\"supported-currencies\"],",
          "182:                 \"api_key\": configuration[\"api-key\"],",
          "183:                 \"merchant_account\": configuration[\"merchant-account\"],",
          "184:                 \"client_key\": configuration[\"client-key\"],",
          "185:                 \"origin_url\": configuration[\"origin-url\"],",
          "186:                 \"live\": configuration[\"live\"],",
          "187:                 \"webhook_hmac\": configuration[\"hmac-secret-key\"],",
          "188:                 \"webhook_user\": configuration[\"notification-user\"],",
          "189:                 \"webhook_user_password\": configuration[\"notification-password\"],",
          "190:                 \"adyen_auto_capture\": configuration[\"adyen-auto-capture\"],",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py": [
          "File: saleor/payment/gateways/adyen/tests/conftest.py -> saleor/payment/gateways/adyen/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:             {",
          "33:                 \"active\": True,",
          "34:                 \"configuration\": [",
          "46:                 ],",
          "47:             },",
          "48:         )",
          "",
          "[Removed Lines]",
          "35:                     {\"name\": \"API key\", \"value\": api_key},",
          "36:                     {\"name\": \"Merchant Account\", \"value\": merchant_account},",
          "37:                     {\"name\": \"Return Url\", \"value\": return_url},",
          "38:                     {\"name\": \"Client Key\", \"value\": client_key},",
          "39:                     {\"name\": \"Origin Url\", \"value\": origin_url},",
          "40:                     {",
          "41:                         \"name\": \"Automatically mark payment as a capture\",",
          "42:                         \"value\": adyen_auto_capture,",
          "43:                     },",
          "44:                     {\"name\": \"Automatic payment capture\", \"value\": auto_capture},",
          "45:                     {\"name\": \"Supported currencies\", \"value\": \"USD\"},",
          "",
          "[Added Lines]",
          "35:                     {\"name\": \"api-key\", \"value\": api_key},",
          "36:                     {\"name\": \"merchant-account\", \"value\": merchant_account},",
          "37:                     {\"name\": \"return-url\", \"value\": return_url},",
          "38:                     {\"name\": \"client-key\", \"value\": client_key},",
          "39:                     {\"name\": \"origin-url\", \"value\": origin_url},",
          "40:                     {\"name\": \"adyen-auto-capture\", \"value\": adyen_auto_capture},",
          "41:                     {\"name\": \"auto-capture\", \"value\": auto_capture},",
          "42:                     {\"name\": \"supported-currencies\", \"value\": \"USD\"},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e92aa8f1ec25f64cb1e6659907da6a524ec15b0",
      "candidate_info": {
        "commit_hash": "7e92aa8f1ec25f64cb1e6659907da6a524ec15b0",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/7e92aa8f1ec25f64cb1e6659907da6a524ec15b0",
        "files": [
          "saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Update handle_additional_actions for adyen",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py": [
          "File: saleor/payment/gateways/adyen/tests/conftest.py -> saleor/payment/gateways/adyen/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:         email=checkout_with_items.email,",
          "63:         customer_ip_address=\"\",",
          "64:         checkout=checkout_with_items,",
          "65:     )",
          "66:     return payment",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:         return_url=\"https://www.example.com\",",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py": [
          "File: saleor/payment/gateways/adyen/tests/test_webhook.py -> saleor/payment/gateways/adyen/tests/test_webhook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from decimal import Decimal",
          "2: from unittest import mock",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import json",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: from ..utils import get_price_amount",
          "12: from ..webhooks import (",
          "13:     create_new_transaction,",
          "14:     handle_authorization,",
          "15:     handle_cancel_or_refund,",
          "16:     handle_cancellation,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:     handle_additional_actions,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "601:     config = plugin.config",
          "602:     is_valid = validate_auth_user(headers={}, gateway_config=config)",
          "603:     assert is_valid is True",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "608: def test_handle_additional_actions(payment_adyen_for_checkout):",
          "609:     # given",
          "610:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "611:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "612:     )",
          "613:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\"])",
          "615:     payment_id = graphene.Node.to_global_id(\"Payment\", payment_adyen_for_checkout.pk)",
          "616:     request_mock = mock.Mock()",
          "617:     request_mock.GET = {\"payment\": payment_id}",
          "618:     request_mock.POST = {\"payload\": \"test\"}",
          "620:     payment_details_mock = mock.Mock()",
          "621:     payment_details_mock.return_value.message = {",
          "622:         \"resultCode\": \"Test\",",
          "623:     }",
          "625:     # when",
          "626:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "628:     # then",
          "629:     assert response.status_code == 302",
          "632: def test_handle_additional_actions_more_action_required(payment_adyen_for_checkout):",
          "633:     # given",
          "634:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "635:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "636:     )",
          "637:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\"])",
          "639:     payment_id = graphene.Node.to_global_id(\"Payment\", payment_adyen_for_checkout.pk)",
          "640:     request_mock = mock.Mock()",
          "641:     request_mock.GET = {\"payment\": payment_id}",
          "642:     request_mock.POST = {\"payload\": \"test\"}",
          "644:     payment_details_mock = mock.Mock()",
          "645:     payment_details_mock.return_value.message = {",
          "646:         \"action\": {",
          "647:             \"method\": \"GET\",",
          "648:             \"paymentData\": \"123\",",
          "649:             \"paymentMethodType\": \"ideal\",",
          "650:             \"type\": \"redirect\",",
          "651:             \"url\": \"https://test.adyen.com/hpp/redirectIdeal.shtml?brandCode=ideal\",",
          "652:         },",
          "653:     }",
          "655:     # when",
          "656:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "658:     # then",
          "659:     assert response.status_code == 302",
          "662: def test_handle_additional_actions_payment_does_not_exist(payment_adyen_for_checkout):",
          "663:     # given",
          "664:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "665:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "666:     )",
          "667:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\"])",
          "669:     payment_id = graphene.Node.to_global_id(\"Payment\", payment_adyen_for_checkout.pk)",
          "670:     request_mock = mock.Mock()",
          "671:     request_mock.GET = {\"payment\": payment_id}",
          "672:     request_mock.POST = {\"payload\": \"test\"}",
          "674:     payment_details_mock = mock.Mock()",
          "675:     payment_details_mock.return_value.message = {",
          "676:         \"resultCode\": \"Test\",",
          "677:     }",
          "679:     payment_adyen_for_checkout.delete()",
          "681:     # when",
          "682:     with pytest.raises(Exception) as e:",
          "683:         handle_additional_actions(request_mock, payment_details_mock)",
          "685:     # then",
          "686:     assert str(e._excinfo[1]) == \"Cannot perform payment. Payment does not exists.\"",
          "689: def test_handle_additional_actions_payment_lack_of_return_url(",
          "690:     payment_adyen_for_checkout,",
          "691: ):",
          "692:     # given",
          "693:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "694:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "695:     )",
          "696:     payment_adyen_for_checkout.return_url = None",
          "697:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\", \"return_url\"])",
          "699:     payment_id = graphene.Node.to_global_id(\"Payment\", payment_adyen_for_checkout.pk)",
          "700:     request_mock = mock.Mock()",
          "701:     request_mock.GET = {\"payment\": payment_id}",
          "702:     request_mock.POST = {\"payload\": \"test\"}",
          "704:     payment_details_mock = mock.Mock()",
          "705:     payment_details_mock.return_value.message = {",
          "706:         \"resultCode\": \"Test\",",
          "707:     }",
          "709:     # when",
          "710:     with pytest.raises(Exception) as e:",
          "711:         handle_additional_actions(request_mock, payment_details_mock)",
          "713:     # then",
          "714:     assert str(e._excinfo[1]) == \"Cannot perform payment. Lack of data about returnUrl.\"",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from typing import Any, Callable, Dict, Optional",
          "8: from django.contrib.auth.hashers import check_password",
          "9: from django.core.handlers.wsgi import WSGIRequest",
          "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
          "11: from django.http.request import HttpHeaders",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: from django.core.exceptions import ObjectDoesNotExist",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "474: ):",
          "475:     try:",
          "476:         json_data = json.loads(request.body)",
          "478:         return handle_additional_actions(request, payment_details)",
          "479:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
          "480:     # object.",
          "481:     notification = json_data.get(\"notificationItems\")[0].get(",
          "",
          "[Removed Lines]",
          "477:     except json.decoder.JSONDecodeError:",
          "",
          "[Added Lines]",
          "478:     except ValueError:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "497: def handle_additional_actions(request: WSGIRequest, payment_details: Callable):",
          "498:     payment_id = request.GET[\"payment\"]",
          "499:     _type, payment_pk = from_global_id(payment_id)",
          "506:     data = json.loads(payment.extra_data)",
          "507:     return_url = payment.return_url",
          "509:     if not return_url:",
          "513:     request_data = {",
          "514:         \"paymentData\": data[\"payment_data\"],",
          "",
          "[Removed Lines]",
          "500:     payment = Payment.objects.filter(pk=payment_pk).first()",
          "502:     if not payment:",
          "503:         # TODO: raise error",
          "504:         return",
          "510:         # TODO: raise error",
          "511:         pass",
          "",
          "[Added Lines]",
          "502:     try:",
          "503:         payment = Payment.objects.get(pk=payment_pk)",
          "504:     except ObjectDoesNotExist:",
          "505:         raise Exception(\"Cannot perform payment. Payment does not exists.\")",
          "511:         raise Exception(\"Cannot perform payment. Lack of data about returnUrl.\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "520:     # Check if further action is needed.",
          "521:     if \"action\" in result.message:",
          "523:     else:",
          "",
          "[Removed Lines]",
          "522:         redirect(return_url, result.message[\"action\"])",
          "524:         redirect(return_url, result.message[\"resultCode\"])",
          "",
          "[Added Lines]",
          "522:         return redirect(return_url, action=result.message[\"action\"])",
          "524:         return redirect(return_url, result_code=result.message[\"resultCode\"])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cca40939facb9276aa7087cfc5ddf6a6bde71f4",
      "candidate_info": {
        "commit_hash": "1cca40939facb9276aa7087cfc5ddf6a6bde71f4",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/1cca40939facb9276aa7087cfc5ddf6a6bde71f4",
        "files": [
          "saleor/graphql/schema.graphql",
          "saleor/order/__init__.py",
          "saleor/order/events.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Add external service event to OrderEvent",
        "before_after_code_files": [
          "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
          "saleor/order/__init__.py||saleor/order/__init__.py",
          "saleor/order/events.py||saleor/order/events.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/order/__init__.py||saleor/order/__init__.py",
            "saleor/order/events.py||saleor/order/events.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/order/__init__.py||saleor/order/__init__.py",
            "saleor/order/events.py||saleor/order/events.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
          "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
          "--- Hunk 1 ---",
          "[Context before]",
          "3063:   EMAIL_SENT",
          "3064:   PAYMENT_AUTHORIZED",
          "3065:   PAYMENT_CAPTURED",
          "3067:   PAYMENT_REFUNDED",
          "3068:   PAYMENT_VOIDED",
          "3069:   PAYMENT_FAILED",
          "",
          "[Removed Lines]",
          "3066:   PAYMENT_GATEWAY_NOTIFICATION",
          "",
          "[Added Lines]",
          "3066:   EXTERNAL_SERVICE_NOTIFICATION",
          "",
          "---------------"
        ],
        "saleor/order/__init__.py||saleor/order/__init__.py": [
          "File: saleor/order/__init__.py -> saleor/order/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     PAYMENT_REFUNDED = \"payment_refunded\"",
          "52:     PAYMENT_VOIDED = \"payment_voided\"",
          "53:     PAYMENT_FAILED = \"payment_failed\"",
          "56:     INVOICE_REQUESTED = \"invoice_requested\"",
          "57:     INVOICE_GENERATED = \"invoice_generated\"",
          "",
          "[Removed Lines]",
          "54:     PAYMENT_GATEWAY_NOTIFICATION = \"payment_gateway_notification\"",
          "",
          "[Added Lines]",
          "54:     EXTERNAL_SERVICE_NOTIFICATION = \"external_service_notification\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         (EMAIL_SENT, \"The email was sent\"),",
          "82:         (PAYMENT_AUTHORIZED, \"The payment was authorized\"),",
          "83:         (PAYMENT_CAPTURED, \"The payment was captured\"),",
          "85:         (PAYMENT_REFUNDED, \"The payment was refunded\"),",
          "86:         (PAYMENT_VOIDED, \"The payment was voided\"),",
          "87:         (PAYMENT_FAILED, \"The payment was failed\"),",
          "",
          "[Removed Lines]",
          "84:         (PAYMENT_GATEWAY_NOTIFICATION, \"Notification from payment gateway\"),",
          "",
          "[Added Lines]",
          "84:         (EXTERNAL_SERVICE_NOTIFICATION, \"Notification from external service\"),",
          "",
          "---------------"
        ],
        "saleor/order/events.py||saleor/order/events.py": [
          "File: saleor/order/events.py -> saleor/order/events.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:     )",
          "265: ) -> OrderEvent:",
          "266:     if not _user_is_valid(user):",
          "",
          "[Removed Lines]",
          "263: def payment_gateway_notification_event(",
          "",
          "[Added Lines]",
          "263: def external_notification_event(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:     parameters = {\"message\": message}",
          "270:     if payment:",
          "273:     return OrderEvent.objects.create(",
          "274:         order=order,",
          "276:         user=user,",
          "277:         parameters=parameters,",
          "278:     )",
          "",
          "[Removed Lines]",
          "271:         parameters.update({\"plugin\": payment.gateway, \"payment_id\": payment.token})",
          "275:         type=OrderEvents.PAYMENT_GATEWAY_NOTIFICATION,",
          "",
          "[Added Lines]",
          "271:         parameters.update({\"service\": payment.gateway, \"id\": payment.token})",
          "275:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION,",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     order_captured,",
          "19:     order_refunded,",
          "20: )",
          "22: from ....payment.models import Payment, Transaction",
          "23: from ... import ChargeStatus, TransactionKind",
          "24: from ...interface import GatewayConfig, GatewayResponse",
          "",
          "[Removed Lines]",
          "21: from ....order.events import payment_gateway_notification_event",
          "",
          "[Added Lines]",
          "21: from ....order.events import external_notification_event",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:         return",
          "75:     msg = success_msg if is_success else failed_msg",
          "78:         order=payment.order, user=None, message=msg, payment=payment",
          "79:     )",
          "",
          "[Removed Lines]",
          "77:     payment_gateway_notification_event(",
          "",
          "[Added Lines]",
          "77:     external_notification_event(",
          "",
          "---------------"
        ]
      }
    }
  ]
}