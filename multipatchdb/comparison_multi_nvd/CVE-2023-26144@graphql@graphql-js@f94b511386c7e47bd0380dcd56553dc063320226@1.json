{
  "cve_id": "CVE-2023-26144",
  "cve_desc": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
  "repo": "graphql/graphql-js",
  "patch_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
  "patch_info": {
    "commit_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
    "repo": "graphql/graphql-js",
    "commit_url": "https://github.com/graphql/graphql-js/commit/f94b511386c7e47bd0380dcd56553dc063320226",
    "files": [
      "benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ],
    "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3958)\n\nCo-authored-by: AaronMoat <AaronMoat@users.noreply.github.com>\nCo-authored-by: Ivan Goncharov <ivan.goncharov.ua@gmail.com>\nResolves https://github.com/graphql/graphql-js/issues/3955 (at least",
    "before_after_code_files": [
      "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ]
  },
  "patch_diff": {
    "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
      "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { graphqlSync } from 'graphql/graphql.js';",
      "2: import { buildSchema } from 'graphql/utilities/buildASTSchema.js';",
      "4: const schema = buildSchema('type Query { hello: String! }');",
      "5: const source = `{ ${'hello '.repeat(250)}}`;",
      "7: export const benchmark = {",
      "8:   name: 'Many repeated fields',",
      "9:   count: 5,",
      "10:   measure() {",
      "11:     graphqlSync({ schema, source });",
      "12:   },",
      "13: };",
      "",
      "---------------"
    ],
    "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts": [
      "File: src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts -> src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "179:     ]);",
      "180:   });",
      "182:   it('mix of stream and no stream', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:   it('different stream directive extra argument', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "185:         name @stream(label: \"streamLabel\", initialCount: 1)",
      "186:         name @stream(label: \"streamLabel\", initialCount: 1, extraArg: true)",
      "187:       }",
      "188:     `).toDeepEqual([",
      "189:       {",
      "190:         message:",
      "191:           'Fields \"name\" conflict because they have differing stream directives. Use different aliases on the fields to fetch both if this was intentional.',",
      "192:         locations: [",
      "193:           { line: 3, column: 9 },",
      "194:           { line: 4, column: 9 },",
      "195:         ],",
      "196:       },",
      "197:     ]);",
      "198:   });",
      "",
      "---------------"
    ],
    "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
      "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   DirectiveNode,",
      "8:   FieldNode,",
      "9:   FragmentDefinitionNode,",
      "11:   SelectionSetNode,",
      "12: } from '../../language/ast.js';",
      "13: import { Kind } from '../../language/kinds.js';",
      "14: import { print } from '../../language/printer.js';",
      "",
      "[Removed Lines]",
      "10:   ObjectValueNode,",
      "",
      "[Added Lines]",
      "11:   ValueNode,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "592:     }",
      "596:       return [",
      "597:         [responseName, 'they have differing arguments'],",
      "598:         [node1],",
      "",
      "[Removed Lines]",
      "595:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
      "",
      "[Added Lines]",
      "595:     if (!sameArguments(node1, node2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "649:   }",
      "650: }",
      "665: }",
      "667: function getStreamDirective(",
      "",
      "[Removed Lines]",
      "652: function stringifyArguments(fieldNode: FieldNode | DirectiveNode): string {",
      "654:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
      "656:   const inputObjectWithArgs: ObjectValueNode = {",
      "657:     kind: Kind.OBJECT,",
      "658:     fields: args.map((argNode) => ({",
      "659:       kind: Kind.OBJECT_FIELD,",
      "660:       name: argNode.name,",
      "661:       value: argNode.value,",
      "662:     })),",
      "663:   };",
      "664:   return print(sortValueNode(inputObjectWithArgs));",
      "",
      "[Added Lines]",
      "652: function sameArguments(",
      "653:   node1: FieldNode | DirectiveNode,",
      "654:   node2: FieldNode | DirectiveNode,",
      "655: ): boolean {",
      "656:   const args1 = node1.arguments;",
      "657:   const args2 = node2.arguments;",
      "659:   if (args1 === undefined || args1.length === 0) {",
      "660:     return args2 === undefined || args2.length === 0;",
      "661:   }",
      "662:   if (args2 === undefined || args2.length === 0) {",
      "663:     return false;",
      "664:   }",
      "666:   if (args1.length !== args2.length) {",
      "667:     return false;",
      "668:   }",
      "670:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
      "671:   return args1.every((arg1) => {",
      "672:     const value1 = arg1.value;",
      "673:     const value2 = values2.get(arg1.name.value);",
      "674:     if (value2 === undefined) {",
      "675:       return false;",
      "676:     }",
      "678:     return stringifyValue(value1) === stringifyValue(value2);",
      "679:   });",
      "680: }",
      "682: function stringifyValue(value: ValueNode): string | null {",
      "683:   return print(sortValueNode(value));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "681:     return true;",
      "682:   } else if (stream1 && stream2) {",
      "685:   }",
      "687:   return false;",
      "",
      "[Removed Lines]",
      "684:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
      "",
      "[Added Lines]",
      "703:     return sameArguments(stream1, stream2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "25be244c483e4eabcf0b0ce65501ddd8c1160f56",
      "candidate_info": {
        "commit_hash": "25be244c483e4eabcf0b0ce65501ddd8c1160f56",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/25be244c483e4eabcf0b0ce65501ddd8c1160f56",
        "files": [
          "src/execution/buildFieldPlan.ts"
        ],
        "message": "incremental: optimize build field plan (#4147)\n\nmain improvement is to remove additional intermediate variables, i.e.\n`map`, `inOriginalResult`.",
        "before_after_code_files": [
          "src/execution/buildFieldPlan.ts||src/execution/buildFieldPlan.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/buildFieldPlan.ts||src/execution/buildFieldPlan.ts": [
          "File: src/execution/buildFieldPlan.ts -> src/execution/buildFieldPlan.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   parentDeferUsages: DeferUsageSet = new Set<DeferUsage>(),",
          "20: ): FieldPlan {",
          "21:   const groupedFieldSet = new Map<string, FieldGroup>();",
          "23:   const newGroupedFieldSets = new Map<DeferUsageSet, Map<string, FieldGroup>>();",
          "33:   for (const [responseKey, fieldGroup] of originalGroupedFieldSet) {",
          "61:       groupedFieldSet.set(responseKey, fieldGroup);",
          "62:       continue;",
          "63:     }",
          "66:     if (newGroupedFieldSet === undefined) {",
          "67:       newGroupedFieldSet = new Map();",
          "69:     }",
          "70:     newGroupedFieldSet.set(responseKey, fieldGroup);",
          "71:   }",
          "",
          "[Removed Lines]",
          "25:   const map = new Map<",
          "26:     string,",
          "27:     {",
          "28:       deferUsageSet: DeferUsageSet;",
          "29:       fieldGroup: FieldGroup;",
          "30:     }",
          "31:   >();",
          "34:     const deferUsageSet = new Set<DeferUsage>();",
          "35:     let inOriginalResult = false;",
          "36:     for (const fieldDetails of fieldGroup) {",
          "37:       const deferUsage = fieldDetails.deferUsage;",
          "38:       if (deferUsage === undefined) {",
          "39:         inOriginalResult = true;",
          "40:         continue;",
          "41:       }",
          "42:       deferUsageSet.add(deferUsage);",
          "43:     }",
          "44:     if (inOriginalResult) {",
          "45:       deferUsageSet.clear();",
          "46:     } else {",
          "47:       deferUsageSet.forEach((deferUsage) => {",
          "48:         const ancestors = getAncestors(deferUsage);",
          "49:         for (const ancestor of ancestors) {",
          "50:           if (deferUsageSet.has(ancestor)) {",
          "51:             deferUsageSet.delete(deferUsage);",
          "52:           }",
          "53:         }",
          "54:       });",
          "55:     }",
          "56:     map.set(responseKey, { deferUsageSet, fieldGroup });",
          "57:   }",
          "59:   for (const [responseKey, { deferUsageSet, fieldGroup }] of map) {",
          "60:     if (isSameSet(deferUsageSet, parentDeferUsages)) {",
          "65:     let newGroupedFieldSet = getBySet(newGroupedFieldSets, deferUsageSet);",
          "68:       newGroupedFieldSets.set(deferUsageSet, newGroupedFieldSet);",
          "",
          "[Added Lines]",
          "24:     const filteredDeferUsageSet = getFilteredDeferUsageSet(fieldGroup);",
          "26:     if (isSameSet(filteredDeferUsageSet, parentDeferUsages)) {",
          "31:     let newGroupedFieldSet = getBySet(",
          "32:       newGroupedFieldSets,",
          "33:       filteredDeferUsageSet,",
          "34:     );",
          "37:       newGroupedFieldSets.set(filteredDeferUsageSet, newGroupedFieldSet);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   };",
          "77: }",
          "85:   }",
          "87: }",
          "",
          "[Removed Lines]",
          "79: function getAncestors(deferUsage: DeferUsage): ReadonlyArray<DeferUsage> {",
          "80:   const ancestors: Array<DeferUsage> = [];",
          "81:   let parentDeferUsage: DeferUsage | undefined = deferUsage.parentDeferUsage;",
          "82:   while (parentDeferUsage !== undefined) {",
          "83:     ancestors.unshift(parentDeferUsage);",
          "84:     parentDeferUsage = parentDeferUsage.parentDeferUsage;",
          "86:   return ancestors;",
          "",
          "[Added Lines]",
          "48: function getFilteredDeferUsageSet(",
          "49:   fieldGroup: FieldGroup,",
          "50: ): ReadonlySet<DeferUsage> {",
          "51:   const filteredDeferUsageSet = new Set<DeferUsage>();",
          "52:   for (const fieldDetails of fieldGroup) {",
          "53:     const deferUsage = fieldDetails.deferUsage;",
          "54:     if (deferUsage === undefined) {",
          "55:       filteredDeferUsageSet.clear();",
          "56:       return filteredDeferUsageSet;",
          "57:     }",
          "58:     filteredDeferUsageSet.add(deferUsage);",
          "59:   }",
          "61:   for (const deferUsage of filteredDeferUsageSet) {",
          "62:     let parentDeferUsage: DeferUsage | undefined = deferUsage.parentDeferUsage;",
          "63:     while (parentDeferUsage !== undefined) {",
          "64:       if (filteredDeferUsageSet.has(parentDeferUsage)) {",
          "65:         filteredDeferUsageSet.delete(deferUsage);",
          "66:         break;",
          "67:       }",
          "68:       parentDeferUsage = parentDeferUsage.parentDeferUsage;",
          "69:     }",
          "71:   return filteredDeferUsageSet;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fa7d55d2ea2a4a7a3396a1338d2c97dbae361d0",
      "candidate_info": {
        "commit_hash": "6fa7d55d2ea2a4a7a3396a1338d2c97dbae361d0",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/6fa7d55d2ea2a4a7a3396a1338d2c97dbae361d0",
        "files": [
          "src/execution/IncrementalPublisher.ts"
        ],
        "message": "refactor: convert IncrementalPublisher class members to method args",
        "before_after_code_files": [
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   DeferredGroupedFieldSetResult,",
          "13:   ExperimentalIncrementalExecutionResults,",
          "14:   IncrementalDataRecord,",
          "15:   IncrementalDeferResult,",
          "16:   IncrementalResult,",
          "17:   IncrementalStreamResult,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:   IncrementalDataRecordResult,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   cancellableStreams: Set<CancellableStreamRecord> | undefined;",
          "46: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: interface SubsequentIncrementalExecutionResultContext {",
          "50:   pending: Array<PendingResult>;",
          "51:   incremental: Array<IncrementalResult>;",
          "52:   completed: Array<CompletedResult>;",
          "53: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:   private _context: IncrementalPublisherContext;",
          "56:   private _nextId: number;",
          "57:   private _incrementalGraph: IncrementalGraph;",
          "61:   constructor(context: IncrementalPublisherContext) {",
          "62:     this._context = context;",
          "63:     this._nextId = 0;",
          "64:     this._incrementalGraph = new IncrementalGraph();",
          "67:   }",
          "69:   buildResponse(",
          "",
          "[Removed Lines]",
          "58:   private _incremental: Array<IncrementalResult>;",
          "59:   private _completed: Array<CompletedResult>;",
          "65:     this._incremental = [];",
          "66:     this._completed = [];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:         return { value: undefined, done: true };",
          "126:       }",
          "128:       const completedIncrementalData =",
          "129:         this._incrementalGraph.completedIncrementalData();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:       const context: SubsequentIncrementalExecutionResultContext = {",
          "132:         pending: [],",
          "133:         incremental: [],",
          "134:         completed: [],",
          "135:       };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:       const asyncIterator = completedIncrementalData[Symbol.asyncIterator]();",
          "133:       let iteration = await asyncIterator.next();",
          "134:       while (!iteration.done) {",
          "137:         for (const completedResult of iteration.value) {",
          "146:         }",
          "149:           const hasNext = this._incrementalGraph.hasNext();",
          "151:           if (!hasNext) {",
          "",
          "[Removed Lines]",
          "135:         let pending: Array<PendingResult> = [];",
          "138:           if (isDeferredGroupedFieldSetResult(completedResult)) {",
          "139:             this._handleCompletedDeferredGroupedFieldSet(completedResult);",
          "140:           } else {",
          "141:             this._handleCompletedStreamItems(completedResult);",
          "142:           }",
          "144:           const newPending = this._incrementalGraph.getNewPending();",
          "145:           pending = [...pending, ...this._pendingSourcesToResults(newPending)];",
          "148:         if (this._incremental.length > 0 || this._completed.length > 0) {",
          "",
          "[Added Lines]",
          "145:           this._handleCompletedIncrementalData(completedResult, context);",
          "148:         const { incremental, completed } = context;",
          "149:         if (incremental.length > 0 || completed.length > 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "156:           const subsequentIncrementalExecutionResult: SubsequentIncrementalExecutionResult =",
          "157:             { hasNext };",
          "159:           if (pending.length > 0) {",
          "160:             subsequentIncrementalExecutionResult.pending = pending;",
          "161:           }",
          "165:           }",
          "168:           }",
          "173:           return { value: subsequentIncrementalExecutionResult, done: false };",
          "174:         }",
          "",
          "[Removed Lines]",
          "162:           if (this._incremental.length > 0) {",
          "163:             subsequentIncrementalExecutionResult.incremental =",
          "164:               this._incremental;",
          "166:           if (this._completed.length > 0) {",
          "167:             subsequentIncrementalExecutionResult.completed = this._completed;",
          "170:           this._incremental = [];",
          "171:           this._completed = [];",
          "",
          "[Added Lines]",
          "160:           const pending = context.pending;",
          "164:           if (incremental.length > 0) {",
          "165:             subsequentIncrementalExecutionResult.incremental = incremental;",
          "167:           if (completed.length > 0) {",
          "168:             subsequentIncrementalExecutionResult.completed = completed;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "207:     };",
          "208:   }",
          "210:   private _handleCompletedDeferredGroupedFieldSet(",
          "211:     deferredGroupedFieldSetResult: DeferredGroupedFieldSetResult,",
          "212:   ): void {",
          "213:     if (",
          "214:       isNonReconcilableDeferredGroupedFieldSetResult(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:   private _handleCompletedIncrementalData(",
          "209:     completedIncrementalData: IncrementalDataRecordResult,",
          "210:     context: SubsequentIncrementalExecutionResultContext,",
          "211:   ): void {",
          "212:     if (isDeferredGroupedFieldSetResult(completedIncrementalData)) {",
          "213:       this._handleCompletedDeferredGroupedFieldSet(",
          "214:         completedIncrementalData,",
          "215:         context,",
          "216:       );",
          "217:     } else {",
          "218:       this._handleCompletedStreamItems(completedIncrementalData, context);",
          "219:     }",
          "220:     const newPending = this._incrementalGraph.getNewPending();",
          "221:     context.pending.push(...this._pendingSourcesToResults(newPending));",
          "222:   }",
          "226:     context: SubsequentIncrementalExecutionResultContext,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "218:       for (const deferredFragmentRecord of deferredGroupedFieldSetResult.deferredFragmentRecords) {",
          "219:         const id = deferredFragmentRecord.id;",
          "220:         if (id !== undefined) {",
          "222:             id,",
          "223:             errors: deferredGroupedFieldSetResult.errors,",
          "224:           });",
          "",
          "[Removed Lines]",
          "221:           this._completed.push({",
          "",
          "[Added Lines]",
          "236:           context.completed.push({",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "255:       if (reconcilableResults === undefined) {",
          "256:         continue;",
          "257:       }",
          "258:       for (const reconcilableResult of reconcilableResults) {",
          "259:         if (reconcilableResult.sent) {",
          "260:           continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273:       const incremental = context.incremental;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "272:         if (subPath !== undefined) {",
          "273:           incrementalEntry.subPath = subPath;",
          "274:         }",
          "276:       }",
          "278:     }",
          "279:   }",
          "281:   private _handleCompletedStreamItems(",
          "282:     streamItemsResult: StreamItemsResult,",
          "283:   ): void {",
          "284:     const streamRecord = streamItemsResult.streamRecord;",
          "285:     const id = streamRecord.id;",
          "",
          "[Removed Lines]",
          "275:         this._incremental.push(incrementalEntry);",
          "277:       this._completed.push({ id });",
          "",
          "[Added Lines]",
          "291:         incremental.push(incrementalEntry);",
          "293:       context.completed.push({ id });",
          "299:     context: SubsequentIncrementalExecutionResultContext,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "290:       return;",
          "291:     }",
          "292:     if (streamItemsResult.errors !== undefined) {",
          "294:         id,",
          "295:         errors: streamItemsResult.errors,",
          "296:       });",
          "",
          "[Removed Lines]",
          "293:       this._completed.push({",
          "",
          "[Added Lines]",
          "310:       context.completed.push({",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "304:         });",
          "305:       }",
          "306:     } else if (streamItemsResult.result === undefined) {",
          "308:       this._incrementalGraph.removeSubsequentResultRecord(streamRecord);",
          "309:       if (isCancellableStreamRecord(streamRecord)) {",
          "310:         invariant(this._context.cancellableStreams !== undefined);",
          "",
          "[Removed Lines]",
          "307:       this._completed.push({ id });",
          "",
          "[Added Lines]",
          "324:       context.completed.push({ id });",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "316:         ...streamItemsResult.result,",
          "317:       };",
          "321:       if (streamItemsResult.incrementalDataRecords !== undefined) {",
          "322:         this._incrementalGraph.addIncrementalDataRecords(",
          "",
          "[Removed Lines]",
          "319:       this._incremental.push(incrementalEntry);",
          "",
          "[Added Lines]",
          "336:       context.incremental.push(incrementalEntry);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "062785e94353c4cab668423220ed37109e3ccd28",
      "candidate_info": {
        "commit_hash": "062785e94353c4cab668423220ed37109e3ccd28",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/062785e94353c4cab668423220ed37109e3ccd28",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/stream-test.ts",
          "src/execution/execute.ts",
          "src/execution/types.ts",
          "src/jsutils/BoxedPromiseOrValue.ts",
          "src/jsutils/__tests__/BoxedPromiseOrValue-test.ts"
        ],
        "message": "refactor(incremental): introduce BoxedPromiseOrValue to save resolved promise results",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts",
          "src/execution/execute.ts||src/execution/execute.ts",
          "src/execution/types.ts||src/execution/types.ts",
          "src/jsutils/BoxedPromiseOrValue.ts||src/jsutils/BoxedPromiseOrValue.ts",
          "src/jsutils/__tests__/BoxedPromiseOrValue-test.ts||src/jsutils/__tests__/BoxedPromiseOrValue-test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     this._newPending.clear();",
          "112:     for (const incrementalDataRecord of this._newIncrementalDataRecords) {",
          "114:       if (isPromise(result)) {",
          "116:         result.then((resolved) => this._enqueue(resolved));",
          "",
          "[Removed Lines]",
          "113:       const result = incrementalDataRecord.result;",
          "",
          "[Added Lines]",
          "113:       const result = incrementalDataRecord.result.value;",
          "",
          "---------------"
        ],
        "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts": [
          "File: src/execution/__tests__/defer-test.ts -> src/execution/__tests__/defer-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:             },",
          "368:             id: '0',",
          "369:           },",
          "376:           {",
          "377:             data: {",
          "378:               friends: [{ name: 'Han' }, { name: 'Leia' }, { name: 'C-3PO' }],",
          "",
          "[Removed Lines]",
          "370:         ],",
          "371:         completed: [{ id: '0' }],",
          "372:         hasNext: true,",
          "373:       },",
          "374:       {",
          "375:         incremental: [",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:             id: '1',",
          "381:           },",
          "382:         ],",
          "384:         hasNext: false,",
          "385:       },",
          "386:     ]);",
          "",
          "[Removed Lines]",
          "383:         completed: [{ id: '1' }],",
          "",
          "[Added Lines]",
          "377:         completed: [{ id: '0' }, { id: '1' }],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "732:             },",
          "733:             id: '0',",
          "734:           },",
          "741:           {",
          "742:             data: {",
          "743:               id: '1',",
          "",
          "[Removed Lines]",
          "735:         ],",
          "736:         completed: [{ id: '0' }],",
          "737:         hasNext: true,",
          "738:       },",
          "739:       {",
          "740:         incremental: [",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "745:             id: '1',",
          "746:           },",
          "747:         ],",
          "749:         hasNext: false,",
          "750:       },",
          "751:     ]);",
          "",
          "[Removed Lines]",
          "748:         completed: [{ id: '1' }],",
          "",
          "[Added Lines]",
          "736:         completed: [{ id: '0' }, { id: '1' }],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "909:             },",
          "910:             id: '0',",
          "911:           },",
          "918:           {",
          "919:             data: {",
          "920:               bar: 'bar',",
          "",
          "[Removed Lines]",
          "912:         ],",
          "913:         completed: [{ id: '0' }],",
          "914:         hasNext: true,",
          "915:       },",
          "916:       {",
          "917:         incremental: [",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "922:             id: '1',",
          "923:           },",
          "924:         ],",
          "926:         hasNext: false,",
          "927:       },",
          "928:     ]);",
          "",
          "[Removed Lines]",
          "925:         completed: [{ id: '1' }],",
          "",
          "[Added Lines]",
          "907:         completed: [{ id: '0' }, { id: '1' }],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "983:         hasNext: true,",
          "984:       },",
          "985:       {",
          "987:         incremental: [",
          "988:           {",
          "989:             data: { bar: 'bar' },",
          "990:             id: '0',",
          "991:             subPath: ['nestedObject', 'deeperObject'],",
          "992:           },",
          "1000:           {",
          "1001:             data: { baz: 'baz' },",
          "1002:             id: '1',",
          "1003:             subPath: ['deeperObject'],",
          "1004:           },",
          "1011:           {",
          "1012:             data: { bak: 'bak' },",
          "1013:             id: '2',",
          "1014:           },",
          "1015:         ],",
          "1017:         hasNext: false,",
          "1018:       },",
          "1019:     ]);",
          "",
          "[Removed Lines]",
          "986:         pending: [{ id: '1', path: ['hero', 'nestedObject'] }],",
          "993:         ],",
          "994:         completed: [{ id: '0' }],",
          "995:         hasNext: true,",
          "996:       },",
          "997:       {",
          "998:         pending: [{ id: '2', path: ['hero', 'nestedObject', 'deeperObject'] }],",
          "999:         incremental: [",
          "1005:         ],",
          "1006:         completed: [{ id: '1' }],",
          "1007:         hasNext: true,",
          "1008:       },",
          "1009:       {",
          "1010:         incremental: [",
          "1016:         completed: [{ id: '2' }],",
          "",
          "[Added Lines]",
          "968:         pending: [",
          "969:           { id: '1', path: ['hero', 'nestedObject'] },",
          "970:           { id: '2', path: ['hero', 'nestedObject', 'deeperObject'] },",
          "971:         ],",
          "988:         completed: [{ id: '0' }, { id: '1' }, { id: '2' }],",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2080:             data: { name: 'slow', friends: [{}, {}, {}] },",
          "2081:             id: '0',",
          "2082:           },",
          "2089:           { data: { name: 'Han' }, id: '1' },",
          "2090:           { data: { name: 'Leia' }, id: '2' },",
          "2091:           { data: { name: 'C-3PO' }, id: '3' },",
          "2092:         ],",
          "2094:         hasNext: false,",
          "2095:       },",
          "2096:     ]);",
          "",
          "[Removed Lines]",
          "2083:         ],",
          "2084:         completed: [{ id: '0' }],",
          "2085:         hasNext: true,",
          "2086:       },",
          "2087:       {",
          "2088:         incremental: [",
          "2093:         completed: [{ id: '1' }, { id: '2' }, { id: '3' }],",
          "",
          "[Added Lines]",
          "2059:         completed: [{ id: '0' }, { id: '1' }, { id: '2' }, { id: '3' }],",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2136:             },",
          "2137:             id: '0',",
          "2138:           },",
          "2145:           { data: { name: 'Han' }, id: '1' },",
          "2146:           { data: { name: 'Leia' }, id: '2' },",
          "2147:           { data: { name: 'C-3PO' }, id: '3' },",
          "2148:         ],",
          "2150:         hasNext: false,",
          "2151:       },",
          "2152:     ]);",
          "",
          "[Removed Lines]",
          "2139:         ],",
          "2140:         completed: [{ id: '0' }],",
          "2141:         hasNext: true,",
          "2142:       },",
          "2143:       {",
          "2144:         incremental: [",
          "2149:         completed: [{ id: '1' }, { id: '2' }, { id: '3' }],",
          "",
          "[Added Lines]",
          "2109:         completed: [{ id: '0' }, { id: '1' }, { id: '2' }, { id: '3' }],",
          "",
          "---------------"
        ],
        "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts": [
          "File: src/execution/__tests__/stream-test.ts -> src/execution/__tests__/stream-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:             items: [{ name: 'Luke', id: '1' }],",
          "370:             id: '0',",
          "371:           },",
          "377:           {",
          "378:             items: [{ name: 'Han', id: '2' }],",
          "379:             id: '0',",
          "380:           },",
          "386:           {",
          "387:             items: [{ name: 'Leia', id: '3' }],",
          "388:             id: '0',",
          "",
          "[Removed Lines]",
          "372:         ],",
          "373:         hasNext: true,",
          "374:       },",
          "375:       {",
          "376:         incremental: [",
          "381:         ],",
          "382:         hasNext: true,",
          "383:       },",
          "384:       {",
          "385:         incremental: [",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:               },",
          "528:             ],",
          "529:           },",
          "535:           {",
          "536:             items: [{ name: 'Leia', id: '3' }],",
          "537:             id: '0',",
          "",
          "[Removed Lines]",
          "530:         ],",
          "531:         hasNext: true,",
          "532:       },",
          "533:       {",
          "534:         incremental: [",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "572:             items: [{ name: 'Luke', id: '1' }],",
          "573:             id: '0',",
          "574:           },",
          "580:           {",
          "581:             items: [{ name: 'Han', id: '2' }],",
          "582:             id: '0',",
          "",
          "[Removed Lines]",
          "575:         ],",
          "576:         hasNext: true,",
          "577:       },",
          "578:       {",
          "579:         incremental: [",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "591:             id: '0',",
          "592:           },",
          "593:         ],",
          "597:         completed: [{ id: '0' }],",
          "598:         hasNext: false,",
          "599:       },",
          "",
          "[Removed Lines]",
          "594:         hasNext: true,",
          "595:       },",
          "596:       {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "633:             id: '0',",
          "634:           },",
          "635:         ],",
          "639:         completed: [{ id: '0' }],",
          "640:         hasNext: false,",
          "641:       },",
          "",
          "[Removed Lines]",
          "636:         hasNext: true,",
          "637:       },",
          "638:       {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "946:               },",
          "947:             ],",
          "948:           },",
          "954:           {",
          "955:             items: [{ nonNullName: 'Han' }],",
          "956:             id: '0',",
          "",
          "[Removed Lines]",
          "949:         ],",
          "950:         hasNext: true,",
          "951:       },",
          "952:       {",
          "953:         incremental: [",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "997:               },",
          "998:             ],",
          "999:           },",
          "1005:           {",
          "1006:             items: [{ nonNullName: 'Han' }],",
          "1007:             id: '0',",
          "",
          "[Removed Lines]",
          "1000:         ],",
          "1001:         hasNext: true,",
          "1002:       },",
          "1003:       {",
          "1004:         incremental: [",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1132:               },",
          "1133:             ],",
          "1134:           },",
          "1140:           {",
          "1141:             items: [{ nonNullName: 'Han' }],",
          "1142:             id: '0',",
          "1143:           },",
          "1144:         ],",
          "1148:         completed: [{ id: '0' }],",
          "1149:         hasNext: false,",
          "1150:       },",
          "",
          "[Removed Lines]",
          "1135:         ],",
          "1136:         hasNext: true,",
          "1137:       },",
          "1138:       {",
          "1139:         incremental: [",
          "1145:         hasNext: true,",
          "1146:       },",
          "1147:       {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1460:             ],",
          "1461:           },",
          "1462:         ],",
          "1468:         hasNext: false,",
          "1469:       },",
          "1470:     ]);",
          "",
          "[Removed Lines]",
          "1463:         completed: [{ id: '0' }],",
          "1464:         hasNext: true,",
          "1465:       },",
          "1466:       {",
          "1467:         completed: [{ id: '1' }],",
          "",
          "[Added Lines]",
          "1419:         completed: [{ id: '0' }, { id: '1' }],",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1570:             ],",
          "1571:           },",
          "1572:         ],",
          "1576:         completed: [{ id: '0' }],",
          "1577:         hasNext: false,",
          "1578:       },",
          "",
          "[Removed Lines]",
          "1573:         hasNext: true,",
          "1574:       },",
          "1575:       {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1724:             id: '0',",
          "1725:           },",
          "1726:         ],",
          "1730:         completed: [{ id: '0' }],",
          "1731:         hasNext: false,",
          "1732:       },",
          "",
          "[Removed Lines]",
          "1727:         hasNext: true,",
          "1728:       },",
          "1729:       {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1774:             items: [{ id: '1', name: 'Luke' }],",
          "1775:             id: '0',",
          "1776:           },",
          "1782:           {",
          "1783:             items: [{ id: '2', name: 'Han' }],",
          "1784:             id: '0',",
          "1785:           },",
          "1786:         ],",
          "1790:         completed: [{ id: '0' }],",
          "1791:         hasNext: false,",
          "1792:       },",
          "",
          "[Removed Lines]",
          "1777:         ],",
          "1778:         hasNext: true,",
          "1779:       },",
          "1780:       {",
          "1781:         incremental: [",
          "1787:         hasNext: true,",
          "1788:       },",
          "1789:       {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1844:             data: { scalarField: 'slow', nestedFriendList: [] },",
          "1845:             id: '0',",
          "1846:           },",
          "1857:           {",
          "1858:             items: [{ name: 'Luke' }],",
          "1859:             id: '1',",
          "1860:           },",
          "1870:           {",
          "1871:             items: [{ name: 'Han' }],",
          "1872:             id: '1',",
          "1873:           },",
          "1874:         ],",
          "1883:         hasNext: false,",
          "1884:       },",
          "1885:       done: false,",
          "1886:     });",
          "1889:       value: undefined,",
          "1890:       done: true,",
          "1891:     });",
          "",
          "[Removed Lines]",
          "1847:         ],",
          "1848:         completed: [{ id: '0' }],",
          "1849:         hasNext: true,",
          "1850:       },",
          "1851:       done: false,",
          "1852:     });",
          "1853:     const result3 = await iterator.next();",
          "1854:     expectJSON(result3).toDeepEqual({",
          "1855:       value: {",
          "1856:         incremental: [",
          "1861:         ],",
          "1862:         hasNext: true,",
          "1863:       },",
          "1864:       done: false,",
          "1865:     });",
          "1866:     const result4 = await iterator.next();",
          "1867:     expectJSON(result4).toDeepEqual({",
          "1868:       value: {",
          "1869:         incremental: [",
          "1875:         hasNext: true,",
          "1876:       },",
          "1877:       done: false,",
          "1878:     });",
          "1879:     const result5 = await iterator.next();",
          "1880:     expectJSON(result5).toDeepEqual({",
          "1881:       value: {",
          "1882:         completed: [{ id: '1' }],",
          "1887:     const result6 = await iterator.next();",
          "1888:     expectJSON(result6).toDeepEqual({",
          "",
          "[Added Lines]",
          "1794:         completed: [{ id: '0' }, { id: '1' }],",
          "1799:     const result3 = await iterator.next();",
          "1800:     expectJSON(result3).toDeepEqual({",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { inspect } from '../jsutils/inspect.js';",
          "2: import { invariant } from '../jsutils/invariant.js';",
          "3: import { isAsyncIterable } from '../jsutils/isAsyncIterable.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { BoxedPromiseOrValue } from '../jsutils/BoxedPromiseOrValue.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2092:     const deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord = {",
          "2093:       deferredFragmentRecords,",
          "2095:     };",
          "2097:     const executor = () =>",
          "",
          "[Removed Lines]",
          "2094:       result: undefined as unknown as DeferredGroupedFieldSetResult,",
          "",
          "[Added Lines]",
          "2095:       result:",
          "2096:         undefined as unknown as BoxedPromiseOrValue<DeferredGroupedFieldSetResult>,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2109:         deferMap,",
          "2110:       );",
          "2119:     newDeferredGroupedFieldSetRecords.push(deferredGroupedFieldSetRecord);",
          "2120:   }",
          "",
          "[Removed Lines]",
          "2112:     deferredGroupedFieldSetRecord.result = shouldDefer(",
          "2113:       parentDeferUsages,",
          "2114:       deferUsageSet,",
          "2115:     )",
          "2116:       ? Promise.resolve().then(executor)",
          "2117:       : executor();",
          "",
          "[Added Lines]",
          "2114:     deferredGroupedFieldSetRecord.result = new BoxedPromiseOrValue(",
          "2115:       shouldDefer(parentDeferUsages, deferUsageSet)",
          "2116:         ? Promise.resolve().then(executor)",
          "2117:         : executor(),",
          "2118:     );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2228: ): StreamItemsRecord {",
          "2229:   return {",
          "2230:     streamRecord,",
          "2267:         );",
          "2290:   };",
          "2291: }",
          "",
          "[Removed Lines]",
          "2231:     result: Promise.resolve().then(() => {",
          "2232:       const path = streamRecord.path;",
          "2233:       const initialPath = addPath(path, initialIndex, undefined);",
          "2235:       let result = completeStreamItems(",
          "2236:         streamRecord,",
          "2237:         initialPath,",
          "2238:         initialItem,",
          "2239:         exeContext,",
          "2240:         { errors: undefined },",
          "2241:         fieldGroup,",
          "2242:         info,",
          "2243:         itemType,",
          "2244:       );",
          "2245:       const firstStreamItems = { result };",
          "2246:       let currentStreamItems = firstStreamItems;",
          "2247:       let currentIndex = initialIndex;",
          "2248:       let iteration = iterator.next();",
          "2249:       let erroredSynchronously = false;",
          "2250:       while (!iteration.done) {",
          "2251:         if (!isPromise(result) && !isReconcilableStreamItemsResult(result)) {",
          "2252:           erroredSynchronously = true;",
          "2253:           break;",
          "2254:         }",
          "2255:         const item = iteration.value;",
          "2256:         currentIndex++;",
          "2257:         const currentPath = addPath(path, currentIndex, undefined);",
          "2258:         result = completeStreamItems(",
          "2259:           streamRecord,",
          "2260:           currentPath,",
          "2261:           item,",
          "2262:           exeContext,",
          "2263:           { errors: undefined },",
          "2264:           fieldGroup,",
          "2265:           info,",
          "2266:           itemType,",
          "2269:         const nextStreamItems: StreamItemsRecord = { streamRecord, result };",
          "2270:         currentStreamItems.result = prependNextStreamItems(",
          "2271:           currentStreamItems.result,",
          "2272:           nextStreamItems,",
          "2273:         );",
          "2274:         currentStreamItems = nextStreamItems;",
          "2276:         iteration = iterator.next();",
          "2277:       }",
          "2281:       if (!erroredSynchronously) {",
          "2282:         currentStreamItems.result = prependNextStreamItems(",
          "2283:           currentStreamItems.result,",
          "2284:           { streamRecord, result: { streamRecord } },",
          "2285:         );",
          "2286:       }",
          "2288:       return firstStreamItems.result;",
          "2289:     }),",
          "",
          "[Added Lines]",
          "2232:     result: new BoxedPromiseOrValue(",
          "2233:       Promise.resolve().then(() => {",
          "2234:         const path = streamRecord.path;",
          "2235:         const initialPath = addPath(path, initialIndex, undefined);",
          "2237:         let result = new BoxedPromiseOrValue(",
          "2238:           completeStreamItems(",
          "2239:             streamRecord,",
          "2240:             initialPath,",
          "2241:             initialItem,",
          "2242:             exeContext,",
          "2243:             { errors: undefined },",
          "2244:             fieldGroup,",
          "2245:             info,",
          "2246:             itemType,",
          "2247:           ),",
          "2249:         const firstStreamItems = { result };",
          "2250:         let currentStreamItems = firstStreamItems;",
          "2251:         let currentIndex = initialIndex;",
          "2252:         let iteration = iterator.next();",
          "2253:         let erroredSynchronously = false;",
          "2254:         while (!iteration.done) {",
          "2255:           const value = result.value;",
          "2256:           if (!isPromise(value) && !isReconcilableStreamItemsResult(value)) {",
          "2257:             erroredSynchronously = true;",
          "2258:             break;",
          "2259:           }",
          "2260:           const item = iteration.value;",
          "2261:           currentIndex++;",
          "2262:           const currentPath = addPath(path, currentIndex, undefined);",
          "2263:           result = new BoxedPromiseOrValue(",
          "2264:             completeStreamItems(",
          "2265:               streamRecord,",
          "2266:               currentPath,",
          "2267:               item,",
          "2268:               exeContext,",
          "2269:               { errors: undefined },",
          "2270:               fieldGroup,",
          "2271:               info,",
          "2272:               itemType,",
          "2273:             ),",
          "2274:           );",
          "2276:           const nextStreamItems: StreamItemsRecord = { streamRecord, result };",
          "2277:           currentStreamItems.result = new BoxedPromiseOrValue(",
          "2278:             prependNextStreamItems(",
          "2279:               currentStreamItems.result.value,",
          "2280:               nextStreamItems,",
          "2281:             ),",
          "2282:           );",
          "2283:           currentStreamItems = nextStreamItems;",
          "2285:           iteration = iterator.next();",
          "2286:         }",
          "2290:         if (!erroredSynchronously) {",
          "2291:           currentStreamItems.result = new BoxedPromiseOrValue(",
          "2292:             prependNextStreamItems(currentStreamItems.result.value, {",
          "2293:               streamRecord,",
          "2294:               result: new BoxedPromiseOrValue({ streamRecord }),",
          "2295:             }),",
          "2296:           );",
          "2297:         }",
          "2299:         return firstStreamItems.result.value;",
          "2300:       }),",
          "2301:     ),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2331: ): StreamItemsRecord {",
          "2332:   const firstStreamItems: StreamItemsRecord = {",
          "2333:     streamRecord,",
          "2343:     ),",
          "2344:   };",
          "2345:   return firstStreamItems;",
          "",
          "[Removed Lines]",
          "2334:     result: getNextAsyncStreamItemsResult(",
          "2335:       streamRecord,",
          "2336:       path,",
          "2337:       initialIndex,",
          "2338:       asyncIterator,",
          "2339:       exeContext,",
          "2340:       fieldGroup,",
          "2341:       info,",
          "2342:       itemType,",
          "",
          "[Added Lines]",
          "2346:     result: new BoxedPromiseOrValue(",
          "2347:       getNextAsyncStreamItemsResult(",
          "2348:         streamRecord,",
          "2349:         path,",
          "2350:         initialIndex,",
          "2351:         asyncIterator,",
          "2352:         exeContext,",
          "2353:         fieldGroup,",
          "2354:         info,",
          "2355:         itemType,",
          "2356:       ),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2385:   const nextStreamItems: StreamItemsRecord = {",
          "2386:     streamRecord,",
          "2396:     ),",
          "2397:   };",
          "",
          "[Removed Lines]",
          "2387:     result: getNextAsyncStreamItemsResult(",
          "2388:       streamRecord,",
          "2389:       path,",
          "2390:       index,",
          "2391:       asyncIterator,",
          "2392:       exeContext,",
          "2393:       fieldGroup,",
          "2394:       info,",
          "2395:       itemType,",
          "",
          "[Added Lines]",
          "2401:     result: new BoxedPromiseOrValue(",
          "2402:       getNextAsyncStreamItemsResult(",
          "2403:         streamRecord,",
          "2404:         path,",
          "2405:         index,",
          "2406:         asyncIterator,",
          "2407:         exeContext,",
          "2408:         fieldGroup,",
          "2409:         info,",
          "2410:         itemType,",
          "2411:       ),",
          "",
          "---------------"
        ],
        "src/execution/types.ts||src/execution/types.ts": [
          "File: src/execution/types.ts -> src/execution/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import type { ObjMap } from '../jsutils/ObjMap.js';",
          "2: import type { Path } from '../jsutils/Path.js';",
          "5: import type {",
          "6:   GraphQLError,",
          "",
          "[Removed Lines]",
          "3: import type { PromiseOrValue } from '../jsutils/PromiseOrValue.js';",
          "",
          "[Added Lines]",
          "1: import type { BoxedPromiseOrValue } from '../jsutils/BoxedPromiseOrValue.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206: export interface DeferredGroupedFieldSetRecord {",
          "207:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "209: }",
          "211: export type SubsequentResultRecord = DeferredFragmentRecord | StreamRecord;",
          "",
          "[Removed Lines]",
          "208:   result: PromiseOrValue<DeferredGroupedFieldSetResult>;",
          "",
          "[Added Lines]",
          "208:   result: BoxedPromiseOrValue<DeferredGroupedFieldSetResult>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267: export interface StreamItemsRecord {",
          "268:   streamRecord: StreamRecord;",
          "270: }",
          "272: export type IncrementalDataRecord =",
          "",
          "[Removed Lines]",
          "269:   result: PromiseOrValue<StreamItemsResult>;",
          "",
          "[Added Lines]",
          "269:   result: BoxedPromiseOrValue<StreamItemsResult>;",
          "",
          "---------------"
        ],
        "src/jsutils/BoxedPromiseOrValue.ts||src/jsutils/BoxedPromiseOrValue.ts": [
          "File: src/jsutils/BoxedPromiseOrValue.ts -> src/jsutils/BoxedPromiseOrValue.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { isPromise } from './isPromise.js';",
          "2: import type { PromiseOrValue } from './PromiseOrValue.js';",
          "14: export class BoxedPromiseOrValue<T> {",
          "15:   value: PromiseOrValue<T>;",
          "17:   constructor(value: PromiseOrValue<T>) {",
          "18:     this.value = value;",
          "19:     if (isPromise(value)) {",
          "21:       value.then((resolved) => {",
          "22:         this.value = resolved;",
          "23:       });",
          "24:     }",
          "25:   }",
          "26: }",
          "",
          "---------------"
        ],
        "src/jsutils/__tests__/BoxedPromiseOrValue-test.ts||src/jsutils/__tests__/BoxedPromiseOrValue-test.ts": [
          "File: src/jsutils/__tests__/BoxedPromiseOrValue-test.ts -> src/jsutils/__tests__/BoxedPromiseOrValue-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { expect } from 'chai';",
          "2: import { describe, it } from 'mocha';",
          "4: import { resolveOnNextTick } from '../../__testUtils__/resolveOnNextTick.js';",
          "6: import { BoxedPromiseOrValue } from '../BoxedPromiseOrValue.js';",
          "8: describe('BoxedPromiseOrValue', () => {",
          "9:   it('can box a value', () => {",
          "10:     const boxed = new BoxedPromiseOrValue<number>(42);",
          "12:     expect(boxed.value).to.equal(42);",
          "13:   });",
          "15:   it('can box a promise', () => {",
          "16:     const promise = Promise.resolve(42);",
          "17:     const boxed = new BoxedPromiseOrValue<number>(promise);",
          "19:     expect(boxed.value).to.equal(promise);",
          "20:   });",
          "22:   it('resets the boxed value when the passed promise resolves', async () => {",
          "23:     const promise = Promise.resolve(42);",
          "24:     const boxed = new BoxedPromiseOrValue<number>(promise);",
          "26:     await resolveOnNextTick();",
          "28:     expect(boxed.value).to.equal(42);",
          "29:   });",
          "30: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95bf842566f123543c858a03efe6aa007494acbb",
      "candidate_info": {
        "commit_hash": "95bf842566f123543c858a03efe6aa007494acbb",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/95bf842566f123543c858a03efe6aa007494acbb",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts"
        ],
        "message": "refactor: use asyncIterator instead of extra promise",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   IncrementalDataRecord,",
          "8:   IncrementalDataRecordResult,",
          "9:   ReconcilableDeferredGroupedFieldSetResult,",
          "11:   SubsequentResultRecord,",
          "12: } from './types.js';",
          "13: import {",
          "",
          "[Removed Lines]",
          "10:   StreamItemsResult,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: export class IncrementalGraph {",
          "26:   private _pending: Set<SubsequentResultRecord>;",
          "27:   private _newPending: Set<SubsequentResultRecord>;",
          "30:   constructor() {",
          "31:     this._pending = new Set();",
          "32:     this._newPending = new Set();",
          "35:   }",
          "37:   addIncrementalDataRecords(",
          "",
          "[Removed Lines]",
          "23:   newCompletedResultAvailable!: Promise<unknown>;",
          "24:   private _resolve!: () => void;",
          "28:   private _completedResultQueue: Array<IncrementalDataRecordResult>;",
          "33:     this._completedResultQueue = [];",
          "34:     this._reset();",
          "",
          "[Added Lines]",
          "23:   private _completedQueue: Array<IncrementalDataRecordResult>;",
          "24:   private _nextQueue: Array<",
          "25:     (iterable: IteratorResult<Iterable<IncrementalDataRecordResult>>) => void",
          "26:   >;",
          "31:     this._completedQueue = [];",
          "32:     this._nextQueue = [];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:       if (isPromise(result)) {",
          "69:         result.then((resolved) => {",
          "71:         });",
          "72:       } else {",
          "74:       }",
          "75:     }",
          "76:   }",
          "",
          "[Removed Lines]",
          "70:           this._enqueueCompletedStreamItems(resolved);",
          "73:         this._enqueueCompletedStreamItems(result);",
          "",
          "[Added Lines]",
          "68:           this._enqueue(resolved);",
          "71:         this._enqueue(result);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:     return newPending;",
          "98:   }",
          "107:   }",
          "109:   hasNext(): boolean {",
          "",
          "[Removed Lines]",
          "101:     let completedResult: IncrementalDataRecordResult | undefined;",
          "102:     while (",
          "103:       (completedResult = this._completedResultQueue.shift()) !== undefined",
          "104:     ) {",
          "105:       yield completedResult;",
          "106:     }",
          "",
          "[Added Lines]",
          "98:   completedIncrementalData() {",
          "99:     return {",
          "100:       [Symbol.asyncIterator]() {",
          "101:         return this;",
          "102:       },",
          "103:       next: (): Promise<",
          "104:         IteratorResult<Iterable<IncrementalDataRecordResult>>",
          "105:       > => {",
          "106:         const firstResult = this._completedQueue.shift();",
          "107:         if (firstResult !== undefined) {",
          "108:           return Promise.resolve({",
          "109:             value: this._yieldCurrentCompletedIncrementalData(firstResult),",
          "110:             done: false,",
          "111:           });",
          "112:         }",
          "113:         const { promise, resolve } =",
          "114:           promiseWithResolvers<",
          "115:             IteratorResult<Iterable<IncrementalDataRecordResult>>",
          "116:           >();",
          "117:         this._nextQueue.push(resolve);",
          "118:         return promise;",
          "119:       },",
          "120:       return: (): Promise<",
          "121:         IteratorResult<Iterable<IncrementalDataRecordResult>>",
          "122:       > => {",
          "123:         for (const resolve of this._nextQueue) {",
          "124:           resolve({ value: undefined, done: true });",
          "125:         }",
          "126:         return Promise.resolve({ value: undefined, done: true });",
          "127:       },",
          "128:     };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:     ) {",
          "121:       return;",
          "122:     }",
          "124:     for (const child of deferredFragmentRecord.children) {",
          "125:       this._newPending.add(child);",
          "127:     }",
          "128:     return reconcilableResults;",
          "129:   }",
          "",
          "[Removed Lines]",
          "123:     this._pending.delete(deferredFragmentRecord);",
          "126:       this._completedResultQueue.push(...child.results);",
          "",
          "[Added Lines]",
          "145:     this.removeSubsequentResultRecord(deferredFragmentRecord);",
          "148:       for (const result of child.results) {",
          "149:         this._enqueue(result);",
          "150:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "132:     subsequentResultRecord: SubsequentResultRecord,",
          "133:   ): void {",
          "134:     this._pending.delete(subsequentResultRecord);",
          "135:   }",
          "137:   private _addDeferredFragmentRecord(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:     if (this._pending.size === 0) {",
          "160:       for (const resolve of this._nextQueue) {",
          "161:         resolve({ value: undefined, done: true });",
          "162:       }",
          "163:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "186:       deferredFragmentRecord.results.push(result);",
          "187:     }",
          "188:     if (hasPendingParent) {",
          "191:     }",
          "192:   }",
          "202:   }",
          "212:   }",
          "213: }",
          "",
          "[Removed Lines]",
          "189:       this._completedResultQueue.push(result);",
          "190:       this._trigger();",
          "194:   private _enqueueCompletedStreamItems(result: StreamItemsResult): void {",
          "195:     this._completedResultQueue.push(result);",
          "196:     this._trigger();",
          "197:   }",
          "199:   private _trigger() {",
          "200:     this._resolve();",
          "201:     this._reset();",
          "204:   private _reset() {",
          "205:     const { promise: newCompletedResultAvailable, resolve } =",
          "209:       promiseWithResolvers<void>();",
          "210:     this._resolve = resolve;",
          "211:     this.newCompletedResultAvailable = newCompletedResultAvailable;",
          "",
          "[Added Lines]",
          "218:       this._enqueue(result);",
          "222:   private *_yieldCurrentCompletedIncrementalData(",
          "223:     first: IncrementalDataRecordResult,",
          "224:   ): Generator<IncrementalDataRecordResult> {",
          "225:     yield first;",
          "226:     let completed;",
          "227:     while ((completed = this._completedQueue.shift()) !== undefined) {",
          "228:       yield completed;",
          "229:     }",
          "232:   private _enqueue(completed: IncrementalDataRecordResult): void {",
          "233:     const next = this._nextQueue.shift();",
          "234:     if (next !== undefined) {",
          "235:       next({",
          "236:         value: this._yieldCurrentCompletedIncrementalData(completed),",
          "237:         done: false,",
          "238:       });",
          "239:       return;",
          "240:     }",
          "241:     this._completedQueue.push(completed);",
          "",
          "---------------"
        ],
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     const _next = async (): Promise<",
          "121:       IteratorResult<SubsequentIncrementalExecutionResult, void>",
          "122:     > => {",
          "124:         let pending: Array<PendingResult> = [];",
          "127:           if (isDeferredGroupedFieldSetResult(completedResult)) {",
          "128:             this._handleCompletedDeferredGroupedFieldSet(completedResult);",
          "129:           } else {",
          "",
          "[Removed Lines]",
          "123:       while (!isDone) {",
          "126:         for (const completedResult of this._incrementalGraph.completedResults()) {",
          "",
          "[Added Lines]",
          "123:       if (isDone) {",
          "124:         await this._returnAsyncIteratorsIgnoringErrors();",
          "125:         return { value: undefined, done: true };",
          "126:       }",
          "128:       const completedIncrementalData =",
          "129:         this._incrementalGraph.completedIncrementalData();",
          "132:       const asyncIterator = completedIncrementalData[Symbol.asyncIterator]();",
          "133:       let iteration = await asyncIterator.next();",
          "134:       while (!iteration.done) {",
          "137:         for (const completedResult of iteration.value) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:         }",
          "166:       }",
          "172:       return { value: undefined, done: true };",
          "173:     };",
          "",
          "[Removed Lines]",
          "165:         await this._incrementalGraph.newCompletedResultAvailable;",
          "168:       await this._returnStreamIterators().catch(() => {",
          "170:       });",
          "",
          "[Added Lines]",
          "177:         iteration = await asyncIterator.next();",
          "180:       await this._returnAsyncIteratorsIgnoringErrors();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:       IteratorResult<SubsequentIncrementalExecutionResult, void>",
          "177:     > => {",
          "178:       isDone = true;",
          "180:       return { value: undefined, done: true };",
          "181:     };",
          "",
          "[Removed Lines]",
          "179:       await this._returnStreamIterators();",
          "",
          "[Added Lines]",
          "188:       await this._returnAsyncIterators();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:       error?: unknown,",
          "185:     ): Promise<IteratorResult<SubsequentIncrementalExecutionResult, void>> => {",
          "186:       isDone = true;",
          "188:       return Promise.reject(error);",
          "189:     };",
          "",
          "[Removed Lines]",
          "187:       await this._returnStreamIterators();",
          "",
          "[Added Lines]",
          "196:       await this._returnAsyncIterators();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "349:     };",
          "350:   }",
          "353:     const cancellableStreams = this._context.cancellableStreams;",
          "354:     if (cancellableStreams === undefined) {",
          "355:       return;",
          "",
          "[Removed Lines]",
          "352:   private async _returnStreamIterators(): Promise<void> {",
          "",
          "[Added Lines]",
          "361:   private async _returnAsyncIterators(): Promise<void> {",
          "362:     await this._incrementalGraph.completedIncrementalData().return();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "362:     }",
          "363:     await Promise.all(promises);",
          "364:   }",
          "365: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377:   private async _returnAsyncIteratorsIgnoringErrors(): Promise<void> {",
          "378:     await this._returnAsyncIterators().catch(() => {",
          "380:     });",
          "381:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b0c113cabb9db76101cf147cf22778cc2cb0817",
      "candidate_info": {
        "commit_hash": "4b0c113cabb9db76101cf147cf22778cc2cb0817",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/4b0c113cabb9db76101cf147cf22778cc2cb0817",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/__tests__/defer-test.ts",
          "src/execution/execute.ts"
        ],
        "message": "fix(incremental): do not initiate non-pending execution groups (#4140)\n\nCurrently, when early execution is disabled, we still use the early\nexecution logic to initiate execution groups, which may cause early\ninitiation of non-pending execution groups.\n\nalternative to #4109, causes potentially stacking delays when\ncombinations of shared and non-shared keys between sibling defers cause\nseparate deferred grouped field sets for the same deferred fragment.",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts",
          "src/execution/execute.ts||src/execution/execute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:         reconcilableResults: ReadonlyArray<ReconcilableDeferredGroupedFieldSetResult>;",
          "109:       }",
          "110:     | undefined {",
          "117:       return;",
          "118:     }",
          "119:     const reconcilableResults = Array.from(",
          "",
          "[Removed Lines]",
          "113:     if (!this._rootNodes.has(deferredFragmentRecord)) {",
          "114:       return;",
          "115:     }",
          "116:     if (deferredFragmentRecord.deferredGroupedFieldSetRecords.size > 0) {",
          "",
          "[Added Lines]",
          "111:     if (",
          "112:       !this._rootNodes.has(deferredFragmentRecord) ||",
          "113:       deferredFragmentRecord.deferredGroupedFieldSetRecords.size > 0",
          "114:     ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:   private _onDeferredGroupedFieldSet(",
          "244:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "245:   ): void {",
          "255:     } else {",
          "257:     }",
          "258:   }",
          "",
          "[Removed Lines]",
          "246:     const deferredGroupedFieldSetResult = deferredGroupedFieldSetRecord.result;",
          "247:     const result =",
          "248:       deferredGroupedFieldSetResult instanceof BoxedPromiseOrValue",
          "249:         ? deferredGroupedFieldSetResult.value",
          "250:         : deferredGroupedFieldSetResult().value;",
          "252:     if (isPromise(result)) {",
          "254:       result.then((resolved) => this._enqueue(resolved));",
          "256:       this._enqueue(result);",
          "",
          "[Added Lines]",
          "244:     let deferredGroupedFieldSetResult = deferredGroupedFieldSetRecord.result;",
          "245:     if (!(deferredGroupedFieldSetResult instanceof BoxedPromiseOrValue)) {",
          "246:       deferredGroupedFieldSetResult = deferredGroupedFieldSetResult();",
          "247:     }",
          "248:     const value = deferredGroupedFieldSetResult.value;",
          "249:     if (isPromise(value)) {",
          "251:       value.then((resolved) => this._enqueue(resolved));",
          "253:       this._enqueue(value);",
          "",
          "---------------"
        ],
        "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts": [
          "File: src/execution/__tests__/defer-test.ts -> src/execution/__tests__/defer-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { describe, it } from 'mocha';",
          "4: import { expectJSON } from '../../__testUtils__/expectJSON.js';",
          "5: import { expectPromise } from '../../__testUtils__/expectPromise.js';",
          "6: import { resolveOnNextTick } from '../../__testUtils__/resolveOnNextTick.js';",
          "8: import type { DocumentNode } from '../../language/ast.js';",
          "9: import { parse } from '../../language/parser.js';",
          "",
          "[Removed Lines]",
          "1: import { expect } from 'chai';",
          "",
          "[Added Lines]",
          "1: import { assert, expect } from 'chai';",
          "8: import { promiseWithResolvers } from '../../jsutils/promiseWithResolvers.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "856:     ]);",
          "857:   });",
          "859:   it('Can deduplicate multiple defers on the same object', async () => {",
          "860:     const document = parse(`",
          "861:       query {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "861:   it('Initiates deferred grouped field sets only if they have been released as pending', async () => {",
          "862:     const document = parse(`",
          "863:       query {",
          "864:         ... @defer {",
          "865:           a {",
          "866:             ... @defer {",
          "867:               b {",
          "868:                 c { d }",
          "869:               }",
          "870:             }",
          "871:           }",
          "872:         }",
          "873:         ... @defer {",
          "874:           a {",
          "875:             someField",
          "876:             ... @defer {",
          "877:               b {",
          "878:                 e { f }",
          "879:               }",
          "880:             }",
          "881:           }",
          "882:         }",
          "883:       }",
          "884:     `);",
          "886:     const { promise: slowFieldPromise, resolve: resolveSlowField } =",
          "887:       promiseWithResolvers();",
          "888:     let cResolverCalled = false;",
          "889:     let eResolverCalled = false;",
          "890:     const executeResult = experimentalExecuteIncrementally({",
          "891:       schema,",
          "892:       document,",
          "893:       rootValue: {",
          "894:         a: {",
          "895:           someField: slowFieldPromise,",
          "896:           b: {",
          "897:             c: () => {",
          "898:               cResolverCalled = true;",
          "899:               return { d: 'd' };",
          "900:             },",
          "901:             e: () => {",
          "902:               eResolverCalled = true;",
          "903:               return { f: 'f' };",
          "904:             },",
          "905:           },",
          "906:         },",
          "907:       },",
          "908:       enableEarlyExecution: false,",
          "909:     });",
          "911:     assert('initialResult' in executeResult);",
          "913:     const result1 = executeResult.initialResult;",
          "914:     expectJSON(result1).toDeepEqual({",
          "915:       data: {},",
          "916:       pending: [",
          "917:         { id: '0', path: [] },",
          "918:         { id: '1', path: [] },",
          "919:       ],",
          "920:       hasNext: true,",
          "921:     });",
          "923:     const iterator = executeResult.subsequentResults[Symbol.asyncIterator]();",
          "925:     expect(cResolverCalled).to.equal(false);",
          "926:     expect(eResolverCalled).to.equal(false);",
          "928:     const result2 = await iterator.next();",
          "929:     expectJSON(result2).toDeepEqual({",
          "930:       value: {",
          "931:         pending: [{ id: '2', path: ['a'] }],",
          "932:         incremental: [",
          "933:           {",
          "934:             data: { a: {} },",
          "935:             id: '0',",
          "936:           },",
          "937:           {",
          "938:             data: { b: {} },",
          "939:             id: '2',",
          "940:           },",
          "941:           {",
          "942:             data: { c: { d: 'd' } },",
          "943:             id: '2',",
          "944:             subPath: ['b'],",
          "945:           },",
          "946:         ],",
          "947:         completed: [{ id: '0' }, { id: '2' }],",
          "948:         hasNext: true,",
          "949:       },",
          "950:       done: false,",
          "951:     });",
          "953:     expect(cResolverCalled).to.equal(true);",
          "954:     expect(eResolverCalled).to.equal(false);",
          "956:     resolveSlowField('someField');",
          "958:     const result3 = await iterator.next();",
          "959:     expectJSON(result3).toDeepEqual({",
          "960:       value: {",
          "961:         pending: [{ id: '3', path: ['a'] }],",
          "962:         incremental: [",
          "963:           {",
          "964:             data: { someField: 'someField' },",
          "965:             id: '1',",
          "966:             subPath: ['a'],",
          "967:           },",
          "968:           {",
          "969:             data: { e: { f: 'f' } },",
          "970:             id: '3',",
          "971:             subPath: ['b'],",
          "972:           },",
          "973:         ],",
          "974:         completed: [{ id: '1' }, { id: '3' }],",
          "975:         hasNext: false,",
          "976:       },",
          "977:       done: false,",
          "978:     });",
          "980:     expect(eResolverCalled).to.equal(true);",
          "982:     const result4 = await iterator.next();",
          "983:     expectJSON(result4).toDeepEqual({",
          "984:       value: undefined,",
          "985:       done: true,",
          "986:     });",
          "987:   });",
          "989:   it('Initiates unique deferred grouped field sets after those that are common to sibling defers', async () => {",
          "990:     const document = parse(`",
          "991:       query {",
          "992:         ... @defer {",
          "993:           a {",
          "994:             ... @defer {",
          "995:               b {",
          "996:                 c { d }",
          "997:               }",
          "998:             }",
          "999:           }",
          "1000:         }",
          "1001:         ... @defer {",
          "1002:           a {",
          "1003:             ... @defer {",
          "1004:               b {",
          "1005:                 c { d }",
          "1006:                 e { f }",
          "1007:               }",
          "1008:             }",
          "1009:           }",
          "1010:         }",
          "1011:       }",
          "1012:     `);",
          "1014:     const { promise: cPromise, resolve: resolveC } =",
          "1016:       promiseWithResolvers<void>();",
          "1017:     let cResolverCalled = false;",
          "1018:     let eResolverCalled = false;",
          "1019:     const executeResult = experimentalExecuteIncrementally({",
          "1020:       schema,",
          "1021:       document,",
          "1022:       rootValue: {",
          "1023:         a: {",
          "1024:           b: {",
          "1025:             c: async () => {",
          "1026:               cResolverCalled = true;",
          "1027:               await cPromise;",
          "1028:               return { d: 'd' };",
          "1029:             },",
          "1030:             e: () => {",
          "1031:               eResolverCalled = true;",
          "1032:               return { f: 'f' };",
          "1033:             },",
          "1034:           },",
          "1035:         },",
          "1036:       },",
          "1037:       enableEarlyExecution: false,",
          "1038:     });",
          "1040:     assert('initialResult' in executeResult);",
          "1042:     const result1 = executeResult.initialResult;",
          "1043:     expectJSON(result1).toDeepEqual({",
          "1044:       data: {},",
          "1045:       pending: [",
          "1046:         { id: '0', path: [] },",
          "1047:         { id: '1', path: [] },",
          "1048:       ],",
          "1049:       hasNext: true,",
          "1050:     });",
          "1052:     const iterator = executeResult.subsequentResults[Symbol.asyncIterator]();",
          "1054:     expect(cResolverCalled).to.equal(false);",
          "1055:     expect(eResolverCalled).to.equal(false);",
          "1057:     const result2 = await iterator.next();",
          "1058:     expectJSON(result2).toDeepEqual({",
          "1059:       value: {",
          "1060:         pending: [",
          "1061:           { id: '2', path: ['a'] },",
          "1062:           { id: '3', path: ['a'] },",
          "1063:         ],",
          "1064:         incremental: [",
          "1065:           {",
          "1066:             data: { a: {} },",
          "1067:             id: '0',",
          "1068:           },",
          "1069:         ],",
          "1070:         completed: [{ id: '0' }, { id: '1' }],",
          "1071:         hasNext: true,",
          "1072:       },",
          "1073:       done: false,",
          "1074:     });",
          "1076:     resolveC();",
          "1078:     expect(cResolverCalled).to.equal(true);",
          "1079:     expect(eResolverCalled).to.equal(false);",
          "1081:     const result3 = await iterator.next();",
          "1082:     expectJSON(result3).toDeepEqual({",
          "1083:       value: {",
          "1084:         incremental: [",
          "1085:           {",
          "1086:             data: { b: { c: { d: 'd' } } },",
          "1087:             id: '2',",
          "1088:           },",
          "1089:           {",
          "1090:             data: { e: { f: 'f' } },",
          "1091:             id: '3',",
          "1092:             subPath: ['b'],",
          "1093:           },",
          "1094:         ],",
          "1095:         completed: [{ id: '2' }, { id: '3' }],",
          "1096:         hasNext: false,",
          "1097:       },",
          "1098:       done: false,",
          "1099:     });",
          "1101:     const result4 = await iterator.next();",
          "1102:     expectJSON(result4).toDeepEqual({",
          "1103:       value: undefined,",
          "1104:       done: true,",
          "1105:     });",
          "1106:   });",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2127:         deferMap,",
          "2128:       );",
          "2141:     newDeferredGroupedFieldSetRecords.push(deferredGroupedFieldSetRecord);",
          "2142:   }",
          "",
          "[Removed Lines]",
          "2130:     const shouldDeferThisDeferUsageSet = shouldDefer(",
          "2131:       parentDeferUsages,",
          "2132:       deferUsageSet,",
          "2133:     );",
          "2135:     deferredGroupedFieldSetRecord.result = shouldDeferThisDeferUsageSet",
          "2136:       ? exeContext.enableEarlyExecution",
          "2137:         ? new BoxedPromiseOrValue(Promise.resolve().then(executor))",
          "2138:         : () => new BoxedPromiseOrValue(executor())",
          "2139:       : new BoxedPromiseOrValue(executor());",
          "",
          "[Added Lines]",
          "2130:     if (exeContext.enableEarlyExecution) {",
          "2131:       deferredGroupedFieldSetRecord.result = new BoxedPromiseOrValue(",
          "2132:         shouldDefer(parentDeferUsages, deferUsageSet)",
          "2133:           ? Promise.resolve().then(executor)",
          "2134:           : executor(),",
          "2135:       );",
          "2136:     } else {",
          "2137:       deferredGroupedFieldSetRecord.result = () =>",
          "2138:         new BoxedPromiseOrValue(executor());",
          "2139:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}