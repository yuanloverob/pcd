{
  "cve_id": "CVE-2021-44878",
  "cve_desc": "If an OpenID Connect provider supports the \"none\" algorithm (i.e., tokens with no signature), pac4j v5.3.0 (and prior) does not refuse it without an explicit configuration on its side or for the \"idtoken\" response type which is not secure and violates the OpenID Core Specification. The \"none\" algorithm does not require any signature verification when validating the ID tokens, which allows the attacker to bypass the token validation by injecting a malformed ID token using \"none\" as the value of \"alg\" key in the header with an empty signature value.",
  "repo": "pac4j/pac4j",
  "patch_hash": "22b82ffd702a132d9f09da60362fc6264fc281ae",
  "patch_info": {
    "commit_hash": "22b82ffd702a132d9f09da60362fc6264fc281ae",
    "repo": "pac4j/pac4j",
    "commit_url": "https://github.com/pac4j/pac4j/commit/22b82ffd702a132d9f09da60362fc6264fc281ae",
    "files": [
      "documentation/docs/clients/openid-connect.md",
      "documentation/docs/release-notes.md",
      "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
      "pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java",
      "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
      "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java"
    ],
    "message": "reinforce security on OIDC",
    "before_after_code_files": [
      "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
      "pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java",
      "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
      "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java"
    ]
  },
  "patch_diff": {
    "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java": [
      "File: pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "141:     private TokenValidator tokenValidator;",
      "143:     @Override",
      "144:     protected void internalInit() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "143:     private boolean allowUnsignedIdTokens;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "486:         this.mappedClaims = mappedClaims;",
      "487:     }",
      "489:     @Override",
      "490:     public String toString() {",
      "491:         return toNiceString(this.getClass(), \"clientId\", clientId, \"secret\", \"[protected]\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "491:     public boolean isAllowUnsignedIdTokens() {",
      "492:         return allowUnsignedIdTokens;",
      "493:     }",
      "495:     public void setAllowUnsignedIdTokens(final boolean allowUnsignedIdTokens) {",
      "496:         this.allowUnsignedIdTokens = allowUnsignedIdTokens;",
      "497:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "495:             \"connectTimeout\", connectTimeout, \"readTimeout\", readTimeout, \"resourceRetriever\", resourceRetriever,",
      "496:             \"responseType\", responseType, \"responseMode\", responseMode, \"logoutUrl\", logoutUrl,",
      "497:             \"withState\", withState, \"stateGenerator\", stateGenerator, \"logoutHandler\", logoutHandler,",
      "499:     }",
      "500: }",
      "",
      "[Removed Lines]",
      "498:             \"tokenValidator\", tokenValidator, \"mappedClaims\", mappedClaims);",
      "",
      "[Added Lines]",
      "508:             \"tokenValidator\", tokenValidator, \"mappedClaims\", mappedClaims, \"allowUnsignedIdTokens\", allowUnsignedIdTokens);",
      "",
      "---------------"
    ],
    "pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java": [
      "File: pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: import java.io.IOException;",
      "7: import java.util.Map;",
      "11: import org.pac4j.core.context.WebContext;",
      "12: import org.pac4j.core.context.session.SessionStore;",
      "13: import org.pac4j.core.credentials.Credentials;",
      "",
      "[Removed Lines]",
      "9: import javax.naming.AuthenticationException;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "99:                 httpResponse.getContent());",
      "100:             final var userInfoResponse = UserInfoResponse.parse(httpResponse);",
      "101:             if (userInfoResponse instanceof UserInfoErrorResponse) {",
      "105:             } else {",
      "106:                 final var userInfoSuccessResponse = (UserInfoSuccessResponse) userInfoResponse;",
      "107:                 final JWTClaimsSet userInfoClaimsSet;",
      "",
      "[Removed Lines]",
      "102:                 logger.error(\"Bad User Info response, error={}\",",
      "103:                     ((UserInfoErrorResponse) userInfoResponse).getErrorObject().toJSONObject());",
      "104:                 throw new AuthenticationException();",
      "",
      "[Added Lines]",
      "100:                 throw new TechnicalException(\"Bad User Info response, error=\"",
      "101:                     + ((UserInfoErrorResponse) userInfoResponse).getErrorObject().toJSONObject());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:                 }",
      "113:                 return userInfoClaimsSet;",
      "114:             }",
      "116:             throw new TechnicalException(e);",
      "117:         }",
      "118:     }",
      "",
      "[Removed Lines]",
      "115:         } catch (IOException | ParseException | java.text.ParseException | AuthenticationException e) {",
      "",
      "[Added Lines]",
      "112:         } catch (IOException | ParseException | java.text.ParseException e) {",
      "",
      "---------------"
    ],
    "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java": [
      "File: pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:         final var _clientID = new ClientID(configuration.getClientId());",
      "53:         for (var jwsAlgorithm : jwsAlgorithms) {",
      "59:             final IDTokenValidator idTokenValidator;",
      "61:                 idTokenValidator = new IDTokenValidator(configuration.findProviderMetadata().getIssuer(), _clientID);",
      "62:             } else if (CommonHelper.isNotBlank(configuration.getSecret()) && (JWSAlgorithm.HS256.equals(jwsAlgorithm) ||",
      "63:                 JWSAlgorithm.HS384.equals(jwsAlgorithm) || JWSAlgorithm.HS512.equals(jwsAlgorithm))) {",
      "",
      "[Removed Lines]",
      "54:             if (\"none\".equals(jwsAlgorithm.getName())) {",
      "55:                 jwsAlgorithm = null;",
      "56:             }",
      "60:             if (jwsAlgorithm == null) {",
      "",
      "[Added Lines]",
      "56:             if (\"none\".equals(jwsAlgorithm.getName())) {",
      "57:                 if (!configuration.isAllowUnsignedIdTokens()) {",
      "58:                     throw new TechnicalException(\"Unsigned ID tokens are not allowed\");",
      "59:                 }",
      "60:                 logger.warn(\"Allowing unsigned ID tokens\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "112:             throw new TechnicalException(\"Unable to validate the ID token\");",
      "113:         }",
      "114:     }",
      "115: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117:     List<IDTokenValidator> getIdTokenValidators() {",
      "118:         return idTokenValidators;",
      "119:     }",
      "",
      "---------------"
    ],
    "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java": [
      "File: pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java -> pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package org.pac4j.oidc.profile.creator;",
      "3: import com.nimbusds.jose.JWSAlgorithm;",
      "4: import com.nimbusds.oauth2.sdk.id.Issuer;",
      "5: import com.nimbusds.openid.connect.sdk.op.OIDCProviderMetadata;",
      "6: import com.nimbusds.openid.connect.sdk.validators.IDTokenValidator;",
      "7: import org.junit.Before;",
      "8: import org.junit.Test;",
      "9: import org.pac4j.core.exception.TechnicalException;",
      "10: import org.pac4j.core.util.TestsConstants;",
      "11: import org.pac4j.core.util.TestsHelper;",
      "12: import org.pac4j.oidc.config.OidcConfiguration;",
      "14: import java.net.URI;",
      "15: import java.net.URISyntaxException;",
      "16: import java.util.ArrayList;",
      "17: import java.util.List;",
      "19: import static org.mockito.Mockito.*;",
      "20: import static org.junit.Assert.*;",
      "28: public final class TokenValidatorTests implements TestsConstants {",
      "30:     private OidcConfiguration configuration;",
      "32:     private List<JWSAlgorithm> algorithms;",
      "34:     @Before",
      "35:     public void setUp() throws URISyntaxException {",
      "36:         configuration = mock(OidcConfiguration.class);",
      "37:         final OIDCProviderMetadata metadata = mock(OIDCProviderMetadata.class);",
      "38:         when(metadata.getIssuer()).thenReturn(new Issuer(PAC4J_URL));",
      "39:         when(metadata.getJWKSetURI()).thenReturn(new URI(PAC4J_BASE_URL));",
      "40:         when(configuration.findProviderMetadata()).thenReturn(metadata);",
      "41:         when(configuration.getClientId()).thenReturn(ID);",
      "42:         when(configuration.getSecret()).thenReturn(SECRET);",
      "43:         algorithms = new ArrayList<>();",
      "44:         when(metadata.getIDTokenJWSAlgs()).thenReturn(algorithms);",
      "45:     }",
      "47:     @Test",
      "48:     public void testNoAlgoDefinedAtProvider() {",
      "49:         TestsHelper.expectException(() -> new TokenValidator(configuration), TechnicalException.class,",
      "50:             \"There must at least one JWS algorithm supported on the OpenID Connect provider side\");",
      "51:     }",
      "53:     @Test",
      "54:     public void testNoneAlgoNotAllowed() {",
      "55:         algorithms.add(JWSAlgorithm.parse(\"none\"));",
      "56:         TestsHelper.expectException(() -> new TokenValidator(configuration), TechnicalException.class,",
      "57:             \"Unsigned ID tokens are not allowed\");",
      "58:     }",
      "60:     @Test",
      "61:     public void testNoneAlgoAllowed() {",
      "62:         algorithms.add(JWSAlgorithm.parse(\"none\"));",
      "63:         when(configuration.isAllowUnsignedIdTokens()).thenReturn(true);",
      "64:         final TokenValidator validator = new TokenValidator(configuration);",
      "65:         final List<IDTokenValidator> validators = validator.getIdTokenValidators();",
      "66:         assertEquals(1, validators.size());",
      "67:         assertTrue(validators.get(0) instanceof IDTokenValidator);",
      "68:     }",
      "70:     @Test",
      "71:     public void testTwoAlgorithms() {",
      "72:         algorithms.add(JWSAlgorithm.HS256);",
      "73:         algorithms.add(JWSAlgorithm.RS256);",
      "74:         final TokenValidator validator = new TokenValidator(configuration);",
      "75:         final List<IDTokenValidator> validators = validator.getIdTokenValidators();",
      "76:         assertEquals(2, validators.size());",
      "77:     }",
      "79:     @Test",
      "80:     public void testTwoAlgorithmsOnePreferred() {",
      "81:         algorithms.add(JWSAlgorithm.HS256);",
      "82:         algorithms.add(JWSAlgorithm.RS256);",
      "83:         when(configuration.getPreferredJwsAlgorithm()).thenReturn(JWSAlgorithm.HS256);",
      "84:         final TokenValidator validator = new TokenValidator(configuration);",
      "85:         final List<IDTokenValidator> validators = validator.getIdTokenValidators();",
      "86:         assertEquals(1, validators.size());",
      "87:     }",
      "88: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "09684e0de1c4753d22c53b8135d4ef61cfda76f7",
      "candidate_info": {
        "commit_hash": "09684e0de1c4753d22c53b8135d4ef61cfda76f7",
        "repo": "pac4j/pac4j",
        "commit_url": "https://github.com/pac4j/pac4j/commit/09684e0de1c4753d22c53b8135d4ef61cfda76f7",
        "files": [
          "documentation/docs/release-notes.md",
          "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
          "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java"
        ],
        "message": "Fix CVE-2021-44878",
        "before_after_code_files": [
          "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
          "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
            "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java"
          ],
          "candidate": [
            "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
            "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java"
          ]
        }
      },
      "candidate_diff": {
        "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java": [
          "File: pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:     private TokenValidator tokenValidator;",
          "137:     @Override",
          "138:     protected void internalInit() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:     private boolean allowUnsignedIdTokens;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "472:         return tokenValidator;",
          "473:     }",
          "475:     @Override",
          "476:     public String toString() {",
          "477:         return CommonHelper.toNiceString(this.getClass(), \"clientId\", clientId, \"secret\", \"[protected]\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477:     public boolean isAllowUnsignedIdTokens() {",
          "478:         return allowUnsignedIdTokens;",
          "479:     }",
          "481:     public void setAllowUnsignedIdTokens(final boolean allowUnsignedIdTokens) {",
          "482:         this.allowUnsignedIdTokens = allowUnsignedIdTokens;",
          "483:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "481:             \"connectTimeout\", connectTimeout, \"readTimeout\", readTimeout, \"resourceRetriever\", resourceRetriever,",
          "482:             \"responseType\", responseType, \"responseMode\", responseMode, \"logoutUrl\", logoutUrl,",
          "483:             \"withState\", withState, \"stateGenerator\", stateGenerator, \"logoutHandler\", logoutHandler,",
          "485:     }",
          "486: }",
          "",
          "[Removed Lines]",
          "484:             \"tokenValidator\", tokenValidator);",
          "",
          "[Added Lines]",
          "494:             \"tokenValidator\", tokenValidator, \"allowUnsignedIdTokens\", allowUnsignedIdTokens);",
          "",
          "---------------"
        ],
        "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java": [
          "File: pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import com.nimbusds.oauth2.sdk.auth.Secret;",
          "8: import com.nimbusds.oauth2.sdk.id.ClientID;",
          "9: import com.nimbusds.openid.connect.sdk.Nonce;",
          "10: import com.nimbusds.openid.connect.sdk.claims.IDTokenClaimsSet;",
          "11: import com.nimbusds.openid.connect.sdk.validators.IDTokenValidator;",
          "12: import org.pac4j.core.exception.TechnicalException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import com.nimbusds.openid.connect.sdk.OIDCResponseTypeValue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:         final ClientID _clientID = new ClientID(configuration.getClientId());",
          "53:         for (JWSAlgorithm jwsAlgorithm : jwsAlgorithms) {",
          "59:             final IDTokenValidator idTokenValidator;",
          "61:                 idTokenValidator = new IDTokenValidator(configuration.findProviderMetadata().getIssuer(), _clientID);",
          "62:             } else if (CommonHelper.isNotBlank(configuration.getSecret()) && (JWSAlgorithm.HS256.equals(jwsAlgorithm) ||",
          "63:                 JWSAlgorithm.HS384.equals(jwsAlgorithm) || JWSAlgorithm.HS512.equals(jwsAlgorithm))) {",
          "",
          "[Removed Lines]",
          "54:             if (\"none\".equals(jwsAlgorithm.getName())) {",
          "55:                 jwsAlgorithm = null;",
          "56:             }",
          "60:             if (jwsAlgorithm == null) {",
          "",
          "[Added Lines]",
          "57:             if (\"none\".equals(jwsAlgorithm.getName())) {",
          "58:                 final String responseType = configuration.getResponseType();",
          "59:                 final boolean responseTypeContainsIdToken = responseType != null",
          "60:                     && responseType.contains(OIDCResponseTypeValue.ID_TOKEN.toString());",
          "61:                 if (!configuration.isAllowUnsignedIdTokens() || responseTypeContainsIdToken) {",
          "62:                     throw new TechnicalException(\"Unsigned ID tokens are not allowed: \" +",
          "63:                         \"they must be explicitly enabled on client side and \" +",
          "64:                         \"the response_type used must return no ID Token from the authorization endpoint\");",
          "65:                 }",
          "66:                 logger.warn(\"Allowing unsigned ID tokens\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}