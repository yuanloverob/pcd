{
  "cve_id": "CVE-2023-28113",
  "cve_desc": "russh is a Rust SSH client and server library. Starting in version 0.34.0 and prior to versions 0.36.2 and 0.37.1, Diffie-Hellman key validation is insufficient, which can lead to insecure shared secrets and therefore breaks confidentiality. Connections between a russh client and server or those of a russh peer with some other misbehaving peer are most likely to be problematic. These may vulnerable to eavesdropping. Most other implementations reject such keys, so this is mainly an interoperability issue in such a case. This issue is fixed in versions 0.36.2 and 0.37.1",
  "repo": "warp-tech/russh",
  "patch_hash": "d831a3716d3719dc76f091fcea9d94bd4ef97c6e",
  "patch_info": {
    "commit_hash": "d831a3716d3719dc76f091fcea9d94bd4ef97c6e",
    "repo": "warp-tech/russh",
    "commit_url": "https://github.com/warp-tech/russh/commit/d831a3716d3719dc76f091fcea9d94bd4ef97c6e",
    "files": [
      "russh/src/kex/dh/groups.rs",
      "russh/src/kex/dh/mod.rs"
    ],
    "message": "GHSA-cqvm-j2r2-hwpg validate DH key range",
    "before_after_code_files": [
      "russh/src/kex/dh/groups.rs||russh/src/kex/dh/groups.rs",
      "russh/src/kex/dh/mod.rs||russh/src/kex/dh/mod.rs"
    ]
  },
  "patch_diff": {
    "russh/src/kex/dh/groups.rs||russh/src/kex/dh/groups.rs": [
      "File: russh/src/kex/dh/groups.rs -> russh/src/kex/dh/groups.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: use hex_literal::hex;",
      "4: use num_bigint::{BigUint, RandBigInt};",
      "5: use rand;",
      "",
      "[Removed Lines]",
      "1: use std::ops::Shl;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69:         }",
      "70:     }",
      "73:         let mut rng = rand::thread_rng();",
      "75:         self.private_key.clone()",
      "76:     }",
      "",
      "[Removed Lines]",
      "72:     pub fn generate_private_key(&mut self) -> BigUint {",
      "74:         self.private_key = rng.gen_biguint((self.exp_size * 8) - 2u64).shl(1);",
      "",
      "[Added Lines]",
      "70:     pub fn generate_private_key(&mut self, is_server: bool) -> BigUint {",
      "71:         let q = (&self.prime_num - &BigUint::from(1u8)) / &BigUint::from(2u8);",
      "73:         self.private_key = rng.gen_biguint_range(",
      "74:             &if is_server {",
      "75:                 1u8.into()",
      "76:             } else {",
      "77:                 2u8.into()",
      "78:             },",
      "79:             &q,",
      "80:         );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "85:         self.shared_secret.clone()",
      "86:     }",
      "88:     pub fn decode_public_key(buffer: &[u8]) -> BigUint {",
      "89:         BigUint::from_bytes_be(buffer)",
      "90:     }",
      "91: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "94:     pub fn validate_shared_secret(&self, shared_secret: &BigUint) -> bool {",
      "95:         let one = BigUint::from(1u8);",
      "96:         let prime_minus_one = &self.prime_num - &one;",
      "98:         shared_secret > &one && shared_secret < &prime_minus_one",
      "99:     }",
      "105:     pub fn validate_public_key(&self, public_key: &BigUint) -> bool {",
      "106:         let one = BigUint::from(1u8);",
      "107:         let prime_minus_one = &self.prime_num - &one;",
      "109:         public_key > &one && public_key < &prime_minus_one",
      "110:     }",
      "",
      "---------------"
    ],
    "russh/src/kex/dh/mod.rs||russh/src/kex/dh/mod.rs": [
      "File: russh/src/kex/dh/mod.rs -> russh/src/kex/dh/mod.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: use byteorder::{BigEndian, ByteOrder};",
      "5: use digest::Digest;",
      "6: use groups::DH;",
      "7: use num_bigint::BigUint;",
      "8: use russh_cryptovec::CryptoVec;",
      "9: use russh_keys::encoding::Encoding;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: use log::debug;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:         debug!(\"client_pubkey: {:?}\", client_pubkey);",
      "111:         exchange.server_ephemeral.clear();",
      "117:         self.shared_secret = Some(biguint_to_mpint(&shared));",
      "118:         Ok(())",
      "119:     }",
      "",
      "[Removed Lines]",
      "107:         self.dh.generate_private_key();",
      "108:         let server_pubkey = biguint_to_mpint(&self.dh.generate_public_key());",
      "112:         exchange.server_ephemeral.extend(&server_pubkey);",
      "114:         let shared = self",
      "115:             .dh",
      "116:             .compute_shared_secret(DH::decode_public_key(client_pubkey));",
      "",
      "[Added Lines]",
      "108:         self.dh.generate_private_key(true);",
      "109:         let server_pubkey = &self.dh.generate_public_key();",
      "110:         if !self.dh.validate_public_key(server_pubkey) {",
      "111:             return Err(crate::Error::Inconsistent);",
      "112:         }",
      "114:         let encoded_server_pubkey = biguint_to_mpint(server_pubkey);",
      "118:         exchange.server_ephemeral.extend(&encoded_server_pubkey);",
      "120:         let decoded_client_pubkey = DH::decode_public_key(client_pubkey);",
      "121:         if !self.dh.validate_public_key(&decoded_client_pubkey) {",
      "122:             return Err(crate::Error::Inconsistent);",
      "123:         }",
      "125:         let shared = self.dh.compute_shared_secret(decoded_client_pubkey);",
      "126:         if !self.dh.validate_shared_secret(&shared) {",
      "127:             return Err(crate::Error::Inconsistent);",
      "128:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "124:         client_ephemeral: &mut CryptoVec,",
      "125:         buf: &mut CryptoVec,",
      "126:     ) -> Result<(), crate::Error> {",
      "131:         client_ephemeral.clear();",
      "134:         buf.push(msg::KEX_ECDH_INIT);",
      "137:         Ok(())",
      "138:     }",
      "140:     fn compute_shared_secret(&mut self, remote_pubkey_: &[u8]) -> Result<(), crate::Error> {",
      "141:         let remote_pubkey = DH::decode_public_key(remote_pubkey_);",
      "142:         let shared = self.dh.compute_shared_secret(remote_pubkey);",
      "143:         self.shared_secret = Some(biguint_to_mpint(&shared));",
      "144:         Ok(())",
      "145:     }",
      "",
      "[Removed Lines]",
      "127:         self.dh.generate_private_key();",
      "128:         let client_pubkey = biguint_to_mpint(&self.dh.generate_public_key());",
      "132:         client_ephemeral.extend(&client_pubkey);",
      "135:         buf.extend_ssh_string(&client_pubkey);",
      "",
      "[Added Lines]",
      "139:         self.dh.generate_private_key(false);",
      "140:         let client_pubkey = &self.dh.generate_public_key();",
      "142:         if !self.dh.validate_public_key(client_pubkey) {",
      "143:             return Err(crate::Error::Inconsistent);",
      "144:         }",
      "147:         let encoded_pubkey = biguint_to_mpint(client_pubkey);",
      "149:         client_ephemeral.extend(&encoded_pubkey);",
      "152:         buf.extend_ssh_string(&encoded_pubkey);",
      "160:         if !self.dh.validate_public_key(&remote_pubkey) {",
      "161:             return Err(crate::Error::Inconsistent);",
      "162:         }",
      "165:         if !self.dh.validate_shared_secret(&shared) {",
      "166:             return Err(crate::Error::Inconsistent);",
      "167:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "45d2d82930bf4a675bd57abfafec8fe4065befcd",
      "candidate_info": {
        "commit_hash": "45d2d82930bf4a675bd57abfafec8fe4065befcd",
        "repo": "warp-tech/russh",
        "commit_url": "https://github.com/warp-tech/russh/commit/45d2d82930bf4a675bd57abfafec8fe4065befcd",
        "files": [
          "russh/src/kex/dh/groups.rs",
          "russh/src/kex/dh/mod.rs"
        ],
        "message": "GHSA-cqvm-j2r2-hwpg validate DH key range",
        "before_after_code_files": [
          "russh/src/kex/dh/groups.rs||russh/src/kex/dh/groups.rs",
          "russh/src/kex/dh/mod.rs||russh/src/kex/dh/mod.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "russh/src/kex/dh/groups.rs||russh/src/kex/dh/groups.rs",
            "russh/src/kex/dh/mod.rs||russh/src/kex/dh/mod.rs"
          ],
          "candidate": [
            "russh/src/kex/dh/groups.rs||russh/src/kex/dh/groups.rs",
            "russh/src/kex/dh/mod.rs||russh/src/kex/dh/mod.rs"
          ]
        }
      },
      "candidate_diff": {
        "russh/src/kex/dh/groups.rs||russh/src/kex/dh/groups.rs": [
          "File: russh/src/kex/dh/groups.rs -> russh/src/kex/dh/groups.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use hex_literal::hex;",
          "4: use num_bigint::{BigUint, RandBigInt};",
          "5: use rand;",
          "",
          "[Removed Lines]",
          "1: use std::ops::Shl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:         }",
          "70:     }",
          "73:         let mut rng = rand::thread_rng();",
          "75:         self.private_key.clone()",
          "76:     }",
          "",
          "[Removed Lines]",
          "72:     pub fn generate_private_key(&mut self) -> BigUint {",
          "74:         self.private_key = rng.gen_biguint((self.exp_size * 8) - 2u64).shl(1);",
          "",
          "[Added Lines]",
          "70:     pub fn generate_private_key(&mut self, is_server: bool) -> BigUint {",
          "71:         let q = (&self.prime_num - &BigUint::from(1u8)) / &BigUint::from(2u8);",
          "73:         self.private_key = rng.gen_biguint_range(",
          "74:             &if is_server {",
          "75:                 1u8.into()",
          "76:             } else {",
          "77:                 2u8.into()",
          "78:             },",
          "79:             &q,",
          "80:         );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:         self.shared_secret.clone()",
          "86:     }",
          "88:     pub fn decode_public_key(buffer: &[u8]) -> BigUint {",
          "89:         BigUint::from_bytes_be(buffer)",
          "90:     }",
          "91: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     pub fn validate_shared_secret(&self, shared_secret: &BigUint) -> bool {",
          "95:         let one = BigUint::from(1u8);",
          "96:         let prime_minus_one = &self.prime_num - &one;",
          "98:         shared_secret > &one && shared_secret < &prime_minus_one",
          "99:     }",
          "105:     pub fn validate_public_key(&self, public_key: &BigUint) -> bool {",
          "106:         let one = BigUint::from(1u8);",
          "107:         let prime_minus_one = &self.prime_num - &one;",
          "109:         public_key > &one && public_key < &prime_minus_one",
          "110:     }",
          "",
          "---------------"
        ],
        "russh/src/kex/dh/mod.rs||russh/src/kex/dh/mod.rs": [
          "File: russh/src/kex/dh/mod.rs -> russh/src/kex/dh/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use std::marker::PhantomData;",
          "4: use byteorder::{BigEndian, ByteOrder};",
          "6: use digest::Digest;",
          "7: use groups::DH;",
          "8: use num_bigint::BigUint;",
          "9: use russh_cryptovec::CryptoVec;",
          "10: use russh_keys::encoding::Encoding;",
          "",
          "[Removed Lines]",
          "5: use log::debug;",
          "",
          "[Added Lines]",
          "7: use log::debug;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:         debug!(\"client_pubkey: {:?}\", client_pubkey);",
          "112:         exchange.server_ephemeral.clear();",
          "118:         self.shared_secret = Some(biguint_to_mpint(&shared));",
          "119:         Ok(())",
          "120:     }",
          "",
          "[Removed Lines]",
          "108:         self.dh.generate_private_key();",
          "109:         let server_pubkey = biguint_to_mpint(&self.dh.generate_public_key());",
          "113:         exchange.server_ephemeral.extend(&server_pubkey);",
          "115:         let shared = self",
          "116:             .dh",
          "117:             .compute_shared_secret(DH::decode_public_key(client_pubkey));",
          "",
          "[Added Lines]",
          "108:         self.dh.generate_private_key(true);",
          "109:         let server_pubkey = &self.dh.generate_public_key();",
          "110:         if !self.dh.validate_public_key(server_pubkey) {",
          "111:             return Err(crate::Error::Inconsistent);",
          "112:         }",
          "114:         let encoded_server_pubkey = biguint_to_mpint(server_pubkey);",
          "118:         exchange.server_ephemeral.extend(&encoded_server_pubkey);",
          "120:         let decoded_client_pubkey = DH::decode_public_key(client_pubkey);",
          "121:         if !self.dh.validate_public_key(&decoded_client_pubkey) {",
          "122:             return Err(crate::Error::Inconsistent);",
          "123:         }",
          "125:         let shared = self.dh.compute_shared_secret(decoded_client_pubkey);",
          "126:         if !self.dh.validate_shared_secret(&shared) {",
          "127:             return Err(crate::Error::Inconsistent);",
          "128:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:         client_ephemeral: &mut CryptoVec,",
          "126:         buf: &mut CryptoVec,",
          "127:     ) -> Result<(), crate::Error> {",
          "132:         client_ephemeral.clear();",
          "135:         buf.push(msg::KEX_ECDH_INIT);",
          "138:         Ok(())",
          "139:     }",
          "141:     fn compute_shared_secret(&mut self, remote_pubkey_: &[u8]) -> Result<(), crate::Error> {",
          "142:         let remote_pubkey = DH::decode_public_key(remote_pubkey_);",
          "143:         let shared = self.dh.compute_shared_secret(remote_pubkey);",
          "144:         self.shared_secret = Some(biguint_to_mpint(&shared));",
          "145:         Ok(())",
          "146:     }",
          "",
          "[Removed Lines]",
          "128:         self.dh.generate_private_key();",
          "129:         let client_pubkey = biguint_to_mpint(&self.dh.generate_public_key());",
          "133:         client_ephemeral.extend(&client_pubkey);",
          "136:         buf.extend_ssh_string(&client_pubkey);",
          "",
          "[Added Lines]",
          "139:         self.dh.generate_private_key(false);",
          "140:         let client_pubkey = &self.dh.generate_public_key();",
          "142:         if !self.dh.validate_public_key(client_pubkey) {",
          "143:             return Err(crate::Error::Inconsistent);",
          "144:         }",
          "147:         let encoded_pubkey = biguint_to_mpint(client_pubkey);",
          "149:         client_ephemeral.extend(&encoded_pubkey);",
          "152:         buf.extend_ssh_string(&encoded_pubkey);",
          "160:         if !self.dh.validate_public_key(&remote_pubkey) {",
          "161:             return Err(crate::Error::Inconsistent);",
          "162:         }",
          "165:         if !self.dh.validate_shared_secret(&shared) {",
          "166:             return Err(crate::Error::Inconsistent);",
          "167:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}