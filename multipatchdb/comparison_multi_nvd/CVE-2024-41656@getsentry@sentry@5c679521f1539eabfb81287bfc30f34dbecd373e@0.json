{
  "cve_id": "CVE-2024-41656",
  "cve_desc": "Sentry is an error tracking and performance monitoring platform. Starting in version 10.0.0 and prior to version 24.7.1, an unsanitized payload sent by an Integration platform integration allows storing arbitrary HTML tags on the Sentry side with the subsequent rendering them on the Issues page. Self-hosted Sentry users may be impacted in case of untrustworthy Integration platform integrations sending external issues from their side to Sentry. A patch has been released in Sentry 24.7.1. For Sentry SaaS customers, no action is needed. This has been patched on July 23, and even prior to the fix, the exploitation was not possible due to the strict Content Security Policy deployed on sentry.io site. For self-hosted users, the maintainers of Sentry strongly recommend upgrading Sentry to the latest version. If it is not possible, one could enable CSP on one's self-hosted installation with `CSP_REPORT_ONLY = False` (enforcing mode). This will mitigate the risk of cross-site scripting.",
  "repo": "getsentry/sentry",
  "patch_hash": "5c679521f1539eabfb81287bfc30f34dbecd373e",
  "patch_info": {
    "commit_hash": "5c679521f1539eabfb81287bfc30f34dbecd373e",
    "repo": "getsentry/sentry",
    "commit_url": "https://github.com/getsentry/sentry/commit/5c679521f1539eabfb81287bfc30f34dbecd373e",
    "files": [
      "src/sentry/api/serializers/models/group.py",
      "src/sentry/integrations/mixins/issues.py",
      "src/sentry/models/platformexternalissue.py",
      "src/sentry/plugins/bases/issue.py",
      "src/sentry/plugins/bases/issue2.py",
      "tests/sentry/api/endpoints/test_group_details.py",
      "tests/sentry/integrations/test_issues.py"
    ],
    "message": "fix(issues): structured issue annotations (#74648)",
    "before_after_code_files": [
      "src/sentry/api/serializers/models/group.py||src/sentry/api/serializers/models/group.py",
      "src/sentry/integrations/mixins/issues.py||src/sentry/integrations/mixins/issues.py",
      "src/sentry/models/platformexternalissue.py||src/sentry/models/platformexternalissue.py",
      "src/sentry/plugins/bases/issue.py||src/sentry/plugins/bases/issue.py",
      "src/sentry/plugins/bases/issue2.py||src/sentry/plugins/bases/issue2.py",
      "tests/sentry/api/endpoints/test_group_details.py||tests/sentry/api/endpoints/test_group_details.py",
      "tests/sentry/integrations/test_issues.py||tests/sentry/integrations/test_issues.py"
    ]
  },
  "patch_diff": {
    "src/sentry/api/serializers/models/group.py||src/sentry/api/serializers/models/group.py": [
      "File: src/sentry/api/serializers/models/group.py -> src/sentry/api/serializers/models/group.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:         dict1.setdefault(key, []).extend(val)",
      "75: class GroupStatusDetailsResponseOptional(TypedDict, total=False):",
      "76:     autoResolved: bool",
      "77:     ignoreCount: int",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75: class GroupAnnotation(TypedDict):",
      "76:     displayName: str",
      "77:     url: str",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "145:     isSubscribed: bool",
      "146:     subscriptionDetails: GroupSubscriptionResponseOptional | None",
      "147:     hasSeen: bool",
      "151: class SeenStats(TypedDict):",
      "",
      "[Removed Lines]",
      "148:     annotations: Sequence[str]",
      "",
      "[Added Lines]",
      "153:     annotations: Sequence[GroupAnnotation]",
      "",
      "---------------"
    ],
    "src/sentry/integrations/mixins/issues.py||src/sentry/integrations/mixins/issues.py": [
      "File: src/sentry/integrations/mixins/issues.py -> src/sentry/integrations/mixins/issues.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "348:         for ei in external_issues:",
      "349:             link = self.get_issue_url(ei.key)",
      "350:             label = self.get_issue_display_name(ei) or ei.key",
      "353:         return annotations",
      "",
      "[Removed Lines]",
      "351:             annotations.append(f'<a href=\"{link}\">{label}</a>')",
      "",
      "[Added Lines]",
      "351:             annotations.append({\"url\": link, \"displayName\": label})",
      "",
      "---------------"
    ],
    "src/sentry/models/platformexternalissue.py||src/sentry/models/platformexternalissue.py": [
      "File: src/sentry/models/platformexternalissue.py -> src/sentry/models/platformexternalissue.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:         # group annotations by group id",
      "36:         annotations_by_group_id = defaultdict(list)",
      "37:         for ei in external_issues:",
      "39:             annotations_by_group_id[ei.group_id].append(annotation)",
      "41:         return annotations_by_group_id",
      "",
      "[Removed Lines]",
      "38:             annotation = f'<a href=\"{ei.web_url}\">{ei.display_name}</a>'",
      "",
      "[Added Lines]",
      "38:             annotation = {\"url\": ei.web_url, \"displayName\": ei.display_name}",
      "",
      "---------------"
    ],
    "src/sentry/plugins/bases/issue.py||src/sentry/plugins/bases/issue.py": [
      "File: src/sentry/plugins/bases/issue.py -> src/sentry/plugins/bases/issue.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: from django import forms",
      "4: from django.conf import settings",
      "6: from rest_framework.request import Request",
      "8: from sentry.models.activity import Activity",
      "",
      "[Removed Lines]",
      "5: from django.utils.html import format_html",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "312:             return tag_list",
      "314:         tag_list.append(",
      "320:         )",
      "322:         return tag_list",
      "",
      "[Removed Lines]",
      "315:             format_html(",
      "316:                 '<a href=\"{}\" rel=\"noreferrer\">{}</a>',",
      "317:                 self.get_issue_url(group=group, issue_id=issue_id),",
      "318:                 self.get_issue_label(group=group, issue_id=issue_id),",
      "319:             )",
      "",
      "[Added Lines]",
      "314:             {",
      "315:                 \"url\": self.get_issue_url(group=group, issue_id=issue_id),",
      "316:                 \"displayName\": self.get_issue_label(group=group, issue_id=issue_id),",
      "317:             }",
      "",
      "---------------"
    ],
    "src/sentry/plugins/bases/issue2.py||src/sentry/plugins/bases/issue2.py": [
      "File: src/sentry/plugins/bases/issue2.py -> src/sentry/plugins/bases/issue2.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: from django.conf import settings",
      "4: from django.urls import re_path, reverse",
      "6: from rest_framework.request import Request",
      "7: from rest_framework.response import Response",
      "",
      "[Removed Lines]",
      "5: from django.utils.html import format_html",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "431:             return tag_list",
      "433:         tag_list.append(",
      "439:         )",
      "441:         return tag_list",
      "",
      "[Removed Lines]",
      "434:             format_html(",
      "435:                 '<a href=\"{}\">{}</a>',",
      "436:                 self._get_issue_url_compat(group, issue),",
      "437:                 self._get_issue_label_compat(group, issue),",
      "438:             )",
      "",
      "[Added Lines]",
      "433:             {",
      "434:                 \"url\": self._get_issue_url_compat(group, issue),",
      "435:                 \"displayName\": self._get_issue_label_compat(group, issue),",
      "436:             }",
      "",
      "---------------"
    ],
    "tests/sentry/api/endpoints/test_group_details.py||tests/sentry/api/endpoints/test_group_details.py": [
      "File: tests/sentry/api/endpoints/test_group_details.py -> tests/sentry/api/endpoints/test_group_details.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "156:         response = self.client.get(url, format=\"json\")",
      "158:         assert response.data[\"annotations\"] == [",
      "160:         ]",
      "162:     def test_plugin_external_issue_annotation(self):",
      "",
      "[Removed Lines]",
      "159:             '<a href=\"https://example.com/issues/2\">Issue#2</a>'",
      "",
      "[Added Lines]",
      "159:             {\"url\": \"https://example.com/issues/2\", \"displayName\": \"Issue#2\"}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "172:         url = f\"/api/0/issues/{group.id}/\"",
      "173:         response = self.client.get(url, format=\"json\")",
      "177:     def test_integration_external_issue_annotation(self):",
      "178:         group = self.create_group()",
      "",
      "[Removed Lines]",
      "175:         assert response.data[\"annotations\"] == ['<a href=\"https://trello.com/c/134\">Trello-134</a>']",
      "",
      "[Added Lines]",
      "175:         assert response.data[\"annotations\"] == [",
      "176:             {\"url\": \"https://trello.com/c/134\", \"displayName\": \"Trello-134\"}",
      "177:         ]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "191:         response = self.client.get(url, format=\"json\")",
      "193:         assert response.data[\"annotations\"] == [",
      "195:         ]",
      "197:     def test_permalink_superuser(self):",
      "",
      "[Removed Lines]",
      "194:             '<a href=\"https://example.com/browse/api-123\">api-123</a>'",
      "",
      "[Added Lines]",
      "196:             {\"url\": \"https://example.com/browse/api-123\", \"displayName\": \"api-123\"}",
      "",
      "---------------"
    ],
    "tests/sentry/integrations/test_issues.py||tests/sentry/integrations/test_issues.py": [
      "File: tests/sentry/integrations/test_issues.py -> tests/sentry/integrations/test_issues.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "505:         link = self.installation.get_issue_url(self.external_issue.key)",
      "507:         assert self.installation.get_annotations_for_group_list([self.group]) == {",
      "509:         }",
      "511:         with assume_test_silo_mode(SiloMode.CONTROL):",
      "",
      "[Removed Lines]",
      "508:             self.group.id: [f'<a href=\"{link}\">{label}</a>']",
      "",
      "[Added Lines]",
      "508:             self.group.id: [{\"url\": link, \"displayName\": label}]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "19e5c75a670c9b4ef7f48893cd567e0694c9763a",
      "candidate_info": {
        "commit_hash": "19e5c75a670c9b4ef7f48893cd567e0694c9763a",
        "repo": "getsentry/sentry",
        "commit_url": "https://github.com/getsentry/sentry/commit/19e5c75a670c9b4ef7f48893cd567e0694c9763a",
        "files": [
          "src/sentry/api/helpers/group_index/types.py",
          "src/sentry/api/helpers/group_index/update.py",
          "src/sentry/api/helpers/group_index/validators/group.py",
          "src/sentry/api/helpers/group_index/validators/in_commit.py",
          "src/sentry/api/helpers/group_index/validators/status_details.py",
          "src/sentry/api/serializers/models/group.py",
          "src/sentry/api/serializers/models/group_stream.py",
          "src/sentry/apidocs/examples/issue_examples.py",
          "src/sentry/apidocs/parameters.py",
          "src/sentry/issues/endpoints/organization_group_index.py",
          "src/sentry/models/group.py"
        ],
        "message": "chore(issues): Publish `OrganizationGroupIndexEndpoint` (#88127)\n\nThis PR documents and publishes the `OrganizationGroupIndexEndpoint`\nendpoint which is used to serve the issue stream. The existing\ndocstrings were out of date so any mismatch is likely due to an update\nI've made to reflect reality.\n\nThe exceptions are as follows:\n\n- For all methods, the `savedSearch` and `searchId` qparams are being\nomitted since that system is deprecated.\n- For all methods, the `useGroupSnubaDataset` is an internal query\nparam, so we don't need to document it. Added a comment mentioning this\nas well\n- For `PUT`, `ignoreDuration`, `ignoreCount`, `ignoreWindow`\n`ignoreUserCount`, `ignoreUserWindow` are declared twice, so I'm\nfavouring the nested object.\n - For `PUT`, `inboxDetails` is an empty member of the serializer\n- For `PUT`, `snoozeDuration` had a comment referencing it should be\nremoved in 9.0. Since this is just documentation, not a functional\nchange, I just omit it from the API but we should clean that up at some\npoint.\n\n**Update**: With this PR, the `PUT` endpoint will stay private. I will\naddress this in a follow up because it requires a functional change to\nthe serializer.",
        "before_after_code_files": [
          "src/sentry/api/helpers/group_index/types.py||src/sentry/api/helpers/group_index/types.py",
          "src/sentry/api/helpers/group_index/update.py||src/sentry/api/helpers/group_index/update.py",
          "src/sentry/api/helpers/group_index/validators/group.py||src/sentry/api/helpers/group_index/validators/group.py",
          "src/sentry/api/helpers/group_index/validators/in_commit.py||src/sentry/api/helpers/group_index/validators/in_commit.py",
          "src/sentry/api/helpers/group_index/validators/status_details.py||src/sentry/api/helpers/group_index/validators/status_details.py",
          "src/sentry/api/serializers/models/group.py||src/sentry/api/serializers/models/group.py",
          "src/sentry/api/serializers/models/group_stream.py||src/sentry/api/serializers/models/group_stream.py",
          "src/sentry/apidocs/examples/issue_examples.py||src/sentry/apidocs/examples/issue_examples.py",
          "src/sentry/apidocs/parameters.py||src/sentry/apidocs/parameters.py",
          "src/sentry/issues/endpoints/organization_group_index.py||src/sentry/issues/endpoints/organization_group_index.py",
          "src/sentry/models/group.py||src/sentry/models/group.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/sentry/api/serializers/models/group.py||src/sentry/api/serializers/models/group.py"
          ],
          "candidate": [
            "src/sentry/api/serializers/models/group.py||src/sentry/api/serializers/models/group.py"
          ]
        }
      },
      "candidate_diff": {
        "src/sentry/api/helpers/group_index/types.py||src/sentry/api/helpers/group_index/types.py": [
          "File: src/sentry/api/helpers/group_index/types.py -> src/sentry/api/helpers/group_index/types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from typing import NotRequired, TypedDict",
          "3: from sentry.api.helpers.group_index.validators.status_details import StatusDetailsResult",
          "4: from sentry.api.serializers.models.actor import ActorSerializerResponse",
          "5: from sentry.issues.merge import MergedGroup",
          "6: from sentry.notifications.helpers import SubscriptionDetails",
          "9: # This type isn't being enforced, but is necessary to publish the API.",
          "10: # This shape is currently assembled by the `update_groups` function.",
          "11: class MutateIssueResponse(TypedDict):",
          "12:     assignedTo: NotRequired[ActorSerializerResponse]",
          "13:     discard: NotRequired[bool]",
          "14:     hasSeen: NotRequired[bool]",
          "15:     inbox: NotRequired[bool]",
          "16:     isBookmarked: NotRequired[bool]",
          "17:     isPublic: NotRequired[bool]",
          "18:     isSubscribed: NotRequired[bool]",
          "19:     merge: NotRequired[MergedGroup]",
          "20:     priority: NotRequired[str]",
          "21:     shareId: NotRequired[str]",
          "22:     status: NotRequired[str]",
          "23:     statusDetails: NotRequired[StatusDetailsResult]",
          "24:     subscriptionDetails: NotRequired[SubscriptionDetails]",
          "25:     substatus: NotRequired[str]",
          "",
          "---------------"
        ],
        "src/sentry/api/helpers/group_index/update.py||src/sentry/api/helpers/group_index/update.py": [
          "File: src/sentry/api/helpers/group_index/update.py -> src/sentry/api/helpers/group_index/update.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "797:             sender=update_groups,",
          "798:         )",
          "800:     return Response(result)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800:     # TODO(issues): This type is very fragile since it's fields are updated in quite a few places.",
          "801:     # Since this is a public API, we are using assuming a shape of MutateIssueResponse, but this",
          "802:     # cannot be enforced currently. If changing fields, please update that type.",
          "",
          "---------------"
        ],
        "src/sentry/api/helpers/group_index/validators/group.py||src/sentry/api/helpers/group_index/validators/group.py": [
          "File: src/sentry/api/helpers/group_index/validators/group.py -> src/sentry/api/helpers/group_index/validators/group.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from collections.abc import Mapping",
          "2: from typing import Any",
          "4: from rest_framework import serializers",
          "6: from sentry.api.fields import ActorField",
          "7: from sentry.models.group import STATUS_UPDATE_CHOICES",
          "8: from sentry.types.actor import Actor",
          "9: from sentry.types.group import SUBSTATUS_UPDATE_CHOICES, PriorityLevel",
          "14: class GroupValidator(serializers.Serializer):",
          "17:     status = serializers.ChoiceField(",
          "19:     )",
          "21:     substatus = serializers.ChoiceField(",
          "22:         choices=list(zip(SUBSTATUS_UPDATE_CHOICES.keys(), SUBSTATUS_UPDATE_CHOICES.keys())),",
          "23:         allow_null=True,",
          "24:     )",
          "39:     priority = serializers.ChoiceField(",
          "40:         choices=list(",
          "41:             zip(",
          "42:                 [p.to_str() for p in PriorityLevel],",
          "43:                 [p.to_str() for p in PriorityLevel],",
          "44:             )",
          "46:     )",
          "48:     # TODO(dcramer): remove in 9.0",
          "49:     # for the moment, the CLI sends this for any issue update, so allow nulls",
          "50:     snoozeDuration = serializers.IntegerField(allow_null=True)",
          "",
          "[Removed Lines]",
          "11: from . import InboxDetailsValidator, StatusDetailsValidator",
          "15:     inbox = serializers.BooleanField()",
          "16:     inboxDetails = InboxDetailsValidator()",
          "18:         choices=list(zip(STATUS_UPDATE_CHOICES.keys(), STATUS_UPDATE_CHOICES.keys()))",
          "20:     statusDetails = StatusDetailsValidator()",
          "25:     hasSeen = serializers.BooleanField()",
          "26:     isBookmarked = serializers.BooleanField()",
          "27:     isPublic = serializers.BooleanField()",
          "28:     isSubscribed = serializers.BooleanField()",
          "29:     merge = serializers.BooleanField()",
          "30:     discard = serializers.BooleanField()",
          "31:     ignoreDuration = serializers.IntegerField()",
          "32:     ignoreCount = serializers.IntegerField()",
          "33:     # in minutes, max of one week",
          "34:     ignoreWindow = serializers.IntegerField(max_value=7 * 24 * 60)",
          "35:     ignoreUserCount = serializers.IntegerField()",
          "36:     # in minutes, max of one week",
          "37:     ignoreUserWindow = serializers.IntegerField(max_value=7 * 24 * 60)",
          "38:     assignedTo = ActorField()",
          "45:         )",
          "",
          "[Added Lines]",
          "4: from drf_spectacular.utils import extend_schema_serializer",
          "8: from sentry.api.helpers.group_index.validators.inbox_details import InboxDetailsValidator",
          "9: from sentry.api.helpers.group_index.validators.status_details import StatusDetailsValidator",
          "15: @extend_schema_serializer(",
          "16:     exclude_fields=[",
          "17:         \"ignoreDuration\",",
          "18:         \"ignoreCount\",",
          "19:         \"ignoreWindow\",",
          "20:         \"ignoreUserCount\",",
          "21:         \"ignoreUserWindow\",",
          "22:         \"inboxDetails\",",
          "23:         \"snoozeDuration\",",
          "24:     ]",
          "25: )",
          "27:     inbox = serializers.BooleanField(",
          "28:         help_text=\"If true, marks the issue as reviewed by the requestor.\"",
          "29:     )",
          "31:         help_text=\"Limit mutations to only issues with the given status.\",",
          "32:         choices=list(zip(STATUS_UPDATE_CHOICES.keys(), STATUS_UPDATE_CHOICES.keys())),",
          "33:     )",
          "34:     statusDetails = StatusDetailsValidator(",
          "35:         help_text=\"Additional details about the resolution. Status detail updates that include release data are only allowed for issues within a single project.\"",
          "40:         help_text=\"The new substatus of the issue.\",",
          "41:     )",
          "42:     hasSeen = serializers.BooleanField(",
          "43:         help_text=\"If true, marks the issue as seen by the requestor.\"",
          "44:     )",
          "45:     isBookmarked = serializers.BooleanField(",
          "46:         help_text=\"If true, bookmarks the issue for the requestor.\"",
          "47:     )",
          "48:     isPublic = serializers.BooleanField(help_text=\"If true, publishes the issue.\")",
          "49:     isSubscribed = serializers.BooleanField(",
          "50:         help_text=\"If true, subscribes the requestor to the issue.\"",
          "51:     )",
          "52:     merge = serializers.BooleanField(help_text=\"If true, merges the issues together.\")",
          "53:     discard = serializers.BooleanField(",
          "54:         help_text=\"If true, discards the issues instead of updating them.\"",
          "55:     )",
          "56:     assignedTo = ActorField(",
          "57:         help_text=\"The user or team that should be assigned to the issues. Values take the form of `<user_id>`, `user:<user_id>`, `<username>`, `<user_primary_email>`, or `team:<team_id>`.\"",
          "60:         help_text=\"The priority that should be set for the issues\",",
          "66:         ),",
          "69:     ####################################################",
          "70:     # These fields are not documented in the API docs. #",
          "71:     ####################################################",
          "72:     # These are already covered by the `statusDetails` serializer field.",
          "73:     ignoreDuration = serializers.IntegerField()",
          "74:     ignoreCount = serializers.IntegerField()",
          "75:     ignoreWindow = serializers.IntegerField(max_value=7 * 24 * 60)",
          "76:     ignoreUserCount = serializers.IntegerField()",
          "77:     ignoreUserWindow = serializers.IntegerField(max_value=7 * 24 * 60)",
          "78:     # The `inboxDetails`` field is empty.",
          "79:     inboxDetails = InboxDetailsValidator()",
          "80:     # The `snooze` field is deprecated.",
          "",
          "---------------"
        ],
        "src/sentry/api/helpers/group_index/validators/in_commit.py||src/sentry/api/helpers/group_index/validators/in_commit.py": [
          "File: src/sentry/api/helpers/group_index/validators/in_commit.py -> src/sentry/api/helpers/group_index/validators/in_commit.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from rest_framework import serializers",
          "6: from sentry.models.commit import Commit",
          "7: from sentry.models.repository import Repository",
          "10: class InCommitValidator(serializers.Serializer):",
          "14:     def validate_repository(self, value: str) -> Repository:",
          "15:         project = self.context[\"project\"]",
          "",
          "[Removed Lines]",
          "1: from collections.abc import Mapping",
          "2: from typing import Any",
          "11:     commit = serializers.CharField(required=True)",
          "12:     repository = serializers.CharField(required=True)",
          "",
          "[Added Lines]",
          "1: from typing import Any, TypedDict",
          "3: from drf_spectacular.utils import extend_schema_serializer",
          "10: class InCommitResult(TypedDict):",
          "11:     commit: str",
          "12:     repository: str",
          "15: @extend_schema_serializer()",
          "17:     commit = serializers.CharField(required=True, help_text=\"The SHA of the resolving commit.\")",
          "18:     repository = serializers.CharField(",
          "19:         required=True, help_text=\"The name of the repository (as it appears in Sentry).\"",
          "20:     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:         except Repository.DoesNotExist:",
          "19:             raise serializers.ValidationError(\"Unable to find the given repository.\")",
          "22:         attrs = super().validate(attrs)",
          "23:         repository = attrs.get(\"repository\")",
          "24:         commit = attrs.get(\"commit\")",
          "",
          "[Removed Lines]",
          "21:     def validate(self, attrs: Mapping[str, Any]) -> Commit:",
          "",
          "[Added Lines]",
          "29:     def validate(self, attrs: dict[str, Any]) -> Commit:",
          "",
          "---------------"
        ],
        "src/sentry/api/helpers/group_index/validators/status_details.py||src/sentry/api/helpers/group_index/validators/status_details.py": [
          "File: src/sentry/api/helpers/group_index/validators/status_details.py -> src/sentry/api/helpers/group_index/validators/status_details.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from rest_framework import serializers",
          "3: from sentry import features",
          "4: from sentry.models.release import Release",
          "9: class StatusDetailsValidator(serializers.Serializer):",
          "22:     def validate_inRelease(self, value: str) -> Release:",
          "23:         project = self.context[\"project\"]",
          "",
          "[Removed Lines]",
          "6: from . import InCommitValidator",
          "10:     inNextRelease = serializers.BooleanField()",
          "11:     inUpcomingRelease = serializers.BooleanField()",
          "12:     inRelease = serializers.CharField()",
          "13:     inCommit = InCommitValidator(required=False)",
          "14:     ignoreDuration = serializers.IntegerField()",
          "15:     ignoreCount = serializers.IntegerField()",
          "16:     # in minutes, max of one week",
          "17:     ignoreWindow = serializers.IntegerField(max_value=7 * 24 * 60)",
          "18:     ignoreUserCount = serializers.IntegerField()",
          "19:     # in minutes, max of one week",
          "20:     ignoreUserWindow = serializers.IntegerField(max_value=7 * 24 * 60)",
          "",
          "[Added Lines]",
          "1: from typing import NotRequired, TypedDict",
          "3: from drf_spectacular.utils import extend_schema_serializer",
          "7: from sentry.api.helpers.group_index.validators.in_commit import InCommitResult, InCommitValidator",
          "11: class StatusDetailsResult(TypedDict):",
          "12:     inNextRelease: NotRequired[bool]",
          "13:     inUpcomingRelease: NotRequired[bool]",
          "14:     inRelease: NotRequired[str]",
          "15:     inCommit: NotRequired[InCommitResult]",
          "16:     ignoreDuration: NotRequired[int]",
          "17:     ignoreCount: NotRequired[int]",
          "18:     ignoreWindow: NotRequired[int]",
          "19:     ignoreUserCount: NotRequired[int]",
          "20:     ignoreUserWindow: NotRequired[int]",
          "23: @extend_schema_serializer()",
          "25:     inNextRelease = serializers.BooleanField(",
          "26:         help_text=\"If true, marks the issue as resolved in the next release.\"",
          "27:     )",
          "28:     inUpcomingRelease = serializers.BooleanField(",
          "29:         help_text=\"If true, marks the issue as resolved in the upcoming release.\"",
          "30:     )",
          "31:     inRelease = serializers.CharField(",
          "32:         help_text=(",
          "33:             \"The version of the release that the issue should be resolved in.\"",
          "34:             \"If set to `latest`, the latest release will be used.\"",
          "35:         )",
          "36:     )",
          "37:     inCommit = InCommitValidator(",
          "38:         help_text=\"The commit data that the issue should use for resolution.\", required=False",
          "39:     )",
          "40:     ignoreDuration = serializers.IntegerField(",
          "41:         help_text=\"Ignore the issue until for this many minutes.\"",
          "42:     )",
          "43:     ignoreCount = serializers.IntegerField(",
          "44:         help_text=\"Ignore the issue until it has occurred this many times in `ignoreWindow` minutes.\"",
          "45:     )",
          "46:     ignoreWindow = serializers.IntegerField(",
          "47:         help_text=\"Ignore the issue until it has occurred `ignoreCount` times in this many minutes. (Max: 1 week)\",",
          "48:         max_value=7 * 24 * 60,",
          "49:     )",
          "50:     ignoreUserCount = serializers.IntegerField(",
          "51:         help_text=\"Ignore the issue until it has affected this many users in `ignoreUserWindow` minutes.\"",
          "52:     )",
          "53:     ignoreUserWindow = serializers.IntegerField(",
          "54:         help_text=\"Ignore the issue until it has affected `ignoreUserCount` users in this many minutes. (Max: 1 week)\",",
          "55:         max_value=7 * 24 * 60,",
          "56:     )",
          "",
          "---------------"
        ],
        "src/sentry/api/serializers/models/group.py||src/sentry/api/serializers/models/group.py": [
          "File: src/sentry/api/serializers/models/group.py -> src/sentry/api/serializers/models/group.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:     type: str",
          "133:     issueType: str",
          "134:     issueCategory: str",
          "136:     numComments: int",
          "137:     assignedTo: UserSerializerResponse",
          "138:     isBookmarked: bool",
          "139:     isSubscribed: bool",
          "140:     subscriptionDetails: SubscriptionDetails | None",
          "141:     hasSeen: bool",
          "145: class SeenStats(TypedDict):",
          "",
          "[Removed Lines]",
          "135:     metadata: Mapping[str, Any]",
          "142:     annotations: Sequence[GroupAnnotation]",
          "",
          "[Added Lines]",
          "135:     metadata: dict[str, Any]",
          "142:     annotations: list[GroupAnnotation]",
          "",
          "---------------"
        ],
        "src/sentry/api/serializers/models/group_stream.py||src/sentry/api/serializers/models/group_stream.py": [
          "File: src/sentry/api/serializers/models/group_stream.py -> src/sentry/api/serializers/models/group_stream.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:     type: NotRequired[str]",
          "283:     issueType: NotRequired[str]",
          "284:     issueCategory: NotRequired[str]",
          "286:     numComments: NotRequired[int]",
          "287:     assignedTo: NotRequired[UserSerializerResponse]",
          "288:     isBookmarked: NotRequired[bool]",
          "289:     isSubscribed: NotRequired[bool]",
          "290:     subscriptionDetails: NotRequired[SubscriptionDetails | None]",
          "291:     hasSeen: NotRequired[bool]",
          "293:     # from base response optional",
          "294:     isUnhandled: NotRequired[bool]",
          "295:     count: NotRequired[int]",
          "",
          "[Removed Lines]",
          "285:     metadata: NotRequired[Mapping[str, Any]]",
          "292:     annotations: NotRequired[Sequence[GroupAnnotation]]",
          "",
          "[Added Lines]",
          "285:     metadata: NotRequired[dict[str, Any]]",
          "292:     annotations: NotRequired[list[GroupAnnotation]]",
          "",
          "---------------"
        ],
        "src/sentry/apidocs/examples/issue_examples.py||src/sentry/apidocs/examples/issue_examples.py": [
          "File: src/sentry/apidocs/examples/issue_examples.py -> src/sentry/apidocs/examples/issue_examples.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from datetime import datetime",
          "3: from drf_spectacular.utils import OpenApiExample",
          "5: from sentry.api.helpers.group_index.types import MutateIssueResponse",
          "6: from sentry.api.serializers.models.group_stream import StreamGroupSerializerSnubaResponse",
          "8: SIMPLE_ISSUE: StreamGroupSerializerSnubaResponse = {",
          "9:     \"annotations\": [],",
          "10:     \"assignedTo\": {",
          "11:         \"id\": \"1\",",
          "12:         \"name\": \"John Doe\",",
          "13:         \"email\": \"john.doe@example.com\",",
          "14:         \"username\": \"john.doe\",",
          "15:         \"avatarUrl\": \"https://example.com/avatar.png\",",
          "16:         \"isActive\": True,",
          "17:         \"hasPasswordAuth\": True,",
          "18:         \"isManaged\": False,",
          "19:         \"dateJoined\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "20:         \"lastLogin\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "21:         \"has2fa\": False,",
          "22:         \"lastActive\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "23:         \"isSuperuser\": False,",
          "24:         \"isStaff\": False,",
          "25:         \"experiments\": {},",
          "26:         \"emails\": [],",
          "27:     },",
          "28:     \"count\": 150,",
          "29:     \"culprit\": \"raven.scripts.runner in main\",",
          "30:     \"firstSeen\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "31:     \"filtered\": None,",
          "32:     \"inbox\": {",
          "33:         \"reason\": 0,",
          "34:         \"reason_details\": None,",
          "35:         \"date_added\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "36:     },",
          "37:     \"hasSeen\": False,",
          "38:     \"id\": \"1\",",
          "39:     \"isBookmarked\": False,",
          "40:     \"isPublic\": False,",
          "41:     \"isSubscribed\": True,",
          "42:     \"lastSeen\": datetime.fromisoformat(\"2018-12-06T21:19:55Z\"),",
          "43:     \"level\": \"error\",",
          "44:     \"logger\": None,",
          "45:     \"metadata\": {\"title\": \"This is an example Python exception\"},",
          "46:     \"numComments\": 0,",
          "47:     \"permalink\": \"https://sentry.io/the-interstellar-jurisdiction/pump-station/issues/1/\",",
          "48:     \"project\": {\"id\": \"2\", \"name\": \"Pump Station\", \"slug\": \"pump-station\", \"platform\": \"python\"},",
          "49:     \"shareId\": \"123def456abc\",",
          "50:     \"shortId\": \"PUMP-STATION-1\",",
          "51:     \"stats\": {",
          "52:         \"24h\": [",
          "53:             [1541455200.0, 473],",
          "54:             [1541458800.0, 914],",
          "55:             [1541462400.0, 991],",
          "56:             [1541466000.0, 925],",
          "57:             [1541469600.0, 881],",
          "58:             [1541473200.0, 182],",
          "59:             [1541476800.0, 490],",
          "60:             [1541480400.0, 820],",
          "61:             [1541484000.0, 322],",
          "62:             [1541487600.0, 836],",
          "63:             [1541491200.0, 565],",
          "64:             [1541494800.0, 758],",
          "65:             [1541498400.0, 880],",
          "66:             [1541502000.0, 677],",
          "67:             [1541505600.0, 381],",
          "68:             [1541509200.0, 814],",
          "69:             [1541512800.0, 329],",
          "70:             [1541516400.0, 446],",
          "71:             [1541520000.0, 731],",
          "72:             [1541523600.0, 111],",
          "73:             [1541527200.0, 926],",
          "74:             [1541530800.0, 772],",
          "75:             [1541534400.0, 400],",
          "76:             [1541538000.0, 943],",
          "77:         ]",
          "78:     },",
          "79:     \"priority\": \"medium\",",
          "80:     \"priorityLockedAt\": None,",
          "81:     \"owners\": {",
          "82:         \"type\": \"user\",",
          "83:         \"owner\": \"1\",",
          "84:         \"date_added\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "85:     },",
          "86:     \"platform\": \"python\",",
          "87:     \"lifetime\": {",
          "88:         \"count\": 150,",
          "89:         \"userCount\": 0,",
          "90:         \"firstSeen\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "91:         \"lastSeen\": datetime.fromisoformat(\"2018-12-06T21:19:55Z\"),",
          "92:     },",
          "93:     \"status\": \"ignored\",",
          "94:     \"substatus\": \"archived_until_condition_met\",",
          "95:     \"statusDetails\": {},",
          "96:     \"subscriptionDetails\": None,",
          "97:     \"title\": \"This is an example Python exception\",",
          "98:     \"type\": \"default\",",
          "99:     \"userCount\": 0,",
          "100:     \"integrationIssues\": [],",
          "101:     \"pluginIssues\": [],",
          "102:     \"pluginActions\": [],",
          "103:     \"sentryAppIssues\": [],",
          "104:     \"isUnhandled\": False,",
          "105:     \"issueCategory\": \"performance\",",
          "106:     \"issueType\": \"performance_n_plus_one_db_queries\",",
          "107:     \"sessionCount\": 0,",
          "108:     \"latestEventHasAttachments\": False,",
          "109: }",
          "111: MUTATE_ISSUE_RESULT: MutateIssueResponse = {",
          "112:     \"assignedTo\": {\"type\": \"user\", \"id\": \"1\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"},",
          "113:     \"discard\": False,",
          "114:     \"hasSeen\": True,",
          "115:     \"inbox\": True,",
          "116:     \"isBookmarked\": False,",
          "117:     \"isPublic\": True,",
          "118:     \"isSubscribed\": True,",
          "119:     \"merge\": {",
          "120:         \"children\": [\"11\", \"12\", \"13\"],",
          "121:         \"parent\": \"10\",",
          "122:     },",
          "123:     \"priority\": \"medium\",",
          "124:     \"shareId\": \"123def456abc\",",
          "125:     \"status\": \"ignored\",",
          "126:     \"statusDetails\": {",
          "127:         \"ignoreDuration\": 100,",
          "128:         \"ignoreCount\": 10,",
          "129:         \"ignoreWindow\": 60,",
          "130:         \"ignoreUserCount\": 10,",
          "131:         \"ignoreUserWindow\": 60,",
          "132:         \"inNextRelease\": False,",
          "133:         \"inUpcomingRelease\": False,",
          "134:         \"inRelease\": \"1.0.0\",",
          "135:         \"inCommit\": {",
          "136:             \"commit\": \"123def456abc\",",
          "137:             \"repository\": \"getsentry/sentry\",",
          "138:         },",
          "139:     },",
          "140:     \"subscriptionDetails\": {",
          "141:         \"disabled\": False,",
          "142:         \"reason\": \"mentioned\",",
          "143:     },",
          "144:     \"substatus\": \"archived_until_condition_met\",",
          "145: }",
          "148: class IssueExamples:",
          "149:     ORGANIZATION_GROUP_INDEX_GET = [",
          "150:         OpenApiExample(",
          "151:             \"Return a list of issues for an organization\",",
          "152:             value=[SIMPLE_ISSUE],",
          "153:             response_only=True,",
          "154:             status_codes=[\"200\"],",
          "155:         )",
          "156:     ]",
          "157:     ORGANIZATION_GROUP_INDEX_PUT = [",
          "158:         OpenApiExample(",
          "159:             \"Return the update results for issues in an organization\",",
          "160:             value=MUTATE_ISSUE_RESULT,",
          "161:             response_only=True,",
          "162:             status_codes=[\"200\"],",
          "163:         )",
          "164:     ]",
          "",
          "---------------"
        ],
        "src/sentry/apidocs/parameters.py||src/sentry/apidocs/parameters.py": [
          "File: src/sentry/apidocs/parameters.py -> src/sentry/apidocs/parameters.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:         enum=[\"id\", \"date\", \"age\", \"count\"],",
          "308:     )",
          "311: class DetectorParams:",
          "312:     DETECTOR_ID = OpenApiParameter(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:     GROUP_STATS_PERIOD = OpenApiParameter(",
          "311:         name=\"groupStatsPeriod\",",
          "312:         description=\"The timeline on which stats for the groups should be presented.\",",
          "313:         enum=[\"\", \"24h\", \"14d\", \"auto\"],",
          "314:         location=OpenApiParameter.QUERY,",
          "315:         type=OpenApiTypes.STR,",
          "316:         required=False,",
          "317:     )",
          "319:     SHORT_ID_LOOKUP = OpenApiParameter(",
          "320:         name=\"shortIdLookup\",",
          "321:         description=\"If this is set to `1` then the query will be parsed for issue short IDs. These may ignore other filters (e.g. projects), which is why it is an opt-in.\",",
          "322:         enum=[\"1\", \"0\"],",
          "323:         location=OpenApiParameter.QUERY,",
          "324:         type=OpenApiTypes.STR,",
          "325:         required=False,",
          "326:     )",
          "328:     DEFAULT_QUERY = OpenApiParameter(",
          "329:         name=\"query\",",
          "330:         description=\"An optional search query for filtering issues. A default query will apply if no view/query is set. For all results use this parameter with an empty string.\",",
          "331:         default=\"is:unresolved issue.priority:[high,medium]\",",
          "332:         location=OpenApiParameter.QUERY,",
          "333:         type=OpenApiTypes.STR,",
          "334:         required=False,",
          "335:     )",
          "337:     VIEW_ID = OpenApiParameter(",
          "338:         name=\"viewId\",",
          "339:         description=\"The ID of the view to use. If no query is present, the view's query and filters will be applied.\",",
          "340:         location=OpenApiParameter.QUERY,",
          "341:         type=OpenApiTypes.STR,",
          "342:         required=False,",
          "343:     )",
          "345:     VIEW_SORT = OpenApiParameter(",
          "346:         name=\"sort\",",
          "347:         description=\"The sort order of the view. Options include 'Last Seen' (`date`), 'First Seen' (`new`), 'Trends' (`trends`), 'Events' (`freq`), 'Users' (`user`), and 'Date Added' (`inbox`).\",",
          "348:         default=\"date\",",
          "349:         enum=[\"date\", \"new\", \"trends\", \"freq\", \"user\", \"inbox\"],",
          "350:         location=OpenApiParameter.QUERY,",
          "351:         type=OpenApiTypes.STR,",
          "352:         required=False,",
          "353:     )",
          "355:     LIMIT = OpenApiParameter(",
          "356:         name=\"limit\",",
          "357:         description=\"The maximum number of issues to affect. The maximum is 100.\",",
          "358:         default=100,",
          "359:         location=OpenApiParameter.QUERY,",
          "360:         type=OpenApiTypes.INT,",
          "361:         required=False,",
          "362:     )",
          "364:     GROUP_INDEX_EXPAND = OpenApiParameter(",
          "365:         name=\"expand\",",
          "366:         description=\"Additional data to include in the response.\",",
          "367:         enum=[",
          "368:             \"inbox\",",
          "369:             \"owners\",",
          "370:             \"sessions\",",
          "371:             \"pluginActions\",",
          "372:             \"pluginIssues\",",
          "373:             \"integrationIssues\",",
          "374:             \"sentryAppIssues\",",
          "375:             \"latestEventHasAttachments\",",
          "376:         ],",
          "377:         location=OpenApiParameter.QUERY,",
          "378:         type=OpenApiTypes.STR,",
          "379:         required=False,",
          "380:         many=True,",
          "381:     )",
          "383:     GROUP_INDEX_COLLAPSE = OpenApiParameter(",
          "384:         name=\"collapse\",",
          "385:         description=\"Fields to remove from the response to improve query performance.\",",
          "386:         enum=[\"stats\", \"lifetime\", \"base\", \"unhandled\", \"filtered\"],",
          "387:         location=OpenApiParameter.QUERY,",
          "388:         type=OpenApiTypes.STR,",
          "389:         required=False,",
          "390:         many=True,",
          "391:     )",
          "392:     MUTATE_ISSUE_ID_LIST = OpenApiParameter(",
          "393:         name=\"id\",",
          "394:         description=\"The list of issue IDs to mutate. It is optional for status updates, in which an implicit `update all` is assumed.\",",
          "395:         location=OpenApiParameter.QUERY,",
          "396:         type=OpenApiTypes.INT,",
          "397:         required=False,",
          "398:         many=True,",
          "399:     )",
          "400:     DELETE_ISSUE_ID_LIST = OpenApiParameter(",
          "401:         name=\"id\",",
          "402:         description=\"The list of issue IDs to be removed. If not provided, it will attempt to remove the first 1000 issues.\",",
          "403:         location=OpenApiParameter.QUERY,",
          "404:         type=OpenApiTypes.INT,",
          "405:         required=False,",
          "406:         many=True,",
          "407:     )",
          "",
          "---------------"
        ],
        "src/sentry/issues/endpoints/organization_group_index.py||src/sentry/issues/endpoints/organization_group_index.py": [
          "File: src/sentry/issues/endpoints/organization_group_index.py -> src/sentry/issues/endpoints/organization_group_index.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import sentry_sdk",
          "7: from django.utils import timezone",
          "8: from rest_framework.exceptions import ParseError, PermissionDenied",
          "9: from rest_framework.request import Request",
          "10: from rest_framework.response import Response",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: from drf_spectacular.utils import extend_schema",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     track_slo_response,",
          "26:     update_groups_with_search_fn,",
          "27: )",
          "28: from sentry.api.helpers.group_index.validators import ValidationError",
          "29: from sentry.api.paginator import DateTimePaginator, Paginator",
          "30: from sentry.api.serializers import serialize",
          "32: from sentry.api.utils import get_date_range_from_stats_period, handle_query_errors",
          "33: from sentry.constants import ALLOWED_FUTURE_DELTA",
          "34: from sentry.exceptions import InvalidParams, InvalidSearchQuery",
          "35: from sentry.models.environment import Environment",
          "",
          "[Removed Lines]",
          "31: from sentry.api.serializers.models.group_stream import StreamGroupSerializerSnuba",
          "",
          "[Added Lines]",
          "29: from sentry.api.helpers.group_index.types import MutateIssueResponse",
          "31: from sentry.api.helpers.group_index.validators.group import GroupValidator",
          "34: from sentry.api.serializers.models.group_stream import (",
          "35:     StreamGroupSerializerSnuba,",
          "36:     StreamGroupSerializerSnubaResponse,",
          "37: )",
          "39: from sentry.apidocs.constants import (",
          "40:     RESPONSE_BAD_REQUEST,",
          "41:     RESPONSE_FORBIDDEN,",
          "42:     RESPONSE_NO_CONTENT,",
          "43:     RESPONSE_NOT_FOUND,",
          "44:     RESPONSE_UNAUTHORIZED,",
          "45: )",
          "46: from sentry.apidocs.examples.issue_examples import IssueExamples",
          "47: from sentry.apidocs.parameters import (",
          "48:     CursorQueryParam,",
          "49:     GlobalParams,",
          "50:     IssueParams,",
          "51:     OrganizationParams,",
          "52: )",
          "53: from sentry.apidocs.utils import inline_sentry_response_serializer",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44: from sentry.utils.cursors import Cursor, CursorResult",
          "45: from sentry.utils.validators import normalize_event_id",
          "48: allowed_inbox_search_terms = frozenset([\"date\", \"status\", \"for_review\", \"assigned_or_suggested\"])",
          "",
          "[Removed Lines]",
          "47: ERR_INVALID_STATS_PERIOD = \"Invalid stats_period. Valid choices are '', '24h', and '14d'\"",
          "",
          "[Added Lines]",
          "68: ERR_INVALID_STATS_PERIOD = \"Invalid stats_period. Valid choices are '', '24h', '14d' and 'auto'\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:     return results",
          "142: @region_silo_endpoint",
          "143: class OrganizationGroupIndexEndpoint(OrganizationEndpoint):",
          "144:     publish_status = {",
          "147:         \"PUT\": ApiPublishStatus.UNKNOWN,",
          "148:     }",
          "149:     owner = ApiOwner.ISSUES",
          "",
          "[Removed Lines]",
          "145:         \"DELETE\": ApiPublishStatus.UNKNOWN,",
          "146:         \"GET\": ApiPublishStatus.UNKNOWN,",
          "",
          "[Added Lines]",
          "163: @extend_schema(tags=[\"Events\"])",
          "167:         \"DELETE\": ApiPublishStatus.PUBLIC,",
          "168:         \"GET\": ApiPublishStatus.PUBLIC,",
          "169:         # TODO(Leander): I cannot for the life of me figure out why this method can't be published.",
          "170:         # Punting to a later PR.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:                 def use_group_snuba_dataset() -> bool:",
          "178:                     # if useGroupSnubaDataset is present, override the flag so we can test the new dataset",
          "179:                     req_param_value: str | None = request.GET.get(\"useGroupSnubaDataset\")",
          "180:                     if req_param_value and req_param_value.lower() == \"true\":",
          "181:                         return True",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:                     # XXX: This query param is omitted from the API docs as it is currently internal.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "205:                 result = search.backend.query(**query_kwargs)",
          "206:             return result, query_kwargs",
          "208:     @track_slo_response(\"workflow\")",
          "209:     def get(self, request: Request, organization: Organization) -> Response:",
          "255:         stats_period = request.GET.get(\"groupStatsPeriod\")",
          "256:         try:",
          "257:             start, end = get_date_range_from_stats_period(request.GET)",
          "",
          "[Removed Lines]",
          "210:         \"\"\"",
          "211:         List an Organization's Issues",
          "212:         `````````````````````````````",
          "214:         Return a list of issues (groups) bound to an organization.  All parameters are",
          "215:         supplied as query string parameters.",
          "217:         A default query of ``is:unresolved issue.priority:[high,medium]`` is applied.",
          "218:         To return results with other statuses send a new query value",
          "219:         (i.e. ``?query=`` for all results).",
          "221:         The ``groupStatsPeriod`` parameter can be used to select the timeline",
          "222:         stats which should be present. Possible values are: '' (disable),",
          "223:         '24h', '14d'",
          "225:         The ``statsPeriod`` parameter can be used to select a date window starting",
          "226:         from now. Ex. ``14d``.",
          "228:         The ``start`` and ``end`` parameters can be used to select an absolute",
          "229:         date period to fetch issues from.",
          "231:         :qparam string statsPeriod: an optional stat period (can be one of",
          "232:                                     ``\"24h\"``, ``\"14d\"``, and ``\"\"``).",
          "233:         :qparam string groupStatsPeriod: an optional stat period (can be one of",
          "234:                                     ``\"24h\"``, ``\"14d\"``, and ``\"\"``).",
          "235:         :qparam string start:       Beginning date. You must also provide ``end``.",
          "236:         :qparam string end:         End date. You must also provide ``start``.",
          "237:         :qparam bool shortIdLookup: if this is set to true then short IDs are",
          "238:                                     looked up by this function as well.  This",
          "239:                                     can cause the return value of the function",
          "240:                                     to return an event issue of a different",
          "241:                                     project which is why this is an opt-in.",
          "242:                                     Set to `1` to enable.",
          "243:         :qparam querystring query: an optional Sentry structured search",
          "244:                                    query.  If not provided an implied",
          "245:                                    ``\"is:unresolved issue.priority:[high,medium]\"`` is assumed.)",
          "246:         :qparam bool savedSearch:  if this is set to False, then we are making the request without",
          "247:                                    a saved search and will look for the default search from this endpoint.",
          "248:         :qparam string searchId:   if passed in, this is the selected search",
          "249:         :pparam string organization_id_or_slug: the id or slug of the organization the",
          "250:                                           issues belong to.",
          "251:         :auth: required",
          "252:         :qparam list expand: an optional list of strings to opt in to additional data. Supports `inbox`",
          "253:         :qparam list collapse: an optional list of strings to opt out of certain pieces of data. Supports `stats`, `lifetime`, `base`, `unhandled`",
          "254:         \"\"\"",
          "",
          "[Added Lines]",
          "233:     @extend_schema(",
          "234:         operation_id=\"List an Organization's Issues\",",
          "235:         description=(",
          "236:             \"Return a list of issues for an organization. \"",
          "237:             \"All parameters are supplied as query string parameters. \"",
          "238:             \"A default query of `is:unresolved issue.priority:[high,medium]` is applied. \"",
          "239:             \"To return all results, use an empty query value (i.e. ``?query=`). \"",
          "240:         ),",
          "241:         parameters=[",
          "242:             GlobalParams.ORG_ID_OR_SLUG,",
          "243:             GlobalParams.ENVIRONMENT,",
          "244:             OrganizationParams.PROJECT,",
          "245:             GlobalParams.STATS_PERIOD,",
          "246:             GlobalParams.START,",
          "247:             GlobalParams.END,",
          "248:             IssueParams.GROUP_STATS_PERIOD,",
          "249:             IssueParams.SHORT_ID_LOOKUP,",
          "250:             IssueParams.DEFAULT_QUERY,",
          "251:             IssueParams.VIEW_ID,",
          "252:             IssueParams.VIEW_SORT,",
          "253:             IssueParams.LIMIT,",
          "254:             IssueParams.GROUP_INDEX_EXPAND,",
          "255:             IssueParams.GROUP_INDEX_COLLAPSE,",
          "256:             CursorQueryParam,",
          "257:         ],",
          "258:         responses={",
          "259:             200: inline_sentry_response_serializer(",
          "260:                 \"OrganizationGroupIndexGetResponse\", list[StreamGroupSerializerSnubaResponse]",
          "261:             ),",
          "262:             400: RESPONSE_BAD_REQUEST,",
          "263:             401: RESPONSE_UNAUTHORIZED,",
          "264:             403: RESPONSE_FORBIDDEN,",
          "265:             404: RESPONSE_NOT_FOUND,",
          "266:         },",
          "267:         examples=IssueExamples.ORGANIZATION_GROUP_INDEX_GET,",
          "268:     )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "411:         # TODO(jess): add metrics that are similar to project endpoint here",
          "412:         return response",
          "414:     @track_slo_response(\"workflow\")",
          "415:     def put(self, request: Request, organization: Organization) -> Response:",
          "478:         projects = self.get_projects(request, organization)",
          "479:         is_fetching_replay_data = request.headers.get(\"X-Sentry-Replay-Request\") == \"1\"",
          "",
          "[Removed Lines]",
          "416:         \"\"\"",
          "417:         Bulk Mutate a List of Issues",
          "418:         ````````````````````````````",
          "420:         Bulk mutate various attributes on issues.  The list of issues",
          "421:         to modify is given through the `id` query parameter.  It is repeated",
          "422:         for each issue that should be modified.",
          "424:         - For non-status updates, the `id` query parameter is required.",
          "425:         - For status updates, the `id` query parameter may be omitted",
          "426:           for a batch \"update all\" query.",
          "427:         - An optional `status` query parameter may be used to restrict",
          "428:           mutations to only events with the given status.",
          "430:         The following attributes can be modified and are supplied as",
          "431:         JSON object in the body:",
          "433:         If any ids are out of scope this operation will succeed without",
          "434:         any data mutation.",
          "436:         :qparam int id: a list of IDs of the issues to be mutated.  This",
          "437:                         parameter shall be repeated for each issue.  It",
          "438:                         is optional only if a status is mutated in which",
          "439:                         case an implicit `update all` is assumed.",
          "440:         :qparam string status: optionally limits the query to issues of the",
          "441:                                specified status.  Valid values are",
          "442:                                ``\"resolved\"``, ``\"unresolved\"`` and",
          "443:                                ``\"ignored\"``.",
          "444:         :pparam string organization_id_or_slug: the id or slug of the organization the",
          "445:                                           issues belong to.",
          "446:         :param string status: the new status for the issues.  Valid values",
          "447:                               are ``\"resolved\"``, ``\"resolvedInNextRelease\"``,",
          "448:                               ``\"unresolved\"``, and ``\"ignored\"``. Status",
          "449:                               updates that include release data are only allowed",
          "450:                               for groups within a single project.",
          "451:         :param map statusDetails: additional details about the resolution.",
          "452:                                   Valid values are ``\"inRelease\"``, ``\"inNextRelease\"``,",
          "453:                                   ``\"inCommit\"``,  ``\"ignoreDuration\"``, ``\"ignoreCount\"``,",
          "454:                                   ``\"ignoreWindow\"``, ``\"ignoreUserCount\"``, and",
          "455:                                   ``\"ignoreUserWindow\"``. Status detail",
          "456:                                   updates that include release data are only allowed",
          "457:                                   for groups within a single project.",
          "458:         :param int ignoreDuration: the number of minutes to ignore this issue.",
          "459:         :param boolean isPublic: sets the issue to public or private.",
          "460:         :param boolean merge: allows to merge or unmerge different issues.",
          "461:         :param string assignedTo: the user or team that should be assigned to",
          "462:                                   these issues. Can be of the form ``\"<user_id>\"``,",
          "463:                                   ``\"user:<user_id>\"``, ``\"<username>\"``,",
          "464:                                   ``\"<user_primary_email>\"``, or ``\"team:<team_id>\"``.",
          "465:                                   Bulk assigning issues is limited to groups",
          "466:                                   within a single project.",
          "467:         :param boolean hasSeen: in case this API call is invoked with a user",
          "468:                                 context this allows changing of the flag",
          "469:                                 that indicates if the user has seen the",
          "470:                                 event.",
          "471:         :param boolean isBookmarked: in case this API call is invoked with a",
          "472:                                      user context this allows changing of",
          "473:                                      the bookmark flag.",
          "474:         :param string substatus: the new substatus for the issues. Valid values",
          "475:                                  defined in GroupSubStatus.",
          "476:         :auth: required",
          "477:         \"\"\"",
          "",
          "[Added Lines]",
          "430:     @extend_schema(",
          "431:         operation_id=\"Bulk Mutate an Organization's Issues\",",
          "432:         description=(",
          "433:             \"Bulk mutate various attributes on a maxmimum of 1000 issues. \\n\"",
          "434:             \"- For non-status updates, the `id` query parameter is required. \\n\"",
          "435:             \"- For status updates, the `id` query parameter may be omitted to update issues that match the filtering. \\n\"",
          "436:             \"If any IDs are out of scope, the data won't be mutated but the endpoint will still produce a successful response. \"",
          "437:             \"For example, if no issues were found matching the criteria, a HTTP 204 is returned.\"",
          "438:         ),",
          "439:         parameters=[",
          "440:             GlobalParams.ORG_ID_OR_SLUG,",
          "441:             GlobalParams.ENVIRONMENT,",
          "442:             OrganizationParams.PROJECT,",
          "443:             IssueParams.MUTATE_ISSUE_ID_LIST,",
          "444:             IssueParams.DEFAULT_QUERY,",
          "445:             IssueParams.VIEW_ID,",
          "446:             IssueParams.VIEW_SORT,",
          "447:             IssueParams.LIMIT,",
          "448:         ],",
          "449:         request=GroupValidator,",
          "450:         responses={",
          "451:             200: inline_sentry_response_serializer(",
          "452:                 \"OrganizationGroupIndexPutResponse\", MutateIssueResponse",
          "453:             ),",
          "454:             204: RESPONSE_NO_CONTENT,",
          "455:             400: RESPONSE_BAD_REQUEST,",
          "456:             401: RESPONSE_UNAUTHORIZED,",
          "457:             403: RESPONSE_FORBIDDEN,",
          "458:             404: RESPONSE_NOT_FOUND,",
          "459:         },",
          "460:         examples=IssueExamples.ORGANIZATION_GROUP_INDEX_PUT,",
          "461:     )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "498:         ids = [int(id) for id in request.GET.getlist(\"id\")]",
          "499:         return update_groups_with_search_fn(request, ids, projects, organization.id, search_fn)",
          "501:     @track_slo_response(\"workflow\")",
          "502:     def delete(self, request: Request, organization: Organization) -> Response:",
          "524:         projects = self.get_projects(request, organization)",
          "526:         is_fetching_replay_data = request.headers.get(\"X-Sentry-Replay-Request\") == \"1\"",
          "",
          "[Removed Lines]",
          "503:         \"\"\"",
          "504:         Bulk Remove a List of Issues",
          "505:         ````````````````````````````",
          "507:         Permanently remove the given issues. The list of issues to",
          "508:         modify is given through the `id` query parameter.  It is repeated",
          "509:         for each issue that should be removed.",
          "511:         Only queries by 'id' are accepted.",
          "513:         If any IDs are out of scope this operation will succeed without",
          "514:         any data mutation.",
          "516:         :qparam int id: a list of IDs of the issues to be removed.  This",
          "517:                         parameter shall be repeated for each issue, e.g.",
          "518:                         `?id=1&id=2&id=3`. If this parameter is not provided,",
          "519:                         it will attempt to remove the first 1000 issues.",
          "520:         :pparam string organization_id_or_slug: the id or slug of the organization the",
          "521:                                           issues belong to.",
          "522:         :auth: required",
          "523:         \"\"\"",
          "",
          "[Added Lines]",
          "487:     @extend_schema(",
          "488:         operation_id=\"Bulk Remove an Organization's Issues\",",
          "489:         description=(",
          "490:             \"Permanently remove the given issues. \"",
          "491:             \"If IDs are provided, queries and filtering will be ignored. \"",
          "492:             \"If any IDs are out of scope, the data won't be mutated but the endpoint will still produce a successful response. \"",
          "493:             \"For example, if no issues were found matching the criteria, a HTTP 204 is returned.\"",
          "494:         ),",
          "495:         parameters=[",
          "496:             GlobalParams.ORG_ID_OR_SLUG,",
          "497:             GlobalParams.ENVIRONMENT,",
          "498:             OrganizationParams.PROJECT,",
          "499:             IssueParams.DELETE_ISSUE_ID_LIST,",
          "500:             IssueParams.DEFAULT_QUERY,",
          "501:             IssueParams.VIEW_ID,",
          "502:             IssueParams.VIEW_SORT,",
          "503:             IssueParams.LIMIT,",
          "504:         ],",
          "505:         responses={",
          "506:             204: RESPONSE_NO_CONTENT,",
          "507:             400: RESPONSE_BAD_REQUEST,",
          "508:             401: RESPONSE_UNAUTHORIZED,",
          "509:             403: RESPONSE_FORBIDDEN,",
          "510:             404: RESPONSE_NOT_FOUND,",
          "511:         },",
          "512:     )",
          "",
          "---------------"
        ],
        "src/sentry/models/group.py||src/sentry/models/group.py": [
          "File: src/sentry/models/group.py -> src/sentry/models/group.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "926:         \"\"\"",
          "927:         return self.data.get(\"type\", \"default\")",
          "930:         \"\"\"",
          "931:         Return the metadata of this issue.",
          "",
          "[Removed Lines]",
          "929:     def get_event_metadata(self) -> Mapping[str, Any]:",
          "",
          "[Added Lines]",
          "929:     def get_event_metadata(self) -> dict[str, Any]:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c9ea51a779c5fc73daa71537254451754600d07",
      "candidate_info": {
        "commit_hash": "0c9ea51a779c5fc73daa71537254451754600d07",
        "repo": "getsentry/sentry",
        "commit_url": "https://github.com/getsentry/sentry/commit/0c9ea51a779c5fc73daa71537254451754600d07",
        "files": [
          "src/sentry/api/helpers/group_index/types.py",
          "src/sentry/api/helpers/group_index/update.py",
          "src/sentry/api/helpers/group_index/validators/group.py",
          "src/sentry/api/helpers/group_index/validators/in_commit.py",
          "src/sentry/api/helpers/group_index/validators/status_details.py",
          "src/sentry/api/serializers/models/group.py",
          "src/sentry/api/serializers/models/group_stream.py",
          "src/sentry/apidocs/examples/issue_examples.py",
          "src/sentry/apidocs/parameters.py",
          "src/sentry/issues/endpoints/organization_group_index.py",
          "src/sentry/models/group.py"
        ],
        "message": "chore(issues): Publish `OrganizationGroupIndexEndpoint` (#88127)\n\nThis PR documents and publishes the `OrganizationGroupIndexEndpoint`\nendpoint which is used to serve the issue stream. The existing\ndocstrings were out of date so any mismatch is likely due to an update\nI've made to reflect reality.\n\nThe exceptions are as follows:\n\n- For all methods, the `savedSearch` and `searchId` qparams are being\nomitted since that system is deprecated.\n- For all methods, the `useGroupSnubaDataset` is an internal query\nparam, so we don't need to document it. Added a comment mentioning this\nas well\n- For `PUT`, `ignoreDuration`, `ignoreCount`, `ignoreWindow`\n`ignoreUserCount`, `ignoreUserWindow` are declared twice, so I'm\nfavouring the nested object.\n - For `PUT`, `inboxDetails` is an empty member of the serializer\n- For `PUT`, `snoozeDuration` had a comment referencing it should be\nremoved in 9.0. Since this is just documentation, not a functional\nchange, I just omit it from the API but we should clean that up at some\npoint.\n\n**Update**: With this PR, the `PUT` endpoint will stay private. I will\naddress this in a follow up because it requires a functional change to\nthe serializer.",
        "before_after_code_files": [
          "src/sentry/api/helpers/group_index/types.py||src/sentry/api/helpers/group_index/types.py",
          "src/sentry/api/helpers/group_index/update.py||src/sentry/api/helpers/group_index/update.py",
          "src/sentry/api/helpers/group_index/validators/group.py||src/sentry/api/helpers/group_index/validators/group.py",
          "src/sentry/api/helpers/group_index/validators/in_commit.py||src/sentry/api/helpers/group_index/validators/in_commit.py",
          "src/sentry/api/helpers/group_index/validators/status_details.py||src/sentry/api/helpers/group_index/validators/status_details.py",
          "src/sentry/api/serializers/models/group.py||src/sentry/api/serializers/models/group.py",
          "src/sentry/api/serializers/models/group_stream.py||src/sentry/api/serializers/models/group_stream.py",
          "src/sentry/apidocs/examples/issue_examples.py||src/sentry/apidocs/examples/issue_examples.py",
          "src/sentry/apidocs/parameters.py||src/sentry/apidocs/parameters.py",
          "src/sentry/issues/endpoints/organization_group_index.py||src/sentry/issues/endpoints/organization_group_index.py",
          "src/sentry/models/group.py||src/sentry/models/group.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/sentry/api/serializers/models/group.py||src/sentry/api/serializers/models/group.py"
          ],
          "candidate": [
            "src/sentry/api/serializers/models/group.py||src/sentry/api/serializers/models/group.py"
          ]
        }
      },
      "candidate_diff": {
        "src/sentry/api/helpers/group_index/types.py||src/sentry/api/helpers/group_index/types.py": [
          "File: src/sentry/api/helpers/group_index/types.py -> src/sentry/api/helpers/group_index/types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from typing import NotRequired, TypedDict",
          "3: from sentry.api.helpers.group_index.validators.status_details import StatusDetailsResult",
          "4: from sentry.api.serializers.models.actor import ActorSerializerResponse",
          "5: from sentry.issues.merge import MergedGroup",
          "6: from sentry.notifications.helpers import SubscriptionDetails",
          "9: # This type isn't being enforced, but is necessary to publish the API.",
          "10: # This shape is currently assembled by the `update_groups` function.",
          "11: class MutateIssueResponse(TypedDict):",
          "12:     assignedTo: NotRequired[ActorSerializerResponse]",
          "13:     discard: NotRequired[bool]",
          "14:     hasSeen: NotRequired[bool]",
          "15:     inbox: NotRequired[bool]",
          "16:     isBookmarked: NotRequired[bool]",
          "17:     isPublic: NotRequired[bool]",
          "18:     isSubscribed: NotRequired[bool]",
          "19:     merge: NotRequired[MergedGroup]",
          "20:     priority: NotRequired[str]",
          "21:     shareId: NotRequired[str]",
          "22:     status: NotRequired[str]",
          "23:     statusDetails: NotRequired[StatusDetailsResult]",
          "24:     subscriptionDetails: NotRequired[SubscriptionDetails]",
          "25:     substatus: NotRequired[str]",
          "",
          "---------------"
        ],
        "src/sentry/api/helpers/group_index/update.py||src/sentry/api/helpers/group_index/update.py": [
          "File: src/sentry/api/helpers/group_index/update.py -> src/sentry/api/helpers/group_index/update.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "797:             sender=update_groups,",
          "798:         )",
          "800:     return Response(result)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800:     # TODO(issues): This type is very fragile since it's fields are updated in quite a few places.",
          "801:     # Since this is a public API, we are using assuming a shape of MutateIssueResponse, but this",
          "802:     # cannot be enforced currently. If changing fields, please update that type.",
          "",
          "---------------"
        ],
        "src/sentry/api/helpers/group_index/validators/group.py||src/sentry/api/helpers/group_index/validators/group.py": [
          "File: src/sentry/api/helpers/group_index/validators/group.py -> src/sentry/api/helpers/group_index/validators/group.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from collections.abc import Mapping",
          "2: from typing import Any",
          "4: from rest_framework import serializers",
          "6: from sentry.api.fields import ActorField",
          "7: from sentry.models.group import STATUS_UPDATE_CHOICES",
          "8: from sentry.types.actor import Actor",
          "9: from sentry.types.group import SUBSTATUS_UPDATE_CHOICES, PriorityLevel",
          "14: class GroupValidator(serializers.Serializer):",
          "17:     status = serializers.ChoiceField(",
          "19:     )",
          "21:     substatus = serializers.ChoiceField(",
          "22:         choices=list(zip(SUBSTATUS_UPDATE_CHOICES.keys(), SUBSTATUS_UPDATE_CHOICES.keys())),",
          "23:         allow_null=True,",
          "24:     )",
          "39:     priority = serializers.ChoiceField(",
          "40:         choices=list(",
          "41:             zip(",
          "42:                 [p.to_str() for p in PriorityLevel],",
          "43:                 [p.to_str() for p in PriorityLevel],",
          "44:             )",
          "46:     )",
          "48:     # TODO(dcramer): remove in 9.0",
          "49:     # for the moment, the CLI sends this for any issue update, so allow nulls",
          "50:     snoozeDuration = serializers.IntegerField(allow_null=True)",
          "",
          "[Removed Lines]",
          "11: from . import InboxDetailsValidator, StatusDetailsValidator",
          "15:     inbox = serializers.BooleanField()",
          "16:     inboxDetails = InboxDetailsValidator()",
          "18:         choices=list(zip(STATUS_UPDATE_CHOICES.keys(), STATUS_UPDATE_CHOICES.keys()))",
          "20:     statusDetails = StatusDetailsValidator()",
          "25:     hasSeen = serializers.BooleanField()",
          "26:     isBookmarked = serializers.BooleanField()",
          "27:     isPublic = serializers.BooleanField()",
          "28:     isSubscribed = serializers.BooleanField()",
          "29:     merge = serializers.BooleanField()",
          "30:     discard = serializers.BooleanField()",
          "31:     ignoreDuration = serializers.IntegerField()",
          "32:     ignoreCount = serializers.IntegerField()",
          "33:     # in minutes, max of one week",
          "34:     ignoreWindow = serializers.IntegerField(max_value=7 * 24 * 60)",
          "35:     ignoreUserCount = serializers.IntegerField()",
          "36:     # in minutes, max of one week",
          "37:     ignoreUserWindow = serializers.IntegerField(max_value=7 * 24 * 60)",
          "38:     assignedTo = ActorField()",
          "45:         )",
          "",
          "[Added Lines]",
          "4: from drf_spectacular.utils import extend_schema_serializer",
          "8: from sentry.api.helpers.group_index.validators.inbox_details import InboxDetailsValidator",
          "9: from sentry.api.helpers.group_index.validators.status_details import StatusDetailsValidator",
          "15: @extend_schema_serializer(",
          "16:     exclude_fields=[",
          "17:         \"ignoreDuration\",",
          "18:         \"ignoreCount\",",
          "19:         \"ignoreWindow\",",
          "20:         \"ignoreUserCount\",",
          "21:         \"ignoreUserWindow\",",
          "22:         \"inboxDetails\",",
          "23:         \"snoozeDuration\",",
          "24:     ]",
          "25: )",
          "27:     inbox = serializers.BooleanField(",
          "28:         help_text=\"If true, marks the issue as reviewed by the requestor.\"",
          "29:     )",
          "31:         help_text=\"Limit mutations to only issues with the given status.\",",
          "32:         choices=list(zip(STATUS_UPDATE_CHOICES.keys(), STATUS_UPDATE_CHOICES.keys())),",
          "33:     )",
          "34:     statusDetails = StatusDetailsValidator(",
          "35:         help_text=\"Additional details about the resolution. Status detail updates that include release data are only allowed for issues within a single project.\"",
          "40:         help_text=\"The new substatus of the issue.\",",
          "41:     )",
          "42:     hasSeen = serializers.BooleanField(",
          "43:         help_text=\"If true, marks the issue as seen by the requestor.\"",
          "44:     )",
          "45:     isBookmarked = serializers.BooleanField(",
          "46:         help_text=\"If true, bookmarks the issue for the requestor.\"",
          "47:     )",
          "48:     isPublic = serializers.BooleanField(help_text=\"If true, publishes the issue.\")",
          "49:     isSubscribed = serializers.BooleanField(",
          "50:         help_text=\"If true, subscribes the requestor to the issue.\"",
          "51:     )",
          "52:     merge = serializers.BooleanField(help_text=\"If true, merges the issues together.\")",
          "53:     discard = serializers.BooleanField(",
          "54:         help_text=\"If true, discards the issues instead of updating them.\"",
          "55:     )",
          "56:     assignedTo = ActorField(",
          "57:         help_text=\"The user or team that should be assigned to the issues. Values take the form of `<user_id>`, `user:<user_id>`, `<username>`, `<user_primary_email>`, or `team:<team_id>`.\"",
          "60:         help_text=\"The priority that should be set for the issues\",",
          "66:         ),",
          "69:     ####################################################",
          "70:     # These fields are not documented in the API docs. #",
          "71:     ####################################################",
          "72:     # These are already covered by the `statusDetails` serializer field.",
          "73:     ignoreDuration = serializers.IntegerField()",
          "74:     ignoreCount = serializers.IntegerField()",
          "75:     ignoreWindow = serializers.IntegerField(max_value=7 * 24 * 60)",
          "76:     ignoreUserCount = serializers.IntegerField()",
          "77:     ignoreUserWindow = serializers.IntegerField(max_value=7 * 24 * 60)",
          "78:     # The `inboxDetails`` field is empty.",
          "79:     inboxDetails = InboxDetailsValidator()",
          "80:     # The `snooze` field is deprecated.",
          "",
          "---------------"
        ],
        "src/sentry/api/helpers/group_index/validators/in_commit.py||src/sentry/api/helpers/group_index/validators/in_commit.py": [
          "File: src/sentry/api/helpers/group_index/validators/in_commit.py -> src/sentry/api/helpers/group_index/validators/in_commit.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from rest_framework import serializers",
          "6: from sentry.models.commit import Commit",
          "7: from sentry.models.repository import Repository",
          "10: class InCommitValidator(serializers.Serializer):",
          "14:     def validate_repository(self, value: str) -> Repository:",
          "15:         project = self.context[\"project\"]",
          "",
          "[Removed Lines]",
          "1: from collections.abc import Mapping",
          "2: from typing import Any",
          "11:     commit = serializers.CharField(required=True)",
          "12:     repository = serializers.CharField(required=True)",
          "",
          "[Added Lines]",
          "1: from typing import Any, TypedDict",
          "3: from drf_spectacular.utils import extend_schema_serializer",
          "10: class InCommitResult(TypedDict):",
          "11:     commit: str",
          "12:     repository: str",
          "15: @extend_schema_serializer()",
          "17:     commit = serializers.CharField(required=True, help_text=\"The SHA of the resolving commit.\")",
          "18:     repository = serializers.CharField(",
          "19:         required=True, help_text=\"The name of the repository (as it appears in Sentry).\"",
          "20:     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:         except Repository.DoesNotExist:",
          "19:             raise serializers.ValidationError(\"Unable to find the given repository.\")",
          "22:         attrs = super().validate(attrs)",
          "23:         repository = attrs.get(\"repository\")",
          "24:         commit = attrs.get(\"commit\")",
          "",
          "[Removed Lines]",
          "21:     def validate(self, attrs: Mapping[str, Any]) -> Commit:",
          "",
          "[Added Lines]",
          "29:     def validate(self, attrs: dict[str, Any]) -> Commit:",
          "",
          "---------------"
        ],
        "src/sentry/api/helpers/group_index/validators/status_details.py||src/sentry/api/helpers/group_index/validators/status_details.py": [
          "File: src/sentry/api/helpers/group_index/validators/status_details.py -> src/sentry/api/helpers/group_index/validators/status_details.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from rest_framework import serializers",
          "3: from sentry import features",
          "4: from sentry.models.release import Release",
          "9: class StatusDetailsValidator(serializers.Serializer):",
          "22:     def validate_inRelease(self, value: str) -> Release:",
          "23:         project = self.context[\"project\"]",
          "",
          "[Removed Lines]",
          "6: from . import InCommitValidator",
          "10:     inNextRelease = serializers.BooleanField()",
          "11:     inUpcomingRelease = serializers.BooleanField()",
          "12:     inRelease = serializers.CharField()",
          "13:     inCommit = InCommitValidator(required=False)",
          "14:     ignoreDuration = serializers.IntegerField()",
          "15:     ignoreCount = serializers.IntegerField()",
          "16:     # in minutes, max of one week",
          "17:     ignoreWindow = serializers.IntegerField(max_value=7 * 24 * 60)",
          "18:     ignoreUserCount = serializers.IntegerField()",
          "19:     # in minutes, max of one week",
          "20:     ignoreUserWindow = serializers.IntegerField(max_value=7 * 24 * 60)",
          "",
          "[Added Lines]",
          "1: from typing import NotRequired, TypedDict",
          "3: from drf_spectacular.utils import extend_schema_serializer",
          "7: from sentry.api.helpers.group_index.validators.in_commit import InCommitResult, InCommitValidator",
          "11: class StatusDetailsResult(TypedDict):",
          "12:     inNextRelease: NotRequired[bool]",
          "13:     inUpcomingRelease: NotRequired[bool]",
          "14:     inRelease: NotRequired[str]",
          "15:     inCommit: NotRequired[InCommitResult]",
          "16:     ignoreDuration: NotRequired[int]",
          "17:     ignoreCount: NotRequired[int]",
          "18:     ignoreWindow: NotRequired[int]",
          "19:     ignoreUserCount: NotRequired[int]",
          "20:     ignoreUserWindow: NotRequired[int]",
          "23: @extend_schema_serializer()",
          "25:     inNextRelease = serializers.BooleanField(",
          "26:         help_text=\"If true, marks the issue as resolved in the next release.\"",
          "27:     )",
          "28:     inUpcomingRelease = serializers.BooleanField(",
          "29:         help_text=\"If true, marks the issue as resolved in the upcoming release.\"",
          "30:     )",
          "31:     inRelease = serializers.CharField(",
          "32:         help_text=(",
          "33:             \"The version of the release that the issue should be resolved in.\"",
          "34:             \"If set to `latest`, the latest release will be used.\"",
          "35:         )",
          "36:     )",
          "37:     inCommit = InCommitValidator(",
          "38:         help_text=\"The commit data that the issue should use for resolution.\", required=False",
          "39:     )",
          "40:     ignoreDuration = serializers.IntegerField(",
          "41:         help_text=\"Ignore the issue until for this many minutes.\"",
          "42:     )",
          "43:     ignoreCount = serializers.IntegerField(",
          "44:         help_text=\"Ignore the issue until it has occurred this many times in `ignoreWindow` minutes.\"",
          "45:     )",
          "46:     ignoreWindow = serializers.IntegerField(",
          "47:         help_text=\"Ignore the issue until it has occurred `ignoreCount` times in this many minutes. (Max: 1 week)\",",
          "48:         max_value=7 * 24 * 60,",
          "49:     )",
          "50:     ignoreUserCount = serializers.IntegerField(",
          "51:         help_text=\"Ignore the issue until it has affected this many users in `ignoreUserWindow` minutes.\"",
          "52:     )",
          "53:     ignoreUserWindow = serializers.IntegerField(",
          "54:         help_text=\"Ignore the issue until it has affected `ignoreUserCount` users in this many minutes. (Max: 1 week)\",",
          "55:         max_value=7 * 24 * 60,",
          "56:     )",
          "",
          "---------------"
        ],
        "src/sentry/api/serializers/models/group.py||src/sentry/api/serializers/models/group.py": [
          "File: src/sentry/api/serializers/models/group.py -> src/sentry/api/serializers/models/group.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:     type: str",
          "133:     issueType: str",
          "134:     issueCategory: str",
          "136:     numComments: int",
          "137:     assignedTo: UserSerializerResponse",
          "138:     isBookmarked: bool",
          "139:     isSubscribed: bool",
          "140:     subscriptionDetails: SubscriptionDetails | None",
          "141:     hasSeen: bool",
          "145: class SeenStats(TypedDict):",
          "",
          "[Removed Lines]",
          "135:     metadata: Mapping[str, Any]",
          "142:     annotations: Sequence[GroupAnnotation]",
          "",
          "[Added Lines]",
          "135:     metadata: dict[str, Any]",
          "142:     annotations: list[GroupAnnotation]",
          "",
          "---------------"
        ],
        "src/sentry/api/serializers/models/group_stream.py||src/sentry/api/serializers/models/group_stream.py": [
          "File: src/sentry/api/serializers/models/group_stream.py -> src/sentry/api/serializers/models/group_stream.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:     type: NotRequired[str]",
          "283:     issueType: NotRequired[str]",
          "284:     issueCategory: NotRequired[str]",
          "286:     numComments: NotRequired[int]",
          "287:     assignedTo: NotRequired[UserSerializerResponse]",
          "288:     isBookmarked: NotRequired[bool]",
          "289:     isSubscribed: NotRequired[bool]",
          "290:     subscriptionDetails: NotRequired[SubscriptionDetails | None]",
          "291:     hasSeen: NotRequired[bool]",
          "293:     # from base response optional",
          "294:     isUnhandled: NotRequired[bool]",
          "295:     count: NotRequired[int]",
          "",
          "[Removed Lines]",
          "285:     metadata: NotRequired[Mapping[str, Any]]",
          "292:     annotations: NotRequired[Sequence[GroupAnnotation]]",
          "",
          "[Added Lines]",
          "285:     metadata: NotRequired[dict[str, Any]]",
          "292:     annotations: NotRequired[list[GroupAnnotation]]",
          "",
          "---------------"
        ],
        "src/sentry/apidocs/examples/issue_examples.py||src/sentry/apidocs/examples/issue_examples.py": [
          "File: src/sentry/apidocs/examples/issue_examples.py -> src/sentry/apidocs/examples/issue_examples.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from datetime import datetime",
          "3: from drf_spectacular.utils import OpenApiExample",
          "5: from sentry.api.helpers.group_index.types import MutateIssueResponse",
          "6: from sentry.api.serializers.models.group_stream import StreamGroupSerializerSnubaResponse",
          "8: SIMPLE_ISSUE: StreamGroupSerializerSnubaResponse = {",
          "9:     \"annotations\": [],",
          "10:     \"assignedTo\": {",
          "11:         \"id\": \"1\",",
          "12:         \"name\": \"John Doe\",",
          "13:         \"email\": \"john.doe@example.com\",",
          "14:         \"username\": \"john.doe\",",
          "15:         \"avatarUrl\": \"https://example.com/avatar.png\",",
          "16:         \"isActive\": True,",
          "17:         \"hasPasswordAuth\": True,",
          "18:         \"isManaged\": False,",
          "19:         \"dateJoined\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "20:         \"lastLogin\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "21:         \"has2fa\": False,",
          "22:         \"lastActive\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "23:         \"isSuperuser\": False,",
          "24:         \"isStaff\": False,",
          "25:         \"experiments\": {},",
          "26:         \"emails\": [],",
          "27:     },",
          "28:     \"count\": 150,",
          "29:     \"culprit\": \"raven.scripts.runner in main\",",
          "30:     \"firstSeen\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "31:     \"filtered\": None,",
          "32:     \"inbox\": {",
          "33:         \"reason\": 0,",
          "34:         \"reason_details\": None,",
          "35:         \"date_added\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "36:     },",
          "37:     \"hasSeen\": False,",
          "38:     \"id\": \"1\",",
          "39:     \"isBookmarked\": False,",
          "40:     \"isPublic\": False,",
          "41:     \"isSubscribed\": True,",
          "42:     \"lastSeen\": datetime.fromisoformat(\"2018-12-06T21:19:55Z\"),",
          "43:     \"level\": \"error\",",
          "44:     \"logger\": None,",
          "45:     \"metadata\": {\"title\": \"This is an example Python exception\"},",
          "46:     \"numComments\": 0,",
          "47:     \"permalink\": \"https://sentry.io/the-interstellar-jurisdiction/pump-station/issues/1/\",",
          "48:     \"project\": {\"id\": \"2\", \"name\": \"Pump Station\", \"slug\": \"pump-station\", \"platform\": \"python\"},",
          "49:     \"shareId\": \"123def456abc\",",
          "50:     \"shortId\": \"PUMP-STATION-1\",",
          "51:     \"stats\": {",
          "52:         \"24h\": [",
          "53:             [1541455200.0, 473],",
          "54:             [1541458800.0, 914],",
          "55:             [1541462400.0, 991],",
          "56:             [1541466000.0, 925],",
          "57:             [1541469600.0, 881],",
          "58:             [1541473200.0, 182],",
          "59:             [1541476800.0, 490],",
          "60:             [1541480400.0, 820],",
          "61:             [1541484000.0, 322],",
          "62:             [1541487600.0, 836],",
          "63:             [1541491200.0, 565],",
          "64:             [1541494800.0, 758],",
          "65:             [1541498400.0, 880],",
          "66:             [1541502000.0, 677],",
          "67:             [1541505600.0, 381],",
          "68:             [1541509200.0, 814],",
          "69:             [1541512800.0, 329],",
          "70:             [1541516400.0, 446],",
          "71:             [1541520000.0, 731],",
          "72:             [1541523600.0, 111],",
          "73:             [1541527200.0, 926],",
          "74:             [1541530800.0, 772],",
          "75:             [1541534400.0, 400],",
          "76:             [1541538000.0, 943],",
          "77:         ]",
          "78:     },",
          "79:     \"priority\": \"medium\",",
          "80:     \"priorityLockedAt\": None,",
          "81:     \"owners\": {",
          "82:         \"type\": \"user\",",
          "83:         \"owner\": \"1\",",
          "84:         \"date_added\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "85:     },",
          "86:     \"platform\": \"python\",",
          "87:     \"lifetime\": {",
          "88:         \"count\": 150,",
          "89:         \"userCount\": 0,",
          "90:         \"firstSeen\": datetime.fromisoformat(\"2018-11-06T21:19:55Z\"),",
          "91:         \"lastSeen\": datetime.fromisoformat(\"2018-12-06T21:19:55Z\"),",
          "92:     },",
          "93:     \"status\": \"ignored\",",
          "94:     \"substatus\": \"archived_until_condition_met\",",
          "95:     \"statusDetails\": {},",
          "96:     \"subscriptionDetails\": None,",
          "97:     \"title\": \"This is an example Python exception\",",
          "98:     \"type\": \"default\",",
          "99:     \"userCount\": 0,",
          "100:     \"integrationIssues\": [],",
          "101:     \"pluginIssues\": [],",
          "102:     \"pluginActions\": [],",
          "103:     \"sentryAppIssues\": [],",
          "104:     \"isUnhandled\": False,",
          "105:     \"issueCategory\": \"performance\",",
          "106:     \"issueType\": \"performance_n_plus_one_db_queries\",",
          "107:     \"sessionCount\": 0,",
          "108:     \"latestEventHasAttachments\": False,",
          "109: }",
          "111: MUTATE_ISSUE_RESULT: MutateIssueResponse = {",
          "112:     \"assignedTo\": {\"type\": \"user\", \"id\": \"1\", \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"},",
          "113:     \"discard\": False,",
          "114:     \"hasSeen\": True,",
          "115:     \"inbox\": True,",
          "116:     \"isBookmarked\": False,",
          "117:     \"isPublic\": True,",
          "118:     \"isSubscribed\": True,",
          "119:     \"merge\": {",
          "120:         \"children\": [\"11\", \"12\", \"13\"],",
          "121:         \"parent\": \"10\",",
          "122:     },",
          "123:     \"priority\": \"medium\",",
          "124:     \"shareId\": \"123def456abc\",",
          "125:     \"status\": \"ignored\",",
          "126:     \"statusDetails\": {",
          "127:         \"ignoreDuration\": 100,",
          "128:         \"ignoreCount\": 10,",
          "129:         \"ignoreWindow\": 60,",
          "130:         \"ignoreUserCount\": 10,",
          "131:         \"ignoreUserWindow\": 60,",
          "132:         \"inNextRelease\": False,",
          "133:         \"inUpcomingRelease\": False,",
          "134:         \"inRelease\": \"1.0.0\",",
          "135:         \"inCommit\": {",
          "136:             \"commit\": \"123def456abc\",",
          "137:             \"repository\": \"getsentry/sentry\",",
          "138:         },",
          "139:     },",
          "140:     \"subscriptionDetails\": {",
          "141:         \"disabled\": False,",
          "142:         \"reason\": \"mentioned\",",
          "143:     },",
          "144:     \"substatus\": \"archived_until_condition_met\",",
          "145: }",
          "148: class IssueExamples:",
          "149:     ORGANIZATION_GROUP_INDEX_GET = [",
          "150:         OpenApiExample(",
          "151:             \"Return a list of issues for an organization\",",
          "152:             value=[SIMPLE_ISSUE],",
          "153:             response_only=True,",
          "154:             status_codes=[\"200\"],",
          "155:         )",
          "156:     ]",
          "157:     ORGANIZATION_GROUP_INDEX_PUT = [",
          "158:         OpenApiExample(",
          "159:             \"Return the update results for issues in an organization\",",
          "160:             value=MUTATE_ISSUE_RESULT,",
          "161:             response_only=True,",
          "162:             status_codes=[\"200\"],",
          "163:         )",
          "164:     ]",
          "",
          "---------------"
        ],
        "src/sentry/apidocs/parameters.py||src/sentry/apidocs/parameters.py": [
          "File: src/sentry/apidocs/parameters.py -> src/sentry/apidocs/parameters.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:         enum=[\"id\", \"date\", \"age\", \"count\"],",
          "308:     )",
          "311: class DetectorParams:",
          "312:     DETECTOR_ID = OpenApiParameter(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:     GROUP_STATS_PERIOD = OpenApiParameter(",
          "311:         name=\"groupStatsPeriod\",",
          "312:         description=\"The timeline on which stats for the groups should be presented.\",",
          "313:         enum=[\"\", \"24h\", \"14d\", \"auto\"],",
          "314:         location=OpenApiParameter.QUERY,",
          "315:         type=OpenApiTypes.STR,",
          "316:         required=False,",
          "317:     )",
          "319:     SHORT_ID_LOOKUP = OpenApiParameter(",
          "320:         name=\"shortIdLookup\",",
          "321:         description=\"If this is set to `1` then the query will be parsed for issue short IDs. These may ignore other filters (e.g. projects), which is why it is an opt-in.\",",
          "322:         enum=[\"1\", \"0\"],",
          "323:         location=OpenApiParameter.QUERY,",
          "324:         type=OpenApiTypes.STR,",
          "325:         required=False,",
          "326:     )",
          "328:     DEFAULT_QUERY = OpenApiParameter(",
          "329:         name=\"query\",",
          "330:         description=\"An optional search query for filtering issues. A default query will apply if no view/query is set. For all results use this parameter with an empty string.\",",
          "331:         default=\"is:unresolved issue.priority:[high,medium]\",",
          "332:         location=OpenApiParameter.QUERY,",
          "333:         type=OpenApiTypes.STR,",
          "334:         required=False,",
          "335:     )",
          "337:     VIEW_ID = OpenApiParameter(",
          "338:         name=\"viewId\",",
          "339:         description=\"The ID of the view to use. If no query is present, the view's query and filters will be applied.\",",
          "340:         location=OpenApiParameter.QUERY,",
          "341:         type=OpenApiTypes.STR,",
          "342:         required=False,",
          "343:     )",
          "345:     VIEW_SORT = OpenApiParameter(",
          "346:         name=\"sort\",",
          "347:         description=\"The sort order of the view. Options include 'Last Seen' (`date`), 'First Seen' (`new`), 'Trends' (`trends`), 'Events' (`freq`), 'Users' (`user`), and 'Date Added' (`inbox`).\",",
          "348:         default=\"date\",",
          "349:         enum=[\"date\", \"new\", \"trends\", \"freq\", \"user\", \"inbox\"],",
          "350:         location=OpenApiParameter.QUERY,",
          "351:         type=OpenApiTypes.STR,",
          "352:         required=False,",
          "353:     )",
          "355:     LIMIT = OpenApiParameter(",
          "356:         name=\"limit\",",
          "357:         description=\"The maximum number of issues to affect. The maximum is 100.\",",
          "358:         default=100,",
          "359:         location=OpenApiParameter.QUERY,",
          "360:         type=OpenApiTypes.INT,",
          "361:         required=False,",
          "362:     )",
          "364:     GROUP_INDEX_EXPAND = OpenApiParameter(",
          "365:         name=\"expand\",",
          "366:         description=\"Additional data to include in the response.\",",
          "367:         enum=[",
          "368:             \"inbox\",",
          "369:             \"owners\",",
          "370:             \"sessions\",",
          "371:             \"pluginActions\",",
          "372:             \"pluginIssues\",",
          "373:             \"integrationIssues\",",
          "374:             \"sentryAppIssues\",",
          "375:             \"latestEventHasAttachments\",",
          "376:         ],",
          "377:         location=OpenApiParameter.QUERY,",
          "378:         type=OpenApiTypes.STR,",
          "379:         required=False,",
          "380:         many=True,",
          "381:     )",
          "383:     GROUP_INDEX_COLLAPSE = OpenApiParameter(",
          "384:         name=\"collapse\",",
          "385:         description=\"Fields to remove from the response to improve query performance.\",",
          "386:         enum=[\"stats\", \"lifetime\", \"base\", \"unhandled\", \"filtered\"],",
          "387:         location=OpenApiParameter.QUERY,",
          "388:         type=OpenApiTypes.STR,",
          "389:         required=False,",
          "390:         many=True,",
          "391:     )",
          "392:     MUTATE_ISSUE_ID_LIST = OpenApiParameter(",
          "393:         name=\"id\",",
          "394:         description=\"The list of issue IDs to mutate. It is optional for status updates, in which an implicit `update all` is assumed.\",",
          "395:         location=OpenApiParameter.QUERY,",
          "396:         type=OpenApiTypes.INT,",
          "397:         required=False,",
          "398:         many=True,",
          "399:     )",
          "400:     DELETE_ISSUE_ID_LIST = OpenApiParameter(",
          "401:         name=\"id\",",
          "402:         description=\"The list of issue IDs to be removed. If not provided, it will attempt to remove the first 1000 issues.\",",
          "403:         location=OpenApiParameter.QUERY,",
          "404:         type=OpenApiTypes.INT,",
          "405:         required=False,",
          "406:         many=True,",
          "407:     )",
          "",
          "---------------"
        ],
        "src/sentry/issues/endpoints/organization_group_index.py||src/sentry/issues/endpoints/organization_group_index.py": [
          "File: src/sentry/issues/endpoints/organization_group_index.py -> src/sentry/issues/endpoints/organization_group_index.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import sentry_sdk",
          "7: from django.utils import timezone",
          "8: from rest_framework.exceptions import ParseError, PermissionDenied",
          "9: from rest_framework.request import Request",
          "10: from rest_framework.response import Response",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: from drf_spectacular.utils import extend_schema",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     track_slo_response,",
          "26:     update_groups_with_search_fn,",
          "27: )",
          "28: from sentry.api.helpers.group_index.validators import ValidationError",
          "29: from sentry.api.paginator import DateTimePaginator, Paginator",
          "30: from sentry.api.serializers import serialize",
          "32: from sentry.api.utils import get_date_range_from_stats_period, handle_query_errors",
          "33: from sentry.constants import ALLOWED_FUTURE_DELTA",
          "34: from sentry.exceptions import InvalidParams, InvalidSearchQuery",
          "35: from sentry.models.environment import Environment",
          "",
          "[Removed Lines]",
          "31: from sentry.api.serializers.models.group_stream import StreamGroupSerializerSnuba",
          "",
          "[Added Lines]",
          "29: from sentry.api.helpers.group_index.types import MutateIssueResponse",
          "31: from sentry.api.helpers.group_index.validators.group import GroupValidator",
          "34: from sentry.api.serializers.models.group_stream import (",
          "35:     StreamGroupSerializerSnuba,",
          "36:     StreamGroupSerializerSnubaResponse,",
          "37: )",
          "39: from sentry.apidocs.constants import (",
          "40:     RESPONSE_BAD_REQUEST,",
          "41:     RESPONSE_FORBIDDEN,",
          "42:     RESPONSE_NO_CONTENT,",
          "43:     RESPONSE_NOT_FOUND,",
          "44:     RESPONSE_UNAUTHORIZED,",
          "45: )",
          "46: from sentry.apidocs.examples.issue_examples import IssueExamples",
          "47: from sentry.apidocs.parameters import (",
          "48:     CursorQueryParam,",
          "49:     GlobalParams,",
          "50:     IssueParams,",
          "51:     OrganizationParams,",
          "52: )",
          "53: from sentry.apidocs.utils import inline_sentry_response_serializer",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44: from sentry.utils.cursors import Cursor, CursorResult",
          "45: from sentry.utils.validators import normalize_event_id",
          "48: allowed_inbox_search_terms = frozenset([\"date\", \"status\", \"for_review\", \"assigned_or_suggested\"])",
          "",
          "[Removed Lines]",
          "47: ERR_INVALID_STATS_PERIOD = \"Invalid stats_period. Valid choices are '', '24h', and '14d'\"",
          "",
          "[Added Lines]",
          "68: ERR_INVALID_STATS_PERIOD = \"Invalid stats_period. Valid choices are '', '24h', '14d' and 'auto'\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:     return results",
          "142: @region_silo_endpoint",
          "143: class OrganizationGroupIndexEndpoint(OrganizationEndpoint):",
          "144:     publish_status = {",
          "147:         \"PUT\": ApiPublishStatus.UNKNOWN,",
          "148:     }",
          "149:     owner = ApiOwner.ISSUES",
          "",
          "[Removed Lines]",
          "145:         \"DELETE\": ApiPublishStatus.UNKNOWN,",
          "146:         \"GET\": ApiPublishStatus.UNKNOWN,",
          "",
          "[Added Lines]",
          "163: @extend_schema(tags=[\"Events\"])",
          "167:         \"DELETE\": ApiPublishStatus.PUBLIC,",
          "168:         \"GET\": ApiPublishStatus.PUBLIC,",
          "169:         # TODO(Leander): I cannot for the life of me figure out why this method can't be published.",
          "170:         # Punting to a later PR.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:                 def use_group_snuba_dataset() -> bool:",
          "178:                     # if useGroupSnubaDataset is present, override the flag so we can test the new dataset",
          "179:                     req_param_value: str | None = request.GET.get(\"useGroupSnubaDataset\")",
          "180:                     if req_param_value and req_param_value.lower() == \"true\":",
          "181:                         return True",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:                     # XXX: This query param is omitted from the API docs as it is currently internal.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "205:                 result = search.backend.query(**query_kwargs)",
          "206:             return result, query_kwargs",
          "208:     @track_slo_response(\"workflow\")",
          "209:     def get(self, request: Request, organization: Organization) -> Response:",
          "255:         stats_period = request.GET.get(\"groupStatsPeriod\")",
          "256:         try:",
          "257:             start, end = get_date_range_from_stats_period(request.GET)",
          "",
          "[Removed Lines]",
          "210:         \"\"\"",
          "211:         List an Organization's Issues",
          "212:         `````````````````````````````",
          "214:         Return a list of issues (groups) bound to an organization.  All parameters are",
          "215:         supplied as query string parameters.",
          "217:         A default query of ``is:unresolved issue.priority:[high,medium]`` is applied.",
          "218:         To return results with other statuses send a new query value",
          "219:         (i.e. ``?query=`` for all results).",
          "221:         The ``groupStatsPeriod`` parameter can be used to select the timeline",
          "222:         stats which should be present. Possible values are: '' (disable),",
          "223:         '24h', '14d'",
          "225:         The ``statsPeriod`` parameter can be used to select a date window starting",
          "226:         from now. Ex. ``14d``.",
          "228:         The ``start`` and ``end`` parameters can be used to select an absolute",
          "229:         date period to fetch issues from.",
          "231:         :qparam string statsPeriod: an optional stat period (can be one of",
          "232:                                     ``\"24h\"``, ``\"14d\"``, and ``\"\"``).",
          "233:         :qparam string groupStatsPeriod: an optional stat period (can be one of",
          "234:                                     ``\"24h\"``, ``\"14d\"``, and ``\"\"``).",
          "235:         :qparam string start:       Beginning date. You must also provide ``end``.",
          "236:         :qparam string end:         End date. You must also provide ``start``.",
          "237:         :qparam bool shortIdLookup: if this is set to true then short IDs are",
          "238:                                     looked up by this function as well.  This",
          "239:                                     can cause the return value of the function",
          "240:                                     to return an event issue of a different",
          "241:                                     project which is why this is an opt-in.",
          "242:                                     Set to `1` to enable.",
          "243:         :qparam querystring query: an optional Sentry structured search",
          "244:                                    query.  If not provided an implied",
          "245:                                    ``\"is:unresolved issue.priority:[high,medium]\"`` is assumed.)",
          "246:         :qparam bool savedSearch:  if this is set to False, then we are making the request without",
          "247:                                    a saved search and will look for the default search from this endpoint.",
          "248:         :qparam string searchId:   if passed in, this is the selected search",
          "249:         :pparam string organization_id_or_slug: the id or slug of the organization the",
          "250:                                           issues belong to.",
          "251:         :auth: required",
          "252:         :qparam list expand: an optional list of strings to opt in to additional data. Supports `inbox`",
          "253:         :qparam list collapse: an optional list of strings to opt out of certain pieces of data. Supports `stats`, `lifetime`, `base`, `unhandled`",
          "254:         \"\"\"",
          "",
          "[Added Lines]",
          "233:     @extend_schema(",
          "234:         operation_id=\"List an Organization's Issues\",",
          "235:         description=(",
          "236:             \"Return a list of issues for an organization. \"",
          "237:             \"All parameters are supplied as query string parameters. \"",
          "238:             \"A default query of `is:unresolved issue.priority:[high,medium]` is applied. \"",
          "239:             \"To return all results, use an empty query value (i.e. ``?query=`). \"",
          "240:         ),",
          "241:         parameters=[",
          "242:             GlobalParams.ORG_ID_OR_SLUG,",
          "243:             GlobalParams.ENVIRONMENT,",
          "244:             OrganizationParams.PROJECT,",
          "245:             GlobalParams.STATS_PERIOD,",
          "246:             GlobalParams.START,",
          "247:             GlobalParams.END,",
          "248:             IssueParams.GROUP_STATS_PERIOD,",
          "249:             IssueParams.SHORT_ID_LOOKUP,",
          "250:             IssueParams.DEFAULT_QUERY,",
          "251:             IssueParams.VIEW_ID,",
          "252:             IssueParams.VIEW_SORT,",
          "253:             IssueParams.LIMIT,",
          "254:             IssueParams.GROUP_INDEX_EXPAND,",
          "255:             IssueParams.GROUP_INDEX_COLLAPSE,",
          "256:             CursorQueryParam,",
          "257:         ],",
          "258:         responses={",
          "259:             200: inline_sentry_response_serializer(",
          "260:                 \"OrganizationGroupIndexGetResponse\", list[StreamGroupSerializerSnubaResponse]",
          "261:             ),",
          "262:             400: RESPONSE_BAD_REQUEST,",
          "263:             401: RESPONSE_UNAUTHORIZED,",
          "264:             403: RESPONSE_FORBIDDEN,",
          "265:             404: RESPONSE_NOT_FOUND,",
          "266:         },",
          "267:         examples=IssueExamples.ORGANIZATION_GROUP_INDEX_GET,",
          "268:     )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "411:         # TODO(jess): add metrics that are similar to project endpoint here",
          "412:         return response",
          "414:     @track_slo_response(\"workflow\")",
          "415:     def put(self, request: Request, organization: Organization) -> Response:",
          "478:         projects = self.get_projects(request, organization)",
          "479:         is_fetching_replay_data = request.headers.get(\"X-Sentry-Replay-Request\") == \"1\"",
          "",
          "[Removed Lines]",
          "416:         \"\"\"",
          "417:         Bulk Mutate a List of Issues",
          "418:         ````````````````````````````",
          "420:         Bulk mutate various attributes on issues.  The list of issues",
          "421:         to modify is given through the `id` query parameter.  It is repeated",
          "422:         for each issue that should be modified.",
          "424:         - For non-status updates, the `id` query parameter is required.",
          "425:         - For status updates, the `id` query parameter may be omitted",
          "426:           for a batch \"update all\" query.",
          "427:         - An optional `status` query parameter may be used to restrict",
          "428:           mutations to only events with the given status.",
          "430:         The following attributes can be modified and are supplied as",
          "431:         JSON object in the body:",
          "433:         If any ids are out of scope this operation will succeed without",
          "434:         any data mutation.",
          "436:         :qparam int id: a list of IDs of the issues to be mutated.  This",
          "437:                         parameter shall be repeated for each issue.  It",
          "438:                         is optional only if a status is mutated in which",
          "439:                         case an implicit `update all` is assumed.",
          "440:         :qparam string status: optionally limits the query to issues of the",
          "441:                                specified status.  Valid values are",
          "442:                                ``\"resolved\"``, ``\"unresolved\"`` and",
          "443:                                ``\"ignored\"``.",
          "444:         :pparam string organization_id_or_slug: the id or slug of the organization the",
          "445:                                           issues belong to.",
          "446:         :param string status: the new status for the issues.  Valid values",
          "447:                               are ``\"resolved\"``, ``\"resolvedInNextRelease\"``,",
          "448:                               ``\"unresolved\"``, and ``\"ignored\"``. Status",
          "449:                               updates that include release data are only allowed",
          "450:                               for groups within a single project.",
          "451:         :param map statusDetails: additional details about the resolution.",
          "452:                                   Valid values are ``\"inRelease\"``, ``\"inNextRelease\"``,",
          "453:                                   ``\"inCommit\"``,  ``\"ignoreDuration\"``, ``\"ignoreCount\"``,",
          "454:                                   ``\"ignoreWindow\"``, ``\"ignoreUserCount\"``, and",
          "455:                                   ``\"ignoreUserWindow\"``. Status detail",
          "456:                                   updates that include release data are only allowed",
          "457:                                   for groups within a single project.",
          "458:         :param int ignoreDuration: the number of minutes to ignore this issue.",
          "459:         :param boolean isPublic: sets the issue to public or private.",
          "460:         :param boolean merge: allows to merge or unmerge different issues.",
          "461:         :param string assignedTo: the user or team that should be assigned to",
          "462:                                   these issues. Can be of the form ``\"<user_id>\"``,",
          "463:                                   ``\"user:<user_id>\"``, ``\"<username>\"``,",
          "464:                                   ``\"<user_primary_email>\"``, or ``\"team:<team_id>\"``.",
          "465:                                   Bulk assigning issues is limited to groups",
          "466:                                   within a single project.",
          "467:         :param boolean hasSeen: in case this API call is invoked with a user",
          "468:                                 context this allows changing of the flag",
          "469:                                 that indicates if the user has seen the",
          "470:                                 event.",
          "471:         :param boolean isBookmarked: in case this API call is invoked with a",
          "472:                                      user context this allows changing of",
          "473:                                      the bookmark flag.",
          "474:         :param string substatus: the new substatus for the issues. Valid values",
          "475:                                  defined in GroupSubStatus.",
          "476:         :auth: required",
          "477:         \"\"\"",
          "",
          "[Added Lines]",
          "430:     @extend_schema(",
          "431:         operation_id=\"Bulk Mutate an Organization's Issues\",",
          "432:         description=(",
          "433:             \"Bulk mutate various attributes on a maxmimum of 1000 issues. \\n\"",
          "434:             \"- For non-status updates, the `id` query parameter is required. \\n\"",
          "435:             \"- For status updates, the `id` query parameter may be omitted to update issues that match the filtering. \\n\"",
          "436:             \"If any IDs are out of scope, the data won't be mutated but the endpoint will still produce a successful response. \"",
          "437:             \"For example, if no issues were found matching the criteria, a HTTP 204 is returned.\"",
          "438:         ),",
          "439:         parameters=[",
          "440:             GlobalParams.ORG_ID_OR_SLUG,",
          "441:             GlobalParams.ENVIRONMENT,",
          "442:             OrganizationParams.PROJECT,",
          "443:             IssueParams.MUTATE_ISSUE_ID_LIST,",
          "444:             IssueParams.DEFAULT_QUERY,",
          "445:             IssueParams.VIEW_ID,",
          "446:             IssueParams.VIEW_SORT,",
          "447:             IssueParams.LIMIT,",
          "448:         ],",
          "449:         request=GroupValidator,",
          "450:         responses={",
          "451:             200: inline_sentry_response_serializer(",
          "452:                 \"OrganizationGroupIndexPutResponse\", MutateIssueResponse",
          "453:             ),",
          "454:             204: RESPONSE_NO_CONTENT,",
          "455:             400: RESPONSE_BAD_REQUEST,",
          "456:             401: RESPONSE_UNAUTHORIZED,",
          "457:             403: RESPONSE_FORBIDDEN,",
          "458:             404: RESPONSE_NOT_FOUND,",
          "459:         },",
          "460:         examples=IssueExamples.ORGANIZATION_GROUP_INDEX_PUT,",
          "461:     )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "498:         ids = [int(id) for id in request.GET.getlist(\"id\")]",
          "499:         return update_groups_with_search_fn(request, ids, projects, organization.id, search_fn)",
          "501:     @track_slo_response(\"workflow\")",
          "502:     def delete(self, request: Request, organization: Organization) -> Response:",
          "524:         projects = self.get_projects(request, organization)",
          "526:         is_fetching_replay_data = request.headers.get(\"X-Sentry-Replay-Request\") == \"1\"",
          "",
          "[Removed Lines]",
          "503:         \"\"\"",
          "504:         Bulk Remove a List of Issues",
          "505:         ````````````````````````````",
          "507:         Permanently remove the given issues. The list of issues to",
          "508:         modify is given through the `id` query parameter.  It is repeated",
          "509:         for each issue that should be removed.",
          "511:         Only queries by 'id' are accepted.",
          "513:         If any IDs are out of scope this operation will succeed without",
          "514:         any data mutation.",
          "516:         :qparam int id: a list of IDs of the issues to be removed.  This",
          "517:                         parameter shall be repeated for each issue, e.g.",
          "518:                         `?id=1&id=2&id=3`. If this parameter is not provided,",
          "519:                         it will attempt to remove the first 1000 issues.",
          "520:         :pparam string organization_id_or_slug: the id or slug of the organization the",
          "521:                                           issues belong to.",
          "522:         :auth: required",
          "523:         \"\"\"",
          "",
          "[Added Lines]",
          "487:     @extend_schema(",
          "488:         operation_id=\"Bulk Remove an Organization's Issues\",",
          "489:         description=(",
          "490:             \"Permanently remove the given issues. \"",
          "491:             \"If IDs are provided, queries and filtering will be ignored. \"",
          "492:             \"If any IDs are out of scope, the data won't be mutated but the endpoint will still produce a successful response. \"",
          "493:             \"For example, if no issues were found matching the criteria, a HTTP 204 is returned.\"",
          "494:         ),",
          "495:         parameters=[",
          "496:             GlobalParams.ORG_ID_OR_SLUG,",
          "497:             GlobalParams.ENVIRONMENT,",
          "498:             OrganizationParams.PROJECT,",
          "499:             IssueParams.DELETE_ISSUE_ID_LIST,",
          "500:             IssueParams.DEFAULT_QUERY,",
          "501:             IssueParams.VIEW_ID,",
          "502:             IssueParams.VIEW_SORT,",
          "503:             IssueParams.LIMIT,",
          "504:         ],",
          "505:         responses={",
          "506:             204: RESPONSE_NO_CONTENT,",
          "507:             400: RESPONSE_BAD_REQUEST,",
          "508:             401: RESPONSE_UNAUTHORIZED,",
          "509:             403: RESPONSE_FORBIDDEN,",
          "510:             404: RESPONSE_NOT_FOUND,",
          "511:         },",
          "512:     )",
          "",
          "---------------"
        ],
        "src/sentry/models/group.py||src/sentry/models/group.py": [
          "File: src/sentry/models/group.py -> src/sentry/models/group.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "926:         \"\"\"",
          "927:         return self.data.get(\"type\", \"default\")",
          "930:         \"\"\"",
          "931:         Return the metadata of this issue.",
          "",
          "[Removed Lines]",
          "929:     def get_event_metadata(self) -> Mapping[str, Any]:",
          "",
          "[Added Lines]",
          "929:     def get_event_metadata(self) -> dict[str, Any]:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e0e58813a9909f7e3cdac052109c6ff260fc9e7",
      "candidate_info": {
        "commit_hash": "2e0e58813a9909f7e3cdac052109c6ff260fc9e7",
        "repo": "getsentry/sentry",
        "commit_url": "https://github.com/getsentry/sentry/commit/2e0e58813a9909f7e3cdac052109c6ff260fc9e7",
        "files": [
          "src/sentry/integrations/bitbucket/issues.py",
          "src/sentry/integrations/example/integration.py",
          "src/sentry/integrations/gitlab/issues.py",
          "src/sentry/integrations/jira/integration.py",
          "src/sentry/integrations/jira_server/integration.py",
          "src/sentry/integrations/mixins/issues.py",
          "src/sentry/integrations/vsts/issues.py",
          "src/sentry/plugins/bases/issue.py",
          "src/sentry/plugins/bases/issue2.py",
          "src/sentry/plugins/examples/issue_tracking.py",
          "src/sentry_plugins/asana/plugin.py",
          "src/sentry_plugins/bitbucket/plugin.py",
          "src/sentry_plugins/github/plugin.py",
          "src/sentry_plugins/gitlab/plugin.py",
          "src/sentry_plugins/jira/plugin.py",
          "src/sentry_plugins/phabricator/plugin.py",
          "src/sentry_plugins/pivotal/plugin.py",
          "src/sentry_plugins/redmine/plugin.py",
          "src/sentry_plugins/trello/plugin.py",
          "tests/sentry/plugins/bases/test_issue2.py",
          "tests/sentry_plugins/trello/test_plugin.py"
        ],
        "message": "ref: unify signatures of get_issue_label / get_issue_url (#74892)\n\nfixes errors pointed out by upgrading mypy to 1.11\n\n<!-- Describe your PR here. -->",
        "before_after_code_files": [
          "src/sentry/integrations/bitbucket/issues.py||src/sentry/integrations/bitbucket/issues.py",
          "src/sentry/integrations/example/integration.py||src/sentry/integrations/example/integration.py",
          "src/sentry/integrations/gitlab/issues.py||src/sentry/integrations/gitlab/issues.py",
          "src/sentry/integrations/jira/integration.py||src/sentry/integrations/jira/integration.py",
          "src/sentry/integrations/jira_server/integration.py||src/sentry/integrations/jira_server/integration.py",
          "src/sentry/integrations/mixins/issues.py||src/sentry/integrations/mixins/issues.py",
          "src/sentry/integrations/vsts/issues.py||src/sentry/integrations/vsts/issues.py",
          "src/sentry/plugins/bases/issue.py||src/sentry/plugins/bases/issue.py",
          "src/sentry/plugins/bases/issue2.py||src/sentry/plugins/bases/issue2.py",
          "src/sentry/plugins/examples/issue_tracking.py||src/sentry/plugins/examples/issue_tracking.py",
          "src/sentry_plugins/asana/plugin.py||src/sentry_plugins/asana/plugin.py",
          "src/sentry_plugins/bitbucket/plugin.py||src/sentry_plugins/bitbucket/plugin.py",
          "src/sentry_plugins/github/plugin.py||src/sentry_plugins/github/plugin.py",
          "src/sentry_plugins/gitlab/plugin.py||src/sentry_plugins/gitlab/plugin.py",
          "src/sentry_plugins/jira/plugin.py||src/sentry_plugins/jira/plugin.py",
          "src/sentry_plugins/phabricator/plugin.py||src/sentry_plugins/phabricator/plugin.py",
          "src/sentry_plugins/pivotal/plugin.py||src/sentry_plugins/pivotal/plugin.py",
          "src/sentry_plugins/redmine/plugin.py||src/sentry_plugins/redmine/plugin.py",
          "src/sentry_plugins/trello/plugin.py||src/sentry_plugins/trello/plugin.py",
          "tests/sentry/plugins/bases/test_issue2.py||tests/sentry/plugins/bases/test_issue2.py",
          "tests/sentry_plugins/trello/test_plugin.py||tests/sentry_plugins/trello/test_plugin.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/sentry/integrations/mixins/issues.py||src/sentry/integrations/mixins/issues.py",
            "src/sentry/plugins/bases/issue.py||src/sentry/plugins/bases/issue.py",
            "src/sentry/plugins/bases/issue2.py||src/sentry/plugins/bases/issue2.py"
          ],
          "candidate": [
            "src/sentry/integrations/mixins/issues.py||src/sentry/integrations/mixins/issues.py",
            "src/sentry/plugins/bases/issue.py||src/sentry/plugins/bases/issue.py",
            "src/sentry/plugins/bases/issue2.py||src/sentry/plugins/bases/issue2.py"
          ]
        }
      },
      "candidate_diff": {
        "src/sentry/integrations/bitbucket/issues.py||src/sentry/integrations/bitbucket/issues.py": [
          "File: src/sentry/integrations/bitbucket/issues.py -> src/sentry/integrations/bitbucket/issues.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: class BitbucketIssueBasicMixin(IssueBasicMixin):",
          "32:         repo, issue_id = key.split(\"#\")",
          "33:         return f\"https://bitbucket.org/{repo}/issues/{issue_id}\"",
          "",
          "[Removed Lines]",
          "31:     def get_issue_url(self, key):",
          "",
          "[Added Lines]",
          "31:     def get_issue_url(self, key: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry/integrations/example/integration.py||src/sentry/integrations/example/integration.py": [
          "File: src/sentry/integrations/example/integration.py -> src/sentry/integrations/example/integration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     outbound_assignee_key = \"sync_assignee_outbound\"",
          "73:     inbound_assignee_key = \"sync_assignee_inbound\"",
          "76:         return f\"https://example/issues/{key}\"",
          "78:     def create_comment(self, issue_id, user_id, group_note):",
          "",
          "[Removed Lines]",
          "75:     def get_issue_url(self, key):",
          "",
          "[Added Lines]",
          "75:     def get_issue_url(self, key: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry/integrations/gitlab/issues.py||src/sentry/integrations/gitlab/issues.py": [
          "File: src/sentry/integrations/gitlab/issues.py -> src/sentry/integrations/gitlab/issues.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     def make_external_key(self, data):",
          "21:         return \"{}:{}\".format(self.model.metadata[\"domain_name\"], data[\"key\"])",
          "24:         match = ISSUE_EXTERNAL_KEY_FORMAT.match(key)",
          "25:         project, issue_id = match.group(1), match.group(2)",
          "26:         return \"{}/{}/issues/{}\".format(self.model.metadata[\"base_url\"], project, issue_id)",
          "",
          "[Removed Lines]",
          "23:     def get_issue_url(self, key):",
          "",
          "[Added Lines]",
          "23:     def get_issue_url(self, key: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry/integrations/jira/integration.py||src/sentry/integrations/jira/integration.py": [
          "File: src/sentry/integrations/jira/integration.py -> src/sentry/integrations/jira/integration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:                 field[\"type\"] = \"select\"",
          "339:         return fields",
          "342:         return \"{}/browse/{}\".format(self.model.metadata[\"base_url\"], key)",
          "344:     def get_persisted_default_config_fields(self) -> Sequence[str]:",
          "",
          "[Removed Lines]",
          "341:     def get_issue_url(self, key, **kwargs):",
          "",
          "[Added Lines]",
          "341:     def get_issue_url(self, key: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry/integrations/jira_server/integration.py||src/sentry/integrations/jira_server/integration.py": [
          "File: src/sentry/integrations/jira_server/integration.py -> src/sentry/integrations/jira_server/integration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:         return fields",
          "522:         return \"{}/browse/{}\".format(self.model.metadata[\"base_url\"], key)",
          "524:     def get_persisted_default_config_fields(self) -> Sequence[str]:",
          "",
          "[Removed Lines]",
          "521:     def get_issue_url(self, key, **kwargs):",
          "",
          "[Added Lines]",
          "521:     def get_issue_url(self, key: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry/integrations/mixins/issues.py||src/sentry/integrations/mixins/issues.py": [
          "File: src/sentry/integrations/mixins/issues.py -> src/sentry/integrations/mixins/issues.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     def get_group_title(self, group, event, **kwargs):",
          "64:         return get_notification_group_title(group, event, **kwargs)",
          "67:         \"\"\"",
          "68:         Given the key of the external_issue return the external issue link.",
          "69:         \"\"\"",
          "",
          "[Removed Lines]",
          "66:     def get_issue_url(self, key):",
          "",
          "[Added Lines]",
          "66:     def get_issue_url(self, key: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry/integrations/vsts/issues.py||src/sentry/integrations/vsts/issues.py": [
          "File: src/sentry/integrations/vsts/issues.py -> src/sentry/integrations/vsts/issues.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:                 field[\"type\"] = \"select\"",
          "162:         return fields",
          "165:         return f\"{self.instance}_workitems/edit/{key}\"",
          "167:     def create_issue(self, data: Mapping[str, str], **kwargs: Any) -> Mapping[str, Any]:",
          "",
          "[Removed Lines]",
          "164:     def get_issue_url(self, key: str, **kwargs: Any) -> str:",
          "",
          "[Added Lines]",
          "164:     def get_issue_url(self, key: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry/plugins/bases/issue.py||src/sentry/plugins/bases/issue.py": [
          "File: src/sentry/plugins/bases/issue.py -> src/sentry/plugins/bases/issue.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:             request.POST or None, initial=self.get_initial_link_form_data(request, group, event)",
          "123:         )",
          "126:         \"\"\"",
          "127:         Given an issue_id (string) return an absolute URL to the issue's details",
          "128:         page.",
          "",
          "[Removed Lines]",
          "125:     def get_issue_url(self, group, issue_id, **kwargs):",
          "",
          "[Added Lines]",
          "125:     def get_issue_url(self, group, issue_id: str) -> str:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:         \"\"\"",
          "136:         raise NotImplementedError",
          "139:         \"\"\"",
          "140:         Given an issue_id (string) return a string representing the issue.",
          "",
          "[Removed Lines]",
          "138:     def get_issue_label(self, group, issue_id, **kwargs):",
          "",
          "[Added Lines]",
          "138:     def get_issue_label(self, group, issue_id) -> str:",
          "",
          "---------------"
        ],
        "src/sentry/plugins/bases/issue2.py||src/sentry/plugins/bases/issue2.py": [
          "File: src/sentry/plugins/bases/issue2.py -> src/sentry/plugins/bases/issue2.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:     def get_link_existing_issue_fields(self, request: Request, group, event, **kwargs):",
          "147:         return []",
          "160:         \"\"\"",
          "162:         page.",
          "163:         \"\"\"",
          "164:         raise NotImplementedError",
          "167:         \"\"\"",
          "170:         e.g. GitHub represents issues as GH-XXX",
          "171:         \"\"\"",
          "176:     def create_issue(self, request: Request, group, form_data):",
          "177:         \"\"\"",
          "",
          "[Removed Lines]",
          "149:     def _get_issue_url_compat(self, group, issue, **kwargs):",
          "150:         if self.issue_fields is None:",
          "151:             return self.get_issue_url(group, issue[\"id\"])",
          "152:         return self.get_issue_url(group, issue)",
          "154:     def _get_issue_label_compat(self, group, issue, **kwargs):",
          "155:         if self.issue_fields is None:",
          "156:             return self.get_issue_label(group, issue[\"id\"])",
          "157:         return self.get_issue_label(group, issue)",
          "159:     def get_issue_url(self, group, issue, **kwargs):",
          "161:         Given an issue context (issue_id string or issue dict) return an absolute URL to the issue's details",
          "166:     def get_issue_label(self, group, issue, **kwargs):",
          "168:         Given an issue context (issue_id string or issue dict) return a string representing the issue.",
          "172:         if isinstance(issue, dict):",
          "173:             return \"#{}\".format(issue[\"id\"])",
          "174:         return f\"#{issue}\"",
          "",
          "[Added Lines]",
          "149:     def get_issue_url(self, group, issue_id: str) -> str:",
          "151:         Given an issue context (issue_id string) return an absolute URL to the issue's details",
          "156:     def get_issue_label(self, group, issue_id: str) -> str:",
          "158:         Given an issue context (issue_id string) return a string representing the issue.",
          "162:         return f\"#{issue_id}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:             or request.data.get(\"title\")",
          "275:             or self._get_issue_label_compat(group, issue),",
          "276:             \"provider\": self.get_title(),",
          "279:         }",
          "280:         Activity.objects.create(",
          "281:             project=group.project,",
          "",
          "[Removed Lines]",
          "277:             \"location\": self._get_issue_url_compat(group, issue),",
          "278:             \"label\": self._get_issue_label_compat(group, issue),",
          "",
          "[Added Lines]",
          "265:             \"location\": self.get_issue_url(group, issue[\"id\"]),",
          "266:             \"label\": self.get_issue_label(group, issue[\"id\"]),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:         )",
          "291:         return Response(",
          "292:             {",
          "296:                 \"id\": issue[\"id\"],",
          "297:             }",
          "298:         )",
          "",
          "[Removed Lines]",
          "293:                 \"issue_url\": self.get_issue_url(group, issue),",
          "294:                 \"link\": self._get_issue_url_compat(group, issue),",
          "295:                 \"label\": self._get_issue_label_compat(group, issue),",
          "",
          "[Added Lines]",
          "281:                 \"issue_url\": self.get_issue_url(group, issue[\"id\"]),",
          "282:                 \"link\": self.get_issue_url(group, issue[\"id\"]),",
          "283:                 \"label\": self.get_issue_label(group, issue[\"id\"]),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:         issue_information = {",
          "342:             \"title\": issue.get(\"title\") or self._get_issue_label_compat(group, issue),",
          "343:             \"provider\": self.get_title(),",
          "346:         }",
          "347:         Activity.objects.create(",
          "348:             project=group.project,",
          "",
          "[Removed Lines]",
          "344:             \"location\": self._get_issue_url_compat(group, issue),",
          "345:             \"label\": self._get_issue_label_compat(group, issue),",
          "",
          "[Added Lines]",
          "332:             \"location\": self.get_issue_url(group, issue[\"id\"]),",
          "333:             \"label\": self.get_issue_label(group, issue[\"id\"]),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "354:         return Response(",
          "355:             {",
          "356:                 \"message\": \"Successfully linked issue.\",",
          "359:                 \"id\": issue[\"id\"],",
          "360:             }",
          "361:         )",
          "",
          "[Removed Lines]",
          "357:                 \"link\": self._get_issue_url_compat(group, issue),",
          "358:                 \"label\": self._get_issue_label_compat(group, issue),",
          "",
          "[Added Lines]",
          "345:                 \"link\": self.get_issue_url(group, issue[\"id\"]),",
          "346:                 \"label\": self.get_issue_label(group, issue[\"id\"]),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "383:         if issue:",
          "384:             item[\"issue\"] = {",
          "385:                 \"issue_id\": issue.get(\"id\"),",
          "388:             }",
          "390:         item.update(PluginSerializer(group.project).serialize(self, None, request.user))",
          "",
          "[Removed Lines]",
          "386:                 \"url\": self._get_issue_url_compat(group, issue),",
          "387:                 \"label\": self._get_issue_label_compat(group, issue),",
          "",
          "[Added Lines]",
          "374:                 \"url\": self.get_issue_url(group, issue[\"id\"]),",
          "375:                 \"label\": self.get_issue_label(group, issue[\"id\"]),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "431:         tag_list.append(",
          "432:             {",
          "435:             }",
          "436:         )",
          "",
          "[Removed Lines]",
          "433:                 \"url\": self._get_issue_url_compat(group, issue),",
          "434:                 \"displayName\": self._get_issue_label_compat(group, issue),",
          "",
          "[Added Lines]",
          "421:                 \"url\": self.get_issue_url(group, issue[\"id\"]),",
          "422:                 \"displayName\": self.get_issue_label(group, issue[\"id\"]),",
          "",
          "---------------"
        ],
        "src/sentry/plugins/examples/issue_tracking.py||src/sentry/plugins/examples/issue_tracking.py": [
          "File: src/sentry/plugins/examples/issue_tracking.py -> src/sentry/plugins/examples/issue_tracking.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     def create_issue(self, request: Request, group, form_data):",
          "32:         return \"1\"",
          "35:         return \"Example-%s\" % issue_id",
          "38:         tracker_url = self.get_option(\"tracker_url\", group.project)",
          "40:         return f\"{tracker_url}?issueID={issue_id}\"",
          "",
          "[Removed Lines]",
          "34:     def get_issue_label(self, group, issue_id, **kwargs):",
          "37:     def get_issue_url(self, group, issue_id, **kwargs):",
          "",
          "[Added Lines]",
          "34:     def get_issue_label(self, group, issue_id: str) -> str:",
          "37:     def get_issue_url(self, group, issue_id: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry_plugins/asana/plugin.py||src/sentry_plugins/asana/plugin.py": [
          "File: src/sentry_plugins/asana/plugin.py -> src/sentry_plugins/asana/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:         return {\"title\": issue[\"name\"]}",
          "175:         return \"Asana Issue\"",
          "178:         return \"https://app.asana.com/0/0/%s\" % issue_id",
          "180:     def validate_config(self, project, config, actor=None):",
          "",
          "[Removed Lines]",
          "174:     def get_issue_label(self, group, issue_id, **kwargs):",
          "177:     def get_issue_url(self, group, issue_id, **kwargs):",
          "",
          "[Added Lines]",
          "174:     def get_issue_label(self, group, issue_id: str) -> str:",
          "177:     def get_issue_url(self, group, issue_id: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry_plugins/bitbucket/plugin.py||src/sentry_plugins/bitbucket/plugin.py": [
          "File: src/sentry_plugins/bitbucket/plugin.py -> src/sentry_plugins/bitbucket/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:         return {\"title\": issue[\"title\"]}",
          "163:         return \"Bitbucket-%s\" % issue_id",
          "166:         repo = self.get_option(\"repo\", group.project)",
          "167:         return f\"https://bitbucket.org/{repo}/issue/{issue_id}/\"",
          "",
          "[Removed Lines]",
          "162:     def get_issue_label(self, group, issue_id, **kwargs):",
          "165:     def get_issue_url(self, group, issue_id, **kwargs):",
          "",
          "[Added Lines]",
          "162:     def get_issue_label(self, group, issue_id: str) -> str:",
          "165:     def get_issue_url(self, group, issue_id: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry_plugins/github/plugin.py||src/sentry_plugins/github/plugin.py": [
          "File: src/sentry_plugins/github/plugin.py -> src/sentry_plugins/github/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:         return {\"title\": issue[\"title\"]}",
          "200:         return f\"GH-{issue_id}\"",
          "203:         # XXX: get_option may need tweaked in Sentry so that it can be pre-fetched in bulk",
          "204:         repo = self.get_option(\"repo\", group.project)",
          "",
          "[Removed Lines]",
          "199:     def get_issue_label(self, group, issue_id, **kwargs):",
          "202:     def get_issue_url(self, group, issue_id, **kwargs):",
          "",
          "[Added Lines]",
          "199:     def get_issue_label(self, group, issue_id: str) -> str:",
          "202:     def get_issue_url(self, group, issue_id: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry_plugins/gitlab/plugin.py||src/sentry_plugins/gitlab/plugin.py": [
          "File: src/sentry_plugins/gitlab/plugin.py -> src/sentry_plugins/gitlab/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:         return {\"title\": issue[\"title\"]}",
          "150:         return f\"GL-{issue_id}\"",
          "153:         url = self.get_option(\"gitlab_url\", group.project).rstrip(\"/\")",
          "154:         repo = self.get_option(\"gitlab_repo\", group.project)",
          "158:     def get_configure_plugin_fields(self, project, **kwargs):",
          "159:         gitlab_token = self.get_option(\"gitlab_token\", project)",
          "",
          "[Removed Lines]",
          "149:     def get_issue_label(self, group, issue_id, **kwargs):",
          "152:     def get_issue_url(self, group, issue_iid, **kwargs):",
          "156:         return f\"{url}/{repo}/issues/{issue_iid}\"",
          "",
          "[Added Lines]",
          "149:     def get_issue_label(self, group, issue_id: str) -> str:",
          "152:     def get_issue_url(self, group, issue_id: str) -> str:",
          "156:         return f\"{url}/{repo}/issues/{issue_id}\"",
          "",
          "---------------"
        ],
        "src/sentry_plugins/jira/plugin.py||src/sentry_plugins/jira/plugin.py": [
          "File: src/sentry_plugins/jira/plugin.py -> src/sentry_plugins/jira/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:         return {\"title\": issue[\"fields\"][\"summary\"]}",
          "267:         return issue_id",
          "270:         instance = self.get_option(\"instance_url\", group.project)",
          "271:         return f\"{instance}/browse/{issue_id}\"",
          "",
          "[Removed Lines]",
          "266:     def get_issue_label(self, group, issue_id, **kwargs):",
          "269:     def get_issue_url(self, group, issue_id, **kwargs):",
          "",
          "[Added Lines]",
          "266:     def get_issue_label(self, group, issue_id: str) -> str:",
          "269:     def get_issue_url(self, group, issue_id: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry_plugins/phabricator/plugin.py||src/sentry_plugins/phabricator/plugin.py": [
          "File: src/sentry_plugins/phabricator/plugin.py -> src/sentry_plugins/phabricator/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:     def get_new_issue_title(self, **kwargs):",
          "198:         return \"Create Maniphest Task\"",
          "201:         return \"T%s\" % issue_id",
          "204:         host = self.get_option(\"host\", group.project)",
          "205:         return urljoin(host, \"T%s\" % issue_id)",
          "",
          "[Removed Lines]",
          "200:     def get_issue_label(self, group, issue_id, **kwargs):",
          "203:     def get_issue_url(self, group, issue_id, **kwargs):",
          "",
          "[Added Lines]",
          "200:     def get_issue_label(self, group, issue_id: str) -> str:",
          "203:     def get_issue_url(self, group, issue_id: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry_plugins/pivotal/plugin.py||src/sentry_plugins/pivotal/plugin.py": [
          "File: src/sentry_plugins/pivotal/plugin.py -> src/sentry_plugins/pivotal/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:         return json_resp[\"id\"]",
          "177:         return \"#%s\" % issue_id",
          "180:         return \"https://www.pivotaltracker.com/story/show/%s\" % issue_id",
          "182:     def get_issue_title_by_id(self, request: Request, group, issue_id):",
          "",
          "[Removed Lines]",
          "176:     def get_issue_label(self, group, issue_id, **kwargs):",
          "179:     def get_issue_url(self, group, issue_id, **kwargs):",
          "",
          "[Added Lines]",
          "176:     def get_issue_label(self, group, issue_id: str) -> str:",
          "179:     def get_issue_url(self, group, issue_id: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry_plugins/redmine/plugin.py||src/sentry_plugins/redmine/plugin.py": [
          "File: src/sentry_plugins/redmine/plugin.py -> src/sentry_plugins/redmine/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:         response = client.create_issue(issue_dict)",
          "110:         return response[\"issue\"][\"id\"]",
          "113:         host = self.get_option(\"host\", group.project)",
          "114:         return \"{}/issues/{}\".format(host.rstrip(\"/\"), issue_id)",
          "",
          "[Removed Lines]",
          "112:     def get_issue_url(self, group, issue_id, **kwargs):",
          "",
          "[Added Lines]",
          "112:     def get_issue_url(self, group, issue_id: str) -> str:",
          "",
          "---------------"
        ],
        "src/sentry_plugins/trello/plugin.py||src/sentry_plugins/trello/plugin.py": [
          "File: src/sentry_plugins/trello/plugin.py -> src/sentry_plugins/trello/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:         return {\"title\": card[\"name\"], \"id\": card[\"shortLink\"]}",
          "237:         \"\"\"",
          "238:         Return label of the linked issue we show in the UI from the issue string",
          "239:         \"\"\"",
          "240:         # the old version of the plugin stores the url in the issue",
          "243:             return \"Trello-%s\" % short_issue",
          "247:         \"\"\"",
          "248:         Return label of the url of card in Trello based off the issue object or issue ID",
          "249:         \"\"\"",
          "253:         # the old version of the plugin stores the url in the issue",
          "258:     def view_options(self, request: Request, group, **kwargs):",
          "259:         \"\"\"",
          "",
          "[Removed Lines]",
          "236:     def get_issue_label(self, group, issue, **kwargs):",
          "241:         if LABLEX_REGEX.search(issue):",
          "242:             short_issue = issue.split(\"/\", 1)[0]",
          "244:         return \"Trello-%s\" % issue",
          "246:     def get_issue_url(self, group, issue, **kwargs):",
          "250:         # TODO(Steve): figure out why we sometimes get a string and sometimes a dict",
          "251:         if isinstance(issue, dict):",
          "252:             issue = issue[\"id\"]",
          "254:         if LABLEX_REGEX.search(issue):",
          "255:             return issue.split(\"/\", 1)[1]",
          "256:         return \"https://trello.com/c/%s\" % issue",
          "",
          "[Added Lines]",
          "236:     def get_issue_label(self, group, issue_id: str) -> str:",
          "241:         if LABLEX_REGEX.search(issue_id):",
          "242:             short_issue = issue_id.split(\"/\", 1)[0]",
          "244:         return \"Trello-%s\" % issue_id",
          "246:     def get_issue_url(self, group, issue_id: str) -> str:",
          "251:         if LABLEX_REGEX.search(issue_id):",
          "252:             return issue_id.split(\"/\", 1)[1]",
          "253:         return \"https://trello.com/c/%s\" % issue_id",
          "",
          "---------------"
        ],
        "tests/sentry/plugins/bases/test_issue2.py||tests/sentry/plugins/bases/test_issue2.py": [
          "File: tests/sentry/plugins/bases/test_issue2.py -> tests/sentry/plugins/bases/test_issue2.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: class IssueTrackingPlugin2Test(TestCase):",
          "35:     def test_issue_label_legacy(self):",
          "36:         plugin = PluginWithoutFields()",
          "37:         result = plugin.get_issue_label(mock.Mock(), \"1\")",
          "",
          "[Removed Lines]",
          "30:     def test_issue_label_as_dict(self):",
          "31:         plugin = PluginWithFields()",
          "32:         result = plugin.get_issue_label(mock.Mock(), {\"id\": \"1\"})",
          "33:         assert result == \"#1\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/sentry_plugins/trello/test_plugin.py||tests/sentry_plugins/trello/test_plugin.py": [
          "File: tests/sentry_plugins/trello/test_plugin.py -> tests/sentry_plugins/trello/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     def test_get_issue_url(self):",
          "39:         group = self.create_group(message=\"Hello world\", culprit=\"foo.bar\")",
          "41:         assert self.plugin.get_issue_url(group, \"rPPDb\") == \"https://trello.com/c/rPPDb\"",
          "43:         assert (",
          "44:             self.plugin.get_issue_url(group, \"5dafd/https://trello.com/c/rPPDb/75-title\")",
          "45:             == \"https://trello.com/c/rPPDb/75-title\"",
          "",
          "[Removed Lines]",
          "40:         # test new and old format",
          "42:         assert self.plugin.get_issue_url(group, {\"id\": \"rPPDb\"}) == \"https://trello.com/c/rPPDb\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}