{
  "cve_id": "CVE-2022-31035",
  "cve_desc": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. All versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a `javascript:` link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin). The script would be capable of doing anything which is possible in the UI or via the API, such as creating, modifying, and deleting Kubernetes resources. A patch for this vulnerability has been released in the following Argo CD versions: v2.4.1, v2.3.5, v2.2.10 and v2.1.16. There are no completely-safe workarounds besides upgrading.",
  "repo": "argoproj/argo-cd",
  "patch_hash": "8bc3ef690de29c68a36f473908774346a44d4038",
  "patch_info": {
    "commit_hash": "8bc3ef690de29c68a36f473908774346a44d4038",
    "repo": "argoproj/argo-cd",
    "commit_url": "https://github.com/argoproj/argo-cd/commit/8bc3ef690de29c68a36f473908774346a44d4038",
    "files": [
      "server/server.go",
      "server/server_test.go",
      "ui/src/app/applications/components/application-urls.test.ts",
      "ui/src/app/applications/components/application-urls.tsx"
    ],
    "message": "Merge pull request from GHSA-h4w9-6x78-8vrj\n\nSigned-off-by: Michael Crenshaw <michael@crenshaw.dev>\n\nfix tests/lint\n\nSigned-off-by: Michael Crenshaw <michael@crenshaw.dev>",
    "before_after_code_files": [
      "server/server.go||server/server.go",
      "server/server_test.go||server/server_test.go",
      "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
      "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
    ]
  },
  "patch_diff": {
    "server/server.go||server/server.go": [
      "File: server/server.go -> server/server.go"
    ],
    "server/server_test.go||server/server_test.go": [
      "File: server/server_test.go -> server/server_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "508:   cm.Data[\"users.anonymous.enabled\"] = \"true\"",
      "509:  }",
      "510:  ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
      "512:  }))",
      "513:  ts.Config.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
      "514:   dexMockHandler(t, ts.URL)(w, r)",
      "",
      "[Removed Lines]",
      "511:   return  // Start with a placeholder. We need the server URL before setting up the real handler.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
      "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
      "3: test('rejects malicious URLs', () => {",
      "4:     expect(() => {",
      "5:         const _ = new ExternalLink('javascript:alert(\"hi\")');",
      "6:     }).toThrowError(InvalidExternalLinkError);",
      "7:     expect(() => {",
      "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
      "9:     }).toThrowError(InvalidExternalLinkError);",
      "10: });",
      "12: test('allows absolute URLs', () => {",
      "13:     expect(new ExternalLink('https://localhost:8080/applications').ref).toEqual('https://localhost:8080/applications');",
      "14: });",
      "16: test('allows relative URLs', () => {",
      "18:     window.location = new URL('https://localhost:8080/applications');",
      "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
      "20: });",
      "",
      "---------------"
    ],
    "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
      "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import {DropDownMenu} from 'argo-ui';",
      "2: import * as React from 'react';",
      "5:     public title: string;",
      "6:     public ref: string;",
      "",
      "[Removed Lines]",
      "4: class ExternalLink {",
      "",
      "[Added Lines]",
      "4: export class InvalidExternalLinkError extends Error {",
      "5:     constructor(message: string) {",
      "6:         super(message);",
      "7:         Object.setPrototypeOf(this, InvalidExternalLinkError.prototype);",
      "8:         this.name = 'InvalidExternalLinkError';",
      "9:     }",
      "10: }",
      "12: export class ExternalLink {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14:             this.title = url;",
      "15:             this.ref = url;",
      "16:         }",
      "17:     }",
      "18: }",
      "20: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
      "21:     const externalLinks: ExternalLink[] = [];",
      "22:     for (const url of urls || []) {",
      "24:     }",
      "",
      "[Removed Lines]",
      "23:         externalLinks.push(new ExternalLink(url));",
      "",
      "[Added Lines]",
      "25:         if (!ExternalLink.isValidURL(this.ref)) {",
      "26:             throw new InvalidExternalLinkError('Invalid URL');",
      "27:         }",
      "28:     }",
      "30:     private static isValidURL(url: string): boolean {",
      "31:         try {",
      "32:             const parsedUrl = new URL(url);",
      "33:             return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
      "34:         } catch (TypeError) {",
      "35:             try {",
      "37:                 const parsedUrl = new URL(url, window.location.origin);",
      "38:                 return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
      "39:             } catch (TypeError) {",
      "40:                 return false;",
      "41:             }",
      "42:         }",
      "49:         try {",
      "50:             const externalLink = new ExternalLink(url);",
      "51:             externalLinks.push(externalLink);",
      "52:         } catch (InvalidExternalLinkError) {",
      "53:             continue;",
      "54:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "048c025cfe0419c2c7eccd123216be492f4f808f",
      "candidate_info": {
        "commit_hash": "048c025cfe0419c2c7eccd123216be492f4f808f",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/048c025cfe0419c2c7eccd123216be492f4f808f",
        "files": [
          "ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx"
        ],
        "message": "Merge pull request from GHSA-h4w9-6x78-8vrj\n\nSigned-off-by: Michael Crenshaw <michael@crenshaw.dev>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
          "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
          "3: test('rejects malicious URLs', () => {",
          "4:     expect(() => {",
          "5:         const _ = new ExternalLink('javascript:alert(\"hi\")');",
          "6:     }).toThrowError(InvalidExternalLinkError);",
          "7:     expect(() => {",
          "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
          "9:     }).toThrowError(InvalidExternalLinkError);",
          "10: });",
          "12: test('allows absolute URLs', () => {",
          "13:     expect(new ExternalLink('https://localhost:8080/applications').ref).toEqual('https://localhost:8080/applications');",
          "14: });",
          "16: test('allows relative URLs', () => {",
          "18:     window.location = new URL('https://localhost:8080/applications');",
          "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
          "20: });",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
          "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {DropDownMenu} from 'argo-ui';",
          "2: import * as React from 'react';",
          "5:     public title: string;",
          "6:     public ref: string;",
          "",
          "[Removed Lines]",
          "4: class ExternalLink {",
          "",
          "[Added Lines]",
          "4: export class InvalidExternalLinkError extends Error {",
          "5:     constructor(message: string) {",
          "6:         super(message);",
          "7:         Object.setPrototypeOf(this, InvalidExternalLinkError.prototype);",
          "8:         this.name = 'InvalidExternalLinkError';",
          "9:     }",
          "10: }",
          "12: export class ExternalLink {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:             this.title = url;",
          "15:             this.ref = url;",
          "16:         }",
          "17:     }",
          "18: }",
          "20: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "21:     const externalLinks: ExternalLink[] = [];",
          "22:     for (const url of urls || []) {",
          "24:     }",
          "",
          "[Removed Lines]",
          "23:         externalLinks.push(new ExternalLink(url));",
          "",
          "[Added Lines]",
          "25:         if (!ExternalLink.isValidURL(this.ref)) {",
          "26:             throw new InvalidExternalLinkError('Invalid URL');",
          "27:         }",
          "28:     }",
          "30:     private static isValidURL(url: string): boolean {",
          "31:         try {",
          "32:             const parsedUrl = new URL(url);",
          "33:             return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "34:         } catch (TypeError) {",
          "35:             try {",
          "37:                 const parsedUrl = new URL(url, window.location.origin);",
          "38:                 return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "39:             } catch (TypeError) {",
          "40:                 return false;",
          "41:             }",
          "42:         }",
          "49:         try {",
          "50:             const externalLink = new ExternalLink(url);",
          "51:             externalLinks.push(externalLink);",
          "52:         } catch (InvalidExternalLinkError) {",
          "53:             continue;",
          "54:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05e9079233e8ae643610e9223c966430e3dbae78",
      "candidate_info": {
        "commit_hash": "05e9079233e8ae643610e9223c966430e3dbae78",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/05e9079233e8ae643610e9223c966430e3dbae78",
        "files": [
          "ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx"
        ],
        "message": "Merge pull request from GHSA-h4w9-6x78-8vrj\n\nSigned-off-by: Michael Crenshaw <michael@crenshaw.dev>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
          "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
          "3: test('rejects malicious URLs', () => {",
          "4:     expect(() => {",
          "5:         const _ = new ExternalLink('javascript:alert(\"hi\")');",
          "6:     }).toThrowError(InvalidExternalLinkError);",
          "7:     expect(() => {",
          "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
          "9:     }).toThrowError(InvalidExternalLinkError);",
          "10: });",
          "12: test('allows absolute URLs', () => {",
          "13:     expect(new ExternalLink('https://localhost:8080/applications').ref).toEqual('https://localhost:8080/applications');",
          "14: });",
          "16: test('allows relative URLs', () => {",
          "18:     window.location = new URL('https://localhost:8080/applications');",
          "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
          "20: });",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
          "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {DropDownMenu} from 'argo-ui';",
          "2: import * as React from 'react';",
          "5:     public title: string;",
          "6:     public ref: string;",
          "",
          "[Removed Lines]",
          "4: class ExternalLink {",
          "",
          "[Added Lines]",
          "4: export class InvalidExternalLinkError extends Error {",
          "5:     constructor(message: string) {",
          "6:         super(message);",
          "7:         Object.setPrototypeOf(this, InvalidExternalLinkError.prototype);",
          "8:         this.name = 'InvalidExternalLinkError';",
          "9:     }",
          "10: }",
          "12: export class ExternalLink {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:             this.title = url;",
          "15:             this.ref = url;",
          "16:         }",
          "17:     }",
          "18: }",
          "20: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "21:     const externalLinks: ExternalLink[] = [];",
          "22:     for (const url of urls || []) {",
          "24:     }",
          "",
          "[Removed Lines]",
          "23:         externalLinks.push(new ExternalLink(url));",
          "",
          "[Added Lines]",
          "25:         if (!ExternalLink.isValidURL(this.ref)) {",
          "26:             throw new InvalidExternalLinkError('Invalid URL');",
          "27:         }",
          "28:     }",
          "30:     private static isValidURL(url: string): boolean {",
          "31:         try {",
          "32:             const parsedUrl = new URL(url);",
          "33:             return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "34:         } catch (TypeError) {",
          "35:             try {",
          "37:                 const parsedUrl = new URL(url, window.location.origin);",
          "38:                 return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "39:             } catch (TypeError) {",
          "40:                 return false;",
          "41:             }",
          "42:         }",
          "49:         try {",
          "50:             const externalLink = new ExternalLink(url);",
          "51:             externalLinks.push(externalLink);",
          "52:         } catch (InvalidExternalLinkError) {",
          "53:             continue;",
          "54:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "937f42ffa453a06b897f6cb6aa94c15c12c6470b",
      "candidate_info": {
        "commit_hash": "937f42ffa453a06b897f6cb6aa94c15c12c6470b",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/937f42ffa453a06b897f6cb6aa94c15c12c6470b",
        "files": [
          "ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx"
        ],
        "message": "Merge pull request from GHSA-h4w9-6x78-8vrj\n\nSigned-off-by: Michael Crenshaw <michael@crenshaw.dev>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
          "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
          "3: test('rejects malicious URLs', () => {",
          "4:     expect(() => {",
          "5:         const _ = new ExternalLink('javascript:alert(\"hi\")');",
          "6:     }).toThrowError(InvalidExternalLinkError);",
          "7:     expect(() => {",
          "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
          "9:     }).toThrowError(InvalidExternalLinkError);",
          "10: });",
          "12: test('allows absolute URLs', () => {",
          "13:     expect(new ExternalLink('https://localhost:8080/applications').ref).toEqual('https://localhost:8080/applications');",
          "14: });",
          "16: test('allows relative URLs', () => {",
          "18:     window.location = new URL('https://localhost:8080/applications');",
          "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
          "20: });",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
          "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {DropDownMenu} from 'argo-ui';",
          "2: import * as React from 'react';",
          "5:     public title: string;",
          "6:     public ref: string;",
          "",
          "[Removed Lines]",
          "4: class ExternalLink {",
          "",
          "[Added Lines]",
          "4: export class InvalidExternalLinkError extends Error {",
          "5:     constructor(message: string) {",
          "6:         super(message);",
          "7:         Object.setPrototypeOf(this, InvalidExternalLinkError.prototype);",
          "8:         this.name = 'InvalidExternalLinkError';",
          "9:     }",
          "10: }",
          "12: export class ExternalLink {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:             this.title = url;",
          "15:             this.ref = url;",
          "16:         }",
          "17:     }",
          "18: }",
          "20: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "21:     const externalLinks: ExternalLink[] = [];",
          "22:     for (const url of urls || []) {",
          "24:     }",
          "",
          "[Removed Lines]",
          "23:         externalLinks.push(new ExternalLink(url));",
          "",
          "[Added Lines]",
          "25:         if (!ExternalLink.isValidURL(this.ref)) {",
          "26:             throw new InvalidExternalLinkError('Invalid URL');",
          "27:         }",
          "28:     }",
          "30:     private static isValidURL(url: string): boolean {",
          "31:         try {",
          "32:             const parsedUrl = new URL(url);",
          "33:             return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "34:         } catch (TypeError) {",
          "35:             try {",
          "37:                 const parsedUrl = new URL(url, window.location.origin);",
          "38:                 return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "39:             } catch (TypeError) {",
          "40:                 return false;",
          "41:             }",
          "42:         }",
          "49:         try {",
          "50:             const externalLink = new ExternalLink(url);",
          "51:             externalLinks.push(externalLink);",
          "52:         } catch (InvalidExternalLinkError) {",
          "53:             continue;",
          "54:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fd50ce8bda82028fd93c9de21eccf72607657cf",
      "candidate_info": {
        "commit_hash": "4fd50ce8bda82028fd93c9de21eccf72607657cf",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/4fd50ce8bda82028fd93c9de21eccf72607657cf",
        "files": [
          "ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx"
        ],
        "message": "Merge pull request from GHSA-h4w9-6x78-8vrj\n\nSigned-off-by: Michael Crenshaw <michael@crenshaw.dev>",
        "before_after_code_files": [
          "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
          "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ],
          "candidate": [
            "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts",
            "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/applications/components/application-urls.test.ts||ui/src/app/applications/components/application-urls.test.ts": [
          "File: ui/src/app/applications/components/application-urls.test.ts -> ui/src/app/applications/components/application-urls.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {ExternalLink, InvalidExternalLinkError} from './application-urls';",
          "3: test('rejects malicious URLs', () => {",
          "4:     expect(() => {",
          "5:         const _ = new ExternalLink('javascript:alert(\"hi\")');",
          "6:     }).toThrowError(InvalidExternalLinkError);",
          "7:     expect(() => {",
          "8:         const _ = new ExternalLink('data:text/html;<h1>hi</h1>');",
          "9:     }).toThrowError(InvalidExternalLinkError);",
          "10: });",
          "12: test('allows absolute URLs', () => {",
          "13:     expect(new ExternalLink('https://localhost:8080/applications').ref).toEqual('https://localhost:8080/applications');",
          "14: });",
          "16: test('allows relative URLs', () => {",
          "18:     window.location = new URL('https://localhost:8080/applications');",
          "19:     expect(new ExternalLink('/applications').ref).toEqual('/applications');",
          "20: });",
          "",
          "---------------"
        ],
        "ui/src/app/applications/components/application-urls.tsx||ui/src/app/applications/components/application-urls.tsx": [
          "File: ui/src/app/applications/components/application-urls.tsx -> ui/src/app/applications/components/application-urls.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {DropDownMenu} from 'argo-ui';",
          "2: import * as React from 'react';",
          "5:     public title: string;",
          "6:     public ref: string;",
          "",
          "[Removed Lines]",
          "4: class ExternalLink {",
          "",
          "[Added Lines]",
          "4: export class InvalidExternalLinkError extends Error {",
          "5:     constructor(message: string) {",
          "6:         super(message);",
          "7:         Object.setPrototypeOf(this, InvalidExternalLinkError.prototype);",
          "8:         this.name = 'InvalidExternalLinkError';",
          "9:     }",
          "10: }",
          "12: export class ExternalLink {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:             this.title = url;",
          "15:             this.ref = url;",
          "16:         }",
          "17:     }",
          "18: }",
          "20: export const ApplicationURLs = ({urls}: {urls: string[]}) => {",
          "21:     const externalLinks: ExternalLink[] = [];",
          "22:     for (const url of urls || []) {",
          "24:     }",
          "",
          "[Removed Lines]",
          "23:         externalLinks.push(new ExternalLink(url));",
          "",
          "[Added Lines]",
          "25:         if (!ExternalLink.isValidURL(this.ref)) {",
          "26:             throw new InvalidExternalLinkError('Invalid URL');",
          "27:         }",
          "28:     }",
          "30:     private static isValidURL(url: string): boolean {",
          "31:         try {",
          "32:             const parsedUrl = new URL(url);",
          "33:             return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "34:         } catch (TypeError) {",
          "35:             try {",
          "37:                 const parsedUrl = new URL(url, window.location.origin);",
          "38:                 return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';",
          "39:             } catch (TypeError) {",
          "40:                 return false;",
          "41:             }",
          "42:         }",
          "49:         try {",
          "50:             const externalLink = new ExternalLink(url);",
          "51:             externalLinks.push(externalLink);",
          "52:         } catch (InvalidExternalLinkError) {",
          "53:             continue;",
          "54:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}