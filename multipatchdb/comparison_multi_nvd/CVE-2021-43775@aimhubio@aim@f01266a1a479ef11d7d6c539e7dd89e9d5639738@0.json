{
  "cve_id": "CVE-2021-43775",
  "cve_desc": "Aim is an open-source, self-hosted machine learning experiment tracking tool. Versions of Aim prior to 3.1.0 are vulnerable to a path traversal attack. By manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. The vulnerability issue is resolved in Aim v3.1.0.",
  "repo": "aimhubio/aim",
  "patch_hash": "f01266a1a479ef11d7d6c539e7dd89e9d5639738",
  "patch_info": {
    "commit_hash": "f01266a1a479ef11d7d6c539e7dd89e9d5639738",
    "repo": "aimhubio/aim",
    "commit_url": "https://github.com/aimhubio/aim/pull/1003/commits/f01266a1a479ef11d7d6c539e7dd89e9d5639738",
    "files": [
      "aim/web/api/views.py"
    ],
    "message": "Fix security issue when incorrect path is given to the endpoint that serves static files which can lead to a leak of non wanted files (e.g. /static-files/../../../../etc/passwd)",
    "before_after_code_files": [
      "aim/web/api/views.py||aim/web/api/views.py"
    ]
  },
  "patch_diff": {
    "aim/web/api/views.py||aim/web/api/views.py": [
      "File: aim/web/api/views.py -> aim/web/api/views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import os",
      "3: from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter",
      "4: from fastapi.responses import FileResponse",
      "6: statics_router = APIRouter()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: from pathlib import Path",
      "6: from fastapi import HTTPException",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "9: @statics_router.get('/static-files/{path:path}/')",
      "10: async def serve_static_files(path):",
      "11:     from aim import web",
      "13:     compressed_file_name = '{}.gz'.format(static_file_name)",
      "14:     if os.path.exists(compressed_file_name):",
      "15:         return FileResponse(compressed_file_name, headers={'Content-Encoding': 'gzip'})",
      "",
      "[Removed Lines]",
      "12:     static_file_name = os.path.join(os.path.dirname(web.__file__), 'ui', 'build', path)",
      "",
      "[Added Lines]",
      "14:     static_file_root = os.path.join(os.path.dirname(web.__file__), 'ui', 'build')",
      "15:     static_file_name = os.path.join(static_file_root, path)",
      "17:     # check if path is leading inside ui/build directory",
      "18:     if not Path(static_file_root) in Path(static_file_name).resolve().parents:",
      "19:         raise HTTPException(404)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9e53df5e32d14bbd3a2c738e2db7187fb531e93",
      "candidate_info": {
        "commit_hash": "b9e53df5e32d14bbd3a2c738e2db7187fb531e93",
        "repo": "aimhubio/aim",
        "commit_url": "https://github.com/aimhubio/aim/commit/b9e53df5e32d14bbd3a2c738e2db7187fb531e93",
        "files": [
          "aim/web/api/views.py"
        ],
        "message": "Security issue fix for `/static-files/{path}` endpoint  (#1003)\n\n* Fix security issue when incorrect path is given to the endpoint that serves static files which can lead to a leak of non wanted files (e.g. /static-files/../../../../etc/passwd)",
        "before_after_code_files": [
          "aim/web/api/views.py||aim/web/api/views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/aimhubio/aim/pull/1003"
        ],
        "olp_code_files": {
          "patch": [
            "aim/web/api/views.py||aim/web/api/views.py"
          ],
          "candidate": [
            "aim/web/api/views.py||aim/web/api/views.py"
          ]
        }
      },
      "candidate_diff": {
        "aim/web/api/views.py||aim/web/api/views.py": [
          "File: aim/web/api/views.py -> aim/web/api/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import os",
          "3: from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter",
          "4: from fastapi.responses import FileResponse",
          "6: statics_router = APIRouter()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: from pathlib import Path",
          "6: from fastapi import HTTPException",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9: @statics_router.get('/static-files/{path:path}/')",
          "10: async def serve_static_files(path):",
          "11:     from aim import web",
          "13:     compressed_file_name = '{}.gz'.format(static_file_name)",
          "14:     if os.path.exists(compressed_file_name):",
          "15:         return FileResponse(compressed_file_name, headers={'Content-Encoding': 'gzip'})",
          "",
          "[Removed Lines]",
          "12:     static_file_name = os.path.join(os.path.dirname(web.__file__), 'ui', 'build', path)",
          "",
          "[Added Lines]",
          "14:     static_files_root = os.path.join(os.path.dirname(web.__file__), 'ui', 'build')",
          "15:     static_file_name = '/'.join((static_files_root, path))",
          "17:     # check if path is leading inside ui/build directory",
          "18:     if not Path(static_files_root) in Path(static_file_name).resolve().parents:",
          "19:         raise HTTPException(404)",
          "",
          "---------------"
        ]
      }
    }
  ]
}