{
  "cve_id": "CVE-2012-3408",
  "cve_desc": "lib/puppet/network/authstore.rb in Puppet before 2.7.18, and Puppet Enterprise before 2.5.2, supports use of IP addresses in certnames without warning of potential risks, which might allow remote attackers to spoof an agent by acquiring a previously used IP address.",
  "repo": "puppetlabs/puppet",
  "patch_hash": "ab9150baa1b738467a33b01df1d90e076253fbbd",
  "patch_info": {
    "commit_hash": "ab9150baa1b738467a33b01df1d90e076253fbbd",
    "repo": "puppetlabs/puppet",
    "commit_url": "https://github.com/puppetlabs/puppet/commit/ab9150baa1b738467a33b01df1d90e076253fbbd",
    "files": [
      "lib/puppet/network/authstore.rb",
      "spec/integration/network/rest_authconfig_spec.rb"
    ],
    "message": "Deprecate IP-based authentication\n\nThis will need to be made explicit in a future version, so it's good to\nget people to stop using it if possible.",
    "before_after_code_files": [
      "lib/puppet/network/authstore.rb||lib/puppet/network/authstore.rb",
      "spec/integration/network/rest_authconfig_spec.rb||spec/integration/network/rest_authconfig_spec.rb"
    ]
  },
  "patch_diff": {
    "lib/puppet/network/authstore.rb||lib/puppet/network/authstore.rb": [
      "File: lib/puppet/network/authstore.rb -> lib/puppet/network/authstore.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "151:       # Does this declaration match the name/ip combo?",
      "152:       def match?(name, ip)",
      "154:       end",
      "156:       # Set the pattern appropriately.  Also sets the name and length.",
      "",
      "[Removed Lines]",
      "153:         ip? ? pattern.include?(IPAddr.new(ip)) : matchname?(name)",
      "",
      "[Added Lines]",
      "153:         if ip?",
      "154:           if pattern.include?(IPAddr.new(ip))",
      "155:             Puppet.deprecation_warning \"Authentication based on IP address is deprecated; please use certname-based rules instead\"",
      "156:             true",
      "157:           else",
      "158:             false",
      "159:           end",
      "160:         else",
      "161:           matchname?(name)",
      "162:         end",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "213:       # Convert the name to a common pattern.",
      "214:       def munge_name(name)",
      "216:         # Change to name.downcase.split(\".\",-1).reverse for FQDN support",
      "217:         name.downcase.split(\".\").reverse",
      "218:       end",
      "",
      "[Removed Lines]",
      "215:         # LAK:NOTE http://snurl.com/21zf8  [groups_google_com]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "spec/integration/network/rest_authconfig_spec.rb||spec/integration/network/rest_authconfig_spec.rb": [
      "File: spec/integration/network/rest_authconfig_spec.rb -> spec/integration/network/rest_authconfig_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:   end",
      "46:   def request(args = {})",
      "50:     ['test', :find, args[:key], args]",
      "51:   end",
      "53:   it \"should support IPv4 address\" do",
      "54:     add_rule(\"allow 10.1.1.1\")",
      "",
      "[Removed Lines]",
      "47:     { :ip => '10.1.1.1', :node => 'host.domain.com', :key => 'key', :authenticated => true }.each do |k,v|",
      "48:       args[k] ||= v",
      "49:     end",
      "",
      "[Added Lines]",
      "47:     args = {",
      "48:       :key => 'key',",
      "49:       :node => 'host.domain.com',",
      "50:       :ip => '10.1.1.1',",
      "51:       :authenticated => true",
      "52:     }.merge(args)",
      "56:   it \"should warn when matching against IP addresses\" do",
      "57:     add_rule(\"allow 10.1.1.1\")",
      "59:     @auth.should allow(request)",
      "61:     @logs.should be_any {|log| log.level == :warning and log.message =~ /Authentication based on IP address is deprecated/}",
      "62:   end",
      "64:   it \"should not warn when matches against IP addresses fail\" do",
      "65:     add_rule(\"allow 10.1.1.2\")",
      "67:     @auth.should_not allow(request)",
      "69:     @logs.should_not be_any {|log| log.level == :warning and log.message =~ /Authentication based on IP address is deprecated/}",
      "70:   end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5814cdeb8e406ca4ef07b5ef795b01d01c5cbaa4",
      "candidate_info": {
        "commit_hash": "5814cdeb8e406ca4ef07b5ef795b01d01c5cbaa4",
        "repo": "puppetlabs/puppet",
        "commit_url": "https://github.com/puppetlabs/puppet/commit/5814cdeb8e406ca4ef07b5ef795b01d01c5cbaa4",
        "files": [
          "lib/puppet/network/authstore.rb"
        ],
        "message": "Don't issue deprecation warnings for allow_ip\n\nA deprecation warning was issued when IP addresses were used with allow. One\nhad slipped through and was still printing when allow_ip was used.",
        "before_after_code_files": [
          "lib/puppet/network/authstore.rb||lib/puppet/network/authstore.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/puppet/network/authstore.rb||lib/puppet/network/authstore.rb"
          ],
          "candidate": [
            "lib/puppet/network/authstore.rb||lib/puppet/network/authstore.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/puppet/network/authstore.rb||lib/puppet/network/authstore.rb": [
          "File: lib/puppet/network/authstore.rb -> lib/puppet/network/authstore.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:       # Does this declaration match the name/ip combo?",
          "160:       def match?(name, ip)",
          "161:         if ip?",
          "168:         else",
          "169:           matchname?(name)",
          "170:         end",
          "",
          "[Removed Lines]",
          "162:           if pattern.include?(IPAddr.new(ip))",
          "163:             Puppet.deprecation_warning \"Authentication based on IP address is deprecated; please use certname-based rules instead\"",
          "164:             true",
          "165:           else",
          "166:             false",
          "167:           end",
          "",
          "[Added Lines]",
          "162:           pattern.include?(IPAddr.new(ip))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e1ac474a8b399bf28dbf7df61680451d4911482",
      "candidate_info": {
        "commit_hash": "1e1ac474a8b399bf28dbf7df61680451d4911482",
        "repo": "puppetlabs/puppet",
        "commit_url": "https://github.com/puppetlabs/puppet/commit/1e1ac474a8b399bf28dbf7df61680451d4911482",
        "files": [
          "lib/puppet/network/authconfig.rb",
          "lib/puppet/network/authstore.rb",
          "spec/integration/network/rest_authconfig_spec.rb",
          "spec/unit/network/authstore_spec.rb"
        ],
        "message": "Add allow_ip and deny_ip keywords to auth.conf\n\nThis commit splits IP based authorization into its own keywords. The allow and\ndeny keywords no longer operate on IP addresses. The new keywords function\nlike allow and deny but operate exclusively on IPv4 and IPv6 addresses.\nBack references are currently unsupported for allow_ip and deny_ip.\n\nWithout this patch there is a security related issue where Puppet could not\ndistinguish between a certificate name that contains an IP address (cert auth)\nand an ip address itself being used to authenticate (ip based auth).  This\npatch fixes the problem by separating these out as described above.\n\nPaired-with: Jeff McCune <jeff@puppetlabs.com>",
        "before_after_code_files": [
          "lib/puppet/network/authconfig.rb||lib/puppet/network/authconfig.rb",
          "lib/puppet/network/authstore.rb||lib/puppet/network/authstore.rb",
          "spec/integration/network/rest_authconfig_spec.rb||spec/integration/network/rest_authconfig_spec.rb",
          "spec/unit/network/authstore_spec.rb||spec/unit/network/authstore_spec.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/puppet/network/authstore.rb||lib/puppet/network/authstore.rb",
            "spec/integration/network/rest_authconfig_spec.rb||spec/integration/network/rest_authconfig_spec.rb"
          ],
          "candidate": [
            "lib/puppet/network/authstore.rb||lib/puppet/network/authstore.rb",
            "spec/integration/network/rest_authconfig_spec.rb||spec/integration/network/rest_authconfig_spec.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/puppet/network/authconfig.rb||lib/puppet/network/authconfig.rb": [
          "File: lib/puppet/network/authconfig.rb -> lib/puppet/network/authconfig.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:             when /^path\\s+((?:~\\s+)?[^ ]+)\\s*$/ # \"path /path\" or \"path ~ regex\"",
          "153:               name = $1.chomp",
          "154:               right = newrights.newright(name, count, @file)",
          "156:               parse_right_directive(right, $1, $2, count)",
          "157:             else",
          "158:               raise ConfigurationError, \"Invalid line #{count}: #{line}\"",
          "",
          "[Removed Lines]",
          "155:             when /^\\s*(allow|deny|method|environment|auth(?:enticated)?)\\s+(.+?)(\\s*#.*)?$/",
          "",
          "[Added Lines]",
          "155:             when /^\\s*(allow(?:_ip)?|deny(?:_ip)?|method|environment|auth(?:enticated)?)\\s+(.+?)(\\s*#.*)?$/",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:         modify_right(right, :allow, value, \"allowing %s access\", count)",
          "185:       when \"deny\"",
          "186:         modify_right(right, :deny, value, \"denying %s access\", count)",
          "187:       when \"method\"",
          "188:         modify_right(right, :restrict_method, value, \"allowing 'method' %s\", count)",
          "189:       when \"environment\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:       when \"allow_ip\"",
          "188:         modify_right(right, :allow_ip, value, \"allowing IP %s access\", count)",
          "189:       when \"deny_ip\"",
          "190:         modify_right(right, :deny_ip, value, \"denying IP %s access\", count)",
          "",
          "---------------"
        ],
        "lib/puppet/network/authstore.rb||lib/puppet/network/authstore.rb": [
          "File: lib/puppet/network/authstore.rb -> lib/puppet/network/authstore.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   class Network::AuthStore",
          "12:     include Puppet::Util::Logging",
          "26:     # Is a given combination of name and ip address allowed?  If either input",
          "27:     # is non-nil, then both inputs must be provided.  If neither input",
          "28:     # is provided, then the authstore is considered local and defaults to \"true\".",
          "",
          "[Removed Lines]",
          "14:     # Mark a given pattern as allowed.",
          "15:     def allow(pattern)",
          "16:       # a simple way to allow anyone at all to connect",
          "17:       if pattern == \"*\"",
          "18:         @globalallow = true",
          "19:       else",
          "20:         store(:allow, pattern)",
          "21:       end",
          "23:       nil",
          "24:     end",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:       false",
          "50:     end",
          "52:     # Deny a given pattern.",
          "53:     def deny(pattern)",
          "54:       store(:deny, pattern)",
          "55:     end",
          "57:     # Is global allow enabled?",
          "58:     def globalallow?",
          "59:       @globalallow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:     # Mark a given pattern as allowed.",
          "41:     def allow(pattern)",
          "42:       # a simple way to allow anyone at all to connect",
          "43:       if pattern == \"*\"",
          "44:         @globalallow = true",
          "45:       else",
          "46:         store(:allow, pattern)",
          "47:       end",
          "49:       nil",
          "50:     end",
          "52:     def allow_ip(pattern)",
          "53:       store(:allow_ip, pattern)",
          "54:     end",
          "61:     def deny_ip(pattern)",
          "62:       store(:deny_ip, pattern)",
          "63:     end",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:       # The type of declaration: either :allow or :deny",
          "111:       attr_reader :type",
          "114:       attr_accessor :name",
          "116:       # The pattern we're matching against.  Can be an IPAddr instance,",
          "",
          "[Removed Lines]",
          "113:       # The name: :ip or :domain",
          "",
          "[Added Lines]",
          "120:       VALID_TYPES = [ :allow, :deny, :allow_ip, :deny_ip ]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:       # Set the pattern appropriately.  Also sets the name and length.",
          "166:       def pattern=(pattern)",
          "168:         @orig = pattern",
          "169:       end",
          "171:       # Mapping a type of statement into a return value.",
          "172:       def result",
          "174:       end",
          "176:       def to_s",
          "",
          "[Removed Lines]",
          "167:         parse(pattern)",
          "173:         type == :allow",
          "",
          "[Added Lines]",
          "175:         if [:allow_ip, :deny_ip].include?(self.type)",
          "176:           parse_ip(pattern)",
          "177:         else",
          "178:           parse(pattern)",
          "179:         end",
          "185:         [:allow, :allow_ip].include?(type)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "180:       # Set the declaration type.  Either :allow or :deny.",
          "181:       def type=(type)",
          "182:         type = type.intern",
          "184:         @type = type",
          "185:       end",
          "",
          "[Removed Lines]",
          "183:         raise ArgumentError, \"Invalid declaration type #{type}\" unless [:allow, :deny].include?(type)",
          "",
          "[Added Lines]",
          "195:         raise ArgumentError, \"Invalid declaration type #{type}\" unless VALID_TYPES.include?(type)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "235:       #     IP = \"#{IPv4}|#{IPv6_full}|(#{IPv6_partial}#{IPv4})\".gsub(/_/,'([0-9a-fA-F]{1,4})').gsub(/\\(/,'(?:')",
          "236:       # but ruby's ipaddr lib doesn't support the hybrid format",
          "237:       IP = \"#{IPv4}|#{IPv6_full}\".gsub(/_/,'([0-9a-fA-F]{1,4})').gsub(/\\(/,'(?:')",
          "240:         when /^(?:#{IP})\\/(\\d+)$/                                   # 12.34.56.78/24, a001:b002::efff/120, c444:1000:2000::9:192.168.0.1/112",
          "242:         when /^(#{IP})$/                                          # 10.20.30.40,",
          "244:         when /^(#{Octet}\\.){1,3}\\*$/                              # an ip address with a '*' at the end",
          "245:           segments = value.split(\".\")[0..-2]",
          "246:           bits = 8*segments.length",
          "248:         when /^(\\w[-\\w]*\\.)+[-\\w]+$/                              # a full hostname",
          "249:           # Change to /^(\\w[-\\w]*\\.)+[-\\w]+\\.?$/ for FQDN support",
          "250:           [:domain,:exact,nil,munge_name(value)]",
          "",
          "[Removed Lines]",
          "238:       def parse(value)",
          "239:         @name,@exact,@length,@pattern = *case value",
          "241:           [:ip,:inexact,$1.to_i,IPAddr.new(value)]",
          "243:           [:ip,:exact,nil,IPAddr.new(value)]",
          "247:           [:ip,:inexact,bits,IPAddr.new((segments+[0,0,0])[0,4].join(\".\") + \"/#{bits}\")]",
          "",
          "[Added Lines]",
          "251:       def parse_ip(value)",
          "252:         @name = :ip",
          "253:         @exact, @length, @pattern = *case value",
          "255:           [:inexact, $1.to_i, IPAddr.new(value)]",
          "257:           [:exact, nil, IPAddr.new(value)]",
          "261:           [:inexact, bits, IPAddr.new((segments+[0,0,0])[0,4].join(\".\") + \"/#{bits}\")]",
          "262:         else",
          "263:           raise AuthStoreError, \"Invalid IP pattern #{value}\"",
          "264:         end",
          "265:       end",
          "267:       def parse(value)",
          "268:         @name,@exact,@length,@pattern = *case value",
          "",
          "---------------"
        ],
        "spec/integration/network/rest_authconfig_spec.rb||spec/integration/network/rest_authconfig_spec.rb": [
          "File: spec/integration/network/rest_authconfig_spec.rb -> spec/integration/network/rest_authconfig_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     ['test', :find, args[:key], args]",
          "54:   end",
          "124:   end",
          "156:   end",
          "162:   end",
          "164: end",
          "",
          "[Removed Lines]",
          "56:   it \"should warn when matching against IP addresses\" do",
          "57:     add_rule(\"allow 10.1.1.1\")",
          "59:     @auth.should allow(request)",
          "61:     @logs.should be_any {|log| log.level == :warning and log.message =~ /Authentication based on IP address is deprecated/}",
          "62:   end",
          "64:   it \"should not warn when matches against IP addresses fail\" do",
          "65:     add_rule(\"allow 10.1.1.2\")",
          "67:     @auth.should_not allow(request)",
          "69:     @logs.should_not be_any {|log| log.level == :warning and log.message =~ /Authentication based on IP address is deprecated/}",
          "70:   end",
          "72:   it \"should support IPv4 address\" do",
          "73:     add_rule(\"allow 10.1.1.1\")",
          "75:     @auth.should allow(request)",
          "76:   end",
          "78:   it \"should support CIDR IPv4 address\" do",
          "79:     add_rule(\"allow 10.0.0.0/8\")",
          "81:     @auth.should allow(request)",
          "82:   end",
          "84:   it \"should support wildcard IPv4 address\" do",
          "85:     add_rule(\"allow 10.1.1.*\")",
          "87:     @auth.should allow(request)",
          "88:   end",
          "90:   it \"should support IPv6 address\" do",
          "91:     add_rule(\"allow 2001:DB8::8:800:200C:417A\")",
          "93:     @auth.should allow(request(:ip => '2001:DB8::8:800:200C:417A'))",
          "94:   end",
          "96:   it \"should support hostname\" do",
          "97:     add_rule(\"allow host.domain.com\")",
          "99:     @auth.should allow(request)",
          "100:   end",
          "102:   it \"should support wildcard host\" do",
          "103:     add_rule(\"allow *.domain.com\")",
          "105:     @auth.should allow(request)",
          "106:   end",
          "108:   it \"should support hostname backreferences\" do",
          "109:     add_regex_rule('^/test/([^/]+)$', \"allow $1.domain.com\")",
          "111:     @auth.should allow(request(:key => 'host'))",
          "112:   end",
          "114:   it \"should support opaque strings\" do",
          "115:     add_rule(\"allow this-is-opaque@or-not\")",
          "117:     @auth.should allow(request(:node => 'this-is-opaque@or-not'))",
          "118:   end",
          "120:   it \"should support opaque strings and backreferences\" do",
          "121:     add_regex_rule('^/test/([^/]+)$', \"allow $1\")",
          "123:     @auth.should allow(request(:key => 'this-is-opaque@or-not', :node => 'this-is-opaque@or-not'))",
          "126:   it \"should support hostname ending with '.'\" do",
          "127:     pending('bug #7589')",
          "128:     add_rule(\"allow host.domain.com.\")",
          "130:     @auth.should allow(request(:node => 'host.domain.com.'))",
          "131:   end",
          "133:   it \"should support hostname ending with '.' and backreferences\" do",
          "134:     pending('bug #7589')",
          "135:     add_regex_rule('^/test/([^/]+)$',\"allow $1\")",
          "137:     @auth.should allow(request(:node => 'host.domain.com.'))",
          "138:   end",
          "140:   it \"should support trailing whitespace\" do",
          "141:     add_rule('allow host.domain.com    ')",
          "143:     @auth.should allow(request)",
          "144:   end",
          "146:   it \"should support inlined comments\" do",
          "147:     add_rule('allow host.domain.com # will it work?')",
          "149:     @auth.should allow(request)",
          "150:   end",
          "152:   it \"should deny non-matching host\" do",
          "153:     add_rule(\"allow inexistant\")",
          "155:     @auth.should_not allow(request)",
          "158:   it \"should deny denied hosts\" do",
          "159:     add_rule(\"deny host.domain.com\")",
          "161:     @auth.should_not allow(request)",
          "",
          "[Added Lines]",
          "56:   describe \"allow\" do",
          "57:     it \"should not match IP addresses\" do",
          "58:       add_rule(\"allow 10.1.1.1\")",
          "60:       @auth.should_not allow(request)",
          "61:     end",
          "63:     it \"should not accept CIDR IPv4 address\" do",
          "64:       expect {",
          "65:         add_rule(\"allow 10.0.0.0/8\")",
          "66:       }.to raise_error Puppet::ConfigurationError, /Invalid pattern 10\\.0\\.0\\.0\\/8/",
          "67:     end",
          "69:     it \"should not match wildcard IPv4 address\" do",
          "70:       expect {",
          "71:         add_rule(\"allow 10.1.1.*\")",
          "73:     end",
          "75:     it \"should not match IPv6 address\" do",
          "76:       expect {",
          "77:         add_rule(\"allow 2001:DB8::8:800:200C:417A\")",
          "78:       }.to raise_error Puppet::ConfigurationError, /Invalid pattern 2001/",
          "79:     end",
          "81:     it \"should support hostname\" do",
          "82:       add_rule(\"allow host.domain.com\")",
          "84:       @auth.should allow(request)",
          "85:     end",
          "87:     it \"should support wildcard host\" do",
          "88:       add_rule(\"allow *.domain.com\")",
          "90:       @auth.should allow(request)",
          "91:     end",
          "93:     it \"should support hostname backreferences\" do",
          "94:       add_regex_rule('^/test/([^/]+)$', \"allow $1.domain.com\")",
          "96:       @auth.should allow(request(:key => 'host'))",
          "97:     end",
          "99:     it \"should support opaque strings\" do",
          "100:       add_rule(\"allow this-is-opaque@or-not\")",
          "102:       @auth.should allow(request(:node => 'this-is-opaque@or-not'))",
          "103:     end",
          "105:     it \"should support opaque strings and backreferences\" do",
          "106:       add_regex_rule('^/test/([^/]+)$', \"allow $1\")",
          "108:       @auth.should allow(request(:key => 'this-is-opaque@or-not', :node => 'this-is-opaque@or-not'))",
          "109:     end",
          "111:     it \"should support hostname ending with '.'\" do",
          "112:       pending('bug #7589')",
          "113:       add_rule(\"allow host.domain.com.\")",
          "115:       @auth.should allow(request(:node => 'host.domain.com.'))",
          "116:     end",
          "118:     it \"should support hostname ending with '.' and backreferences\" do",
          "119:       pending('bug #7589')",
          "120:       add_regex_rule('^/test/([^/]+)$',\"allow $1\")",
          "122:       @auth.should allow(request(:node => 'host.domain.com.'))",
          "123:     end",
          "125:     it \"should support trailing whitespace\" do",
          "126:       add_rule('allow host.domain.com    ')",
          "128:       @auth.should allow(request)",
          "129:     end",
          "131:     it \"should support inlined comments\" do",
          "132:       add_rule('allow host.domain.com # will it work?')",
          "134:       @auth.should allow(request)",
          "135:     end",
          "137:     it \"should deny non-matching host\" do",
          "138:       add_rule(\"allow inexistant\")",
          "140:       @auth.should_not allow(request)",
          "141:     end",
          "144:   describe \"allow_ip\" do",
          "145:     it \"should not warn when matches against IP addresses fail\" do",
          "146:       add_rule(\"allow_ip 10.1.1.2\")",
          "148:       @auth.should_not allow(request)",
          "150:       @logs.should_not be_any {|log| log.level == :warning and log.message =~ /Authentication based on IP address is deprecated/}",
          "151:     end",
          "153:     it \"should support IPv4 address\" do",
          "154:       add_rule(\"allow_ip 10.1.1.1\")",
          "156:       @auth.should allow(request)",
          "157:     end",
          "159:     it \"should support CIDR IPv4 address\" do",
          "160:       add_rule(\"allow_ip 10.0.0.0/8\")",
          "162:       @auth.should allow(request)",
          "163:     end",
          "165:     it \"should support wildcard IPv4 address\" do",
          "166:       add_rule(\"allow_ip 10.1.1.*\")",
          "168:       @auth.should allow(request)",
          "169:     end",
          "171:     it \"should support IPv6 address\" do",
          "172:       add_rule(\"allow_ip 2001:DB8::8:800:200C:417A\")",
          "174:       @auth.should allow(request(:ip => '2001:DB8::8:800:200C:417A'))",
          "175:     end",
          "177:     it \"should support hostname\" do",
          "178:       expect {",
          "179:         add_rule(\"allow_ip host.domain.com\")",
          "180:       }.to raise_error Puppet::ConfigurationError, /Invalid IP pattern host.domain.com/",
          "181:     end",
          "184:   describe \"deny\" do",
          "185:     it \"should deny denied hosts\" do",
          "186:       add_rule <<-EOALLOWRULE",
          "187:         deny host.domain.com",
          "188:         allow *.domain.com",
          "189:       EOALLOWRULE",
          "191:       @auth.should_not allow(request)",
          "192:     end",
          "194:     it \"denies denied hosts after allowing them\" do",
          "195:       add_rule <<-EOALLOWRULE",
          "196:         allow *.domain.com",
          "197:         deny host.domain.com",
          "198:       EOALLOWRULE",
          "200:       @auth.should_not allow(request)",
          "201:     end",
          "203:     it \"should not deny based on IP\" do",
          "204:       add_rule <<-EOALLOWRULE",
          "205:         deny 10.1.1.1",
          "206:         allow host.domain.com",
          "207:       EOALLOWRULE",
          "209:       @auth.should allow(request)",
          "210:     end",
          "212:     it \"should not deny based on IP (ordering #2)\" do",
          "213:       add_rule <<-EOALLOWRULE",
          "214:         allow host.domain.com",
          "215:         deny 10.1.1.1",
          "216:       EOALLOWRULE",
          "218:       @auth.should allow(request)",
          "219:     end",
          "222:   describe \"deny_ip\" do",
          "223:     it \"should deny based on IP\" do",
          "224:       add_rule <<-EOALLOWRULE",
          "225:         deny_ip 10.1.1.1",
          "226:         allow host.domain.com",
          "227:       EOALLOWRULE",
          "229:       @auth.should_not allow(request)",
          "230:     end",
          "232:     it \"should deny based on IP (ordering #2)\" do",
          "233:       #XXX Is this right? Seems like it should be allowed based on ordering",
          "234:       add_rule <<-EOALLOWRULE",
          "235:         allow host.domain.com",
          "236:         deny_ip 10.1.1.1",
          "237:       EOALLOWRULE",
          "239:       @auth.should_not allow(request)",
          "240:     end",
          "241:   end",
          "",
          "---------------"
        ],
        "spec/unit/network/authstore_spec.rb||spec/unit/network/authstore_spec.rb": [
          "File: spec/unit/network/authstore_spec.rb -> spec/unit/network/authstore_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     end",
          "23:     it \"should not be empty if at least one allow has been entered\" do",
          "26:       @authstore.should_not be_empty",
          "27:     end",
          "29:     it \"should not be empty if at least one deny has been entered\" do",
          "32:       @authstore.should_not be_empty",
          "33:     end",
          "",
          "[Removed Lines]",
          "24:       @authstore.allow('1.1.1.*')",
          "30:       @authstore.deny('1.1.1.*')",
          "",
          "[Added Lines]",
          "24:       @authstore.allow_ip('1.1.1.*')",
          "30:       @authstore.deny_ip('1.1.1.*')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   ['100.101.99.98','100.100.100.100','1.2.3.4','11.22.33.44'].each { |ip|",
          "71:     describe \"when the pattern is a simple numeric IP such as #{ip}\" do",
          "72:       before :each do",
          "74:       end",
          "75:       it \"should match the specified IP\" do",
          "76:         @declaration.should be_match('www.testsite.org',ip)",
          "",
          "[Removed Lines]",
          "73:         @declaration = Puppet::Network::AuthStore::Declaration.new(:allow,ip)",
          "",
          "[Added Lines]",
          "73:         @declaration = Puppet::Network::AuthStore::Declaration.new(:allow_ip,ip)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:       describe \"when the pattern is a IP mask with #{n} numeric segments and a *\" do",
          "85:         before :each do",
          "86:           @ip_pattern = ip.split('.')[0,n].join('.')+'.*'",
          "88:         end",
          "89:         it \"should match an IP in the range\" do",
          "90:           @declaration.should be_match('www.testsite.org',ip)",
          "",
          "[Removed Lines]",
          "87:           @declaration = Puppet::Network::AuthStore::Declaration.new(:allow,@ip_pattern)",
          "",
          "[Added Lines]",
          "87:           @declaration = Puppet::Network::AuthStore::Declaration.new(:allow_ip,@ip_pattern)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:   }",
          "104:   describe \"when the pattern is a numeric IP with a back reference\" do",
          "114:     end",
          "115:   end",
          "",
          "[Removed Lines]",
          "105:     before :each do",
          "106:       @ip = '100.101.$1'",
          "107:       @declaration = Puppet::Network::AuthStore::Declaration.new(:allow,@ip).interpolate('12.34'.match(/(.*)/))",
          "108:     end",
          "109:     it \"should match an IP with the appropriate interpolation\" do",
          "110:       @declaration.should be_match('www.testsite.org',@ip.sub(/\\$1/,'12.34'))",
          "111:     end",
          "112:     it \"should not match other IPs\" do",
          "113:       @declaration.should_not be_match('www.testsite.org',@ip.sub(/\\$1/,'66.34'))",
          "",
          "[Added Lines]",
          "105:     pending(\"implementation of backreferences for IP\") do",
          "106:       before :each do",
          "107:         @ip = '100.101.$1'",
          "108:         @declaration = Puppet::Network::AuthStore::Declaration.new(:allow_ip,@ip).interpolate('12.34'.match(/(.*)/))",
          "109:       end",
          "110:       it \"should match an IP with the appropriate interpolation\" do",
          "111:         @declaration.should be_match('www.testsite.org',@ip.sub(/\\$1/,'12.34'))",
          "112:       end",
          "113:       it \"should not match other IPs\" do",
          "114:         @declaration.should_not be_match('www.testsite.org',@ip.sub(/\\$1/,'66.34'))",
          "115:       end",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "278:   ].each { |ip|",
          "279:     describe \"when the pattern is a valid IP such as #{ip}\" do",
          "280:       before :each do",
          "282:       end",
          "283:       it \"should match the specified IP\" do",
          "284:         @declaration.should be_match('www.testsite.org',ip)",
          "",
          "[Removed Lines]",
          "281:         @declaration = Puppet::Network::AuthStore::Declaration.new(:allow,ip)",
          "",
          "[Added Lines]",
          "283:         @declaration = Puppet::Network::AuthStore::Declaration.new(:allow_ip,ip)",
          "",
          "---------------"
        ]
      }
    }
  ]
}