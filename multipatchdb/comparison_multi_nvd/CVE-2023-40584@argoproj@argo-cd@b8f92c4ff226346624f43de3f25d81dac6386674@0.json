{
  "cve_id": "CVE-2023-40584",
  "cve_desc": "Argo CD is a declarative continuous deployment for Kubernetes. All versions of ArgoCD starting from v2.4 have a bug where the ArgoCD repo-server component is vulnerable to a Denial-of-Service attack vector. Specifically, the said component extracts a user-controlled tar.gz file without validating the size of its inner files. As a result, a malicious, low-privileged user can send a malicious tar.gz file that exploits this vulnerability to the repo-server, thereby harming the system's functionality and availability. Additionally, the repo-server is susceptible to another vulnerability due to the fact that it does not check the extracted file permissions before attempting to delete them. Consequently, an attacker can craft a malicious tar.gz archive in a way that prevents the deletion of its inner files when the manifest generation process is completed. A patch for this vulnerability has been released in versions 2.6.15, 2.7.14, and 2.8.3. Users are advised to upgrade. The only way to completely resolve the issue is to upgrade, however users unable to upgrade should configure RBAC (Role-Based Access Control) and provide access for configuring applications only to a limited number of administrators. These administrators should utilize trusted and verified Helm charts.",
  "repo": "argoproj/argo-cd",
  "patch_hash": "b8f92c4ff226346624f43de3f25d81dac6386674",
  "patch_info": {
    "commit_hash": "b8f92c4ff226346624f43de3f25d81dac6386674",
    "repo": "argoproj/argo-cd",
    "commit_url": "https://github.com/argoproj/argo-cd/commit/b8f92c4ff226346624f43de3f25d81dac6386674",
    "files": [
      "cmd/argocd-repo-server/commands/argocd_repo_server.go",
      "docs/operator-manual/server-commands/argocd-repo-server.md",
      "manifests/base/repo-server/argocd-repo-server-deployment.yaml",
      "manifests/core-install.yaml",
      "manifests/ha/install.yaml",
      "manifests/ha/namespace-install.yaml",
      "manifests/install.yaml",
      "manifests/namespace-install.yaml",
      "reposerver/repository/repository.go",
      "util/helm/client.go",
      "util/helm/client_test.go",
      "util/helm/mocks/Client.go"
    ],
    "message": "Merge pull request from GHSA-g687-f2gx-6wm8\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n---------\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>",
    "before_after_code_files": [
      "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
      "reposerver/repository/repository.go||reposerver/repository/repository.go",
      "util/helm/client.go||util/helm/client.go",
      "util/helm/client_test.go||util/helm/client_test.go",
      "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
    ]
  },
  "patch_diff": {
    "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go": [
      "File: cmd/argocd-repo-server/commands/argocd_repo_server.go -> cmd/argocd-repo-server/commands/argocd_repo_server.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:   allowOutOfBoundsSymlinks          bool",
      "66:   streamedManifestMaxTarSize        string",
      "67:   streamedManifestMaxExtractedSize  string",
      "68:  )",
      "69:  var command = cobra.Command{",
      "70:   Use:               cliName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "68:   helmManifestMaxExtractedSize      string",
      "69:   disableManifestMaxExtractedSize   bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "103:    streamedManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(streamedManifestMaxExtractedSize)",
      "104:    errors.CheckError(err)",
      "106:    askPassServer := askpass.NewServer()",
      "107:    metricsServer := metrics.NewMetricsServer()",
      "108:    cacheutil.CollectMetrics(redisClient, metricsServer)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:    helmManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(helmManifestMaxExtractedSize)",
      "109:    errors.CheckError(err)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "117:     AllowOutOfBoundsSymlinks:                     allowOutOfBoundsSymlinks,",
      "118:     StreamedManifestMaxExtractedSize:             streamedManifestMaxExtractedSizeQuantity.ToDec().Value(),",
      "119:     StreamedManifestMaxTarSize:                   streamedManifestMaxTarSizeQuantity.ToDec().Value(),",
      "120:    }, askPassServer)",
      "121:    errors.CheckError(err)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "125:     HelmManifestMaxExtractedSize:                 helmManifestMaxExtractedSizeQuantity.ToDec().Value(),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "197:  command.Flags().BoolVar(&allowOutOfBoundsSymlinks, \"allow-oob-symlinks\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS\", false), \"Allow out-of-bounds symlinks in repositories (not recommended)\")",
      "198:  command.Flags().StringVar(&streamedManifestMaxTarSize, \"streamed-manifest-max-tar-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE\", \"100M\"), \"Maximum size of streamed manifest archives\")",
      "199:  command.Flags().StringVar(&streamedManifestMaxExtractedSize, \"streamed-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of streamed manifest archives when extracted\")",
      "200:  tlsConfigCustomizerSrc = tls.AddTLSFlagsToCmd(&command)",
      "201:  cacheSrc = reposervercache.AddCacheFlagsToCmd(&command, func(client *redis.Client) {",
      "202:   redisClient = client",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "206:  command.Flags().StringVar(&helmManifestMaxExtractedSize, \"helm-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of helm manifest archives when extracted\")",
      "207:  command.Flags().BoolVar(&disableManifestMaxExtractedSize, \"disable-helm-manifest-max-extracted-size\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", false), \"Disable maximum size of helm manifest archives when extracted\")",
      "",
      "---------------"
    ],
    "reposerver/repository/repository.go||reposerver/repository/repository.go": [
      "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:  AllowOutOfBoundsSymlinks                     bool",
      "107:  StreamedManifestMaxExtractedSize             int64",
      "108:  StreamedManifestMaxTarSize                   int64",
      "109: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "109:  HelmManifestMaxExtractedSize                 int64",
      "110:  DisableHelmManifestMaxExtractedSize          bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "345:   if source.Helm != nil {",
      "346:    helmPassCredentials = source.Helm.PassCredentials",
      "347:   }",
      "349:   if err != nil {",
      "350:    return err",
      "351:   }",
      "",
      "[Removed Lines]",
      "348:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials)",
      "",
      "[Added Lines]",
      "350:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials, s.initConstants.HelmManifestMaxExtractedSize, s.initConstants.DisableHelmManifestMaxExtractedSize)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2266:  if err != nil {",
      "2267:   return nil, fmt.Errorf(\"helm client error: %v\", err)",
      "2268:  }",
      "2270:  if err != nil {",
      "2271:   return nil, fmt.Errorf(\"error extracting chart: %v\", err)",
      "2272:  }",
      "",
      "[Removed Lines]",
      "2269:  chartPath, closer, err := helmClient.ExtractChart(q.Name, revision, false)",
      "",
      "[Added Lines]",
      "2271:  chartPath, closer, err := helmClient.ExtractChart(q.Name, revision, false, s.initConstants.HelmManifestMaxExtractedSize, s.initConstants.DisableHelmManifestMaxExtractedSize)",
      "",
      "---------------"
    ],
    "util/helm/client.go||util/helm/client.go": [
      "File: util/helm/client.go -> util/helm/client.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "8:  \"encoding/json\"",
      "9:  \"errors\"",
      "10:  \"fmt\"",
      "11:  \"io\"",
      "12:  \"net/http\"",
      "13:  \"net/url\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25:  \"oras.land/oras-go/v2/registry/remote/auth\"",
      "27:  \"github.com/argoproj/argo-cd/v2/util/cache\"",
      "29:  argoio \"github.com/argoproj/argo-cd/v2/util/io\"",
      "30:  \"github.com/argoproj/argo-cd/v2/util/io/files\"",
      "31:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
      "",
      "[Removed Lines]",
      "28:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53: type Client interface {",
      "54:  CleanChartCache(chart string, version string) error",
      "56:  GetIndex(noCache bool) (*Index, error)",
      "57:  GetTags(chart string, noCache bool) (*TagsList, error)",
      "58:  TestHelmOCI() (bool, error)",
      "",
      "[Removed Lines]",
      "55:  ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error)",
      "",
      "[Added Lines]",
      "55:  ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "122:  return os.RemoveAll(cachePath)",
      "123: }",
      "127:  helmCmd, err := NewCmdWithVersion(\"\", HelmV3, c.enableOci, c.proxy)",
      "",
      "[Removed Lines]",
      "125: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error) {",
      "",
      "[Added Lines]",
      "125: func untarChart(tempDir string, cachedChartPath string, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) error {",
      "126:  if disableManifestMaxExtractedSize {",
      "127:   cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
      "128:   cmd.Dir = tempDir",
      "129:   _, err := executil.Run(cmd)",
      "130:   return err",
      "131:  }",
      "132:  reader, err := os.Open(cachedChartPath)",
      "133:  if err != nil {",
      "134:   return err",
      "135:  }",
      "136:  return files.Untgz(tempDir, reader, manifestMaxExtractedSize, false)",
      "137: }",
      "139: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "196:   if len(infos) != 1 {",
      "197:    return \"\", nil, fmt.Errorf(\"expected 1 file, found %v\", len(infos))",
      "198:   }",
      "199:   err = os.Rename(filepath.Join(tempDest, infos[0].Name()), cachedChartPath)",
      "200:   if err != nil {",
      "201:    return \"\", nil, err",
      "202:   }",
      "203:  }",
      "208:  if err != nil {",
      "209:   _ = os.RemoveAll(tempDir)",
      "210:   return \"\", nil, err",
      "",
      "[Removed Lines]",
      "205:  cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
      "206:  cmd.Dir = tempDir",
      "207:  _, err = executil.Run(cmd)",
      "",
      "[Added Lines]",
      "220:  err = untarChart(tempDir, cachedChartPath, manifestMaxExtractedSize, disableManifestMaxExtractedSize)",
      "",
      "---------------"
    ],
    "util/helm/client_test.go||util/helm/client_test.go": [
      "File: util/helm/client_test.go -> util/helm/client_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:  \"bytes\"",
      "5:  \"encoding/json\"",
      "6:  \"fmt\"",
      "7:  \"os\"",
      "8:  \"strings\"",
      "9:  \"testing\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7:  \"math\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "72: func Test_nativeHelmChart_ExtractChart(t *testing.T) {",
      "73:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
      "75:  assert.NoError(t, err)",
      "76:  defer io.Close(closer)",
      "77:  info, err := os.Stat(path)",
      "",
      "[Removed Lines]",
      "74:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
      "",
      "[Added Lines]",
      "75:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "79:  assert.True(t, info.IsDir())",
      "80: }",
      "82: func Test_nativeHelmChart_ExtractChart_insecure(t *testing.T) {",
      "83:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{InsecureSkipVerify: true}, false, \"\")",
      "85:  assert.NoError(t, err)",
      "86:  defer io.Close(closer)",
      "87:  info, err := os.Stat(path)",
      "",
      "[Removed Lines]",
      "84:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
      "",
      "[Added Lines]",
      "83: func Test_nativeHelmChart_ExtractChartWithLimiter(t *testing.T) {",
      "84:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
      "85:  _, _, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, 100, false)",
      "86:  assert.Error(t, err, \"error while iterating on tar reader: unexpected EOF\")",
      "87: }",
      "91:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
      "",
      "---------------"
    ],
    "util/helm/mocks/Client.go||util/helm/mocks/Client.go": [
      "File: util/helm/mocks/Client.go -> util/helm/mocks/Client.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: }",
      "33:  ret := _m.Called(chart, version)",
      "35:  var r0 string",
      "",
      "[Removed Lines]",
      "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error) {",
      "",
      "[Added Lines]",
      "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, io.Closer, error) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0d1d1a1b18bc0b33b59ee971b379ffb85bfe2d19",
      "candidate_info": {
        "commit_hash": "0d1d1a1b18bc0b33b59ee971b379ffb85bfe2d19",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/0d1d1a1b18bc0b33b59ee971b379ffb85bfe2d19",
        "files": [
          ".golangci.yaml",
          "util/grpc/errors_test.go",
          "util/grpc/logging_test.go",
          "util/helm/client_test.go",
          "util/helm/cmd_test.go",
          "util/helm/helm_test.go",
          "util/helm/index_test.go",
          "util/helm/tags_test.go",
          "util/http/http_test.go",
          "util/io/bytereadseeker_test.go",
          "util/io/files/tar_test.go",
          "util/io/path/resolved_test.go",
          "util/kube/kube_test.go",
          "util/kustomize/kustomize_test.go",
          "util/lua/custom_actions_test.go",
          "util/lua/lua_test.go",
          "util/notification/settings/legacy_test.go"
        ],
        "message": "chore: extend require-error rule from testifylint (#18675)\n\n* chore: extend require-error rule from testifylint\n\nSigned-off-by: Matthieu MOREL <matthieu.morel35@gmail.com>\n\n* Update helm_test.go\n\nSigned-off-by: Matthieu MOREL <matthieu.morel35@gmail.com>\n\n---------\n\nSigned-off-by: Matthieu MOREL <matthieu.morel35@gmail.com>",
        "before_after_code_files": [
          "util/grpc/errors_test.go||util/grpc/errors_test.go",
          "util/grpc/logging_test.go||util/grpc/logging_test.go",
          "util/helm/client_test.go||util/helm/client_test.go",
          "util/helm/cmd_test.go||util/helm/cmd_test.go",
          "util/helm/helm_test.go||util/helm/helm_test.go",
          "util/helm/index_test.go||util/helm/index_test.go",
          "util/helm/tags_test.go||util/helm/tags_test.go",
          "util/http/http_test.go||util/http/http_test.go",
          "util/io/bytereadseeker_test.go||util/io/bytereadseeker_test.go",
          "util/io/files/tar_test.go||util/io/files/tar_test.go",
          "util/io/path/resolved_test.go||util/io/path/resolved_test.go",
          "util/kube/kube_test.go||util/kube/kube_test.go",
          "util/kustomize/kustomize_test.go||util/kustomize/kustomize_test.go",
          "util/lua/custom_actions_test.go||util/lua/custom_actions_test.go",
          "util/lua/lua_test.go||util/lua/lua_test.go",
          "util/notification/settings/legacy_test.go||util/notification/settings/legacy_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/helm/client_test.go||util/helm/client_test.go"
          ],
          "candidate": [
            "util/helm/client_test.go||util/helm/client_test.go"
          ]
        }
      },
      "candidate_diff": {
        "util/grpc/errors_test.go||util/grpc/errors_test.go": [
          "File: util/grpc/errors_test.go -> util/grpc/errors_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  \"k8s.io/apimachinery/pkg/runtime/schema\"",
          "13:  \"github.com/stretchr/testify/assert\"",
          "14: )",
          "16: func Test_gitErrToGRPC(t *testing.T) {",
          "17:  var ok bool",
          "20:  defaultErrorMsg := \"default error\"",
          "21:  defaultError := gitErrToGRPC(errors.New(defaultErrorMsg))",
          "",
          "[Removed Lines]",
          "18:  assert.NoError(t, gitErrToGRPC(nil))",
          "",
          "[Added Lines]",
          "14:  \"github.com/stretchr/testify/require\"",
          "19:  require.NoError(t, gitErrToGRPC(nil))",
          "",
          "---------------"
        ],
        "util/grpc/logging_test.go||util/grpc/logging_test.go": [
          "File: util/grpc/logging_test.go -> util/grpc/logging_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"github.com/golang-jwt/jwt/v4\"",
          "10:  \"github.com/sirupsen/logrus\"",
          "11:  \"github.com/stretchr/testify/assert\"",
          "12:  \"google.golang.org/grpc\"",
          "14:  \"github.com/argoproj/argo-cd/v2/pkg/apiclient/account\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:  }",
          "34:  interceptor := PayloadUnaryServerInterceptor(entry, false, decider)",
          "35:  _, err := interceptor(c, req, info, handler)",
          "38:  out := buf.String()",
          "39:  assert.Contains(t, out, fmt.Sprintf(`\"grpc.request.content\":{\"name\":\"%s\"`, req.Name))",
          "",
          "[Removed Lines]",
          "36:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "37:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:   interceptor := PayloadUnaryServerInterceptor(entry, true, decider)",
          "66:   _, err := interceptor(c, req, info, handler)",
          "69:   out := buf.String()",
          "70:   assert.Contains(t, out, \"expected-group-claim\")",
          "",
          "[Removed Lines]",
          "67:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "68:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "81:   interceptor := PayloadUnaryServerInterceptor(entry, true, decider)",
          "83:   _, err := interceptor(c, req, info, handler)",
          "86:   out := buf.String()",
          "87:   assert.NotContains(t, out, \"expected-group-claim\")",
          "",
          "[Removed Lines]",
          "84:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "85:   require.NoError(t, err)",
          "",
          "---------------"
        ],
        "util/helm/client_test.go||util/helm/client_test.go": [
          "File: util/helm/client_test.go -> util/helm/client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  t.Run(\"Invalid\", func(t *testing.T) {",
          "38:   client := NewClient(\"\", Creds{}, false, \"\")",
          "39:   _, err := client.GetIndex(false, 10000)",
          "41:  })",
          "42:  t.Run(\"Stable\", func(t *testing.T) {",
          "43:   client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "44:   index, err := client.GetIndex(false, 10000)",
          "46:   assert.NotNil(t, index)",
          "47:  })",
          "48:  t.Run(\"BasicAuth\", func(t *testing.T) {",
          "",
          "[Removed Lines]",
          "40:   assert.Error(t, err)",
          "45:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "40:   require.Error(t, err)",
          "45:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:    Password: \"my-username\",",
          "52:   }, false, \"\")",
          "53:   index, err := client.GetIndex(false, 10000)",
          "55:   assert.NotNil(t, index)",
          "56:  })",
          "",
          "[Removed Lines]",
          "54:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "54:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:   client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\", WithIndexCache(&fakeIndexCache{data: data.Bytes()}))",
          "65:   index, err := client.GetIndex(false, 10000)",
          "68:   assert.Equal(t, fakeIndex, *index)",
          "69:  })",
          "",
          "[Removed Lines]",
          "67:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "67:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79: func Test_nativeHelmChart_ExtractChart(t *testing.T) {",
          "80:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "81:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", \"\", false, math.MaxInt64, true)",
          "83:  defer io.Close(closer)",
          "84:  info, err := os.Stat(path)",
          "86:  assert.True(t, info.IsDir())",
          "87: }",
          "89: func Test_nativeHelmChart_ExtractChartWithLimiter(t *testing.T) {",
          "90:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "91:  _, _, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", \"\", false, 100, false)",
          "93: }",
          "95: func Test_nativeHelmChart_ExtractChart_insecure(t *testing.T) {",
          "96:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{InsecureSkipVerify: true}, false, \"\")",
          "97:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", \"\", false, math.MaxInt64, true)",
          "99:  defer io.Close(closer)",
          "100:  info, err := os.Stat(path)",
          "102:  assert.True(t, info.IsDir())",
          "103: }",
          "",
          "[Removed Lines]",
          "82:  assert.NoError(t, err)",
          "85:  assert.NoError(t, err)",
          "92:  assert.Error(t, err, \"error while iterating on tar reader: unexpected EOF\")",
          "98:  assert.NoError(t, err)",
          "101:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "82:  require.NoError(t, err)",
          "85:  require.NoError(t, err)",
          "92:  require.Error(t, err, \"error while iterating on tar reader: unexpected EOF\")",
          "98:  require.NoError(t, err)",
          "101:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147:   want := rawURL + \"/index.yaml\"",
          "148:   got, err := getIndexURL(rawURL)",
          "149:   assert.Equal(t, want, got)",
          "151:  })",
          "152:  t.Run(\"URL with escaped characters\", func(t *testing.T) {",
          "153:   rawURL := fmt.Sprintf(urlTemplate, \"mygroup%2Fmyproject\")",
          "154:   want := rawURL + \"/index.yaml\"",
          "155:   got, err := getIndexURL(rawURL)",
          "156:   assert.Equal(t, want, got)",
          "158:  })",
          "159:  t.Run(\"URL with invalid escaped characters\", func(t *testing.T) {",
          "160:   rawURL := fmt.Sprintf(urlTemplate, \"mygroup%**myproject\")",
          "161:   got, err := getIndexURL(rawURL)",
          "162:   assert.Equal(t, \"\", got)",
          "164:  })",
          "165: }",
          "",
          "[Removed Lines]",
          "150:   assert.NoError(t, err)",
          "157:   assert.NoError(t, err)",
          "163:   assert.Error(t, err)",
          "",
          "[Added Lines]",
          "150:   require.NoError(t, err)",
          "157:   require.NoError(t, err)",
          "163:   require.Error(t, err)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "193:   client := NewClient(server.URL, Creds{InsecureSkipVerify: true}, true, \"\")",
          "195:   tags, err := client.GetTags(\"mychart\", true)",
          "197:   assert.ElementsMatch(t, tags.Tags, []string{",
          "198:    \"first\",",
          "199:    \"second\",",
          "",
          "[Removed Lines]",
          "196:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "196:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "246:  t.Cleanup(server.Close)",
          "248:  serverURL, err := url.Parse(server.URL)",
          "251:  testCases := []struct {",
          "252:   name    string",
          "",
          "[Removed Lines]",
          "249:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "249:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "281:    tags, err := client.GetTags(\"mychart\", true)",
          "284:    assert.ElementsMatch(t, tags.Tags, []string{",
          "285:     \"2.8.0\",",
          "286:     \"2.8.0-prerelease\",",
          "",
          "[Removed Lines]",
          "283:    assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "283:    require.NoError(t, err)",
          "",
          "---------------"
        ],
        "util/helm/cmd_test.go||util/helm/cmd_test.go": [
          "File: util/helm/cmd_test.go -> util/helm/cmd_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"testing\"",
          "7:  \"github.com/stretchr/testify/assert\"",
          "8: )",
          "10: func Test_cmd_redactor(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: func TestCmd_template_kubeVersion(t *testing.T) {",
          "17:  cmd, err := NewCmdWithVersion(\".\", HelmV3, false, \"\")",
          "19:  s, err := cmd.template(\"testdata/redis\", &TemplateOpts{",
          "20:   KubeVersion: \"1.14\",",
          "21:  })",
          "23:  assert.NotEmpty(t, s)",
          "24: }",
          "26: func TestCmd_template_noApiVersionsInError(t *testing.T) {",
          "27:  cmd, err := NewCmdWithVersion(\".\", HelmV3, false, \"\")",
          "29:  _, err = cmd.template(\"testdata/chart-does-not-exist\", &TemplateOpts{",
          "30:   KubeVersion: \"1.14\",",
          "31:   APIVersions: []string{\"foo\", \"bar\"},",
          "32:  })",
          "34:  assert.NotContains(t, err.Error(), \"--api-version\")",
          "35:  assert.ErrorContains(t, err, \"<api versions removed> \")",
          "36: }",
          "38: func TestNewCmd_helmV3(t *testing.T) {",
          "39:  cmd, err := NewCmd(\".\", \"v3\", \"\")",
          "41:  assert.Equal(t, \"helm\", cmd.HelmVer.binaryName)",
          "42: }",
          "44: func TestNewCmd_helmDefaultVersion(t *testing.T) {",
          "45:  cmd, err := NewCmd(\".\", \"\", \"\")",
          "47:  assert.Equal(t, \"helm\", cmd.HelmVer.binaryName)",
          "48: }",
          "",
          "[Removed Lines]",
          "18:  assert.NoError(t, err)",
          "22:  assert.NoError(t, err)",
          "28:  assert.NoError(t, err)",
          "33:  assert.Error(t, err)",
          "40:  assert.NoError(t, err)",
          "46:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "19:  require.NoError(t, err)",
          "23:  require.NoError(t, err)",
          "29:  require.NoError(t, err)",
          "34:  require.Error(t, err)",
          "41:  require.NoError(t, err)",
          "47:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56: func TestNewCmd_withProxy(t *testing.T) {",
          "57:  cmd, err := NewCmd(\".\", \"\", \"https://proxy:8888\")",
          "59:  assert.Equal(t, \"https://proxy:8888\", cmd.proxy)",
          "60: }",
          "",
          "[Removed Lines]",
          "58:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "59:  require.NoError(t, err)",
          "",
          "---------------"
        ],
        "util/helm/helm_test.go||util/helm/helm_test.go": [
          "File: util/helm/helm_test.go -> util/helm/helm_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: func TestHelmTemplateParams(t *testing.T) {",
          "28:  h, err := NewHelmApp(\"./testdata/minio\", []HelmRepository{}, false, \"\", \"\", false)",
          "30:  opts := TemplateOpts{",
          "31:   Name: \"test\",",
          "32:   Set: map[string]string{",
          "",
          "[Removed Lines]",
          "29:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "29:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   },",
          "39:  }",
          "40:  objs, err := template(h, &opts)",
          "42:  assert.Len(t, objs, 5)",
          "44:  for _, obj := range objs {",
          "45:   if obj.GetKind() == \"Service\" && obj.GetName() == \"test-minio\" {",
          "46:    var svc apiv1.Service",
          "47:    err := runtime.DefaultUnstructuredConverter.FromUnstructured(obj.Object, &svc)",
          "49:    assert.Equal(t, apiv1.ServiceTypeLoadBalancer, svc.Spec.Type)",
          "50:    assert.Equal(t, int32(1234), svc.Spec.Ports[0].TargetPort.IntVal)",
          "51:    assert.Equal(t, \"true\", svc.ObjectMeta.Annotations[\"prometheus.io/scrape\"])",
          "",
          "[Removed Lines]",
          "41:  assert.NoError(t, err)",
          "48:    assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "41:  require.NoError(t, err)",
          "48:    require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:  repoRootAbs, err := filepath.Abs(repoRoot)",
          "59:  require.NoError(t, err)",
          "60:  h, err := NewHelmApp(repoRootAbs, []HelmRepository{}, false, \"\", \"\", false)",
          "62:  valuesPath, _, err := path.ResolveValueFilePathOrUrl(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "63:  require.NoError(t, err)",
          "64:  opts := TemplateOpts{",
          "",
          "[Removed Lines]",
          "61:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "61:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66:   Values: []path.ResolvedFilePath{valuesPath},",
          "67:  }",
          "68:  objs, err := template(h, &opts)",
          "70:  assert.Len(t, objs, 8)",
          "72:  for _, obj := range objs {",
          "73:   if obj.GetKind() == \"Deployment\" && obj.GetName() == \"test-redis-slave\" {",
          "74:    var dep appsv1.Deployment",
          "75:    err := runtime.DefaultUnstructuredConverter.FromUnstructured(obj.Object, &dep)",
          "77:    assert.Equal(t, int32(3), *dep.Spec.Replicas)",
          "78:   }",
          "79:  }",
          "",
          "[Removed Lines]",
          "69:  assert.NoError(t, err)",
          "76:    assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "69:  require.NoError(t, err)",
          "76:    require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:  repoRootAbs, err := filepath.Abs(repoRoot)",
          "85:  require.NoError(t, err)",
          "86:  h, err := NewHelmApp(repoRootAbs, nil, false, \"\", \"\", false)",
          "88:  params, err := h.GetParameters(nil, repoRootAbs, repoRootAbs)",
          "91:  slaveCountParam := params[\"cluster.slaveCount\"]",
          "92:  assert.Equal(t, \"1\", slaveCountParam)",
          "",
          "[Removed Lines]",
          "87:  assert.NoError(t, err)",
          "89:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "87:  require.NoError(t, err)",
          "89:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "97:  repoRootAbs, err := filepath.Abs(repoRoot)",
          "98:  require.NoError(t, err)",
          "99:  h, err := NewHelmApp(repoRootAbs, nil, false, \"\", \"\", false)",
          "101:  valuesPath, _, err := path.ResolveValueFilePathOrUrl(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "102:  require.NoError(t, err)",
          "103:  params, err := h.GetParameters([]path.ResolvedFilePath{valuesPath}, repoRootAbs, repoRootAbs)",
          "106:  slaveCountParam := params[\"cluster.slaveCount\"]",
          "107:  assert.Equal(t, \"3\", slaveCountParam)",
          "",
          "[Removed Lines]",
          "100:  assert.NoError(t, err)",
          "104:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "100:  require.NoError(t, err)",
          "104:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "112:  repoRootAbs, err := filepath.Abs(repoRoot)",
          "113:  require.NoError(t, err)",
          "114:  h, err := NewHelmApp(repoRootAbs, nil, false, \"\", \"\", false)",
          "116:  valuesMissingPath, _, err := path.ResolveValueFilePathOrUrl(repoRootAbs, repoRootAbs, \"values-missing.yaml\", nil)",
          "117:  require.NoError(t, err)",
          "118:  valuesProductionPath, _, err := path.ResolveValueFilePathOrUrl(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "119:  require.NoError(t, err)",
          "120:  params, err := h.GetParameters([]path.ResolvedFilePath{valuesMissingPath, valuesProductionPath}, repoRootAbs, repoRootAbs)",
          "123:  slaveCountParam := params[\"cluster.slaveCount\"]",
          "124:  assert.Equal(t, \"3\", slaveCountParam)",
          "",
          "[Removed Lines]",
          "115:  assert.NoError(t, err)",
          "121:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "115:  require.NoError(t, err)",
          "121:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "127: func TestHelmTemplateReleaseNameOverwrite(t *testing.T) {",
          "128:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\", false)",
          "131:  objs, err := template(h, &TemplateOpts{Name: \"my-release\"})",
          "133:  assert.Len(t, objs, 5)",
          "135:  for _, obj := range objs {",
          "136:   if obj.GetKind() == \"StatefulSet\" {",
          "137:    var stateful appsv1.StatefulSet",
          "138:    err := runtime.DefaultUnstructuredConverter.FromUnstructured(obj.Object, &stateful)",
          "140:    assert.Equal(t, \"my-release-redis-master\", stateful.ObjectMeta.Name)",
          "141:   }",
          "142:  }",
          "",
          "[Removed Lines]",
          "129:  assert.NoError(t, err)",
          "132:  assert.NoError(t, err)",
          "139:    assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "129:  require.NoError(t, err)",
          "132:  require.NoError(t, err)",
          "139:    require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "145: func TestHelmTemplateReleaseName(t *testing.T) {",
          "146:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\", false)",
          "148:  objs, err := template(h, &TemplateOpts{Name: \"test\"})",
          "150:  assert.Len(t, objs, 5)",
          "152:  for _, obj := range objs {",
          "153:   if obj.GetKind() == \"StatefulSet\" {",
          "154:    var stateful appsv1.StatefulSet",
          "155:    err := runtime.DefaultUnstructuredConverter.FromUnstructured(obj.Object, &stateful)",
          "157:    assert.Equal(t, \"test-redis-master\", stateful.ObjectMeta.Name)",
          "158:   }",
          "159:  }",
          "",
          "[Removed Lines]",
          "147:  assert.NoError(t, err)",
          "149:  assert.NoError(t, err)",
          "156:    assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "147:  require.NoError(t, err)",
          "149:  require.NoError(t, err)",
          "156:    require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "175: func TestVersion(t *testing.T) {",
          "176:  ver, err := Version(false)",
          "178:  assert.NotEmpty(t, ver)",
          "179: }",
          "",
          "[Removed Lines]",
          "177:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "177:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "205: func TestAPIVersions(t *testing.T) {",
          "206:  h, err := NewHelmApp(\"./testdata/api-versions\", nil, false, \"\", \"\", false)",
          "211:  objs, err := template(h, &TemplateOpts{})",
          "215:  assert.Equal(t, \"sample/v1\", objs[0].GetAPIVersion())",
          "217:  objs, err = template(h, &TemplateOpts{APIVersions: []string{\"sample/v2\"}})",
          "221:  assert.Equal(t, \"sample/v2\", objs[0].GetAPIVersion())",
          "222: }",
          "224: func TestSkipCrds(t *testing.T) {",
          "225:  h, err := NewHelmApp(\"./testdata/crds\", nil, false, \"\", \"\", false)",
          "230:  objs, err := template(h, &TemplateOpts{SkipCrds: false})",
          "235:  objs, err = template(h, &TemplateOpts{})",
          "240:  objs, err = template(h, &TemplateOpts{SkipCrds: true})",
          "244: }",
          "",
          "[Removed Lines]",
          "207:  if !assert.NoError(t, err) {",
          "208:   return",
          "209:  }",
          "212:  if !assert.NoError(t, err) || !assert.Len(t, objs, 1) {",
          "213:   return",
          "214:  }",
          "218:  if !assert.NoError(t, err) || !assert.Len(t, objs, 1) {",
          "219:   return",
          "220:  }",
          "226:  if !assert.NoError(t, err) {",
          "227:   return",
          "228:  }",
          "231:  if !assert.NoError(t, err) || !assert.Len(t, objs, 1) {",
          "232:   return",
          "233:  }",
          "236:  if !assert.NoError(t, err) || !assert.Len(t, objs, 1) {",
          "237:   return",
          "238:  }",
          "241:  if !assert.NoError(t, err) || !assert.Empty(t, objs) {",
          "242:   return",
          "243:  }",
          "",
          "[Added Lines]",
          "207:  require.NoError(t, err)",
          "210:  require.NoError(t, err)",
          "211:  require.Len(t, objs, 1)",
          "215:  require.NoError(t, err)",
          "216:  require.Len(t, objs, 1)",
          "222:  require.NoError(t, err)",
          "225:  require.NoError(t, err)",
          "226:  require.Len(t, objs, 1)",
          "229:  require.NoError(t, err)",
          "230:  require.Len(t, objs, 1)",
          "233:  require.NoError(t, err)",
          "234:  require.Empty(t, objs)",
          "",
          "---------------"
        ],
        "util/helm/index_test.go||util/helm/index_test.go": [
          "File: util/helm/index_test.go -> util/helm/index_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"github.com/Masterminds/semver/v3\"",
          "7:  \"github.com/stretchr/testify/assert\"",
          "8: )",
          "10: var index = Index{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: func TestIndex_GetEntries(t *testing.T) {",
          "27:  t.Run(\"NotFound\", func(t *testing.T) {",
          "28:   _, err := index.GetEntries(\"foo\")",
          "30:  })",
          "31:  t.Run(\"Found\", func(t *testing.T) {",
          "32:   entries, err := index.GetEntries(\"argo-cd\")",
          "34:   assert.Len(t, entries, 9)",
          "35:  })",
          "36: }",
          "",
          "[Removed Lines]",
          "29:   assert.EqualError(t, err, \"chart 'foo' not found in index\")",
          "33:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "30:   require.EqualError(t, err, \"chart 'foo' not found in index\")",
          "34:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:  t.Run(\"NotFound\", func(t *testing.T) {",
          "41:   constraints, _ := semver.NewConstraint(\"0.8.1\")",
          "42:   _, err := entries.MaxVersion(constraints)",
          "44:  })",
          "45:  t.Run(\"Exact\", func(t *testing.T) {",
          "46:   constraints, _ := semver.NewConstraint(\"0.5.3\")",
          "47:   version, err := entries.MaxVersion(constraints)",
          "49:   assert.Equal(t, semver.MustParse(\"0.5.3\"), version)",
          "50:  })",
          "51:  t.Run(\"Constraint\", func(t *testing.T) {",
          "52:   constraints, _ := semver.NewConstraint(\"> 0.5.3\")",
          "53:   version, err := entries.MaxVersion(constraints)",
          "55:   assert.Equal(t, semver.MustParse(\"0.7.2\"), version)",
          "56:  })",
          "57:  t.Run(\"Constraint\", func(t *testing.T) {",
          "58:   constraints, _ := semver.NewConstraint(\"> 0.0.0\")",
          "59:   version, err := entries.MaxVersion(constraints)",
          "61:   assert.Equal(t, semver.MustParse(\"0.7.2\"), version)",
          "62:  })",
          "63:  t.Run(\"Constraint\", func(t *testing.T) {",
          "64:   constraints, _ := semver.NewConstraint(\">0.5.0,<0.7.0\")",
          "65:   version, err := entries.MaxVersion(constraints)",
          "67:   assert.Equal(t, semver.MustParse(\"0.5.4\"), version)",
          "68:  })",
          "69:  t.Run(\"Constraint\", func(t *testing.T) {",
          "70:   constraints, _ := semver.NewConstraint(\"0.7.*\")",
          "71:   version, err := entries.MaxVersion(constraints)",
          "73:   assert.Equal(t, semver.MustParse(\"0.7.2\"), version)",
          "74:  })",
          "75:  t.Run(\"Constraint\", func(t *testing.T) {",
          "76:   constraints, _ := semver.NewConstraint(\"*\")",
          "77:   version, err := entries.MaxVersion(constraints)",
          "79:   assert.Equal(t, semver.MustParse(\"0.7.2\"), version)",
          "80:  })",
          "81: }",
          "",
          "[Removed Lines]",
          "43:   assert.EqualError(t, err, \"constraint not found in index\")",
          "48:   assert.NoError(t, err)",
          "54:   assert.NoError(t, err)",
          "60:   assert.NoError(t, err)",
          "66:   assert.NoError(t, err)",
          "72:   assert.NoError(t, err)",
          "78:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "44:   require.EqualError(t, err, \"constraint not found in index\")",
          "49:   require.NoError(t, err)",
          "55:   require.NoError(t, err)",
          "61:   require.NoError(t, err)",
          "67:   require.NoError(t, err)",
          "73:   require.NoError(t, err)",
          "79:   require.NoError(t, err)",
          "",
          "---------------"
        ],
        "util/helm/tags_test.go||util/helm/tags_test.go": [
          "File: util/helm/tags_test.go -> util/helm/tags_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"github.com/Masterminds/semver/v3\"",
          "7:  \"github.com/stretchr/testify/assert\"",
          "8: )",
          "10: var tags = TagsList{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:  t.Run(\"Exact\", func(t *testing.T) {",
          "31:   constraints, _ := semver.NewConstraint(\"0.5.3\")",
          "32:   version, err := tags.MaxVersion(constraints)",
          "34:   assert.Equal(t, semver.MustParse(\"0.5.3\"), version)",
          "35:  })",
          "36:  t.Run(\"Constraint\", func(t *testing.T) {",
          "37:   constraints, _ := semver.NewConstraint(\"> 0.5.3\")",
          "38:   version, err := tags.MaxVersion(constraints)",
          "40:   assert.Equal(t, semver.MustParse(\"0.7.2\"), version)",
          "41:  })",
          "42: }",
          "",
          "[Removed Lines]",
          "33:   assert.NoError(t, err)",
          "39:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "34:   require.NoError(t, err)",
          "40:   require.NoError(t, err)",
          "",
          "---------------"
        ],
        "util/http/http_test.go||util/http/http_test.go": [
          "File: util/http/http_test.go -> util/http/http_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"testing\"",
          "8:  \"github.com/stretchr/testify/assert\"",
          "9: )",
          "11: func TestCookieMaxLength(t *testing.T) {",
          "12:  cookies, err := MakeCookieMetadata(\"foo\", \"bar\")",
          "14:  assert.Equal(t, \"foo=bar\", cookies[0])",
          "17:  cookies, err = MakeCookieMetadata(\"foo\", strings.Repeat(\"_\", (maxCookieLength-5)*maxCookieNumber))",
          "19:  assert.Empty(t, cookies)",
          "20: }",
          "",
          "[Removed Lines]",
          "13:  assert.NoError(t, err)",
          "18:  assert.EqualError(t, err, \"the authentication token is 81760 characters long and requires 21 cookies but the max number of cookies is 20. Contact your Argo CD administrator to increase the max number of cookies\")",
          "",
          "[Added Lines]",
          "9:  \"github.com/stretchr/testify/require\"",
          "14:  require.NoError(t, err)",
          "19:  require.EqualError(t, err, \"the authentication token is 81760 characters long and requires 21 cookies but the max number of cookies is 20. Contact your Argo CD administrator to increase the max number of cookies\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:  flags := []string{\"SameSite=lax\", \"httpOnly\"}",
          "25:  cookies, err := MakeCookieMetadata(\"foo\", \"bar\", flags...)",
          "27:  assert.Equal(t, \"foo=bar; SameSite=lax; httpOnly\", cookies[0])",
          "28: }",
          "30: func TestSplitCookie(t *testing.T) {",
          "31:  cookieValue := strings.Repeat(\"_\", (maxCookieLength-6)*4)",
          "32:  cookies, err := MakeCookieMetadata(\"foo\", cookieValue)",
          "34:  assert.Len(t, cookies, 4)",
          "35:  assert.Len(t, strings.Split(cookies[0], \"=\"), 2)",
          "36:  token := strings.Split(cookies[0], \"=\")[1]",
          "",
          "[Removed Lines]",
          "26:  assert.NoError(t, err)",
          "33:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "27:  require.NoError(t, err)",
          "34:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:   cookieList = append(cookieList, &http.Cookie{Name: parts[0], Value: parts[1]})",
          "45:  }",
          "46:  token, err = JoinCookies(\"foo\", cookieList)",
          "48:  assert.Equal(t, cookieValue, token)",
          "49: }",
          "",
          "[Removed Lines]",
          "47:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "48:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "73:   RoundTripper: &TestRoundTripper{},",
          "74:  }",
          "75:  resp, err := client.Do(req)",
          "77:  assert.Equal(t, http.Header{",
          "78:   \"Bar\": []string{\"req_1\"},",
          "79:   \"Foo\": []string{\"req_1\"},",
          "",
          "[Removed Lines]",
          "76:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "77:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:   },",
          "88:  }",
          "89:  resp, err = client.Do(req)",
          "91:  assert.Equal(t, http.Header{",
          "92:   \"Bar\": []string{\"req_1\"},",
          "93:   \"Foo\": []string{\"default_1\", \"default_2\", \"req_1\"},",
          "",
          "[Removed Lines]",
          "90:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "91:  require.NoError(t, err)",
          "",
          "---------------"
        ],
        "util/io/bytereadseeker_test.go||util/io/bytereadseeker_test.go": [
          "File: util/io/bytereadseeker_test.go -> util/io/bytereadseeker_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  assert.Equal(t, len(inString), n)",
          "18:  assert.Equal(t, inString, string(bytes))",
          "19:  _, err = reader.Read(bytes)",
          "21: }",
          "23: func TestByteReadSeeker_Seek_Start(t *testing.T) {",
          "",
          "[Removed Lines]",
          "20:  assert.ErrorIs(t, err, io.EOF)",
          "",
          "[Added Lines]",
          "20:  require.ErrorIs(t, err, io.EOF)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:  inString := \"hello world\"",
          "67:  reader := NewByteReadSeeker([]byte(inString))",
          "68:  _, err := reader.Seek(12, io.SeekStart)",
          "70:  _, err = reader.Seek(-1, io.SeekStart)",
          "72: }",
          "",
          "[Removed Lines]",
          "69:  assert.Error(t, err)",
          "71:  assert.Error(t, err)",
          "",
          "[Added Lines]",
          "69:  require.Error(t, err)",
          "71:  require.Error(t, err)",
          "",
          "---------------"
        ],
        "util/io/files/tar_test.go||util/io/files/tar_test.go": [
          "File: util/io/files/tar_test.go -> util/io/files/tar_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   assert.Equal(t, 3, filesWritten)",
          "56:   prepareRead(f)",
          "57:   files, err := read(f.file)",
          "58:   require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "55:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "55:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:   assert.Equal(t, 2, filesWritten)",
          "79:   prepareRead(f)",
          "80:   files, err := read(f.file)",
          "81:   require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "78:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "78:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:   assert.Equal(t, 1, filesWritten)",
          "99:   prepareRead(f)",
          "100:   files, err := read(f.file)",
          "101:   require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "98:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "98:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:   err := files.Untgz(destDir, tgzFile, math.MaxInt64, false)",
          "199:   assert.Contains(t, err.Error(), \"illegal filepath in symlink\")",
          "200:  })",
          "",
          "[Removed Lines]",
          "198:   assert.Error(t, err)",
          "",
          "[Added Lines]",
          "198:   require.Error(t, err)",
          "",
          "---------------"
        ],
        "util/io/path/resolved_test.go||util/io/path/resolved_test.go": [
          "File: util/io/path/resolved_test.go -> util/io/path/resolved_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  }",
          "17:  t.Run(\"Resolve non-symlink\", func(t *testing.T) {",
          "18:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/foo\", 2)",
          "20:   assert.Equal(t, testsDir+\"/foo\", r)",
          "21:  })",
          "22:  t.Run(\"Successfully resolve symlink\", func(t *testing.T) {",
          "23:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/bar\", 2)",
          "25:   assert.Equal(t, testsDir+\"/foo\", r)",
          "26:  })",
          "27:  t.Run(\"Do not allow symlink at all\", func(t *testing.T) {",
          "28:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/bar\", 0)",
          "30:   assert.Equal(t, \"\", r)",
          "31:  })",
          "32:  t.Run(\"Error because too nested symlink\", func(t *testing.T) {",
          "33:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/bam\", 2)",
          "35:   assert.Equal(t, \"\", r)",
          "36:  })",
          "37:  t.Run(\"No such file or directory\", func(t *testing.T) {",
          "38:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/foobar\", 2)",
          "40:   assert.Equal(t, testsDir+\"/foobar\", r)",
          "41:  })",
          "42: }",
          "",
          "[Removed Lines]",
          "19:   assert.NoError(t, err)",
          "24:   assert.NoError(t, err)",
          "29:   assert.Error(t, err)",
          "34:   assert.Error(t, err)",
          "39:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "19:   require.NoError(t, err)",
          "24:   require.NoError(t, err)",
          "29:   require.Error(t, err)",
          "34:   require.Error(t, err)",
          "39:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99: func Test_resolveFilePath(t *testing.T) {",
          "100:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
          "101:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", \"baz/bim.yaml\", allowedRemoteProtocols)",
          "103:   assert.False(t, remote)",
          "104:   assert.Equal(t, \"/foo/bar/baz/bim.yaml\", string(p))",
          "105:  })",
          "106:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
          "107:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", \"baz/../../bim.yaml\", allowedRemoteProtocols)",
          "109:   assert.False(t, remote)",
          "110:   assert.Equal(t, \"/foo/bim.yaml\", string(p))",
          "111:  })",
          "112:  t.Run(\"Error on path resolving outside repository root\", func(t *testing.T) {",
          "113:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", \"baz/../../../bim.yaml\", allowedRemoteProtocols)",
          "115:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "116:   assert.False(t, remote)",
          "117:   assert.Equal(t, \"\", string(p))",
          "",
          "[Removed Lines]",
          "102:   assert.NoError(t, err)",
          "108:   assert.NoError(t, err)",
          "114:   assert.Error(t, err)",
          "",
          "[Added Lines]",
          "102:   require.NoError(t, err)",
          "108:   require.NoError(t, err)",
          "114:   require.Error(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:  t.Run(\"Return verbatim URL\", func(t *testing.T) {",
          "120:   url := \"https://some.where/foo,yaml\"",
          "121:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", url, allowedRemoteProtocols)",
          "123:   assert.True(t, remote)",
          "124:   assert.Equal(t, url, string(p))",
          "125:  })",
          "126:  t.Run(\"URL scheme not allowed\", func(t *testing.T) {",
          "127:   url := \"file:///some.where/foo,yaml\"",
          "128:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", url, allowedRemoteProtocols)",
          "130:   assert.False(t, remote)",
          "131:   assert.Equal(t, \"\", string(p))",
          "132:  })",
          "133:  t.Run(\"Implicit URL by absolute path\", func(t *testing.T) {",
          "134:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", \"/baz.yaml\", allowedRemoteProtocols)",
          "136:   assert.False(t, remote)",
          "137:   assert.Equal(t, \"/foo/baz.yaml\", string(p))",
          "138:  })",
          "139:  t.Run(\"Relative app path\", func(t *testing.T) {",
          "140:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo\", \"/baz.yaml\", allowedRemoteProtocols)",
          "142:   assert.False(t, remote)",
          "143:   assert.Equal(t, \"/foo/baz.yaml\", string(p))",
          "144:  })",
          "",
          "[Removed Lines]",
          "122:   assert.NoError(t, err)",
          "129:   assert.Error(t, err)",
          "135:   assert.NoError(t, err)",
          "141:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "122:   require.NoError(t, err)",
          "129:   require.Error(t, err)",
          "135:   require.NoError(t, err)",
          "141:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:   c, err := os.Getwd()",
          "147:   require.NoError(t, err)",
          "148:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \".\", \"baz.yaml\", allowedRemoteProtocols)",
          "150:   assert.False(t, remote)",
          "151:   assert.Equal(t, c+\"/baz.yaml\", string(p))",
          "152:  })",
          "153:  t.Run(\"Overlapping root prefix without trailing slash\", func(t *testing.T) {",
          "154:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo\", \"../foo2/baz.yaml\", allowedRemoteProtocols)",
          "156:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "157:   assert.False(t, remote)",
          "158:   assert.Equal(t, \"\", string(p))",
          "159:  })",
          "160:  t.Run(\"Overlapping root prefix with trailing slash\", func(t *testing.T) {",
          "161:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo/\", \"../foo2/baz.yaml\", allowedRemoteProtocols)",
          "163:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "164:   assert.False(t, remote)",
          "165:   assert.Equal(t, \"\", string(p))",
          "166:  })",
          "167:  t.Run(\"Garbage input as values file\", func(t *testing.T) {",
          "168:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo/\", \"kfdj\\\\ks&&&321209.,---e32908923%$\u00a7!\\\"\", allowedRemoteProtocols)",
          "170:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "171:   assert.False(t, remote)",
          "172:   assert.Equal(t, \"\", string(p))",
          "173:  })",
          "174:  t.Run(\"NUL-byte path input as values file\", func(t *testing.T) {",
          "175:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo/\", \"\\000\", allowedRemoteProtocols)",
          "177:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "178:   assert.False(t, remote)",
          "179:   assert.Equal(t, \"\", string(p))",
          "180:  })",
          "181:  t.Run(\"Resolve root path into absolute path - jsonnet library path\", func(t *testing.T) {",
          "182:   p, err := ResolveFileOrDirectoryPath(\"/foo\", \"/foo\", \"./\")",
          "184:   assert.Equal(t, \"/foo\", string(p))",
          "185:  })",
          "186: }",
          "",
          "[Removed Lines]",
          "149:   assert.NoError(t, err)",
          "155:   assert.Error(t, err)",
          "162:   assert.Error(t, err)",
          "169:   assert.Error(t, err)",
          "176:   assert.Error(t, err)",
          "183:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "149:   require.NoError(t, err)",
          "155:   require.Error(t, err)",
          "162:   require.Error(t, err)",
          "169:   require.Error(t, err)",
          "176:   require.Error(t, err)",
          "183:   require.NoError(t, err)",
          "",
          "---------------"
        ],
        "util/kube/kube_test.go||util/kube/kube_test.go": [
          "File: util/kube/kube_test.go -> util/kube/kube_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"testing\"",
          "9:  \"github.com/stretchr/testify/assert\"",
          "10:  apiv1 \"k8s.io/api/core/v1\"",
          "11:  extv1beta1 \"k8s.io/api/extensions/v1beta1\"",
          "12:  \"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:  for _, yamlStr := range []string{depWithoutSelector, depWithSelector} {",
          "59:   var obj unstructured.Unstructured",
          "60:   err := yaml.Unmarshal([]byte(yamlStr), &obj)",
          "63:   err = SetAppInstanceLabel(&obj, common.LabelKeyAppInstance, \"my-app\")",
          "66:   manifestBytes, err := json.MarshalIndent(obj.Object, \"\", \"  \")",
          "68:   log.Println(string(manifestBytes))",
          "70:   var depV1Beta1 extv1beta1.Deployment",
          "71:   err = json.Unmarshal(manifestBytes, &depV1Beta1)",
          "75:   if yamlStr == depWithoutSelector {",
          "",
          "[Removed Lines]",
          "61:   assert.NoError(t, err)",
          "64:   assert.NoError(t, err)",
          "67:   assert.NoError(t, err)",
          "72:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "62:   require.NoError(t, err)",
          "65:   require.NoError(t, err)",
          "68:   require.NoError(t, err)",
          "73:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86: func TestSetSvcLabel(t *testing.T) {",
          "87:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "89:  var obj unstructured.Unstructured",
          "90:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "92:  err = SetAppInstanceLabel(&obj, common.LabelKeyAppInstance, \"my-app\")",
          "95:  manifestBytes, err := json.MarshalIndent(obj.Object, \"\", \"  \")",
          "97:  log.Println(string(manifestBytes))",
          "99:  var s apiv1.Service",
          "100:  err = json.Unmarshal(manifestBytes, &s)",
          "103:  log.Println(s.Name)",
          "104:  log.Println(s.ObjectMeta)",
          "",
          "[Removed Lines]",
          "88:  assert.NoError(t, err)",
          "91:  assert.NoError(t, err)",
          "93:  assert.NoError(t, err)",
          "96:  assert.NoError(t, err)",
          "101:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "89:  require.NoError(t, err)",
          "92:  require.NoError(t, err)",
          "94:  require.NoError(t, err)",
          "97:  require.NoError(t, err)",
          "102:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115: func TestSetAppInstanceAnnotation(t *testing.T) {",
          "116:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "118:  var obj unstructured.Unstructured",
          "119:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "121:  err = SetAppInstanceAnnotation(&obj, common.LabelKeyAppInstance, \"my-app\")",
          "124:  manifestBytes, err := json.MarshalIndent(obj.Object, \"\", \"  \")",
          "126:  log.Println(string(manifestBytes))",
          "128:  var s apiv1.Service",
          "129:  err = json.Unmarshal(manifestBytes, &s)",
          "132:  log.Println(s.Name)",
          "133:  log.Println(s.ObjectMeta)",
          "",
          "[Removed Lines]",
          "117:  assert.NoError(t, err)",
          "120:  assert.NoError(t, err)",
          "122:  assert.NoError(t, err)",
          "125:  assert.NoError(t, err)",
          "130:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "118:  require.NoError(t, err)",
          "121:  require.NoError(t, err)",
          "123:  require.NoError(t, err)",
          "126:  require.NoError(t, err)",
          "131:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137: func TestSetAppInstanceAnnotationWithInvalidData(t *testing.T) {",
          "138:  yamlBytes, err := os.ReadFile(\"testdata/svc-with-invalid-data.yaml\")",
          "140:  var obj unstructured.Unstructured",
          "141:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "143:  err = SetAppInstanceAnnotation(&obj, common.LabelKeyAppInstance, \"my-app\")",
          "145:  assert.Equal(t, \"failed to get annotations from target object /v1, Kind=Service /my-service: .metadata.annotations accessor error: contains non-string value in the map under key \\\"invalid-annotation\\\": <nil> is of the type <nil>, expected string\", err.Error())",
          "146: }",
          "148: func TestGetAppInstanceAnnotation(t *testing.T) {",
          "149:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "151:  var obj unstructured.Unstructured",
          "152:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "154:  err = SetAppInstanceAnnotation(&obj, common.LabelKeyAppInstance, \"my-app\")",
          "157:  annotation, err := GetAppInstanceAnnotation(&obj, common.LabelKeyAppInstance)",
          "159:  assert.Equal(t, \"my-app\", annotation)",
          "160: }",
          "162: func TestGetAppInstanceAnnotationWithInvalidData(t *testing.T) {",
          "163:  yamlBytes, err := os.ReadFile(\"testdata/svc-with-invalid-data.yaml\")",
          "165:  var obj unstructured.Unstructured",
          "166:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "169:  _, err = GetAppInstanceAnnotation(&obj, \"valid-annotation\")",
          "171:  assert.Equal(t, \"failed to get annotations from target object /v1, Kind=Service /my-service: .metadata.annotations accessor error: contains non-string value in the map under key \\\"invalid-annotation\\\": <nil> is of the type <nil>, expected string\", err.Error())",
          "172: }",
          "174: func TestGetAppInstanceLabel(t *testing.T) {",
          "175:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "177:  var obj unstructured.Unstructured",
          "178:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "180:  err = SetAppInstanceLabel(&obj, common.LabelKeyAppInstance, \"my-app\")",
          "182:  label, err := GetAppInstanceLabel(&obj, common.LabelKeyAppInstance)",
          "184:  assert.Equal(t, \"my-app\", label)",
          "185: }",
          "187: func TestGetAppInstanceLabelWithInvalidData(t *testing.T) {",
          "188:  yamlBytes, err := os.ReadFile(\"testdata/svc-with-invalid-data.yaml\")",
          "190:  var obj unstructured.Unstructured",
          "191:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "193:  _, err = GetAppInstanceLabel(&obj, \"valid-label\")",
          "195:  assert.Equal(t, \"failed to get labels for /v1, Kind=Service /my-service: .metadata.labels accessor error: contains non-string value in the map under key \\\"invalid-label\\\": <nil> is of the type <nil>, expected string\", err.Error())",
          "196: }",
          "198: func TestRemoveLabel(t *testing.T) {",
          "199:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "201:  var obj unstructured.Unstructured",
          "202:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "204:  obj.SetLabels(map[string]string{\"test\": \"value\"})",
          "206:  err = RemoveLabel(&obj, \"test\")",
          "209:  assert.Nil(t, obj.GetLabels())",
          "210: }",
          "212: func TestRemoveLabelWithInvalidData(t *testing.T) {",
          "213:  yamlBytes, err := os.ReadFile(\"testdata/svc-with-invalid-data.yaml\")",
          "215:  var obj unstructured.Unstructured",
          "216:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "219:  err = RemoveLabel(&obj, \"valid-label\")",
          "221:  assert.Equal(t, \"failed to get labels for /v1, Kind=Service /my-service: .metadata.labels accessor error: contains non-string value in the map under key \\\"invalid-label\\\": <nil> is of the type <nil>, expected string\", err.Error())",
          "222: }",
          "",
          "[Removed Lines]",
          "139:  assert.NoError(t, err)",
          "142:  assert.NoError(t, err)",
          "144:  assert.Error(t, err)",
          "150:  assert.NoError(t, err)",
          "153:  assert.NoError(t, err)",
          "155:  assert.NoError(t, err)",
          "158:  assert.NoError(t, err)",
          "164:  assert.NoError(t, err)",
          "167:  assert.NoError(t, err)",
          "170:  assert.Error(t, err)",
          "176:  assert.NoError(t, err)",
          "179:  assert.NoError(t, err)",
          "181:  assert.NoError(t, err)",
          "183:  assert.NoError(t, err)",
          "189:  assert.NoError(t, err)",
          "192:  assert.NoError(t, err)",
          "194:  assert.Error(t, err)",
          "200:  assert.NoError(t, err)",
          "203:  assert.NoError(t, err)",
          "207:  assert.NoError(t, err)",
          "214:  assert.NoError(t, err)",
          "217:  assert.NoError(t, err)",
          "220:  assert.Error(t, err)",
          "",
          "[Added Lines]",
          "140:  require.NoError(t, err)",
          "143:  require.NoError(t, err)",
          "145:  require.Error(t, err)",
          "151:  require.NoError(t, err)",
          "154:  require.NoError(t, err)",
          "156:  require.NoError(t, err)",
          "159:  require.NoError(t, err)",
          "165:  require.NoError(t, err)",
          "168:  require.NoError(t, err)",
          "171:  require.Error(t, err)",
          "177:  require.NoError(t, err)",
          "180:  require.NoError(t, err)",
          "182:  require.NoError(t, err)",
          "184:  require.NoError(t, err)",
          "190:  require.NoError(t, err)",
          "193:  require.NoError(t, err)",
          "195:  require.Error(t, err)",
          "201:  require.NoError(t, err)",
          "204:  require.NoError(t, err)",
          "208:  require.NoError(t, err)",
          "215:  require.NoError(t, err)",
          "218:  require.NoError(t, err)",
          "221:  require.Error(t, err)",
          "",
          "---------------"
        ],
        "util/kustomize/kustomize_test.go||util/kustomize/kustomize_test.go": [
          "File: util/kustomize/kustomize_test.go -> util/kustomize/kustomize_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: func TestKustomizeBuild(t *testing.T) {",
          "41:  appPath, err := testDataDir(t, kustomization1)",
          "43:  namePrefix := \"namePrefix-\"",
          "44:  nameSuffix := \"-nameSuffix\"",
          "45:  namespace := \"custom-namespace\"",
          "",
          "[Removed Lines]",
          "42:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "42:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   },",
          "74:  }",
          "75:  objs, images, err := kustomize.Build(&kustomizeSource, nil, env)",
          "77:  if err != nil {",
          "78:   assert.Len(t, objs, 2)",
          "79:   assert.Len(t, images, 2)",
          "",
          "[Removed Lines]",
          "76:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "76:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126: func TestFailKustomizeBuild(t *testing.T) {",
          "127:  appPath, err := testDataDir(t, kustomization1)",
          "129:  kustomize := NewKustomizeApp(appPath, appPath, git.NopCreds{}, \"\", \"\")",
          "130:  kustomizeSource := v1alpha1.ApplicationSourceKustomize{",
          "131:   Replicas: []v1alpha1.KustomizeReplica{",
          "",
          "[Removed Lines]",
          "128:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "128:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148: func testFindKustomization(t *testing.T, set string, expected string) {",
          "149:  kustomization, err := (&kustomize{path: \"testdata/\" + set}).findKustomization()",
          "151:  assert.Equal(t, \"testdata/\"+set+\"/\"+expected, kustomization)",
          "152: }",
          "",
          "[Removed Lines]",
          "150:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "150:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166: func TestVersion(t *testing.T) {",
          "167:  ver, err := Version(false)",
          "169:  assert.NotEmpty(t, ver)",
          "170: }",
          "172: func TestGetSemver(t *testing.T) {",
          "173:  ver, err := getSemver()",
          "175:  assert.NotEmpty(t, ver)",
          "176: }",
          "",
          "[Removed Lines]",
          "168:  assert.NoError(t, err)",
          "174:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "168:  require.NoError(t, err)",
          "174:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "224:  }",
          "225:  for _, tc := range testCases {",
          "226:   appPath, err := testDataDir(t, tc.TestData)",
          "228:   kustomize := NewKustomizeApp(appPath, appPath, git.NopCreds{}, \"\", \"\")",
          "229:   objs, _, err := kustomize.Build(&tc.KustomizeSource, nil, tc.Env)",
          "230:   switch tc.ExpectErr {",
          "231:   case true:",
          "233:   default:",
          "235:    if assert.Len(t, objs, 1) {",
          "236:     assert.Equal(t, tc.ExpectedLabels, objs[0].GetLabels())",
          "237:    }",
          "",
          "[Removed Lines]",
          "227:   assert.NoError(t, err)",
          "232:    assert.Error(t, err)",
          "234:    assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "227:   require.NoError(t, err)",
          "232:    require.Error(t, err)",
          "234:    require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "316:  }",
          "317:  for _, tc := range testCases {",
          "318:   appPath, err := testDataDir(t, tc.TestData)",
          "320:   kustomize := NewKustomizeApp(appPath, appPath, git.NopCreds{}, \"\", \"\")",
          "321:   objs, _, err := kustomize.Build(&tc.KustomizeSource, nil, tc.Env)",
          "322:   switch tc.ExpectErr {",
          "323:   case true:",
          "325:   default:",
          "327:    if assert.Len(t, objs, 1) {",
          "328:     assert.Equal(t, tc.ExpectedAnnotations, objs[0].GetAnnotations())",
          "329:    }",
          "",
          "[Removed Lines]",
          "319:   assert.NoError(t, err)",
          "324:    assert.Error(t, err)",
          "326:    assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "319:   require.NoError(t, err)",
          "324:    require.Error(t, err)",
          "326:    require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "384:  for _, tc := range testCases {",
          "385:   appPath, err := testDataDir(t, tc.TestData)",
          "387:   kustomize := NewKustomizeApp(appPath, appPath, git.NopCreds{}, \"\", \"\")",
          "388:   objs, _, err := kustomize.Build(&tc.KustomizeSource, nil, tc.Env)",
          "390:   switch tc.ExpectErr {",
          "391:   case true:",
          "393:   default:",
          "395:    if assert.Len(t, objs, 1) {",
          "396:     obj := objs[0]",
          "397:     sl, found, err := unstructured.NestedStringMap(obj.Object, \"spec\", \"selector\", \"matchLabels\")",
          "399:     assert.True(t, found)",
          "400:     tl, found, err := unstructured.NestedStringMap(obj.Object, \"spec\", \"template\", \"metadata\", \"labels\")",
          "402:     assert.True(t, found)",
          "403:     assert.Equal(t, tc.ExpectedMetadataLabels, obj.GetLabels())",
          "404:     assert.Equal(t, tc.ExpectedSelectorLabels, sl)",
          "",
          "[Removed Lines]",
          "386:   assert.NoError(t, err)",
          "392:    assert.Error(t, err)",
          "394:    assert.NoError(t, err)",
          "398:     assert.NoError(t, err)",
          "401:     assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "386:   require.NoError(t, err)",
          "392:    require.Error(t, err)",
          "394:    require.NoError(t, err)",
          "398:     require.NoError(t, err)",
          "401:     require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "411: func TestKustomizeCustomVersion(t *testing.T) {",
          "412:  appPath, err := testDataDir(t, kustomization1)",
          "414:  kustomizePath, err := testDataDir(t, kustomization4)",
          "416:  envOutputFile := kustomizePath + \"/env_output\"",
          "417:  kustomize := NewKustomizeApp(appPath, appPath, git.NopCreds{}, \"\", kustomizePath+\"/kustomize.special\")",
          "418:  kustomizeSource := v1alpha1.ApplicationSourceKustomize{",
          "",
          "[Removed Lines]",
          "413:  assert.NoError(t, err)",
          "415:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "413:  require.NoError(t, err)",
          "415:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "422:   &v1alpha1.EnvEntry{Name: \"ARGOCD_APP_NAME\", Value: \"argo-cd-tests\"},",
          "423:  }",
          "424:  objs, images, err := kustomize.Build(&kustomizeSource, nil, env)",
          "426:  if err != nil {",
          "427:   assert.Len(t, objs, 2)",
          "428:   assert.Len(t, images, 2)",
          "429:  }",
          "431:  content, err := os.ReadFile(envOutputFile)",
          "433:  assert.Equal(t, \"ARGOCD_APP_NAME=argo-cd-tests\\n\", string(content))",
          "434: }",
          "436: func TestKustomizeBuildComponents(t *testing.T) {",
          "437:  appPath, err := testDataDir(t, kustomization6)",
          "439:  kustomize := NewKustomizeApp(appPath, appPath, git.NopCreds{}, \"\", \"\")",
          "441:  kustomizeSource := v1alpha1.ApplicationSourceKustomize{",
          "442:   Components: []string{\"./components\"},",
          "443:  }",
          "444:  objs, _, err := kustomize.Build(&kustomizeSource, nil, nil)",
          "446:  obj := objs[0]",
          "447:  assert.Equal(t, \"nginx-deployment\", obj.GetName())",
          "448:  assert.Equal(t, map[string]string{",
          "",
          "[Removed Lines]",
          "425:  assert.NoError(t, err)",
          "432:  assert.NoError(t, err)",
          "438:  assert.NoError(t, err)",
          "445:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "425:  require.NoError(t, err)",
          "432:  require.NoError(t, err)",
          "438:  require.NoError(t, err)",
          "445:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "457: func TestKustomizeBuildPatches(t *testing.T) {",
          "458:  appPath, err := testDataDir(t, kustomization5)",
          "460:  kustomize := NewKustomizeApp(appPath, appPath, git.NopCreds{}, \"\", \"\")",
          "462:  kustomizeSource := v1alpha1.ApplicationSourceKustomize{",
          "",
          "[Removed Lines]",
          "459:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "459:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "475:   },",
          "476:  }",
          "477:  objs, _, err := kustomize.Build(&kustomizeSource, nil, nil)",
          "479:  obj := objs[0]",
          "480:  containers, found, err := unstructured.NestedSlice(obj.Object, \"spec\", \"template\", \"spec\", \"containers\")",
          "482:  assert.True(t, found)",
          "484:  ports, found, err := unstructured.NestedSlice(",
          "",
          "[Removed Lines]",
          "478:  assert.NoError(t, err)",
          "481:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "478:  require.NoError(t, err)",
          "481:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "486:   \"ports\",",
          "487:  )",
          "488:  assert.True(t, found)",
          "491:  port, found, err := unstructured.NestedInt64(",
          "492:   ports[0].(map[string]interface{}),",
          "",
          "[Removed Lines]",
          "489:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "489:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "494:  )",
          "496:  assert.True(t, found)",
          "498:  assert.Equal(t, int64(443), port)",
          "500:  name, found, err := unstructured.NestedString(",
          "",
          "[Removed Lines]",
          "497:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "497:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "502:   \"name\",",
          "503:  )",
          "504:  assert.True(t, found)",
          "506:  assert.Equal(t, \"test\", name)",
          "507: }",
          "",
          "[Removed Lines]",
          "505:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "505:  require.NoError(t, err)",
          "",
          "---------------"
        ],
        "util/lua/custom_actions_test.go||util/lua/custom_actions_test.go": [
          "File: util/lua/custom_actions_test.go -> util/lua/custom_actions_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"testing\"",
          "11:  \"github.com/stretchr/testify/assert\"",
          "12:  \"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"",
          "13:  \"sigs.k8s.io/yaml\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:   if !strings.Contains(path, \"action_test.yaml\") {",
          "103:    return nil",
          "104:   }",
          "106:   dir := filepath.Dir(path)",
          "108:   yamlBytes, err := os.ReadFile(dir + \"/action_test.yaml\")",
          "110:   var resourceTest ActionTestStructure",
          "111:   err = yaml.Unmarshal(yamlBytes, &resourceTest)",
          "113:   for i := range resourceTest.DiscoveryTests {",
          "114:    test := resourceTest.DiscoveryTests[i]",
          "115:    testName := fmt.Sprintf(\"discovery/%s\", test.InputPath)",
          "",
          "[Removed Lines]",
          "105:   assert.NoError(t, err)",
          "109:   assert.NoError(t, err)",
          "112:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "106:   require.NoError(t, err)",
          "110:   require.NoError(t, err)",
          "113:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:     }",
          "120:     obj := getObj(filepath.Join(dir, test.InputPath))",
          "121:     discoveryLua, err := vm.GetResourceActionDiscovery(obj)",
          "123:     result, err := vm.ExecuteResourceActionDiscovery(obj, discoveryLua)",
          "125:     for i := range result {",
          "126:      assert.Contains(t, test.Result, result[i])",
          "127:     }",
          "",
          "[Removed Lines]",
          "122:     assert.NoError(t, err)",
          "124:     assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "123:     require.NoError(t, err)",
          "125:     require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141:     sourceObj := getObj(filepath.Join(dir, test.InputPath))",
          "142:     action, err := vm.GetResourceAction(sourceObj, test.Action)",
          "147:     impactedResources, err := vm.ExecuteResourceAction(sourceObj, action.ActionLua)",
          "151:     expectedObjects := getExpectedObjectList(t, filepath.Join(dir, test.ExpectedOutputPath))",
          "",
          "[Removed Lines]",
          "144:     assert.NoError(t, err)",
          "146:     assert.NoError(t, err)",
          "148:     assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "145:     require.NoError(t, err)",
          "147:     require.NoError(t, err)",
          "149:     require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185:      }",
          "187:      diffResult, err := diff.Diff(expectedObj, result, diff.WithNormalizer(testNormalizer{}))",
          "189:      if diffResult.Modified {",
          "190:       t.Error(\"Output does not match input:\")",
          "191:       err = cli.PrintDiff(test.Action, expectedObj, result)",
          "193:      }",
          "194:     }",
          "195:    })",
          "",
          "[Removed Lines]",
          "188:      assert.NoError(t, err)",
          "192:       assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "189:      require.NoError(t, err)",
          "193:       require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "198:   return nil",
          "199:  })",
          "201: }",
          "",
          "[Removed Lines]",
          "200:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "201:  require.NoError(t, err)",
          "",
          "---------------"
        ],
        "util/lua/lua_test.go||util/lua/lua_test.go": [
          "File: util/lua/lua_test.go -> util/lua/lua_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"github.com/argoproj/gitops-engine/pkg/health\"",
          "9:  \"github.com/stretchr/testify/assert\"",
          "10:  lua \"github.com/yuin/gopher-lua\"",
          "11:  \"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"",
          "12:  \"sigs.k8s.io/yaml\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:  testObj := StrToUnstructured(objJSON)",
          "81:  vm := VM{}",
          "82:  status, err := vm.ExecuteHealthLua(testObj, newHealthStatusFunction)",
          "84:  expectedHealthStatus := &health.HealthStatus{",
          "85:   Status:  \"Healthy\",",
          "86:   Message: \"testMessage\",",
          "",
          "[Removed Lines]",
          "83:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "84:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:  testObj := StrToUnstructured(ec2AWSCrossplaneObjJson)",
          "93:  vm := VM{}",
          "94:  status, err := vm.ExecuteHealthLua(testObj, newWildcardHealthStatusFunction)",
          "96:  expectedHealthStatus := &health.HealthStatus{",
          "97:   Status:  \"Healthy\",",
          "98:   Message: \"testWildcardMessage\",",
          "",
          "[Removed Lines]",
          "95:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "96:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:  testObj := StrToUnstructured(objJSON)",
          "107:  vm := VM{}",
          "108:  _, err := vm.ExecuteHealthLua(testObj, osLuaScript)",
          "110:  assert.IsType(t, &lua.ApiError{}, err)",
          "111: }",
          "",
          "[Removed Lines]",
          "109:  assert.Error(t, err, \"\")",
          "",
          "[Added Lines]",
          "110:  require.Error(t, err, \"\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:  testObj := StrToUnstructured(objJSON)",
          "129:  vm := VM{}",
          "130:  status, err := vm.ExecuteHealthLua(testObj, invalidHealthStatusStatus)",
          "132:  expectedStatus := &health.HealthStatus{",
          "133:   Status:  health.HealthStatusUnknown,",
          "134:   Message: invalidHealthStatus,",
          "",
          "[Removed Lines]",
          "131:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "132:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "156:   },",
          "157:  }",
          "158:  script, useOpenLibs, err := vm.GetHealthScript(testObj)",
          "160:  assert.False(t, useOpenLibs)",
          "161:  assert.Equal(t, newHealthStatusFunction, script)",
          "162: }",
          "",
          "[Removed Lines]",
          "159:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "160:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "173:  }",
          "175:  script, useOpenLibs, err := vm.GetHealthScript(testObj)",
          "177:  assert.False(t, useOpenLibs)",
          "178:  assert.Equal(t, newHealthStatusFunction, script)",
          "179: }",
          "",
          "[Removed Lines]",
          "176:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "177:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "190:  }",
          "192:  script, useOpenLibs, err := vm.GetHealthScript(testObj)",
          "194:  assert.False(t, useOpenLibs)",
          "195:  assert.Equal(t, newHealthStatusFunction, script)",
          "196: }",
          "",
          "[Removed Lines]",
          "193:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "194:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "207:  }",
          "209:  script, useOpenLibs, err := vm.GetHealthScript(testObj)",
          "211:  assert.False(t, useOpenLibs)",
          "212:  assert.Equal(t, newHealthStatusFunction, script)",
          "213: }",
          "",
          "[Removed Lines]",
          "210:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "211:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "216:  testObj := StrToUnstructured(objJSON)",
          "217:  vm := VM{}",
          "218:  script, useOpenLibs, err := vm.GetHealthScript(testObj)",
          "220:  assert.True(t, useOpenLibs)",
          "221:  assert.NotEmpty(t, script)",
          "222: }",
          "",
          "[Removed Lines]",
          "219:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "220:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "225:  testObj := StrToUnstructured(objWithNoScriptJSON)",
          "226:  vm := VM{}",
          "227:  script, useOpenLibs, err := vm.GetHealthScript(testObj)",
          "229:  assert.True(t, useOpenLibs)",
          "230:  assert.Equal(t, \"\", script)",
          "231: }",
          "",
          "[Removed Lines]",
          "228:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "229:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "235:  vm := VM{}",
          "237:  action, err := vm.GetResourceAction(testObj, \"resume\")",
          "239:  assert.NotEmpty(t, action)",
          "240: }",
          "",
          "[Removed Lines]",
          "238:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "239:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "243:  testObj := StrToUnstructured(objWithNoScriptJSON)",
          "244:  vm := VM{}",
          "245:  action, err := vm.GetResourceAction(testObj, \"test\")",
          "247:  assert.Empty(t, action.ActionLua)",
          "248: }",
          "",
          "[Removed Lines]",
          "246:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "247:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "266:   },",
          "267:  }",
          "268:  action, err := vm.GetResourceAction(testObj, \"test\")",
          "270:  assert.Equal(t, test, action)",
          "271: }",
          "",
          "[Removed Lines]",
          "269:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "270:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "275:  vm := VM{}",
          "277:  discoveryLua, err := vm.GetResourceActionDiscovery(testObj)",
          "279:  assert.NotEmpty(t, discoveryLua)",
          "280: }",
          "",
          "[Removed Lines]",
          "278:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "279:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "283:  testObj := StrToUnstructured(objWithNoScriptJSON)",
          "284:  vm := VM{}",
          "285:  discoveryLua, err := vm.GetResourceActionDiscovery(testObj)",
          "287:  assert.Empty(t, discoveryLua)",
          "288: }",
          "",
          "[Removed Lines]",
          "286:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "287:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "299:   },",
          "300:  }",
          "301:  discoveryLua, err := vm.GetResourceActionDiscovery(testObj)",
          "303:  assert.Equal(t, validDiscoveryLua, discoveryLua)",
          "304: }",
          "",
          "[Removed Lines]",
          "302:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "303:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "319:  testObj := StrToUnstructured(objJSON)",
          "320:  vm := VM{}",
          "321:  actions, err := vm.ExecuteResourceActionDiscovery(testObj, validDiscoveryLua)",
          "323:  expectedActions := []appv1.ResourceAction{",
          "324:   {",
          "325:    Name: \"resume\",",
          "",
          "[Removed Lines]",
          "322:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "323:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "347:  testObj := StrToUnstructured(objJSON)",
          "348:  vm := VM{}",
          "349:  actions, err := vm.ExecuteResourceActionDiscovery(testObj, discoveryLuaWithInvalidResourceAction)",
          "351:  assert.Nil(t, actions)",
          "352: }",
          "",
          "[Removed Lines]",
          "350:  assert.Error(t, err)",
          "",
          "[Added Lines]",
          "351:  require.Error(t, err)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "361:  vm := VM{}",
          "362:  actions, err := vm.ExecuteResourceActionDiscovery(testObj, invalidDiscoveryLua)",
          "363:  assert.Nil(t, actions)",
          "365: }",
          "367: const validActionLua = `",
          "",
          "[Removed Lines]",
          "364:  assert.Error(t, err)",
          "",
          "[Added Lines]",
          "365:  require.Error(t, err)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "387:  expectedLuaUpdatedObj := StrToUnstructured(expectedLuaUpdatedResult)",
          "388:  vm := VM{}",
          "389:  newObjects, err := vm.ExecuteResourceAction(testObj, validActionLua)",
          "391:  assert.Len(t, newObjects, 1)",
          "392:  assert.Equal(t, newObjects[0].K8SOperation, K8SOperation(\"patch\"))",
          "393:  assert.Equal(t, expectedLuaUpdatedObj, newObjects[0].UnstructuredObj)",
          "",
          "[Removed Lines]",
          "390:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "391:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "554: func TestExecuteNewStyleCreateActionSingleResource(t *testing.T) {",
          "555:  testObj := StrToUnstructured(cronJobObjYaml)",
          "556:  jsonBytes, err := yaml.YAMLToJSON([]byte(expectedCreatedJobObjList))",
          "558:  t.Log(bytes.NewBuffer(jsonBytes).String())",
          "559:  expectedObjects, err := UnmarshalToImpactedResources(bytes.NewBuffer(jsonBytes).String())",
          "561:  vm := VM{}",
          "562:  newObjects, err := vm.ExecuteResourceAction(testObj, createJobActionLua)",
          "564:  assert.Equal(t, expectedObjects, newObjects)",
          "565: }",
          "567: func TestExecuteNewStyleCreateActionMultipleResources(t *testing.T) {",
          "568:  testObj := StrToUnstructured(cronJobObjYaml)",
          "569:  jsonBytes, err := yaml.YAMLToJSON([]byte(expectedCreatedMultipleJobsObjList))",
          "572:  expectedObjects, err := UnmarshalToImpactedResources(bytes.NewBuffer(jsonBytes).String())",
          "574:  vm := VM{}",
          "575:  newObjects, err := vm.ExecuteResourceAction(testObj, createMultipleJobsActionLua)",
          "577:  assert.Equal(t, expectedObjects, newObjects)",
          "578: }",
          "580: func TestExecuteNewStyleActionMixedOperationsOk(t *testing.T) {",
          "581:  testObj := StrToUnstructured(cronJobObjYaml)",
          "582:  jsonBytes, err := yaml.YAMLToJSON([]byte(expectedActionMixedOperationObjList))",
          "585:  expectedObjects, err := UnmarshalToImpactedResources(bytes.NewBuffer(jsonBytes).String())",
          "587:  vm := VM{}",
          "588:  newObjects, err := vm.ExecuteResourceAction(testObj, mixedOperationActionLuaOk)",
          "590:  assert.Equal(t, expectedObjects, newObjects)",
          "591: }",
          "",
          "[Removed Lines]",
          "557:  assert.NoError(t, err)",
          "560:  assert.NoError(t, err)",
          "563:  assert.NoError(t, err)",
          "570:  assert.NoError(t, err)",
          "573:  assert.NoError(t, err)",
          "576:  assert.NoError(t, err)",
          "583:  assert.NoError(t, err)",
          "586:  assert.NoError(t, err)",
          "589:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "558:  require.NoError(t, err)",
          "561:  require.NoError(t, err)",
          "564:  require.NoError(t, err)",
          "571:  require.NoError(t, err)",
          "574:  require.NoError(t, err)",
          "577:  require.NoError(t, err)",
          "584:  require.NoError(t, err)",
          "587:  require.NoError(t, err)",
          "590:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "594:  testObj := StrToUnstructured(cronJobObjYaml)",
          "595:  vm := VM{}",
          "596:  _, err := vm.ExecuteResourceAction(testObj, createMixedOperationActionLuaFailing)",
          "598:  assert.Contains(t, err.Error(), \"unsupported operation\")",
          "599: }",
          "",
          "[Removed Lines]",
          "597:  assert.Error(t, err)",
          "",
          "[Added Lines]",
          "598:  require.Error(t, err)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "614:  testObj := StrToUnstructured(objJSON)",
          "615:  vm := VM{}",
          "616:  _, err := vm.ExecuteResourceAction(testObj, invalidTableReturn)",
          "618: }",
          "620: const objWithEmptyStruct = `",
          "",
          "[Removed Lines]",
          "617:  assert.Error(t, err)",
          "",
          "[Added Lines]",
          "618:  require.Error(t, err)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "669:  expectedObj := StrToUnstructured(expectedUpdatedObjWithEmptyStruct)",
          "670:  vm := VM{}",
          "671:  newObjects, err := vm.ExecuteResourceAction(testObj, pausedToFalseLua)",
          "673:  assert.Len(t, newObjects, 1)",
          "674:  assert.Equal(t, newObjects[0].K8SOperation, K8SOperation(\"patch\"))",
          "675:  assert.Equal(t, expectedObj, newObjects[0].UnstructuredObj)",
          "",
          "[Removed Lines]",
          "672:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "673:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "718:   testObj := StrToUnstructured(testSA)",
          "719:   overrides := getHealthOverride(true)",
          "720:   status, err := overrides.GetResourceHealth(testObj)",
          "722:   expectedStatus := &health.HealthStatus{",
          "723:    Status:  health.HealthStatusHealthy,",
          "724:    Message: \"Standard lib was used\",",
          "",
          "[Removed Lines]",
          "721:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "722:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "732:   status, err := overrides.GetResourceHealth(testObj)",
          "733:   assert.IsType(t, &lua.ApiError{}, err)",
          "734:   expectedErr := \"<string>:4: attempt to index a non-table object(nil) with key 'find'\\nstack traceback:\\n\\t<string>:4: in main chunk\\n\\t[G]: ?\"",
          "736:   assert.Nil(t, status)",
          "737:  })",
          "",
          "[Removed Lines]",
          "735:   assert.EqualError(t, err, expectedErr)",
          "",
          "[Added Lines]",
          "736:   require.EqualError(t, err, expectedErr)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "740:   testObj := StrToUnstructured(ec2AWSCrossplaneObjJson)",
          "741:   overrides := getWildcardHealthOverride",
          "742:   status, err := overrides.GetResourceHealth(testObj)",
          "744:   expectedStatus := &health.HealthStatus{",
          "745:    Status: health.HealthStatusHealthy,",
          "746:   }",
          "",
          "[Removed Lines]",
          "743:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "744:   require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "751:   testObj := StrToUnstructured(testSA)",
          "752:   overrides := getWildcardHealthOverride",
          "753:   status, err := overrides.GetResourceHealth(testObj)",
          "755:   assert.Nil(t, status)",
          "756:  })",
          "757: }",
          "",
          "[Removed Lines]",
          "754:   assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "755:   require.NoError(t, err)",
          "",
          "---------------"
        ],
        "util/notification/settings/legacy_test.go||util/notification/settings/legacy_test.go": [
          "File: util/notification/settings/legacy_test.go -> util/notification/settings/legacy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"github.com/argoproj/notifications-engine/pkg/subscriptions\"",
          "9:  \"github.com/argoproj/notifications-engine/pkg/triggers\"",
          "10:  \"github.com/stretchr/testify/assert\"",
          "11:  v1 \"k8s.io/api/core/v1\"",
          "12:  \"k8s.io/apimachinery/pkg/labels\"",
          "13: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"github.com/stretchr/testify/require\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   &v1.ConfigMap{Data: map[string]string{\"config.yaml\": configYAML}},",
          "39:   &v1.Secret{Data: map[string][]byte{}},",
          "40:  )",
          "42:  assert.Equal(t, []string{\"my-trigger1\"}, cfg.DefaultTriggers)",
          "43: }",
          "",
          "[Removed Lines]",
          "41:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "42:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:   &v1.Secret{Data: map[string][]byte{\"notifiers.yaml\": []byte(notifiersYAML)}},",
          "86:  )",
          "89:  assert.Equal(t, map[string]services.Notification{",
          "90:   \"my-template1\": {Message: \"bar\"},",
          "91:   \"my-template2\": {Message: \"foo\"},",
          "",
          "[Removed Lines]",
          "88:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "89:  require.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:  }}, cfg.Triggers[\"my-trigger2\"])",
          "103:  label, err := labels.Parse(\"test=true\")",
          "107:  assert.Equal(t, subscriptions.DefaultSubscriptions([]subscriptions.DefaultSubscription{",
          "108:   {Triggers: []string{\"my-trigger2\"}, Selector: label},",
          "109:  }), cfg.Subscriptions)",
          "",
          "[Removed Lines]",
          "104:  if !assert.NoError(t, err) {",
          "105:   return",
          "106:  }",
          "",
          "[Added Lines]",
          "105:  require.NoError(t, err)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33e32d01da4f67b0faefa5b3f1d1eb5462e10750",
      "candidate_info": {
        "commit_hash": "33e32d01da4f67b0faefa5b3f1d1eb5462e10750",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/33e32d01da4f67b0faefa5b3f1d1eb5462e10750",
        "files": [
          "cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "docs/operator-manual/server-commands/argocd-repo-server.md",
          "manifests/base/repo-server/argocd-repo-server-deployment.yaml",
          "manifests/core-install.yaml",
          "manifests/ha/install.yaml",
          "manifests/ha/namespace-install.yaml",
          "manifests/install.yaml",
          "manifests/namespace-install.yaml",
          "reposerver/repository/repository.go",
          "util/helm/client.go",
          "util/helm/client_test.go",
          "util/helm/mocks/Client.go"
        ],
        "message": "Merge pull request from GHSA-g687-f2gx-6wm8\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n---------\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>",
        "before_after_code_files": [
          "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "util/helm/client.go||util/helm/client.go",
          "util/helm/client_test.go||util/helm/client_test.go",
          "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go",
            "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
          ],
          "candidate": [
            "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go",
            "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go": [
          "File: cmd/argocd-repo-server/commands/argocd_repo_server.go -> cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   allowOutOfBoundsSymlinks          bool",
          "85:   streamedManifestMaxTarSize        string",
          "86:   streamedManifestMaxExtractedSize  string",
          "87:  )",
          "88:  var command = cobra.Command{",
          "89:   Use:               cliName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:   helmManifestMaxExtractedSize      string",
          "88:   disableManifestMaxExtractedSize   bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:    streamedManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(streamedManifestMaxExtractedSize)",
          "123:    errors.CheckError(err)",
          "125:    askPassServer := askpass.NewServer()",
          "126:    metricsServer := metrics.NewMetricsServer()",
          "127:    cacheutil.CollectMetrics(redisClient, metricsServer)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:    helmManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(helmManifestMaxExtractedSize)",
          "128:    errors.CheckError(err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:     AllowOutOfBoundsSymlinks:                     allowOutOfBoundsSymlinks,",
          "137:     StreamedManifestMaxExtractedSize:             streamedManifestMaxExtractedSizeQuantity.ToDec().Value(),",
          "138:     StreamedManifestMaxTarSize:                   streamedManifestMaxTarSizeQuantity.ToDec().Value(),",
          "139:    }, askPassServer)",
          "140:    errors.CheckError(err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:     HelmManifestMaxExtractedSize:                 helmManifestMaxExtractedSizeQuantity.ToDec().Value(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "216:  command.Flags().BoolVar(&allowOutOfBoundsSymlinks, \"allow-oob-symlinks\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS\", false), \"Allow out-of-bounds symlinks in repositories (not recommended)\")",
          "217:  command.Flags().StringVar(&streamedManifestMaxTarSize, \"streamed-manifest-max-tar-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE\", \"100M\"), \"Maximum size of streamed manifest archives\")",
          "218:  command.Flags().StringVar(&streamedManifestMaxExtractedSize, \"streamed-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of streamed manifest archives when extracted\")",
          "219:  tlsConfigCustomizerSrc = tls.AddTLSFlagsToCmd(&command)",
          "220:  cacheSrc = reposervercache.AddCacheFlagsToCmd(&command, func(client *redis.Client) {",
          "221:   redisClient = client",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:  command.Flags().StringVar(&helmManifestMaxExtractedSize, \"helm-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of helm manifest archives when extracted\")",
          "226:  command.Flags().BoolVar(&disableManifestMaxExtractedSize, \"disable-helm-manifest-max-extracted-size\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", false), \"Disable maximum size of helm manifest archives when extracted\")",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  AllowOutOfBoundsSymlinks                     bool",
          "110:  StreamedManifestMaxExtractedSize             int64",
          "111:  StreamedManifestMaxTarSize                   int64",
          "112: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:  HelmManifestMaxExtractedSize                 int64",
          "113:  DisableHelmManifestMaxExtractedSize          bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:   if source.Helm != nil {",
          "349:    helmPassCredentials = source.Helm.PassCredentials",
          "350:   }",
          "352:   if err != nil {",
          "353:    return err",
          "354:   }",
          "",
          "[Removed Lines]",
          "351:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials)",
          "",
          "[Added Lines]",
          "353:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials, s.initConstants.HelmManifestMaxExtractedSize, s.initConstants.DisableHelmManifestMaxExtractedSize)",
          "",
          "---------------"
        ],
        "util/helm/client.go||util/helm/client.go": [
          "File: util/helm/client.go -> util/helm/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"encoding/json\"",
          "8:  \"errors\"",
          "9:  \"fmt\"",
          "10:  \"io\"",
          "11:  \"net/http\"",
          "12:  \"net/url\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  \"github.com/argoproj/argo-cd/v2/common\"",
          "25:  \"github.com/argoproj/argo-cd/v2/util/cache\"",
          "27:  argoio \"github.com/argoproj/argo-cd/v2/util/io\"",
          "28:  \"github.com/argoproj/argo-cd/v2/util/io/files\"",
          "29:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
          "",
          "[Removed Lines]",
          "26:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52: type Client interface {",
          "53:  CleanChartCache(chart string, version string) error",
          "55:  GetIndex(noCache bool) (*Index, error)",
          "56:  GetTags(chart string, noCache bool) (*TagsList, error)",
          "57:  TestHelmOCI() (bool, error)",
          "",
          "[Removed Lines]",
          "54:  ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error)",
          "",
          "[Added Lines]",
          "54:  ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:  return os.RemoveAll(cachePath)",
          "122: }",
          "126:  helmCmd, err := NewCmdWithVersion(\"\", HelmV3, c.enableOci, c.proxy)",
          "",
          "[Removed Lines]",
          "124: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error) {",
          "",
          "[Added Lines]",
          "124: func untarChart(tempDir string, cachedChartPath string, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) error {",
          "125:  if disableManifestMaxExtractedSize {",
          "126:   cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
          "127:   cmd.Dir = tempDir",
          "128:   _, err := executil.Run(cmd)",
          "129:   return err",
          "130:  }",
          "131:  reader, err := os.Open(cachedChartPath)",
          "132:  if err != nil {",
          "133:   return err",
          "134:  }",
          "135:  return files.Untgz(tempDir, reader, manifestMaxExtractedSize, false)",
          "136: }",
          "138: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "195:   if len(infos) != 1 {",
          "196:    return \"\", nil, fmt.Errorf(\"expected 1 file, found %v\", len(infos))",
          "197:   }",
          "198:   err = os.Rename(filepath.Join(tempDest, infos[0].Name()), cachedChartPath)",
          "199:   if err != nil {",
          "200:    return \"\", nil, err",
          "201:   }",
          "202:  }",
          "207:  if err != nil {",
          "208:   _ = os.RemoveAll(tempDir)",
          "209:   return \"\", nil, err",
          "",
          "[Removed Lines]",
          "204:  cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
          "205:  cmd.Dir = tempDir",
          "206:  _, err = executil.Run(cmd)",
          "",
          "[Added Lines]",
          "219:  err = untarChart(tempDir, cachedChartPath, manifestMaxExtractedSize, disableManifestMaxExtractedSize)",
          "",
          "---------------"
        ],
        "util/helm/client_test.go||util/helm/client_test.go": [
          "File: util/helm/client_test.go -> util/helm/client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"bytes\"",
          "5:  \"encoding/json\"",
          "6:  \"fmt\"",
          "7:  \"os\"",
          "8:  \"strings\"",
          "9:  \"testing\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"math\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: func Test_nativeHelmChart_ExtractChart(t *testing.T) {",
          "74:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "76:  assert.NoError(t, err)",
          "77:  defer io.Close(closer)",
          "78:  info, err := os.Stat(path)",
          "",
          "[Removed Lines]",
          "75:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
          "",
          "[Added Lines]",
          "76:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:  assert.True(t, info.IsDir())",
          "81: }",
          "83: func Test_nativeHelmChart_ExtractChart_insecure(t *testing.T) {",
          "84:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{InsecureSkipVerify: true}, false, \"\")",
          "86:  assert.NoError(t, err)",
          "87:  defer io.Close(closer)",
          "88:  info, err := os.Stat(path)",
          "",
          "[Removed Lines]",
          "85:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
          "",
          "[Added Lines]",
          "84: func Test_nativeHelmChart_ExtractChartWithLimiter(t *testing.T) {",
          "85:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "86:  _, _, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, 100, false)",
          "87:  assert.Error(t, err, \"error while iterating on tar reader: unexpected EOF\")",
          "88: }",
          "92:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
          "",
          "---------------"
        ],
        "util/helm/mocks/Client.go||util/helm/mocks/Client.go": [
          "File: util/helm/mocks/Client.go -> util/helm/mocks/Client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: }",
          "33:  ret := _m.Called(chart, version)",
          "35:  var r0 string",
          "",
          "[Removed Lines]",
          "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error) {",
          "",
          "[Added Lines]",
          "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, io.Closer, error) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c6cfa306d1aa84dc37e2cae85ce212da825ccae",
      "candidate_info": {
        "commit_hash": "0c6cfa306d1aa84dc37e2cae85ce212da825ccae",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/0c6cfa306d1aa84dc37e2cae85ce212da825ccae",
        "files": [
          "cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "docs/operator-manual/server-commands/argocd-repo-server.md",
          "manifests/base/repo-server/argocd-repo-server-deployment.yaml",
          "manifests/core-install.yaml",
          "manifests/ha/install.yaml",
          "manifests/ha/namespace-install.yaml",
          "manifests/install.yaml",
          "manifests/namespace-install.yaml",
          "reposerver/repository/repository.go",
          "util/helm/client.go",
          "util/helm/client_test.go",
          "util/helm/mocks/Client.go"
        ],
        "message": "Merge pull request from GHSA-g687-f2gx-6wm8\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n---------\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>",
        "before_after_code_files": [
          "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "util/helm/client.go||util/helm/client.go",
          "util/helm/client_test.go||util/helm/client_test.go",
          "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go",
            "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
          ],
          "candidate": [
            "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go",
            "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go": [
          "File: cmd/argocd-repo-server/commands/argocd_repo_server.go -> cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   allowOutOfBoundsSymlinks          bool",
          "85:   streamedManifestMaxTarSize        string",
          "86:   streamedManifestMaxExtractedSize  string",
          "87:  )",
          "88:  var command = cobra.Command{",
          "89:   Use:               cliName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:   helmManifestMaxExtractedSize      string",
          "88:   disableManifestMaxExtractedSize   bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:    streamedManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(streamedManifestMaxExtractedSize)",
          "123:    errors.CheckError(err)",
          "125:    askPassServer := askpass.NewServer()",
          "126:    metricsServer := metrics.NewMetricsServer()",
          "127:    cacheutil.CollectMetrics(redisClient, metricsServer)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:    helmManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(helmManifestMaxExtractedSize)",
          "128:    errors.CheckError(err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:     AllowOutOfBoundsSymlinks:                     allowOutOfBoundsSymlinks,",
          "137:     StreamedManifestMaxExtractedSize:             streamedManifestMaxExtractedSizeQuantity.ToDec().Value(),",
          "138:     StreamedManifestMaxTarSize:                   streamedManifestMaxTarSizeQuantity.ToDec().Value(),",
          "139:    }, askPassServer)",
          "140:    errors.CheckError(err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:     HelmManifestMaxExtractedSize:                 helmManifestMaxExtractedSizeQuantity.ToDec().Value(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "216:  command.Flags().BoolVar(&allowOutOfBoundsSymlinks, \"allow-oob-symlinks\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS\", false), \"Allow out-of-bounds symlinks in repositories (not recommended)\")",
          "217:  command.Flags().StringVar(&streamedManifestMaxTarSize, \"streamed-manifest-max-tar-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE\", \"100M\"), \"Maximum size of streamed manifest archives\")",
          "218:  command.Flags().StringVar(&streamedManifestMaxExtractedSize, \"streamed-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of streamed manifest archives when extracted\")",
          "219:  tlsConfigCustomizerSrc = tls.AddTLSFlagsToCmd(&command)",
          "220:  cacheSrc = reposervercache.AddCacheFlagsToCmd(&command, func(client *redis.Client) {",
          "221:   redisClient = client",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:  command.Flags().StringVar(&helmManifestMaxExtractedSize, \"helm-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of helm manifest archives when extracted\")",
          "226:  command.Flags().BoolVar(&disableManifestMaxExtractedSize, \"disable-helm-manifest-max-extracted-size\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", false), \"Disable maximum size of helm manifest archives when extracted\")",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  AllowOutOfBoundsSymlinks                     bool",
          "110:  StreamedManifestMaxExtractedSize             int64",
          "111:  StreamedManifestMaxTarSize                   int64",
          "112: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:  HelmManifestMaxExtractedSize                 int64",
          "113:  DisableHelmManifestMaxExtractedSize          bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:   if source.Helm != nil {",
          "349:    helmPassCredentials = source.Helm.PassCredentials",
          "350:   }",
          "352:   if err != nil {",
          "353:    return err",
          "354:   }",
          "",
          "[Removed Lines]",
          "351:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials)",
          "",
          "[Added Lines]",
          "353:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials, s.initConstants.HelmManifestMaxExtractedSize, s.initConstants.DisableHelmManifestMaxExtractedSize)",
          "",
          "---------------"
        ],
        "util/helm/client.go||util/helm/client.go": [
          "File: util/helm/client.go -> util/helm/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"encoding/json\"",
          "8:  \"errors\"",
          "9:  \"fmt\"",
          "10:  \"io\"",
          "11:  \"net/http\"",
          "12:  \"net/url\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  \"github.com/argoproj/argo-cd/v2/common\"",
          "25:  \"github.com/argoproj/argo-cd/v2/util/cache\"",
          "27:  argoio \"github.com/argoproj/argo-cd/v2/util/io\"",
          "28:  \"github.com/argoproj/argo-cd/v2/util/io/files\"",
          "29:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
          "",
          "[Removed Lines]",
          "26:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52: type Client interface {",
          "53:  CleanChartCache(chart string, version string) error",
          "55:  GetIndex(noCache bool) (*Index, error)",
          "56:  GetTags(chart string, noCache bool) (*TagsList, error)",
          "57:  TestHelmOCI() (bool, error)",
          "",
          "[Removed Lines]",
          "54:  ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error)",
          "",
          "[Added Lines]",
          "54:  ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:  return os.RemoveAll(cachePath)",
          "122: }",
          "126:  helmCmd, err := NewCmdWithVersion(\"\", HelmV3, c.enableOci, c.proxy)",
          "",
          "[Removed Lines]",
          "124: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error) {",
          "",
          "[Added Lines]",
          "124: func untarChart(tempDir string, cachedChartPath string, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) error {",
          "125:  if disableManifestMaxExtractedSize {",
          "126:   cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
          "127:   cmd.Dir = tempDir",
          "128:   _, err := executil.Run(cmd)",
          "129:   return err",
          "130:  }",
          "131:  reader, err := os.Open(cachedChartPath)",
          "132:  if err != nil {",
          "133:   return err",
          "134:  }",
          "135:  return files.Untgz(tempDir, reader, manifestMaxExtractedSize)",
          "136: }",
          "138: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "195:   if len(infos) != 1 {",
          "196:    return \"\", nil, fmt.Errorf(\"expected 1 file, found %v\", len(infos))",
          "197:   }",
          "198:   err = os.Rename(filepath.Join(tempDest, infos[0].Name()), cachedChartPath)",
          "199:   if err != nil {",
          "200:    return \"\", nil, err",
          "201:   }",
          "202:  }",
          "207:  if err != nil {",
          "208:   _ = os.RemoveAll(tempDir)",
          "209:   return \"\", nil, err",
          "",
          "[Removed Lines]",
          "204:  cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
          "205:  cmd.Dir = tempDir",
          "206:  _, err = executil.Run(cmd)",
          "",
          "[Added Lines]",
          "219:  err = untarChart(tempDir, cachedChartPath, manifestMaxExtractedSize, disableManifestMaxExtractedSize)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "301:  }",
          "303:  tr := &http.Transport{",
          "306:   DisableKeepAlives: true,",
          "307:  }",
          "308:  client := http.Client{Transport: tr}",
          "",
          "[Removed Lines]",
          "304:   Proxy:           proxy.GetCallback(c.proxy),",
          "305:   TLSClientConfig: tlsConf,",
          "",
          "[Added Lines]",
          "317:   Proxy:             proxy.GetCallback(c.proxy),",
          "318:   TLSClientConfig:   tlsConf,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "470:  }",
          "472:  tr := &http.Transport{",
          "475:   DisableKeepAlives: true,",
          "476:  }",
          "477:  client := http.Client{Transport: tr}",
          "",
          "[Removed Lines]",
          "473:   Proxy:           proxy.GetCallback(c.proxy),",
          "474:   TLSClientConfig: tlsConf,",
          "",
          "[Added Lines]",
          "486:   Proxy:             proxy.GetCallback(c.proxy),",
          "487:   TLSClientConfig:   tlsConf,",
          "",
          "---------------"
        ],
        "util/helm/client_test.go||util/helm/client_test.go": [
          "File: util/helm/client_test.go -> util/helm/client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"bytes\"",
          "5:  \"encoding/json\"",
          "6:  \"fmt\"",
          "7:  \"os\"",
          "8:  \"strings\"",
          "9:  \"testing\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"math\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: func Test_nativeHelmChart_ExtractChart(t *testing.T) {",
          "74:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "76:  assert.NoError(t, err)",
          "77:  defer io.Close(closer)",
          "78:  info, err := os.Stat(path)",
          "",
          "[Removed Lines]",
          "75:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
          "",
          "[Added Lines]",
          "76:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:  assert.True(t, info.IsDir())",
          "81: }",
          "83: func Test_nativeHelmChart_ExtractChart_insecure(t *testing.T) {",
          "84:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{InsecureSkipVerify: true}, false, \"\")",
          "86:  assert.NoError(t, err)",
          "87:  defer io.Close(closer)",
          "88:  info, err := os.Stat(path)",
          "",
          "[Removed Lines]",
          "85:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
          "",
          "[Added Lines]",
          "84: func Test_nativeHelmChart_ExtractChartWithLimiter(t *testing.T) {",
          "85:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "86:  _, _, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, 100, false)",
          "87:  assert.Error(t, err, \"error while iterating on tar reader: unexpected EOF\")",
          "88: }",
          "92:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
          "",
          "---------------"
        ],
        "util/helm/mocks/Client.go||util/helm/mocks/Client.go": [
          "File: util/helm/mocks/Client.go -> util/helm/mocks/Client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: }",
          "33:  ret := _m.Called(chart, version)",
          "35:  var r0 string",
          "",
          "[Removed Lines]",
          "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error) {",
          "",
          "[Added Lines]",
          "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, io.Closer, error) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44e52c4ae76e6da1343bdd54e57a822d93549f28",
      "candidate_info": {
        "commit_hash": "44e52c4ae76e6da1343bdd54e57a822d93549f28",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/44e52c4ae76e6da1343bdd54e57a822d93549f28",
        "files": [
          "cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "docs/operator-manual/server-commands/argocd-repo-server.md",
          "manifests/base/repo-server/argocd-repo-server-deployment.yaml",
          "manifests/core-install.yaml",
          "manifests/ha/install.yaml",
          "manifests/ha/namespace-install.yaml",
          "manifests/install.yaml",
          "manifests/namespace-install.yaml",
          "reposerver/repository/repository.go",
          "util/helm/client.go",
          "util/helm/client_test.go",
          "util/helm/mocks/Client.go"
        ],
        "message": "Merge pull request from GHSA-g687-f2gx-6wm8\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n---------\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>",
        "before_after_code_files": [
          "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "util/helm/client.go||util/helm/client.go",
          "util/helm/client_test.go||util/helm/client_test.go",
          "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go",
            "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
          ],
          "candidate": [
            "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go",
            "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go": [
          "File: cmd/argocd-repo-server/commands/argocd_repo_server.go -> cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   allowOutOfBoundsSymlinks          bool",
          "83:   streamedManifestMaxTarSize        string",
          "84:   streamedManifestMaxExtractedSize  string",
          "85:  )",
          "86:  var command = cobra.Command{",
          "87:   Use:               cliName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:   helmManifestMaxExtractedSize      string",
          "86:   disableManifestMaxExtractedSize   bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:    streamedManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(streamedManifestMaxExtractedSize)",
          "121:    errors.CheckError(err)",
          "123:    askPassServer := askpass.NewServer()",
          "124:    metricsServer := metrics.NewMetricsServer()",
          "125:    cacheutil.CollectMetrics(redisClient, metricsServer)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:    helmManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(helmManifestMaxExtractedSize)",
          "126:    errors.CheckError(err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:     AllowOutOfBoundsSymlinks:                     allowOutOfBoundsSymlinks,",
          "135:     StreamedManifestMaxExtractedSize:             streamedManifestMaxExtractedSizeQuantity.ToDec().Value(),",
          "136:     StreamedManifestMaxTarSize:                   streamedManifestMaxTarSizeQuantity.ToDec().Value(),",
          "137:    }, askPassServer)",
          "138:    errors.CheckError(err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:     HelmManifestMaxExtractedSize:                 helmManifestMaxExtractedSizeQuantity.ToDec().Value(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "216:  command.Flags().BoolVar(&allowOutOfBoundsSymlinks, \"allow-oob-symlinks\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS\", false), \"Allow out-of-bounds symlinks in repositories (not recommended)\")",
          "217:  command.Flags().StringVar(&streamedManifestMaxTarSize, \"streamed-manifest-max-tar-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE\", \"100M\"), \"Maximum size of streamed manifest archives\")",
          "218:  command.Flags().StringVar(&streamedManifestMaxExtractedSize, \"streamed-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of streamed manifest archives when extracted\")",
          "219:  tlsConfigCustomizerSrc = tls.AddTLSFlagsToCmd(&command)",
          "220:  cacheSrc = reposervercache.AddCacheFlagsToCmd(&command, func(client *redis.Client) {",
          "221:   redisClient = client",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:  command.Flags().StringVar(&helmManifestMaxExtractedSize, \"helm-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of helm manifest archives when extracted\")",
          "226:  command.Flags().BoolVar(&disableManifestMaxExtractedSize, \"disable-helm-manifest-max-extracted-size\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", false), \"Disable maximum size of helm manifest archives when extracted\")",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:  AllowOutOfBoundsSymlinks                     bool",
          "108:  StreamedManifestMaxExtractedSize             int64",
          "109:  StreamedManifestMaxTarSize                   int64",
          "110: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:  HelmManifestMaxExtractedSize                 int64",
          "111:  DisableHelmManifestMaxExtractedSize          bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346:   if source.Helm != nil {",
          "347:    helmPassCredentials = source.Helm.PassCredentials",
          "348:   }",
          "350:   if err != nil {",
          "351:    return err",
          "352:   }",
          "",
          "[Removed Lines]",
          "349:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials)",
          "",
          "[Added Lines]",
          "351:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials, s.initConstants.HelmManifestMaxExtractedSize, s.initConstants.DisableHelmManifestMaxExtractedSize)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2233:  if err != nil {",
          "2234:   return nil, fmt.Errorf(\"helm client error: %v\", err)",
          "2235:  }",
          "2237:  if err != nil {",
          "2238:   return nil, fmt.Errorf(\"error extracting chart: %v\", err)",
          "2239:  }",
          "",
          "[Removed Lines]",
          "2236:  chartPath, closer, err := helmClient.ExtractChart(q.Name, revision, false)",
          "",
          "[Added Lines]",
          "2238:  chartPath, closer, err := helmClient.ExtractChart(q.Name, revision, false, s.initConstants.HelmManifestMaxExtractedSize, s.initConstants.DisableHelmManifestMaxExtractedSize)",
          "",
          "---------------"
        ],
        "util/helm/client.go||util/helm/client.go": [
          "File: util/helm/client.go -> util/helm/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"encoding/json\"",
          "9:  \"errors\"",
          "10:  \"fmt\"",
          "11:  \"io\"",
          "12:  \"net/http\"",
          "13:  \"net/url\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  \"oras.land/oras-go/v2/registry/remote/auth\"",
          "27:  \"github.com/argoproj/argo-cd/v2/util/cache\"",
          "29:  argoio \"github.com/argoproj/argo-cd/v2/util/io\"",
          "30:  \"github.com/argoproj/argo-cd/v2/util/io/files\"",
          "31:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
          "",
          "[Removed Lines]",
          "28:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: type Client interface {",
          "54:  CleanChartCache(chart string, version string) error",
          "56:  GetIndex(noCache bool) (*Index, error)",
          "57:  GetTags(chart string, noCache bool) (*TagsList, error)",
          "58:  TestHelmOCI() (bool, error)",
          "",
          "[Removed Lines]",
          "55:  ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error)",
          "",
          "[Added Lines]",
          "55:  ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:  return os.RemoveAll(cachePath)",
          "123: }",
          "127:  helmCmd, err := NewCmdWithVersion(\"\", HelmV3, c.enableOci, c.proxy)",
          "",
          "[Removed Lines]",
          "125: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error) {",
          "",
          "[Added Lines]",
          "125: func untarChart(tempDir string, cachedChartPath string, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) error {",
          "126:  if disableManifestMaxExtractedSize {",
          "127:   cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
          "128:   cmd.Dir = tempDir",
          "129:   _, err := executil.Run(cmd)",
          "130:   return err",
          "131:  }",
          "132:  reader, err := os.Open(cachedChartPath)",
          "133:  if err != nil {",
          "134:   return err",
          "135:  }",
          "136:  return files.Untgz(tempDir, reader, manifestMaxExtractedSize, false)",
          "137: }",
          "139: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "196:   if len(infos) != 1 {",
          "197:    return \"\", nil, fmt.Errorf(\"expected 1 file, found %v\", len(infos))",
          "198:   }",
          "199:   err = os.Rename(filepath.Join(tempDest, infos[0].Name()), cachedChartPath)",
          "200:   if err != nil {",
          "201:    return \"\", nil, err",
          "202:   }",
          "203:  }",
          "208:  if err != nil {",
          "209:   _ = os.RemoveAll(tempDir)",
          "210:   return \"\", nil, err",
          "",
          "[Removed Lines]",
          "205:  cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
          "206:  cmd.Dir = tempDir",
          "207:  _, err = executil.Run(cmd)",
          "",
          "[Added Lines]",
          "220:  err = untarChart(tempDir, cachedChartPath, manifestMaxExtractedSize, disableManifestMaxExtractedSize)",
          "",
          "---------------"
        ],
        "util/helm/client_test.go||util/helm/client_test.go": [
          "File: util/helm/client_test.go -> util/helm/client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"bytes\"",
          "5:  \"encoding/json\"",
          "6:  \"fmt\"",
          "7:  \"os\"",
          "8:  \"strings\"",
          "9:  \"testing\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"math\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: func Test_nativeHelmChart_ExtractChart(t *testing.T) {",
          "73:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "75:  assert.NoError(t, err)",
          "76:  defer io.Close(closer)",
          "77:  info, err := os.Stat(path)",
          "",
          "[Removed Lines]",
          "74:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
          "",
          "[Added Lines]",
          "75:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:  assert.True(t, info.IsDir())",
          "80: }",
          "82: func Test_nativeHelmChart_ExtractChart_insecure(t *testing.T) {",
          "83:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{InsecureSkipVerify: true}, false, \"\")",
          "85:  assert.NoError(t, err)",
          "86:  defer io.Close(closer)",
          "87:  info, err := os.Stat(path)",
          "",
          "[Removed Lines]",
          "84:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
          "",
          "[Added Lines]",
          "83: func Test_nativeHelmChart_ExtractChartWithLimiter(t *testing.T) {",
          "84:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "85:  _, _, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, 100, false)",
          "86:  assert.Error(t, err, \"error while iterating on tar reader: unexpected EOF\")",
          "87: }",
          "91:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
          "",
          "---------------"
        ],
        "util/helm/mocks/Client.go||util/helm/mocks/Client.go": [
          "File: util/helm/mocks/Client.go -> util/helm/mocks/Client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: }",
          "33:  ret := _m.Called(chart, version)",
          "35:  var r0 string",
          "",
          "[Removed Lines]",
          "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error) {",
          "",
          "[Added Lines]",
          "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, io.Closer, error) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}