{
  "cve_id": "CVE-2024-36107",
  "cve_desc": "MinIO is a High Performance Object Storage released under GNU Affero General Public License v3.0. `If-Modified-Since` and `If-Unmodified-Since` headers when used with anonymous requests by sending a random object name requests can be used to determine if an object exists or not on the server on a specific bucket and also gain access to some amount of\ninformation such as  `Last-Modified (of the latest version)`, `Etag (of the latest version)`, `x-amz-version-id (of the latest version)`, `Expires (metadata value of the latest version)`, `Cache-Control (metadata value of the latest version)`. This conditional check was being honored before validating if the anonymous access is indeed allowed on the metadata of an object. This issue has been addressed in commit `e0fe7cc3917`. Users must upgrade to RELEASE.2024-05-27T19-17-46Z for the fix. There are no known workarounds for this issue.",
  "repo": "minio/minio",
  "patch_hash": "e0fe7cc391724fc5baa85b45508f425020fe4272",
  "patch_info": {
    "commit_hash": "e0fe7cc391724fc5baa85b45508f425020fe4272",
    "repo": "minio/minio",
    "commit_url": "https://github.com/minio/minio/commit/e0fe7cc391724fc5baa85b45508f425020fe4272",
    "files": [
      ".github/workflows/multipart/migrate.sh",
      ".gitignore",
      "Makefile",
      "buildscripts/rewrite-old-new.sh",
      "buildscripts/verify-healing-empty-erasure-set.sh",
      "buildscripts/verify-healing.sh",
      "cmd/object-handlers.go",
      "docs/bucket/replication/setup_3site_replication.sh",
      "docs/debugging/build.sh",
      "docs/debugging/inspect/go.mod",
      "docs/debugging/pprofgoparser/go.mod",
      "docs/debugging/reorder-disks/go.mod",
      "docs/debugging/reorder-disks/go.sum",
      "docs/debugging/xattr/go.mod",
      "docs/distributed/decom-compressed-sse-s3.sh",
      "docs/distributed/decom-encrypted-kes.sh",
      "docs/distributed/decom-encrypted-sse-s3.sh",
      "docs/distributed/decom-encrypted.sh",
      "docs/distributed/decom.sh"
    ],
    "message": "fix: information disclosure bug in preconditions GET (#19810)\n\nprecondition check was being honored before, validating\nif anonymous access is allowed on the metadata of an\nobject, leading to metadata disclosure of the following\nheaders.\n\n```\nLast-Modified\nEtag\nx-amz-version-id\nExpires:\nCache-Control:\n```\n\nalthough the information presented is minimal in nature,\nand of opaque nature. It still simply discloses that an\nobject by a specific name exists or not without even having\nenough permissions.",
    "before_after_code_files": [
      ".github/workflows/multipart/migrate.sh||.github/workflows/multipart/migrate.sh",
      "buildscripts/rewrite-old-new.sh||buildscripts/rewrite-old-new.sh",
      "buildscripts/verify-healing-empty-erasure-set.sh||buildscripts/verify-healing-empty-erasure-set.sh",
      "buildscripts/verify-healing.sh||buildscripts/verify-healing.sh",
      "cmd/object-handlers.go||cmd/object-handlers.go"
    ]
  },
  "patch_diff": {
    ".github/workflows/multipart/migrate.sh||.github/workflows/multipart/migrate.sh": [
      "File: .github/workflows/multipart/migrate.sh -> .github/workflows/multipart/migrate.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:   chmod +x mc",
      "25: fi",
      "29: export RELEASE=RELEASE.2023-08-29T23-07-35Z",
      "31: docker-compose -f docker-compose-site1.yaml up -d",
      "",
      "[Removed Lines]",
      "27: go install -v github.com/minio/minio/docs/debugging/s3-check-md5@latest",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "46: sleep 5",
      "53: if [ $failed_count_site1 -ne 0 ]; then",
      "54:  echo \"failed with multipart on site1 uploads\"",
      "",
      "[Removed Lines]",
      "48: s3-check-md5 -h",
      "50: failed_count_site1=$(s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site1-nginx:9001 -bucket testbucket 2>&1 | grep FAILED | wc -l)",
      "51: failed_count_site2=$(s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site2-nginx:9002 -bucket testbucket 2>&1 | grep FAILED | wc -l)",
      "",
      "[Added Lines]",
      "46: ./s3-check-md5 -h",
      "48: failed_count_site1=$(./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site1-nginx:9001 -bucket testbucket 2>&1 | grep FAILED | wc -l)",
      "49: failed_count_site2=$(./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site2-nginx:9002 -bucket testbucket 2>&1 | grep FAILED | wc -l)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "65: sleep 5",
      "70: ## we do not need to fail here, since we are going to test",
      "71: ## upgrading to master, healing and being able to recover",
      "",
      "[Removed Lines]",
      "67: failed_count_site1=$(s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site1-nginx:9001 -bucket testbucket 2>&1 | grep FAILED | wc -l)",
      "68: failed_count_site2=$(s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site2-nginx:9002 -bucket testbucket 2>&1 | grep FAILED | wc -l)",
      "",
      "[Added Lines]",
      "65: failed_count_site1=$(./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site1-nginx:9001 -bucket testbucket 2>&1 | grep FAILED | wc -l)",
      "66: failed_count_site2=$(./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site2-nginx:9002 -bucket testbucket 2>&1 | grep FAILED | wc -l)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "93:  ./mc admin heal -r --remove --json site2/ 2>&1 >/dev/null",
      "94: done",
      "99: if [ $failed_count_site1 -ne 0 ]; then",
      "100:  echo \"failed with multipart on site1 uploads\"",
      "",
      "[Removed Lines]",
      "96: failed_count_site1=$(s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site1-nginx:9001 -bucket testbucket 2>&1 | grep FAILED | wc -l)",
      "97: failed_count_site2=$(s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site2-nginx:9002 -bucket testbucket 2>&1 | grep FAILED | wc -l)",
      "",
      "[Added Lines]",
      "94: failed_count_site1=$(./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site1-nginx:9001 -bucket testbucket 2>&1 | grep FAILED | wc -l)",
      "95: failed_count_site2=$(./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site2-nginx:9002 -bucket testbucket 2>&1 | grep FAILED | wc -l)",
      "",
      "---------------"
    ],
    "buildscripts/rewrite-old-new.sh||buildscripts/rewrite-old-new.sh": [
      "File: buildscripts/rewrite-old-new.sh -> buildscripts/rewrite-old-new.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:  \"${MINIO_OLD[@]}\" --address \":$start_port\" \"${WORK_DIR}/xl{1...16}\" >\"${WORK_DIR}/server1.log\" 2>&1 &",
      "46:  pid=$!",
      "47:  disown $pid",
      "50:  if ! ps -p ${pid} 1>&2 >/dev/null; then",
      "51:   echo \"server1 log:\"",
      "",
      "[Removed Lines]",
      "48:  sleep 10",
      "",
      "[Added Lines]",
      "49:  \"${WORK_DIR}/mc\" ready minio/",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77:  \"${MINIO[@]}\" --address \":$start_port\" \"${WORK_DIR}/xl{1...16}\" >\"${WORK_DIR}/server1.log\" 2>&1 &",
      "78:  pid=$!",
      "79:  disown $pid",
      "82:  if ! ps -p ${pid} 1>&2 >/dev/null; then",
      "83:   echo \"server1 log:\"",
      "",
      "[Removed Lines]",
      "80:  sleep 10",
      "",
      "[Added Lines]",
      "82:  \"${WORK_DIR}/mc\" ready minio/",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:   exit 1",
      "88:  fi",
      "93:   -debug \\",
      "94:   -versions \\",
      "95:   -access-key minio \\",
      "96:   -secret-key minio123 \\",
      "98:   echo \"server1 log:\"",
      "99:   cat \"${WORK_DIR}/server1.log\"",
      "100:   echo \"FAILED\"",
      "",
      "[Removed Lines]",
      "90:  go install -v github.com/minio/minio/docs/debugging/s3-check-md5@latest",
      "92:  if ! s3-check-md5 \\",
      "97:   -endpoint http://127.0.0.1:${start_port}/ 2>&1 | grep INTACT; then",
      "",
      "[Added Lines]",
      "92:  if ! ./s3-check-md5 \\",
      "97:   -endpoint \"http://127.0.0.1:${start_port}/\" 2>&1 | grep INTACT; then",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "114:  go run ./buildscripts/heal-manual.go \"127.0.0.1:${start_port}\" \"minio\" \"minio123\"",
      "115:  sleep 1",
      "118:   -debug \\",
      "119:   -versions \\",
      "120:   -access-key minio \\",
      "",
      "[Removed Lines]",
      "117:  if ! s3-check-md5 \\",
      "",
      "[Added Lines]",
      "117:  if ! ./s3-check-md5 \\",
      "",
      "---------------"
    ],
    "buildscripts/verify-healing-empty-erasure-set.sh||buildscripts/verify-healing-empty-erasure-set.sh": [
      "File: buildscripts/verify-healing-empty-erasure-set.sh -> buildscripts/verify-healing-empty-erasure-set.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:  export MINIO_ERASURE_SET_DRIVE_COUNT=6",
      "20:  export MINIO_CI_CD=1",
      "23:  args=\"\"",
      "24:  for i in $(seq 1 3); do",
      "25:   args=\"$args http://127.0.0.1:$((start_port + i))${WORK_DIR}/$i/1/ http://127.0.0.1:$((start_port + i))${WORK_DIR}/$i/2/ http://127.0.0.1:$((start_port + i))${WORK_DIR}/$i/3/ http://127.0.0.1:$((start_port + i))${WORK_DIR}/$i/4/ http://127.0.0.1:$((start_port + i))${WORK_DIR}/$i/5/ http://127.0.0.1:$((start_port + i))${WORK_DIR}/$i/6/\"",
      "",
      "[Removed Lines]",
      "22:  start_port=$2",
      "",
      "[Added Lines]",
      "22:  start_port=$1",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "37:  pid3=$!",
      "38:  disown $pid3",
      "42:  if ! ps -p $pid1 1>&2 >/dev/null; then",
      "43:   echo \"server1 log:\"",
      "",
      "[Removed Lines]",
      "40:  sleep \"$1\"",
      "",
      "[Added Lines]",
      "40:  export MC_HOST_myminio=\"http://minio:minio123@127.0.0.1:$((start_port + 1))\"",
      "41:  /tmp/mc ready myminio",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "100:  ## version is purposefully set to '3' for minio to migrate configuration file",
      "101:  echo '{\"version\": \"3\", \"credential\": {\"accessKey\": \"minio\", \"secretKey\": \"minio123\"}, \"region\": \"us-east-1\"}' >\"$MINIO_CONFIG_DIR/config.json\"",
      "102: }",
      "104: function perform_test() {",
      "107:  echo \"Testing Distributed Erasure setup healing of drives\"",
      "108:  echo \"Remove the contents of the disks belonging to '${1}' erasure set\"",
      "",
      "[Removed Lines]",
      "105:  start_minio_3_node 120 $2",
      "",
      "[Added Lines]",
      "104:  if [ ! -f /tmp/mc ]; then",
      "105:   wget --quiet -O /tmp/mc https://dl.minio.io/client/mc/release/linux-amd64/mc &&",
      "106:    chmod +x /tmp/mc",
      "107:  fi",
      "111:  start_minio_3_node $2",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "112:  set -x",
      "115:  rv=$(check_online)",
      "116:  if [ \"$rv\" == \"1\" ]; then",
      "",
      "[Removed Lines]",
      "113:  start_minio_3_node 120 $2",
      "",
      "[Added Lines]",
      "119:  start_minio_3_node $2",
      "",
      "---------------"
    ],
    "buildscripts/verify-healing.sh||buildscripts/verify-healing.sh": [
      "File: buildscripts/verify-healing.sh -> buildscripts/verify-healing.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: GOPATH=/tmp/gopath",
      "17: function start_minio_3_node() {",
      "18:  export MINIO_ROOT_USER=minio",
      "19:  export MINIO_ROOT_PASSWORD=minio123",
      "20:  export MINIO_ERASURE_SET_DRIVE_COUNT=6",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18:  for i in $(seq 1 3); do",
      "19:   rm \"${WORK_DIR}/dist-minio-server$i.log\"",
      "20:  done",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23:  first_time=$(find ${WORK_DIR}/ | grep format.json | wc -l)",
      "26:  args=\"\"",
      "27:  for d in $(seq 1 3 5); do",
      "28:   args=\"$args http://127.0.0.1:$((start_port + 1))${WORK_DIR}/1/${d}/ http://127.0.0.1:$((start_port + 2))${WORK_DIR}/2/${d}/ http://127.0.0.1:$((start_port + 3))${WORK_DIR}/3/${d}/ \"",
      "",
      "[Removed Lines]",
      "25:  start_port=$2",
      "",
      "[Added Lines]",
      "29:  start_port=$1",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42:  pid3=$!",
      "43:  disown $pid3",
      "49:  if ! ps -p $pid1 1>&2 >/dev/null; then",
      "50:   echo \"server1 log:\"",
      "",
      "[Removed Lines]",
      "45:  sleep \"$1\"",
      "47:  [ ${first_time} -eq 0 ] && upload_objects $start_port",
      "",
      "[Added Lines]",
      "49:  export MC_HOST_myminio=\"http://minio:minio123@127.0.0.1:$((start_port + 1))\"",
      "50:  /tmp/mc ready myminio",
      "52:  [ ${first_time} -eq 0 ] && upload_objects",
      "53:  [ ${first_time} -ne 0 ] && sleep 120",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "127: }",
      "129: function upload_objects() {",
      "134:  /tmp/mc mb myminio/testbucket/",
      "135:  for ((i = 0; i < 20; i++)); do",
      "136:   echo \"my content\" | /tmp/mc pipe myminio/testbucket/file-$i",
      "",
      "[Removed Lines]",
      "130:  start_port=$1",
      "132:  /tmp/mc alias set myminio http://127.0.0.1:$((start_port + 1)) minio minio123 --api=s3v4",
      "133:  /tmp/mc ready myminio",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "140: function perform_test() {",
      "141:  start_port=$2",
      "145:  echo \"Testing Distributed Erasure setup healing of drives\"",
      "146:  echo \"Remove the contents of the disks belonging to '${1}' node\"",
      "",
      "[Removed Lines]",
      "143:  start_minio_3_node 120 $start_port",
      "",
      "[Added Lines]",
      "145:  start_minio_3_node $start_port",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "150:  set -x",
      "153:  check_heal ${1}",
      "154:  rv=$?",
      "",
      "[Removed Lines]",
      "151:  start_minio_3_node 120 $start_port",
      "",
      "[Added Lines]",
      "153:  start_minio_3_node $start_port",
      "",
      "---------------"
    ],
    "cmd/object-handlers.go||cmd/object-handlers.go": [
      "File: cmd/object-handlers.go -> cmd/object-handlers.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "476:    return true",
      "477:   }",
      "479:   return checkPreconditions(ctx, w, r, oi, opts)",
      "480:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "479:   if oi.UserTags != \"\" {",
      "480:    r.Header.Set(xhttp.AmzObjectTagging, oi.UserTags)",
      "481:   }",
      "483:   if s3Error := authorizeRequest(ctx, r, policy.GetObjectAction); s3Error != ErrNone {",
      "484:    writeErrorResponse(ctx, w, errorCodes.ToAPIErr(s3Error), r.URL)",
      "485:    return true",
      "486:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "548:  objInfo := gr.ObjInfo",
      "559:  if !proxy.Proxy { // apply lifecycle rules only for local requests",
      "561:   if lc, err := globalLifecycleSys.Get(bucket); err == nil {",
      "",
      "[Removed Lines]",
      "550:  if objInfo.UserTags != \"\" {",
      "551:   r.Header.Set(xhttp.AmzObjectTagging, objInfo.UserTags)",
      "552:  }",
      "554:  if s3Error := authorizeRequest(ctx, r, policy.GetObjectAction); s3Error != ErrNone {",
      "555:   writeErrorResponse(ctx, w, errorCodes.ToAPIErr(s3Error), r.URL)",
      "556:   return",
      "557:  }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e5335450a4a9333215bae8ed03442d1ac258ec63",
      "candidate_info": {
        "commit_hash": "e5335450a4a9333215bae8ed03442d1ac258ec63",
        "repo": "minio/minio",
        "commit_url": "https://github.com/minio/minio/commit/e5335450a4a9333215bae8ed03442d1ac258ec63",
        "files": [
          "buildscripts/verify-healing-empty-erasure-set.sh",
          "buildscripts/verify-healing.sh"
        ],
        "message": "test: Healing test to avoid infinite waiting for servers to be up (#19954)\n\ntests: Healing test to avoid infinite waiting for servers to be up\n\nQuit after 15 minutes and print server logs instead",
        "before_after_code_files": [
          "buildscripts/verify-healing-empty-erasure-set.sh||buildscripts/verify-healing-empty-erasure-set.sh",
          "buildscripts/verify-healing.sh||buildscripts/verify-healing.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "buildscripts/verify-healing-empty-erasure-set.sh||buildscripts/verify-healing-empty-erasure-set.sh",
            "buildscripts/verify-healing.sh||buildscripts/verify-healing.sh"
          ],
          "candidate": [
            "buildscripts/verify-healing-empty-erasure-set.sh||buildscripts/verify-healing-empty-erasure-set.sh",
            "buildscripts/verify-healing.sh||buildscripts/verify-healing.sh"
          ]
        }
      },
      "candidate_diff": {
        "buildscripts/verify-healing-empty-erasure-set.sh||buildscripts/verify-healing-empty-erasure-set.sh": [
          "File: buildscripts/verify-healing-empty-erasure-set.sh -> buildscripts/verify-healing-empty-erasure-set.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  export MC_HOST_myminio=\"http://minio:minio123@127.0.0.1:$((start_port + 1))\"",
          "44:  # Wait for all drives to be online and formatted",
          "45:  while [ $(/tmp/mc admin info --json myminio | jq '.info.servers[].drives[].state | select(. != \"ok\")' | wc -l) -gt 0 ]; do sleep 1; done",
          "",
          "[Removed Lines]",
          "42:  /tmp/mc ready myminio",
          "",
          "[Added Lines]",
          "42:  timeout 15m /tmp/mc ready myminio || fail",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   fi",
          "64:   # Failure",
          "73:  done",
          "75:  if ! ps -p $pid1 1>&2 >/dev/null; then",
          "81:  fi",
          "83:  if ! ps -p $pid2 1>&2 >/dev/null; then",
          "89:  fi",
          "91:  if ! ps -p $pid3 1>&2 >/dev/null; then",
          "97:  fi",
          "99:  if ! pkill minio; then",
          "107:  fi",
          "109:  sleep 1",
          "",
          "[Removed Lines]",
          "65:   for i in $(seq 1 3); do",
          "66:    echo \"server$i log:\"",
          "67:    cat \"${WORK_DIR}/dist-minio-server$i.log\"",
          "68:   done",
          "69:   pkill -9 minio",
          "70:   echo \"FAILED\"",
          "71:   purge \"$WORK_DIR\"",
          "72:   exit 1",
          "76:   echo \"server1 log:\"",
          "77:   cat \"${WORK_DIR}/dist-minio-server1.log\"",
          "78:   echo \"FAILED\"",
          "79:   purge \"$WORK_DIR\"",
          "80:   exit 1",
          "84:   echo \"server2 log:\"",
          "85:   cat \"${WORK_DIR}/dist-minio-server2.log\"",
          "86:   echo \"FAILED\"",
          "87:   purge \"$WORK_DIR\"",
          "88:   exit 1",
          "92:   echo \"server3 log:\"",
          "93:   cat \"${WORK_DIR}/dist-minio-server3.log\"",
          "94:   echo \"FAILED\"",
          "95:   purge \"$WORK_DIR\"",
          "96:   exit 1",
          "100:   for i in $(seq 1 3); do",
          "101:    echo \"server$i log:\"",
          "102:    cat \"${WORK_DIR}/dist-minio-server$i.log\"",
          "103:   done",
          "104:   echo \"FAILED\"",
          "105:   purge \"$WORK_DIR\"",
          "106:   exit 1",
          "",
          "[Added Lines]",
          "65:   fail",
          "69:   echo \"minio-server-1 is not running.\" && fail",
          "73:   echo \"minio-server-2 is not running.\" && fail",
          "77:   echo \"minio-server-3 is not running.\" && fail",
          "81:   fail",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:  fi",
          "116: }",
          "118: function check_online() {",
          "119:  if ! grep -q 'Status:' ${WORK_DIR}/dist-minio-*.log; then",
          "120:   echo \"1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: function fail() {",
          "94:  for i in $(seq 1 3); do",
          "95:   echo \"server$i log:\"",
          "96:   cat \"${WORK_DIR}/dist-minio-server$i.log\"",
          "97:  done",
          "98:  echo \"FAILED\"",
          "99:  purge \"$WORK_DIR\"",
          "100:  exit 1",
          "101: }",
          "",
          "---------------"
        ],
        "buildscripts/verify-healing.sh||buildscripts/verify-healing.sh": [
          "File: buildscripts/verify-healing.sh -> buildscripts/verify-healing.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  disown $pid3",
          "49:  export MC_HOST_myminio=\"http://minio:minio123@127.0.0.1:$((start_port + 1))\"",
          "52:  [ ${first_time} -eq 0 ] && upload_objects",
          "53:  [ ${first_time} -ne 0 ] && sleep 120",
          "55:  if ! ps -p $pid1 1>&2 >/dev/null; then",
          "61:  fi",
          "63:  if ! ps -p $pid2 1>&2 >/dev/null; then",
          "69:  fi",
          "71:  if ! ps -p $pid3 1>&2 >/dev/null; then",
          "77:  fi",
          "79:  if ! pkill minio; then",
          "87:  fi",
          "89:  sleep 1",
          "",
          "[Removed Lines]",
          "50:  /tmp/mc ready myminio",
          "56:   echo \"server1 log:\"",
          "57:   cat \"${WORK_DIR}/dist-minio-server1.log\"",
          "58:   echo \"FAILED\"",
          "59:   purge \"$WORK_DIR\"",
          "60:   exit 1",
          "64:   echo \"server2 log:\"",
          "65:   cat \"${WORK_DIR}/dist-minio-server2.log\"",
          "66:   echo \"FAILED\"",
          "67:   purge \"$WORK_DIR\"",
          "68:   exit 1",
          "72:   echo \"server3 log:\"",
          "73:   cat \"${WORK_DIR}/dist-minio-server3.log\"",
          "74:   echo \"FAILED\"",
          "75:   purge \"$WORK_DIR\"",
          "76:   exit 1",
          "80:   for i in $(seq 1 3); do",
          "81:    echo \"server$i log:\"",
          "82:    cat \"${WORK_DIR}/dist-minio-server$i.log\"",
          "83:   done",
          "84:   echo \"FAILED\"",
          "85:   purge \"$WORK_DIR\"",
          "86:   exit 1",
          "",
          "[Added Lines]",
          "50:  timeout 15m /tmp/mc ready myminio || fail",
          "56:   echo \"minio server 1 is not running\" && fail",
          "60:   echo \"minio server 2 is not running\" && fail",
          "64:   echo \"minio server 3 is not running\" && fail",
          "68:   fail",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:  rm -rf \"$1\"",
          "119: }",
          "121: function __init__() {",
          "122:  echo \"Initializing environment\"",
          "123:  mkdir -p \"$WORK_DIR\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: function fail() {",
          "104:  for i in $(seq 1 3); do",
          "105:   echo \"server$i log:\"",
          "106:   cat \"${WORK_DIR}/dist-minio-server$i.log\"",
          "107:  done",
          "108:  pkill -9 minio",
          "109:  echo \"FAILED\"",
          "110:  purge \"$WORK_DIR\"",
          "111:  exit 1",
          "112: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:  check_heal ${1}",
          "156:  rv=$?",
          "157:  if [ \"$rv\" == \"1\" ]; then",
          "166:  fi",
          "167: }",
          "",
          "[Removed Lines]",
          "158:   for i in $(seq 1 3); do",
          "159:    echo \"server$i log:\"",
          "160:    cat \"${WORK_DIR}/dist-minio-server$i.log\"",
          "161:   done",
          "162:   pkill -9 minio",
          "163:   echo \"FAILED\"",
          "164:   purge \"$WORK_DIR\"",
          "165:   exit 1",
          "",
          "[Added Lines]",
          "151:   fail",
          "",
          "---------------"
        ]
      }
    }
  ]
}