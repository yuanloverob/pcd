{
  "cve_id": "CVE-2016-9964",
  "cve_desc": "redirect() in bottle.py in bottle 0.12.10 doesn't filter a \"\\r\\n\" sequence, which leads to a CRLF attack, as demonstrated by a redirect(\"233\\r\\nSet-Cookie: name=salt\") call.",
  "repo": "bottlepy/bottle",
  "patch_hash": "6d7e13da0f998820800ecb3fe9ccee4189aefb54",
  "patch_info": {
    "commit_hash": "6d7e13da0f998820800ecb3fe9ccee4189aefb54",
    "repo": "bottlepy/bottle",
    "commit_url": "https://github.com/bottlepy/bottle/commit/6d7e13da0f998820800ecb3fe9ccee4189aefb54",
    "files": [
      "bottle.py",
      "test/test_environ.py"
    ],
    "message": "fix #913: Harden bottle against malformed headers.\n\nBottle now checks against certain control characters (\\n, \\r and \\0) in header names or values and raises a ValueError if the application tries to set an invalid header.",
    "before_after_code_files": [
      "bottle.py||bottle.py",
      "test/test_environ.py||test/test_environ.py"
    ]
  },
  "patch_diff": {
    "bottle.py||bottle.py": [
      "File: bottle.py -> bottle.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1573:             raise AttributeError(\"Attribute not defined: %s\" % name)",
      "1580: class HeaderProperty(object):",
      "1581:     def __init__(self, name, reader=None, writer=str, default=''):",
      "",
      "[Removed Lines]",
      "1576: def _hkey(s):",
      "1577:     return s.title().replace('_', '-')",
      "",
      "[Added Lines]",
      "1576: def _hkey(key):",
      "1577:     if '\\n' in key or '\\r' in key or '\\0' in key:",
      "1578:         raise ValueError(\"Header names must not contain control characters: %r\" % key)",
      "1579:     return key.title().replace('_', '-')",
      "1581: def _hval(value):",
      "1582:     value = value if isinstance(value, unicode) else str(value)",
      "1583:     if '\\n' in value or '\\r' in value or '\\0' in value:",
      "1584:         raise ValueError(\"Header value must not contain control characters: %r\" % value)",
      "1585:     return value",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2189:         return self.dict[_hkey(key)][-1]",
      "2191:     def __setitem__(self, key, value):",
      "2195:     def append(self, key, value):",
      "2199:     def replace(self, key, value):",
      "2203:     def getall(self, key):",
      "2204:         return self.dict.get(_hkey(key)) or []",
      "",
      "[Removed Lines]",
      "2192:         self.dict[_hkey(key)] = [value if isinstance(value, unicode) else",
      "2193:                                  str(value)]",
      "2196:         self.dict.setdefault(_hkey(key), []).append(",
      "2197:             value if isinstance(value, unicode) else str(value))",
      "2200:         self.dict[_hkey(key)] = [value if isinstance(value, unicode) else",
      "2201:                                  str(value)]",
      "",
      "[Added Lines]",
      "2198:         self.dict[_hkey(key)] = [_hval(value)]",
      "2201:         self.dict.setdefault(_hkey(key), []).append(_hval(value))",
      "2204:         self.dict[_hkey(key)] = [_hval(value)]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2207:         return MultiDict.get(self, _hkey(key), default, index)",
      "2209:     def filter(self, names):",
      "2211:             if name in self.dict:",
      "2212:                 del self.dict[name]",
      "",
      "[Removed Lines]",
      "2210:         for name in [_hkey(n) for n in names]:",
      "",
      "[Added Lines]",
      "2213:         for name in (_hkey(n) for n in names):",
      "",
      "---------------"
    ],
    "test/test_environ.py||test/test_environ.py": [
      "File: test/test_environ.py -> test/test_environ.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import unittest",
      "5: import sys",
      "6: import bottle",
      "7: from bottle import request, tob, touni, tonat, json_dumps, HTTPError, parse_date",
      "8: from test import tools",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: import itertools",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "695:         response['x-test'] = None",
      "696:         self.assertEqual('None', response['x-test'])",
      "698:     def test_expires_header(self):",
      "699:         import datetime",
      "700:         response = BaseResponse()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "701:     def test_prevent_control_characters_in_headers(self):",
      "702:         apis = 'append', 'replace', '__setitem__', 'setdefault'",
      "703:         masks = '{}test', 'test{}', 'te{}st'",
      "704:         tests = '\\n', '\\r', '\\n\\r', '\\0'",
      "705:         for api, mask, test in itertools.product(apis, masks, tests):",
      "706:             hd = bottle.HeaderDict()",
      "707:             func = getattr(hd, api)",
      "708:             value = mask.replace(\"{}\", test)",
      "709:             self.assertRaises(ValueError, func, value, \"test-value\")",
      "710:             self.assertRaises(ValueError, func, \"test-name\", value)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f838db73f7488a108dd8eea308fcc1188303371",
      "candidate_info": {
        "commit_hash": "3f838db73f7488a108dd8eea308fcc1188303371",
        "repo": "bottlepy/bottle",
        "commit_url": "https://github.com/bottlepy/bottle/commit/3f838db73f7488a108dd8eea308fcc1188303371",
        "files": [
          "bottle.py",
          "test/test_environ.py"
        ],
        "message": "fix #913: redirect() doesn't filter \"\\r\\n\" leads to CRLF attack\n\nThe previous fix (6d7e13d) was incomplete.",
        "before_after_code_files": [
          "bottle.py||bottle.py",
          "test/test_environ.py||test/test_environ.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "bottle.py||bottle.py",
            "test/test_environ.py||test/test_environ.py"
          ],
          "candidate": [
            "bottle.py||bottle.py",
            "test/test_environ.py||test/test_environ.py"
          ]
        }
      },
      "candidate_diff": {
        "bottle.py||bottle.py": [
          "File: bottle.py -> bottle.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1592:     return value",
          "1594: class HeaderProperty(object):",
          "1596:         self.name, self.default = name, default",
          "1597:         self.reader, self.writer = reader, writer",
          "1598:         self.__doc__ = 'Current value of the %r header.' % name.title()",
          "1600:     def __get__(self, obj, _):",
          "1601:         if obj is None: return self",
          "1603:         return self.reader(value) if self.reader else value",
          "1605:     def __set__(self, obj, value):",
          "1608:     def __delete__(self, obj):",
          "1612: class BaseResponse(object):",
          "",
          "[Removed Lines]",
          "1595:     def __init__(self, name, reader=None, writer=str, default=''):",
          "1602:         value = obj.headers.get(self.name, self.default)",
          "1606:         obj.headers[self.name] = self.writer(value)",
          "1609:         del obj.headers[self.name]",
          "",
          "[Added Lines]",
          "1595:     def __init__(self, name, reader=None, writer=None, default=''):",
          "1602:         value = obj.get_header(self.name, self.default)",
          "1606:         obj[self.name] = self.writer(value) if self.writer else value",
          "1609:         del obj[self.name]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1723:         return self._headers[_hkey(name)][-1]",
          "1725:     def __setitem__(self, name, value):",
          "1729:     def get_header(self, name, default=None):",
          "1730:         \"\"\" Return the value of a previously defined header. If there is no",
          "",
          "[Removed Lines]",
          "1726:         self._headers[_hkey(name)] = [value if isinstance(value, unicode) else",
          "1727:                                       str(value)]",
          "",
          "[Added Lines]",
          "1726:         self._headers[_hkey(name)] = [_hval(value)]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1734:     def set_header(self, name, value):",
          "1735:         \"\"\" Create a new response header, replacing any previously defined",
          "1736:             headers with the same name. \"\"\"",
          "1740:     def add_header(self, name, value):",
          "1741:         \"\"\" Add an additional response header, not removing duplicates. \"\"\"",
          "1745:     def iter_headers(self):",
          "1746:         \"\"\" Yield (header, value) tuples, skipping headers that are not",
          "",
          "[Removed Lines]",
          "1737:         self._headers[_hkey(name)] = [value if isinstance(value, unicode)",
          "1738:                                             else str(value)]",
          "1742:         self._headers.setdefault(_hkey(name), []).append(",
          "1743:             value if isinstance(value, unicode) else str(value))",
          "",
          "[Added Lines]",
          "1736:         self._headers[_hkey(name)] = [_hval(value)]",
          "1740:         self._headers.setdefault(_hkey(name), []).append(_hval(value))",
          "",
          "---------------"
        ],
        "test/test_environ.py||test/test_environ.py": [
          "File: test/test_environ.py -> test/test_environ.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "699:         self.assertEqual('None', response['x-test'])",
          "701:     def test_prevent_control_characters_in_headers(self):",
          "703:         masks = '{}test', 'test{}', 'te{}st'",
          "704:         tests = '\\n', '\\r', '\\n\\r', '\\0'",
          "705:         for api, mask, test in itertools.product(apis, masks, tests):",
          "706:             hd = bottle.HeaderDict()",
          "707:             func = getattr(hd, api)",
          "",
          "[Removed Lines]",
          "702:         apis = 'append', 'replace', '__setitem__', 'setdefault'",
          "",
          "[Added Lines]",
          "705:         # Test HeaderDict",
          "706:         apis = 'append', 'replace', '__setitem__', 'setdefault'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "709:             self.assertRaises(ValueError, func, value, \"test-value\")",
          "710:             self.assertRaises(ValueError, func, \"test-name\", value)",
          "712:     def test_expires_header(self):",
          "713:         import datetime",
          "714:         response = BaseResponse()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714:         # Test functions on BaseResponse",
          "715:         apis = 'add_header', 'set_header', '__setitem__'",
          "716:         for api, mask, test in itertools.product(apis, masks, tests):",
          "717:             rs = bottle.BaseResponse()",
          "718:             func = getattr(rs, api)",
          "719:             value = mask.replace(\"{}\", test)",
          "720:             self.assertRaises(ValueError, func, value, \"test-value\")",
          "721:             self.assertRaises(ValueError, func, \"test-name\", value)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f9ccae095e90b0af6e28f602b5455eb510f468e",
      "candidate_info": {
        "commit_hash": "2f9ccae095e90b0af6e28f602b5455eb510f468e",
        "repo": "bottlepy/bottle",
        "commit_url": "https://github.com/bottlepy/bottle/commit/2f9ccae095e90b0af6e28f602b5455eb510f468e",
        "files": [
          "bottle.py",
          "test/test_environ.py"
        ],
        "message": "Setting a header with a value if `None` now results in an empty header.\n\nPreviously, the header value would be \"None\", which is not useful.",
        "before_after_code_files": [
          "bottle.py||bottle.py",
          "test/test_environ.py||test/test_environ.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "bottle.py||bottle.py",
            "test/test_environ.py||test/test_environ.py"
          ],
          "candidate": [
            "bottle.py||bottle.py",
            "test/test_environ.py||test/test_environ.py"
          ]
        }
      },
      "candidate_diff": {
        "bottle.py||bottle.py": [
          "File: bottle.py -> bottle.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: # Some helpers for string/byte handling",
          "157: def tob(s, enc='utf8'):",
          "161: def touni(s, enc='utf8', err='strict'):",
          "162:     if isinstance(s, bytes):",
          "163:         return s.decode(enc, err)",
          "168: tonat = touni if py3k else tob",
          "",
          "[Removed Lines]",
          "158:     return s.encode(enc) if isinstance(s, unicode) else bytes(s)",
          "164:     else:",
          "165:         return unicode(s or (\"\" if s is None else s))",
          "",
          "[Added Lines]",
          "158:     if isinstance(s, unicode):",
          "159:         return s.encode(enc)",
          "160:     return bytes(\"\" if s is None else s)",
          "166:     return unicode(\"\" if s is None else s)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1586:     return key.title().replace('_', '-')",
          "1588: def _hval(value):",
          "1590:     if '\\n' in value or '\\r' in value or '\\0' in value:",
          "1591:         raise ValueError(\"Header value must not contain control characters: %r\" % value)",
          "1592:     return value",
          "",
          "[Removed Lines]",
          "1589:     value = value if isinstance(value, unicode) else str(value)",
          "",
          "[Added Lines]",
          "1590:     value = tonat(value)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1757:         out += [(name, val) for (name, vals) in headers for val in vals]",
          "1758:         if self._cookies:",
          "1759:             for c in self._cookies.values():",
          "1761:         if py3k:",
          "1767:     content_type = HeaderProperty('Content-Type')",
          "1768:     content_length = HeaderProperty('Content-Length', reader=int)",
          "",
          "[Removed Lines]",
          "1760:                 out.append(('Set-Cookie', c.OutputString()))",
          "1762:             return [(k, v.encode('utf8').decode('latin1')) for (k, v) in out]",
          "1763:         else:",
          "1764:             return [(k, v.encode('utf8') if isinstance(v, unicode) else v)",
          "1765:                     for (k, v) in out]",
          "",
          "[Added Lines]",
          "1761:                 out.append(('Set-Cookie', _hval(c.OutputString())))",
          "1763:             out = [(k, v.encode('utf8').decode('latin1')) for (k, v) in out]",
          "1764:         return out",
          "",
          "---------------"
        ],
        "test/test_environ.py||test/test_environ.py": [
          "File: test/test_environ.py -> test/test_environ.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "696:         response['x-test'] = 5",
          "697:         self.assertEqual('5', response['x-test'])",
          "698:         response['x-test'] = None",
          "701:     def test_prevent_control_characters_in_headers(self):",
          "702:         masks = '{}test', 'test{}', 'te{}st'",
          "",
          "[Removed Lines]",
          "699:         self.assertEqual('None', response['x-test'])",
          "",
          "[Added Lines]",
          "699:         self.assertEqual('', response['x-test'])",
          "700:         response['x-test'] = touni('\u74f6')",
          "701:         self.assertEqual(tonat(touni('\u74f6')), response['x-test'])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9405bbc5dc34c8b83699411ef6cb017f8b6ff11a",
      "candidate_info": {
        "commit_hash": "9405bbc5dc34c8b83699411ef6cb017f8b6ff11a",
        "repo": "bottlepy/bottle",
        "commit_url": "https://github.com/bottlepy/bottle/commit/9405bbc5dc34c8b83699411ef6cb017f8b6ff11a",
        "files": [
          "bottle.py",
          "test/test_environ.py"
        ],
        "message": "fix #913: Harden bottle against malformed headers.\n\nBottle now checks against certain control characters (\\n, \\r and \\0) in header names or values and raises a ValueError if the application tries to set an invalid header.",
        "before_after_code_files": [
          "bottle.py||bottle.py",
          "test/test_environ.py||test/test_environ.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "bottle.py||bottle.py",
            "test/test_environ.py||test/test_environ.py"
          ],
          "candidate": [
            "bottle.py||bottle.py",
            "test/test_environ.py||test/test_environ.py"
          ]
        }
      },
      "candidate_diff": {
        "bottle.py||bottle.py": [
          "File: bottle.py -> bottle.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1398:         self.environ['bottle.request.ext.%s'%name] = value",
          "1407: class HeaderProperty(object):",
          "",
          "[Removed Lines]",
          "1403: def _hkey(s):",
          "1404:     return s.title().replace('_','-')",
          "",
          "[Added Lines]",
          "1401: def _hkey(key):",
          "1402:     if '\\n' in key or '\\r' in key or '\\0' in key:",
          "1403:         raise ValueError(\"Header names must not contain control characters: %r\" % key)",
          "1404:     return key.title().replace('_', '-')",
          "1407: def _hval(value):",
          "1408:     value = value if isinstance(value, unicode) else str(value)",
          "1409:     if '\\n' in value or '\\r' in value or '\\0' in value:",
          "1410:         raise ValueError(\"Header value must not contain control characters: %r\" % value)",
          "1411:     return value",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1933:     def __contains__(self, key): return _hkey(key) in self.dict",
          "1934:     def __delitem__(self, key): del self.dict[_hkey(key)]",
          "1935:     def __getitem__(self, key): return self.dict[_hkey(key)][-1]",
          "1940:     def getall(self, key): return self.dict.get(_hkey(key)) or []",
          "1941:     def get(self, key, default=None, index=-1):",
          "1942:         return MultiDict.get(self, _hkey(key), default, index)",
          "1943:     def filter(self, names):",
          "1945:             if name in self.dict:",
          "1946:                 del self.dict[name]",
          "",
          "[Removed Lines]",
          "1936:     def __setitem__(self, key, value): self.dict[_hkey(key)] = [str(value)]",
          "1937:     def append(self, key, value):",
          "1938:         self.dict.setdefault(_hkey(key), []).append(str(value))",
          "1939:     def replace(self, key, value): self.dict[_hkey(key)] = [str(value)]",
          "1944:         for name in [_hkey(n) for n in names]:",
          "",
          "[Added Lines]",
          "1943:     def __setitem__(self, key, value): self.dict[_hkey(key)] = [_hval(value)]",
          "1944:     def append(self, key, value): self.dict.setdefault(_hkey(key), []).append(_hval(value))",
          "1945:     def replace(self, key, value): self.dict[_hkey(key)] = [_hval(value)]",
          "1950:         for name in (_hkey(n) for n in names):",
          "",
          "---------------"
        ],
        "test/test_environ.py||test/test_environ.py": [
          "File: test/test_environ.py -> test/test_environ.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import unittest",
          "5: import sys",
          "6: import bottle",
          "7: from bottle import request, tob, touni, tonat, json_dumps, _e, HTTPError, parse_date",
          "8: import tools",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import itertools",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655:         response['x-test'] = None",
          "656:         self.assertEqual('None', response['x-test'])",
          "658:     def test_expires_header(self):",
          "659:         import datetime",
          "660:         response = BaseResponse()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "661:     def test_prevent_control_characters_in_headers(self):",
          "662:         apis = 'append', 'replace', '__setitem__', 'setdefault'",
          "663:         masks = '{}test', 'test{}', 'te{}st'",
          "664:         tests = '\\n', '\\r', '\\n\\r', '\\0'",
          "665:         for api, mask, test in itertools.product(apis, masks, tests):",
          "666:             hd = bottle.HeaderDict()",
          "667:             func = getattr(hd, api)",
          "668:             value = mask.replace(\"{}\", test)",
          "669:             self.assertRaises(ValueError, func, value, \"test-value\")",
          "670:             self.assertRaises(ValueError, func, \"test-name\", value)",
          "",
          "---------------"
        ]
      }
    }
  ]
}