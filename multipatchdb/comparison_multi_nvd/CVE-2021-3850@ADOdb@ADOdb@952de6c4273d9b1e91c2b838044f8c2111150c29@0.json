{
  "cve_id": "CVE-2021-3850",
  "cve_desc": "Authentication Bypass by Primary Weakness in GitHub repository adodb/adodb prior to 5.20.21.",
  "repo": "ADOdb/ADOdb",
  "patch_hash": "952de6c4273d9b1e91c2b838044f8c2111150c29",
  "patch_info": {
    "commit_hash": "952de6c4273d9b1e91c2b838044f8c2111150c29",
    "repo": "ADOdb/ADOdb",
    "commit_url": "https://github.com/ADOdb/ADOdb/commit/952de6c4273d9b1e91c2b838044f8c2111150c29",
    "files": [
      "drivers/adodb-postgres64.inc.php"
    ],
    "message": "Prevent auth bypass with PostgreSQL connections\n\nThanks to Emmet Leahy of Sorcery Ltd for reporting this vulnerability\n(CVE-2021-3850).\n\nThis is a minimalistic approach to patch the issue, to reduce the risk\nof causing regressions in the legacy stable branch.\n\nFixes #793",
    "before_after_code_files": [
      "drivers/adodb-postgres64.inc.php||drivers/adodb-postgres64.inc.php"
    ]
  },
  "patch_diff": {
    "drivers/adodb-postgres64.inc.php||drivers/adodb-postgres64.inc.php": [
      "File: drivers/adodb-postgres64.inc.php -> drivers/adodb-postgres64.inc.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "51: {",
      "52:  $len = strlen($s);",
      "53:  if ($len == 0) return \"''\";",
      "56:  return \"'\".addslashes($s).\"'\";",
      "57: }",
      "",
      "[Removed Lines]",
      "54:  if (strncmp($s,\"'\",1) === 0 && substr($s,$len-1) == \"'\") return $s; // already quoted",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4d5ce70034c5aac3a1d51d317d93c037a0938d2",
      "candidate_info": {
        "commit_hash": "b4d5ce70034c5aac3a1d51d317d93c037a0938d2",
        "repo": "ADOdb/ADOdb",
        "commit_url": "https://github.com/ADOdb/ADOdb/commit/b4d5ce70034c5aac3a1d51d317d93c037a0938d2",
        "files": [
          "drivers/adodb-postgres64.inc.php"
        ],
        "message": "Prevent auth bypass with PostgreSQL connections\n\nThanks to Emmet Leahy of Sorcery Ltd for reporting this vulnerability\n(CVE-2021-3850).\n\nRefactoring ADODB_postgres64::_connect():\n- Remove adodb_addslashes() function, which did not escape the\n  connection parameters when they are wrapped in single quotes\n  (root cause for the identified security issue).\n- Use addcslashes() instead of addslashes() to only escape `'` and `\\`,\n  to strictly follow pg_connect() documentation (addslashes() also\n  escapes `\"`)\n- Use an array and a foreach loop to build the connection string when\n  given individual parameters for host:port, user, password and dbname\n\nFixes #793",
        "before_after_code_files": [
          "drivers/adodb-postgres64.inc.php||drivers/adodb-postgres64.inc.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "drivers/adodb-postgres64.inc.php||drivers/adodb-postgres64.inc.php"
          ],
          "candidate": [
            "drivers/adodb-postgres64.inc.php||drivers/adodb-postgres64.inc.php"
          ]
        }
      },
      "candidate_diff": {
        "drivers/adodb-postgres64.inc.php||drivers/adodb-postgres64.inc.php": [
          "File: drivers/adodb-postgres64.inc.php -> drivers/adodb-postgres64.inc.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: if (!defined('ADODB_DIR')) die();",
          "34: class ADODB_postgres64 extends ADOConnection{",
          "35:  var $databaseType = 'postgres64';",
          "36:  var $dataProvider = 'postgres';",
          "",
          "[Removed Lines]",
          "25: function adodb_addslashes($s)",
          "26: {",
          "27:  $len = strlen($s);",
          "28:  if ($len == 0) return \"''\";",
          "29:  if (strncmp($s,\"'\",1) === 0 && substr($s,$len-1) == \"'\") return $s; // already quoted",
          "31:  return \"'\".addslashes($s).\"'\";",
          "32: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "694:   $this->_errorMsg = false;",
          "696:   if ($user || $pwd || $db) {",
          "707:    }",
          "711:   }",
          "",
          "[Removed Lines]",
          "697:    $user = adodb_addslashes($user);",
          "698:    $pwd = adodb_addslashes($pwd);",
          "699:    if (strlen($db) == 0) $db = 'template1';",
          "700:    $db = adodb_addslashes($db);",
          "701:    if ($str)  {",
          "702:     $host = explode(\":\", $str);",
          "703:     if ($host[0]) $str = \"host=\".adodb_addslashes($host[0]);",
          "704:     else $str = '';",
          "705:     if (isset($host[1])) $str .= \" port=$host[1]\";",
          "706:     else if (!empty($this->port)) $str .= \" port=\".$this->port;",
          "708:    if ($user) $str .= \" user=\".$user;",
          "709:    if ($pwd)  $str .= \" password=\".$pwd;",
          "710:    if ($db)   $str .= \" dbname=\".$db;",
          "",
          "[Added Lines]",
          "692:    if ($str) {",
          "693:     $host = explode(':', $str);",
          "694:     if ($host[0]) {",
          "695:      $conn['host'] = $host[0];",
          "696:     }",
          "697:     if (isset($host[1])) {",
          "698:      $conn['port'] = (int)$host[1];",
          "699:     } elseif (!empty($this->port)) {",
          "700:      $conn['port'] = $this->port;",
          "701:     }",
          "702:    }",
          "703:    $conn['user'] = $user;",
          "704:    $conn['password'] = $pwd;",
          "706:    $conn['dbname'] = $db ?: 'template1';",
          "709:    $str = '';",
          "710:    foreach ($conn as $param => $value) {",
          "712:     $str .= $param . \"='\" . addcslashes($value, \"'\\\\\") . \"' \";",
          "",
          "---------------"
        ]
      }
    }
  ]
}