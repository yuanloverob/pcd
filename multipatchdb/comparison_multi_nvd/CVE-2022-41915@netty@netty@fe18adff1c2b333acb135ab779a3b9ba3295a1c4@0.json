{
  "cve_id": "CVE-2022-41915",
  "cve_desc": "Netty project is an event-driven asynchronous network application framework. Starting in version 4.1.83.Final and prior to 4.1.86.Final, when calling `DefaultHttpHeadesr.set` with an _iterator_ of values, header value validation was not performed, allowing malicious header values in the iterator to perform HTTP Response Splitting. This issue has been patched in version 4.1.86.Final. Integrators can work around the issue by changing the `DefaultHttpHeaders.set(CharSequence, Iterator<?>)` call, into a `remove()` call, and call `add()` in a loop over the iterator of values.",
  "repo": "netty/netty",
  "patch_hash": "fe18adff1c2b333acb135ab779a3b9ba3295a1c4",
  "patch_info": {
    "commit_hash": "fe18adff1c2b333acb135ab779a3b9ba3295a1c4",
    "repo": "netty/netty",
    "commit_url": "https://github.com/netty/netty/commit/fe18adff1c2b333acb135ab779a3b9ba3295a1c4",
    "files": [
      "codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java",
      "codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java"
    ],
    "message": "Merge pull request from GHSA-hh82-3pmq-7frp\n\nMotivation:\nThe setObject methods that took arrays and iterators as arguments provided a way to bypass value validation.\n\nModification:\nAdd the missing value validation checks.\n\nResult:\nIt is no longer possibel to bypass value validation in DefaultHeaders based implementations, including DefaultHttpHeaders.",
    "before_after_code_files": [
      "codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java||codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java",
      "codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java||codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java"
    ]
  },
  "patch_diff": {
    "codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java||codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java": [
      "File: codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java -> codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import org.junit.jupiter.api.Test;",
      "23: import org.junit.jupiter.api.function.Executable;",
      "26: import java.util.Iterator;",
      "27: import java.util.List;",
      "28: import java.util.Set;",
      "",
      "[Removed Lines]",
      "25: import java.util.Arrays;",
      "",
      "[Added Lines]",
      "25: import java.util.Collections;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: public class DefaultHttpHeadersTest {",
      "43:     private static final CharSequence HEADER_NAME = \"testHeader\";",
      "45:     @Test",
      "46:     public void nullHeaderNameNotAllowed() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     private static final CharSequence ILLEGAL_VALUE = \"testHeader\\r\\nContent-Length:45\\r\\n\\r\\n\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "234:         assertDefaultValues(headers, HeaderValue.THREE);",
      "235:     }",
      "237:     @Test",
      "238:     public void toStringOnEmptyHeaders() {",
      "239:         assertEquals(\"DefaultHttpHeaders[]\", newDefaultDefaultHttpHeaders().toString());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "238:     @Test",
      "239:     public void setCharSequenceValidatesValue() {",
      "240:         final DefaultHttpHeaders headers = newDefaultDefaultHttpHeaders();",
      "241:         assertThrows(IllegalArgumentException.class, new Executable() {",
      "242:             @Override",
      "243:             public void execute() throws Throwable {",
      "244:                 headers.set(HEADER_NAME, ILLEGAL_VALUE);",
      "245:             }",
      "246:         });",
      "247:     }",
      "249:     @Test",
      "250:     public void setIterableValidatesValue() {",
      "251:         final DefaultHttpHeaders headers = newDefaultDefaultHttpHeaders();",
      "252:         assertThrows(IllegalArgumentException.class, new Executable() {",
      "253:             @Override",
      "254:             public void execute() throws Throwable {",
      "255:                 headers.set(HEADER_NAME, Collections.singleton(ILLEGAL_VALUE));",
      "256:             }",
      "257:         });",
      "258:     }",
      "",
      "---------------"
    ],
    "codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java||codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java": [
      "File: codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java -> codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "532:             if (v == null) {",
      "533:                 break;",
      "534:             }",
      "536:         }",
      "538:         return thisT();",
      "",
      "[Removed Lines]",
      "535:             add0(h, i, name, fromObject(name, v));",
      "",
      "[Added Lines]",
      "535:             V converted = fromObject(name, v);",
      "536:             validateValue(valueValidator, name, converted);",
      "537:             add0(h, i, name, converted);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "550:             if (v == null) {",
      "551:                 break;",
      "552:             }",
      "554:         }",
      "556:         return thisT();",
      "",
      "[Removed Lines]",
      "553:             add0(h, i, name, fromObject(name, v));",
      "",
      "[Added Lines]",
      "555:             V converted = fromObject(name, v);",
      "556:             validateValue(valueValidator, name, converted);",
      "557:             add0(h, i, name, converted);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1cfe7103fbf7acdc5e21365419e9565955540703",
      "candidate_info": {
        "commit_hash": "1cfe7103fbf7acdc5e21365419e9565955540703",
        "repo": "netty/netty",
        "commit_url": "https://github.com/netty/netty/commit/1cfe7103fbf7acdc5e21365419e9565955540703",
        "files": [
          "codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java",
          "codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java"
        ],
        "message": "Adding header name of the header which failed validation. (#13208) (#13209)\n\nMotivation:\n\nUsers should know which header failed the value validation.\n\nModification:\n\nCatch IllegalArgumentException and wrap in other exception with the header name in the message.\n\nResult:\n\nError message now has header name which failed validation.",
        "before_after_code_files": [
          "codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java||codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java",
          "codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java||codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java||codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java",
            "codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java||codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java"
          ],
          "candidate": [
            "codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java||codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java",
            "codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java||codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java"
          ]
        }
      },
      "candidate_diff": {
        "codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java||codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java": [
          "File: codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java -> codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:     @Test",
          "245:     public void setCharSequenceValidatesValue() {",
          "246:         final DefaultHttpHeaders headers = newDefaultDefaultHttpHeaders();",
          "248:             @Override",
          "249:             public void execute() throws Throwable {",
          "250:                 headers.set(HEADER_NAME, ILLEGAL_VALUE);",
          "251:             }",
          "252:         });",
          "253:     }",
          "255:     @Test",
          "256:     public void setIterableValidatesValue() {",
          "257:         final DefaultHttpHeaders headers = newDefaultDefaultHttpHeaders();",
          "259:             @Override",
          "260:             public void execute() throws Throwable {",
          "261:                 headers.set(HEADER_NAME, Collections.singleton(ILLEGAL_VALUE));",
          "262:             }",
          "263:         });",
          "264:     }",
          "266:     @Test",
          "",
          "[Removed Lines]",
          "247:         assertThrows(IllegalArgumentException.class, new Executable() {",
          "258:         assertThrows(IllegalArgumentException.class, new Executable() {",
          "",
          "[Added Lines]",
          "247:         IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, new Executable() {",
          "253:         assertTrue(exception.getMessage().contains(HEADER_NAME));",
          "259:         IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, new Executable() {",
          "265:         assertTrue(exception.getMessage().contains(HEADER_NAME));",
          "",
          "---------------"
        ],
        "codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java||codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java": [
          "File: codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java -> codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1013:     }",
          "1015:     protected void validateValue(ValueValidator<V> validator, K name, V value) {",
          "1017:     }",
          "1019:     protected HeaderEntry<K, V> newHeaderEntry(int h, K name, V value, HeaderEntry<K, V> next) {",
          "",
          "[Removed Lines]",
          "1016:         validator.validate(value);",
          "",
          "[Added Lines]",
          "1016:         try {",
          "1017:             validator.validate(value);",
          "1018:         } catch (IllegalArgumentException e) {",
          "1019:             throw new IllegalArgumentException(\"Validation failed for header '\" + name + \"'\", e);",
          "1020:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}