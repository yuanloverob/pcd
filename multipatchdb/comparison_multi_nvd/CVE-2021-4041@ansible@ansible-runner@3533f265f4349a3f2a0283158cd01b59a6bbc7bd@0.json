{
  "cve_id": "CVE-2021-4041",
  "cve_desc": "A flaw was found in ansible-runner. An improper escaping of the shell command, while calling the ansible_runner.interface.run_command, can lead to parameters getting executed as host's shell command. A developer could unintentionally write code that gets executed in the host rather than the virtual environment.",
  "repo": "ansible/ansible-runner",
  "patch_hash": "3533f265f4349a3f2a0283158cd01b59a6bbc7bd",
  "patch_info": {
    "commit_hash": "3533f265f4349a3f2a0283158cd01b59a6bbc7bd",
    "repo": "ansible/ansible-runner",
    "commit_url": "https://github.com/ansible/ansible-runner/commit/3533f265f4349a3f2a0283158cd01b59a6bbc7bd",
    "files": [
      "ansible_runner/config/doc.py",
      "ansible_runner/runner.py",
      "test/integration/test_interface.py",
      "test/unit/config/test_doc.py"
    ],
    "message": "Remove shell use in subprocess\n\nCo-authored-by: Sam Doran <sdoran@redhat.com>",
    "before_after_code_files": [
      "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
      "ansible_runner/runner.py||ansible_runner/runner.py",
      "test/integration/test_interface.py||test/integration/test_interface.py",
      "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
    ]
  },
  "patch_diff": {
    "ansible_runner/config/doc.py||ansible_runner/config/doc.py": [
      "File: ansible_runner/config/doc.py -> ansible_runner/config/doc.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:         if module_path:",
      "88:             self.cmdline_args.extend(['-M', module_path])",
      "92:         self.command = [self._ansible_doc_exec_path] + self.cmdline_args",
      "93:         self._handle_command_wrap(self.execution_mode, self.cmdline_args)",
      "",
      "[Removed Lines]",
      "90:         self.cmdline_args.append(\" \".join(plugin_names))",
      "",
      "[Added Lines]",
      "90:         self.cmdline_args.extend(plugin_names)",
      "",
      "---------------"
    ],
    "ansible_runner/runner.py||ansible_runner/runner.py": [
      "File: ansible_runner/runner.py -> ansible_runner/runner.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "204:             user = getpass.getuser()",
      "205:             group = grp.getgrgid(os.getgid()).gr_name",
      "209:             _, stderr = proc.communicate()",
      "210:             if proc.returncode:",
      "211:                 # Unable to create cgroup",
      "",
      "[Removed Lines]",
      "207:             cmd = 'cgcreate -a {user}:{group} -t {user}:{group} -g cpuacct,memory,pids:{}'.format(cgroup_path, user=user, group=group)",
      "208:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
      "",
      "[Added Lines]",
      "207:             cmd = ['cgcreate',",
      "208:                    '-a', f'{user}:{group}',",
      "209:                    '-t', f'{user}:{group}',",
      "210:                    '-g', f'cpuacct,memory,pids:{cgroup_path}',",
      "211:                    ]",
      "212:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "249:                     'stderr': error_fd,",
      "250:                     'check': True,",
      "251:                     'universal_newlines': True,",
      "253:                 }",
      "254:                 if subprocess_timeout is not None:",
      "255:                     kwargs.update({'timeout': subprocess_timeout})",
      "259:                 stdout_response = proc_out.stdout",
      "260:                 stderr_response = proc_out.stderr",
      "",
      "[Removed Lines]",
      "252:                     'shell': True",
      "257:                 proc_out = run_subprocess(\" \".join(command), **kwargs)",
      "",
      "[Added Lines]",
      "260:                 proc_out = run_subprocess(command, **kwargs)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "391:                 return True",
      "392:             _delete()",
      "393:         if self.resource_profiling:",
      "396:             _, stderr = proc.communicate()",
      "397:             if proc.returncode:",
      "398:                 logger.error('Failed to delete cgroup: {}'.format(stderr))",
      "",
      "[Removed Lines]",
      "394:             cmd = 'cgdelete -g cpuacct,memory,pids:{}'.format(cgroup_path)",
      "395:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
      "",
      "[Added Lines]",
      "397:             cmd = ['cgdelete', '-g', f'cpuacct,memory,pids:{cgroup_path}']",
      "398:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "532:         container_name = self.config.container_name",
      "533:         if container_name:",
      "534:             container_cli = self.config.process_isolation_executable",
      "537:             _, stderr = proc.communicate()",
      "538:             if proc.returncode:",
      "539:                 logger.info('Error from {} kill {} command:\\n{}'.format(container_cli, container_name, stderr))",
      "",
      "[Removed Lines]",
      "535:             cmd = '{} kill {}'.format(container_cli, container_name)",
      "536:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
      "",
      "[Added Lines]",
      "538:             cmd = [container_cli, 'kill', container_name]",
      "539:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
      "",
      "---------------"
    ],
    "test/integration/test_interface.py||test/integration/test_interface.py": [
      "File: test/integration/test_interface.py -> test/integration/test_interface.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "152:     assert err == ''",
      "155: @pytest.mark.test_all_runtimes",
      "156: def test_run_ansible_command_within_container(project_fixtures, runtime):",
      "157:     private_data_dir = project_fixtures / 'debug'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "155: def test_run_command_injection_error():",
      "156:     out, err, rc = run_command(",
      "157:         executable_cmd='whoami',",
      "158:         cmdline_args=[';hostname'],",
      "159:         runner_mode='subprocess',",
      "160:     )",
      "161:     assert rc == 1",
      "162:     assert \"usage: whoami\" in err or \"whoami: extra operand \u2018;hostname\u2019\" in err",
      "165: @pytest.mark.test_all_runtimes",
      "166: def test_run_command_injection_error_within_container(runtime):",
      "167:     out, err, rc = run_command(",
      "168:         executable_cmd='whoami',",
      "169:         cmdline_args=[';hostname'],",
      "170:         runner_mode='subprocess',",
      "171:         process_isolation_executable=runtime,",
      "172:         process_isolation=True,",
      "173:         container_image=defaults.default_container_image,",
      "174:     )",
      "175:     assert rc == 1",
      "176:     assert \"whoami: extra operand ';hostname'\" in err",
      "",
      "---------------"
    ],
    "test/unit/config/test_doc.py||test/unit/config/test_doc.py": [
      "File: test/unit/config/test_doc.py -> test/unit/config/test_doc.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:     plugin_names = ['copy', 'file']",
      "53:     plugin_type = 'module'",
      "54:     rc.prepare_plugin_docs_command(plugin_names, plugin_type=plugin_type, snippet=True, playbook_dir='/tmp/test')",
      "56:     assert rc.command == expected_command",
      "57:     assert rc.runner_mode == 'subprocess'",
      "58:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
      "",
      "[Removed Lines]",
      "55:     expected_command = [get_executable_path('ansible-doc'), '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy file']",
      "",
      "[Added Lines]",
      "55:     expected_command = [get_executable_path('ansible-doc'), '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy', 'file']",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:         '-s',",
      "114:         '-t', 'module',",
      "115:         '--playbook-dir', '/tmp/test',",
      "117:         'file',",
      "118:     ])",
      "",
      "[Removed Lines]",
      "116:         'copy '",
      "",
      "[Added Lines]",
      "116:         'copy',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ca7010f5e2cf887eb172630cec783b1fddd64917",
      "candidate_info": {
        "commit_hash": "ca7010f5e2cf887eb172630cec783b1fddd64917",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/ca7010f5e2cf887eb172630cec783b1fddd64917",
        "files": [
          "ansible_runner/config/doc.py",
          "ansible_runner/runner.py",
          "test/integration/test_interface.py",
          "test/unit/config/test_doc.py"
        ],
        "message": "Merge pull request #885 from Shrews/backport/872/release_2.0\n\n[release_2.0] Remove shell use in subprocess\n\nBackport of PR #872\n(cherry picked from commit 3533f26)\n\nReviewed-by: Sam Doran <sdoran@redhat.com>\nReviewed-by: None <None>",
        "before_after_code_files": [
          "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
          "ansible_runner/runner.py||ansible_runner/runner.py",
          "test/integration/test_interface.py||test/integration/test_interface.py",
          "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
            "ansible_runner/runner.py||ansible_runner/runner.py",
            "test/integration/test_interface.py||test/integration/test_interface.py",
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ],
          "candidate": [
            "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
            "ansible_runner/runner.py||ansible_runner/runner.py",
            "test/integration/test_interface.py||test/integration/test_interface.py",
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/config/doc.py||ansible_runner/config/doc.py": [
          "File: ansible_runner/config/doc.py -> ansible_runner/config/doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         if module_path:",
          "88:             self.cmdline_args.extend(['-M', module_path])",
          "92:         self.command = [self._ansible_doc_exec_path] + self.cmdline_args",
          "93:         self._handle_command_wrap(self.execution_mode, self.cmdline_args)",
          "",
          "[Removed Lines]",
          "90:         self.cmdline_args.append(\" \".join(plugin_names))",
          "",
          "[Added Lines]",
          "90:         self.cmdline_args.extend(plugin_names)",
          "",
          "---------------"
        ],
        "ansible_runner/runner.py||ansible_runner/runner.py": [
          "File: ansible_runner/runner.py -> ansible_runner/runner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:             user = getpass.getuser()",
          "205:             group = grp.getgrgid(os.getgid()).gr_name",
          "209:             _, stderr = proc.communicate()",
          "210:             if proc.returncode:",
          "211:                 # Unable to create cgroup",
          "",
          "[Removed Lines]",
          "207:             cmd = 'cgcreate -a {user}:{group} -t {user}:{group} -g cpuacct,memory,pids:{}'.format(cgroup_path, user=user, group=group)",
          "208:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Added Lines]",
          "207:             cmd = ['cgcreate',",
          "208:                    '-a', f'{user}:{group}',",
          "209:                    '-t', f'{user}:{group}',",
          "210:                    '-g', f'cpuacct,memory,pids:{cgroup_path}',",
          "211:                    ]",
          "212:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:                     'stderr': error_fd,",
          "250:                     'check': True,",
          "251:                     'universal_newlines': True,",
          "253:                 }",
          "254:                 if subprocess_timeout is not None:",
          "255:                     kwargs.update({'timeout': subprocess_timeout})",
          "259:                 stdout_response = proc_out.stdout",
          "260:                 stderr_response = proc_out.stderr",
          "",
          "[Removed Lines]",
          "252:                     'shell': True",
          "257:                 proc_out = run_subprocess(\" \".join(command), **kwargs)",
          "",
          "[Added Lines]",
          "260:                 proc_out = run_subprocess(command, **kwargs)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:                 return True",
          "392:             _delete()",
          "393:         if self.resource_profiling:",
          "396:             _, stderr = proc.communicate()",
          "397:             if proc.returncode:",
          "398:                 logger.error('Failed to delete cgroup: {}'.format(stderr))",
          "",
          "[Removed Lines]",
          "394:             cmd = 'cgdelete -g cpuacct,memory,pids:{}'.format(cgroup_path)",
          "395:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Added Lines]",
          "397:             cmd = ['cgdelete', '-g', f'cpuacct,memory,pids:{cgroup_path}']",
          "398:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "532:         container_name = self.config.container_name",
          "533:         if container_name:",
          "534:             container_cli = self.config.process_isolation_executable",
          "537:             _, stderr = proc.communicate()",
          "538:             if proc.returncode:",
          "539:                 logger.info('Error from {} kill {} command:\\n{}'.format(container_cli, container_name, stderr))",
          "",
          "[Removed Lines]",
          "535:             cmd = '{} kill {}'.format(container_cli, container_name)",
          "536:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Added Lines]",
          "538:             cmd = [container_cli, 'kill', container_name]",
          "539:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
          "",
          "---------------"
        ],
        "test/integration/test_interface.py||test/integration/test_interface.py": [
          "File: test/integration/test_interface.py -> test/integration/test_interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     assert err == ''",
          "155: @pytest.mark.test_all_runtimes",
          "156: def test_run_ansible_command_within_container(project_fixtures, runtime):",
          "157:     private_data_dir = project_fixtures / 'debug'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: def test_run_command_injection_error():",
          "156:     out, err, rc = run_command(",
          "157:         executable_cmd='whoami',",
          "158:         cmdline_args=[';hostname'],",
          "159:         runner_mode='subprocess',",
          "160:     )",
          "161:     assert rc == 1",
          "162:     assert \"usage: whoami\" in err or \"whoami: extra operand \u2018;hostname\u2019\" in err",
          "165: @pytest.mark.test_all_runtimes",
          "166: def test_run_command_injection_error_within_container(runtime):",
          "167:     out, err, rc = run_command(",
          "168:         executable_cmd='whoami',",
          "169:         cmdline_args=[';hostname'],",
          "170:         runner_mode='subprocess',",
          "171:         process_isolation_executable=runtime,",
          "172:         process_isolation=True,",
          "173:         container_image=defaults.default_container_image,",
          "174:     )",
          "175:     assert rc == 1",
          "176:     assert \"whoami: extra operand ';hostname'\" in err",
          "",
          "---------------"
        ],
        "test/unit/config/test_doc.py||test/unit/config/test_doc.py": [
          "File: test/unit/config/test_doc.py -> test/unit/config/test_doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     plugin_names = ['copy', 'file']",
          "53:     plugin_type = 'module'",
          "54:     rc.prepare_plugin_docs_command(plugin_names, plugin_type=plugin_type, snippet=True, playbook_dir='/tmp/test')",
          "56:     assert rc.command == expected_command",
          "57:     assert rc.runner_mode == 'subprocess'",
          "58:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "",
          "[Removed Lines]",
          "55:     expected_command = [get_executable_path('ansible-doc'), '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy file']",
          "",
          "[Added Lines]",
          "55:     expected_command = [get_executable_path('ansible-doc'), '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy', 'file']",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:         '-s',",
          "113:         '-t', 'module',",
          "114:         '--playbook-dir', '/tmp/test',",
          "116:         'file',",
          "117:     ])",
          "",
          "[Removed Lines]",
          "115:         'copy '",
          "",
          "[Added Lines]",
          "115:         'copy',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "237ed0c4b30d6ceff59c12a72c633344916c25a3",
      "candidate_info": {
        "commit_hash": "237ed0c4b30d6ceff59c12a72c633344916c25a3",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/237ed0c4b30d6ceff59c12a72c633344916c25a3",
        "files": [
          "ansible_runner/config/doc.py",
          "ansible_runner/runner.py",
          "test/integration/test_interface.py",
          "test/unit/config/test_doc.py"
        ],
        "message": "Remove shell use in subprocess\n\nCo-authored-by: Sam Doran <sdoran@redhat.com>\n(cherry picked from commit 3533f265f4349a3f2a0283158cd01b59a6bbc7bd)",
        "before_after_code_files": [
          "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
          "ansible_runner/runner.py||ansible_runner/runner.py",
          "test/integration/test_interface.py||test/integration/test_interface.py",
          "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
            "ansible_runner/runner.py||ansible_runner/runner.py",
            "test/integration/test_interface.py||test/integration/test_interface.py",
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ],
          "candidate": [
            "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
            "ansible_runner/runner.py||ansible_runner/runner.py",
            "test/integration/test_interface.py||test/integration/test_interface.py",
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/config/doc.py||ansible_runner/config/doc.py": [
          "File: ansible_runner/config/doc.py -> ansible_runner/config/doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         if module_path:",
          "88:             self.cmdline_args.extend(['-M', module_path])",
          "92:         self.command = [self._ansible_doc_exec_path] + self.cmdline_args",
          "93:         self._handle_command_wrap(self.execution_mode, self.cmdline_args)",
          "",
          "[Removed Lines]",
          "90:         self.cmdline_args.append(\" \".join(plugin_names))",
          "",
          "[Added Lines]",
          "90:         self.cmdline_args.extend(plugin_names)",
          "",
          "---------------"
        ],
        "ansible_runner/runner.py||ansible_runner/runner.py": [
          "File: ansible_runner/runner.py -> ansible_runner/runner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:             user = getpass.getuser()",
          "205:             group = grp.getgrgid(os.getgid()).gr_name",
          "209:             _, stderr = proc.communicate()",
          "210:             if proc.returncode:",
          "211:                 # Unable to create cgroup",
          "",
          "[Removed Lines]",
          "207:             cmd = 'cgcreate -a {user}:{group} -t {user}:{group} -g cpuacct,memory,pids:{}'.format(cgroup_path, user=user, group=group)",
          "208:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Added Lines]",
          "207:             cmd = ['cgcreate',",
          "208:                    '-a', f'{user}:{group}',",
          "209:                    '-t', f'{user}:{group}',",
          "210:                    '-g', f'cpuacct,memory,pids:{cgroup_path}',",
          "211:                    ]",
          "212:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:                     'stderr': error_fd,",
          "250:                     'check': True,",
          "251:                     'universal_newlines': True,",
          "253:                 }",
          "254:                 if subprocess_timeout is not None:",
          "255:                     kwargs.update({'timeout': subprocess_timeout})",
          "259:                 stdout_response = proc_out.stdout",
          "260:                 stderr_response = proc_out.stderr",
          "",
          "[Removed Lines]",
          "252:                     'shell': True",
          "257:                 proc_out = run_subprocess(\" \".join(command), **kwargs)",
          "",
          "[Added Lines]",
          "260:                 proc_out = run_subprocess(command, **kwargs)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:                 return True",
          "392:             _delete()",
          "393:         if self.resource_profiling:",
          "396:             _, stderr = proc.communicate()",
          "397:             if proc.returncode:",
          "398:                 logger.error('Failed to delete cgroup: {}'.format(stderr))",
          "",
          "[Removed Lines]",
          "394:             cmd = 'cgdelete -g cpuacct,memory,pids:{}'.format(cgroup_path)",
          "395:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Added Lines]",
          "397:             cmd = ['cgdelete', '-g', f'cpuacct,memory,pids:{cgroup_path}']",
          "398:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "532:         container_name = self.config.container_name",
          "533:         if container_name:",
          "534:             container_cli = self.config.process_isolation_executable",
          "537:             _, stderr = proc.communicate()",
          "538:             if proc.returncode:",
          "539:                 logger.info('Error from {} kill {} command:\\n{}'.format(container_cli, container_name, stderr))",
          "",
          "[Removed Lines]",
          "535:             cmd = '{} kill {}'.format(container_cli, container_name)",
          "536:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Added Lines]",
          "538:             cmd = [container_cli, 'kill', container_name]",
          "539:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
          "",
          "---------------"
        ],
        "test/integration/test_interface.py||test/integration/test_interface.py": [
          "File: test/integration/test_interface.py -> test/integration/test_interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     assert err == ''",
          "155: @pytest.mark.test_all_runtimes",
          "156: def test_run_ansible_command_within_container(project_fixtures, runtime):",
          "157:     private_data_dir = project_fixtures / 'debug'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: def test_run_command_injection_error():",
          "156:     out, err, rc = run_command(",
          "157:         executable_cmd='whoami',",
          "158:         cmdline_args=[';hostname'],",
          "159:         runner_mode='subprocess',",
          "160:     )",
          "161:     assert rc == 1",
          "162:     assert \"usage: whoami\" in err or \"whoami: extra operand \u2018;hostname\u2019\" in err",
          "165: @pytest.mark.test_all_runtimes",
          "166: def test_run_command_injection_error_within_container(runtime):",
          "167:     out, err, rc = run_command(",
          "168:         executable_cmd='whoami',",
          "169:         cmdline_args=[';hostname'],",
          "170:         runner_mode='subprocess',",
          "171:         process_isolation_executable=runtime,",
          "172:         process_isolation=True,",
          "173:         container_image=defaults.default_container_image,",
          "174:     )",
          "175:     assert rc == 1",
          "176:     assert \"whoami: extra operand ';hostname'\" in err",
          "",
          "---------------"
        ],
        "test/unit/config/test_doc.py||test/unit/config/test_doc.py": [
          "File: test/unit/config/test_doc.py -> test/unit/config/test_doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     plugin_names = ['copy', 'file']",
          "53:     plugin_type = 'module'",
          "54:     rc.prepare_plugin_docs_command(plugin_names, plugin_type=plugin_type, snippet=True, playbook_dir='/tmp/test')",
          "56:     assert rc.command == expected_command",
          "57:     assert rc.runner_mode == 'subprocess'",
          "58:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "",
          "[Removed Lines]",
          "55:     expected_command = [get_executable_path('ansible-doc'), '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy file']",
          "",
          "[Added Lines]",
          "55:     expected_command = [get_executable_path('ansible-doc'), '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy', 'file']",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:         '-s',",
          "114:         '-t', 'module',",
          "115:         '--playbook-dir', '/tmp/test',",
          "117:         'file',",
          "118:     ])",
          "",
          "[Removed Lines]",
          "116:         'copy '",
          "",
          "[Added Lines]",
          "116:         'copy',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba1718e792ec2808f8c266f9aeb654dc199452f8",
      "candidate_info": {
        "commit_hash": "ba1718e792ec2808f8c266f9aeb654dc199452f8",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/ba1718e792ec2808f8c266f9aeb654dc199452f8",
        "files": [
          "ansible_runner/config/doc.py",
          "ansible_runner/runner.py",
          "test/integration/test_interface.py",
          "test/unit/config/test_doc.py"
        ],
        "message": "Remove shell use in subprocess\n\nCo-authored-by: Sam Doran <sdoran@redhat.com>\n(cherry picked from commit 3533f265f4349a3f2a0283158cd01b59a6bbc7bd)",
        "before_after_code_files": [
          "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
          "ansible_runner/runner.py||ansible_runner/runner.py",
          "test/integration/test_interface.py||test/integration/test_interface.py",
          "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
            "ansible_runner/runner.py||ansible_runner/runner.py",
            "test/integration/test_interface.py||test/integration/test_interface.py",
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ],
          "candidate": [
            "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
            "ansible_runner/runner.py||ansible_runner/runner.py",
            "test/integration/test_interface.py||test/integration/test_interface.py",
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/config/doc.py||ansible_runner/config/doc.py": [
          "File: ansible_runner/config/doc.py -> ansible_runner/config/doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         if module_path:",
          "88:             self.cmdline_args.extend(['-M', module_path])",
          "92:         self.command = [self._ansible_doc_exec_path] + self.cmdline_args",
          "93:         self._handle_command_wrap(self.execution_mode, self.cmdline_args)",
          "",
          "[Removed Lines]",
          "90:         self.cmdline_args.append(\" \".join(plugin_names))",
          "",
          "[Added Lines]",
          "90:         self.cmdline_args.extend(plugin_names)",
          "",
          "---------------"
        ],
        "ansible_runner/runner.py||ansible_runner/runner.py": [
          "File: ansible_runner/runner.py -> ansible_runner/runner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:             user = getpass.getuser()",
          "205:             group = grp.getgrgid(os.getgid()).gr_name",
          "209:             _, stderr = proc.communicate()",
          "210:             if proc.returncode:",
          "211:                 # Unable to create cgroup",
          "",
          "[Removed Lines]",
          "207:             cmd = 'cgcreate -a {user}:{group} -t {user}:{group} -g cpuacct,memory,pids:{}'.format(cgroup_path, user=user, group=group)",
          "208:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Added Lines]",
          "207:             cmd = ['cgcreate',",
          "208:                    '-a', f'{user}:{group}',",
          "209:                    '-t', f'{user}:{group}',",
          "210:                    '-g', f'cpuacct,memory,pids:{cgroup_path}',",
          "211:                    ]",
          "212:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:                     'stderr': error_fd,",
          "250:                     'check': True,",
          "251:                     'universal_newlines': True,",
          "253:                 }",
          "254:                 if subprocess_timeout is not None:",
          "255:                     kwargs.update({'timeout': subprocess_timeout})",
          "259:                 stdout_response = proc_out.stdout",
          "260:                 stderr_response = proc_out.stderr",
          "",
          "[Removed Lines]",
          "252:                     'shell': True",
          "257:                 proc_out = run_subprocess(\" \".join(command), **kwargs)",
          "",
          "[Added Lines]",
          "260:                 proc_out = run_subprocess(command, **kwargs)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:                 return True",
          "392:             _delete()",
          "393:         if self.resource_profiling:",
          "396:             _, stderr = proc.communicate()",
          "397:             if proc.returncode:",
          "398:                 logger.error('Failed to delete cgroup: {}'.format(stderr))",
          "",
          "[Removed Lines]",
          "394:             cmd = 'cgdelete -g cpuacct,memory,pids:{}'.format(cgroup_path)",
          "395:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Added Lines]",
          "397:             cmd = ['cgdelete', '-g', f'cpuacct,memory,pids:{cgroup_path}']",
          "398:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "532:         container_name = self.config.container_name",
          "533:         if container_name:",
          "534:             container_cli = self.config.process_isolation_executable",
          "537:             _, stderr = proc.communicate()",
          "538:             if proc.returncode:",
          "539:                 logger.info('Error from {} kill {} command:\\n{}'.format(container_cli, container_name, stderr))",
          "",
          "[Removed Lines]",
          "535:             cmd = '{} kill {}'.format(container_cli, container_name)",
          "536:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Added Lines]",
          "538:             cmd = [container_cli, 'kill', container_name]",
          "539:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
          "",
          "---------------"
        ],
        "test/integration/test_interface.py||test/integration/test_interface.py": [
          "File: test/integration/test_interface.py -> test/integration/test_interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     assert err == ''",
          "155: @pytest.mark.test_all_runtimes",
          "156: def test_run_ansible_command_within_container(project_fixtures, runtime):",
          "157:     private_data_dir = project_fixtures / 'debug'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: def test_run_command_injection_error():",
          "156:     out, err, rc = run_command(",
          "157:         executable_cmd='whoami',",
          "158:         cmdline_args=[';hostname'],",
          "159:         runner_mode='subprocess',",
          "160:     )",
          "161:     assert rc == 1",
          "162:     assert \"usage: whoami\" in err or \"whoami: extra operand \u2018;hostname\u2019\" in err",
          "165: @pytest.mark.test_all_runtimes",
          "166: def test_run_command_injection_error_within_container(runtime):",
          "167:     out, err, rc = run_command(",
          "168:         executable_cmd='whoami',",
          "169:         cmdline_args=[';hostname'],",
          "170:         runner_mode='subprocess',",
          "171:         process_isolation_executable=runtime,",
          "172:         process_isolation=True,",
          "173:         container_image=defaults.default_container_image,",
          "174:     )",
          "175:     assert rc == 1",
          "176:     assert \"whoami: extra operand ';hostname'\" in err",
          "",
          "---------------"
        ],
        "test/unit/config/test_doc.py||test/unit/config/test_doc.py": [
          "File: test/unit/config/test_doc.py -> test/unit/config/test_doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     plugin_names = ['copy', 'file']",
          "53:     plugin_type = 'module'",
          "54:     rc.prepare_plugin_docs_command(plugin_names, plugin_type=plugin_type, snippet=True, playbook_dir='/tmp/test')",
          "56:     assert rc.command == expected_command",
          "57:     assert rc.runner_mode == 'subprocess'",
          "58:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "",
          "[Removed Lines]",
          "55:     expected_command = [get_executable_path('ansible-doc'), '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy file']",
          "",
          "[Added Lines]",
          "55:     expected_command = [get_executable_path('ansible-doc'), '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy', 'file']",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:         '-s',",
          "113:         '-t', 'module',",
          "114:         '--playbook-dir', '/tmp/test',",
          "116:         'file',",
          "117:     ])",
          "",
          "[Removed Lines]",
          "115:         'copy '",
          "",
          "[Added Lines]",
          "115:         'copy',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb40c89cb2130767404ec889e74fc0a2539e47f4",
      "candidate_info": {
        "commit_hash": "cb40c89cb2130767404ec889e74fc0a2539e47f4",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/cb40c89cb2130767404ec889e74fc0a2539e47f4",
        "files": [
          "ansible_runner/config/doc.py",
          "ansible_runner/runner.py",
          "test/integration/test_interface.py",
          "test/unit/config/test_doc.py"
        ],
        "message": "Merge pull request #886 from Shrews/backport/872/release_2.1\n\n[release_2.1] Remove shell use in subprocess\n\nBackport of PR #872\n(cherry picked from commit 3533f26)\n\nReviewed-by: Sam Doran <sdoran@redhat.com>\nReviewed-by: None <None>",
        "before_after_code_files": [
          "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
          "ansible_runner/runner.py||ansible_runner/runner.py",
          "test/integration/test_interface.py||test/integration/test_interface.py",
          "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
            "ansible_runner/runner.py||ansible_runner/runner.py",
            "test/integration/test_interface.py||test/integration/test_interface.py",
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ],
          "candidate": [
            "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
            "ansible_runner/runner.py||ansible_runner/runner.py",
            "test/integration/test_interface.py||test/integration/test_interface.py",
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/config/doc.py||ansible_runner/config/doc.py": [
          "File: ansible_runner/config/doc.py -> ansible_runner/config/doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:         if module_path:",
          "88:             self.cmdline_args.extend(['-M', module_path])",
          "92:         self.command = [self._ansible_doc_exec_path] + self.cmdline_args",
          "93:         self._handle_command_wrap(self.execution_mode, self.cmdline_args)",
          "",
          "[Removed Lines]",
          "90:         self.cmdline_args.append(\" \".join(plugin_names))",
          "",
          "[Added Lines]",
          "90:         self.cmdline_args.extend(plugin_names)",
          "",
          "---------------"
        ],
        "ansible_runner/runner.py||ansible_runner/runner.py": [
          "File: ansible_runner/runner.py -> ansible_runner/runner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:             user = getpass.getuser()",
          "205:             group = grp.getgrgid(os.getgid()).gr_name",
          "209:             _, stderr = proc.communicate()",
          "210:             if proc.returncode:",
          "211:                 # Unable to create cgroup",
          "",
          "[Removed Lines]",
          "207:             cmd = 'cgcreate -a {user}:{group} -t {user}:{group} -g cpuacct,memory,pids:{}'.format(cgroup_path, user=user, group=group)",
          "208:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Added Lines]",
          "207:             cmd = ['cgcreate',",
          "208:                    '-a', f'{user}:{group}',",
          "209:                    '-t', f'{user}:{group}',",
          "210:                    '-g', f'cpuacct,memory,pids:{cgroup_path}',",
          "211:                    ]",
          "212:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:                     'stderr': error_fd,",
          "250:                     'check': True,",
          "251:                     'universal_newlines': True,",
          "253:                 }",
          "254:                 if subprocess_timeout is not None:",
          "255:                     kwargs.update({'timeout': subprocess_timeout})",
          "259:                 stdout_response = proc_out.stdout",
          "260:                 stderr_response = proc_out.stderr",
          "",
          "[Removed Lines]",
          "252:                     'shell': True",
          "257:                 proc_out = run_subprocess(\" \".join(command), **kwargs)",
          "",
          "[Added Lines]",
          "260:                 proc_out = run_subprocess(command, **kwargs)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:                 return True",
          "392:             _delete()",
          "393:         if self.resource_profiling:",
          "396:             _, stderr = proc.communicate()",
          "397:             if proc.returncode:",
          "398:                 logger.error('Failed to delete cgroup: {}'.format(stderr))",
          "",
          "[Removed Lines]",
          "394:             cmd = 'cgdelete -g cpuacct,memory,pids:{}'.format(cgroup_path)",
          "395:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Added Lines]",
          "397:             cmd = ['cgdelete', '-g', f'cpuacct,memory,pids:{cgroup_path}']",
          "398:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "532:         container_name = self.config.container_name",
          "533:         if container_name:",
          "534:             container_cli = self.config.process_isolation_executable",
          "537:             _, stderr = proc.communicate()",
          "538:             if proc.returncode:",
          "539:                 logger.info('Error from {} kill {} command:\\n{}'.format(container_cli, container_name, stderr))",
          "",
          "[Removed Lines]",
          "535:             cmd = '{} kill {}'.format(container_cli, container_name)",
          "536:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
          "",
          "[Added Lines]",
          "538:             cmd = [container_cli, 'kill', container_name]",
          "539:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
          "",
          "---------------"
        ],
        "test/integration/test_interface.py||test/integration/test_interface.py": [
          "File: test/integration/test_interface.py -> test/integration/test_interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     assert err == ''",
          "155: @pytest.mark.test_all_runtimes",
          "156: def test_run_ansible_command_within_container(project_fixtures, runtime):",
          "157:     private_data_dir = project_fixtures / 'debug'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: def test_run_command_injection_error():",
          "156:     out, err, rc = run_command(",
          "157:         executable_cmd='whoami',",
          "158:         cmdline_args=[';hostname'],",
          "159:         runner_mode='subprocess',",
          "160:     )",
          "161:     assert rc == 1",
          "162:     assert \"usage: whoami\" in err or \"whoami: extra operand \u2018;hostname\u2019\" in err",
          "165: @pytest.mark.test_all_runtimes",
          "166: def test_run_command_injection_error_within_container(runtime):",
          "167:     out, err, rc = run_command(",
          "168:         executable_cmd='whoami',",
          "169:         cmdline_args=[';hostname'],",
          "170:         runner_mode='subprocess',",
          "171:         process_isolation_executable=runtime,",
          "172:         process_isolation=True,",
          "173:         container_image=defaults.default_container_image,",
          "174:     )",
          "175:     assert rc == 1",
          "176:     assert \"whoami: extra operand ';hostname'\" in err",
          "",
          "---------------"
        ],
        "test/unit/config/test_doc.py||test/unit/config/test_doc.py": [
          "File: test/unit/config/test_doc.py -> test/unit/config/test_doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     plugin_names = ['copy', 'file']",
          "53:     plugin_type = 'module'",
          "54:     rc.prepare_plugin_docs_command(plugin_names, plugin_type=plugin_type, snippet=True, playbook_dir='/tmp/test')",
          "56:     assert rc.command == expected_command",
          "57:     assert rc.runner_mode == 'subprocess'",
          "58:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "",
          "[Removed Lines]",
          "55:     expected_command = [get_executable_path('ansible-doc'), '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy file']",
          "",
          "[Added Lines]",
          "55:     expected_command = [get_executable_path('ansible-doc'), '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy', 'file']",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:         '-s',",
          "114:         '-t', 'module',",
          "115:         '--playbook-dir', '/tmp/test',",
          "117:         'file',",
          "118:     ])",
          "",
          "[Removed Lines]",
          "116:         'copy '",
          "",
          "[Added Lines]",
          "116:         'copy',",
          "",
          "---------------"
        ]
      }
    }
  ]
}