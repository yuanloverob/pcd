{
  "cve_id": "CVE-2022-21700",
  "cve_desc": "Micronaut is a JVM-based, full stack Java framework designed for building JVM web applications with support for Java, Kotlin and the Groovy language. In affected versions sending an invalid Content Type header leads to memory leak in DefaultArgumentConversionContext as this type is erroneously used in static state. ### Impact Sending an invalid Content Type header leads to memory leak in `DefaultArgumentConversionContext` as this type is erroneously used in static state. ### Patches The problem is patched in Micronaut 3.2.7 and above. ### Workarounds The default content type binder can be replaced in an existing Micronaut application to mitigate the issue: ```java package example; import java.util.List; import io.micronaut.context.annotation.Replaces; import io.micronaut.core.convert.ConversionService; import io.micronaut.http.MediaType; import io.micronaut.http.bind.DefaultRequestBinderRegistry; import io.micronaut.http.bind.binders.RequestArgumentBinder; import jakarta.inject.Singleton; @Singleton @Replaces(DefaultRequestBinderRegistry.class) class FixedRequestBinderRegistry extends DefaultRequestBinderRegistry { public FixedRequestBinderRegistry(ConversionService conversionService, List<RequestArgumentBinder> binders) { super(conversionService, binders); } @Override protected void registerDefaultConverters(ConversionService<?> conversionService) { super.registerDefaultConverters(conversionService); conversionService.addConverter(CharSequence.class, MediaType.class, charSequence -> { try { return MediaType.of(charSequence); } catch (IllegalArgumentException e) { return null; } }); } } ``` ### References Commit that introduced the vulnerability https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3 ### For more information If you have any questions or comments about this advisory: * Open an issue in [Micronaut Core](https://github.com/micronaut-projects/micronaut-core/issues) * Email us at [info@micronaut.io](mailto:info@micronaut.io)",
  "repo": "micronaut-projects/micronaut-core",
  "patch_hash": "b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
  "patch_info": {
    "commit_hash": "b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
    "repo": "micronaut-projects/micronaut-core",
    "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
    "files": [
      "core/src/main/java/io/micronaut/core/convert/ConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
      "core/src/main/java/io/micronaut/core/type/Argument.java",
      "core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
      "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java",
      "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
      "http/src/main/java/io/micronaut/http/HttpHeaders.java",
      "http/src/main/java/io/micronaut/http/MediaType.java",
      "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
      "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
      "session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java"
    ],
    "message": "Use ConversionContext constants where possible instead of class (#2356)\n\nChanges\n-------\n * Added ArgumentConversionContext constants in ConversionContext\n * Replaced Argument.of and use of argument classes with\nConversionContext constants where possible\n * Added getFirst method in ConvertibleMultiValues that accepts\nArgumentConversionContent parameter\n\nPartially addresses issue #2355",
    "before_after_code_files": [
      "core/src/main/java/io/micronaut/core/convert/ConversionContext.java||core/src/main/java/io/micronaut/core/convert/ConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java||core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
      "core/src/main/java/io/micronaut/core/type/Argument.java||core/src/main/java/io/micronaut/core/type/Argument.java",
      "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
      "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java",
      "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
      "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java",
      "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java",
      "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java||runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
      "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
      "session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java||session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/io/micronaut/core/convert/ConversionContext.java||core/src/main/java/io/micronaut/core/convert/ConversionContext.java": [
      "File: core/src/main/java/io/micronaut/core/convert/ConversionContext.java -> core/src/main/java/io/micronaut/core/convert/ConversionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:     ConversionContext DEFAULT = new ConversionContext() {",
      "42:     };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:     ArgumentConversionContext<Boolean> BOOLEAN = ConversionContext.of(Argument.BOOLEAN);",
      "52:     ArgumentConversionContext<Integer> INT = ConversionContext.of(Argument.INT);",
      "57:     ArgumentConversionContext<Long> LONG = ConversionContext.of(Argument.LONG);",
      "62:     ArgumentConversionContext<String> STRING = ConversionContext.of(Argument.STRING);",
      "67:     ArgumentConversionContext<List<String>> LIST_OF_STRING = ConversionContext.of(Argument.LIST_OF_STRING);",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java||core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java": [
      "File: core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java -> core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import io.micronaut.core.type.Argument;",
      "21: import java.nio.charset.Charset;",
      "",
      "[Removed Lines]",
      "22: import java.util.ArrayList;",
      "23: import java.util.Collections;",
      "24: import java.util.Iterator;",
      "25: import java.util.List;",
      "26: import java.util.Locale;",
      "27: import java.util.Map;",
      "28: import java.util.Optional;",
      "",
      "[Added Lines]",
      "22: import java.util.*;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "114:         return argument;",
      "115:     }",
      "117:     @Override",
      "118:     public String toString() {",
      "119:         return argument.toString();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     @Override",
      "112:     public boolean equals(Object o) {",
      "113:         if (this == o) {",
      "114:             return true;",
      "115:         }",
      "116:         if (o == null || getClass() != o.getClass()) {",
      "117:             return false;",
      "118:         }",
      "119:         DefaultArgumentConversionContext<?> that = (DefaultArgumentConversionContext<?>) o;",
      "120:         return Objects.equals(getArgument(), that.getArgument()) &&",
      "121:             Objects.equals(finalLocale, that.finalLocale) &&",
      "122:             Objects.equals(finalCharset, that.finalCharset);",
      "123:     }",
      "125:     @Override",
      "126:     public int hashCode() {",
      "127:         return Objects.hash(argument, finalLocale, finalCharset);",
      "128:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java": [
      "File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java -> core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.core.convert.value;",
      "18: import io.micronaut.core.convert.ConversionContext;",
      "19: import io.micronaut.core.convert.ConversionService;",
      "20: import io.micronaut.core.reflect.GenericTypeUtils;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ArgumentConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "170:         return Optional.empty();",
      "171:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:     default <T> Optional<T> getFirst(CharSequence name, ArgumentConversionContext<T> conversionContext) {",
      "183:         V v = get(name);",
      "184:         if (v != null) {",
      "185:             return ConversionService.SHARED.convert(v, conversionContext);",
      "186:         }",
      "187:         return Optional.empty();",
      "188:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java": [
      "File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java -> core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:     default boolean contains(String name) {",
      "74:     }",
      "",
      "[Removed Lines]",
      "73:         return get(name, Object.class).isPresent();",
      "",
      "[Added Lines]",
      "73:         return get(name, Argument.OBJECT_ARGUMENT).isPresent();",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/type/Argument.java||core/src/main/java/io/micronaut/core/type/Argument.java": [
      "File: core/src/main/java/io/micronaut/core/type/Argument.java -> core/src/main/java/io/micronaut/core/type/Argument.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: public interface Argument<T> extends TypeVariableResolver, AnnotatedElement, Type {",
      "46:     @SuppressWarnings(\"unused\")",
      "52:     @SuppressWarnings(\"unused\")",
      "58:     @SuppressWarnings(\"unused\")",
      "64:     @SuppressWarnings(\"unused\")",
      "70:     @SuppressWarnings(\"unused\")",
      "76:     @SuppressWarnings(\"unused\")",
      "82:     @SuppressWarnings(\"unused\")",
      "88:     @SuppressWarnings(\"unused\")",
      "94:     @SuppressWarnings(\"unused\")",
      "",
      "[Removed Lines]",
      "47:     Argument INT = Argument.of(int.class);",
      "53:     Argument LONG = Argument.of(long.class);",
      "59:     Argument FLOAT = Argument.of(float.class);",
      "65:     Argument DOUBLE = Argument.of(double.class);",
      "71:     Argument VOID = Argument.of(void.class);",
      "77:     Argument BYTE = Argument.of(byte.class);",
      "83:     Argument BOOLEAN = Argument.of(boolean.class);",
      "89:     Argument CHAR = Argument.of(char.class);",
      "95:     Argument SHORT = Argument.of(short.class);",
      "",
      "[Added Lines]",
      "46:     Argument<String> STRING = Argument.of(String.class);",
      "52:     Argument<Integer> INT = Argument.of(int.class);",
      "58:     Argument<Long> LONG = Argument.of(long.class);",
      "64:     Argument<Float> FLOAT = Argument.of(float.class);",
      "70:     Argument<Double> DOUBLE = Argument.of(double.class);",
      "76:     Argument<Void> VOID = Argument.of(void.class);",
      "82:     Argument<Byte> BYTE = Argument.of(byte.class);",
      "88:     Argument<Boolean> BOOLEAN = Argument.of(boolean.class);",
      "94:     Argument<Character> CHAR = Argument.of(char.class);",
      "100:     Argument<Short> SHORT = Argument.of(short.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "107:     @SuppressWarnings(\"unused\")",
      "108:     Argument<Object> OBJECT_ARGUMENT = of(Object.class);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "118:     Argument<List<String>> LIST_OF_STRING = Argument.listOf(String.class);",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java": [
      "File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java -> core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "49:     public DefaultArgument(Class<T> type, String name, AnnotationMetadata annotationMetadata, Argument... genericTypes) {",
      "55:     }",
      "",
      "[Removed Lines]",
      "50:         this.type = type;",
      "51:         this.name = name;",
      "52:         this.annotationMetadata = annotationMetadata != null ? annotationMetadata : AnnotationMetadata.EMPTY_METADATA;",
      "53:         this.typeParameters = initializeTypeParameters(genericTypes);",
      "54:         this.typeParameterArray = genericTypes;",
      "",
      "[Added Lines]",
      "50:         this(type, name, annotationMetadata, initializeTypeParameters(genericTypes), genericTypes);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "184:         return Objects.hash(type, name, typeParameters);",
      "185:     }",
      "188:         Map<String, Argument<?>> typeParameters;",
      "189:         if (genericTypes != null && genericTypes.length > 0) {",
      "190:             typeParameters = new LinkedHashMap<>(genericTypes.length);",
      "",
      "[Removed Lines]",
      "187:     private Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {",
      "",
      "[Added Lines]",
      "183:     private static Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {",
      "",
      "---------------"
    ],
    "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java": [
      "File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java -> http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:         } else if (mediaType.equals(MediaType.APPLICATION_VND_ERROR_TYPE)) {",
      "72:             return Argument.of(VndError.class);",
      "73:         } else {",
      "75:         }",
      "76:     }",
      "77: }",
      "",
      "[Removed Lines]",
      "74:             return Argument.of(String.class);",
      "",
      "[Added Lines]",
      "74:             return Argument.STRING;",
      "",
      "---------------"
    ],
    "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java": [
      "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "141:     private static final Logger LOG = LoggerFactory.getLogger(RoutingInBoundHandler.class);",
      "142:     private static final Pattern IGNORABLE_ERROR_MESSAGE = Pattern.compile(",
      "143:             \"^.*(?:connection.*(?:reset|closed|abort|broken)|broken.*pipe).*$\", Pattern.CASE_INSENSITIVE);",
      "145:     private final Router router;",
      "146:     private final ExecutorSelector executorSelector;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:     private static final Argument ARGUMENT_PART_DATA = Argument.of(PartData.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "769:                                 Argument typeVariable;",
      "771:                                 if (StreamingFileUpload.class.isAssignableFrom(argument.getType())) {",
      "773:                                 } else {",
      "774:                                     typeVariable = argument.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "775:                                 }",
      "",
      "[Removed Lines]",
      "772:                                     typeVariable = Argument.of(PartData.class);",
      "",
      "[Added Lines]",
      "773:                                     typeVariable = ARGUMENT_PART_DATA;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "784:                                 if (Publishers.isConvertibleToPublisher(typeVariableType)) {",
      "785:                                     boolean streamingFileUpload = StreamingFileUpload.class.isAssignableFrom(typeVariableType);",
      "786:                                     if (streamingFileUpload) {",
      "788:                                     } else {",
      "789:                                         typeVariable = typeVariable.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "790:                                     }",
      "",
      "[Removed Lines]",
      "787:                                         typeVariable = Argument.of(PartData.class);",
      "",
      "[Added Lines]",
      "788:                                         typeVariable = ARGUMENT_PART_DATA;",
      "",
      "---------------"
    ],
    "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java": [
      "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: public class CompletableFutureBodyBinder extends DefaultBodyAnnotationBinder<CompletableFuture>",
      "50:     implements NonBlockingBodyArgumentBinder<CompletableFuture> {",
      "52:     private final BeanLocator beanLocator;",
      "53:     private final HttpServerConfiguration httpServerConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     private static final Argument<CompletableFuture> TYPE = Argument.of(CompletableFuture.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:     @Override",
      "67:     public Argument<CompletableFuture> argumentType() {",
      "69:     }",
      "71:     @Override",
      "",
      "[Removed Lines]",
      "68:         return Argument.of(CompletableFuture.class);",
      "",
      "[Added Lines]",
      "70:         return TYPE;",
      "",
      "---------------"
    ],
    "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java": [
      "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: public class PublisherBodyBinder extends DefaultBodyAnnotationBinder<Publisher> implements NonBlockingBodyArgumentBinder<Publisher> {",
      "56:     private static final Logger LOG = LoggerFactory.getLogger(NettyHttpServer.class);",
      "58:     private final BeanLocator beanLocator;",
      "59:     private final HttpServerConfiguration httpServerConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:     private static final Argument<Publisher> TYPE = Argument.of(Publisher.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "72:     @Override",
      "73:     public Argument<Publisher> argumentType() {",
      "75:     }",
      "77:     @Override",
      "",
      "[Removed Lines]",
      "74:         return Argument.of(Publisher.class);",
      "",
      "[Added Lines]",
      "75:         return TYPE;",
      "",
      "---------------"
    ],
    "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy": [
      "File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy -> http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http.server.netty.cors",
      "18: import io.micronaut.core.type.Argument",
      "19: import io.micronaut.http.HttpHeaders",
      "20: import io.micronaut.http.HttpMethod",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ConversionContext",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "146:         2 * headers.getOrigin() >> Optional.of('http://www.foo.com')",
      "147:         1 * request.getMethod() >> HttpMethod.GET",
      "148:         !result.isPresent()",
      "150:     }",
      "152:     void \"test preflight handleRequest with disallowed header\"() {",
      "",
      "[Removed Lines]",
      "149:         0 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String))",
      "",
      "[Added Lines]",
      "150:         0 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String)))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:         then: \"the request is rejected because bar is not allowed\"",
      "172:         2 * headers.getOrigin() >> Optional.of('http://www.foo.com')",
      "175:         result.get().status == HttpStatus.FORBIDDEN",
      "176:     }",
      "",
      "[Removed Lines]",
      "173:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "174:         1 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> ['foo', 'bar']",
      "",
      "[Added Lines]",
      "174:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "175:         1 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> ['foo', 'bar']",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "197:         then: \"the request is successful\"",
      "198:         4 * headers.getOrigin() >> Optional.of('http://www.foo.com')",
      "201:         result.get().status == HttpStatus.OK",
      "202:     }",
      "",
      "[Removed Lines]",
      "199:         2 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "200:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['foo'])",
      "",
      "[Added Lines]",
      "200:         2 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "201:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> Optional.of(['foo'])",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "274:         HttpResponse response = corsHandler.handleRequest(request).get()",
      "276:         then: \"the response is not modified\"",
      "279:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_METHODS) == 'GET'",
      "280:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_ORIGIN) == 'http://www.foo.com' // The origin is echo'd",
      "281:         response.getHeaders().get(VARY) == 'Origin' // The vary header is set",
      "",
      "[Removed Lines]",
      "277:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['X-Header', 'Y-Header'])",
      "278:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "",
      "[Added Lines]",
      "278:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> Optional.of(['X-Header', 'Y-Header'])",
      "279:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "305:         HttpResponse response = corsHandler.handleRequest(request).get()",
      "307:         then: \"the response is not modified\"",
      "310:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_METHODS) == 'GET'",
      "311:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_ORIGIN) == 'http://www.foo.com' // The origin is echo'd",
      "312:         response.getHeaders().get(VARY) == 'Origin' // The vary header is set",
      "",
      "[Removed Lines]",
      "308:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['X-Header', 'Y-Header'])",
      "309:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "",
      "[Added Lines]",
      "309:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> Optional.of(['X-Header', 'Y-Header'])",
      "310:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "",
      "---------------"
    ],
    "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java": [
      "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import static io.micronaut.http.HttpHeaders.VARY;",
      "29: import io.micronaut.core.async.publisher.Publishers;",
      "30: import io.micronaut.core.order.Ordered;",
      "32: import io.micronaut.core.util.StringUtils;",
      "33: import io.micronaut.http.HttpHeaders;",
      "34: import io.micronaut.http.HttpMethod;",
      "",
      "[Removed Lines]",
      "31: import io.micronaut.core.type.Argument;",
      "",
      "[Added Lines]",
      "30: import io.micronaut.core.convert.ArgumentConversionContext;",
      "31: import io.micronaut.core.convert.ConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59: @Filter(\"/**\")",
      "60: public class CorsFilter implements HttpServerFilter {",
      "62:     protected final HttpServerConfiguration.CorsConfiguration corsConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:     private static final ArgumentConversionContext<HttpMethod> CONVERSION_CONTEXT_HTTP_METHOD = ConversionContext.of(HttpMethod.class);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "108:                 CorsOriginConfiguration config = optionalConfig.get();",
      "110:                 if (CorsUtil.isPreflightRequest(request)) {",
      "112:                     setAllowMethods(result.get(), response);",
      "114:                     allowedHeaders.ifPresent(val ->",
      "115:                         setAllowHeaders(val, response)",
      "116:                     );",
      "",
      "[Removed Lines]",
      "111:                     Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class);",
      "113:                     Optional<List> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List.class, String.class));",
      "",
      "[Added Lines]",
      "114:                     Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, CONVERSION_CONTEXT_HTTP_METHOD);",
      "116:                     Optional<List<String>> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.LIST_OF_STRING);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "150:                 List<HttpMethod> allowedMethods = config.getAllowedMethods();",
      "152:                 if (!isAnyMethod(allowedMethods)) {",
      "154:                     if (allowedMethods.stream().noneMatch(method -> method.equals(methodToMatch))) {",
      "155:                         return Optional.of(HttpResponse.status(HttpStatus.FORBIDDEN));",
      "156:                     }",
      "157:                 }",
      "159:                 if (preflight) {",
      "162:                     List<String> allowedHeaders = config.getAllowedHeaders();",
      "",
      "[Removed Lines]",
      "153:                     HttpMethod methodToMatch = preflight ? headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class).orElse(requestMethod) : requestMethod;",
      "160:                     Optional<List<String>> accessControlHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.listOf(String.class));",
      "",
      "[Added Lines]",
      "156:                     HttpMethod methodToMatch = preflight ? headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, CONVERSION_CONTEXT_HTTP_METHOD).orElse(requestMethod) : requestMethod;",
      "163:                     Optional<List<String>> accessControlHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.LIST_OF_STRING);",
      "",
      "---------------"
    ],
    "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java": [
      "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http.server.cors;",
      "18: import io.micronaut.core.convert.ConversionContext;",
      "19: import io.micronaut.core.convert.TypeConverter;",
      "20: import io.micronaut.core.convert.value.ConvertibleValues;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ArgumentConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23: import io.micronaut.http.HttpMethod;",
      "25: import javax.inject.Singleton;",
      "26: import java.util.Map;",
      "27: import java.util.Optional;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import java.util.List;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "43:     private static final String ALLOW_CREDENTIALS = \"allowCredentials\";",
      "44:     private static final String MAX_AGE = \"maxAge\";",
      "46:     @Override",
      "47:     public Optional<CorsOriginConfiguration> convert(Object object, Class<CorsOriginConfiguration> targetType, ConversionContext context) {",
      "48:         CorsOriginConfiguration configuration = new CorsOriginConfiguration();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:     private static final ArgumentConversionContext<List<HttpMethod>> CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD = ConversionContext.of(Argument.listOf(HttpMethod.class));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "51:             ConvertibleValues<Object> convertibleValues = new ConvertibleValuesMap<>(mapConfig);",
      "53:             convertibleValues",
      "55:                 .ifPresent(configuration::setAllowedOrigins);",
      "57:             convertibleValues",
      "59:                 .ifPresent(configuration::setAllowedMethods);",
      "61:             convertibleValues",
      "63:                 .ifPresent(configuration::setAllowedHeaders);",
      "65:             convertibleValues",
      "67:                 .ifPresent(configuration::setExposedHeaders);",
      "69:             convertibleValues",
      "71:                 .ifPresent(configuration::setAllowCredentials);",
      "73:             convertibleValues",
      "75:                 .ifPresent(configuration::setMaxAge);",
      "76:         }",
      "77:         return Optional.of(configuration);",
      "",
      "[Removed Lines]",
      "54:                 .get(ALLOWED_ORIGINS, Argument.listOf(String.class))",
      "58:                 .get(ALLOWED_METHODS, Argument.listOf(HttpMethod.class))",
      "62:                 .get(ALLOWED_HEADERS, Argument.listOf(String.class))",
      "66:                 .get(EXPOSED_HEADERS, Argument.listOf(String.class))",
      "70:                 .get(ALLOW_CREDENTIALS, Boolean.class)",
      "74:                 .get(MAX_AGE, Long.class)",
      "",
      "[Added Lines]",
      "58:                 .get(ALLOWED_ORIGINS, ConversionContext.LIST_OF_STRING)",
      "62:                 .get(ALLOWED_METHODS, CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD)",
      "66:                 .get(ALLOWED_HEADERS, ConversionContext.LIST_OF_STRING)",
      "70:                 .get(EXPOSED_HEADERS, ConversionContext.LIST_OF_STRING)",
      "74:                 .get(ALLOW_CREDENTIALS, ConversionContext.BOOLEAN)",
      "78:                 .get(MAX_AGE, ConversionContext.LONG)",
      "",
      "---------------"
    ],
    "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java": [
      "File: http/src/main/java/io/micronaut/http/HttpHeaders.java -> http/src/main/java/io/micronaut/http/HttpHeaders.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http;",
      "18: import io.micronaut.core.convert.ConversionService;",
      "19: import io.micronaut.core.type.Headers;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "472:     default Optional<Integer> findInt(CharSequence name) {",
      "474:     }",
      "",
      "[Removed Lines]",
      "473:         return get(name, Integer.class);",
      "",
      "[Added Lines]",
      "474:         return get(name, ConversionContext.INT);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "482:     default Optional<String> findFirst(CharSequence name) {",
      "484:     }",
      "",
      "[Removed Lines]",
      "483:         return getFirst(name, String.class);",
      "",
      "[Added Lines]",
      "484:         return getFirst(name, ConversionContext.STRING);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "491:     default Optional<MediaType> contentType() {",
      "493:     }",
      "",
      "[Removed Lines]",
      "492:         return getFirst(HttpHeaders.CONTENT_TYPE, MediaType.class);",
      "",
      "[Added Lines]",
      "493:         return getFirst(HttpHeaders.CONTENT_TYPE, MediaType.CONVERSION_CONTEXT);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "500:     default OptionalLong contentLength() {",
      "502:         return optional.map(OptionalLong::of).orElseGet(OptionalLong::empty);",
      "503:     }",
      "",
      "[Removed Lines]",
      "501:         Optional<Long> optional = getFirst(HttpHeaders.CONTENT_LENGTH, Long.class);",
      "",
      "[Added Lines]",
      "502:         Optional<Long> optional = getFirst(HttpHeaders.CONTENT_LENGTH, ConversionContext.LONG);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "511:         return getAll(HttpHeaders.ACCEPT)",
      "512:             .stream()",
      "513:             .flatMap(x -> Arrays.stream(x.split(\",\")))",
      "515:             .distinct()",
      "516:             .collect(Collectors.toList());",
      "517:     }",
      "",
      "[Removed Lines]",
      "514:             .flatMap(s -> ConversionService.SHARED.convert(s, MediaType.class).map(Stream::of).orElse(Stream.empty()))",
      "",
      "[Added Lines]",
      "515:             .flatMap(s -> ConversionService.SHARED.convert(s, MediaType.CONVERSION_CONTEXT).map(Stream::of).orElse(Stream.empty()))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "522:     default boolean isKeepAlive() {",
      "524:     }",
      "",
      "[Removed Lines]",
      "523:         return getFirst(CONNECTION, String.class).map(val -> val.equalsIgnoreCase(\"keep-alive\")).orElse(false);",
      "",
      "[Added Lines]",
      "524:         return getFirst(CONNECTION, ConversionContext.STRING).map(val -> val.equalsIgnoreCase(\"keep-alive\")).orElse(false);",
      "",
      "---------------"
    ],
    "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java": [
      "File: http/src/main/java/io/micronaut/http/MediaType.java -> http/src/main/java/io/micronaut/http/MediaType.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http;",
      "18: import io.micronaut.core.annotation.TypeHint;",
      "19: import io.micronaut.core.convert.ConversionService;",
      "20: import io.micronaut.core.naming.NameUtils;",
      "21: import io.micronaut.core.util.StringUtils;",
      "22: import io.micronaut.core.value.OptionalValues;",
      "23: import io.micronaut.http.annotation.Produces;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.annotation.Internal;",
      "20: import io.micronaut.core.convert.ArgumentConversionContext;",
      "21: import io.micronaut.core.convert.ConversionContext;",
      "24: import io.micronaut.core.type.Argument;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:     public static final String V_PARAMETER = \"v\";",
      "321:     private static final BigDecimal QUALITY_RATING_NUMBER = new BigDecimal(\"1.0\");",
      "322:     private static final String QUALITY_RATING = \"1.0\";",
      "323:     private static final String SEMICOLON = \";\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325:     @Internal",
      "326:     static final Argument<MediaType> ARGUMENT = Argument.of(MediaType.class);",
      "328:     @Internal",
      "329:     static final ArgumentConversionContext<MediaType> CONVERSION_CONTEXT = ConversionContext.of(ARGUMENT);",
      "",
      "---------------"
    ],
    "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java||runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java": [
      "File: runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java -> runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "259:             Object[] params = resolveParams(context, cacheable.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
      "260:             Object key = keyGenerator.generateKey(context, params);",
      "261:             CompletableFuture<Object> thisFuture = new CompletableFuture<>();",
      "263:             asyncCache.get(key, firstTypeVariable).whenComplete((BiConsumer<Optional<?>, Throwable>) (o, throwable) -> {",
      "264:                 if (throwable == null && o.isPresent()) {",
      "",
      "[Removed Lines]",
      "262:             Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.of(Object.class));",
      "",
      "[Added Lines]",
      "262:             Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "503:         CacheKeyGenerator keyGenerator = resolveKeyGenerator(cacheOperation.defaultKeyGenerator, cacheable);",
      "504:         Object[] params = resolveParams(context, cacheable.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
      "505:         Object key = keyGenerator.generateKey(context, params);",
      "508:         Maybe<Object> maybe = Maybe.create(emitter -> {",
      "509:             asyncCache.get(key, firstTypeVariable).whenComplete((opt, throwable) -> {",
      "",
      "[Removed Lines]",
      "506:         Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.of(Object.class));",
      "",
      "[Added Lines]",
      "506:         Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "",
      "---------------"
    ],
    "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java": [
      "File: runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java -> runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: import io.micronaut.context.condition.Condition;",
      "21: import io.micronaut.context.condition.ConditionContext;",
      "22: import io.micronaut.core.annotation.Introspected;",
      "24: import io.micronaut.core.util.CollectionUtils;",
      "26: import java.io.File;",
      "",
      "[Removed Lines]",
      "23: import io.micronaut.core.type.Argument;",
      "",
      "[Added Lines]",
      "23: import io.micronaut.core.convert.ConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:         if (beanContext instanceof ApplicationContext) {",
      "41:             List<String> paths = ((ApplicationContext) beanContext)",
      "42:                     .getEnvironment()",
      "44:                     .orElse(null);",
      "46:             if (CollectionUtils.isNotEmpty(paths)) {",
      "",
      "[Removed Lines]",
      "43:                     .getProperty(FileWatchConfiguration.PATHS, Argument.listOf(String.class))",
      "",
      "[Added Lines]",
      "43:                     .getProperty(FileWatchConfiguration.PATHS, ConversionContext.LIST_OF_STRING)",
      "",
      "---------------"
    ],
    "session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java||session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java": [
      "File: session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java -> session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: @Requires(classes = HttpServerConfiguration.class)",
      "43: public class SessionArgumentBinder implements TypedRequestArgumentBinder<Session> {",
      "45:     private final SessionStore<Session> sessionStore;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:     private static final Argument<Session> TYPE = Argument.of(Session.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:     @Override",
      "57:     public Argument<Session> argumentType() {",
      "59:     }",
      "61:     @Override",
      "",
      "[Removed Lines]",
      "58:         return Argument.of(Session.class);",
      "",
      "[Added Lines]",
      "60:         return TYPE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b13600fa5010e4fbcaae39b438d7cf58306ca066",
      "candidate_info": {
        "commit_hash": "b13600fa5010e4fbcaae39b438d7cf58306ca066",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/b13600fa5010e4fbcaae39b438d7cf58306ca066",
        "files": [
          "build.gradle",
          "http-client-core/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java",
          "inject-groovy/src/test/groovy/io/micronaut/inject/failures/PropertyDependencyMissingSpec.groovy",
          "inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/DProcessor.java",
          "inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullReturnFactorySpec.groovy",
          "inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullableFactory.java",
          "inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/Test1.java",
          "inject-java/src/test/groovy/io/micronaut/inject/requires/RequiresSpec.groovy",
          "inject-java/src/test/resources/logback.xml",
          "inject/src/main/java/io/micronaut/context/AbstractBeanContextConditional.java",
          "inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java",
          "inject/src/main/java/io/micronaut/context/AbstractParametrizedBeanDefinition.java",
          "inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java",
          "inject/src/main/java/io/micronaut/context/DefaultBeanContext.java",
          "inject/src/main/java/io/micronaut/context/DefaultConditionContext.java",
          "inject/src/main/java/io/micronaut/context/RequiresCondition.java",
          "inject/src/main/java/io/micronaut/context/condition/ConditionContext.java",
          "inject/src/main/java/io/micronaut/context/exceptions/DisabledBeanException.java",
          "inject/src/main/java/io/micronaut/inject/ArgumentBeanType.java",
          "inject/src/main/java/io/micronaut/inject/BeanContextConditional.java",
          "inject/src/main/java/io/micronaut/inject/DelegatingBeanDefinition.java",
          "inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java",
          "runtime/src/main/java/io/micronaut/health/HeartbeatDiscoveryClientCondition.java",
          "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
          "runtime/src/test/groovy/io/micronaut/health/HeartbeatDiscoveryClientConditionSpec.groovy",
          "src/main/docs/guide/appendix/breaks.adoc",
          "src/main/docs/guide/ioc/factories.adoc",
          "test-suite-groovy/src/test/groovy/io/micronaut/docs/factories/nullable/EngineFactory.groovy",
          "test-suite-kotlin/src/test/kotlin/io/micronaut/docs/factories/nullable/EngineFactory.kt",
          "test-suite/src/test/java/io/micronaut/docs/factories/nullable/EngineFactory.java"
        ],
        "message": "Introduce DisabledBeanException, pass resolution context within conditions (#3387)\n\n* Introduce DisabledBeanException, pass resolution context within conditions\n\n* Checkstyle\n\n* Rethrow DisabledBeanException if bean is iterable",
        "before_after_code_files": [
          "build.gradle||build.gradle",
          "http-client-core/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java||http-client-core/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java",
          "inject-groovy/src/test/groovy/io/micronaut/inject/failures/PropertyDependencyMissingSpec.groovy||inject-groovy/src/test/groovy/io/micronaut/inject/failures/PropertyDependencyMissingSpec.groovy",
          "inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/DProcessor.java||inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/DProcessor.java",
          "inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullReturnFactorySpec.groovy||inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullReturnFactorySpec.groovy",
          "inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullableFactory.java||inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullableFactory.java",
          "inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/Test1.java||inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/Test1.java",
          "inject-java/src/test/groovy/io/micronaut/inject/requires/RequiresSpec.groovy||inject-java/src/test/groovy/io/micronaut/inject/requires/RequiresSpec.groovy",
          "inject/src/main/java/io/micronaut/context/AbstractBeanContextConditional.java||inject/src/main/java/io/micronaut/context/AbstractBeanContextConditional.java",
          "inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java||inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java",
          "inject/src/main/java/io/micronaut/context/AbstractParametrizedBeanDefinition.java||inject/src/main/java/io/micronaut/context/AbstractParametrizedBeanDefinition.java",
          "inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java||inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java",
          "inject/src/main/java/io/micronaut/context/DefaultBeanContext.java||inject/src/main/java/io/micronaut/context/DefaultBeanContext.java",
          "inject/src/main/java/io/micronaut/context/DefaultConditionContext.java||inject/src/main/java/io/micronaut/context/DefaultConditionContext.java",
          "inject/src/main/java/io/micronaut/context/RequiresCondition.java||inject/src/main/java/io/micronaut/context/RequiresCondition.java",
          "inject/src/main/java/io/micronaut/context/condition/ConditionContext.java||inject/src/main/java/io/micronaut/context/condition/ConditionContext.java",
          "inject/src/main/java/io/micronaut/context/exceptions/DisabledBeanException.java||inject/src/main/java/io/micronaut/context/exceptions/DisabledBeanException.java",
          "inject/src/main/java/io/micronaut/inject/ArgumentBeanType.java||inject/src/main/java/io/micronaut/inject/ArgumentBeanType.java",
          "inject/src/main/java/io/micronaut/inject/BeanContextConditional.java||inject/src/main/java/io/micronaut/inject/BeanContextConditional.java",
          "inject/src/main/java/io/micronaut/inject/DelegatingBeanDefinition.java||inject/src/main/java/io/micronaut/inject/DelegatingBeanDefinition.java",
          "inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java||inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java",
          "runtime/src/main/java/io/micronaut/health/HeartbeatDiscoveryClientCondition.java||runtime/src/main/java/io/micronaut/health/HeartbeatDiscoveryClientCondition.java",
          "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
          "runtime/src/test/groovy/io/micronaut/health/HeartbeatDiscoveryClientConditionSpec.groovy||runtime/src/test/groovy/io/micronaut/health/HeartbeatDiscoveryClientConditionSpec.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java"
          ],
          "candidate": [
            "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java"
          ]
        }
      },
      "candidate_diff": {
        "build.gradle||build.gradle": [
          "File: build.gradle -> build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "689:     group projectGroupId",
          "691:     repositories {",
          "693:         maven { url \"https://repo.grails.org/grails/core\" }",
          "694:     }",
          "",
          "[Removed Lines]",
          "692:         mavenLocal()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "http-client-core/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java||http-client-core/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java": [
          "File: http-client-core/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java -> http-client-core/src/main/java/io/micronaut/http/client/ServiceHttpClientFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import io.micronaut.context.annotation.*;",
          "19: import io.micronaut.context.event.ApplicationEventListener;",
          "20: import io.micronaut.core.annotation.Internal;",
          "21: import io.micronaut.core.io.buffer.ByteBuffer;",
          "22: import io.micronaut.discovery.StaticServiceInstanceList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import io.micronaut.context.exceptions.DisabledBeanException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:                     }));",
          "122:             };",
          "123:         }",
          "125:     }",
          "127: }",
          "",
          "[Removed Lines]",
          "124:         return null;",
          "",
          "[Added Lines]",
          "125:         throw new DisabledBeanException(\"HTTP Client Health Check not enabled\");",
          "",
          "---------------"
        ],
        "inject-groovy/src/test/groovy/io/micronaut/inject/failures/PropertyDependencyMissingSpec.groovy||inject-groovy/src/test/groovy/io/micronaut/inject/failures/PropertyDependencyMissingSpec.groovy": [
          "File: inject-groovy/src/test/groovy/io/micronaut/inject/failures/PropertyDependencyMissingSpec.groovy -> inject-groovy/src/test/groovy/io/micronaut/inject/failures/PropertyDependencyMissingSpec.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         then:\"The correct error is thrown\"",
          "40:         def e = thrown(DependencyInjectionException)",
          "41:         e.message.normalize() == '''\\",
          "44: Path Taken: B.setA([A a])'''",
          "45:     }",
          "",
          "[Removed Lines]",
          "42: Failed to inject value for parameter [a] of method [setA] of class: io.micronaut.inject.failures.PropertyDependencyMissingSpec$B",
          "",
          "[Added Lines]",
          "42: Failed to inject value for parameter [a] of class: io.micronaut.inject.failures.PropertyDependencyMissingSpec$B",
          "44: Message: No bean of type [io.micronaut.inject.failures.PropertyDependencyMissingSpec$A] exists. Make sure the bean is not disabled by bean requirements (enable trace logging for 'io.micronaut.context.condition' to check) and if the bean is enabled then ensure the class is declared a bean and annotation processing is enabled (for Java and Kotlin the 'micronaut-inject-java' dependency should be configured as an annotation processor).",
          "",
          "---------------"
        ],
        "inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/DProcessor.java||inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/DProcessor.java": [
          "File: inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/DProcessor.java -> inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/DProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.inject.factory.nullreturn;",
          "18: import io.micronaut.context.annotation.EachBean;",
          "20: import java.util.concurrent.atomic.AtomicInteger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import edu.umd.cs.findbugs.annotations.Nullable;",
          "20: import io.micronaut.context.exceptions.DisabledBeanException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:     private final D d;",
          "30:         this.d = d;",
          "31:         constructed.incrementAndGet();",
          "32:     }",
          "",
          "[Removed Lines]",
          "29:     DProcessor(D d) {",
          "",
          "[Added Lines]",
          "31:     DProcessor(@Nullable D d) {",
          "32:         if (d == null) {",
          "33:             throw new DisabledBeanException(\"Null D\");",
          "34:         }",
          "",
          "---------------"
        ],
        "inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullReturnFactorySpec.groovy||inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullReturnFactorySpec.groovy": [
          "File: inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullReturnFactorySpec.groovy -> inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullReturnFactorySpec.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:         cs.size() == 2",
          "84:         cs.any { it.name == \"one\" }",
          "85:         cs.any { it.name == \"two\" }",
          "89:         expect: \"1 is created for D\"",
          "90:         beanContext.getBeansOfType(D).size() == 1",
          "91:         beanContext.getBean(D, Qualifiers.byName(\"one\"))",
          "94:         factory.dCalls == 2 //2 C beans",
          "96:         and: \"1 is created for D2\"",
          "97:         beanContext.getBeansOfType(D2).size() == 1",
          "98:         beanContext.getBean(D2, Qualifiers.byName(\"one\"))",
          "103:         when: \"E injects F which returns null\"",
          "104:         beanContext.getBean(E, Qualifiers.byName(\"one\"))",
          "106:         then: \"only the each bean argument is handled for not found\"",
          "110:         when:",
          "111:         beanContext.getBean(F)",
          "",
          "[Removed Lines]",
          "86:         factory.bCalls == 4",
          "87:         factory.cCalls == 3 //3 B beans",
          "92:         factory.bCalls == 4",
          "93:         factory.cCalls == 3",
          "99:         factory.bCalls == 4",
          "100:         factory.cCalls == 3",
          "101:         factory.d2Calls == 4 //Called for 2 C beans and 2 null C beans",
          "107:         def ex = thrown(DependencyInjectionException)",
          "108:         ex.message.contains(\"Failed to inject value for parameter [f] of class: io.micronaut.inject.factory.nullreturn.E\")",
          "",
          "[Added Lines]",
          "86:         factory.bCalls == 5",
          "87:         factory.cCalls == 3",
          "92:         factory.bCalls == 6",
          "93:         factory.cCalls == 4",
          "99:         factory.bCalls == 7",
          "100:         factory.cCalls == 5",
          "101:         factory.d2Calls == 2 //Called for 2 C beans and 2 null C beans",
          "107:         thrown(NoSuchBeanException)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:         beanContext.getBeansOfType(D).size() == 1",
          "133:         beanContext.getBeansOfType(C).size() == 2",
          "134:         beanContext.getBeansOfType(B).size() == 3",
          "137:         factory.dCalls == 2",
          "139:         cleanup:",
          "",
          "[Removed Lines]",
          "135:         factory.bCalls == 4",
          "136:         factory.cCalls == 3",
          "",
          "[Added Lines]",
          "134:         factory.bCalls == 6",
          "135:         factory.cCalls == 4",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:         DProcessor.constructed.get() == 1",
          "150:         beanContext.getBeansOfType(ParameterDProcessor).size() == 1",
          "151:         ParameterDProcessor.constructed.get() == 1",
          "155:         when:",
          "156:         beanContext.getBean(DProcessor, Qualifiers.byName(\"one\"))",
          "",
          "[Removed Lines]",
          "152:         beanContext.getBeansOfType(NullableDProcessor).size() == 4",
          "153:         NullableDProcessor.constructed.get() == 4 //3 null D beans and 1 D bean",
          "",
          "[Added Lines]",
          "151:         beanContext.getBeansOfType(NullableDProcessor).size() == 1",
          "152:         NullableDProcessor.constructed.get() == 1 //3 null D beans and 1 D bean",
          "",
          "---------------"
        ],
        "inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullableFactory.java||inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullableFactory.java": [
          "File: inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullableFactory.java -> inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/NullableFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.inject.factory.nullreturn;",
          "23: import edu.umd.cs.findbugs.annotations.Nullable;",
          "24: import javax.inject.Named;",
          "25: import javax.inject.Singleton;",
          "",
          "[Removed Lines]",
          "18: import io.micronaut.context.annotation.EachBean;",
          "19: import io.micronaut.context.annotation.Factory;",
          "20: import io.micronaut.context.annotation.Parameter;",
          "21: import io.micronaut.context.annotation.Prototype;",
          "",
          "[Added Lines]",
          "18: import io.micronaut.context.annotation.*;",
          "21: import io.micronaut.context.condition.Condition;",
          "22: import io.micronaut.context.condition.ConditionContext;",
          "23: import io.micronaut.context.exceptions.DisabledBeanException;",
          "24: import io.micronaut.core.annotation.AnnotationMetadataProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:     @Named(\"four\")",
          "64:     B getBFour() {",
          "65:         bCalls++;",
          "67:     }",
          "69:     @EachBean(B.class)",
          "70:     C getC(B b) {",
          "71:         cCalls++;",
          "74:         } else {",
          "75:             return new C(b.name);",
          "76:         }",
          "",
          "[Removed Lines]",
          "66:         return null;",
          "72:         if (b.name.equals(\"three\")) {",
          "73:             return null;",
          "",
          "[Added Lines]",
          "68:         throw new DisabledBeanException(\"Named four\");",
          "74:         if (b == null || b.name.equals(\"three\")) {",
          "75:             throw new DisabledBeanException(\"Named three\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:     @EachBean(C.class)",
          "80:     D getD(C c) {",
          "81:         dCalls++;",
          "84:         } else {",
          "85:             return new D();",
          "86:         }",
          "",
          "[Removed Lines]",
          "82:         if (c.name.equals(\"two\")) {",
          "83:             return null;",
          "",
          "[Added Lines]",
          "84:         if (c == null || c.name.equals(\"two\")) {",
          "85:             throw new DisabledBeanException(\"Named two\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:     D2 getD2(@Nullable C c) {",
          "91:         d2Calls++;",
          "92:         if (c == null) {",
          "94:         }",
          "95:         if (c.name.equals(\"two\")) {",
          "97:         } else {",
          "98:             return new D2();",
          "99:         }",
          "",
          "[Removed Lines]",
          "93:             return null;",
          "96:             return null;",
          "",
          "[Added Lines]",
          "95:             throw new DisabledBeanException(\"Null C\");",
          "98:             throw new DisabledBeanException(\"Named two\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "103:     D3 getD3(@Parameter C c) {",
          "104:         d3Calls++;",
          "105:         if (c.name.equals(\"two\")) {",
          "107:         } else {",
          "108:             return new D3();",
          "109:         }",
          "",
          "[Removed Lines]",
          "106:             return null;",
          "",
          "[Added Lines]",
          "108:             throw new DisabledBeanException(\"Named two\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "117:     @Singleton",
          "118:     F getF() {",
          "120:     }",
          "",
          "[Removed Lines]",
          "119:         return null;",
          "",
          "[Added Lines]",
          "121:         throw new DisabledBeanException(\"Not active\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "141: class D2 {}",
          "142: class D3 {}",
          "143: class E {}",
          "",
          "[Removed Lines]",
          "144: class F {}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/Test1.java||inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/Test1.java": [
          "File: inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/Test1.java -> inject-java/src/test/groovy/io/micronaut/inject/factory/nullreturn/Test1.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "inject-java/src/test/groovy/io/micronaut/inject/requires/RequiresSpec.groovy||inject-java/src/test/groovy/io/micronaut/inject/requires/RequiresSpec.groovy": [
          "File: inject-java/src/test/groovy/io/micronaut/inject/requires/RequiresSpec.groovy -> inject-java/src/test/groovy/io/micronaut/inject/requires/RequiresSpec.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: ''')",
          "71:         then:",
          "73:     }",
          "75:     void \"test requires classes with classes not present\"() {",
          "",
          "[Removed Lines]",
          "72:         beanDefinition.isEnabled(Mock(BeanContext))",
          "",
          "[Added Lines]",
          "72:         beanDefinition.isEnabled(new DefaultBeanContext())",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/context/AbstractBeanContextConditional.java||inject/src/main/java/io/micronaut/context/AbstractBeanContextConditional.java": [
          "File: inject/src/main/java/io/micronaut/context/AbstractBeanContextConditional.java -> inject/src/main/java/io/micronaut/context/AbstractBeanContextConditional.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.context;",
          "18: import io.micronaut.context.annotation.Requires;",
          "19: import io.micronaut.context.condition.Condition;",
          "20: import io.micronaut.context.condition.Failure;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import edu.umd.cs.findbugs.annotations.Nullable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     static final Logger LOG = LoggerFactory.getLogger(Condition.class);",
          "42:     @Override",
          "44:         AnnotationMetadata annotationMetadata = getAnnotationMetadata();",
          "45:         Condition condition = annotationMetadata.hasStereotype(Requires.class) ? new RequiresCondition(annotationMetadata) : null;",
          "47:         boolean enabled = condition == null || condition.matches(conditionContext);",
          "48:         if (LOG.isDebugEnabled() && !enabled) {",
          "49:             if (this instanceof BeanConfiguration) {",
          "",
          "[Removed Lines]",
          "43:     public boolean isEnabled(@NonNull BeanContext context) {",
          "46:         DefaultConditionContext<AbstractBeanContextConditional> conditionContext = new DefaultConditionContext<>(context, this);",
          "",
          "[Added Lines]",
          "44:     public boolean isEnabled(@NonNull BeanContext context, @Nullable BeanResolutionContext resolutionContext) {",
          "47:         DefaultConditionContext<AbstractBeanContextConditional> conditionContext = new DefaultConditionContext<>(",
          "48:                 (DefaultBeanContext) context,",
          "49:                 this, resolutionContext);",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java||inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java": [
          "File: inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java -> inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import io.micronaut.context.env.Environment;",
          "36: import io.micronaut.context.event.BeanInitializedEventListener;",
          "37: import io.micronaut.context.event.BeanInitializingEvent;",
          "42: import io.micronaut.core.annotation.AnnotationMetadata;",
          "43: import io.micronaut.core.annotation.Internal;",
          "44: import io.micronaut.core.annotation.UsedByGeneratedCode;",
          "",
          "[Removed Lines]",
          "38: import io.micronaut.context.exceptions.BeanContextException;",
          "39: import io.micronaut.context.exceptions.BeanInstantiationException;",
          "40: import io.micronaut.context.exceptions.DependencyInjectionException;",
          "41: import io.micronaut.context.exceptions.NoSuchBeanException;",
          "",
          "[Added Lines]",
          "38: import io.micronaut.context.exceptions.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:                                      boolean requiresReflection,",
          "174:                                      Argument... arguments) {",
          "177:         this.type = type;",
          "178:         this.isAbstract = Modifier.isAbstract(this.type.getModifiers());",
          "179:         this.declaringType = type;",
          "",
          "[Removed Lines]",
          "176:         AnnotationMetadata beanAnnotationMetadata = getAnnotationMetadata();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1040:                     }",
          "1041:                     path.pop();",
          "1042:                     return bean;",
          "1043:                 } catch (NoSuchBeanException e) {",
          "1044:                     if (isNullable) {",
          "1045:                         path.pop();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1039:                 } catch (DisabledBeanException e) {",
          "1040:                     if (AbstractBeanContextConditional.LOG.isDebugEnabled()) {",
          "1041:                         AbstractBeanContextConditional.LOG.debug(\"Bean of type [{}] disabled for reason: {}\", argumentType.getSimpleName(), e.getMessage());",
          "1042:                     }",
          "1043:                     if (isIterable() && getAnnotationMetadata().hasDeclaredAnnotation(EachBean.class)) {",
          "1044:                         throw new DisabledBeanException(\"Bean [\" + getBeanType().getSimpleName() + \"] disabled by parent: \" + e.getMessage());",
          "1045:                     } else {",
          "1046:                         if (isNullable) {",
          "1047:                             path.pop();",
          "1048:                             return null;",
          "1049:                         }",
          "1050:                         throw new DependencyInjectionException(resolutionContext, argument, e);",
          "1051:                     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1456:                 @SuppressWarnings(\"unchecked\") Object bean = ((DefaultBeanContext) context).getBean(resolutionContext, beanType, qualifier);",
          "1457:                 path.pop();",
          "1458:                 return bean;",
          "1459:             } catch (NoSuchBeanException e) {",
          "1460:                 if (injectionPoint.isDeclaredNullable()) {",
          "1461:                     path.pop();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1468:             } catch (DisabledBeanException e) {",
          "1469:                 if (AbstractBeanContextConditional.LOG.isDebugEnabled()) {",
          "1470:                     AbstractBeanContextConditional.LOG.debug(\"Bean of type [{}] disabled for reason: {}\", beanType.getSimpleName(), e.getMessage());",
          "1471:                 }",
          "1472:                 if (isIterable() && getAnnotationMetadata().hasDeclaredAnnotation(EachBean.class)) {",
          "1473:                     throw new DisabledBeanException(\"Bean [\" + getBeanType().getSimpleName() + \"] disabled by parent: \" + e.getMessage());",
          "1474:                 } else {",
          "1475:                     if (injectionPoint.isDeclaredNullable()) {",
          "1476:                         path.pop();",
          "1477:                         return null;",
          "1478:                     }",
          "1479:                     throw new DependencyInjectionException(resolutionContext, injectionPoint, e);",
          "1480:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1634:                 Object bean = ((DefaultBeanContext) context).getBean(resolutionContext, argumentType, qualifier);",
          "1635:                 path.pop();",
          "1636:                 return bean;",
          "1637:             } catch (NoSuchBeanException e) {",
          "1638:                 if (argument.isDeclaredNullable()) {",
          "1639:                     path.pop();",
          "1640:                     return null;",
          "1641:                 }",
          "1643:             }",
          "1644:         }",
          "1645:     }",
          "",
          "[Removed Lines]",
          "1642:                 throw new DependencyInjectionException(resolutionContext, injectionPoint, argument, e);",
          "",
          "[Added Lines]",
          "1659:             } catch (DisabledBeanException e) {",
          "1660:                 if (AbstractBeanContextConditional.LOG.isDebugEnabled()) {",
          "1661:                     AbstractBeanContextConditional.LOG.debug(\"Bean of type [{}] disabled for reason: {}\", argumentType.getSimpleName(), e.getMessage());",
          "1662:                 }",
          "1663:                 if (isIterable() && getAnnotationMetadata().hasDeclaredAnnotation(EachBean.class)) {",
          "1664:                     throw new DisabledBeanException(\"Bean [\" + getBeanType().getSimpleName() + \"] disabled by parent: \" + e.getMessage());",
          "1665:                 } else {",
          "1666:                     if (argument.isDeclaredNullable()) {",
          "1667:                         path.pop();",
          "1668:                         return null;",
          "1669:                     }",
          "1670:                     throw new DependencyInjectionException(resolutionContext, argument, e);",
          "1671:                 }",
          "1677:                 throw new DependencyInjectionException(resolutionContext, argument, e);",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/context/AbstractParametrizedBeanDefinition.java||inject/src/main/java/io/micronaut/context/AbstractParametrizedBeanDefinition.java": [
          "File: inject/src/main/java/io/micronaut/context/AbstractParametrizedBeanDefinition.java -> inject/src/main/java/io/micronaut/context/AbstractParametrizedBeanDefinition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import io.micronaut.context.annotation.EachBean;",
          "19: import io.micronaut.context.annotation.Parameter;",
          "20: import io.micronaut.context.exceptions.BeanInstantiationException;",
          "21: import io.micronaut.core.annotation.AnnotationMetadata;",
          "22: import io.micronaut.core.annotation.Internal;",
          "23: import io.micronaut.core.convert.ConversionContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import io.micronaut.context.exceptions.DisabledBeanException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:                 String argumentName = requiredArgument.getName();",
          "99:                 if (!requiredArgumentValues.containsKey(argumentName) && !requiredArgument.isNullable()) {",
          "100:                     if (eachBeanType.filter(type -> type == requiredArgument.getType()).isPresent()) {",
          "102:                     }",
          "103:                     throw new BeanInstantiationException(resolutionContext, \"Missing bean argument value: \" + argumentName);",
          "104:                 }",
          "",
          "[Removed Lines]",
          "101:                         return null;",
          "",
          "[Added Lines]",
          "102:                         throw new DisabledBeanException(\"@EachBean parameter disabled for argument: \" + requiredArgument.getName());",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java||inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java": [
          "File: inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java -> inject/src/main/java/io/micronaut/context/DefaultApplicationContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:     }",
          "223:     @Override",
          "227:     }",
          "229:     @Override",
          "231:         if (!candidates.isEmpty()) {",
          "233:             List<BeanDefinition<T>> transformedCandidates = new ArrayList<>();",
          "",
          "[Removed Lines]",
          "224:     protected <T> Collection<BeanDefinition<T>> findBeanCandidates(Class<T> beanType, BeanDefinition<?> filter, boolean filterProxied) {",
          "225:         Collection<BeanDefinition<T>> candidates = super.findBeanCandidates(beanType, filter, filterProxied);",
          "226:         return transformIterables(candidates, filterProxied);",
          "230:     protected <T> Collection<BeanDefinition<T>> transformIterables(Collection<BeanDefinition<T>> candidates, boolean filterProxied) {",
          "",
          "[Added Lines]",
          "224:     protected <T> Collection<BeanDefinition<T>> findBeanCandidates(BeanResolutionContext resolutionContext, Class<T> beanType, BeanDefinition<?> filter, boolean filterProxied) {",
          "225:         Collection<BeanDefinition<T>> candidates = super.findBeanCandidates(resolutionContext, beanType, filter, filterProxied);",
          "226:         return transformIterables(resolutionContext, candidates, filterProxied);",
          "230:     protected <T> Collection<BeanDefinition<T>> transformIterables(BeanResolutionContext resolutionContext, Collection<BeanDefinition<T>> candidates, boolean filterProxied) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:                                         delegate.put(\"Array\", index);",
          "255:                                         delegate.put(Named.class.getName(), index);",
          "258:                                             transformedCandidates.add(delegate);",
          "259:                                         }",
          "260:                                     }",
          "",
          "[Removed Lines]",
          "257:                                         if (delegate.isEnabled(this)) {",
          "",
          "[Added Lines]",
          "257:                                         if (delegate.isEnabled(this, resolutionContext)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "271:                                     delegate.put(EachProperty.class.getName(), delegate.getBeanType());",
          "272:                                     delegate.put(Named.class.getName(), key);",
          "275:                                         transformedCandidates.add(delegate);",
          "276:                                     }",
          "277:                                 }",
          "",
          "[Removed Lines]",
          "274:                                     if (delegate.isEnabled(this)) {",
          "",
          "[Added Lines]",
          "274:                                     if (delegate.isEnabled(this, resolutionContext)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "287:                         continue;",
          "288:                     }",
          "291:                     if (!dependentCandidates.isEmpty()) {",
          "292:                         for (BeanDefinition dependentCandidate : dependentCandidates) {",
          "",
          "[Removed Lines]",
          "290:                     Collection<BeanDefinition> dependentCandidates = findBeanCandidates(dependentType, null, filterProxied);",
          "",
          "[Added Lines]",
          "290:                     Collection<BeanDefinition> dependentCandidates = findBeanCandidates(resolutionContext, dependentType, null, filterProxied);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "325:                                     if (qualifier instanceof Named) {",
          "326:                                         delegate.put(Named.class.getName(), ((Named) qualifier).getName());",
          "327:                                     }",
          "329:                                         transformedCandidates.add((BeanDefinition<T>) delegate);",
          "330:                                     }",
          "331:                                 }",
          "",
          "[Removed Lines]",
          "328:                                     if (delegate.isEnabled(this)) {",
          "",
          "[Added Lines]",
          "328:                                     if (delegate.isEnabled(this, resolutionContext)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "359:                                                     delegate.put(\"Array\", index);",
          "360:                                                     delegate.put(Named.class.getName(), index);",
          "363:                                                             containsProperties(prefix.replace(\"*\", index))) {",
          "364:                                                         transformedCandidates.add(delegate);",
          "365:                                                     }",
          "",
          "[Removed Lines]",
          "362:                                                     if (delegate.isEnabled(this) &&",
          "",
          "[Added Lines]",
          "362:                                                     if (delegate.isEnabled(this, resolutionContext) &&",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "375:                                                 delegate.put(EachProperty.class.getName(), delegate.getBeanType());",
          "376:                                                 delegate.put(Named.class.getName(), key.toString());",
          "379:                                                         containsProperties(prefix.replace(\"*\", key.toString()))) {",
          "380:                                                     transformedCandidates.add(delegate);",
          "381:                                                 }",
          "",
          "[Removed Lines]",
          "378:                                                 if (delegate.isEnabled(this) &&",
          "",
          "[Added Lines]",
          "378:                                                 if (delegate.isEnabled(this, resolutionContext) &&",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/context/DefaultBeanContext.java||inject/src/main/java/io/micronaut/context/DefaultBeanContext.java": [
          "File: inject/src/main/java/io/micronaut/context/DefaultBeanContext.java -> inject/src/main/java/io/micronaut/context/DefaultBeanContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:         this.customScopeRegistry = new DefaultCustomScopeRegistry(this, classLoader);",
          "202:         Set<Class<? extends Annotation>> eagerInitAnnotated = contextConfiguration.getEagerInitAnnotated();",
          "203:         this.eagerInitStereotypes = eagerInitAnnotated",
          "205:         this.eagerInitStereotypesPresent = eagerInitStereotypes.length > 0;",
          "206:         this.eagerInitSingletons = eagerInitStereotypesPresent && eagerInitAnnotated.contains(Singleton.class);",
          "207:     }",
          "",
          "[Removed Lines]",
          "204:             .stream().map(Class::getName).toArray(String[]::new);",
          "",
          "[Added Lines]",
          "204:                 .stream().map(Class::getName).toArray(String[]::new);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:         if (type == null) {",
          "315:             return AnnotationMetadata.EMPTY_METADATA;",
          "316:         } else {",
          "318:             return candidate.map(AnnotationMetadataProvider::getAnnotationMetadata).orElse(AnnotationMetadata.EMPTY_METADATA);",
          "319:         }",
          "320:     }",
          "",
          "[Removed Lines]",
          "317:             Optional<? extends BeanDefinition<?>> candidate = findConcreteCandidate(type, null, false, false);",
          "",
          "[Added Lines]",
          "317:             Optional<? extends BeanDefinition<?>> candidate = findConcreteCandidate(null, type, null, false, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "556:             initializedObjectsByType.clear();",
          "557:             beanCandidateCache.remove(type);",
          "559:             if (beanDefinition != null && beanDefinition.getBeanType().isInstance(singleton)) {",
          "560:                 try (BeanResolutionContext context = newResolutionContext(beanDefinition, null)) {",
          "561:                     doInject(context, singleton, beanDefinition);",
          "",
          "[Removed Lines]",
          "558:             BeanDefinition<T> beanDefinition = inject ? findConcreteCandidate(type, qualifier, false, false).orElse(null) : null;",
          "",
          "[Added Lines]",
          "558:             BeanDefinition<T> beanDefinition = inject ? findConcreteCandidate(null, type, qualifier, false, false).orElse(null) : null;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "663:         if (reg != null) {",
          "664:             return Optional.of(reg.getBeanDefinition());",
          "665:         }",
          "667:         if (qualifier != null) {",
          "668:             beanCandidates = qualifier.reduce(beanType, beanCandidates.stream()).collect(Collectors.toList());",
          "669:         }",
          "",
          "[Removed Lines]",
          "666:         Collection<BeanDefinition<T>> beanCandidates = new ArrayList<>(findBeanCandidatesInternal(beanType));",
          "",
          "[Added Lines]",
          "666:         Collection<BeanDefinition<T>> beanCandidates = new ArrayList<>(findBeanCandidatesInternal(null, beanType));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "674:             if (beanCandidates.size() == 1) {",
          "675:                 return Optional.of(beanCandidates.iterator().next());",
          "676:             } else {",
          "678:             }",
          "679:         }",
          "680:     }",
          "682:     @Override",
          "683:     public <T> Collection<BeanDefinition<T>> getBeanDefinitions(Class<T> beanType) {",
          "685:         return Collections.unmodifiableCollection(candidates);",
          "686:     }",
          "688:     @Override",
          "689:     public <T> Collection<BeanDefinition<T>> getBeanDefinitions(Class<T> beanType, Qualifier<T> qualifier) {",
          "691:         if (qualifier != null) {",
          "692:             candidates = qualifier.reduce(beanType, new ArrayList<>(candidates).stream()).collect(Collectors.toList());",
          "693:         }",
          "",
          "[Removed Lines]",
          "677:                 return findConcreteCandidate(beanType, null, false, true);",
          "684:         Collection<BeanDefinition<T>> candidates = findBeanCandidatesInternal(beanType);",
          "690:         Collection<BeanDefinition<T>> candidates = findBeanCandidatesInternal(beanType);",
          "",
          "[Added Lines]",
          "677:                 return findConcreteCandidate(null, beanType, null, false, true);",
          "684:         Collection<BeanDefinition<T>> candidates = findBeanCandidatesInternal(null, beanType);",
          "690:         Collection<BeanDefinition<T>> candidates = findBeanCandidatesInternal(null, beanType);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "712:     @Override",
          "713:     public <T> T getBean(Class<T> beanType, Qualifier<T> qualifier) {",
          "715:     }",
          "717:     @Override",
          "718:     public <T> T getBean(Class<T> beanType) {",
          "720:     }",
          "722:     @Override",
          "",
          "[Removed Lines]",
          "714:         return getBeanInternal(null, beanType, qualifier, true, true);",
          "719:         return getBeanInternal(null, beanType, null, true, true);",
          "",
          "[Added Lines]",
          "714:         try {",
          "715:             return getBeanInternal(null, beanType, qualifier, true, true);",
          "716:         } catch (DisabledBeanException e) {",
          "717:             if (AbstractBeanContextConditional.LOG.isDebugEnabled()) {",
          "718:                 AbstractBeanContextConditional.LOG.debug(\"Bean of type [{}] disabled for reason: {}\", beanType.getSimpleName(), e.getMessage());",
          "719:             }",
          "720:             throw new NoSuchBeanException(beanType, qualifier);",
          "721:         }",
          "726:         try {",
          "727:             return getBeanInternal(null, beanType, null, true, true);",
          "728:         } catch (DisabledBeanException e) {",
          "729:             if (AbstractBeanContextConditional.LOG.isDebugEnabled()) {",
          "730:                 AbstractBeanContextConditional.LOG.debug(\"Bean of type [{}] disabled for reason: {}\", beanType.getSimpleName(), e.getMessage());",
          "731:             }",
          "732:             throw new NoSuchBeanException(beanType, null);",
          "733:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "791:     <T> T createBean(@NonNull Class<T> beanType, @Nullable Qualifier<T> qualifier, @Nullable Map<String, Object> argumentValues) {",
          "792:         ArgumentUtils.requireNonNull(\"beanType\", beanType);",
          "795:         if (candidate.isPresent()) {",
          "796:             try (BeanResolutionContext resolutionContext = newResolutionContext(candidate.get(), null)) {",
          "797:                 T createdBean = doCreateBean(resolutionContext, candidate.get(), qualifier, false, argumentValues);",
          "",
          "[Removed Lines]",
          "794:         Optional<BeanDefinition<T>> candidate = findConcreteCandidate(beanType, qualifier, true, false);",
          "",
          "[Added Lines]",
          "808:         Optional<BeanDefinition<T>> candidate = findConcreteCandidate(null, beanType, qualifier, true, false);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "808:     public @NonNull",
          "809:     <T> T createBean(@NonNull Class<T> beanType, @Nullable Qualifier<T> qualifier, @Nullable Object... args) {",
          "810:         ArgumentUtils.requireNonNull(\"beanType\", beanType);",
          "812:         if (candidate.isPresent()) {",
          "813:             BeanDefinition<T> definition = candidate.get();",
          "814:             try (BeanResolutionContext resolutionContext = newResolutionContext(definition, null)) {",
          "",
          "[Removed Lines]",
          "811:         Optional<BeanDefinition<T>> candidate = findConcreteCandidate(beanType, qualifier, true, false);",
          "",
          "[Added Lines]",
          "825:         Optional<BeanDefinition<T>> candidate = findConcreteCandidate(null, beanType, qualifier, true, false);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "916:         }",
          "918:         if (bean != null) {",
          "920:             T finalBean = bean;",
          "921:             concreteCandidate.ifPresent(definition -> {",
          "922:                         if (definition instanceof DisposableBeanDefinition) {",
          "",
          "[Removed Lines]",
          "919:             Optional<BeanDefinition<T>> concreteCandidate = findConcreteCandidate(beanType, null, false, true);",
          "",
          "[Added Lines]",
          "933:             Optional<BeanDefinition<T>> concreteCandidate = findConcreteCandidate(null, beanType, null, false, true);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "957:     <T> T createBean(@Nullable BeanResolutionContext resolutionContext, @NonNull Class<T> beanType, @Nullable Qualifier<T> qualifier) {",
          "958:         ArgumentUtils.requireNonNull(\"beanType\", beanType);",
          "961:         if (concreteCandidate.isPresent()) {",
          "962:             BeanDefinition<T> candidate = concreteCandidate.get();",
          "963:             try (BeanResolutionContext context = newResolutionContext(candidate, resolutionContext)) {",
          "",
          "[Removed Lines]",
          "960:         Optional<BeanDefinition<T>> concreteCandidate = findConcreteCandidate(beanType, qualifier, true, false);",
          "",
          "[Added Lines]",
          "974:         Optional<BeanDefinition<T>> concreteCandidate = findConcreteCandidate(resolutionContext, beanType, qualifier, true, false);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "983:     protected @NonNull",
          "984:     <T> T inject(@NonNull BeanResolutionContext resolutionContext, @Nullable BeanDefinition requestingBeanDefinition, @NonNull T instance) {",
          "985:         @SuppressWarnings(\"unchecked\") Class<T> beanType = (Class<T>) instance.getClass();",
          "987:         if (concreteCandidate.isPresent()) {",
          "988:             BeanDefinition definition = concreteCandidate.get();",
          "989:             if (requestingBeanDefinition != null && requestingBeanDefinition.equals(definition)) {",
          "",
          "[Removed Lines]",
          "986:         Optional<BeanDefinition<T>> concreteCandidate = findConcreteCandidate(beanType, null, false, true);",
          "",
          "[Added Lines]",
          "1000:         Optional<BeanDefinition<T>> concreteCandidate = findConcreteCandidate(resolutionContext, beanType, null, false, true);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1091:                 return Optional.of(beanRegistration.beanDefinition);",
          "1092:             }",
          "1093:             return findConcreteCandidateNoCache(",
          "1094:                     (Class) beanType,",
          "1095:                     proxyQualifier,",
          "1096:                     true,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1108:                     null,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1126:         }",
          "1127:         if (CollectionUtils.isNotEmpty(candidates)) {",
          "1128:             filterProxiedTypes(candidates, true, true);",
          "1130:         }",
          "1131:         return candidates;",
          "1132:     }",
          "",
          "[Removed Lines]",
          "1129:             filterReplacedBeans(candidates);",
          "",
          "[Added Lines]",
          "1144:             filterReplacedBeans(null, candidates);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1235:             return Optional.of((T) this);",
          "1236:         }",
          "1240:             return Optional.empty();",
          "1243:         }",
          "1244:     }",
          "",
          "[Removed Lines]",
          "1238:         T bean = getBeanInternal(resolutionContext, beanType, qualifier, true, false);",
          "1239:         if (bean == null) {",
          "1241:         } else {",
          "1242:             return Optional.of(bean);",
          "",
          "[Added Lines]",
          "1253:         try {",
          "1254:             T bean = getBeanInternal(resolutionContext, beanType, qualifier, true, false);",
          "1255:             if (bean == null) {",
          "1256:                 return Optional.empty();",
          "1257:             } else {",
          "1258:                 return Optional.of(bean);",
          "1259:             }",
          "1260:         } catch (DisabledBeanException e) {",
          "1261:             if (AbstractBeanContextConditional.LOG.isDebugEnabled()) {",
          "1262:                 AbstractBeanContextConditional.LOG.debug(\"Bean of type [{}] disabled for reason: {}\", beanType.getSimpleName(), e.getMessage());",
          "1263:             }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1288:     }",
          "1290:     @Override",
          "1292:         Objects.requireNonNull(event, \"Event cannot be null\");",
          "1293:         CompletableFuture<Void> future = new CompletableFuture<>();",
          "1294:         Collection<ApplicationEventListener> eventListeners = streamOfType(ApplicationEventListener.class, Qualifiers.byTypeArguments(event.getClass()))",
          "1297:         Executor executor = findBean(Executor.class, Qualifiers.byName(\"scheduled\"))",
          "1299:         executor.execute(() -> {",
          "1300:             try {",
          "1301:                 notifyEventListeners(event, eventListeners);",
          "",
          "[Removed Lines]",
          "1291:     public @NonNull Future<Void> publishEventAsync(@NonNull Object event) {",
          "1295:                                                                         .sorted(OrderUtil.COMPARATOR).collect(Collectors.toList());",
          "1298:                                 .orElseGet(ForkJoinPool::commonPool);",
          "",
          "[Added Lines]",
          "1313:     public @NonNull",
          "1314:     Future<Void> publishEventAsync(@NonNull Object event) {",
          "1318:                 .sorted(OrderUtil.COMPARATOR).collect(Collectors.toList());",
          "1321:                 .orElseGet(ForkJoinPool::commonPool);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1350:             return new ResolvedProvider<>(beanRegistration.bean);",
          "1351:         }",
          "1354:         if (concreteCandidate.isPresent()) {",
          "1355:             return new UnresolvedProvider<>(beanType, qualifier, this);",
          "1356:         } else {",
          "",
          "[Removed Lines]",
          "1353:         Optional<BeanDefinition<T>> concreteCandidate = findConcreteCandidate(beanType, qualifier, true, false);",
          "",
          "[Added Lines]",
          "1376:         Optional<BeanDefinition<T>> concreteCandidate = findConcreteCandidate(resolutionContext, beanType, qualifier, true, false);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1501:                 }",
          "1502:             }",
          "1503:             filterProxiedTypes((Collection) contextBeans, true, false);",
          "1506:             for (BeanDefinition contextScopeDefinition : contextBeans) {",
          "1507:                 try {",
          "",
          "[Removed Lines]",
          "1504:             filterReplacedBeans((Collection) contextBeans);",
          "",
          "[Added Lines]",
          "1527:             filterReplacedBeans(null, (Collection) contextBeans);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1615:     protected @NonNull",
          "1616:     <T> Collection<BeanDefinition<T>> findBeanCandidates(@NonNull Class<T> beanType, @Nullable BeanDefinition<?> filter) {",
          "1618:     }",
          "1629:     @SuppressWarnings(\"unchecked\")",
          "1630:     protected @NonNull",
          "1632:         ArgumentUtils.requireNonNull(\"beanType\", beanType);",
          "1634:         if (LOG.isDebugEnabled()) {",
          "",
          "[Removed Lines]",
          "1617:         return findBeanCandidates(beanType, filter, true);",
          "1631:     <T> Collection<BeanDefinition<T>> findBeanCandidates(@NonNull Class<T> beanType, @Nullable BeanDefinition<?> filter, boolean filterProxied) {",
          "",
          "[Added Lines]",
          "1640:         return findBeanCandidates(null, beanType, filter, true);",
          "1655:     <T> Collection<BeanDefinition<T>> findBeanCandidates(",
          "1656:             @Nullable BeanResolutionContext resolutionContext,",
          "1657:             @NonNull Class<T> beanType,",
          "1658:             @Nullable BeanDefinition<?> filter,",
          "1659:             boolean filterProxied) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1654:                     .filter(reference -> {",
          "1655:                         Class<?> candidateType = reference.getBeanType();",
          "1656:                         final boolean isCandidate = candidateType != null && (beanType.isAssignableFrom(candidateType) || beanType == candidateType);",
          "1658:                     })",
          "1659:                     .map(ref -> {",
          "1660:                         BeanDefinition<T> loadedBean;",
          "",
          "[Removed Lines]",
          "1657:                         return isCandidate && reference.isEnabled(this);",
          "",
          "[Added Lines]",
          "1685:                         return isCandidate && reference.isEnabled(this, resolutionContext);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1670:                 candidateStream = candidateStream.filter(candidate -> !candidate.equals(filter));",
          "1671:             }",
          "1672:             Set<BeanDefinition<T>> candidates = candidateStream",
          "1674:                     .collect(Collectors.toSet());",
          "1676:             if (!candidates.isEmpty()) {",
          "1677:                 if (filterProxied) {",
          "1678:                     filterProxiedTypes(candidates, true, false);",
          "1679:                 }",
          "1681:             }",
          "1683:             if (LOG.isDebugEnabled()) {",
          "",
          "[Removed Lines]",
          "1673:                     .filter(candidate -> candidate.isEnabled(this))",
          "1680:                 filterReplacedBeans(candidates);",
          "",
          "[Added Lines]",
          "1701:                     .filter(candidate -> candidate.isEnabled(this, resolutionContext))",
          "1708:                 filterReplacedBeans(resolutionContext, candidates);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1703:         return candidates;",
          "1704:     }",
          "",
          "[Removed Lines]",
          "1702:     protected <T> Collection<BeanDefinition<T>> transformIterables(Collection<BeanDefinition<T>> candidates, boolean filterProxied) {",
          "",
          "[Added Lines]",
          "1732:     protected <T> Collection<BeanDefinition<T>> transformIterables(BeanResolutionContext resolutionContext, Collection<BeanDefinition<T>> candidates, boolean filterProxied) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1864:                     }",
          "1866:                     if (bean == null) {",
          "1870:                     } else {",
          "1871:                         if (bean instanceof Qualified) {",
          "1872:                             ((Qualified) bean).$withBeanQualifier(declaredQualifier);",
          "",
          "[Removed Lines]",
          "1867:                         if (!(beanDefinition.isIterable() || beanDefinition.getAnnotationMetadata().hasAnnotation(Factory.class))) {",
          "1868:                             throw new BeanInstantiationException(resolutionContext, \"Bean Factory [\" + beanFactory + \"] returned null\");",
          "1869:                         }",
          "",
          "[Added Lines]",
          "1897:                         throw new BeanInstantiationException(resolutionContext, \"Bean Factory [\" + beanFactory + \"] returned null\");",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1877:                 if (e instanceof DependencyInjectionException) {",
          "1878:                     throw e;",
          "1879:                 }",
          "1880:                 if (e instanceof BeanInstantiationException) {",
          "1881:                     throw e;",
          "1882:                 } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1908:                 if (e instanceof DisabledBeanException) {",
          "1909:                     throw e;",
          "1910:                 }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1974:                     });",
          "1976:                     filterProxiedTypes((Collection) parallelDefinitions, true, false);",
          "1979:                     parallelDefinitions.forEach(beanDefinition -> ForkJoinPool.commonPool().execute(() -> {",
          "1980:                         try {",
          "",
          "[Removed Lines]",
          "1977:                     filterReplacedBeans((Collection) parallelDefinitions);",
          "",
          "[Added Lines]",
          "2008:                     filterReplacedBeans(null, (Collection) parallelDefinitions);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1996:         }",
          "1997:     }",
          "2000:         List<BeanType<T>> replacedTypes = new ArrayList<>(2);",
          "2002:         for (BeanType<T> candidate : candidates) {",
          "",
          "[Removed Lines]",
          "1999:     private <T> void filterReplacedBeans(Collection<? extends BeanType<T>> candidates) {",
          "",
          "[Added Lines]",
          "2030:     private <T> void filterReplacedBeans(BeanResolutionContext resolutionContext, Collection<? extends BeanType<T>> candidates) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2007:         if (!replacedTypes.isEmpty()) {",
          "2009:             candidates.removeIf(definition -> {",
          "2011:                     return true;",
          "2012:                 }",
          "2013:                 final AnnotationMetadata annotationMetadata = definition.getAnnotationMetadata();",
          "",
          "[Removed Lines]",
          "2010:                 if (!definition.isEnabled(this)) {",
          "",
          "[Added Lines]",
          "2041:                 if (!definition.isEnabled(this, resolutionContext)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2119:     private void loadContextScopeBean(BeanDefinitionReference contextScopeBean, Consumer<BeanDefinition> beanDefinitionConsumer) {",
          "2120:         if (contextScopeBean.isEnabled(this)) {",
          "2121:             BeanDefinition beanDefinition = contextScopeBean.load(this);",
          "2124:             }",
          "2125:         }",
          "2126:     }",
          "2128:     private void loadContextScopeBean(BeanDefinition beanDefinition) {",
          "2129:         if (beanDefinition.isIterable() || beanDefinition.hasStereotype(ConfigurationReader.class.getName())) {",
          "2131:             for (BeanDefinition beanCandidate : beanCandidates) {",
          "2132:                 try (BeanResolutionContext resolutionContext = newResolutionContext(beanDefinition, null)) {",
          "2133:                     createAndRegisterSingleton(",
          "",
          "[Removed Lines]",
          "2122:             if (beanDefinition.isEnabled(this)) {",
          "2123:                 beanDefinitionConsumer.accept(beanDefinition);",
          "2130:             Collection<BeanDefinition> beanCandidates = (Collection<BeanDefinition>) transformIterables(Collections.singleton(beanDefinition), true);",
          "",
          "[Added Lines]",
          "2153:             try (BeanResolutionContext resolutionContext = newResolutionContext(beanDefinition, null)) {",
          "2154:                 if (beanDefinition.isEnabled(this, resolutionContext)) {",
          "2155:                     beanDefinitionConsumer.accept(beanDefinition);",
          "2156:                 }",
          "2163:             Collection<BeanDefinition> beanCandidates = (Collection<BeanDefinition>) transformIterables(null, Collections.singleton(beanDefinition), true);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2218:         synchronized (singletonObjects) {",
          "2221:             T bean;",
          "2223:             if (concreteCandidate.isPresent()) {",
          "",
          "[Removed Lines]",
          "2220:             Optional<BeanDefinition<T>> concreteCandidate = findConcreteCandidate(beanType, qualifier, throwNonUnique, false);",
          "",
          "[Added Lines]",
          "2253:             Optional<BeanDefinition<T>> concreteCandidate = findConcreteCandidate(resolutionContext, beanType, qualifier, throwNonUnique, false);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2427:     @SuppressWarnings(\"unchecked\")",
          "2428:     private <T> Optional<BeanDefinition<T>> findConcreteCandidate(",
          "2429:             Class<T> beanType,",
          "2430:             Qualifier<T> qualifier,",
          "2431:             boolean throwNonUnique,",
          "2432:             boolean includeProvided) {",
          "2433:         return (Optional) beanConcreteCandidateCache.computeIfAbsent(new BeanKey(beanType, qualifier), beanKey ->",
          "2435:         );",
          "2436:     }",
          "2438:     private <T> Optional<BeanDefinition<T>> findConcreteCandidateNoCache(",
          "2439:             Class<T> beanType,",
          "2440:             Qualifier<T> qualifier,",
          "2441:             boolean throwNonUnique,",
          "2442:             boolean includeProvided,",
          "2443:             boolean filterProxied) {",
          "2445:         if (candidates.isEmpty()) {",
          "2446:             return Optional.empty();",
          "2447:         }",
          "",
          "[Removed Lines]",
          "2434:                 (Optional) findConcreteCandidateNoCache(beanType, qualifier, throwNonUnique, includeProvided, true)",
          "2444:         Collection<BeanDefinition<T>> candidates = new ArrayList<>(findBeanCandidates(beanType, null, filterProxied));",
          "",
          "[Added Lines]",
          "2462:             BeanResolutionContext resolutionContext,",
          "2468:                 (Optional) findConcreteCandidateNoCache(resolutionContext, beanType, qualifier, throwNonUnique, includeProvided, true)",
          "2473:             BeanResolutionContext resolutionContext,",
          "2479:         Collection<BeanDefinition<T>> candidates = new ArrayList<>(findBeanCandidates(resolutionContext, beanType, null, filterProxied));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2743:     }",
          "2745:     @SuppressWarnings(\"unchecked\")",
          "2748:     }",
          "2750:     @SuppressWarnings(\"unchecked\")",
          "",
          "[Removed Lines]",
          "2746:     private <T> Collection<BeanDefinition<T>> findBeanCandidatesInternal(Class<T> beanType) {",
          "2747:         return (Collection) beanCandidateCache.computeIfAbsent(beanType, aClass -> (Collection) findBeanCandidates(beanType, null, true));",
          "",
          "[Added Lines]",
          "2781:     private <T> Collection<BeanDefinition<T>> findBeanCandidatesInternal(BeanResolutionContext resolutionContext, Class<T> beanType) {",
          "2782:         return (Collection) beanCandidateCache.computeIfAbsent(beanType, aClass -> (Collection) findBeanCandidates(resolutionContext, beanType, null, true));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2782:             HashSet<T> beansOfTypeList;",
          "2783:             boolean allCandidatesAreSingleton = false;",
          "2784:             Collection<T> beans;",
          "2786:             filterProxiedTypes(candidates, true, false);",
          "2787:             boolean hasCandidates = !candidates.isEmpty();",
          "2788:             if (hasQualifier && hasCandidates) {",
          "",
          "[Removed Lines]",
          "2785:             Collection<BeanDefinition<T>> candidates = findBeanCandidatesInternal(beanType);",
          "",
          "[Added Lines]",
          "2820:             Collection<BeanDefinition<T>> candidates = findBeanCandidatesInternal(resolutionContext, beanType);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2897:             Collection<T> beansOfTypeList,",
          "2898:             Qualifier<T> qualifier,",
          "2899:             boolean singleCandidate) {",
          "2910:                         } else {",
          "2912:                         }",
          "2916:                     }",
          "2917:                 }",
          "2918:             }",
          "2922:             }",
          "2923:         }",
          "",
          "[Removed Lines]",
          "2900:         T bean;",
          "2901:         if (candidate.isSingleton()) {",
          "2902:             synchronized (singletonObjects) {",
          "2903:                 try (BeanResolutionContext context = newResolutionContext(candidate, resolutionContext)) {",
          "2904:                     if (candidate instanceof NoInjectionBeanDefinition) {",
          "2905:                         NoInjectionBeanDefinition noibd = (NoInjectionBeanDefinition) candidate;",
          "2906:                         final BeanKey key = new BeanKey(noibd.singletonClass, noibd.qualifier);",
          "2907:                         final BeanRegistration beanRegistration = singletonObjects.get(key);",
          "2908:                         if (beanRegistration != null) {",
          "2909:                             bean = (T) beanRegistration.bean;",
          "2911:                             throw new IllegalStateException(\"Singleton not present for key: \" + key);",
          "2913:                     } else {",
          "2914:                         bean = doCreateBean(context, candidate, qualifier, true, null);",
          "2915:                         registerSingletonBean(candidate, beanType, bean, qualifier, singleCandidate);",
          "2919:         } else {",
          "2920:             try (BeanResolutionContext context = newResolutionContext(candidate, resolutionContext)) {",
          "2921:                 bean = getScopedBeanForDefinition(context, beanType, qualifier, true, candidate);",
          "",
          "[Added Lines]",
          "2935:         T bean = null;",
          "2936:         try {",
          "2937:             if (candidate.isSingleton()) {",
          "2938:                 synchronized (singletonObjects) {",
          "2939:                     try (BeanResolutionContext context = newResolutionContext(candidate, resolutionContext)) {",
          "2940:                         if (candidate instanceof NoInjectionBeanDefinition) {",
          "2941:                             NoInjectionBeanDefinition noibd = (NoInjectionBeanDefinition) candidate;",
          "2942:                             final BeanKey key = new BeanKey(noibd.singletonClass, noibd.qualifier);",
          "2943:                             final BeanRegistration beanRegistration = singletonObjects.get(key);",
          "2944:                             if (beanRegistration != null) {",
          "2945:                                 bean = (T) beanRegistration.bean;",
          "2946:                             } else {",
          "2947:                                 throw new IllegalStateException(\"Singleton not present for key: \" + key);",
          "2948:                             }",
          "2950:                             bean = doCreateBean(context, candidate, qualifier, true, null);",
          "2951:                             registerSingletonBean(candidate, beanType, bean, qualifier, singleCandidate);",
          "2955:             } else {",
          "2956:                 try (BeanResolutionContext context = newResolutionContext(candidate, resolutionContext)) {",
          "2957:                     bean = getScopedBeanForDefinition(context, beanType, qualifier, true, candidate);",
          "2958:                 }",
          "2960:         } catch (DisabledBeanException e) {",
          "2961:             if (AbstractBeanContextConditional.LOG.isDebugEnabled()) {",
          "2962:                 AbstractBeanContextConditional.LOG.debug(\"Bean of type [{}] disabled for reason: {}\", beanType.getSimpleName(), e.getMessage());",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2928:     }",
          "2930:     private <T> boolean isCandidatePresent(Class<T> beanType, Qualifier<T> qualifier) {",
          "2932:         if (!candidates.isEmpty()) {",
          "2934:             Stream<BeanDefinition<T>> stream = candidates.stream();",
          "2935:             if (qualifier != null) {",
          "2936:                 stream = qualifier.reduce(beanType, stream);",
          "",
          "[Removed Lines]",
          "2931:         final Collection<BeanDefinition<T>> candidates = findBeanCandidates(beanType, null, true);",
          "2933:             filterReplacedBeans(candidates);",
          "",
          "[Added Lines]",
          "2972:         final Collection<BeanDefinition<T>> candidates = findBeanCandidates(null, beanType, null, true);",
          "2974:             filterReplacedBeans(null, candidates);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3380:             return true;",
          "3381:         }",
          "3383:         @Override",
          "3384:         public <R> Optional<ExecutableMethod<T, R>> findMethod(String name, Class[] argumentTypes) {",
          "3385:             return Optional.empty();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3424:         @Override",
          "3425:         public boolean isEnabled(@NonNull BeanContext context, @Nullable BeanResolutionContext resolutionContext) {",
          "3426:             return true;",
          "3427:         }",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/context/DefaultConditionContext.java||inject/src/main/java/io/micronaut/context/DefaultConditionContext.java": [
          "File: inject/src/main/java/io/micronaut/context/DefaultConditionContext.java -> inject/src/main/java/io/micronaut/context/DefaultConditionContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.context;",
          "18: import io.micronaut.context.condition.ConditionContext;",
          "19: import io.micronaut.context.condition.Failure;",
          "20: import io.micronaut.core.annotation.AnnotationMetadataProvider;",
          "21: import io.micronaut.core.annotation.Internal;",
          "23: import edu.umd.cs.findbugs.annotations.NonNull;",
          "35: @Internal",
          "40:     private final List<Failure> failures = new ArrayList<>(2);",
          "47:         this.beanContext = beanContext;",
          "48:         this.component = component;",
          "49:     }",
          "51:     @Override",
          "53:         return component;",
          "54:     }",
          "",
          "[Removed Lines]",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collections;",
          "26: import java.util.List;",
          "36: class DefaultConditionContext<T extends AnnotationMetadataProvider> implements ConditionContext<T> {",
          "38:     private final BeanContext beanContext;",
          "39:     private final T component;",
          "46:     DefaultConditionContext(BeanContext beanContext, T component) {",
          "52:     public T getComponent() {",
          "",
          "[Added Lines]",
          "18: import edu.umd.cs.findbugs.annotations.Nullable;",
          "25: import io.micronaut.core.convert.ArgumentConversionContext;",
          "26: import io.micronaut.core.value.PropertyResolver;",
          "27: import io.micronaut.inject.BeanDefinition;",
          "29: import java.util.*;",
          "30: import java.util.stream.Stream;",
          "40: class DefaultConditionContext<B extends AnnotationMetadataProvider> implements ConditionContext<B> {",
          "42:     private final DefaultBeanContext beanContext;",
          "43:     private final B component;",
          "45:     private final BeanResolutionContext resolutionContext;",
          "52:     DefaultConditionContext(DefaultBeanContext beanContext, B component, BeanResolutionContext resolutionContext) {",
          "55:         this.resolutionContext = resolutionContext;",
          "59:     public B getComponent() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     }",
          "61:     @Override",
          "63:         failures.add(failure);",
          "64:         return this;",
          "65:     }",
          "",
          "[Removed Lines]",
          "62:     public ConditionContext<T> fail(@NonNull Failure failure) {",
          "",
          "[Added Lines]",
          "69:     public BeanResolutionContext getBeanResolutionContext() {",
          "70:         return resolutionContext;",
          "71:     }",
          "73:     @Override",
          "74:     public ConditionContext<B> fail(@NonNull Failure failure) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:     public List<Failure> getFailures() {",
          "74:         return Collections.unmodifiableList(failures);",
          "75:     }",
          "76: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     @NonNull",
          "90:     @Override",
          "91:     public <T> T getBean(@NonNull BeanDefinition<T> definition) {",
          "92:         return beanContext.getBean(definition);",
          "93:     }",
          "95:     @NonNull",
          "96:     @Override",
          "97:     public <T> T getBean(@NonNull Class<T> beanType, @Nullable Qualifier<T> qualifier) {",
          "98:         return beanContext.getBean(resolutionContext, beanType, qualifier);",
          "99:     }",
          "101:     @NonNull",
          "102:     @Override",
          "103:     public <T> Optional<T> findBean(@NonNull Class<T> beanType, @Nullable Qualifier<T> qualifier) {",
          "104:         return beanContext.findBean(resolutionContext, beanType, qualifier);",
          "105:     }",
          "107:     @NonNull",
          "108:     @Override",
          "109:     public <T> Collection<T> getBeansOfType(@NonNull Class<T> beanType) {",
          "110:         return beanContext.getBeansOfType(resolutionContext, beanType);",
          "111:     }",
          "113:     @NonNull",
          "114:     @Override",
          "115:     public <T> Collection<T> getBeansOfType(@NonNull Class<T> beanType, @Nullable Qualifier<T> qualifier) {",
          "116:         return beanContext.getBeansOfType(resolutionContext, beanType, qualifier);",
          "117:     }",
          "119:     @NonNull",
          "120:     @Override",
          "121:     public <T> Stream<T> streamOfType(@NonNull Class<T> beanType, @Nullable Qualifier<T> qualifier) {",
          "122:         return beanContext.streamOfType(resolutionContext, beanType, qualifier);",
          "123:     }",
          "125:     @NonNull",
          "126:     @Override",
          "127:     public <T> T getProxyTargetBean(@NonNull Class<T> beanType, @Nullable Qualifier<T> qualifier) {",
          "128:         return beanContext.getProxyTargetBean(beanType, qualifier);",
          "129:     }",
          "131:     @Override",
          "132:     public boolean containsProperty(@NonNull String name) {",
          "133:         if (beanContext instanceof PropertyResolver) {",
          "134:             return ((PropertyResolver) beanContext).containsProperty(name);",
          "135:         }",
          "136:         return false;",
          "137:     }",
          "139:     @Override",
          "140:     public boolean containsProperties(@NonNull String name) {",
          "141:         if (beanContext instanceof PropertyResolver) {",
          "142:             return ((PropertyResolver) beanContext).containsProperties(name);",
          "143:         }",
          "144:         return false;",
          "145:     }",
          "147:     @NonNull",
          "148:     @Override",
          "149:     public <T> Optional<T> getProperty(@NonNull String name, @NonNull ArgumentConversionContext<T> conversionContext) {",
          "150:         if (beanContext instanceof PropertyResolver) {",
          "151:             return ((PropertyResolver) beanContext).getProperty(name, conversionContext);",
          "152:         }",
          "153:         return Optional.empty();",
          "154:     }",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/context/RequiresCondition.java||inject/src/main/java/io/micronaut/context/RequiresCondition.java": [
          "File: inject/src/main/java/io/micronaut/context/RequiresCondition.java -> inject/src/main/java/io/micronaut/context/RequiresCondition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "562:                 for (Class<?> type : missingBeans) {",
          "565:                     for (BeanDefinition<?> beanDefinition : beanDefinitions) {",
          "566:                         if (!beanDefinition.isAbstract()) {",
          "567:                             context.fail(\"Existing bean [\" + beanDefinition.getName() + \"] of type [\" + type + \"] registered in context\");",
          "",
          "[Removed Lines]",
          "564:                     final Collection<? extends BeanDefinition<?>> beanDefinitions = beanContext.findBeanCandidates(type, bd, true);",
          "",
          "[Added Lines]",
          "564:                     final Collection<? extends BeanDefinition<?>> beanDefinitions = beanContext.findBeanCandidates(",
          "565:                             context.getBeanResolutionContext(),",
          "566:                             type,",
          "567:                             bd,",
          "568:                             true",
          "569:                     );",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/context/condition/ConditionContext.java||inject/src/main/java/io/micronaut/context/condition/ConditionContext.java": [
          "File: inject/src/main/java/io/micronaut/context/condition/ConditionContext.java -> inject/src/main/java/io/micronaut/context/condition/ConditionContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.context.condition;",
          "18: import io.micronaut.context.BeanContext;",
          "19: import io.micronaut.core.annotation.AnnotationMetadataProvider;",
          "21: import edu.umd.cs.findbugs.annotations.NonNull;",
          "22: import java.util.Collections;",
          "23: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import io.micronaut.context.BeanLocator;",
          "20: import io.micronaut.context.BeanResolutionContext;",
          "24: import io.micronaut.core.value.PropertyResolver;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "32: public interface ConditionContext<T extends AnnotationMetadataProvider> {",
          "",
          "[Added Lines]",
          "36: public interface ConditionContext<T extends AnnotationMetadataProvider> extends BeanLocator, PropertyResolver {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:     BeanContext getBeanContext();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     BeanResolutionContext getBeanResolutionContext();",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/context/exceptions/DisabledBeanException.java||inject/src/main/java/io/micronaut/context/exceptions/DisabledBeanException.java": [
          "File: inject/src/main/java/io/micronaut/context/exceptions/DisabledBeanException.java -> inject/src/main/java/io/micronaut/context/exceptions/DisabledBeanException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: package io.micronaut.context.exceptions;",
          "24: public class DisabledBeanException extends RuntimeException {",
          "28:     public DisabledBeanException(String reason) {",
          "29:         super(reason);",
          "30:     }",
          "32:     @Override",
          "33:     public final synchronized Throwable fillInStackTrace() {",
          "34:         return this;",
          "35:     }",
          "36: }",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/inject/ArgumentBeanType.java||inject/src/main/java/io/micronaut/inject/ArgumentBeanType.java": [
          "File: inject/src/main/java/io/micronaut/inject/ArgumentBeanType.java -> inject/src/main/java/io/micronaut/inject/ArgumentBeanType.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.inject;",
          "18: import io.micronaut.context.BeanContext;",
          "19: import io.micronaut.core.annotation.AnnotationMetadata;",
          "20: import io.micronaut.core.type.Argument;",
          "21: import io.micronaut.core.util.ArgumentUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import edu.umd.cs.findbugs.annotations.Nullable;",
          "20: import io.micronaut.context.BeanResolutionContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     public boolean isEnabled(BeanContext context) {",
          "88:         return true;",
          "89:     }",
          "90: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     @Override",
          "94:     public boolean isEnabled(@NonNull BeanContext context, @Nullable BeanResolutionContext resolutionContext) {",
          "95:         return true;",
          "96:     }",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/inject/BeanContextConditional.java||inject/src/main/java/io/micronaut/inject/BeanContextConditional.java": [
          "File: inject/src/main/java/io/micronaut/inject/BeanContextConditional.java -> inject/src/main/java/io/micronaut/inject/BeanContextConditional.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.inject;",
          "18: import io.micronaut.context.BeanContext;",
          "20: import edu.umd.cs.findbugs.annotations.NonNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import edu.umd.cs.findbugs.annotations.Nullable;",
          "22: import io.micronaut.context.BeanResolutionContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: }",
          "",
          "[Removed Lines]",
          "37:     boolean isEnabled(@NonNull BeanContext context);",
          "",
          "[Added Lines]",
          "39:     default boolean isEnabled(@NonNull BeanContext context) {",
          "40:         return isEnabled(context, null);",
          "41:     }",
          "50:     boolean isEnabled(@NonNull BeanContext context, @Nullable BeanResolutionContext resolutionContext);",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/inject/DelegatingBeanDefinition.java||inject/src/main/java/io/micronaut/inject/DelegatingBeanDefinition.java": [
          "File: inject/src/main/java/io/micronaut/inject/DelegatingBeanDefinition.java -> inject/src/main/java/io/micronaut/inject/DelegatingBeanDefinition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.inject;",
          "18: import io.micronaut.context.BeanContext;",
          "19: import io.micronaut.context.BeanResolutionContext;",
          "20: import io.micronaut.core.annotation.AnnotationMetadata;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import edu.umd.cs.findbugs.annotations.Nullable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:         return getTarget().isEnabled(context);",
          "158:     }",
          "160:     @Override",
          "161:     default Optional<Class<?>> getDeclaringType() {",
          "162:         return getTarget().getDeclaringType();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     @Override",
          "162:     default boolean isEnabled(@NonNull BeanContext context, @Nullable BeanResolutionContext resolutionContext) {",
          "163:         return getTarget().isEnabled(context, resolutionContext);",
          "164:     }",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java||inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java": [
          "File: inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java -> inject/src/main/java/io/micronaut/inject/writer/BeanDefinitionWriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.inject.writer;",
          "18: import io.micronaut.context.*;",
          "19: import io.micronaut.context.annotation.*;",
          "21: import io.micronaut.core.annotation.AnnotationMetadata;",
          "23: import io.micronaut.core.annotation.Internal;",
          "24: import io.micronaut.core.naming.NameUtils;",
          "25: import io.micronaut.core.reflect.ReflectionUtils;",
          "",
          "[Removed Lines]",
          "20: import io.micronaut.context.exceptions.BeanContextException;",
          "22: import io.micronaut.core.annotation.AnnotationUtil;",
          "",
          "[Added Lines]",
          "18: import edu.umd.cs.findbugs.annotations.NonNull;",
          "19: import edu.umd.cs.findbugs.annotations.Nullable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.objectweb.asm.signature.SignatureVisitor;",
          "40: import org.objectweb.asm.signature.SignatureWriter;",
          "45: import javax.inject.Scope;",
          "46: import javax.inject.Singleton;",
          "47: import java.io.IOException;",
          "",
          "[Removed Lines]",
          "42: import edu.umd.cs.findbugs.annotations.NonNull;",
          "43: import edu.umd.cs.findbugs.annotations.Nullable;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1861:             int factoryVar = pushNewBuildLocalVariable();",
          "1869:             buildMethodVisitor.visitVarInsn(ALOAD, factoryVar);",
          "1870:             pushCastToType(buildMethodVisitor, factoryClass);",
          "",
          "[Removed Lines]",
          "1863:             Map<String, Integer> variableReplacements;",
          "1864:             if (isParametrized) {",
          "1865:                 variableReplacements = Collections.emptyMap();",
          "1866:             } else {",
          "1867:                 variableReplacements = processEachBeanArgument(methodAnnotationMetadata, argumentTypes, argumentAnnotationMetadata, buildMethodVisitor);",
          "1868:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1875:                         methodName,",
          "1876:                         Type.getMethodDescriptor(beanType), false);",
          "1877:             } else {",
          "1880:                 String methodDescriptor = getMethodDescriptor(beanFullClassName, argumentTypes.values());",
          "1881:                 buildMethodVisitor.visitMethodInsn(INVOKEVIRTUAL,",
          "",
          "[Removed Lines]",
          "1878:                 pushConstructorArguments(buildMethodVisitor, argumentTypes, argumentAnnotationMetadata, variableReplacements);",
          "",
          "[Added Lines]",
          "1869:                 pushConstructorArguments(buildMethodVisitor, argumentTypes, argumentAnnotationMetadata);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1900:             GeneratorAdapter buildMethodVisitor = this.buildMethodVisitor;",
          "1908:             buildMethodVisitor.visitTypeInsn(NEW, beanType.getInternalName());",
          "1909:             buildMethodVisitor.visitInsn(DUP);",
          "1911:             String constructorDescriptor = getConstructorDescriptor(argumentTypes.values());",
          "1912:             buildMethodVisitor.visitMethodInsn(INVOKESPECIAL, beanType.getInternalName(), \"<init>\", constructorDescriptor, false);",
          "",
          "[Removed Lines]",
          "1902:             Map<String, Integer> variableReplacements;",
          "1903:             if (isParametrized) {",
          "1904:                 variableReplacements = Collections.emptyMap();",
          "1905:             } else {",
          "1906:                 variableReplacements = processEachBeanArgument(classMetadata, argumentTypes, argumentAnnotationMetadata, buildMethodVisitor);",
          "1907:             }",
          "1910:             pushConstructorArguments(buildMethodVisitor, argumentTypes, argumentAnnotationMetadata, variableReplacements);",
          "",
          "[Added Lines]",
          "1895:             pushConstructorArguments(buildMethodVisitor, argumentTypes, argumentAnnotationMetadata);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1919:         }",
          "1920:     }",
          "1974:     private void pushConstructorArguments(GeneratorAdapter buildMethodVisitor,",
          "1975:                                           Map<String, Object> argumentTypes,",
          "1978:         int size = argumentTypes.size();",
          "1979:         if (size > 0) {",
          "1980:             Iterator<Map.Entry<String, Object>> iterator = argumentTypes.entrySet().iterator();",
          "",
          "[Removed Lines]",
          "1922:     private Map<String, Integer> processEachBeanArgument(AnnotationMetadata ownerMetadata,",
          "1923:                                                          Map<String, Object> argumentTypes,",
          "1924:                                                          Map<String, AnnotationMetadata> argumentAnnotationMetadata,",
          "1925:                                                          GeneratorAdapter buildMethodVisitor) {",
          "1926:         Map<String, Integer> variableReplacements = new HashMap<>();",
          "1928:         if (!argumentTypes.isEmpty()) {",
          "1929:             Optional<String> eachBeanArgument = ownerMetadata.stringValue(EachBean.class);",
          "1930:             if (eachBeanArgument.isPresent()) {",
          "1931:                 int size = argumentTypes.size();",
          "1932:                 Iterator<Map.Entry<String, Object>> iterator = argumentTypes.entrySet().iterator();",
          "1933:                 for (int i = 0; i < size; i++) {",
          "1934:                     Map.Entry<String, Object> entry = iterator.next();",
          "1935:                     if (entry.getValue().equals(eachBeanArgument.get())) {",
          "1937:                         AnnotationMetadata argMetadata = argumentAnnotationMetadata.get(entry.getKey());",
          "1939:                         buildMethodVisitor.visitInsn(ACONST_NULL);",
          "1940:                         int eachBeanVar = pushNewBuildLocalVariable();",
          "1942:                         Label tryStart = new Label();",
          "1943:                         Label tryEnd = new Label();",
          "1944:                         Label catchStart = new Label();",
          "1945:                         Label catchEnd = new Label();",
          "1946:                         buildMethodVisitor.visitTryCatchBlock(tryStart, tryEnd, catchStart, Type.getInternalName(BeanContextException.class));",
          "1947:                         buildMethodVisitor.visitLabel(tryStart);",
          "1950:                         pushConstructorArgument(buildMethodVisitor, entry.getKey(), entry.getValue(), argMetadata, i);",
          "1951:                         buildMethodVisitor.visitVarInsn(ASTORE, eachBeanVar);",
          "1953:                         buildMethodVisitor.visitLabel(tryEnd);",
          "1954:                         buildMethodVisitor.visitJumpInsn(GOTO, catchEnd);",
          "1956:                         buildMethodVisitor.visitLabel(catchStart);",
          "1957:                         if (!argMetadata.hasAnnotation(AnnotationUtil.NULLABLE)) {",
          "1958:                             buildMethodVisitor.visitInsn(ACONST_NULL);",
          "1959:                             buildMethodVisitor.visitInsn(ARETURN);",
          "1960:                         } else {",
          "1961:                             buildMethodVisitor.pop();",
          "1962:                         }",
          "1963:                         buildMethodVisitor.visitLabel(catchEnd);",
          "1965:                         variableReplacements.put(entry.getKey(), eachBeanVar);",
          "1966:                         break;",
          "1967:                     }",
          "1968:                 }",
          "1969:             }",
          "1970:         }",
          "1971:         return variableReplacements;",
          "1972:     }",
          "1976:                                           Map<String, AnnotationMetadata> argumentAnnotationMetadata,",
          "1977:                                           Map<String, Integer> variableReplacements) {",
          "",
          "[Added Lines]",
          "1909:                                           Map<String, AnnotationMetadata> argumentAnnotationMetadata) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1982:                 Map.Entry<String, Object> entry = iterator.next();",
          "1983:                 AnnotationMetadata argMetadata = argumentAnnotationMetadata.get(entry.getKey());",
          "1991:             }",
          "1992:         }",
          "1993:     }",
          "",
          "[Removed Lines]",
          "1985:                 Integer variable = variableReplacements.get(entry.getKey());",
          "1986:                 if (variable != null) {",
          "1987:                     buildMethodVisitor.visitVarInsn(ALOAD, variable);",
          "1988:                 } else {",
          "1989:                     pushConstructorArgument(buildMethodVisitor, entry.getKey(), entry.getValue(), argMetadata, i);",
          "1990:                 }",
          "",
          "[Added Lines]",
          "1917:                 pushConstructorArgument(buildMethodVisitor, entry.getKey(), entry.getValue(), argMetadata, i);",
          "",
          "---------------"
        ],
        "runtime/src/main/java/io/micronaut/health/HeartbeatDiscoveryClientCondition.java||runtime/src/main/java/io/micronaut/health/HeartbeatDiscoveryClientCondition.java": [
          "File: runtime/src/main/java/io/micronaut/health/HeartbeatDiscoveryClientCondition.java -> runtime/src/main/java/io/micronaut/health/HeartbeatDiscoveryClientCondition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.health;",
          "19: import io.micronaut.context.condition.Condition;",
          "20: import io.micronaut.context.condition.ConditionContext;",
          "21: import io.micronaut.core.annotation.Introspected;",
          "",
          "[Removed Lines]",
          "18: import io.micronaut.context.ApplicationContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: public final class HeartbeatDiscoveryClientCondition implements Condition {",
          "35:     @Override",
          "36:     public boolean matches(ConditionContext context) {",
          "39:         final boolean hasDiscovery = compositeDiscoveryClient.getDiscoveryClients().length > 0;",
          "40:         if (hasDiscovery) {",
          "41:             return true;",
          "42:         } else {",
          "44:             if (!enabled) {",
          "45:                 context.fail(\"Heartbeat not enabled since no Discovery client active\");",
          "46:             }",
          "",
          "[Removed Lines]",
          "37:         final ApplicationContext beanContext = (ApplicationContext) context.getBeanContext();",
          "38:         final CompositeDiscoveryClient compositeDiscoveryClient = beanContext.getBean(CompositeDiscoveryClient.class);",
          "43:             final Boolean enabled = beanContext.getProperty(HeartbeatConfiguration.ENABLED, ArgumentConversionContext.BOOLEAN).orElse(FALSE);",
          "",
          "[Added Lines]",
          "36:         final CompositeDiscoveryClient compositeDiscoveryClient = context.getBean(CompositeDiscoveryClient.class);",
          "41:             final Boolean enabled = context.getProperty(HeartbeatConfiguration.ENABLED, ArgumentConversionContext.BOOLEAN).orElse(FALSE);",
          "",
          "---------------"
        ],
        "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java": [
          "File: runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java -> runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.scheduling.io.watch;",
          "20: import io.micronaut.context.condition.Condition;",
          "21: import io.micronaut.context.condition.ConditionContext;",
          "22: import io.micronaut.core.annotation.Introspected;",
          "",
          "[Removed Lines]",
          "18: import io.micronaut.context.ApplicationContext;",
          "19: import io.micronaut.context.BeanContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: public class FileWatchCondition implements Condition {",
          "37:     @Override",
          "38:     public boolean matches(ConditionContext context) {",
          "54:             }",
          "55:         }",
          "57:         context.fail(\"File watch disabled because no watch paths specified\");",
          "",
          "[Removed Lines]",
          "39:         BeanContext beanContext = context.getBeanContext();",
          "40:         if (beanContext instanceof ApplicationContext) {",
          "41:             List<String> paths = ((ApplicationContext) beanContext)",
          "42:                     .getEnvironment()",
          "43:                     .getProperty(FileWatchConfiguration.PATHS, ConversionContext.LIST_OF_STRING)",
          "44:                     .orElse(null);",
          "46:             if (CollectionUtils.isNotEmpty(paths)) {",
          "49:                 boolean matchedPaths = paths.stream().anyMatch(p -> new File(p).exists());",
          "50:                 if (!matchedPaths) {",
          "51:                     context.fail(\"File watch disabled because no paths matching the watch pattern exist (Paths: \" + paths + \")\");",
          "52:                 }",
          "53:                 return matchedPaths;",
          "",
          "[Added Lines]",
          "37:         List<String> paths = context",
          "38:                 .getProperty(FileWatchConfiguration.PATHS, ConversionContext.LIST_OF_STRING)",
          "39:                 .orElse(null);",
          "41:         if (CollectionUtils.isNotEmpty(paths)) {",
          "44:             boolean matchedPaths = paths.stream().anyMatch(p -> new File(p).exists());",
          "45:             if (!matchedPaths) {",
          "46:                 context.fail(\"File watch disabled because no paths matching the watch pattern exist (Paths: \" + paths + \")\");",
          "48:             return matchedPaths;",
          "",
          "---------------"
        ],
        "runtime/src/test/groovy/io/micronaut/health/HeartbeatDiscoveryClientConditionSpec.groovy||runtime/src/test/groovy/io/micronaut/health/HeartbeatDiscoveryClientConditionSpec.groovy": [
          "File: runtime/src/test/groovy/io/micronaut/health/HeartbeatDiscoveryClientConditionSpec.groovy -> runtime/src/test/groovy/io/micronaut/health/HeartbeatDiscoveryClientConditionSpec.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:         given:",
          "25:         ConditionContext conditionContext = Mock(ConditionContext)",
          "28:         when:",
          "29:         Boolean matches = heartbeatDiscoveryClientCondition.matches(conditionContext)",
          "31:         then:",
          "32:         !matches",
          "36:     }",
          "38:     def \"matches should return false when micronaut.heartbeat.enabled is defined as false and there are no discovery clients\"() {",
          "40:         given:",
          "41:         ConditionContext conditionContext = Mock(ConditionContext)",
          "44:         when:",
          "45:         Boolean matches = heartbeatDiscoveryClientCondition.matches(conditionContext)",
          "47:         then:",
          "48:         !matches",
          "52:     }",
          "54:     def \"matches should return true when micronaut.heartbeat.enabled is defined as false and there are discovery clients\"() {",
          "56:         given:",
          "57:         ConditionContext conditionContext = Mock(ConditionContext)",
          "60:         when:",
          "61:         Boolean matches = heartbeatDiscoveryClientCondition.matches(conditionContext)",
          "63:         then:",
          "64:         matches",
          "67:         }",
          "68:     }",
          "69: }",
          "",
          "[Removed Lines]",
          "26:         ApplicationContext  beanContext = Mock(ApplicationContext)",
          "33:         1 * conditionContext.getBeanContext() >> beanContext",
          "34:         1 * beanContext.getProperty(HeartbeatConfiguration.ENABLED, ArgumentConversionContext.BOOLEAN) >> Optional.empty()",
          "35:         1 * beanContext.getBean(CompositeDiscoveryClient.class) >> new CompositeDiscoveryClient() {}",
          "42:         ApplicationContext  beanContext = Mock(ApplicationContext)",
          "49:         1 * conditionContext.getBeanContext() >> beanContext",
          "50:         1 * beanContext.getProperty(HeartbeatConfiguration.ENABLED, ArgumentConversionContext.BOOLEAN) >> Optional.of(FALSE)",
          "51:         1 * beanContext.getBean(CompositeDiscoveryClient.class) >> new CompositeDiscoveryClient() {}",
          "58:         ApplicationContext  beanContext = Mock(ApplicationContext)",
          "65:         1 * conditionContext.getBeanContext() >> beanContext",
          "66:         1 * beanContext.getBean(CompositeDiscoveryClient.class) >> new CompositeDiscoveryClient(Mock(DiscoveryClient)) {",
          "",
          "[Added Lines]",
          "32:         1 * conditionContext.getProperty(HeartbeatConfiguration.ENABLED, ArgumentConversionContext.BOOLEAN) >> Optional.empty()",
          "33:         1 * conditionContext.getBean(CompositeDiscoveryClient.class) >> new CompositeDiscoveryClient() {}",
          "46:         1 * conditionContext.getProperty(HeartbeatConfiguration.ENABLED, ArgumentConversionContext.BOOLEAN) >> Optional.of(FALSE)",
          "47:         1 * conditionContext.getBean(CompositeDiscoveryClient.class) >> new CompositeDiscoveryClient() {}",
          "60:         1 * conditionContext.getBean(CompositeDiscoveryClient.class) >> new CompositeDiscoveryClient(Mock(DiscoveryClient)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f26daef2b45e966841db53c30aafe95247a4a863",
      "candidate_info": {
        "commit_hash": "f26daef2b45e966841db53c30aafe95247a4a863",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/f26daef2b45e966841db53c30aafe95247a4a863",
        "files": [
          "core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java",
          "core/src/main/java/io/micronaut/core/type/Argument.java",
          "core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
          "router/src/main/java/io/micronaut/web/router/DefaultUriRouteMatch.java",
          "router/src/main/java/io/micronaut/web/router/UriRouteMatch.java"
        ],
        "message": "Performance optimizations",
        "before_after_code_files": [
          "core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java||core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java",
          "core/src/main/java/io/micronaut/core/type/Argument.java||core/src/main/java/io/micronaut/core/type/Argument.java",
          "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
          "router/src/main/java/io/micronaut/web/router/DefaultUriRouteMatch.java||router/src/main/java/io/micronaut/web/router/DefaultUriRouteMatch.java",
          "router/src/main/java/io/micronaut/web/router/UriRouteMatch.java||router/src/main/java/io/micronaut/web/router/UriRouteMatch.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/io/micronaut/core/type/Argument.java||core/src/main/java/io/micronaut/core/type/Argument.java",
            "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
            "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java"
          ],
          "candidate": [
            "core/src/main/java/io/micronaut/core/type/Argument.java||core/src/main/java/io/micronaut/core/type/Argument.java",
            "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
            "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java||core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java": [
          "File: core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java -> core/src/main/java/io/micronaut/core/bind/annotation/AbstractAnnotatedArgumentBinder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     protected BindingResult<T> doConvert(Object value, ArgumentConversionContext<T> context) {",
          "124:         }",
          "126:     }",
          "127: }",
          "",
          "[Removed Lines]",
          "121:         Optional<T> result = conversionService.convert(value, context);",
          "122:         if (result.isPresent() && context.getArgument().getType() == Optional.class) {",
          "123:             return () -> (Optional<T>) result.get();",
          "125:         return () -> result;",
          "",
          "[Added Lines]",
          "121:         if (value == null) {",
          "122:             return BindingResult.EMPTY;",
          "123:         } else {",
          "124:             Optional<T> result = conversionService.convert(value, context);",
          "125:             if (result.isPresent() && context.getArgument().getType() == Optional.class) {",
          "126:                 return () -> (Optional<T>) result.get();",
          "127:             }",
          "128:             return () -> result;",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/type/Argument.java||core/src/main/java/io/micronaut/core/type/Argument.java": [
          "File: core/src/main/java/io/micronaut/core/type/Argument.java -> core/src/main/java/io/micronaut/core/type/Argument.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:     @Nonnull",
          "313:     static <T> Argument<T> of(",
          "314:         Class<T> type) {",
          "316:     }",
          "",
          "[Removed Lines]",
          "315:         return new DefaultArgument<>(type, NameUtils.decapitalize(type.getSimpleName()), AnnotationMetadata.EMPTY_METADATA, Argument.ZERO_ARGUMENTS);",
          "",
          "[Added Lines]",
          "315:         return new DefaultArgument<>(type, type.getSimpleName(), AnnotationMetadata.EMPTY_METADATA, Argument.ZERO_ARGUMENTS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:             TypeVariable<Class<T>> parameter = parameters[i];",
          "341:             typeArguments[i] = Argument.of(typeParameters[i], parameter.getName());",
          "342:         }",
          "344:     }",
          "",
          "[Removed Lines]",
          "343:         return new DefaultArgument<>(type, NameUtils.decapitalize(type.getSimpleName()), AnnotationMetadata.EMPTY_METADATA, typeArguments);",
          "",
          "[Added Lines]",
          "343:         return new DefaultArgument<>(type, type.getSimpleName(), AnnotationMetadata.EMPTY_METADATA, typeArguments);",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java": [
          "File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java -> core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import io.micronaut.core.annotation.AnnotationMetadata;",
          "19: import io.micronaut.core.annotation.Internal;",
          "20: import io.micronaut.core.naming.NameUtils;",
          "22: import java.lang.reflect.ParameterizedType;",
          "23: import java.lang.reflect.Type;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import io.micronaut.core.util.ArrayUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     public DefaultArgument(Class<T> type, String name, AnnotationMetadata annotationMetadata, Argument... genericTypes) {",
          "51:     }",
          "",
          "[Removed Lines]",
          "50:         this(type, name, annotationMetadata, initializeTypeParameters(genericTypes), genericTypes);",
          "",
          "[Added Lines]",
          "51:         this(type,",
          "52:              name,",
          "53:              annotationMetadata,",
          "54:              ArrayUtils.isNotEmpty(genericTypes) ? initializeTypeParameters(genericTypes) : Collections.EMPTY_MAP,",
          "55:              genericTypes",
          "56:         );",
          "",
          "---------------"
        ],
        "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java": [
          "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "782:                             if (isPublisher) {",
          "783:                                 Integer dataKey = System.identityHashCode(data);",
          "787:                                 Argument typeVariable;",
          "789:                                 if (StreamingFileUpload.class.isAssignableFrom(argument.getType())) {",
          "",
          "[Removed Lines]",
          "784:                                 HttpDataReference dataReference = dataReferences.computeIfAbsent(dataKey, (key) -> {",
          "785:                                     return new HttpDataReference(data);",
          "786:                                 });",
          "",
          "[Added Lines]",
          "784:                                 HttpDataReference dataReference = dataReferences.computeIfAbsent(dataKey, (key) -> new HttpDataReference(data));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "828:                                 }",
          "832:                                 Object part = data;",
          "",
          "[Removed Lines]",
          "830:                                 UnicastProcessor subject = Optional.ofNullable(dataReference.subject.get()).orElse(namedSubject);",
          "",
          "[Added Lines]",
          "829:                                 UnicastProcessor subject;",
          "831:                                 final UnicastProcessor ds = dataReference.subject.get();",
          "832:                                 if (ds != null) {",
          "833:                                     subject = ds;",
          "834:                                 } else {",
          "835:                                     subject = namedSubject;",
          "836:                                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1004:                 RouteMatch<?> routeMatch = finalRoute;",
          "1005:                 MutableHttpResponse<?> finalResponse = messageToResponse(routeMatch, message);",
          "1006:                 if (requestReference.get().getMethod().equals(HttpMethod.HEAD)) {",
          "1011:                     finalResponse.body(null);",
          "1012:                 }",
          "1013:                 HttpStatus status = finalResponse.getStatus();",
          "",
          "[Removed Lines]",
          "1007:                     finalResponse.getBody()",
          "1008:                             .filter(ReferenceCounted.class::isInstance)",
          "1009:                             .map(ReferenceCounted.class::cast)",
          "1010:                             .ifPresent(ReferenceCounted::release);",
          "",
          "[Added Lines]",
          "1013:                     final Object o = finalResponse.getBody().orElse(null);",
          "1014:                     if (o instanceof ReferenceCounted) {",
          "1015:                         ((ReferenceCounted) o).release();",
          "1016:                     }",
          "",
          "---------------"
        ],
        "router/src/main/java/io/micronaut/web/router/DefaultUriRouteMatch.java||router/src/main/java/io/micronaut/web/router/DefaultUriRouteMatch.java": [
          "File: router/src/main/java/io/micronaut/web/router/DefaultUriRouteMatch.java -> router/src/main/java/io/micronaut/web/router/DefaultUriRouteMatch.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import io.micronaut.core.annotation.Internal;",
          "19: import io.micronaut.core.convert.ConversionService;",
          "20: import io.micronaut.core.type.Argument;",
          "21: import io.micronaut.http.HttpMethod;",
          "22: import io.micronaut.http.uri.UriMatchInfo;",
          "23: import io.micronaut.http.uri.UriMatchVariable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import io.micronaut.core.util.CollectionUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import java.util.List;",
          "31: import java.util.Map;",
          "32: import java.util.Optional;",
          "33: import java.util.function.Function;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import java.util.function.BiConsumer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:     @Override",
          "123:     public Map<String, Object> getVariableValues() {",
          "124:         Map<String, Object> variables = matchInfo.getVariableValues();",
          "134:                 }",
          "137:         }",
          "139:     }",
          "141:     @Override",
          "",
          "[Removed Lines]",
          "125:         Map<String, Object> decoded = new LinkedHashMap<>(variables.size());",
          "126:         for (Map.Entry<String, Object> entry : variables.entrySet()) {",
          "127:             String k = entry.getKey();",
          "128:             Object v = entry.getValue();",
          "129:             if (v instanceof CharSequence) {",
          "130:                 try {",
          "131:                     v = URLDecoder.decode(v.toString(), defaultCharset.toString());",
          "132:                 } catch (UnsupportedEncodingException e) {",
          "135:             }",
          "136:             decoded.put(k, v);",
          "138:         return decoded;",
          "",
          "[Added Lines]",
          "127:         if (CollectionUtils.isNotEmpty(variables)) {",
          "128:             final String charset = defaultCharset.toString();",
          "129:             Map<String, Object> decoded = new LinkedHashMap<>(variables.size());",
          "130:             variables.forEach((k, v) -> {",
          "131:                 if (v instanceof CharSequence) {",
          "132:                     try {",
          "133:                         v = URLDecoder.decode(v.toString(), charset);",
          "134:                     } catch (UnsupportedEncodingException e) {",
          "136:                     }",
          "138:                 decoded.put(k, v);",
          "139:             });",
          "140:             return decoded;",
          "142:         return variables;",
          "",
          "---------------"
        ],
        "router/src/main/java/io/micronaut/web/router/UriRouteMatch.java||router/src/main/java/io/micronaut/web/router/UriRouteMatch.java": [
          "File: router/src/main/java/io/micronaut/web/router/UriRouteMatch.java -> router/src/main/java/io/micronaut/web/router/UriRouteMatch.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.web.router;",
          "18: import io.micronaut.core.type.Argument;",
          "19: import io.micronaut.http.HttpMethod;",
          "20: import io.micronaut.http.uri.UriMatchInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import io.micronaut.core.util.ArrayUtils;",
          "20: import io.micronaut.core.util.CollectionUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     default List<Argument> getRequiredArguments() {",
          "51:         Argument[] arguments = getArguments();",
          "59:                     actualArguments.add(argument);",
          "60:                 }",
          "61:             }",
          "65:     }",
          "",
          "[Removed Lines]",
          "49:         Map<String, Object> matchVariables = getVariableValues();",
          "52:         List<Argument> actualArguments = new ArrayList<>(arguments.length);",
          "53:         Argument<?> body = getBodyArgument().orElse(null);",
          "54:         for (Argument argument : arguments) {",
          "55:             if (!matchVariables.containsKey(argument.getName())) {",
          "56:                 if (body != null && body.getName().equals(argument.getName())) {",
          "57:                     actualArguments.add(body);",
          "58:                 } else {",
          "62:         }",
          "64:         return actualArguments;",
          "",
          "[Added Lines]",
          "52:         if (ArrayUtils.isNotEmpty(arguments)) {",
          "53:             Map<String, Object> matchVariables = getVariableValues();",
          "54:             List<Argument> actualArguments = new ArrayList<>(arguments.length);",
          "55:             for (Argument argument : arguments) {",
          "56:                 if (!matchVariables.containsKey(argument.getName())) {",
          "61:             return actualArguments;",
          "62:         }",
          "63:         return Collections.emptyList();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90ece6343d9bb9383480131f125151b0d3f58581",
      "candidate_info": {
        "commit_hash": "90ece6343d9bb9383480131f125151b0d3f58581",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/90ece6343d9bb9383480131f125151b0d3f58581",
        "files": [
          "http/src/main/java/io/micronaut/http/HttpHeaders.java",
          "http/src/main/java/io/micronaut/http/HttpRequest.java",
          "http/src/main/java/io/micronaut/http/MediaType.java",
          "http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy"
        ],
        "message": "Add some media type sorting matching APIs\n\nSome of which are from https://github.com/micronaut-projects/micronaut-core/pull/1743",
        "before_after_code_files": [
          "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java",
          "http/src/main/java/io/micronaut/http/HttpRequest.java||http/src/main/java/io/micronaut/http/HttpRequest.java",
          "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java",
          "http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy||http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java",
            "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java"
          ],
          "candidate": [
            "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java",
            "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java"
          ]
        }
      },
      "candidate_diff": {
        "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java": [
          "File: http/src/main/java/io/micronaut/http/HttpHeaders.java -> http/src/main/java/io/micronaut/http/HttpHeaders.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.time.ZonedDateTime;",
          "25: import java.time.format.DateTimeFormatter;",
          "26: import java.time.format.DateTimeParseException;",
          "31: import java.util.stream.Collectors;",
          "32: import java.util.stream.Stream;",
          "",
          "[Removed Lines]",
          "27: import java.util.Arrays;",
          "28: import java.util.List;",
          "29: import java.util.Optional;",
          "30: import java.util.OptionalLong;",
          "",
          "[Added Lines]",
          "27: import java.util.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "501:     default OptionalLong contentLength() {",
          "504:     }",
          "",
          "[Removed Lines]",
          "502:         Optional<Long> optional = getFirst(HttpHeaders.CONTENT_LENGTH, ConversionContext.LONG);",
          "503:         return optional.map(OptionalLong::of).orElseGet(OptionalLong::empty);",
          "",
          "[Added Lines]",
          "499:         final Long aLong = getFirst(HttpHeaders.CONTENT_LENGTH, ConversionContext.LONG).orElse(null);",
          "500:         if (aLong != null) {",
          "501:             return OptionalLong.of(aLong);",
          "502:         } else {",
          "503:             return OptionalLong.empty();",
          "504:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "511:     default List<MediaType> accept() {",
          "518:     }",
          "523:     default boolean isKeepAlive() {",
          "525:     }",
          "",
          "[Removed Lines]",
          "512:         return getAll(HttpHeaders.ACCEPT)",
          "513:             .stream()",
          "514:             .flatMap(x -> Arrays.stream(x.split(\",\")))",
          "515:             .flatMap(s -> ConversionService.SHARED.convert(s, MediaType.CONVERSION_CONTEXT).map(Stream::of).orElse(Stream.empty()))",
          "516:             .distinct()",
          "517:             .collect(Collectors.toList());",
          "524:         return getFirst(CONNECTION, ConversionContext.STRING).map(val -> val.equalsIgnoreCase(\"keep-alive\")).orElse(false);",
          "",
          "[Added Lines]",
          "513:         final List<String> values = getAll(HttpHeaders.ACCEPT);",
          "514:         if (!values.isEmpty()) {",
          "515:             List<MediaType> mediaTypes = new ArrayList<>(10);",
          "516:             for (String value : values) {",
          "517:                 final String[] tokens = value.split(\",\");",
          "518:                 for (String token : tokens) {",
          "519:                     try {",
          "520:                         mediaTypes.add(new MediaType(token));",
          "521:                     } catch (IllegalArgumentException e) {",
          "523:                     }",
          "524:                 }",
          "525:             }",
          "526:             return mediaTypes;",
          "527:         } else {",
          "528:             return Collections.emptyList();",
          "529:         }",
          "536:         return getFirst(CONNECTION, ConversionContext.STRING)",
          "537:                  .map(val -> val.equalsIgnoreCase(\"keep-alive\")).orElse(false);",
          "",
          "---------------"
        ],
        "http/src/main/java/io/micronaut/http/HttpRequest.java||http/src/main/java/io/micronaut/http/HttpRequest.java": [
          "File: http/src/main/java/io/micronaut/http/HttpRequest.java -> http/src/main/java/io/micronaut/http/HttpRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.net.URI;",
          "24: import java.security.Principal;",
          "25: import java.security.cert.Certificate;",
          "",
          "[Removed Lines]",
          "26: import java.util.Locale;",
          "27: import java.util.Objects;",
          "28: import java.util.Optional;",
          "",
          "[Added Lines]",
          "26: import java.util.*;",
          "27: import java.util.stream.Collectors;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     @NonNull URI getUri();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     default Collection<MediaType> accept() {",
          "65:         final List<String> values = getHeaders().getAll(HttpHeaders.ACCEPT);",
          "66:         if (!values.isEmpty()) {",
          "67:             Set<MediaType> mediaTypes = new TreeSet<>();",
          "68:             for (String value : values) {",
          "69:                 final String[] tokens = value.split(\",\");",
          "70:                 for (String token : tokens) {",
          "71:                     try {",
          "72:                         mediaTypes.add(new MediaType(token));",
          "73:                     } catch (IllegalArgumentException e) {",
          "75:                     }",
          "76:                 }",
          "77:             }",
          "78:             return Collections.unmodifiableSet(mediaTypes);",
          "79:         } else {",
          "80:             return Collections.emptySet();",
          "81:         }",
          "82:     }",
          "",
          "---------------"
        ],
        "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java": [
          "File: http/src/main/java/io/micronaut/http/MediaType.java -> http/src/main/java/io/micronaut/http/MediaType.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import io.micronaut.core.util.StringUtils;",
          "26: import io.micronaut.core.value.OptionalValues;",
          "27: import io.micronaut.http.annotation.Produces;",
          "28: import org.slf4j.Logger;",
          "29: import org.slf4j.LoggerFactory;",
          "31: import java.io.BufferedReader;",
          "32: import java.io.IOException;",
          "33: import java.io.InputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.jetbrains.annotations.NotNull;",
          "32: import javax.annotation.Nonnull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: @TypeHint(value = MediaType[].class)",
          "",
          "[Removed Lines]",
          "58: public class MediaType implements CharSequence {",
          "",
          "[Added Lines]",
          "60: public class MediaType implements CharSequence, Comparable<MediaType> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "403:         if (name == null) {",
          "404:             throw new IllegalArgumentException(\"Argument [name] cannot be null\");",
          "405:         }",
          "406:         String withoutArgs;",
          "407:         this.parameters = new LinkedHashMap<>();",
          "408:         if (name.contains(SEMICOLON)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:         name = name.trim();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "447:         this.strRepr = toString0();",
          "448:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:     public boolean matches(@Nonnull MediaType expectedContentType) {",
          "461:         if (expectedContentType == null) {",
          "462:             return false;",
          "463:         }",
          "464:         String expectedType = expectedContentType.getType();",
          "465:         String expectedSubtype = expectedContentType.getSubtype();",
          "466:         boolean typeMatch = type.equals(\"*\") || type.equalsIgnoreCase(expectedType);",
          "467:         boolean subtypeMatch = subtype.equals(\"*\") || subtype.equalsIgnoreCase(expectedSubtype);",
          "468:         return typeMatch && subtypeMatch;",
          "469:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "718:         return Collections.emptyMap();",
          "719:     }",
          "720: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:     @Override",
          "743:     public int compareTo(@NotNull MediaType other) {",
          "745:         if (type.equals(\"*\")) {",
          "746:             return 1;",
          "747:         } else if (other.type.equals(\"*\")) {",
          "748:             return -1;",
          "749:         }",
          "750:         if (other.subtype.equals(\"*\") && !subtype.equals(\"*\")) {",
          "751:             return -1;",
          "752:         } else if (subtype.equals(\"*\") && !other.subtype.equals(\"*\")) {",
          "753:             return 1;",
          "754:         }",
          "755:         return other.getQualityAsNumber().compareTo(getQualityAsNumber());",
          "756:     }",
          "",
          "---------------"
        ],
        "http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy||http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy": [
          "File: http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy -> http/src/test/groovy/io/micronaut/http/MediaTypeSpec.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         mediaType.toString() == fullName",
          "37:         mediaType.name == expectedName",
          "38:         mediaType.extension == expectedExt",
          "40:         mediaType.qualityAsNumber == quality",
          "41:         mediaType.subtype == subtype",
          "42:         mediaType.type == type",
          "",
          "[Removed Lines]",
          "39:         mediaType.parameters == OptionalValues.of(String,expectedParams)",
          "",
          "[Added Lines]",
          "39:         mediaType.parameters == OptionalValues.of(String, expectedParams)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:         MediaType.isTextBased(contentType) == expected",
          "77:         where:",
          "94:     }",
          "96:     @Issue(\"https://github.com/micronaut-projects/micronaut-core/issues/2746\")",
          "",
          "[Removed Lines]",
          "78:         contentType                  | expected",
          "79:         \"application/hal+xml;q=1.1\"  | true",
          "80:         \"application/hal+xml;q=1.1\"  | true",
          "81:         \"application/hal+json\"       | true",
          "82:         \"application/hal+xml\"        | true",
          "83:         \"application/json\"           | true",
          "84:         \"application/xml\"            | true",
          "85:         \"text/html;charset=utf-8\"    | true",
          "86:         \"text/foo\"                   | true",
          "87:         \"application/hal+text\"       | true",
          "88:         \"application/javascript\"     | true",
          "89:         \"image/png\"                  | false",
          "90:         \"image/jpg\"                  | false",
          "91:         \"multipart/form-data\"        | false",
          "92:         \"application/x-json-stream\"  | false",
          "93:         \"invalid\"                    | false",
          "",
          "[Added Lines]",
          "78:         contentType                 | expected",
          "79:         \"application/hal+xml;q=1.1\" | true",
          "80:         \"application/hal+xml;q=1.1\" | true",
          "81:         \"application/hal+json\"      | true",
          "82:         \"application/hal+xml\"       | true",
          "83:         \"application/json\"          | true",
          "84:         \"application/xml\"           | true",
          "85:         \"text/html;charset=utf-8\"   | true",
          "86:         \"text/foo\"                  | true",
          "87:         \"application/hal+text\"      | true",
          "88:         \"application/javascript\"    | true",
          "89:         \"image/png\"                 | false",
          "90:         \"image/jpg\"                 | false",
          "91:         \"multipart/form-data\"       | false",
          "92:         \"application/x-json-stream\" | false",
          "93:         \"invalid\"                   | false",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:         noExceptionThrown()",
          "103:         mt.getParameters().get(\"charset\").get() == \"UTF-8\"",
          "104:     }",
          "105: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     @Unroll",
          "107:     void \"test order types: #commaSeparatedList\"() {",
          "108:         given:",
          "109:         List<MediaType> orderedList = MediaType.of(commaSeparatedList.split(',')).toList().sort()",
          "111:         expect:",
          "112:         orderedList.size == expectedList.size",
          "113:         for (int i = 0; i < orderedList.size(); i++) {",
          "114:             assert (orderedList.get(i).equals(expectedList.get(i)) == true)",
          "115:         }",
          "117:         where:",
          "118:         commaSeparatedList                                | expectedList",
          "119:         \"audio/basic;q=.5, application/json\"              | [new MediaType(\"application/json\"), new MediaType(\"audio/basic;q=.5\")]",
          "120:         \"text/html\"                                       | [new MediaType(\"text/html\")]",
          "121:         \"*/*, text/*, text/html\"                          | [new MediaType(\"text/html\"), new MediaType(\"text/*\"), new MediaType(\"*/*\")]",
          "122:         \"text/html;level=1, text/html;level=2;q=.3\"       | [new MediaType(\"text/html;level=1\"), new MediaType(\"text/html;level=2;q=.3\")]",
          "123:         \"text/*;blah=1, text/html;q=.3, audio/basic;q=.4\" | [new MediaType(\"audio/basic;q=.4\"), new MediaType(\"text/html;q=.3\"), new MediaType(\"text/*;blah=1\")]",
          "124:         \"text/plain, text/html, application/json;q=1\"     | [new MediaType(\"text/plain\"), new MediaType(\"text/html\"), new MediaType(\"application/json;q=1\")]",
          "125:     }",
          "127:     @Unroll",
          "128:     void \"test type match #desiredType\"() {",
          "129:         given:",
          "130:         boolean match = new MediaType(desiredType).matches(new MediaType(expectedType))",
          "132:         expect:",
          "133:         match == expectedMatch",
          "135:         where:",
          "136:         desiredType             | expectedType          | expectedMatch",
          "137:         \"text/html\"             | \"text/html\"           | true",
          "138:         \"text/*\"                | \"text/html\"           | true",
          "139:         \"*/*\"                   | \"application/xml\"     | true",
          "140:         \"text/plain\"            | \"text/hml\"            | false",
          "141:         \"text/*\"                | \"application/json\"    | false",
          "142:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4af46bf8c2d9db1f800f6e424b003070a0232b8",
      "candidate_info": {
        "commit_hash": "b4af46bf8c2d9db1f800f6e424b003070a0232b8",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/b4af46bf8c2d9db1f800f6e424b003070a0232b8",
        "files": [
          "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java"
        ],
        "message": "Modify the cors origin converter so it is used",
        "before_after_code_files": [
          "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java"
          ],
          "candidate": [
            "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java"
          ]
        }
      },
      "candidate_diff": {
        "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java": [
          "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: @Singleton",
          "48:     private static final ArgumentConversionContext<List<HttpMethod>> CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD = ConversionContext.of(Argument.listOf(HttpMethod.class));",
          "50:     @Override",
          "52:         CorsOriginConfiguration configuration = new CorsOriginConfiguration();",
          "81:         return Optional.of(configuration);",
          "82:     }",
          "83: }",
          "",
          "[Removed Lines]",
          "39: public class CorsOriginConverter implements TypeConverter<Object, CorsOriginConfiguration> {",
          "41:     private static final String ALLOWED_ORIGINS = \"allowedOrigins\";",
          "42:     private static final String ALLOWED_METHODS = \"allowedMethods\";",
          "43:     private static final String ALLOWED_HEADERS = \"allowedHeaders\";",
          "44:     private static final String EXPOSED_HEADERS = \"exposedHeaders\";",
          "45:     private static final String ALLOW_CREDENTIALS = \"allowCredentials\";",
          "46:     private static final String MAX_AGE = \"maxAge\";",
          "51:     public Optional<CorsOriginConfiguration> convert(Object object, Class<CorsOriginConfiguration> targetType, ConversionContext context) {",
          "53:         if (object instanceof Map) {",
          "54:             Map mapConfig = (Map) object;",
          "55:             ConvertibleValues<Object> convertibleValues = new ConvertibleValuesMap<>(mapConfig);",
          "57:             convertibleValues",
          "58:                 .get(ALLOWED_ORIGINS, ConversionContext.LIST_OF_STRING)",
          "59:                 .ifPresent(configuration::setAllowedOrigins);",
          "61:             convertibleValues",
          "62:                 .get(ALLOWED_METHODS, CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD)",
          "63:                 .ifPresent(configuration::setAllowedMethods);",
          "65:             convertibleValues",
          "66:                 .get(ALLOWED_HEADERS, ConversionContext.LIST_OF_STRING)",
          "67:                 .ifPresent(configuration::setAllowedHeaders);",
          "69:             convertibleValues",
          "70:                 .get(EXPOSED_HEADERS, ConversionContext.LIST_OF_STRING)",
          "71:                 .ifPresent(configuration::setExposedHeaders);",
          "73:             convertibleValues",
          "74:                 .get(ALLOW_CREDENTIALS, ConversionContext.BOOLEAN)",
          "75:                 .ifPresent(configuration::setAllowCredentials);",
          "77:             convertibleValues",
          "78:                 .get(MAX_AGE, ConversionContext.LONG)",
          "79:                 .ifPresent(configuration::setMaxAge);",
          "80:         }",
          "",
          "[Added Lines]",
          "39: public class CorsOriginConverter implements TypeConverter<Map<String, Object>, CorsOriginConfiguration> {",
          "41:     private static final String ALLOWED_ORIGINS = \"allowed-origins\";",
          "42:     private static final String ALLOWED_METHODS = \"allowed-methods\";",
          "43:     private static final String ALLOWED_HEADERS = \"allowed-headers\";",
          "44:     private static final String EXPOSED_HEADERS = \"exposed-headers\";",
          "45:     private static final String ALLOW_CREDENTIALS = \"allow-credentials\";",
          "46:     private static final String MAX_AGE = \"max-age\";",
          "51:     public Optional<CorsOriginConfiguration> convert(Map<String, Object> object, Class<CorsOriginConfiguration> targetType, ConversionContext context) {",
          "53:         ConvertibleValues<Object> convertibleValues = new ConvertibleValuesMap<>(object);",
          "55:         convertibleValues",
          "56:             .get(ALLOWED_ORIGINS, ConversionContext.LIST_OF_STRING)",
          "57:             .ifPresent(configuration::setAllowedOrigins);",
          "59:         convertibleValues",
          "60:             .get(ALLOWED_METHODS, CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD)",
          "61:             .ifPresent(configuration::setAllowedMethods);",
          "63:         convertibleValues",
          "64:             .get(ALLOWED_HEADERS, ConversionContext.LIST_OF_STRING)",
          "65:             .ifPresent(configuration::setAllowedHeaders);",
          "67:         convertibleValues",
          "68:             .get(EXPOSED_HEADERS, ConversionContext.LIST_OF_STRING)",
          "69:             .ifPresent(configuration::setExposedHeaders);",
          "71:         convertibleValues",
          "72:             .get(ALLOW_CREDENTIALS, ConversionContext.BOOLEAN)",
          "73:             .ifPresent(configuration::setAllowCredentials);",
          "75:         convertibleValues",
          "76:             .get(MAX_AGE, ConversionContext.LONG)",
          "77:             .ifPresent(configuration::setMaxAge);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0823bdb2990fb54fe098caedea9dd752a8a21fb",
      "candidate_info": {
        "commit_hash": "d0823bdb2990fb54fe098caedea9dd752a8a21fb",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/d0823bdb2990fb54fe098caedea9dd752a8a21fb",
        "files": [
          "aop/src/main/java/io/micronaut/aop/chain/InterceptorChain.java",
          "buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBufferFactory.java",
          "core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java",
          "core/src/main/java/io/micronaut/core/annotation/EmptyAnnotationMetadata.java",
          "core/src/main/java/io/micronaut/core/async/SupplierUtil.java",
          "core/src/main/java/io/micronaut/core/async/publisher/Publishers.java",
          "core/src/main/java/io/micronaut/core/async/subscriber/SingleThreadedBufferingSubscriber.java",
          "core/src/main/java/io/micronaut/core/beans/SimpleBeanInfo.java",
          "core/src/main/java/io/micronaut/core/cli/CommandLineParser.java",
          "core/src/main/java/io/micronaut/core/cli/DefaultCommandLine.java",
          "core/src/main/java/io/micronaut/core/convert/DefaultConversionService.java",
          "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
          "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValuesMap.java",
          "core/src/main/java/io/micronaut/core/io/Writable.java",
          "core/src/main/java/io/micronaut/core/io/scan/CachingClassPathAnnotationScanner.java",
          "core/src/main/java/io/micronaut/core/io/service/DefaultServiceDefinition.java",
          "core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java",
          "core/src/main/java/io/micronaut/core/naming/NameUtils.java",
          "core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java",
          "core/src/main/java/io/micronaut/core/reflect/ReflectionUtils.java",
          "core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
          "core/src/main/java/io/micronaut/core/type/ReturnType.java",
          "core/src/main/java/io/micronaut/core/util/StringUtils.java",
          "core/src/main/java/io/micronaut/core/util/clhm/ConcurrentLinkedHashMap.java"
        ],
        "message": "Clean-up core code (#3597)",
        "before_after_code_files": [
          "aop/src/main/java/io/micronaut/aop/chain/InterceptorChain.java||aop/src/main/java/io/micronaut/aop/chain/InterceptorChain.java",
          "buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBufferFactory.java||buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBufferFactory.java",
          "core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java||core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java",
          "core/src/main/java/io/micronaut/core/annotation/EmptyAnnotationMetadata.java||core/src/main/java/io/micronaut/core/annotation/EmptyAnnotationMetadata.java",
          "core/src/main/java/io/micronaut/core/async/SupplierUtil.java||core/src/main/java/io/micronaut/core/async/SupplierUtil.java",
          "core/src/main/java/io/micronaut/core/async/publisher/Publishers.java||core/src/main/java/io/micronaut/core/async/publisher/Publishers.java",
          "core/src/main/java/io/micronaut/core/async/subscriber/SingleThreadedBufferingSubscriber.java||core/src/main/java/io/micronaut/core/async/subscriber/SingleThreadedBufferingSubscriber.java",
          "core/src/main/java/io/micronaut/core/beans/SimpleBeanInfo.java||core/src/main/java/io/micronaut/core/beans/SimpleBeanInfo.java",
          "core/src/main/java/io/micronaut/core/cli/CommandLineParser.java||core/src/main/java/io/micronaut/core/cli/CommandLineParser.java",
          "core/src/main/java/io/micronaut/core/cli/DefaultCommandLine.java||core/src/main/java/io/micronaut/core/cli/DefaultCommandLine.java",
          "core/src/main/java/io/micronaut/core/convert/DefaultConversionService.java||core/src/main/java/io/micronaut/core/convert/DefaultConversionService.java",
          "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
          "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValuesMap.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValuesMap.java",
          "core/src/main/java/io/micronaut/core/io/Writable.java||core/src/main/java/io/micronaut/core/io/Writable.java",
          "core/src/main/java/io/micronaut/core/io/scan/CachingClassPathAnnotationScanner.java||core/src/main/java/io/micronaut/core/io/scan/CachingClassPathAnnotationScanner.java",
          "core/src/main/java/io/micronaut/core/io/service/DefaultServiceDefinition.java||core/src/main/java/io/micronaut/core/io/service/DefaultServiceDefinition.java",
          "core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java||core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java",
          "core/src/main/java/io/micronaut/core/naming/NameUtils.java||core/src/main/java/io/micronaut/core/naming/NameUtils.java",
          "core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java||core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java",
          "core/src/main/java/io/micronaut/core/reflect/ReflectionUtils.java||core/src/main/java/io/micronaut/core/reflect/ReflectionUtils.java",
          "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
          "core/src/main/java/io/micronaut/core/type/ReturnType.java||core/src/main/java/io/micronaut/core/type/ReturnType.java",
          "core/src/main/java/io/micronaut/core/util/StringUtils.java||core/src/main/java/io/micronaut/core/util/StringUtils.java",
          "core/src/main/java/io/micronaut/core/util/clhm/ConcurrentLinkedHashMap.java||core/src/main/java/io/micronaut/core/util/clhm/ConcurrentLinkedHashMap.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
            "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java"
          ],
          "candidate": [
            "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
            "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java"
          ]
        }
      },
      "candidate_diff": {
        "aop/src/main/java/io/micronaut/aop/chain/InterceptorChain.java||aop/src/main/java/io/micronaut/aop/chain/InterceptorChain.java": [
          "File: aop/src/main/java/io/micronaut/aop/chain/InterceptorChain.java -> aop/src/main/java/io/micronaut/aop/chain/InterceptorChain.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:         }",
          "299:         Interceptor[] interceptorArray = Arrays.stream(interceptors)",
          "301:             .toArray(Interceptor[]::new);",
          "302:         OrderUtil.sort(interceptorArray);",
          "303:         return interceptorArray;",
          "",
          "[Removed Lines]",
          "300:             .filter(i -> applicableClasses.stream().anyMatch((t) -> t.isInstance(i)))",
          "",
          "[Added Lines]",
          "300:             .filter(i -> applicableClasses.stream().anyMatch(t -> t.isInstance(i)))",
          "",
          "---------------"
        ],
        "buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBufferFactory.java||buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBufferFactory.java": [
          "File: buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBufferFactory.java -> buffer-netty/src/main/java/io/micronaut/buffer/netty/NettyByteBufferFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import io.netty.buffer.Unpooled;",
          "27: import javax.inject.Singleton;",
          "",
          "[Removed Lines]",
          "28: import java.util.function.Function;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     private final ByteBufAllocator allocator;",
          "48:     static {",
          "51:             if (byteBuffer instanceof NettyByteBuffer) {",
          "52:                 return (ByteBuf) byteBuffer.asNativeBuffer();",
          "53:             }",
          "",
          "[Removed Lines]",
          "49:         ConversionService.SHARED.addConverter(ByteBuf.class, ByteBuffer.class, (Function<ByteBuf, ByteBuffer>) DEFAULT::wrap);",
          "50:         ConversionService.SHARED.addConverter(ByteBuffer.class, ByteBuf.class, (Function<ByteBuffer, ByteBuf>) byteBuffer -> {",
          "",
          "[Added Lines]",
          "48:         ConversionService.SHARED.addConverter(ByteBuf.class, ByteBuffer.class, DEFAULT::wrap);",
          "49:         ConversionService.SHARED.addConverter(ByteBuffer.class, ByteBuf.class, byteBuffer -> {",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java||core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java": [
          "File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java -> core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:             Optional<? extends AnnotationValue<? extends Annotation>> values = findAnnotation(annotation);",
          "349:             Optional<T> value = values.flatMap(av -> av.get(member, requiredType));",
          "354:             }",
          "355:             return value;",
          "356:         }",
          "",
          "[Removed Lines]",
          "350:             if (!value.isPresent()) {",
          "351:                 if (hasStereotype(annotation)) {",
          "352:                     return getDefaultValue(annotation, member, requiredType);",
          "353:                 }",
          "",
          "[Added Lines]",
          "350:             if (!value.isPresent() && hasStereotype(annotation)) {",
          "351:                 return getDefaultValue(annotation, member, requiredType);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:         ArgumentUtils.requireNonNull(\"requiredType\", requiredType);",
          "565:         Optional<T> value = findAnnotation(annotation).flatMap(av -> av.get(member, requiredType));",
          "570:         }",
          "571:         return value;",
          "572:     }",
          "",
          "[Removed Lines]",
          "566:         if (!value.isPresent()) {",
          "567:             if (hasStereotype(annotation)) {",
          "568:                 return getDefaultValue(annotation, member, requiredType);",
          "569:             }",
          "",
          "[Added Lines]",
          "564:         if (!value.isPresent() && hasStereotype(annotation)) {",
          "565:             return getDefaultValue(annotation, member, requiredType);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "794:         ArgumentUtils.requireNonNull(\"annotation\", annotation);",
          "795:         ArgumentUtils.requireNonNull(\"member\", member);",
          "800:     }",
          "",
          "[Removed Lines]",
          "797:         Optional value = getValue(annotation, member, Class.class);",
          "799:         return value;",
          "",
          "[Added Lines]",
          "793:         return getValue(annotation, member, Class.class);",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/annotation/EmptyAnnotationMetadata.java||core/src/main/java/io/micronaut/core/annotation/EmptyAnnotationMetadata.java": [
          "File: core/src/main/java/io/micronaut/core/annotation/EmptyAnnotationMetadata.java -> core/src/main/java/io/micronaut/core/annotation/EmptyAnnotationMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     @Override",
          "59:     public List<String> getAnnotationNamesByStereotype(@Nullable String stereotype) {",
          "62:     }",
          "64:     @NonNull",
          "65:     @Override",
          "66:     public Set<String> getAnnotationNames() {",
          "69:     }",
          "71:     @NonNull",
          "72:     @Override",
          "73:     public Set<String> getDeclaredAnnotationNames() {",
          "76:     }",
          "78:     @NonNull",
          "79:     @Override",
          "80:     public List<String> getDeclaredAnnotationNamesByStereotype(@Nullable String stereotype) {",
          "83:     }",
          "85:     @NonNull",
          "",
          "[Removed Lines]",
          "61:         return Collections.EMPTY_LIST;",
          "68:         return Collections.EMPTY_SET;",
          "75:         return Collections.EMPTY_SET;",
          "82:         return Collections.EMPTY_LIST;",
          "",
          "[Added Lines]",
          "61:         return Collections.emptyList();",
          "68:         return Collections.emptySet();",
          "75:         return Collections.emptySet();",
          "82:         return Collections.emptyList();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:     @Override",
          "99:     public <T extends Annotation> List<AnnotationValue<T>> getAnnotationValuesByType(@NonNull Class<T> annotationType) {",
          "102:     }",
          "104:     @NonNull",
          "105:     @Override",
          "106:     public <T extends Annotation> List<AnnotationValue<T>> getDeclaredAnnotationValuesByType(@NonNull Class<T> annotationType) {",
          "109:     }",
          "111:     @Override",
          "",
          "[Removed Lines]",
          "101:         return Collections.EMPTY_LIST;",
          "108:         return Collections.EMPTY_LIST;",
          "",
          "[Added Lines]",
          "101:         return Collections.emptyList();",
          "108:         return Collections.emptyList();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:     @NonNull",
          "142:     @Override",
          "143:     public Map<String, Object> getDefaultValues(@NonNull String annotation) {",
          "145:     }",
          "147:     @Override",
          "",
          "[Removed Lines]",
          "144:         return Collections.EMPTY_MAP;",
          "",
          "[Added Lines]",
          "144:         return Collections.emptyMap();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "230:     @Override",
          "231:     public List<String> getAnnotationNamesByStereotype(@NonNull Class<? extends Annotation> stereotype) {",
          "234:     }",
          "236:     @NonNull",
          "237:     @Override",
          "238:     public List<Class<? extends Annotation>> getAnnotationTypesByStereotype(@NonNull Class<? extends Annotation> stereotype) {",
          "241:     }",
          "243:     @Override",
          "",
          "[Removed Lines]",
          "233:         return Collections.EMPTY_LIST;",
          "240:         return Collections.EMPTY_LIST;",
          "",
          "[Added Lines]",
          "233:         return Collections.emptyList();",
          "240:         return Collections.emptyList();",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/async/SupplierUtil.java||core/src/main/java/io/micronaut/core/async/SupplierUtil.java": [
          "File: core/src/main/java/io/micronaut/core/async/SupplierUtil.java -> core/src/main/java/io/micronaut/core/async/SupplierUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:             Supplier<T> delegate = this::initialize;",
          "39:             boolean initialized;",
          "41:             public T get() {",
          "42:                 return delegate.get();",
          "43:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:             @Override",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:             Supplier<T> delegate = this::initialize;",
          "67:             boolean initialized;",
          "69:             public T get() {",
          "70:                 return delegate.get();",
          "71:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:             @Override",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:                     if (value == null) {",
          "77:                         return null;",
          "78:                     }",
          "83:                     }",
          "84:                     delegate = () -> value;",
          "85:                     initialized = true;",
          "",
          "[Removed Lines]",
          "79:                     if (value instanceof Optional) {",
          "80:                         if (!((Optional) value).isPresent()) {",
          "81:                             return value;",
          "82:                         }",
          "",
          "[Added Lines]",
          "81:                     if (value instanceof Optional && !((Optional) value).isPresent()) {",
          "82:                         return value;",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/async/publisher/Publishers.java||core/src/main/java/io/micronaut/core/async/publisher/Publishers.java": [
          "File: core/src/main/java/io/micronaut/core/async/publisher/Publishers.java -> core/src/main/java/io/micronaut/core/async/publisher/Publishers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:         Objects.requireNonNull(object, \"Argument [object] cannot be null\");",
          "352:         Objects.requireNonNull(publisherType, \"Argument [publisherType] cannot be null\");",
          "353:         if (object instanceof CompletableFuture) {",
          "355:             return ConversionService.SHARED.convert(futurePublisher, publisherType)",
          "356:                     .orElseThrow(() -> unconvertibleError(object, publisherType));",
          "357:         } else {",
          "",
          "[Removed Lines]",
          "354:             @SuppressWarnings(\"unchecked\") Publisher<T> futurePublisher = (Publisher<T>) Publishers.fromCompletableFuture(() -> ((CompletableFuture) object));",
          "",
          "[Added Lines]",
          "354:             @SuppressWarnings(\"unchecked\") Publisher<T> futurePublisher = Publishers.fromCompletableFuture(() -> ((CompletableFuture) object));",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/async/subscriber/SingleThreadedBufferingSubscriber.java||core/src/main/java/io/micronaut/core/async/subscriber/SingleThreadedBufferingSubscriber.java": [
          "File: core/src/main/java/io/micronaut/core/async/subscriber/SingleThreadedBufferingSubscriber.java -> core/src/main/java/io/micronaut/core/async/subscriber/SingleThreadedBufferingSubscriber.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:         return new DownstreamSubscription();",
          "165:     }",
          "191:     private boolean registerDemand(long demand) {",
          "192:         if (demand <= 0) {",
          "193:             illegalDemand();",
          "",
          "[Removed Lines]",
          "167:     private void processDemand(long demand) {",
          "168:         switch (upstreamState) {",
          "169:             case BUFFERING:",
          "170:             case FLOWING:",
          "171:                 if (registerDemand(demand)) {",
          "172:                     flushBuffer();",
          "173:                 }",
          "174:                 break;",
          "176:             case DEMANDING:",
          "177:                 registerDemand(demand);",
          "178:                 break;",
          "180:             case IDLE:",
          "181:                 if (registerDemand(demand)) {",
          "182:                     upstreamState = BackPressureState.DEMANDING;",
          "183:                     flushBuffer();",
          "184:                 }",
          "185:                 break;",
          "186:             default:",
          "188:         }",
          "189:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:         public synchronized void cancel() {",
          "273:             upstreamSubscription.cancel();",
          "274:         }",
          "275:     }",
          "276: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:         private void processDemand(long demand) {",
          "253:             switch (upstreamState) {",
          "254:                 case BUFFERING:",
          "255:                 case FLOWING:",
          "256:                     if (registerDemand(demand)) {",
          "257:                         flushBuffer();",
          "258:                     }",
          "259:                     break;",
          "261:                 case DEMANDING:",
          "262:                     registerDemand(demand);",
          "263:                     break;",
          "265:                 case IDLE:",
          "266:                     if (registerDemand(demand)) {",
          "267:                         upstreamState = BackPressureState.DEMANDING;",
          "268:                         flushBuffer();",
          "269:                     }",
          "270:                     break;",
          "271:                 default:",
          "273:             }",
          "274:         }",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/beans/SimpleBeanInfo.java||core/src/main/java/io/micronaut/core/beans/SimpleBeanInfo.java": [
          "File: core/src/main/java/io/micronaut/core/beans/SimpleBeanInfo.java -> core/src/main/java/io/micronaut/core/beans/SimpleBeanInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:         }",
          "186:         }",
          "",
          "[Removed Lines]",
          "182:         if (prefixLength == 2) {",
          "183:             if (!(propertyType == boolean.class)) {",
          "184:                 return;",
          "185:             }",
          "",
          "[Added Lines]",
          "182:         if (prefixLength == 2 && propertyType != boolean.class) {",
          "183:             return;",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/cli/CommandLineParser.java||core/src/main/java/io/micronaut/core/cli/CommandLineParser.java": [
          "File: core/src/main/java/io/micronaut/core/cli/CommandLineParser.java -> core/src/main/java/io/micronaut/core/cli/CommandLineParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     private static final String DEFAULT_PADDING = \"        \";",
          "43:     private int longestOptionNameLength = 0;",
          "44:     private String usageMessage;",
          "",
          "[Removed Lines]",
          "42:     private Map<String, Option> declaredOptions = new HashMap<String, Option>();",
          "",
          "[Added Lines]",
          "42:     private Map<String, Option> declaredOptions = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     CommandLine parse(DefaultCommandLine cl, String[] args) {",
          "83:         return cl;",
          "84:     }",
          "",
          "[Removed Lines]",
          "82:         parseInternal(cl, args, true);",
          "",
          "[Added Lines]",
          "82:         parseInternal(cl, args);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:         return sb.toString();",
          "106:     }",
          "109:         cl.setRawArguments(args);",
          "110:         String lastOptionName = null;",
          "111:         for (String arg : args) {",
          "",
          "[Removed Lines]",
          "108:     private void parseInternal(DefaultCommandLine cl, String[] args, boolean firstArgumentIsCommand) {",
          "",
          "[Added Lines]",
          "108:     private void parseInternal(DefaultCommandLine cl, String[] args) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:         final int inDoubleQuote = 2;",
          "222:         int state = normal;",
          "223:         final StringTokenizer tok = new StringTokenizer(toProcess, \"\\\"\\' \", true);",
          "225:         final StringBuilder current = new StringBuilder();",
          "226:         boolean lastTokenHasBeenQuoted = false;",
          "",
          "[Removed Lines]",
          "224:         final ArrayList<String> result = new ArrayList<String>();",
          "",
          "[Added Lines]",
          "224:         final ArrayList<String> result = new ArrayList<>();",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/cli/DefaultCommandLine.java||core/src/main/java/io/micronaut/core/cli/DefaultCommandLine.java": [
          "File: core/src/main/java/io/micronaut/core/cli/DefaultCommandLine.java -> core/src/main/java/io/micronaut/core/cli/DefaultCommandLine.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     private Properties systemProperties = new Properties();",
          "38:     private LinkedHashMap<String, Object> undeclaredOptions = new LinkedHashMap<>();",
          "39:     private LinkedHashMap<Option, Object> declaredOptions = new LinkedHashMap<>();",
          "41:     private String[] rawArguments = new String[0];",
          "43:     @Override",
          "",
          "[Removed Lines]",
          "40:     private List<String> remainingArgs = new ArrayList<String>();",
          "",
          "[Added Lines]",
          "40:     private List<String> remainingArgs = new ArrayList<>();",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/convert/DefaultConversionService.java||core/src/main/java/io/micronaut/core/convert/DefaultConversionService.java": [
          "File: core/src/main/java/io/micronaut/core/convert/DefaultConversionService.java -> core/src/main/java/io/micronaut/core/convert/DefaultConversionService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "718:             }",
          "719:             if (targetNumberType == Double.class) {",
          "720:                 return Optional.of(object.doubleValue());",
          "722:             if (targetNumberType == BigInteger.class) {",
          "723:                 if (object instanceof BigDecimal) {",
          "724:                     return Optional.of(((BigDecimal) object).toBigInteger());",
          "",
          "[Removed Lines]",
          "721:             }",
          "",
          "[Added Lines]",
          "721:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "964:         AnnotationMetadata annotationMetadata = context.getAnnotationMetadata();",
          "965:         Optional<String> format = annotationMetadata.stringValue(Format.class);",
          "966:         return format",
          "969:     }",
          "971:     private <S, T> ConvertiblePair newPair(Class<S> sourceType, Class<T> targetType, TypeConverter<S, T> typeConverter) {",
          "",
          "[Removed Lines]",
          "967:             .map((pattern) -> new SimpleDateFormat(pattern, context.getLocale()))",
          "968:             .orElse(new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\", context.getLocale()));",
          "",
          "[Added Lines]",
          "967:             .map(pattern -> new SimpleDateFormat(pattern, context.getLocale()))",
          "968:             .orElseGet(() -> new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\", context.getLocale()));",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java": [
          "File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java -> core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:         String finalPrefix = prefix + '.';",
          "200:         return names().stream()",
          "201:             .filter(name -> name.startsWith(finalPrefix))",
          "203:     }",
          "205:     @SuppressWarnings(\"NullableProblems\")",
          "",
          "[Removed Lines]",
          "202:             .collect(Collectors.toMap((name) -> name.substring(finalPrefix.length()), (name) -> get(name, valueType).orElse(null)));",
          "",
          "[Added Lines]",
          "202:             .collect(Collectors.toMap(name -> name.substring(finalPrefix.length()), name -> get(name, valueType).orElse(null)));",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValuesMap.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValuesMap.java": [
          "File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValuesMap.java -> core/src/main/java/io/micronaut/core/convert/value/ConvertibleValuesMap.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     @SuppressWarnings(\"unchecked\")",
          "104:     public static <V> ConvertibleValues<V> empty() {",
          "106:     }",
          "107: }",
          "",
          "[Removed Lines]",
          "105:         return (ConvertibleValues<V>) EMPTY;",
          "",
          "[Added Lines]",
          "105:         return EMPTY;",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/io/Writable.java||core/src/main/java/io/micronaut/core/io/Writable.java": [
          "File: core/src/main/java/io/micronaut/core/io/Writable.java -> core/src/main/java/io/micronaut/core/io/Writable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     default void writeTo(OutputStream outputStream) throws IOException {",
          "50:         writeTo(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8));",
          "51:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     @Override",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     default void writeTo(File file) throws IOException {",
          "60:         try (OutputStream outputStream = Files.newOutputStream(file.toPath())) {",
          "61:             writeTo(outputStream);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     @Override",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:     default void writeTo(OutputStream outputStream, @Nullable Charset charset) throws IOException {",
          "73:         OutputStreamWriter writer = new OutputStreamWriter(outputStream, charset == null ? StandardCharsets.UTF_8 : charset);",
          "74:         writeTo(writer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     @Override",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/io/scan/CachingClassPathAnnotationScanner.java||core/src/main/java/io/micronaut/core/io/scan/CachingClassPathAnnotationScanner.java": [
          "File: core/src/main/java/io/micronaut/core/io/scan/CachingClassPathAnnotationScanner.java -> core/src/main/java/io/micronaut/core/io/scan/CachingClassPathAnnotationScanner.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     @Override",
          "54:     protected List<Class> doScan(String annotation, String pkg) {",
          "56:     }",
          "62:         final String annotation;",
          "63:         final String pkg;",
          "",
          "[Removed Lines]",
          "55:         return initializedObjectsByType.computeIfAbsent(new CacheKey(annotation, pkg), (key) -> super.doScan(annotation, pkg));",
          "61:     private final class CacheKey implements Serializable {",
          "",
          "[Added Lines]",
          "55:         return initializedObjectsByType.computeIfAbsent(new CacheKey(annotation, pkg), key -> super.doScan(annotation, pkg));",
          "61:     private static final class CacheKey implements Serializable {",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/io/service/DefaultServiceDefinition.java||core/src/main/java/io/micronaut/core/io/service/DefaultServiceDefinition.java": [
          "File: core/src/main/java/io/micronaut/core/io/service/DefaultServiceDefinition.java -> core/src/main/java/io/micronaut/core/io/service/DefaultServiceDefinition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     public <X extends Throwable> S orElseThrow(Supplier<? extends X> exceptionSupplier) throws X {",
          "57:         final Class<S> type = loadedClass.orElseThrow(exceptionSupplier);",
          "58:         try {",
          "60:         } catch (Throwable e) {",
          "61:             throw exceptionSupplier.get();",
          "62:         }",
          "",
          "[Removed Lines]",
          "59:             return type.newInstance();",
          "",
          "[Added Lines]",
          "59:             return type.getDeclaredConstructor().newInstance();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     public S load() {",
          "67:         return loadedClass.map(aClass -> {",
          "68:             try {",
          "70:             } catch (Throwable e) {",
          "71:                 throw new ServiceConfigurationError(\"Error loading service [\" + aClass.getName() + \"]: \" + e.getMessage(), e);",
          "72:             }",
          "",
          "[Removed Lines]",
          "69:                 return aClass.newInstance();",
          "",
          "[Added Lines]",
          "69:                 return aClass.getDeclaredConstructor().newInstance();",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java||core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java": [
          "File: core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java -> core/src/main/java/io/micronaut/core/io/service/SoftServiceLoader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:                 if (loaded.hasNext()) {",
          "142:                     return true;",
          "143:                 }",
          "148:             }",
          "150:             @Override",
          "",
          "[Removed Lines]",
          "144:                 if (unloadedServices.hasNext()) {",
          "145:                     return true;",
          "146:                 }",
          "147:                 return false;",
          "",
          "[Added Lines]",
          "144:                 return unloadedServices.hasNext();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:                 try {",
          "204:                     try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))) {",
          "205:                         List<String> lines = reader.lines()",
          "207:                             .filter(condition)",
          "209:                                 int i = line.indexOf('#');",
          "210:                                 if (i > -1) {",
          "211:                                     line = line.substring(0, i);",
          "",
          "[Removed Lines]",
          "206:                             .filter((line) -> line.length() != 0 && line.charAt(0) != '#')",
          "208:                             .map((line) -> {",
          "",
          "[Added Lines]",
          "203:                             .filter(line -> line.length() != 0 && line.charAt(0) != '#')",
          "205:                             .map(line -> {",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/naming/NameUtils.java||core/src/main/java/io/micronaut/core/naming/NameUtils.java": [
          "File: core/src/main/java/io/micronaut/core/naming/NameUtils.java -> core/src/main/java/io/micronaut/core/naming/NameUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     public static String dehyphenate(String name) {",
          "138:         return Arrays.stream(name.split(\"-\"))",
          "140:                 if (str.length() > 0 && Character.isLetter(str.charAt(0))) {",
          "141:                     return Character.toUpperCase(str.charAt(0)) + str.substring(1);",
          "142:                 }",
          "",
          "[Removed Lines]",
          "139:             .map((str) -> {",
          "",
          "[Added Lines]",
          "139:             .map(str -> {",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java||core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java": [
          "File: core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java -> core/src/main/java/io/micronaut/core/reflect/InstantiationUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:                 logger.debug(\"Cannot instantiate type [{}] without reflection. Attempting reflective instantiation\", type);",
          "144:             }",
          "145:             try {",
          "147:                 if (type.isInstance(bean)) {",
          "148:                     return bean;",
          "149:                 }",
          "",
          "[Removed Lines]",
          "146:                 T bean = type.newInstance();",
          "",
          "[Added Lines]",
          "146:                 T bean = type.getDeclaredConstructor().newInstance();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:                     if (log.isDebugEnabled()) {",
          "210:                         log.debug(\"Reflectively instantiating type: \" + type);",
          "211:                     }",
          "213:                 } catch (Throwable e) {",
          "214:                     throw new InstantiationException(\"Could not instantiate type [\" + type.getName() + \"]: \" + e.getMessage(), e);",
          "215:                 }",
          "",
          "[Removed Lines]",
          "212:                     return type.newInstance();",
          "",
          "[Added Lines]",
          "212:                     return type.getDeclaredConstructor().newInstance();",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/reflect/ReflectionUtils.java||core/src/main/java/io/micronaut/core/reflect/ReflectionUtils.java": [
          "File: core/src/main/java/io/micronaut/core/reflect/ReflectionUtils.java -> core/src/main/java/io/micronaut/core/reflect/ReflectionUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:             }",
          "84:         });",
          "",
          "[Removed Lines]",
          "86:     private static final Map<Class<?>, Integer> PRIMITIVE_BYTE_SIZES =",
          "87:         Collections.unmodifiableMap(new LinkedHashMap<Class<?>, Integer>() {",
          "88:             {",
          "89:                 put(Byte.class, Byte.BYTES);",
          "90:                 put(Character.class, Character.BYTES);",
          "91:                 put(Double.class, Double.BYTES);",
          "92:                 put(Float.class, Float.BYTES);",
          "93:                 put(Integer.class, Integer.BYTES);",
          "94:                 put(Long.class, Long.BYTES);",
          "95:                 put(Short.class, Short.BYTES);",
          "96:             }",
          "97:         });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java": [
          "File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java -> core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:         this(type,",
          "63:              name,",
          "64:              annotationMetadata,",
          "66:              genericTypes",
          "67:         );",
          "68:     }",
          "",
          "[Removed Lines]",
          "65:              ArrayUtils.isNotEmpty(genericTypes) ? initializeTypeParameters(genericTypes) : Collections.EMPTY_MAP,",
          "",
          "[Added Lines]",
          "65:              ArrayUtils.isNotEmpty(genericTypes) ? initializeTypeParameters(genericTypes) : Collections.emptyMap(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:         this(type,",
          "77:                 null,",
          "78:                 annotationMetadata,",
          "80:                 genericTypes",
          "81:         );",
          "82:     }",
          "",
          "[Removed Lines]",
          "79:                 ArrayUtils.isNotEmpty(genericTypes) ? initializeTypeParameters(genericTypes) : Collections.EMPTY_MAP,",
          "",
          "[Added Lines]",
          "79:                 ArrayUtils.isNotEmpty(genericTypes) ? initializeTypeParameters(genericTypes) : Collections.emptyMap(),",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/type/ReturnType.java||core/src/main/java/io/micronaut/core/type/ReturnType.java": [
          "File: core/src/main/java/io/micronaut/core/type/ReturnType.java -> core/src/main/java/io/micronaut/core/type/ReturnType.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     default boolean isSpecifiedSingle() {",
          "97:         AnnotationMetadata annotationMetadata = getAnnotationMetadata();",
          "101:     }",
          "",
          "[Removed Lines]",
          "98:         return annotationMetadata.hasStereotype(SingleResult.class) ?",
          "99:                 annotationMetadata.booleanValue(SingleResult.NAME).orElse(true) :",
          "100:                 false;",
          "",
          "[Added Lines]",
          "98:         return annotationMetadata.hasStereotype(SingleResult.class) &&",
          "99:                 annotationMetadata.booleanValue(SingleResult.NAME).orElse(true);",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/util/StringUtils.java||core/src/main/java/io/micronaut/core/util/StringUtils.java": [
          "File: core/src/main/java/io/micronaut/core/util/StringUtils.java -> core/src/main/java/io/micronaut/core/util/StringUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:         if (dottedProperty == null) {",
          "236:             return dottedProperty;",
          "237:         }",
          "242:     }",
          "",
          "[Removed Lines]",
          "238:         Optional<String> converted = Optional.of(dottedProperty)",
          "239:             .map(value -> value.replace('.', '_'))",
          "240:             .map(value -> uppercase ? value.toUpperCase() : value);",
          "241:         return converted.get();",
          "",
          "[Added Lines]",
          "238:         dottedProperty = dottedProperty.replace('.', '_');",
          "239:         return uppercase ?  dottedProperty.toUpperCase() : dottedProperty;",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/util/clhm/ConcurrentLinkedHashMap.java||core/src/main/java/io/micronaut/core/util/clhm/ConcurrentLinkedHashMap.java": [
          "File: core/src/main/java/io/micronaut/core/util/clhm/ConcurrentLinkedHashMap.java -> core/src/main/java/io/micronaut/core/util/clhm/ConcurrentLinkedHashMap.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:         weigher = builder.weigher;",
          "223:         evictionLock = new ReentrantLock();",
          "224:         weightedSize = new AtomicLong();",
          "229:         readBufferReadCount = new long[NUMBER_OF_READ_BUFFERS];",
          "230:         readBufferWriteCount = new AtomicLong[NUMBER_OF_READ_BUFFERS];",
          "",
          "[Removed Lines]",
          "225:         evictionDeque = new LinkedDeque<Node<K, V>>();",
          "226:         writeBuffer = new ConcurrentLinkedQueue<Runnable>();",
          "227:         drainStatus = new AtomicReference<DrainStatus>(IDLE);",
          "",
          "[Added Lines]",
          "225:         evictionDeque = new LinkedDeque<>();",
          "226:         writeBuffer = new ConcurrentLinkedQueue<>();",
          "227:         drainStatus = new AtomicReference<>(IDLE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:             readBufferDrainAtWriteCount[i] = new AtomicLong();",
          "236:             readBuffers[i] = new AtomicReference[READ_BUFFER_SIZE];",
          "237:             for (int j = 0; j < READ_BUFFER_SIZE; j++) {",
          "239:             }",
          "240:         }",
          "",
          "[Removed Lines]",
          "238:                 readBuffers[i][j] = new AtomicReference<Node<K, V>>();",
          "",
          "[Added Lines]",
          "238:                 readBuffers[i][j] = new AtomicReference<>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "243:         listener = builder.listener;",
          "244:         pendingNotifications = (listener == DiscardingListener.INSTANCE)",
          "245:                 ? (Queue<Node<K, V>>) DISCARDING_QUEUE",
          "247:     }",
          "249:     private static void checkNotNull(Object o) {",
          "",
          "[Removed Lines]",
          "246:                 : new ConcurrentLinkedQueue<Node<K, V>>();",
          "",
          "[Added Lines]",
          "246:                 : new ConcurrentLinkedQueue<>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "484:     boolean tryToRetire(Node<K, V> node, WeightedValue<V> expect) {",
          "485:         if (expect.isAlive()) {",
          "487:             return node.compareAndSet(expect, retired);",
          "488:         }",
          "489:         return false;",
          "",
          "[Removed Lines]",
          "486:             final WeightedValue<V> retired = new WeightedValue<V>(expect.value, -expect.weight);",
          "",
          "[Added Lines]",
          "486:             final WeightedValue<V> retired = new WeightedValue<>(expect.value, -expect.weight);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "501:             if (!current.isAlive()) {",
          "502:                 return;",
          "503:             }",
          "505:             if (node.compareAndSet(current, retired)) {",
          "506:                 return;",
          "507:             }",
          "",
          "[Removed Lines]",
          "504:             final WeightedValue<V> retired = new WeightedValue<V>(current.value, -current.weight);",
          "",
          "[Added Lines]",
          "504:             final WeightedValue<V> retired = new WeightedValue<>(current.value, -current.weight);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "518:     void makeDead(Node<K, V> node) {",
          "519:         for (;;) {",
          "520:             WeightedValue<V> current = node.get();",
          "522:             if (node.compareAndSet(current, dead)) {",
          "523:                 weightedSize.lazySet(weightedSize.get() - Math.abs(current.weight));",
          "524:                 return;",
          "",
          "[Removed Lines]",
          "521:             WeightedValue<V> dead = new WeightedValue<V>(current.value, 0);",
          "",
          "[Added Lines]",
          "521:             WeightedValue<V> dead = new WeightedValue<>(current.value, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "651:         checkNotNull(value);",
          "653:         final int weight = weigher.weightOf(key, value);",
          "655:         final Node<K, V> node = new Node<>(key, weightedValue);",
          "657:         for (;;) {",
          "",
          "[Removed Lines]",
          "654:         final WeightedValue<V> weightedValue = new WeightedValue<V>(value, weight);",
          "",
          "[Added Lines]",
          "654:         final WeightedValue<V> weightedValue = new WeightedValue<>(value, weight);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "714:         checkNotNull(key);",
          "715:         checkNotNull(mappingFunction);",
          "719:         for (;;) {",
          "720:             Function<K, Node<K, V>> f = k -> {",
          "",
          "[Removed Lines]",
          "717:         final ObjectHolder<Node<K, V>> objectHolder = new ObjectHolder<Node<K, V>>();",
          "",
          "[Added Lines]",
          "717:         final ObjectHolder<Node<K, V>> objectHolder = new ObjectHolder<>();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "723:                 checkNotNull(value);",
          "725:                 final int weight = weigher.weightOf(key, value);",
          "729:                 objectHolder.setObject(node);",
          "",
          "[Removed Lines]",
          "726:                 final WeightedValue<V> weightedValue = new WeightedValue<V>(value, weight);",
          "727:                 final Node<K, V> node = new Node<K, V>(key, weightedValue);",
          "",
          "[Added Lines]",
          "726:                 final WeightedValue<V> weightedValue = new WeightedValue<>(value, weight);",
          "727:                 final Node<K, V> node = new Node<>(key, weightedValue);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "736:             if (null == node) { // the entry is present",
          "737:                 V value = prior.getValue();",
          "738:                 final int weight = weigher.weightOf(key, value);",
          "741:             } else {",
          "",
          "[Removed Lines]",
          "739:                 final WeightedValue<V> weightedValue = new WeightedValue<V>(value, weight);",
          "740:                 node = new Node<K, V>(key, weightedValue);",
          "",
          "[Added Lines]",
          "739:                 final WeightedValue<V> weightedValue = new WeightedValue<>(value, weight);",
          "740:                 node = new Node<>(key, weightedValue);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "820:         checkNotNull(value);",
          "822:         final int weight = weigher.weightOf(key, value);",
          "825:         final Node<K, V> node = data.get(key);",
          "826:         if (node == null) {",
          "",
          "[Removed Lines]",
          "823:         final WeightedValue<V> weightedValue = new WeightedValue<V>(value, weight);",
          "",
          "[Added Lines]",
          "823:         final WeightedValue<V> weightedValue = new WeightedValue<>(value, weight);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "850:         checkNotNull(newValue);",
          "852:         final int weight = weigher.weightOf(key, newValue);",
          "855:         final Node<K, V> node = data.get(key);",
          "856:         if (node == null) {",
          "",
          "[Removed Lines]",
          "853:         final WeightedValue<V> newWeightedValue = new WeightedValue<V>(newValue, weight);",
          "",
          "[Added Lines]",
          "853:         final WeightedValue<V> newWeightedValue = new WeightedValue<>(newValue, weight);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "979:             final int initialCapacity = (weigher == Weighers.entrySingleton())",
          "980:                     ? Math.min(limit, (int) weightedSize())",
          "981:                     : 16;",
          "983:             final Iterator<Node<K, V>> iterator = ascending",
          "984:                     ? evictionDeque.iterator()",
          "985:                     : evictionDeque.descendingIterator();",
          "",
          "[Removed Lines]",
          "982:             final Set<K> keys = new LinkedHashSet<K>(initialCapacity);",
          "",
          "[Added Lines]",
          "982:             final Set<K> keys = new LinkedHashSet<>(initialCapacity);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1097:             final int initialCapacity = (weigher == Weighers.entrySingleton())",
          "1098:                     ? Math.min(limit, (int) weightedSize())",
          "1099:                     : 16;",
          "1101:             final Iterator<Node<K, V>> iterator = ascending",
          "1102:                     ? evictionDeque.iterator()",
          "1103:                     : evictionDeque.descendingIterator();",
          "",
          "[Removed Lines]",
          "1100:             final Map<K, V> map = new LinkedHashMap<K, V>(initialCapacity);",
          "",
          "[Added Lines]",
          "1100:             final Map<K, V> map = new LinkedHashMap<>(initialCapacity);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1239:         V getValue() {",
          "1241:         }",
          "1243:         WeightedValue<V> getWeightedValue() {",
          "",
          "[Removed Lines]",
          "1240:             return get().value;",
          "",
          "[Added Lines]",
          "1240:             return super.get().value;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1753:         public Builder<K, V> weigher(Weigher<? super V> weigher) {",
          "1754:             this.weigher = (weigher == Weighers.singleton())",
          "1755:                     ? Weighers.<K, V>entrySingleton()",
          "1757:             return this;",
          "1758:         }",
          "",
          "[Removed Lines]",
          "1756:                     : new BoundedEntryWeigher<K, V>(Weighers.asEntryWeigher(weigher));",
          "",
          "[Added Lines]",
          "1756:                     : new BoundedEntryWeigher<>(Weighers.asEntryWeigher(weigher));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1769:         public Builder<K, V> weigher(EntryWeigher<? super K, ? super V> weigher) {",
          "1770:             this.weigher = (weigher == Weighers.entrySingleton())",
          "1771:                     ? Weighers.<K, V>entrySingleton()",
          "1773:             return this;",
          "1774:         }",
          "",
          "[Removed Lines]",
          "1772:                     : new BoundedEntryWeigher<K, V>(weigher);",
          "",
          "[Added Lines]",
          "1772:                     : new BoundedEntryWeigher<>(weigher);",
          "",
          "---------------"
        ]
      }
    }
  ]
}