{
  "cve_id": "CVE-2011-4278",
  "cve_desc": "Cross-site scripting (XSS) vulnerability in the tag autocomplete functionality in Moodle 1.9.x before 1.9.11 and 2.0.x before 2.0.2 allows remote attackers to inject arbitrary web script or HTML via unspecified vectors.",
  "repo": "moodle/moodle",
  "patch_hash": "fd29b2ad1c20906da00d7e523f39bc8a0358a65b",
  "patch_info": {
    "commit_hash": "fd29b2ad1c20906da00d7e523f39bc8a0358a65b",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/fd29b2ad1c20906da00d7e523f39bc8a0358a65b",
    "files": [
      "lib/moodlelib.php",
      "tag/edit.php",
      "tag/lib.php",
      "tag/tag_autocomplete.php"
    ],
    "message": "MDL-25754 improved tag sanitisation and fixed tag autocomplete",
    "before_after_code_files": [
      "lib/moodlelib.php||lib/moodlelib.php",
      "tag/edit.php||tag/edit.php",
      "tag/lib.php||tag/lib.php",
      "tag/tag_autocomplete.php||tag/tag_autocomplete.php"
    ]
  },
  "patch_diff": {
    "lib/moodlelib.php||lib/moodlelib.php": [
      "File: lib/moodlelib.php -> lib/moodlelib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "567:             }",
      "569:         case PARAM_TAG:",
      "572:             $param = str_replace('\\\\', '', $param);",
      "574:             $param = preg_replace('/\\s+/', ' ', $param);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "573:             $param = preg_replace('~[[:cntrl:]]|[<>`]~u', '', $param);",
      "",
      "---------------"
    ],
    "tag/edit.php||tag/edit.php": [
      "File: tag/edit.php -> tag/edit.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: require_once('lib.php');",
      "5: require_once('edit_form.php');",
      "9: require_login();",
      "",
      "[Removed Lines]",
      "7: require_js(array('yui_dom-event', 'yui_connection', 'yui_animation', 'yui_autocomplete'));",
      "",
      "[Added Lines]",
      "7: require_js(array('yui_dom-event', 'yui_connection', 'yui_animation', 'yui_datasource', 'yui_autocomplete'));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "92:                 error('Error updating tag record');",
      "93:             }",
      "94:         }",
      "99:         if (isset($tagnew->name) && ($tag->name != $tagnew->name)){",
      "100:             add_to_log($COURSE->id, 'tag', 'update', 'index.php?id='. $tag->id, $tag->name . '->'. $tagnew->name);",
      "103:             add_to_log($COURSE->id, 'tag', 'update', 'index.php?id='. $tag->id, $tag->name);",
      "104:         }",
      "107:         tag_set('tag', $tagnew->id, explode(',', trim($tagnew->relatedtags)));",
      "110:         redirect($CFG->wwwroot.'/tag/index.php?tag='.rawurlencode($tag->name)); // must use $tag here, as the name isn't in the edit form",
      "111:     }",
      "112: }",
      "",
      "[Removed Lines]",
      "102:         } elseif ($tag->description != $tagnew->description) {",
      "",
      "[Added Lines]",
      "102:         } elseif ($tag->description != $tagnew->description) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "133: <script type=\"text/javascript\">",
      "139: myDataSource.maxCacheEntries = 60;",
      "140: myDataSource.queryMatchSubset = true;",
      "",
      "[Removed Lines]",
      "136: var myServer = \"./tag_autocomplete.php\";",
      "137: var myDataSource = new YAHOO.widget.DS_XHR(myServer, [\"\\n\", \"\\t\"]);",
      "138: myDataSource.responseType = YAHOO.widget.DS_XHR.TYPE_FLAT;",
      "",
      "[Added Lines]",
      "136: var myDataSource = new YAHOO.util.XHRDataSource(\"./tag_autocomplete.php\");",
      "137: myDataSource.responseType = YAHOO.util.XHRDataSource.TYPE_TEXT;",
      "138: myDataSource.responseSchema = {recordDelim: \"\\n\", fieldDelim: \"\\t\"};",
      "",
      "---------------"
    ],
    "tag/lib.php||tag/lib.php": [
      "File: tag/lib.php -> tag/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "247:         \"FROM {$CFG->prefix}tag_instance ti INNER JOIN {$CFG->prefix}tag tg ON tg.id = ti.tagid \".",
      "248:         \"WHERE ti.itemtype = '{$record_type}' AND ti.itemid = '{$record_id}' {$type} \".",
      "249:         \"ORDER BY ti.ordering ASC\");",
      "260:         return array();",
      "261:     } else {",
      "262:         return $tags;",
      "",
      "[Removed Lines]",
      "259:     if (!$tags) {",
      "",
      "[Added Lines]",
      "259:     if (!$tags) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "348:     $return_an_int = false;",
      "349:     if (!is_array($tags)) {",
      "350:         if(is_null($return_value) || $return_value == TAG_RETURN_OBJECT) {",
      "352:         }",
      "353:         $tags = array($tags);",
      "354:     }",
      "356:     $result = array();",
      "",
      "[Removed Lines]",
      "351:             $return_an_int = true;",
      "",
      "[Added Lines]",
      "351:             $return_an_int = true;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     $tags = array_values(tag_normalize($tags));",
      "368:     foreach($tags as $key => $tag) {",
      "370:         $result[moodle_strtolower($tag)] = null; // key must exists : no value for a key means the tag wasn't found.",
      "371:     }",
      "372:     $tag_string = \"'\". implode(\"', '\", $tags) .\"'\";",
      "",
      "[Removed Lines]",
      "369:         $tags[$key] = addslashes(moodle_strtolower($tag));",
      "",
      "[Added Lines]",
      "369:         $tags[$key] = addslashes(moodle_strtolower($tag));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "469:     if ($existing = tag_get('name', $newname_clean, 'id, name, rawname')) {",
      "470:         if ($existing->id != $tagid) {  // Another tag already exists with this name",
      "472:         }",
      "473:     }",
      "475:     if ($tag = tag_get('id', $tagid, 'id, name, rawname')) {",
      "478:         $tag->timemodified = time();",
      "479:         return update_record('tag', $tag);",
      "480:     }",
      "",
      "[Removed Lines]",
      "471:             return false;",
      "476:         $tag->rawname = addslashes($newrawname_clean);",
      "477:         $tag->name = addslashes($newname_clean);",
      "",
      "[Added Lines]",
      "471:             return false;",
      "476:         $tag->rawname = addslashes($newrawname_clean);",
      "477:         $tag->name = addslashes($newname_clean);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "526:         if ( !record_exists_sql(\"SELECT tg.id \".",
      "527:                                   \"FROM {$CFG->prefix}tag tg \".",
      "528:                                  \"WHERE tg.id = $tagid AND ( tg.tagtype = 'official' OR \".",
      "532:             return tag_delete($tagid);",
      "533:         }",
      "534:     } else {",
      "",
      "[Removed Lines]",
      "529:                                     \"EXISTS (SELECT 1",
      "530:                                                FROM {$CFG->prefix}tag_instance ti",
      "531:                                               WHERE ti.tagid=$tagid) )\") ) {",
      "",
      "[Added Lines]",
      "529:                                     \"EXISTS (SELECT 1",
      "530:                                                FROM {$CFG->prefix}tag_instance ti",
      "531:                                               WHERE ti.tagid=$tagid) )\") ) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "551:     global $CFG;",
      "554:         return '';",
      "555:     }",
      "",
      "[Removed Lines]",
      "553:     if(!isset($tagobject->name)) {",
      "",
      "[Added Lines]",
      "553:     if (!isset($tagobject->name)) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "563:         $tagname = $tagobject->rawname;",
      "564:     }",
      "566:     if ($html == TAG_RETURN_TEXT) {",
      "567:         return $tagname;",
      "568:     } else { // TAG_RETURN_HTML",
      "569:         return htmlspecialchars($tagname);",
      "571: }",
      "",
      "[Removed Lines]",
      "570:     }",
      "",
      "[Added Lines]",
      "567:     $tagname = clean_param($tagname, PARAM_TAG);",
      "573:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "593:     $query = \"SELECT it.* \".",
      "594:         \"FROM {$CFG->prefix}{$type} it INNER JOIN {$CFG->prefix}tag_instance tt ON it.id = tt.itemid \".",
      "595:         \"WHERE tt.itemtype = '{$type}' AND tt.tagid = '{$tagid}'\";",
      "598: }",
      "",
      "[Removed Lines]",
      "597:     return get_records_sql($query, $limitfrom, $limitnum);",
      "",
      "[Added Lines]",
      "600:     return get_records_sql($query, $limitfrom, $limitnum);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "617: function tag_add($tags, $type=\"default\") {",
      "618:     global $USER;",
      "622:     if (!is_array($tags)) {",
      "623:         $tags = array($tags);",
      "",
      "[Removed Lines]",
      "620:     require_capability('moodle/tag:create', get_context_instance(CONTEXT_SYSTEM));",
      "",
      "[Added Lines]",
      "623:     require_capability('moodle/tag:create', get_context_instance(CONTEXT_SYSTEM));",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "636:         if (!$tag) {",
      "637:             $tags_ids[$tag] = false;",
      "638:         } else {",
      "642:             $tag_name_lc = moodle_strtolower($tag);",
      "643:             $tag_object->name = addslashes($tag_name_lc);",
      "",
      "[Removed Lines]",
      "641:             $tag_object->rawname = addslashes($tag);",
      "",
      "[Added Lines]",
      "644:             $tag_object->rawname = addslashes($tag);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "667:         $tag_instance_object->ordering = $ordering;",
      "668:         $tag_instance_object->timemodified = time();",
      "669:         return update_record('tag_instance', $tag_instance_object);",
      "671:         $tag_instance_object = new StdClass;",
      "672:         $tag_instance_object->tagid = $tagid;",
      "673:         $tag_instance_object->itemid = $record_id;",
      "",
      "[Removed Lines]",
      "670:     } else {",
      "",
      "[Added Lines]",
      "673:     } else {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "775:             \"WHERE ta.tagid = {$tag->id} AND tb.tagid != {$tag->id} \".",
      "776:             \"GROUP BY tb.tagid \".",
      "777:             \"HAVING COUNT(*) > $min_correlation \".",
      "780:         $correlated = array();",
      "784:         if ($tag_correlations = get_records_sql($query)) {",
      "785:             foreach($tag_correlations as $correlation) {",
      "",
      "[Removed Lines]",
      "778:             \"ORDER BY COUNT(*) DESC\";",
      "",
      "[Added Lines]",
      "781:             \"ORDER BY COUNT(*) DESC\";",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "862:     }",
      "864:     $tag_names = array();",
      "866:         $tag_names[$tag->id] = $tag->name;",
      "867:     }",
      "",
      "[Removed Lines]",
      "865:     foreach(get_records_list('tag', 'id', implode(',', $tagids)) as $tag) {",
      "",
      "[Added Lines]",
      "868:     foreach(get_records_list('tag', 'id', implode(',', $tagids)) as $tag) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "929:             $cleaned_tags_lc[$rawtag] = moodle_strtolower( clean_param($rawtag, PARAM_TAG) );",
      "930:             $cleaned_tags_mc[$rawtag] = clean_param($rawtag, PARAM_TAG);",
      "931:         }",
      "933:             $result[$rawtag] = $cleaned_tags_lc[$rawtag];",
      "934:         } else { // TAG_CASE_ORIGINAL",
      "935:             $result[$rawtag] = $cleaned_tags_mc[$rawtag];",
      "936:         }",
      "937:     }",
      "939:     return $result;",
      "940: }",
      "",
      "[Removed Lines]",
      "932:         if ( $case == TAG_CASE_LOWER ) {",
      "",
      "[Added Lines]",
      "935:         if ( $case == TAG_CASE_LOWER ) {",
      "",
      "---------------"
    ],
    "tag/tag_autocomplete.php||tag/tag_autocomplete.php": [
      "File: tag/tag_autocomplete.php -> tag/tag_autocomplete.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "9:     print_error('tagsaredisabled', 'tag');",
      "10: }",
      "14: if ($similar_tags = tag_autocomplete($query)) {",
      "15:     foreach ($similar_tags as $tag) {",
      "17:     }",
      "18: }",
      "",
      "[Removed Lines]",
      "12: $query = addslashes(optional_param('query', '', PARAM_RAW));",
      "16:         echo $tag->name . \"\\t\" . tag_display_name($tag) . \"\\n\";",
      "",
      "[Added Lines]",
      "13: @header('Content-type: application/json; charset=utf-8');",
      "14: @header('Cache-Control: no-store, no-cache, must-revalidate');",
      "15: @header('Cache-Control: post-check=0, pre-check=0', false);",
      "16: @header('Pragma: no-cache');",
      "17: @header('Expires: Mon, 20 Aug 1969 09:23:00 GMT');",
      "18: @header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');",
      "19: @header('Accept-Ranges: none');",
      "21: $query = optional_param('query', '', PARAM_RAW);",
      "25:         echo clean_param($tag->name, PARAM_TAG) . \"\\t\" . tag_display_name($tag) . \"\\n\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ab0c861479c5effcc5325ecd5e171e6b4f62e149",
      "candidate_info": {
        "commit_hash": "ab0c861479c5effcc5325ecd5e171e6b4f62e149",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ab0c861479c5effcc5325ecd5e171e6b4f62e149",
        "files": [
          "tag/lib.php"
        ],
        "message": "MDL-24355 tag: added code to prevent an error if there are no tag correlations found",
        "before_after_code_files": [
          "tag/lib.php||tag/lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tag/lib.php||tag/lib.php"
          ],
          "candidate": [
            "tag/lib.php||tag/lib.php"
          ]
        }
      },
      "candidate_diff": {
        "tag/lib.php||tag/lib.php": [
          "File: tag/lib.php -> tag/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:     rs_close($rs);",
          "828: }",
          "",
          "[Removed Lines]",
          "827:     delete_records_select('tag_correlation', 'id NOT IN ('.join(',', $correlations).')');",
          "",
          "[Added Lines]",
          "827:     if (empty($correlations)) {",
          "829:         delete_records('tag_correlation');",
          "830:     } else {",
          "831:         delete_records_select('tag_correlation', 'id NOT IN ('.join(',', $correlations).')');",
          "832:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3aeb4f03bd69f92bf2c47f11e11594d4d7238f19",
      "candidate_info": {
        "commit_hash": "3aeb4f03bd69f92bf2c47f11e11594d4d7238f19",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/3aeb4f03bd69f92bf2c47f11e11594d4d7238f19",
        "files": [
          "tag/lib.php"
        ],
        "message": "MDL-24355 Greatly improved performance of the tag correlation function and fixed up bugs with it",
        "before_after_code_files": [
          "tag/lib.php||tag/lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tag/lib.php||tag/lib.php"
          ],
          "candidate": [
            "tag/lib.php||tag/lib.php"
          ]
        }
      },
      "candidate_diff": {
        "tag/lib.php||tag/lib.php": [
          "File: tag/lib.php -> tag/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "765:     global $CFG;",
          "769:     }",
          "813:     }",
          "814: }",
          "",
          "[Removed Lines]",
          "763: function tag_compute_correlations($min_correlation=2) {",
          "767:     if (!$all_tags = get_records_list('tag')) {",
          "768:         return;",
          "771:     $tag_correlation_obj = new object();",
          "772:     foreach($all_tags as $tag) {",
          "776:         $query = \"SELECT tb.tagid \".",
          "777:             \"FROM {$CFG->prefix}tag_instance ta INNER JOIN {$CFG->prefix}tag_instance tb ON ta.itemid = tb.itemid \".",
          "778:             \"WHERE ta.tagid = {$tag->id} AND tb.tagid != {$tag->id} \".",
          "779:             \"GROUP BY tb.tagid \".",
          "780:             \"HAVING COUNT(*) > $min_correlation \".",
          "781:             \"ORDER BY COUNT(*) DESC\";",
          "783:         $correlated = array();",
          "787:         if ($tag_correlations = get_records_sql($query)) {",
          "788:             foreach($tag_correlations as $correlation) {",
          "791:                     $correlated[] = $correlation->tagid;",
          "793:             }",
          "794:         }",
          "796:         if (empty($correlated)) {",
          "797:             continue;",
          "798:         }",
          "800:         $correlated = implode(',', $correlated);",
          "804:         if ($tag_correlation_obj = get_record('tag_correlation', 'tagid', $tag->id, '', '', '', '', 'id')) {",
          "805:             $tag_correlation_obj->correlatedtags = $correlated;",
          "806:             update_record('tag_correlation', $tag_correlation_obj);",
          "807:         } else {",
          "808:          $tag_correlation_obj = new stdClass();",
          "809:             $tag_correlation_obj->tagid          = $tag->id;",
          "810:             $tag_correlation_obj->correlatedtags = $correlated;",
          "811:             insert_record('tag_correlation', $tag_correlation_obj);",
          "812:         }",
          "",
          "[Added Lines]",
          "763: function tag_compute_correlations($mincorrelation = 2) {",
          "766:     $mincorrelation = (int)$mincorrelation;",
          "777:     $sql = \"SELECT pairs.tagid, pairs.correlation, pairs.ocurrences, co.id AS correlationid",
          "778:               FROM (",
          "779:                        SELECT ta.tagid, tb.tagid AS correlation, COUNT(*) AS ocurrences",
          "780:                          FROM {$CFG->prefix}tag_instance ta",
          "781:                          JOIN {$CFG->prefix}tag_instance tb ON (ta.itemtype = tb.itemtype AND ta.itemid = tb.itemid AND ta.tagid <> tb.tagid)",
          "782:                      GROUP BY ta.tagid, tb.tagid",
          "783:                        HAVING COUNT(*) > $mincorrelation",
          "784:                    ) pairs",
          "785:          LEFT JOIN {$CFG->prefix}tag_correlation co ON co.tagid = pairs.tagid",
          "786:           ORDER BY pairs.tagid ASC, pairs.ocurrences DESC, pairs.correlation ASC\";",
          "787:     $rs = get_recordset_sql($sql);",
          "790:     $tagcorrelation = new stdClass;",
          "791:     $tagcorrelation->id = null;",
          "792:     $tagcorrelation->tagid = null;",
          "793:     $tagcorrelation->correlatedtags = array();",
          "797:     $correlations = array();",
          "800:     while ($row = rs_fetch_next_record($rs)) {",
          "801:         if ($row->tagid != $tagcorrelation->tagid) {",
          "804:             $tagcorrelationid = tag_process_computed_correlation($tagcorrelation);",
          "805:             if ($tagcorrelationid) {",
          "806:                 $correlations[] = $tagcorrelationid;",
          "807:             }",
          "810:             $tagcorrelation = new stdClass;",
          "811:             $tagcorrelation->id = $row->correlationid;",
          "812:             $tagcorrelation->tagid = $row->tagid;",
          "813:             $tagcorrelation->correlatedtags = array();",
          "814:         }",
          "815:         $tagcorrelation->correlatedtags[] = $row->correlation;",
          "816:     }",
          "818:     $tagcorrelationid = tag_process_computed_correlation($tagcorrelation);",
          "819:     if ($tagcorrelationid) {",
          "820:         $correlations[] = $tagcorrelationid;",
          "824:     rs_close($rs);",
          "827:     delete_records_select('tag_correlation', 'id NOT IN ('.join(',', $correlations).')');",
          "828: }",
          "840: function tag_process_computed_correlation(stdClass $tagcorrelation) {",
          "843:     if (empty($tagcorrelation->tagid) || !isset($tagcorrelation->correlatedtags) || !is_array($tagcorrelation->correlatedtags)) {",
          "844:         return false;",
          "845:     }",
          "850:     $tagcorrelation->correlatedtags = join(',', $tagcorrelation->correlatedtags);",
          "851:     if (!empty($tagcorrelation->id)) {",
          "853:         update_record('tag_correlation', $tagcorrelation);",
          "854:     } else {",
          "856:         $tagcorrelation->id = insert_record('tag_correlation', $tagcorrelation, true);",
          "858:     return $tagcorrelation->id;",
          "",
          "---------------"
        ]
      }
    }
  ]
}