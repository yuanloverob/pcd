{
  "cve_id": "CVE-2022-46170",
  "cve_desc": "CodeIgniter is a PHP full-stack web framework. When an application uses (1) multiple session cookies (e.g., one for user pages and one for admin pages) and (2)  a session handler is set to `DatabaseHandler`, `MemcachedHandler`, or `RedisHandler`, then if an attacker gets one session cookie (e.g., one for user pages), they may be able to access pages that require another session cookie (e.g., for admin pages). This issue has been patched, please upgrade to version 4.2.11 or later. As a workaround, use only one session cookie.",
  "repo": "codeigniter4/CodeIgniter4",
  "patch_hash": "f9fb6574fbeb5a4aa63f7ea87296523e10db9328",
  "patch_info": {
    "commit_hash": "f9fb6574fbeb5a4aa63f7ea87296523e10db9328",
    "repo": "codeigniter4/CodeIgniter4",
    "commit_url": "https://github.com/codeigniter4/CodeIgniter4/commit/f9fb6574fbeb5a4aa63f7ea87296523e10db9328",
    "files": [
      "system/Session/Handlers/DatabaseHandler.php",
      "system/Session/Handlers/MemcachedHandler.php",
      "system/Session/Handlers/RedisHandler.php",
      "user_guide_src/source/changelogs/v4.2.11.rst",
      "user_guide_src/source/installation/upgrade_4211.rst",
      "user_guide_src/source/libraries/sessions.rst",
      "user_guide_src/source/libraries/sessions/039.php",
      "user_guide_src/source/libraries/sessions/040.php",
      "user_guide_src/source/libraries/sessions/041.php",
      "user_guide_src/source/libraries/sessions/042.php",
      "user_guide_src/source/libraries/sessions/043.php"
    ],
    "message": "Merge pull request from GHSA-6cq5-8cj7-g558\n\nFix session handlers bug",
    "before_after_code_files": [
      "system/Session/Handlers/DatabaseHandler.php||system/Session/Handlers/DatabaseHandler.php",
      "system/Session/Handlers/MemcachedHandler.php||system/Session/Handlers/MemcachedHandler.php",
      "system/Session/Handlers/RedisHandler.php||system/Session/Handlers/RedisHandler.php",
      "user_guide_src/source/libraries/sessions/039.php||user_guide_src/source/libraries/sessions/039.php",
      "user_guide_src/source/libraries/sessions/040.php||user_guide_src/source/libraries/sessions/040.php",
      "user_guide_src/source/libraries/sessions/041.php||user_guide_src/source/libraries/sessions/041.php",
      "user_guide_src/source/libraries/sessions/042.php||user_guide_src/source/libraries/sessions/042.php",
      "user_guide_src/source/libraries/sessions/043.php||user_guide_src/source/libraries/sessions/043.php"
    ]
  },
  "patch_diff": {
    "system/Session/Handlers/DatabaseHandler.php||system/Session/Handlers/DatabaseHandler.php": [
      "File: system/Session/Handlers/DatabaseHandler.php -> system/Session/Handlers/DatabaseHandler.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:     protected $rowExists = false;",
      "66:     public function __construct(AppConfig $config, string $ipAddress)",
      "67:     {",
      "68:         parent::__construct($config, $ipAddress);",
      "69:         $this->table = $config->sessionSavePath;",
      "71:         if (empty($this->table)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:     protected string $idPrefix;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77:         $this->db = Database::connect($this->DBGroup);",
      "79:         $this->platform = $this->db->getPlatform();",
      "80:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88:         $this->idPrefix = $config->sessionCookieName . ':';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "115:             $this->sessionID = $id;",
      "116:         }",
      "120:         if ($this->matchIP) {",
      "121:             $builder = $builder->where('ip_address', $this->ipAddress);",
      "",
      "[Removed Lines]",
      "118:         $builder = $this->db->table($this->table)->where('id', $id);",
      "",
      "[Added Lines]",
      "127:         $builder = $this->db->table($this->table)->where('id', $this->idPrefix . $id);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "183:         if ($this->rowExists === false) {",
      "184:             $insertData = [",
      "186:                 'ip_address' => $this->ipAddress,",
      "187:                 'data'       => $this->prepareData($data),",
      "188:             ];",
      "",
      "[Removed Lines]",
      "185:                 'id'         => $id,",
      "",
      "[Added Lines]",
      "194:                 'id'         => $this->idPrefix . $id,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "197:             return true;",
      "198:         }",
      "202:         if ($this->matchIP) {",
      "203:             $builder = $builder->where('ip_address', $this->ipAddress);",
      "",
      "[Removed Lines]",
      "200:         $builder = $this->db->table($this->table)->where('id', $id);",
      "",
      "[Added Lines]",
      "209:         $builder = $this->db->table($this->table)->where('id', $this->idPrefix . $id);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "242:     public function destroy($id): bool",
      "243:     {",
      "244:         if ($this->lock) {",
      "247:             if ($this->matchIP) {",
      "248:                 $builder = $builder->where('ip_address', $this->ipAddress);",
      "",
      "[Removed Lines]",
      "245:             $builder = $this->db->table($this->table)->where('id', $id);",
      "",
      "[Added Lines]",
      "254:             $builder = $this->db->table($this->table)->where('id', $this->idPrefix . $id);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "276:         $separator = ' ';",
      "277:         $interval  = implode($separator, ['', \"{$max_lifetime} second\", '']);",
      "280:     }",
      "",
      "[Removed Lines]",
      "279:         return $this->db->table($this->table)->where('timestamp <', \"now() - INTERVAL {$interval}\", false)->delete() ? 1 : $this->fail();",
      "",
      "[Added Lines]",
      "288:         return $this->db->table($this->table)->where(",
      "289:             'timestamp <',",
      "290:             \"now() - INTERVAL {$interval}\",",
      "291:             false",
      "292:         )->delete() ? 1 : $this->fail();",
      "",
      "---------------"
    ],
    "system/Session/Handlers/MemcachedHandler.php||system/Session/Handlers/MemcachedHandler.php": [
      "File: system/Session/Handlers/MemcachedHandler.php -> system/Session/Handlers/MemcachedHandler.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:             throw SessionException::forEmptySavepath();",
      "62:         }",
      "64:         if ($this->matchIP === true) {",
      "65:             $this->keyPrefix .= $this->ipAddress . ':';",
      "66:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:         $this->keyPrefix .= $config->sessionCookieName . ':';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89:             $serverList[] = $server['host'] . ':' . $server['port'];",
      "90:         }",
      "93:             $this->memcached = null;",
      "94:             $this->logger->error('Session: Invalid Memcached save path format: ' . $this->savePath);",
      "",
      "[Removed Lines]",
      "92:         if (! preg_match_all('#,?([^,:]+)\\:(\\d{1,5})(?:\\:(\\d+))?#', $this->savePath, $matches, PREG_SET_ORDER)) {",
      "",
      "[Added Lines]",
      "95:         if (",
      "96:             ! preg_match_all(",
      "97:                 '#,?([^,:]+)\\:(\\d{1,5})(?:\\:(\\d+))?#',",
      "98:                 $this->savePath,",
      "99:                 $matches,",
      "100:                 PREG_SET_ORDER",
      "101:             )",
      "102:         ) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "99:         foreach ($matches as $match) {",
      "101:             if (in_array($match[1] . ':' . $match[2], $serverList, true)) {",
      "104:                 continue;",
      "105:             }",
      "107:             if (! $this->memcached->addServer($match[1], (int) $match[2], $match[3] ?? 0)) {",
      "109:             } else {",
      "110:                 $serverList[] = $match[1] . ':' . $match[2];",
      "111:             }",
      "",
      "[Removed Lines]",
      "102:                 $this->logger->debug('Session: Memcached server pool already has ' . $match[1] . ':' . $match[2]);",
      "108:                 $this->logger->error('Could not add ' . $match[1] . ':' . $match[2] . ' to Memcached server pool.');",
      "",
      "[Added Lines]",
      "112:                 $this->logger->debug(",
      "113:                     'Session: Memcached server pool already has ' . $match[1] . ':' . $match[2]",
      "114:                 );",
      "120:                 $this->logger->error(",
      "121:                     'Could not add ' . $match[1] . ':' . $match[2] . ' to Memcached server pool.'",
      "122:                 );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "260:             }",
      "262:             if (! $this->memcached->set($lockKey, Time::now()->getTimestamp(), 300)) {",
      "265:                 return false;",
      "266:             }",
      "",
      "[Removed Lines]",
      "263:                 $this->logger->error('Session: Error while trying to obtain lock for ' . $this->keyPrefix . $sessionID);",
      "",
      "[Added Lines]",
      "277:                 $this->logger->error(",
      "278:                     'Session: Error while trying to obtain lock for ' . $this->keyPrefix . $sessionID",
      "279:                 );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "270:         } while (++$attempt < 30);",
      "272:         if ($attempt === 30) {",
      "275:             return false;",
      "276:         }",
      "",
      "[Removed Lines]",
      "273:             $this->logger->error('Session: Unable to obtain lock for ' . $this->keyPrefix . $sessionID . ' after 30 attempts, aborting.');",
      "",
      "[Added Lines]",
      "289:             $this->logger->error(",
      "290:                 'Session: Unable to obtain lock for ' . $this->keyPrefix . $sessionID . ' after 30 attempts, aborting.'",
      "291:             );",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "290:                 ! $this->memcached->delete($this->lockKey)",
      "291:                 && $this->memcached->getResultCode() !== Memcached::RES_NOTFOUND",
      "292:             ) {",
      "295:                 return false;",
      "296:             }",
      "",
      "[Removed Lines]",
      "293:                 $this->logger->error('Session: Error while trying to free lock for ' . $this->lockKey);",
      "",
      "[Added Lines]",
      "311:                 $this->logger->error(",
      "312:                     'Session: Error while trying to free lock for ' . $this->lockKey",
      "313:                 );",
      "",
      "---------------"
    ],
    "system/Session/Handlers/RedisHandler.php||system/Session/Handlers/RedisHandler.php": [
      "File: system/Session/Handlers/RedisHandler.php -> system/Session/Handlers/RedisHandler.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:         $this->setSavePath();",
      "74:         if ($this->matchIP === true) {",
      "75:             $this->keyPrefix .= $this->ipAddress . ':';",
      "76:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75:         $this->keyPrefix .= $config->sessionCookieName . ':';",
      "",
      "---------------"
    ],
    "user_guide_src/source/libraries/sessions/039.php||user_guide_src/source/libraries/sessions/039.php": [
      "File: user_guide_src/source/libraries/sessions/039.php -> user_guide_src/source/libraries/sessions/039.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: class App extends BaseConfig",
      "8: {",
      "10:     public $sessionSavePath = 'ci_sessions';",
      "12: }",
      "",
      "[Removed Lines]",
      "9:     public $sessionDriver   = 'CodeIgniter\\Session\\Handlers\\DatabaseHandler';",
      "",
      "[Added Lines]",
      "10:     public $sessionDriver = 'CodeIgniter\\Session\\Handlers\\DatabaseHandler';",
      "",
      "---------------"
    ],
    "user_guide_src/source/libraries/sessions/040.php||user_guide_src/source/libraries/sessions/040.php": [
      "File: user_guide_src/source/libraries/sessions/040.php -> user_guide_src/source/libraries/sessions/040.php"
    ],
    "user_guide_src/source/libraries/sessions/041.php||user_guide_src/source/libraries/sessions/041.php": [
      "File: user_guide_src/source/libraries/sessions/041.php -> user_guide_src/source/libraries/sessions/041.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: class App extends BaseConfig",
      "8: {",
      "10:     public $sessionSavePath = 'tcp://localhost:6379';",
      "12: }",
      "",
      "[Removed Lines]",
      "9:     public $sessionDiver    = 'CodeIgniter\\Session\\Handlers\\RedisHandler';",
      "",
      "[Added Lines]",
      "10:     public $sessionDiver = 'CodeIgniter\\Session\\Handlers\\RedisHandler';",
      "",
      "---------------"
    ],
    "user_guide_src/source/libraries/sessions/042.php||user_guide_src/source/libraries/sessions/042.php": [
      "File: user_guide_src/source/libraries/sessions/042.php -> user_guide_src/source/libraries/sessions/042.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: class App extends BaseConfig",
      "8: {",
      "10:     public $sessionSavePath = 'localhost:11211';",
      "12: }",
      "",
      "[Removed Lines]",
      "9:     public $sessionDriver   = 'CodeIgniter\\Session\\Handlers\\MemcachedHandler';",
      "",
      "[Added Lines]",
      "10:     public $sessionDriver = 'CodeIgniter\\Session\\Handlers\\MemcachedHandler';",
      "",
      "---------------"
    ],
    "user_guide_src/source/libraries/sessions/043.php||user_guide_src/source/libraries/sessions/043.php": [
      "File: user_guide_src/source/libraries/sessions/043.php -> user_guide_src/source/libraries/sessions/043.php"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "285c06251d7ece77172896a748ffd8adbad4ccde",
      "candidate_info": {
        "commit_hash": "285c06251d7ece77172896a748ffd8adbad4ccde",
        "repo": "codeigniter4/CodeIgniter4",
        "commit_url": "https://github.com/codeigniter4/CodeIgniter4/commit/285c06251d7ece77172896a748ffd8adbad4ccde",
        "files": [
          "tests/system/HTTP/IncomingRequestTest.php"
        ],
        "message": "test: add test cases",
        "before_after_code_files": [
          "tests/system/HTTP/IncomingRequestTest.php||tests/system/HTTP/IncomingRequestTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/codeigniter4/CodeIgniter4/pull/7002"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/system/HTTP/IncomingRequestTest.php||tests/system/HTTP/IncomingRequestTest.php": [
          "File: tests/system/HTTP/IncomingRequestTest.php -> tests/system/HTTP/IncomingRequestTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace CodeIgniter\\HTTP;",
          "14: use CodeIgniter\\HTTP\\Exceptions\\HTTPException;",
          "15: use CodeIgniter\\HTTP\\Files\\UploadedFile;",
          "16: use CodeIgniter\\Test\\CIUnitTestCase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use CodeIgniter\\Exceptions\\ConfigException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "793:         $this->assertSame($expected, $this->request->getIPAddress());",
          "794:     }",
          "797: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "797:     public function testGetIPAddressThruProxyInvalidConfigString()",
          "798:     {",
          "799:         $this->expectException(ConfigException::class);",
          "800:         $this->expectExceptionMessage(",
          "801:             'You must set an array with Proxy IP address key and HTTP header name value in Config\\App::$proxyIPs.'",
          "802:         );",
          "804:         $config           = new App();",
          "805:         $config->proxyIPs = '192.168.5.0/28';",
          "806:         $this->request    = new Request($config);",
          "807:         $this->request->populateHeaders();",
          "809:         $this->request->getIPAddress();",
          "810:     }",
          "812:     public function testGetIPAddressThruProxyInvalidConfigArray()",
          "813:     {",
          "814:         $this->expectException(ConfigException::class);",
          "815:         $this->expectExceptionMessage(",
          "816:             'You must set an array with Proxy IP address key and HTTP header name value in Config\\App::$proxyIPs.'",
          "817:         );",
          "819:         $config           = new App();",
          "820:         $config->proxyIPs = ['192.168.5.0/28'];",
          "821:         $this->request    = new Request($config);",
          "822:         $this->request->populateHeaders();",
          "824:         $this->request->getIPAddress();",
          "825:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "374486a75a3b5f16f00a8cf7b2feed39cc75bf4f",
      "candidate_info": {
        "commit_hash": "374486a75a3b5f16f00a8cf7b2feed39cc75bf4f",
        "repo": "codeigniter4/CodeIgniter4",
        "commit_url": "https://github.com/codeigniter4/CodeIgniter4/commit/374486a75a3b5f16f00a8cf7b2feed39cc75bf4f",
        "files": [
          "tests/system/HTTP/IncomingRequestTest.php"
        ],
        "message": "test: add test",
        "before_after_code_files": [
          "tests/system/HTTP/IncomingRequestTest.php||tests/system/HTTP/IncomingRequestTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/codeigniter4/CodeIgniter4/pull/7002"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/system/HTTP/IncomingRequestTest.php||tests/system/HTTP/IncomingRequestTest.php": [
          "File: tests/system/HTTP/IncomingRequestTest.php -> tests/system/HTTP/IncomingRequestTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "875:         $this->assertSame($expected, $this->request->getIPAddress());",
          "876:     }",
          "878:     public function testGetIPAddressThruProxyInvalidConfigString()",
          "879:     {",
          "880:         $this->expectException(ConfigException::class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "878:     public function testGetIPAddressThruProxyBothIPv4AndIPv6()",
          "879:     {",
          "880:         $expected                        = '2001:db8:1235:ffff:ffff:ffff:ffff:ffff';",
          "881:         $_SERVER['REMOTE_ADDR']          = $expected;",
          "882:         $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.123.123.123';",
          "884:         $config           = new App();",
          "885:         $config->proxyIPs = [",
          "886:             '192.168.5.0/28'     => 'X-Forwarded-For',",
          "887:             '2001:db8:1234::/48' => 'X-Forwarded-For',",
          "888:         ];",
          "889:         $this->request = new Request($config);",
          "890:         $this->request->populateHeaders();",
          "893:         $this->assertSame($expected, $this->request->getIPAddress());",
          "894:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "511b28350a9fed8e1591c4697d38e72ed9d066d9",
      "candidate_info": {
        "commit_hash": "511b28350a9fed8e1591c4697d38e72ed9d066d9",
        "repo": "codeigniter4/CodeIgniter4",
        "commit_url": "https://github.com/codeigniter4/CodeIgniter4/commit/511b28350a9fed8e1591c4697d38e72ed9d066d9",
        "files": [
          "tests/system/HTTP/IncomingRequestTest.php"
        ],
        "message": "test: add tests for IPv6",
        "before_after_code_files": [
          "tests/system/HTTP/IncomingRequestTest.php||tests/system/HTTP/IncomingRequestTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/codeigniter4/CodeIgniter4/pull/7002"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/system/HTTP/IncomingRequestTest.php||tests/system/HTTP/IncomingRequestTest.php": [
          "File: tests/system/HTTP/IncomingRequestTest.php -> tests/system/HTTP/IncomingRequestTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "728:         $this->assertSame($expected, $this->request->getIPAddress());",
          "729:     }",
          "731:     public function testGetIPAddressThruProxyInvalidIPAddress()",
          "732:     {",
          "733:         $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.456.23.123';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "731:     public function testGetIPAddressThruProxyIPv6()",
          "732:     {",
          "733:         $expected                        = '123.123.123.123';",
          "734:         $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;",
          "735:         $_SERVER['REMOTE_ADDR']          = '2001:db8::2:1';",
          "737:         $config           = new App();",
          "738:         $config->proxyIPs = [",
          "739:             '2001:db8::2:1' => 'X-Forwarded-For',",
          "740:         ];",
          "741:         $this->request = new Request($config);",
          "742:         $this->request->populateHeaders();",
          "745:         $this->assertSame($expected, $this->request->getIPAddress());",
          "746:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "746:         $this->assertSame($expected, $this->request->getIPAddress());",
          "747:     }",
          "749:     public function testGetIPAddressThruProxyNotWhitelisted()",
          "750:     {",
          "751:         $expected                        = '10.10.1.200';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766:     public function testGetIPAddressThruProxyInvalidIPAddressIPv6()",
          "767:     {",
          "768:         $_SERVER['HTTP_X_FORWARDED_FOR'] = '2001:xyz::1';",
          "769:         $expected                        = '2001:db8::2:1';",
          "770:         $_SERVER['REMOTE_ADDR']          = $expected;",
          "772:         $config           = new App();",
          "773:         $config->proxyIPs = [",
          "774:             '2001:db8::2:1' => 'X-Forwarded-For',",
          "775:         ];",
          "776:         $this->request = new Request($config);",
          "777:         $this->request->populateHeaders();",
          "780:         $this->assertSame($expected, $this->request->getIPAddress());",
          "781:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "764:         $this->assertSame($expected, $this->request->getIPAddress());",
          "765:     }",
          "767:     public function testGetIPAddressThruProxySubnet()",
          "768:     {",
          "769:         $expected                        = '123.123.123.123';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "801:     public function testGetIPAddressThruProxyNotWhitelistedIPv6()",
          "802:     {",
          "803:         $expected                        = '2001:db8::2:2';",
          "804:         $_SERVER['REMOTE_ADDR']          = $expected;",
          "805:         $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.456.23.123';",
          "807:         $config           = new App();",
          "808:         $config->proxyIPs = [",
          "809:             '2001:db8::2:1' => 'X-Forwarded-For',",
          "810:         ];",
          "811:         $this->request = new Request($config);",
          "812:         $this->request->populateHeaders();",
          "815:         $this->assertSame($expected, $this->request->getIPAddress());",
          "816:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "779:         $this->assertSame($expected, $this->request->getIPAddress());",
          "780:     }",
          "782:     public function testGetIPAddressThruProxyOutOfSubnet()",
          "783:     {",
          "784:         $expected                        = '192.168.5.21';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "833:     public function testGetIPAddressThruProxySubnetIPv6()",
          "834:     {",
          "835:         $expected                        = '123.123.123.123';",
          "836:         $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;",
          "837:         $_SERVER['REMOTE_ADDR']          = '2001:db8:1234:ffff:ffff:ffff:ffff:ffff';",
          "839:         $config           = new App();",
          "840:         $config->proxyIPs = ['2001:db8:1234::/48' => 'X-Forwarded-For'];",
          "841:         $this->request    = new Request($config);",
          "842:         $this->request->populateHeaders();",
          "845:         $this->assertSame($expected, $this->request->getIPAddress());",
          "846:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "794:         $this->assertSame($expected, $this->request->getIPAddress());",
          "795:     }",
          "797:     public function testGetIPAddressThruProxyInvalidConfigString()",
          "798:     {",
          "799:         $this->expectException(ConfigException::class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "863:     public function testGetIPAddressThruProxyOutOfSubnetIPv6()",
          "864:     {",
          "865:         $expected                        = '2001:db8:1235:ffff:ffff:ffff:ffff:ffff';",
          "866:         $_SERVER['REMOTE_ADDR']          = $expected;",
          "867:         $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.123.123.123';",
          "869:         $config           = new App();",
          "870:         $config->proxyIPs = ['2001:db8:1234::/48' => 'X-Forwarded-For'];",
          "871:         $this->request    = new Request($config);",
          "872:         $this->request->populateHeaders();",
          "875:         $this->assertSame($expected, $this->request->getIPAddress());",
          "876:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7925f69451ae3209b3ac9cce01128385be952dd",
      "candidate_info": {
        "commit_hash": "a7925f69451ae3209b3ac9cce01128385be952dd",
        "repo": "codeigniter4/CodeIgniter4",
        "commit_url": "https://github.com/codeigniter4/CodeIgniter4/commit/a7925f69451ae3209b3ac9cce01128385be952dd",
        "files": [
          "app/Config/App.php"
        ],
        "message": "docs: fix by proofreading\n\nCo-authored-by: John Paul E. Balandan, CPA <paulbalandan@gmail.com>",
        "before_after_code_files": [
          "app/Config/App.php||app/Config/App.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/codeigniter4/CodeIgniter4/pull/7002"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "app/Config/App.php||app/Config/App.php": [
          "File: app/Config/App.php -> app/Config/App.php"
        ]
      }
    },
    {
      "candidate_hash": "a2cfa3bbaa865f8f12a239d496cb3d72bc448a39",
      "candidate_info": {
        "commit_hash": "a2cfa3bbaa865f8f12a239d496cb3d72bc448a39",
        "repo": "codeigniter4/CodeIgniter4",
        "commit_url": "https://github.com/codeigniter4/CodeIgniter4/commit/a2cfa3bbaa865f8f12a239d496cb3d72bc448a39",
        "files": [
          "system/Session/Handlers/DatabaseHandler.php",
          "system/Session/Handlers/MemcachedHandler.php",
          "system/Session/Handlers/RedisHandler.php"
        ],
        "message": "fix: support multiple session cookies",
        "before_after_code_files": [
          "system/Session/Handlers/DatabaseHandler.php||system/Session/Handlers/DatabaseHandler.php",
          "system/Session/Handlers/MemcachedHandler.php||system/Session/Handlers/MemcachedHandler.php",
          "system/Session/Handlers/RedisHandler.php||system/Session/Handlers/RedisHandler.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/codeigniter4/CodeIgniter4/pull/7002"
        ],
        "olp_code_files": {
          "patch": [
            "system/Session/Handlers/DatabaseHandler.php||system/Session/Handlers/DatabaseHandler.php",
            "system/Session/Handlers/MemcachedHandler.php||system/Session/Handlers/MemcachedHandler.php",
            "system/Session/Handlers/RedisHandler.php||system/Session/Handlers/RedisHandler.php"
          ],
          "candidate": [
            "system/Session/Handlers/DatabaseHandler.php||system/Session/Handlers/DatabaseHandler.php",
            "system/Session/Handlers/MemcachedHandler.php||system/Session/Handlers/MemcachedHandler.php",
            "system/Session/Handlers/RedisHandler.php||system/Session/Handlers/RedisHandler.php"
          ]
        }
      },
      "candidate_diff": {
        "system/Session/Handlers/DatabaseHandler.php||system/Session/Handlers/DatabaseHandler.php": [
          "File: system/Session/Handlers/DatabaseHandler.php -> system/Session/Handlers/DatabaseHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     protected $rowExists = false;",
          "66:     public function __construct(AppConfig $config, string $ipAddress)",
          "67:     {",
          "68:         parent::__construct($config, $ipAddress);",
          "69:         $this->table = $config->sessionSavePath;",
          "71:         if (empty($this->table)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     protected string $idPrefix;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         $this->db = Database::connect($this->DBGroup);",
          "79:         $this->platform = $this->db->getPlatform();",
          "80:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:         $this->idPrefix = $config->sessionCookieName . ':';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:             $this->sessionID = $id;",
          "116:         }",
          "120:         if ($this->matchIP) {",
          "121:             $builder = $builder->where('ip_address', $this->ipAddress);",
          "",
          "[Removed Lines]",
          "118:         $builder = $this->db->table($this->table)->where('id', $id);",
          "",
          "[Added Lines]",
          "127:         $builder = $this->db->table($this->table)->where('id', $this->idPrefix . $id);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:         if ($this->rowExists === false) {",
          "184:             $insertData = [",
          "186:                 'ip_address' => $this->ipAddress,",
          "187:                 'data'       => $this->prepareData($data),",
          "188:             ];",
          "",
          "[Removed Lines]",
          "185:                 'id'         => $id,",
          "",
          "[Added Lines]",
          "194:                 'id'         => $this->idPrefix . $id,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "197:             return true;",
          "198:         }",
          "202:         if ($this->matchIP) {",
          "203:             $builder = $builder->where('ip_address', $this->ipAddress);",
          "",
          "[Removed Lines]",
          "200:         $builder = $this->db->table($this->table)->where('id', $id);",
          "",
          "[Added Lines]",
          "209:         $builder = $this->db->table($this->table)->where('id', $this->idPrefix . $id);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:     public function destroy($id): bool",
          "243:     {",
          "244:         if ($this->lock) {",
          "247:             if ($this->matchIP) {",
          "248:                 $builder = $builder->where('ip_address', $this->ipAddress);",
          "",
          "[Removed Lines]",
          "245:             $builder = $this->db->table($this->table)->where('id', $id);",
          "",
          "[Added Lines]",
          "254:             $builder = $this->db->table($this->table)->where('id', $this->idPrefix . $id);",
          "",
          "---------------"
        ],
        "system/Session/Handlers/MemcachedHandler.php||system/Session/Handlers/MemcachedHandler.php": [
          "File: system/Session/Handlers/MemcachedHandler.php -> system/Session/Handlers/MemcachedHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:             throw SessionException::forEmptySavepath();",
          "62:         }",
          "64:         if ($this->matchIP === true) {",
          "65:             $this->keyPrefix .= $this->ipAddress . ':';",
          "66:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:         $this->keyPrefix .= $config->sessionCookieName . ':';",
          "",
          "---------------"
        ],
        "system/Session/Handlers/RedisHandler.php||system/Session/Handlers/RedisHandler.php": [
          "File: system/Session/Handlers/RedisHandler.php -> system/Session/Handlers/RedisHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:         $this->setSavePath();",
          "74:         if ($this->matchIP === true) {",
          "75:             $this->keyPrefix .= $this->ipAddress . ':';",
          "76:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:         $this->keyPrefix .= $config->sessionCookieName . ':';",
          "",
          "---------------"
        ]
      }
    }
  ]
}