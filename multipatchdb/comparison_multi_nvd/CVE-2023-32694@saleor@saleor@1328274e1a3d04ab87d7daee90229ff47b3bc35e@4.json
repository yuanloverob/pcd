{
  "cve_id": "CVE-2023-32694",
  "cve_desc": "Saleor Core is a composable, headless commerce API. Saleor's `validate_hmac_signature` function is vulnerable to timing attacks. Malicious users could abuse this vulnerability on Saleor deployments having the Adyen plugin enabled in order to determine the secret key and forge fake events, this could affect the database integrity such as marking an order as paid when it is not. This issue has been patched in versions 3.7.68, 3.8.40, 3.9.49, 3.10.36, 3.11.35, 3.12.25, and 3.13.16.",
  "repo": "saleor/saleor",
  "patch_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
  "patch_info": {
    "commit_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "repo": "saleor/saleor",
    "commit_url": "https://github.com/saleor/saleor/commit/1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "files": [
      "saleor/graphql/schema.graphql",
      "saleor/order/__init__.py",
      "saleor/order/events.py",
      "saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py"
    ],
    "message": "Add webhooks logic",
    "before_after_code_files": [
      "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
      "saleor/order/__init__.py||saleor/order/__init__.py",
      "saleor/order/events.py||saleor/order/events.py",
      "saleor/payment/__init__.py||saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py||saleor/payment/utils.py"
    ]
  },
  "patch_diff": {
    "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
      "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   exportProducts(input: ExportProductsInput!): ExportProducts",
      "2751:   checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode",
      "2752:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate",
      "2754:   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate",
      "2755:   checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach",
      "2756:   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach",
      "",
      "[Removed Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "[Added Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3063:   EMAIL_SENT",
      "3064:   PAYMENT_AUTHORIZED",
      "3065:   PAYMENT_CAPTURED",
      "3066:   PAYMENT_REFUNDED",
      "3067:   PAYMENT_VOIDED",
      "3068:   PAYMENT_FAILED",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3066:   PAYMENT_GATEWAY_NOTIFICATION",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3388: enum PaymentChargeStatusEnum {",
      "3389:   NOT_CHARGED",
      "3390:   PARTIALLY_CHARGED",
      "3391:   FULLY_CHARGED",
      "3392:   PARTIALLY_REFUNDED",
      "3393:   FULLY_REFUNDED",
      "3394: }",
      "3396: type PaymentCountableConnection {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3391:   PENDING",
      "3396:   REFUSED",
      "3397:   CANCELLED",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3435: input PaymentInput {",
      "3436:   gateway: String!",
      "3437:   token: String",
      "3439:   amount: Decimal",
      "3440:   billingAddress: AddressInput",
      "3441: }",
      "",
      "[Removed Lines]",
      "3438:   paymentData: JSONString",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5024: enum TransactionKind {",
      "5025:   AUTH",
      "5026:   REFUND",
      "5027:   CAPTURE",
      "5028:   VOID",
      "5029:   CONFIRM",
      "5030: }",
      "5032: union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029:   PENDING",
      "5031:   REFUND_ONGOING",
      "5035:   CANCEL",
      "",
      "---------------"
    ],
    "saleor/order/__init__.py||saleor/order/__init__.py": [
      "File: saleor/order/__init__.py -> saleor/order/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     PAYMENT_REFUNDED = \"payment_refunded\"",
      "52:     PAYMENT_VOIDED = \"payment_voided\"",
      "53:     PAYMENT_FAILED = \"payment_failed\"",
      "55:     INVOICE_REQUESTED = \"invoice_requested\"",
      "56:     INVOICE_GENERATED = \"invoice_generated\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     PAYMENT_GATEWAY_NOTIFICATION = \"payment_gateway_notification\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         (EMAIL_SENT, \"The email was sent\"),",
      "81:         (PAYMENT_AUTHORIZED, \"The payment was authorized\"),",
      "82:         (PAYMENT_CAPTURED, \"The payment was captured\"),",
      "83:         (PAYMENT_REFUNDED, \"The payment was refunded\"),",
      "84:         (PAYMENT_VOIDED, \"The payment was voided\"),",
      "85:         (PAYMENT_FAILED, \"The payment was failed\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         (PAYMENT_GATEWAY_NOTIFICATION, \"Notification from payment gateway\"),",
      "",
      "---------------"
    ],
    "saleor/order/events.py||saleor/order/events.py": [
      "File: saleor/order/events.py -> saleor/order/events.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:     )",
      "263: def fulfillment_canceled_event(",
      "265: ) -> OrderEvent:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: def payment_gateway_notification_event(",
      "265: ) -> OrderEvent:",
      "266:     if not _user_is_valid(user):",
      "267:         user = None",
      "268:     parameters = {\"message\": message}",
      "270:     if payment:",
      "271:         parameters.update({\"gateway\": payment.gateway, \"payment_id\": payment.token})",
      "273:     return OrderEvent.objects.create(",
      "274:         order=order,",
      "275:         type=OrderEvents.PAYMENT_GATEWAY_NOTIFICATION,",
      "276:         user=user,",
      "277:         parameters=parameters,",
      "278:     )",
      "",
      "---------------"
    ],
    "saleor/payment/__init__.py||saleor/payment/__init__.py": [
      "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     AUTH = \"auth\"",
      "61:     CAPTURE = \"capture\"",
      "62:     VOID = \"void\"",
      "63:     PENDING = \"pending\"",
      "64:     REFUND = \"refund\"",
      "65:     REFUND_ONGOING = \"refund_ongoing\"",
      "66:     CONFIRM = \"confirm\"",
      "67:     # FIXME we could use another status like WAITING_FOR_AUTH for transactions",
      "68:     # Which were authorized, but needs to be confirmed manually by staff",
      "69:     # eg. Braintree with \"submit_for_settlement\" enabled",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     CAPTURE_FAILED = \"capture_failed\"",
      "67:     REFUND_FAILED = \"refund_failed\"",
      "68:     REFUND_REVERSED = \"refund_reversed\"",
      "70:     CANCEL = \"cancel\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         (CAPTURE, \"Capture\"),",
      "76:         (VOID, \"Void\"),",
      "77:         (CONFIRM, \"Confirm\"),",
      "78:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         (CANCEL, \"Cancel\"),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:     FULLY_CHARGED = \"fully-charged\"",
      "98:     PARTIALLY_REFUNDED = \"partially-refunded\"",
      "99:     FULLY_REFUNDED = \"fully-refunded\"",
      "101:     CHOICES = [",
      "102:         (NOT_CHARGED, \"Not charged\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     REFUSED = \"refused\"",
      "106:     CANCELLED = \"cancelled\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:         (FULLY_CHARGED, \"Fully charged\"),",
      "106:         (PARTIALLY_REFUNDED, \"Partially refunded\"),",
      "107:         (FULLY_REFUNDED, \"Fully refunded\"),",
      "108:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:         (REFUSED, \"Refused\"),",
      "116:         (CANCELLED, \"Cancelled\"),",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
      "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import json",
      "4: import Adyen",
      "5: from babel.numbers import get_currency_precision",
      "6: from django.core.handlers.wsgi import WSGIRequest",
      "8: from graphql_relay import from_global_id",
      "10: from ....checkout.models import Checkout",
      "",
      "[Removed Lines]",
      "2: from typing import Optional",
      "7: from django.http import HttpResponse, JsonResponse",
      "",
      "[Added Lines]",
      "2: from typing import List, Optional",
      "6: from django.contrib.auth.hashers import make_password",
      "8: from django.http import HttpResponse, HttpResponseNotFound, JsonResponse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     request_data_for_payment,",
      "22:     request_for_payment_refund,",
      "23: )",
      "25: GATEWAY_NAME = \"Adyen\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: from .webhooks import handle_webhook",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:         {\"name\": \"Origin Key\", \"value\": \"\"},",
      "51:         {\"name\": \"Origin Url\", \"value\": \"\"},",
      "52:         {\"name\": \"Live\", \"value\": \"\"},",
      "54:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
      "55:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
      "56:         {\"name\": \"Notification user\", \"value\": \"\"},",
      "",
      "[Removed Lines]",
      "53:         {\"name\": \"Enable notifications\", \"value\": True},",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:             \"type\": ConfigurationTypeField.BOOLEAN,",
      "110:             \"help_text\": (",
      "111:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
      "114:                 \"https://docs.adyen.com/development-resources/webhooks\"",
      "115:             ),",
      "116:             \"label\": \"Enable notifications\",",
      "",
      "[Removed Lines]",
      "112:                 \"webhook url is <your-backend-url>/plugins/mirumee.payments.adyen/\"",
      "113:                 \"webhooks/ \"",
      "",
      "[Added Lines]",
      "113:                 \"webhook url is http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:             \"help_text\": (",
      "135:                 \"Provide secret key generated on Adyen side.\"",
      "136:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
      "138:             ),",
      "139:             \"label\": \"HMAC secret key\",",
      "140:         },",
      "",
      "[Removed Lines]",
      "137:                 \"ions-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "137:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
      "138:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "143:             \"help_text\": (",
      "144:                 \"Base User provided on the Adyen side for authenticate incoming \"",
      "145:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "147:             ),",
      "148:             \"label\": \"Notification user\",",
      "149:         },",
      "",
      "[Removed Lines]",
      "146:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "147:                 \"set-up-notifications-in-your-customer-area \"",
      "148:                 \"The Saleor webhook url is \"",
      "149:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "152:             \"help_text\": (",
      "153:                 \"User password provided on the Adyen side for authenticate incoming \"",
      "154:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "156:             ),",
      "157:             \"label\": \"Notification password\",",
      "158:         },",
      "",
      "[Removed Lines]",
      "155:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "158:                 \"set-up-notifications-in-your-customer-area \"",
      "159:                 \"The Saleor webhook url is \"",
      "160:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
      "164:         self.config = GatewayConfig(",
      "165:             gateway_name=GATEWAY_NAME,",
      "167:             supported_currencies=configuration[\"Supported currencies\"],",
      "168:             connection_params={",
      "169:                 \"api_key\": configuration[\"API key\"],",
      "",
      "[Removed Lines]",
      "166:             auto_capture=True,  # FIXME check this",
      "",
      "[Added Lines]",
      "171:             auto_capture=configuration[",
      "172:                 \"Automatically mark payment as a capture\"",
      "173:             ],  # FIXME check this",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "171:                 \"return_url\": configuration[\"Return Url\"],",
      "172:                 \"origin_key\": configuration[\"Origin Key\"],",
      "173:                 \"origin_url\": configuration[\"Origin Url\"],",
      "174:             },",
      "175:         )",
      "176:         api_key = self.config.connection_params[\"api_key\"]",
      "177:         self.adyen = Adyen.Adyen(xapikey=api_key)",
      "179:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
      "184:     def _get_gateway_config(self) -> GatewayConfig:",
      "185:         return self.config",
      "",
      "[Removed Lines]",
      "181:         print(request.body)",
      "182:         return HttpResponse(\"[accepted]\")",
      "",
      "[Added Lines]",
      "181:                 \"live\": configuration[\"Live\"],",
      "182:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
      "183:                 \"webhook_user\": configuration[\"Notification user\"],",
      "184:                 \"webhook_user_password\": configuration[\"Notification password\"],",
      "191:         config = self._get_gateway_config()",
      "192:         return handle_webhook(request, config)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "238:             raw_response=result.message,",
      "239:         )",
      "241:     @require_active_plugin",
      "242:     def get_payment_config(self, previous_value):",
      "243:         return []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @classmethod",
      "252:     def _update_config_items(",
      "253:         cls, configuration_to_update: List[dict], current_config: List[dict]",
      "254:     ):",
      "255:         super()._update_config_items(configuration_to_update, current_config)",
      "256:         for item in current_config:",
      "257:             if item.get(\"name\") == \"Notification password\":",
      "258:                 item[\"value\"] = make_password(item[\"value\"])",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
      "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: logger = logging.getLogger(__name__)",
      "18: def get_price_amount(value: Decimal, currency: str):",
      "19:     \"\"\"Adyen doesn't use values with comma.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: def convert_adyen_price_format(value: str, currency: str):",
      "19:     value = Decimal(value)",
      "20:     precision = get_currency_precision(currency)",
      "21:     number_places = Decimal(10) ** -precision",
      "22:     return value * number_places",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
      "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import base64",
      "2: import binascii",
      "3: import hashlib",
      "4: import hmac",
      "5: import json",
      "6: from typing import Any, Dict, Optional",
      "8: from django.contrib.auth.hashers import check_password",
      "9: from django.core.handlers.wsgi import WSGIRequest",
      "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
      "11: from django.http.request import HttpHeaders",
      "12: from graphql_relay import from_global_id",
      "14: from ....order.events import payment_gateway_notification_event",
      "15: from ....payment.models import Payment, Transaction",
      "16: from ... import TransactionKind",
      "17: from ...interface import GatewayConfig, GatewayResponse",
      "18: from ...utils import create_transaction, gateway_postprocess",
      "19: from .utils import convert_adyen_price_format",
      "22: def get_payment(payment_id: str) -> Payment:",
      "23:     _type, payment_id = from_global_id(payment_id)",
      "24:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
      "25:     return payment",
      "28: def get_transaction(",
      "29:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
      "30: ) -> Transaction:",
      "31:     transaction = payment.transactions.filter(kind=kind, token=transaction_id)",
      "32:     return transaction",
      "35: def create_new_transaction(notification, payment, kind):",
      "36:     transaction_id = notification.get(\"pspReference\")",
      "37:     currency = notification.get(\"amount\", {}).get(\"currency\")",
      "38:     amount = convert_adyen_price_format(",
      "39:         notification.get(\"amount\", {}).get(\"value\"), currency",
      "40:     )",
      "41:     is_success = True if notification.get(\"success\") == \"true\" else False",
      "43:     gateway_response = GatewayResponse(",
      "44:         kind=kind,",
      "45:         action_required=False,",
      "46:         transaction_id=transaction_id,",
      "47:         is_success=is_success,",
      "48:         amount=amount,",
      "49:         currency=currency,",
      "50:         error=\"\",",
      "51:         raw_response={},",
      "52:     )",
      "53:     return create_transaction(",
      "54:         payment,",
      "55:         kind=kind,",
      "56:         payment_information=None,",
      "57:         action_required=False,",
      "58:         gateway_response=gateway_response,",
      "59:     )",
      "62: def create_payment_notification_for_order(",
      "63:     payment: Payment, success_msg: str, failed_msg: Optional[str], is_success: bool",
      "64: ):",
      "65:     if not payment.order:",
      "66:         # Order is not assigned",
      "67:         return",
      "68:     msg = success_msg if is_success else failed_msg",
      "70:     payment_gateway_notification_event(",
      "71:         order=payment.order, user=None, message=msg, payment=payment",
      "72:     )",
      "75: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "76:     mark_capture = gateway_config.auto_capture",
      "77:     if mark_capture:",
      "78:         # If we mark order as a capture by default we don't need to handle auth actions",
      "79:         return",
      "80:     payment = get_payment(notification.get(\"merchantReference\"))",
      "81:     if not payment:",
      "82:         # We don't know anything about that payment",
      "83:         return",
      "85:     transaction_id = notification.get(\"pspReference\")",
      "86:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
      "87:     if transaction:",
      "88:         # We already marked it as Auth",
      "89:         return",
      "91:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
      "93:     success_msg = \"Adyen: The payment request was successful.\"",
      "94:     failed_msg = \"Adyen: The payment request failed.\"",
      "95:     create_payment_notification_for_order(",
      "96:         payment, success_msg, failed_msg, transaction.is_success",
      "97:     )",
      "100: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "101:     payment = get_payment(notification.get(\"merchantReference\"))",
      "102:     if not payment:",
      "103:         return",
      "104:     transaction_id = notification.get(\"pspReference\")",
      "105:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
      "106:     if transaction:",
      "107:         # it is already cancelled",
      "108:         return",
      "109:     new_transaction = create_new_transaction(",
      "110:         notification, payment, TransactionKind.CANCEL",
      "111:     )",
      "112:     gateway_postprocess(new_transaction, payment)",
      "114:     success_msg = \"Adyen: The cancel request was successful.\"",
      "115:     failed_msg = \"Adyen: The request failed.\"",
      "116:     create_payment_notification_for_order(",
      "117:         payment, success_msg, failed_msg, transaction.is_success",
      "118:     )",
      "121: def handle_cancel_or_refund(",
      "122:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "123: ):",
      "124:     additional_data = notification.get(\"additionalData\")",
      "125:     action = additional_data.get(\"modification.action\")",
      "126:     if action == \"refund\":",
      "127:         handle_refund(notification, gateway_config)",
      "128:     elif action == \"cancel\":",
      "129:         handle_cancellation(notification, gateway_config)",
      "132: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "133:     payment = get_payment(notification.get(\"merchantReference\"))",
      "134:     if not payment:",
      "135:         return",
      "136:     transaction_id = notification.get(\"pspReference\")",
      "137:     transaction = get_transaction(payment, transaction_id, TransactionKind.CAPTURE)",
      "138:     if transaction and transaction.is_success:",
      "139:         # it is already captured",
      "140:         return",
      "142:     new_transaction = create_new_transaction(",
      "143:         notification, payment, TransactionKind.CAPTURE",
      "144:     )",
      "145:     gateway_postprocess(new_transaction, payment)",
      "147:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
      "148:     failed_msg = f\"Adyen: The capture {transaction_id} request failed.\"",
      "149:     create_payment_notification_for_order(",
      "150:         payment, success_msg, failed_msg, transaction.is_success",
      "151:     )",
      "154: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "155:     payment = get_payment(notification.get(\"merchantReference\"))",
      "156:     if not payment:",
      "157:         return",
      "158:     transaction_id = notification.get(\"pspReference\")",
      "160:     transaction = get_transaction(",
      "161:         payment, transaction_id, TransactionKind.CAPTURE_FAILED",
      "162:     )",
      "163:     if transaction and transaction.is_success:",
      "164:         # it is already failed",
      "165:         return",
      "166:     new_transaction = create_new_transaction(",
      "167:         notification, payment, TransactionKind.CAPTURE_FAILED",
      "168:     )",
      "169:     gateway_postprocess(new_transaction, payment)",
      "171:     msg = f\"Adyen: The capture for {transaction_id} failed due to a technical issue.\"",
      "172:     create_payment_notification_for_order(payment, msg, None, True)",
      "175: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "176:     mark_capture = gateway_config.auto_capture",
      "177:     if mark_capture:",
      "178:         # If we mark order as a capture by default we don't need to handle this action",
      "179:         return",
      "180:     payment = get_payment(notification.get(\"merchantReference\"))",
      "181:     if not payment:",
      "182:         return",
      "183:     transaction_id = notification.get(\"pspReference\")",
      "184:     transaction = get_transaction(payment, transaction_id, TransactionKind.PENDING)",
      "185:     if transaction and transaction.is_success:",
      "186:         # it is already pending",
      "187:         return",
      "188:     new_transaction = create_new_transaction(",
      "189:         notification, payment, TransactionKind.PENDING",
      "190:     )",
      "191:     gateway_postprocess(new_transaction, payment)",
      "193:     msg = f\"Adyen: The transaction {transaction_id} is pending.\"",
      "194:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
      "197: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "198:     payment = get_payment(notification.get(\"merchantReference\"))",
      "199:     if not payment:",
      "200:         return",
      "201:     transaction_id = notification.get(\"pspReference\")",
      "202:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "203:     if transaction and transaction.is_success:",
      "204:         # it is already refunded",
      "205:         return",
      "206:     new_transaction = create_new_transaction(",
      "207:         notification, payment, TransactionKind.REFUND",
      "208:     )",
      "209:     gateway_postprocess(new_transaction, payment)",
      "211:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "212:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "213:     create_payment_notification_for_order(",
      "214:         payment, success_msg, failed_msg, transaction.is_success",
      "215:     )",
      "218: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "219:     payment = get_payment(notification.get(\"merchantReference\"))",
      "220:     if not payment:",
      "221:         return",
      "222:     transaction_id = notification.get(\"pspReference\")",
      "223:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "224:     if transaction and not transaction.is_success:",
      "225:         # The refund is already saved",
      "226:         return",
      "227:     new_transaction = create_new_transaction(",
      "228:         notification, payment, TransactionKind.REFUND",
      "229:     )",
      "230:     gateway_postprocess(new_transaction, payment)",
      "232:     msg = (",
      "233:         f\"The refund {transaction_id} failed due to a technical issue. If you receive \"",
      "234:         f\"more than two failures on the same refund, contact Adyen Support Team.\"",
      "235:     )",
      "236:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "239: def handle_reversed_refund(",
      "240:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "241: ):",
      "242:     payment = get_payment(notification.get(\"merchantReference\"))",
      "243:     if not payment:",
      "244:         return",
      "245:     transaction_id = notification.get(\"pspReference\")",
      "246:     transaction = get_transaction(",
      "247:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
      "248:     )",
      "250:     if transaction and not transaction.is_success:",
      "251:         # it is already refunded",
      "252:         return",
      "253:     new_transaction = create_new_transaction(",
      "254:         notification, payment, TransactionKind.REFUND_REVERSED",
      "255:     )",
      "256:     gateway_postprocess(new_transaction, payment)",
      "257:     msg = (",
      "258:         f\"Adyen: The refunded amount from {transaction_id} has been returned to Adyen, \"",
      "259:         f\"and is back in your account. This may happen if the shopper's bank account \"",
      "260:         f\"is no longer valid\"",
      "261:     )",
      "262:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "265: def handle_refund_with_data(",
      "266:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "267: ):",
      "269:     payment = get_payment(notification.get(\"merchantReference\"))",
      "270:     if not payment:",
      "271:         return",
      "272:     transaction_id = notification.get(\"pspReference\")",
      "273:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "274:     if transaction:",
      "275:         # it is already refunded",
      "276:         return",
      "277:     new_transaction = create_new_transaction(",
      "278:         notification, payment, TransactionKind.REFUND",
      "279:     )",
      "280:     gateway_postprocess(new_transaction, payment)",
      "281:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "282:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "283:     create_payment_notification_for_order(",
      "284:         payment, success_msg, failed_msg, transaction.is_success",
      "285:     )",
      "288: def webhook_not_implemented(",
      "289:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "290: ):",
      "291:     adyen_id = notification.get(\"pspReference\")",
      "292:     success = notification.get(\"success\", True)",
      "293:     event = notification.get(\"eventCode\")",
      "294:     payment = get_payment(notification.get(\"merchantReference\"))",
      "295:     if not payment:",
      "296:         return",
      "297:     msg = (",
      "298:         f\"Received not implemented notification from Adyen. Event name: {event}, \"",
      "299:         f\"success: {success}, adyen reference: {adyen_id}.\"",
      "300:     )",
      "301:     create_payment_notification_for_order(payment, msg, None, True)",
      "304: EVENT_MAP = {",
      "305:     \"AUTHORISATION\": handle_authorization,",
      "306:     \"AUTHORISATION_ADJUSTMENT\": webhook_not_implemented,",
      "307:     \"CANCELLATION\": handle_cancellation,",
      "308:     \"CANCEL_OR_REFUND\": handle_cancel_or_refund,",
      "309:     \"CAPTURE\": handle_capture,",
      "310:     \"CAPTURE_FAILED\": handle_failed_capture,",
      "311:     \"HANDLED_EXTERNALLY\": webhook_not_implemented,",
      "312:     \"ORDER_OPENED\": webhook_not_implemented,",
      "313:     \"ORDER_CLOSED\": webhook_not_implemented,",
      "314:     \"PENDING\": handle_pending,",
      "315:     \"PROCESS_RETRY\": webhook_not_implemented,",
      "316:     \"REFUND\": handle_refund,",
      "317:     \"REFUND_FAILED\": handle_failed_refund,",
      "318:     \"REFUNDED_REVERSED\": handle_reversed_refund,",
      "319:     \"REFUND_WITH_DATA\": handle_refund_with_data,",
      "320:     \"REPORT_AVAILABLE\": webhook_not_implemented,",
      "321:     \"VOID_PENDING_REFUND\": webhook_not_implemented,",
      "322: }",
      "325: def validate_hmac_signature(",
      "326:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
      "327: ) -> bool:",
      "329:     \"\"\"",
      "330:     pspReference 7914073381342284",
      "331:     originalReference",
      "332:     merchantAccountCode YOUR_MERCHANT_ACCOUNT",
      "333:     merchantReference TestPayment-1407325143704",
      "334:     value 1130",
      "335:     currency EUR",
      "336:     eventCode AUTHORISATION",
      "337:     success true",
      "338:     \"\"\"",
      "339:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
      "340:     if not hmac_key:",
      "341:         return True",
      "343:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
      "344:     if not hmac_signature and hmac_key:",
      "345:         return False",
      "347:     success = \"true\" if notification.get(\"success\", \"\") else \"false\"",
      "348:     if notification.get(\"success\", None) is None:",
      "349:         success = \"\"",
      "351:     payload_list = [",
      "352:         notification.get(\"pspReference\", \"\"),",
      "353:         notification.get(\"originalReference\", \"\"),",
      "354:         notification.get(\"merchantAccountCode\", \"\"),",
      "355:         notification.get(\"merchantReference\", \"\"),",
      "356:         notification.get(\"value\", \"\"),",
      "357:         notification.get(\"currency\", \"\"),",
      "358:         notification.get(\"eventCode\", \"\"),",
      "359:         success,",
      "360:     ]",
      "361:     payload = \":\".join(payload_list)",
      "363:     hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)",
      "364:     expected_merchant_sign = base64.b64encode(hm.digest())",
      "365:     return hmac_signature == expected_merchant_sign.decode(\"utf-8\")",
      "368: def validate_auth_user(headers: HttpHeaders, gateway_config: \"GatewayConfig\") -> bool:",
      "369:     username = gateway_config.connection_params[\"webhook_user\"]",
      "370:     password = gateway_config.connection_params[\"webhook_user_password\"]",
      "371:     auth_header = headers.get(\"Authorization\")",
      "372:     if not auth_header and not username:",
      "373:         return True",
      "375:     split_auth = auth_header.split(maxsplit=1)",
      "376:     prefix = \"BASIC\"",
      "378:     if len(split_auth) != 2 or split_auth[0].upper() != prefix:",
      "379:         return False",
      "381:     auth = split_auth[1]",
      "382:     try:",
      "383:         request_username, request_password = base64.b64decode(auth).split(\":\")",
      "384:         user_is_correct = request_username == username",
      "385:         if user_is_correct and check_password(request_password, password):",
      "386:             return True",
      "387:     except binascii.Error:",
      "388:         pass",
      "389:     return False",
      "392: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
      "393:     json_data = json.loads(request.body)",
      "394:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
      "395:     # object.",
      "396:     notification = json_data.get(\"notificationItems\")[0].get(",
      "397:         \"NotificationRequestItem\", {}",
      "398:     )",
      "400:     if not validate_hmac_signature(notification, gateway_config):",
      "401:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
      "402:     if not validate_auth_user(notification, gateway_config):",
      "403:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
      "405:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
      "406:     if event_handler:",
      "407:         event_handler(notification, gateway_config)",
      "408:         return HttpResponse(\"[accepted]\")",
      "409:     return HttpResponseNotFound()",
      "",
      "---------------"
    ],
    "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py": [
      "File: saleor/payment/migrations/0019_auto_20200721_1313.py -> saleor/payment/migrations/0019_auto_20200721_1313.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Generated by Django 3.0.6 on 2020-07-21 13:13",
      "3: from django.db import migrations, models",
      "6: class Migration(migrations.Migration):",
      "8:     dependencies = [",
      "9:         (\"payment\", \"0018_auto_20200720_1118\"),",
      "10:     ]",
      "12:     operations = [",
      "13:         migrations.AlterField(",
      "14:             model_name=\"payment\",",
      "15:             name=\"charge_status\",",
      "16:             field=models.CharField(",
      "17:                 choices=[",
      "18:                     (\"not-charged\", \"Not charged\"),",
      "19:                     (\"pending\", \"Pending\"),",
      "20:                     (\"partially-charged\", \"Partially charged\"),",
      "21:                     (\"fully-charged\", \"Fully charged\"),",
      "22:                     (\"partially-refunded\", \"Partially refunded\"),",
      "23:                     (\"fully-refunded\", \"Fully refunded\"),",
      "24:                     (\"refused\", \"Refused\"),",
      "25:                     (\"cancelled\", \"Cancelled\"),",
      "26:                 ],",
      "27:                 default=\"not-charged\",",
      "28:                 max_length=20,",
      "29:             ),",
      "30:         ),",
      "31:         migrations.AlterField(",
      "32:             model_name=\"transaction\",",
      "33:             name=\"kind\",",
      "34:             field=models.CharField(",
      "35:                 choices=[",
      "36:                     (\"auth\", \"Authorization\"),",
      "37:                     (\"pending\", \"Pending\"),",
      "38:                     (\"refund\", \"Refund\"),",
      "39:                     (\"refund_ongoing\", \"Refund in progress\"),",
      "40:                     (\"capture\", \"Capture\"),",
      "41:                     (\"void\", \"Void\"),",
      "42:                     (\"confirm\", \"Confirm\"),",
      "43:                     (\"cancel\", \"Cancel\"),",
      "44:                 ],",
      "45:                 max_length=25,",
      "46:             ),",
      "47:         ),",
      "48:     ]",
      "",
      "---------------"
    ],
    "saleor/payment/utils.py||saleor/payment/utils.py": [
      "File: saleor/payment/utils.py -> saleor/payment/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: def create_transaction(",
      "133:     payment: Payment,",
      "134:     kind: str,",
      "136:     action_required: bool = False,",
      "137:     gateway_response: GatewayResponse = None,",
      "138:     error_msg=None,",
      "",
      "[Removed Lines]",
      "135:     payment_information: PaymentData,",
      "",
      "[Added Lines]",
      "135:     payment_information: Optional[PaymentData],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
      "221:     #     payment.save(update_fields=[\"charge_status\", ])",
      "224:         payment.captured_amount += transaction.amount",
      "226:         # Set payment charge status to fully charged",
      "",
      "[Removed Lines]",
      "223:     if transaction_kind in {TransactionKind.CAPTURE, TransactionKind.CONFIRM}:",
      "",
      "[Added Lines]",
      "223:     if transaction_kind in {",
      "224:         TransactionKind.CAPTURE,",
      "225:         TransactionKind.CONFIRM,",
      "226:         TransactionKind.REFUND_REVERSED,",
      "227:     }:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "249:         payment.save(",
      "250:             update_fields=[\"charge_status\",]",
      "251:         )",
      "254: def fetch_customer_id(user: User, gateway: str):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:     elif transaction_kind == TransactionKind.CANCEL:",
      "257:         payment.charge_status = ChargeStatus.CANCELLED",
      "258:         payment.save(",
      "259:             update_fields=[\"charge_status\",]",
      "260:         )",
      "261:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
      "262:         if payment.charge_status in {",
      "263:             ChargeStatus.PARTIALLY_CHARGED,",
      "264:             ChargeStatus.FULLY_CHARGED,",
      "265:         }:",
      "266:             payment.captured_amount -= transaction.amount",
      "267:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
      "268:             if payment.get_charge_amount() <= 0:",
      "269:                 payment.charge_status = ChargeStatus.FULLY_CHARGED",
      "271:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4a0e3d9a266520cc1237630200d25254832e3698",
      "candidate_info": {
        "commit_hash": "4a0e3d9a266520cc1237630200d25254832e3698",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/4a0e3d9a266520cc1237630200d25254832e3698",
        "files": [
          "saleor/graphql/payment/mutations.py",
          "saleor/graphql/payment/tests/test_payment.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/utils.py"
        ],
        "message": "Handle additional payment actions in adyen",
        "before_after_code_files": [
          "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py",
          "saleor/graphql/payment/tests/test_payment.py||saleor/graphql/payment/tests/test_payment.py",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/utils.py||saleor/payment/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py": [
          "File: saleor/graphql/payment/mutations.py -> saleor/graphql/payment/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:             # FIXME this is not a customer IP address. It is a client storefront ip",
          "193:             customer_ip_address=get_client_ip(info.context),",
          "194:             checkout=checkout,",
          "195:         )",
          "196:         return CheckoutPaymentCreate(payment=payment, checkout=checkout)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:             return_url=data.get(\"return_url\"),",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/tests/test_payment.py||saleor/graphql/payment/tests/test_payment.py": [
          "File: saleor/graphql/payment/tests/test_payment.py -> saleor/graphql/payment/tests/test_payment.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "206:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "207:     variables = {",
          "208:         \"checkoutId\": checkout_id,",
          "209:         \"input\": {",
          "210:             \"gateway\": DUMMY_GATEWAY,",
          "211:             \"token\": \"sample-token\",",
          "212:             \"amount\": total.gross.amount,",
          "213:         },",
          "214:     }",
          "215:     response = user_api_client.post_graphql(CREATE_PAYMENT_MUTATION, variables)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:     return_url = \"https://www.example.com\"",
          "214:             \"returnUrl\": return_url,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:     assert payment.billing_address_1 == checkout.billing_address.street_address_1",
          "230:     assert payment.billing_first_name == checkout.billing_address.first_name",
          "231:     assert payment.billing_last_name == checkout.billing_address.last_name",
          "234: def test_checkout_add_payment_default_amount(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:     assert payment.return_url == return_url",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import json",
          "2: from typing import List, Optional",
          "4: import Adyen",
          "5: from django.contrib.auth.hashers import make_password",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: from urllib.parse import urlencode",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: from graphql_relay import from_global_id",
          "10: from ....checkout.models import Checkout",
          "11: from ....plugins.base_plugin import BasePlugin, ConfigurationTypeField",
          "12: from ... import PaymentError, TransactionKind",
          "13: from ...interface import GatewayConfig, GatewayResponse, PaymentData, PaymentGateway",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: from ....core.emails import prepare_url",
          "13: from ....payment.models import Payment",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
          "192:         config = self._get_gateway_config()",
          "195:     def _get_gateway_config(self) -> GatewayConfig:",
          "196:         return self.config",
          "",
          "[Removed Lines]",
          "193:         return handle_webhook(request, config)",
          "",
          "[Added Lines]",
          "196:         return handle_webhook(request, config, self.adyen.checkout.payments_details)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "229:     def process_payment(",
          "230:         self, payment_information: \"PaymentData\", previous_value",
          "231:     ) -> \"GatewayResponse\":",
          "232:         request_data = request_data_for_payment(",
          "233:             payment_information,",
          "235:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "236:             origin_url=self.config.connection_params[\"origin_url\"],",
          "237:         )",
          "",
          "[Removed Lines]",
          "234:             return_url=self.config.connection_params[\"return_url\"],",
          "",
          "[Added Lines]",
          "235:         params = urlencode({\"payment\": payment_information.payment_id})",
          "238:             return_url=prepare_url(params, self.config.connection_params[\"return_url\"]),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "242:             kind = TransactionKind.CAPTURE",
          "243:         else:",
          "244:             kind = TransactionKind.AUTH",
          "245:         return GatewayResponse(",
          "246:             is_success=is_success,",
          "247:             action_required=\"action\" in result.message,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:         action = result.message.get(\"action\")",
          "251:         if action:",
          "252:             _type, payment_id = from_global_id(payment_information.payment_id)",
          "253:             payment = Payment.objects.filter(pk=payment_id).first()",
          "254:             if not payment:",
          "255:                 # todo: return error",
          "256:                 raise Exception(\"Payment does not exists\")",
          "257:             details = result.message.get(\"details\")",
          "258:             payment.extra_data = json.dumps(",
          "259:                 {",
          "260:                     \"payment_data\": action[\"paymentData\"],",
          "261:                     \"parameters\": [detail[\"key\"] for detail in details]",
          "262:                     if details",
          "263:                     else [],",
          "264:                 }",
          "265:             )",
          "266:             payment.save(update_fields=[\"extra_data\"])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "251:             transaction_id=result.message.get(\"pspReference\", \"\"),",
          "252:             error=result.message.get(\"refusalReason\"),",
          "253:             raw_response=result.message,",
          "255:         )",
          "257:     @classmethod",
          "",
          "[Removed Lines]",
          "254:             action_required_data=result.message.get(\"action\"),",
          "",
          "[Added Lines]",
          "277:             action_required_data=action,",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import hashlib",
          "4: import hmac",
          "5: import json",
          "8: from django.contrib.auth.hashers import check_password",
          "9: from django.core.handlers.wsgi import WSGIRequest",
          "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
          "11: from django.http.request import HttpHeaders",
          "12: from graphql_relay import from_global_id",
          "14: from ....order.actions import (",
          "",
          "[Removed Lines]",
          "6: from typing import Any, Dict, Optional",
          "",
          "[Added Lines]",
          "6: from typing import Any, Callable, Dict, Optional",
          "12: from django.shortcuts import redirect",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "468:     return False",
          "473:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
          "474:     # object.",
          "475:     notification = json_data.get(\"notificationItems\")[0].get(",
          "",
          "[Removed Lines]",
          "471: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
          "472:     json_data = json.loads(request.body)",
          "",
          "[Added Lines]",
          "472: def handle_webhook(",
          "473:     request: WSGIRequest, gateway_config: \"GatewayConfig\", payment_details: Callable",
          "474: ):",
          "475:     try:",
          "476:         json_data = json.loads(request.body)",
          "477:     except json.decoder.JSONDecodeError:",
          "478:         return handle_additional_actions(request, payment_details)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "486:         event_handler(notification, gateway_config)",
          "487:         return HttpResponse(\"[accepted]\")",
          "488:     return HttpResponseNotFound()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497: def handle_additional_actions(request: WSGIRequest, payment_details: Callable):",
          "498:     payment_id = request.GET[\"payment\"]",
          "499:     _type, payment_pk = from_global_id(payment_id)",
          "500:     payment = Payment.objects.filter(pk=payment_pk).first()",
          "502:     if not payment:",
          "503:         # TODO: raise error",
          "504:         return",
          "506:     data = json.loads(payment.extra_data)",
          "507:     return_url = payment.return_url",
          "509:     if not return_url:",
          "510:         # TODO: raise error",
          "511:         pass",
          "513:     request_data = {",
          "514:         \"paymentData\": data[\"payment_data\"],",
          "515:         \"details\": {key: request.POST[key] for key in data[\"parameters\"]},",
          "516:     }",
          "518:     result = payment_details(request_data)",
          "520:     # Check if further action is needed.",
          "521:     if \"action\" in result.message:",
          "522:         redirect(return_url, result.message[\"action\"])",
          "523:     else:",
          "524:         redirect(return_url, result.message[\"resultCode\"])",
          "",
          "---------------"
        ],
        "saleor/payment/utils.py||saleor/payment/utils.py": [
          "File: saleor/payment/utils.py -> saleor/payment/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     extra_data: Dict = None,",
          "78:     checkout: Checkout = None,",
          "79:     order: Order = None,",
          "80: ) -> Payment:",
          "81:     \"\"\"Create a payment instance.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     return_url: str = None,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:         \"currency\": currency,",
          "124:         \"gateway\": gateway,",
          "125:         \"total\": total,",
          "126:     }",
          "128:     payment, _ = Payment.objects.get_or_create(defaults=defaults, **data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:         \"return_url\": return_url,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f6fbe2ebf9b7224a09fbdc6d4b00e25ee8ca24b",
      "candidate_info": {
        "commit_hash": "1f6fbe2ebf9b7224a09fbdc6d4b00e25ee8ca24b",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/1f6fbe2ebf9b7224a09fbdc6d4b00e25ee8ca24b",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/utils.py"
        ],
        "message": "Handle confirm action (#5959)\n\n* Handle confirm action\n\n* Add missing if to confirm that we have any field to update on payment obj",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/utils.py||saleor/payment/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: from ....plugins.base_plugin import BasePlugin, ConfigurationTypeField",
          "12: from ... import PaymentError, TransactionKind",
          "13: from ...interface import GatewayConfig, GatewayResponse, PaymentData, PaymentGateway",
          "15: from ..utils import get_supported_currencies",
          "16: from .utils import (",
          "17:     api_call,",
          "",
          "[Removed Lines]",
          "14: from ...models import Transaction",
          "",
          "[Added Lines]",
          "14: from ...models import Payment, Transaction",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:     def confirm_payment(",
          "294:         self, payment_information: \"PaymentData\", previous_value",
          "295:     ) -> \"GatewayResponse\":",
          "300:         return GatewayResponse(",
          "303:             kind=TransactionKind.CONFIRM,",
          "309:         )",
          "311:     @require_active_plugin",
          "",
          "[Removed Lines]",
          "296:         additional_data = payment_information.data",
          "297:         result = api_call(additional_data, self.adyen.checkout.payments)",
          "298:         is_success = result.message[\"resultCode\"].strip().lower() not in FAILED_STATUSES",
          "301:             is_success=is_success,",
          "302:             action_required=\"action\" in result.message,",
          "304:             amount=payment_information.amount,",
          "305:             currency=payment_information.currency,",
          "306:             transaction_id=result.get(\"pspReference\", \"\"),",
          "307:             error=result.message.get(\"refusalReason\"),",
          "308:             raw_response=result.message,",
          "",
          "[Added Lines]",
          "297:         _type, payment_id = from_global_id(payment_information.payment_id)",
          "299:         # The additional checks are proceed asynchronously so we try to confirm that",
          "300:         # the payment is already processed",
          "301:         payment = Payment.objects.filter(id=payment_id).first()",
          "302:         if not payment:",
          "303:             raise PaymentError(\"Unable to find the payment.\")",
          "305:         transaction = (",
          "306:             payment.transactions.filter(",
          "307:                 payment__id=payment_id,",
          "308:                 kind__in=[TransactionKind.AUTH, TransactionKind.CAPTURE],",
          "309:                 is_success=True,",
          "310:             )",
          "311:             .exclude(token__isnull=True, token__exact=\"\")",
          "312:             .last()",
          "313:         )",
          "314:         if not transaction:",
          "315:             raise PaymentError(",
          "316:                 \"Unable to finish the payment. Payment needs to be confirm by external \"",
          "317:                 \"source.\"",
          "318:             )",
          "320:             is_success=transaction.is_success,",
          "321:             action_required=False,",
          "323:             amount=transaction.amount,",
          "324:             currency=transaction.currency,",
          "325:             transaction_id=transaction.token,",
          "326:             error=None,",
          "327:             raw_response={},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "317:         # we take Auth kind because it contains the transaction id that we need",
          "318:         transaction = (",
          "319:             Transaction.objects.filter(",
          "321:             )",
          "322:             .exclude(token__isnull=True, token__exact=\"\")",
          "323:             .last()",
          "",
          "[Removed Lines]",
          "320:                 payment__id=payment_id, kind=TransactionKind.AUTH",
          "",
          "[Added Lines]",
          "339:                 payment__id=payment_id, kind=TransactionKind.AUTH, is_success=True",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "351:         _type, payment_id = from_global_id(payment_information.payment_id)",
          "352:         transaction = (",
          "353:             Transaction.objects.filter(",
          "355:             )",
          "356:             .exclude(token__isnull=True, token__exact=\"\")",
          "357:             .last()",
          "",
          "[Removed Lines]",
          "354:                 payment__id=payment_id, kind=TransactionKind.AUTH",
          "",
          "[Added Lines]",
          "373:                 payment__id=payment_id, kind=TransactionKind.AUTH, is_success=True",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py": [
          "File: saleor/payment/gateways/adyen/tests/test_plugin.py -> saleor/payment/gateways/adyen/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     assert response.error is None",
          "91: def test_confirm_payment(payment_adyen_for_order, adyen_plugin):",
          "96:     )",
          "97:     adyen_plugin = adyen_plugin()",
          "98:     response = adyen_plugin.confirm_payment(payment_info, None)",
          "102: @pytest.mark.vcr",
          "",
          "[Removed Lines]",
          "89: @pytest.mark.vcr",
          "90: @pytest.mark.skip(reason=\"To finish when additional auth data schema will be known\")",
          "92:     return  # test it when we will have additional auth data",
          "93:     payment_info = create_payment_information(",
          "94:         payment_adyen_for_order,",
          "95:         # additional_data=...",
          "99:     assert response",
          "",
          "[Added Lines]",
          "90:     payment_info = create_payment_information(payment_adyen_for_order,)",
          "91:     gateway_response = GatewayResponse(",
          "92:         kind=TransactionKind.AUTH,",
          "93:         action_required=False,",
          "94:         transaction_id=\"882595494831959A\",",
          "95:         is_success=True,",
          "96:         amount=payment_info.amount,",
          "97:         currency=payment_info.currency,",
          "98:         error=\"\",",
          "99:         raw_response={},",
          "100:     )",
          "102:     auth_transaction = create_transaction(",
          "103:         payment=payment_adyen_for_order,",
          "104:         payment_information=payment_info,",
          "105:         kind=TransactionKind.AUTH,",
          "106:         gateway_response=gateway_response,",
          "111:     assert response is not None",
          "112:     assert response.is_success is True",
          "113:     assert response.kind == TransactionKind.CONFIRM",
          "114:     assert response.amount == auth_transaction.amount",
          "115:     assert response.currency == auth_transaction.currency",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         kind=TransactionKind.AUTH,",
          "110:         action_required=False,",
          "111:         transaction_id=\"882595494831959A\",",
          "113:         amount=payment_info.amount,",
          "114:         currency=payment_info.currency,",
          "115:         error=\"\",",
          "",
          "[Removed Lines]",
          "112:         is_success=False,",
          "",
          "[Added Lines]",
          "128:         is_success=True,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:         kind=TransactionKind.AUTH,",
          "142:         action_required=False,",
          "143:         transaction_id=\"882595494831959A\",",
          "145:         amount=payment_info.amount,",
          "146:         currency=payment_info.currency,",
          "147:         error=\"\",",
          "",
          "[Removed Lines]",
          "144:         is_success=False,",
          "",
          "[Added Lines]",
          "160:         is_success=True,",
          "",
          "---------------"
        ],
        "saleor/payment/utils.py||saleor/payment/utils.py": [
          "File: saleor/payment/utils.py -> saleor/payment/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:         payment.save(update_fields=[\"to_confirm\"])",
          "216:         return",
          "218:     transaction_kind = transaction.kind",
          "220:     if transaction_kind in {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:     changed_fields = []",
          "219:     # to_confirm is defined by the transaction.action_required. Payment doesn't",
          "220:     # require confirmation when we got action_required == False",
          "221:     if payment.to_confirm:",
          "222:         payment.to_confirm = False",
          "223:         changed_fields.append(\"to_confirm\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:         payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
          "230:         if payment.get_charge_amount() <= 0:",
          "231:             payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "235:     elif transaction_kind == TransactionKind.VOID:",
          "236:         payment.is_active = False",
          "239:     elif transaction_kind == TransactionKind.REFUND:",
          "241:         payment.captured_amount -= transaction.amount",
          "242:         payment.charge_status = ChargeStatus.PARTIALLY_REFUNDED",
          "243:         if payment.captured_amount <= 0:",
          "244:             payment.charge_status = ChargeStatus.FULLY_REFUNDED",
          "245:             payment.is_active = False",
          "246:         changed_fields += [\"charge_status\", \"is_active\"]",
          "248:     elif transaction_kind == TransactionKind.PENDING:",
          "249:         payment.charge_status = ChargeStatus.PENDING",
          "251:     elif transaction_kind == TransactionKind.CANCEL:",
          "252:         payment.charge_status = ChargeStatus.CANCELLED",
          "254:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
          "255:         if payment.charge_status in {",
          "256:             ChargeStatus.PARTIALLY_CHARGED,",
          "",
          "[Removed Lines]",
          "233:         payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
          "237:         payment.save(update_fields=[\"is_active\", \"modified\"])",
          "240:         changed_fields = [\"captured_amount\", \"modified\"]",
          "247:         payment.save(update_fields=changed_fields)",
          "250:         payment.save(update_fields=[\"charge_status\"])",
          "253:         payment.save(update_fields=[\"charge_status\"])",
          "",
          "[Added Lines]",
          "239:         changed_fields += [\"charge_status\", \"captured_amount\", \"modified\"]",
          "243:         changed_fields += [\"is_active\", \"modified\"]",
          "246:         changed_fields += [\"captured_amount\", \"modified\"]",
          "255:         changed_fields += [\"charge_status\"]",
          "258:         changed_fields += [\"charge_status\"]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
          "261:             if payment.captured_amount <= 0:",
          "262:                 payment.charge_status = ChargeStatus.NOT_CHARGED",
          "267: def fetch_customer_id(user: User, gateway: str):",
          "",
          "[Removed Lines]",
          "264:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
          "",
          "[Added Lines]",
          "268:             changed_fields += [\"charge_status\", \"captured_amount\", \"modified\"]",
          "269:     if changed_fields:",
          "270:         payment.save(update_fields=changed_fields)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "486a38ff58bab220fef884dd8852112ef5f7b026",
      "candidate_info": {
        "commit_hash": "486a38ff58bab220fef884dd8852112ef5f7b026",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/486a38ff58bab220fef884dd8852112ef5f7b026",
        "files": [
          "CHANGELOG.md",
          "saleor/account/events.py",
          "saleor/account/migrations/0051_alter_customerevent_user.py",
          "saleor/account/models.py",
          "saleor/core/utils/validators.py",
          "saleor/graphql/account/tests/test_account.py",
          "saleor/graphql/account/tests/test_account_events.py",
          "saleor/invoice/events.py",
          "saleor/order/events.py"
        ],
        "message": "Fix failing account mutations for app (#7569)\n\n* Fix failing account mutations for app\n\n* Update changelog",
        "before_after_code_files": [
          "saleor/account/events.py||saleor/account/events.py",
          "saleor/account/migrations/0051_alter_customerevent_user.py||saleor/account/migrations/0051_alter_customerevent_user.py",
          "saleor/account/models.py||saleor/account/models.py",
          "saleor/core/utils/validators.py||saleor/core/utils/validators.py",
          "saleor/graphql/account/tests/test_account.py||saleor/graphql/account/tests/test_account.py",
          "saleor/graphql/account/tests/test_account_events.py||saleor/graphql/account/tests/test_account_events.py",
          "saleor/invoice/events.py||saleor/invoice/events.py",
          "saleor/order/events.py||saleor/order/events.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/order/events.py||saleor/order/events.py"
          ],
          "candidate": [
            "saleor/order/events.py||saleor/order/events.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/account/events.py||saleor/account/events.py": [
          "File: saleor/account/events.py -> saleor/account/events.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from typing import Optional",
          "3: from ..order.models import Order, OrderLine",
          "4: from . import CustomerEvents",
          "5: from .models import CustomerEvent, User",
          "8: def customer_account_created_event(*, user: User) -> Optional[CustomerEvent]:",
          "9:     return CustomerEvent.objects.create(user=user, type=CustomerEvents.ACCOUNT_CREATED)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: from ..core.utils.validators import user_is_valid",
          "8: UserType = Optional[User]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: def customer_added_to_note_order_event(",
          "53: ) -> CustomerEvent:",
          "54:     return CustomerEvent.objects.create(",
          "55:         user=user,",
          "56:         order=order,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:     if not user_is_valid(user):",
          "58:         user = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73: def staff_user_deleted_a_customer_event(",
          "75: ) -> CustomerEvent:",
          "76:     return CustomerEvent.objects.create(",
          "77:         user=staff_user,",
          "78:         order=None,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     if not user_is_valid(staff_user):",
          "82:         staff_user = None",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84: def staff_user_assigned_email_to_a_customer_event(",
          "86: ) -> CustomerEvent:",
          "87:     return CustomerEvent.objects.create(",
          "88:         user=staff_user,",
          "89:         order=None,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     if not user_is_valid(staff_user):",
          "95:         staff_user = None",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92:     )",
          "106: def staff_user_assigned_name_to_a_customer_event(",
          "108: ) -> CustomerEvent:",
          "109:     return CustomerEvent.objects.create(",
          "110:         user=staff_user,",
          "111:         order=None,",
          "",
          "[Removed Lines]",
          "95: def staff_user_added_note_to_a_customer_event(",
          "97: ) -> CustomerEvent:",
          "98:     return CustomerEvent.objects.create(",
          "99:         user=staff_user,",
          "100:         order=None,",
          "101:         type=CustomerEvents.NOTE_ADDED,",
          "102:         parameters={\"message\": note},",
          "103:     )",
          "",
          "[Added Lines]",
          "107:     if not user_is_valid(staff_user):",
          "108:         staff_user = None",
          "",
          "---------------"
        ],
        "saleor/account/migrations/0051_alter_customerevent_user.py||saleor/account/migrations/0051_alter_customerevent_user.py": [
          "File: saleor/account/migrations/0051_alter_customerevent_user.py -> saleor/account/migrations/0051_alter_customerevent_user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Generated by Django 3.2.2 on 2021-07-01 08:45",
          "3: import django.db.models.deletion",
          "4: from django.conf import settings",
          "5: from django.db import migrations, models",
          "8: class Migration(migrations.Migration):",
          "10:     dependencies = [",
          "11:         (\"account\", \"0050_auto_20210506_1058\"),",
          "12:     ]",
          "14:     operations = [",
          "15:         migrations.AlterField(",
          "16:             model_name=\"customerevent\",",
          "17:             name=\"user\",",
          "18:             field=models.ForeignKey(",
          "19:                 null=True,",
          "20:                 on_delete=django.db.models.deletion.CASCADE,",
          "21:                 related_name=\"events\",",
          "22:                 to=settings.AUTH_USER_MODEL,",
          "23:             ),",
          "24:         ),",
          "25:     ]",
          "",
          "---------------"
        ],
        "saleor/account/models.py||saleor/account/models.py": [
          "File: saleor/account/models.py -> saleor/account/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:     )",
          "277:     order = models.ForeignKey(\"order.Order\", on_delete=models.SET_NULL, null=True)",
          "278:     parameters = JSONField(blank=True, default=dict, encoder=CustomJsonEncoder)",
          "281:     class Meta:",
          "282:         ordering = (\"date\",)",
          "",
          "[Removed Lines]",
          "279:     user = models.ForeignKey(User, related_name=\"events\", on_delete=models.CASCADE)",
          "",
          "[Added Lines]",
          "279:     user = models.ForeignKey(",
          "280:         User, related_name=\"events\", on_delete=models.CASCADE, null=True",
          "281:     )",
          "",
          "---------------"
        ],
        "saleor/core/utils/validators.py||saleor/core/utils/validators.py": [
          "File: saleor/core/utils/validators.py -> saleor/core/utils/validators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import micawber",
          "4: from django.core.exceptions import ValidationError",
          "6: from ...product import ProductMediaTypes",
          "7: from ...product.error_codes import ProductErrorCode",
          "",
          "[Removed Lines]",
          "1: from typing import Any, Dict, Tuple",
          "",
          "[Added Lines]",
          "1: from typing import Any, Dict, Optional, Tuple",
          "6: from ...account.models import User",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:                 )",
          "33:             }",
          "34:         )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: def user_is_valid(user: Optional[User]) -> bool:",
          "39:     \"\"\"Return True when user is provided and is not anonymous.\"\"\"",
          "40:     return bool(user and not user.is_anonymous)",
          "",
          "---------------"
        ],
        "saleor/graphql/account/tests/test_account.py||saleor/graphql/account/tests/test_account.py": [
          "File: saleor/graphql/account/tests/test_account.py -> saleor/graphql/account/tests/test_account.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1432:     assert name_changed_event.parameters == {\"message\": customer.get_full_name()}",
          "1439:     mutation UpdateCustomer(",
          "1440:             $id: ID!, $firstName: String, $lastName: String, $email: String) {",
          "1441:         customerUpdate(id: $id, input: {",
          "",
          "[Removed Lines]",
          "1435: def test_customer_update_generates_event_when_changing_email(",
          "1436:     staff_api_client, staff_user, customer_user, address, permission_manage_users",
          "1437: ):",
          "1438:     query = \"\"\"",
          "",
          "[Added Lines]",
          "1435: UPDATE_CUSTOMER_EMAIL_MUTATION = \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1449:             }",
          "1450:         }",
          "1451:     }",
          "1454:     user_id = graphene.Node.to_global_id(\"User\", customer_user.id)",
          "1455:     address_data = convert_dict_keys_to_camel_case(address.as_data())",
          "",
          "[Removed Lines]",
          "1452:     \"\"\"",
          "",
          "[Added Lines]",
          "1449: \"\"\"",
          "1452: def test_customer_update_generates_event_when_changing_email(",
          "1453:     staff_api_client, staff_user, customer_user, address, permission_manage_users",
          "1454: ):",
          "1455:     query = UPDATE_CUSTOMER_EMAIL_MUTATION",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1477: def test_customer_update_without_any_changes_generates_no_event(",
          "1478:     staff_api_client, customer_user, address, permission_manage_users",
          "1479: ):",
          "1496:     user_id = graphene.Node.to_global_id(\"User\", customer_user.id)",
          "1497:     address_data = convert_dict_keys_to_camel_case(address.as_data())",
          "",
          "[Removed Lines]",
          "1480:     query = \"\"\"",
          "1481:     mutation UpdateCustomer(",
          "1482:             $id: ID!, $firstName: String, $lastName: String, $email: String) {",
          "1483:         customerUpdate(id: $id, input: {",
          "1484:             firstName: $firstName,",
          "1485:             lastName: $lastName,",
          "1486:             email: $email",
          "1487:         }) {",
          "1488:             errors {",
          "1489:                 field",
          "1490:                 message",
          "1491:             }",
          "1492:         }",
          "1493:     }",
          "1494:     \"\"\"",
          "",
          "[Added Lines]",
          "1483:     query = UPDATE_CUSTOMER_EMAIL_MUTATION",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1513:     assert not account_events.CustomerEvent.objects.exists()",
          "1516: ACCOUNT_UPDATE_QUERY = \"\"\"",
          "1517:     mutation accountUpdate(",
          "1518:         $billing: AddressInput",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1505: def test_customer_update_generates_event_when_changing_email_by_app(",
          "1506:     app_api_client, staff_user, customer_user, address, permission_manage_users",
          "1507: ):",
          "1508:     query = UPDATE_CUSTOMER_EMAIL_MUTATION",
          "1510:     user_id = graphene.Node.to_global_id(\"User\", customer_user.id)",
          "1511:     address_data = convert_dict_keys_to_camel_case(address.as_data())",
          "1513:     new_street_address = \"Updated street address\"",
          "1514:     address_data[\"streetAddress1\"] = new_street_address",
          "1516:     variables = {",
          "1517:         \"id\": user_id,",
          "1518:         \"firstName\": customer_user.first_name,",
          "1519:         \"lastName\": customer_user.last_name,",
          "1520:         \"email\": \"mirumee@example.com\",",
          "1521:     }",
          "1522:     app_api_client.post_graphql(query, variables, permissions=[permission_manage_users])",
          "1524:     # The email was changed, an event should have been triggered",
          "1525:     email_changed_event = account_events.CustomerEvent.objects.get()",
          "1526:     assert email_changed_event.type == account_events.CustomerEvents.EMAIL_ASSIGNED",
          "1527:     assert email_changed_event.user is None",
          "1528:     assert email_changed_event.parameters == {\"message\": \"mirumee@example.com\"}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1966:     delete_versatile_image_mock.assert_called_once_with(customer_user.avatar)",
          "1969: def test_customer_delete_errors(customer_user, admin_user, staff_user):",
          "1970:     info = Mock(context=Mock(user=admin_user))",
          "1971:     with pytest.raises(ValidationError) as e:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1984: @patch(\"saleor.account.signals.delete_versatile_image\")",
          "1985: @patch(",
          "1986:     \"saleor.graphql.account.utils.account_events.staff_user_deleted_a_customer_event\"",
          "1987: )",
          "1988: def test_customer_delete_by_app(",
          "1989:     mocked_deletion_event,",
          "1990:     delete_versatile_image_mock,",
          "1991:     app_api_client,",
          "1992:     staff_user,",
          "1993:     customer_user,",
          "1994:     image,",
          "1995:     permission_manage_users,",
          "1996:     media_root,",
          "1997: ):",
          "1998:     \"\"\"Ensure deleting a customer actually deletes the customer and creates proper",
          "1999:     related events\"\"\"",
          "2001:     query = CUSTOMER_DELETE_MUTATION",
          "2002:     customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)",
          "2003:     customer_user.avatar = image",
          "2004:     customer_user.save(update_fields=[\"avatar\"])",
          "2005:     variables = {\"id\": customer_id}",
          "2006:     response = app_api_client.post_graphql(",
          "2007:         query, variables, permissions=[permission_manage_users]",
          "2008:     )",
          "2009:     content = get_graphql_content(response)",
          "2010:     data = content[\"data\"][\"customerDelete\"]",
          "2011:     assert data[\"errors\"] == []",
          "2012:     assert data[\"user\"][\"id\"] == customer_id",
          "2014:     # Ensure the customer was properly deleted",
          "2015:     # and any related event was properly triggered",
          "2016:     assert mocked_deletion_event.call_count == 1",
          "2017:     args, kwargs = mocked_deletion_event.call_args",
          "2018:     assert kwargs[\"deleted_count\"] == 1",
          "2019:     assert kwargs[\"staff_user\"].is_anonymous",
          "2020:     delete_versatile_image_mock.assert_called_once_with(customer_user.avatar)",
          "",
          "---------------"
        ],
        "saleor/graphql/account/tests/test_account_events.py||saleor/graphql/account/tests/test_account_events.py": [
          "File: saleor/graphql/account/tests/test_account_events.py -> saleor/graphql/account/tests/test_account_events.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:     )",
          "318:     assert expected_data == received_data",
          "",
          "[Removed Lines]",
          "321: def test_account_event_staff_user_added_note_to_customer_event_resolves_properly(",
          "322:     staff_api_client, staff_user, permission_manage_staff",
          "323: ):",
          "324:     event = account_events.staff_user_added_note_to_a_customer_event(",
          "325:         staff_user=staff_user, note=\"New note's content!\"",
          "326:     )",
          "327:     expected_data = {",
          "328:         \"id\": _model_to_node_id(event),",
          "329:         \"user\": {\"id\": _model_to_node_id(staff_user)},",
          "330:         \"count\": None,",
          "331:         \"message\": \"New note's content!\",",
          "332:         \"order\": None,",
          "333:         \"orderLine\": None,",
          "334:         \"type\": account_events.CustomerEvents.NOTE_ADDED.upper(),",
          "335:     }",
          "337:     received_data = _get_event_from_graphql(",
          "338:         staff_api_client, staff_user, permission_manage_staff",
          "339:     )",
          "341:     assert expected_data == received_data",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/invoice/events.py||saleor/invoice/events.py": [
          "File: saleor/invoice/events.py -> saleor/invoice/events.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from typing import Optional",
          "3: from ..account.models import User",
          "4: from ..order.models import Order",
          "5: from .models import Invoice, InvoiceEvent, InvoiceEvents",
          "7: UserType = Optional[User]",
          "14: def invoice_requested_event(",
          "16: ) -> InvoiceEvent:",
          "18:         user = None",
          "19:     return InvoiceEvent.objects.create(",
          "20:         type=InvoiceEvents.REQUESTED,",
          "",
          "[Removed Lines]",
          "10: def _user_is_valid(user: UserType) -> bool:",
          "11:     return bool(user and not user.is_anonymous)",
          "17:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "4: from ..core.utils.validators import user_is_valid",
          "14:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: def invoice_requested_deletion_event(",
          "29: ) -> InvoiceEvent:",
          "31:         user = None",
          "32:     return InvoiceEvent.objects.create(",
          "33:         type=InvoiceEvents.REQUESTED_DELETION,",
          "",
          "[Removed Lines]",
          "30:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "27:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40: def invoice_created_event(",
          "42: ) -> InvoiceEvent:",
          "44:         user = None",
          "45:     return InvoiceEvent.objects.create(",
          "46:         type=InvoiceEvents.CREATED,",
          "",
          "[Removed Lines]",
          "43:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "40:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "54: def invoice_deleted_event(*, user: UserType, invoice_id: int) -> InvoiceEvent:",
          "56:         user = None",
          "57:     return InvoiceEvent.objects.create(",
          "58:         type=InvoiceEvents.DELETED, user=user, parameters={\"invoice_id\": invoice_id}",
          "",
          "[Removed Lines]",
          "55:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "52:     if not user_is_valid(user):",
          "",
          "---------------"
        ],
        "saleor/order/events.py||saleor/order/events.py": [
          "File: saleor/order/events.py -> saleor/order/events.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from ..account import events as account_events",
          "5: from ..account.models import User",
          "6: from ..discount.models import OrderDiscount",
          "7: from ..order.models import Fulfillment, FulfillmentLine, Order, OrderLine",
          "8: from ..payment.models import Payment",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: from ..core.utils.validators import user_is_valid",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:     }",
          "40: def event_order_refunded_notification(",
          "41:     order_id: int, user_id: Optional[int], customer_email: str",
          "42: ):",
          "",
          "[Removed Lines]",
          "36: def _user_is_valid(user: UserType) -> bool:",
          "37:     return bool(user and not user.is_anonymous)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "192: def draft_order_created_event(*, order: Order, user: UserType) -> OrderEvent:",
          "194:         user = None",
          "195:     return OrderEvent.objects.create(",
          "196:         order=order, type=OrderEvents.DRAFT_CREATED, user=user",
          "",
          "[Removed Lines]",
          "193:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "190:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "200: def order_added_products_event(",
          "202: ) -> OrderEvent:",
          "204:         user = None",
          "205:     return OrderEvent.objects.create(",
          "206:         order=order,",
          "",
          "[Removed Lines]",
          "203:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "200:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213: def order_removed_products_event(",
          "215: ) -> OrderEvent:",
          "217:         user = None",
          "218:     return OrderEvent.objects.create(",
          "219:         order=order,",
          "",
          "[Removed Lines]",
          "216:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "213:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "230:     user: UserType,",
          "231:     lines: List[Tuple[int, OrderLine]]",
          "232: ):",
          "234:         user = None",
          "235:     parameters = {",
          "236:         \"related_order_pk\": original_order.pk,",
          "",
          "[Removed Lines]",
          "233:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "230:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "256:             order=order,",
          "257:         )",
          "260:         user = None",
          "262:     return OrderEvent.objects.create(order=order, type=event_type, user=user)",
          "",
          "[Removed Lines]",
          "259:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "256:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "265: def order_confirmed_event(",
          "267: ) -> OrderEvent:",
          "269:         user = None",
          "270:     return OrderEvent.objects.create(order=order, type=OrderEvents.CONFIRMED, user=user)",
          "",
          "[Removed Lines]",
          "268:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "265:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "273: def draft_order_oversold_items_event(",
          "275: ) -> OrderEvent:",
          "277:         user = None",
          "278:     return OrderEvent.objects.create(",
          "279:         order=order,",
          "",
          "[Removed Lines]",
          "276:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "273:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "286: def order_canceled_event(*, order: Order, user: UserType) -> OrderEvent:",
          "288:         user = None",
          "289:     return OrderEvent.objects.create(order=order, type=OrderEvents.CANCELED, user=user)",
          "",
          "[Removed Lines]",
          "287:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "284:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "292: def order_manually_marked_as_paid_event(",
          "294: ) -> OrderEvent:",
          "296:         user = None",
          "297:     parameters = {}  # type: ignore",
          "298:     if transaction_reference:",
          "",
          "[Removed Lines]",
          "295:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "292:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "308: def order_fully_paid_event(*, order: Order, user: UserType) -> OrderEvent:",
          "310:         user = None",
          "311:     return OrderEvent.objects.create(",
          "312:         order=order, type=OrderEvents.ORDER_FULLY_PAID, user=user",
          "",
          "[Removed Lines]",
          "309:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "306:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "316: def order_replacement_created(",
          "318: ) -> OrderEvent:",
          "320:         user = None",
          "321:     parameters = {\"related_order_pk\": replace_order.pk}",
          "322:     return OrderEvent.objects.create(",
          "",
          "[Removed Lines]",
          "319:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "316:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "330: def payment_authorized_event(",
          "332: ) -> OrderEvent:",
          "334:         user = None",
          "335:     return OrderEvent.objects.create(",
          "336:         order=order,",
          "",
          "[Removed Lines]",
          "333:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "330:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "343: def payment_captured_event(",
          "345: ) -> OrderEvent:",
          "347:         user = None",
          "348:     return OrderEvent.objects.create(",
          "349:         order=order,",
          "",
          "[Removed Lines]",
          "346:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "343:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "356: def payment_refunded_event(",
          "358: ) -> OrderEvent:",
          "360:         user = None",
          "361:     return OrderEvent.objects.create(",
          "362:         order=order,",
          "",
          "[Removed Lines]",
          "359:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "356:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "369: def payment_voided_event(",
          "371: ) -> OrderEvent:",
          "373:         user = None",
          "374:     return OrderEvent.objects.create(",
          "375:         order=order,",
          "",
          "[Removed Lines]",
          "372:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "369:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "384: ) -> OrderEvent:",
          "387:         user = None",
          "388:     parameters = {\"message\": message}",
          "",
          "[Removed Lines]",
          "386:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "383:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "398: def external_notification_event(",
          "400: ) -> OrderEvent:",
          "402:         user = None",
          "403:     parameters = parameters or {}",
          "404:     parameters[\"message\"] = message",
          "",
          "[Removed Lines]",
          "401:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "398:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "414: def fulfillment_canceled_event(",
          "416: ) -> OrderEvent:",
          "418:         user = None",
          "419:     return OrderEvent.objects.create(",
          "420:         order=order,",
          "",
          "[Removed Lines]",
          "417:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "414:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "431:     fulfillment: Union[Order, Fulfillment],",
          "432:     warehouse_pk: Optional[int] = None,",
          "433: ) -> OrderEvent:",
          "435:         user = None",
          "436:     return OrderEvent.objects.create(",
          "437:         order=order,",
          "",
          "[Removed Lines]",
          "434:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "431:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "447: def fulfillment_fulfilled_items_event(",
          "449: ) -> OrderEvent:",
          "451:         user = None",
          "452:     return OrderEvent.objects.create(",
          "453:         order=order,",
          "",
          "[Removed Lines]",
          "450:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "447:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "463:     user: UserType,",
          "464:     returned_lines: List[Tuple[int, OrderLine]],",
          "465: ):",
          "467:         user = None",
          "469:     return OrderEvent.objects.create(",
          "",
          "[Removed Lines]",
          "466:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "463:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "480:     user: UserType,",
          "481:     replaced_lines: List[Tuple[int, OrderLine]],",
          "482: ):",
          "484:         user = None",
          "485:     return OrderEvent.objects.create(",
          "486:         order=order,",
          "",
          "[Removed Lines]",
          "483:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "480:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "498:     amount: Decimal,",
          "499:     shipping_costs_included: bool",
          "500: ):",
          "502:         user = None",
          "503:     return OrderEvent.objects.create(",
          "504:         order=order,",
          "",
          "[Removed Lines]",
          "501:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "498:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "515: def fulfillment_tracking_updated_event(",
          "517: ) -> OrderEvent:",
          "519:         user = None",
          "520:     return OrderEvent.objects.create(",
          "521:         order=order,",
          "",
          "[Removed Lines]",
          "518:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "515:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "571:     order_discount: \"OrderDiscount\",",
          "572:     old_order_discount: Optional[\"OrderDiscount\"] = None",
          "573: ) -> OrderEvent:",
          "575:         user = None",
          "576:     discount_parameters = _prepare_discount_object(order_discount, old_order_discount)",
          "",
          "[Removed Lines]",
          "574:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "571:     if not user_is_valid(user):",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "653:     line: OrderLine,",
          "654:     line_before_update: Optional[\"OrderLine\"] = None",
          "655: ) -> OrderEvent:",
          "657:         user = None",
          "658:     discount_parameters = {",
          "659:         \"value\": line.unit_discount_value,",
          "",
          "[Removed Lines]",
          "656:     if not _user_is_valid(user):",
          "",
          "[Added Lines]",
          "653:     if not user_is_valid(user):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61f53f62cf4cb80e21611fab1f14dfa9492582a8",
      "candidate_info": {
        "commit_hash": "61f53f62cf4cb80e21611fab1f14dfa9492582a8",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/61f53f62cf4cb80e21611fab1f14dfa9492582a8",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/utils.py"
        ],
        "message": "Use client key instead of origin key",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         {\"name\": \"Merchant Account\", \"value\": None},",
          "56:         {\"name\": \"API key\", \"value\": None},",
          "57:         {\"name\": \"Supported currencies\", \"value\": \"\"},",
          "59:         {\"name\": \"Origin Url\", \"value\": \"\"},",
          "60:         {\"name\": \"Live\", \"value\": \"\"},",
          "61:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
          "",
          "[Removed Lines]",
          "58:         {\"name\": \"Origin Key\", \"value\": \"\"},",
          "",
          "[Added Lines]",
          "58:         {\"name\": \"Client Key\", \"value\": \"\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:             \" Please enter currency codes separated by a comma.\",",
          "87:             \"label\": \"Supported currencies\",",
          "88:         },",
          "90:             \"type\": ConfigurationTypeField.STRING,",
          "93:         },",
          "94:         \"Origin Url\": {",
          "95:             \"type\": ConfigurationTypeField.STRING,",
          "97:             \"label\": \"Origin Url\",",
          "98:         },",
          "99:         \"Live\": {",
          "",
          "[Removed Lines]",
          "89:         \"Origin Key\": {",
          "91:             \"help_text\": \"\",  # FIXME define them as per channel",
          "92:             \"label\": \"Origin Key\",",
          "96:             \"help_text\": \"\",  # FIXME define them as per channel",
          "",
          "[Added Lines]",
          "89:         \"Client Key\": {",
          "91:             \"help_text\": (",
          "92:                 \"The client key is a public key that uniquely identifies a web service \"",
          "93:                 \"user. Each web service user has a list of allowed origins, or domains \"",
          "94:                 \"from which we expect to get your requests. We make sure data cannot \"",
          "95:                 \"be accessed by unknown parties by using Cross-Origin Resource Sharing.\"",
          "96:                 \"Not required for Android or iOS app.\"",
          "97:             ),",
          "98:             \"label\": \"Client Key\",",
          "102:             \"help_text\": (",
          "103:                 \"The origin URL of the page where you are rendering the Drop-in. This \"",
          "104:                 \"should not include subdirectories and a trailing slash. For example, \"",
          "105:                 \"if you are rendering the Drop-in on \"",
          "106:                 \"https://your-company.com/checkout/payment, specify here: \"",
          "107:                 \"https://your-company.com. Not required for Android or iOS app.\"",
          "108:             ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:             connection_params={",
          "167:                 \"api_key\": configuration[\"API key\"],",
          "168:                 \"merchant_account\": configuration[\"Merchant Account\"],",
          "170:                 \"origin_url\": configuration[\"Origin Url\"],",
          "171:                 \"live\": configuration[\"Live\"],",
          "172:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
          "",
          "[Removed Lines]",
          "169:                 \"origin_key\": configuration[\"Origin Key\"],",
          "",
          "[Added Lines]",
          "181:                 \"client_key\": configuration[\"Client Key\"],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "188:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
          "189:         config = self._get_gateway_config()",
          "191:         if path.startswith(WEBHOOK_PATH):",
          "192:             return handle_webhook(request, config)",
          "193:         elif path.startswith(ADDITIONAL_ACTION_PATH):",
          "",
          "[Removed Lines]",
          "190:         self.config.connection_params[\"adyen_auto_capture\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "221:             name=self.PLUGIN_NAME,",
          "222:             config=[",
          "223:                 {",
          "226:                 },",
          "227:                 {\"field\": \"config\", \"value\": json.dumps(response.message)},",
          "228:             ],",
          "",
          "[Removed Lines]",
          "224:                     \"field\": \"origin_key\",",
          "225:                     \"value\": config.connection_params[\"origin_key\"],",
          "",
          "[Added Lines]",
          "235:                     \"field\": \"client_key\",",
          "236:                     \"value\": config.connection_params[\"client_key\"],",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py": [
          "File: saleor/payment/gateways/adyen/tests/conftest.py -> saleor/payment/gateways/adyen/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:         api_key=None,",
          "14:         merchant_account=None,",
          "15:         return_url=None,",
          "17:         origin_url=None,",
          "18:         adyen_auto_capture=None,",
          "19:         auto_capture=None,",
          "",
          "[Removed Lines]",
          "16:         origin_key=None,",
          "",
          "[Added Lines]",
          "16:         client_key=None,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:         api_key = api_key or \"test_key\"",
          "22:         merchant_account = merchant_account or \"SaleorECOM\"",
          "23:         return_url = return_url or \"http://127.0.0.1:3000/\"",
          "25:         origin_url = origin_url or \"http://127.0.0.1:3000\"",
          "26:         adyen_auto_capture = adyen_auto_capture or False",
          "27:         auto_capture = auto_capture or False",
          "",
          "[Removed Lines]",
          "24:         origin_key = origin_key or \"test_origin_key\"",
          "",
          "[Added Lines]",
          "24:         client_key = client_key or \"test_origin_key\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:                     {\"name\": \"API key\", \"value\": api_key},",
          "36:                     {\"name\": \"Merchant Account\", \"value\": merchant_account},",
          "37:                     {\"name\": \"Return Url\", \"value\": return_url},",
          "39:                     {\"name\": \"Origin Url\", \"value\": origin_url},",
          "40:                     {",
          "41:                         \"name\": \"Automatically mark payment as a capture\",",
          "",
          "[Removed Lines]",
          "38:                     {\"name\": \"Origin Key\", \"value\": origin_key},",
          "",
          "[Added Lines]",
          "38:                     {\"name\": \"Client Key\", \"value\": client_key},",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py": [
          "File: saleor/payment/gateways/adyen/tests/test_plugin.py -> saleor/payment/gateways/adyen/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     config = response.config",
          "26:     assert len(config) == 2",
          "27:     assert config[0] == {",
          "30:     }",
          "31:     assert config[1][\"field\"] == \"config\"",
          "32:     config = json.loads(config[1][\"value\"])",
          "",
          "[Removed Lines]",
          "28:         \"field\": \"origin_key\",",
          "29:         \"value\": adyen_plugin.config.connection_params[\"origin_key\"],",
          "",
          "[Added Lines]",
          "28:         \"field\": \"client_key\",",
          "29:         \"value\": adyen_plugin.config.connection_params[\"client_key\"],",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     if (",
          "109:         \"browserInfo\" in extra_request_params",
          "110:         and \"billingAddress\" in extra_request_params",
          "111:     ):",
          "115:         extra_request_params[\"origin\"] = origin_url",
          "117:     method = payment_data[\"paymentMethod\"].get(\"type\", [])",
          "",
          "[Removed Lines]",
          "112:         # Replace this assigment. Add note that customer_ip_address has incorrect name",
          "113:         # Add to dashboard config the flow to combine channel with url like:",
          "114:         # web1:https://shop.com, web2:https://shop1.com",
          "",
          "[Added Lines]",
          "111:         and origin_url",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed023a25834d11b236047ae3661faa0bf6388f9c",
      "candidate_info": {
        "commit_hash": "ed023a25834d11b236047ae3661faa0bf6388f9c",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/ed023a25834d11b236047ae3661faa0bf6388f9c",
        "files": [
          "saleor/core/prices.py",
          "saleor/graphql/order/mutations/orders.py",
          "saleor/graphql/payment/mutations.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/utils.py"
        ],
        "message": "Fix flake8 errors",
        "before_after_code_files": [
          "saleor/core/prices.py||saleor/core/prices.py",
          "saleor/graphql/order/mutations/orders.py||saleor/graphql/order/mutations/orders.py",
          "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/utils.py||saleor/payment/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/core/prices.py||saleor/core/prices.py": [
          "File: saleor/core/prices.py -> saleor/core/prices.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from decimal import Decimal",
          "4: from babel.numbers import get_currency_precision",
          "7: def quantize_price(",
          "10:     precision = get_currency_precision(currency)",
          "11:     number_places = Decimal(10) ** -precision",
          "12:     return price.quantize(number_places)",
          "",
          "[Removed Lines]",
          "2: from typing import Union",
          "8:     price: Union[\"TaxedMoney\", \"Money\", \"Decimal\", \"TaxedMoneyRange\"], currency: str",
          "9: ) -> Union[\"TaxedMoney\", \"Money\", \"Decimal\", \"TaxedMoneyRange\"]:",
          "",
          "[Added Lines]",
          "2: from typing import TYPE_CHECKING, Union",
          "6: if TYPE_CHECKING:",
          "7:     from prices import TaxedMoney, Money, TaxedMoneyRange",
          "11:     price: Union[\"TaxedMoney\", \"Money\", Decimal, \"TaxedMoneyRange\"], currency: str",
          "12: ) -> Union[\"TaxedMoney\", \"Money\", Decimal, \"TaxedMoneyRange\"]:",
          "",
          "---------------"
        ],
        "saleor/graphql/order/mutations/orders.py||saleor/graphql/order/mutations/orders.py": [
          "File: saleor/graphql/order/mutations/orders.py -> saleor/graphql/order/mutations/orders.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from ....order.actions import (",
          "9:     cancel_order,",
          "10:     clean_mark_order_as_paid,",
          "12:     mark_order_as_paid,",
          "13:     order_captured,",
          "14:     order_refunded,",
          "",
          "[Removed Lines]",
          "11:     handle_fully_paid_order,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py": [
          "File: saleor/graphql/payment/mutations.py -> saleor/graphql/payment/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import graphene",
          "4: from django.conf import settings",
          "5: from django.core.exceptions import ValidationError",
          "",
          "[Removed Lines]",
          "1: from typing import Optional",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from typing import List, Optional",
          "4: import Adyen",
          "6: from django.contrib.auth.hashers import make_password",
          "7: from django.core.handlers.wsgi import WSGIRequest",
          "9: from graphql_relay import from_global_id",
          "11: from ....checkout.models import Checkout",
          "14: from ....plugins.base_plugin import BasePlugin, ConfigurationTypeField",
          "15: from ... import PaymentError, TransactionKind",
          "16: from ...interface import GatewayConfig, GatewayResponse, PaymentData, PaymentGateway",
          "",
          "[Removed Lines]",
          "5: from babel.numbers import get_currency_precision",
          "8: from django.http import HttpResponse, HttpResponseNotFound, JsonResponse",
          "12: from ....core.prices import quantize_price",
          "13: from ....graphql.core.scalars import Decimal",
          "",
          "[Added Lines]",
          "7: from django.http import HttpResponse",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "112:             \"help_text\": (",
          "113:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
          "115:                 \"https://docs.adyen.com/development-resources/webhooks\"",
          "116:             ),",
          "117:             \"label\": \"Enable notifications\",",
          "",
          "[Removed Lines]",
          "114:                 \"webhook url is http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
          "",
          "[Added Lines]",
          "110:                 \"webhook url is \"",
          "111:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py": [
          "File: saleor/payment/gateways/adyen/tests/test_plugin.py -> saleor/payment/gateways/adyen/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: @pytest.mark.vcr",
          "71: def test_confirm_payment(payment_adyen_for_order, adyen_plugin):",
          "73:     payment_info = create_payment_information(",
          "74:         payment_adyen_for_order,",
          "76:     )",
          "77:     adyen_plugin = adyen_plugin()",
          "78:     response = adyen_plugin.confirm_payment(payment_info, None)",
          "81: @pytest.mark.vcr",
          "82: def test_refund_payment(payment_adyen_for_order, order_with_lines, adyen_plugin):",
          "83:     payment_info = create_payment_information(",
          "84:         payment_adyen_for_order,",
          "86:     )",
          "87:     gateway_response = GatewayResponse(",
          "88:         kind=TransactionKind.AUTH,",
          "",
          "[Removed Lines]",
          "72:     return  # teest it when we will have additional auth data",
          "75:         # additional_data={\"paymentMethod\": {'riskData': {'clientData': 'eyJ2ZXJzaW9uIjoiMS4wLjAiLCJkZXZpY2VGaW5nZXJwcmludCI6InJ5RUdYOGVacEowMDMwMDAwMDAwMDAwMDAwS1piSVFqNmt6czAwODkxNDY3NzZjVkI5NGlLekJHdmFtOUVxNm9WUTVTMTZHb2g1TWswMDRpdmJTdVlkRzBSMDAwMDBZVnhFcjAwMDAwY3J1OXNBeFRSNWlaQ3FuSTRsc2s6NDAiLCJwZXJzaXN0ZW50Q29va2llIjpbIl9ycF91aWQ9YzA0ZDE5OWEtYjkyYy1iZmQzLTI1YTMtNDJmM2ZjODdiN2UyIl0sImNvbXBvbmVudHMiOnsidXNlckFnZW50IjoiZmU5ZWMxM2NmMGFjODM4Y2YwYWVkMWM0NjJiYTUxODkiLCJsYW5ndWFnZSI6ImVuLUdCIiwiY29sb3JEZXB0aCI6MjQsImRldmljZU1lbW9yeSI6OCwicGl4ZWxSYXRpbyI6MSwiaGFyZHdhcmVDb25jdXJyZW5jeSI6OCwic2NyZWVuV2lkdGgiOjI1NjAsInNjcmVlbkhlaWdodCI6MTQ0MCwiYXZhaWxhYmxlU2NyZWVuV2lkdGgiOjI1NjAsImF2YWlsYWJsZVNjcmVlbkhlaWdodCI6MTQxNywidGltZXpvbmVPZmZzZXQiOi0xMjAsInRpbWV6b25lIjoiRXVyb3BlL1dhcnNhdyIsInNlc3Npb25TdG9yYWdlIjoxLCJsb2NhbFN0b3JhZ2UiOjEsImluZGV4ZWREYiI6MSwiYWRkQmVoYXZpb3IiOjAsIm9wZW5EYXRhYmFzZSI6MSwicGxhdGZvcm0iOiJNYWNJbnRlbCIsInBsdWdpbnMiOiJjMDhlOTc4YWIwMmUzNTk1YmZiOWNiN2ViZWZlZjMzMyIsImNhbnZhcyI6ImQ2MTY0ZTcwN2VkODQ3ZTUxODhhNWI1MjA4ZjQyNThiIiwid2ViZ2wiOiIwMzNkY2RlZjQ4YmY3NmY5MTMyY2M3MDlkZmY5YTA3MSIsIndlYmdsVmVuZG9yQW5kUmVuZGVyZXIiOiJJbnRlbCBJbmMufkludGVsKFIpIElyaXMoVE0pIFBsdXMgR3JhcGhpY3MgNjU1IiwiYWRCbG9jayI6MSwiaGFzTGllZExhbmd1YWdlcyI6MCwiaGFzTGllZFJlc29sdXRpb24iOjAsImhhc0xpZWRPcyI6MCwiaGFzTGllZEJyb3dzZXIiOjAsImZvbnRzIjoiMjkyZWEyY2NlY2NkMDJiMDFjMGM0YzFkNDEzMjE3NWUiLCJhdWRpbyI6IjQ3M2QxYzc0ZGI3Y2QzOGUxZmExNTgxN2IxMzY2YmZjIiwiZW51bWVyYXRlRGV2aWNlcyI6IjNiYzFkYTVmMzM1YTk5ZjE3NmJmMGUzYzgyNTFhMTkzIn19'}, 'paymentMethod': {'type': 'scheme', 'encryptedCardNumber': 'adyenjs_0_1_25$FakMVsJwQJd7jca8dYfL6xhLfXeWhqYhAOkqgqNF7yM+5Tl0boUG9Xk4dKFakS4/3lCIjomlgAmOt4vEGveFDJtljGyS7t1sElK+fUASA/AMsSMFcMBPPr8ybKqHNwwj6k4t9SagLUQX27m0hIMmOKwQLdwwJHE9Iw/D2rGRqbsamq8cmG+T2tHDeqt5YWRCoho8t1u+OMzJMsalfeYbJmI7uIfvjbHAa0LtM5X2B6DcOClqRfwmLg8AgR5Gr4NDPub7di/W9F9Qkt56nPkN9WEYTOA1HIWkgBGHkTwCBVCxKjHmQgcnH1SPf4kram5TUGT85p3J2/BL1QmpPZixtw==$u9MN2eUsQkAvlSPT3k7YvhE3YXNwp/CmrIArUrFMfTPoQiibd4boM9oGL3hIrE5rWyzvc+4P9q1coGAiW6FNgas1+ZifHzjs8bmPHYC2h0mrmdFu4MsJp6+RL+4B0C5sd0Ef1aUEW8wfFjOfE3NZVPibaUKT6iBFeAplfV73AQEmIh2TXvm9PEmWtvCPcmA2Z6C8u53VOn9b3Y0lq3E88WgNEX6dShRqcvsLpSkTzaXAYroXBSi0oCFu9ebtqMBtkGujPOZa+ULq7o651xDHlJPxGmGHzxJ2N6gxn7P/Fpdj9BJf9ZfEMmP4Artm86lN3OUudu7Dfo7qh46FZQ4UAbRmrEJVix/sHVP1Z30d6cGfsTi331NkNKomyjS53Mdp//jx43X7t+wZyxoIyDvk+buQhM5rCzpD8lyvffagJPQMvImajBjyXOEOFFy45yrXxwl1ZlCegzDyRzv7u3o6grqvobbSaZm8kHSvDGM8uAklwgUDfIcWqUWQeXPJpZPECY6wffjMixJG8nurmb/VBig9P33e/MJo79U6jgWyoRFT7Yp6OJ3egYp403d+EgZCSrpcjX0tc5PYuZth1kE0cjOYRD1XgmVC0rtn5dxqk7CxVC+S1pSLSdrtGVTj5tNDdunq1zCT1+zmasjjGLDzZ5p1JE4z9PccesH2nfuYwT2aEqalDCCGA2LPIFpM3dvFVYTVFsKo5n7LPAlakWSAC5+tZ9RL/SbtfPXb9erIN90WyDSwCZr9CD36xayWgoPP66y/Sc24nzoTE4LYx2FeAvs7aqIN4Mu0sUFMUMJEHHNsmvFzWBIveo+KmBiHYri9iXeNW6k+w6fk/zLE/yBuYsJFAKE5CFmd3LMdbZCCd/RS8g==', 'encryptedExpiryMonth': 'adyenjs_0_1_25$qG3iso+7U0Oa5iCydxxisgLaEJ2rBoamj5JhUXeHCvC5Gy7MgyHz6ztYib4Y7QFfferfmqH7gkFe7yDR94cKbhDt3d8ePSFAs+96SU93wYAYVWzn5dLPFiXhwtnhtk/7YCZaT5b4YKZJ/9bOWkU+CwHJ/y2ELhtx2MRDDSBOZOFjsm1K3LAvu8gNIKP8QhFxfT28qLmC1xlQHKjqlIpaEqJPs92Zi40dWhkrFIHE3lCfIlpJbVI4EW5xDD8l70wkmQsnCIhJ3toSdENk8vr0/AWlPPt4lzfLfIXN5MHuifsC3iReYiK9vzjkX4VQJTkfY+0SIo/S1Ccu84n0xLKVdA==$HZmDBPHVt+5u711J5pfTvS8ZT1fD443FnOkG+YwMxNZkF+ioUz3cdP/Cr3jHL1pFLxZfmtqJwpigG/5TOvJsF9QealVWD4tfWKQuxzEKeO3xNYS1D/rWWvjdjhz6Eb0satd+DKzZjmtPEiyPBQ9+01OFdm17FTEDq2V5JiqBIIKB7Erw9CpMSYxmdNzhsFQongwi6kZ2Ju1or+C/noecpi2YdX3X0JLLRuEEYE2SAHHKCQKfHpOl7sXVtJ1K5wOCZpH9pBmoEtETLxS/gOjONbhjbdwnZ6ovc7RH3V3pnqEuiFA8/RFVyQia/Jels6yRSSPXp0SQaGByNALFeVLDcfuX53sHm+IO9oHS69RBox/Es3Utxy80In7Q2Lel5eWL61E+RjQmlSS6Ua7yL8eGkucBxHhdY0a7K34V+kM7HyJd4WzWA93YOznkAU4Ezqpxz42hepGBFNbeUWaFc2Xb', 'encryptedExpiryYear': 'adyenjs_0_1_25$L+CzaH0ce+jzo4PXZPffqWIjDAshC38J+rywq/7CYRChqVZ14sPX0HSyymETGBqVCJebv22N0VWb3jKhpedTExqmXHiL/WnwmhpFcOKArUZIt60OBE1RZ6NSXJiQpaKgIofonVD32gtammLhljoyDeYTaTYuvHrbLLSyJSc0DUFxSVIUuMkwytXrpOL+jVYCRteYQ6Koxs1RIPy5v3+3JFMTNILpOi+jwaATbpHW6wGj1vhr+y7MQtlVqBvXNlbID5MXiYmUpqYPKEVSNFBoGCERU9d8N/FAsWmLThGVlzUub90M/N1UdjBljZrxTEpkY7wJah6DnMEqQ6PTLPJjJg==$Aqsbh5fcErzrb+7P+dHvofFP9PujIDsOACst8DEdaLiLNwPfPTAiCmYS6l+ev99v6i3BWBFdR1vvH0PfPKNxmLtSByGqf8c6xUoaIaVyBpYz6qpTHlj25e73ROhx9MGfFJtpgnHs8zM39+Y0AuCZ+lTtVgacMR28xkhyl88VjGUrq/jLESOpOS9VsgjjctlXsup5zr+/bL2JpUPkKYW0l3yx9aIZBjZXIkF6k0Ax8wdWMIjJyOOHYJfzUKR1zvDz8AkWxFdrTZWrKAfdMlI9+oyrPYfcxebnTyn7OxEc4blqCghlWxbzEgWdl29ez8rtzh2o6U3YL0gI2sQoSvwR9NUzZT37K5kXbEq/L5VPnDtfGV6pnnbN3335WVFDPAeSss7vSup6GusVDU3HMfKnKwf8a4/T3XmixVGI+CW/xlqIGEfY6/b77r/HA41LYo9i2T+UXhJyT8F7nd2+YCUxsA==', 'encryptedSecurityCode': 'adyenjs_0_1_25$VzWN+WT4DVd0BlT5Umwq4lgqvc00SxadFDbXfHm1VDlx/V1X5mpqYMizTcgKL+hfmyNjuic9NqHh9YBP7yZNJkoP61n2op1ZPO3gBklnAqKR9rGeCpkNvBgEUDIiuVTxNRzQD1UtKvWMX4RQeI0/vGKraNQCDbGQS1g+N4JUnzEnMmSUAq5GPKsoFijEP/UfXR2/Qh4g/AoyCwfmneDFG+YuqKa4LI563yRgODIKVZk+tYrzVGOw4Ass4R0kaHztcx7vk0haNur5MWsS0WzciuMhYfBu33qwW9i0P4yePxHEJdFlGCn+uxUFjmQj39Rch5xUUo6tkHP7b72Gn5xH3g==$uJDSyZJ8HNdG9q8REYbAVEHlnGuN/RRTQ6DGB3svlqheRY6tdqWnMS5g5nDJMT3VU+nEdvEpso21NhOiHGMhBTMd8UzMUYJqUbWwp/295Khvjpo5NNtwrmdQ74M2s5f19/Pn+6zwmC6HG+WFH7ZNTClLX8CqXa4iCEudho6IDg+Yf5RxCBO5Cvn30K2g6c16zMwNnNo/y7F8ejr8f2W+zvLtCPhLmb+8umvj8I65VHR+fr+aJ85w8WRSONOmFhdQTLbsUTnmuQHEksBTYfVK6kwTg661IfTgjaSdCmhs0gs0qBnSeVgTtizyO7rvKM6pfR5f78PVZPQWpOGhxGRqhu3TAc+4XZDSwh8B8Y0ofn98rucJpL3MgE+QHTn0AkBg9gtjmWWs0bNEFXBWDoAGfcs/ATCCfF74bgr2KstwOO3PBm7C4Y6ssPFsYqOomJGIZeCL+OAcEA+eeCDW/xjUEpPdiEZiIA3cAA=='}, 'browserInfo': {'acceptHeader': '*/*', 'colorDepth': 24, 'language': 'en-GB', 'javaEnabled': False, 'screenHeight': 1440, 'screenWidth': 2560, 'userAgent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36', 'timeZoneOffset': -120}}}",
          "85:         # additional_data={\"paymentMethod\": {'riskData': {'clientData': 'eyJ2ZXJzaW9uIjoiMS4wLjAiLCJkZXZpY2VGaW5nZXJwcmludCI6InJ5RUdYOGVacEowMDMwMDAwMDAwMDAwMDAwS1piSVFqNmt6czAwODkxNDY3NzZjVkI5NGlLekJHdmFtOUVxNm9WUTVTMTZHb2g1TWswMDRpdmJTdVlkRzBSMDAwMDBZVnhFcjAwMDAwY3J1OXNBeFRSNWlaQ3FuSTRsc2s6NDAiLCJwZXJzaXN0ZW50Q29va2llIjpbIl9ycF91aWQ9YzA0ZDE5OWEtYjkyYy1iZmQzLTI1YTMtNDJmM2ZjODdiN2UyIl0sImNvbXBvbmVudHMiOnsidXNlckFnZW50IjoiZmU5ZWMxM2NmMGFjODM4Y2YwYWVkMWM0NjJiYTUxODkiLCJsYW5ndWFnZSI6ImVuLUdCIiwiY29sb3JEZXB0aCI6MjQsImRldmljZU1lbW9yeSI6OCwicGl4ZWxSYXRpbyI6MSwiaGFyZHdhcmVDb25jdXJyZW5jeSI6OCwic2NyZWVuV2lkdGgiOjI1NjAsInNjcmVlbkhlaWdodCI6MTQ0MCwiYXZhaWxhYmxlU2NyZWVuV2lkdGgiOjI1NjAsImF2YWlsYWJsZVNjcmVlbkhlaWdodCI6MTQxNywidGltZXpvbmVPZmZzZXQiOi0xMjAsInRpbWV6b25lIjoiRXVyb3BlL1dhcnNhdyIsInNlc3Npb25TdG9yYWdlIjoxLCJsb2NhbFN0b3JhZ2UiOjEsImluZGV4ZWREYiI6MSwiYWRkQmVoYXZpb3IiOjAsIm9wZW5EYXRhYmFzZSI6MSwicGxhdGZvcm0iOiJNYWNJbnRlbCIsInBsdWdpbnMiOiJjMDhlOTc4YWIwMmUzNTk1YmZiOWNiN2ViZWZlZjMzMyIsImNhbnZhcyI6ImQ2MTY0ZTcwN2VkODQ3ZTUxODhhNWI1MjA4ZjQyNThiIiwid2ViZ2wiOiIwMzNkY2RlZjQ4YmY3NmY5MTMyY2M3MDlkZmY5YTA3MSIsIndlYmdsVmVuZG9yQW5kUmVuZGVyZXIiOiJJbnRlbCBJbmMufkludGVsKFIpIElyaXMoVE0pIFBsdXMgR3JhcGhpY3MgNjU1IiwiYWRCbG9jayI6MSwiaGFzTGllZExhbmd1YWdlcyI6MCwiaGFzTGllZFJlc29sdXRpb24iOjAsImhhc0xpZWRPcyI6MCwiaGFzTGllZEJyb3dzZXIiOjAsImZvbnRzIjoiMjkyZWEyY2NlY2NkMDJiMDFjMGM0YzFkNDEzMjE3NWUiLCJhdWRpbyI6IjQ3M2QxYzc0ZGI3Y2QzOGUxZmExNTgxN2IxMzY2YmZjIiwiZW51bWVyYXRlRGV2aWNlcyI6IjNiYzFkYTVmMzM1YTk5ZjE3NmJmMGUzYzgyNTFhMTkzIn19'}, 'paymentMethod': {'type': 'scheme', 'encryptedCardNumber': 'adyenjs_0_1_25$FakMVsJwQJd7jca8dYfL6xhLfXeWhqYhAOkqgqNF7yM+5Tl0boUG9Xk4dKFakS4/3lCIjomlgAmOt4vEGveFDJtljGyS7t1sElK+fUASA/AMsSMFcMBPPr8ybKqHNwwj6k4t9SagLUQX27m0hIMmOKwQLdwwJHE9Iw/D2rGRqbsamq8cmG+T2tHDeqt5YWRCoho8t1u+OMzJMsalfeYbJmI7uIfvjbHAa0LtM5X2B6DcOClqRfwmLg8AgR5Gr4NDPub7di/W9F9Qkt56nPkN9WEYTOA1HIWkgBGHkTwCBVCxKjHmQgcnH1SPf4kram5TUGT85p3J2/BL1QmpPZixtw==$u9MN2eUsQkAvlSPT3k7YvhE3YXNwp/CmrIArUrFMfTPoQiibd4boM9oGL3hIrE5rWyzvc+4P9q1coGAiW6FNgas1+ZifHzjs8bmPHYC2h0mrmdFu4MsJp6+RL+4B0C5sd0Ef1aUEW8wfFjOfE3NZVPibaUKT6iBFeAplfV73AQEmIh2TXvm9PEmWtvCPcmA2Z6C8u53VOn9b3Y0lq3E88WgNEX6dShRqcvsLpSkTzaXAYroXBSi0oCFu9ebtqMBtkGujPOZa+ULq7o651xDHlJPxGmGHzxJ2N6gxn7P/Fpdj9BJf9ZfEMmP4Artm86lN3OUudu7Dfo7qh46FZQ4UAbRmrEJVix/sHVP1Z30d6cGfsTi331NkNKomyjS53Mdp//jx43X7t+wZyxoIyDvk+buQhM5rCzpD8lyvffagJPQMvImajBjyXOEOFFy45yrXxwl1ZlCegzDyRzv7u3o6grqvobbSaZm8kHSvDGM8uAklwgUDfIcWqUWQeXPJpZPECY6wffjMixJG8nurmb/VBig9P33e/MJo79U6jgWyoRFT7Yp6OJ3egYp403d+EgZCSrpcjX0tc5PYuZth1kE0cjOYRD1XgmVC0rtn5dxqk7CxVC+S1pSLSdrtGVTj5tNDdunq1zCT1+zmasjjGLDzZ5p1JE4z9PccesH2nfuYwT2aEqalDCCGA2LPIFpM3dvFVYTVFsKo5n7LPAlakWSAC5+tZ9RL/SbtfPXb9erIN90WyDSwCZr9CD36xayWgoPP66y/Sc24nzoTE4LYx2FeAvs7aqIN4Mu0sUFMUMJEHHNsmvFzWBIveo+KmBiHYri9iXeNW6k+w6fk/zLE/yBuYsJFAKE5CFmd3LMdbZCCd/RS8g==', 'encryptedExpiryMonth': 'adyenjs_0_1_25$qG3iso+7U0Oa5iCydxxisgLaEJ2rBoamj5JhUXeHCvC5Gy7MgyHz6ztYib4Y7QFfferfmqH7gkFe7yDR94cKbhDt3d8ePSFAs+96SU93wYAYVWzn5dLPFiXhwtnhtk/7YCZaT5b4YKZJ/9bOWkU+CwHJ/y2ELhtx2MRDDSBOZOFjsm1K3LAvu8gNIKP8QhFxfT28qLmC1xlQHKjqlIpaEqJPs92Zi40dWhkrFIHE3lCfIlpJbVI4EW5xDD8l70wkmQsnCIhJ3toSdENk8vr0/AWlPPt4lzfLfIXN5MHuifsC3iReYiK9vzjkX4VQJTkfY+0SIo/S1Ccu84n0xLKVdA==$HZmDBPHVt+5u711J5pfTvS8ZT1fD443FnOkG+YwMxNZkF+ioUz3cdP/Cr3jHL1pFLxZfmtqJwpigG/5TOvJsF9QealVWD4tfWKQuxzEKeO3xNYS1D/rWWvjdjhz6Eb0satd+DKzZjmtPEiyPBQ9+01OFdm17FTEDq2V5JiqBIIKB7Erw9CpMSYxmdNzhsFQongwi6kZ2Ju1or+C/noecpi2YdX3X0JLLRuEEYE2SAHHKCQKfHpOl7sXVtJ1K5wOCZpH9pBmoEtETLxS/gOjONbhjbdwnZ6ovc7RH3V3pnqEuiFA8/RFVyQia/Jels6yRSSPXp0SQaGByNALFeVLDcfuX53sHm+IO9oHS69RBox/Es3Utxy80In7Q2Lel5eWL61E+RjQmlSS6Ua7yL8eGkucBxHhdY0a7K34V+kM7HyJd4WzWA93YOznkAU4Ezqpxz42hepGBFNbeUWaFc2Xb', 'encryptedExpiryYear': 'adyenjs_0_1_25$L+CzaH0ce+jzo4PXZPffqWIjDAshC38J+rywq/7CYRChqVZ14sPX0HSyymETGBqVCJebv22N0VWb3jKhpedTExqmXHiL/WnwmhpFcOKArUZIt60OBE1RZ6NSXJiQpaKgIofonVD32gtammLhljoyDeYTaTYuvHrbLLSyJSc0DUFxSVIUuMkwytXrpOL+jVYCRteYQ6Koxs1RIPy5v3+3JFMTNILpOi+jwaATbpHW6wGj1vhr+y7MQtlVqBvXNlbID5MXiYmUpqYPKEVSNFBoGCERU9d8N/FAsWmLThGVlzUub90M/N1UdjBljZrxTEpkY7wJah6DnMEqQ6PTLPJjJg==$Aqsbh5fcErzrb+7P+dHvofFP9PujIDsOACst8DEdaLiLNwPfPTAiCmYS6l+ev99v6i3BWBFdR1vvH0PfPKNxmLtSByGqf8c6xUoaIaVyBpYz6qpTHlj25e73ROhx9MGfFJtpgnHs8zM39+Y0AuCZ+lTtVgacMR28xkhyl88VjGUrq/jLESOpOS9VsgjjctlXsup5zr+/bL2JpUPkKYW0l3yx9aIZBjZXIkF6k0Ax8wdWMIjJyOOHYJfzUKR1zvDz8AkWxFdrTZWrKAfdMlI9+oyrPYfcxebnTyn7OxEc4blqCghlWxbzEgWdl29ez8rtzh2o6U3YL0gI2sQoSvwR9NUzZT37K5kXbEq/L5VPnDtfGV6pnnbN3335WVFDPAeSss7vSup6GusVDU3HMfKnKwf8a4/T3XmixVGI+CW/xlqIGEfY6/b77r/HA41LYo9i2T+UXhJyT8F7nd2+YCUxsA==', 'encryptedSecurityCode': 'adyenjs_0_1_25$VzWN+WT4DVd0BlT5Umwq4lgqvc00SxadFDbXfHm1VDlx/V1X5mpqYMizTcgKL+hfmyNjuic9NqHh9YBP7yZNJkoP61n2op1ZPO3gBklnAqKR9rGeCpkNvBgEUDIiuVTxNRzQD1UtKvWMX4RQeI0/vGKraNQCDbGQS1g+N4JUnzEnMmSUAq5GPKsoFijEP/UfXR2/Qh4g/AoyCwfmneDFG+YuqKa4LI563yRgODIKVZk+tYrzVGOw4Ass4R0kaHztcx7vk0haNur5MWsS0WzciuMhYfBu33qwW9i0P4yePxHEJdFlGCn+uxUFjmQj39Rch5xUUo6tkHP7b72Gn5xH3g==$uJDSyZJ8HNdG9q8REYbAVEHlnGuN/RRTQ6DGB3svlqheRY6tdqWnMS5g5nDJMT3VU+nEdvEpso21NhOiHGMhBTMd8UzMUYJqUbWwp/295Khvjpo5NNtwrmdQ74M2s5f19/Pn+6zwmC6HG+WFH7ZNTClLX8CqXa4iCEudho6IDg+Yf5RxCBO5Cvn30K2g6c16zMwNnNo/y7F8ejr8f2W+zvLtCPhLmb+8umvj8I65VHR+fr+aJ85w8WRSONOmFhdQTLbsUTnmuQHEksBTYfVK6kwTg661IfTgjaSdCmhs0gs0qBnSeVgTtizyO7rvKM6pfR5f78PVZPQWpOGhxGRqhu3TAc+4XZDSwh8B8Y0ofn98rucJpL3MgE+QHTn0AkBg9gtjmWWs0bNEFXBWDoAGfcs/ATCCfF74bgr2KstwOO3PBm7C4Y6ssPFsYqOomJGIZeCL+OAcEA+eeCDW/xjUEpPdiEZiIA3cAA=='}, 'browserInfo': {'acceptHeader': '*/*', 'colorDepth': 24, 'language': 'en-GB', 'javaEnabled': False, 'screenHeight': 1440, 'screenWidth': 2560, 'userAgent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36', 'timeZoneOffset': -120}}}",
          "",
          "[Added Lines]",
          "71: @pytest.mark.skip(reason=\"To finish when additional auth data schema will be known\")",
          "73:     return  # test it when we will have additional auth data",
          "76:         # additional_data=...",
          "80:     assert response",
          "87:         # additional_data=...",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114: def test_capture_payment(payment_adyen_for_order, order_with_lines, adyen_plugin):",
          "115:     payment_info = create_payment_information(",
          "116:         payment_adyen_for_order,",
          "118:     )",
          "119:     gateway_response = GatewayResponse(",
          "120:         kind=TransactionKind.AUTH,",
          "",
          "[Removed Lines]",
          "117:         # additional_data={\"paymentMethod\": {'riskData': {'clientData': 'eyJ2ZXJzaW9uIjoiMS4wLjAiLCJkZXZpY2VGaW5nZXJwcmludCI6InJ5RUdYOGVacEowMDMwMDAwMDAwMDAwMDAwS1piSVFqNmt6czAwODkxNDY3NzZjVkI5NGlLekJHdmFtOUVxNm9WUTVTMTZHb2g1TWswMDRpdmJTdVlkRzBSMDAwMDBZVnhFcjAwMDAwY3J1OXNBeFRSNWlaQ3FuSTRsc2s6NDAiLCJwZXJzaXN0ZW50Q29va2llIjpbIl9ycF91aWQ9YzA0ZDE5OWEtYjkyYy1iZmQzLTI1YTMtNDJmM2ZjODdiN2UyIl0sImNvbXBvbmVudHMiOnsidXNlckFnZW50IjoiZmU5ZWMxM2NmMGFjODM4Y2YwYWVkMWM0NjJiYTUxODkiLCJsYW5ndWFnZSI6ImVuLUdCIiwiY29sb3JEZXB0aCI6MjQsImRldmljZU1lbW9yeSI6OCwicGl4ZWxSYXRpbyI6MSwiaGFyZHdhcmVDb25jdXJyZW5jeSI6OCwic2NyZWVuV2lkdGgiOjI1NjAsInNjcmVlbkhlaWdodCI6MTQ0MCwiYXZhaWxhYmxlU2NyZWVuV2lkdGgiOjI1NjAsImF2YWlsYWJsZVNjcmVlbkhlaWdodCI6MTQxNywidGltZXpvbmVPZmZzZXQiOi0xMjAsInRpbWV6b25lIjoiRXVyb3BlL1dhcnNhdyIsInNlc3Npb25TdG9yYWdlIjoxLCJsb2NhbFN0b3JhZ2UiOjEsImluZGV4ZWREYiI6MSwiYWRkQmVoYXZpb3IiOjAsIm9wZW5EYXRhYmFzZSI6MSwicGxhdGZvcm0iOiJNYWNJbnRlbCIsInBsdWdpbnMiOiJjMDhlOTc4YWIwMmUzNTk1YmZiOWNiN2ViZWZlZjMzMyIsImNhbnZhcyI6ImQ2MTY0ZTcwN2VkODQ3ZTUxODhhNWI1MjA4ZjQyNThiIiwid2ViZ2wiOiIwMzNkY2RlZjQ4YmY3NmY5MTMyY2M3MDlkZmY5YTA3MSIsIndlYmdsVmVuZG9yQW5kUmVuZGVyZXIiOiJJbnRlbCBJbmMufkludGVsKFIpIElyaXMoVE0pIFBsdXMgR3JhcGhpY3MgNjU1IiwiYWRCbG9jayI6MSwiaGFzTGllZExhbmd1YWdlcyI6MCwiaGFzTGllZFJlc29sdXRpb24iOjAsImhhc0xpZWRPcyI6MCwiaGFzTGllZEJyb3dzZXIiOjAsImZvbnRzIjoiMjkyZWEyY2NlY2NkMDJiMDFjMGM0YzFkNDEzMjE3NWUiLCJhdWRpbyI6IjQ3M2QxYzc0ZGI3Y2QzOGUxZmExNTgxN2IxMzY2YmZjIiwiZW51bWVyYXRlRGV2aWNlcyI6IjNiYzFkYTVmMzM1YTk5ZjE3NmJmMGUzYzgyNTFhMTkzIn19'}, 'paymentMethod': {'type': 'scheme', 'encryptedCardNumber': 'adyenjs_0_1_25$FakMVsJwQJd7jca8dYfL6xhLfXeWhqYhAOkqgqNF7yM+5Tl0boUG9Xk4dKFakS4/3lCIjomlgAmOt4vEGveFDJtljGyS7t1sElK+fUASA/AMsSMFcMBPPr8ybKqHNwwj6k4t9SagLUQX27m0hIMmOKwQLdwwJHE9Iw/D2rGRqbsamq8cmG+T2tHDeqt5YWRCoho8t1u+OMzJMsalfeYbJmI7uIfvjbHAa0LtM5X2B6DcOClqRfwmLg8AgR5Gr4NDPub7di/W9F9Qkt56nPkN9WEYTOA1HIWkgBGHkTwCBVCxKjHmQgcnH1SPf4kram5TUGT85p3J2/BL1QmpPZixtw==$u9MN2eUsQkAvlSPT3k7YvhE3YXNwp/CmrIArUrFMfTPoQiibd4boM9oGL3hIrE5rWyzvc+4P9q1coGAiW6FNgas1+ZifHzjs8bmPHYC2h0mrmdFu4MsJp6+RL+4B0C5sd0Ef1aUEW8wfFjOfE3NZVPibaUKT6iBFeAplfV73AQEmIh2TXvm9PEmWtvCPcmA2Z6C8u53VOn9b3Y0lq3E88WgNEX6dShRqcvsLpSkTzaXAYroXBSi0oCFu9ebtqMBtkGujPOZa+ULq7o651xDHlJPxGmGHzxJ2N6gxn7P/Fpdj9BJf9ZfEMmP4Artm86lN3OUudu7Dfo7qh46FZQ4UAbRmrEJVix/sHVP1Z30d6cGfsTi331NkNKomyjS53Mdp//jx43X7t+wZyxoIyDvk+buQhM5rCzpD8lyvffagJPQMvImajBjyXOEOFFy45yrXxwl1ZlCegzDyRzv7u3o6grqvobbSaZm8kHSvDGM8uAklwgUDfIcWqUWQeXPJpZPECY6wffjMixJG8nurmb/VBig9P33e/MJo79U6jgWyoRFT7Yp6OJ3egYp403d+EgZCSrpcjX0tc5PYuZth1kE0cjOYRD1XgmVC0rtn5dxqk7CxVC+S1pSLSdrtGVTj5tNDdunq1zCT1+zmasjjGLDzZ5p1JE4z9PccesH2nfuYwT2aEqalDCCGA2LPIFpM3dvFVYTVFsKo5n7LPAlakWSAC5+tZ9RL/SbtfPXb9erIN90WyDSwCZr9CD36xayWgoPP66y/Sc24nzoTE4LYx2FeAvs7aqIN4Mu0sUFMUMJEHHNsmvFzWBIveo+KmBiHYri9iXeNW6k+w6fk/zLE/yBuYsJFAKE5CFmd3LMdbZCCd/RS8g==', 'encryptedExpiryMonth': 'adyenjs_0_1_25$qG3iso+7U0Oa5iCydxxisgLaEJ2rBoamj5JhUXeHCvC5Gy7MgyHz6ztYib4Y7QFfferfmqH7gkFe7yDR94cKbhDt3d8ePSFAs+96SU93wYAYVWzn5dLPFiXhwtnhtk/7YCZaT5b4YKZJ/9bOWkU+CwHJ/y2ELhtx2MRDDSBOZOFjsm1K3LAvu8gNIKP8QhFxfT28qLmC1xlQHKjqlIpaEqJPs92Zi40dWhkrFIHE3lCfIlpJbVI4EW5xDD8l70wkmQsnCIhJ3toSdENk8vr0/AWlPPt4lzfLfIXN5MHuifsC3iReYiK9vzjkX4VQJTkfY+0SIo/S1Ccu84n0xLKVdA==$HZmDBPHVt+5u711J5pfTvS8ZT1fD443FnOkG+YwMxNZkF+ioUz3cdP/Cr3jHL1pFLxZfmtqJwpigG/5TOvJsF9QealVWD4tfWKQuxzEKeO3xNYS1D/rWWvjdjhz6Eb0satd+DKzZjmtPEiyPBQ9+01OFdm17FTEDq2V5JiqBIIKB7Erw9CpMSYxmdNzhsFQongwi6kZ2Ju1or+C/noecpi2YdX3X0JLLRuEEYE2SAHHKCQKfHpOl7sXVtJ1K5wOCZpH9pBmoEtETLxS/gOjONbhjbdwnZ6ovc7RH3V3pnqEuiFA8/RFVyQia/Jels6yRSSPXp0SQaGByNALFeVLDcfuX53sHm+IO9oHS69RBox/Es3Utxy80In7Q2Lel5eWL61E+RjQmlSS6Ua7yL8eGkucBxHhdY0a7K34V+kM7HyJd4WzWA93YOznkAU4Ezqpxz42hepGBFNbeUWaFc2Xb', 'encryptedExpiryYear': 'adyenjs_0_1_25$L+CzaH0ce+jzo4PXZPffqWIjDAshC38J+rywq/7CYRChqVZ14sPX0HSyymETGBqVCJebv22N0VWb3jKhpedTExqmXHiL/WnwmhpFcOKArUZIt60OBE1RZ6NSXJiQpaKgIofonVD32gtammLhljoyDeYTaTYuvHrbLLSyJSc0DUFxSVIUuMkwytXrpOL+jVYCRteYQ6Koxs1RIPy5v3+3JFMTNILpOi+jwaATbpHW6wGj1vhr+y7MQtlVqBvXNlbID5MXiYmUpqYPKEVSNFBoGCERU9d8N/FAsWmLThGVlzUub90M/N1UdjBljZrxTEpkY7wJah6DnMEqQ6PTLPJjJg==$Aqsbh5fcErzrb+7P+dHvofFP9PujIDsOACst8DEdaLiLNwPfPTAiCmYS6l+ev99v6i3BWBFdR1vvH0PfPKNxmLtSByGqf8c6xUoaIaVyBpYz6qpTHlj25e73ROhx9MGfFJtpgnHs8zM39+Y0AuCZ+lTtVgacMR28xkhyl88VjGUrq/jLESOpOS9VsgjjctlXsup5zr+/bL2JpUPkKYW0l3yx9aIZBjZXIkF6k0Ax8wdWMIjJyOOHYJfzUKR1zvDz8AkWxFdrTZWrKAfdMlI9+oyrPYfcxebnTyn7OxEc4blqCghlWxbzEgWdl29ez8rtzh2o6U3YL0gI2sQoSvwR9NUzZT37K5kXbEq/L5VPnDtfGV6pnnbN3335WVFDPAeSss7vSup6GusVDU3HMfKnKwf8a4/T3XmixVGI+CW/xlqIGEfY6/b77r/HA41LYo9i2T+UXhJyT8F7nd2+YCUxsA==', 'encryptedSecurityCode': 'adyenjs_0_1_25$VzWN+WT4DVd0BlT5Umwq4lgqvc00SxadFDbXfHm1VDlx/V1X5mpqYMizTcgKL+hfmyNjuic9NqHh9YBP7yZNJkoP61n2op1ZPO3gBklnAqKR9rGeCpkNvBgEUDIiuVTxNRzQD1UtKvWMX4RQeI0/vGKraNQCDbGQS1g+N4JUnzEnMmSUAq5GPKsoFijEP/UfXR2/Qh4g/AoyCwfmneDFG+YuqKa4LI563yRgODIKVZk+tYrzVGOw4Ass4R0kaHztcx7vk0haNur5MWsS0WzciuMhYfBu33qwW9i0P4yePxHEJdFlGCn+uxUFjmQj39Rch5xUUo6tkHP7b72Gn5xH3g==$uJDSyZJ8HNdG9q8REYbAVEHlnGuN/RRTQ6DGB3svlqheRY6tdqWnMS5g5nDJMT3VU+nEdvEpso21NhOiHGMhBTMd8UzMUYJqUbWwp/295Khvjpo5NNtwrmdQ74M2s5f19/Pn+6zwmC6HG+WFH7ZNTClLX8CqXa4iCEudho6IDg+Yf5RxCBO5Cvn30K2g6c16zMwNnNo/y7F8ejr8f2W+zvLtCPhLmb+8umvj8I65VHR+fr+aJ85w8WRSONOmFhdQTLbsUTnmuQHEksBTYfVK6kwTg661IfTgjaSdCmhs0gs0qBnSeVgTtizyO7rvKM6pfR5f78PVZPQWpOGhxGRqhu3TAc+4XZDSwh8B8Y0ofn98rucJpL3MgE+QHTn0AkBg9gtjmWWs0bNEFXBWDoAGfcs/ATCCfF74bgr2KstwOO3PBm7C4Y6ssPFsYqOomJGIZeCL+OAcEA+eeCDW/xjUEpPdiEZiIA3cAA=='}, 'browserInfo': {'acceptHeader': '*/*', 'colorDepth': 24, 'language': 'en-GB', 'javaEnabled': False, 'screenHeight': 1440, 'screenWidth': 2560, 'userAgent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36', 'timeZoneOffset': -120}}}",
          "",
          "[Added Lines]",
          "119:         # additional_data=...",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from babel.numbers import get_currency_precision",
          "7: from django.conf import settings",
          "8: from django_countries.fields import Country",
          "11: from ....checkout.models import Checkout",
          "12: from ....core.prices import quantize_price",
          "14: from ... import PaymentError",
          "15: from ...interface import PaymentData",
          "",
          "[Removed Lines]",
          "9: from graphql_relay import from_global_id",
          "13: from ....discount.utils import fetch_active_discounts",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: from ....order.actions import (",
          "15:     cancel_order,",
          "17:     order_authorized,",
          "18:     order_captured,",
          "19:     order_refunded,",
          "",
          "[Removed Lines]",
          "16:     handle_fully_paid_order,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/payment/utils.py||saleor/payment/utils.py": [
          "File: saleor/payment/utils.py -> saleor/payment/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:         payment.save(update_fields=changed_fields)",
          "248:     elif transaction_kind == TransactionKind.PENDING:",
          "249:         payment.charge_status = ChargeStatus.PENDING",
          "253:     elif transaction_kind == TransactionKind.CANCEL:",
          "254:         payment.charge_status = ChargeStatus.CANCELLED",
          "258:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
          "259:         if payment.charge_status in {",
          "260:             ChargeStatus.PARTIALLY_CHARGED,",
          "",
          "[Removed Lines]",
          "250:         payment.save(",
          "251:             update_fields=[\"charge_status\",]",
          "252:         )",
          "255:         payment.save(",
          "256:             update_fields=[\"charge_status\",]",
          "257:         )",
          "",
          "[Added Lines]",
          "250:         payment.save(update_fields=[\"charge_status\"])",
          "253:         payment.save(update_fields=[\"charge_status\"])",
          "",
          "---------------"
        ]
      }
    }
  ]
}