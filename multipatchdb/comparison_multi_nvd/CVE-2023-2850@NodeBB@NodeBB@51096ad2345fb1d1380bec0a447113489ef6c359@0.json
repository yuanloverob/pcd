{
  "cve_id": "CVE-2023-2850",
  "cve_desc": "NodeBB is affected by a Cross-Site WebSocket Hijacking vulnerability due to missing validation of the request origin. Exploitation of this vulnerability allows certain user information to be extracted by attacker.",
  "repo": "NodeBB/NodeBB",
  "patch_hash": "51096ad2345fb1d1380bec0a447113489ef6c359",
  "patch_info": {
    "commit_hash": "51096ad2345fb1d1380bec0a447113489ef6c359",
    "repo": "NodeBB/NodeBB",
    "commit_url": "https://github.com/NodeBB/NodeBB/commit/51096ad2345fb1d1380bec0a447113489ef6c359",
    "files": [
      "public/src/sockets.js",
      "src/middleware/csrf.js",
      "src/socket.io/index.js",
      "test/helpers/index.js",
      "test/socket.io.js"
    ],
    "message": "poc: use csrf_token in ws handshake (#11573)",
    "before_after_code_files": [
      "public/src/sockets.js||public/src/sockets.js",
      "src/middleware/csrf.js||src/middleware/csrf.js",
      "src/socket.io/index.js||src/socket.io/index.js",
      "test/helpers/index.js||test/helpers/index.js",
      "test/socket.io.js||test/socket.io.js"
    ]
  },
  "patch_diff": {
    "public/src/sockets.js||public/src/sockets.js": [
      "File: public/src/sockets.js -> public/src/sockets.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:   reconnectionDelay: config.reconnectionDelay,",
      "16:   transports: config.socketioTransports,",
      "17:   path: config.relative_path + '/socket.io',",
      "18:  };",
      "20:  window.socket = io(config.websocketAddress, ioParams);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18:   query: {",
      "19:    _csrf: config.csrf_token,",
      "20:   },",
      "",
      "---------------"
    ],
    "src/middleware/csrf.js||src/middleware/csrf.js": [
      "File: src/middleware/csrf.js -> src/middleware/csrf.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: const {",
      "6:  generateToken,",
      "7:  csrfSynchronisedProtection,",
      "8: } = csrfSync({",
      "9:  getTokenFromRequest: (req) => {",
      "10:   if (req.headers['x-csrf-token']) {",
      "11:    return req.headers['x-csrf-token'];",
      "13:    return req.body.csrf_token;",
      "14:   }",
      "15:  },",
      "16:  size: 64,",
      "",
      "[Removed Lines]",
      "12:   } else if (req.body.csrf_token) {",
      "",
      "[Added Lines]",
      "8:  isRequestValid,",
      "13:   } else if (req.body && req.body.csrf_token) {",
      "15:   } else if (req.query) {",
      "16:    return req.query._csrf;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19: module.exports = {",
      "20:  generateToken,",
      "21:  csrfSynchronisedProtection,",
      "22: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25:  isRequestValid,",
      "",
      "---------------"
    ],
    "src/socket.io/index.js||src/socket.io/index.js": [
      "File: src/socket.io/index.js -> src/socket.io/index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:   }",
      "35:  }",
      "39:  io.on('connection', onConnection);",
      "41:  const opts = {",
      "42:   transports: nconf.get('socket.io:transports') || ['polling', 'websocket'],",
      "43:   cookie: false,",
      "44:  };",
      "",
      "[Removed Lines]",
      "37:  io.use(authorize);",
      "",
      "[Added Lines]",
      "42:   allowRequest: (req, callback) => {",
      "43:    authorize(req, (err) => {",
      "44:     if (err) {",
      "45:      return callback(err);",
      "46:     }",
      "47:     const csrf = require('../middleware/csrf');",
      "48:     const isValid = csrf.isRequestValid({",
      "49:      session: req.session || {},",
      "50:      query: req._query,",
      "51:      headers: req.headers,",
      "52:     });",
      "53:     callback(null, isValid);",
      "54:    });",
      "55:   },",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "62: };",
      "64: function onConnection(socket) {",
      "66:  socket.request.ip = socket.ip;",
      "67:  logger.io_one(socket, socket.uid);",
      "",
      "[Removed Lines]",
      "65:  socket.ip = (socket.request.headers['x-forwarded-for'] || socket.request.connection.remoteAddress || '').split(',')[0];",
      "",
      "[Added Lines]",
      "77:  socket.uid = socket.request.uid;",
      "78:  socket.ip = (",
      "79:   socket.request.headers['x-forwarded-for'] ||",
      "80:   socket.request.connection.remoteAddress || ''",
      "81:  ).split(',')[0];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "232: const cookieParserAsync = util.promisify((req, callback) => cookieParser(req, {}, err => callback(err)));",
      "237:  if (!request) {",
      "238:   return callback(new Error('[[error:not-authorized]]'));",
      "239:  }",
      "",
      "[Removed Lines]",
      "234: async function authorize(socket, callback) {",
      "235:  const { request } = socket;",
      "",
      "[Added Lines]",
      "250: async function authorize(request, callback) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "246:  });",
      "248:  const sessionData = await getSessionAsync(sessionId);",
      "250:  if (sessionData && sessionData.passport && sessionData.passport.user) {",
      "255:  }",
      "258: }",
      "260: Sockets.in = function (room) {",
      "",
      "[Removed Lines]",
      "251:   request.session = sessionData;",
      "252:   socket.uid = parseInt(sessionData.passport.user, 10);",
      "253:  } else {",
      "254:   socket.uid = 0;",
      "256:  request.uid = socket.uid;",
      "257:  callback();",
      "",
      "[Added Lines]",
      "263:  request.session = sessionData;",
      "264:  let uid = 0;",
      "266:   uid = parseInt(sessionData.passport.user, 10);",
      "268:  request.uid = uid;",
      "269:  callback(null, uid);",
      "",
      "---------------"
    ],
    "test/helpers/index.js||test/helpers/index.js": [
      "File: test/helpers/index.js -> test/helpers/index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "96:  });",
      "97: };",
      "100:  const io = require('socket.io-client');",
      "101:  let cookies = res.headers['set-cookie'];",
      "102:  cookies = cookies.filter(c => /express.sid=[^;]+;/.test(c));",
      "",
      "[Removed Lines]",
      "99: helpers.connectSocketIO = function (res, callback) {",
      "",
      "[Added Lines]",
      "99: helpers.connectSocketIO = function (res, csrf_token, callback) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "107:    Origin: nconf.get('url'),",
      "108:    Cookie: cookie,",
      "109:   },",
      "110:  });",
      "112:  socket.on('connect', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110:   query: {",
      "111:    _csrf: csrf_token,",
      "112:   },",
      "",
      "---------------"
    ],
    "test/socket.io.js||test/socket.io.js": [
      "File: test/socket.io.js -> test/socket.io.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "73:    }, (err, res) => {",
      "74:     assert.ifError(err);",
      "77:      io = _io;",
      "78:      assert.ifError(err);",
      "",
      "[Removed Lines]",
      "76:     helpers.connectSocketIO(res, (err, _io) => {",
      "",
      "[Added Lines]",
      "76:     helpers.connectSocketIO(res, body.csrf_token, (err, _io) => {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "63b859f053246bf5410e2e5bf549ebec5450606f",
      "candidate_info": {
        "commit_hash": "63b859f053246bf5410e2e5bf549ebec5450606f",
        "repo": "NodeBB/NodeBB",
        "commit_url": "https://github.com/NodeBB/NodeBB/commit/63b859f053246bf5410e2e5bf549ebec5450606f",
        "files": [
          "public/src/sockets.js",
          "src/middleware/csrf.js",
          "src/socket.io/index.js",
          "test/helpers/index.js",
          "test/socket.io.js"
        ],
        "message": "poc: use csrf_token in ws handshake (#11573)",
        "before_after_code_files": [
          "public/src/sockets.js||public/src/sockets.js",
          "src/middleware/csrf.js||src/middleware/csrf.js",
          "src/socket.io/index.js||src/socket.io/index.js",
          "test/helpers/index.js||test/helpers/index.js",
          "test/socket.io.js||test/socket.io.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "public/src/sockets.js||public/src/sockets.js",
            "src/middleware/csrf.js||src/middleware/csrf.js",
            "src/socket.io/index.js||src/socket.io/index.js",
            "test/helpers/index.js||test/helpers/index.js",
            "test/socket.io.js||test/socket.io.js"
          ],
          "candidate": [
            "public/src/sockets.js||public/src/sockets.js",
            "src/middleware/csrf.js||src/middleware/csrf.js",
            "src/socket.io/index.js||src/socket.io/index.js",
            "test/helpers/index.js||test/helpers/index.js",
            "test/socket.io.js||test/socket.io.js"
          ]
        }
      },
      "candidate_diff": {
        "public/src/sockets.js||public/src/sockets.js": [
          "File: public/src/sockets.js -> public/src/sockets.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   reconnectionDelay: config.reconnectionDelay,",
          "16:   transports: config.socketioTransports,",
          "17:   path: config.relative_path + '/socket.io',",
          "18:  };",
          "20:  window.socket = io(config.websocketAddress, ioParams);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   query: {",
          "19:    _csrf: config.csrf_token,",
          "20:   },",
          "",
          "---------------"
        ],
        "src/middleware/csrf.js||src/middleware/csrf.js": [
          "File: src/middleware/csrf.js -> src/middleware/csrf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: const {",
          "6:  generateToken,",
          "7:  csrfSynchronisedProtection,",
          "8: } = csrfSync({",
          "9:  getTokenFromRequest: (req) => {",
          "10:   if (req.headers['x-csrf-token']) {",
          "11:    return req.headers['x-csrf-token'];",
          "13:    return req.body.csrf_token;",
          "14:   }",
          "15:  },",
          "16:  size: 64,",
          "",
          "[Removed Lines]",
          "12:   } else if (req.body.csrf_token) {",
          "",
          "[Added Lines]",
          "8:  isRequestValid,",
          "13:   } else if (req.body && req.body.csrf_token) {",
          "15:   } else if (req.query) {",
          "16:    return req.query._csrf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: module.exports = {",
          "20:  generateToken,",
          "21:  csrfSynchronisedProtection,",
          "22: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:  isRequestValid,",
          "",
          "---------------"
        ],
        "src/socket.io/index.js||src/socket.io/index.js": [
          "File: src/socket.io/index.js -> src/socket.io/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   }",
          "35:  }",
          "39:  io.on('connection', onConnection);",
          "41:  const opts = {",
          "42:   transports: nconf.get('socket.io:transports') || ['polling', 'websocket'],",
          "43:   cookie: false,",
          "44:  };",
          "",
          "[Removed Lines]",
          "37:  io.use(authorize);",
          "",
          "[Added Lines]",
          "42:   allowRequest: (req, callback) => {",
          "43:    authorize(req, (err) => {",
          "44:     if (err) {",
          "45:      return callback(err);",
          "46:     }",
          "47:     const csrf = require('../middleware/csrf');",
          "48:     const isValid = csrf.isRequestValid({",
          "49:      session: req.session || {},",
          "50:      query: req._query,",
          "51:      headers: req.headers,",
          "52:     });",
          "53:     callback(null, isValid);",
          "54:    });",
          "55:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: };",
          "64: function onConnection(socket) {",
          "66:  socket.request.ip = socket.ip;",
          "67:  logger.io_one(socket, socket.uid);",
          "",
          "[Removed Lines]",
          "65:  socket.ip = (socket.request.headers['x-forwarded-for'] || socket.request.connection.remoteAddress || '').split(',')[0];",
          "",
          "[Added Lines]",
          "77:  socket.uid = socket.request.uid;",
          "78:  socket.ip = (",
          "79:   socket.request.headers['x-forwarded-for'] ||",
          "80:   socket.request.connection.remoteAddress || ''",
          "81:  ).split(',')[0];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232: const cookieParserAsync = util.promisify((req, callback) => cookieParser(req, {}, err => callback(err)));",
          "237:  if (!request) {",
          "238:   return callback(new Error('[[error:not-authorized]]'));",
          "239:  }",
          "",
          "[Removed Lines]",
          "234: async function authorize(socket, callback) {",
          "235:  const { request } = socket;",
          "",
          "[Added Lines]",
          "250: async function authorize(request, callback) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:  });",
          "248:  const sessionData = await getSessionAsync(sessionId);",
          "250:  if (sessionData && sessionData.passport && sessionData.passport.user) {",
          "255:  }",
          "258: }",
          "260: Sockets.in = function (room) {",
          "",
          "[Removed Lines]",
          "251:   request.session = sessionData;",
          "252:   socket.uid = parseInt(sessionData.passport.user, 10);",
          "253:  } else {",
          "254:   socket.uid = 0;",
          "256:  request.uid = socket.uid;",
          "257:  callback();",
          "",
          "[Added Lines]",
          "263:  request.session = sessionData;",
          "264:  let uid = 0;",
          "266:   uid = parseInt(sessionData.passport.user, 10);",
          "268:  request.uid = uid;",
          "269:  callback(null, uid);",
          "",
          "---------------"
        ],
        "test/helpers/index.js||test/helpers/index.js": [
          "File: test/helpers/index.js -> test/helpers/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:  });",
          "97: };",
          "100:  const io = require('socket.io-client');",
          "101:  let cookies = res.headers['set-cookie'];",
          "102:  cookies = cookies.filter(c => /express.sid=[^;]+;/.test(c));",
          "",
          "[Removed Lines]",
          "99: helpers.connectSocketIO = function (res, callback) {",
          "",
          "[Added Lines]",
          "99: helpers.connectSocketIO = function (res, csrf_token, callback) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:    Origin: nconf.get('url'),",
          "108:    Cookie: cookie,",
          "109:   },",
          "110:  });",
          "112:  socket.on('connect', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:   query: {",
          "111:    _csrf: csrf_token,",
          "112:   },",
          "",
          "---------------"
        ],
        "test/socket.io.js||test/socket.io.js": [
          "File: test/socket.io.js -> test/socket.io.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:    }, (err, res) => {",
          "74:     assert.ifError(err);",
          "77:      io = _io;",
          "78:      assert.ifError(err);",
          "",
          "[Removed Lines]",
          "76:     helpers.connectSocketIO(res, (err, _io) => {",
          "",
          "[Added Lines]",
          "76:     helpers.connectSocketIO(res, body.csrf_token, (err, _io) => {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67f44a3212953b8432c9c68d6c4347da7e27e545",
      "candidate_info": {
        "commit_hash": "67f44a3212953b8432c9c68d6c4347da7e27e545",
        "repo": "NodeBB/NodeBB",
        "commit_url": "https://github.com/NodeBB/NodeBB/commit/67f44a3212953b8432c9c68d6c4347da7e27e545",
        "files": [
          "src/middleware/csrf.js"
        ],
        "message": "feat: add back support for req.body._csrf\n\nused in login.tpl etc for noscript login",
        "before_after_code_files": [
          "src/middleware/csrf.js||src/middleware/csrf.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/middleware/csrf.js||src/middleware/csrf.js"
          ],
          "candidate": [
            "src/middleware/csrf.js||src/middleware/csrf.js"
          ]
        }
      },
      "candidate_diff": {
        "src/middleware/csrf.js||src/middleware/csrf.js": [
          "File: src/middleware/csrf.js -> src/middleware/csrf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:    return req.headers['x-csrf-token'];",
          "13:   } else if (req.body && req.body.csrf_token) {",
          "14:    return req.body.csrf_token;",
          "16:    return req.query._csrf;",
          "17:   }",
          "18:  },",
          "",
          "[Removed Lines]",
          "15:   } else if (req.query) {",
          "",
          "[Added Lines]",
          "15:   } else if (req.body && req.body._csrf) {",
          "16:    return req.body._csrf;",
          "17:   } else if (req.query && req.query._csrf) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62e162cf1e735e42462be1db9b4954b5a69accdf",
      "candidate_info": {
        "commit_hash": "62e162cf1e735e42462be1db9b4954b5a69accdf",
        "repo": "NodeBB/NodeBB",
        "commit_url": "https://github.com/NodeBB/NodeBB/commit/62e162cf1e735e42462be1db9b4954b5a69accdf",
        "files": [
          "public/src/sockets.js",
          "src/middleware/csrf.js",
          "src/middleware/index.js",
          "src/socket.io/index.js",
          "test/helpers/index.js",
          "test/socket.io.js"
        ],
        "message": "fix: backport ws token fix",
        "before_after_code_files": [
          "public/src/sockets.js||public/src/sockets.js",
          "src/middleware/csrf.js||src/middleware/csrf.js",
          "src/middleware/index.js||src/middleware/index.js",
          "src/socket.io/index.js||src/socket.io/index.js",
          "test/helpers/index.js||test/helpers/index.js",
          "test/socket.io.js||test/socket.io.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "public/src/sockets.js||public/src/sockets.js",
            "src/middleware/csrf.js||src/middleware/csrf.js",
            "src/socket.io/index.js||src/socket.io/index.js",
            "test/helpers/index.js||test/helpers/index.js",
            "test/socket.io.js||test/socket.io.js"
          ],
          "candidate": [
            "public/src/sockets.js||public/src/sockets.js",
            "src/middleware/csrf.js||src/middleware/csrf.js",
            "src/socket.io/index.js||src/socket.io/index.js",
            "test/helpers/index.js||test/helpers/index.js",
            "test/socket.io.js||test/socket.io.js"
          ]
        }
      },
      "candidate_diff": {
        "public/src/sockets.js||public/src/sockets.js": [
          "File: public/src/sockets.js -> public/src/sockets.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   reconnectionDelay: config.reconnectionDelay,",
          "16:   transports: config.socketioTransports,",
          "17:   path: config.relative_path + '/socket.io',",
          "18:  };",
          "20:  window.socket = io(config.websocketAddress, ioParams);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   query: {",
          "19:    _csrf: config.csrf_token,",
          "20:   },",
          "",
          "---------------"
        ],
        "src/middleware/csrf.js||src/middleware/csrf.js": [
          "File: src/middleware/csrf.js -> src/middleware/csrf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: const {",
          "6:  generateToken,",
          "7:  csrfSynchronisedProtection,",
          "8: } = csrfSync({",
          "10: });",
          "12: module.exports = {",
          "13:  generateToken,",
          "14:  csrfSynchronisedProtection,",
          "",
          "[Removed Lines]",
          "9:  size: 64",
          "15: };",
          "",
          "[Added Lines]",
          "8:  isRequestValid,",
          "10:  getTokenFromRequest: (req) => {",
          "11:   if (req.headers['x-csrf-token']) {",
          "12:    return req.headers['x-csrf-token'];",
          "13:   } else if (req.body && req.body.csrf_token) {",
          "14:    return req.body.csrf_token;",
          "15:   } else if (req.query) {",
          "16:    return req.query._csrf;",
          "17:   }",
          "18:  },",
          "19:  size: 64,",
          "25:  isRequestValid,",
          "26: };",
          "",
          "---------------"
        ],
        "src/middleware/index.js||src/middleware/index.js": [
          "File: src/middleware/index.js -> src/middleware/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: const async = require('async');",
          "4: const path = require('path');",
          "6: const validator = require('validator');",
          "7: const nconf = require('nconf');",
          "8: const toobusy = require('toobusy-js');",
          "9: const util = require('util');",
          "11: const plugins = require('../plugins');",
          "12: const meta = require('../meta');",
          "",
          "[Removed Lines]",
          "5: const { csrfSynchronisedProtection } = require('./csrf');",
          "",
          "[Added Lines]",
          "9: const { csrfSynchronisedProtection } = require('./csrf');",
          "",
          "---------------"
        ],
        "src/socket.io/index.js||src/socket.io/index.js": [
          "File: src/socket.io/index.js -> src/socket.io/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   }",
          "35:  }",
          "39:  io.on('connection', onConnection);",
          "41:  const opts = {",
          "42:   transports: nconf.get('socket.io:transports') || ['polling', 'websocket'],",
          "43:   cookie: false,",
          "44:  };",
          "",
          "[Removed Lines]",
          "37:  io.use(authorize);",
          "",
          "[Added Lines]",
          "42:   allowRequest: (req, callback) => {",
          "43:    authorize(req, (err) => {",
          "44:     if (err) {",
          "45:      return callback(err);",
          "46:     }",
          "47:     const csrf = require('../middleware/csrf');",
          "48:     const isValid = csrf.isRequestValid({",
          "49:      session: req.session || {},",
          "50:      query: req._query,",
          "51:      headers: req.headers,",
          "52:     });",
          "53:     callback(null, isValid);",
          "54:    });",
          "55:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: };",
          "64: function onConnection(socket) {",
          "66:  socket.request.ip = socket.ip;",
          "67:  logger.io_one(socket, socket.uid);",
          "",
          "[Removed Lines]",
          "65:  socket.ip = (socket.request.headers['x-forwarded-for'] || socket.request.connection.remoteAddress || '').split(',')[0];",
          "",
          "[Added Lines]",
          "77:  socket.uid = socket.request.uid;",
          "78:  socket.ip = (",
          "79:   socket.request.headers['x-forwarded-for'] ||",
          "80:   socket.request.connection.remoteAddress || ''",
          "81:  ).split(',')[0];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232: const cookieParserAsync = util.promisify((req, callback) => cookieParser(req, {}, err => callback(err)));",
          "237:  if (!request) {",
          "238:   return callback(new Error('[[error:not-authorized]]'));",
          "239:  }",
          "",
          "[Removed Lines]",
          "234: async function authorize(socket, callback) {",
          "235:  const { request } = socket;",
          "",
          "[Added Lines]",
          "250: async function authorize(request, callback) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:  });",
          "248:  const sessionData = await getSessionAsync(sessionId);",
          "250:  if (sessionData && sessionData.passport && sessionData.passport.user) {",
          "255:  }",
          "258: }",
          "260: Sockets.in = function (room) {",
          "",
          "[Removed Lines]",
          "251:   request.session = sessionData;",
          "252:   socket.uid = parseInt(sessionData.passport.user, 10);",
          "253:  } else {",
          "254:   socket.uid = 0;",
          "256:  request.uid = socket.uid;",
          "257:  callback();",
          "",
          "[Added Lines]",
          "263:  request.session = sessionData;",
          "264:  let uid = 0;",
          "266:   uid = parseInt(sessionData.passport.user, 10);",
          "268:  request.uid = uid;",
          "269:  callback(null, uid);",
          "",
          "---------------"
        ],
        "test/helpers/index.js||test/helpers/index.js": [
          "File: test/helpers/index.js -> test/helpers/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:  });",
          "96: };",
          "99:  const io = require('socket.io-client');",
          "100:  let cookies = res.headers['set-cookie'];",
          "101:  cookies = cookies.filter(c => /express.sid=[^;]+;/.test(c));",
          "",
          "[Removed Lines]",
          "98: helpers.connectSocketIO = function (res, callback) {",
          "",
          "[Added Lines]",
          "98: helpers.connectSocketIO = function (res, csrf_token, callback) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:    Origin: nconf.get('url'),",
          "107:    Cookie: cookie,",
          "108:   },",
          "109:  });",
          "111:  socket.on('connect', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:   query: {",
          "110:    _csrf: csrf_token,",
          "111:   },",
          "",
          "---------------"
        ],
        "test/socket.io.js||test/socket.io.js": [
          "File: test/socket.io.js -> test/socket.io.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:    }, (err, res) => {",
          "74:     assert.ifError(err);",
          "77:      io = _io;",
          "78:      assert.ifError(err);",
          "",
          "[Removed Lines]",
          "76:     helpers.connectSocketIO(res, (err, _io) => {",
          "",
          "[Added Lines]",
          "76:     helpers.connectSocketIO(res, body.csrf_token, (err, _io) => {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12cba2d12c7ec446e465db6a9917c39a2d413d0c",
      "candidate_info": {
        "commit_hash": "12cba2d12c7ec446e465db6a9917c39a2d413d0c",
        "repo": "NodeBB/NodeBB",
        "commit_url": "https://github.com/NodeBB/NodeBB/commit/12cba2d12c7ec446e465db6a9917c39a2d413d0c",
        "files": [
          "install/package.json",
          "public/src/sockets.js",
          "src/controllers/api.js",
          "src/middleware/csrf.js",
          "src/middleware/index.js",
          "src/routes/authentication.js",
          "src/socket.io/index.js",
          "test/helpers/index.js",
          "test/socket.io.js"
        ],
        "message": "backport fix for cswsh",
        "before_after_code_files": [
          "public/src/sockets.js||public/src/sockets.js",
          "src/controllers/api.js||src/controllers/api.js",
          "src/middleware/csrf.js||src/middleware/csrf.js",
          "src/middleware/index.js||src/middleware/index.js",
          "src/routes/authentication.js||src/routes/authentication.js",
          "src/socket.io/index.js||src/socket.io/index.js",
          "test/helpers/index.js||test/helpers/index.js",
          "test/socket.io.js||test/socket.io.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "public/src/sockets.js||public/src/sockets.js",
            "src/middleware/csrf.js||src/middleware/csrf.js",
            "src/socket.io/index.js||src/socket.io/index.js",
            "test/helpers/index.js||test/helpers/index.js",
            "test/socket.io.js||test/socket.io.js"
          ],
          "candidate": [
            "public/src/sockets.js||public/src/sockets.js",
            "src/middleware/csrf.js||src/middleware/csrf.js",
            "src/socket.io/index.js||src/socket.io/index.js",
            "test/helpers/index.js||test/helpers/index.js",
            "test/socket.io.js||test/socket.io.js"
          ]
        }
      },
      "candidate_diff": {
        "public/src/sockets.js||public/src/sockets.js": [
          "File: public/src/sockets.js -> public/src/sockets.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   reconnectionDelay: config.reconnectionDelay,",
          "13:   transports: config.socketioTransports,",
          "14:   path: config.relative_path + '/socket.io',",
          "15:  };",
          "17:  socket = io(config.websocketAddress, ioParams);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:   query: {",
          "16:    _csrf: config.csrf_token,",
          "17:   },",
          "",
          "---------------"
        ],
        "src/controllers/api.js||src/controllers/api.js": [
          "File: src/controllers/api.js -> src/controllers/api.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const plugins = require('../plugins');",
          "10: const translator = require('../translator');",
          "11: const languages = require('../languages');",
          "13: const apiController = module.exports;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: const { generateToken } = require('../middleware/csrf');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   'cache-buster': meta.config['cache-buster'] || '',",
          "65:   topicPostSort: meta.config.topicPostSort || 'oldest_to_newest',",
          "66:   categoryTopicSort: meta.config.categoryTopicSort || 'newest_to_oldest',",
          "68:   searchEnabled: plugins.hooks.hasListeners('filter:search.query'),",
          "69:   searchDefaultInQuick: meta.config.searchDefaultInQuick || 'titles',",
          "70:   bootswatchSkin: meta.config.bootswatchSkin || '',",
          "",
          "[Removed Lines]",
          "67:   csrf_token: req.uid >= 0 && req.csrfToken && req.csrfToken(),",
          "",
          "[Added Lines]",
          "68:   csrf_token: req.uid >= 0 ? generateToken(req) : false,",
          "",
          "---------------"
        ],
        "src/middleware/csrf.js||src/middleware/csrf.js": [
          "File: src/middleware/csrf.js -> src/middleware/csrf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: 'use strict';",
          "3: const { csrfSync } = require('csrf-sync');",
          "5: const {",
          "6:  generateToken,",
          "7:  csrfSynchronisedProtection,",
          "8:  isRequestValid,",
          "9: } = csrfSync({",
          "10:  getTokenFromRequest: (req) => {",
          "11:   if (req.headers['x-csrf-token']) {",
          "12:    return req.headers['x-csrf-token'];",
          "13:   } else if (req.body && req.body.csrf_token) {",
          "14:    return req.body.csrf_token;",
          "15:   } else if (req.body && req.body._csrf) {",
          "16:    return req.body._csrf;",
          "17:   } else if (req.query && req.query._csrf) {",
          "18:    return req.query._csrf;",
          "19:   }",
          "20:  },",
          "21:  size: 64,",
          "22: });",
          "24: module.exports = {",
          "25:  generateToken,",
          "26:  csrfSynchronisedProtection,",
          "27:  isRequestValid,",
          "28: };",
          "",
          "---------------"
        ],
        "src/middleware/index.js||src/middleware/index.js": [
          "File: src/middleware/index.js -> src/middleware/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: const async = require('async');",
          "4: const path = require('path');",
          "6: const validator = require('validator');",
          "7: const nconf = require('nconf');",
          "8: const toobusy = require('toobusy-js');",
          "9: const LRU = require('lru-cache');",
          "10: const util = require('util');",
          "12: const plugins = require('../plugins');",
          "13: const meta = require('../meta');",
          "14: const user = require('../user');",
          "",
          "[Removed Lines]",
          "5: const csrf = require('csurf');",
          "",
          "[Added Lines]",
          "11: const { csrfSynchronisedProtection } = require('./csrf');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:  timestampedUpload: /^\\d+-.+$/,",
          "35: };",
          "39: middleware.applyCSRF = function (req, res, next) {",
          "40:  if (req.uid >= 0) {",
          "",
          "[Removed Lines]",
          "37: const csrfMiddleware = csrf();",
          "",
          "[Added Lines]",
          "38: const csrfMiddleware = csrfSynchronisedProtection;",
          "",
          "---------------"
        ],
        "src/routes/authentication.js||src/routes/authentication.js": [
          "File: src/routes/authentication.js -> src/routes/authentication.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: const controllers = require('../controllers');",
          "11: const helpers = require('../controllers/helpers');",
          "12: const plugins = require('../plugins');",
          "14: let loginStrategies = [];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: const { generateToken } = require('../middleware/csrf');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     };",
          "96:     if (strategy.checkState !== false) {",
          "98:      opts.state = req.session.ssoState;",
          "99:     }",
          "",
          "[Removed Lines]",
          "97:      req.session.ssoState = req.csrfToken && req.csrfToken();",
          "",
          "[Added Lines]",
          "98:      req.session.ssoState = generateToken(req, true);",
          "",
          "---------------"
        ],
        "src/socket.io/index.js||src/socket.io/index.js": [
          "File: src/socket.io/index.js -> src/socket.io/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   }",
          "35:  }",
          "39:  io.on('connection', onConnection);",
          "41:  const opts = {",
          "42:   transports: nconf.get('socket.io:transports') || ['polling', 'websocket'],",
          "43:   cookie: false,",
          "44:  };",
          "",
          "[Removed Lines]",
          "37:  io.use(authorize);",
          "",
          "[Added Lines]",
          "42:   allowRequest: (req, callback) => {",
          "43:    authorize(req, (err) => {",
          "44:     if (err) {",
          "45:      return callback(err);",
          "46:     }",
          "47:     const csrf = require('../middleware/csrf');",
          "48:     const isValid = csrf.isRequestValid({",
          "49:      session: req.session || {},",
          "50:      query: req._query,",
          "51:      headers: req.headers,",
          "52:     });",
          "53:     callback(null, isValid);",
          "54:    });",
          "55:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: };",
          "64: function onConnection(socket) {",
          "66:  socket.request.ip = socket.ip;",
          "67:  logger.io_one(socket, socket.uid);",
          "",
          "[Removed Lines]",
          "65:  socket.ip = (socket.request.headers['x-forwarded-for'] || socket.request.connection.remoteAddress || '').split(',')[0];",
          "",
          "[Added Lines]",
          "77:  socket.uid = socket.request.uid;",
          "78:  socket.ip = (",
          "79:   socket.request.headers['x-forwarded-for'] ||",
          "80:   socket.request.connection.remoteAddress || ''",
          "81:  ).split(',')[0];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226: const cookieParserAsync = util.promisify((req, callback) => cookieParser(req, {}, err => callback(err)));",
          "231:  if (!request) {",
          "232:   return callback(new Error('[[error:not-authorized]]'));",
          "233:  }",
          "",
          "[Removed Lines]",
          "228: async function authorize(socket, callback) {",
          "229:  const { request } = socket;",
          "",
          "[Added Lines]",
          "244: async function authorize(request, callback) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240:  });",
          "242:  const sessionData = await getSessionAsync(sessionId);",
          "244:  if (sessionData && sessionData.passport && sessionData.passport.user) {",
          "249:  }",
          "252: }",
          "254: Sockets.in = function (room) {",
          "",
          "[Removed Lines]",
          "245:   request.session = sessionData;",
          "246:   socket.uid = parseInt(sessionData.passport.user, 10);",
          "247:  } else {",
          "248:   socket.uid = 0;",
          "250:  request.uid = socket.uid;",
          "251:  callback();",
          "",
          "[Added Lines]",
          "257:  request.session = sessionData;",
          "258:  let uid = 0;",
          "260:   uid = parseInt(sessionData.passport.user, 10);",
          "262:  request.uid = uid;",
          "263:  callback(null, uid);",
          "",
          "---------------"
        ],
        "test/helpers/index.js||test/helpers/index.js": [
          "File: test/helpers/index.js -> test/helpers/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:  });",
          "96: };",
          "99:  const io = require('socket.io-client');",
          "100:  let cookies = res.headers['set-cookie'];",
          "101:  cookies = cookies.filter(c => /express.sid=[^;]+;/.test(c));",
          "",
          "[Removed Lines]",
          "98: helpers.connectSocketIO = function (res, callback) {",
          "",
          "[Added Lines]",
          "98: helpers.connectSocketIO = function (res, csrf_token, callback) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:    Origin: nconf.get('url'),",
          "107:    Cookie: cookie,",
          "108:   },",
          "109:  });",
          "111:  socket.on('connect', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:   query: {",
          "110:    _csrf: csrf_token,",
          "111:   },",
          "",
          "---------------"
        ],
        "test/socket.io.js||test/socket.io.js": [
          "File: test/socket.io.js -> test/socket.io.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:    }, (err, res) => {",
          "75:     assert.ifError(err);",
          "78:      io = _io;",
          "79:      assert.ifError(err);",
          "",
          "[Removed Lines]",
          "77:     helpers.connectSocketIO(res, (err, _io) => {",
          "",
          "[Added Lines]",
          "77:     helpers.connectSocketIO(res, body.csrf_token, (err, _io) => {",
          "",
          "---------------"
        ]
      }
    }
  ]
}