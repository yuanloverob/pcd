{
  "cve_id": "CVE-2023-26144",
  "cve_desc": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
  "repo": "graphql/graphql-js",
  "patch_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
  "patch_info": {
    "commit_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
    "repo": "graphql/graphql-js",
    "commit_url": "https://github.com/graphql/graphql-js/commit/f94b511386c7e47bd0380dcd56553dc063320226",
    "files": [
      "benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ],
    "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3958)\n\nCo-authored-by: AaronMoat <AaronMoat@users.noreply.github.com>\nCo-authored-by: Ivan Goncharov <ivan.goncharov.ua@gmail.com>\nResolves https://github.com/graphql/graphql-js/issues/3955 (at least",
    "before_after_code_files": [
      "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ]
  },
  "patch_diff": {
    "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
      "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { graphqlSync } from 'graphql/graphql.js';",
      "2: import { buildSchema } from 'graphql/utilities/buildASTSchema.js';",
      "4: const schema = buildSchema('type Query { hello: String! }');",
      "5: const source = `{ ${'hello '.repeat(250)}}`;",
      "7: export const benchmark = {",
      "8:   name: 'Many repeated fields',",
      "9:   count: 5,",
      "10:   measure() {",
      "11:     graphqlSync({ schema, source });",
      "12:   },",
      "13: };",
      "",
      "---------------"
    ],
    "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts": [
      "File: src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts -> src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "179:     ]);",
      "180:   });",
      "182:   it('mix of stream and no stream', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:   it('different stream directive extra argument', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "185:         name @stream(label: \"streamLabel\", initialCount: 1)",
      "186:         name @stream(label: \"streamLabel\", initialCount: 1, extraArg: true)",
      "187:       }",
      "188:     `).toDeepEqual([",
      "189:       {",
      "190:         message:",
      "191:           'Fields \"name\" conflict because they have differing stream directives. Use different aliases on the fields to fetch both if this was intentional.',",
      "192:         locations: [",
      "193:           { line: 3, column: 9 },",
      "194:           { line: 4, column: 9 },",
      "195:         ],",
      "196:       },",
      "197:     ]);",
      "198:   });",
      "",
      "---------------"
    ],
    "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
      "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   DirectiveNode,",
      "8:   FieldNode,",
      "9:   FragmentDefinitionNode,",
      "11:   SelectionSetNode,",
      "12: } from '../../language/ast.js';",
      "13: import { Kind } from '../../language/kinds.js';",
      "14: import { print } from '../../language/printer.js';",
      "",
      "[Removed Lines]",
      "10:   ObjectValueNode,",
      "",
      "[Added Lines]",
      "11:   ValueNode,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "592:     }",
      "596:       return [",
      "597:         [responseName, 'they have differing arguments'],",
      "598:         [node1],",
      "",
      "[Removed Lines]",
      "595:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
      "",
      "[Added Lines]",
      "595:     if (!sameArguments(node1, node2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "649:   }",
      "650: }",
      "665: }",
      "667: function getStreamDirective(",
      "",
      "[Removed Lines]",
      "652: function stringifyArguments(fieldNode: FieldNode | DirectiveNode): string {",
      "654:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
      "656:   const inputObjectWithArgs: ObjectValueNode = {",
      "657:     kind: Kind.OBJECT,",
      "658:     fields: args.map((argNode) => ({",
      "659:       kind: Kind.OBJECT_FIELD,",
      "660:       name: argNode.name,",
      "661:       value: argNode.value,",
      "662:     })),",
      "663:   };",
      "664:   return print(sortValueNode(inputObjectWithArgs));",
      "",
      "[Added Lines]",
      "652: function sameArguments(",
      "653:   node1: FieldNode | DirectiveNode,",
      "654:   node2: FieldNode | DirectiveNode,",
      "655: ): boolean {",
      "656:   const args1 = node1.arguments;",
      "657:   const args2 = node2.arguments;",
      "659:   if (args1 === undefined || args1.length === 0) {",
      "660:     return args2 === undefined || args2.length === 0;",
      "661:   }",
      "662:   if (args2 === undefined || args2.length === 0) {",
      "663:     return false;",
      "664:   }",
      "666:   if (args1.length !== args2.length) {",
      "667:     return false;",
      "668:   }",
      "670:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
      "671:   return args1.every((arg1) => {",
      "672:     const value1 = arg1.value;",
      "673:     const value2 = values2.get(arg1.name.value);",
      "674:     if (value2 === undefined) {",
      "675:       return false;",
      "676:     }",
      "678:     return stringifyValue(value1) === stringifyValue(value2);",
      "679:   });",
      "680: }",
      "682: function stringifyValue(value: ValueNode): string | null {",
      "683:   return print(sortValueNode(value));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "681:     return true;",
      "682:   } else if (stream1 && stream2) {",
      "685:   }",
      "687:   return false;",
      "",
      "[Removed Lines]",
      "684:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
      "",
      "[Added Lines]",
      "703:     return sameArguments(stream1, stream2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0732a87c1f839b563ef195205e042c2ade388191",
      "candidate_info": {
        "commit_hash": "0732a87c1f839b563ef195205e042c2ade388191",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/0732a87c1f839b563ef195205e042c2ade388191",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/stream-test.ts"
        ],
        "message": "refactor(incremental): enqueue only released records",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import type {",
          "5:   DeferredFragmentRecord,",
          "6:   DeferredGroupedFieldSetRecord,",
          "8:   IncrementalDataRecord,",
          "9:   IncrementalDataRecordResult,",
          "10:   ReconcilableDeferredGroupedFieldSetResult,",
          "11:   StreamRecord,",
          "12:   SubsequentResultRecord,",
          "13: } from './types.js';",
          "",
          "[Removed Lines]",
          "7:   DeferredGroupedFieldSetResult,",
          "",
          "[Added Lines]",
          "10:   StreamItemsRecord,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: interface DeferredFragmentNode {",
          "17:   deferredFragmentRecord: DeferredFragmentRecord;",
          "18:   deferredGroupedFieldSetRecords: Set<DeferredGroupedFieldSetRecord>;",
          "20:   reconcilableResults: Set<ReconcilableDeferredGroupedFieldSetResult>;",
          "21:   children: Array<DeferredFragmentNode>;",
          "22: }",
          "",
          "[Removed Lines]",
          "19:   results: Array<DeferredGroupedFieldSetResult>;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:   >;",
          "48:   private _newPending: Set<SubsequentResultNode>;",
          "49:   private _completedQueue: Array<IncrementalDataRecordResult>;",
          "50:   private _nextQueue: Array<",
          "51:     (iterable: IteratorResult<Iterable<IncrementalDataRecordResult>>) => void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   private _newIncrementalDataRecords: Set<IncrementalDataRecord>;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "54:   constructor() {",
          "55:     this._pending = new Set();",
          "56:     this._deferredFragmentNodes = new Map();",
          "57:     this._newPending = new Set();",
          "58:     this._completedQueue = [];",
          "59:     this._nextQueue = [];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:     this._newIncrementalDataRecords = new Set();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "64:   ): void {",
          "65:     for (const incrementalDataRecord of incrementalDataRecords) {",
          "66:       if (isDeferredGroupedFieldSetRecord(incrementalDataRecord)) {",
          "100:       } else {",
          "102:       }",
          "103:     }",
          "104:   }",
          "",
          "[Removed Lines]",
          "67:         for (const deferredFragmentRecord of incrementalDataRecord.deferredFragmentRecords) {",
          "68:           const deferredFragmentNode = this._addDeferredFragmentNode(",
          "69:             deferredFragmentRecord,",
          "70:           );",
          "71:           deferredFragmentNode.deferredGroupedFieldSetRecords.add(",
          "72:             incrementalDataRecord,",
          "73:           );",
          "74:         }",
          "76:         const result = incrementalDataRecord.result;",
          "77:         if (isPromise(result)) {",
          "79:           result.then((resolved) => {",
          "80:             this._enqueueCompletedDeferredGroupedFieldSet(resolved);",
          "81:           });",
          "82:         } else {",
          "83:           this._enqueueCompletedDeferredGroupedFieldSet(result);",
          "84:         }",
          "86:         continue;",
          "87:       }",
          "89:       const streamRecord = incrementalDataRecord.streamRecord;",
          "90:       if (streamRecord.id === undefined) {",
          "91:         this._newPending.add(streamRecord);",
          "92:       }",
          "94:       const result = incrementalDataRecord.result;",
          "95:       if (isPromise(result)) {",
          "97:         result.then((resolved) => {",
          "98:           this._enqueue(resolved);",
          "99:         });",
          "101:         this._enqueue(result);",
          "",
          "[Added Lines]",
          "68:         this._addDeferredGroupedFieldSetRecord(incrementalDataRecord);",
          "70:         this._addStreamItemsRecord(incrementalDataRecord);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "127:         this._pending.add(node);",
          "128:         newPending.push(node);",
          "129:       } else if (node.deferredGroupedFieldSetRecords.size > 0) {",
          "130:         this._pending.add(node);",
          "131:         newPending.push(node.deferredFragmentRecord);",
          "132:       } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:         for (const deferredGroupedFieldSetNode of node.deferredGroupedFieldSetRecords) {",
          "100:           this._newIncrementalDataRecords.add(deferredGroupedFieldSetNode);",
          "101:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "136:       }",
          "137:     }",
          "138:     this._newPending.clear();",
          "139:     return newPending;",
          "140:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:     for (const incrementalDataRecord of this._newIncrementalDataRecords) {",
          "113:       const result = incrementalDataRecord.result;",
          "114:       if (isPromise(result)) {",
          "116:         result.then((resolved) => this._enqueue(resolved));",
          "117:       } else {",
          "118:         this._enqueue(result);",
          "119:       }",
          "120:     }",
          "121:     this._newIncrementalDataRecords.clear();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "210:     this._removePending(deferredFragmentNode);",
          "211:     for (const child of deferredFragmentNode.children) {",
          "212:       this._newPending.add(child);",
          "216:     }",
          "217:     return reconcilableResults;",
          "218:   }",
          "",
          "[Removed Lines]",
          "213:       for (const result of child.results) {",
          "214:         this._enqueue(result);",
          "215:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "251:     }",
          "252:   }",
          "254:   private _addDeferredFragmentNode(",
          "255:     deferredFragmentRecord: DeferredFragmentRecord,",
          "256:   ): DeferredFragmentNode {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:   private _addDeferredGroupedFieldSetRecord(",
          "236:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "237:   ): void {",
          "238:     for (const deferredFragmentRecord of deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "239:       const deferredFragmentNode = this._addDeferredFragmentNode(",
          "240:         deferredFragmentRecord,",
          "241:       );",
          "242:       if (this._pending.has(deferredFragmentNode)) {",
          "243:         this._newIncrementalDataRecords.add(deferredGroupedFieldSetRecord);",
          "244:       }",
          "245:       deferredFragmentNode.deferredGroupedFieldSetRecords.add(",
          "246:         deferredGroupedFieldSetRecord,",
          "247:       );",
          "248:     }",
          "249:   }",
          "251:   private _addStreamItemsRecord(streamItemsRecord: StreamItemsRecord): void {",
          "252:     const streamRecord = streamItemsRecord.streamRecord;",
          "253:     if (!this._pending.has(streamRecord)) {",
          "254:       this._newPending.add(streamRecord);",
          "255:     }",
          "256:     this._newIncrementalDataRecords.add(streamItemsRecord);",
          "257:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "263:     deferredFragmentNode = {",
          "264:       deferredFragmentRecord,",
          "265:       deferredGroupedFieldSetRecords: new Set(),",
          "267:       reconcilableResults: new Set(),",
          "268:       children: [],",
          "269:     };",
          "",
          "[Removed Lines]",
          "266:       results: [],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "281:     return deferredFragmentNode;",
          "282:   }",
          "308:   private *_yieldCurrentCompletedIncrementalData(",
          "309:     first: IncrementalDataRecordResult,",
          "310:   ): Generator<IncrementalDataRecordResult> {",
          "",
          "[Removed Lines]",
          "284:   private _enqueueCompletedDeferredGroupedFieldSet(",
          "285:     result: DeferredGroupedFieldSetResult,",
          "286:   ): void {",
          "287:     let isPending = false;",
          "288:     for (const deferredFragmentRecord of result.deferredGroupedFieldSetRecord",
          "289:       .deferredFragmentRecords) {",
          "290:       const deferredFragmentNode = this._deferredFragmentNodes.get(",
          "291:         deferredFragmentRecord,",
          "292:       );",
          "295:       if (deferredFragmentNode === undefined) {",
          "296:         continue;",
          "297:       }",
          "298:       if (this._pending.has(deferredFragmentNode)) {",
          "299:         isPending = true;",
          "300:       }",
          "301:       deferredFragmentNode.results.push(result);",
          "302:     }",
          "303:     if (isPending) {",
          "304:       this._enqueue(result);",
          "305:     }",
          "306:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts": [
          "File: src/execution/__tests__/defer-test.ts -> src/execution/__tests__/defer-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:             },",
          "368:             id: '0',",
          "369:           },",
          "370:           {",
          "371:             data: {",
          "372:               friends: [{ name: 'Han' }, { name: 'Leia' }, { name: 'C-3PO' }],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:         ],",
          "371:         completed: [{ id: '0' }],",
          "372:         hasNext: true,",
          "373:       },",
          "374:       {",
          "375:         incremental: [",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "374:             id: '1',",
          "375:           },",
          "376:         ],",
          "378:         hasNext: false,",
          "379:       },",
          "380:     ]);",
          "",
          "[Removed Lines]",
          "377:         completed: [{ id: '0' }, { id: '1' }],",
          "",
          "[Added Lines]",
          "383:         completed: [{ id: '1' }],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "977:         hasNext: true,",
          "978:       },",
          "979:       {",
          "984:         incremental: [",
          "985:           {",
          "986:             data: { bar: 'bar' },",
          "987:             id: '0',",
          "988:             subPath: ['nestedObject', 'deeperObject'],",
          "989:           },",
          "990:           {",
          "991:             data: { baz: 'baz' },",
          "992:             id: '1',",
          "993:             subPath: ['deeperObject'],",
          "994:           },",
          "995:           {",
          "996:             data: { bak: 'bak' },",
          "997:             id: '2',",
          "998:           },",
          "999:         ],",
          "1001:         hasNext: false,",
          "1002:       },",
          "1003:     ]);",
          "",
          "[Removed Lines]",
          "980:         pending: [",
          "981:           { id: '1', path: ['hero', 'nestedObject'] },",
          "982:           { id: '2', path: ['hero', 'nestedObject', 'deeperObject'] },",
          "983:         ],",
          "1000:         completed: [{ id: '0' }, { id: '1' }, { id: '2' }],",
          "",
          "[Added Lines]",
          "986:         pending: [{ id: '1', path: ['hero', 'nestedObject'] }],",
          "993:         ],",
          "994:         completed: [{ id: '0' }],",
          "995:         hasNext: true,",
          "996:       },",
          "997:       {",
          "998:         pending: [{ id: '2', path: ['hero', 'nestedObject', 'deeperObject'] }],",
          "999:         incremental: [",
          "1005:         ],",
          "1006:         completed: [{ id: '1' }],",
          "1007:         hasNext: true,",
          "1008:       },",
          "1009:       {",
          "1010:         incremental: [",
          "1016:         completed: [{ id: '2' }],",
          "",
          "---------------"
        ],
        "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts": [
          "File: src/execution/__tests__/stream-test.ts -> src/execution/__tests__/stream-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1444:       },",
          "1445:       {",
          "1446:         incremental: [",
          "1447:           {",
          "1448:             data: { scalarField: null },",
          "1449:             id: '0',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1447:           {",
          "1448:             items: [{ name: 'Luke' }],",
          "1449:             id: '1',",
          "1450:           },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1455:               },",
          "1456:             ],",
          "1457:           },",
          "1462:         ],",
          "1463:         completed: [{ id: '0' }],",
          "1464:         hasNext: true,",
          "",
          "[Removed Lines]",
          "1458:           {",
          "1459:             items: [{ name: 'Luke' }],",
          "1460:             id: '1',",
          "1461:           },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1946:       value: {",
          "1947:         pending: [{ id: '2', path: ['friendList', 1], label: 'DeferName' }],",
          "1948:         incremental: [",
          "1953:           {",
          "1954:             items: [{ id: '2' }],",
          "1955:             id: '1',",
          "1956:           },",
          "1957:         ],",
          "1958:         completed: [{ id: '0' }],",
          "1959:         hasNext: true,",
          "",
          "[Removed Lines]",
          "1949:           {",
          "1950:             data: { name: 'Luke' },",
          "1951:             id: '0',",
          "1952:           },",
          "",
          "[Added Lines]",
          "1953:           {",
          "1954:             data: { name: 'Luke' },",
          "1955:             id: '0',",
          "1956:           },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2047:       value: {",
          "2048:         pending: [{ id: '2', path: ['friendList', 1], label: 'DeferName' }],",
          "2049:         incremental: [",
          "2054:           {",
          "2055:             items: [{ id: '2' }],",
          "2056:             id: '1',",
          "2057:           },",
          "2058:         ],",
          "2059:         completed: [{ id: '0' }],",
          "2060:         hasNext: true,",
          "",
          "[Removed Lines]",
          "2050:           {",
          "2051:             data: { name: 'Luke' },",
          "2052:             id: '0',",
          "2053:           },",
          "",
          "[Added Lines]",
          "2054:           {",
          "2055:             data: { name: 'Luke' },",
          "2056:             id: '0',",
          "2057:           },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bbbb0874e5f667efed19cfff71c648402c439b1",
      "candidate_info": {
        "commit_hash": "3bbbb0874e5f667efed19cfff71c648402c439b1",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/3bbbb0874e5f667efed19cfff71c648402c439b1",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts",
          "src/execution/execute.ts",
          "src/execution/types.ts"
        ],
        "message": "refactor(IncrementalGraph): use Subsequent Result nodes to reduce mutation",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts",
          "src/execution/execute.ts||src/execution/execute.ts",
          "src/execution/types.ts||src/execution/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   ReconcilableDeferredGroupedFieldSetResult,",
          "10:   SubsequentResultRecord,",
          "11: } from './types.js';",
          "20: export class IncrementalGraph {",
          "23:   private _completedQueue: Array<IncrementalDataRecordResult>;",
          "24:   private _nextQueue: Array<",
          "25:     (iterable: IteratorResult<Iterable<IncrementalDataRecordResult>>) => void",
          "",
          "[Removed Lines]",
          "12: import {",
          "13:   isDeferredFragmentRecord,",
          "14:   isDeferredGroupedFieldSetRecord,",
          "15: } from './types.js';",
          "21:   private _pending: Set<SubsequentResultRecord>;",
          "22:   private _newPending: Set<SubsequentResultRecord>;",
          "",
          "[Added Lines]",
          "12: import { isDeferredGroupedFieldSetRecord } from './types.js';",
          "14: interface DeferredFragmentNode {",
          "15:   deferredFragmentRecord: DeferredFragmentRecord;",
          "16:   expectedReconcilableResults: number;",
          "17:   results: Array<DeferredGroupedFieldSetResult>;",
          "18:   reconcilableResults: Array<ReconcilableDeferredGroupedFieldSetResult>;",
          "19:   children: Array<DeferredFragmentNode>;",
          "20: }",
          "22: function isDeferredFragmentNode(",
          "23:   node: DeferredFragmentNode | undefined,",
          "24: ): node is DeferredFragmentNode {",
          "25:   return node !== undefined;",
          "26: }",
          "28: function isStreamNode(",
          "29:   subsequentResultNode: SubsequentResultNode,",
          "30: ): subsequentResultNode is SubsequentResultRecord {",
          "31:   return 'path' in subsequentResultNode;",
          "32: }",
          "34: type SubsequentResultNode = DeferredFragmentNode | SubsequentResultRecord;",
          "40:   private _pending: Set<SubsequentResultNode>;",
          "41:   private _deferredFragmentNodes: Map<",
          "42:     DeferredFragmentRecord,",
          "43:     DeferredFragmentNode",
          "44:   >;",
          "46:   private _newPending: Set<SubsequentResultNode>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:   constructor() {",
          "29:     this._pending = new Set();",
          "30:     this._newPending = new Set();",
          "31:     this._completedQueue = [];",
          "32:     this._nextQueue = [];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     this._deferredFragmentNodes = new Map();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:     for (const incrementalDataRecord of incrementalDataRecords) {",
          "39:       if (isDeferredGroupedFieldSetRecord(incrementalDataRecord)) {",
          "40:         for (const deferredFragmentRecord of incrementalDataRecord.deferredFragmentRecords) {",
          "44:         }",
          "46:         const result = incrementalDataRecord.result;",
          "",
          "[Removed Lines]",
          "41:           deferredFragmentRecord.expectedReconcilableResults++;",
          "43:           this._addDeferredFragmentRecord(deferredFragmentRecord);",
          "",
          "[Added Lines]",
          "66:           const deferredFragmentNode = this._addDeferredFragmentNode(",
          "67:             deferredFragmentRecord,",
          "68:           );",
          "69:           deferredFragmentNode.expectedReconcilableResults++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "73:     }",
          "74:   }",
          "76:   getNewPending(): ReadonlyArray<SubsequentResultRecord> {",
          "78:     for (const node of this._newPending) {",
          "85:         for (const child of node.children) {",
          "86:           this._newPending.add(child);",
          "87:         }",
          "91:       }",
          "92:     }",
          "93:     this._newPending.clear();",
          "",
          "[Removed Lines]",
          "77:     const newPending = [];",
          "79:       if (isDeferredFragmentRecord(node)) {",
          "80:         if (node.expectedReconcilableResults) {",
          "81:           this._pending.add(node);",
          "82:           newPending.push(node);",
          "83:           continue;",
          "84:         }",
          "88:       } else {",
          "89:         this._pending.add(node);",
          "90:         newPending.push(node);",
          "",
          "[Added Lines]",
          "102:   addCompletedReconcilableDeferredGroupedFieldSet(",
          "103:     reconcilableResult: ReconcilableDeferredGroupedFieldSetResult,",
          "104:   ): void {",
          "105:     const deferredFragmentNodes: Array<DeferredFragmentNode> =",
          "106:       reconcilableResult.deferredFragmentRecords",
          "107:         .map((deferredFragmentRecord) =>",
          "108:           this._deferredFragmentNodes.get(deferredFragmentRecord),",
          "109:         )",
          "110:         .filter<DeferredFragmentNode>(isDeferredFragmentNode);",
          "111:     for (const deferredFragmentNode of deferredFragmentNodes) {",
          "112:       deferredFragmentNode.reconcilableResults.push(reconcilableResult);",
          "113:     }",
          "114:   }",
          "117:     const newPending: Array<SubsequentResultRecord> = [];",
          "119:       if (isStreamNode(node)) {",
          "120:         this._pending.add(node);",
          "121:         newPending.push(node);",
          "122:       } else if (node.expectedReconcilableResults) {",
          "123:         this._pending.add(node);",
          "124:         newPending.push(node.deferredFragmentRecord);",
          "125:       } else {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:   completeDeferredFragment(",
          "135:     deferredFragmentRecord: DeferredFragmentRecord,",
          "136:   ): Array<ReconcilableDeferredGroupedFieldSetResult> | undefined {",
          "138:     if (",
          "140:       reconcilableResults.length",
          "141:     ) {",
          "142:       return;",
          "143:     }",
          "146:       this._newPending.add(child);",
          "147:       for (const result of child.results) {",
          "148:         this._enqueue(result);",
          "",
          "[Removed Lines]",
          "137:     const reconcilableResults = deferredFragmentRecord.reconcilableResults;",
          "139:       deferredFragmentRecord.expectedReconcilableResults !==",
          "144:     this.removeSubsequentResultRecord(deferredFragmentRecord);",
          "145:     for (const child of deferredFragmentRecord.children) {",
          "",
          "[Added Lines]",
          "175:     const deferredFragmentNode = this._deferredFragmentNodes.get(",
          "176:       deferredFragmentRecord,",
          "177:     );",
          "180:     if (deferredFragmentNode === undefined) {",
          "181:       return undefined;",
          "182:     }",
          "183:     const reconcilableResults = deferredFragmentNode.reconcilableResults;",
          "185:       deferredFragmentNode.expectedReconcilableResults !==",
          "190:     this._removePending(deferredFragmentNode);",
          "191:     for (const child of deferredFragmentNode.children) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "151:     return reconcilableResults;",
          "152:   }",
          "158:     if (this._pending.size === 0) {",
          "159:       for (const resolve of this._nextQueue) {",
          "160:         resolve({ value: undefined, done: true });",
          "",
          "[Removed Lines]",
          "154:   removeSubsequentResultRecord(",
          "155:     subsequentResultRecord: SubsequentResultRecord,",
          "156:   ): void {",
          "157:     this._pending.delete(subsequentResultRecord);",
          "",
          "[Added Lines]",
          "200:   removeDeferredFragment(deferredFragmentRecord: DeferredFragmentRecord): void {",
          "201:     const deferredFragmentNode = this._deferredFragmentNodes.get(",
          "202:       deferredFragmentRecord,",
          "203:     );",
          "206:     if (deferredFragmentNode === undefined) {",
          "207:       return;",
          "208:     }",
          "209:     this._removePending(deferredFragmentNode);",
          "210:     this._deferredFragmentNodes.delete(deferredFragmentRecord);",
          "213:     for (const child of deferredFragmentNode.children) {",
          "214:       this.removeDeferredFragment(child.deferredFragmentRecord);",
          "215:     }",
          "216:   }",
          "218:   removeStream(streamRecord: SubsequentResultRecord): void {",
          "219:     this._removePending(streamRecord);",
          "220:   }",
          "222:   private _removePending(subsequentResultNode: SubsequentResultNode): void {",
          "223:     this._pending.delete(subsequentResultNode);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:     }",
          "163:   }",
          "166:     deferredFragmentRecord: DeferredFragmentRecord,",
          "168:     const parent = deferredFragmentRecord.parent;",
          "169:     if (parent === undefined) {",
          "179:     }",
          "188:   }",
          "190:   private _enqueueCompletedDeferredGroupedFieldSet(",
          "191:     result: DeferredGroupedFieldSetResult,",
          "192:   ): void {",
          "194:     for (const deferredFragmentRecord of result.deferredFragmentRecords) {",
          "197:       }",
          "199:     }",
          "201:       this._enqueue(result);",
          "202:     }",
          "203:   }",
          "",
          "[Removed Lines]",
          "165:   private _addDeferredFragmentRecord(",
          "167:   ): void {",
          "173:       if (deferredFragmentRecord.id !== undefined) {",
          "174:         return;",
          "175:       }",
          "177:       this._newPending.add(deferredFragmentRecord);",
          "178:       return;",
          "181:     if (parent.children.has(deferredFragmentRecord)) {",
          "182:       return;",
          "183:     }",
          "185:     parent.children.add(deferredFragmentRecord);",
          "187:     this._addDeferredFragmentRecord(parent);",
          "193:     let hasPendingParent = false;",
          "195:       if (deferredFragmentRecord.id !== undefined) {",
          "196:         hasPendingParent = true;",
          "198:       deferredFragmentRecord.results.push(result);",
          "200:     if (hasPendingParent) {",
          "",
          "[Added Lines]",
          "231:   private _addDeferredFragmentNode(",
          "233:   ): DeferredFragmentNode {",
          "234:     let deferredFragmentNode = this._deferredFragmentNodes.get(",
          "235:       deferredFragmentRecord,",
          "236:     );",
          "237:     if (deferredFragmentNode !== undefined) {",
          "238:       return deferredFragmentNode;",
          "239:     }",
          "240:     deferredFragmentNode = {",
          "241:       deferredFragmentRecord,",
          "242:       expectedReconcilableResults: 0,",
          "243:       results: [],",
          "244:       reconcilableResults: [],",
          "245:       children: [],",
          "246:     };",
          "247:     this._deferredFragmentNodes.set(",
          "248:       deferredFragmentRecord,",
          "249:       deferredFragmentNode,",
          "250:     );",
          "253:       this._newPending.add(deferredFragmentNode);",
          "254:       return deferredFragmentNode;",
          "256:     const parentNode = this._addDeferredFragmentNode(parent);",
          "257:     parentNode.children.push(deferredFragmentNode);",
          "258:     return deferredFragmentNode;",
          "264:     let isPending = false;",
          "266:       const deferredFragmentNode = this._deferredFragmentNodes.get(",
          "267:         deferredFragmentRecord,",
          "268:       );",
          "271:       if (deferredFragmentNode === undefined) {",
          "272:         continue;",
          "273:       }",
          "274:       if (this._pending.has(deferredFragmentNode)) {",
          "275:         isPending = true;",
          "277:       deferredFragmentNode.results.push(result);",
          "279:     if (isPending) {",
          "",
          "---------------"
        ],
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:             id,",
          "238:             errors: deferredGroupedFieldSetResult.errors,",
          "239:           });",
          "243:         }",
          "244:       }",
          "245:       return;",
          "246:     }",
          "253:     const incrementalDataRecords =",
          "254:       deferredGroupedFieldSetResult.incrementalDataRecords;",
          "",
          "[Removed Lines]",
          "240:           this._incrementalGraph.removeSubsequentResultRecord(",
          "241:             deferredFragmentRecord,",
          "242:           );",
          "247:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult.deferredFragmentRecords) {",
          "248:       deferredFragmentRecord.reconcilableResults.push(",
          "249:         deferredGroupedFieldSetResult,",
          "250:       );",
          "251:     }",
          "",
          "[Added Lines]",
          "240:           this._incrementalGraph.removeDeferredFragment(deferredFragmentRecord);",
          "246:     this._incrementalGraph.addCompletedReconcilableDeferredGroupedFieldSet(",
          "247:       deferredGroupedFieldSetResult,",
          "248:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:         id,",
          "307:         errors: streamItemsResult.errors,",
          "308:       });",
          "310:       if (isCancellableStreamRecord(streamRecord)) {",
          "311:         invariant(this._context.cancellableStreams !== undefined);",
          "312:         this._context.cancellableStreams.delete(streamRecord);",
          "",
          "[Removed Lines]",
          "309:       this._incrementalGraph.removeSubsequentResultRecord(streamRecord);",
          "",
          "[Added Lines]",
          "306:       this._incrementalGraph.removeStream(streamRecord);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "317:       }",
          "318:     } else if (streamItemsResult.result === undefined) {",
          "319:       context.completed.push({ id });",
          "321:       if (isCancellableStreamRecord(streamRecord)) {",
          "322:         invariant(this._context.cancellableStreams !== undefined);",
          "323:         this._context.cancellableStreams.delete(streamRecord);",
          "",
          "[Removed Lines]",
          "320:       this._incrementalGraph.removeSubsequentResultRecord(streamRecord);",
          "",
          "[Added Lines]",
          "317:       this._incrementalGraph.removeStream(streamRecord);",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: import { mapAsyncIterable } from './mapAsyncIterable.js';",
          "63: import type {",
          "64:   CancellableStreamRecord,",
          "65:   DeferredGroupedFieldSetRecord,",
          "66:   DeferredGroupedFieldSetResult,",
          "67:   ExecutionResult,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:   DeferredFragmentRecord,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   StreamItemsResult,",
          "72:   SubsequentResultRecord,",
          "73: } from './types.js';",
          "78: import {",
          "79:   getArgumentValues,",
          "80:   getDirectiveValues,",
          "",
          "[Removed Lines]",
          "74: import {",
          "75:   DeferredFragmentRecord,",
          "76:   isReconcilableStreamItemsResult,",
          "77: } from './types.js';",
          "",
          "[Added Lines]",
          "75: import { isReconcilableStreamItemsResult } from './types.js';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1674:         : deferredFragmentRecordFromDeferUsage(parentDeferUsage, newDeferMap);",
          "1678:       path,",
          "1679:       label: newDeferUsage.label,",
          "1680:       parent,",
          "1684:     newDeferMap.set(newDeferUsage, deferredFragmentRecord);",
          "",
          "[Removed Lines]",
          "1677:     const deferredFragmentRecord = new DeferredFragmentRecord({",
          "1681:     });",
          "",
          "[Added Lines]",
          "1675:     const deferredFragmentRecord: DeferredFragmentRecord = {",
          "1679:     };",
          "",
          "---------------"
        ],
        "src/execution/types.ts||src/execution/types.ts": [
          "File: src/execution/types.ts -> src/execution/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:   errors?: ReadonlyArray<GraphQLError>;",
          "167: }",
          "175: export function isDeferredGroupedFieldSetRecord(",
          "176:   incrementalDataRecord: IncrementalDataRecord,",
          "177: ): incrementalDataRecord is DeferredGroupedFieldSetRecord {",
          "",
          "[Removed Lines]",
          "169: export function isDeferredFragmentRecord(",
          "170:   subsequentResultRecord: SubsequentResultRecord,",
          "171: ): subsequentResultRecord is DeferredFragmentRecord {",
          "172:   return 'parent' in subsequentResultRecord;",
          "173: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:   id?: string | undefined;",
          "222: }",
          "226:   path: Path | undefined;",
          "227:   label: string | undefined;",
          "228:   id?: string | undefined;",
          "229:   parent: DeferredFragmentRecord | undefined;",
          "248: }",
          "250: export interface CancellableStreamRecord extends SubsequentResultRecord {",
          "",
          "[Removed Lines]",
          "225: export class DeferredFragmentRecord implements SubsequentResultRecord {",
          "230:   expectedReconcilableResults: number;",
          "231:   results: Array<DeferredGroupedFieldSetResult>;",
          "232:   reconcilableResults: Array<ReconcilableDeferredGroupedFieldSetResult>;",
          "233:   children: Set<DeferredFragmentRecord>;",
          "235:   constructor(opts: {",
          "236:     path: Path | undefined;",
          "237:     label: string | undefined;",
          "238:     parent: DeferredFragmentRecord | undefined;",
          "239:   }) {",
          "240:     this.path = opts.path;",
          "241:     this.label = opts.label;",
          "242:     this.parent = opts.parent;",
          "243:     this.expectedReconcilableResults = 0;",
          "244:     this.results = [];",
          "245:     this.reconcilableResults = [];",
          "246:     this.children = new Set();",
          "247:   }",
          "",
          "[Added Lines]",
          "218: export interface DeferredFragmentRecord extends SubsequentResultRecord {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62d347d7f3b8c10a8b83a906abc81e67543df9bb",
      "candidate_info": {
        "commit_hash": "62d347d7f3b8c10a8b83a906abc81e67543df9bb",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/62d347d7f3b8c10a8b83a906abc81e67543df9bb",
        "files": [
          "src/execution/__tests__/stream-test.ts"
        ],
        "message": "incremental(stream): revert test logic (#4101)\n\nTest logic was inadvertently altered in #4026.\n\nTests still pass, just fixing logic.",
        "before_after_code_files": [
          "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts": [
          "File: src/execution/__tests__/stream-test.ts -> src/execution/__tests__/stream-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1939:       hasNext: true,",
          "1940:     });",
          "1943:     expectJSON(result2).toDeepEqual({",
          "1944:       value: {",
          "1945:         pending: [{ id: '2', path: ['friendList', 1], label: 'DeferName' }],",
          "",
          "[Removed Lines]",
          "1942:     const result2 = await iterator.next();",
          "",
          "[Added Lines]",
          "1942:     const result2Promise = iterator.next();",
          "1943:     resolveIterableCompletion(null);",
          "1944:     const result2 = await result2Promise;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1960:     });",
          "1962:     const result3Promise = iterator.next();",
          "1964:     const result3 = await result3Promise;",
          "1965:     expectJSON(result3).toDeepEqual({",
          "1966:       value: {",
          "",
          "[Removed Lines]",
          "1963:     resolveIterableCompletion(null);",
          "",
          "[Added Lines]",
          "1965:     resolveSlowField('Han');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1969:       },",
          "1970:       done: false,",
          "1971:     });",
          "1975:     expectJSON(result4).toDeepEqual({",
          "1976:       value: {",
          "1977:         incremental: [",
          "",
          "[Removed Lines]",
          "1972:     const result4Promise = iterator.next();",
          "1973:     resolveSlowField('Han');",
          "1974:     const result4 = await result4Promise;",
          "",
          "[Added Lines]",
          "1974:     const result4 = await iterator.next();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2062:       done: false,",
          "2063:     });",
          "2068:     expectJSON(result3).toDeepEqual({",
          "2078:       value: {",
          "2079:         incremental: [",
          "2080:           {",
          "",
          "[Removed Lines]",
          "2065:     const result3Promise = iterator.next();",
          "2066:     resolveIterableCompletion(null);",
          "2067:     const result3 = await result3Promise;",
          "2069:       value: {",
          "2070:         completed: [{ id: '1' }],",
          "2071:         hasNext: true,",
          "2072:       },",
          "2073:       done: false,",
          "2074:     });",
          "2076:     const result4 = await iterator.next();",
          "2077:     expectJSON(result4).toDeepEqual({",
          "",
          "[Added Lines]",
          "2065:     const result3 = await iterator.next();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2083:           },",
          "2084:         ],",
          "2085:         completed: [{ id: '2' }],",
          "2086:         hasNext: false,",
          "2087:       },",
          "2088:       done: false,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2075:         hasNext: true,",
          "2076:       },",
          "2077:       done: false,",
          "2078:     });",
          "2080:     const result4Promise = iterator.next();",
          "2081:     resolveIterableCompletion(null);",
          "2082:     const result4 = await result4Promise;",
          "2083:     expectJSON(result4).toDeepEqual({",
          "2084:       value: {",
          "2085:         completed: [{ id: '1' }],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1aeb9283da59784cb53352919ffb50333cc407f",
      "candidate_info": {
        "commit_hash": "c1aeb9283da59784cb53352919ffb50333cc407f",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/c1aeb9283da59784cb53352919ffb50333cc407f",
        "files": [
          "package-lock.json",
          "package.json",
          "src/version.ts"
        ],
        "message": "17.0.0-alpha.4",
        "before_after_code_files": [
          "src/version.ts||src/version.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.ts||src/version.ts": [
          "File: src/version.ts -> src/version.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "7: export const version = '17.0.0-alpha.3' as string;",
          "",
          "[Added Lines]",
          "7: export const version = '17.0.0-alpha.4' as string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:   major: 17 as number,",
          "14:   minor: 0 as number,",
          "15:   patch: 0 as number,",
          "17: });",
          "",
          "[Removed Lines]",
          "16:   preReleaseTag: 'alpha.3' as string | null,",
          "",
          "[Added Lines]",
          "16:   preReleaseTag: 'alpha.4' as string | null,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eceeb4ca5076740ab90c9d08925071fd6e69aa0a",
      "candidate_info": {
        "commit_hash": "eceeb4ca5076740ab90c9d08925071fd6e69aa0a",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/eceeb4ca5076740ab90c9d08925071fd6e69aa0a",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/execute.ts",
          "src/execution/types.ts"
        ],
        "message": "refactor(incremental): introduce StreamRecord type",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/execute.ts||src/execution/execute.ts",
          "src/execution/types.ts||src/execution/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   IncrementalDataRecord,",
          "8:   IncrementalDataRecordResult,",
          "9:   ReconcilableDeferredGroupedFieldSetResult,",
          "10:   SubsequentResultRecord,",
          "11: } from './types.js';",
          "12: import { isDeferredGroupedFieldSetRecord } from './types.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:   StreamRecord,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: function isStreamNode(",
          "29:   subsequentResultNode: SubsequentResultNode,",
          "31:   return 'path' in subsequentResultNode;",
          "32: }",
          "",
          "[Removed Lines]",
          "30: ): subsequentResultNode is SubsequentResultRecord {",
          "34: type SubsequentResultNode = DeferredFragmentNode | SubsequentResultRecord;",
          "",
          "[Added Lines]",
          "31: ): subsequentResultNode is StreamRecord {",
          "35: type SubsequentResultNode = DeferredFragmentNode | StreamRecord;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:     }",
          "216:   }",
          "219:     this._removePending(streamRecord);",
          "220:   }",
          "",
          "[Removed Lines]",
          "218:   removeStream(streamRecord: SubsequentResultRecord): void {",
          "",
          "[Added Lines]",
          "219:   removeStream(streamRecord: StreamRecord): void {",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   IncrementalDataRecord,",
          "71:   StreamItemsRecord,",
          "72:   StreamItemsResult,",
          "74: } from './types.js';",
          "75: import { isReconcilableStreamItemsResult } from './types.js';",
          "76: import {",
          "",
          "[Removed Lines]",
          "73:   SubsequentResultRecord,",
          "",
          "[Added Lines]",
          "73:   StreamRecord,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1094:   while (true) {",
          "1095:     if (streamUsage && index >= streamUsage.initialCount) {",
          "1096:       const returnFn = asyncIterator.return;",
          "1098:       if (returnFn === undefined) {",
          "1099:         streamRecord = {",
          "1100:           label: streamUsage.label,",
          "1101:           path,",
          "1103:       } else {",
          "1104:         streamRecord = {",
          "1105:           label: streamUsage.label,",
          "",
          "[Removed Lines]",
          "1097:       let streamRecord: SubsequentResultRecord | CancellableStreamRecord;",
          "1102:         } as SubsequentResultRecord;",
          "",
          "[Added Lines]",
          "1097:       let streamRecord: StreamRecord | CancellableStreamRecord;",
          "1102:         } as StreamRecord;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1266:     const item = iteration.value;",
          "1268:     if (streamUsage && index >= streamUsage.initialCount) {",
          "1270:         label: streamUsage.label,",
          "1271:         path,",
          "1272:       };",
          "",
          "[Removed Lines]",
          "1269:       const streamRecord: SubsequentResultRecord = {",
          "",
          "[Added Lines]",
          "1269:       const streamRecord: StreamRecord = {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2212: }",
          "2214: function firstSyncStreamItems(",
          "2216:   initialItem: PromiseOrValue<unknown>,",
          "2217:   initialIndex: number,",
          "2218:   iterator: Iterator<unknown>,",
          "",
          "[Removed Lines]",
          "2215:   streamRecord: SubsequentResultRecord,",
          "",
          "[Added Lines]",
          "2215:   streamRecord: StreamRecord,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2315: }",
          "2317: function firstAsyncStreamItems(",
          "2319:   path: Path,",
          "2320:   initialIndex: number,",
          "2321:   asyncIterator: AsyncIterator<unknown>,",
          "",
          "[Removed Lines]",
          "2318:   streamRecord: SubsequentResultRecord,",
          "",
          "[Added Lines]",
          "2318:   streamRecord: StreamRecord,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2341: }",
          "2343: async function getNextAsyncStreamItemsResult(",
          "2345:   path: Path,",
          "2346:   index: number,",
          "2347:   asyncIterator: AsyncIterator<unknown>,",
          "",
          "[Removed Lines]",
          "2344:   streamRecord: SubsequentResultRecord,",
          "",
          "[Added Lines]",
          "2344:   streamRecord: StreamRecord,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2395: }",
          "2397: function completeStreamItems(",
          "2399:   itemPath: Path,",
          "2400:   item: unknown,",
          "2401:   exeContext: ExecutionContext,",
          "",
          "[Removed Lines]",
          "2398:   streamRecord: SubsequentResultRecord,",
          "",
          "[Added Lines]",
          "2398:   streamRecord: StreamRecord,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2496: function buildStreamItemsResult(",
          "2497:   errors: ReadonlyArray<GraphQLError> | undefined,",
          "2499:   result: GraphQLWrappedResult<unknown>,",
          "2500: ): StreamItemsResult {",
          "2501:   return {",
          "",
          "[Removed Lines]",
          "2498:   streamRecord: SubsequentResultRecord,",
          "",
          "[Added Lines]",
          "2498:   streamRecord: StreamRecord,",
          "",
          "---------------"
        ],
        "src/execution/types.ts||src/execution/types.ts": [
          "File: src/execution/types.ts -> src/execution/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:   result: PromiseOrValue<DeferredGroupedFieldSetResult>;",
          "210: }",
          "213:   path: Path | undefined;",
          "214:   label: string | undefined;",
          "215:   id?: string | undefined;",
          "216: }",
          "220:   label: string | undefined;",
          "221:   id?: string | undefined;",
          "223: }",
          "226:   earlyReturn: () => Promise<unknown>;",
          "227: }",
          "",
          "[Removed Lines]",
          "212: export interface SubsequentResultRecord {",
          "218: export interface DeferredFragmentRecord extends SubsequentResultRecord {",
          "219:   path: Path | undefined;",
          "222:   parent: DeferredFragmentRecord | undefined;",
          "225: export interface CancellableStreamRecord extends SubsequentResultRecord {",
          "",
          "[Added Lines]",
          "212: export type SubsequentResultRecord = DeferredFragmentRecord | StreamRecord;",
          "214: export interface DeferredFragmentRecord {",
          "218:   parent: DeferredFragmentRecord | undefined;",
          "221: export interface StreamRecord {",
          "222:   path: Path;",
          "227: export interface CancellableStreamRecord extends StreamRecord {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233: }",
          "235: interface ReconcilableStreamItemsResult {",
          "237:   result: BareStreamItemsResult;",
          "238:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "239:   errors?: never;",
          "",
          "[Removed Lines]",
          "236:   streamRecord: SubsequentResultRecord;",
          "",
          "[Added Lines]",
          "238:   streamRecord: StreamRecord;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246: }",
          "248: interface TerminatingStreamItemsResult {",
          "250:   result?: never;",
          "251:   incrementalDataRecords?: never;",
          "252:   errors?: never;",
          "253: }",
          "255: interface NonReconcilableStreamItemsResult {",
          "257:   errors: ReadonlyArray<GraphQLError>;",
          "258:   result?: never;",
          "259: }",
          "",
          "[Removed Lines]",
          "249:   streamRecord: SubsequentResultRecord;",
          "256:   streamRecord: SubsequentResultRecord;",
          "",
          "[Added Lines]",
          "251:   streamRecord: StreamRecord;",
          "258:   streamRecord: StreamRecord;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:   | NonReconcilableStreamItemsResult;",
          "266: export interface StreamItemsRecord {",
          "268:   result: PromiseOrValue<StreamItemsResult>;",
          "269: }",
          "",
          "[Removed Lines]",
          "267:   streamRecord: SubsequentResultRecord;",
          "",
          "[Added Lines]",
          "269:   streamRecord: StreamRecord;",
          "",
          "---------------"
        ]
      }
    }
  ]
}