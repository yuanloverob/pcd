{
  "cve_id": "CVE-2016-4567",
  "cve_desc": "Cross-site scripting (XSS) vulnerability in flash/FlashMediaElement.as in MediaElement.js before 2.21.0, as used in WordPress before 4.5.2, allows remote attackers to inject arbitrary web script or HTML via an obfuscated form of the jsinitfunction parameter, as demonstrated by \"jsinitfunctio%gn.\"",
  "repo": "johndyer/mediaelement",
  "patch_hash": "34834eef8ac830b9145df169ec22016a4350f06e",
  "patch_info": {
    "commit_hash": "34834eef8ac830b9145df169ec22016a4350f06e",
    "repo": "johndyer/mediaelement",
    "commit_url": "https://github.com/johndyer/mediaelement/commit/34834eef8ac830b9145df169ec22016a4350f06e",
    "files": [
      "src/flash/FlashMediaElement.as",
      "src/js/me-shim.js"
    ],
    "message": "Simplify allowed Flash querystring parameters",
    "before_after_code_files": [
      "src/flash/FlashMediaElement.as||src/flash/FlashMediaElement.as",
      "src/js/me-shim.js||src/js/me-shim.js"
    ]
  },
  "patch_diff": {
    "src/flash/FlashMediaElement.as||src/flash/FlashMediaElement.as": [
      "File: src/flash/FlashMediaElement.as -> src/flash/FlashMediaElement.as",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:  import htmlelements.HLSMediaElement;",
      "27:  [SWF(backgroundColor=\"0x000000\")] // Set SWF background color",
      "30:  public class FlashMediaElement extends MovieClip {",
      "32:   private var _mediaUrl:String;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101:   public function FlashMediaElement() {",
      "106:    CONFIG::cdnBuild {",
      "",
      "[Removed Lines]",
      "103:    checkFlashVars(loaderInfo.parameters);",
      "",
      "[Added Lines]",
      "101:    if (isIllegalQuerystring()) {",
      "102:     return;",
      "103:    }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "108:     Security.allowInsecureDomain('*');",
      "109:    }",
      "131:    CONFIG::debugBuild {",
      "132:     _debug = (params['debug'] != undefined) ? (String(params['debug']) == \"true\") : false;",
      "",
      "[Removed Lines]",
      "111:    if (securityIssue) {",
      "112:     return;",
      "113:    }",
      "117:    var params:Object, pos:int, query:Object;",
      "119:    params = LoaderInfo(this.root.loaderInfo).parameters;",
      "120:    pos = root.loaderInfo.url.indexOf('?');",
      "121:    if (pos !== -1) {",
      "122:     query = parseStr(root.loaderInfo.url.substr(pos + 1));",
      "124:     for (var key:String in params) {",
      "125:      if (query.hasOwnProperty(trim(key))) {",
      "126:       delete params[key];",
      "127:      }",
      "128:     }",
      "129:    }",
      "",
      "[Added Lines]",
      "111:    var params:Object = LoaderInfo(this.root.loaderInfo).parameters;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "456:    }",
      "457:   }",
      "493:   }",
      "496:   private static function trim(str:String) : String {",
      "497:    if (!str) {",
      "498:     return str;",
      "",
      "[Removed Lines]",
      "461:   private function checkFlashVars(p:Object):void {",
      "462:    var i:Number = 0;",
      "463:    for (var s:String in p) {",
      "464:     if (isIllegalChar(p[s], s === 'file')) {",
      "465:      securityIssue = true; // Illegal char found",
      "466:     }",
      "467:     i++;",
      "468:    }",
      "469:    if (i === 0 || securityIssue) {",
      "470:     directAccess = true;",
      "471:    }",
      "472:   }",
      "474:   private static function parseStr (str:String) : Object {",
      "475:    var hash:Object = {},",
      "476:     arr1:Array, arr2:Array;",
      "478:    str = unescape(str).replace(/\\+/g, \" \");",
      "480:    arr1 = str.split('&');",
      "481:    if (!arr1.length) {",
      "482:     return {};",
      "483:    }",
      "485:    for (var i:uint = 0, length:uint = arr1.length; i < length; i++) {",
      "486:     arr2 = arr1[i].split('=');",
      "487:     if (!arr2.length) {",
      "488:      continue;",
      "489:     }",
      "490:     hash[trim(arr2[0])] = trim(arr2[1]);",
      "491:    }",
      "492:    return hash;",
      "",
      "[Added Lines]",
      "441:   private function isIllegalQuerystring():Boolean {",
      "442:    var query:String = '';",
      "443:    var pos:Number = root.loaderInfo.url.indexOf('?') ;",
      "445:    if ( pos > -1 ) {",
      "446:        query = root.loaderInfo.url.substring( pos );",
      "447:        if ( ! /^\\?\\d+$/.test( query ) ) {",
      "448:            return true;",
      "449:        }",
      "450:    }",
      "452:    return false;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "501:    return str.toString().replace(/^\\s*/, '').replace(/\\s*$/, '');",
      "502:   }",
      "520:   private function mouseActivityMove(event:MouseEvent):void {",
      "",
      "[Removed Lines]",
      "504:   private function isIllegalChar(s:String, isUrl:Boolean):Boolean {",
      "505:    var illegals:String = \"' \\\" ( ) { } * + \\\\ < >\";",
      "506:    if (isUrl) {",
      "507:     illegals = \"\\\" { } \\\\ < >\";",
      "508:    }",
      "509:    if (Boolean(s)) { // Otherwise exception if parameter null.",
      "510:     for each (var illegal:String in illegals.split(' ')) {",
      "511:      if (s.indexOf(illegal) >= 0) {",
      "512:       return true; // Illegal char found",
      "513:      }",
      "514:     }",
      "515:    }",
      "516:    return false;",
      "517:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/js/me-shim.js||src/js/me-shim.js": [
      "File: src/js/me-shim.js -> src/js/me-shim.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "579:      specialIEContainer.outerHTML =",
      "580: '<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\" ' +",
      "581: 'id=\"' + pluginid + '\" width=\"' + width + '\" height=\"' + height + '\" class=\"mejs-shim\">' +",
      "583: '<param name=\"flashvars\" value=\"' + initVars.join('&amp;') + '\" />' +",
      "584: '<param name=\"quality\" value=\"high\" />' +",
      "585: '<param name=\"bgcolor\" value=\"#000000\" />' +",
      "",
      "[Removed Lines]",
      "582: '<param name=\"movie\" value=\"' + options.pluginPath + options.flashName + '?x=' + (new Date()) + '\" />' +",
      "",
      "[Added Lines]",
      "582: '<param name=\"movie\" value=\"' + options.pluginPath + options.flashName + '?x=' + (new Date().getTime()) + '\" />' +",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "24c6ad056d3f43a78a011ec145f1f099f2a1cdbf",
      "candidate_info": {
        "commit_hash": "24c6ad056d3f43a78a011ec145f1f099f2a1cdbf",
        "repo": "johndyer/mediaelement",
        "commit_url": "https://github.com/johndyer/mediaelement/commit/24c6ad056d3f43a78a011ec145f1f099f2a1cdbf",
        "files": [
          "src/flash/FlashMediaElement.as",
          "src/js/me-shim.js"
        ],
        "message": "Simplify allowed Flash querystring parameters",
        "before_after_code_files": [
          "src/flash/FlashMediaElement.as||src/flash/FlashMediaElement.as",
          "src/js/me-shim.js||src/js/me-shim.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/flash/FlashMediaElement.as||src/flash/FlashMediaElement.as",
            "src/js/me-shim.js||src/js/me-shim.js"
          ],
          "candidate": [
            "src/flash/FlashMediaElement.as||src/flash/FlashMediaElement.as",
            "src/js/me-shim.js||src/js/me-shim.js"
          ]
        }
      },
      "candidate_diff": {
        "src/flash/FlashMediaElement.as||src/flash/FlashMediaElement.as": [
          "File: src/flash/FlashMediaElement.as -> src/flash/FlashMediaElement.as",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   public function FlashMediaElement() {",
          "106:    CONFIG::cdnBuild {",
          "",
          "[Removed Lines]",
          "103:    checkFlashVars(loaderInfo.parameters);",
          "",
          "[Added Lines]",
          "101:    if (isIllegalQuerystring()) {",
          "102:     return;",
          "103:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     Security.allowInsecureDomain('*');",
          "109:    }",
          "131:    CONFIG::debugBuild {",
          "132:     _debug = (params['debug'] != undefined) ? (String(params['debug']) == \"true\") : false;",
          "",
          "[Removed Lines]",
          "111:    if (securityIssue) {",
          "112:     return;",
          "113:    }",
          "117:    var params:Object, pos:int, query:Object;",
          "119:    params = LoaderInfo(this.root.loaderInfo).parameters;",
          "120:    pos = root.loaderInfo.url.indexOf('?');",
          "121:    if (pos !== -1) {",
          "122:     query = parseStr(root.loaderInfo.url.substr(pos + 1));",
          "124:     for (var key:String in params) {",
          "125:      if (query.hasOwnProperty(trim(key))) {",
          "126:       delete params[key];",
          "127:      }",
          "128:     }",
          "129:    }",
          "",
          "[Added Lines]",
          "111:    var params:Object = LoaderInfo(this.root.loaderInfo).parameters;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456:    }",
          "457:   }",
          "493:   }",
          "496:   private static function trim(str:String) : String {",
          "497:    if (!str) {",
          "498:     return str;",
          "",
          "[Removed Lines]",
          "461:   private function checkFlashVars(p:Object):void {",
          "462:    var i:Number = 0;",
          "463:    for (var s:String in p) {",
          "464:     if (isIllegalChar(p[s], s === 'file')) {",
          "465:      securityIssue = true; // Illegal char found",
          "466:     }",
          "467:     i++;",
          "468:    }",
          "469:    if (i === 0 || securityIssue) {",
          "470:     directAccess = true;",
          "471:    }",
          "472:   }",
          "474:   private static function parseStr (str:String) : Object {",
          "475:    var hash:Object = {},",
          "476:     arr1:Array, arr2:Array;",
          "478:    str = unescape(str).replace(/\\+/g, \" \");",
          "480:    arr1 = str.split('&');",
          "481:    if (!arr1.length) {",
          "482:     return {};",
          "483:    }",
          "485:    for (var i:uint = 0, length:uint = arr1.length; i < length; i++) {",
          "486:     arr2 = arr1[i].split('=');",
          "487:     if (!arr2.length) {",
          "488:      continue;",
          "489:     }",
          "490:     hash[trim(arr2[0])] = trim(arr2[1]);",
          "491:    }",
          "492:    return hash;",
          "",
          "[Added Lines]",
          "441:   private function isIllegalQuerystring():Boolean {",
          "442:    var query:String = '';",
          "443:    var pos:Number = root.loaderInfo.url.indexOf('?') ;",
          "445:    if ( pos > -1 ) {",
          "446:        query = root.loaderInfo.url.substring( pos );",
          "447:        if ( ! /^\\?\\d+$/.test( query ) ) {",
          "448:            return true;",
          "449:        }",
          "450:    }",
          "452:    return false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501:    return str.toString().replace(/^\\s*/, '').replace(/\\s*$/, '');",
          "502:   }",
          "520:   private function mouseActivityMove(event:MouseEvent):void {",
          "",
          "[Removed Lines]",
          "504:   private function isIllegalChar(s:String, isUrl:Boolean):Boolean {",
          "505:    var illegals:String = \"' \\\" ( ) { } * + \\\\ < >\";",
          "506:    if (isUrl) {",
          "507:     illegals = \"\\\" { } \\\\ < >\";",
          "508:    }",
          "509:    if (Boolean(s)) { // Otherwise exception if parameter null.",
          "510:     for each (var illegal:String in illegals.split(' ')) {",
          "511:      if (s.indexOf(illegal) >= 0) {",
          "512:       return true; // Illegal char found",
          "513:      }",
          "514:     }",
          "515:    }",
          "516:    return false;",
          "517:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/js/me-shim.js||src/js/me-shim.js": [
          "File: src/js/me-shim.js -> src/js/me-shim.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "579:      specialIEContainer.outerHTML =",
          "580: '<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\" ' +",
          "581: 'id=\"' + pluginid + '\" width=\"' + width + '\" height=\"' + height + '\" class=\"mejs-shim\">' +",
          "583: '<param name=\"flashvars\" value=\"' + initVars.join('&amp;') + '\" />' +",
          "584: '<param name=\"quality\" value=\"high\" />' +",
          "585: '<param name=\"bgcolor\" value=\"#000000\" />' +",
          "",
          "[Removed Lines]",
          "582: '<param name=\"movie\" value=\"' + options.pluginPath + options.flashName + '?x=' + (new Date()) + '\" />' +",
          "",
          "[Added Lines]",
          "582: '<param name=\"movie\" value=\"' + options.pluginPath + options.flashName + '?x=' + (new Date().getTime()) + '\" />' +",
          "",
          "---------------"
        ]
      }
    }
  ]
}