{
  "cve_id": "CVE-2022-31093",
  "cve_desc": "NextAuth.js is a complete open source authentication solution for Next.js applications. In affected versions an attacker can send a request to an app using NextAuth.js with an invalid `callbackUrl` query parameter, which internally is converted to a `URL` object. The URL instantiation would fail due to a malformed URL being passed into the constructor, causing it to throw an unhandled error which led to the **API route handler timing out and logging in to fail**. This has been remedied in versions 3.29.5 and 4.5.0. If for some reason you cannot upgrade, the workaround requires you to rely on Advanced Initialization. Please see the documentation for more.",
  "repo": "nextauthjs/next-auth",
  "patch_hash": "e498483b23273d1bfc81be68339607f88d411bd6",
  "patch_info": {
    "commit_hash": "e498483b23273d1bfc81be68339607f88d411bd6",
    "repo": "nextauthjs/next-auth",
    "commit_url": "https://github.com/nextauthjs/next-auth/commit/e498483b23273d1bfc81be68339607f88d411bd6",
    "files": [
      "packages/next-auth/tests/assert.test.ts"
    ],
    "message": "test: add test for invalid `callbackUrl` handling",
    "before_after_code_files": [
      "packages/next-auth/tests/assert.test.ts||packages/next-auth/tests/assert.test.ts"
    ]
  },
  "patch_diff": {
    "packages/next-auth/tests/assert.test.ts||packages/next-auth/tests/assert.test.ts": [
      "File: packages/next-auth/tests/assert.test.ts -> packages/next-auth/tests/assert.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "13:   expect(log.error).toBeCalledWith(\"NO_SECRET\", expect.anything())",
      "14: })",
      "16: it(\"Allow relative `callbackUrl`\", async () => {",
      "17:   const { res, log } = await handler(",
      "18:     { providers: [] },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: it(\"Should show configuration error page on invalid `callbackUrl`\", async () => {",
      "17:   const { res, log } = await handler(",
      "18:     { providers: [] },",
      "19:     { prod: true, params: { callbackUrl: \"invalid-callback\" } }",
      "20:   )",
      "22:   expect(res.status).toBe(500)",
      "23:   expect(res.html).toMatch(/there is a problem with the server configuration./i)",
      "24:   expect(res.html).toMatch(/check the server logs for more information./i)",
      "26:   expect(log.error).toBeCalledWith(",
      "27:     \"INVALID_CALLBACK_URL_ERROR\",",
      "28:     expect.anything()",
      "29:   )",
      "30: })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c194261617d4bb6d553e5752565270abc30633c0",
      "candidate_info": {
        "commit_hash": "c194261617d4bb6d553e5752565270abc30633c0",
        "repo": "nextauthjs/next-auth",
        "commit_url": "https://github.com/nextauthjs/next-auth/commit/c194261617d4bb6d553e5752565270abc30633c0",
        "files": [
          "packages/next-auth/package.json",
          "packages/next-auth/src/next/index.ts",
          "packages/next-auth/tests/assert.test.ts",
          "packages/next-auth/tests/getServerSession.test.ts",
          "packages/next-auth/tests/lib.ts",
          "pnpm-lock.yaml"
        ],
        "message": "fix(core): respect `NEXTAUTH_SECRET` in `unstable_getServerSession` (#4774)\n\n* fix(core): respect `NEXTAUTH_SECRET` in `unstable_getServerSession`\n\n* add `secret` tests\n\n* add `@types/jest`\n\n* fix tests",
        "before_after_code_files": [
          "packages/next-auth/src/next/index.ts||packages/next-auth/src/next/index.ts",
          "packages/next-auth/tests/assert.test.ts||packages/next-auth/tests/assert.test.ts",
          "packages/next-auth/tests/getServerSession.test.ts||packages/next-auth/tests/getServerSession.test.ts",
          "packages/next-auth/tests/lib.ts||packages/next-auth/tests/lib.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/next-auth/tests/assert.test.ts||packages/next-auth/tests/assert.test.ts"
          ],
          "candidate": [
            "packages/next-auth/tests/assert.test.ts||packages/next-auth/tests/assert.test.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/next-auth/src/next/index.ts||packages/next-auth/src/next/index.ts": [
          "File: packages/next-auth/src/next/index.ts -> packages/next-auth/src/next/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     )",
          "98:   const [req, res, options] = args;",
          "99:   const session = await NextAuthHandler<Session | {}>({",
          "100:     options,",
          "101:     req: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:   options.secret = options.secret ?? process.env.NEXTAUTH_SECRET",
          "",
          "---------------"
        ],
        "packages/next-auth/tests/assert.test.ts||packages/next-auth/tests/assert.test.ts": [
          "File: packages/next-auth/tests/assert.test.ts -> packages/next-auth/tests/assert.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { handler } from \"./lib\"",
          "3: it(\"Show error page if secret is not defined\", async () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { InvalidCallbackUrl, MissingSecret } from \"../src/core/errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:   expect(res.html).toMatch(/there is a problem with the server configuration./i)",
          "11:   expect(res.html).toMatch(/check the server logs for more information./i)",
          "14: })",
          "16: it(\"Should show configuration error page on invalid `callbackUrl`\", async () => {",
          "",
          "[Removed Lines]",
          "13:   expect(log.error).toBeCalledWith(\"NO_SECRET\", expect.anything())",
          "",
          "[Added Lines]",
          "14:   expect(log.error).toBeCalledWith(\"NO_SECRET\", expect.any(MissingSecret))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "26:   expect(log.error).toBeCalledWith(",
          "27:     \"INVALID_CALLBACK_URL_ERROR\",",
          "29:   )",
          "30: })",
          "",
          "[Removed Lines]",
          "28:     expect.anything()",
          "",
          "[Added Lines]",
          "29:     expect.any(InvalidCallbackUrl)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "38:   expect(res.status).not.toBe(500)",
          "39:   expect(log.error).not.toBeCalledWith(",
          "40:     \"INVALID_CALLBACK_URL_ERROR\",",
          "42:   )",
          "43: })",
          "",
          "[Removed Lines]",
          "41:     expect.anything()",
          "",
          "[Added Lines]",
          "42:     expect.any(InvalidCallbackUrl)",
          "",
          "---------------"
        ],
        "packages/next-auth/tests/getServerSession.test.ts||packages/next-auth/tests/getServerSession.test.ts": [
          "File: packages/next-auth/tests/getServerSession.test.ts -> packages/next-auth/tests/getServerSession.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { NextApiRequest } from \"next\"",
          "2: import { MissingSecret } from \"../src/core/errors\"",
          "3: import { unstable_getServerSession } from \"../src/next\"",
          "4: import { mockLogger } from \"./lib\"",
          "6: let originalWarn = console.warn",
          "7: let logger = mockLogger()",
          "9: beforeEach(() => {",
          "10:   process.env.NODE_ENV = \"production\"",
          "11:   process.env.NEXTAUTH_URL = \"http://localhost\"",
          "12:   console.warn = jest.fn()",
          "13: })",
          "15: afterEach(() => {",
          "16:   logger = mockLogger()",
          "17:   process.env.NODE_ENV = \"test\"",
          "18:   delete process.env.NEXTAUTH_URL",
          "19:   console.warn = originalWarn",
          "20: })",
          "22: describe(\"Treat secret correctly\", () => {",
          "23:   const req: any = { headers: {} }",
          "24:   const res: any = { setHeader: jest.fn(), getHeader: jest.fn() }",
          "26:   it(\"Read from NEXTAUTH_SECRET\", async () => {",
          "27:     process.env.NEXTAUTH_SECRET = \"secret\"",
          "28:     await unstable_getServerSession(req, res, { providers: [], logger })",
          "30:     expect(logger.error).toBeCalledTimes(0)",
          "31:     expect(logger.error).not.toBeCalledWith(\"NO_SECRET\")",
          "33:     delete process.env.NEXTAUTH_SECRET",
          "34:   })",
          "36:   it(\"Read from options.secret\", async () => {",
          "37:     await unstable_getServerSession(req, res, {",
          "38:       providers: [],",
          "39:       logger,",
          "40:       secret: \"secret\",",
          "41:     })",
          "43:     expect(logger.error).toBeCalledTimes(0)",
          "44:     expect(logger.error).not.toBeCalledWith(\"NO_SECRET\")",
          "45:   })",
          "47:   it(\"Error if missing NEXTAUTH_SECRET and secret\", async () => {",
          "48:     await unstable_getServerSession(req, res, { providers: [], logger })",
          "50:     expect(logger.error).toBeCalledTimes(1)",
          "51:     expect(logger.error).toBeCalledWith(\"NO_SECRET\", expect.any(MissingSecret))",
          "52:   })",
          "53: })",
          "",
          "---------------"
        ],
        "packages/next-auth/tests/lib.ts||packages/next-auth/tests/lib.ts": [
          "File: packages/next-auth/tests/lib.ts -> packages/next-auth/tests/lib.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import type { LoggerInstance, NextAuthOptions } from \"../src\"",
          "2: import { NextAuthHandler } from \"../src/core\"",
          "4: export async function handler(",
          "5:   options: NextAuthOptions,",
          "6:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: export const mockLogger: () => LoggerInstance = () => ({",
          "5:   error: jest.fn(() => {}),",
          "6:   warn: jest.fn(() => {}),",
          "7:   debug: jest.fn(() => {}),",
          "8: })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   if (prod) process.env.NODE_ENV = \"production\"",
          "24:   const url = new URL(",
          "25:     `http://localhost/api/auth/${path ?? \"signin\"}?${new URLSearchParams(",
          "26:       params ?? {}",
          "",
          "[Removed Lines]",
          "19:   const mockLogger: LoggerInstance = {",
          "20:     error: jest.fn(),",
          "21:     warn: jest.fn(),",
          "22:     debug: jest.fn(),",
          "23:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31:       host: \"\",",
          "32:     },",
          "33:   })",
          "34:   const response = await NextAuthHandler({",
          "35:     req,",
          "37:   })",
          "39:   if (prod) process.env.NODE_ENV = \"test\"",
          "",
          "[Removed Lines]",
          "36:     options: { secret: \"secret\", ...options, logger: mockLogger },",
          "",
          "[Added Lines]",
          "35:   const logger = mockLogger()",
          "38:     options: { secret: \"secret\", ...options, logger },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "44:       html:",
          "45:         response.headers?.[0].value === \"text/html\" ? response.body : undefined,",
          "46:     },",
          "48:   }",
          "49: }",
          "",
          "[Removed Lines]",
          "47:     log: mockLogger,",
          "",
          "[Added Lines]",
          "49:     log: logger,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62f672ae30fb389c1a81f484f2dad7a3e2a6a662",
      "candidate_info": {
        "commit_hash": "62f672ae30fb389c1a81f484f2dad7a3e2a6a662",
        "repo": "nextauthjs/next-auth",
        "commit_url": "https://github.com/nextauthjs/next-auth/commit/62f672ae30fb389c1a81f484f2dad7a3e2a6a662",
        "files": [
          "packages/next-auth/src/core/errors.ts",
          "packages/next-auth/src/core/index.ts",
          "packages/next-auth/src/core/init.ts",
          "packages/next-auth/src/core/lib/assert.ts",
          "packages/next-auth/src/core/lib/providers.ts",
          "packages/next-auth/src/core/lib/utils.ts",
          "packages/next-auth/src/core/pages/error.tsx",
          "packages/next-auth/src/core/pages/index.ts",
          "packages/next-auth/src/core/pages/signout.tsx",
          "packages/next-auth/src/core/routes/providers.ts",
          "packages/next-auth/src/core/routes/session.ts",
          "packages/next-auth/src/core/types.ts",
          "packages/next-auth/src/jwt/index.ts",
          "packages/next-auth/src/next/index.ts",
          "packages/next-auth/src/next/middleware.ts",
          "packages/next-auth/src/utils/node.ts",
          "packages/next-auth/src/utils/parse-url.ts",
          "packages/next-auth/src/utils/web.ts",
          "packages/next-auth/tests/assert.test.ts",
          "packages/next-auth/tests/email.test.ts",
          "packages/next-auth/tests/getURL.test.ts",
          "packages/next-auth/tests/middleware.test.ts",
          "packages/next-auth/tests/next.test.ts"
        ],
        "message": "fix(core): host detection/NEXTAUTH_URL (#6007)\n\n* rename `host` to `origin` internally\n\n* rename `userOptions` to `authOptions` internally\n\n* use object for `headers` internally\n\n* default `method` to GET\n\n* simplify `unstable_getServerSession`\n\n* allow optional headers\n\n* revert middleware\n\n* wip getURL\n\n* revert host detection\n\n* use old `detectHost`\n\n* fix/add some tests wip\n\n* move more to core, refactor getURL\n\n* better type auth actions\n\n* fix custom path support (w/ api/auth)\n\n* add `getURL` tests\n\n* fix email tests\n\n* fix assert tests\n\n* custom base without api/auth, with trailing slash\n\n* remove parseUrl from assert.ts\n\n* return 400 when wrong url\n\n* fix tests\n\n* refactor\n\n* fix protocol in dev\n\n* fix tests\n\n* fix custom url handling\n\n* add todo comments",
        "before_after_code_files": [
          "packages/next-auth/src/core/errors.ts||packages/next-auth/src/core/errors.ts",
          "packages/next-auth/src/core/index.ts||packages/next-auth/src/core/index.ts",
          "packages/next-auth/src/core/init.ts||packages/next-auth/src/core/init.ts",
          "packages/next-auth/src/core/lib/assert.ts||packages/next-auth/src/core/lib/assert.ts",
          "packages/next-auth/src/core/lib/providers.ts||packages/next-auth/src/core/lib/providers.ts",
          "packages/next-auth/src/core/lib/utils.ts||packages/next-auth/src/core/lib/utils.ts",
          "packages/next-auth/src/core/pages/error.tsx||packages/next-auth/src/core/pages/error.tsx",
          "packages/next-auth/src/core/pages/index.ts||packages/next-auth/src/core/pages/index.ts",
          "packages/next-auth/src/core/pages/signout.tsx||packages/next-auth/src/core/pages/signout.tsx",
          "packages/next-auth/src/core/routes/providers.ts||packages/next-auth/src/core/routes/providers.ts",
          "packages/next-auth/src/core/routes/session.ts||packages/next-auth/src/core/routes/session.ts",
          "packages/next-auth/src/core/types.ts||packages/next-auth/src/core/types.ts",
          "packages/next-auth/src/jwt/index.ts||packages/next-auth/src/jwt/index.ts",
          "packages/next-auth/src/next/index.ts||packages/next-auth/src/next/index.ts",
          "packages/next-auth/src/next/middleware.ts||packages/next-auth/src/next/middleware.ts",
          "packages/next-auth/src/utils/node.ts||packages/next-auth/src/utils/node.ts",
          "packages/next-auth/src/utils/parse-url.ts||packages/next-auth/src/utils/parse-url.ts",
          "packages/next-auth/src/utils/web.ts||packages/next-auth/src/utils/web.ts",
          "packages/next-auth/tests/assert.test.ts||packages/next-auth/tests/assert.test.ts",
          "packages/next-auth/tests/email.test.ts||packages/next-auth/tests/email.test.ts",
          "packages/next-auth/tests/getURL.test.ts||packages/next-auth/tests/getURL.test.ts",
          "packages/next-auth/tests/middleware.test.ts||packages/next-auth/tests/middleware.test.ts",
          "packages/next-auth/tests/next.test.ts||packages/next-auth/tests/next.test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/next-auth/tests/assert.test.ts||packages/next-auth/tests/assert.test.ts"
          ],
          "candidate": [
            "packages/next-auth/tests/assert.test.ts||packages/next-auth/tests/assert.test.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/next-auth/src/core/errors.ts||packages/next-auth/src/core/errors.ts": [
          "File: packages/next-auth/src/core/errors.ts -> packages/next-auth/src/core/errors.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   code = \"INVALID_CALLBACK_URL_ERROR\"",
          "73: }",
          "75: type Method = (...args: any[]) => Promise<any>",
          "77: export function upperSnake(s: string) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: export class UnknownAction extends UnknownError {",
          "76:   name = \"UnknownAction\"",
          "77:   code = \"UNKNOWN_ACTION_ERROR\"",
          "78: }",
          "80: export class UntrustedHost extends UnknownError {",
          "81:   name = \"UntrustedHost\"",
          "82:   code = \"UNTRUST_HOST_ERROR\"",
          "83: }",
          "",
          "---------------"
        ],
        "packages/next-auth/src/core/index.ts||packages/next-auth/src/core/index.ts": [
          "File: packages/next-auth/src/core/index.ts -> packages/next-auth/src/core/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import logger, { setLogger } from \"../utils/logger\"",
          "2: import { toInternalRequest, toResponse } from \"../utils/web\"",
          "5: import { init } from \"./init\"",
          "6: import { assertConfig } from \"./lib/assert\"",
          "7: import { SessionStore } from \"./lib/cookie\"",
          "10: import type { Cookie } from \"./lib/cookie\"",
          "11: import type { ErrorType } from \"./pages/error\"",
          "13: export interface RequestInternal {",
          "17:   cookies?: Partial<Record<string, string>>",
          "18:   headers?: Record<string, any>",
          "19:   query?: Record<string, any>",
          "",
          "[Removed Lines]",
          "3: import * as routes from \"./routes\"",
          "4: import renderPage from \"./pages\"",
          "9: import type { AuthAction, AuthOptions } from \"./types\"",
          "15:   host?: string",
          "16:   method?: string",
          "",
          "[Added Lines]",
          "6: import renderPage from \"./pages\"",
          "7: import * as routes from \"./routes\"",
          "9: import { UntrustedHost } from \"./errors\"",
          "12: import type { AuthAction, AuthOptions } from \"./types\"",
          "16:   url: URL",
          "18:   method: string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:   error?: string",
          "24: }",
          "32: export interface ResponseInternal<",
          "33:   Body extends string | Record<string, any> | any[] = any",
          "34: > {",
          "35:   status?: number",
          "37:   body?: Body",
          "38:   redirect?: string",
          "39:   cookies?: Cookie[]",
          "40: }",
          "42: async function AuthHandlerInternal<",
          "43:   Body extends string | Record<string, any> | any[]",
          "44: >(params: {",
          "",
          "[Removed Lines]",
          "26: export interface NextAuthHeader {",
          "27:   key: string",
          "28:   value: string",
          "29: }",
          "36:   headers?: NextAuthHeader[]",
          "",
          "[Added Lines]",
          "33:   headers?: Record<string, string>",
          "39: const configErrorMessage =",
          "40:   \"There is a problem with the server configuration. Check the server logs for more information.\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:   parsedBody?: any",
          "49: }): Promise<ResponseInternal<Body>> {",
          "55:   if (Array.isArray(assertionResult)) {",
          "56:     assertionResult.forEach(logger.warn)",
          "",
          "[Removed Lines]",
          "50:   const { options: userOptions, req } = params",
          "51:   setLogger(userOptions.logger, userOptions.debug)",
          "53:   const assertionResult = assertConfig({ options: userOptions, req })",
          "",
          "[Added Lines]",
          "50:   const { options: authOptions, req } = params",
          "52:   const assertionResult = assertConfig({ options: authOptions, req })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "61:     const htmlPages = [\"signin\", \"signout\", \"error\", \"verify-request\"]",
          "62:     if (!htmlPages.includes(req.action) || req.method !== \"GET\") {",
          "64:       return {",
          "65:         status: 500,",
          "68:       }",
          "69:     }",
          "72:     const authOnErrorPage =",
          "73:       pages?.error && req.query?.callbackUrl?.startsWith(pages.error)",
          "",
          "[Removed Lines]",
          "63:       const message = `There is a problem with the server configuration. Check the server logs for more information.`",
          "66:         headers: [{ key: \"Content-Type\", value: \"application/json\" }],",
          "67:         body: { message } as any,",
          "70:     const { pages, theme } = userOptions",
          "",
          "[Added Lines]",
          "64:         headers: { \"Content-Type\": \"application/json\" },",
          "65:         body: { message: configErrorMessage } as any,",
          "68:     const { pages, theme } = authOptions",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "90:     }",
          "91:   }",
          "95:   const { options, cookies } = await init({",
          "97:     action,",
          "98:     providerId,",
          "100:     callbackUrl: req.body?.callbackUrl ?? req.query?.callbackUrl,",
          "101:     csrfToken: req.body?.csrfToken,",
          "102:     cookies: req.cookies,",
          "",
          "[Removed Lines]",
          "93:   const { action, providerId, error, method = \"GET\" } = req",
          "96:     userOptions,",
          "99:     host: req.host,",
          "",
          "[Added Lines]",
          "91:   const { action, providerId, error, method } = req",
          "94:     authOptions,",
          "97:     url: req.url,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:       }",
          "124:       case \"csrf\":",
          "125:         return {",
          "127:           body: { csrfToken: options.csrfToken } as any,",
          "128:           cookies,",
          "129:         }",
          "",
          "[Removed Lines]",
          "126:           headers: [{ key: \"Content-Type\", value: \"application/json\" }],",
          "",
          "[Added Lines]",
          "124:           headers: { \"Content-Type\": \"application/json\" },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "240:         }",
          "241:         break",
          "242:       case \"_log\":",
          "244:           try {",
          "245:             const { code, level, ...metadata } = req.body ?? {}",
          "246:             logger[level](code, metadata)",
          "",
          "[Removed Lines]",
          "243:         if (userOptions.logger) {",
          "",
          "[Added Lines]",
          "241:         if (authOptions.logger) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "269:   request: Request,",
          "270:   options: AuthOptions",
          "271: ): Promise<Response> {",
          "272:   const req = await toInternalRequest(request)",
          "273:   const internalResponse = await AuthHandlerInternal({ req, options })",
          "275:   const response = await toResponse(internalResponse)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:   setLogger(options.logger, options.debug)",
          "272:   if (!options.trustHost) {",
          "273:     const error = new UntrustedHost(",
          "274:       `Host must be trusted. URL was: ${request.url}`",
          "275:     )",
          "276:     logger.error(error.code, error)",
          "278:     return new Response(JSON.stringify({ message: configErrorMessage }), {",
          "279:       status: 500,",
          "280:       headers: { \"Content-Type\": \"application/json\" },",
          "281:     })",
          "282:   }",
          "285:   if (req instanceof Error) {",
          "286:     logger.error((req as any).code, req)",
          "287:     return new Response(",
          "288:       `Error: This action with HTTP ${request.method} is not supported.`,",
          "289:       { status: 400 }",
          "290:     )",
          "291:   }",
          "",
          "---------------"
        ],
        "packages/next-auth/src/core/init.ts||packages/next-auth/src/core/init.ts": [
          "File: packages/next-auth/src/core/init.ts -> packages/next-auth/src/core/init.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { randomBytes, randomUUID } from \"crypto\"",
          "2: import { AuthOptions } from \"..\"",
          "3: import logger from \"../utils/logger\"",
          "5: import { adapterErrorHandler, eventsErrorHandler } from \"./errors\"",
          "6: import parseProviders from \"./lib/providers\"",
          "7: import { createSecret } from \"./lib/utils\"",
          "",
          "[Removed Lines]",
          "4: import parseUrl from \"../utils/parse-url\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: import { RequestInternal } from \".\"",
          "15: import type { InternalOptions } from \"./types\"",
          "17: interface InitParams {",
          "20:   providerId?: string",
          "21:   action: InternalOptions[\"action\"]",
          "",
          "[Removed Lines]",
          "18:   host?: string",
          "19:   userOptions: AuthOptions",
          "",
          "[Added Lines]",
          "15: import parseUrl from \"../utils/parse-url\"",
          "18:   url: URL",
          "19:   authOptions: AuthOptions",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32: export async function init({",
          "34:   providerId,",
          "35:   action,",
          "37:   cookies: reqCookies,",
          "38:   callbackUrl: reqCallbackUrl,",
          "39:   csrfToken: reqCsrfToken,",
          "",
          "[Removed Lines]",
          "33:   userOptions,",
          "36:   host,",
          "",
          "[Added Lines]",
          "33:   authOptions,",
          "36:   url: reqUrl,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "42:   options: InternalOptions",
          "43:   cookies: cookie.Cookie[]",
          "44: }> {",
          "49:   const { providers, provider } = parseProviders({",
          "51:     url,",
          "52:     providerId,",
          "53:   })",
          "",
          "[Removed Lines]",
          "45:   const url = parseUrl(host)",
          "47:   const secret = createSecret({ userOptions, url })",
          "50:     providers: userOptions.providers,",
          "",
          "[Added Lines]",
          "46:   const parsed = parseUrl(",
          "47:     reqUrl.origin +",
          "48:       reqUrl.pathname.replace(`/${action}`, \"\").replace(`/${providerId}`, \"\")",
          "49:   )",
          "50:   const url = new URL(parsed.toString())",
          "52:   const secret = createSecret({ authOptions, url })",
          "55:     providers: authOptions.providers,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "66:       buttonText: \"\",",
          "67:     },",
          "72:     url,",
          "",
          "[Removed Lines]",
          "69:     ...userOptions,",
          "",
          "[Added Lines]",
          "74:     ...authOptions,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "75:     provider,",
          "76:     cookies: {",
          "77:       ...cookie.defaultCookies(",
          "79:       ),",
          "82:     },",
          "83:     secret,",
          "84:     providers,",
          "86:     session: {",
          "89:       maxAge,",
          "90:       updateAge: 24 * 60 * 60,",
          "91:       generateSessionToken: () => {",
          "93:         return randomUUID?.() ?? randomBytes(32).toString(\"hex\")",
          "94:       },",
          "96:     },",
          "98:     jwt: {",
          "",
          "[Removed Lines]",
          "78:         userOptions.useSecureCookies ?? url.base.startsWith(\"https://\")",
          "81:       ...userOptions.cookies,",
          "88:       strategy: userOptions.adapter ? \"database\" : \"jwt\",",
          "95:       ...userOptions.session,",
          "",
          "[Added Lines]",
          "83:         authOptions.useSecureCookies ?? url.protocol === \"https:\"",
          "86:       ...authOptions.cookies,",
          "93:       strategy: authOptions.adapter ? \"database\" : \"jwt\",",
          "100:       ...authOptions.session,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "100:       maxAge, // same as session maxAge,",
          "101:       encode: jwt.encode,",
          "102:       decode: jwt.decode,",
          "104:     },",
          "110:     logger,",
          "111:     callbackUrl: url.origin,",
          "112:   }",
          "",
          "[Removed Lines]",
          "103:       ...userOptions.jwt,",
          "106:     events: eventsErrorHandler(userOptions.events ?? {}, logger),",
          "107:     adapter: adapterErrorHandler(userOptions.adapter, logger),",
          "109:     callbacks: { ...defaultCallbacks, ...userOptions.callbacks },",
          "",
          "[Added Lines]",
          "108:       ...authOptions.jwt,",
          "111:     events: eventsErrorHandler(authOptions.events ?? {}, logger),",
          "112:     adapter: adapterErrorHandler(authOptions.adapter, logger),",
          "114:     callbacks: { ...defaultCallbacks, ...authOptions.callbacks },",
          "",
          "---------------"
        ],
        "packages/next-auth/src/core/lib/assert.ts||packages/next-auth/src/core/lib/assert.ts": [
          "File: packages/next-auth/src/core/lib/assert.ts -> packages/next-auth/src/core/lib/assert.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   InvalidCallbackUrl,",
          "8:   MissingAdapterMethods,",
          "9: } from \"../errors\"",
          "11: import { defaultCookies } from \"./cookie\"",
          "13: import type { RequestInternal } from \"..\"",
          "",
          "[Removed Lines]",
          "10: import parseUrl from \"../../utils/parse-url\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   req: RequestInternal",
          "45: }): ConfigError | WarningCode[] {",
          "46:   const { options, req } = params",
          "48:   const warnings: WarningCode[] = []",
          "50:   if (!warned) {",
          "54:     if (!options.secret && process.env.NODE_ENV !== \"production\")",
          "",
          "[Removed Lines]",
          "51:     if (!req.host) warnings.push(\"NEXTAUTH_URL\")",
          "",
          "[Added Lines]",
          "46:   const { url } = req",
          "50:     if (!url.origin) warnings.push(\"NEXTAUTH_URL\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:   const callbackUrlParam = req.query?.callbackUrl as string | undefined",
          "76:     return new InvalidCallbackUrl(",
          "77:       `Invalid callback URL. Received: ${callbackUrlParam}`",
          "78:     )",
          "79:   }",
          "81:   const { callbackUrl: defaultCallbackUrl } = defaultCookies(",
          "83:   )",
          "84:   const callbackUrlCookie =",
          "85:     req.cookies?.[options.cookies?.callbackUrl?.name ?? defaultCallbackUrl.name]",
          "88:     return new InvalidCallbackUrl(",
          "89:       `Invalid callback URL. Received: ${callbackUrlCookie}`",
          "90:     )",
          "",
          "[Removed Lines]",
          "73:   const url = parseUrl(req.host)",
          "75:   if (callbackUrlParam && !isValidHttpUrl(callbackUrlParam, url.base)) {",
          "82:     options.useSecureCookies ?? url.base.startsWith(\"https://\")",
          "87:   if (callbackUrlCookie && !isValidHttpUrl(callbackUrlCookie, url.base)) {",
          "",
          "[Added Lines]",
          "72:   if (callbackUrlParam && !isValidHttpUrl(callbackUrlParam, url.origin)) {",
          "79:     options.useSecureCookies ?? url.protocol === \"https://\"",
          "84:   if (callbackUrlCookie && !isValidHttpUrl(callbackUrlCookie, url.origin)) {",
          "",
          "---------------"
        ],
        "packages/next-auth/src/core/lib/providers.ts||packages/next-auth/src/core/lib/providers.ts": [
          "File: packages/next-auth/src/core/lib/providers.ts -> packages/next-auth/src/core/lib/providers.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:   OAuthConfig,",
          "7:   Provider,",
          "8: } from \"../../providers\"",
          "",
          "[Removed Lines]",
          "9: import type { InternalUrl } from \"../../utils/parse-url\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: export default function parseProviders(params: {",
          "16:   providers: Provider[]",
          "18:   providerId?: string",
          "19: }): {",
          "20:   providers: InternalProvider[]",
          "",
          "[Removed Lines]",
          "17:   url: InternalUrl",
          "",
          "[Added Lines]",
          "16:   url: URL",
          "",
          "---------------"
        ],
        "packages/next-auth/src/core/lib/utils.ts||packages/next-auth/src/core/lib/utils.ts": [
          "File: packages/next-auth/src/core/lib/utils.ts -> packages/next-auth/src/core/lib/utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import type { AuthOptions } from \"../..\"",
          "4: import type { InternalOptions } from \"../types\"",
          "",
          "[Removed Lines]",
          "5: import type { InternalUrl } from \"../../utils/parse-url\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:   return (",
          "40:     createHash(\"sha256\")",
          "42:       .digest(\"hex\")",
          "43:   )",
          "44: }",
          "",
          "[Removed Lines]",
          "31: export function createSecret(params: {",
          "32:   userOptions: AuthOptions",
          "33:   url: InternalUrl",
          "34: }) {",
          "35:   const { userOptions, url } = params",
          "38:     userOptions.secret ??",
          "41:       .update(JSON.stringify({ ...url, ...userOptions }))",
          "",
          "[Added Lines]",
          "30: export function createSecret(params: { authOptions: AuthOptions; url: URL }) {",
          "31:   const { authOptions, url } = params",
          "34:     authOptions.secret ??",
          "37:       .update(JSON.stringify({ ...url, ...authOptions }))",
          "",
          "---------------"
        ],
        "packages/next-auth/src/core/pages/error.tsx||packages/next-auth/src/core/pages/error.tsx": [
          "File: packages/next-auth/src/core/pages/error.tsx -> packages/next-auth/src/core/pages/error.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { Theme } from \"../..\"",
          "",
          "[Removed Lines]",
          "2: import { InternalUrl } from \"../../utils/parse-url\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:   | \"verification\"",
          "14: export interface ErrorProps {",
          "16:   theme?: Theme",
          "17:   error?: ErrorType",
          "18: }",
          "",
          "[Removed Lines]",
          "15:   url?: InternalUrl",
          "",
          "[Added Lines]",
          "14:   url?: URL",
          "",
          "---------------"
        ],
        "packages/next-auth/src/core/pages/index.ts||packages/next-auth/src/core/pages/index.ts": [
          "File: packages/next-auth/src/core/pages/index.ts -> packages/next-auth/src/core/pages/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     return {",
          "32:       cookies,",
          "33:       status,",
          "35:       body: `<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><style>${css()}</style><title>${title}</title></head><body class=\"__next-auth-theme-${",
          "36:         theme?.colorScheme ?? \"auto\"",
          "37:       }\"><div class=\"page\">${renderToString(html)}</div></body></html>`,",
          "",
          "[Removed Lines]",
          "34:       headers: [{ key: \"Content-Type\", value: \"text/html\" }],",
          "",
          "[Added Lines]",
          "34:       headers: { \"Content-Type\": \"text/html\" },",
          "",
          "---------------"
        ],
        "packages/next-auth/src/core/pages/signout.tsx||packages/next-auth/src/core/pages/signout.tsx": [
          "File: packages/next-auth/src/core/pages/signout.tsx -> packages/next-auth/src/core/pages/signout.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { Theme } from \"../..\"",
          "4: export interface SignoutProps {",
          "6:   csrfToken: string",
          "7:   theme: Theme",
          "8: }",
          "",
          "[Removed Lines]",
          "2: import { InternalUrl } from \"../../utils/parse-url\"",
          "5:   url: InternalUrl",
          "",
          "[Added Lines]",
          "4:   url: URL",
          "",
          "---------------"
        ],
        "packages/next-auth/src/core/routes/providers.ts||packages/next-auth/src/core/routes/providers.ts": [
          "File: packages/next-auth/src/core/routes/providers.ts -> packages/next-auth/src/core/routes/providers.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   providers: InternalProvider[]",
          "19: ): ResponseInternal<Record<string, PublicProvider>> {",
          "20:   return {",
          "22:     body: providers.reduce<Record<string, PublicProvider>>(",
          "23:       (acc, { id, name, type, signinUrl, callbackUrl }) => {",
          "24:         acc[id] = { id, name, type, signinUrl, callbackUrl }",
          "",
          "[Removed Lines]",
          "21:     headers: [{ key: \"Content-Type\", value: \"application/json\" }],",
          "",
          "[Added Lines]",
          "21:     headers: { \"Content-Type\": \"application/json\" },",
          "",
          "---------------"
        ],
        "packages/next-auth/src/core/routes/session.ts||packages/next-auth/src/core/routes/session.ts": [
          "File: packages/next-auth/src/core/routes/session.ts -> packages/next-auth/src/core/routes/session.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   const response: ResponseInternal<Session | {}> = {",
          "33:     body: {},",
          "35:     cookies: [],",
          "36:   }",
          "",
          "[Removed Lines]",
          "34:     headers: [{ key: \"Content-Type\", value: \"application/json\" }],",
          "",
          "[Added Lines]",
          "34:     headers: { \"Content-Type\": \"application/json\" },",
          "",
          "---------------"
        ],
        "packages/next-auth/src/core/types.ts||packages/next-auth/src/core/types.ts": [
          "File: packages/next-auth/src/core/types.ts -> packages/next-auth/src/core/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import type { NextApiRequest, NextApiResponse } from \"next\"",
          "19: export type Awaitable<T> = T | PromiseLike<T>",
          "21: export type { LoggerInstance }",
          "",
          "[Removed Lines]",
          "17: import type { InternalUrl } from \"../utils/parse-url\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "528:   WithVerificationToken = TProviderType extends \"email\" ? true : false",
          "529: > {",
          "530:   providers: InternalProvider[]",
          "536:   action: AuthAction",
          "537:   provider: InternalProvider<TProviderType>",
          "538:   csrfToken?: string",
          "",
          "[Removed Lines]",
          "535:   url: InternalUrl",
          "",
          "[Added Lines]",
          "529:   url: URL",
          "",
          "---------------"
        ],
        "packages/next-auth/src/jwt/index.ts||packages/next-auth/src/jwt/index.ts": [
          "File: packages/next-auth/src/jwt/index.ts -> packages/next-auth/src/jwt/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   const authorizationHeader =",
          "95:     req.headers instanceof Headers",
          "96:       ? req.headers.get(\"authorization\")",
          "99:   if (!token && authorizationHeader?.split(\" \")[0] === \"Bearer\") {",
          "100:     const urlEncodedToken = authorizationHeader.split(\" \")[1]",
          "",
          "[Removed Lines]",
          "97:       : req.headers.authorization",
          "",
          "[Added Lines]",
          "97:       : req.headers?.authorization",
          "",
          "---------------"
        ],
        "packages/next-auth/src/next/index.ts||packages/next-auth/src/next/index.ts": [
          "File: packages/next-auth/src/next/index.ts -> packages/next-auth/src/next/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { AuthHandler } from \"../core\"",
          "4: import type {",
          "5:   GetServerSidePropsContext,",
          "",
          "[Removed Lines]",
          "2: import { getURL, getBody, setHeaders } from \"../utils/node\"",
          "",
          "[Added Lines]",
          "2: import { getBody, getURL, setHeaders } from \"../utils/node\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:   res: NextApiResponse,",
          "19:   options: AuthOptions",
          "20: ) {",
          "29:   const request = new Request(url, {",
          "31:     method: req.method,",
          "32:     ...getBody(req),",
          "33:   })",
          "35:   options.secret ??= options.jwt?.secret ?? process.env.NEXTAUTH_SECRET",
          "38:   res.status(response.status)",
          "39:   setHeaders(response.headers, res)",
          "",
          "[Removed Lines]",
          "21:   const url = getURL(",
          "22:     req.url,",
          "23:     options.trustHost,",
          "24:     req.headers[\"x-forwarded-host\"] ?? req.headers.host",
          "25:   )",
          "27:   if (url instanceof Error) return res.status(400).end()",
          "30:     headers: new Headers(req.headers as any),",
          "36:   const response = await AuthHandler(request, options)",
          "",
          "[Added Lines]",
          "21:   const headers = new Headers(req.headers as any)",
          "22:   const url = getURL(req.url, headers)",
          "23:   if (url instanceof Error) {",
          "24:     if (process.env.NODE_ENV !== \"production\") throw url",
          "25:     const errorLogger = options.logger?.error ?? console.error",
          "26:     errorLogger(\"INVALID_URL\", url)",
          "27:     res.status(400)",
          "28:     return res.json({",
          "29:       message:",
          "30:         \"There is a problem with the server configuration. Check the server logs for more information.\",",
          "31:     })",
          "32:   }",
          "35:     headers,",
          "41:   options.trustHost ??= !!(",
          "42:     process.env.NEXTAUTH_URL ??",
          "43:     process.env.AUTH_TRUST_HOST ??",
          "44:     process.env.VERCEL ??",
          "45:     process.env.NODE_ENV !== \"production\"",
          "46:   )",
          "48:   const response = await AuthHandler(request, options)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     options = Object.assign({}, args[2], { providers: [] })",
          "130:   }",
          "140:   options.secret ??= process.env.NEXTAUTH_SECRET",
          "146:   const { status = 200, headers } = response",
          "",
          "[Removed Lines]",
          "132:   const urlOrError = getURL(",
          "133:     \"/api/auth/session\",",
          "134:     options.trustHost,",
          "135:     req.headers[\"x-forwarded-host\"] ?? req.headers.host",
          "136:   )",
          "138:   if (urlOrError instanceof Error) throw urlOrError",
          "141:   const response = await AuthHandler(",
          "142:     new Request(urlOrError, { headers: req.headers }),",
          "143:     options",
          "144:   )",
          "",
          "[Added Lines]",
          "143:   const url = getURL(\"/api/auth/session\", new Headers(req.headers))",
          "144:   if (url instanceof Error) {",
          "145:     if (process.env.NODE_ENV !== \"production\") throw url",
          "146:     const errorLogger = options.logger?.error ?? console.error",
          "147:     errorLogger(\"INVALID_URL\", url)",
          "148:     res.status(400)",
          "149:     return res.json({",
          "150:       message:",
          "151:         \"There is a problem with the server configuration. Check the server logs for more information.\",",
          "152:     })",
          "153:   }",
          "155:   const request = new Request(url, { headers: new Headers(req.headers) })",
          "158:   options.trustHost = true",
          "159:   const response = await AuthHandler(request, options)",
          "",
          "---------------"
        ],
        "packages/next-auth/src/next/middleware.ts||packages/next-auth/src/next/middleware.ts": [
          "File: packages/next-auth/src/next/middleware.ts -> packages/next-auth/src/next/middleware.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import { getToken } from \"../jwt\"",
          "8: import parseUrl from \"../utils/parse-url\"",
          "11: type AuthorizedCallback = (params: {",
          "12:   token: JWT | null",
          "",
          "[Removed Lines]",
          "9: import { getURL } from \"../utils/node\"",
          "",
          "[Added Lines]",
          "9: import { detectHost } from \"../utils/web\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:   const signInPage = options?.pages?.signIn ?? \"/api/auth/signin\"",
          "114:   const errorPage = options?.pages?.error ?? \"/api/auth/error\"",
          "118:   )",
          "123:     options.trustHost,",
          "125:   )",
          "129:   const publicPaths = [\"/_next\", \"/favicon.ico\"]",
          "",
          "[Removed Lines]",
          "116:   options.trustHost = Boolean(",
          "117:     options.trustHost ?? process.env.VERCEL ?? process.env.AUTH_TRUST_HOST",
          "120:   let authPath",
          "121:   const url = getURL(",
          "122:     null,",
          "124:     req.headers.get(\"x-forwarded-host\") ?? req.headers.get(\"host\")",
          "126:   if (url instanceof URL) authPath = parseUrl(url).path",
          "127:   else authPath = \"/api/auth\"",
          "",
          "[Added Lines]",
          "116:   options.trustHost ??= !!(",
          "117:     process.env.NEXTAUTH_URL ??",
          "118:     process.env.VERCEL ??",
          "119:     process.env.AUTH_TRUST_HOST",
          "122:   const host = detectHost(",
          "124:     req.headers?.get(\"x-forwarded-host\"),",
          "125:     process.env.NEXTAUTH_URL ??",
          "126:       (process.env.NODE_ENV !== \"production\" && \"http://localhost:3000\")",
          "128:   const authPath = parseUrl(host).path",
          "",
          "---------------"
        ],
        "packages/next-auth/src/utils/node.ts||packages/next-auth/src/utils/node.ts": [
          "File: packages/next-auth/src/utils/node.ts -> packages/next-auth/src/utils/node.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   return { body: JSON.stringify(req.body) }",
          "26: }",
          "36:   try {",
          "50:     }",
          "52:   } catch (error) {",
          "53:     return error as Error",
          "54:   }",
          "",
          "[Removed Lines]",
          "29: export function getURL(",
          "30:   url: string | undefined | null,",
          "31:   trusted: boolean | undefined = !!(",
          "32:     process.env.AUTH_TRUST_HOST ?? process.env.VERCEL",
          "33:   ),",
          "34:   forwardedValue: string | string[] | undefined | null",
          "35: ): URL | Error {",
          "37:     let host =",
          "38:       process.env.NEXTAUTH_URL ??",
          "39:       (process.env.NODE_ENV !== \"production\" && \"http://localhost:3000\")",
          "41:     if (trusted && forwardedValue) {",
          "42:       host = Array.isArray(forwardedValue) ? forwardedValue[0] : forwardedValue",
          "43:     }",
          "45:     if (!host) throw new TypeError(\"Invalid host\")",
          "46:     if (!url) throw new TypeError(\"Invalid URL, cannot determine action\")",
          "48:     if (host.startsWith(\"http://\") || host.startsWith(\"https://\")) {",
          "49:       return new URL(`${host}${url}`)",
          "51:     return new URL(`https://${host}${url}`)",
          "",
          "[Added Lines]",
          "32: export function getURL(url: string | undefined, headers: Headers): URL | Error {",
          "34:     if (!url) throw new Error(\"Missing url\")",
          "35:     if (process.env.NEXTAUTH_URL) {",
          "36:       const base = new URL(process.env.NEXTAUTH_URL)",
          "37:       if (![\"http:\", \"https:\"].includes(base.protocol)) {",
          "38:         throw new Error(\"Invalid protocol\")",
          "39:       }",
          "40:       const hasCustomPath = base.pathname !== \"/\"",
          "42:       if (hasCustomPath) {",
          "43:         const apiAuthRe = /\\/api\\/auth\\/?$/",
          "44:         const basePathname = base.pathname.match(apiAuthRe)",
          "45:           ? base.pathname.replace(apiAuthRe, \"\")",
          "46:           : base.pathname",
          "47:         return new URL(basePathname.replace(/\\/$/, \"\") + url, base.origin)",
          "48:       }",
          "49:       return new URL(url, base)",
          "51:     const proto =",
          "52:       headers.get(\"x-forwarded-proto\") ??",
          "53:       (process.env.NODE_ENV !== \"production\" ? \"http\" : \"https\")",
          "54:     const host = headers.get(\"x-forwarded-host\") ?? headers.get(\"host\")",
          "55:     if (![\"http\", \"https\"].includes(proto)) throw new Error(\"Invalid protocol\")",
          "56:     const origin = `${proto}://${host}`",
          "57:     if (!host) throw new Error(\"Missing host\")",
          "58:     return new URL(url, origin)",
          "",
          "---------------"
        ],
        "packages/next-auth/src/utils/parse-url.ts||packages/next-auth/src/utils/parse-url.ts": [
          "File: packages/next-auth/src/utils/parse-url.ts -> packages/next-auth/src/utils/parse-url.ts"
        ],
        "packages/next-auth/src/utils/web.ts||packages/next-auth/src/utils/web.ts": [
          "File: packages/next-auth/src/utils/web.ts -> packages/next-auth/src/utils/web.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { serialize, parse as parseCookie } from \"cookie\"",
          "2: import type { ResponseInternal, RequestInternal } from \"../core\"",
          "3: import type { AuthAction } from \"../core/types\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import { UnknownAction } from \"../core/errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:   }",
          "42: }",
          "44: export async function toInternalRequest(",
          "45:   req: Request",
          "68:   }",
          "69: }",
          "71: export function toResponse(res: ResponseInternal): Response {",
          "79:   res.cookies?.forEach((cookie) => {",
          "80:     const { name, value, options } = cookie",
          "",
          "[Removed Lines]",
          "46: ): Promise<RequestInternal> {",
          "47:   const url = new URL(req.url)",
          "48:   const nextauth = url.pathname.split(\"/\").slice(3)",
          "49:   const headers = Object.fromEntries(req.headers)",
          "50:   const query: Record<string, any> = Object.fromEntries(url.searchParams)",
          "52:   const cookieHeader = req.headers.get(\"cookie\") ?? \"\"",
          "53:   const cookies =",
          "54:     parseCookie(",
          "55:       Array.isArray(cookieHeader) ? cookieHeader.join(\";\") : cookieHeader",
          "56:     ) ?? {}",
          "58:   return {",
          "59:     action: nextauth[0] as AuthAction,",
          "60:     method: req.method,",
          "61:     headers,",
          "62:     body: req.body ? await readJSONBody(req.body) : undefined,",
          "63:     cookies: cookies,",
          "64:     providerId: nextauth[1],",
          "65:     error: url.searchParams.get(\"error\") ?? undefined,",
          "66:     host: new URL(req.url).origin,",
          "67:     query,",
          "72:   const headers = new Headers(",
          "73:     res.headers?.reduce((acc, { key, value }) => {",
          "74:       acc[key] = value",
          "75:       return acc",
          "76:     }, {})",
          "77:   )",
          "",
          "[Added Lines]",
          "46: const actions: AuthAction[] = [ \"providers\", \"session\", \"csrf\", \"signin\", \"signout\", \"callback\", \"verify-request\", \"error\", \"_log\" ]",
          "50: ): Promise<RequestInternal | Error> {",
          "51:   try {",
          "54:     const url = new URL(req.url.replace(/\\/$/, \"\"))",
          "55:     const { pathname } = url",
          "57:     const action = actions.find((a) => pathname.includes(a))",
          "58:     if (!action) {",
          "59:       throw new UnknownAction(\"Cannot detect action.\")",
          "60:     }",
          "62:     const providerIdOrAction = pathname.split(\"/\").pop()",
          "63:     let providerId",
          "64:     if (",
          "65:       providerIdOrAction &&",
          "66:       !action.includes(providerIdOrAction) &&",
          "67:       [\"signin\", \"callback\"].includes(action)",
          "68:     ) {",
          "69:       providerId = providerIdOrAction",
          "70:     }",
          "72:     const cookieHeader = req.headers.get(\"cookie\") ?? \"\"",
          "74:     return {",
          "75:       url,",
          "76:       action,",
          "77:       providerId,",
          "78:       method: req.method ?? \"GET\",",
          "79:       headers: Object.fromEntries(req.headers),",
          "80:       body: req.body ? await readJSONBody(req.body) : undefined,",
          "81:       cookies:",
          "82:         parseCookie(",
          "83:           Array.isArray(cookieHeader) ? cookieHeader.join(\";\") : cookieHeader",
          "84:         ) ?? {},",
          "85:       error: url.searchParams.get(\"error\") ?? undefined,",
          "86:       query: Object.fromEntries(url.searchParams),",
          "87:     }",
          "88:   } catch (error) {",
          "89:     return error",
          "94:   const headers = new Headers(res.headers)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:   return response",
          "104: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125: export function detectHost(",
          "126:   trusted: boolean,",
          "127:   forwardedValue: string | string[] | undefined | null,",
          "128:   defaultValue: string | false",
          "129: ): string | undefined {",
          "130:   if (trusted && forwardedValue) {",
          "131:     return Array.isArray(forwardedValue) ? forwardedValue[0] : forwardedValue",
          "132:   }",
          "134:   return defaultValue || undefined",
          "135: }",
          "",
          "---------------"
        ],
        "packages/next-auth/tests/assert.test.ts||packages/next-auth/tests/assert.test.ts": [
          "File: packages/next-auth/tests/assert.test.ts -> packages/next-auth/tests/assert.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: it(\"Show error page if secret is not defined\", async () => {",
          "11:   const { res, log } = await handler(",
          "13:     { prod: true }",
          "14:   )",
          "",
          "[Removed Lines]",
          "12:     { providers: [], secret: undefined },",
          "",
          "[Added Lines]",
          "12:     { providers: [], secret: undefined, trustHost: true },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:       adapter: missingFunctionAdapter,",
          "29:       providers: [EmailProvider({ sendVerificationRequest })],",
          "30:       secret: \"secret\",",
          "31:     },",
          "32:     { prod: true }",
          "33:   )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:       trustHost: true,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:     {",
          "49:       providers: [EmailProvider({ sendVerificationRequest })],",
          "50:       secret: \"secret\",",
          "51:     },",
          "52:     { prod: true }",
          "53:   )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:       trustHost: true,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65: it(\"Should show configuration error page on invalid `callbackUrl`\", async () => {",
          "66:   const { res, log } = await handler(",
          "68:     { prod: true, params: { callbackUrl: \"invalid-callback\" } }",
          "69:   )",
          "",
          "[Removed Lines]",
          "67:     { providers: [] },",
          "",
          "[Added Lines]",
          "69:     { providers: [], trustHost: true },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "81: it(\"Allow relative `callbackUrl`\", async () => {",
          "82:   const { res, log } = await handler(",
          "84:     { prod: true, params: { callbackUrl: \"/callback\" } }",
          "85:   )",
          "",
          "[Removed Lines]",
          "83:     { providers: [] },",
          "",
          "[Added Lines]",
          "85:     { providers: [], trustHost: true },",
          "",
          "---------------"
        ],
        "packages/next-auth/tests/email.test.ts||packages/next-auth/tests/email.test.ts": [
          "File: packages/next-auth/tests/email.test.ts -> packages/next-auth/tests/email.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:       providers: [EmailProvider({ sendVerificationRequest })],",
          "15:       callbacks: { signIn },",
          "16:       secret,",
          "17:     },",
          "18:     {",
          "19:       path: \"signin/email\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:       trustHost: true,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:       providers: [EmailProvider({ sendVerificationRequest })],",
          "55:       callbacks: { signIn },",
          "56:       secret,",
          "57:     },",
          "58:     {",
          "59:       path: \"signin/email\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:       trustHost: true,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:       providers: [EmailProvider({ sendVerificationRequest })],",
          "95:       callbacks: { signIn },",
          "96:       secret,",
          "97:     },",
          "98:     {",
          "99:       path: \"signin/email\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:       trustHost: true,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:         }),",
          "141:       ],",
          "142:       secret,",
          "143:     },",
          "144:     {",
          "145:       path: \"signin/email\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:       trustHost: true,",
          "",
          "---------------"
        ],
        "packages/next-auth/tests/getURL.test.ts||packages/next-auth/tests/getURL.test.ts": [
          "File: packages/next-auth/tests/getURL.test.ts -> packages/next-auth/tests/getURL.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { getURL as getURLOriginal } from \"../src/utils/node\"",
          "3: it(\"Should return error when missing url\", () => {",
          "4:   expect(getURL(undefined, {})).toEqual(new Error(\"Missing url\"))",
          "5: })",
          "7: it(\"Should return error when missing host\", () => {",
          "8:   expect(getURL(\"/\", {})).toEqual(new Error(\"Missing host\"))",
          "9: })",
          "11: it(\"Should return error when invalid protocol\", () => {",
          "12:   expect(",
          "13:     getURL(\"/\", { host: \"localhost\", \"x-forwarded-proto\": \"file\" })",
          "14:   ).toEqual(new Error(\"Invalid protocol\"))",
          "15: })",
          "17: it(\"Should return error when invalid host\", () => {",
          "18:   expect(getURL(\"/\", { host: \"/\" })).toEqual(",
          "19:     new TypeError(\"Invalid base URL: http:///\")",
          "20:   )",
          "21: })",
          "23: it(\"Should read host headers\", () => {",
          "24:   expect(getURL(\"/api/auth/session\", { host: \"localhost\" })).toBeURL(",
          "25:     \"http://localhost/api/auth/session\"",
          "26:   )",
          "28:   expect(",
          "29:     getURL(\"/custom/api/auth/session\", { \"x-forwarded-host\": \"localhost:3000\" })",
          "30:   ).toBeURL(\"http://localhost:3000/custom/api/auth/session\")",
          "33:   expect(",
          "34:     getURL(\"/\", { host: \"localhost\", \"x-forwarded-host\": \"localhost:3000\" })",
          "35:   ).toBeURL(\"http://localhost:3000/\")",
          "36: })",
          "38: it(\"Should read protocol headers\", () => {",
          "39:   expect(",
          "40:     getURL(\"/\", { host: \"localhost\", \"x-forwarded-proto\": \"http\" })",
          "41:   ).toBeURL(\"http://localhost/\")",
          "42: })",
          "44: describe(\"process.env.NEXTAUTH_URL\", () => {",
          "45:   afterEach(() => delete process.env.NEXTAUTH_URL)",
          "47:   it(\"Should prefer over headers if present\", () => {",
          "48:     process.env.NEXTAUTH_URL = \"http://localhost:3000\"",
          "49:     expect(getURL(\"/api/auth/session\", { host: \"localhost\" })).toBeURL(",
          "50:       \"http://localhost:3000/api/auth/session\"",
          "51:     )",
          "52:   })",
          "54:   it(\"catch errors\", () => {",
          "55:     process.env.NEXTAUTH_URL = \"invald-url\"",
          "56:     expect(getURL(\"/api/auth/session\", {})).toEqual(",
          "57:       new TypeError(\"Invalid URL: invald-url\")",
          "58:     )",
          "60:     process.env.NEXTAUTH_URL = \"file://localhost\"",
          "61:     expect(getURL(\"/api/auth/session\", {})).toEqual(",
          "62:       new TypeError(\"Invalid protocol\")",
          "63:     )",
          "64:   })",
          "66:   it(\"Supports custom base path\", () => {",
          "67:     process.env.NEXTAUTH_URL = \"http://localhost:3000/custom/api/auth\"",
          "68:     expect(getURL(\"/api/auth/session\", {})).toBeURL(",
          "69:       \"http://localhost:3000/custom/api/auth/session\"",
          "70:     )",
          "73:     process.env.NEXTAUTH_URL = \"http://localhost:3000/custom/api/auth/\"",
          "74:     expect(getURL(\"/api/auth/session\", {})).toBeURL(",
          "75:       \"http://localhost:3000/custom/api/auth/session\"",
          "76:     )",
          "79:     process.env.NEXTAUTH_URL = \"http://localhost:3000/custom/path/api/auth\"",
          "80:     expect(getURL(\"/api/auth/session\", {})).toBeURL(",
          "81:       \"http://localhost:3000/custom/path/api/auth/session\"",
          "82:     )",
          "84:     process.env.NEXTAUTH_URL = \"http://localhost:3000/custom/path/api/auth/\"",
          "85:     expect(getURL(\"/api/auth/session\", {})).toBeURL(",
          "86:       \"http://localhost:3000/custom/path/api/auth/session\"",
          "87:     )",
          "90:     process.env.NEXTAUTH_URL = \"http://localhost:3000/custom/nextauth\"",
          "91:     expect(getURL(\"/session\", {})).toBeURL(",
          "92:       \"http://localhost:3000/custom/nextauth/session\"",
          "93:     )",
          "96:     process.env.NEXTAUTH_URL = \"http://localhost:3000/custom/nextauth/\"",
          "97:     expect(getURL(\"/session\", {})).toBeURL(",
          "98:       \"http://localhost:3000/custom/nextauth/session\"",
          "99:     )",
          "100:   })",
          "101: })",
          "105: function getURL(",
          "106:   url: Parameters<typeof getURLOriginal>[0],",
          "107:   headers: HeadersInit",
          "108: ) {",
          "109:   return getURLOriginal(url, new Headers(headers))",
          "110: }",
          "112: expect.extend({",
          "113:   toBeURL(rec, exp) {",
          "114:     const r = rec.toString()",
          "115:     const e = exp.toString()",
          "116:     const printR = this.utils.printReceived",
          "117:     const printE = this.utils.printExpected",
          "118:     if (r === e) {",
          "119:       return {",
          "120:         message: () => `expected ${printE(e)} not to be ${printR(r)}`,",
          "121:         pass: true,",
          "122:       }",
          "123:     }",
          "124:     return {",
          "125:       message: () => `expected ${printE(e)}, got ${printR(r)}`,",
          "126:       pass: false,",
          "127:     }",
          "128:   },",
          "129: })",
          "131: declare global {",
          "133:   namespace jest {",
          "134:     interface Matchers<R> {",
          "135:       toBeURL: (expected: string) => R",
          "136:     }",
          "137:   }",
          "138: }",
          "",
          "---------------"
        ],
        "packages/next-auth/tests/middleware.test.ts||packages/next-auth/tests/middleware.test.ts": [
          "File: packages/next-auth/tests/middleware.test.ts -> packages/next-auth/tests/middleware.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     pages: { signIn: \"/\", error: \"/\" },",
          "7:     secret: \"secret\",",
          "8:   }",
          "18: })",
          "20: it(\"should not redirect on public paths\", async () => {",
          "21:   const options: NextAuthMiddlewareOptions = { secret: \"secret\" }",
          "27:   const handleMiddleware = withAuth(options) as NextMiddleware",
          "28:   const res = await handleMiddleware(req, null as any)",
          "29:   expect(res).toBeUndefined()",
          "30: })",
          "56:   const options: NextAuthMiddlewareOptions = { secret: \"secret\" }",
          "58:   const handleMiddleware = withAuth(options) as NextMiddleware",
          "76:     \"http://127.0.0.1/custom-base-path/api/auth/signin?callbackUrl=%2Fcustom-base-path%2Fprotected%2FpathA\"",
          "77:   )",
          "91:     null as any",
          "92:   )",
          "96: })",
          "",
          "[Removed Lines]",
          "10:   const req = new NextRequest(\"http://127.0.0.1/protected/pathA\", {",
          "11:     headers: { authorization: \"\" },",
          "12:   })",
          "14:   const handleMiddleware = withAuth(options) as NextMiddleware",
          "15:   const res = await handleMiddleware(req, null as any)",
          "16:   expect(res).toBeDefined()",
          "17:   expect(res?.status).toBe(307)",
          "23:   const req = new NextRequest(\"http://127.0.0.1/_next/foo\", {",
          "24:     headers: { authorization: \"\" },",
          "25:   })",
          "32: it(\"should redirect according to nextUrl basePath\", async () => {",
          "33:   const options: NextAuthMiddlewareOptions = { secret: \"secret\" }",
          "35:   const req = {",
          "36:     nextUrl: {",
          "37:       pathname: \"/protected/pathA\",",
          "38:       search: \"\",",
          "39:       origin: \"http://127.0.0.1\",",
          "40:       basePath: \"/custom-base-path\",",
          "41:     },",
          "42:     headers: new Headers({ authorization: \"\" }),",
          "43:   }",
          "45:   const handleMiddleware = withAuth(options) as NextMiddleware",
          "46:   const res = await handleMiddleware(req as NextRequest, null as any)",
          "47:   expect(res).toBeDefined()",
          "48:   expect(res?.status).toEqual(307)",
          "49:   expect(res?.headers.get(\"location\")).toContain(",
          "50:     \"http://127.0.0.1/custom-base-path/api/auth/signin?callbackUrl=%2Fcustom-base-path%2Fprotected%2FpathA\"",
          "51:   )",
          "52: })",
          "54: it(\"should redirect according to nextUrl basePath\", async () => {",
          "60:   const req1 = {",
          "61:     nextUrl: {",
          "62:       pathname: \"/protected/pathA\",",
          "63:       search: \"\",",
          "64:       origin: \"http://127.0.0.1\",",
          "65:       basePath: \"/custom-base-path\",",
          "66:     },",
          "67:     headers: new Headers({ authorization: \"\" }),",
          "68:   }",
          "70:   const res = await handleMiddleware(req1 as NextRequest, null as any)",
          "73:   expect(res).toBeDefined()",
          "74:   expect(res?.status).toEqual(307)",
          "75:   expect(res?.headers.get(\"location\")).toContain(",
          "79:   const req2 = {",
          "80:     nextUrl: {",
          "81:       pathname: \"/api/auth/signin\",",
          "82:       search: \"callbackUrl=%2Fcustom-base-path%2Fprotected%2FpathA\",",
          "83:       origin: \"http://127.0.0.1\",",
          "84:       basePath: \"/custom-base-path\",",
          "85:     },",
          "86:     headers: new Headers({ authorization: \"\" }),",
          "87:   }",
          "89:   const resFromRedirectedUrl = await handleMiddleware(",
          "90:     req2 as NextRequest,",
          "95:   expect(resFromRedirectedUrl).toBeUndefined()",
          "",
          "[Added Lines]",
          "9:   const handleMiddleware = withAuth(options) as NextMiddleware",
          "11:   const response = await handleMiddleware(",
          "12:     new NextRequest(\"http://127.0.0.1/protected/pathA\"),",
          "13:     null as any",
          "14:   )",
          "16:   expect(response?.status).toBe(307)",
          "17:   expect(response?.headers.get(\"location\")).toBe(",
          "18:     \"http://localhost/?callbackUrl=%2Fprotected%2FpathA\"",
          "19:   )",
          "25:   const req = new NextRequest(\"http://127.0.0.1/_next/foo\")",
          "32: it(\"should respect NextURL#basePath when redirecting\", async () => {",
          "36:   const response1 = await handleMiddleware(",
          "37:     {",
          "38:       nextUrl: {",
          "39:         pathname: \"/protected/pathA\",",
          "40:         search: \"\",",
          "41:         origin: \"http://127.0.0.1\",",
          "42:         basePath: \"/custom-base-path\",",
          "43:       },",
          "44:     } as unknown as NextRequest,",
          "45:     null as any",
          "46:   )",
          "47:   expect(response1?.status).toEqual(307)",
          "48:   expect(response1?.headers.get(\"location\")).toBe(",
          "54:   const response2 = await handleMiddleware(",
          "55:     {",
          "56:       nextUrl: {",
          "57:         pathname: \"/api/auth/signin\",",
          "58:         searchParams: new URLSearchParams({",
          "59:           callbackUrl: \"/custom-base-path/protected/pathA\",",
          "60:         }),",
          "61:         origin: \"http://127.0.0.1\",",
          "62:         basePath: \"/custom-base-path\",",
          "63:       },",
          "64:     } as unknown as NextRequest,",
          "68:   expect(response2).toBeUndefined()",
          "",
          "---------------"
        ],
        "packages/next-auth/tests/next.test.ts||packages/next-auth/tests/next.test.ts": [
          "File: packages/next-auth/tests/next.test.ts -> packages/next-auth/tests/next.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { nodeHandler } from \"./utils\"",
          "7:   expect(res.status).toBeCalledWith(400)",
          "20: })",
          "24:   process.env.NODE_ENV = \"production\"",
          "26:   expect(res.status).toBeCalledWith(400)",
          "28:   process.env.NODE_ENV = \"test\"",
          "29: })",
          "",
          "[Removed Lines]",
          "4: it(\"Missing req.url throws MISSING_NEXTAUTH_API_ROUTE_ERROR\", async () => {",
          "5:   const { res } = await nodeHandler()",
          "22: it(\"Missing host throws 400 in production\", async () => {",
          "25:   const { res } = await nodeHandler()",
          "",
          "[Added Lines]",
          "3: it(\"Missing req.url throws in dev\", async () => {",
          "4:   await expect(nodeHandler).rejects.toThrow(new Error(\"Missing url\"))",
          "5: })",
          "7: const configErrorMessage =",
          "8:   \"There is a problem with the server configuration. Check the server logs for more information.\"",
          "10: it(\"Missing req.url returns config error in prod\", async () => {",
          "12:   process.env.NODE_ENV = \"production\"",
          "13:   const { res, logger } = await nodeHandler()",
          "15:   expect(logger.error).toBeCalledTimes(1)",
          "16:   const error = new Error(\"Missing url\")",
          "17:   expect(logger.error).toBeCalledWith(\"INVALID_URL\", error)",
          "20:   expect(res.json).toBeCalledWith({ message: configErrorMessage })",
          "23:   process.env.NODE_ENV = \"test\"",
          "24: })",
          "26: it(\"Missing host throws in dev\", async () => {",
          "27:   await expect(",
          "28:     async () =>",
          "29:       await nodeHandler({",
          "30:         req: { query: { nextauth: [\"session\"] } },",
          "31:       })",
          "32:   ).rejects.toThrow(Error)",
          "35: it(\"Missing host config error in prod\", async () => {",
          "38:   const { res, logger } = await nodeHandler({",
          "39:     req: { query: { nextauth: [\"session\"] } },",
          "40:   })",
          "42:   expect(res.json).toBeCalledWith({ message: configErrorMessage })",
          "44:   expect(logger.error).toBeCalledWith(\"INVALID_URL\", new Error(\"Missing url\"))",
          "",
          "---------------"
        ]
      }
    }
  ]
}