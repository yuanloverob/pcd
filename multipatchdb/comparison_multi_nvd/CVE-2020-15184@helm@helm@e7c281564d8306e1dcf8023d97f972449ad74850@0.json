{
  "cve_id": "CVE-2020-15184",
  "cve_desc": "In Helm before versions 2.16.11 and 3.3.2 there is a bug in which the `alias` field on a `Chart.yaml` is not properly sanitized. This could lead to the injection of unwanted information into a chart. This issue has been patched in Helm 3.3.2 and 2.16.11. A possible workaround is to manually review the `dependencies` field of any untrusted chart, verifying that the `alias` field is either not used, or (if used) does not contain newlines or path characters.",
  "repo": "helm/helm",
  "patch_hash": "e7c281564d8306e1dcf8023d97f972449ad74850",
  "patch_info": {
    "commit_hash": "e7c281564d8306e1dcf8023d97f972449ad74850",
    "repo": "helm/helm",
    "commit_url": "https://github.com/helm/helm/commit/e7c281564d8306e1dcf8023d97f972449ad74850",
    "files": [
      "pkg/chart/chart.go",
      "pkg/chart/errors.go",
      "pkg/chart/metadata.go",
      "pkg/chart/metadata_test.go"
    ],
    "message": "Merge pull request from GHSA-9vp5-m38w-j776\n\n(cherry picked from commit 59d5b94d35b24a500e30839a7c69f05d9ff077e2)",
    "before_after_code_files": [
      "pkg/chart/chart.go||pkg/chart/chart.go",
      "pkg/chart/errors.go||pkg/chart/errors.go",
      "pkg/chart/metadata.go||pkg/chart/metadata.go",
      "pkg/chart/metadata_test.go||pkg/chart/metadata_test.go"
    ]
  },
  "patch_diff": {
    "pkg/chart/chart.go||pkg/chart/chart.go": [
      "File: pkg/chart/chart.go -> pkg/chart/chart.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: import (",
      "19:  \"path/filepath\"",
      "20:  \"strings\"",
      "21: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20:  \"regexp\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "27: const APIVersionV2 = \"v2\"",
      "31: type Chart struct {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: var aliasNameFormat = regexp.MustCompile(\"^[a-zA-Z0-9_-]+$\")",
      "",
      "---------------"
    ],
    "pkg/chart/errors.go||pkg/chart/errors.go": [
      "File: pkg/chart/errors.go -> pkg/chart/errors.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package chart",
      "19: type ValidationError string",
      "21: func (v ValidationError) Error() string {",
      "22:  return \"validation: \" + string(v)",
      "23: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import \"fmt\"",
      "28: func ValidationErrorf(msg string, args ...interface{}) ValidationError {",
      "29:  return ValidationError(fmt.Sprintf(msg, args...))",
      "30: }",
      "",
      "---------------"
    ],
    "pkg/chart/metadata.go||pkg/chart/metadata.go": [
      "File: pkg/chart/metadata.go -> pkg/chart/metadata.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:  if !isValidChartType(md.Type) {",
      "82:   return ValidationError(\"chart.metadata.type must be application or library\")",
      "83:  }",
      "85:  return nil",
      "86: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:  for _, dependency := range md.Dependencies {",
      "88:   if err := validateDependency(dependency); err != nil {",
      "89:    return err",
      "90:   }",
      "91:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "92:  }",
      "93:  return false",
      "94: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108: func validateDependency(dep *Dependency) error {",
      "109:  if len(dep.Alias) > 0 && !aliasNameFormat.MatchString(dep.Alias) {",
      "110:   return ValidationErrorf(\"dependency %q has disallowed characters in the alias\", dep.Name)",
      "111:  }",
      "112:  return nil",
      "113: }",
      "",
      "---------------"
    ],
    "pkg/chart/metadata_test.go||pkg/chart/metadata_test.go": [
      "File: pkg/chart/metadata_test.go -> pkg/chart/metadata_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:    &Metadata{Name: \"test\", APIVersion: \"v2\", Version: \"1.0\", Type: \"application\"},",
      "49:    nil,",
      "50:   },",
      "51:  }",
      "53:  for _, tt := range tests {",
      "54:   result := tt.md.Validate()",
      "55:   if result != tt.err {",
      "57:   }",
      "58:  }",
      "59: }",
      "",
      "[Removed Lines]",
      "56:    t.Errorf(\"expected %s, got %s\", tt.err, result)",
      "",
      "[Added Lines]",
      "51:   {",
      "52:    &Metadata{",
      "53:     Name:       \"test\",",
      "54:     APIVersion: \"v2\",",
      "55:     Version:    \"1.0\",",
      "56:     Type:       \"application\",",
      "57:     Dependencies: []*Dependency{",
      "58:      {Name: \"dependency\", Alias: \"legal-alias\"},",
      "59:     },",
      "60:    },",
      "61:    nil,",
      "62:   },",
      "63:   {",
      "64:    &Metadata{",
      "65:     Name:       \"test\",",
      "66:     APIVersion: \"v2\",",
      "67:     Version:    \"1.0\",",
      "68:     Type:       \"application\",",
      "69:     Dependencies: []*Dependency{",
      "70:      {Name: \"bad\", Alias: \"illegal alias\"},",
      "71:     },",
      "72:    },",
      "73:    ValidationError(\"dependency \\\"bad\\\" has disallowed characters in the alias\"),",
      "74:   },",
      "80:    t.Errorf(\"expected '%s', got '%s'\", tt.err, result)",
      "81:   }",
      "82:  }",
      "83: }",
      "85: func TestValidateDependency(t *testing.T) {",
      "86:  dep := &Dependency{",
      "87:   Name: \"example\",",
      "88:  }",
      "89:  for value, shouldFail := range map[string]bool{",
      "90:   \"abcdefghijklmenopQRSTUVWXYZ-0123456780_\": false,",
      "91:   \"-okay\":      false,",
      "92:   \"_okay\":      false,",
      "93:   \"- bad\":      true,",
      "94:   \" bad\":       true,",
      "95:   \"bad\\nvalue\": true,",
      "96:   \"bad \":       true,",
      "97:   \"bad$\":       true,",
      "98:  } {",
      "99:   dep.Alias = value",
      "100:   res := validateDependency(dep)",
      "101:   if res != nil && !shouldFail {",
      "102:    t.Errorf(\"Failed on case %q\", dep.Alias)",
      "103:   } else if res == nil && shouldFail {",
      "104:    t.Errorf(\"Expected failure for %q\", dep.Alias)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "59d5b94d35b24a500e30839a7c69f05d9ff077e2",
      "candidate_info": {
        "commit_hash": "59d5b94d35b24a500e30839a7c69f05d9ff077e2",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/59d5b94d35b24a500e30839a7c69f05d9ff077e2",
        "files": [
          "pkg/chart/chart.go",
          "pkg/chart/errors.go",
          "pkg/chart/metadata.go",
          "pkg/chart/metadata_test.go"
        ],
        "message": "Merge pull request from GHSA-9vp5-m38w-j776",
        "before_after_code_files": [
          "pkg/chart/chart.go||pkg/chart/chart.go",
          "pkg/chart/errors.go||pkg/chart/errors.go",
          "pkg/chart/metadata.go||pkg/chart/metadata.go",
          "pkg/chart/metadata_test.go||pkg/chart/metadata_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pkg/chart/chart.go||pkg/chart/chart.go",
            "pkg/chart/errors.go||pkg/chart/errors.go",
            "pkg/chart/metadata.go||pkg/chart/metadata.go",
            "pkg/chart/metadata_test.go||pkg/chart/metadata_test.go"
          ],
          "candidate": [
            "pkg/chart/chart.go||pkg/chart/chart.go",
            "pkg/chart/errors.go||pkg/chart/errors.go",
            "pkg/chart/metadata.go||pkg/chart/metadata.go",
            "pkg/chart/metadata_test.go||pkg/chart/metadata_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/chart/chart.go||pkg/chart/chart.go": [
          "File: pkg/chart/chart.go -> pkg/chart/chart.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import (",
          "19:  \"path/filepath\"",
          "20:  \"strings\"",
          "21: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:  \"regexp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: const APIVersionV2 = \"v2\"",
          "31: type Chart struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: var aliasNameFormat = regexp.MustCompile(\"^[a-zA-Z0-9_-]+$\")",
          "",
          "---------------"
        ],
        "pkg/chart/errors.go||pkg/chart/errors.go": [
          "File: pkg/chart/errors.go -> pkg/chart/errors.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package chart",
          "19: type ValidationError string",
          "21: func (v ValidationError) Error() string {",
          "22:  return \"validation: \" + string(v)",
          "23: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import \"fmt\"",
          "28: func ValidationErrorf(msg string, args ...interface{}) ValidationError {",
          "29:  return ValidationError(fmt.Sprintf(msg, args...))",
          "30: }",
          "",
          "---------------"
        ],
        "pkg/chart/metadata.go||pkg/chart/metadata.go": [
          "File: pkg/chart/metadata.go -> pkg/chart/metadata.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:  if !isValidChartType(md.Type) {",
          "82:   return ValidationError(\"chart.metadata.type must be application or library\")",
          "83:  }",
          "85:  return nil",
          "86: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:  for _, dependency := range md.Dependencies {",
          "88:   if err := validateDependency(dependency); err != nil {",
          "89:    return err",
          "90:   }",
          "91:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:  }",
          "93:  return false",
          "94: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: func validateDependency(dep *Dependency) error {",
          "109:  if len(dep.Alias) > 0 && !aliasNameFormat.MatchString(dep.Alias) {",
          "110:   return ValidationErrorf(\"dependency %q has disallowed characters in the alias\", dep.Name)",
          "111:  }",
          "112:  return nil",
          "113: }",
          "",
          "---------------"
        ],
        "pkg/chart/metadata_test.go||pkg/chart/metadata_test.go": [
          "File: pkg/chart/metadata_test.go -> pkg/chart/metadata_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:    &Metadata{Name: \"test\", APIVersion: \"v2\", Version: \"1.0\", Type: \"application\"},",
          "49:    nil,",
          "50:   },",
          "51:  }",
          "53:  for _, tt := range tests {",
          "54:   result := tt.md.Validate()",
          "55:   if result != tt.err {",
          "57:   }",
          "58:  }",
          "59: }",
          "",
          "[Removed Lines]",
          "56:    t.Errorf(\"expected %s, got %s\", tt.err, result)",
          "",
          "[Added Lines]",
          "51:   {",
          "52:    &Metadata{",
          "53:     Name:       \"test\",",
          "54:     APIVersion: \"v2\",",
          "55:     Version:    \"1.0\",",
          "56:     Type:       \"application\",",
          "57:     Dependencies: []*Dependency{",
          "58:      {Name: \"dependency\", Alias: \"legal-alias\"},",
          "59:     },",
          "60:    },",
          "61:    nil,",
          "62:   },",
          "63:   {",
          "64:    &Metadata{",
          "65:     Name:       \"test\",",
          "66:     APIVersion: \"v2\",",
          "67:     Version:    \"1.0\",",
          "68:     Type:       \"application\",",
          "69:     Dependencies: []*Dependency{",
          "70:      {Name: \"bad\", Alias: \"illegal alias\"},",
          "71:     },",
          "72:    },",
          "73:    ValidationError(\"dependency \\\"bad\\\" has disallowed characters in the alias\"),",
          "74:   },",
          "80:    t.Errorf(\"expected '%s', got '%s'\", tt.err, result)",
          "81:   }",
          "82:  }",
          "83: }",
          "85: func TestValidateDependency(t *testing.T) {",
          "86:  dep := &Dependency{",
          "87:   Name: \"example\",",
          "88:  }",
          "89:  for value, shouldFail := range map[string]bool{",
          "90:   \"abcdefghijklmenopQRSTUVWXYZ-0123456780_\": false,",
          "91:   \"-okay\":      false,",
          "92:   \"_okay\":      false,",
          "93:   \"- bad\":      true,",
          "94:   \" bad\":       true,",
          "95:   \"bad\\nvalue\": true,",
          "96:   \"bad \":       true,",
          "97:   \"bad$\":       true,",
          "98:  } {",
          "99:   dep.Alias = value",
          "100:   res := validateDependency(dep)",
          "101:   if res != nil && !shouldFail {",
          "102:    t.Errorf(\"Failed on case %q\", dep.Alias)",
          "103:   } else if res == nil && shouldFail {",
          "104:    t.Errorf(\"Expected failure for %q\", dep.Alias)",
          "",
          "---------------"
        ]
      }
    }
  ]
}