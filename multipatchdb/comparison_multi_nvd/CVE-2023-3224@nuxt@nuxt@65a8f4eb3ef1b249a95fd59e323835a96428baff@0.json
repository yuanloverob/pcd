{
  "cve_id": "CVE-2023-3224",
  "cve_desc": "Code Injection in GitHub repository nuxt/nuxt prior to 3.5.3.",
  "repo": "nuxt/nuxt",
  "patch_hash": "65a8f4eb3ef1b249a95fd59e323835a96428baff",
  "patch_info": {
    "commit_hash": "65a8f4eb3ef1b249a95fd59e323835a96428baff",
    "repo": "nuxt/nuxt",
    "commit_url": "https://github.com/nuxt/nuxt/commit/65a8f4eb3ef1b249a95fd59e323835a96428baff",
    "files": [
      "packages/nuxt/src/app/components/nuxt-root.vue",
      "packages/nuxt/src/app/components/test-component-wrapper.ts",
      "packages/nuxt/src/core/templates.ts",
      "packages/schema/src/config/vite.ts",
      "packages/webpack/package.json",
      "packages/webpack/src/presets/base.ts",
      "pnpm-lock.yaml"
    ],
    "message": "fix(nuxt): restrict access to single renderer outside of test/rootDir (#20543)",
    "before_after_code_files": [
      "packages/nuxt/src/app/components/nuxt-root.vue||packages/nuxt/src/app/components/nuxt-root.vue",
      "packages/nuxt/src/app/components/test-component-wrapper.ts||packages/nuxt/src/app/components/test-component-wrapper.ts",
      "packages/nuxt/src/core/templates.ts||packages/nuxt/src/core/templates.ts",
      "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts",
      "packages/webpack/src/presets/base.ts||packages/webpack/src/presets/base.ts"
    ]
  },
  "patch_diff": {
    "packages/nuxt/src/app/components/nuxt-root.vue||packages/nuxt/src/app/components/nuxt-root.vue": [
      "File: packages/nuxt/src/app/components/nuxt-root.vue -> packages/nuxt/src/app/components/nuxt-root.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: const onResolve = nuxtApp.deferHydration()",
      "25: const url = process.server ? nuxtApp.ssrContext.url : window.location.pathname",
      "27:   .then(r => r.default(process.server ? url : window.location.href)))",
      "",
      "[Removed Lines]",
      "26: const SingleRenderer = process.dev && process.server && url.startsWith('/__nuxt_component_test__/') && defineAsyncComponent(() => import('#build/test-component-wrapper.mjs')",
      "",
      "[Added Lines]",
      "26: const SingleRenderer = process.test && process.dev && process.server && url.startsWith('/__nuxt_component_test__/') && /* #__PURE__ */ defineAsyncComponent(() => import('#build/test-component-wrapper.mjs')",
      "",
      "---------------"
    ],
    "packages/nuxt/src/app/components/test-component-wrapper.ts||packages/nuxt/src/app/components/test-component-wrapper.ts": [
      "File: packages/nuxt/src/app/components/test-component-wrapper.ts -> packages/nuxt/src/app/components/test-component-wrapper.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { parseURL } from 'ufo'",
      "2: import { defineComponent, h } from 'vue'",
      "3: import { parseQuery } from 'vue-router'",
      "6:   name: 'NuxtTestComponentWrapper',",
      "8:   async setup (props, { attrs }) {",
      "9:     const query = parseQuery(parseURL(url).search)",
      "10:     const urlProps = query.props ? JSON.parse(query.props as string) : {}",
      "11:     const comp = await import(/* @vite-ignore */ query.path as string).then(r => r.default)",
      "12:     return () => [",
      "13:       h('div', 'Component Test Wrapper for ' + query.path),",
      "",
      "[Removed Lines]",
      "5: export default (url:string) => defineComponent({",
      "",
      "[Added Lines]",
      "4: import { resolve } from 'pathe'",
      "6: import { devRootDir } from '#build/nuxt.config.mjs'",
      "8: export default (url: string) => defineComponent({",
      "14:     const path = resolve(query.path as string)",
      "15:     if (!path.startsWith(devRootDir)) {",
      "16:       throw new Error(`[nuxt] Cannot access path outside of project root directory: \\`${path}\\`.`)",
      "17:     }",
      "",
      "---------------"
    ],
    "packages/nuxt/src/core/templates.ts||packages/nuxt/src/core/templates.ts": [
      "File: packages/nuxt/src/core/templates.ts -> packages/nuxt/src/core/templates.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "299:     return [",
      "300:       ...Object.entries(ctx.nuxt.options.app).map(([k, v]) => `export const ${camelCase('app-' + k)} = ${JSON.stringify(v)}`),",
      "301:       `export const renderJsonPayloads = ${!!ctx.nuxt.options.experimental.renderJsonPayloads}`,",
      "303:     ].join('\\n\\n')",
      "304:   }",
      "305: }",
      "",
      "[Removed Lines]",
      "302:       `export const devPagesDir = ${ctx.nuxt.options.dev ? JSON.stringify(ctx.nuxt.options.dir.pages) : 'null'}`",
      "",
      "[Added Lines]",
      "302:       `export const devPagesDir = ${ctx.nuxt.options.dev ? JSON.stringify(ctx.nuxt.options.dir.pages) : 'null'}`,",
      "303:       `export const devRootDir = ${ctx.nuxt.options.dev ? JSON.stringify(ctx.nuxt.options.rootDir) : 'null'}`",
      "",
      "---------------"
    ],
    "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts": [
      "File: packages/schema/src/config/vite.ts -> packages/schema/src/config/vite.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { resolve } from 'pathe'",
      "2: import { withoutLeadingSlash } from 'ufo'",
      "3: import { defineUntypedSchema } from 'untyped'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: import { isTest } from 'std-env'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     define: {",
      "22:       $resolve: async (val, get) => ({",
      "23:         'process.dev': await get('dev'),",
      "24:         ...val || {}",
      "25:       })",
      "26:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25:         'process.test': isTest,",
      "",
      "---------------"
    ],
    "packages/webpack/src/presets/base.ts||packages/webpack/src/presets/base.ts": [
      "File: packages/webpack/src/presets/base.ts -> packages/webpack/src/presets/base.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: import escapeRegExp from 'escape-string-regexp'",
      "11: import { joinURL } from 'ufo'",
      "12: import type { NuxtOptions } from '@nuxt/schema'",
      "13: import type { WarningFilter } from '../plugins/warning-ignore'",
      "14: import WarningIgnorePlugin from '../plugins/warning-ignore'",
      "15: import type { WebpackConfigContext } from '../utils/config'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: import { isTest } from 'std-env'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "233:     'process.env.NODE_ENV': JSON.stringify(ctx.config.mode),",
      "234:     'process.mode': JSON.stringify(ctx.config.mode),",
      "235:     'process.dev': options.dev,",
      "236:     __NUXT_VERSION__: JSON.stringify(ctx.nuxt._version),",
      "237:     'process.env.VUE_ENV': JSON.stringify(ctx.name),",
      "238:     'process.browser': ctx.isClient,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "237:     'process.test': isTest,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "24bedc5e56e76f8560e727718773284f633475dc",
      "candidate_info": {
        "commit_hash": "24bedc5e56e76f8560e727718773284f633475dc",
        "repo": "nuxt/nuxt",
        "commit_url": "https://github.com/nuxt/nuxt/commit/24bedc5e56e76f8560e727718773284f633475dc",
        "files": [
          "packages/schema/src/config/common.ts",
          "packages/schema/src/config/vite.ts"
        ],
        "message": "perf(schema): avoid duplicate `get` operations (#24734)",
        "before_after_code_files": [
          "packages/schema/src/config/common.ts||packages/schema/src/config/common.ts",
          "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts"
          ],
          "candidate": [
            "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/schema/src/config/common.ts||packages/schema/src/config/common.ts": [
          "File: packages/schema/src/config/common.ts -> packages/schema/src/config/common.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   workspaceDir: {",
          "54:   },",
          "",
          "[Removed Lines]",
          "53:     $resolve: async (val, get) => val ? resolve(await get('rootDir'), val) : await findWorkspaceDir(await get('rootDir')).catch(() => get('rootDir'))",
          "",
          "[Added Lines]",
          "53:     $resolve: async (val, get) => {",
          "54:       const rootDir = await get('rootDir')",
          "55:       return val ? resolve(rootDir, val) : await findWorkspaceDir(rootDir).catch(() => rootDir)",
          "56:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:   alias: {",
          "317:   },",
          "",
          "[Removed Lines]",
          "308:     $resolve: async (val, get) => ({",
          "309:       '~': await get('srcDir'),",
          "310:       '@': await get('srcDir'),",
          "311:       '~~': await get('rootDir'),",
          "312:       '@@': await get('rootDir'),",
          "313:       [await get('dir.assets')]: join(await get('srcDir'), await get('dir.assets')),",
          "314:       [await get('dir.public')]: join(await get('srcDir'), await get('dir.public')),",
          "315:       ...val",
          "316:     })",
          "",
          "[Added Lines]",
          "311:     $resolve: async (val, get) => {",
          "312:       const srcDir = await get('srcDir')",
          "313:       const rootDir = await get('rootDir')",
          "314:       const dirAssets = await get('dir.assets')",
          "315:       const dirPublic = await get('dir.public')",
          "316:       return {",
          "317:         '~': srcDir,",
          "318:         '@': srcDir,",
          "319:         '~~': rootDir,",
          "320:         '@@': rootDir,",
          "321:         [dirAssets]: join(srcDir, dirAssets),",
          "322:         [dirPublic]: join(srcDir, dirPublic),",
          "323:         ...val",
          "324:       }",
          "325:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "344:   ignore: {",
          "354:   },",
          "",
          "[Removed Lines]",
          "345:     $resolve: async (val, get) => [",
          "346:       '**/*.stories.{js,cts,mts,ts,jsx,tsx}', // ignore storybook files",
          "347:       '**/*.{spec,test}.{js,cts,mts,ts,jsx,tsx}', // ignore tests",
          "348:       '**/*.d.{cts,mts,ts}', // ignore type declarations",
          "349:       '**/.{pnpm-store,vercel,netlify,output,git,cache,data}',",
          "350:       relative(await get('rootDir'), await get('analyzeDir')),",
          "351:       relative(await get('rootDir'), await get('buildDir')),",
          "352:       await get('ignorePrefix') && `**/${await get('ignorePrefix')}*.*`",
          "353:     ].concat(val).filter(Boolean)",
          "",
          "[Added Lines]",
          "354:     $resolve: async (val, get) => {",
          "355:       const rootDir = await get('rootDir')",
          "356:       const ignorePrefix = await get('ignorePrefix')",
          "357:       return [",
          "358:         '**/*.stories.{js,cts,mts,ts,jsx,tsx}', // ignore storybook files",
          "359:         '**/*.{spec,test}.{js,cts,mts,ts,jsx,tsx}', // ignore tests",
          "360:         '**/*.d.{cts,mts,ts}', // ignore type declarations",
          "361:         '**/.{pnpm-store,vercel,netlify,output,git,cache,data}',",
          "362:         relative(rootDir, await get('analyzeDir')),",
          "363:         relative(rootDir, await get('buildDir')),",
          "364:         ignorePrefix && `**/${ignorePrefix}*.*`",
          "365:       ].concat(val).filter(Boolean)",
          "366:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "445:   runtimeConfig: {",
          "446:     $resolve: async (val: RuntimeConfig, get) => {",
          "447:       provideFallbackValues(val)",
          "448:       return defu(val, {",
          "449:         public: {},",
          "450:         app: {",
          "454:         }",
          "455:       })",
          "456:     }",
          "",
          "[Removed Lines]",
          "451:           baseURL: (await get('app')).baseURL,",
          "452:           buildAssetsDir: (await get('app')).buildAssetsDir,",
          "453:           cdnURL: (await get('app')).cdnURL",
          "",
          "[Added Lines]",
          "460:       const app = await get('app')",
          "465:           baseURL: app.baseURL,",
          "466:           buildAssetsDir: app.buildAssetsDir,",
          "467:           cdnURL: app.cdnURL",
          "",
          "---------------"
        ],
        "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts": [
          "File: packages/schema/src/config/vite.ts -> packages/schema/src/config/vite.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:       $resolve: async (val, get) => val ?? (await get('dev') ? 'development' : 'production')",
          "21:     },",
          "22:     define: {",
          "30:     },",
          "31:     resolve: {",
          "32:       extensions: ['.mjs', '.js', '.ts', '.jsx', '.tsx', '.json', '.vue']",
          "",
          "[Removed Lines]",
          "23:       $resolve: async (val, get) => ({",
          "24:         'process.dev': await get('dev'),",
          "25:         'import.meta.dev': await get('dev'),",
          "26:         'process.test': isTest,",
          "27:         'import.meta.test': isTest,",
          "28:         ...val",
          "29:       })",
          "",
          "[Added Lines]",
          "23:       $resolve: async (val, get) => {",
          "24:         const dev = await get('dev')",
          "25:         return {",
          "26:           'process.dev': dev,",
          "27:           'import.meta.dev': dev,",
          "28:           'process.test': isTest,",
          "29:           'import.meta.test': isTest,",
          "30:           ...val",
          "31:         }",
          "32:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "758ae767096e6d2f48d6acd8b6078728c6163f02",
      "candidate_info": {
        "commit_hash": "758ae767096e6d2f48d6acd8b6078728c6163f02",
        "repo": "nuxt/nuxt",
        "commit_url": "https://github.com/nuxt/nuxt/commit/758ae767096e6d2f48d6acd8b6078728c6163f02",
        "files": [
          "packages/schema/src/config/vite.ts",
          "packages/vite/src/client.ts",
          "packages/vite/src/server.ts",
          "packages/vite/src/vite.ts",
          "vitest.nuxt.config.ts"
        ],
        "message": "fix(vite): include `import.meta` build vars in `define` as well (#22576)",
        "before_after_code_files": [
          "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts",
          "packages/vite/src/client.ts||packages/vite/src/client.ts",
          "packages/vite/src/server.ts||packages/vite/src/server.ts",
          "packages/vite/src/vite.ts||packages/vite/src/vite.ts",
          "vitest.nuxt.config.ts||vitest.nuxt.config.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts"
          ],
          "candidate": [
            "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts": [
          "File: packages/schema/src/config/vite.ts -> packages/schema/src/config/vite.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     define: {",
          "23:       $resolve: async (val, get) => ({",
          "24:         'process.dev': await get('dev'),",
          "25:         'process.test': isTest,",
          "26:         ...val || {}",
          "27:       })",
          "28:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:         'import.meta.dev': await get('dev'),",
          "27:         'import.meta.test': isTest,",
          "",
          "---------------"
        ],
        "packages/vite/src/client.ts||packages/vite/src/client.ts": [
          "File: packages/vite/src/client.ts -> packages/vite/src/client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:       'process.browser': true,",
          "45:       'process.nitro': false,",
          "46:       'process.prerender': false,",
          "47:       'module.hot': false",
          "48:     },",
          "49:     optimizeDeps: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:       'import.meta.server': false,",
          "48:       'import.meta.client': true,",
          "49:       'import.meta.browser': true,",
          "50:       'import.meta.nitro': false,",
          "51:       'import.meta.prerender': false,",
          "",
          "---------------"
        ],
        "packages/vite/src/server.ts||packages/vite/src/server.ts": [
          "File: packages/vite/src/server.ts -> packages/vite/src/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:       'process.server': true,",
          "44:       'process.client': false,",
          "45:       'process.browser': false,",
          "46:       'typeof window': '\"undefined\"',",
          "47:       'typeof document': '\"undefined\"',",
          "48:       'typeof navigator': '\"undefined\"',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:       'import.meta.server': true,",
          "47:       'import.meta.client': false,",
          "48:       'import.meta.browser': false,",
          "",
          "---------------"
        ],
        "packages/vite/src/vite.ts||packages/vite/src/vite.ts": [
          "File: packages/vite/src/vite.ts -> packages/vite/src/vite.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   nuxt.hook('vite:extendConfig', (config) => {",
          "146:     config.plugins!.push(replace({",
          "147:       preventAssignment: true,",
          "149:     }))",
          "150:   })",
          "",
          "[Removed Lines]",
          "148:       ...Object.fromEntries(Object.entries(config.define!).filter(([key]) => key.startsWith('process.')).map(([key, value]) => [key.replace('process.', 'import.meta.'), JSON.stringify(value)]))",
          "",
          "[Added Lines]",
          "148:       ...Object.fromEntries(Object.entries(config.define!).filter(([key]) => key.startsWith('import.meta.')))",
          "",
          "---------------"
        ],
        "vitest.nuxt.config.ts||vitest.nuxt.config.ts": [
          "File: vitest.nuxt.config.ts -> vitest.nuxt.config.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:   test: {",
          "5:     dir: './test/nuxt',",
          "6:     environment: 'nuxt'",
          "11:   }",
          "12: })",
          "",
          "[Removed Lines]",
          "7:   },",
          "8:   define: {",
          "9:     'import.meta.client': true,",
          "10:     'import.meta.server': false",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d6576949607debc3a4b33101cfe4920f916ddf9",
      "candidate_info": {
        "commit_hash": "7d6576949607debc3a4b33101cfe4920f916ddf9",
        "repo": "nuxt/nuxt",
        "commit_url": "https://github.com/nuxt/nuxt/commit/7d6576949607debc3a4b33101cfe4920f916ddf9",
        "files": [
          ".github/workflows/ci.yml",
          ".github/workflows/scorecards.yml",
          "docs/1.getting-started/3.configuration.md",
          "docs/5.community/6.roadmap.md",
          "package.json",
          "packages/kit/package.json",
          "packages/nuxt/package.json",
          "packages/nuxt/src/core/schema.ts",
          "packages/schema/package.json",
          "packages/schema/src/config/app.ts",
          "packages/schema/src/config/build.ts",
          "packages/schema/src/config/common.ts",
          "packages/schema/src/config/experimental.ts",
          "packages/schema/src/config/nitro.ts",
          "packages/schema/src/config/vite.ts",
          "packages/schema/src/config/webpack.ts",
          "packages/vite/package.json",
          "packages/webpack/package.json",
          "pnpm-lock.yaml",
          "test/bundle.test.ts"
        ],
        "message": "chore(deps): update all non-major dependencies (main) (#25342)\n\nCo-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>\nCo-authored-by: Daniel Roe <daniel@roe.dev>",
        "before_after_code_files": [
          "packages/nuxt/src/core/schema.ts||packages/nuxt/src/core/schema.ts",
          "packages/schema/src/config/app.ts||packages/schema/src/config/app.ts",
          "packages/schema/src/config/build.ts||packages/schema/src/config/build.ts",
          "packages/schema/src/config/common.ts||packages/schema/src/config/common.ts",
          "packages/schema/src/config/experimental.ts||packages/schema/src/config/experimental.ts",
          "packages/schema/src/config/nitro.ts||packages/schema/src/config/nitro.ts",
          "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts",
          "packages/schema/src/config/webpack.ts||packages/schema/src/config/webpack.ts",
          "test/bundle.test.ts||test/bundle.test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts"
          ],
          "candidate": [
            "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/nuxt/src/core/schema.ts||packages/nuxt/src/core/schema.ts": [
          "File: packages/nuxt/src/core/schema.ts -> packages/nuxt/src/core/schema.ts"
        ],
        "packages/schema/src/config/app.ts||packages/schema/src/config/app.ts": [
          "File: packages/schema/src/config/app.ts -> packages/schema/src/config/app.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     head: {",
          "103:           meta: [],",
          "104:           link: [],",
          "105:           style: [],",
          "106:           script: [],",
          "107:           noscript: []",
          "111:         if (!resolved.meta.find(m => m.charset)?.charset) {",
          "",
          "[Removed Lines]",
          "101:       $resolve: async (val, get) => {",
          "102:         const resolved: Required<AppHeadMetaObject> = defu(val, await get('meta'), {",
          "108:         })",
          "",
          "[Added Lines]",
          "101:       $resolve: async (val: Partial<AppHeadMetaObject> | undefined, get) => {",
          "102:         const resolved = defu(val, await get('meta') as Partial<AppHeadMetaObject>, {",
          "108:         } as Required<Pick<AppHeadMetaObject, 'meta' | 'link' | 'style' | 'script' | 'noscript'>>)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:   spaLoadingTemplate: {",
          "244:   },",
          "",
          "[Removed Lines]",
          "243:     $resolve: async (val, get) => typeof val === 'string' ? resolve(await get('srcDir'), val) : val ?? null",
          "",
          "[Added Lines]",
          "243:     $resolve: async (val: string | boolean | undefined, get) => typeof val === 'string' ? resolve(await get('srcDir') as string, val) : val ?? null",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "293:   css: {",
          "295:   }",
          "296: })",
          "",
          "[Removed Lines]",
          "294:     $resolve: val => (val ?? []).map((c: any) => c.src || c)",
          "",
          "[Added Lines]",
          "294:     $resolve: (val: string[] | undefined) => (val ?? []).map((c: any) => c.src || c)",
          "",
          "---------------"
        ],
        "packages/schema/src/config/build.ts||packages/schema/src/config/build.ts": [
          "File: packages/schema/src/config/build.ts -> packages/schema/src/config/build.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   builder: {",
          "14:       if (typeof val === 'object') {",
          "15:         return val",
          "16:       }",
          "",
          "[Removed Lines]",
          "13:     $resolve: async (val, get) => {",
          "",
          "[Added Lines]",
          "13:     $resolve: async (val: 'vite' | 'webpack' | { bundle: (nuxt: unknown) => Promise<void> } | undefined = 'vite', get) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:   sourcemap: {",
          "31:       if (typeof val === 'boolean') {",
          "32:         return { server: val, client: val }",
          "33:       }",
          "",
          "[Removed Lines]",
          "30:     $resolve: async (val, get) => {",
          "",
          "[Added Lines]",
          "30:     $resolve: async (val: boolean | { server?: boolean | 'hidden', client?: boolean | 'hidden' } | undefined, get) => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:   logLevel: {",
          "50:       if (val && !['silent', 'info', 'verbose'].includes(val)) {",
          "51:         consola.warn(`Invalid \\`logLevel\\` option: \\`${val}\\`. Must be one of: \\`silent\\`, \\`info\\`, \\`verbose\\`.`)",
          "52:       }",
          "",
          "[Removed Lines]",
          "49:     $resolve: (val) => {",
          "",
          "[Added Lines]",
          "49:     $resolve: (val: string | undefined) => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "73:     transpile: {",
          "75:     },",
          "",
          "[Removed Lines]",
          "74:       $resolve: val => [].concat(val).filter(Boolean)",
          "",
          "[Added Lines]",
          "74:       $resolve: (val: Array<string | RegExp | ((ctx: { isClient?: boolean; isServer?: boolean; isDev: boolean }) => string | RegExp | false)> | undefined) => (val || []).filter(Boolean)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:     analyze: {",
          "114:         return defu(typeof val === 'boolean' ? { enabled: val } : val, {",
          "115:           template: 'treemap',",
          "116:           projectRoot: rootDir,",
          "",
          "[Removed Lines]",
          "112:       $resolve: async (val, get) => {",
          "113:         const [rootDir, analyzeDir] = await Promise.all([get('rootDir'), get('analyzeDir')])",
          "",
          "[Added Lines]",
          "112:       $resolve: async (val: boolean | { enabled?: boolean } | Record<string, unknown>, get) => {",
          "113:         const [rootDir, analyzeDir] = await Promise.all([get('rootDir'), get('analyzeDir')]) as [string, string]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "137:     keyedComposables: {",
          "139:         { name: 'callOnce', argumentLength: 2 },",
          "140:         { name: 'defineNuxtComponent', argumentLength: 2 },",
          "141:         { name: 'useState', argumentLength: 2 },",
          "142:         { name: 'useFetch', argumentLength: 3 },",
          "143:         { name: 'useAsyncData', argumentLength: 3 },",
          "144:         { name: 'useLazyAsyncData', argumentLength: 3 },",
          "147:     },",
          "",
          "[Removed Lines]",
          "138:       $resolve: val => [",
          "145:         { name: 'useLazyFetch', argumentLength: 3 }",
          "146:       ].concat(val).filter(Boolean)",
          "",
          "[Added Lines]",
          "138:       $resolve: (val: Array<{ name: string, argumentLength: string }> | undefined) => [",
          "145:         { name: 'useLazyFetch', argumentLength: 3 },",
          "146:         ...val || []",
          "147:       ].filter(Boolean)",
          "",
          "---------------"
        ],
        "packages/schema/src/config/common.ts||packages/schema/src/config/common.ts": [
          "File: packages/schema/src/config/common.ts -> packages/schema/src/config/common.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   workspaceDir: {",
          "55:       return val ? resolve(rootDir, val) : await findWorkspaceDir(rootDir).catch(() => rootDir)",
          "56:     }",
          "57:   },",
          "",
          "[Removed Lines]",
          "53:     $resolve: async (val, get) => {",
          "54:       const rootDir = await get('rootDir')",
          "",
          "[Added Lines]",
          "53:     $resolve: async (val: string | undefined, get): Promise<string> => {",
          "54:       const rootDir = await get('rootDir') as string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   srcDir: {",
          "92:   },",
          "",
          "[Removed Lines]",
          "91:     $resolve: async (val, get) => resolve(await get('rootDir'), val || '.')",
          "",
          "[Added Lines]",
          "91:     $resolve: async (val: string | undefined, get): Promise<string> => resolve(await get('rootDir') as string, val || '.')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:   serverDir: {",
          "103:   },",
          "",
          "[Removed Lines]",
          "102:     $resolve: async (val, get) => resolve(await get('rootDir'), val || resolve(await get('srcDir'), 'server'))",
          "",
          "[Added Lines]",
          "102:     $resolve: async (val: string | undefined, get): Promise<string> => resolve(await get('rootDir') as string, val || resolve(await get('srcDir') as string, 'server'))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:   buildDir: {",
          "119:   },",
          "",
          "[Removed Lines]",
          "118:     $resolve: async (val, get) => resolve(await get('rootDir'), val || '.nuxt')",
          "",
          "[Added Lines]",
          "118:     $resolve: async (val: string | undefined, get): Promise<string> => resolve(await get('rootDir') as string, val || '.nuxt')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:   modulesDir: {",
          "136:     $default: ['node_modules'],",
          "139:       return [",
          "141:         resolve(process.cwd(), 'node_modules')",
          "142:       ]",
          "143:     }",
          "",
          "[Removed Lines]",
          "137:     $resolve: async (val, get) => {",
          "138:       const rootDir = await get('rootDir')",
          "140:         ...await Promise.all(val.map(async (dir: string) => resolve(rootDir, dir))),",
          "",
          "[Added Lines]",
          "137:     $resolve: async (val: string[] | undefined, get): Promise<string[]> => {",
          "138:       const rootDir = await get('rootDir') as string",
          "140:         ...await Promise.all((val || []).map(async (dir: string) => resolve(rootDir, dir))),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "151:   analyzeDir: {",
          "155:   },",
          "",
          "[Removed Lines]",
          "152:     $resolve: async (val, get) => val",
          "153:       ? resolve(await get('rootDir'), val)",
          "154:       : resolve(await get('buildDir'), 'analyze')",
          "",
          "[Added Lines]",
          "152:     $resolve: async (val: string | undefined, get): Promise<string> => val",
          "153:       ? resolve(await get('rootDir') as string, val)",
          "154:       : resolve(await get('buildDir') as string, 'analyze')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "212:   modules: {",
          "214:   },",
          "",
          "[Removed Lines]",
          "213:     $resolve: val => [].concat(val).filter(Boolean)",
          "",
          "[Added Lines]",
          "213:     $resolve: (val: string[] | undefined): string[] => (val || []).filter(Boolean)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "269:   extensions: {",
          "271:   },",
          "",
          "[Removed Lines]",
          "270:     $resolve: val => ['.js', '.jsx', '.mjs', '.ts', '.tsx', '.vue'].concat(val).filter(Boolean)",
          "",
          "[Added Lines]",
          "270:     $resolve: (val: string[] | undefined): string[] => ['.js', '.jsx', '.mjs', '.ts', '.tsx', '.vue', ...val || []].filter(Boolean)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "313:   alias: {",
          "316:       return {",
          "317:         '~': srcDir,",
          "318:         '@': srcDir,",
          "",
          "[Removed Lines]",
          "314:     $resolve: async (val, get) => {",
          "315:       const [srcDir, rootDir, assetsDir, publicDir] = await Promise.all([get('srcDir'), get('rootDir'), get('dir.assets'), get('dir.public')])",
          "",
          "[Added Lines]",
          "314:     $resolve: async (val: Record<string, string>, get): Promise<Record<string, string>> => {",
          "315:       const [srcDir, rootDir, assetsDir, publicDir] = await Promise.all([get('srcDir'), get('rootDir'), get('dir.assets'), get('dir.public')]) as [string, string, string, string]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "353:   ignore: {",
          "356:       return [",
          "357:         '**/*.stories.{js,cts,mts,ts,jsx,tsx}', // ignore storybook files",
          "358:         '**/*.{spec,test}.{js,cts,mts,ts,jsx,tsx}', // ignore tests",
          "",
          "[Removed Lines]",
          "354:     $resolve: async (val, get) => {",
          "355:       const [rootDir, ignorePrefix, analyzeDir, buildDir] = await Promise.all([get('rootDir'), get('ignorePrefix'), get('analyzeDir'), get('buildDir')])",
          "",
          "[Added Lines]",
          "354:     $resolve: async (val: string[] | undefined, get): Promise<string[]> => {",
          "355:       const [rootDir, ignorePrefix, analyzeDir, buildDir] = await Promise.all([get('rootDir'), get('ignorePrefix'), get('analyzeDir'), get('buildDir')]) as [string, string, string, string]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "360:         '**/.{pnpm-store,vercel,netlify,output,git,cache,data}',",
          "361:         relative(rootDir, analyzeDir),",
          "362:         relative(rootDir, buildDir),",
          "365:     }",
          "366:   },",
          "",
          "[Removed Lines]",
          "363:         ignorePrefix && `**/${ignorePrefix}*.*`",
          "364:       ].concat(val).filter(Boolean)",
          "",
          "[Added Lines]",
          "363:         ignorePrefix && `**/${ignorePrefix}*.*`,",
          "364:         ...val || []",
          "365:       ].filter(Boolean)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "376:   watch: {",
          "378:   },",
          "",
          "[Removed Lines]",
          "377:     $resolve: val => [].concat(val).filter((b: unknown) => typeof b === 'string' || b instanceof RegExp)",
          "",
          "[Added Lines]",
          "378:     $resolve: (val: Array<unknown> | undefined) => {",
          "379:       return (val || []).filter((b: unknown) => typeof b === 'string' || b instanceof RegExp)",
          "380:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "457:   runtimeConfig: {",
          "460:       provideFallbackValues(val)",
          "461:       return defu(val, {",
          "462:         public: {},",
          "",
          "[Removed Lines]",
          "458:     $resolve: async (val: RuntimeConfig, get) => {",
          "459:       const app = await get('app')",
          "",
          "[Added Lines]",
          "461:     $resolve: async (val: RuntimeConfig, get): Promise<Record<string, unknown>> => {",
          "462:       const app = await get('app') as Record<string, string>",
          "",
          "---------------"
        ],
        "packages/schema/src/config/experimental.ts||packages/schema/src/config/experimental.ts": [
          "File: packages/schema/src/config/experimental.ts -> packages/schema/src/config/experimental.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     typescriptBundlerResolution: {",
          "20:       async $resolve (val, get) {",
          "23:         if (typeof val === 'boolean') { return val }",
          "25:         if (setting) {",
          "26:           return setting.toLowerCase() === 'bundler'",
          "27:         }",
          "",
          "[Removed Lines]",
          "22:         val = val ?? await get('experimental').then((e: Record<string, any>) => e?.typescriptBundlerResolution)",
          "24:         const setting = await get('typescript.tsConfig.compilerOptions.moduleResolution')",
          "",
          "[Added Lines]",
          "22:         val = val ?? await (get('experimental') as Promise<Record<string, any>>).then(e => e?.typescriptBundlerResolution)",
          "24:         const setting = await get('typescript.tsConfig.compilerOptions.moduleResolution') as string | undefined",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     inlineStyles: {",
          "44:       async $resolve (val, get) {",
          "47:         if (val === false || (await get('dev')) || (await get('ssr')) === false || (await get('builder')) === '@nuxt/webpack-builder') {",
          "48:           return false",
          "49:         }",
          "",
          "[Removed Lines]",
          "46:         val = val ?? await get('experimental').then((e: Record<string, any>) => e?.inlineSSRStyles)",
          "",
          "[Added Lines]",
          "46:         val = val ?? await (get('experimental') as Promise<Record<string, any>>).then((e: Record<string, any>) => e?.inlineSSRStyles)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:     noScripts: {",
          "60:       async $resolve (val, get) {",
          "63:       }",
          "64:     },",
          "65:   },",
          "",
          "[Removed Lines]",
          "62:         return val ?? await get('experimental').then((e: Record<string, any>) => e?.noScripts) ?? false",
          "",
          "[Added Lines]",
          "62:         return val ?? await (get('experimental') as Promise<Record<string, any>>).then((e: Record<string, any>) => e?.noScripts) ?? false",
          "",
          "---------------"
        ],
        "packages/schema/src/config/nitro.ts||packages/schema/src/config/nitro.ts": [
          "File: packages/schema/src/config/nitro.ts -> packages/schema/src/config/nitro.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   nitro: {",
          "10:     routeRules: {",
          "13:         ...val",
          "14:       })",
          "15:     }",
          "",
          "[Removed Lines]",
          "11:       $resolve: async (val, get) => ({",
          "12:         ...await get('routeRules'),",
          "",
          "[Added Lines]",
          "11:       $resolve: async (val: Record<string, any> | undefined, get) => ({",
          "12:         ...await get('routeRules') as Record<string, any>,",
          "",
          "---------------"
        ],
        "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts": [
          "File: packages/schema/src/config/vite.ts -> packages/schema/src/config/vite.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:       $resolve: async (val, get) => val ?? (await get('dev') ? 'development' : 'production')",
          "21:     },",
          "22:     define: {",
          "25:         return {",
          "26:           __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: isDebug,",
          "27:           'process.dev': isDev,",
          "",
          "[Removed Lines]",
          "23:       $resolve: async (val, get) => {",
          "24:         const [isDev, isDebug] = await Promise.all([get('dev'), get('debug')])",
          "",
          "[Added Lines]",
          "23:       $resolve: async (val: Record<string, any> | undefined, get) => {",
          "24:         const [isDev, isDebug] = await Promise.all([get('dev'), get('debug')]) as [boolean, boolean]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:         if (val) {",
          "41:           consola.warn('Directly configuring the `vite.publicDir` option is not supported. Instead, set `dir.public`. You can read more in `https://nuxt.com/docs/api/nuxt-config#public`.')",
          "42:         }",
          "44:       }",
          "45:     },",
          "46:     vue: {",
          "",
          "[Removed Lines]",
          "43:         return val ?? await Promise.all([get('srcDir'), get('dir')]).then(([srcDir, dir]) => resolve(srcDir, dir.public))",
          "",
          "[Added Lines]",
          "43:         return val ?? await Promise.all([get('srcDir') as Promise<string>, get('dir') as Promise<Record<string, string>>]).then(([srcDir, dir]) => resolve(srcDir, dir.public))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:       },",
          "50:       template: {",
          "51:         compilerOptions: {",
          "53:         }",
          "54:       },",
          "55:       script: {",
          "56:         propsDestructure: {",
          "58:         }",
          "59:       }",
          "60:     },",
          "61:     vueJsx: {",
          "63:         return {",
          "65:           ...val",
          "66:         }",
          "67:       }",
          "68:     },",
          "69:     optimizeDeps: {",
          "70:       exclude: {",
          "72:           ...val || [],",
          "74:           'vue-demi'",
          "75:         ]",
          "76:       }",
          "",
          "[Removed Lines]",
          "52:           $resolve: async (val, get) => val ?? (await get('vue')).compilerOptions",
          "57:           $resolve: async (val, get) => val ?? Boolean((await get('vue')).propsDestructure)",
          "62:       $resolve: async (val, get) => {",
          "64:           isCustomElement: (await get('vue')).compilerOptions?.isCustomElement,",
          "71:         $resolve: async (val, get) => [",
          "73:           ...(await get('build.transpile')).filter((i: string) => typeof i === 'string'),",
          "",
          "[Added Lines]",
          "52:           $resolve: async (val, get) => val ?? (await get('vue') as Record<string, any>).compilerOptions",
          "57:           $resolve: async (val, get) => val ?? Boolean((await get('vue') as Record<string, any>).propsDestructure)",
          "62:       $resolve: async (val: Record<string, any>, get) => {",
          "64:           isCustomElement: (await get('vue') as Record<string, any>).compilerOptions?.isCustomElement,",
          "71:         $resolve: async (val: string[] | undefined, get) => [",
          "73:           ...(await get('build.transpile') as Array<string | RegExp | ((ctx: { isClient?: boolean; isServer?: boolean; isDev: boolean }) => string | RegExp | false)>).filter((i) => typeof i === 'string'),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:     clearScreen: true,",
          "84:     build: {",
          "85:       assetsDir: {",
          "87:       },",
          "88:       emptyOutDir: false",
          "89:     },",
          "90:     server: {",
          "91:       fs: {",
          "92:         allow: {",
          "95:             return [",
          "96:               buildDir,",
          "97:               srcDir,",
          "",
          "[Removed Lines]",
          "86:         $resolve: async (val, get) => val ?? withoutLeadingSlash((await get('app')).buildAssetsDir)",
          "93:           $resolve: async (val, get) => {",
          "94:             const [buildDir, srcDir, rootDir, workspaceDir, modulesDir] = await Promise.all([get('buildDir'), get('srcDir'), get('rootDir'), get('workspaceDir'), get('modulesDir')])",
          "",
          "[Added Lines]",
          "86:         $resolve: async (val, get) => val ?? withoutLeadingSlash((await get('app') as Record<string, string>).buildAssetsDir)",
          "93:           $resolve: async (val: string[] | undefined, get) => {",
          "94:             const [buildDir, srcDir, rootDir, workspaceDir, modulesDir] = await Promise.all([get('buildDir'), get('srcDir'), get('rootDir'), get('workspaceDir'), get('modulesDir')]) as [string, string, string, string, string]",
          "",
          "---------------"
        ],
        "packages/schema/src/config/webpack.ts||packages/schema/src/config/webpack.ts": [
          "File: packages/schema/src/config/webpack.ts -> packages/schema/src/config/webpack.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     analyze: {",
          "21:       }",
          "22:     },",
          "",
          "[Removed Lines]",
          "19:       $resolve: async (val, get) => {",
          "20:         return defu(val, await get('build.analyze'))",
          "",
          "[Added Lines]",
          "19:       $resolve: async (val: boolean | { enabled?: boolean } | Record<string, unknown>, get) => {",
          "20:         const value = typeof val === 'boolean' ? { enabled: val } : val",
          "21:         return defu(value, await get('build.analyze') as { enabled?: boolean } | Record<string, unknown>)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:     loaders: {",
          "139:       $resolve: async (val, get) => {",
          "140:         const styleLoaders = [",
          "141:           'css', 'cssModules', 'less',",
          "142:           'sass', 'scss', 'stylus', 'vueStyle'",
          "143:         ]",
          "144:         for (const name of styleLoaders) {",
          "146:           if (loader && loader.sourceMap === undefined) {",
          "147:             loader.sourceMap = Boolean(await get('build.cssSourceMap'))",
          "148:           }",
          "149:         }",
          "151:       },",
          "",
          "[Removed Lines]",
          "145:           const loader = val[name]",
          "150:         return val",
          "",
          "[Added Lines]",
          "141:         const loaders: Record<string, any> = val && typeof val === 'object' ? val : {}",
          "147:           const loader = loaders[name]",
          "152:         return loaders",
          "",
          "---------------"
        ],
        "test/bundle.test.ts||test/bundle.test.ts": [
          "File: test/bundle.test.ts -> test/bundle.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     expect.soft(roundToKilobytes(serverStats.totalBytes)).toMatchInlineSnapshot(`\"201k\"`)",
          "37:     const modules = await analyzeSizes('node_modules/**/*', serverDir)",
          "40:     const packages = modules.files",
          "41:       .filter(m => m.endsWith('package.json'))",
          "",
          "[Removed Lines]",
          "38:     expect.soft(roundToKilobytes(modules.totalBytes)).toMatchInlineSnapshot(`\"1337k\"`)",
          "",
          "[Added Lines]",
          "38:     expect.soft(roundToKilobytes(modules.totalBytes)).toMatchInlineSnapshot(`\"1331k\"`)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     const serverDir = join(rootDir, '.output-inline/server')",
          "74:     const serverStats = await analyzeSizes(['**/*.mjs', '!node_modules'], serverDir)",
          "77:     const modules = await analyzeSizes('node_modules/**/*', serverDir)",
          "78:     expect.soft(roundToKilobytes(modules.totalBytes)).toMatchInlineSnapshot(`\"77.2k\"`)",
          "",
          "[Removed Lines]",
          "75:     expect.soft(roundToKilobytes(serverStats.totalBytes)).toMatchInlineSnapshot(`\"519k\"`)",
          "",
          "[Added Lines]",
          "75:     expect.soft(roundToKilobytes(serverStats.totalBytes)).toMatchInlineSnapshot(`\"520k\"`)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5a44fb20a74bcfb1dd0172e81edd36713080498",
      "candidate_info": {
        "commit_hash": "f5a44fb20a74bcfb1dd0172e81edd36713080498",
        "repo": "nuxt/nuxt",
        "commit_url": "https://github.com/nuxt/nuxt/commit/f5a44fb20a74bcfb1dd0172e81edd36713080498",
        "files": [
          "packages/nuxt/test/auto-imports.test.ts",
          "packages/schema/src/config/vite.ts"
        ],
        "message": "fix(nuxt): add `__VUE_PROD_HYDRATION_MISMATCH_DETAILS__` (#24836)",
        "before_after_code_files": [
          "packages/nuxt/test/auto-imports.test.ts||packages/nuxt/test/auto-imports.test.ts",
          "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts"
          ],
          "candidate": [
            "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/nuxt/test/auto-imports.test.ts||packages/nuxt/test/auto-imports.test.ts": [
          "File: packages/nuxt/test/auto-imports.test.ts -> packages/nuxt/test/auto-imports.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:   'Transition',",
          "163:   'TransitionGroup',",
          "164:   'VueElement',",
          "165:   'createApp',",
          "166:   'createSSRApp',",
          "167:   'defineCustomElement',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:   'ErrorTypeStrings',",
          "",
          "---------------"
        ],
        "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts": [
          "File: packages/schema/src/config/vite.ts -> packages/schema/src/config/vite.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     },",
          "22:     define: {",
          "23:       $resolve: async (val, get) => {",
          "25:         return {",
          "28:           'process.test': isTest,",
          "29:           'import.meta.test': isTest,",
          "30:           ...val",
          "",
          "[Removed Lines]",
          "24:         const dev = await get('dev')",
          "26:           'process.dev': dev,",
          "27:           'import.meta.dev': dev,",
          "",
          "[Added Lines]",
          "24:         const [isDev, isDebug] = await Promise.all([get('dev'), get('debug')])",
          "26:           __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: isDebug,",
          "27:           'process.dev': isDev,",
          "28:           'import.meta.dev': isDev,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27791f4c3350e2baa1a55c7be71bfbc02a7662b5",
      "candidate_info": {
        "commit_hash": "27791f4c3350e2baa1a55c7be71bfbc02a7662b5",
        "repo": "nuxt/nuxt",
        "commit_url": "https://github.com/nuxt/nuxt/commit/27791f4c3350e2baa1a55c7be71bfbc02a7662b5",
        "files": [
          "packages/nuxt/src/app/components/nuxt-root.vue",
          "packages/nuxt/src/components/loader.ts",
          "packages/nuxt/src/components/runtime/server-component.ts",
          "packages/nuxt/src/components/templates.ts",
          "packages/nuxt/src/pages/runtime/composables.ts",
          "packages/vite/src/client.ts",
          "packages/vite/src/plugins/pure-annotations.ts",
          "packages/vite/src/server.ts"
        ],
        "message": "perf(nuxt): remove pure annotations plugin (#24033)",
        "before_after_code_files": [
          "packages/nuxt/src/app/components/nuxt-root.vue||packages/nuxt/src/app/components/nuxt-root.vue",
          "packages/nuxt/src/components/loader.ts||packages/nuxt/src/components/loader.ts",
          "packages/nuxt/src/components/runtime/server-component.ts||packages/nuxt/src/components/runtime/server-component.ts",
          "packages/nuxt/src/components/templates.ts||packages/nuxt/src/components/templates.ts",
          "packages/nuxt/src/pages/runtime/composables.ts||packages/nuxt/src/pages/runtime/composables.ts",
          "packages/vite/src/client.ts||packages/vite/src/client.ts",
          "packages/vite/src/plugins/pure-annotations.ts||packages/vite/src/plugins/pure-annotations.ts",
          "packages/vite/src/server.ts||packages/vite/src/server.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/nuxt/src/app/components/nuxt-root.vue||packages/nuxt/src/app/components/nuxt-root.vue"
          ],
          "candidate": [
            "packages/nuxt/src/app/components/nuxt-root.vue||packages/nuxt/src/app/components/nuxt-root.vue"
          ]
        }
      },
      "candidate_diff": {
        "packages/nuxt/src/app/components/nuxt-root.vue||packages/nuxt/src/app/components/nuxt-root.vue": [
          "File: packages/nuxt/src/app/components/nuxt-root.vue -> packages/nuxt/src/app/components/nuxt-root.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: const onResolve = nuxtApp.deferHydration()",
          "26: const url = import.meta.server ? nuxtApp.ssrContext.url : window.location.pathname",
          "28:   .then(r => r.default(import.meta.server ? url : window.location.href)))",
          "",
          "[Removed Lines]",
          "27: const SingleRenderer = import.meta.test && import.meta.dev && import.meta.server && url.startsWith('/__nuxt_component_test__/') && /* #__PURE__ */ defineAsyncComponent(() => import('#build/test-component-wrapper.mjs')",
          "",
          "[Added Lines]",
          "27: const SingleRenderer = import.meta.test && import.meta.dev && import.meta.server && url.startsWith('/__nuxt_component_test__/') && defineAsyncComponent(() => import('#build/test-component-wrapper.mjs')",
          "",
          "---------------"
        ],
        "packages/nuxt/src/components/loader.ts||packages/nuxt/src/components/loader.ts": [
          "File: packages/nuxt/src/components/loader.ts -> packages/nuxt/src/components/loader.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:           if (lazy) {",
          "75:             imports.add(genImport('vue', [{ name: 'defineAsyncComponent', as: '__defineAsyncComponent' }]))",
          "76:             identifier += '_lazy'",
          "78:           } else {",
          "79:             imports.add(genImport(component.filePath, [{ name: component.export, as: identifier }]))",
          "81:             if (isClientOnly) {",
          "83:               identifier += '_wrapped'",
          "84:             }",
          "85:           }",
          "",
          "[Removed Lines]",
          "77:             imports.add(`const ${identifier} = /*#__PURE__*/ __defineAsyncComponent(${genDynamicImport(component.filePath, { interopDefault: true })}${isClientOnly ? '.then(c => createClientOnly(c))' : ''})`)",
          "82:               imports.add(`const ${identifier}_wrapped = /*#__PURE__*/ createClientOnly(${identifier})`)",
          "",
          "[Added Lines]",
          "77:             imports.add(`const ${identifier} = __defineAsyncComponent(${genDynamicImport(component.filePath, { interopDefault: true })}${isClientOnly ? '.then(c => createClientOnly(c))' : ''})`)",
          "82:               imports.add(`const ${identifier}_wrapped = createClientOnly(${identifier})`)",
          "",
          "---------------"
        ],
        "packages/nuxt/src/components/runtime/server-component.ts||packages/nuxt/src/components/runtime/server-component.ts": [
          "File: packages/nuxt/src/components/runtime/server-component.ts -> packages/nuxt/src/components/runtime/server-component.ts"
        ],
        "packages/nuxt/src/components/templates.ts||packages/nuxt/src/components/templates.ts": [
          "File: packages/nuxt/src/components/templates.ts -> packages/nuxt/src/components/templates.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:       (c) => {",
          "91:         const exp = c.export === 'default' ? 'c.default || c' : `c['${c.export}']`",
          "92:         const comment = createImportMagicComments(c)",
          "94:       }",
          "95:     )].join('\\n')",
          "96:   }",
          "",
          "[Removed Lines]",
          "93:         return `export const ${c.pascalName} = /* #__PURE__ */ defineAsyncComponent(${genDynamicImport(c.filePath, { comment })}.then(c => ${exp}))`",
          "",
          "[Added Lines]",
          "93:         return `export const ${c.pascalName} = defineAsyncComponent(${genDynamicImport(c.filePath, { comment })}.then(c => ${exp}))`",
          "",
          "---------------"
        ],
        "packages/nuxt/src/pages/runtime/composables.ts||packages/nuxt/src/pages/runtime/composables.ts": [
          "File: packages/nuxt/src/pages/runtime/composables.ts -> packages/nuxt/src/pages/runtime/composables.ts"
        ],
        "packages/vite/src/client.ts||packages/vite/src/client.ts": [
          "File: packages/vite/src/client.ts -> packages/vite/src/client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import { devStyleSSRPlugin } from './plugins/dev-ssr-css'",
          "16: import { runtimePathsPlugin } from './plugins/paths'",
          "17: import { typeCheckPlugin } from './plugins/type-check'",
          "19: import { viteNodePlugin } from './vite-node'",
          "20: import { createViteLogger } from './utils/logger'",
          "",
          "[Removed Lines]",
          "18: import { pureAnnotationsPlugin } from './plugins/pure-annotations'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:       runtimePathsPlugin({",
          "81:         sourcemap: !!ctx.nuxt.options.sourcemap.client",
          "82:       }),",
          "88:     ],",
          "89:     appType: 'custom',",
          "90:     server: {",
          "",
          "[Removed Lines]",
          "83:       viteNodePlugin(ctx),",
          "84:       pureAnnotationsPlugin.vite({",
          "85:         sourcemap: !!ctx.nuxt.options.sourcemap.client,",
          "86:         functions: ['defineComponent', 'defineAsyncComponent', 'defineNuxtLink', 'createClientOnly', 'defineNuxtPlugin', 'defineNuxtRouteMiddleware', 'defineNuxtComponent', 'useRuntimeConfig', 'defineRouteRules']",
          "87:       })",
          "",
          "[Added Lines]",
          "82:       viteNodePlugin(ctx)",
          "",
          "---------------"
        ],
        "packages/vite/src/plugins/pure-annotations.ts||packages/vite/src/plugins/pure-annotations.ts": [
          "File: packages/vite/src/plugins/pure-annotations.ts -> packages/vite/src/plugins/pure-annotations.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/vite/src/server.ts||packages/vite/src/server.ts": [
          "File: packages/vite/src/server.ts -> packages/vite/src/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import type { ViteBuildContext } from './vite'",
          "9: import { createViteLogger } from './utils/logger'",
          "10: import { initViteNodeServer } from './vite-node'",
          "12: import { writeManifest } from './manifest'",
          "13: import { transpile } from './utils/transpile'",
          "",
          "[Removed Lines]",
          "11: import { pureAnnotationsPlugin } from './plugins/pure-annotations'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:       preTransformRequests: false,",
          "102:       hmr: false",
          "103:     },",
          "110:   } satisfies vite.InlineConfig, ctx.nuxt.options.vite.$server || {}))",
          "112:   if (!ctx.nuxt.options.dev) {",
          "",
          "[Removed Lines]",
          "104:     plugins: [",
          "105:       pureAnnotationsPlugin.vite({",
          "106:         sourcemap: !!ctx.nuxt.options.sourcemap.server,",
          "107:         functions: ['defineComponent', 'defineAsyncComponent', 'defineNuxtLink', 'createClientOnly', 'defineNuxtPlugin', 'defineNuxtRouteMiddleware', 'defineNuxtComponent', 'useRuntimeConfig', 'defineRouteRules']",
          "108:       })",
          "109:     ]",
          "",
          "[Added Lines]",
          "103:     plugins: []",
          "",
          "---------------"
        ]
      }
    }
  ]
}