{
  "cve_id": "CVE-2021-41248",
  "cve_desc": "GraphiQL is the reference implementation of this monorepo, GraphQL IDE, an official project under the GraphQL Foundation. All versions of graphiql older than graphiql@1.4.7 are vulnerable to compromised HTTP schema introspection responses or schema prop values with malicious GraphQL type names, exposing a dynamic XSS attack surface that can allow code injection on operation autocomplete. In order for the attack to take place, the user must load a vulnerable schema in graphiql. There are a number of ways that can occur. By default, the schema URL is not attacker-controllable in graphiql or in its suggested implementations or examples, leaving only very complex attack vectors. If a custom implementation of graphiql's fetcher allows the schema URL to be set dynamically, such as a URL query parameter like ?endpoint= in graphql-playground, or a database provided value, then this custom graphiql implementation is vulnerable to phishing attacks, and thus much more readily available, low or no privelege level xss attacks. The URLs could look like any generic looking graphql schema URL. It should be noted that desktop clients such as Altair, Insomnia, Postwoman, do not appear to be impacted by this. This vulnerability does not impact codemirror-graphql, monaco-graphql or other dependents, as it exists in onHasCompletion.ts in graphiql. It does impact all forks of graphiql, and every released version of graphiql.",
  "repo": "graphql/graphiql",
  "patch_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
  "patch_info": {
    "commit_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
    "repo": "graphql/graphiql",
    "commit_url": "https://github.com/graphql/graphiql/commit/cb237eeeaf7333c4954c752122261db7520f7bf4",
    "files": [
      "README.md",
      "SECURITY.md",
      "docs/security/2021-introspection-schema-xss.md",
      "packages/graphiql/README.md",
      "packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/package.json",
      "packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js",
      "yarn.lock"
    ],
    "message": "Merge pull request from GHSA-x4r7-m2q9-69c8\n\nThis change fixes an XSS vulnerability that has been present since the first\ncommit of GraphiQL when used with an untrusted GraphQL server. It applies three\nstrategies to fix via defense-in-depth: HTML escaping a string in a contexts\nthat uses innerHTML; validating incoming schemas with graphql-js validateSchema;\nand updating markdown-it to the latest version.\n\nSee docs/security/2021-introspection-schema-xss.md for more details.\n\nCo-authored-by: Rikki <rikki.schulte@gmail.com>",
    "before_after_code_files": [
      "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
      "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:   it('Executes a GraphQL query over HTTP that has the expected result', () => {",
      "45:     cy.assertQueryResult({ query: testQuery }, mockSuccess);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:   it('Shows the expected error when the schema is invalid', () => {",
      "48:     cy.visit(`/?bad=true`);",
      "49:     cy.assertResult({",
      "50:       errors: [",
      "51:         {",
      "52:           message:",
      "53:             'Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"<img src=x onerror=alert(document.domain)>\" does not.',",
      "54:         },",
      "55:       ],",
      "56:     });",
      "57:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts": [
      "File: packages/graphiql/cypress/support/commands.ts -> packages/graphiql/cypress/support/commands.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:   type MockResult =",
      "20:     | { data: any }",
      "21:     | { data: any; hasNext?: boolean }",
      "23:   interface Chainable<Subject = any> {",
      "",
      "[Removed Lines]",
      "22:     | { error: any[] };",
      "",
      "[Added Lines]",
      "22:     | { error: any[] }",
      "23:     | { errors: any[] };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     visitWithOp(op: Op): Chainable<Element>;",
      "32:     clickPrettify(): Chainable<Element>;",
      "33:     assertHasValues(op: Op): Chainable<Element>;",
      "34:     assertQueryResult(",
      "35:       op: Op,",
      "36:       expectedResult: MockResult,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:     assertResult(result: MockResult): Chainable<Element>;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:     expect(value).to.deep.equal(JSON.stringify(mockSuccess, null, 2));",
      "92:   });",
      "93: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "97: Cypress.Commands.add('assertResult', (expectedResult, timeout = 200) => {",
      "98:   cy.wait(timeout);",
      "99:   cy.window().then(w => {",
      "101:     const value = w.g.resultComponent.viewer.getValue();",
      "102:     expect(value).to.deep.equal(JSON.stringify(expectedResult, null, 2));",
      "103:   });",
      "104: });",
      "",
      "---------------"
    ],
    "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js": [
      "File: packages/graphiql/resources/renderExample.js -> packages/graphiql/resources/renderExample.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:   history.replaceState(null, null, newSearch);",
      "92: }",
      "",
      "[Removed Lines]",
      "94: const isDev = window.location.hostname.match(/localhost$/);",
      "95: const api = isDev ? '/graphql' : '/.netlify/functions/schema-demo';",
      "",
      "[Added Lines]",
      "94: function getSchemaUrl() {",
      "95:   const isDev = window.location.hostname.match(/localhost$/);",
      "97:   if (isDev) {",
      "99:     if (parameters.bad && parameters.bad === 'true') {",
      "100:       return '/bad/graphql';",
      "101:     } else {",
      "102:       return '/graphql';",
      "103:     }",
      "104:   }",
      "105:   return '/.netlify/functions/schema-demo';",
      "106: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101: ReactDOM.render(",
      "102:   React.createElement(GraphiQL, {",
      "104:     query: parameters.query,",
      "105:     variables: parameters.variables,",
      "106:     headers: parameters.headers,",
      "",
      "[Removed Lines]",
      "103:     fetcher: GraphiQL.createFetcher({ url: api }),",
      "",
      "[Added Lines]",
      "114:     fetcher: GraphiQL.createFetcher({ url: getSchemaUrl() }),",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
      "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import React from 'react';",
      "10: import { FieldType } from './DocExplorer/types';",
      "12: import FieldDoc from './DocExplorer/FieldDoc';",
      "",
      "[Removed Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType } from 'graphql';",
      "",
      "[Added Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType, GraphQLError } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: type DocExplorerProps = {",
      "31:   schema?: GraphQLSchema | null;",
      "32: };",
      "34: type DocExplorerState = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:   ) {",
      "69:     return (",
      "70:       this.props.schema !== nextProps.schema ||",
      "72:     );",
      "73:   }",
      "75:   render() {",
      "77:     const navStack = this.state.navStack;",
      "78:     const navItem = navStack[navStack.length - 1];",
      "80:     let content;",
      "83:       content = (",
      "84:         <div className=\"spinner-container\">",
      "",
      "[Removed Lines]",
      "71:       this.state.navStack !== nextState.navStack",
      "76:     const { schema } = this.props;",
      "81:     if (schema === undefined) {",
      "",
      "[Added Lines]",
      "72:       this.state.navStack !== nextState.navStack ||",
      "73:       this.props.schemaErrors !== nextProps.schemaErrors",
      "78:     const { schema, schemaErrors } = this.props;",
      "83:     if (schemaErrors) {",
      "84:       content = (",
      "85:         <div className=\"error-container\">{'Error fetching schema'}</div>",
      "86:       );",
      "87:     } else if (schema === undefined) {",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
      "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:   ValidationRule,",
      "24:   FragmentDefinitionNode,",
      "25:   DocumentNode,",
      "26: } from 'graphql';",
      "27: import copyToClipboard from 'copy-to-clipboard';",
      "28: import { getFragmentDependenciesForAST } from 'graphql-language-service-utils';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26:   GraphQLError,",
      "27:   formatError as formatGraphQLError,",
      "28:   GraphQLFormattedError,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66: } from '@graphiql/toolkit';",
      "67: import HistoryStore from '../utility/HistoryStore';",
      "69: const DEFAULT_DOC_EXPLORER_WIDTH = 350;",
      "71: const majorVersion = parseInt(React.version.slice(0, 2), 10);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72: import { validateSchema } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95:   additionalContent?: React.ReactNode;",
      "96: };",
      "98: export type GraphiQLProps = {",
      "99:   fetcher: Fetcher;",
      "100:   schema?: GraphQLSchema;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103: export type GenericError =",
      "104:   | Error",
      "105:   | string",
      "106:   | readonly Error[]",
      "107:   | readonly string[]",
      "108:   | GraphQLError",
      "109:   | readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "121:   editorTheme?: string;",
      "122:   onToggleHistory?: (historyPaneOpen: boolean) => void;",
      "123:   ResultsTooltip?: typeof Component | FunctionComponent;",
      "124:   readOnly?: boolean;",
      "125:   docExplorerOpen?: boolean;",
      "126:   toolbar?: GraphiQLToolbarConfig;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "140:   dangerouslyAssumeSchemaIsValid?: boolean;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "143:   headerEditorEnabled: boolean;",
      "144:   shouldPersistHeaders: boolean;",
      "145:   historyPaneOpen: boolean;",
      "146:   docExplorerWidth: number;",
      "147:   isWaitingForResponse: boolean;",
      "148:   subscription?: Unsubscribable | null;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "152:   maxHistoryLength: number;",
      "153: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "173: const stringify = (obj: unknown): string => JSON.stringify(obj, null, 2);",
      "175: const formatSingleError = (error: Error): Error => ({",
      "176:   ...error,",
      "178:   message: error.message,",
      "179:   stack: error.stack,",
      "180: });",
      "182: type InputError = Error | GraphQLError | string;",
      "184: const handleSingleError = (",
      "185:   error: InputError,",
      "186: ): GraphQLFormattedError | Error | string => {",
      "187:   if (error instanceof GraphQLError) {",
      "188:     return formatGraphQLError(error);",
      "189:   }",
      "190:   if (error instanceof Error) {",
      "191:     return formatSingleError(error);",
      "192:   }",
      "193:   return error;",
      "194: };",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "166:     return JSON.stringify(result, null, 2);",
      "167:   }",
      "177:   _editorQueryID = 0;",
      "",
      "[Removed Lines]",
      "169:   static formatError(rawError: Error) {",
      "170:     const result = Array.isArray(rawError)",
      "171:       ? rawError.map(formatSingleError)",
      "172:       : formatSingleError(rawError);",
      "173:     return JSON.stringify(result, null, 2);",
      "174:   }",
      "",
      "[Added Lines]",
      "210:   static formatError = (error: GenericError): string => {",
      "211:     if (Array.isArray(error)) {",
      "212:       return stringify({",
      "213:         errors: error.map((e: InputError) => handleSingleError(e)),",
      "214:       });",
      "215:     }",
      "217:     return stringify({ errors: handleSingleError(error) });",
      "218:   };",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "266:     const headerEditorEnabled = props.headerEditorEnabled ?? false;",
      "267:     const shouldPersistHeaders = props.shouldPersistHeaders ?? false;",
      "270:     this.state = {",
      "272:       query,",
      "273:       variables: variables as string,",
      "274:       headers: headers as string,",
      "275:       operationName,",
      "276:       docExplorerOpen,",
      "278:       editorFlex: Number(this._storage.get('editorFlex')) || 1,",
      "279:       secondaryEditorOpen,",
      "280:       secondaryEditorHeight:",
      "",
      "[Removed Lines]",
      "271:       schema: props.schema,",
      "277:       response: props.response,",
      "",
      "[Added Lines]",
      "313:     let schema = props.schema;",
      "314:     let response = props.response;",
      "315:     let schemaErrors: readonly GraphQLError[] | undefined = undefined;",
      "316:     if (schema && !this.props.dangerouslyAssumeSchemaIsValid) {",
      "317:       const validationErrors = validateSchema(schema);",
      "318:       if (validationErrors && validationErrors.length > 0) {",
      "321:         response = GraphiQL.formatError(validationErrors);",
      "322:         schema = undefined;",
      "323:         schemaErrors = validationErrors;",
      "324:       }",
      "325:     }",
      "329:       schema,",
      "335:       schemaErrors,",
      "336:       response,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "357:         nextQuery !== this.state.query ||",
      "358:         nextOperationName !== this.state.operationName)",
      "359:     ) {",
      "360:       const updatedQueryAttributes = this._updateQueryFacts(",
      "361:         nextQuery,",
      "362:         nextOperationName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:       if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "420:         const validationErrors = validateSchema(nextSchema);",
      "421:         if (validationErrors && validationErrors.length > 0) {",
      "422:           this.handleSchemaErrors(validationErrors);",
      "423:           nextSchema = undefined;",
      "424:         }",
      "425:       }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "665:               ref={c => {",
      "666:                 this.docExplorerComponent = c;",
      "667:               }}",
      "668:               schema={this.state.schema}>",
      "669:               <button",
      "670:                 className=\"docExplorerHide\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "735:               schemaErrors={this.state.schemaErrors}",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "871:         }",
      "873:         if (typeof result !== 'string' && 'data' in result) {",
      "877:         } else {",
      "878:           const responseString =",
      "879:             typeof result === 'string' ? result : GraphiQL.formatResult(result);",
      "885:         }",
      "886:       })",
      "887:       .catch(error => {",
      "892:       });",
      "893:   }",
      "895:   private async _fetchQuery(",
      "896:     query: string,",
      "897:     variables: string,",
      "",
      "[Removed Lines]",
      "874:           const schema = buildClientSchema(result.data);",
      "875:           const queryFacts = getOperationFacts(schema, this.state.query);",
      "876:           this.safeSetState({ schema, ...queryFacts });",
      "880:           this.safeSetState({",
      "882:             schema: undefined,",
      "883:             response: responseString,",
      "884:           });",
      "888:         this.safeSetState({",
      "889:           schema: undefined,",
      "890:           response: error ? GraphiQL.formatError(error) : undefined,",
      "891:         });",
      "",
      "[Added Lines]",
      "942:           let schema: GraphQLSchema | undefined = buildClientSchema(",
      "943:             result.data,",
      "944:           );",
      "945:           if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "946:             const errors = validateSchema(schema);",
      "948:             if (errors && errors.length > 0) {",
      "949:               schema = undefined;",
      "950:               this.handleSchemaErrors(errors);",
      "951:             }",
      "952:           }",
      "953:           if (schema) {",
      "954:             const queryFacts = getOperationFacts(schema, this.state.query);",
      "955:             this.safeSetState({",
      "956:               schema,",
      "957:               ...queryFacts,",
      "958:               schemaErrors: undefined,",
      "959:             });",
      "960:           }",
      "965:           this.handleSchemaErrors([responseString]);",
      "969:         this.handleSchemaErrors([error]);",
      "973:   private handleSchemaErrors(",
      "974:     schemaErrors: readonly GraphQLError[] | readonly string[],",
      "975:   ) {",
      "976:     this.safeSetState({",
      "977:       response: schemaErrors ? GraphiQL.formatError(schemaErrors) : undefined,",
      "978:       schema: undefined,",
      "979:       schemaErrors,",
      "980:     });",
      "981:   }",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "908:       jsonVariables =",
      "909:         variables && variables.trim() !== '' ? JSON.parse(variables) : null;",
      "910:     } catch (error) {",
      "912:     }",
      "914:     if (typeof jsonVariables !== 'object') {",
      "",
      "[Removed Lines]",
      "911:       throw new Error(`Variables are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "999:       throw new Error(",
      "1000:         `Variables are invalid JSON: ${(error as Error).message}.`,",
      "1001:       );",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "919:       jsonHeaders =",
      "920:         headers && headers.trim() !== '' ? JSON.parse(headers) : null;",
      "921:     } catch (error) {",
      "923:     }",
      "925:     if (typeof jsonHeaders !== 'object') {",
      "",
      "[Removed Lines]",
      "922:       throw new Error(`Headers are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "1012:       throw new Error(`Headers are invalid JSON: ${(error as Error).message}.`);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1008:             } catch (error) {",
      "1009:               this.safeSetState({",
      "1010:                 isWaitingForResponse: false,",
      "1012:                 subscription: null,",
      "1013:               });",
      "1014:             }",
      "",
      "[Removed Lines]",
      "1011:                 response: error ? GraphiQL.formatError(error) : undefined,",
      "",
      "[Added Lines]",
      "1101:                 response: error",
      "1102:                   ? GraphiQL.formatError(error as Error)",
      "1103:                   : undefined,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1167:     } catch (error) {",
      "1168:       this.setState({",
      "1169:         isWaitingForResponse: false,",
      "1171:       });",
      "1172:     }",
      "1173:   };",
      "",
      "[Removed Lines]",
      "1170:         response: error.message,",
      "",
      "[Added Lines]",
      "1262:         response: (error as Error).message,",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1699: }",
      "1700: GraphiQLFooter.displayName = 'GraphiQLFooter';",
      "1709: const defaultQuery = `# Welcome to GraphiQL",
      "1710: #",
      "1711: # GraphiQL is an in-browser tool for writing, validating, and",
      "",
      "[Removed Lines]",
      "1702: const formatSingleError = (error: Error) => ({",
      "1703:   ...error,",
      "1705:   message: error.message,",
      "1706:   stack: error.stack,",
      "1707: });",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts": [
      "File: packages/graphiql/src/utility/onHasCompletion.ts -> packages/graphiql/src/utility/onHasCompletion.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:   GraphQLType,",
      "13:   GraphQLField,",
      "14: } from 'graphql';",
      "15: import MD from 'markdown-it';",
      "17: const md = new MD();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: import escapeHTML from 'escape-html';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:   if (type instanceof GraphQLList) {",
      "109:     return `[${renderType(type.ofType)}]`;",
      "110:   }",
      "112: }",
      "",
      "[Removed Lines]",
      "111:   return `<a class=\"typeName\">${type.name}</a>`;",
      "",
      "[Added Lines]",
      "112:   return `<a class=\"typeName\">${escapeHTML(type.name)}</a>`;",
      "",
      "---------------"
    ],
    "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js": [
      "File: packages/graphiql/test/bad-schema.js -> packages/graphiql/test/bad-schema.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: const { buildClientSchema } = require('graphql');",
      "3: module.exports.schema = {",
      "4:   __schema: {",
      "5:     queryType: {",
      "6:       name: 'Query',",
      "7:     },",
      "8:     mutationType: null,",
      "9:     subscriptionType: null,",
      "10:     types: [",
      "11:       {",
      "12:         kind: 'OBJECT',",
      "13:         name: 'Query',",
      "14:         description: null,",
      "15:         fields: [",
      "16:           {",
      "17:             name: 'user',",
      "18:             description: null,",
      "19:             args: [",
      "20:               {",
      "21:                 name: 'id',",
      "22:                 description: null,",
      "23:                 type: {",
      "24:                   kind: 'NON_NULL',",
      "25:                   name: null,",
      "26:                   ofType: {",
      "27:                     kind: 'SCALAR',",
      "28:                     name: 'ID',",
      "29:                     ofType: null,",
      "30:                   },",
      "31:                 },",
      "32:                 defaultValue: null,",
      "33:               },",
      "34:             ],",
      "35:             type: {",
      "36:               kind: 'OBJECT',",
      "37:               name: '<img src=x onerror=alert(document.domain)>',",
      "38:               ofType: null,",
      "39:             },",
      "40:             isDeprecated: false,",
      "41:             deprecationReason: null,",
      "42:           },",
      "43:         ],",
      "44:         inputFields: null,",
      "45:         interfaces: [],",
      "46:         enumValues: null,",
      "47:         possibleTypes: null,",
      "48:       },",
      "49:       {",
      "50:         kind: 'SCALAR',",
      "51:         name: 'ID',",
      "52:         description: '',",
      "53:         fields: null,",
      "54:         inputFields: null,",
      "55:         interfaces: null,",
      "56:         enumValues: null,",
      "57:         possibleTypes: null,",
      "58:       },",
      "59:       {",
      "60:         kind: 'OBJECT',",
      "61:         name: '<img src=x onerror=alert(document.domain)>',",
      "62:         description: null,",
      "63:         fields: [",
      "64:           {",
      "65:             name: 'name',",
      "66:             description: null,",
      "67:             args: [],",
      "68:             type: {",
      "69:               kind: 'NON_NULL',",
      "70:               name: null,",
      "71:               ofType: {",
      "72:                 kind: 'SCALAR',",
      "73:                 name: 'String',",
      "74:                 ofType: null,",
      "75:               },",
      "76:             },",
      "77:             isDeprecated: false,",
      "78:             deprecationReason: null,",
      "79:           },",
      "80:         ],",
      "81:         inputFields: null,",
      "82:         interfaces: [],",
      "83:         enumValues: null,",
      "84:         possibleTypes: null,",
      "85:       },",
      "86:       {",
      "87:         kind: 'SCALAR',",
      "88:         name: 'String',",
      "89:         description: '',",
      "90:         fields: null,",
      "91:         inputFields: null,",
      "92:         interfaces: null,",
      "93:         enumValues: null,",
      "94:         possibleTypes: null,",
      "95:       },",
      "96:     ],",
      "97:     directives: [],",
      "98:   },",
      "99: };",
      "",
      "---------------"
    ],
    "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js": [
      "File: packages/graphiql/test/beforeDevServer.js -> packages/graphiql/test/beforeDevServer.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: const path = require('path');",
      "10: const { graphqlHTTP } = require('express-graphql');",
      "11: const schema = require('./schema');",
      "13: module.exports = function beforeDevServer(app, _server, _compiler) {",
      "15:   app.post('/graphql', graphqlHTTP({ schema }));",
      "17:   app.get(",
      "18:     '/graphql',",
      "19:     graphqlHTTP({",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: const { schema: badSchema } = require('./bad-schema');",
      "18:   app.post('/bad/graphql', (_req, res, next) => {",
      "19:     res.json({ data: badSchema });",
      "20:     next();",
      "21:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js": [
      "File: packages/graphiql/test/e2e-server.js -> packages/graphiql/test/e2e-server.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: const path = require('path');",
      "11: const { graphqlHTTP } = require('express-graphql');",
      "12: const schema = require('./schema');",
      "14: const app = express();",
      "17: app.post('/graphql', graphqlHTTP({ schema }));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: const { schema: badSchema } = require('./bad-schema');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23:   }),",
      "24: );",
      "26: app.use(express.static(path.resolve(__dirname, '../')));",
      "28: app.listen(process.env.PORT || 0, function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: app.post('/bad/graphql', (_req, res, next) => {",
      "27:   res.json({ data: badSchema });",
      "28:   next();",
      "29: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "3288:   integrity sha512-6U71C2Wp7r5XtFtQzYrW5iKFT67OixrSxjI4MptCHzdSVlgabczzqLe0ZSgnub/5Kp4hSbpDB1tMytZY9pwxxA==",
      "3290: \"@graphiql/toolkit@file:packages/graphiql-toolkit\":",
      "3292:   dependencies:",
      "3293:     \"@n1ru4l/push-pull-async-iterable-iterator\" \"^3.0.0\"",
      "3294:     graphql-ws \"^4.9.0\"",
      "",
      "[Removed Lines]",
      "3291:   version \"0.3.0\"",
      "",
      "[Added Lines]",
      "3291:   version \"0.3.2\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4881:   dependencies:",
      "4882:     \"@types/node\" \"*\"",
      "4884: \"@types/eslint-visitor-keys@^1.0.0\":",
      "4885:   version \"1.0.0\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz#1ee30d79544ca84d68d4b3cdb0af4f205663dd2d\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4884: \"@types/escape-html@^1.0.1\":",
      "4885:   version \"1.0.1\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/escape-html/-/escape-html-1.0.1.tgz#b19b4646915f0ae2c306bf984dc0a59c5cfc97ba\"",
      "4887:   integrity sha512-4mI1FuUUZiuT95fSVqvZxp/ssQK9zsa86S43h9x3zPOSU9BBJ+BfDkXwuaU7BfsD+e7U0/cUUfJFk3iW2M4okA==",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5021:   dependencies:",
      "5022:     \"@types/linkify-it\" \"*\"",
      "5024: \"@types/mime@^1\":",
      "5025:   version \"1.3.2\"",
      "5026:   resolved \"https://registry.yarnpkg.com/@types/mime/-/mime-1.3.2.tgz#93e25bf9ee75fe0fd80b594bc4feb0e862111b5a\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029: \"@types/markdown-it@^12.2.3\":",
      "5030:   version \"12.2.3\"",
      "5031:   resolved \"https://registry.yarnpkg.com/@types/markdown-it/-/markdown-it-12.2.3.tgz#0d6f6e5e413f8daaa26522904597be3d6cd93b51\"",
      "5032:   integrity sha512-GKMHFfv3458yYy+v/N8gjufHO6MSZKCOXpZc5GXIWWy8uldwfmPn98vp81gZ5f9SVw8YYBctgfJ22a2d7AOMeQ==",
      "5033:   dependencies:",
      "5034:     \"@types/linkify-it\" \"*\"",
      "5035:     \"@types/mdurl\" \"*\"",
      "5037: \"@types/mdurl@*\":",
      "5038:   version \"1.0.2\"",
      "5039:   resolved \"https://registry.yarnpkg.com/@types/mdurl/-/mdurl-1.0.2.tgz#e2ce9d83a613bacf284c7be7d491945e39e1f8e9\"",
      "5040:   integrity sha512-eC4U9MlIcu2q0KQmXszyn5Akca/0jrQmwDRgpAMJai7qBWq4amIQhZyNau4VYGtCeALvW1/NtjzJJ567aZxfKA==",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6121:   dependencies:",
      "6122:     sprintf-js \"~1.0.2\"",
      "6124: aria-query@^3.0.0:",
      "6125:   version \"3.0.0\"",
      "6126:   resolved \"https://registry.yarnpkg.com/aria-query/-/aria-query-3.0.0.tgz#65b3fcc1ca1155a8c9ae64d6eee297f15d5133cc\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6142: argparse@^2.0.1:",
      "6143:   version \"2.0.1\"",
      "6144:   resolved \"https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38\"",
      "6145:   integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "9586:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.0.3.tgz#5c487e5742ab93c15abb5da22759b8590ec03b7f\"",
      "9587:   integrity sha512-MyoZ0jgnLvB2X3Lg5HqpFmn1kybDiIfEQmKzTb5apr51Rb+T3KdmMiqa70T+bhGnyv7bQ6WMj2QMHpGMmlrUYQ==",
      "9589: envinfo@^7.3.1:",
      "9590:   version \"7.8.1\"",
      "9591:   resolved \"https://registry.yarnpkg.com/envinfo/-/envinfo-7.8.1.tgz#06377e3e5f4d379fea7ac592d5ad8927e0c4d475\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9612: entities@~2.1.0:",
      "9613:   version \"2.1.0\"",
      "9614:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.1.0.tgz#992d3129cf7df6870b96c57858c249a120f8b8b5\"",
      "9615:   integrity sha512-hCx1oky9PFrJ611mf0ifBLBRW8lUUVRlFolb5gWRfIELabBlbp9xZvrqZLZAs+NxFnbfQoeGd8wDkygjg7U85w==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9751:   resolved \"https://registry.yarnpkg.com/escalade/-/escalade-3.1.1.tgz#d8cfdc7000965c5a0174b4a82eaa5c0552742e40\"",
      "9752:   integrity sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "9755:   version \"1.0.3\"",
      "9756:   resolved \"https://registry.yarnpkg.com/escape-html/-/escape-html-1.0.3.tgz#0258eae4d3d0c0974de1c169188ef0051d1d1988\"",
      "9757:   integrity sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=",
      "",
      "[Removed Lines]",
      "9754: escape-html@~1.0.3:",
      "",
      "[Added Lines]",
      "9782: escape-html@^1.0.3, escape-html@~1.0.3:",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "11512:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
      "11514: \"graphiql@file:packages/graphiql\":",
      "11516:   dependencies:",
      "11518:     codemirror \"^5.58.2\"",
      "11520:     copy-to-clipboard \"^3.2.0\"",
      "11521:     dset \"^3.1.0\"",
      "11522:     entities \"^2.0.0\"",
      "11526: graphql-config@^3.0.2:",
      "11527:   version \"3.0.3\"",
      "",
      "[Removed Lines]",
      "11515:   version \"1.4.3\"",
      "11517:     \"@graphiql/toolkit\" \"^0.3.0\"",
      "11519:     codemirror-graphql \"^1.0.0\"",
      "11523:     graphql-language-service \"^3.1.5\"",
      "11524:     markdown-it \"^10.0.0\"",
      "",
      "[Added Lines]",
      "11543:   version \"1.4.6\"",
      "11545:     \"@graphiql/toolkit\" \"^0.3.2\"",
      "11547:     codemirror-graphql \"^1.0.3\"",
      "11551:     escape-html \"^1.0.3\"",
      "11552:     graphql-language-service \"^3.1.6\"",
      "11553:     markdown-it \"^12.2.0\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "14280:   dependencies:",
      "14281:     uc.micro \"^1.0.1\"",
      "14283: lint-staged@^10.1.2:",
      "14284:   version \"10.1.3\"",
      "14285:   resolved \"https://registry.yarnpkg.com/lint-staged/-/lint-staged-10.1.3.tgz#da27713d3ac519da305381b4de87d5f866b1d2f1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14312: linkify-it@^3.0.1:",
      "14313:   version \"3.0.3\"",
      "14314:   resolved \"https://registry.yarnpkg.com/linkify-it/-/linkify-it-3.0.3.tgz#a98baf44ce45a550efb4d49c769d07524cc2fa2e\"",
      "14315:   integrity sha512-ynTsyrFSdE5oZ/O9GEf00kPngmOfVwazR5GKDq6EYfhlpFug3J2zybX56a2PRRpc9P+FuSoGNAwjlbDs9jJBPQ==",
      "14316:   dependencies:",
      "14317:     uc.micro \"^1.0.1\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "14711:     mdurl \"^1.0.1\"",
      "14712:     uc.micro \"^1.0.5\"",
      "14714: markdown-to-jsx@^6.11.4:",
      "14715:   version \"6.11.4\"",
      "14716:   resolved \"https://registry.yarnpkg.com/markdown-to-jsx/-/markdown-to-jsx-6.11.4.tgz#b4528b1ab668aef7fe61c1535c27e837819392c5\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14750: markdown-it@^12.2.0:",
      "14751:   version \"12.2.0\"",
      "14752:   resolved \"https://registry.yarnpkg.com/markdown-it/-/markdown-it-12.2.0.tgz#091f720fd5db206f80de7a8d1f1a7035fd0d38db\"",
      "14753:   integrity sha512-Wjws+uCrVQRqOoJvze4HCqkKl1AsSh95iFAeQDwnyfxM09divCBSXlDR1uTvyUP3Grzpn4Ru8GeCxYPM8vkCQg==",
      "14754:   dependencies:",
      "14755:     argparse \"^2.0.1\"",
      "14756:     entities \"~2.1.0\"",
      "14757:     linkify-it \"^3.0.1\"",
      "14758:     mdurl \"^1.0.1\"",
      "14759:     uc.micro \"^1.0.5\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1b41e33c4a871a345836de58f415b7c461ced1f8",
      "candidate_info": {
        "commit_hash": "1b41e33c4a871a345836de58f415b7c461ced1f8",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/1b41e33c4a871a345836de58f415b7c461ced1f8",
        "files": [
          ".changeset/big-forks-deny.md",
          "package.json",
          "packages/graphiql-react/package.json",
          "packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/execution.tsx",
          "packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/package.json",
          "packages/graphiql/src/components/ExecuteButton.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "packages/graphiql/test/schema.js"
        ],
        "message": "add execution context to `@graphiql/react` (#2453)",
        "before_after_code_files": [
          "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/execution.tsx||packages/graphiql-react/src/execution.tsx",
          "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/src/components/ExecuteButton.tsx||packages/graphiql/src/components/ExecuteButton.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx||packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "packages/graphiql/test/schema.js||packages/graphiql/test/schema.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx": [
          "File: packages/graphiql-react/src/editor/header-editor.tsx -> packages/graphiql-react/src/editor/header-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { useEffect, useRef } from 'react';",
          "3: import { commonKeys, importCodeMirror } from './common';",
          "4: import { useEditorContext } from './context';",
          "5: import {",
          "6:   EditCallback,",
          "8:   useChangeHandler,",
          "9:   useCompletion,",
          "10:   useKeyMap,",
          "",
          "[Removed Lines]",
          "7:   EmptyCallback,",
          "",
          "[Added Lines]",
          "3: import { useExecutionContext } from '../execution';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: export type UseHeaderEditorArgs = {",
          "17:   editorTheme?: string;",
          "18:   onEdit?: EditCallback;",
          "20:   readOnly?: boolean;",
          "21:   shouldPersistHeaders?: boolean;",
          "22: };",
          "",
          "[Removed Lines]",
          "19:   onRunQuery?: EmptyCallback;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24: export function useHeaderEditor({",
          "25:   editorTheme = 'graphiql',",
          "26:   onEdit,",
          "28:   readOnly = false,",
          "29:   shouldPersistHeaders = false,",
          "30: }: UseHeaderEditorArgs = {}) {",
          "",
          "[Removed Lines]",
          "27:   onRunQuery,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "32:     nonNull: true,",
          "33:     caller: useHeaderEditor,",
          "34:   });",
          "35:   const merge = useMergeQuery({ caller: useHeaderEditor });",
          "36:   const prettify = usePrettifyEditors({ caller: useHeaderEditor });",
          "37:   const ref = useRef<HTMLDivElement>(null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:   const executionContext = useExecutionContext();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:   useCompletion(headerEditor);",
          "118:   useKeyMap(headerEditor, ['Shift-Ctrl-P'], prettify);",
          "119:   useKeyMap(headerEditor, ['Shift-Ctrl-M'], merge);",
          "",
          "[Removed Lines]",
          "117:   useKeyMap(headerEditor, ['Cmd-Enter', 'Ctrl-Enter'], onRunQuery);",
          "",
          "[Added Lines]",
          "116:   useKeyMap(headerEditor, ['Cmd-Enter', 'Ctrl-Enter'], executionContext?.run);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts": [
          "File: packages/graphiql-react/src/editor/hooks.ts -> packages/graphiql-react/src/editor/hooks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:   }, [editor, explorer, schema]);",
          "98: }",
          "102: export function useKeyMap(",
          "103:   editor: CodeMirrorEditor | null,",
          "",
          "[Removed Lines]",
          "100: export type EmptyCallback = () => void;",
          "",
          "[Added Lines]",
          "100: type EmptyCallback = () => void;",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx": [
          "File: packages/graphiql-react/src/editor/query-editor.tsx -> packages/graphiql-react/src/editor/query-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import { getOperationFacts } from 'graphql-language-service';",
          "9: import { MutableRefObject, useEffect, useRef } from 'react';",
          "11: import { useExplorerContext } from '../explorer';",
          "12: import { markdown } from '../markdown';",
          "13: import { useSchemaContext } from '../schema';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: import { useExecutionContext } from '../execution';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: import {",
          "22:   CopyQueryCallback,",
          "23:   EditCallback,",
          "25:   useCompletion,",
          "26:   useCopyQuery,",
          "27:   useKeyMap,",
          "",
          "[Removed Lines]",
          "24:   EmptyCallback,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:   onEdit?: EditCallback;",
          "41:   onEditOperationName?: EditCallback;",
          "42:   onCopyQuery?: CopyQueryCallback;",
          "44:   readOnly?: boolean;",
          "45:   validationRules?: ValidationRule[];",
          "46: };",
          "",
          "[Removed Lines]",
          "43:   onRunQuery?: EmptyCallback;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "51:   onEdit,",
          "52:   onEditOperationName,",
          "53:   onCopyQuery,",
          "55:   readOnly = false,",
          "56:   validationRules,",
          "57: }: UseQueryEditorArgs = {}) {",
          "",
          "[Removed Lines]",
          "54:   onRunQuery,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "69:     nonNull: true,",
          "70:     caller: useQueryEditor,",
          "71:   });",
          "72:   const storage = useStorageContext();",
          "73:   const explorer = useExplorerContext();",
          "74:   const copy = useCopyQuery({ caller: useQueryEditor, onCopyQuery });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:   const executionContext = useExecutionContext();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "323:   useCompletion(queryEditor);",
          "326:   useKeyMap(queryEditor, ['Shift-Ctrl-C'], copy);",
          "327:   useKeyMap(",
          "328:     queryEditor,",
          "",
          "[Removed Lines]",
          "325:   useKeyMap(queryEditor, ['Cmd-Enter', 'Ctrl-Enter'], onRunQuery);",
          "",
          "[Added Lines]",
          "324:   useKeyMap(queryEditor, ['Cmd-Enter', 'Ctrl-Enter'], executionContext?.run);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx": [
          "File: packages/graphiql-react/src/editor/variable-editor.tsx -> packages/graphiql-react/src/editor/variable-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { useEffect, useRef } from 'react';",
          "3: import { commonKeys, importCodeMirror } from './common';",
          "4: import { useEditorContext } from './context';",
          "5: import {",
          "6:   EditCallback,",
          "8:   useChangeHandler,",
          "9:   useCompletion,",
          "10:   useKeyMap,",
          "",
          "[Removed Lines]",
          "7:   EmptyCallback,",
          "",
          "[Added Lines]",
          "3: import { useExecutionContext } from '../execution';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: export type UseVariableEditorArgs = {",
          "18:   editorTheme?: string;",
          "19:   onEdit?: EditCallback;",
          "21:   readOnly?: boolean;",
          "22: };",
          "24: export function useVariableEditor({",
          "25:   editorTheme = 'graphiql',",
          "26:   onEdit,",
          "28:   readOnly = false,",
          "29: }: UseVariableEditorArgs = {}) {",
          "30:   const {",
          "",
          "[Removed Lines]",
          "20:   onRunQuery?: EmptyCallback;",
          "27:   onRunQuery,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:     nonNull: true,",
          "36:     caller: useVariableEditor,",
          "37:   });",
          "38:   const merge = useMergeQuery({ caller: useVariableEditor });",
          "39:   const prettify = usePrettifyEditors({ caller: useVariableEditor });",
          "40:   const ref = useRef<HTMLDivElement>(null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:   const executionContext = useExecutionContext();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:   useCompletion(variableEditor);",
          "136:   useKeyMap(variableEditor, ['Shift-Ctrl-P'], prettify);",
          "137:   useKeyMap(variableEditor, ['Shift-Ctrl-M'], merge);",
          "",
          "[Removed Lines]",
          "135:   useKeyMap(variableEditor, ['Cmd-Enter', 'Ctrl-Enter'], onRunQuery);",
          "",
          "[Added Lines]",
          "134:   useKeyMap(variableEditor, ['Cmd-Enter', 'Ctrl-Enter'], executionContext?.run);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/execution.tsx||packages/graphiql-react/src/execution.tsx": [
          "File: packages/graphiql-react/src/execution.tsx -> packages/graphiql-react/src/execution.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   Fetcher,",
          "3:   FetcherResultPayload,",
          "4:   formatError,",
          "5:   formatResult,",
          "6:   isAsyncIterable,",
          "7:   isObservable,",
          "8:   Unsubscribable,",
          "9: } from '@graphiql/toolkit';",
          "10: import {",
          "11:   ExecutionResult,",
          "12:   FragmentDefinitionNode,",
          "13:   parse,",
          "14:   print,",
          "15:   visit,",
          "16: } from 'graphql';",
          "17: import { getFragmentDependenciesForAST } from 'graphql-language-service';",
          "18: import { ReactNode, useCallback, useMemo, useRef, useState } from 'react';",
          "19: import setValue from 'set-value';",
          "21: import {",
          "22:   useAutoCompleteLeafs,",
          "23:   useEditorContext,",
          "24:   UseQueryEditorArgs,",
          "25: } from './editor';",
          "26: import { EditCallback } from './editor/hooks';",
          "27: import { useHistoryContext } from './history';",
          "28: import { createContextHook, createNullableContext } from './utility/context';",
          "30: export type ExecutionContextType = {",
          "31:   isFetching: boolean;",
          "32:   run(selectedOperationName?: string): void;",
          "33:   stop(): void;",
          "34:   subscription: Unsubscribable | null;",
          "35: };",
          "37: export const ExecutionContext = createNullableContext<ExecutionContextType>(",
          "38:   'ExecutionContext',",
          "39: );",
          "41: type ExecutionContextProviderProps = {",
          "42:   children: ReactNode;",
          "43:   externalFragments?: FragmentDefinitionNode[] | string;",
          "44:   fetcher: Fetcher;",
          "45:   onEditOperationName?: EditCallback;",
          "46:   shouldPersistHeaders?: boolean;",
          "47: };",
          "49: export function ExecutionContextProvider(props: ExecutionContextProviderProps) {",
          "50:   const {",
          "51:     headerEditor,",
          "52:     queryEditor,",
          "53:     responseEditor,",
          "54:     variableEditor,",
          "55:     updateActiveTabValues,",
          "56:   } = useEditorContext({ nonNull: true, caller: ExecutionContextProvider });",
          "57:   const history = useHistoryContext();",
          "58:   const autoCompleteLeafs = useAutoCompleteLeafs();",
          "59:   const [isFetching, setIsFetching] = useState(false);",
          "60:   const [subscription, setSubscription] = useState<Unsubscribable | null>(null);",
          "61:   const queryIdRef = useRef(0);",
          "63:   const stop = useCallback(() => {",
          "64:     subscription?.unsubscribe();",
          "65:     setIsFetching(false);",
          "66:     setSubscription(null);",
          "67:   }, [subscription]);",
          "69:   const {",
          "70:     externalFragments,",
          "71:     fetcher,",
          "72:     onEditOperationName,",
          "73:     shouldPersistHeaders,",
          "74:   } = props;",
          "75:   const run = useCallback<ExecutionContextType['run']>(",
          "76:     async _selectedOperationName => {",
          "77:       if (!queryEditor || !responseEditor) {",
          "78:         return;",
          "79:       }",
          "82:       if (subscription) {",
          "83:         stop();",
          "84:         return;",
          "85:       }",
          "87:       const setResponse = (value: string) => {",
          "88:         responseEditor.setValue(value);",
          "89:         updateActiveTabValues({ response: value });",
          "90:       };",
          "92:       queryIdRef.current += 1;",
          "93:       const queryId = queryIdRef.current;",
          "98:       let query = autoCompleteLeafs() || queryEditor.getValue();",
          "100:       const variablesString = variableEditor?.getValue();",
          "101:       const variables = tryParseJson(",
          "102:         variablesString,",
          "103:         'Variables are invalid JSON',",
          "104:       );",
          "105:       if (typeof variables !== 'object') {",
          "106:         throw new Error('Variables are not a JSON object.');",
          "107:       }",
          "109:       const headersString = headerEditor?.getValue();",
          "110:       const headers = tryParseJson(headersString, 'Headers are invalid JSON');",
          "111:       if (typeof headers !== 'object') {",
          "112:         throw new Error('Headers are not a JSON object.');",
          "113:       }",
          "115:       const selectedOperationName =",
          "116:         _selectedOperationName ||",
          "119:         (() => {",
          "120:           if (!queryEditor.operations || !queryEditor.hasFocus()) {",
          "121:             return undefined;",
          "122:           }",
          "124:           const cursorIndex = queryEditor.indexFromPos(queryEditor.getCursor());",
          "127:           for (const operation of queryEditor.operations) {",
          "128:             if (",
          "129:               operation.loc &&",
          "130:               operation.loc.start <= cursorIndex &&",
          "131:               operation.loc.end >= cursorIndex",
          "132:             ) {",
          "133:               return operation.name && operation.name.value;",
          "134:             }",
          "135:           }",
          "137:           return undefined;",
          "138:         })();",
          "140:       let operationName = queryEditor.operationName;",
          "141:       if (selectedOperationName && selectedOperationName !== operationName) {",
          "144:         operationName = selectedOperationName;",
          "146:         queryEditor.operationName = selectedOperationName;",
          "147:         updateActiveTabValues({ operationName: selectedOperationName });",
          "148:         onEditOperationName?.(selectedOperationName);",
          "149:       }",
          "151:       if (externalFragments) {",
          "152:         const externalFragmentsMap = new Map<string, FragmentDefinitionNode>();",
          "154:         if (Array.isArray(externalFragments)) {",
          "155:           externalFragments.forEach(def => {",
          "156:             externalFragmentsMap.set(def.name.value, def);",
          "157:           });",
          "158:         } else {",
          "159:           visit(parse(externalFragments, {}), {",
          "160:             FragmentDefinition(def) {",
          "161:               externalFragmentsMap.set(def.name.value, def);",
          "162:             },",
          "163:           });",
          "164:         }",
          "166:         const fragmentDependencies = queryEditor.documentAST",
          "167:           ? getFragmentDependenciesForAST(",
          "168:               queryEditor.documentAST,",
          "169:               externalFragmentsMap,",
          "170:             )",
          "171:           : [];",
          "172:         if (fragmentDependencies.length > 0) {",
          "173:           query +=",
          "174:             '\\n' +",
          "175:             fragmentDependencies",
          "176:               .map((node: FragmentDefinitionNode) => print(node))",
          "177:               .join('\\n');",
          "178:         }",
          "179:       }",
          "181:       setResponse('');",
          "182:       setIsFetching(true);",
          "184:       history?.addToHistory({",
          "185:         query,",
          "186:         variables: variablesString,",
          "187:         headers: headersString,",
          "188:         operationName: operationName ?? undefined,",
          "189:       });",
          "191:       try {",
          "192:         let fullResponse: FetcherResultPayload = { data: {} };",
          "193:         const handleResponse = (result: ExecutionResult) => {",
          "196:           if (queryId !== queryIdRef.current) {",
          "197:             return;",
          "198:           }",
          "200:           let maybeMultipart = Array.isArray(result) ? result : false;",
          "201:           if (",
          "202:             !maybeMultipart &&",
          "203:             typeof result === 'object' &&",
          "204:             result !== null &&",
          "205:             'hasNext' in result",
          "206:           ) {",
          "207:             maybeMultipart = [result];",
          "208:           }",
          "210:           if (maybeMultipart) {",
          "211:             const payload: FetcherResultPayload = {",
          "212:               data: fullResponse.data,",
          "213:             };",
          "214:             const maybeErrors = [",
          "215:               ...(fullResponse?.errors || []),",
          "216:               ...maybeMultipart",
          "217:                 .map(i => i.errors)",
          "218:                 .flat()",
          "219:                 .filter(Boolean),",
          "220:             ];",
          "222:             if (maybeErrors.length) {",
          "223:               payload.errors = maybeErrors;",
          "224:             }",
          "226:             for (const part of maybeMultipart) {",
          "228:               const { path, data, errors: _errors, ...rest } = part;",
          "229:               if (path) {",
          "230:                 if (!data) {",
          "231:                   throw new Error(",
          "232:                     `Expected part to contain a data property, but got ${part}`,",
          "233:                   );",
          "234:                 }",
          "236:                 setValue(payload.data, path, data, { merge: true });",
          "237:               } else if (data) {",
          "240:                 payload.data = part.data;",
          "241:               }",
          "244:               fullResponse = {",
          "245:                 ...payload,",
          "246:                 ...rest,",
          "247:               };",
          "248:             }",
          "250:             setIsFetching(false);",
          "251:             setResponse(formatResult(fullResponse));",
          "252:           } else {",
          "253:             const response = formatResult(result);",
          "254:             setIsFetching(false);",
          "255:             setResponse(response);",
          "256:           }",
          "257:         };",
          "259:         const fetch = fetcher(",
          "260:           {",
          "261:             query,",
          "262:             variables,",
          "263:             operationName: queryEditor.operationName,",
          "264:           },",
          "265:           {",
          "266:             headers: headers ?? undefined,",
          "267:             shouldPersistHeaders,",
          "268:             documentAST: queryEditor.documentAST ?? undefined,",
          "269:           },",
          "270:         );",
          "272:         const value = await Promise.resolve(fetch);",
          "273:         if (isObservable(value)) {",
          "277:           setSubscription(",
          "278:             value.subscribe({",
          "279:               next(result) {",
          "280:                 handleResponse(result);",
          "281:               },",
          "282:               error(error: Error) {",
          "283:                 setIsFetching(false);",
          "284:                 if (error) {",
          "285:                   setResponse(formatError(error));",
          "286:                 }",
          "287:                 setSubscription(null);",
          "288:               },",
          "289:               complete() {",
          "290:                 setIsFetching(false);",
          "291:                 setSubscription(null);",
          "292:               },",
          "293:             }),",
          "294:           );",
          "295:         } else if (isAsyncIterable(value)) {",
          "296:           (async () => {",
          "297:             try {",
          "298:               for await (const result of value) {",
          "299:                 handleResponse(result);",
          "300:               }",
          "301:               setIsFetching(false);",
          "302:               setSubscription(null);",
          "303:             } catch (error) {",
          "304:               setIsFetching(false);",
          "305:               setResponse(",
          "306:                 formatError(",
          "307:                   error instanceof Error ? error : new Error(`${error}`),",
          "308:                 ),",
          "309:               );",
          "310:               setSubscription(null);",
          "311:             }",
          "312:           })();",
          "314:           setSubscription({",
          "315:             unsubscribe: () => value[Symbol.asyncIterator]().return?.(),",
          "316:           });",
          "317:         } else {",
          "318:           handleResponse(value);",
          "319:         }",
          "320:       } catch (error) {",
          "321:         setIsFetching(false);",
          "322:         setResponse(",
          "323:           formatError(error instanceof Error ? error : new Error(`${error}`)),",
          "324:         );",
          "325:         setSubscription(null);",
          "326:       }",
          "327:     },",
          "328:     [",
          "329:       autoCompleteLeafs,",
          "330:       externalFragments,",
          "331:       fetcher,",
          "332:       headerEditor,",
          "333:       history,",
          "334:       onEditOperationName,",
          "335:       queryEditor,",
          "336:       responseEditor,",
          "337:       shouldPersistHeaders,",
          "338:       stop,",
          "339:       subscription,",
          "340:       updateActiveTabValues,",
          "341:       variableEditor,",
          "342:     ],",
          "343:   );",
          "345:   const value = useMemo<ExecutionContextType>(",
          "346:     () => ({ isFetching, run, stop, subscription }),",
          "347:     [isFetching, run, stop, subscription],",
          "348:   );",
          "350:   return (",
          "351:     <ExecutionContext.Provider value={value}>",
          "352:       {props.children}",
          "353:     </ExecutionContext.Provider>",
          "354:   );",
          "355: }",
          "357: export const useExecutionContext = createContextHook(ExecutionContext);",
          "359: function tryParseJson(str: string | undefined, errorMessage: string) {",
          "360:   let parsed: Record<string, unknown> | string | number | boolean | null = null;",
          "361:   try {",
          "362:     parsed = str && str.trim() !== '' ? JSON.parse(str) : null;",
          "363:   } catch (error) {",
          "364:     throw new Error(",
          "365:       `${errorMessage}: ${error instanceof Error ? error.message : error}.`,",
          "366:     );",
          "367:   }",
          "368:   return parsed;",
          "369: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts": [
          "File: packages/graphiql-react/src/index.ts -> packages/graphiql-react/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   useResponseEditor,",
          "14:   useVariableEditor,",
          "15: } from './editor';",
          "16: import {",
          "17:   ExplorerContext,",
          "18:   ExplorerContextProvider,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: import {",
          "17:   ExecutionContext,",
          "18:   ExecutionContextProvider,",
          "19:   useExecutionContext,",
          "20: } from './execution';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:   UseResponseEditorArgs,",
          "44:   UseVariableEditorArgs,",
          "45: } from './editor';",
          "46: import type {",
          "47:   ExplorerContextType,",
          "48:   ExplorerFieldDef,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import type { ExecutionContextType } from './execution';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:   useQueryEditor,",
          "69:   useResponseEditor,",
          "70:   useVariableEditor,",
          "72:   ExplorerContext,",
          "73:   ExplorerContextProvider,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   ExecutionContext,",
          "79:   ExecutionContextProvider,",
          "80:   useExecutionContext,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:   UseQueryEditorArgs,",
          "96:   UseResponseEditorArgs,",
          "97:   UseVariableEditorArgs,",
          "99:   ExplorerContextType,",
          "100:   ExplorerFieldDef,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:   ExecutionContextType,",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts": [
          "File: packages/graphiql/__mocks__/@graphiql/react.ts -> packages/graphiql/__mocks__/@graphiql/react.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {",
          "2:   EditorContext,",
          "3:   EditorContextProvider,",
          "4:   ExplorerContext,",
          "5:   ExplorerContextProvider,",
          "6:   HistoryContext,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4:   ExecutionContext,",
          "5:   ExecutionContextProvider,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:   useAutoCompleteLeafs,",
          "15:   useCopyQuery,",
          "16:   useEditorContext,",
          "17:   useExplorerContext,",
          "18:   useHistoryContext,",
          "19:   useMergeQuery,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:   useExecutionContext,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27: } from '@graphiql/react';",
          "28: import type {",
          "29:   EditorContextType,",
          "30:   ExplorerContextType,",
          "31:   ExplorerFieldDef,",
          "32:   ExplorerNavStack,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:   ExecutionContextType,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "46: export {",
          "47:   EditorContext,",
          "48:   EditorContextProvider,",
          "49:   ExplorerContext,",
          "50:   ExplorerContextProvider,",
          "51:   HistoryContext,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   ExecutionContext,",
          "54:   ExecutionContextProvider,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "59:   useAutoCompleteLeafs,",
          "60:   useCopyQuery,",
          "61:   useEditorContext,",
          "62:   useExplorerContext,",
          "63:   useHistoryContext,",
          "64:   useMergeQuery,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   useExecutionContext,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "70: export type {",
          "71:   EditorContextType,",
          "72:   ExplorerContextType,",
          "73:   ExplorerFieldDef,",
          "74:   ExplorerNavStack,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:   ExecutionContextType,",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/ExecuteButton.tsx||packages/graphiql/src/components/ExecuteButton.tsx": [
          "File: packages/graphiql/src/components/ExecuteButton.tsx -> packages/graphiql/src/components/ExecuteButton.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import { OperationDefinitionNode } from 'graphql';",
          "29:   const [optionsOpen, setOptionsOpen] = useState(false);",
          "30:   const [highlight, setHighlight] = useState<OperationDefinitionNode | null>(",
          "31:     null,",
          "32:   );",
          "35:   const hasOptions = operations.length > 1;",
          "37:   return (",
          "",
          "[Removed Lines]",
          "7: import React, { useContext, useState } from 'react';",
          "9: import { EditorContext } from '@graphiql/react';",
          "11: type ExecuteButtonProps = {",
          "12:   isRunning: boolean;",
          "13:   onStop: () => void;",
          "14:   onRun: (value?: string) => void;",
          "15: };",
          "17: export function ExecuteButton({",
          "18:   isRunning,",
          "19:   onStop,",
          "20:   onRun,",
          "21: }: ExecuteButtonProps) {",
          "22:   const editorContext = useContext(EditorContext);",
          "23:   if (!editorContext) {",
          "24:     throw new Error(",
          "25:       'Tried to render the `ExecuteButton` component without the necessary context. Make sure that the `EditorContextProvider` from `@graphiql/react` is rendered higher in the tree.',",
          "26:     );",
          "27:   }",
          "34:   const operations = editorContext.queryEditor?.operations || [];",
          "",
          "[Added Lines]",
          "7: import { useEditorContext, useExecutionContext } from '@graphiql/react';",
          "9: import React, { useState } from 'react';",
          "11: export function ExecuteButton() {",
          "12:   const { queryEditor } = useEditorContext({ nonNull: true });",
          "13:   const { isFetching, run, stop, subscription } = useExecutionContext({",
          "14:     nonNull: true,",
          "15:   });",
          "21:   const isRunning = isFetching || Boolean(subscription);",
          "22:   const operations = queryEditor?.operations || [];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:           isRunning || !hasOptions",
          "80:             ? () => {",
          "81:                 if (isRunning) {",
          "83:                 } else {",
          "85:                 }",
          "86:               }",
          "87:             : undefined",
          "",
          "[Removed Lines]",
          "82:                   onStop();",
          "84:                   onRun();",
          "",
          "[Added Lines]",
          "70:                   stop();",
          "72:                   run();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:                 onMouseOut={() => setHighlight(null)}",
          "110:                 onMouseUp={() => {",
          "111:                   setOptionsOpen(false);",
          "113:                 }}>",
          "114:                 {opName}",
          "115:               </li>",
          "",
          "[Removed Lines]",
          "112:                   onRun(operation.name && operation.name.value);",
          "",
          "[Added Lines]",
          "100:                   run(operation.name && operation.name.value);",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: } from 'react';",
          "14: import {",
          "15:   GraphQLSchema,",
          "19:   ValidationRule,",
          "20:   FragmentDefinitionNode,",
          "21:   DocumentNode,",
          "22: } from 'graphql';",
          "25: import {",
          "26:   EditorContextProvider,",
          "27:   ExplorerContextProvider,",
          "28:   HistoryContextProvider,",
          "29:   SchemaContextProvider,",
          "",
          "[Removed Lines]",
          "16:   parse,",
          "17:   print,",
          "18:   visit,",
          "23: import { getFragmentDependenciesForAST } from 'graphql-language-service';",
          "",
          "[Added Lines]",
          "23:   ExecutionContextProvider,",
          "24:   ExecutionContextType,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:   useAutoCompleteLeafs,",
          "32:   useCopyQuery,",
          "33:   useEditorContext,",
          "34:   useExplorerContext,",
          "35:   useHistoryContext,",
          "36:   useMergeQuery,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:   useExecutionContext,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61: import debounce from '../utility/debounce';",
          "62: import find from '../utility/find';",
          "63: import { getLeft, getTop } from '../utility/elementPosition';",
          "72: import type {",
          "73:   Fetcher,",
          "76:   GetDefaultFieldNamesFn,",
          "77:   QueryStoreItem,",
          "80: } from '@graphiql/toolkit';",
          "82: import { Tab, TabAddButton, Tabs } from './Tabs';",
          "",
          "[Removed Lines]",
          "64: import setValue from 'set-value';",
          "66: import {",
          "67:   formatError,",
          "68:   formatResult,",
          "69:   isAsyncIterable,",
          "70:   isObservable,",
          "71: } from '@graphiql/toolkit';",
          "74:   FetcherResult,",
          "75:   FetcherResultPayload,",
          "78:   SyncFetcherResult,",
          "79:   Unsubscribable,",
          "",
          "[Added Lines]",
          "64: import { formatError, formatResult } from '@graphiql/toolkit';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "312: };",
          "314: export type GraphiQLState = {",
          "316:   editorFlex: number;",
          "317:   secondaryEditorOpen: boolean;",
          "318:   secondaryEditorHeight: number;",
          "319:   variableEditorActive: boolean;",
          "320:   headerEditorActive: boolean;",
          "321:   headerEditorEnabled: boolean;",
          "323:   docExplorerWidth: number;",
          "326: };",
          "",
          "[Removed Lines]",
          "315:   response?: string;",
          "322:   shouldPersistHeaders: boolean;",
          "324:   isWaitingForResponse: boolean;",
          "325:   subscription?: Unsubscribable | null;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "334: export function GraphiQL({",
          "335:   dangerouslyAssumeSchemaIsValid,",
          "336:   docExplorerOpen,",
          "337:   inputValueDeprecation,",
          "338:   introspectionQueryName,",
          "339:   maxHistoryLength,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:   fetcher,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "344:   schemaDescription,",
          "345:   ...props",
          "346: }: GraphiQLProps) {",
          "347:   return (",
          "348:     <StorageContextProvider storage={storage}>",
          "372:     </StorageContextProvider>",
          "373:   );",
          "374: }",
          "",
          "[Removed Lines]",
          "349:       <EditorContextProvider",
          "350:         defaultQuery={props.defaultQuery}",
          "351:         headers={props.headers}",
          "352:         query={props.query}",
          "353:         variables={props.variables}>",
          "354:         <SchemaContextProvider",
          "355:           dangerouslyAssumeSchemaIsValid={dangerouslyAssumeSchemaIsValid}",
          "356:           fetcher={props.fetcher}",
          "357:           inputValueDeprecation={inputValueDeprecation}",
          "358:           introspectionQueryName={introspectionQueryName}",
          "359:           schema={schema}",
          "360:           schemaDescription={schemaDescription}>",
          "361:           <ExplorerContextProvider",
          "362:             isVisible={docExplorerOpen}",
          "363:             onToggleVisibility={onToggleDocs}>",
          "364:             <HistoryContextProvider",
          "365:               maxHistoryLength={maxHistoryLength}",
          "366:               onToggle={onToggleHistory}>",
          "367:               <GraphiQLConsumeContexts {...props} />",
          "368:             </HistoryContextProvider>",
          "369:           </ExplorerContextProvider>",
          "370:         </SchemaContextProvider>",
          "371:       </EditorContextProvider>",
          "",
          "[Added Lines]",
          "334:   if (typeof fetcher !== 'function') {",
          "335:     throw new TypeError('GraphiQL requires a fetcher function.');",
          "336:   }",
          "340:       <HistoryContextProvider",
          "341:         maxHistoryLength={maxHistoryLength}",
          "342:         onToggle={onToggleHistory}>",
          "343:         <EditorContextProvider",
          "344:           defaultQuery={props.defaultQuery}",
          "345:           headers={props.headers}",
          "346:           query={props.query}",
          "347:           variables={props.variables}>",
          "348:           <SchemaContextProvider",
          "349:             dangerouslyAssumeSchemaIsValid={dangerouslyAssumeSchemaIsValid}",
          "350:             fetcher={fetcher}",
          "351:             inputValueDeprecation={inputValueDeprecation}",
          "352:             introspectionQueryName={introspectionQueryName}",
          "353:             schema={schema}",
          "354:             schemaDescription={schemaDescription}>",
          "355:             <ExecutionContextProvider",
          "356:               externalFragments={props.externalFragments}",
          "357:               fetcher={fetcher}",
          "358:               onEditOperationName={props.onEditOperationName}",
          "359:               shouldPersistHeaders={props.shouldPersistHeaders}>",
          "360:               <ExplorerContextProvider",
          "361:                 isVisible={docExplorerOpen}",
          "362:                 onToggleVisibility={onToggleDocs}>",
          "363:                 <GraphiQLConsumeContexts {...props} />",
          "364:               </ExplorerContextProvider>",
          "365:             </ExecutionContextProvider>",
          "366:           </SchemaContextProvider>",
          "367:         </EditorContextProvider>",
          "368:       </HistoryContextProvider>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "416:   | 'dangerouslyAssumeSchemaIsValid'",
          "417:   | 'defaultQuery'",
          "418:   | 'docExplorerOpen'",
          "419:   | 'inputValueDeprecation'",
          "420:   | 'introspectionQueryName'",
          "421:   | 'maxHistoryLength'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416:   | 'fetcher'",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "433:   ...props",
          "434: }: GraphiQLWithContextProviderProps) {",
          "435:   const editorContext = useEditorContext({ nonNull: true });",
          "436:   const explorerContext = useExplorerContext();",
          "437:   const historyContext = useHistoryContext();",
          "438:   const schemaContext = useSchemaContext({ nonNull: true });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434:   const executionContext = useExecutionContext({ nonNull: true });",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "447:     <GraphiQLWithContext",
          "448:       {...props}",
          "449:       editorContext={editorContext}",
          "450:       explorerContext={explorerContext}",
          "451:       historyContext={historyContext}",
          "452:       schemaContext={schemaContext}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "449:       executionContext={executionContext}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "462: type GraphiQLWithContextConsumerProps = Omit<",
          "463:   GraphiQLWithContextProviderProps,",
          "465: > & {",
          "466:   editorContext: EditorContextType;",
          "467:   explorerContext: ExplorerContextType | null;",
          "468:   historyContext: HistoryContextType | null;",
          "469:   schemaContext: SchemaContextType;",
          "",
          "[Removed Lines]",
          "464:   'onCopyQuery' | 'getDefaultFieldNames'",
          "",
          "[Added Lines]",
          "464:   'fetcher' | 'getDefaultFieldNames' | 'onCopyQuery'",
          "467:   executionContext: ExecutionContextType;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "479:   GraphiQLWithContextConsumerProps,",
          "480:   GraphiQLState",
          "481: > {",
          "489:   graphiqlContainer: Maybe<HTMLDivElement>;",
          "490:   editorBarComponent: Maybe<HTMLDivElement>;",
          "",
          "[Removed Lines]",
          "483:   _editorQueryID = 0;",
          "486:   componentIsMounted: boolean;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "492:   constructor(props: GraphiQLWithContextConsumerProps) {",
          "493:     super(props);",
          "503:     const variables =",
          "504:       props.variables ?? props.storageContext?.get('variables') ?? undefined;",
          "",
          "[Removed Lines]",
          "496:     if (typeof props.fetcher !== 'function') {",
          "497:       throw new TypeError('GraphiQL requires a fetcher function.');",
          "498:     }",
          "501:     this.componentIsMounted = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "517:     }",
          "519:     const headerEditorEnabled = props.headerEditorEnabled ?? true;",
          "523:     this.state = {",
          "525:       editorFlex: Number(this.props.storageContext?.get('editorFlex')) || 1,",
          "526:       secondaryEditorOpen,",
          "527:       secondaryEditorHeight:",
          "",
          "[Removed Lines]",
          "520:     const shouldPersistHeaders = props.shouldPersistHeaders ?? false;",
          "524:       response: '',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "534:       headerEditorActive:",
          "535:         this.props.storageContext?.get('headerEditorActive') === 'true',",
          "536:       headerEditorEnabled,",
          "538:       docExplorerWidth:",
          "539:         Number(this.props.storageContext?.get('docExplorerWidth')) ||",
          "540:         DEFAULT_DOC_EXPLORER_WIDTH,",
          "543:     };",
          "544:   }",
          "546:   componentDidMount() {",
          "550:     if (typeof window !== 'undefined') {",
          "551:       window.g = this;",
          "552:     }",
          "553:   }",
          "581:   render() {",
          "582:     const children = React.Children.toArray(this.props.children);",
          "",
          "[Removed Lines]",
          "537:       shouldPersistHeaders,",
          "541:       isWaitingForResponse: false,",
          "542:       subscription: null,",
          "548:     this.componentIsMounted = true;",
          "555:   UNSAFE_componentWillMount() {",
          "556:     this.componentIsMounted = false;",
          "557:   }",
          "561:   UNSAFE_componentWillReceiveProps(",
          "562:     nextProps: GraphiQLWithContextConsumerProps,",
          "563:   ) {",
          "564:     let nextResponse = this.state.response;",
          "566:     if (nextProps.response !== undefined) {",
          "567:       nextResponse = nextProps.response;",
          "568:     }",
          "570:     this.setState({",
          "571:       response: nextResponse,",
          "572:     });",
          "573:   }",
          "577:   safeSetState = (nextState: any, callback?: any): void => {",
          "578:     this.componentIsMounted && this.setState(nextState, callback);",
          "579:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "668:             {this.props.beforeTopBarContent}",
          "669:             <div className=\"topBar\">",
          "670:               {logo}",
          "676:               {toolbar}",
          "677:             </div>",
          "678:             {this.props.explorerContext &&",
          "",
          "[Removed Lines]",
          "671:               <ExecuteButton",
          "672:                 isRunning={Boolean(this.state.subscription)}",
          "673:                 onRun={this.handleRunQuery}",
          "674:                 onStop={this.handleStopQuery}",
          "675:               />",
          "",
          "[Added Lines]",
          "624:               <ExecuteButton />",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "699:                   title={tab.title}",
          "700:                   isCloseable={this.props.editorContext.tabs.length > 1}",
          "701:                   onSelect={() => {",
          "704:                     this.props.editorContext.changeTab(index);",
          "710:                   }}",
          "711:                   onClose={() => {",
          "712:                     if (this.props.editorContext.activeTabIndex === index) {",
          "714:                     }",
          "716:                     this.props.editorContext.closeTab(index);",
          "726:                   }}",
          "727:                   tabProps={{",
          "728:                     'aria-controls': 'sessionWrap',",
          "",
          "[Removed Lines]",
          "702:                     this.handleStopQuery();",
          "705:                     this.setState({",
          "706:                       response:",
          "707:                         this.props.editorContext.tabs[index].response ??",
          "708:                         undefined,",
          "709:                     });",
          "713:                       this.handleStopQuery();",
          "717:                     this.setState({",
          "718:                       response:",
          "719:                         this.props.editorContext.tabs[",
          "720:                           Math.max(",
          "721:                             this.props.editorContext.activeTabIndex - 1,",
          "722:                             0,",
          "723:                           )",
          "724:                         ].response ?? undefined,",
          "725:                     });",
          "",
          "[Added Lines]",
          "651:                     this.props.executionContext.stop();",
          "656:                       this.props.executionContext.stop();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "733:               <TabAddButton",
          "734:                 onClick={() => {",
          "735:                   this.props.editorContext.addTab();",
          "737:                 }}",
          "738:               />",
          "739:             </Tabs>",
          "",
          "[Removed Lines]",
          "736:                   this.setState({ response: undefined });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "754:                 externalFragments={this.props.externalFragments}",
          "755:                 onEdit={this.handleEditQuery}",
          "756:                 onEditOperationName={this.props.onEditOperationName}",
          "758:                 readOnly={this.props.readOnly}",
          "759:                 validationRules={this.props.validationRules}",
          "760:               />",
          "",
          "[Removed Lines]",
          "757:                 onRunQuery={this.handleEditorRunQuery}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "797:                 </div>",
          "798:                 <VariableEditor",
          "799:                   onEdit={this.handleEditVariables}",
          "801:                   editorTheme={this.props.editorTheme}",
          "802:                   readOnly={this.props.readOnly}",
          "803:                   active={this.state.variableEditorActive}",
          "",
          "[Removed Lines]",
          "800:                   onRunQuery={this.handleEditorRunQuery}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "807:                     active={this.state.headerEditorActive}",
          "808:                     editorTheme={this.props.editorTheme}",
          "809:                     onEdit={this.handleEditHeaders}",
          "811:                     readOnly={this.props.readOnly}",
          "812:                     shouldPersistHeaders={this.props.shouldPersistHeaders}",
          "813:                   />",
          "",
          "[Removed Lines]",
          "810:                     onRunQuery={this.handleEditorRunQuery}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "815:               </section>",
          "816:             </div>",
          "817:             <div className=\"resultWrap\">",
          "819:                 <div className=\"spinner-container\">",
          "820:                   <div className=\"spinner\" />",
          "821:                 </div>",
          "822:               )}",
          "823:               <ResultViewer",
          "825:                 editorTheme={this.props.editorTheme}",
          "826:                 ResponseTooltip={this.props.ResultsTooltip}",
          "827:               />",
          "",
          "[Removed Lines]",
          "818:               {this.state.isWaitingForResponse && (",
          "824:                 value={this.state.response}",
          "",
          "[Added Lines]",
          "747:               {this.props.executionContext.isFetching && (",
          "753:                 value={this.props.response}",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1194:   handleEditQuery = (value: string) => {",
          "1195:     this.props.onEditQuery?.(",
          "1196:       value,",
          "",
          "[Removed Lines]",
          "900:   private async _fetchQuery(",
          "901:     query: string,",
          "902:     variables: string | undefined,",
          "903:     headers: string | undefined,",
          "904:     operationName: string | undefined,",
          "905:     shouldPersistHeaders: boolean,",
          "906:     cb: (value: FetcherResult) => any,",
          "907:   ): Promise<null | Unsubscribable> {",
          "908:     const fetcher = this.props.fetcher;",
          "909:     let jsonVariables = null;",
          "910:     let jsonHeaders = null;",
          "912:     try {",
          "913:       jsonVariables =",
          "914:         variables && variables.trim() !== '' ? JSON.parse(variables) : null;",
          "915:     } catch (error) {",
          "916:       throw new Error(",
          "917:         `Variables are invalid JSON: ${(error as Error).message}.`,",
          "918:       );",
          "919:     }",
          "921:     if (typeof jsonVariables !== 'object') {",
          "922:       throw new Error('Variables are not a JSON object.');",
          "923:     }",
          "925:     try {",
          "926:       jsonHeaders =",
          "927:         headers && headers.trim() !== '' ? JSON.parse(headers) : null;",
          "928:     } catch (error) {",
          "929:       throw new Error(`Headers are invalid JSON: ${(error as Error).message}.`);",
          "930:     }",
          "932:     if (typeof jsonHeaders !== 'object') {",
          "933:       throw new Error('Headers are not a JSON object.');",
          "934:     }",
          "936:     const documentAST =",
          "937:       this.props.editorContext.queryEditor?.documentAST ?? undefined;",
          "939:     if (this.props.externalFragments) {",
          "940:       const externalFragments = new Map<string, FragmentDefinitionNode>();",
          "942:       if (Array.isArray(this.props.externalFragments)) {",
          "943:         this.props.externalFragments.forEach(def => {",
          "944:           externalFragments.set(def.name.value, def);",
          "945:         });",
          "946:       } else {",
          "947:         visit(parse(this.props.externalFragments, {}), {",
          "948:           FragmentDefinition(def) {",
          "949:             externalFragments.set(def.name.value, def);",
          "950:           },",
          "951:         });",
          "952:       }",
          "954:       const fragmentDependencies = documentAST",
          "955:         ? getFragmentDependenciesForAST(documentAST, externalFragments)",
          "956:         : [];",
          "957:       if (fragmentDependencies.length > 0) {",
          "958:         query +=",
          "959:           '\\n' +",
          "960:           fragmentDependencies",
          "961:             .map((node: FragmentDefinitionNode) => print(node))",
          "962:             .join('\\n');",
          "963:       }",
          "964:     }",
          "966:     const fetch = fetcher(",
          "967:       { query, variables: jsonVariables, operationName },",
          "968:       { headers: jsonHeaders, shouldPersistHeaders, documentAST },",
          "969:     );",
          "971:     return Promise.resolve<SyncFetcherResult>(fetch)",
          "972:       .then(value => {",
          "973:         if (isObservable(value)) {",
          "977:           const subscription = value.subscribe({",
          "978:             next: cb,",
          "979:             error: (error: Error) => {",
          "980:               this.safeSetState({",
          "981:                 isWaitingForResponse: false,",
          "982:                 response: error ? formatError(error) : undefined,",
          "983:                 subscription: null,",
          "984:               });",
          "985:             },",
          "986:             complete: () => {",
          "987:               this.safeSetState({",
          "988:                 isWaitingForResponse: false,",
          "989:                 subscription: null,",
          "990:               });",
          "991:             },",
          "992:           });",
          "994:           return subscription;",
          "995:         } else if (isAsyncIterable(value)) {",
          "996:           (async () => {",
          "997:             try {",
          "998:               for await (const result of value) {",
          "999:                 cb(result);",
          "1000:               }",
          "1001:               this.safeSetState({",
          "1002:                 isWaitingForResponse: false,",
          "1003:                 subscription: null,",
          "1004:               });",
          "1005:             } catch (error) {",
          "1006:               this.safeSetState({",
          "1007:                 isWaitingForResponse: false,",
          "1008:                 response: error ? formatError(error as Error) : undefined,",
          "1009:                 subscription: null,",
          "1010:               });",
          "1011:             }",
          "1012:           })();",
          "1014:           return {",
          "1015:             unsubscribe: () => value[Symbol.asyncIterator]().return?.(),",
          "1016:           };",
          "1017:         } else {",
          "1018:           cb(value);",
          "1019:           return null;",
          "1020:         }",
          "1021:       })",
          "1022:       .catch(error => {",
          "1023:         this.safeSetState({",
          "1024:           isWaitingForResponse: false,",
          "1025:           response: error ? formatError(error) : undefined,",
          "1026:         });",
          "1027:         return null;",
          "1028:       });",
          "1029:   }",
          "1031:   handleRunQuery = async (selectedOperationName?: string) => {",
          "1032:     this._editorQueryID++;",
          "1033:     const queryID = this._editorQueryID;",
          "1038:     const editedQuery =",
          "1039:       this.props.autoCompleteLeafs() || getQuery(this.props) || '';",
          "1040:     const variables = getVariables(this.props);",
          "1041:     const headers = getHeaders(this.props);",
          "1042:     const shouldPersistHeaders = this.state.shouldPersistHeaders;",
          "1043:     let operationName =",
          "1044:       this.props.editorContext.queryEditor?.operationName ?? undefined;",
          "1048:     if (selectedOperationName && selectedOperationName !== operationName) {",
          "1049:       operationName = selectedOperationName;",
          "1050:       if (this.props.editorContext.queryEditor) {",
          "1051:         this.props.editorContext.queryEditor.operationName = selectedOperationName;",
          "1052:       }",
          "1053:       this.props.onEditOperationName?.(operationName);",
          "1054:     }",
          "1056:     try {",
          "1057:       this.setState({ isWaitingForResponse: true, response: undefined });",
          "1059:       this.props.historyContext?.addToHistory({",
          "1060:         query: editedQuery,",
          "1061:         variables,",
          "1062:         headers,",
          "1063:         operationName,",
          "1064:       });",
          "1067:       let fullResponse: FetcherResultPayload = { data: {} };",
          "1070:       const subscription = await this._fetchQuery(",
          "1071:         editedQuery,",
          "1072:         variables,",
          "1073:         headers,",
          "1074:         operationName,",
          "1075:         shouldPersistHeaders,",
          "1076:         (result: FetcherResult) => {",
          "1077:           if (queryID === this._editorQueryID) {",
          "1078:             let maybeMultipart = Array.isArray(result) ? result : false;",
          "1079:             if (",
          "1080:               !maybeMultipart &&",
          "1081:               typeof result === 'object' &&",
          "1082:               result !== null &&",
          "1083:               'hasNext' in result",
          "1084:             ) {",
          "1085:               maybeMultipart = [result];",
          "1086:             }",
          "1088:             if (maybeMultipart) {",
          "1089:               const payload: FetcherResultPayload = { data: fullResponse.data };",
          "1090:               const maybeErrors = [",
          "1091:                 ...(fullResponse?.errors || []),",
          "1092:                 ...maybeMultipart",
          "1093:                   .map(i => i.errors)",
          "1094:                   .flat()",
          "1095:                   .filter(Boolean),",
          "1096:               ];",
          "1098:               if (maybeErrors.length) {",
          "1099:                 payload.errors = maybeErrors;",
          "1100:               }",
          "1102:               for (const part of maybeMultipart) {",
          "1104:                 const { path, data, errors: _errors, ...rest } = part;",
          "1105:                 if (path) {",
          "1106:                   if (!data) {",
          "1107:                     throw new Error(",
          "1108:                       `Expected part to contain a data property, but got ${part}`,",
          "1109:                     );",
          "1110:                   }",
          "1112:                   setValue(payload.data, path, data, { merge: true });",
          "1113:                 } else if (data) {",
          "1116:                   payload.data = part.data;",
          "1117:                 }",
          "1120:                 fullResponse = {",
          "1121:                   ...payload,",
          "1122:                   ...rest,",
          "1123:                 };",
          "1124:               }",
          "1126:               this.setState({",
          "1127:                 isWaitingForResponse: false,",
          "1128:                 response: formatResult(fullResponse),",
          "1129:               });",
          "1130:             } else {",
          "1131:               const response = formatResult(result);",
          "1132:               this.setState({",
          "1133:                 isWaitingForResponse: false,",
          "1134:                 response,",
          "1135:               });",
          "1136:               this.props.editorContext.updateActiveTabValues({ response });",
          "1137:             }",
          "1138:           }",
          "1139:         },",
          "1140:       );",
          "1142:       this.setState({ subscription });",
          "1143:     } catch (error) {",
          "1144:       this.setState({",
          "1145:         isWaitingForResponse: false,",
          "1146:         response: (error as Error).message,",
          "1147:       });",
          "1148:     }",
          "1149:   };",
          "1151:   handleStopQuery = () => {",
          "1152:     const subscription = this.state.subscription;",
          "1153:     this.setState({",
          "1154:       isWaitingForResponse: false,",
          "1155:       subscription: null,",
          "1156:     });",
          "1157:     if (subscription) {",
          "1158:       subscription.unsubscribe();",
          "1159:     }",
          "1160:   };",
          "1162:   private _runQueryAtCursor() {",
          "1163:     if (this.state.subscription) {",
          "1164:       this.handleStopQuery();",
          "1165:       return;",
          "1166:     }",
          "1168:     let operationName;",
          "1169:     const operations = this.props.editorContext.queryEditor?.operations;",
          "1170:     if (operations) {",
          "1171:       const editor = this.getQueryEditor();",
          "1172:       if (editor && editor.hasFocus()) {",
          "1173:         const cursor = editor.getCursor();",
          "1174:         const cursorIndex = editor.indexFromPos(cursor);",
          "1177:         for (let i = 0; i < operations.length; i++) {",
          "1178:           const operation = operations[i];",
          "1179:           if (",
          "1180:             operation.loc &&",
          "1181:             operation.loc.start <= cursorIndex &&",
          "1182:             operation.loc.end >= cursorIndex",
          "1183:           ) {",
          "1184:             operationName = operation.name && operation.name.value;",
          "1185:             break;",
          "1186:           }",
          "1187:         }",
          "1188:       }",
          "1189:     }",
          "1191:     this.handleRunQuery(operationName);",
          "1192:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1210:     }",
          "1211:   };",
          "1217:   handleSelectHistoryQuery = ({",
          "1218:     query,",
          "1219:     variables,",
          "",
          "[Removed Lines]",
          "1213:   handleEditorRunQuery = () => {",
          "1214:     this._runQueryAtCursor();",
          "1215:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1494:   return child.type === component;",
          "1495: }",
          "1501: function setQuery(props: GraphiQLWithContextConsumerProps, value: string) {",
          "1502:   props.editorContext.queryEditor?.setValue(value);",
          "1503: }",
          "1509: function setVariables(props: GraphiQLWithContextConsumerProps, value: string) {",
          "1510:   props.editorContext.variableEditor?.setValue(value);",
          "1511: }",
          "1517: function setHeaders(props: GraphiQLWithContextConsumerProps, value: string) {",
          "1518:   props.editorContext.headerEditor?.setValue(value);",
          "1519: }",
          "",
          "[Removed Lines]",
          "1497: function getQuery(props: GraphiQLWithContextConsumerProps) {",
          "1498:   return props.editorContext.queryEditor?.getValue();",
          "1499: }",
          "1505: function getVariables(props: GraphiQLWithContextConsumerProps) {",
          "1506:   return props.editorContext.variableEditor?.getValue();",
          "1507: }",
          "1513: function getHeaders(props: GraphiQLWithContextConsumerProps) {",
          "1514:   return props.editorContext.headerEditor?.getValue();",
          "1515: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx||packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx": [
          "File: packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx -> packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:     const executeQueryButton = getByTitle('Execute Query (Ctrl-Enter)');",
          "288:     fireEvent.click(executeQueryButton);",
          "289:     expect(container.querySelectorAll('.history-label')).toHaveLength(1);",
          "291:     fireEvent.change(",
          "292:       container.querySelector('[aria-label=\"Query Variables\"] .mockCodeMirror'),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:     await wait();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:     const executeQueryButton = getByTitle('Execute Query (Ctrl-Enter)');",
          "317:     fireEvent.click(executeQueryButton);",
          "318:     expect(container.querySelectorAll('.history-label')).toHaveLength(1);",
          "320:     fireEvent.click(getByText('Request Headers'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320:     await wait();",
          "",
          "---------------"
        ],
        "packages/graphiql/test/schema.js||packages/graphiql/test/schema.js": [
          "File: packages/graphiql/test/schema.js -> packages/graphiql/test/schema.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:       args: {",
          "337:         delay: delayArgument(600),",
          "338:       },",
          "340:         for (const hi of ['Hi', 'Bonjour', 'Hola', 'Ciao', 'Zdravo']) {",
          "341:           if (args && args.delay) {",
          "342:             await sleep(args.delay);",
          "",
          "[Removed Lines]",
          "339:       async *subscribe(args) {",
          "",
          "[Added Lines]",
          "339:       async *subscribe(root, args) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d517989996cf6f33ef7e08d18a870e2bed565cca",
      "candidate_info": {
        "commit_hash": "d517989996cf6f33ef7e08d18a870e2bed565cca",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/d517989996cf6f33ef7e08d18a870e2bed565cca",
        "files": [
          ".changeset/seven-ties-march.md",
          "packages/graphiql/src/components/GraphiQL.tsx"
        ],
        "message": "feat: onSchemaChange callback (#2190)",
        "before_after_code_files": [
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:   maxHistoryLength?: number;",
          "287: };",
          "289: export type GraphiQLState = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:   onSchemaChange?: (schema: GraphQLSchema) => void;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1120:               ...queryFacts,",
          "1121:               schemaErrors: undefined,",
          "1122:             });",
          "1123:           }",
          "1124:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1127:             this.props.onSchemaChange?.(schema);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e20760fbd95c13d6d549cba3faa15a59aee9a2c0",
      "candidate_info": {
        "commit_hash": "e20760fbd95c13d6d549cba3faa15a59aee9a2c0",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/e20760fbd95c13d6d549cba3faa15a59aee9a2c0",
        "files": [
          ".changeset/short-toes-whisper.md",
          "packages/graphql-language-service/package.json",
          "yarn.lock"
        ],
        "message": "use temporary fork of picomatch based on browser support PR (#2101)",
        "before_after_code_files": [
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "11047:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
          "11049: \"graphiql@file:packages/graphiql\":",
          "11051:   dependencies:",
          "11052:     \"@graphiql/toolkit\" \"^0.4.2\"",
          "11053:     codemirror \"^5.58.2\"",
          "11055:     copy-to-clipboard \"^3.2.0\"",
          "11056:     dset \"^3.1.0\"",
          "11057:     entities \"^2.0.0\"",
          "11058:     escape-html \"^1.0.3\"",
          "11060:     markdown-it \"^12.2.0\"",
          "11062: graphql-config@^4.1.0:",
          "",
          "[Removed Lines]",
          "11050:   version \"1.5.11\"",
          "11054:     codemirror-graphql \"^1.2.7\"",
          "11059:     graphql-language-service \"^4.1.0\"",
          "",
          "[Added Lines]",
          "11050:   version \"1.5.13\"",
          "11054:     codemirror-graphql \"^1.2.8\"",
          "11059:     graphql-language-service \"^4.1.1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15753:   resolved \"https://registry.yarnpkg.com/picocolors/-/picocolors-1.0.0.tgz#cb5bdc74ff3f51892236eaf79d68bc44564ab81c\"",
          "15754:   integrity sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
          "15756: picomatch@^2.0.4, picomatch@^2.0.5, picomatch@^2.2.1:",
          "15757:   version \"2.2.2\"",
          "15758:   resolved \"https://registry.yarnpkg.com/picomatch/-/picomatch-2.2.2.tgz#21f333e9b6b8eaff02468f5146ea406d345f4dad\"",
          "15759:   integrity sha512-q0M/9eZHzmr0AulXyPwNfZjtwZ/RBZlbN3K3CErVrk50T2ASYI7Bye0EvekFY3IP1Nt2DHu0re+V2ZHIpMkuWg==",
          "15762:   version \"2.3.0\"",
          "15763:   resolved \"https://registry.yarnpkg.com/picomatch/-/picomatch-2.3.0.tgz#f1f061de8f6a4bf022892e2d128234fb98302972\"",
          "15764:   integrity sha512-lY1Q/PiJGC2zOv/z391WOTD+Z02bCgsFfvxoXXf6h7kv9o+WmsmzYqrAwY63sNgOxE4xEdq0WyUnXfKeBrSvYw==",
          "",
          "[Removed Lines]",
          "15761: picomatch@^2.2.3, picomatch@^2.3.0:",
          "",
          "[Added Lines]",
          "15756: picomatch-browser@^2.2.5:",
          "15757:   version \"2.2.5\"",
          "15758:   resolved \"https://registry.yarnpkg.com/picomatch-browser/-/picomatch-browser-2.2.5.tgz#dde032340731d069289e86164e0e143c7249ff78\"",
          "15759:   integrity sha512-Da/xnHhOtbSVhkayCPL9jcQ1nZBAm0Ylu5KAChEIr3xV/3jqQIAHoIqIEbEB9TKmgbLbV3PsRQ8VC6m74YVoEw==",
          "15766: picomatch@^2.2.3:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2025ba06c5aa8e8ac68d29538ff135f3efc8e46",
      "candidate_info": {
        "commit_hash": "f2025ba06c5aa8e8ac68d29538ff135f3efc8e46",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/f2025ba06c5aa8e8ac68d29538ff135f3efc8e46",
        "files": [
          ".changeset/kind-dolphins-drop.md",
          "packages/graphiql-react/src/editor/completion.ts",
          "packages/graphiql-react/src/editor/context.tsx",
          "packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/index.ts",
          "packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/package.json",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/QueryHistory.tsx",
          "packages/graphiql/src/components/VariableEditor.tsx",
          "packages/graphiql/src/index.ts",
          "packages/graphiql/src/utility/onHasCompletion.ts"
        ],
        "message": "add `useVariableEditor` hook to `@graphiql/react` (#2409)\n\n* add useVariableEditor hook\n\n* remove unused props\n\n* fix getting and setting headers\n\n* remove variables from react state and get them from editor state\n\n* mock useVariableEditor and mock editor getter and setter\n\n* add changeset",
        "before_after_code_files": [
          "packages/graphiql-react/src/editor/completion.ts||packages/graphiql-react/src/editor/completion.ts",
          "packages/graphiql-react/src/editor/context.tsx||packages/graphiql-react/src/editor/context.tsx",
          "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/index.ts||packages/graphiql-react/src/editor/index.ts",
          "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/QueryHistory.tsx||packages/graphiql/src/components/QueryHistory.tsx",
          "packages/graphiql/src/components/VariableEditor.tsx||packages/graphiql/src/components/VariableEditor.tsx",
          "packages/graphiql/src/index.ts||packages/graphiql/src/index.ts",
          "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
            "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
            "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/editor/completion.ts||packages/graphiql-react/src/editor/completion.ts": [
          "File: packages/graphiql-react/src/editor/completion.ts -> packages/graphiql-react/src/editor/completion.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   _cm: Editor,",
          "19:   data: EditorChange | undefined,",
          "20:   onHintInformationRender: (el: HTMLDivElement) => void,",
          "",
          "[Removed Lines]",
          "17: export default function onHasCompletion(",
          "",
          "[Added Lines]",
          "17: export function onHasCompletion(",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/context.tsx||packages/graphiql-react/src/editor/context.tsx": [
          "File: packages/graphiql-react/src/editor/context.tsx -> packages/graphiql-react/src/editor/context.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: export type EditorContextType = {",
          "6:   headerEditor: CodeMirrorEditor | null;",
          "7:   queryEditor: CodeMirrorEditor | null;",
          "8:   setHeaderEditor(newEditor: CodeMirrorEditor): void;",
          "9:   setQueryEditor(newEditor: CodeMirrorEditor): void;",
          "10: };",
          "12: export const EditorContext = createContext<EditorContextType>({",
          "13:   headerEditor: null,",
          "14:   queryEditor: null,",
          "15:   setHeaderEditor() {},",
          "16:   setQueryEditor() {},",
          "17: });",
          "19: export function EditorContextProvider(props: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:   variableEditor: CodeMirrorEditor | null;",
          "11:   setVariableEditor(newEditor: CodeMirrorEditor): void;",
          "17:   variableEditor: null,",
          "20:   setVariableEditor() {},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     null,",
          "25:   );",
          "26:   const [queryEditor, setQueryEditor] = useState<CodeMirrorEditor | null>(null);",
          "27:   return (",
          "28:     <EditorContext.Provider",
          "30:       {props.children}",
          "31:     </EditorContext.Provider>",
          "32:   );",
          "",
          "[Removed Lines]",
          "29:       value={{ headerEditor, queryEditor, setHeaderEditor, setQueryEditor }}>",
          "",
          "[Added Lines]",
          "31:   const [variableEditor, setVariableEditor] = useState<CodeMirrorEditor | null>(",
          "32:     null,",
          "33:   );",
          "36:       value={{",
          "37:         headerEditor,",
          "38:         queryEditor,",
          "39:         variableEditor,",
          "40:         setHeaderEditor,",
          "41:         setQueryEditor,",
          "42:         setVariableEditor,",
          "43:       }}>",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts": [
          "File: packages/graphiql-react/src/editor/hooks.ts -> packages/graphiql-react/src/editor/hooks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { EditorChange } from 'codemirror';",
          "2: import { RefObject, useEffect, useRef } from 'react';",
          "5: import { CodeMirrorEditor } from './types';",
          "7: export function useSynchronizeValue(",
          "",
          "[Removed Lines]",
          "4: import onHasCompletion from './completion';",
          "",
          "[Added Lines]",
          "4: import { onHasCompletion } from './completion';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/index.ts||packages/graphiql-react/src/editor/index.ts": [
          "File: packages/graphiql-react/src/editor/index.ts -> packages/graphiql-react/src/editor/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { EditorContext, EditorContextProvider } from './context';",
          "2: import { useHeaderEditor } from './header-editor';",
          "3: import { useQueryEditor } from './query-editor';",
          "5: import type { EditorContextType } from './context';",
          "6: import type { UseHeaderEditorArgs } from './header-editor';",
          "7: import type { UseQueryEditorArgs } from './query-editor';",
          "9: export {",
          "10:   EditorContext,",
          "11:   EditorContextProvider,",
          "12:   useHeaderEditor,",
          "13:   useQueryEditor,",
          "14: };",
          "",
          "[Removed Lines]",
          "16: export type { EditorContextType, UseHeaderEditorArgs, UseQueryEditorArgs };",
          "",
          "[Added Lines]",
          "1: import { onHasCompletion } from './completion';",
          "5: import { useVariableEditor } from './variable-editor';",
          "10: import type { UseVariableEditorArgs } from './variable-editor';",
          "13:   onHasCompletion,",
          "18:   useVariableEditor,",
          "21: export type {",
          "22:   EditorContextType,",
          "23:   UseHeaderEditorArgs,",
          "24:   UseQueryEditorArgs,",
          "25:   UseVariableEditorArgs,",
          "26: };",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx": [
          "File: packages/graphiql-react/src/editor/variable-editor.tsx -> packages/graphiql-react/src/editor/variable-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { VariableToType } from 'graphql-language-service';",
          "2: import { MutableRefObject, useContext, useEffect, useRef } from 'react';",
          "4: import { commonKeys, importCodeMirror } from './common';",
          "5: import { EditorContext } from './context';",
          "6: import {",
          "7:   CompletionCallback,",
          "8:   EditCallback,",
          "9:   EmptyCallback,",
          "10:   useChangeHandler,",
          "11:   useCompletion,",
          "12:   useKeyMap,",
          "13:   useResizeEditor,",
          "14:   useSynchronizeValue,",
          "15: } from './hooks';",
          "16: import { CodeMirrorEditor, CodeMirrorType } from './types';",
          "18: export type UseVariableEditorArgs = {",
          "19:   editorTheme?: string;",
          "20:   onEdit?: EditCallback;",
          "21:   onHintInformationRender?: CompletionCallback;",
          "22:   onPrettifyQuery?: EmptyCallback;",
          "23:   onMergeQuery?: EmptyCallback;",
          "24:   onRunQuery?: EmptyCallback;",
          "25:   readOnly?: boolean;",
          "26:   value?: string;",
          "27:   variableToType?: VariableToType;",
          "28: };",
          "30: export function useVariableEditor({",
          "31:   editorTheme = 'graphiql',",
          "32:   onEdit,",
          "33:   onHintInformationRender,",
          "34:   onMergeQuery,",
          "35:   onPrettifyQuery,",
          "36:   onRunQuery,",
          "37:   readOnly = false,",
          "38:   value,",
          "39:   variableToType,",
          "40: }: UseVariableEditorArgs = {}) {",
          "41:   const context = useContext(EditorContext);",
          "42:   const ref = useRef<HTMLDivElement>(null);",
          "43:   const codeMirrorRef = useRef<CodeMirrorType>();",
          "45:   if (!context) {",
          "46:     throw new Error(",
          "47:       'Tried to call the `useVariableEditor` hook without the necessary context. Make sure that the `EditorContextProvider` from `@graphiql/react` is rendered higher in the tree.',",
          "48:     );",
          "49:   }",
          "51:   const { variableEditor, setVariableEditor } = context;",
          "53:   useEffect(() => {",
          "54:     let isActive = true;",
          "56:     importCodeMirror([",
          "57:       import('codemirror-graphql/esm/variables/hint'),",
          "58:       import('codemirror-graphql/esm/variables/lint'),",
          "59:       import('codemirror-graphql/esm/variables/mode'),",
          "60:     ]).then(CodeMirror => {",
          "62:       if (!isActive) {",
          "63:         return;",
          "64:       }",
          "66:       codeMirrorRef.current = CodeMirror;",
          "68:       const container = ref.current;",
          "69:       if (!container) {",
          "70:         return;",
          "71:       }",
          "73:       const newEditor = CodeMirror(container, {",
          "74:         value: '',",
          "75:         lineNumbers: true,",
          "76:         tabSize: 2,",
          "77:         mode: 'graphql-variables',",
          "78:         theme: editorTheme,",
          "79:         keyMap: 'sublime',",
          "80:         autoCloseBrackets: true,",
          "81:         matchBrackets: true,",
          "82:         showCursorWhenSelecting: true,",
          "83:         readOnly: readOnly ? 'nocursor' : false,",
          "84:         foldGutter: true,",
          "85:         lint: {",
          "87:           variableToType: undefined,",
          "88:         },",
          "89:         hintOptions: {",
          "90:           closeOnUnfocus: false,",
          "91:           completeSingle: false,",
          "92:           container,",
          "94:           variableToType: undefined,",
          "95:         },",
          "96:         gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],",
          "97:         extraKeys: commonKeys,",
          "98:       });",
          "100:       newEditor.addKeyMap({",
          "101:         'Cmd-Space'() {",
          "102:           newEditor.showHint({ completeSingle: false, container });",
          "103:         },",
          "104:         'Ctrl-Space'() {",
          "105:           newEditor.showHint({ completeSingle: false, container });",
          "106:         },",
          "107:         'Alt-Space'() {",
          "108:           newEditor.showHint({ completeSingle: false, container });",
          "109:         },",
          "110:         'Shift-Space'() {",
          "111:           newEditor.showHint({ completeSingle: false, container });",
          "112:         },",
          "113:       });",
          "115:       newEditor.on('keyup', (editorInstance, event) => {",
          "116:         const code = event.keyCode;",
          "117:         if (",
          "118:           (code >= 65 && code <= 90) || // letters",
          "119:           (!event.shiftKey && code >= 48 && code <= 57) || // numbers",
          "120:           (event.shiftKey && code === 189) || // underscore",
          "121:           (event.shiftKey && code === 222) // \"",
          "122:         ) {",
          "123:           editorInstance.execCommand('autocomplete');",
          "124:         }",
          "125:       });",
          "127:       setVariableEditor(newEditor);",
          "128:     });",
          "130:     return () => {",
          "131:       isActive = false;",
          "132:     };",
          "133:   }, [editorTheme, readOnly, setVariableEditor]);",
          "135:   useSynchronizeVariableTypes(variableEditor, variableToType, codeMirrorRef);",
          "137:   useSynchronizeValue(variableEditor, value);",
          "139:   useChangeHandler(variableEditor, onEdit);",
          "141:   useCompletion(variableEditor, onHintInformationRender);",
          "143:   useKeyMap(variableEditor, ['Cmd-Enter', 'Ctrl-Enter'], onRunQuery);",
          "144:   useKeyMap(variableEditor, ['Shift-Ctrl-P'], onPrettifyQuery);",
          "145:   useKeyMap(variableEditor, ['Shift-Ctrl-M'], onMergeQuery);",
          "147:   useResizeEditor(variableEditor, ref);",
          "149:   return ref;",
          "150: }",
          "152: function useSynchronizeVariableTypes(",
          "153:   editor: CodeMirrorEditor | null,",
          "154:   variableToType: VariableToType | undefined,",
          "155:   codeMirrorRef: MutableRefObject<CodeMirrorType | undefined>,",
          "156: ) {",
          "157:   useEffect(() => {",
          "158:     if (!editor) {",
          "159:       return;",
          "160:     }",
          "162:     const didChange = editor.options.lint.variableToType !== variableToType;",
          "164:     editor.options.lint.variableToType = variableToType;",
          "165:     editor.options.hintOptions.variableToType = variableToType;",
          "167:     if (didChange && codeMirrorRef.current) {",
          "168:       codeMirrorRef.current.signal(editor, 'change', editor);",
          "169:     }",
          "170:   }, [editor, variableToType, codeMirrorRef]);",
          "171: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts": [
          "File: packages/graphiql-react/src/index.ts -> packages/graphiql-react/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {",
          "2:   EditorContext,",
          "3:   EditorContextProvider,",
          "4:   useHeaderEditor,",
          "5:   useQueryEditor,",
          "6: } from './editor';",
          "7: import {",
          "8:   ExplorerContext,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4:   onHasCompletion,",
          "7:   useVariableEditor,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:   EditorContextType,",
          "15:   UseHeaderEditorArgs,",
          "16:   UseQueryEditorArgs,",
          "17: } from './editor';",
          "18: import type {",
          "19:   ExplorerContextType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:   UseVariableEditorArgs,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27:   EditorContext,",
          "28:   EditorContextProvider,",
          "29:   useHeaderEditor,",
          "30:   useQueryEditor,",
          "32:   ExplorerContext,",
          "33:   ExplorerContextProvider,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:   onHasCompletion,",
          "35:   useVariableEditor,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "39:   EditorContextType,",
          "40:   UseHeaderEditorArgs,",
          "41:   UseQueryEditorArgs,",
          "43:   ExplorerContextType,",
          "44:   ExplorerFieldDef,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   UseVariableEditorArgs,",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts": [
          "File: packages/graphiql/__mocks__/@graphiql/react.ts -> packages/graphiql/__mocks__/@graphiql/react.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:   useExplorerNavStack,",
          "7:   useHeaderEditor as _useHeaderEditor,",
          "8:   useQueryEditor as _useQueryEditor,",
          "9: } from '@graphiql/react';",
          "10: import type {",
          "11:   EditorContextType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:   useVariableEditor as _useVariableEditor,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:   UseHeaderEditorArgs,",
          "17:   UseQueryEditorArgs,",
          "18: } from '@graphiql/react';",
          "21: export {",
          "22:   EditorContext,",
          "",
          "[Removed Lines]",
          "19: import { useEffect, useRef, useState } from 'react';",
          "",
          "[Added Lines]",
          "20: import { useContext, useEffect, useRef, useState } from 'react';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:   UseQueryEditorArgs,",
          "37: };",
          "40:   const [code, setCode] = useState(value);",
          "41:   const ref = useRef<HTMLDivElement>(null);",
          "43:   useEffect(() => {",
          "44:     if (!ref.current) {",
          "45:       return;",
          "",
          "[Removed Lines]",
          "39: function useMockedEditor(value?: string, onEdit?: (newValue: string) => void) {",
          "",
          "[Added Lines]",
          "40: function useMockedEditor(",
          "41:   name: string,",
          "42:   value?: string,",
          "43:   onEdit?: (newValue: string) => void,",
          "44: ) {",
          "48:   const context = useContext(EditorContext);",
          "49:   const setEditor =",
          "50:     context[`set${name.slice(0, 1).toUpperCase()}${name.slice(1)}Editor`];",
          "52:   const getValueRef = useRef<() => string>();",
          "53:   useEffect(() => {",
          "54:     getValueRef.current = () => code;",
          "55:   }, [code]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:     mockWrapper.appendChild(mockTextArea);",
          "62:     ref.current.appendChild(mockWrapper);",
          "63:   });",
          "65:   useEffect(() => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     setEditor({",
          "79:       getValue() {",
          "80:         return getValueRef.current();",
          "81:       },",
          "82:       setValue(newValue: string) {",
          "83:         setCode(newValue);",
          "84:       },",
          "85:     });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106:   onEdit,",
          "107:   value,",
          "108: }) {",
          "110: };",
          "112: export const useQueryEditor: typeof _useQueryEditor = function useQueryEditor({",
          "113:   onEdit,",
          "114:   value,",
          "115: }) {",
          "117: };",
          "",
          "[Removed Lines]",
          "109:   return useMockedEditor(value, onEdit);",
          "116:   return useMockedEditor(value, onEdit);",
          "",
          "[Added Lines]",
          "132:   return useMockedEditor('header', value, onEdit);",
          "139:   return useMockedEditor('query', value, onEdit);",
          "140: };",
          "142: export const useVariableEditor: typeof _useVariableEditor = function useVariableEditor({",
          "143:   onEdit,",
          "144:   value,",
          "145: }) {",
          "146:   return useMockedEditor('variable', value, onEdit);",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "327: export type GraphiQLState = {",
          "328:   schema?: GraphQLSchema | null;",
          "329:   query?: string;",
          "331:   operationName?: string;",
          "332:   docExplorerOpen: boolean;",
          "333:   response?: string;",
          "",
          "[Removed Lines]",
          "330:   variables?: string;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:   graphiqlContainer: Maybe<HTMLDivElement>;",
          "457:   resultComponent: Maybe<ResultViewer>;",
          "459:   _queryHistory: Maybe<QueryHistory>;",
          "460:   _historyStore: Maybe<HistoryStore>;",
          "461:   editorBarComponent: Maybe<HTMLDivElement>;",
          "",
          "[Removed Lines]",
          "458:   variableEditorComponent: Maybe<VariableEditor>;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "635:       tabs: tabsState,",
          "636:       schema,",
          "637:       query: activeTab?.query,",
          "639:       operationName: activeTab?.operationName,",
          "640:       response: activeTab?.response ?? response,",
          "641:       docExplorerOpen,",
          "",
          "[Removed Lines]",
          "638:       variables: activeTab?.variables,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "693:   UNSAFE_componentWillReceiveProps(nextProps: GraphiQLWithContextProps) {",
          "694:     let nextSchema = this.state.schema;",
          "695:     let nextQuery = this.state.query;",
          "697:     let nextOperationName = this.state.operationName;",
          "698:     let nextResponse = this.state.response;",
          "",
          "[Removed Lines]",
          "696:     let nextVariables = this.state.variables;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "703:     if (nextProps.query !== undefined && this.props.query !== nextProps.query) {",
          "704:       nextQuery = nextProps.query;",
          "705:     }",
          "712:     if (nextProps.operationName !== undefined) {",
          "713:       nextOperationName = nextProps.operationName;",
          "714:     }",
          "",
          "[Removed Lines]",
          "706:     if (",
          "707:       nextProps.variables !== undefined &&",
          "708:       this.props.variables !== nextProps.variables",
          "709:     ) {",
          "710:       nextVariables = nextProps.variables;",
          "711:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "757:       {",
          "758:         schema: nextSchema,",
          "759:         query: nextQuery,",
          "761:         operationName: nextOperationName,",
          "762:         response: nextResponse,",
          "763:       },",
          "",
          "[Removed Lines]",
          "760:         variables: nextVariables,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "773:   componentDidUpdate() {",
          "780:   }",
          "",
          "[Removed Lines]",
          "776:     this.codeMirrorSizer.updateSizes([",
          "777:       this.variableEditorComponent,",
          "778:       this.resultComponent,",
          "779:     ]);",
          "",
          "[Added Lines]",
          "765:     this.codeMirrorSizer.updateSizes([this.resultComponent]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "913:               ref={node => {",
          "914:                 this._queryHistory = node;",
          "915:               }}",
          "919:               onSelectQuery={this.handleSelectHistoryQuery}",
          "920:               storage={this._storage}",
          "923:               <button",
          "924:                 className=\"docExplorerHide\"",
          "925:                 onClick={this.handleToggleHistory}",
          "",
          "[Removed Lines]",
          "916:               operationName={this.state.operationName}",
          "917:               query={this.state.query}",
          "918:               variables={this.state.variables}",
          "921:               maxHistoryLength={this.state.maxHistoryLength}",
          "922:               queryID={this._editorQueryID}>",
          "",
          "[Added Lines]",
          "904:               maxHistoryLength={this.state.maxHistoryLength}>",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1037:                   )}",
          "1038:                 </div>",
          "1039:                 <VariableEditor",
          "1044:                   variableToType={this.state.variableToType}",
          "1045:                   onEdit={this.handleEditVariables}",
          "1046:                   onHintInformationRender={this.handleHintInformationRender}",
          "",
          "[Removed Lines]",
          "1040:                   ref={n => {",
          "1041:                     this.variableEditorComponent = n;",
          "1042:                   }}",
          "1043:                   value={this.state.variables}",
          "",
          "[Added Lines]",
          "1022:                   value={this.props.variables}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1128:   public getVariableEditor() {",
          "1133:   }",
          "",
          "[Removed Lines]",
          "1129:     if (this.variableEditorComponent) {",
          "1130:       return this.variableEditorComponent.getCodeMirror();",
          "1131:     }",
          "1132:     return null;",
          "",
          "[Added Lines]",
          "1108:     return this.props.editorContext?.variableEditor || null;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1149:   public refresh() {",
          "1150:     this.props.editorContext?.queryEditor?.refresh();",
          "1154:     this.props.editorContext?.headerEditor?.refresh();",
          "1155:     if (this.resultComponent) {",
          "1156:       this.resultComponent.getCodeMirror().refresh();",
          "",
          "[Removed Lines]",
          "1151:     if (this.variableEditorComponent) {",
          "1152:       this.variableEditorComponent.getCodeMirror().refresh();",
          "1153:     }",
          "",
          "[Added Lines]",
          "1127:     this.props.editorContext?.variableEditor?.refresh();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1483:     const editedQuery = this.autoCompleteLeafs() || this.state.query || '';",
          "1485:     const headers = getHeaders(this.props);",
          "1486:     const shouldPersistHeaders = this.state.shouldPersistHeaders;",
          "1487:     let operationName = this.state.operationName;",
          "",
          "[Removed Lines]",
          "1484:     const variables = this.state.variables;",
          "",
          "[Added Lines]",
          "1458:     const variables = getVariables(this.props);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1800:     this.setState(",
          "1801:       state => ({",
          "1802:         ...state,",
          "1804:         tabs: tabsStateEditVariablesReducer(value, state.tabs),",
          "1805:       }),",
          "1806:       this.persistTabsState,",
          "",
          "[Removed Lines]",
          "1803:         variables: value,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1815:     this.setState(",
          "1816:       state => ({",
          "1817:         ...state,",
          "1819:         tabs: tabsStateEditHeadersReducer(value, state.tabs),",
          "1820:       }),",
          "1821:       this.persistTabsState,",
          "",
          "[Removed Lines]",
          "1818:         headers: value,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1910:       this.handleEditQuery(query);",
          "1911:     }",
          "1912:     if (variables) {",
          "1914:     }",
          "1915:     if (headers) {",
          "1917:     }",
          "1918:     if (operationName) {",
          "1919:       this.handleEditOperationName(operationName);",
          "",
          "[Removed Lines]",
          "1913:       this.handleEditVariables(variables);",
          "1916:       this.handleEditHeaders(headers);",
          "",
          "[Added Lines]",
          "1885:       setVariables(this.props, variables);",
          "1888:       setHeaders(this.props, headers);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2308:   state: GraphiQLState,",
          "2309:   props: GraphiQLWithContextProps,",
          "2310: ): GraphiQLState {",
          "2311:   const headers = getHeaders(props);",
          "2313:   const oldActiveTabIndex = state.tabs.activeTabIndex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2283:   const variables = getVariables(props);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2319:     return {",
          "2320:       ...currentTab,",
          "2321:       query: state.query,",
          "2323:       operationName: state.operationName,",
          "2324:       headers,",
          "2325:       response: state.response,",
          "2326:       hash: idFromTabContents({",
          "2327:         query: state.query,",
          "2329:         headers,",
          "2330:       }),",
          "2331:     };",
          "",
          "[Removed Lines]",
          "2322:       variables: state.variables,",
          "2328:         variables: state.variables,",
          "",
          "[Added Lines]",
          "2295:       variables,",
          "2301:         variables,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2334:   const newActiveTab = state.tabs.tabs[index];",
          "2336:   if (typeof newActiveTab.headers !== 'undefined') {",
          "2337:     setHeaders(props, newActiveTab.headers);",
          "2338:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2309:   if (typeof newActiveTab.variables !== 'undefined') {",
          "2310:     setVariables(props, newActiveTab.variables);",
          "2311:   }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2340:   return {",
          "2341:     ...state,",
          "2342:     query: newActiveTab.query,",
          "2344:     operationName: newActiveTab.operationName,",
          "2345:     response: newActiveTab.response,",
          "2346:     tabs: { ...state.tabs, tabs, activeTabIndex: index },",
          "",
          "[Removed Lines]",
          "2343:     variables: newActiveTab.variables,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2360:     tabs: state.tabs.tabs.filter((_tab, i) => index !== i),",
          "2361:   };",
          "2362:   const activeTab = newTabsState.tabs[newActiveTabIndex];",
          "2363:   if (typeof activeTab.headers !== 'undefined') {",
          "2364:     setHeaders(props, activeTab.headers);",
          "2365:   }",
          "2366:   return {",
          "2367:     ...state,",
          "2368:     query: activeTab.query,",
          "2370:     operationName: activeTab.operationName,",
          "2371:     response: activeTab.response,",
          "2372:     tabs: newTabsState,",
          "",
          "[Removed Lines]",
          "2369:     variables: activeTab.variables,",
          "",
          "[Added Lines]",
          "2338:   if (typeof activeTab.variables !== 'undefined') {",
          "2339:     setVariables(props, activeTab.variables);",
          "2340:   }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2377:   state: GraphiQLState,",
          "2378:   props: GraphiQLWithContextProps,",
          "2379: ): GraphiQLState {",
          "2380:   const headers = getHeaders(props);",
          "2382:   const oldActiveTabIndex = state.tabs.activeTabIndex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2357:   const variables = getVariables(props);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2404:     return {",
          "2405:       ...tab,",
          "2406:       headers,",
          "2408:       query: state.query,",
          "2409:       operationName: state.operationName,",
          "2410:       response: state.response,",
          "2411:     };",
          "2412:   });",
          "2414:   if (typeof newTab.headers !== 'undefined') {",
          "2415:     setHeaders(props, newTab.headers);",
          "2416:   }",
          "2418:   return {",
          "2419:     ...state,",
          "2421:     query: newTab.query,",
          "2422:     operationName: newTab.operationName,",
          "2423:     response: newTab.response,",
          "",
          "[Removed Lines]",
          "2407:       variables: state.variables,",
          "2420:     variables: newTab.variables,",
          "",
          "[Added Lines]",
          "2385:       variables,",
          "2392:   if (typeof newTab.variables !== 'undefined') {",
          "2393:     setVariables(props, newTab.variables);",
          "2394:   }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2429:   };",
          "2430: }",
          "2432: function getHeaders(props: GraphiQLWithContextProps) {",
          "2434: }",
          "2436: function setHeaders(props: GraphiQLWithContextProps, value: string) {",
          "",
          "[Removed Lines]",
          "2433:   return props.headers ?? props.editorContext?.headerEditor?.getValue();",
          "",
          "[Added Lines]",
          "2412: function getVariables(props: GraphiQLWithContextProps) {",
          "2413:   return props.editorContext?.variableEditor?.getValue();",
          "2414: }",
          "2416: function setVariables(props: GraphiQLWithContextProps, value: string) {",
          "2417:   props.editorContext?.variableEditor?.setValue(value);",
          "2418: }",
          "2421:   return props.editorContext?.headerEditor?.getValue();",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/QueryHistory.tsx||packages/graphiql/src/components/QueryHistory.tsx": [
          "File: packages/graphiql/src/components/QueryHistory.tsx -> packages/graphiql/src/components/QueryHistory.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import HistoryStore from '../utility/HistoryStore';",
          "18: type QueryHistoryProps = {",
          "24:   onSelectQuery: HandleSelectQueryFn;",
          "25:   storage: StorageAPI;",
          "26:   maxHistoryLength: number;",
          "",
          "[Removed Lines]",
          "19:   query?: string;",
          "20:   variables?: string;",
          "21:   headers?: string;",
          "22:   operationName?: string;",
          "23:   queryID?: number;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/VariableEditor.tsx||packages/graphiql/src/components/VariableEditor.tsx": [
          "File: packages/graphiql/src/components/VariableEditor.tsx -> packages/graphiql/src/components/VariableEditor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import React from 'react';",
          "37:   active?: boolean;",
          "38: };",
          "",
          "[Removed Lines]",
          "9: import { GraphQLType } from 'graphql';",
          "10: import type * as CM from 'codemirror';",
          "13: import onHasCompletion from '../utility/onHasCompletion';",
          "14: import commonKeys from '../utility/commonKeys';",
          "15: import { importCodeMirror } from '../utility/importCodeMirror';",
          "16: import { CodeMirrorEditor } from '../types';",
          "18: declare module CodeMirror {",
          "19:   export interface Editor extends CM.Editor {}",
          "20:   export interface ShowHintOptions {",
          "21:     completeSingle: boolean;",
          "22:     hint: any;",
          "23:     container: HTMLElement | null;",
          "24:   }",
          "25: }",
          "27: type VariableEditorProps = {",
          "28:   variableToType?: { [variable: string]: GraphQLType };",
          "29:   value?: string;",
          "30:   onEdit: (value: string) => void;",
          "31:   readOnly?: boolean;",
          "32:   onHintInformationRender: (value: HTMLDivElement) => void;",
          "33:   onPrettifyQuery: (value?: string) => void;",
          "34:   onMergeQuery: (value?: string) => void;",
          "35:   onRunQuery: (value?: string) => void;",
          "36:   editorTheme?: string;",
          "",
          "[Added Lines]",
          "7: import { useVariableEditor, UseVariableEditorArgs } from '@graphiql/react';",
          "10: type VariableEditorProps = UseVariableEditorArgs & {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266: }",
          "",
          "[Removed Lines]",
          "53: export class VariableEditor extends React.Component<VariableEditorProps> {",
          "54:   CodeMirror: any;",
          "55:   editor: CodeMirrorEditor | null = null;",
          "56:   cachedValue: string;",
          "57:   private _node: HTMLElement | null = null;",
          "58:   ignoreChangeEvent: boolean = false;",
          "60:   constructor(props: VariableEditorProps) {",
          "61:     super(props);",
          "66:     this.cachedValue = props.value || '';",
          "67:   }",
          "69:   componentDidMount() {",
          "70:     this.initializeEditor()",
          "71:       .then(editor => {",
          "72:         editor.on('change', this._onEdit);",
          "73:         editor.on('keyup', this._onKeyUp);",
          "75:         editor.on('hasCompletion', this._onHasCompletion);",
          "76:       })",
          "77:       .catch(console.error);",
          "78:   }",
          "80:   componentDidUpdate(prevProps: VariableEditorProps) {",
          "81:     if (!this.editor) {",
          "82:       return;",
          "83:     }",
          "84:     if (!this.CodeMirror) {",
          "85:       return;",
          "86:     }",
          "91:     this.ignoreChangeEvent = true;",
          "92:     if (this.props.variableToType !== prevProps.variableToType) {",
          "93:       this.editor.options.lint.variableToType = this.props.variableToType;",
          "94:       this.editor.options.hintOptions.variableToType = this.props.variableToType;",
          "95:       this.CodeMirror.signal(this.editor, 'change', this.editor);",
          "96:     }",
          "97:     if (",
          "98:       this.props.value !== prevProps.value &&",
          "99:       this.props.value !== this.cachedValue",
          "100:     ) {",
          "101:       const thisValue = this.props.value || '';",
          "102:       this.cachedValue = thisValue;",
          "103:       this.editor.setValue(thisValue);",
          "104:     }",
          "105:     this.ignoreChangeEvent = false;",
          "106:   }",
          "108:   componentWillUnmount() {",
          "109:     if (!this.editor) {",
          "110:       return;",
          "111:     }",
          "112:     this.editor.off('change', this._onEdit);",
          "113:     this.editor.off('keyup', this._onKeyUp);",
          "115:     this.editor.off('hasCompletion', this._onHasCompletion);",
          "116:     this.editor = null;",
          "117:   }",
          "119:   render() {",
          "120:     return (",
          "121:       <div",
          "122:         className=\"codemirrorWrap\"",
          "125:         style={{",
          "126:           position: this.props.active ? 'relative' : 'absolute',",
          "127:           visibility: this.props.active ? 'visible' : 'hidden',",
          "128:         }}",
          "129:         ref={node => {",
          "130:           this._node = node as HTMLDivElement;",
          "131:         }}",
          "132:       />",
          "133:     );",
          "134:   }",
          "136:   addonModules = () => [",
          "137:     import('codemirror-graphql/variables/hint'),",
          "138:     import('codemirror-graphql/variables/lint'),",
          "139:     import('codemirror-graphql/variables/mode'),",
          "140:   ];",
          "142:   async initializeEditor() {",
          "143:     this.CodeMirror = await importCodeMirror(this.addonModules());",
          "145:     const editor = (this.editor = this.CodeMirror(this._node!, {",
          "146:       value: this.props.value || '',",
          "147:       lineNumbers: true,",
          "148:       tabSize: 2,",
          "149:       mode: 'graphql-variables',",
          "150:       theme: this.props.editorTheme || 'graphiql',",
          "151:       keyMap: 'sublime',",
          "152:       autoCloseBrackets: true,",
          "153:       matchBrackets: true,",
          "154:       showCursorWhenSelecting: true,",
          "155:       readOnly: this.props.readOnly ? 'nocursor' : false,",
          "156:       foldGutter: {",
          "157:         minFoldSize: 4,",
          "158:       },",
          "159:       lint: {",
          "160:         variableToType: this.props.variableToType,",
          "161:       },",
          "162:       hintOptions: {",
          "163:         variableToType: this.props.variableToType,",
          "164:         closeOnUnfocus: false,",
          "165:         completeSingle: false,",
          "166:         container: this._node,",
          "167:       },",
          "168:       gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],",
          "169:       extraKeys: {",
          "170:         'Cmd-Space': () =>",
          "171:           this.editor!.showHint({",
          "172:             completeSingle: false,",
          "173:             container: this._node,",
          "174:           } as CodeMirror.ShowHintOptions),",
          "175:         'Ctrl-Space': () =>",
          "176:           this.editor!.showHint({",
          "177:             completeSingle: false,",
          "178:             container: this._node,",
          "179:           } as CodeMirror.ShowHintOptions),",
          "180:         'Alt-Space': () =>",
          "181:           this.editor!.showHint({",
          "182:             completeSingle: false,",
          "183:             container: this._node,",
          "184:           } as CodeMirror.ShowHintOptions),",
          "185:         'Shift-Space': () =>",
          "186:           this.editor!.showHint({",
          "187:             completeSingle: false,",
          "188:             container: this._node,",
          "189:           } as CodeMirror.ShowHintOptions),",
          "190:         'Cmd-Enter': () => {",
          "191:           if (this.props.onRunQuery) {",
          "192:             this.props.onRunQuery();",
          "193:           }",
          "194:         },",
          "195:         'Ctrl-Enter': () => {",
          "196:           if (this.props.onRunQuery) {",
          "197:             this.props.onRunQuery();",
          "198:           }",
          "199:         },",
          "200:         'Shift-Ctrl-P': () => {",
          "201:           if (this.props.onPrettifyQuery) {",
          "202:             this.props.onPrettifyQuery();",
          "203:           }",
          "204:         },",
          "206:         'Shift-Ctrl-M': () => {",
          "207:           if (this.props.onMergeQuery) {",
          "208:             this.props.onMergeQuery();",
          "209:           }",
          "210:         },",
          "212:         ...commonKeys,",
          "213:       },",
          "214:     })) as CodeMirrorEditor;",
          "215:     return editor;",
          "216:   }",
          "222:   getCodeMirror() {",
          "223:     return this.editor as CM.Editor;",
          "224:   }",
          "229:   getClientHeight() {",
          "230:     return this._node && this._node.clientHeight;",
          "231:   }",
          "233:   private _onKeyUp = (_cm: CodeMirror.Editor, event: KeyboardEvent) => {",
          "234:     const code = event.keyCode;",
          "235:     if (!this.editor) {",
          "236:       return;",
          "237:     }",
          "238:     if (",
          "239:       (code >= 65 && code <= 90) || // letters",
          "240:       (!event.shiftKey && code >= 48 && code <= 57) || // numbers",
          "241:       (event.shiftKey && code === 189) || // underscore",
          "242:       (event.shiftKey && code === 222) // \"",
          "243:     ) {",
          "244:       this.editor.execCommand('autocomplete');",
          "245:     }",
          "246:   };",
          "248:   private _onEdit = () => {",
          "249:     if (!this.editor) {",
          "250:       return;",
          "251:     }",
          "252:     if (!this.ignoreChangeEvent) {",
          "253:       this.cachedValue = this.editor.getValue();",
          "254:       if (this.props.onEdit) {",
          "255:         this.props.onEdit(this.cachedValue);",
          "256:       }",
          "257:     }",
          "258:   };",
          "260:   private _onHasCompletion = (",
          "261:     instance: CM.Editor,",
          "262:     changeObj?: CM.EditorChange,",
          "263:   ) => {",
          "264:     onHasCompletion(instance, changeObj, this.props.onHintInformationRender);",
          "265:   };",
          "",
          "[Added Lines]",
          "20: export function VariableEditor({ active, ...hookArgs }: VariableEditorProps) {",
          "21:   const ref = useVariableEditor(hookArgs);",
          "22:   return (",
          "23:     <div",
          "24:       className=\"codemirrorWrap\"",
          "27:       style={{",
          "28:         position: active ? 'relative' : 'absolute',",
          "29:         visibility: active ? 'visible' : 'hidden',",
          "30:       }}",
          "31:       ref={ref}",
          "32:     />",
          "33:   );",
          "",
          "---------------"
        ],
        "packages/graphiql/src/index.ts||packages/graphiql/src/index.ts": [
          "File: packages/graphiql/src/index.ts -> packages/graphiql/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: export { fillLeafs } from './utility/fillLeafs';",
          "50: export { default as mergeAst } from './utility/mergeAst';",
          "51: export { default as getSelectedOperationName } from './utility/getSelectedOperationName';",
          "53: export { Storage } from './utility/StorageAPI';",
          "",
          "[Removed Lines]",
          "52: export { default as onHasCompletion } from './utility/onHasCompletion';",
          "",
          "[Added Lines]",
          "57: import { onHasCompletion as _onHasCompletion } from '@graphiql/react';",
          "59: export const onHasCompletion: typeof _onHasCompletion = function onHasCompletion(",
          "60:   ...args",
          "61: ) {",
          "62:   console.warn(",
          "63:     'Importing `onHasCompletion` from `graphiql` is deprecated and will be removed in the next major version. Please switch to importing the `onHasCompletion` function provided by the `@graphiql/react` package.',",
          "64:   );",
          "65:   return _onHasCompletion(...args);",
          "66: };",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts": [
          "File: packages/graphiql/src/utility/onHasCompletion.ts -> packages/graphiql/src/utility/onHasCompletion.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb4bc4457a6310da1c95313daa0fc8e0eb7cdeae",
      "candidate_info": {
        "commit_hash": "fb4bc4457a6310da1c95313daa0fc8e0eb7cdeae",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/fb4bc4457a6310da1c95313daa0fc8e0eb7cdeae",
        "files": [
          ".changeset/smooth-countries-shout.md",
          "packages/graphiql-react/src/ui/index.ts",
          "packages/graphiql-react/src/ui/spinner.css",
          "packages/graphiql-react/src/ui/spinner.tsx",
          "packages/graphiql/__mocks__/@graphiql/react.tsx",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/style.css"
        ],
        "message": "extract loading spinner to `@graphiql/react` (#2581)",
        "before_after_code_files": [
          "packages/graphiql-react/src/ui/index.ts||packages/graphiql-react/src/ui/index.ts",
          "packages/graphiql-react/src/ui/spinner.css||packages/graphiql-react/src/ui/spinner.css",
          "packages/graphiql-react/src/ui/spinner.tsx||packages/graphiql-react/src/ui/spinner.tsx",
          "packages/graphiql/__mocks__/@graphiql/react.tsx||packages/graphiql/__mocks__/@graphiql/react.tsx",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/style.css||packages/graphiql/src/style.css"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/ui/index.ts||packages/graphiql-react/src/ui/index.ts": [
          "File: packages/graphiql-react/src/ui/index.ts -> packages/graphiql-react/src/ui/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export * from './button';",
          "2: export * from './dropdown';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: export * from './spinner';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/ui/spinner.css||packages/graphiql-react/src/ui/spinner.css": [
          "File: packages/graphiql-react/src/ui/spinner.css -> packages/graphiql-react/src/ui/spinner.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: .graphiql-spinner {",
          "2:   height: 56px;",
          "3:   margin: auto;",
          "4:   margin-top: var(--px-16);",
          "5:   width: 56px;",
          "7:   &::after {",
          "8:     animation: rotation 0.6s infinite linear;",
          "9:     border: 4px solid transparent;",
          "10:     border-radius: 100%;",
          "11:     border-top: 4px solid var(--color-neutral-40);",
          "12:     content: '';",
          "13:     display: inline-block;",
          "14:     height: 46px;",
          "15:     vertical-align: middle;",
          "16:     width: 46px;",
          "17:   }",
          "18: }",
          "20: @keyframes rotation {",
          "21:   from {",
          "22:     transform: rotate(0deg);",
          "23:   }",
          "24:   to {",
          "25:     transform: rotate(359deg);",
          "26:   }",
          "27: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/ui/spinner.tsx||packages/graphiql-react/src/ui/spinner.tsx": [
          "File: packages/graphiql-react/src/ui/spinner.tsx -> packages/graphiql-react/src/ui/spinner.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import './spinner.css';",
          "3: export function Spinner() {",
          "4:   return <div className=\"graphiql-spinner\" />;",
          "5: }",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.tsx||packages/graphiql/__mocks__/@graphiql/react.tsx": [
          "File: packages/graphiql/__mocks__/@graphiql/react.tsx -> packages/graphiql/__mocks__/@graphiql/react.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   SchemaContext,",
          "38:   SchemaContextProvider,",
          "39:   SettingsIcon,",
          "40:   StopIcon,",
          "41:   StorageContext,",
          "42:   StorageContextProvider,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   Spinner,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   useMergeQuery,",
          "53:   usePrettifyEditors,",
          "54:   useSchemaContext,",
          "56:   useStorageContext,",
          "57: } from '@graphiql/react';",
          "",
          "[Removed Lines]",
          "55:   useSelectHistoryItem,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   onEdit?: (newValue: string) => void,",
          "93: ) {",
          "94:   const editorContext = useEditorContext({ nonNull: true });",
          "98:   const ref = useRef<HTMLDivElement>(null);",
          "100:   const setEditor =",
          "101:     editorContext[`set${name.slice(0, 1).toUpperCase()}${name.slice(1)}Editor`];",
          "104:   useEffect(() => {",
          "105:     getValueRef.current = () => code;",
          "106:   }, [code]);",
          "",
          "[Removed Lines]",
          "95:   const [code, setCode] = useState(",
          "96:     value ?? editorContext[NAME_TO_INITIAL_VALUE[name]],",
          "97:   );",
          "103:   const getValueRef = useRef<() => string>();",
          "",
          "[Added Lines]",
          "95:   const [code, setCode] = useState(() => {",
          "96:     const initialValueProp = NAME_TO_INITIAL_VALUE[name];",
          "97:     return (",
          "98:       value ??",
          "99:       (initialValueProp ? editorContext[initialValueProp] : undefined) ??",
          "100:       ''",
          "101:     );",
          "102:   });",
          "108:   const getValueRef = useRef<() => string>(() => code);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:   return ref;",
          "180: }",
          "186: };",
          "192: };",
          "198: };",
          "204: };",
          "206: export const HeaderEditor: typeof _HeaderEditor = function HeaderEditor(props) {",
          "",
          "[Removed Lines]",
          "182: export const useHeaderEditor: typeof _useHeaderEditor = function useHeaderEditor({",
          "183:   onEdit,",
          "184: }) {",
          "185:   return useMockedEditor('header', undefined, onEdit);",
          "188: export const useQueryEditor: typeof _useQueryEditor = function useQueryEditor({",
          "189:   onEdit,",
          "190: }) {",
          "191:   return useMockedEditor('query', undefined, onEdit);",
          "194: export const useResponseEditor: typeof _useResponseEditor = function useResponseEditor({",
          "195:   value,",
          "196: }) {",
          "197:   return useMockedEditor('response', value);",
          "200: export const useVariableEditor: typeof _useVariableEditor = function useVariableEditor({",
          "201:   onEdit,",
          "202: }) {",
          "203:   return useMockedEditor('variable', undefined, onEdit);",
          "",
          "[Added Lines]",
          "187: export const useHeaderEditor: typeof _useHeaderEditor = function useHeaderEditor(",
          "188:   props,",
          "189: ) {",
          "190:   return useMockedEditor('header', undefined, props?.onEdit);",
          "193: export const useQueryEditor: typeof _useQueryEditor = function useQueryEditor(",
          "194:   props,",
          "195: ) {",
          "196:   return useMockedEditor('query', undefined, props?.onEdit);",
          "199: export const useResponseEditor: typeof _useResponseEditor = function useResponseEditor(",
          "200:   props,",
          "201: ) {",
          "202:   return useMockedEditor('response', props?.value);",
          "205: export const useVariableEditor: typeof _useVariableEditor = function useVariableEditor(",
          "206:   props,",
          "207: ) {",
          "208:   return useMockedEditor('variable', undefined, props?.onEdit);",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { GraphQLSchema, isType } from 'graphql';",
          "12: import FieldDoc from './DocExplorer/FieldDoc';",
          "13: import SchemaDoc from './DocExplorer/SchemaDoc';",
          "",
          "[Removed Lines]",
          "8: import React, { ReactNode } from 'react';",
          "10: import { useExplorerContext, useSchemaContext } from '@graphiql/react';",
          "",
          "[Added Lines]",
          "8: import { Spinner, useExplorerContext, useSchemaContext } from '@graphiql/react';",
          "10: import React, { ReactNode } from 'react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     );",
          "61:   } else if (isFetching) {",
          "64:   } else if (!schema) {",
          "",
          "[Removed Lines]",
          "63:     content = <div className=\"graphiql-spinner\" />;",
          "",
          "[Added Lines]",
          "63:     content = <Spinner />;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   ResponseEditor,",
          "43:   SchemaContextProvider,",
          "44:   SettingsIcon,",
          "45:   StorageContextProvider,",
          "46:   ToolbarButton,",
          "47:   UnStyledButton,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:   Spinner,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "958:                 <div ref={this.props.editorResize.secondRef}>",
          "959:                   <div className=\"graphiql-response\">",
          "960:                     {this.props.executionContext.isFetching ? (",
          "962:                     ) : null}",
          "963:                     <ResponseEditor",
          "964:                       value={this.props.response}",
          "",
          "[Removed Lines]",
          "961:                       <div className=\"graphiql-spinner\" />",
          "",
          "[Added Lines]",
          "962:                       <Spinner />",
          "",
          "---------------"
        ],
        "packages/graphiql/src/style.css||packages/graphiql/src/style.css": [
          "File: packages/graphiql/src/style.css -> packages/graphiql/src/style.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   padding: var(--px-16);",
          "146: }",
          "178: .graphiql-container .graphiql-horizontal-drag-bar {",
          "179:   width: var(--px-12);",
          "",
          "[Removed Lines]",
          "149: .graphiql-container .graphiql-spinner {",
          "150:   height: 56px;",
          "151:   left: 50%;",
          "152:   position: relative;",
          "153:   top: 50%;",
          "154:   transform: translate(-50%, -50%);",
          "155:   width: 56px;",
          "156: }",
          "157: .graphiql-container .graphiql-spinner::after {",
          "158:   animation: rotation 0.6s infinite linear;",
          "159:   border: 4px solid transparent;",
          "160:   border-radius: 100%;",
          "161:   border-top: 4px solid var(--color-neutral-40);",
          "162:   content: '';",
          "163:   display: inline-block;",
          "164:   height: 46px;",
          "165:   vertical-align: middle;",
          "166:   width: 46px;",
          "167: }",
          "168: @keyframes rotation {",
          "169:   from {",
          "170:     transform: rotate(0deg);",
          "171:   }",
          "172:   to {",
          "173:     transform: rotate(359deg);",
          "174:   }",
          "175: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}