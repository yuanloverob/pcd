{
  "cve_id": "CVE-2023-45827",
  "cve_desc": "Dot diver is a lightweight, powerful, and dependency-free TypeScript utility library that provides types and functions to work with object paths in dot notation. In versions prior to 1.0.2 there is a Prototype Pollution vulnerability in the `setByPath` function which can leads to remote code execution (RCE). This issue has been addressed in commit `98daf567` which has been included in release 1.0.2. Users are advised to upgrade. There are no known workarounds to this vulnerability.\n",
  "repo": "clickbar/dot-diver",
  "patch_hash": "98daf567390d816fd378ec998eefe2e97f293d5a",
  "patch_info": {
    "commit_hash": "98daf567390d816fd378ec998eefe2e97f293d5a",
    "repo": "clickbar/dot-diver",
    "commit_url": "https://github.com/clickbar/dot-diver/commit/98daf567390d816fd378ec998eefe2e97f293d5a",
    "files": [
      "CHANGELOG.md",
      "src/index.ts",
      "test/index.test.ts"
    ],
    "message": "Merge pull request #12 from clickbar/fix/prototype-pollution\n\nAdd guards against prototype pollution",
    "before_after_code_files": [
      "src/index.ts||src/index.ts",
      "test/index.test.ts||test/index.test.ts"
    ]
  },
  "patch_diff": {
    "src/index.ts||src/index.ts": [
      "File: src/index.ts -> src/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "219: type SearchableObject = Record<never, never> | unknown[]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "222: const hasOwnProperty = Object.prototype.hasOwnProperty",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "236: ): PathValueEntry<T, P> {",
      "237:   const pathArray = (path as string).split('.')",
      "241: }",
      "",
      "[Removed Lines]",
      "240:   return pathArray.reduce((accumulator: any, current) => accumulator?.[current], object)",
      "",
      "[Added Lines]",
      "244:   return pathArray.reduce((current: any, pathPart) => {",
      "245:     if (typeof current !== 'object' || !hasOwnProperty.call(current, pathPart)) {",
      "246:       return undefined",
      "247:     }",
      "250:     return current?.[pathPart]",
      "251:   }, object)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "264:   }",
      "279: }",
      "281: export type { PathEntry as Path, PathValueEntry as PathValue, SearchableObject }",
      "",
      "[Removed Lines]",
      "267:   const objectToSet = pathArray.reduce(",
      "269:     (accumulator: any, current) => accumulator?.[current],",
      "270:     object,",
      "271:   )",
      "273:   if (objectToSet === undefined) {",
      "274:     throw new Error('Path is invalid')",
      "275:   }",
      "278:   objectToSet[lastKey] = value",
      "",
      "[Added Lines]",
      "282:   const parentObject = pathArray.reduce((current: any, pathPart) => {",
      "283:     if (typeof current !== 'object' || !hasOwnProperty.call(current, pathPart)) {",
      "284:       throw new Error(`Property ${pathPart} is undefined`)",
      "285:     }",
      "288:     const next = current?.[pathPart]",
      "290:     if (next === undefined || next === null) {",
      "291:       throw new Error(`Property ${pathPart} is undefined`)",
      "292:     }",
      "295:     return next",
      "296:   }, object)",
      "299:   parentObject[lastKey] = value",
      "",
      "---------------"
    ],
    "test/index.test.ts||test/index.test.ts": [
      "File: test/index.test.ts -> test/index.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "160:   setByPathDepth5(object, 'f.1.g', 'new array-item-2')",
      "161:   expect(object.f[1].g).toBe('new array-item-2')",
      "162: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "164: it('Test for prototype pollution', () => {",
      "165:   const object = {}",
      "167:   expect(() => {",
      "169:     setByPath(object, '__proto__.polluted', true)",
      "170:   }).toThrowError('__proto__')",
      "173:   expect(getByPath(object, '__proto__')).toBe(undefined)",
      "175:   expect(() => {",
      "177:     setByPath(object, 'constructor.polluted', true)",
      "178:   }).toThrowError('constructor')",
      "181:   expect(getByPath(object, 'constructor')).toBe(undefined)",
      "184:   expect(object.polluted).toBe(undefined)",
      "186:   const object2 = { constructor: { prototype: { polluted: true } } }",
      "188:   expect(getByPath(object2, 'constructor.prototype.polluted')).toBe(true)",
      "190:   setByPath(object2, 'constructor.prototype.polluted', false)",
      "192:   expect(object2.constructor.prototype.polluted).toBe(false)",
      "195:   const testClass = class TestClass {",
      "197:     constructor() {}",
      "198:   }",
      "200:   const object3 = new testClass()",
      "203:   expect(getByPath(object3, 'constructor.prototype')).toBe(undefined)",
      "206:   expect(getByPath(object3, 'constructor')).toBe(undefined)",
      "208:   expect(() => {",
      "210:     setByPath(object3, 'constructor.polluted', true)",
      "211:   }).toThrowError('constructor')",
      "213:   expect(() => {",
      "215:     setByPath(object3, '__proto__.polluted', true)",
      "216:   }).toThrowError('__proto__')",
      "217: })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "56c64dd8bda7c52b698f4fd2ff26c3ee58a9a2a4",
      "candidate_info": {
        "commit_hash": "56c64dd8bda7c52b698f4fd2ff26c3ee58a9a2a4",
        "repo": "clickbar/dot-diver",
        "commit_url": "https://github.com/clickbar/dot-diver/commit/56c64dd8bda7c52b698f4fd2ff26c3ee58a9a2a4",
        "files": [
          "src/index.ts"
        ],
        "message": "fix various typos",
        "before_after_code_files": [
          "src/index.ts||src/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/clickbar/dot-diver/pull/12"
        ],
        "olp_code_files": {
          "patch": [
            "src/index.ts||src/index.ts"
          ],
          "candidate": [
            "src/index.ts||src/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/index.ts||src/index.ts": [
          "File: src/index.ts -> src/index.ts"
        ]
      }
    },
    {
      "candidate_hash": "9790834cf4c2bca75db00e588e58056dacaf602f",
      "candidate_info": {
        "commit_hash": "9790834cf4c2bca75db00e588e58056dacaf602f",
        "repo": "clickbar/dot-diver",
        "commit_url": "https://github.com/clickbar/dot-diver/commit/9790834cf4c2bca75db00e588e58056dacaf602f",
        "files": [
          "CHANGELOG.md",
          "src/index.ts",
          "test/index.test.ts"
        ],
        "message": "Add guards against prototype pollution\n\nAdd guards in setByPath and getByPath to prevent prototype pollution.\nFixes CVE-2023-45827 (https://github.com/clickbar/dot-diver/security/advisories/GHSA-9w5f-mw3p-pj47)\n\nCo-authored-by: saibotk <git@saibotk.de>",
        "before_after_code_files": [
          "src/index.ts||src/index.ts",
          "test/index.test.ts||test/index.test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/clickbar/dot-diver/pull/12"
        ],
        "olp_code_files": {
          "patch": [
            "src/index.ts||src/index.ts",
            "test/index.test.ts||test/index.test.ts"
          ],
          "candidate": [
            "src/index.ts||src/index.ts",
            "test/index.test.ts||test/index.test.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/index.ts||src/index.ts": [
          "File: src/index.ts -> src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: type SearchableObject = Record<never, never> | unknown[]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: const hasOwnProperty = Object.prototype.hasOwnProperty",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236: ): PathValueEntry<T, P> {",
          "237:   const pathArray = (path as string).split('.')",
          "241: }",
          "",
          "[Removed Lines]",
          "240:   return pathArray.reduce((accumulator: any, current) => accumulator?.[current], object)",
          "",
          "[Added Lines]",
          "244:   return pathArray.reduce((current: any, pathPart) => {",
          "245:     if (typeof current !== 'object' || !hasOwnProperty.call(current, pathPart)) {",
          "246:       return undefined",
          "247:     }",
          "250:     return current?.[pathPart]",
          "251:   }, object)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "264:   }",
          "279: }",
          "281: export type { PathEntry as Path, PathValueEntry as PathValue, SearchableObject }",
          "",
          "[Removed Lines]",
          "267:   const objectToSet = pathArray.reduce(",
          "269:     (accumulator: any, current) => accumulator?.[current],",
          "270:     object,",
          "271:   )",
          "273:   if (objectToSet === undefined) {",
          "274:     throw new Error('Path is invalid')",
          "275:   }",
          "278:   objectToSet[lastKey] = value",
          "",
          "[Added Lines]",
          "282:   const parentObject = pathArray.reduce((current: any, pathPart) => {",
          "283:     if (typeof current !== 'object' || !hasOwnProperty.call(current, pathPart)) {",
          "284:       throw new Error(`Property ${pathPart} is undefined`)",
          "285:     }",
          "288:     const next = current?.[pathPart]",
          "290:     if (next === undefined || next === null) {",
          "291:       throw new Error(`Property ${pathPart} is undefined`)",
          "292:     }",
          "295:     return next",
          "296:   }, object)",
          "299:   parentObject[lastKey] = value",
          "",
          "---------------"
        ],
        "test/index.test.ts||test/index.test.ts": [
          "File: test/index.test.ts -> test/index.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:   setByPathDepth5(object, 'f.1.g', 'new array-item-2')",
          "161:   expect(object.f[1].g).toBe('new array-item-2')",
          "162: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: it('Test for prototype pollution', () => {",
          "165:   const object = {}",
          "167:   expect(() => {",
          "169:     setByPath(object, '__proto__.polluted', true)",
          "170:   }).toThrowError('__proto__')",
          "173:   expect(getByPath(object, '__proto__')).toBe(undefined)",
          "175:   expect(() => {",
          "177:     setByPath(object, 'constructor.polluted', true)",
          "178:   }).toThrowError('constructor')",
          "181:   expect(getByPath(object, 'constructor')).toBe(undefined)",
          "184:   expect(object.polluted).toBe(undefined)",
          "186:   const object2 = { constructor: { prototype: { polluted: true } } }",
          "188:   expect(getByPath(object2, 'constructor.prototype.polluted')).toBe(true)",
          "190:   setByPath(object2, 'constructor.prototype.polluted', false)",
          "192:   expect(object2.constructor.prototype.polluted).toBe(false)",
          "195:   const testClass = class TestClass {",
          "197:     constructor() {}",
          "198:   }",
          "200:   const object3 = new testClass()",
          "203:   expect(getByPath(object3, 'constructor.prototype')).toBe(undefined)",
          "206:   expect(getByPath(object3, 'constructor')).toBe(undefined)",
          "208:   expect(() => {",
          "210:     setByPath(object3, 'constructor.polluted', true)",
          "211:   }).toThrowError('constructor')",
          "213:   expect(() => {",
          "215:     setByPath(object3, '__proto__.polluted', true)",
          "216:   }).toThrowError('__proto__')",
          "217: })",
          "",
          "---------------"
        ]
      }
    }
  ]
}