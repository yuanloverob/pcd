{
  "cve_id": "CVE-2023-46739",
  "cve_desc": "CubeFS is an open-source cloud-native file storage system. A vulnerability was found during in the CubeFS master component in versions prior to 3.3.1 that could allow an untrusted attacker to steal user passwords by carrying out a timing attack. The root case of the vulnerability was that CubeFS used raw string comparison of passwords. The vulnerable part of CubeFS was the UserService of the master component. The UserService gets instantiated when starting the server of the master component. The issue has been patched in v3.3.1. For impacted users, there is no other way to mitigate the issue besides upgrading.",
  "repo": "cubefs/cubefs",
  "patch_hash": "6a0d5fa45a77ff20c752fa9e44738bf5d86c84bd",
  "patch_info": {
    "commit_hash": "6a0d5fa45a77ff20c752fa9e44738bf5d86c84bd",
    "repo": "cubefs/cubefs",
    "commit_url": "https://github.com/cubefs/cubefs/commit/6a0d5fa45a77ff20c752fa9e44738bf5d86c84bd",
    "files": [
      "master/gapi_user.go"
    ],
    "message": "enhance(gapi):Timing attack can leak user passwords\n\nSigned-off-by: leonrayang <chl696@sina.com>",
    "before_after_code_files": [
      "master/gapi_user.go||master/gapi_user.go"
    ]
  },
  "patch_diff": {
    "master/gapi_user.go||master/gapi_user.go": [
      "File: master/gapi_user.go -> master/gapi_user.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"context\"",
      "5:  \"fmt\"",
      "6:  \"github.com/cubefs/cubefs/proto\"",
      "7:  \"github.com/cubefs/cubefs/util/log\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:  \"crypto/sha256\"",
      "6:  \"encoding/hex\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "347:  if err != nil {",
      "348:   return nil, err",
      "349:  }",
      "352:   log.LogWarnf(\"user:[%s] login pass word has err\", args.UserID)",
      "353:   return nil, fmt.Errorf(\"user or password has err\")",
      "354:  }",
      "",
      "[Removed Lines]",
      "351:  if ak.Password != args.Password {",
      "",
      "[Added Lines]",
      "352:  hashedPassword := sha256.Sum256([]byte(args.Password))",
      "353:  hashedPasswordStr := hex.EncodeToString(hashedPassword[:])",
      "355:  hashedPassword_ := sha256.Sum256([]byte(ak.Password))",
      "356:  hashedPasswordStr_ := hex.EncodeToString(hashedPassword_[:])",
      "358:  if hashedPasswordStr != hashedPasswordStr_ {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "929b2754dfa659f2c89064ec63740864fe36b46b",
      "candidate_info": {
        "commit_hash": "929b2754dfa659f2c89064ec63740864fe36b46b",
        "repo": "cubefs/cubefs",
        "commit_url": "https://github.com/cubefs/cubefs/commit/929b2754dfa659f2c89064ec63740864fe36b46b",
        "files": [
          "metanode/partition.go"
        ],
        "message": "fix(metanode):mmap concurrent access cause panic\n\nSigned-off-by: leonrayang <chl696@sina.com>",
        "before_after_code_files": [
          "metanode/partition.go||metanode/partition.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cubefs/cubefs/pull/2761"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "metanode/partition.go||metanode/partition.go": [
          "File: metanode/partition.go -> metanode/partition.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1396:   case <-ttl.C:",
          "1397:    log.LogDebugf(\"[multiVersionTTLWork] begin cache ttl, mp[%v]\", mp.config.PartitionId)",
          "1398:    mp.multiVersionList.RLock()",
          "1402:    }",
          "1403:    mp.multiVersionList.RUnlock()",
          "1404:    for _, version := range volVersionInfoList.TemporaryVerMap {",
          "1405:     if version.Status == proto.VersionDeleting {",
          "",
          "[Removed Lines]",
          "1399:    volVersionInfoList := &proto.VolVersionInfoList{",
          "1400:     VerList:         mp.multiVersionList.VerList,",
          "1401:     TemporaryVerMap: mp.multiVersionList.TemporaryVerMap,",
          "",
          "[Added Lines]",
          "1399:    var volVersionInfoList = &proto.VolVersionInfoList{",
          "1400:     TemporaryVerMap: make(map[uint64]*proto.VolVersionInfo),",
          "1402:    copy(volVersionInfoList.VerList, mp.multiVersionList.VerList)",
          "1403:    for key, value := range mp.multiVersionList.TemporaryVerMap {",
          "1404:     copiedValue := *value",
          "1405:     volVersionInfoList.TemporaryVerMap[key] = &copiedValue",
          "1406:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96ab3bf2c63adfdd816cedc235dbe3ad008e93f3",
      "candidate_info": {
        "commit_hash": "96ab3bf2c63adfdd816cedc235dbe3ad008e93f3",
        "repo": "cubefs/cubefs",
        "commit_url": "https://github.com/cubefs/cubefs/commit/96ab3bf2c63adfdd816cedc235dbe3ad008e93f3",
        "files": [
          "sdk/data/stream/extent_handler.go",
          "sdk/data/stream/stream_writer.go"
        ],
        "message": "fix(client): reuse the split key for streaming writes, it's extent offset need take into count while generate packet\n\nSigned-off-by: leonrayang <chl696@sina.com>",
        "before_after_code_files": [
          "sdk/data/stream/extent_handler.go||sdk/data/stream/extent_handler.go",
          "sdk/data/stream/stream_writer.go||sdk/data/stream/stream_writer.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cubefs/cubefs/pull/2761"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sdk/data/stream/extent_handler.go||sdk/data/stream/extent_handler.go": [
          "File: sdk/data/stream/extent_handler.go -> sdk/data/stream/extent_handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: func (eh *ExtentHandler) String() string {",
          "142: }",
          "144: func (eh *ExtentHandler) write(data []byte, offset, size int, direct bool) (ek *proto.ExtentKey, err error) {",
          "",
          "[Removed Lines]",
          "140:  return fmt.Sprintf(\"ExtentHandler{ID(%v)Inode(%v)FileOffset(%v)StoreMode(%v)Status(%v)Dp(%v)}\",",
          "141:   eh.id, eh.inode, eh.fileOffset, eh.storeMode, eh.status, eh.dp)",
          "",
          "[Added Lines]",
          "140:  return fmt.Sprintf(\"ExtentHandler{ID(%v)Inode(%v)FileOffset(%v)Size(%v)StoreMode(%v)Status(%v)Dp(%v)}\",",
          "141:   eh.id, eh.inode, eh.fileOffset, eh.size, eh.storeMode, eh.status, eh.dp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:    extOffset := int(packet.KernelOffset) - eh.fileOffset",
          "250:    packet.PartitionID = eh.dp.PartitionID",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:    if eh.key != nil {",
          "249:     extOffset += int(eh.key.ExtentOffset)",
          "250:    }",
          "",
          "---------------"
        ],
        "sdk/data/stream/stream_writer.go||sdk/data/stream/stream_writer.go": [
          "File: sdk/data/stream/stream_writer.go -> sdk/data/stream/stream_writer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "577:    log.LogErrorf(\"action[doDirectWriteByAppend] inode %v meta extent split process err %v\", s.inode, err)",
          "578:    return",
          "579:   }",
          "581:   s.handler.fileOffset = int(extKey.FileOffset)",
          "582:   s.handler.size = int(extKey.Size)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:   log.LogDebugf(\"action[doDirectWriteByAppend] handler fileoffset %v size %v key %v\", s.handler.fileOffset, s.handler.size, s.handler.key)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "717:    if isLastEkVerNotEqual {",
          "718:     seq = s.verSeq",
          "719:    }",
          "720:    handler := NewExtentHandler(s, int(currentEK.FileOffset), storeMode, int(currentEK.Size))",
          "721:    handler.key = &proto.ExtentKey{",
          "722:     FileOffset:   currentEK.FileOffset,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "721:    log.LogDebugf(\"tryInitExtentHandlerByLastEk NewExtentHandler\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88a5b8247de63b9d8e78b78225b2063fbf5c8197",
      "candidate_info": {
        "commit_hash": "88a5b8247de63b9d8e78b78225b2063fbf5c8197",
        "repo": "cubefs/cubefs",
        "commit_url": "https://github.com/cubefs/cubefs/commit/88a5b8247de63b9d8e78b78225b2063fbf5c8197",
        "files": [
          "docker/conf/metanode.json",
          "metanode/const.go",
          "metanode/multi_ver_test.go",
          "metanode/partition_fsm.go",
          "metanode/partition_fsmop_inode.go",
          "metanode/partition_item.go"
        ],
        "message": "fix(metanode):add verlist to mp snapshot process\n\nSigned-off-by: leonrayang <chl696@sina.com>",
        "before_after_code_files": [
          "metanode/const.go||metanode/const.go",
          "metanode/multi_ver_test.go||metanode/multi_ver_test.go",
          "metanode/partition_fsm.go||metanode/partition_fsm.go",
          "metanode/partition_fsmop_inode.go||metanode/partition_fsmop_inode.go",
          "metanode/partition_item.go||metanode/partition_item.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cubefs/cubefs/pull/2761"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "metanode/const.go||metanode/const.go": [
          "File: metanode/const.go -> metanode/const.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:  opFSMSentToChanV1 = 71",
          "187:  opFSMStoreTickV1  = 72",
          "188: )",
          "190: var (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:  opFSMVerListSnapShot = 73",
          "",
          "---------------"
        ],
        "metanode/multi_ver_test.go||metanode/multi_ver_test.go": [
          "File: metanode/multi_ver_test.go -> metanode/multi_ver_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: package metanode",
          "17: import (",
          "18:  \"fmt\"",
          "19:  \"math\"",
          "20:  \"os\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  \"encoding/json\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:    verSeq: splitSeq,",
          "357:   },",
          "358:  }",
          "360:  mp.fsmAppendExtentsWithCheck(iTmp, true)",
          "361:  assert.True(t, testGetSplitSize(t, fileIno) == 1)",
          "362:  assert.True(t, testGetEkRefCnt(t, fileIno, &initExt) == 4)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360:  mp.verSeq = iTmp.getVer()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "533:   },",
          "534:  }",
          "535:  t.Logf(\"split at middle multiSnap.multiVersions %v\", ino.getLayerLen())",
          "536:  mp.fsmAppendExtentsWithCheck(iTmp, true)",
          "537:  t.Logf(\"split at middle multiSnap.multiVersions %v\", ino.getLayerLen())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537:  mp.verSeq = iTmp.getVer()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "566:  t.Logf(\"split key:%v\", splitKey)",
          "567:  getExtRsp = testGetExtList(t, ino, ino.getLayerVer(0))",
          "568:  t.Logf(\"split at middle multiSnap.multiVersions %v, extent %v, level 1 %v\", ino.getLayerLen(), getExtRsp.Extents, ino.multiSnap.multiVersions[0].Extents.eks)",
          "570:  mp.fsmAppendExtentsWithCheck(iTmp, true)",
          "571:  t.Logf(\"split at middle multiSnap.multiVersions %v\", ino.getLayerLen())",
          "572:  getExtRsp = testGetExtList(t, ino, ino.getLayerVer(0))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571:  mp.verSeq = iTmp.getVer()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "598:   },",
          "599:  }",
          "600:  t.Logf(\"split key:%v\", splitKey)",
          "601:  mp.fsmAppendExtentsWithCheck(iTmp, true)",
          "603:  getExtRsp = testGetExtList(t, ino, ino.getLayerVer(0))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603:  mp.verSeq = iTmp.getVer()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1582:  t.Logf(\"newList %v oldList %v\", newList, oldList)",
          "1583:  assert.True(t, true)",
          "1584: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1589: func TestVerlistSnapshot(t *testing.T) {",
          "1590:  verList := []*proto.VolVersionInfo{",
          "1591:   {Ver: 20, Status: proto.VersionNormal},",
          "1592:  }",
          "1593:  var verListBuf1 []byte",
          "1594:  var err error",
          "1595:  if verListBuf1, err = json.Marshal(verList); err != nil {",
          "1596:   return",
          "1597:  }",
          "1598:  t.Logf(\"mp.TestVerlistSnapshot  %v\", verListBuf1)",
          "1599:  var verList12 []*proto.VolVersionInfo",
          "1600:  if err = json.Unmarshal(verListBuf1, &verList12); err != nil {",
          "1601:   t.Logf(\"mp.TestVerlistSnapshot  err %v\", err)",
          "1602:  }",
          "1603:  t.Logf(\"mp.TestVerlistSnapshot  %v\", verList12)",
          "1604:  assert.True(t, true)",
          "1605: }",
          "",
          "---------------"
        ],
        "metanode/partition_fsm.go||metanode/partition_fsm.go": [
          "File: metanode/partition_fsm.go -> metanode/partition_fsm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:   txRbInodeTree  = NewBtree()",
          "622:   txRbDentryTree = NewBtree()",
          "623:   uniqChecker    = newUniqChecker()",
          "624:  )",
          "626:  blockUntilStoreSnapshot := func() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623:   verList        []*proto.VolVersionInfo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "676:    mp.txProcessor.txResource.txRbInodeTree = txRbInodeTree",
          "677:    mp.txProcessor.txResource.txRbDentryTree = txRbDentryTree",
          "678:    mp.uniqChecker = uniqChecker",
          "680:    err = nil",
          "682:    mp.storeChan <- &storeMsg{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "679:    mp.multiVersionList.VerList = verList",
          "680:    mp.verSeq = mp.multiVersionList.GetLastVer()",
          "681:    log.LogInfof(\"mp %v updateVerList (%v) seq %v\", mp.config.PartitionId, mp.multiVersionList.VerList, mp.verSeq)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "821:    txRbDentry.Unmarshal(snap.V)",
          "822:    txRbDentryTree.ReplaceOrInsert(txRbDentry, true)",
          "823:    log.LogDebugf(\"ApplySnapshot: create txRbDentry: partitionID(%v) txRbDentry(%v)\", mp.config.PartitionId, txRbDentry)",
          "824:   case opExtentFileSnapshot:",
          "825:    fileName := string(snap.K)",
          "826:    fileName = path.Join(mp.config.RootDir, fileName)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:   case opFSMVerListSnapShot:",
          "827:    json.Unmarshal(snap.V, &verList)",
          "828:    log.LogDebugf(\"ApplySnapshot: create verList: partitionID(%v) snap.V(%v) verList(%v)\", mp.config.PartitionId, snap.V, verList)",
          "",
          "---------------"
        ],
        "metanode/partition_fsmop_inode.go||metanode/partition_fsmop_inode.go": [
          "File: metanode/partition_fsmop_inode.go -> metanode/partition_fsmop_inode.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "469:  var (",
          "470:   delExtents []proto.ExtentKey",
          "471:  )",
          "472:  status = proto.OpOk",
          "473:  item := mp.inodeTree.CopyGet(ino)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:  if mp.verSeq < ino.getVer() {",
          "473:   status = proto.OpArgMismatchErr",
          "474:   log.LogErrorf(\"fsmAppendExtentsWithCheck.mp %v param ino %v mp seq %v\", mp.config.PartitionId, ino, mp.verSeq)",
          "475:   return",
          "476:  }",
          "",
          "---------------"
        ],
        "metanode/partition_item.go||metanode/partition_item.go": [
          "File: metanode/partition_item.go -> metanode/partition_item.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:  txRbInodeTree     *BTree",
          "149:  txRbDentryTree    *BTree",
          "150:  uniqChecker       *uniqChecker",
          "152:  filenames []string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:  verList           []*proto.VolVersionInfo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:  SiwKeyTxId",
          "166:  SiwKeyCursor",
          "167:  SiwKeyUniqId",
          "168: )",
          "170: type SnapItemWrapper struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:  SiwKeyVerList",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:  si.txRbInodeTree = mp.txProcessor.txResource.txRbInodeTree.GetTree()",
          "202:  si.txRbDentryTree = mp.txProcessor.txResource.txRbDentryTree.GetTree()",
          "203:  si.uniqChecker = mp.uniqChecker.clone()",
          "204:  mp.nonIdempotent.Unlock()",
          "206:  si.dataCh = make(chan interface{})",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:  si.verList = mp.GetAllVerList()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:   if !fileInfo.IsDir() && strings.HasPrefix(fileInfo.Name(), prefixDelExtentV2) {",
          "222:    filenames = append(filenames, fileInfo.Name())",
          "223:   }",
          "227:  }",
          "228:  si.filenames = filenames",
          "",
          "[Removed Lines]",
          "224:   if !fileInfo.IsDir() && strings.HasPrefix(fileInfo.Name(), prefixMultiVer) {",
          "225:    filenames = append(filenames, fileInfo.Name())",
          "226:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "278:    cursorWrapper := SnapItemWrapper{SiwKeyCursor, si.cursor}",
          "279:    produceItem(cursorWrapper)",
          "283:    if si.uniqID != 0 {",
          "",
          "[Removed Lines]",
          "280:    log.LogDebugf(\"newMetaItemIterator: SnapFormatVersion_1, partitionId(%v) applyID(%v) txId(%v) cursor(%v) uniqID(%v)\",",
          "281:     mp.config.PartitionId, si.applyID, si.txId, si.cursor, si.uniqID)",
          "",
          "[Added Lines]",
          "281:    verListWrapper := SnapItemWrapper{SiwKeyVerList, si.verList}",
          "282:    produceItem(verListWrapper)",
          "284:    log.LogDebugf(\"newMetaItemIterator: SnapFormatVersion_1, partitionId(%v) applyID(%v) txId(%v) cursor(%v) uniqID(%v) verList(%v)\",",
          "285:     mp.config.PartitionId, si.applyID, si.txId, si.cursor, si.uniqID, si.verList)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "431:    uniqIdBuf := make([]byte, 8)",
          "432:    binary.BigEndian.PutUint64(uniqIdBuf, uniqId)",
          "433:    snap = NewMetaItem(opFSMUniqIDSnap, typedItem.MarshalKey(), uniqIdBuf)",
          "434:   } else {",
          "435:    panic(fmt.Sprintf(\"MetaItemIterator.Next: unknown SnapItemWrapper key: %v\", typedItem.key))",
          "436:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:   } else if typedItem.key == SiwKeyVerList {",
          "439:    var verListBuf []byte",
          "440:    if verListBuf, err = json.Marshal(typedItem.value.([]*proto.VolVersionInfo)); err != nil {",
          "441:     return",
          "442:    }",
          "443:    snap = NewMetaItem(opFSMVerListSnapShot, typedItem.MarshalKey(), verListBuf)",
          "444:    log.LogInfof(\"snapshot.fileRootDir %v verList %v\", si.fileRootDir, verListBuf)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c21d034d2fcd051ffd64afeafc68cbcb39d26551",
      "candidate_info": {
        "commit_hash": "c21d034d2fcd051ffd64afeafc68cbcb39d26551",
        "repo": "cubefs/cubefs",
        "commit_url": "https://github.com/cubefs/cubefs/commit/c21d034d2fcd051ffd64afeafc68cbcb39d26551",
        "files": [
          "master/gapi_user.go"
        ],
        "message": "enhance(gapi):Timing attack can leak user passwords\n\nSigned-off-by: leonrayang <chl696@sina.com>",
        "before_after_code_files": [
          "master/gapi_user.go||master/gapi_user.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "master/gapi_user.go||master/gapi_user.go"
          ],
          "candidate": [
            "master/gapi_user.go||master/gapi_user.go"
          ]
        }
      },
      "candidate_diff": {
        "master/gapi_user.go||master/gapi_user.go": [
          "File: master/gapi_user.go -> master/gapi_user.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "5:  \"fmt\"",
          "6:  \"github.com/cubefs/cubefs/proto\"",
          "7:  \"github.com/cubefs/cubefs/util/log\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:  \"crypto/sha256\"",
          "6:  \"encoding/hex\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:  if err != nil {",
          "348:   return nil, err",
          "349:  }",
          "352:   log.LogWarnf(\"user:[%s] login pass word has err\", args.UserID)",
          "353:   return nil, fmt.Errorf(\"user or password has err\")",
          "354:  }",
          "",
          "[Removed Lines]",
          "351:  if ak.Password != args.Password {",
          "",
          "[Added Lines]",
          "352:  hashedPassword := sha256.Sum256([]byte(args.Password))",
          "353:  hashedPasswordStr := hex.EncodeToString(hashedPassword[:])",
          "355:  hashedPassword_ := sha256.Sum256([]byte(ak.Password))",
          "356:  hashedPasswordStr_ := hex.EncodeToString(hashedPassword_[:])",
          "358:  if hashedPasswordStr != hashedPasswordStr_ {",
          "",
          "---------------"
        ]
      }
    }
  ]
}