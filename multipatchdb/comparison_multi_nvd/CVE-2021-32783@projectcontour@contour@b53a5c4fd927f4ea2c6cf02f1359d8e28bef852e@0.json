{
  "cve_id": "CVE-2021-32783",
  "cve_desc": "Contour is a Kubernetes ingress controller using Envoy proxy. In Contour before version 1.17.1 a specially crafted ExternalName type Service may be used to access Envoy's admin interface, which Contour normally prevents from access outside the Envoy container. This can be used to shut down Envoy remotely (a denial of service), or to expose the existence of any Secret that Envoy is using for its configuration, including most notably TLS Keypairs. However, it *cannot* be used to get the *content* of those secrets. Since this attack allows access to the administration interface, a variety of administration options are available, such as shutting down the Envoy or draining traffic. In general, the Envoy admin interface cannot easily be used for making changes to the cluster, in-flight requests, or backend services, but it could be used to shut down or drain Envoy, change traffic routing, or to retrieve secret metadata, as mentioned above. The issue will be addressed in Contour v1.18.0 and a cherry-picked patch release, v1.17.1, has been released to cover users who cannot upgrade at this time. For more details refer to the linked GitHub Security Advisory.",
  "repo": "projectcontour/contour",
  "patch_hash": "b53a5c4fd927f4ea2c6cf02f1359d8e28bef852e",
  "patch_info": {
    "commit_hash": "b53a5c4fd927f4ea2c6cf02f1359d8e28bef852e",
    "repo": "projectcontour/contour",
    "commit_url": "https://github.com/projectcontour/contour/commit/b53a5c4fd927f4ea2c6cf02f1359d8e28bef852e",
    "files": [
      "cmd/contour/serve.go",
      "examples/contour/01-contour-config.yaml",
      "examples/render/contour-gateway.yaml",
      "examples/render/contour.yaml",
      "go.mod",
      "internal/dag/accessors.go",
      "internal/dag/accessors_test.go",
      "internal/dag/builder_test.go",
      "internal/dag/extension_processor.go",
      "internal/dag/gatewayapi_processor.go",
      "internal/dag/httpproxy_processor.go",
      "internal/dag/ingress_processor.go",
      "internal/dag/status_test.go",
      "internal/featuretests/v3/externalname_test.go",
      "internal/featuretests/v3/headerpolicy_test.go",
      "pkg/config/parameters.go",
      "site/content/docs/main/configuration.md",
      "test/e2e/httpproxy/018_external_name_test.go",
      "test/e2e/httpproxy/httpproxy_test.go"
    ],
    "message": "cherrypicks for v1.17.1 (#3909)\n\n* Merge pull request from GHSA-5ph6-qq5x-7jwc\n\nSigned-off-by: Nick Young <ynick@vmware.com>\n\n* Fix spelling and lint errors that slipped into the ExternalName PR (#3908)\n\nSigned-off-by: Nick Young <ynick@vmware.com>\n\nCo-authored-by: Nick Young <ynick@vmware.com>",
    "before_after_code_files": [
      "cmd/contour/serve.go||cmd/contour/serve.go",
      "go.mod||go.mod",
      "internal/dag/accessors.go||internal/dag/accessors.go",
      "internal/dag/accessors_test.go||internal/dag/accessors_test.go",
      "internal/dag/builder_test.go||internal/dag/builder_test.go",
      "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
      "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go",
      "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
      "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go",
      "internal/dag/status_test.go||internal/dag/status_test.go",
      "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go",
      "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go",
      "pkg/config/parameters.go||pkg/config/parameters.go",
      "test/e2e/httpproxy/018_external_name_test.go||test/e2e/httpproxy/018_external_name_test.go",
      "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go"
    ]
  },
  "patch_diff": {
    "cmd/contour/serve.go||cmd/contour/serve.go": [
      "File: cmd/contour/serve.go -> cmd/contour/serve.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "714:   responseHeadersPolicy.Remove = append(responseHeadersPolicy.Remove, ctx.Config.Policy.ResponseHeadersPolicy.Remove...)",
      "715:  }",
      "718:  dagProcessors := []dag.Processor{",
      "719:   &dag.IngressProcessor{",
      "722:   },",
      "723:   &dag.ExtensionServiceProcessor{",
      "724:    FieldLogger:       log.WithField(\"context\", \"ExtensionServiceProcessor\"),",
      "725:    ClientCertificate: clientCert,",
      "726:   },",
      "727:   &dag.HTTPProxyProcessor{",
      "734:   },",
      "735:  }",
      "737:  if ctx.Config.GatewayConfig != nil && clients.ResourcesExist(k8s.GatewayAPIResources()...) {",
      "738:   dagProcessors = append(dagProcessors, &dag.GatewayAPIProcessor{",
      "740:   })",
      "741:  }",
      "",
      "[Removed Lines]",
      "720:    FieldLogger:       log.WithField(\"context\", \"IngressProcessor\"),",
      "721:    ClientCertificate: clientCert,",
      "728:    DisablePermitInsecure: ctx.Config.DisablePermitInsecure,",
      "729:    FallbackCertificate:   fallbackCert,",
      "730:    DNSLookupFamily:       ctx.Config.Cluster.DNSLookupFamily,",
      "731:    ClientCertificate:     clientCert,",
      "732:    RequestHeadersPolicy:  &requestHeadersPolicy,",
      "733:    ResponseHeadersPolicy: &responseHeadersPolicy,",
      "739:    FieldLogger: log.WithField(\"context\", \"GatewayAPIProcessor\"),",
      "",
      "[Added Lines]",
      "717:  log.Debugf(\"EnableExternalNameService is set to %t\", ctx.Config.EnableExternalNameService)",
      "721:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
      "722:    FieldLogger:               log.WithField(\"context\", \"IngressProcessor\"),",
      "723:    ClientCertificate:         clientCert,",
      "732:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
      "733:    DisablePermitInsecure:     ctx.Config.DisablePermitInsecure,",
      "734:    FallbackCertificate:       fallbackCert,",
      "735:    DNSLookupFamily:           ctx.Config.Cluster.DNSLookupFamily,",
      "736:    ClientCertificate:         clientCert,",
      "737:    RequestHeadersPolicy:      &requestHeadersPolicy,",
      "738:    ResponseHeadersPolicy:     &responseHeadersPolicy,",
      "744:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
      "745:    FieldLogger:               log.WithField(\"context\", \"GatewayAPIProcessor\"),",
      "",
      "---------------"
    ],
    "go.mod||go.mod": [
      "File: go.mod -> go.mod",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: require (",
      "6:  github.com/ahmetb/gen-crd-api-reference-docs v0.3.0",
      "7:  github.com/bombsimon/logrusr v1.0.0",
      "8:  github.com/envoyproxy/go-control-plane v0.9.9-0.20210111201334-f1f47757da33",
      "9:  github.com/go-logr/logr v0.4.0",
      "10:  github.com/golang/protobuf v1.5.2",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8:  github.com/davecgh/go-spew v1.1.1 // indirect",
      "",
      "---------------"
    ],
    "internal/dag/accessors.go||internal/dag/accessors.go": [
      "File: internal/dag/accessors.go -> internal/dag/accessors.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:  svc, svcPort, err := cache.LookupService(meta, port)",
      "56:  if err != nil {",
      "57:   return nil, err",
      "58:  }",
      "60:  if dagSvc := dag.GetService(k8s.NamespacedNameOf(svc), svcPort.Port); dagSvc != nil {",
      "61:   return dagSvc, nil",
      "62:  }",
      "",
      "[Removed Lines]",
      "54: func (dag *DAG) EnsureService(meta types.NamespacedName, port intstr.IntOrString, cache *KubernetesCache) (*Service, error) {",
      "",
      "[Added Lines]",
      "54: func (dag *DAG) EnsureService(meta types.NamespacedName, port intstr.IntOrString, cache *KubernetesCache, enableExternalNameSvc bool) (*Service, error) {",
      "60:  err = validateExternalName(svc, enableExternalNameSvc)",
      "61:  if err != nil {",
      "62:   return nil, err",
      "63:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "78:  return dagSvc, nil",
      "79: }",
      "81: func upstreamProtocol(svc *v1.Service, port v1.ServicePort) string {",
      "82:  up := annotation.ParseUpstreamProtocols(svc.Annotations)",
      "83:  protocol := up[port.Name]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86: func validateExternalName(svc *v1.Service, enableExternalNameSvc bool) error {",
      "89:  en := externalName(svc)",
      "90:  if en == \"\" {",
      "91:   return nil",
      "92:  }",
      "95:  if !enableExternalNameSvc {",
      "96:   return fmt.Errorf(\"%s/%s is an ExternalName service, these are not currently enabled. See the config.enableExternalNameService config file setting\", svc.Namespace, svc.Name)",
      "97:  }",
      "104:  localhostNames := map[string]struct{}{",
      "105:   \"localhost\":               {},",
      "106:   \"localhost.localdomain\":   {},",
      "107:   \"local.projectcontour.io\": {},",
      "108:  }",
      "110:  _, localhost := localhostNames[en]",
      "111:  if localhost {",
      "112:   return fmt.Errorf(\"%s/%s is an ExternalName service that points to localhost, this is not allowed\", svc.Namespace, svc.Name)",
      "113:  }",
      "115:  return nil",
      "116: }",
      "",
      "---------------"
    ],
    "internal/dag/accessors_test.go||internal/dag/accessors_test.go": [
      "File: internal/dag/accessors_test.go -> internal/dag/accessors_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:    }},",
      "41:   },",
      "42:  }",
      "43:  services := map[types.NamespacedName]*v1.Service{",
      "45:  }",
      "47:  tests := map[string]struct {",
      "48:   types.NamespacedName",
      "52:  }{",
      "53:   \"lookup service by port number\": {",
      "54:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
      "",
      "[Removed Lines]",
      "44:   {Name: \"service1\", Namespace: \"default\"}: s1,",
      "49:   port    intstr.IntOrString",
      "50:   want    *Service",
      "51:   wantErr error",
      "",
      "[Added Lines]",
      "44:  externalNameValid := &v1.Service{",
      "45:   ObjectMeta: metav1.ObjectMeta{",
      "46:    Name:      \"externalnamevalid\",",
      "47:    Namespace: \"default\",",
      "48:   },",
      "49:   Spec: v1.ServiceSpec{",
      "50:    Type:         v1.ServiceTypeExternalName,",
      "51:    ExternalName: \"external.projectcontour.io\",",
      "52:    Ports: []v1.ServicePort{{",
      "53:     Name:       \"http\",",
      "54:     Protocol:   \"TCP\",",
      "55:     Port:       80,",
      "56:     TargetPort: intstr.FromInt(80),",
      "57:    }},",
      "58:   },",
      "59:  }",
      "61:  externalNameLocalhost := &v1.Service{",
      "62:   ObjectMeta: metav1.ObjectMeta{",
      "63:    Name:      \"externalnamelocalhost\",",
      "64:    Namespace: \"default\",",
      "65:   },",
      "66:   Spec: v1.ServiceSpec{",
      "67:    Type:         v1.ServiceTypeExternalName,",
      "68:    ExternalName: \"localhost\",",
      "69:    Ports: []v1.ServicePort{{",
      "70:     Name:       \"http\",",
      "71:     Protocol:   \"TCP\",",
      "72:     Port:       80,",
      "73:     TargetPort: intstr.FromInt(80),",
      "74:    }},",
      "75:   },",
      "76:  }",
      "79:   {Name: \"service1\", Namespace: \"default\"}:              s1,",
      "80:   {Name: \"externalnamevalid\", Namespace: \"default\"}:     externalNameValid,",
      "81:   {Name: \"externalnamelocalhost\", Namespace: \"default\"}: externalNameLocalhost,",
      "86:   port                  intstr.IntOrString",
      "87:   enableExternalNameSvc bool",
      "88:   want                  *Service",
      "89:   wantErr               error",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:    port:           intstr.FromString(\"9999\"),",
      "81:    wantErr:        errors.New(`port \"9999\" on service \"default/service1\" not matched`),",
      "82:   },",
      "83:  }",
      "85:  for name, tc := range tests {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:   \"When ExternalName Services are not disabled no error is returned\": {",
      "122:    NamespacedName: types.NamespacedName{Name: \"externalnamevalid\", Namespace: \"default\"},",
      "123:    port:           intstr.FromString(\"80\"),",
      "124:    want: &Service{",
      "125:     Weighted: WeightedService{",
      "126:      Weight:           1,",
      "127:      ServiceName:      \"externalnamevalid\",",
      "128:      ServiceNamespace: \"default\",",
      "129:      ServicePort: v1.ServicePort{",
      "130:       Name:       \"http\",",
      "131:       Protocol:   \"TCP\",",
      "132:       Port:       80,",
      "133:       TargetPort: intstr.FromInt(80),",
      "134:      },",
      "135:     },",
      "136:     ExternalName: \"external.projectcontour.io\",",
      "137:    },",
      "138:    enableExternalNameSvc: true,",
      "139:   },",
      "140:   \"When ExternalName Services are disabled an error is returned\": {",
      "141:    NamespacedName: types.NamespacedName{Name: \"externalnamevalid\", Namespace: \"default\"},",
      "142:    port:           intstr.FromString(\"80\"),",
      "143:    wantErr:        errors.New(`default/externalnamevalid is an ExternalName service, these are not currently enabled. See the config.enableExternalNameService config file setting`),",
      "144:   },",
      "145:   \"When ExternalName Services are enabled but a localhost ExternalName is used an error is returned\": {",
      "146:    NamespacedName:        types.NamespacedName{Name: \"externalnamelocalhost\", Namespace: \"default\"},",
      "147:    port:                  intstr.FromString(\"80\"),",
      "148:    wantErr:               errors.New(`default/externalnamelocalhost is an ExternalName service that points to localhost, this is not allowed`),",
      "149:    enableExternalNameSvc: true,",
      "150:   },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "94:    var dag DAG",
      "97:    assert.Equal(t, tc.want, got)",
      "98:    assert.Equal(t, tc.wantErr, gotErr)",
      "99:   })",
      "",
      "[Removed Lines]",
      "96:    got, gotErr := dag.EnsureService(tc.NamespacedName, tc.port, &b.Source)",
      "",
      "[Added Lines]",
      "164:    got, gotErr := dag.EnsureService(tc.NamespacedName, tc.port, &b.Source, tc.enableExternalNameSvc)",
      "",
      "---------------"
    ],
    "internal/dag/builder_test.go||internal/dag/builder_test.go": [
      "File: internal/dag/builder_test.go -> internal/dag/builder_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "6536:   },",
      "6537:  }",
      "6539:  proxyExternalNameService := &contour_api_v1.HTTPProxy{",
      "6540:   ObjectMeta: metav1.ObjectMeta{",
      "6541:    Name:      \"example-com\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6539:  ingressExternalNameService := &networking_v1.Ingress{",
      "6540:   ObjectMeta: metav1.ObjectMeta{",
      "6541:    Name:      \"externalname\",",
      "6542:    Namespace: \"default\",",
      "6543:   },",
      "6544:   Spec: networking_v1.IngressSpec{",
      "6545:    Rules: []networking_v1.IngressRule{{",
      "6546:     Host: \"example.com\",",
      "6547:     IngressRuleValue: networking_v1.IngressRuleValue{",
      "6548:      HTTP: &networking_v1.HTTPIngressRuleValue{",
      "6549:       Paths: []networking_v1.HTTPIngressPath{{",
      "6550:        Backend: *backendv1(s14.GetName(), intstr.FromInt(80)),",
      "6551:       }},",
      "6552:      },",
      "6553:     },",
      "6554:    }},",
      "6555:   },",
      "6556:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6582:  tests := map[string]struct {",
      "6583:   objs                         []interface{}",
      "6584:   disablePermitInsecure        bool",
      "6585:   fallbackCertificateName      string",
      "6586:   fallbackCertificateNamespace string",
      "6587:   want                         []Vertex",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6604:   enableExternalNameSvc        bool",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "8980:     },",
      "8981:    ),",
      "8982:   },",
      "8983:   \"insert proxy with externalName service\": {",
      "8984:    objs: []interface{}{",
      "8985:     proxyExternalNameService,",
      "8986:     s14,",
      "8987:    },",
      "8988:    want: listeners(",
      "8989:     &Listener{",
      "8990:      Port: 80,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9003:   \"insert ingress with externalName service\": {",
      "9004:    objs: []interface{}{",
      "9005:     ingressExternalNameService,",
      "9006:     s14,",
      "9007:    },",
      "9008:    enableExternalNameSvc: true,",
      "9009:    want: listeners(",
      "9010:     &Listener{",
      "9011:      Port: 80,",
      "9012:      VirtualHosts: virtualhosts(",
      "9013:       virtualhost(\"example.com\", &Route{",
      "9014:        PathMatchCondition: prefixString(\"/\"),",
      "9015:        Clusters: []*Cluster{{",
      "9016:         Upstream: &Service{",
      "9017:          ExternalName: \"externalservice.io\",",
      "9018:          Weighted: WeightedService{",
      "9019:           Weight:           1,",
      "9020:           ServiceName:      s14.Name,",
      "9021:           ServiceNamespace: s14.Namespace,",
      "9022:           ServicePort:      s14.Spec.Ports[0],",
      "9023:          },",
      "9024:         },",
      "9025:        }},",
      "9026:       }),",
      "9027:      ),",
      "9028:     },",
      "9029:    ),",
      "9030:   },",
      "9031:   \"insert ingress with externalName service, but externalName services disabled\": {",
      "9032:    objs: []interface{}{",
      "9033:     ingressExternalNameService,",
      "9034:     s14,",
      "9035:    },",
      "9036:    enableExternalNameSvc: false,",
      "9037:    want:                  listeners(),",
      "9038:   },",
      "9044:    enableExternalNameSvc: true,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "9014:     s14,",
      "9015:     sec1,",
      "9016:    },",
      "9017:    want: listeners(",
      "9018:     &Listener{",
      "9019:      Port: 443,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9074:    enableExternalNameSvc: true,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "9073:     proxyReplaceHostHeaderRoute,",
      "9074:     s14,",
      "9075:    },",
      "9076:    want: listeners(",
      "9077:     &Listener{",
      "9078:      Port: 80,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9134:    enableExternalNameSvc: true,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9111:     proxyReplaceHostHeaderService,",
      "9112:     s14,",
      "9113:    },",
      "9115:   },",
      "9116:   \"insert proxy with response header policy - route - host header\": {",
      "9117:    objs: []interface{}{",
      "",
      "[Removed Lines]",
      "9114:    want: listeners(),",
      "",
      "[Added Lines]",
      "9173:    enableExternalNameSvc: true,",
      "9174:    want:                  listeners(),",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "9754:     },",
      "9755:     Processors: []Processor{",
      "9756:      &IngressProcessor{",
      "9758:      },",
      "9759:      &HTTPProxyProcessor{",
      "9761:       FallbackCertificate: &types.NamespacedName{",
      "9762:        Name:      tc.fallbackCertificateName,",
      "9763:        Namespace: tc.fallbackCertificateNamespace,",
      "",
      "[Removed Lines]",
      "9757:       FieldLogger: fixture.NewTestLogger(t),",
      "9760:       DisablePermitInsecure: tc.disablePermitInsecure,",
      "",
      "[Added Lines]",
      "9817:       FieldLogger:               fixture.NewTestLogger(t),",
      "9818:       EnableExternalNameService: tc.enableExternalNameSvc,",
      "9821:       EnableExternalNameService: tc.enableExternalNameSvc,",
      "9822:       DisablePermitInsecure:     tc.disablePermitInsecure,",
      "",
      "---------------"
    ],
    "internal/dag/extension_processor.go||internal/dag/extension_processor.go": [
      "File: internal/dag/extension_processor.go -> internal/dag/extension_processor.go"
    ],
    "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go": [
      "File: internal/dag/gatewayapi_processor.go -> internal/dag/gatewayapi_processor.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:  dag    *DAG",
      "49:  source *KubernetesCache",
      "50: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:  EnableExternalNameService bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "744:  meta := types.NamespacedName{Name: *serviceName, Namespace: namespace}",
      "748:  if err != nil {",
      "750:  }",
      "752:  return service, nil",
      "",
      "[Removed Lines]",
      "747:  service, err := p.dag.EnsureService(meta, intstr.FromInt(int(*port)), p.source)",
      "749:   return nil, fmt.Errorf(\"service %q does not exist\", meta.Name)",
      "",
      "[Added Lines]",
      "752:  service, err := p.dag.EnsureService(meta, intstr.FromInt(int(*port)), p.source, p.EnableExternalNameService)",
      "754:   return nil, fmt.Errorf(\"service %q is invalid: %s\", meta.Name, err)",
      "",
      "---------------"
    ],
    "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go": [
      "File: internal/dag/httpproxy_processor.go -> internal/dag/httpproxy_processor.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:  FallbackCertificate *types.NamespacedName",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:  EnableExternalNameService bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "563:     return nil",
      "564:    }",
      "565:    m := types.NamespacedName{Name: service.Name, Namespace: proxy.Namespace}",
      "567:    if err != nil {",
      "568:     validCond.AddErrorf(contour_api_v1.ConditionTypeServiceError, \"ServiceUnresolvedReference\",",
      "569:      \"Spec.Routes unresolved service reference: %s\", err)",
      "",
      "[Removed Lines]",
      "566:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
      "",
      "[Added Lines]",
      "571:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source, p.EnableExternalNameService)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "688:   var proxy TCPProxy",
      "689:   for _, service := range httpproxy.Spec.TCPProxy.Services {",
      "690:    m := types.NamespacedName{Name: service.Name, Namespace: httpproxy.Namespace}",
      "692:    if err != nil {",
      "694:      \"Spec.TCPProxy unresolved service reference: %s\", err)",
      "695:     return false",
      "696:    }",
      "",
      "[Removed Lines]",
      "691:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
      "693:     validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\",",
      "",
      "[Added Lines]",
      "696:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source, p.EnableExternalNameService)",
      "698:     validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\",",
      "",
      "---------------"
    ],
    "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go": [
      "File: internal/dag/ingress_processor.go -> internal/dag/ingress_processor.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:  ClientCertificate *types.NamespacedName",
      "40: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:  EnableExternalNameService bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "144:    port = intstr.FromInt(int(be.Service.Port.Number))",
      "145:   }",
      "148:   if err != nil {",
      "149:    p.WithError(err).",
      "150:     WithField(\"name\", ing.GetName()).",
      "",
      "[Removed Lines]",
      "147:   s, err := p.dag.EnsureService(m, port, p.source)",
      "",
      "[Added Lines]",
      "152:   s, err := p.dag.EnsureService(m, port, p.source, p.EnableExternalNameService)",
      "",
      "---------------"
    ],
    "internal/dag/status_test.go||internal/dag/status_test.go": [
      "File: internal/dag/status_test.go -> internal/dag/status_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1758:   objs: []interface{}{proxyTCPInvalidMissingService},",
      "1759:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
      "1760:    {Name: proxyTCPInvalidMissingService.Name, Namespace: proxyTCPInvalidMissingService.Namespace}: fixture.NewValidCondition().",
      "1762:   },",
      "1763:  })",
      "",
      "[Removed Lines]",
      "1761:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
      "",
      "[Added Lines]",
      "1761:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1787:   objs: []interface{}{proxyTCPInvalidPortNotMatched, fixture.ServiceRootsKuard},",
      "1788:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
      "1789:    {Name: proxyTCPInvalidPortNotMatched.Name, Namespace: proxyTCPInvalidPortNotMatched.Namespace}: fixture.NewValidCondition().",
      "1791:   },",
      "1792:  })",
      "",
      "[Removed Lines]",
      "1790:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
      "",
      "[Added Lines]",
      "1790:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2931:      Type:    string(status.ConditionResolvedRefs),",
      "2932:      Status:  contour_api_v1.ConditionFalse,",
      "2933:      Reason:  string(status.ReasonDegraded),",
      "2935:     },",
      "2936:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
      "2937:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
      "",
      "[Removed Lines]",
      "2934:      Message: \"service \\\"invalid-one\\\" does not exist, service \\\"invalid-two\\\" does not exist\",",
      "",
      "[Added Lines]",
      "2934:      Message: \"service \\\"invalid-one\\\" is invalid: service \\\"default/invalid-one\\\" not found, service \\\"invalid-two\\\" is invalid: service \\\"default/invalid-two\\\" not found\",",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3661:       Type:    string(status.ConditionResolvedRefs),",
      "3662:       Status:  contour_api_v1.ConditionFalse,",
      "3663:       Reason:  string(status.ReasonDegraded),",
      "3665:      },",
      "3666:      gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
      "3667:       Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
      "",
      "[Removed Lines]",
      "3664:       Message: \"service \\\"invalid-one\\\" does not exist, service \\\"invalid-two\\\" does not exist\",",
      "",
      "[Added Lines]",
      "3664:       Message: \"service \\\"invalid-one\\\" is invalid: service \\\"default/invalid-one\\\" not found, service \\\"invalid-two\\\" is invalid: service \\\"default/invalid-two\\\" not found\",",
      "",
      "---------------"
    ],
    "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go": [
      "File: internal/featuretests/v3/externalname_test.go -> internal/featuretests/v3/externalname_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: import (",
      "17:  \"testing\"",
      "19:  \"github.com/projectcontour/contour/internal/featuretests\"",
      "21:  envoy_cluster_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/cluster/v3\"",
      "22:  envoy_route_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19:  \"github.com/projectcontour/contour/internal/contour\"",
      "20:  \"github.com/projectcontour/contour/internal/dag\"",
      "22:  \"github.com/sirupsen/logrus\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39: func TestExternalNameService(t *testing.T) {",
      "41:  defer done()",
      "43:  s1 := fixture.NewService(\"kuard\").",
      "",
      "[Removed Lines]",
      "40:  rh, c, done := setup(t)",
      "",
      "[Added Lines]",
      "43:  rh, c, done := setup(t, enableExternalNameService(t))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "317:   ),",
      "318:  })",
      "319: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "324: func enableExternalNameService(t *testing.T) func(eh *contour.EventHandler) {",
      "325:  return func(eh *contour.EventHandler) {",
      "327:   log := fixture.NewTestLogger(t)",
      "328:   log.SetLevel(logrus.DebugLevel)",
      "330:   eh.Builder.Processors = []dag.Processor{",
      "331:    &dag.IngressProcessor{",
      "332:     EnableExternalNameService: true,",
      "333:     FieldLogger:               log.WithField(\"context\", \"IngressProcessor\"),",
      "334:    },",
      "335:    &dag.HTTPProxyProcessor{",
      "336:     EnableExternalNameService: true,",
      "337:    },",
      "338:    &dag.ExtensionServiceProcessor{",
      "339:     FieldLogger: log.WithField(\"context\", \"ExtensionServiceProcessor\"),",
      "340:    },",
      "341:    &dag.ListenerProcessor{},",
      "342:   }",
      "343:  }",
      "344: }",
      "",
      "---------------"
    ],
    "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go": [
      "File: internal/featuretests/v3/headerpolicy_test.go -> internal/featuretests/v3/headerpolicy_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: )",
      "32: func TestHeaderPolicy_ReplaceHeader_HTTProxy(t *testing.T) {",
      "34:  defer done()",
      "36:  rh.OnAdd(fixture.NewService(\"svc1\").",
      "",
      "[Removed Lines]",
      "33:  rh, c, done := setup(t)",
      "",
      "[Added Lines]",
      "36:  rh, c, done := setup(t, enableExternalNameService(t))",
      "",
      "---------------"
    ],
    "pkg/config/parameters.go||pkg/config/parameters.go": [
      "File: pkg/config/parameters.go -> pkg/config/parameters.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "537:  DisableAllowChunkedLength bool `yaml:\"disableAllowChunkedLength,omitempty\"`",
      "540:  LeaderElection LeaderElectionParameters `yaml:\"leaderelection,omitempty\"`",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "542:  EnableExternalNameService bool `yaml:\"enableExternalNameService,omitempty\"`",
      "",
      "---------------"
    ],
    "test/e2e/httpproxy/018_external_name_test.go||test/e2e/httpproxy/018_external_name_test.go": [
      "File: test/e2e/httpproxy/018_external_name_test.go -> test/e2e/httpproxy/018_external_name_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:     },",
      "80:    },",
      "81:   }",
      "84:   res, ok := f.HTTP.RequestUntil(&e2e.HTTPRequestOpts{",
      "85:    Host:      p.Spec.VirtualHost.Fqdn,",
      "",
      "[Removed Lines]",
      "82:   f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "",
      "[Added Lines]",
      "82:   proxy, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "83:   if !ok {",
      "84:    t.Fatalf(\"The HTTPProxy did not become valid, here are the Valid condition's Errors: %s\", httpProxyErrors(proxy))",
      "85:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "146:     },",
      "147:    },",
      "148:   }",
      "151:   res, ok := f.HTTP.RequestUntil(&e2e.HTTPRequestOpts{",
      "152:    Host:      p.Spec.VirtualHost.Fqdn,",
      "",
      "[Removed Lines]",
      "149:   f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "",
      "[Added Lines]",
      "152:   proxy, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "153:   if !ok {",
      "154:    t.Fatalf(\"The HTTPProxy did not become valid, here are the Valid condition's Errors: %s\", httpProxyErrors(proxy))",
      "155:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "159: func stringPtr(s string) *string {",
      "160:  return &s",
      "161: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169: func testExternalNameServiceLocalhostInvalid(namespace string) {",
      "170:  Specify(\"external name services with localhost are rejected\", func() {",
      "171:   t := f.T()",
      "173:   f.Fixtures.Echo.Deploy(namespace, \"ingress-conformance-echo\")",
      "175:   externalNameService := &corev1.Service{",
      "176:    ObjectMeta: metav1.ObjectMeta{",
      "177:     Namespace: namespace,",
      "178:     Name:      \"external-name-service-localhost\",",
      "179:    },",
      "180:    Spec: corev1.ServiceSpec{",
      "181:     Type: corev1.ServiceTypeExternalName,",
      "184:     ExternalName: \"localhost.localdomain\",",
      "185:     Ports: []corev1.ServicePort{",
      "186:      {",
      "187:       Name: \"http\",",
      "188:       Port: 80,",
      "189:      },",
      "190:     },",
      "191:    },",
      "192:   }",
      "193:   require.NoError(t, f.Client.Create(context.TODO(), externalNameService))",
      "195:   p := &contourv1.HTTPProxy{",
      "196:    ObjectMeta: metav1.ObjectMeta{",
      "197:     Namespace: namespace,",
      "198:     Name:      \"external-name-proxy\",",
      "199:    },",
      "200:    Spec: contourv1.HTTPProxySpec{",
      "201:     VirtualHost: &contourv1.VirtualHost{",
      "202:      Fqdn: \"externalnameservice.projectcontour.io\",",
      "203:     },",
      "204:     Routes: []contourv1.Route{",
      "205:      {",
      "206:       Services: []contourv1.Service{",
      "207:        {",
      "208:         Name: externalNameService.Name,",
      "209:         Port: 80,",
      "210:        },",
      "211:       },",
      "212:       RequestHeadersPolicy: &contourv1.HeadersPolicy{",
      "213:        Set: []contourv1.HeaderValue{",
      "214:         {",
      "215:          Name:  \"Host\",",
      "216:          Value: externalNameService.Spec.ExternalName,",
      "217:         },",
      "218:        },",
      "219:       },",
      "220:      },",
      "221:     },",
      "222:    },",
      "223:   }",
      "224:   _, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
      "225:   require.Falsef(t, ok, \"ExternalName with hostname %s was accepted by Contour.\", externalNameService.Spec.ExternalName)",
      "226:  })",
      "227: }",
      "",
      "---------------"
    ],
    "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go": [
      "File: test/e2e/httpproxy/httpproxy_test.go -> test/e2e/httpproxy/httpproxy_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "20:  \"fmt\"",
      "21:  \"testing\"",
      "23:  certmanagerv1 \"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1\"",
      "24:  certmanagermetav1 \"github.com/jetstack/cert-manager/pkg/apis/meta/v1\"",
      "25:  . \"github.com/onsi/ginkgo\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23:  \"github.com/davecgh/go-spew/spew\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:  f.NamespacedTest(\"017-host-header-rewrite\", testHostHeaderRewrite)",
      "221:  f.NamespacedTest(\"019-local-rate-limiting-vhost\", testLocalRateLimitingVirtualHost)",
      "223:  f.NamespacedTest(\"019-local-rate-limiting-route\", testLocalRateLimitingRoute)",
      "",
      "[Removed Lines]",
      "217:  f.NamespacedTest(\"018-external-name-service-insecure\", testExternalNameServiceInsecure)",
      "219:  f.NamespacedTest(\"018-external-name-service-tls\", testExternalNameServiceTLS)",
      "",
      "[Added Lines]",
      "218:  f.NamespacedTest(\"018-external-name-service-insecure\", func(namespace string) {",
      "219:   Context(\"with ExternalName Services enabled\", func() {",
      "220:    BeforeEach(func() {",
      "221:     contourConfig.EnableExternalNameService = true",
      "222:    })",
      "223:    testExternalNameServiceInsecure(namespace)",
      "224:   })",
      "225:  })",
      "227:  f.NamespacedTest(\"018-external-name-service-tls\", func(namespace string) {",
      "228:   Context(\"with ExternalName Services enabled\", func() {",
      "229:    BeforeEach(func() {",
      "230:     contourConfig.EnableExternalNameService = true",
      "231:    })",
      "232:    testExternalNameServiceTLS(namespace)",
      "233:   })",
      "234:  })",
      "236:  f.NamespacedTest(\"018-external-name-service-localhost\", func(namespace string) {",
      "237:   Context(\"with ExternalName Services enabled\", func() {",
      "238:    BeforeEach(func() {",
      "239:     contourConfig.EnableExternalNameService = true",
      "240:    })",
      "241:    testExternalNameServiceLocalhostInvalid(namespace)",
      "242:   })",
      "243:  })",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "280: func httpProxyValid(proxy *contourv1.HTTPProxy) bool {",
      "282: }",
      "",
      "[Removed Lines]",
      "281:  return proxy != nil && proxy.Status.CurrentStatus == \"valid\"",
      "",
      "[Added Lines]",
      "305:  if proxy == nil {",
      "306:   return false",
      "307:  }",
      "309:  if len(proxy.Status.Conditions) == 0 {",
      "310:   return false",
      "311:  }",
      "313:  cond := proxy.Status.GetConditionFor(\"Valid\")",
      "314:  return cond.Status == \"True\"",
      "316: }",
      "320: func httpProxyErrors(proxy *contourv1.HTTPProxy) string {",
      "321:  cond := proxy.Status.GetConditionFor(\"Valid\")",
      "322:  errors := cond.Errors",
      "323:  if len(errors) > 0 {",
      "324:   return spew.Sdump(errors)",
      "325:  }",
      "327:  return \"\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5f3e6d0ab1d48e64bae46400c85c490b200393a3",
      "candidate_info": {
        "commit_hash": "5f3e6d0ab1d48e64bae46400c85c490b200393a3",
        "repo": "projectcontour/contour",
        "commit_url": "https://github.com/projectcontour/contour/commit/5f3e6d0ab1d48e64bae46400c85c490b200393a3",
        "files": [
          "cmd/contour/serve.go",
          "examples/contour/01-contour-config.yaml",
          "examples/render/contour-gateway.yaml",
          "examples/render/contour.yaml",
          "go.mod",
          "internal/dag/accessors.go",
          "internal/dag/accessors_test.go",
          "internal/dag/builder_test.go",
          "internal/dag/extension_processor.go",
          "internal/dag/gatewayapi_processor.go",
          "internal/dag/httpproxy_processor.go",
          "internal/dag/ingress_processor.go",
          "internal/dag/status_test.go",
          "internal/featuretests/v3/externalname_test.go",
          "internal/featuretests/v3/headerpolicy_test.go",
          "pkg/config/parameters.go",
          "site/content/docs/main/configuration.md",
          "test/e2e/httpproxy/external_name_test.go",
          "test/e2e/httpproxy/httpproxy_test.go"
        ],
        "message": "Merge pull request from GHSA-5ph6-qq5x-7jwc\n\nSigned-off-by: Nick Young <ynick@vmware.com>",
        "before_after_code_files": [
          "cmd/contour/serve.go||cmd/contour/serve.go",
          "go.mod||go.mod",
          "internal/dag/accessors.go||internal/dag/accessors.go",
          "internal/dag/accessors_test.go||internal/dag/accessors_test.go",
          "internal/dag/builder_test.go||internal/dag/builder_test.go",
          "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
          "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go",
          "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
          "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go",
          "internal/dag/status_test.go||internal/dag/status_test.go",
          "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go",
          "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go",
          "pkg/config/parameters.go||pkg/config/parameters.go",
          "test/e2e/httpproxy/external_name_test.go||test/e2e/httpproxy/external_name_test.go",
          "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "cmd/contour/serve.go||cmd/contour/serve.go",
            "go.mod||go.mod",
            "internal/dag/accessors.go||internal/dag/accessors.go",
            "internal/dag/accessors_test.go||internal/dag/accessors_test.go",
            "internal/dag/builder_test.go||internal/dag/builder_test.go",
            "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
            "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go",
            "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
            "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go",
            "internal/dag/status_test.go||internal/dag/status_test.go",
            "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go",
            "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go",
            "pkg/config/parameters.go||pkg/config/parameters.go",
            "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go"
          ],
          "candidate": [
            "cmd/contour/serve.go||cmd/contour/serve.go",
            "go.mod||go.mod",
            "internal/dag/accessors.go||internal/dag/accessors.go",
            "internal/dag/accessors_test.go||internal/dag/accessors_test.go",
            "internal/dag/builder_test.go||internal/dag/builder_test.go",
            "internal/dag/extension_processor.go||internal/dag/extension_processor.go",
            "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go",
            "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go",
            "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go",
            "internal/dag/status_test.go||internal/dag/status_test.go",
            "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go",
            "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go",
            "pkg/config/parameters.go||pkg/config/parameters.go",
            "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/contour/serve.go||cmd/contour/serve.go": [
          "File: cmd/contour/serve.go -> cmd/contour/serve.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:   responseHeadersPolicy.Remove = append(responseHeadersPolicy.Remove, ctx.Config.Policy.ResponseHeadersPolicy.Remove...)",
          "716:  }",
          "719:  dagProcessors := []dag.Processor{",
          "720:   &dag.IngressProcessor{",
          "723:   },",
          "724:   &dag.ExtensionServiceProcessor{",
          "725:    FieldLogger:       log.WithField(\"context\", \"ExtensionServiceProcessor\"),",
          "726:    ClientCertificate: clientCert,",
          "727:   },",
          "728:   &dag.HTTPProxyProcessor{",
          "735:   },",
          "736:  }",
          "738:  if ctx.Config.GatewayConfig != nil && clients.ResourcesExist(k8s.GatewayAPIResources()...) {",
          "739:   dagProcessors = append(dagProcessors, &dag.GatewayAPIProcessor{",
          "741:   })",
          "742:  }",
          "",
          "[Removed Lines]",
          "721:    FieldLogger:       log.WithField(\"context\", \"IngressProcessor\"),",
          "722:    ClientCertificate: clientCert,",
          "729:    DisablePermitInsecure: ctx.Config.DisablePermitInsecure,",
          "730:    FallbackCertificate:   fallbackCert,",
          "731:    DNSLookupFamily:       ctx.Config.Cluster.DNSLookupFamily,",
          "732:    ClientCertificate:     clientCert,",
          "733:    RequestHeadersPolicy:  &requestHeadersPolicy,",
          "734:    ResponseHeadersPolicy: &responseHeadersPolicy,",
          "740:    FieldLogger: log.WithField(\"context\", \"GatewayAPIProcessor\"),",
          "",
          "[Added Lines]",
          "718:  log.Debugf(\"EnableExternalNameService is set to %t\", ctx.Config.EnableExternalNameService)",
          "722:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
          "723:    FieldLogger:               log.WithField(\"context\", \"IngressProcessor\"),",
          "724:    ClientCertificate:         clientCert,",
          "733:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
          "734:    DisablePermitInsecure:     ctx.Config.DisablePermitInsecure,",
          "735:    FallbackCertificate:       fallbackCert,",
          "736:    DNSLookupFamily:           ctx.Config.Cluster.DNSLookupFamily,",
          "737:    ClientCertificate:         clientCert,",
          "738:    RequestHeadersPolicy:      &requestHeadersPolicy,",
          "739:    ResponseHeadersPolicy:     &responseHeadersPolicy,",
          "745:    EnableExternalNameService: ctx.Config.EnableExternalNameService,",
          "746:    FieldLogger:               log.WithField(\"context\", \"GatewayAPIProcessor\"),",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: require (",
          "6:  github.com/ahmetb/gen-crd-api-reference-docs v0.3.0",
          "7:  github.com/bombsimon/logrusr v1.0.0",
          "8:  github.com/envoyproxy/go-control-plane v0.9.9-0.20210111201334-f1f47757da33",
          "9:  github.com/go-logr/logr v0.4.0",
          "10:  github.com/golang/protobuf v1.5.2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  github.com/davecgh/go-spew v1.1.1 // indirect",
          "",
          "---------------"
        ],
        "internal/dag/accessors.go||internal/dag/accessors.go": [
          "File: internal/dag/accessors.go -> internal/dag/accessors.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:  svc, svcPort, err := cache.LookupService(meta, port)",
          "56:  if err != nil {",
          "57:   return nil, err",
          "58:  }",
          "60:  if dagSvc := dag.GetService(k8s.NamespacedNameOf(svc), svcPort.Port); dagSvc != nil {",
          "61:   return dagSvc, nil",
          "62:  }",
          "",
          "[Removed Lines]",
          "54: func (dag *DAG) EnsureService(meta types.NamespacedName, port intstr.IntOrString, cache *KubernetesCache) (*Service, error) {",
          "",
          "[Added Lines]",
          "54: func (dag *DAG) EnsureService(meta types.NamespacedName, port intstr.IntOrString, cache *KubernetesCache, enableExternalNameSvc bool) (*Service, error) {",
          "60:  err = validateExternalName(svc, enableExternalNameSvc)",
          "61:  if err != nil {",
          "62:   return nil, err",
          "63:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:  return dagSvc, nil",
          "79: }",
          "81: func upstreamProtocol(svc *v1.Service, port v1.ServicePort) string {",
          "82:  up := annotation.ParseUpstreamProtocols(svc.Annotations)",
          "83:  protocol := up[port.Name]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: func validateExternalName(svc *v1.Service, enableExternalNameSvc bool) error {",
          "89:  en := externalName(svc)",
          "90:  if en == \"\" {",
          "91:   return nil",
          "92:  }",
          "95:  if !enableExternalNameSvc {",
          "96:   return fmt.Errorf(\"%s/%s is an ExternalName service, these are not currently enabled. See the config.enableExternalNameService config file setting.\", svc.Namespace, svc.Name)",
          "97:  }",
          "104:  localhostNames := map[string]struct{}{",
          "105:   \"localhost\":               {},",
          "106:   \"localhost.localdomain\":   {},",
          "107:   \"local.projectcontour.io\": {},",
          "108:  }",
          "110:  _, localhost := localhostNames[en]",
          "111:  if localhost {",
          "112:   return fmt.Errorf(\"%s/%s is an ExternalName service that points to localhost, this is not allowed.\", svc.Namespace, svc.Name)",
          "113:  }",
          "115:  return nil",
          "116: }",
          "",
          "---------------"
        ],
        "internal/dag/accessors_test.go||internal/dag/accessors_test.go": [
          "File: internal/dag/accessors_test.go -> internal/dag/accessors_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:    }},",
          "41:   },",
          "42:  }",
          "43:  services := map[types.NamespacedName]*v1.Service{",
          "45:  }",
          "47:  tests := map[string]struct {",
          "48:   types.NamespacedName",
          "52:  }{",
          "53:   \"lookup service by port number\": {",
          "54:    NamespacedName: types.NamespacedName{Name: \"service1\", Namespace: \"default\"},",
          "",
          "[Removed Lines]",
          "44:   {Name: \"service1\", Namespace: \"default\"}: s1,",
          "49:   port    intstr.IntOrString",
          "50:   want    *Service",
          "51:   wantErr error",
          "",
          "[Added Lines]",
          "44:  externalNameValid := &v1.Service{",
          "45:   ObjectMeta: metav1.ObjectMeta{",
          "46:    Name:      \"externalnamevalid\",",
          "47:    Namespace: \"default\",",
          "48:   },",
          "49:   Spec: v1.ServiceSpec{",
          "50:    Type:         v1.ServiceTypeExternalName,",
          "51:    ExternalName: \"external.projectcontour.io\",",
          "52:    Ports: []v1.ServicePort{{",
          "53:     Name:       \"http\",",
          "54:     Protocol:   \"TCP\",",
          "55:     Port:       80,",
          "56:     TargetPort: intstr.FromInt(80),",
          "57:    }},",
          "58:   },",
          "59:  }",
          "61:  externalNameLocalhost := &v1.Service{",
          "62:   ObjectMeta: metav1.ObjectMeta{",
          "63:    Name:      \"externalnamelocalhost\",",
          "64:    Namespace: \"default\",",
          "65:   },",
          "66:   Spec: v1.ServiceSpec{",
          "67:    Type:         v1.ServiceTypeExternalName,",
          "68:    ExternalName: \"localhost\",",
          "69:    Ports: []v1.ServicePort{{",
          "70:     Name:       \"http\",",
          "71:     Protocol:   \"TCP\",",
          "72:     Port:       80,",
          "73:     TargetPort: intstr.FromInt(80),",
          "74:    }},",
          "75:   },",
          "76:  }",
          "79:   {Name: \"service1\", Namespace: \"default\"}:              s1,",
          "80:   {Name: \"externalnamevalid\", Namespace: \"default\"}:     externalNameValid,",
          "81:   {Name: \"externalnamelocalhost\", Namespace: \"default\"}: externalNameLocalhost,",
          "86:   port                  intstr.IntOrString",
          "87:   enableExternalNameSvc bool",
          "88:   want                  *Service",
          "89:   wantErr               error",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:    port:           intstr.FromString(\"9999\"),",
          "81:    wantErr:        errors.New(`port \"9999\" on service \"default/service1\" not matched`),",
          "82:   },",
          "83:  }",
          "85:  for name, tc := range tests {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:   \"When ExternalName Services are not disabled no error is returned\": {",
          "122:    NamespacedName: types.NamespacedName{Name: \"externalnamevalid\", Namespace: \"default\"},",
          "123:    port:           intstr.FromString(\"80\"),",
          "124:    want: &Service{",
          "125:     Weighted: WeightedService{",
          "126:      Weight:           1,",
          "127:      ServiceName:      \"externalnamevalid\",",
          "128:      ServiceNamespace: \"default\",",
          "129:      ServicePort: v1.ServicePort{",
          "130:       Name:       \"http\",",
          "131:       Protocol:   \"TCP\",",
          "132:       Port:       80,",
          "133:       TargetPort: intstr.FromInt(80),",
          "134:      },",
          "135:     },",
          "136:     ExternalName: \"external.projectcontour.io\",",
          "137:    },",
          "138:    enableExternalNameSvc: true,",
          "139:   },",
          "140:   \"When ExternalName Services are disabled an error is returned\": {",
          "141:    NamespacedName: types.NamespacedName{Name: \"externalnamevalid\", Namespace: \"default\"},",
          "142:    port:           intstr.FromString(\"80\"),",
          "143:    wantErr:        errors.New(`default/externalnamevalid is an ExternalName service, these are not currently enabled. See the config.enableExternalNameService config file setting.`),",
          "144:   },",
          "145:   \"When ExternalName Services are enabled but a localhost ExternalName is used an error is returned\": {",
          "146:    NamespacedName:        types.NamespacedName{Name: \"externalnamelocalhost\", Namespace: \"default\"},",
          "147:    port:                  intstr.FromString(\"80\"),",
          "148:    wantErr:               errors.New(`default/externalnamelocalhost is an ExternalName service that points to localhost, this is not allowed.`),",
          "149:    enableExternalNameSvc: true,",
          "150:   },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:    var dag DAG",
          "97:    assert.Equal(t, tc.want, got)",
          "98:    assert.Equal(t, tc.wantErr, gotErr)",
          "99:   })",
          "",
          "[Removed Lines]",
          "96:    got, gotErr := dag.EnsureService(tc.NamespacedName, tc.port, &b.Source)",
          "",
          "[Added Lines]",
          "164:    got, gotErr := dag.EnsureService(tc.NamespacedName, tc.port, &b.Source, tc.enableExternalNameSvc)",
          "",
          "---------------"
        ],
        "internal/dag/builder_test.go||internal/dag/builder_test.go": [
          "File: internal/dag/builder_test.go -> internal/dag/builder_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6536:   },",
          "6537:  }",
          "6539:  proxyExternalNameService := &contour_api_v1.HTTPProxy{",
          "6540:   ObjectMeta: metav1.ObjectMeta{",
          "6541:    Name:      \"example-com\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6539:  ingressExternalNameService := &networking_v1.Ingress{",
          "6540:   ObjectMeta: metav1.ObjectMeta{",
          "6541:    Name:      \"externalname\",",
          "6542:    Namespace: \"default\",",
          "6543:   },",
          "6544:   Spec: networking_v1.IngressSpec{",
          "6545:    Rules: []networking_v1.IngressRule{{",
          "6546:     Host: \"example.com\",",
          "6547:     IngressRuleValue: networking_v1.IngressRuleValue{",
          "6548:      HTTP: &networking_v1.HTTPIngressRuleValue{",
          "6549:       Paths: []networking_v1.HTTPIngressPath{{",
          "6550:        Backend: *backendv1(s14.GetName(), intstr.FromInt(80)),",
          "6551:       }},",
          "6552:      },",
          "6553:     },",
          "6554:    }},",
          "6555:   },",
          "6556:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6582:  tests := map[string]struct {",
          "6583:   objs                         []interface{}",
          "6584:   disablePermitInsecure        bool",
          "6585:   fallbackCertificateName      string",
          "6586:   fallbackCertificateNamespace string",
          "6587:   want                         []Vertex",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6604:   enableExternalNameSvc        bool",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8980:     },",
          "8981:    ),",
          "8982:   },",
          "8983:   \"insert proxy with externalName service\": {",
          "8984:    objs: []interface{}{",
          "8985:     proxyExternalNameService,",
          "8986:     s14,",
          "8987:    },",
          "8988:    want: listeners(",
          "8989:     &Listener{",
          "8990:      Port: 80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9003:   \"insert ingress with externalName service\": {",
          "9004:    objs: []interface{}{",
          "9005:     ingressExternalNameService,",
          "9006:     s14,",
          "9007:    },",
          "9008:    enableExternalNameSvc: true,",
          "9009:    want: listeners(",
          "9010:     &Listener{",
          "9011:      Port: 80,",
          "9012:      VirtualHosts: virtualhosts(",
          "9013:       virtualhost(\"example.com\", &Route{",
          "9014:        PathMatchCondition: prefixString(\"/\"),",
          "9015:        Clusters: []*Cluster{{",
          "9016:         Upstream: &Service{",
          "9017:          ExternalName: \"externalservice.io\",",
          "9018:          Weighted: WeightedService{",
          "9019:           Weight:           1,",
          "9020:           ServiceName:      s14.Name,",
          "9021:           ServiceNamespace: s14.Namespace,",
          "9022:           ServicePort:      s14.Spec.Ports[0],",
          "9023:          },",
          "9024:         },",
          "9025:        }},",
          "9026:       }),",
          "9027:      ),",
          "9028:     },",
          "9029:    ),",
          "9030:   },",
          "9031:   \"insert ingress with externalName service, but externalName services disabled\": {",
          "9032:    objs: []interface{}{",
          "9033:     ingressExternalNameService,",
          "9034:     s14,",
          "9035:    },",
          "9036:    enableExternalNameSvc: false,",
          "9037:    want:                  listeners(),",
          "9038:   },",
          "9044:    enableExternalNameSvc: true,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9014:     s14,",
          "9015:     sec1,",
          "9016:    },",
          "9017:    want: listeners(",
          "9018:     &Listener{",
          "9019:      Port: 443,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9074:    enableExternalNameSvc: true,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9073:     proxyReplaceHostHeaderRoute,",
          "9074:     s14,",
          "9075:    },",
          "9076:    want: listeners(",
          "9077:     &Listener{",
          "9078:      Port: 80,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9134:    enableExternalNameSvc: true,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9111:     proxyReplaceHostHeaderService,",
          "9112:     s14,",
          "9113:    },",
          "9115:   },",
          "9116:   \"insert proxy with response header policy - route - host header\": {",
          "9117:    objs: []interface{}{",
          "",
          "[Removed Lines]",
          "9114:    want: listeners(),",
          "",
          "[Added Lines]",
          "9173:    enableExternalNameSvc: true,",
          "9174:    want:                  listeners(),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9754:     },",
          "9755:     Processors: []Processor{",
          "9756:      &IngressProcessor{",
          "9758:      },",
          "9759:      &HTTPProxyProcessor{",
          "9761:       FallbackCertificate: &types.NamespacedName{",
          "9762:        Name:      tc.fallbackCertificateName,",
          "9763:        Namespace: tc.fallbackCertificateNamespace,",
          "",
          "[Removed Lines]",
          "9757:       FieldLogger: fixture.NewTestLogger(t),",
          "9760:       DisablePermitInsecure: tc.disablePermitInsecure,",
          "",
          "[Added Lines]",
          "9817:       FieldLogger:               fixture.NewTestLogger(t),",
          "9818:       EnableExternalNameService: tc.enableExternalNameSvc,",
          "9821:       EnableExternalNameService: tc.enableExternalNameSvc,",
          "9822:       DisablePermitInsecure:     tc.disablePermitInsecure,",
          "",
          "---------------"
        ],
        "internal/dag/extension_processor.go||internal/dag/extension_processor.go": [
          "File: internal/dag/extension_processor.go -> internal/dag/extension_processor.go"
        ],
        "internal/dag/gatewayapi_processor.go||internal/dag/gatewayapi_processor.go": [
          "File: internal/dag/gatewayapi_processor.go -> internal/dag/gatewayapi_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  dag    *DAG",
          "49:  source *KubernetesCache",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:  EnableExternalNameService bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "743:  meta := types.NamespacedName{Name: *serviceName, Namespace: namespace}",
          "747:  if err != nil {",
          "749:  }",
          "751:  return service, nil",
          "",
          "[Removed Lines]",
          "746:  service, err := p.dag.EnsureService(meta, intstr.FromInt(int(*port)), p.source)",
          "748:   return nil, fmt.Errorf(\"service %q does not exist\", meta.Name)",
          "",
          "[Added Lines]",
          "751:  service, err := p.dag.EnsureService(meta, intstr.FromInt(int(*port)), p.source, p.EnableExternalNameService)",
          "753:   return nil, fmt.Errorf(\"service %q is invalid: %s\", meta.Name, err)",
          "",
          "---------------"
        ],
        "internal/dag/httpproxy_processor.go||internal/dag/httpproxy_processor.go": [
          "File: internal/dag/httpproxy_processor.go -> internal/dag/httpproxy_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  FallbackCertificate *types.NamespacedName",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:  EnableExternalNameService bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:     return nil",
          "564:    }",
          "565:    m := types.NamespacedName{Name: service.Name, Namespace: proxy.Namespace}",
          "567:    if err != nil {",
          "568:     validCond.AddErrorf(contour_api_v1.ConditionTypeServiceError, \"ServiceUnresolvedReference\",",
          "569:      \"Spec.Routes unresolved service reference: %s\", err)",
          "",
          "[Removed Lines]",
          "566:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
          "",
          "[Added Lines]",
          "571:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source, p.EnableExternalNameService)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "688:   var proxy TCPProxy",
          "689:   for _, service := range httpproxy.Spec.TCPProxy.Services {",
          "690:    m := types.NamespacedName{Name: service.Name, Namespace: httpproxy.Namespace}",
          "692:    if err != nil {",
          "694:      \"Spec.TCPProxy unresolved service reference: %s\", err)",
          "695:     return false",
          "696:    }",
          "",
          "[Removed Lines]",
          "691:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source)",
          "693:     validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\",",
          "",
          "[Added Lines]",
          "696:    s, err := p.dag.EnsureService(m, intstr.FromInt(service.Port), p.source, p.EnableExternalNameService)",
          "698:     validCond.AddErrorf(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\",",
          "",
          "---------------"
        ],
        "internal/dag/ingress_processor.go||internal/dag/ingress_processor.go": [
          "File: internal/dag/ingress_processor.go -> internal/dag/ingress_processor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  ClientCertificate *types.NamespacedName",
          "40: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:  EnableExternalNameService bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:    port = intstr.FromInt(int(be.Service.Port.Number))",
          "145:   }",
          "148:   if err != nil {",
          "149:    p.WithError(err).",
          "150:     WithField(\"name\", ing.GetName()).",
          "",
          "[Removed Lines]",
          "147:   s, err := p.dag.EnsureService(m, port, p.source)",
          "",
          "[Added Lines]",
          "152:   s, err := p.dag.EnsureService(m, port, p.source, p.EnableExternalNameService)",
          "",
          "---------------"
        ],
        "internal/dag/status_test.go||internal/dag/status_test.go": [
          "File: internal/dag/status_test.go -> internal/dag/status_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1770:   objs: []interface{}{proxyTCPInvalidMissingService},",
          "1771:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1772:    {Name: proxyTCPInvalidMissingService.Name, Namespace: proxyTCPInvalidMissingService.Namespace}: fixture.NewValidCondition().",
          "1774:   },",
          "1775:  })",
          "",
          "[Removed Lines]",
          "1773:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
          "",
          "[Added Lines]",
          "1773:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\", `Spec.TCPProxy unresolved service reference: service \"roots/not-found\" not found`),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1799:   objs: []interface{}{proxyTCPInvalidPortNotMatched, fixture.ServiceRootsKuard},",
          "1800:   want: map[types.NamespacedName]contour_api_v1.DetailedCondition{",
          "1801:    {Name: proxyTCPInvalidPortNotMatched.Name, Namespace: proxyTCPInvalidPortNotMatched.Namespace}: fixture.NewValidCondition().",
          "1803:   },",
          "1804:  })",
          "",
          "[Removed Lines]",
          "1802:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"UnresolvedServiceRef\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
          "",
          "[Added Lines]",
          "1802:     WithError(contour_api_v1.ConditionTypeTCPProxyError, \"ServiceUnresolvedReference\", `Spec.TCPProxy unresolved service reference: port \"9999\" on service \"roots/kuard\" not matched`),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2967:      Type:    string(status.ConditionResolvedRefs),",
          "2968:      Status:  contour_api_v1.ConditionFalse,",
          "2969:      Reason:  string(status.ReasonDegraded),",
          "2971:     },",
          "2972:     gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "2973:      Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "",
          "[Removed Lines]",
          "2970:      Message: \"service \\\"invalid-one\\\" does not exist, service \\\"invalid-two\\\" does not exist\",",
          "",
          "[Added Lines]",
          "2970:      Message: \"service \\\"invalid-one\\\" is invalid: service \\\"default/invalid-one\\\" not found, service \\\"invalid-two\\\" is invalid: service \\\"default/invalid-two\\\" not found\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3758:       Type:    string(status.ConditionResolvedRefs),",
          "3759:       Status:  contour_api_v1.ConditionFalse,",
          "3760:       Reason:  string(status.ReasonDegraded),",
          "3762:      },",
          "3763:      gatewayapi_v1alpha1.ConditionRouteAdmitted: {",
          "3764:       Type:    string(gatewayapi_v1alpha1.ConditionRouteAdmitted),",
          "",
          "[Removed Lines]",
          "3761:       Message: \"service \\\"invalid-one\\\" does not exist, service \\\"invalid-two\\\" does not exist\",",
          "",
          "[Added Lines]",
          "3761:       Message: \"service \\\"invalid-one\\\" is invalid: service \\\"default/invalid-one\\\" not found, service \\\"invalid-two\\\" is invalid: service \\\"default/invalid-two\\\" not found\",",
          "",
          "---------------"
        ],
        "internal/featuretests/v3/externalname_test.go||internal/featuretests/v3/externalname_test.go": [
          "File: internal/featuretests/v3/externalname_test.go -> internal/featuretests/v3/externalname_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import (",
          "17:  \"testing\"",
          "19:  \"github.com/projectcontour/contour/internal/featuretests\"",
          "21:  envoy_cluster_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/cluster/v3\"",
          "22:  envoy_route_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  \"github.com/projectcontour/contour/internal/contour\"",
          "20:  \"github.com/projectcontour/contour/internal/dag\"",
          "22:  \"github.com/sirupsen/logrus\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: func TestExternalNameService(t *testing.T) {",
          "41:  defer done()",
          "43:  s1 := fixture.NewService(\"kuard\").",
          "",
          "[Removed Lines]",
          "40:  rh, c, done := setup(t)",
          "",
          "[Added Lines]",
          "43:  rh, c, done := setup(t, enableExternalNameService(t))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "317:   ),",
          "318:  })",
          "319: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324: func enableExternalNameService(t *testing.T) func(eh *contour.EventHandler) {",
          "325:  return func(eh *contour.EventHandler) {",
          "327:   log := fixture.NewTestLogger(t)",
          "328:   log.SetLevel(logrus.DebugLevel)",
          "330:   eh.Builder.Processors = []dag.Processor{",
          "331:    &dag.IngressProcessor{",
          "332:     EnableExternalNameService: true,",
          "333:     FieldLogger:               log.WithField(\"context\", \"IngressProcessor\"),",
          "334:    },",
          "335:    &dag.HTTPProxyProcessor{",
          "336:     EnableExternalNameService: true,",
          "337:    },",
          "338:    &dag.ExtensionServiceProcessor{",
          "339:     FieldLogger: log.WithField(\"context\", \"ExtensionServiceProcessor\"),",
          "340:    },",
          "341:    &dag.ListenerProcessor{},",
          "342:   }",
          "343:  }",
          "344: }",
          "",
          "---------------"
        ],
        "internal/featuretests/v3/headerpolicy_test.go||internal/featuretests/v3/headerpolicy_test.go": [
          "File: internal/featuretests/v3/headerpolicy_test.go -> internal/featuretests/v3/headerpolicy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: )",
          "32: func TestHeaderPolicy_ReplaceHeader_HTTProxy(t *testing.T) {",
          "34:  defer done()",
          "36:  rh.OnAdd(fixture.NewService(\"svc1\").",
          "",
          "[Removed Lines]",
          "33:  rh, c, done := setup(t)",
          "",
          "[Added Lines]",
          "36:  rh, c, done := setup(t, enableExternalNameService(t))",
          "",
          "---------------"
        ],
        "pkg/config/parameters.go||pkg/config/parameters.go": [
          "File: pkg/config/parameters.go -> pkg/config/parameters.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "537:  DisableAllowChunkedLength bool `yaml:\"disableAllowChunkedLength,omitempty\"`",
          "540:  LeaderElection LeaderElectionParameters `yaml:\"leaderelection,omitempty\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:  EnableExternalNameService bool `yaml:\"enableExternalNameService,omitempty\"`",
          "",
          "---------------"
        ],
        "test/e2e/httpproxy/external_name_test.go||test/e2e/httpproxy/external_name_test.go": [
          "File: test/e2e/httpproxy/external_name_test.go -> test/e2e/httpproxy/external_name_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     },",
          "80:    },",
          "81:   }",
          "84:   res, ok := f.HTTP.RequestUntil(&e2e.HTTPRequestOpts{",
          "85:    Host:      p.Spec.VirtualHost.Fqdn,",
          "",
          "[Removed Lines]",
          "82:   f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
          "",
          "[Added Lines]",
          "82:   proxy, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
          "83:   if !ok {",
          "84:    t.Fatalf(\"The HTTPProxy did not become valid, here are the Valid condition's Errors: %s\", httpProxyErrors(proxy))",
          "85:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     },",
          "147:    },",
          "148:   }",
          "151:   res, ok := f.HTTP.RequestUntil(&e2e.HTTPRequestOpts{",
          "152:    Host:      p.Spec.VirtualHost.Fqdn,",
          "",
          "[Removed Lines]",
          "149:   f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
          "",
          "[Added Lines]",
          "152:   proxy, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
          "153:   if !ok {",
          "154:    t.Fatalf(\"The HTTPProxy did not become valid, here are the Valid condition's Errors: %s\", httpProxyErrors(proxy))",
          "155:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159: func stringPtr(s string) *string {",
          "160:  return &s",
          "161: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: func testExternalNameServiceLocalhostInvalid(namespace string) {",
          "170:  Specify(\"external name services with localhost are rejected\", func() {",
          "171:   t := f.T()",
          "173:   f.Fixtures.Echo.Deploy(namespace, \"ingress-conformance-echo\")",
          "175:   externalNameService := &corev1.Service{",
          "176:    ObjectMeta: metav1.ObjectMeta{",
          "177:     Namespace: namespace,",
          "178:     Name:      \"external-name-service-localhost\",",
          "179:    },",
          "180:    Spec: corev1.ServiceSpec{",
          "181:     Type: corev1.ServiceTypeExternalName,",
          "184:     ExternalName: \"localhost.localdomain\",",
          "185:     Ports: []corev1.ServicePort{",
          "186:      {",
          "187:       Name: \"http\",",
          "188:       Port: 80,",
          "189:      },",
          "190:     },",
          "191:    },",
          "192:   }",
          "193:   require.NoError(t, f.Client.Create(context.TODO(), externalNameService))",
          "195:   p := &contourv1.HTTPProxy{",
          "196:    ObjectMeta: metav1.ObjectMeta{",
          "197:     Namespace: namespace,",
          "198:     Name:      \"external-name-proxy\",",
          "199:    },",
          "200:    Spec: contourv1.HTTPProxySpec{",
          "201:     VirtualHost: &contourv1.VirtualHost{",
          "202:      Fqdn: \"externalnameservice.projectcontour.io\",",
          "203:     },",
          "204:     Routes: []contourv1.Route{",
          "205:      {",
          "206:       Services: []contourv1.Service{",
          "207:        {",
          "208:         Name: externalNameService.Name,",
          "209:         Port: 80,",
          "210:        },",
          "211:       },",
          "212:       RequestHeadersPolicy: &contourv1.HeadersPolicy{",
          "213:        Set: []contourv1.HeaderValue{",
          "214:         {",
          "215:          Name:  \"Host\",",
          "216:          Value: externalNameService.Spec.ExternalName,",
          "217:         },",
          "218:        },",
          "219:       },",
          "220:      },",
          "221:     },",
          "222:    },",
          "223:   }",
          "224:   _, ok := f.CreateHTTPProxyAndWaitFor(p, httpProxyValid)",
          "225:   require.Falsef(t, ok, \"ExternalName with hostname %s was accepted by Contour.\", externalNameService.Spec.ExternalName)",
          "226:  })",
          "227: }",
          "",
          "---------------"
        ],
        "test/e2e/httpproxy/httpproxy_test.go||test/e2e/httpproxy/httpproxy_test.go": [
          "File: test/e2e/httpproxy/httpproxy_test.go -> test/e2e/httpproxy/httpproxy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \"fmt\"",
          "21:  \"testing\"",
          "23:  certmanagerv1 \"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1\"",
          "24:  certmanagermetav1 \"github.com/jetstack/cert-manager/pkg/apis/meta/v1\"",
          "25:  . \"github.com/onsi/ginkgo\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:  \"github.com/davecgh/go-spew/spew\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:  f.NamespacedTest(\"httpproxy-host-header-rewrite\", testHostHeaderRewrite)",
          "221:  f.NamespacedTest(\"httpproxy-local-rate-limiting-vhost\", testLocalRateLimitingVirtualHost)",
          "223:  f.NamespacedTest(\"httpproxy-local-rate-limiting-route\", testLocalRateLimitingRoute)",
          "",
          "[Removed Lines]",
          "217:  f.NamespacedTest(\"httpproxy-external-name-service-insecure\", testExternalNameServiceInsecure)",
          "219:  f.NamespacedTest(\"httpproxy-external-name-service-tls\", testExternalNameServiceTLS)",
          "",
          "[Added Lines]",
          "218:  f.NamespacedTest(\"httpproxy-external-name-service-insecure\", func(namespace string) {",
          "219:   Context(\"with ExternalName Services enabled\", func() {",
          "220:    BeforeEach(func() {",
          "221:     contourConfig.EnableExternalNameService = true",
          "222:    })",
          "223:    testExternalNameServiceInsecure(namespace)",
          "224:   })",
          "225:  })",
          "227:  f.NamespacedTest(\"httpproxy-external-name-service-tls\", func(namespace string) {",
          "228:   Context(\"with ExternalName Services enabled\", func() {",
          "229:    BeforeEach(func() {",
          "230:     contourConfig.EnableExternalNameService = true",
          "231:    })",
          "232:    testExternalNameServiceTLS(namespace)",
          "233:   })",
          "234:  })",
          "236:  f.NamespacedTest(\"httpproxy-external-name-service-localhost\", func(namespace string) {",
          "237:   Context(\"with ExternalName Services enabled\", func() {",
          "238:    BeforeEach(func() {",
          "239:     contourConfig.EnableExternalNameService = true",
          "240:    })",
          "241:    testExternalNameServiceLocalhostInvalid(namespace)",
          "242:   })",
          "243:  })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280: func httpProxyValid(proxy *contourv1.HTTPProxy) bool {",
          "282: }",
          "",
          "[Removed Lines]",
          "281:  return proxy != nil && proxy.Status.CurrentStatus == \"valid\"",
          "",
          "[Added Lines]",
          "305:  if proxy == nil {",
          "306:   return false",
          "307:  }",
          "309:  if len(proxy.Status.Conditions) == 0 {",
          "310:   return false",
          "311:  }",
          "313:  cond := proxy.Status.GetConditionFor(\"Valid\")",
          "314:  if cond.Status == \"True\" {",
          "315:   return true",
          "316:  }",
          "317:  return false",
          "319: }",
          "323: func httpProxyErrors(proxy *contourv1.HTTPProxy) string {",
          "324:  cond := proxy.Status.GetConditionFor(\"Valid\")",
          "325:  errors := cond.Errors",
          "326:  if len(errors) > 0 {",
          "327:   return spew.Sdump(errors)",
          "328:  }",
          "330:  return \"\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}