{
  "cve_id": "CVE-2024-28121",
  "cve_desc": "stimulus_reflex is a system to extend the capabilities of both Rails and Stimulus by intercepting user interactions and passing them to Rails over real-time websockets. In affected versions more methods than expected can be called on reflex instances. Being able to call some of them has security implications. To invoke a reflex a websocket message of the following shape is sent: `\\\"target\\\":\\\"[class_name]#[method_name]\\\",\\\"args\\\":[]`. The server will proceed to instantiate `reflex` using the provided `class_name` as long as it extends `StimulusReflex::Reflex`. It then attempts to call `method_name` on the instance with the provided arguments. This is problematic as `reflex.method method_name` can be more methods that those explicitly specified by the developer in their reflex class. A good example is the instance_variable_set method. This vulnerability has been patched in versions 3.4.2 and 3.5.0.rc4. Users unable to upgrade should: see the backing GHSA advisory for mitigation advice.",
  "repo": "stimulusreflex/stimulus_reflex",
  "patch_hash": "538582d240439aab76066c72335ea92096cd0c7f",
  "patch_info": {
    "commit_hash": "538582d240439aab76066c72335ea92096cd0c7f",
    "repo": "stimulusreflex/stimulus_reflex",
    "commit_url": "https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f",
    "files": [
      "lib/stimulus_reflex/reflex_factory.rb",
      "test/reflex_factory_test.rb",
      "test/test_helper.rb"
    ],
    "message": "Merge pull request from GHSA-f78j-4w3g-4q65\n\n* Validate Reflex `method_name` to  only allow safe reflex method-calls\n\n* Only allow public instance methods\n\n* Allow reflex methods from concerns to be called",
    "before_after_code_files": [
      "lib/stimulus_reflex/reflex_factory.rb||lib/stimulus_reflex/reflex_factory.rb",
      "test/reflex_factory_test.rb||test/reflex_factory_test.rb",
      "test/test_helper.rb||test/test_helper.rb"
    ]
  },
  "patch_diff": {
    "lib/stimulus_reflex/reflex_factory.rb||lib/stimulus_reflex/reflex_factory.rb": [
      "File: lib/stimulus_reflex/reflex_factory.rb -> lib/stimulus_reflex/reflex_factory.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: class StimulusReflex::ReflexFactory",
      "4:   attr_reader :channel, :data",
      "8:   def initialize(channel, data)",
      "9:     @channel = channel",
      "",
      "[Removed Lines]",
      "6:   delegate :reflex_name, to: :data",
      "",
      "[Added Lines]",
      "6:   delegate :reflex_name, :method_name, to: :data",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11:   end",
      "13:   def call",
      "14:     reflex_class.new(channel, reflex_data: data)",
      "15:   end",
      "17:   private",
      "19:   def reflex_class",
      "21:       unless klass.ancestors.include?(StimulusReflex::Reflex)",
      "22:         raise ArgumentError.new(\"#{reflex_name} is not a StimulusReflex::Reflex\")",
      "23:       end",
      "24:     end",
      "25:   end",
      "26: end",
      "",
      "[Removed Lines]",
      "20:     reflex_name.constantize.tap do |klass|",
      "",
      "[Added Lines]",
      "14:     verify_method_name!",
      "20:   def verify_method_name!",
      "21:     return if default_reflex?",
      "23:     argument_error = ArgumentError.new(\"Reflex method '#{method_name}' is not defined on class '#{reflex_name}' or on any of its ancestors\")",
      "25:     if reflex_method.nil?",
      "26:       raise argument_error",
      "27:     end",
      "29:     if !safe_ancestors.include?(reflex_method.owner)",
      "30:       raise argument_error",
      "31:     end",
      "32:   end",
      "35:     @reflex_class ||= reflex_name.constantize.tap do |klass|",
      "42:   def reflex_method",
      "43:     if reflex_class.public_instance_methods.include?(method_name.to_sym)",
      "44:       reflex_class.public_instance_method(method_name)",
      "45:     end",
      "46:   end",
      "48:   def default_reflex?",
      "49:     method_name == \"default_reflex\" && reflex_method.owner == ::StimulusReflex::Reflex",
      "50:   end",
      "52:   def safe_ancestors",
      "53:     # We want to include every class and module up to the `StimulusReflex::Reflex` class,",
      "54:     # but not the StimulusReflex::Reflex itself",
      "55:     reflex_class_index = reflex_class.ancestors.index(StimulusReflex::Reflex) - 1",
      "57:     reflex_class.ancestors.to(reflex_class_index)",
      "58:   end",
      "",
      "---------------"
    ],
    "test/reflex_factory_test.rb||test/reflex_factory_test.rb": [
      "File: test/reflex_factory_test.rb -> test/reflex_factory_test.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # frozen_string_literal: true",
      "3: require_relative \"test_helper\"",
      "5: class StimulusReflex::ReflexFactoryTest < ActionCable::Channel::TestCase",
      "6:   tests StimulusReflex::Channel",
      "8:   test \"reflex class needs to be an ancestor of StimulusReflex::Reflex\" do",
      "9:     exception = assert_raises(NameError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"Object#inspect\"}).call }",
      "10:     assert_equal \"uninitialized constant ObjectReflex\", exception.message",
      "12:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"NoReflex#no_reflex\"}).call }",
      "13:     assert_equal \"NoReflex is not a StimulusReflex::Reflex\", exception.message",
      "15:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"No#no_reflex\"}).call }",
      "16:     assert_equal \"NoReflex is not a StimulusReflex::Reflex\", exception.message",
      "17:   end",
      "19:   test \"doesn't raise if owner of method is ancestor of reflex class and descendant of StimulusReflex::Reflex\" do",
      "20:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(subscribe, {version: StimulusReflex::VERSION, target: \"ApplicationReflex#default_reflex\"}).call }",
      "21:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(subscribe, {version: StimulusReflex::VERSION, target: \"ApplicationReflex#application_reflex\"}).call }",
      "23:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(subscribe, {version: StimulusReflex::VERSION, target: \"PostReflex#default_reflex\"}).call }",
      "24:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(subscribe, {version: StimulusReflex::VERSION, target: \"PostReflex#application_reflex\"}).call }",
      "25:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(subscribe, {version: StimulusReflex::VERSION, target: \"PostReflex#post_reflex\"}).call }",
      "27:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(subscribe, {version: StimulusReflex::VERSION, target: \"CounterReflex#default_reflex\"}).call }",
      "28:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(subscribe, {version: StimulusReflex::VERSION, target: \"CounterReflex#application_reflex\"}).call }",
      "29:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(subscribe, {version: StimulusReflex::VERSION, target: \"CounterReflex#increment\"}).call }",
      "30:   end",
      "32:   test \"raises if method is not owned by a descendant of StimulusReflex::Reflex\" do",
      "33:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"ApplicationReflex#itself\"}).call }",
      "34:     assert_equal \"Reflex method 'itself' is not defined on class 'ApplicationReflex' or on any of its ancestors\", exception.message",
      "36:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"ApplicationReflex#itself\"}).call }",
      "37:     assert_equal \"Reflex method 'itself' is not defined on class 'ApplicationReflex' or on any of its ancestors\", exception.message",
      "39:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"PostReflex#itself\"}).call }",
      "40:     assert_equal \"Reflex method 'itself' is not defined on class 'PostReflex' or on any of its ancestors\", exception.message",
      "42:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"PostReflex#binding\"}).call }",
      "43:     assert_equal \"Reflex method 'binding' is not defined on class 'PostReflex' or on any of its ancestors\", exception.message",
      "45:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"PostReflex#byebug\"}).call }",
      "46:     assert_equal \"Reflex method 'byebug' is not defined on class 'PostReflex' or on any of its ancestors\", exception.message",
      "48:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"PostReflex#debug\"}).call }",
      "49:     assert_equal \"Reflex method 'debug' is not defined on class 'PostReflex' or on any of its ancestors\", exception.message",
      "51:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"ApplicationReflex#post_reflex\"}).call }",
      "52:     assert_equal \"Reflex method 'post_reflex' is not defined on class 'ApplicationReflex' or on any of its ancestors\", exception.message",
      "53:   end",
      "55:   test \"raises if method is a private method\" do",
      "56:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"ApplicationReflex#private_application_reflex\"}).call }",
      "57:     assert_equal \"Reflex method 'private_application_reflex' is not defined on class 'ApplicationReflex' or on any of its ancestors\", exception.message",
      "59:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"PostReflex#private_application_reflex\"}).call }",
      "60:     assert_equal \"Reflex method 'private_application_reflex' is not defined on class 'PostReflex' or on any of its ancestors\", exception.message",
      "62:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"PostReflex#private_post_reflex\"}).call }",
      "63:     assert_equal \"Reflex method 'private_post_reflex' is not defined on class 'PostReflex' or on any of its ancestors\", exception.message",
      "65:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"CounterReflex#private_post_reflex\"}).call }",
      "66:     assert_equal \"Reflex method 'private_post_reflex' is not defined on class 'CounterReflex' or on any of its ancestors\", exception.message",
      "67:   end",
      "69:   test \"safe_ancestors\" do",
      "70:     reflex_factory = StimulusReflex::ReflexFactory.new(subscribe, {target: \"ApplicationReflex#default_reflex\"})",
      "71:     assert_equal [ApplicationReflex, StimulusReflex::CableReadiness], reflex_factory.send(:safe_ancestors)",
      "73:     reflex_factory = StimulusReflex::ReflexFactory.new(subscribe, {target: \"PostReflex#default_reflex\"})",
      "74:     assert_equal [PostReflex, ApplicationReflex, StimulusReflex::CableReadiness], reflex_factory.send(:safe_ancestors)",
      "76:     reflex_factory = StimulusReflex::ReflexFactory.new(subscribe, {target: \"CounterReflex#increment\"})",
      "77:     assert_equal [CounterReflex, CounterConcern, ApplicationReflex, StimulusReflex::CableReadiness], reflex_factory.send(:safe_ancestors)",
      "78:   end",
      "79: end",
      "",
      "---------------"
    ],
    "test/test_helper.rb||test/test_helper.rb": [
      "File: test/test_helper.rb -> test/test_helper.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:   end",
      "51: end",
      "53: module ActionCable",
      "54:   module Channel",
      "55:     class ConnectionStub",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53: class ApplicationReflex < StimulusReflex::Reflex",
      "54:   def application_reflex",
      "55:   end",
      "57:   private",
      "59:   def private_application_reflex",
      "60:   end",
      "61: end",
      "63: class PostReflex < ApplicationReflex",
      "64:   def post_reflex",
      "65:   end",
      "67:   private",
      "69:   def private_post_reflex",
      "70:   end",
      "71: end",
      "73: class NoReflex",
      "74:   def no_reflex",
      "75:   end",
      "76: end",
      "78: module CounterConcern",
      "79:   def increment",
      "80:   end",
      "81: end",
      "83: class CounterReflex < ApplicationReflex",
      "84:   include CounterConcern",
      "85: end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dd140c308ff632b3d1204eba45b4b42bb1cd2f37",
      "candidate_info": {
        "commit_hash": "dd140c308ff632b3d1204eba45b4b42bb1cd2f37",
        "repo": "stimulusreflex/stimulus_reflex",
        "commit_url": "https://github.com/stimulusreflex/stimulus_reflex/commit/dd140c308ff632b3d1204eba45b4b42bb1cd2f37",
        "files": [
          "test/reflex_factory_test.rb"
        ],
        "message": "Fix encoding in `ReflexFactoryTest`",
        "before_after_code_files": [
          "test/reflex_factory_test.rb||test/reflex_factory_test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/reflex_factory_test.rb||test/reflex_factory_test.rb"
          ],
          "candidate": [
            "test/reflex_factory_test.rb||test/reflex_factory_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "test/reflex_factory_test.rb||test/reflex_factory_test.rb": [
          "File: test/reflex_factory_test.rb -> test/reflex_factory_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   test \"reflex class needs to be an ancestor of StimulusReflex::Reflex\" do",
          "9:     exception = assert_raises(NameError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"Object#inspect\"}).call }",
          "12:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(subscribe, {target: \"NoReflex#no_reflex\"}).call }",
          "13:     assert_equal \"NoReflex is not a StimulusReflex::Reflex\", exception.message",
          "",
          "[Removed Lines]",
          "10:     assert_equal \"uninitialized constant ObjectReflex\", exception.message",
          "",
          "[Added Lines]",
          "10:     assert_includes exception.message.force_encoding(\"utf-8\"), \"uninitialized constant ObjectReflex\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d823d7348f9ca42eb6df25574f11974e4f5bc88c",
      "candidate_info": {
        "commit_hash": "d823d7348f9ca42eb6df25574f11974e4f5bc88c",
        "repo": "stimulusreflex/stimulus_reflex",
        "commit_url": "https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c",
        "files": [
          "app/channels/stimulus_reflex/channel.rb",
          "lib/stimulus_reflex.rb",
          "lib/stimulus_reflex/reflex_factory.rb",
          "test/reflex_factory_test.rb",
          "test/test_helper.rb"
        ],
        "message": "Merge pull request from GHSA-f78j-4w3g-4q65",
        "before_after_code_files": [
          "app/channels/stimulus_reflex/channel.rb||app/channels/stimulus_reflex/channel.rb",
          "lib/stimulus_reflex.rb||lib/stimulus_reflex.rb",
          "lib/stimulus_reflex/reflex_factory.rb||lib/stimulus_reflex/reflex_factory.rb",
          "test/reflex_factory_test.rb||test/reflex_factory_test.rb",
          "test/test_helper.rb||test/test_helper.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/stimulus_reflex/reflex_factory.rb||lib/stimulus_reflex/reflex_factory.rb",
            "test/reflex_factory_test.rb||test/reflex_factory_test.rb",
            "test/test_helper.rb||test/test_helper.rb"
          ],
          "candidate": [
            "lib/stimulus_reflex/reflex_factory.rb||lib/stimulus_reflex/reflex_factory.rb",
            "test/reflex_factory_test.rb||test/reflex_factory_test.rb",
            "test/test_helper.rb||test/test_helper.rb"
          ]
        }
      },
      "candidate_diff": {
        "app/channels/stimulus_reflex/channel.rb||app/channels/stimulus_reflex/channel.rb": [
          "File: app/channels/stimulus_reflex/channel.rb -> app/channels/stimulus_reflex/channel.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     selectors = (data[\"selectors\"] || []).select(&:present?)",
          "21:     selectors = data[\"selectors\"] = [\"body\"] if selectors.blank?",
          "22:     target = data[\"target\"].to_s",
          "26:     arguments = (data[\"args\"] || []).map { |arg| object_with_indifferent_access arg }",
          "27:     element = StimulusReflex::Element.new(data)",
          "28:     permanent_attribute_name = data[\"permanentAttributeName\"]",
          "",
          "[Removed Lines]",
          "23:     reflex_name, method_name = target.split(\"#\")",
          "24:     reflex_name = reflex_name.camelize",
          "25:     reflex_name = reflex_name.end_with?(\"Reflex\") ? reflex_name : \"#{reflex_name}Reflex\"",
          "",
          "[Added Lines]",
          "23:     factory = StimulusReflex::ReflexFactory.new(target)",
          "24:     reflex_class = factory.call",
          "25:     method_name = factory.method_name",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     begin",
          "33:       begin",
          "35:         reflex = reflex_class.new(self,",
          "36:           url: url,",
          "37:           element: element,",
          "",
          "[Removed Lines]",
          "34:         reflex_class = reflex_name.constantize.tap { |klass| raise ArgumentError.new(\"#{reflex_name} is not a StimulusReflex::Reflex\") unless is_reflex?(klass) }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:     object",
          "110:   end",
          "116:   def delegate_call_to_reflex(reflex, method_name, arguments = [])",
          "117:     method = reflex.method(method_name)",
          "118:     required_params = method.parameters.select { |(kind, _)| kind == :req }",
          "",
          "[Removed Lines]",
          "112:   def is_reflex?(reflex_class)",
          "113:     reflex_class.ancestors.include? StimulusReflex::Reflex",
          "114:   end",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/stimulus_reflex.rb||lib/stimulus_reflex.rb": [
          "File: lib/stimulus_reflex.rb -> lib/stimulus_reflex.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: require \"stimulus_reflex/configuration\"",
          "14: require \"stimulus_reflex/callbacks\"",
          "15: require \"stimulus_reflex/reflex\"",
          "16: require \"stimulus_reflex/element\"",
          "17: require \"stimulus_reflex/sanity_checker\"",
          "18: require \"stimulus_reflex/broadcasters/broadcaster\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: require \"stimulus_reflex/reflex_factory\"",
          "",
          "---------------"
        ],
        "lib/stimulus_reflex/reflex_factory.rb||lib/stimulus_reflex/reflex_factory.rb": [
          "File: lib/stimulus_reflex/reflex_factory.rb -> lib/stimulus_reflex/reflex_factory.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # frozen_string_literal: true",
          "3: class StimulusReflex::ReflexFactory",
          "4:   attr_reader :reflex_name, :method_name",
          "6:   def initialize(target)",
          "7:     reflex_name, method_name = target.split(\"#\")",
          "8:     reflex_name = reflex_name.camelize",
          "9:     reflex_name = reflex_name.end_with?(\"Reflex\") ? reflex_name : \"#{reflex_name}Reflex\"",
          "11:     @method_name = method_name",
          "12:     @reflex_name = reflex_name",
          "13:   end",
          "15:   def call",
          "16:     verify_method_name!",
          "18:     reflex_class",
          "19:   end",
          "21:   private",
          "23:   def verify_method_name!",
          "24:     return if default_reflex?",
          "26:     argument_error = ArgumentError.new(\"Reflex method '#{method_name}' is not defined on class '#{reflex_name}' or on any of its ancestors\")",
          "28:     if reflex_method.nil?",
          "29:       raise argument_error",
          "30:     end",
          "32:     if !safe_ancestors.include?(reflex_method.owner)",
          "33:       raise argument_error",
          "34:     end",
          "35:   end",
          "37:   def reflex_class",
          "38:     @reflex_class ||= reflex_name.constantize.tap do |klass|",
          "39:       unless klass.ancestors.include?(StimulusReflex::Reflex)",
          "40:         raise ArgumentError.new(\"#{reflex_name} is not a StimulusReflex::Reflex\")",
          "41:       end",
          "42:     end",
          "43:   end",
          "45:   def reflex_method",
          "46:     if reflex_class.public_instance_methods.include?(method_name.to_sym)",
          "47:       reflex_class.public_instance_method(method_name)",
          "48:     end",
          "49:   end",
          "51:   def default_reflex?",
          "52:     method_name == \"default_reflex\" && reflex_method.owner == ::StimulusReflex::Reflex",
          "53:   end",
          "55:   def safe_ancestors",
          "56:     # We want to include every class and module up to the `StimulusReflex::Reflex` class,",
          "57:     # but not the StimulusReflex::Reflex itself",
          "58:     reflex_class_index = reflex_class.ancestors.index(StimulusReflex::Reflex) - 1",
          "60:     reflex_class.ancestors.to(reflex_class_index)",
          "61:   end",
          "62: end",
          "",
          "---------------"
        ],
        "test/reflex_factory_test.rb||test/reflex_factory_test.rb": [
          "File: test/reflex_factory_test.rb -> test/reflex_factory_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # frozen_string_literal: true",
          "3: require_relative \"test_helper\"",
          "5: class StimulusReflex::ReflexFactoryTest < ActionCable::Channel::TestCase",
          "6:   tests StimulusReflex::Channel",
          "8:   test \"reflex class needs to be an ancestor of StimulusReflex::Reflex\" do",
          "9:     exception = assert_raises(NameError) { StimulusReflex::ReflexFactory.new(\"Object#inspect\").call }",
          "10:     assert_equal \"uninitialized constant ObjectReflex Did you mean? ObjectSpace\", exception.message.squish",
          "12:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"NoReflex#no_reflex\").call }",
          "13:     assert_equal \"NoReflex is not a StimulusReflex::Reflex\", exception.message",
          "15:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"No#no_reflex\").call }",
          "16:     assert_equal \"NoReflex is not a StimulusReflex::Reflex\", exception.message",
          "17:   end",
          "19:   test \"doesn't raise if owner of method is ancestor of reflex class and descendant of StimulusReflex::Reflex\" do",
          "20:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(\"ApplicationReflex#default_reflex\").call }",
          "21:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(\"ApplicationReflex#application_reflex\").call }",
          "23:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(\"PostReflex#default_reflex\").call }",
          "24:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(\"PostReflex#application_reflex\").call }",
          "25:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(\"PostReflex#post_reflex\").call }",
          "27:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(\"CounterReflex#default_reflex\").call }",
          "28:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(\"CounterReflex#application_reflex\").call }",
          "29:     assert_nothing_raised { StimulusReflex::ReflexFactory.new(\"CounterReflex#increment\").call }",
          "30:   end",
          "32:   test \"raises if method is not owned by a descendant of StimulusReflex::Reflex\" do",
          "33:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"ApplicationReflex#itself\").call }",
          "34:     assert_equal \"Reflex method 'itself' is not defined on class 'ApplicationReflex' or on any of its ancestors\", exception.message",
          "36:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"ApplicationReflex#itself\").call }",
          "37:     assert_equal \"Reflex method 'itself' is not defined on class 'ApplicationReflex' or on any of its ancestors\", exception.message",
          "39:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"PostReflex#itself\").call }",
          "40:     assert_equal \"Reflex method 'itself' is not defined on class 'PostReflex' or on any of its ancestors\", exception.message",
          "42:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"PostReflex#binding\").call }",
          "43:     assert_equal \"Reflex method 'binding' is not defined on class 'PostReflex' or on any of its ancestors\", exception.message",
          "45:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"PostReflex#byebug\").call }",
          "46:     assert_equal \"Reflex method 'byebug' is not defined on class 'PostReflex' or on any of its ancestors\", exception.message",
          "48:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"PostReflex#debug\").call }",
          "49:     assert_equal \"Reflex method 'debug' is not defined on class 'PostReflex' or on any of its ancestors\", exception.message",
          "51:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"ApplicationReflex#post_reflex\").call }",
          "52:     assert_equal \"Reflex method 'post_reflex' is not defined on class 'ApplicationReflex' or on any of its ancestors\", exception.message",
          "53:   end",
          "55:   test \"raises if method is a private method\" do",
          "56:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"ApplicationReflex#private_application_reflex\").call }",
          "57:     assert_equal \"Reflex method 'private_application_reflex' is not defined on class 'ApplicationReflex' or on any of its ancestors\", exception.message",
          "59:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"PostReflex#private_application_reflex\").call }",
          "60:     assert_equal \"Reflex method 'private_application_reflex' is not defined on class 'PostReflex' or on any of its ancestors\", exception.message",
          "62:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"PostReflex#private_post_reflex\").call }",
          "63:     assert_equal \"Reflex method 'private_post_reflex' is not defined on class 'PostReflex' or on any of its ancestors\", exception.message",
          "65:     exception = assert_raises(ArgumentError) { StimulusReflex::ReflexFactory.new(\"CounterReflex#private_post_reflex\").call }",
          "66:     assert_equal \"Reflex method 'private_post_reflex' is not defined on class 'CounterReflex' or on any of its ancestors\", exception.message",
          "67:   end",
          "69:   test \"safe_ancestors\" do",
          "70:     reflex_factory = StimulusReflex::ReflexFactory.new(\"ApplicationReflex#default_reflex\")",
          "71:     assert_equal [ApplicationReflex], reflex_factory.send(:safe_ancestors)",
          "73:     reflex_factory = StimulusReflex::ReflexFactory.new(\"PostReflex#default_reflex\")",
          "74:     assert_equal [PostReflex, ApplicationReflex], reflex_factory.send(:safe_ancestors)",
          "76:     reflex_factory = StimulusReflex::ReflexFactory.new(\"CounterReflex#increment\")",
          "77:     assert_equal [CounterReflex, CounterConcern, ApplicationReflex], reflex_factory.send(:safe_ancestors)",
          "78:   end",
          "79: end",
          "",
          "---------------"
        ],
        "test/test_helper.rb||test/test_helper.rb": [
          "File: test/test_helper.rb -> test/test_helper.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   end",
          "30: end",
          "32: class ActionDispatch::Request",
          "33:   def session",
          "34:     @session ||= SessionMock.new",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: class ApplicationReflex < StimulusReflex::Reflex",
          "33:   def application_reflex",
          "34:   end",
          "36:   private",
          "38:   def private_application_reflex",
          "39:   end",
          "40: end",
          "42: class PostReflex < ApplicationReflex",
          "43:   def post_reflex",
          "44:   end",
          "46:   private",
          "48:   def private_post_reflex",
          "49:   end",
          "50: end",
          "52: class NoReflex",
          "53:   def no_reflex",
          "54:   end",
          "55: end",
          "57: module CounterConcern",
          "58:   def increment",
          "59:   end",
          "60: end",
          "62: class CounterReflex < ApplicationReflex",
          "63:   include CounterConcern",
          "64: end",
          "",
          "---------------"
        ]
      }
    }
  ]
}