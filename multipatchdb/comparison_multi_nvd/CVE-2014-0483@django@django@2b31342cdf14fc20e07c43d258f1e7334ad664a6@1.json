{
  "cve_id": "CVE-2014-0483",
  "cve_desc": "The administrative interface (contrib.admin) in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3 does not check if a field represents a relationship between models, which allows remote authenticated users to obtain sensitive information via a to_field parameter in a popup action to an admin change form page, as demonstrated by a /admin/auth/user/?pop=1&t=password URI.",
  "repo": "django/django",
  "patch_hash": "2b31342cdf14fc20e07c43d258f1e7334ad664a6",
  "patch_info": {
    "commit_hash": "2b31342cdf14fc20e07c43d258f1e7334ad664a6",
    "repo": "django/django",
    "commit_url": "https://github.com/django/django/commit/2b31342cdf14fc20e07c43d258f1e7334ad664a6",
    "files": [
      "django/contrib/admin/exceptions.py",
      "django/contrib/admin/options.py",
      "django/contrib/admin/views/main.py",
      "docs/ref/exceptions.txt",
      "docs/releases/1.4.14.txt",
      "docs/releases/1.5.9.txt",
      "docs/releases/1.6.6.txt",
      "tests/admin_views/tests.py"
    ],
    "message": "[1.7.x] Prevented data leakage in contrib.admin via query string manipulation.\n\nThis is a security fix. Disclosure following shortly.",
    "before_after_code_files": [
      "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py",
      "django/contrib/admin/options.py||django/contrib/admin/options.py",
      "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py",
      "tests/admin_views/tests.py||tests/admin_views/tests.py"
    ]
  },
  "patch_diff": {
    "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py": [
      "File: django/contrib/admin/exceptions.py -> django/contrib/admin/exceptions.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: class DisallowedModelAdminLookup(SuspiciousOperation):",
      "5:     \"\"\"Invalid filter was passed to admin view via URL querystring\"\"\"",
      "6:     pass",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9: class DisallowedModelAdminToField(SuspiciousOperation):",
      "10:     \"\"\"Invalid to_field was passed to admin view via URL query string\"\"\"",
      "11:     pass",
      "",
      "---------------"
    ],
    "django/contrib/admin/options.py||django/contrib/admin/options.py": [
      "File: django/contrib/admin/options.py -> django/contrib/admin/options.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: from django.contrib.admin import validation",
      "12: from django.contrib.admin.checks import (BaseModelAdminChecks, ModelAdminChecks,",
      "13:     InlineModelAdminChecks)",
      "14: from django.contrib.admin.utils import (quote, unquote, flatten_fieldsets,",
      "15:     get_deleted_objects, model_format_dict, NestedObjects,",
      "16:     lookup_needs_distinct)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: from django.contrib.admin.exceptions import DisallowedModelAdminToField",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "434:                 valid_lookups.append(filter_item)",
      "435:         return clean_lookup in valid_lookups",
      "437:     def has_add_permission(self, request):",
      "438:         \"\"\"",
      "439:         Returns True if the given request has permission to add an object.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "438:     def to_field_allowed(self, request, to_field):",
      "439:         opts = self.model._meta",
      "441:         try:",
      "442:             field = opts.get_field(to_field)",
      "443:         except FieldDoesNotExist:",
      "444:             return False",
      "446:         # Make sure at least one of the models registered for this site",
      "447:         # references this field.",
      "448:         registered_models = self.admin_site._registry",
      "449:         for related_object in opts.get_all_related_objects():",
      "450:             if (related_object.model in registered_models and",
      "451:                     field in related_object.field.foreign_related_fields):",
      "452:                 return True",
      "454:         return False",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1325:     @transaction.atomic",
      "1326:     def changeform_view(self, request, object_id=None, form_url='', extra_context=None):",
      "1328:         model = self.model",
      "1329:         opts = model._meta",
      "1330:         add = object_id is None",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1347:         to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))",
      "1348:         if to_field and not self.to_field_allowed(request, to_field):",
      "1349:             raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1397:             original=obj,",
      "1398:             is_popup=(IS_POPUP_VAR in request.POST or",
      "1399:                       IS_POPUP_VAR in request.GET),",
      "1402:             media=media,",
      "1403:             inline_admin_formsets=inline_formsets,",
      "1404:             errors=helpers.AdminErrorList(form, formsets),",
      "",
      "[Removed Lines]",
      "1400:             to_field=request.POST.get(TO_FIELD_VAR,",
      "1401:                                       request.GET.get(TO_FIELD_VAR)),",
      "",
      "[Added Lines]",
      "1423:             to_field=to_field,",
      "",
      "---------------"
    ],
    "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py": [
      "File: django/contrib/admin/views/main.py -> django/contrib/admin/views/main.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: from django.utils.http import urlencode",
      "16: from django.contrib.admin import FieldListFilter",
      "18: from django.contrib.admin.options import IncorrectLookupParameters, IS_POPUP_VAR, TO_FIELD_VAR",
      "19: from django.contrib.admin.utils import (quote, get_fields_from_path,",
      "20:     lookup_needs_distinct, prepare_lookup_value)",
      "",
      "[Removed Lines]",
      "17: from django.contrib.admin.exceptions import DisallowedModelAdminLookup",
      "",
      "[Added Lines]",
      "17: from django.contrib.admin.exceptions import (",
      "18:     DisallowedModelAdminLookup, DisallowedModelAdminToField,",
      "19: )",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89:             self.page_num = 0",
      "90:         self.show_all = ALL_VAR in request.GET",
      "91:         self.is_popup = _is_changelist_popup(request)",
      "93:         self.params = dict(request.GET.items())",
      "94:         if PAGE_VAR in self.params:",
      "95:             del self.params[PAGE_VAR]",
      "",
      "[Removed Lines]",
      "92:         self.to_field = request.GET.get(TO_FIELD_VAR)",
      "",
      "[Added Lines]",
      "94:         to_field = request.GET.get(TO_FIELD_VAR)",
      "95:         if to_field and not model_admin.to_field_allowed(request, to_field):",
      "96:             raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)",
      "97:         self.to_field = to_field",
      "",
      "---------------"
    ],
    "tests/admin_views/tests.py||tests/admin_views/tests.py": [
      "File: tests/admin_views/tests.py -> tests/admin_views/tests.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: from django.contrib.admin import ModelAdmin",
      "19: from django.contrib.admin.helpers import ACTION_CHECKBOX_NAME",
      "20: from django.contrib.admin.models import LogEntry, DELETION",
      "21: from django.contrib.admin.templatetags.admin_static import static",
      "22: from django.contrib.admin.templatetags.admin_urls import add_preserved_filters",
      "23: from django.contrib.admin.tests import AdminSeleniumWebDriverTestCase",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: from django.contrib.admin.options import TO_FIELD_VAR",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "599:         response = self.client.get(\"/test_admin/admin/admin_views/workhour/?employee__person_ptr__exact=%d\" % e1.pk)",
      "600:         self.assertEqual(response.status_code, 200)",
      "602:     def test_allowed_filtering_15103(self):",
      "603:         \"\"\"",
      "604:         Regressions test for ticket 15103 - filtering on fields defined in a",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "603:     def test_disallowed_to_field(self):",
      "604:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
      "605:             response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'missing_field'})",
      "606:             self.assertEqual(response.status_code, 400)",
      "607:             self.assertEqual(len(calls), 1)",
      "609:         # Specifying a field that is not refered by any other model registered",
      "610:         # to this admin site should raise an exception.",
      "611:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
      "612:             response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'name'})",
      "613:             self.assertEqual(response.status_code, 400)",
      "614:             self.assertEqual(len(calls), 1)",
      "616:         # Specifying a field referenced by another model should be allowed.",
      "617:         response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'id'})",
      "618:         self.assertEqual(response.status_code, 200)",
      "620:         # We also want to prevent the add and change view from leaking a",
      "621:         # disallowed field value.",
      "622:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
      "623:             response = self.client.post(\"/test_admin/admin/admin_views/section/add/\", {TO_FIELD_VAR: 'name'})",
      "624:             self.assertEqual(response.status_code, 400)",
      "625:             self.assertEqual(len(calls), 1)",
      "627:         section = Section.objects.create()",
      "628:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
      "629:             response = self.client.post(\"/test_admin/admin/admin_views/section/%d/\" % section.pk, {TO_FIELD_VAR: 'name'})",
      "630:             self.assertEqual(response.status_code, 400)",
      "631:             self.assertEqual(len(calls), 1)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2310:         \"\"\"Ensure that the to_field GET parameter is preserved when a search",
      "2311:         is performed. Refs #10918.",
      "2312:         \"\"\"",
      "2315:         self.assertContains(response, \"\\n1 user\\n\")",
      "2318:     def test_exact_matches(self):",
      "2319:         response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')",
      "",
      "[Removed Lines]",
      "2313:         from django.contrib.admin.views.main import TO_FIELD_VAR",
      "2314:         response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=username' % TO_FIELD_VAR)",
      "2316:         self.assertContains(response, '<input type=\"hidden\" name=\"_to_field\" value=\"username\"/>', html=True)",
      "",
      "[Added Lines]",
      "2344:         response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=id' % TO_FIELD_VAR)",
      "2346:         self.assertContains(response, '<input type=\"hidden\" name=\"%s\" value=\"id\"/>' % TO_FIELD_VAR, html=True)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "53ff0969822ac2248a89ccb6fef1088212dc800d",
      "candidate_info": {
        "commit_hash": "53ff0969822ac2248a89ccb6fef1088212dc800d",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/53ff0969822ac2248a89ccb6fef1088212dc800d",
        "files": [
          "django/contrib/admin/exceptions.py",
          "django/contrib/admin/options.py",
          "django/contrib/admin/views/main.py",
          "docs/ref/exceptions.txt",
          "docs/releases/1.4.14.txt",
          "docs/releases/1.5.9.txt",
          "docs/releases/1.6.6.txt",
          "tests/admin_views/tests.py"
        ],
        "message": "Prevented data leakage in contrib.admin via query string manipulation.\n\nThis is a security fix. Disclosure following shortly.",
        "before_after_code_files": [
          "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py",
          "django/contrib/admin/options.py||django/contrib/admin/options.py",
          "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py",
          "tests/admin_views/tests.py||tests/admin_views/tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py",
            "django/contrib/admin/options.py||django/contrib/admin/options.py",
            "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py",
            "tests/admin_views/tests.py||tests/admin_views/tests.py"
          ],
          "candidate": [
            "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py",
            "django/contrib/admin/options.py||django/contrib/admin/options.py",
            "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py",
            "tests/admin_views/tests.py||tests/admin_views/tests.py"
          ]
        }
      },
      "candidate_diff": {
        "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py": [
          "File: django/contrib/admin/exceptions.py -> django/contrib/admin/exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: class DisallowedModelAdminLookup(SuspiciousOperation):",
          "5:     \"\"\"Invalid filter was passed to admin view via URL querystring\"\"\"",
          "6:     pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: class DisallowedModelAdminToField(SuspiciousOperation):",
          "10:     \"\"\"Invalid to_field was passed to admin view via URL query string\"\"\"",
          "11:     pass",
          "",
          "---------------"
        ],
        "django/contrib/admin/options.py||django/contrib/admin/options.py": [
          "File: django/contrib/admin/options.py -> django/contrib/admin/options.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: from django.contrib.admin import validation",
          "12: from django.contrib.admin.checks import (BaseModelAdminChecks, ModelAdminChecks,",
          "13:     InlineModelAdminChecks)",
          "14: from django.contrib.admin.utils import (quote, unquote, flatten_fieldsets,",
          "15:     get_deleted_objects, model_format_dict, NestedObjects,",
          "16:     lookup_needs_distinct)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: from django.contrib.admin.exceptions import DisallowedModelAdminToField",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434:                 valid_lookups.append(filter_item)",
          "435:         return clean_lookup in valid_lookups",
          "437:     def has_add_permission(self, request):",
          "438:         \"\"\"",
          "439:         Returns True if the given request has permission to add an object.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:     def to_field_allowed(self, request, to_field):",
          "439:         opts = self.model._meta",
          "441:         try:",
          "442:             field = opts.get_field(to_field)",
          "443:         except FieldDoesNotExist:",
          "444:             return False",
          "446:         # Make sure at least one of the models registered for this site",
          "447:         # references this field.",
          "448:         registered_models = self.admin_site._registry",
          "449:         for related_object in opts.get_all_related_objects():",
          "450:             if (related_object.model in registered_models and",
          "451:                     field in related_object.field.foreign_related_fields):",
          "452:                 return True",
          "454:         return False",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1337:     @transaction.atomic",
          "1338:     def changeform_view(self, request, object_id=None, form_url='', extra_context=None):",
          "1340:         model = self.model",
          "1341:         opts = model._meta",
          "1342:         add = object_id is None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1359:         to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))",
          "1360:         if to_field and not self.to_field_allowed(request, to_field):",
          "1361:             raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1409:             original=obj,",
          "1410:             is_popup=(IS_POPUP_VAR in request.POST or",
          "1411:                       IS_POPUP_VAR in request.GET),",
          "1414:             media=media,",
          "1415:             inline_admin_formsets=inline_formsets,",
          "1416:             errors=helpers.AdminErrorList(form, formsets),",
          "",
          "[Removed Lines]",
          "1412:             to_field=request.POST.get(TO_FIELD_VAR,",
          "1413:                                       request.GET.get(TO_FIELD_VAR)),",
          "",
          "[Added Lines]",
          "1435:             to_field=to_field,",
          "",
          "---------------"
        ],
        "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py": [
          "File: django/contrib/admin/views/main.py -> django/contrib/admin/views/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: from django.utils.http import urlencode",
          "14: from django.contrib.admin import FieldListFilter",
          "16: from django.contrib.admin.options import IncorrectLookupParameters, IS_POPUP_VAR, TO_FIELD_VAR",
          "17: from django.contrib.admin.utils import (quote, get_fields_from_path,",
          "18:     lookup_needs_distinct, prepare_lookup_value)",
          "",
          "[Removed Lines]",
          "15: from django.contrib.admin.exceptions import DisallowedModelAdminLookup",
          "",
          "[Added Lines]",
          "15: from django.contrib.admin.exceptions import (",
          "16:     DisallowedModelAdminLookup, DisallowedModelAdminToField,",
          "17: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:             self.page_num = 0",
          "59:         self.show_all = ALL_VAR in request.GET",
          "60:         self.is_popup = IS_POPUP_VAR in request.GET",
          "62:         self.params = dict(request.GET.items())",
          "63:         if PAGE_VAR in self.params:",
          "64:             del self.params[PAGE_VAR]",
          "",
          "[Removed Lines]",
          "61:         self.to_field = request.GET.get(TO_FIELD_VAR)",
          "",
          "[Added Lines]",
          "63:         to_field = request.GET.get(TO_FIELD_VAR)",
          "64:         if to_field and not model_admin.to_field_allowed(request, to_field):",
          "65:             raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)",
          "66:         self.to_field = to_field",
          "",
          "---------------"
        ],
        "tests/admin_views/tests.py||tests/admin_views/tests.py": [
          "File: tests/admin_views/tests.py -> tests/admin_views/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from django.contrib.admin import ModelAdmin",
          "19: from django.contrib.admin.helpers import ACTION_CHECKBOX_NAME",
          "20: from django.contrib.admin.models import LogEntry, DELETION",
          "21: from django.contrib.admin.templatetags.admin_static import static",
          "22: from django.contrib.admin.templatetags.admin_urls import add_preserved_filters",
          "23: from django.contrib.admin.tests import AdminSeleniumWebDriverTestCase",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from django.contrib.admin.options import TO_FIELD_VAR",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "598:         response = self.client.get(\"/test_admin/admin/admin_views/workhour/?employee__person_ptr__exact=%d\" % e1.pk)",
          "599:         self.assertEqual(response.status_code, 200)",
          "601:     def test_allowed_filtering_15103(self):",
          "602:         \"\"\"",
          "603:         Regressions test for ticket 15103 - filtering on fields defined in a",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602:     def test_disallowed_to_field(self):",
          "603:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
          "604:             response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'missing_field'})",
          "605:             self.assertEqual(response.status_code, 400)",
          "606:             self.assertEqual(len(calls), 1)",
          "608:         # Specifying a field that is not refered by any other model registered",
          "609:         # to this admin site should raise an exception.",
          "610:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
          "611:             response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'name'})",
          "612:             self.assertEqual(response.status_code, 400)",
          "613:             self.assertEqual(len(calls), 1)",
          "615:         # Specifying a field referenced by another model should be allowed.",
          "616:         response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'id'})",
          "617:         self.assertEqual(response.status_code, 200)",
          "619:         # We also want to prevent the add and change view from leaking a",
          "620:         # disallowed field value.",
          "621:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
          "622:             response = self.client.post(\"/test_admin/admin/admin_views/section/add/\", {TO_FIELD_VAR: 'name'})",
          "623:             self.assertEqual(response.status_code, 400)",
          "624:             self.assertEqual(len(calls), 1)",
          "626:         section = Section.objects.create()",
          "627:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
          "628:             response = self.client.post(\"/test_admin/admin/admin_views/section/%d/\" % section.pk, {TO_FIELD_VAR: 'name'})",
          "629:             self.assertEqual(response.status_code, 400)",
          "630:             self.assertEqual(len(calls), 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2378:         \"\"\"Ensure that the to_field GET parameter is preserved when a search",
          "2379:         is performed. Refs #10918.",
          "2380:         \"\"\"",
          "2383:         self.assertContains(response, \"\\n1 user\\n\")",
          "2386:     def test_exact_matches(self):",
          "2387:         response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')",
          "",
          "[Removed Lines]",
          "2381:         from django.contrib.admin.views.main import TO_FIELD_VAR",
          "2382:         response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=username' % TO_FIELD_VAR)",
          "2384:         self.assertContains(response, '<input type=\"hidden\" name=\"_to_field\" value=\"username\"/>', html=True)",
          "",
          "[Added Lines]",
          "2412:         response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=id' % TO_FIELD_VAR)",
          "2414:         self.assertContains(response, '<input type=\"hidden\" name=\"%s\" value=\"id\"/>' % TO_FIELD_VAR, html=True)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a446c896e7c814661fb9c4f212b071b2a7fa446",
      "candidate_info": {
        "commit_hash": "2a446c896e7c814661fb9c4f212b071b2a7fa446",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/2a446c896e7c814661fb9c4f212b071b2a7fa446",
        "files": [
          "django/contrib/admin/exceptions.py",
          "django/contrib/admin/options.py",
          "django/contrib/admin/views/main.py",
          "docs/releases/1.4.14.txt",
          "docs/releases/1.5.9.txt",
          "tests/regressiontests/admin_views/tests.py"
        ],
        "message": "[1.5.x] Prevented data leakage in contrib.admin via query string manipulation.\n\nThis is a security fix. Disclosure following shortly.",
        "before_after_code_files": [
          "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py",
          "django/contrib/admin/options.py||django/contrib/admin/options.py",
          "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py",
          "tests/regressiontests/admin_views/tests.py||tests/regressiontests/admin_views/tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py",
            "django/contrib/admin/options.py||django/contrib/admin/options.py",
            "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py"
          ],
          "candidate": [
            "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py",
            "django/contrib/admin/options.py||django/contrib/admin/options.py",
            "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py"
          ]
        }
      },
      "candidate_diff": {
        "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py": [
          "File: django/contrib/admin/exceptions.py -> django/contrib/admin/exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from django.core.exceptions import SuspiciousOperation",
          "4: class DisallowedModelAdminToField(SuspiciousOperation):",
          "5:     \"\"\"Invalid to_field was passed to admin view via URL query string\"\"\"",
          "6:     pass",
          "",
          "---------------"
        ],
        "django/contrib/admin/options.py||django/contrib/admin/options.py": [
          "File: django/contrib/admin/options.py -> django/contrib/admin/options.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:         clean_lookup = LOOKUP_SEP.join(parts)",
          "276:         return clean_lookup in self.list_filter or clean_lookup == self.date_hierarchy",
          "278:     def has_add_permission(self, request):",
          "279:         \"\"\"",
          "280:         Returns True if the given request has permission to add an object.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:     def to_field_allowed(self, request, to_field):",
          "279:         opts = self.model._meta",
          "281:         try:",
          "282:             field = opts.get_field(to_field)",
          "283:         except FieldDoesNotExist:",
          "284:             return False",
          "286:         # Make sure at least one of the models registered for this site",
          "287:         # references this field.",
          "288:         registered_models = self.admin_site._registry",
          "289:         for related_object in opts.get_all_related_objects():",
          "290:             if (related_object.model in registered_models and",
          "291:                     field == related_object.field.rel.get_related_field()):",
          "292:                 return True",
          "294:         return False",
          "",
          "---------------"
        ],
        "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py": [
          "File: django/contrib/admin/views/main.py -> django/contrib/admin/views/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: from django.utils.http import urlencode",
          "14: from django.contrib.admin import FieldListFilter",
          "15: from django.contrib.admin.options import IncorrectLookupParameters",
          "16: from django.contrib.admin.util import (quote, get_fields_from_path,",
          "17:     lookup_needs_distinct, prepare_lookup_value)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: from django.contrib.admin.exceptions import DisallowedModelAdminToField",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:             self.page_num = 0",
          "59:         self.show_all = ALL_VAR in request.GET",
          "60:         self.is_popup = IS_POPUP_VAR in request.GET",
          "62:         self.params = dict(request.GET.items())",
          "63:         if PAGE_VAR in self.params:",
          "64:             del self.params[PAGE_VAR]",
          "",
          "[Removed Lines]",
          "61:         self.to_field = request.GET.get(TO_FIELD_VAR)",
          "",
          "[Added Lines]",
          "62:         to_field = request.GET.get(TO_FIELD_VAR)",
          "63:         if to_field and not model_admin.to_field_allowed(request, to_field):",
          "64:             raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)",
          "65:         self.to_field = to_field",
          "",
          "---------------"
        ],
        "tests/regressiontests/admin_views/tests.py||tests/regressiontests/admin_views/tests.py": [
          "File: tests/regressiontests/admin_views/tests.py -> tests/regressiontests/admin_views/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: from django.core.urlresolvers import reverse",
          "17: # Register auth models with the admin.",
          "18: from django.contrib import admin",
          "19: from django.contrib.admin.helpers import ACTION_CHECKBOX_NAME",
          "20: from django.contrib.admin.models import LogEntry, DELETION",
          "21: from django.contrib.admin.sites import LOGIN_FORM_KEY",
          "22: from django.contrib.admin.util import quote",
          "24: from django.contrib.admin.tests import AdminSeleniumWebDriverTestCase",
          "25: from django.contrib.auth import REDIRECT_FIELD_NAME",
          "26: from django.contrib.auth.models import Group, User, Permission, UNUSABLE_PASSWORD",
          "",
          "[Removed Lines]",
          "23: from django.contrib.admin.views.main import IS_POPUP_VAR",
          "",
          "[Added Lines]",
          "19: from django.contrib.admin.exceptions import DisallowedModelAdminToField",
          "24: from django.contrib.admin.views.main import IS_POPUP_VAR, TO_FIELD_VAR",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "557:         response = self.client.get(\"/test_admin/admin/admin_views/workhour/?employee__person_ptr__exact=%d\" % e1.pk)",
          "558:         self.assertEqual(response.status_code, 200)",
          "560:     def test_allowed_filtering_15103(self):",
          "561:         \"\"\"",
          "562:         Regressions test for ticket 15103 - filtering on fields defined in a",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561:     def test_disallowed_to_field(self):",
          "562:         with self.assertRaises(DisallowedModelAdminToField):",
          "563:             response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'missing_field'})",
          "565:         # Specifying a field that is not refered by any other model registered",
          "566:         # to this admin site should raise an exception.",
          "567:         with self.assertRaises(DisallowedModelAdminToField):",
          "568:             response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'name'})",
          "570:         # Specifying a field referenced by another model should be allowed.",
          "571:         response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'id'})",
          "572:         self.assertEqual(response.status_code, 200)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2138:         \"\"\"Ensure that the to_field GET parameter is preserved when a search",
          "2139:         is performed. Refs #10918.",
          "2140:         \"\"\"",
          "2143:         self.assertContains(response, \"\\n1 user\\n\")",
          "2146:     def test_exact_matches(self):",
          "2147:         response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')",
          "",
          "[Removed Lines]",
          "2141:         from django.contrib.admin.views.main import TO_FIELD_VAR",
          "2142:         response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=username' % TO_FIELD_VAR)",
          "2144:         self.assertContains(response, '<input type=\"hidden\" name=\"t\" value=\"username\"/>', html=True)",
          "",
          "[Added Lines]",
          "2155:         response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=id' % TO_FIELD_VAR)",
          "2157:         self.assertContains(response, '<input type=\"hidden\" name=\"%s\" value=\"id\"/>' % TO_FIELD_VAR, html=True)",
          "",
          "---------------"
        ]
      }
    }
  ]
}