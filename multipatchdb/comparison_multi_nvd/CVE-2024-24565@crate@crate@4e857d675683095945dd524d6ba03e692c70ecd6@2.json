{
  "cve_id": "CVE-2024-24565",
  "cve_desc": "CrateDB is a distributed SQL database that makes it simple to store and analyze massive amounts of data in real-time. There is a COPY FROM function in the CrateDB database that is used to import file data into database tables. This function has a flaw, and authenticated attackers can use the COPY FROM function to import arbitrary file content into database tables, resulting in information leakage. This vulnerability is patched in 5.3.9, 5.4.8, 5.5.4, and 5.6.1.",
  "repo": "crate/crate",
  "patch_hash": "4e857d675683095945dd524d6ba03e692c70ecd6",
  "patch_info": {
    "commit_hash": "4e857d675683095945dd524d6ba03e692c70ecd6",
    "repo": "crate/crate",
    "commit_url": "https://github.com/crate/crate/commit/4e857d675683095945dd524d6ba03e692c70ecd6",
    "files": [
      "docs/appendices/release-notes/5.5.4.rst",
      "docs/appendices/release-notes/5.6.1.rst",
      "docs/sql/statements/copy-from.rst",
      "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
    ],
    "message": "Restrict `COPY FROM` using local files to superuser\n\nFixing a security issue where any user could read/import content\nof any file on the host system, the CrateDB process user has read\naccess to.",
    "before_after_code_files": [
      "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
    ]
  },
  "patch_diff": {
    "plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java||plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java": [
      "File: plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java -> plugins/cr8-copy-s3/src/test/java/io/crate/copy/s3/S3FileReadingCollectorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:     private FileReadingIterator createBatchIterator(S3ObjectInputStream inputStream, String ... fileUris) {",
      "107:         String compression = null;",
      "108:         return new FileReadingIterator(",
      "110:             compression,",
      "111:             Map.of(",
      "112:                 S3FileInputFactory.NAME,",
      "",
      "[Removed Lines]",
      "109:             Arrays.asList(fileUris),",
      "",
      "[Added Lines]",
      "109:             Arrays.stream(fileUris).map(FileReadingIterator::toURI).toList(),",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/exceptions/UnauthorizedException.java||server/src/main/java/io/crate/exceptions/UnauthorizedException.java": [
      "File: server/src/main/java/io/crate/exceptions/UnauthorizedException.java -> server/src/main/java/io/crate/exceptions/UnauthorizedException.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: package io.crate.exceptions;",
      "26:     public UnauthorizedException(String message) {",
      "27:         super(message);",
      "28:     }",
      "30: }",
      "",
      "[Removed Lines]",
      "24: public class UnauthorizedException extends RuntimeException implements UnscopedException {",
      "",
      "[Added Lines]",
      "24: import java.io.IOException;",
      "26: import org.elasticsearch.ElasticsearchException;",
      "27: import org.elasticsearch.common.io.stream.StreamInput;",
      "29: public class UnauthorizedException extends ElasticsearchException implements UnscopedException {",
      "35:     public UnauthorizedException(StreamInput in) throws IOException {",
      "36:         super(in);",
      "37:     }",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java||server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java": [
      "File: server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java -> server/src/main/java/io/crate/execution/engine/collect/files/FileReadingIterator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "175:         }",
      "176:     }",
      "179:                                String compression,",
      "180:                                Map<String, FileInputFactory> fileInputFactories,",
      "181:                                Boolean shared,",
      "",
      "[Removed Lines]",
      "178:     public FileReadingIterator(Collection<String> fileUris,",
      "",
      "[Added Lines]",
      "178:     public FileReadingIterator(Collection<URI> fileUris,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "398:     }",
      "400:     @Nullable",
      "403:         FileInputFactory fileInputFactory = fileInputFactories.get(uri.getScheme());",
      "404:         if (fileInputFactory != null) {",
      "405:             try {",
      "",
      "[Removed Lines]",
      "401:     private FileInput toFileInput(String fileUri, Settings withClauseOptions) {",
      "402:         URI uri = toURI(fileUri);",
      "",
      "[Added Lines]",
      "401:     private FileInput toFileInput(URI uri, Settings withClauseOptions) {",
      "",
      "---------------"
    ],
    "server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java||server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java": [
      "File: server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java -> server/src/main/java/io/crate/execution/engine/collect/sources/FileCollectSource.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: package io.crate.execution.engine.collect.sources;",
      "24: import java.util.Arrays;",
      "25: import java.util.Collection;",
      "26: import java.util.Collections;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import static java.util.Objects.requireNonNull;",
      "26: import java.net.URI;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40: import io.crate.data.BatchIterator;",
      "41: import io.crate.data.Row;",
      "42: import io.crate.data.SkippingBatchIterator;",
      "43: import io.crate.execution.dsl.phases.CollectPhase;",
      "44: import io.crate.execution.dsl.phases.FileUriCollectPhase;",
      "45: import io.crate.execution.engine.collect.CollectTask;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46: import io.crate.exceptions.UnauthorizedException;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53: import io.crate.metadata.NodeContext;",
      "54: import io.crate.metadata.TransactionContext;",
      "55: import io.crate.planner.operators.SubQueryResults;",
      "56: import io.crate.types.DataTypes;",
      "58: @Singleton",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60: import io.crate.role.Role;",
      "61: import io.crate.role.Roles;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "63:     private final InputFactory inputFactory;",
      "64:     private final NodeContext nodeCtx;",
      "65:     private final ThreadPool threadPool;",
      "67:     @Inject",
      "68:     public FileCollectSource(NodeContext nodeCtx,",
      "69:                              ClusterService clusterService,",
      "70:                              Map<String, FileInputFactory> fileInputFactoryMap,",
      "72:         this.fileInputFactoryMap = fileInputFactoryMap;",
      "73:         this.nodeCtx = nodeCtx;",
      "74:         this.inputFactory = new InputFactory(nodeCtx);",
      "75:         this.clusterService = clusterService;",
      "76:         this.threadPool = threadPool;",
      "77:     }",
      "79:     @Override",
      "",
      "[Removed Lines]",
      "71:                              ThreadPool threadPool) {",
      "",
      "[Added Lines]",
      "72:     private final Roles roles;",
      "78:                              ThreadPool threadPool,",
      "79:                              Roles roles) {",
      "85:         this.roles = roles;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "86:             inputFactory.ctxForRefs(txnCtx, FileLineReferenceResolver::getImplementation);",
      "87:         ctx.add(collectPhase.toCollect());",
      "90:         FileReadingIterator fileReadingIterator = new FileReadingIterator(",
      "91:             fileUris,",
      "92:             fileUriCollectPhase.compression(),",
      "",
      "[Removed Lines]",
      "89:         List<String> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri());",
      "",
      "[Added Lines]",
      "98:         Role user = requireNonNull(roles.findUser(txnCtx.sessionSettings().userName()), \"User who invoked a statement must exist\");",
      "99:         List<URI> fileUris = targetUriToStringList(txnCtx, nodeCtx, fileUriCollectPhase.targetUri()).stream()",
      "100:             .map(s -> {",
      "101:                 var uri = FileReadingIterator.toURI(s);",
      "102:                 if (uri.getScheme().equals(\"file\") && user.isSuperUser() == false) {",
      "103:                     throw new UnauthorizedException(\"Only a superuser can read from the local file system\");",
      "104:                 }",
      "105:                 return uri;",
      "106:             })",
      "107:             .toList();",
      "",
      "---------------"
    ],
    "server/src/main/java/org/elasticsearch/ElasticsearchException.java||server/src/main/java/org/elasticsearch/ElasticsearchException.java": [
      "File: server/src/main/java/org/elasticsearch/ElasticsearchException.java -> server/src/main/java/org/elasticsearch/ElasticsearchException.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "973:             io.crate.exceptions.OperationOnInaccessibleRelationException.class,",
      "974:             io.crate.exceptions.OperationOnInaccessibleRelationException::new,",
      "975:             176,",
      "978:         final Class<? extends ElasticsearchException> exceptionClass;",
      "979:         final CheckedFunction<StreamInput, ? extends ElasticsearchException, IOException> constructor;",
      "",
      "[Removed Lines]",
      "976:             Version.V_5_6_0);",
      "",
      "[Added Lines]",
      "976:             Version.V_5_6_0),",
      "977:         UNAUTHORIZED_EXCEPTION(",
      "978:             io.crate.exceptions.UnauthorizedException.class,",
      "979:             io.crate.exceptions.UnauthorizedException::new,",
      "980:             177,",
      "981:             Version.V_5_7_0);",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java||server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java -> server/src/test/java/io/crate/execution/engine/collect/MapSideDataCollectOperationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: import io.crate.expression.symbol.Literal;",
      "55: import io.crate.metadata.ColumnIdent;",
      "56: import io.crate.metadata.CoordinatorTxnCtx;",
      "57: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
      "58: import io.crate.types.DataTypes;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: import io.crate.role.Role;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69:             createNodeContext(),",
      "70:             clusterService,",
      "71:             Collections.emptyMap(),",
      "73:             );",
      "75:         File tmpFile = temporaryFolder.newFile(\"fileUriCollectOperation.json\");",
      "",
      "[Removed Lines]",
      "72:             THREAD_POOL",
      "",
      "[Added Lines]",
      "73:             THREAD_POOL,",
      "74:             () -> List.of(Role.CRATE_USER)",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingCollectorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "201:     private static FileReadingIterator it(Collection<String> fileUris, String compression) {",
      "202:         return new FileReadingIterator(",
      "204:             compression,",
      "205:             Map.of(LocalFsFileInputFactory.NAME, new LocalFsFileInputFactory()),",
      "206:             false,",
      "",
      "[Removed Lines]",
      "203:             fileUris,",
      "",
      "[Added Lines]",
      "203:             fileUris.stream().map(FileReadingIterator::toURI).toList(),",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java||server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java -> server/src/test/java/io/crate/execution/engine/collect/files/FileReadingIteratorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: import java.io.InputStream;",
      "35: import java.io.InputStreamReader;",
      "36: import java.net.SocketTimeoutException;",
      "37: import java.nio.charset.StandardCharsets;",
      "38: import java.nio.file.Files;",
      "39: import java.nio.file.Path;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: import java.net.URI;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43: import java.util.concurrent.ScheduledExecutorService;",
      "44: import java.util.concurrent.TimeUnit;",
      "45: import java.util.function.Supplier;",
      "47: import org.elasticsearch.common.settings.Settings;",
      "48: import org.elasticsearch.test.ESTestCase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: import java.util.stream.Stream;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
      "88:         List<String> lines2 = List.of(\"name,id,age\", \"Trillian,5,33\");",
      "89:         Files.write(tempFile2, lines2);",
      "92:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
      "93:             () -> new FileReadingIterator(",
      "",
      "[Removed Lines]",
      "90:         List<String> fileUris = List.of(tempFile1.toUri().toString(), tempFile2.toUri().toString());",
      "",
      "[Added Lines]",
      "92:         List<URI> fileUris = Stream.of(tempFile1.toUri().toString(), tempFile2.toUri().toString())",
      "93:             .map(FileReadingIterator::toURI)",
      "94:             .toList();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "139:         Path tempFile = createTempFile(\"tempfile1\", \".csv\");",
      "140:         List<String> lines = List.of(\"id\", \"1\", \"2\", \"3\", \"4\", \"5\");",
      "141:         Files.write(tempFile, lines);",
      "144:         Supplier<BatchIterator<LineCursor>> batchIteratorSupplier =",
      "145:             () -> new FileReadingIterator(",
      "",
      "[Removed Lines]",
      "142:         List<String> fileUris = List.of(tempFile.toUri().toString());",
      "",
      "[Added Lines]",
      "146:         List<URI> fileUris = Stream.of(tempFile.toUri().toString())",
      "147:             .map(FileReadingIterator::toURI).toList();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "213:         Files.write(tempFile, List.of(\"1\", \"2\", \"3\"));",
      "214:         Path tempFile2 = createTempFile(\"tempfile2\", \".csv\");",
      "215:         Files.write(tempFile2, List.of(\"4\", \"5\", \"6\"));",
      "218:         var fi = new FileReadingIterator(",
      "219:             fileUris,",
      "",
      "[Removed Lines]",
      "216:         List<String> fileUris = List.of(tempFile.toUri().toString(), tempFile2.toUri().toString());",
      "",
      "[Added Lines]",
      "221:         List<URI> fileUris = Stream.of(tempFile.toUri().toString(), tempFile2.toUri().toString())",
      "222:             .map(FileReadingIterator::toURI).toList();",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java||server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java": [
      "File: server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java -> server/src/test/java/io/crate/execution/engine/collect/sources/FileCollectSourceTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "92:             new NodeContext(new Functions(Map.of()), roles),",
      "93:             clusterService,",
      "94:             Map.of(),",
      "96:         );",
      "98:         CompletableFuture<BatchIterator<Row>> iterator = fileCollectSource.getIterator(",
      "",
      "[Removed Lines]",
      "95:             THREAD_POOL",
      "",
      "[Added Lines]",
      "95:             THREAD_POOL,",
      "96:             () -> List.of(Role.CRATE_USER)",
      "",
      "---------------"
    ],
    "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
      "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import static io.crate.testing.Asserts.assertThat;",
      "27: import static io.crate.testing.TestingHelpers.printedTable;",
      "28: import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;",
      "30: import java.io.File;",
      "31: import java.io.FileOutputStream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54: import com.carrotsearch.randomizedtesting.LifecycleScope;",
      "56: import io.crate.testing.Asserts;",
      "57: import io.crate.testing.SQLResponse;",
      "58: import io.crate.testing.UseJdbc;",
      "59: import io.crate.testing.UseNewCluster;",
      "61: @IntegTestCase.ClusterScope(numDataNodes = 2)",
      "62: public class CopyIntegrationTest extends SQLHttpIntegrationTest {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: import io.crate.action.sql.Sessions;",
      "58: import io.crate.exceptions.UnauthorizedException;",
      "59: import io.crate.role.Role;",
      "60: import io.crate.role.Roles;",
      "65: import io.crate.testing.UseRandomizedSchema;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1196:             \"2| 31123| apple safari| 23073\"",
      "1197:         );",
      "1198:     }",
      "1199: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1206:     @UseRandomizedSchema(random = false)",
      "1207:     @Test",
      "1208:     public void test_copy_from_local_file_is_only_allowed_for_superusers() {",
      "1209:         execute(\"CREATE TABLE quotes (id INT PRIMARY KEY, \" +",
      "1210:             \"quote STRING INDEX USING FULLTEXT) WITH (number_of_replicas = 0)\");",
      "1211:         execute(\"CREATE USER test_user\");",
      "1212:         execute(\"GRANT ALL TO test_user\");",
      "1214:         var roles = cluster().getInstance(Roles.class);",
      "1215:         Role user = roles.findUser(\"test_user\");",
      "1216:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
      "1217:         try (var session = sqlOperations.newSession(null, user)) {",
      "1218:             assertThatThrownBy(() -> execute(\"COPY quotes FROM ?\", new Object[]{copyFilePath + \"test_copy_from.json\"}, session))",
      "1219:                 .isExactlyInstanceOf(UnauthorizedException.class)",
      "1220:                 .hasMessage(\"Only a superuser can read from the local file system\");",
      "1221:         }",
      "1222:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f88cb6d52b9e9e08d22ce01b73922851437467cc",
      "candidate_info": {
        "commit_hash": "f88cb6d52b9e9e08d22ce01b73922851437467cc",
        "repo": "crate/crate",
        "commit_url": "https://github.com/crate/crate/commit/f88cb6d52b9e9e08d22ce01b73922851437467cc",
        "files": [
          "server/src/main/java/io/crate/analyze/Analyzer.java",
          "server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java",
          "server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java",
          "server/src/main/java/io/crate/role/RoleManagerService.java",
          "server/src/main/java/io/crate/role/Roles.java",
          "server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java",
          "server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java",
          "server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java",
          "server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java",
          "server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java",
          "server/src/test/java/io/crate/integrationtests/PgCatalogITest.java",
          "server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java",
          "server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java",
          "server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java"
        ],
        "message": "Make role not found errors more consistent\n\nThere were a couple of places that raised `IllegalArgumentException`\ninstead of `RoleUnknownException`.",
        "before_after_code_files": [
          "server/src/main/java/io/crate/analyze/Analyzer.java||server/src/main/java/io/crate/analyze/Analyzer.java",
          "server/src/main/java/io/crate/exceptions/RoleUnknownException.java||server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java||server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java",
          "server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java||server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java",
          "server/src/main/java/io/crate/role/RoleManagerService.java||server/src/main/java/io/crate/role/RoleManagerService.java",
          "server/src/main/java/io/crate/role/Roles.java||server/src/main/java/io/crate/role/Roles.java",
          "server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java||server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java",
          "server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java||server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java",
          "server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java||server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java",
          "server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java||server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java||server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java",
          "server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java||server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java",
          "server/src/test/java/io/crate/integrationtests/PgCatalogITest.java||server/src/test/java/io/crate/integrationtests/PgCatalogITest.java",
          "server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java||server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java",
          "server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java||server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java",
          "server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java||server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ],
          "candidate": [
            "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "server/src/main/java/io/crate/analyze/Analyzer.java||server/src/main/java/io/crate/analyze/Analyzer.java": [
          "File: server/src/main/java/io/crate/analyze/Analyzer.java -> server/src/main/java/io/crate/analyze/Analyzer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "788:                 ? context.sessionSettings().userName()",
          "789:                 : createUserMapping.userName();",
          "796:             ExpressionAnalyzer expressionAnalyzer = new ExpressionAnalyzer(",
          "797:                 context.transactionContext(),",
          "798:                 nodeCtx,",
          "",
          "[Removed Lines]",
          "791:             Role user = roleManager.findUser(userName);",
          "792:             if (user == null) {",
          "793:                 throw new IllegalArgumentException(\"Cannot create a user mapping for an unknown user: '\" + userName + \"'\");",
          "794:             }",
          "",
          "[Added Lines]",
          "791:             Role user = roleManager.getUser(userName);",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/exceptions/RoleUnknownException.java||server/src/main/java/io/crate/exceptions/RoleUnknownException.java": [
          "File: server/src/main/java/io/crate/exceptions/RoleUnknownException.java -> server/src/main/java/io/crate/exceptions/RoleUnknownException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         super(getMessage(Collections.singletonList(roleName)));",
          "32:     }",
          "34:     public RoleUnknownException(List<String> roleNames) {",
          "35:         super(getMessage(roleNames));",
          "36:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:     public RoleUnknownException(int oid) {",
          "35:         super(String.format(Locale.ENGLISH, \"Role with OID %d does not exist\", oid));",
          "36:     }",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java||server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java": [
          "File: server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java -> server/src/main/java/io/crate/expression/scalar/HasPrivilegeFunction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.Collection;",
          "25: import java.util.List;",
          "27: import java.util.function.BiFunction;",
          "28: import java.util.function.Function;",
          "",
          "[Removed Lines]",
          "26: import java.util.Locale;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import io.crate.common.FourFunction;",
          "33: import io.crate.data.Input;",
          "34: import io.crate.exceptions.MissingPrivilegeException;",
          "35: import io.crate.expression.symbol.Symbol;",
          "36: import io.crate.metadata.NodeContext;",
          "37: import io.crate.metadata.Scalar;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:     private final FourFunction<Roles, Role, Object, Collection<Permission>, Boolean> checkPrivilege;",
          "60:     protected static final BiFunction<Roles, Object, Role> USER_BY_OID = (roles, userOid) -> {",
          "62:         if (user == null) {",
          "64:         }",
          "65:         return user;",
          "66:     };",
          "",
          "[Removed Lines]",
          "52:     protected static final BiFunction<Roles, Object, Role> USER_BY_NAME = (roles, userName) -> {",
          "53:         var user = roles.findUser((String) userName);",
          "54:         if (user == null) {",
          "55:             throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"User %s does not exist\", userName));",
          "56:         }",
          "57:         return user;",
          "58:     };",
          "61:         var user = roles.findUser((Integer) userOid);",
          "63:             throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"User with OID %d does not exist\", userOid));",
          "",
          "[Added Lines]",
          "52:     protected static final BiFunction<Roles, Object, Role> USER_BY_NAME = (roles, userName) -> roles.getUser((String) userName);",
          "55:         int oid = (int) userOid;",
          "56:         var user = roles.findUser(oid);",
          "58:             throw new RoleUnknownException(oid);",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java||server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java": [
          "File: server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java -> server/src/main/java/io/crate/planner/statement/SetSessionAuthorizationPlan.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         String userName = setSessionAuthorization.user();",
          "61:         Role user;",
          "62:         if (userName != null) {",
          "67:         } else {",
          "68:             user = sessionSettings.authenticatedUser();",
          "69:         }",
          "",
          "[Removed Lines]",
          "63:             user = roles.findUser(userName);",
          "64:             if (user == null) {",
          "65:                 throw new IllegalArgumentException(\"User '\" + userName + \"' does not exist.\");",
          "66:             }",
          "",
          "[Added Lines]",
          "63:             user = roles.getUser(userName);",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/role/RoleManagerService.java||server/src/main/java/io/crate/role/RoleManagerService.java": [
          "File: server/src/main/java/io/crate/role/RoleManagerService.java -> server/src/main/java/io/crate/role/RoleManagerService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.Collection;",
          "25: import java.util.Locale;",
          "26: import java.util.concurrent.CompletableFuture;",
          "29: import org.elasticsearch.cluster.service.ClusterService;",
          "30: import org.elasticsearch.common.inject.Inject;",
          "",
          "[Removed Lines]",
          "27: import java.util.function.Consumer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: @Singleton",
          "46: public class RoleManagerService implements RoleManager {",
          "49:         if (user != null && user.isSuperUser()) {",
          "50:             throw new UnsupportedOperationException(String.format(",
          "51:                 Locale.ENGLISH, \"Cannot drop a superuser '%s'\", user.name()));",
          "52:         }",
          "56:         if (user != null && user.isSuperUser()) {",
          "57:             throw new UnsupportedOperationException(String.format(",
          "58:                 Locale.ENGLISH, \"Cannot alter privileges for superuser '%s'\", user.name()));",
          "59:         }",
          "62:     private static final RoleManagerDDLModifier DDL_MODIFIER = new RoleManagerDDLModifier();",
          "",
          "[Removed Lines]",
          "48:     private static final Consumer<Role> ENSURE_DROP_ROLE_NOT_SUPERUSER = user -> {",
          "53:     };",
          "55:     private static final Consumer<Role> ENSURE_PRIVILEGE_USER_NOT_SUPERUSER = user -> {",
          "60:     };",
          "",
          "[Added Lines]",
          "47:     private static final void ensureDropRoleTargetIsNotSuperUser(Role user) {",
          "52:     }",
          "54:     private static final void ensureAlterPrivilegeTargetIsNotSuperuser(Role user) {",
          "59:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:     @Override",
          "128:     public CompletableFuture<Long> dropRole(String roleName, boolean suppressNotFoundError) {",
          "130:         return transportDropRoleAction.execute(new DropRoleRequest(roleName, suppressNotFoundError), r -> {",
          "131:             if (r.doesUserExist() == false) {",
          "132:                 if (suppressNotFoundError) {",
          "",
          "[Removed Lines]",
          "129:         ENSURE_DROP_ROLE_NOT_SUPERUSER.accept(roles.findUser(roleName));",
          "",
          "[Added Lines]",
          "129:         ensureDropRoleTargetIsNotSuperUser(roles.findUser(roleName));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:     public CompletableFuture<Long> applyPrivileges(Collection<String> roleNames,",
          "159:                                                    Collection<Privilege> privileges,",
          "160:                                                    GrantedRolesChange grantedRolesChange) {",
          "162:         return transportPrivilegesAction.execute(new PrivilegesRequest(roleNames, privileges, grantedRolesChange), r -> {",
          "163:             if (!r.unknownUserNames().isEmpty()) {",
          "164:                 throw new RoleUnknownException(r.unknownUserNames());",
          "",
          "[Removed Lines]",
          "161:         roleNames.forEach(s -> ENSURE_PRIVILEGE_USER_NOT_SUPERUSER.accept(roles.findUser(s)));",
          "",
          "[Added Lines]",
          "161:         roleNames.forEach(s -> ensureAlterPrivilegeTargetIsNotSuperuser(roles.findUser(s)));",
          "",
          "---------------"
        ],
        "server/src/main/java/io/crate/role/Roles.java||server/src/main/java/io/crate/role/Roles.java": [
          "File: server/src/main/java/io/crate/role/Roles.java -> server/src/main/java/io/crate/role/Roles.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import org.jetbrains.annotations.Nullable;",
          "35: import io.crate.common.FourFunction;",
          "36: import io.crate.metadata.pgcatalog.OidHash;",
          "38: public interface Roles {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         return null;",
          "63:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     default Role getUser(String userName) {",
          "70:         Role user = findUser(userName);",
          "71:         if (user == null) {",
          "72:             throw new RoleUnknownException(userName);",
          "73:         }",
          "74:         return user;",
          "75:     }",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java||server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java": [
          "File: server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java -> server/src/test/java/io/crate/analyze/CreateUserMappingAnalyzerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.junit.Test;",
          "28: import io.crate.test.integration.CrateDummyClusterServiceUnitTest;",
          "29: import io.crate.testing.SQLExecutor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:             .builder(clusterService)",
          "37:             .build();",
          "38:         assertThatThrownBy(() -> e.analyze(\"CREATE USER MAPPING FOR user1 SERVER pg\"))",
          "41:     }",
          "42: }",
          "",
          "[Removed Lines]",
          "39:             .isExactlyInstanceOf(IllegalArgumentException.class)",
          "40:             .hasMessage(\"Cannot create a user mapping for an unknown user: 'user1'\");",
          "",
          "[Added Lines]",
          "40:             .isExactlyInstanceOf(RoleUnknownException.class)",
          "41:             .hasMessage(\"Role 'user1' does not exist\");",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java||server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java": [
          "File: server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java -> server/src/test/java/io/crate/expression/scalar/HasDatabasePrivilegeFunctionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import io.crate.Constants;",
          "34: import io.crate.exceptions.MissingPrivilegeException;",
          "35: import io.crate.metadata.pgcatalog.OidHash;",
          "36: import io.crate.role.Permission;",
          "37: import io.crate.role.Policy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     public void test_throws_error_when_user_is_not_found() {",
          "94:         assertThatThrownBy(",
          "95:             () -> assertEvaluate(\"has_database_privilege('not_existing_user', 'crate', ' CONNECT')\", null))",
          "98:     }",
          "100:     @Test",
          "",
          "[Removed Lines]",
          "96:             .isExactlyInstanceOf(IllegalArgumentException.class)",
          "97:             .hasMessage(\"User not_existing_user does not exist\");",
          "",
          "[Added Lines]",
          "97:             .isExactlyInstanceOf(RoleUnknownException.class)",
          "98:             .hasMessage(\"Role 'not_existing_user' does not exist\");",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java||server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java": [
          "File: server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java -> server/src/test/java/io/crate/expression/scalar/HasSchemaPrivilegeFunctionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import org.junit.Test;",
          "33: import io.crate.exceptions.MissingPrivilegeException;",
          "34: import io.crate.metadata.information.InformationSchemaInfo;",
          "35: import io.crate.metadata.pgcatalog.OidHash;",
          "36: import io.crate.metadata.pgcatalog.PgCatalogSchemaInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:     public void test_throws_error_when_user_is_not_found() {",
          "90:         assertThatThrownBy(",
          "91:             () -> assertEvaluate(\"has_schema_privilege('not_existing_user', 'pg_catalog', ' USAGE')\", null))",
          "94:     }",
          "96:     @Test",
          "",
          "[Removed Lines]",
          "92:             .isExactlyInstanceOf(IllegalArgumentException.class)",
          "93:             .hasMessage(\"User not_existing_user does not exist\");",
          "",
          "[Added Lines]",
          "93:             .isExactlyInstanceOf(RoleUnknownException.class)",
          "94:             .hasMessage(\"Role 'not_existing_user' does not exist\");",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java||server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/BaseRolesIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import static io.crate.testing.Asserts.assertThat;",
          "28: import org.elasticsearch.test.IntegTestCase;",
          "29: import org.junit.After;",
          "30: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "26: import java.util.Objects;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     public SQLResponse executeAs(String stmt, String userName) {",
          "95:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
          "96:         Roles roles = cluster().getInstance(Roles.class);",
          "98:         try (Session session = sqlOperations.newSession(null, user)) {",
          "99:             return execute(stmt, null, session);",
          "100:         }",
          "",
          "[Removed Lines]",
          "97:         Role user = Objects.requireNonNull(roles.findUser(userName), \"User \" + userName + \" must exist\");",
          "",
          "[Added Lines]",
          "95:         Role user = roles.getUser(userName);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java||server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java": [
          "File: server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java -> server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import static io.crate.testing.Asserts.assertThat;",
          "27: import static io.crate.testing.TestingHelpers.printedTable;",
          "28: import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;",
          "29: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "31: import java.io.File;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1213:         execute(\"GRANT ALL TO test_user\");",
          "1215:         var roles = cluster().getInstance(Roles.class);",
          "1217:         Sessions sqlOperations = cluster().getInstance(Sessions.class);",
          "1218:         try (var session = sqlOperations.newSession(null, user)) {",
          "1219:             assertThatThrownBy(() -> execute(\"COPY quotes FROM ?\", new Object[]{copyFilePath + \"test_copy_from.json\"}, session))",
          "",
          "[Removed Lines]",
          "1216:         Role user = roles.findUser(\"test_user\");",
          "",
          "[Added Lines]",
          "1217:         Role user = roles.getUser(\"test_user\");",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java||server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java": [
          "File: server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java -> server/src/test/java/io/crate/integrationtests/ForeignDataWrapperITest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:         );",
          "156:         var roles = cluster().getInstance(Roles.class);",
          "158:         response = sqlExecutor.executeAs(\"select * from doc.dummy order by x asc\", trillian);",
          "159:         assertThat(response).hasRows(",
          "160:             \"1| 1\",",
          "",
          "[Removed Lines]",
          "157:         Role trillian = roles.findUser(\"trillian\");",
          "",
          "[Added Lines]",
          "157:         Role trillian = roles.getUser(\"trillian\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343:         execute(\"grant al to arthur\");",
          "345:         var roles = cluster().getInstance(Roles.class);",
          "347:         sqlExecutor.executeAs(\"\"\"",
          "348:             CREATE SERVER pg",
          "349:             FOREIGN DATA WRAPPER jdbc",
          "",
          "[Removed Lines]",
          "346:         Role trillian = roles.findUser(\"trillian\");",
          "",
          "[Added Lines]",
          "346:         Role trillian = roles.getUser(\"trillian\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:         response = sqlExecutor.executeAs(\"select * from information_schema.user_mapping_options where option_name = 'password'\",",
          "370:         assertThat(response).hasRows(\"trillian| crate| pg| password| NULL\");",
          "",
          "[Removed Lines]",
          "369:             roles.findUser(\"arthur\"));",
          "",
          "[Added Lines]",
          "369:             roles.getUser(\"arthur\"));",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java||server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java": [
          "File: server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java -> server/src/test/java/io/crate/integrationtests/LogicalReplicationITest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.integrationtests;",
          "24: import static io.crate.testing.Asserts.assertThat;",
          "25: import static org.assertj.core.api.Assertions.assertThatThrownBy;",
          "26: import static org.junit.Assert.assertFalse;",
          "27: import static org.junit.Assert.assertThrows;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import java.util.ArrayList;",
          "31: import java.util.List;",
          "32: import java.util.Locale;",
          "34: import java.util.concurrent.TimeUnit;",
          "35: import java.util.concurrent.atomic.AtomicBoolean;",
          "36: import java.util.concurrent.atomic.AtomicLong;",
          "",
          "[Removed Lines]",
          "33: import java.util.Objects;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47: import io.crate.replication.logical.exceptions.PublicationUnknownException;",
          "48: import io.crate.replication.logical.metadata.Subscription;",
          "49: import io.crate.replication.logical.metadata.SubscriptionsMetadata;",
          "51: import io.crate.role.Role;",
          "52: import io.crate.role.Roles;",
          "55: @UseRandomizedSchema(random = false)",
          "",
          "[Removed Lines]",
          "50: import io.crate.testing.UseRandomizedSchema;",
          "",
          "[Added Lines]",
          "52: import io.crate.testing.UseRandomizedSchema;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64:         executeOnPublisher(\"GRANT AL TO \" + publicationOwner);",
          "65:         executeOnPublisher(\"GRANT DQL, DML, DDL ON TABLE doc.t1 TO \" + publicationOwner);",
          "66:         Roles roles = publisherCluster.getInstance(Roles.class);",
          "69:         executeOnPublisher(\"DROP USER \" + publicationOwner);",
          "70:         assertThatThrownBy(() -> executeOnPublisherAsUser(\"CREATE PUBLICATION pub1 FOR TABLE doc.t1\", user))",
          "",
          "[Removed Lines]",
          "67:         Role user = Objects.requireNonNull(roles.findUser(publicationOwner), \"User \" + publicationOwner + \" must exist\");",
          "",
          "[Added Lines]",
          "67:         Role user = roles.getUser(publicationOwner);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:         executeOnSubscriber(\"GRANT AL TO \" + subscriptionOwner);",
          "86:         Roles roles = subscriberCluster.getInstance(Roles.class);",
          "89:         executeOnSubscriber(\"DROP USER \" + subscriptionOwner);",
          "90:         assertThatThrownBy(() -> createSubscriptionAsUser(\"sub1\", \"pub1\", user))",
          "",
          "[Removed Lines]",
          "87:         Role user = Objects.requireNonNull(roles.findUser(subscriptionOwner), \"User \" + subscriptionOwner + \" must exist\");",
          "",
          "[Added Lines]",
          "87:         Role user = roles.getUser(subscriptionOwner);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "103:         executeOnPublisher(\"GRANT DQL, DML, DDL ON TABLE doc.t1 TO \" + publicationOwner);",
          "105:         Roles roles = publisherCluster.getInstance(Roles.class);",
          "107:         executeOnPublisherAsUser(\"CREATE PUBLICATION pub1 FOR TABLE doc.t1\", user);",
          "109:         assertThatThrownBy(() -> executeOnPublisher(\"DROP USER \" + publicationOwner))",
          "",
          "[Removed Lines]",
          "106:         Role user = Objects.requireNonNull(roles.findUser(publicationOwner), \"User \" + publicationOwner + \" must exist\");",
          "",
          "[Added Lines]",
          "106:         Role user = roles.getUser(publicationOwner);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "122:         executeOnSubscriber(\"GRANT AL TO \" + subscriptionOwner);",
          "124:         Roles roles = subscriberCluster.getInstance(Roles.class);",
          "126:         createSubscriptionAsUser(\"sub1\", \"pub1\", user);",
          "128:         assertThatThrownBy(() -> executeOnSubscriber(\"DROP USER \" + subscriptionOwner))",
          "",
          "[Removed Lines]",
          "125:         Role user = Objects.requireNonNull(roles.findUser(subscriptionOwner), \"User \" + subscriptionOwner + \" must exist\");",
          "",
          "[Added Lines]",
          "125:         Role user = roles.getUser(subscriptionOwner);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "141:         executeOnSubscriber(\"GRANT AL TO \" + subscriptionOwner);",
          "143:         Roles roles = subscriberCluster.getInstance(Roles.class);",
          "145:         var stmt = String.format(Locale.ENGLISH, \"CREATE SUBSCRIPTION sub1 CONNECTION 'crate://localhost:12345/mydb?user=%s&mode=pg_tunnel'\" +",
          "146:                                                  \" publication pub1\", user.name());",
          "147:         assertThatThrownBy(() -> subscriberSqlExecutor.executeAs(stmt, user))",
          "",
          "[Removed Lines]",
          "144:         Role user = Objects.requireNonNull(roles.findUser(subscriptionOwner), \"User \" + subscriptionOwner + \" must exist\");",
          "",
          "[Added Lines]",
          "144:         Role user = roles.getUser(subscriptionOwner);",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/integrationtests/PgCatalogITest.java||server/src/test/java/io/crate/integrationtests/PgCatalogITest.java": [
          "File: server/src/test/java/io/crate/integrationtests/PgCatalogITest.java -> server/src/test/java/io/crate/integrationtests/PgCatalogITest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.crate.integrationtests;",
          "24: import static io.crate.testing.Asserts.assertThat;",
          "26: import java.util.ArrayList;",
          "27: import java.util.Arrays;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:         Roles roles = cluster().getInstance(Roles.class);",
          "123:         Sessions sessions = cluster().getInstance(Sessions.class);",
          "125:             execute(\"select nspname from pg_catalog.pg_namespace order by nspname\", session);",
          "127:             assertThat(response).hasRows(",
          "",
          "[Removed Lines]",
          "124:         try (var session = sessions.newSession(\"doc\", roles.findUser(\"hoschi\"))) {",
          "",
          "[Added Lines]",
          "125:         try (var session = sessions.newSession(\"doc\", roles.getUser(\"hoschi\"))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:         execute(\"create view vip.v1 as select 1\");",
          "135:         execute(\"grant dql on view vip.v1 to hoschi\");",
          "137:             execute(\"select nspname from pg_catalog.pg_namespace order by nspname\", session);",
          "138:             assertThat(response).hasRows(",
          "139:                 \"doc\",",
          "",
          "[Removed Lines]",
          "136:         try (var session = sessions.newSession(\"doc\", roles.findUser(\"hoschi\"))) {",
          "",
          "[Added Lines]",
          "137:         try (var session = sessions.newSession(\"doc\", roles.getUser(\"hoschi\"))) {",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java||server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java": [
          "File: server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java -> server/src/test/java/io/crate/planner/statement/SetSessionAuthorizationPlanTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.junit.Test;",
          "31: import io.crate.planner.NoopPlan;",
          "32: import io.crate.planner.Plan;",
          "33: import io.crate.role.Role;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import io.crate.exceptions.RoleUnknownException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         var e = SQLExecutor.builder(clusterService).build();",
          "78:         Plan plan = e.plan(\"SET SESSION AUTHORIZATION 'unknown_user'\");",
          "79:         assertThatThrownBy(() -> e.execute(plan).getResult())",
          "82:     }",
          "83: }",
          "",
          "[Removed Lines]",
          "80:             .isExactlyInstanceOf(IllegalArgumentException.class)",
          "81:             .hasMessage(\"User 'unknown_user' does not exist.\");",
          "",
          "[Added Lines]",
          "81:             .isExactlyInstanceOf(RoleUnknownException.class)",
          "82:             .hasMessage(\"Role 'unknown_user' does not exist\");",
          "",
          "---------------"
        ],
        "server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java||server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java": [
          "File: server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java -> server/src/test/java/io/crate/replication/logical/action/TransportCreateSubscriptionActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: import io.crate.replication.logical.LogicalReplicationService;",
          "55: import io.crate.replication.logical.metadata.ConnectionInfo;",
          "56: import io.crate.replication.logical.metadata.RelationMetadata;",
          "59: import io.crate.role.Roles;",
          "61: public class TransportCreateSubscriptionActionTest {",
          "63:     private final LogicalReplicationService logicalReplicationService = mock(LogicalReplicationService.class);",
          "65:     private final ClusterService clusterService = mock(ClusterService.class);",
          "66:     private TransportCreateSubscriptionAction transportCreateSubscriptionAction;",
          "",
          "[Removed Lines]",
          "57: import io.crate.sql.tree.QualifiedName;",
          "58: import io.crate.role.Role;",
          "64:     private final Roles roles = mock(Roles.class);",
          "",
          "[Added Lines]",
          "58: import io.crate.role.StubRoleManager;",
          "59: import io.crate.sql.tree.QualifiedName;",
          "64:     private final Roles roles = new StubRoleManager();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:             roles",
          "96:         );",
          "100:         final DiscoveryNode dataNode = new DiscoveryNode(",
          "101:             \"node\",",
          "102:             buildNewFakeTransportAddress(),",
          "",
          "[Removed Lines]",
          "98:         when(roles.findUser(anyString())).thenReturn(Role.CRATE_USER);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:         transportCreateSubscriptionAction.masterOperation(",
          "141:             new CreateSubscriptionRequest(",
          "143:                 \"dummy\",",
          "144:                 new ConnectionInfo(List.of(), Settings.EMPTY),",
          "145:                 List.of(),",
          "",
          "[Removed Lines]",
          "142:                 \"dummy\",",
          "",
          "[Added Lines]",
          "140:                 \"crate\",",
          "",
          "---------------"
        ],
        "server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java||server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java": [
          "File: server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java -> server/src/testFixtures/java/org/elasticsearch/test/IntegTestCase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1682:     public SQLResponse systemExecute(String stmt, @Nullable String schema, String node) {",
          "1683:         Sessions sqlOperations = cluster().getInstance(Sessions.class, node);",
          "1684:         Roles roles = cluster().getInstance(Roles.class, node);",
          "1686:             response = sqlExecutor.exec(stmt, session);",
          "1687:         }",
          "1688:         return response;",
          "",
          "[Removed Lines]",
          "1685:         try (Session session = sqlOperations.newSession(schema, roles.findUser(\"crate\"))) {",
          "",
          "[Added Lines]",
          "1685:         try (Session session = sqlOperations.newSession(schema, roles.getUser(\"crate\"))) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}