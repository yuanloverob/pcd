{
  "cve_id": "CVE-2023-6395",
  "cve_desc": "The Mock software contains a vulnerability wherein an attacker could potentially exploit privilege escalation, enabling the execution of arbitrary code with root user privileges. This weakness stems from the absence of proper sandboxing during the expansion and execution of Jinja2 templates, which may be included in certain configuration parameters. While the Mock documentation advises treating users added to the mock group as privileged, certain build systems invoking mock on behalf of users might inadvertently permit less privileged users to define configuration tags. These tags could then be passed as parameters to mock during execution, potentially leading to the utilization of Jinja2 templates for remote privilege escalation and the execution of arbitrary code as the root user on the build server.",
  "repo": "xsuchy/templated-dictionary",
  "patch_hash": "bcd90f0dafa365575c4b101e6f5d98c4ef4e4b69",
  "patch_info": {
    "commit_hash": "bcd90f0dafa365575c4b101e6f5d98c4ef4e4b69",
    "repo": "xsuchy/templated-dictionary",
    "commit_url": "https://github.com/xsuchy/templated-dictionary/commit/bcd90f0dafa365575c4b101e6f5d98c4ef4e4b69",
    "files": [
      "templated_dictionary/__init__.py"
    ],
    "message": "Use a sandboxed jinja2 environment\n\nThe task of templated_dictionary object is pretty simple, it just\nexpands precisely defined set of templates (dictionary attributes).\nHaving a full power of Python interpreter in templates doesn't seem to\nmake any sense.  So let's make the library safer.",
    "before_after_code_files": [
      "templated_dictionary/__init__.py||templated_dictionary/__init__.py"
    ]
  },
  "patch_diff": {
    "templated_dictionary/__init__.py||templated_dictionary/__init__.py": [
      "File: templated_dictionary/__init__.py -> templated_dictionary/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: # vim:expandtab:autoindent:tabstop=4:shiftwidth=4:filetype=python:textwidth=0:",
      "4: from collections.abc import MutableMapping",
      "8: # pylint: disable=no-member,unsupported-assignment-operation",
      "",
      "[Removed Lines]",
      "5: import jinja2",
      "",
      "[Added Lines]",
      "5: from jinja2 import sandbox",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:         '''",
      "20:         self.__dict__.update(*args, **kwargs)",
      "22:         self._aliases = {}",
      "23:         if alias_spec:",
      "24:             for aliased_to, aliases in alias_spec.items():",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22:         self.sandbox = sandbox.SandboxedEnvironment(keep_trailing_newline=True)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "80:         orig = last = value",
      "81:         max_recursion = self.__dict__.get('jinja_max_recursion', 5)",
      "82:         for _ in range(max_recursion):",
      "85:             if value == last:",
      "86:                 return value",
      "87:             last = value",
      "",
      "[Removed Lines]",
      "83:             template = jinja2.Template(value, keep_trailing_newline=True)",
      "84:             value = _to_native(template.render(self.__dict__))",
      "",
      "[Added Lines]",
      "85:             value = _to_native(self.sandbox.from_string(value).render(self.__dict__, func=lambda:None))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0740bd0ca8d487301881541028977d120f8b8933",
      "candidate_info": {
        "commit_hash": "0740bd0ca8d487301881541028977d120f8b8933",
        "repo": "xsuchy/templated-dictionary",
        "commit_url": "https://github.com/xsuchy/templated-dictionary/commit/0740bd0ca8d487301881541028977d120f8b8933",
        "files": [
          "templated_dictionary/__init__.py"
        ],
        "message": "Make the TemplatedDictionary objects picklable\n\nThe jinja2 SandboxedEnvironment objects are not guaranteed to be\npickle-serializable (even though they practically are).  So let's rather\nstore the environment elsewhere than in the TemplatedDictionary object\nitself to keep it serializable.\n\nNb. TemplatedDictionary is just a wrapper around dict, which is quite\ncommonly subject of (de)serialization (e.g. Mock, the main user of\ntemplated-dictionary library does that through the\nconcurrent.futures.ProcessPoolExecutor logic).\n\nIt would be disadvantageous to introduce additional internal arguments\ninto the object itself (considering we already have the __jinja_expand\ninternal).\n\nHaving a per-application shared environment is kind of expected anyway\n(and even more optimal):\n\n    https://jinja.palletsprojects.com/en/3.0.x/api/#basics\n\nNote that this fix is mostly needed for the RHEL 8 environment with\njinja2 v2.10.1; newer versions made the environments (namely the\nincluded filters) picklable: https://github.com/pallets/jinja/pull/1613",
        "before_after_code_files": [
          "templated_dictionary/__init__.py||templated_dictionary/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "templated_dictionary/__init__.py||templated_dictionary/__init__.py"
          ],
          "candidate": [
            "templated_dictionary/__init__.py||templated_dictionary/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "templated_dictionary/__init__.py||templated_dictionary/__init__.py": [
          "File: templated_dictionary/__init__.py -> templated_dictionary/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from collections.abc import MutableMapping",
          "5: from jinja2 import sandbox",
          "8: # pylint: disable=no-member,unsupported-assignment-operation",
          "9: class TemplatedDictionary(MutableMapping):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: SANDBOX = sandbox.SandboxedEnvironment(keep_trailing_newline=True)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:         '''",
          "20:         self.__dict__.update(*args, **kwargs)",
          "24:         self._aliases = {}",
          "25:         if alias_spec:",
          "26:             for aliased_to, aliases in alias_spec.items():",
          "",
          "[Removed Lines]",
          "22:         self.sandbox = sandbox.SandboxedEnvironment(keep_trailing_newline=True)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:         orig = last = value",
          "83:         max_recursion = self.__dict__.get('jinja_max_recursion', 5)",
          "84:         for _ in range(max_recursion):",
          "86:             if value == last:",
          "87:                 return value",
          "88:             last = value",
          "",
          "[Removed Lines]",
          "85:             value = _to_native(self.sandbox.from_string(value).render(self.__dict__, func=lambda:None))",
          "",
          "[Added Lines]",
          "84:             value = _to_native(SANDBOX.from_string(value).render(self.__dict__, func=lambda:None))",
          "",
          "---------------"
        ]
      }
    }
  ]
}