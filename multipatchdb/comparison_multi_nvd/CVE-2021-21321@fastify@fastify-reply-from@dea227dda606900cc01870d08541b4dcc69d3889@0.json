{
  "cve_id": "CVE-2021-21321",
  "cve_desc": "fastify-reply-from is an npm package which is a fastify plugin to forward the current http request to another server. In fastify-reply-from before version 4.0.2, by crafting a specific URL, it is possible to escape the prefix of the proxied backend service. If the base url of the proxied server is \"/pub/\", a user expect that accessing \"/priv\" on the target service would not be possible. In affected versions, it is possible. This is fixed in version 4.0.2.",
  "repo": "fastify/fastify-reply-from",
  "patch_hash": "dea227dda606900cc01870d08541b4dcc69d3889",
  "patch_info": {
    "commit_hash": "dea227dda606900cc01870d08541b4dcc69d3889",
    "repo": "fastify/fastify-reply-from",
    "commit_url": "https://github.com/fastify/fastify-reply-from/commit/dea227dda606900cc01870d08541b4dcc69d3889",
    "files": [
      "lib/utils.js",
      "test/build-url.js",
      "test/unix-http.js"
    ],
    "message": "Merge pull request from GHSA-qmw8-3v4g-gwj4\n\n* fix: Re-enable unix+http:// base URL, prevent escape of base URL path\n\nCo-Authored-By: Corey Farrell <git@cfware.com>\n\n* More fixes\n\n* Test more build-url error cases\n\nCo-authored-by: Corey Farrell <git@cfware.com>",
    "before_after_code_files": [
      "lib/utils.js||lib/utils.js",
      "test/build-url.js||test/build-url.js",
      "test/unix-http.js||test/unix-http.js"
    ]
  },
  "patch_diff": {
    "lib/utils.js||lib/utils.js": [
      "File: lib/utils.js -> lib/utils.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   const dest = new URL(source, reqBase)",
      "64:   }",
      "66:   return dest",
      "",
      "[Removed Lines]",
      "62:   if (reqBase && !reqBase.startsWith(dest.origin)) {",
      "63:     throw new Error('source must be a relative path string')",
      "",
      "[Added Lines]",
      "62:   if (reqBase) {",
      "63:     if (!reqBase.endsWith('/') && dest.href.length > reqBase.length) {",
      "64:       reqBase = reqBase + '/'",
      "65:     }",
      "67:     if (!dest.href.startsWith(reqBase)) {",
      "68:       throw new Error('source must be a relative path string')",
      "69:     }",
      "",
      "---------------"
    ],
    "test/build-url.js||test/build-url.js": [
      "File: test/build-url.js -> test/build-url.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "21:   t.equal(url.href, 'http://localhost/hi')",
      "22: })",
      "24: const errorInputs = [",
      "25:   { source: '//10.0.0.10/hi', base: 'http://localhost' },",
      "26:   { source: 'http://10.0.0.10/hi', base: 'http://localhost' },",
      "27:   { source: 'https://10.0.0.10/hi', base: 'http://localhost' },",
      "28:   { source: 'blah://10.0.0.10/hi', base: 'http://localhost' },",
      "29:   { source: '//httpbin.org/hi', base: 'http://localhost' },",
      "31: ]",
      "33: test('should throw when trying to override base', (t) => {",
      "",
      "[Removed Lines]",
      "30:   { source: 'urn:foo:bar', base: 'http://localhost' }",
      "",
      "[Added Lines]",
      "24: test('should handle lack of trailing slash in base', (t) => {",
      "25:   t.plan(3)",
      "26:   let url = buildURL('hi', 'http://localhost/hi')",
      "27:   t.equal(url.href, 'http://localhost/hi')",
      "29:   url = buildURL('hi/', 'http://localhost/hi')",
      "30:   t.equal(url.href, 'http://localhost/hi/')",
      "32:   url = buildURL('hi/more', 'http://localhost/hi')",
      "33:   t.equal(url.href, 'http://localhost/hi/more')",
      "34: })",
      "42:   { source: 'urn:foo:bar', base: 'http://localhost' },",
      "43:   { source: 'http://localhost/private', base: 'http://localhost/exposed/' },",
      "44:   { source: 'http://localhost/exposed-extra', base: 'http://localhost/exposed' },",
      "45:   { source: '/private', base: 'http://localhost/exposed/' },",
      "46:   { source: '/exposed-extra', base: 'http://localhost/exposed' },",
      "47:   { source: '../private', base: 'http://localhost/exposed/' },",
      "48:   { source: 'exposed-extra', base: 'http://localhost/exposed' }",
      "",
      "---------------"
    ],
    "test/unix-http.js||test/unix-http.js": [
      "File: test/unix-http.js -> test/unix-http.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "13:   process.exit(0)",
      "14: }",
      "16: const instance = Fastify()",
      "19: t.plan(10)",
      "20: t.tearDown(instance.close.bind(instance))",
      "24: try {",
      "25:   fs.unlinkSync(socketPath)",
      "26: } catch (_) {",
      "",
      "[Removed Lines]",
      "17: instance.register(From)",
      "22: const socketPath = `${__filename}.socket`",
      "",
      "[Added Lines]",
      "16: const socketPath = `${__filename}.socket`",
      "17: const upstream = `unix+http://${querystring.escape(socketPath)}/`",
      "20: instance.register(From, { base: upstream })",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "37: })",
      "39: instance.get('/', (request, reply) => {",
      "41: })",
      "43: t.tearDown(target.close.bind(target))",
      "",
      "[Removed Lines]",
      "40:   reply.from(`unix+http://${querystring.escape(socketPath)}/hello`)",
      "",
      "[Added Lines]",
      "41:   reply.from('hello')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6c0422eb55fb2c77882927147b58b5bd6239666",
      "candidate_info": {
        "commit_hash": "b6c0422eb55fb2c77882927147b58b5bd6239666",
        "repo": "fastify/fastify-reply-from",
        "commit_url": "https://github.com/fastify/fastify-reply-from/commit/b6c0422eb55fb2c77882927147b58b5bd6239666",
        "files": [
          "lib/utils.js",
          "test/build-url.js"
        ],
        "message": "fix: handle default port in `base` (#196)",
        "before_after_code_files": [
          "lib/utils.js||lib/utils.js",
          "test/build-url.js||test/build-url.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/utils.js||lib/utils.js",
            "test/build-url.js||test/build-url.js"
          ],
          "candidate": [
            "lib/utils.js||lib/utils.js",
            "test/build-url.js||test/build-url.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/utils.js||lib/utils.js": [
          "File: lib/utils.js -> lib/utils.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: function buildURL (source, reqBase) {",
          "59:   const dest = new URL(source, reqBase)",
          "65:     }",
          "68:       throw new Error('source must be a relative path string')",
          "69:     }",
          "70:   }",
          "",
          "[Removed Lines]",
          "62:   if (reqBase) {",
          "63:     if (!reqBase.endsWith('/') && dest.href.length > reqBase.length) {",
          "64:       reqBase = reqBase + '/'",
          "67:     if (!dest.href.startsWith(reqBase)) {",
          "",
          "[Added Lines]",
          "59:   let baseOrigin = reqBase ? new URL(reqBase).href : undefined",
          "63:   if (baseOrigin) {",
          "64:     if (!baseOrigin.endsWith('/') && dest.href.length > baseOrigin.length) {",
          "65:       baseOrigin = baseOrigin + '/'",
          "68:     if (!dest.href.startsWith(baseOrigin)) {",
          "",
          "---------------"
        ],
        "test/build-url.js||test/build-url.js": [
          "File: test/build-url.js -> test/build-url.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   t.equal(url.href, 'http://localhost/hi/more')",
          "34: })",
          "36: const errorInputs = [",
          "37:   { source: '//10.0.0.10/hi', base: 'http://localhost' },",
          "38:   { source: 'http://10.0.0.10/hi', base: 'http://localhost' },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: test('should handle default port in base', (t) => {",
          "37:   t.plan(2)",
          "38:   let url = buildURL('/hi', 'http://localhost:80/hi')",
          "39:   t.equal(url.href, 'http://localhost/hi')",
          "41:   url = buildURL('/hi', 'https://localhost:443/hi')",
          "42:   t.equal(url.href, 'https://localhost/hi')",
          "43: })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "641be7591f5138bb74c19c08128b234de8b3854a",
      "candidate_info": {
        "commit_hash": "641be7591f5138bb74c19c08128b234de8b3854a",
        "repo": "fastify/fastify-reply-from",
        "commit_url": "https://github.com/fastify/fastify-reply-from/commit/641be7591f5138bb74c19c08128b234de8b3854a",
        "files": [
          "lib/utils.js",
          "test/build-url.js",
          "test/unix-http.js"
        ],
        "message": "Merge pull request from GHSA-qmw8-3v4g-gwj4\n\n* fix: Re-enable unix+http:// base URL, prevent escape of base URL path\n\nCo-Authored-By: Corey Farrell <git@cfware.com>\n\n* More fixes\n\n* Test more build-url error cases\n\nCo-authored-by: Corey Farrell <git@cfware.com>",
        "before_after_code_files": [
          "lib/utils.js||lib/utils.js",
          "test/build-url.js||test/build-url.js",
          "test/unix-http.js||test/unix-http.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/utils.js||lib/utils.js",
            "test/build-url.js||test/build-url.js",
            "test/unix-http.js||test/unix-http.js"
          ],
          "candidate": [
            "lib/utils.js||lib/utils.js",
            "test/build-url.js||test/build-url.js",
            "test/unix-http.js||test/unix-http.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/utils.js||lib/utils.js": [
          "File: lib/utils.js -> lib/utils.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   const dest = new URL(source, reqBase)",
          "64:   }",
          "66:   return dest",
          "",
          "[Removed Lines]",
          "62:   if (reqBase && !reqBase.startsWith(dest.origin)) {",
          "63:     throw new Error('source must be a relative path string')",
          "",
          "[Added Lines]",
          "62:   if (reqBase) {",
          "63:     if (!reqBase.endsWith('/') && dest.href.length > reqBase.length) {",
          "64:       reqBase = reqBase + '/'",
          "65:     }",
          "67:     if (!dest.href.startsWith(reqBase)) {",
          "68:       throw new Error('source must be a relative path string')",
          "69:     }",
          "",
          "---------------"
        ],
        "test/build-url.js||test/build-url.js": [
          "File: test/build-url.js -> test/build-url.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   t.equal(url.href, 'http://localhost/hi')",
          "22: })",
          "24: const errorInputs = [",
          "25:   { source: '//10.0.0.10/hi', base: 'http://localhost' },",
          "26:   { source: 'http://10.0.0.10/hi', base: 'http://localhost' },",
          "27:   { source: 'https://10.0.0.10/hi', base: 'http://localhost' },",
          "28:   { source: 'blah://10.0.0.10/hi', base: 'http://localhost' },",
          "29:   { source: '//httpbin.org/hi', base: 'http://localhost' },",
          "31: ]",
          "33: test('should throw when trying to override base', (t) => {",
          "",
          "[Removed Lines]",
          "30:   { source: 'urn:foo:bar', base: 'http://localhost' }",
          "",
          "[Added Lines]",
          "24: test('should handle lack of trailing slash in base', (t) => {",
          "25:   t.plan(3)",
          "26:   let url = buildURL('hi', 'http://localhost/hi')",
          "27:   t.equal(url.href, 'http://localhost/hi')",
          "29:   url = buildURL('hi/', 'http://localhost/hi')",
          "30:   t.equal(url.href, 'http://localhost/hi/')",
          "32:   url = buildURL('hi/more', 'http://localhost/hi')",
          "33:   t.equal(url.href, 'http://localhost/hi/more')",
          "34: })",
          "42:   { source: 'urn:foo:bar', base: 'http://localhost' },",
          "43:   { source: 'http://localhost/private', base: 'http://localhost/exposed/' },",
          "44:   { source: 'http://localhost/exposed-extra', base: 'http://localhost/exposed' },",
          "45:   { source: '/private', base: 'http://localhost/exposed/' },",
          "46:   { source: '/exposed-extra', base: 'http://localhost/exposed' },",
          "47:   { source: '../private', base: 'http://localhost/exposed/' },",
          "48:   { source: 'exposed-extra', base: 'http://localhost/exposed' }",
          "",
          "---------------"
        ],
        "test/unix-http.js||test/unix-http.js": [
          "File: test/unix-http.js -> test/unix-http.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   process.exit(0)",
          "14: }",
          "16: const instance = Fastify()",
          "19: t.plan(10)",
          "20: t.tearDown(instance.close.bind(instance))",
          "24: try {",
          "25:   fs.unlinkSync(socketPath)",
          "26: } catch (_) {",
          "",
          "[Removed Lines]",
          "17: instance.register(From)",
          "22: const socketPath = `${__filename}.socket`",
          "",
          "[Added Lines]",
          "16: const socketPath = `${__filename}.socket`",
          "17: const upstream = `unix+http://${querystring.escape(socketPath)}/`",
          "20: instance.register(From, { base: upstream })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: })",
          "39: instance.get('/', (request, reply) => {",
          "41: })",
          "43: t.tearDown(target.close.bind(target))",
          "",
          "[Removed Lines]",
          "40:   reply.from(`unix+http://${querystring.escape(socketPath)}/hello`)",
          "",
          "[Added Lines]",
          "41:   reply.from('hello')",
          "",
          "---------------"
        ]
      }
    }
  ]
}