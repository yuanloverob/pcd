{
  "cve_id": "CVE-2023-26144",
  "cve_desc": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
  "repo": "graphql/graphql-js",
  "patch_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
  "patch_info": {
    "commit_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
    "repo": "graphql/graphql-js",
    "commit_url": "https://github.com/graphql/graphql-js/commit/f94b511386c7e47bd0380dcd56553dc063320226",
    "files": [
      "benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ],
    "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3958)\n\nCo-authored-by: AaronMoat <AaronMoat@users.noreply.github.com>\nCo-authored-by: Ivan Goncharov <ivan.goncharov.ua@gmail.com>\nResolves https://github.com/graphql/graphql-js/issues/3955 (at least",
    "before_after_code_files": [
      "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ]
  },
  "patch_diff": {
    "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
      "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { graphqlSync } from 'graphql/graphql.js';",
      "2: import { buildSchema } from 'graphql/utilities/buildASTSchema.js';",
      "4: const schema = buildSchema('type Query { hello: String! }');",
      "5: const source = `{ ${'hello '.repeat(250)}}`;",
      "7: export const benchmark = {",
      "8:   name: 'Many repeated fields',",
      "9:   count: 5,",
      "10:   measure() {",
      "11:     graphqlSync({ schema, source });",
      "12:   },",
      "13: };",
      "",
      "---------------"
    ],
    "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts": [
      "File: src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts -> src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "179:     ]);",
      "180:   });",
      "182:   it('mix of stream and no stream', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:   it('different stream directive extra argument', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "185:         name @stream(label: \"streamLabel\", initialCount: 1)",
      "186:         name @stream(label: \"streamLabel\", initialCount: 1, extraArg: true)",
      "187:       }",
      "188:     `).toDeepEqual([",
      "189:       {",
      "190:         message:",
      "191:           'Fields \"name\" conflict because they have differing stream directives. Use different aliases on the fields to fetch both if this was intentional.',",
      "192:         locations: [",
      "193:           { line: 3, column: 9 },",
      "194:           { line: 4, column: 9 },",
      "195:         ],",
      "196:       },",
      "197:     ]);",
      "198:   });",
      "",
      "---------------"
    ],
    "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
      "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   DirectiveNode,",
      "8:   FieldNode,",
      "9:   FragmentDefinitionNode,",
      "11:   SelectionSetNode,",
      "12: } from '../../language/ast.js';",
      "13: import { Kind } from '../../language/kinds.js';",
      "14: import { print } from '../../language/printer.js';",
      "",
      "[Removed Lines]",
      "10:   ObjectValueNode,",
      "",
      "[Added Lines]",
      "11:   ValueNode,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "592:     }",
      "596:       return [",
      "597:         [responseName, 'they have differing arguments'],",
      "598:         [node1],",
      "",
      "[Removed Lines]",
      "595:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
      "",
      "[Added Lines]",
      "595:     if (!sameArguments(node1, node2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "649:   }",
      "650: }",
      "665: }",
      "667: function getStreamDirective(",
      "",
      "[Removed Lines]",
      "652: function stringifyArguments(fieldNode: FieldNode | DirectiveNode): string {",
      "654:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
      "656:   const inputObjectWithArgs: ObjectValueNode = {",
      "657:     kind: Kind.OBJECT,",
      "658:     fields: args.map((argNode) => ({",
      "659:       kind: Kind.OBJECT_FIELD,",
      "660:       name: argNode.name,",
      "661:       value: argNode.value,",
      "662:     })),",
      "663:   };",
      "664:   return print(sortValueNode(inputObjectWithArgs));",
      "",
      "[Added Lines]",
      "652: function sameArguments(",
      "653:   node1: FieldNode | DirectiveNode,",
      "654:   node2: FieldNode | DirectiveNode,",
      "655: ): boolean {",
      "656:   const args1 = node1.arguments;",
      "657:   const args2 = node2.arguments;",
      "659:   if (args1 === undefined || args1.length === 0) {",
      "660:     return args2 === undefined || args2.length === 0;",
      "661:   }",
      "662:   if (args2 === undefined || args2.length === 0) {",
      "663:     return false;",
      "664:   }",
      "666:   if (args1.length !== args2.length) {",
      "667:     return false;",
      "668:   }",
      "670:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
      "671:   return args1.every((arg1) => {",
      "672:     const value1 = arg1.value;",
      "673:     const value2 = values2.get(arg1.name.value);",
      "674:     if (value2 === undefined) {",
      "675:       return false;",
      "676:     }",
      "678:     return stringifyValue(value1) === stringifyValue(value2);",
      "679:   });",
      "680: }",
      "682: function stringifyValue(value: ValueNode): string | null {",
      "683:   return print(sortValueNode(value));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "681:     return true;",
      "682:   } else if (stream1 && stream2) {",
      "685:   }",
      "687:   return false;",
      "",
      "[Removed Lines]",
      "684:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
      "",
      "[Added Lines]",
      "703:     return sameArguments(stream1, stream2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c6ebbf4ef933307494c422faf547dfbe3961b42a",
      "candidate_info": {
        "commit_hash": "c6ebbf4ef933307494c422faf547dfbe3961b42a",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/c6ebbf4ef933307494c422faf547dfbe3961b42a",
        "files": [
          "src/execution/__tests__/stream-test.ts",
          "src/execution/execute.ts"
        ],
        "message": "fix(incremental): fix paths for subsequent async stream items (#4160)",
        "before_after_code_files": [
          "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts",
          "src/execution/execute.ts||src/execution/execute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts": [
          "File: src/execution/__tests__/stream-test.ts -> src/execution/__tests__/stream-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2117:     const document = parse(`",
          "2118:     query {",
          "2120:         ...NameFragment @defer(label: \"DeferName\") @defer(label: \"DeferName\")",
          "2121:         id",
          "2122:       }",
          "",
          "[Removed Lines]",
          "2119:       friendList @stream(initialCount: 1, label:\"stream-label\") {",
          "",
          "[Added Lines]",
          "2119:       friendList @stream(label:\"stream-label\") {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2146:     const result1 = executeResult.initialResult;",
          "2147:     expectJSON(result1).toDeepEqual({",
          "2148:       data: {",
          "2150:       },",
          "2155:       hasNext: true,",
          "2156:     });",
          "",
          "[Removed Lines]",
          "2149:         friendList: [{ id: '1' }],",
          "2151:       pending: [",
          "2152:         { id: '0', path: ['friendList', 0], label: 'DeferName' },",
          "2153:         { id: '1', path: ['friendList'], label: 'stream-label' },",
          "2154:       ],",
          "",
          "[Added Lines]",
          "2149:         friendList: [],",
          "2151:       pending: [{ id: '0', path: ['friendList'], label: 'stream-label' }],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2160:     const result2 = await result2Promise;",
          "2161:     expectJSON(result2).toDeepEqual({",
          "2162:       value: {",
          "2163:         incremental: [",
          "2164:           {",
          "2166:             id: '0',",
          "2167:           },",
          "2168:         ],",
          "2170:         hasNext: true,",
          "2171:       },",
          "2172:       done: false,",
          "",
          "[Removed Lines]",
          "2165:             data: { name: 'Luke' },",
          "2169:         completed: [{ id: '0' }],",
          "",
          "[Added Lines]",
          "2160:         pending: [{ id: '1', path: ['friendList', 0], label: 'DeferName' }],",
          "2163:             items: [{ id: '1' }],",
          "2166:           {",
          "2167:             data: { name: 'Luke' },",
          "2168:             id: '1',",
          "2169:           },",
          "2171:         completed: [{ id: '1' }],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2181:         incremental: [",
          "2182:           {",
          "2183:             items: [{ id: '2' }],",
          "2185:           },",
          "2186:         ],",
          "2187:         hasNext: true,",
          "",
          "[Removed Lines]",
          "2184:             id: '1',",
          "",
          "[Added Lines]",
          "2186:             id: '0',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2191:     const result4 = await iterator.next();",
          "2192:     expectJSON(result4).toDeepEqual({",
          "2193:       value: {",
          "2195:         hasNext: true,",
          "2196:       },",
          "2197:       done: false,",
          "",
          "[Removed Lines]",
          "2194:         completed: [{ id: '1' }],",
          "",
          "[Added Lines]",
          "2196:         completed: [{ id: '0' }],",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2387:     getNextAsyncStreamItemResult(",
          "2388:       streamItemQueue,",
          "2389:       streamPath,",
          "2391:       asyncIterator,",
          "2392:       exeContext,",
          "2393:       fieldGroup,",
          "",
          "[Removed Lines]",
          "2390:       index,",
          "",
          "[Added Lines]",
          "2390:       index + 1,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d7c8fccf5a9846a50785de04abda58a7eb13fc0",
      "candidate_info": {
        "commit_hash": "8d7c8fccf5a9846a50785de04abda58a7eb13fc0",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/8d7c8fccf5a9846a50785de04abda58a7eb13fc0",
        "files": [
          "package-lock.json",
          "package.json",
          "src/version.ts"
        ],
        "message": "17.0.0-alpha.3",
        "before_after_code_files": [
          "src/version.ts||src/version.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.ts||src/version.ts": [
          "File: src/version.ts -> src/version.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "7: export const version = '17.0.0-alpha.2' as string;",
          "",
          "[Added Lines]",
          "7: export const version = '17.0.0-alpha.3' as string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:   major: 17 as number,",
          "14:   minor: 0 as number,",
          "15:   patch: 0 as number,",
          "17: });",
          "",
          "[Removed Lines]",
          "16:   preReleaseTag: 'alpha.2' as string | null,",
          "",
          "[Added Lines]",
          "16:   preReleaseTag: 'alpha.3' as string | null,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7df786e86c7f4070b2625cf8f06946be67fbbe3a",
      "candidate_info": {
        "commit_hash": "7df786e86c7f4070b2625cf8f06946be67fbbe3a",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/7df786e86c7f4070b2625cf8f06946be67fbbe3a",
        "files": [
          "src/utilities/__tests__/buildClientSchema-test.ts",
          "src/utilities/__tests__/getIntrospectionQuery-test.ts",
          "src/utilities/buildClientSchema.ts",
          "src/utilities/getIntrospectionQuery.ts",
          "src/utilities/introspectionFromSchema.ts"
        ],
        "message": "Add `@oneOf` support to introspection query (#4078)",
        "before_after_code_files": [
          "src/utilities/__tests__/buildClientSchema-test.ts||src/utilities/__tests__/buildClientSchema-test.ts",
          "src/utilities/__tests__/getIntrospectionQuery-test.ts||src/utilities/__tests__/getIntrospectionQuery-test.ts",
          "src/utilities/buildClientSchema.ts||src/utilities/buildClientSchema.ts",
          "src/utilities/getIntrospectionQuery.ts||src/utilities/getIntrospectionQuery.ts",
          "src/utilities/introspectionFromSchema.ts||src/utilities/introspectionFromSchema.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/utilities/__tests__/buildClientSchema-test.ts||src/utilities/__tests__/buildClientSchema-test.ts": [
          "File: src/utilities/__tests__/buildClientSchema-test.ts -> src/utilities/__tests__/buildClientSchema-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "571:     expect(cycleIntrospection(sdl)).to.equal(sdl);",
          "572:   });",
          "574:   it('can use client schema for limited execution', () => {",
          "575:     const schema = buildSchema(`",
          "576:       scalar CustomScalar",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:   it('builds a schema with @oneOf directive', () => {",
          "575:     const sdl = dedent`",
          "576:       type Query {",
          "577:         someField(someArg: SomeInputObject): String",
          "578:       }",
          "580:       input SomeInputObject @oneOf {",
          "581:         someInputField1: String",
          "582:         someInputField2: String",
          "583:       }",
          "584:     `;",
          "586:     expect(cycleIntrospection(sdl)).to.equal(sdl);",
          "587:   });",
          "",
          "---------------"
        ],
        "src/utilities/__tests__/getIntrospectionQuery-test.ts||src/utilities/__tests__/getIntrospectionQuery-test.ts": [
          "File: src/utilities/__tests__/getIntrospectionQuery-test.ts -> src/utilities/__tests__/getIntrospectionQuery-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     );",
          "118:   });",
          "120:   it('include deprecated input field and args', () => {",
          "121:     expectIntrospectionQuery().toMatch('includeDeprecated: true', 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:   it('include \"isOneOf\" field on input objects', () => {",
          "121:     expectIntrospectionQuery().toNotMatch('isOneOf');",
          "123:     expectIntrospectionQuery({ inputObjectOneOf: true }).toMatch('isOneOf', 1);",
          "125:     expectIntrospectionQuery({ inputObjectOneOf: false }).toNotMatch('isOneOf');",
          "126:   });",
          "",
          "---------------"
        ],
        "src/utilities/buildClientSchema.ts||src/utilities/buildClientSchema.ts": [
          "File: src/utilities/buildClientSchema.ts -> src/utilities/buildClientSchema.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:       name: inputObjectIntrospection.name,",
          "312:       description: inputObjectIntrospection.description,",
          "313:       fields: () => buildInputValueDefMap(inputObjectIntrospection.inputFields),",
          "314:     });",
          "315:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:       isOneOf: inputObjectIntrospection.isOneOf,",
          "",
          "---------------"
        ],
        "src/utilities/getIntrospectionQuery.ts||src/utilities/getIntrospectionQuery.ts": [
          "File: src/utilities/getIntrospectionQuery.ts -> src/utilities/getIntrospectionQuery.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   inputValueDeprecation?: boolean;",
          "35: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   inputObjectOneOf?: boolean;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     directiveIsRepeatable: false,",
          "46:     schemaDescription: false,",
          "47:     inputValueDeprecation: false,",
          "48:     ...options,",
          "49:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     inputObjectOneOf: false,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:   function inputDeprecation(str: string) {",
          "63:     return optionsWithDefault.inputValueDeprecation ? str : '';",
          "64:   }",
          "66:   return `",
          "67:     query IntrospectionQuery {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   const inputObjectOneOf = optionsWithDefault.inputObjectOneOf ? 'isOneOf' : '';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:       name",
          "91:       ${descriptions}",
          "92:       ${specifiedByUrl}",
          "93:       fields(includeDeprecated: true) {",
          "94:         name",
          "95:         ${descriptions}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:       ${inputObjectOneOf}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:   readonly name: string;",
          "260:   readonly description?: Maybe<string>;",
          "261:   readonly inputFields: ReadonlyArray<IntrospectionInputValue>;",
          "262: }",
          "264: export interface IntrospectionListTypeRef<",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:   readonly isOneOf: boolean;",
          "",
          "---------------"
        ],
        "src/utilities/introspectionFromSchema.ts||src/utilities/introspectionFromSchema.ts": [
          "File: src/utilities/introspectionFromSchema.ts -> src/utilities/introspectionFromSchema.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     directiveIsRepeatable: true,",
          "31:     schemaDescription: true,",
          "32:     inputValueDeprecation: true,",
          "33:     ...options,",
          "34:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     inputObjectOneOf: true,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15ab731c914b2bf1e2dabf3468097b6cd9ae6eea",
      "candidate_info": {
        "commit_hash": "15ab731c914b2bf1e2dabf3468097b6cd9ae6eea",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/15ab731c914b2bf1e2dabf3468097b6cd9ae6eea",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts",
          "src/execution/execute.ts",
          "src/execution/types.ts"
        ],
        "message": "refactor(IncrementalGraph): use set of pending deferred grouped field set results to reduce mutation",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts",
          "src/execution/execute.ts||src/execution/execute.ts",
          "src/execution/types.ts||src/execution/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import type {",
          "5:   DeferredFragmentRecord,",
          "6:   DeferredGroupedFieldSetResult,",
          "7:   IncrementalDataRecord,",
          "8:   IncrementalDataRecordResult,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:   DeferredGroupedFieldSetRecord,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: interface DeferredFragmentNode {",
          "16:   deferredFragmentRecord: DeferredFragmentRecord;",
          "18:   results: Array<DeferredGroupedFieldSetResult>;",
          "20:   children: Array<DeferredFragmentNode>;",
          "21: }",
          "",
          "[Removed Lines]",
          "17:   expectedReconcilableResults: number;",
          "19:   reconcilableResults: Array<ReconcilableDeferredGroupedFieldSetResult>;",
          "",
          "[Added Lines]",
          "18:   deferredGroupedFieldSetRecords: Set<DeferredGroupedFieldSetRecord>;",
          "20:   reconcilableResults: Set<ReconcilableDeferredGroupedFieldSetResult>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:           const deferredFragmentNode = this._addDeferredFragmentNode(",
          "68:             deferredFragmentRecord,",
          "69:           );",
          "71:         }",
          "73:         const result = incrementalDataRecord.result;",
          "",
          "[Removed Lines]",
          "70:           deferredFragmentNode.expectedReconcilableResults++;",
          "",
          "[Added Lines]",
          "71:           deferredFragmentNode.deferredGroupedFieldSetRecords.add(",
          "72:             incrementalDataRecord,",
          "73:           );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:     reconcilableResult: ReconcilableDeferredGroupedFieldSetResult,",
          "105:   ): void {",
          "106:     const deferredFragmentNodes: Array<DeferredFragmentNode> =",
          "108:         .map((deferredFragmentRecord) =>",
          "109:           this._deferredFragmentNodes.get(deferredFragmentRecord),",
          "110:         )",
          "111:         .filter<DeferredFragmentNode>(isDeferredFragmentNode);",
          "112:     for (const deferredFragmentNode of deferredFragmentNodes) {",
          "114:     }",
          "115:   }",
          "",
          "[Removed Lines]",
          "107:       reconcilableResult.deferredFragmentRecords",
          "113:       deferredFragmentNode.reconcilableResults.push(reconcilableResult);",
          "",
          "[Added Lines]",
          "110:       reconcilableResult.deferredGroupedFieldSetRecord.deferredFragmentRecords",
          "116:       deferredFragmentNode.deferredGroupedFieldSetRecords.delete(",
          "117:         reconcilableResult.deferredGroupedFieldSetRecord,",
          "118:       );",
          "119:       deferredFragmentNode.reconcilableResults.add(reconcilableResult);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:       if (isStreamNode(node)) {",
          "121:         this._pending.add(node);",
          "122:         newPending.push(node);",
          "124:         this._pending.add(node);",
          "125:         newPending.push(node.deferredFragmentRecord);",
          "126:       } else {",
          "",
          "[Removed Lines]",
          "123:       } else if (node.expectedReconcilableResults) {",
          "",
          "[Added Lines]",
          "129:       } else if (node.deferredGroupedFieldSetRecords.size > 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "181:     if (deferredFragmentNode === undefined) {",
          "182:       return undefined;",
          "183:     }",
          "189:       return;",
          "190:     }",
          "191:     this._removePending(deferredFragmentNode);",
          "192:     for (const child of deferredFragmentNode.children) {",
          "193:       this._newPending.add(child);",
          "",
          "[Removed Lines]",
          "184:     const reconcilableResults = deferredFragmentNode.reconcilableResults;",
          "185:     if (",
          "186:       deferredFragmentNode.expectedReconcilableResults !==",
          "187:       reconcilableResults.length",
          "188:     ) {",
          "",
          "[Added Lines]",
          "190:     if (deferredFragmentNode.deferredGroupedFieldSetRecords.size > 0) {",
          "193:     const reconcilableResults = Array.from(",
          "194:       deferredFragmentNode.reconcilableResults,",
          "195:     );",
          "196:     for (const reconcilableResult of reconcilableResults) {",
          "197:       for (const otherDeferredFragmentRecord of reconcilableResult",
          "198:         .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "199:         const otherDeferredFragmentNode = this._deferredFragmentNodes.get(",
          "200:           otherDeferredFragmentRecord,",
          "201:         );",
          "202:         if (otherDeferredFragmentNode === undefined) {",
          "203:           continue;",
          "204:         }",
          "205:         otherDeferredFragmentNode.reconcilableResults.delete(",
          "206:           reconcilableResult,",
          "207:         );",
          "208:       }",
          "209:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "240:     }",
          "241:     deferredFragmentNode = {",
          "242:       deferredFragmentRecord,",
          "244:       results: [],",
          "246:       children: [],",
          "247:     };",
          "248:     this._deferredFragmentNodes.set(",
          "",
          "[Removed Lines]",
          "243:       expectedReconcilableResults: 0,",
          "245:       reconcilableResults: [],",
          "",
          "[Added Lines]",
          "262:       deferredGroupedFieldSetRecords: new Set(),",
          "264:       reconcilableResults: new Set(),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "263:     result: DeferredGroupedFieldSetResult,",
          "264:   ): void {",
          "265:     let isPending = false;",
          "267:       const deferredFragmentNode = this._deferredFragmentNodes.get(",
          "268:         deferredFragmentRecord,",
          "269:       );",
          "",
          "[Removed Lines]",
          "266:     for (const deferredFragmentRecord of result.deferredFragmentRecords) {",
          "",
          "[Added Lines]",
          "285:     for (const deferredFragmentRecord of result.deferredGroupedFieldSetRecord",
          "286:       .deferredFragmentRecords) {",
          "",
          "---------------"
        ],
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:         deferredGroupedFieldSetResult,",
          "231:       )",
          "232:     ) {",
          "234:         const id = deferredFragmentRecord.id;",
          "235:         if (id !== undefined) {",
          "236:           context.completed.push({",
          "",
          "[Removed Lines]",
          "233:       for (const deferredFragmentRecord of deferredGroupedFieldSetResult.deferredFragmentRecords) {",
          "",
          "[Added Lines]",
          "233:       for (const deferredFragmentRecord of deferredGroupedFieldSetResult",
          "234:         .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:       this._incrementalGraph.addIncrementalDataRecords(incrementalDataRecords);",
          "254:     }",
          "257:       const id = deferredFragmentRecord.id;",
          "",
          "[Removed Lines]",
          "256:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult.deferredFragmentRecords) {",
          "",
          "[Added Lines]",
          "257:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult",
          "258:       .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "269:       }",
          "270:       const incremental = context.incremental;",
          "271:       for (const reconcilableResult of reconcilableResults) {",
          "276:         const { bestId, subPath } = this._getBestIdAndSubPath(",
          "277:           id,",
          "278:           deferredFragmentRecord,",
          "",
          "[Removed Lines]",
          "272:         if (reconcilableResult.sent) {",
          "273:           continue;",
          "274:         }",
          "275:         reconcilableResult.sent = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "343:     let maxLength = pathToArray(initialDeferredFragmentRecord.path).length;",
          "344:     let bestId = initialId;",
          "347:       if (deferredFragmentRecord === initialDeferredFragmentRecord) {",
          "348:         continue;",
          "349:       }",
          "",
          "[Removed Lines]",
          "346:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult.deferredFragmentRecords) {",
          "",
          "[Added Lines]",
          "344:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult",
          "345:       .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2089:       deferMap,",
          "2090:     );",
          "2092:     const executor = () =>",
          "2093:       executeDeferredGroupedFieldSet(",
          "2095:         exeContext,",
          "2096:         parentType,",
          "2097:         sourceValue,",
          "",
          "[Removed Lines]",
          "2094:         deferredFragmentRecords,",
          "",
          "[Added Lines]",
          "2092:     const deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord = {",
          "2093:       deferredFragmentRecords,",
          "2094:       result: undefined as unknown as DeferredGroupedFieldSetResult,",
          "2095:     };",
          "2099:         deferredGroupedFieldSetRecord,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2104:         deferMap,",
          "2105:       );",
          "2114:     newDeferredGroupedFieldSetRecords.push(deferredGroupedFieldSetRecord);",
          "2115:   }",
          "",
          "[Removed Lines]",
          "2107:     const deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord = {",
          "2108:       deferredFragmentRecords,",
          "2109:       result: shouldDefer(parentDeferUsages, deferUsageSet)",
          "2110:         ? Promise.resolve().then(executor)",
          "2111:         : executor(),",
          "2112:     };",
          "",
          "[Added Lines]",
          "2112:     deferredGroupedFieldSetRecord.result = shouldDefer(",
          "2113:       parentDeferUsages,",
          "2114:       deferUsageSet,",
          "2115:     )",
          "2116:       ? Promise.resolve().then(executor)",
          "2117:       : executor();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2134: }",
          "2136: function executeDeferredGroupedFieldSet(",
          "2138:   exeContext: ExecutionContext,",
          "2139:   parentType: GraphQLObjectType,",
          "2140:   sourceValue: unknown,",
          "",
          "[Removed Lines]",
          "2137:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>,",
          "",
          "[Added Lines]",
          "2142:   deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2156:     );",
          "2157:   } catch (error) {",
          "2158:     return {",
          "2160:       path: pathToArray(path),",
          "2161:       errors: withError(incrementalContext.errors, error),",
          "2162:     };",
          "",
          "[Removed Lines]",
          "2159:       deferredFragmentRecords,",
          "",
          "[Added Lines]",
          "2164:       deferredGroupedFieldSetRecord,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2167:       (resolved) =>",
          "2168:         buildDeferredGroupedFieldSetResult(",
          "2169:           incrementalContext.errors,",
          "2171:           path,",
          "2172:           resolved,",
          "2173:         ),",
          "2174:       (error) => ({",
          "2176:         path: pathToArray(path),",
          "2177:         errors: withError(incrementalContext.errors, error),",
          "2178:       }),",
          "",
          "[Removed Lines]",
          "2170:           deferredFragmentRecords,",
          "2175:         deferredFragmentRecords,",
          "",
          "[Added Lines]",
          "2175:           deferredGroupedFieldSetRecord,",
          "2180:         deferredGroupedFieldSetRecord,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2182:   return buildDeferredGroupedFieldSetResult(",
          "2183:     incrementalContext.errors,",
          "2185:     path,",
          "2186:     result,",
          "2187:   );",
          "",
          "[Removed Lines]",
          "2184:     deferredFragmentRecords,",
          "",
          "[Added Lines]",
          "2189:     deferredGroupedFieldSetRecord,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2190: function buildDeferredGroupedFieldSetResult(",
          "2191:   errors: ReadonlyArray<GraphQLError> | undefined,",
          "2193:   path: Path | undefined,",
          "2194:   result: GraphQLWrappedResult<ObjMap<unknown>>,",
          "2195: ): DeferredGroupedFieldSetResult {",
          "2196:   return {",
          "2198:     path: pathToArray(path),",
          "2199:     result:",
          "2200:       errors === undefined ? { data: result[0] } : { data: result[0], errors },",
          "",
          "[Removed Lines]",
          "2192:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>,",
          "2197:     deferredFragmentRecords,",
          "",
          "[Added Lines]",
          "2197:   deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "2202:     deferredGroupedFieldSetRecord,",
          "",
          "---------------"
        ],
        "src/execution/types.ts||src/execution/types.ts": [
          "File: src/execution/types.ts -> src/execution/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: export function isDeferredGroupedFieldSetResult(",
          "180:   subsequentResult: DeferredGroupedFieldSetResult | StreamItemsResult,",
          "181: ): subsequentResult is DeferredGroupedFieldSetResult {",
          "183: }",
          "185: export interface ReconcilableDeferredGroupedFieldSetResult {",
          "187:   path: Array<string | number>;",
          "188:   result: BareDeferredGroupedFieldSetResult;",
          "189:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "191:   errors?: never;",
          "192: }",
          "194: interface NonReconcilableDeferredGroupedFieldSetResult {",
          "197:   path: Array<string | number>;",
          "198:   result?: never;",
          "199: }",
          "",
          "[Removed Lines]",
          "182:   return 'deferredFragmentRecords' in subsequentResult;",
          "186:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "190:   sent?: true | undefined;",
          "195:   errors: ReadonlyArray<GraphQLError>;",
          "196:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "",
          "[Added Lines]",
          "182:   return 'deferredGroupedFieldSetRecord' in subsequentResult;",
          "186:   deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord;",
          "194:   deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord;",
          "196:   errors: ReadonlyArray<GraphQLError>;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d777e6fc07da962fe4d357c24921f0022f3e5c9",
      "candidate_info": {
        "commit_hash": "6d777e6fc07da962fe4d357c24921f0022f3e5c9",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/6d777e6fc07da962fe4d357c24921f0022f3e5c9",
        "files": [
          "src/execution/buildFieldPlan.ts",
          "src/execution/collectFields.ts",
          "src/execution/execute.ts",
          "src/validation/rules/SingleFieldSubscriptionsRule.ts"
        ],
        "message": "perf: allow skipping of field plan generation (#4050)\n\nin the non-deferred case.\n\ndepends on #4026\n\n---------\n\nCo-authored-by: Rob Richard <rob@1stdibs.com>",
        "before_after_code_files": [
          "src/execution/buildFieldPlan.ts||src/execution/buildFieldPlan.ts",
          "src/execution/collectFields.ts||src/execution/collectFields.ts",
          "src/execution/execute.ts||src/execution/execute.ts",
          "src/validation/rules/SingleFieldSubscriptionsRule.ts||src/validation/rules/SingleFieldSubscriptionsRule.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/buildFieldPlan.ts||src/execution/buildFieldPlan.ts": [
          "File: src/execution/buildFieldPlan.ts -> src/execution/buildFieldPlan.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { getBySet } from '../jsutils/getBySet.js';",
          "2: import { isSameSet } from '../jsutils/isSameSet.js';",
          "6: export type DeferUsageSet = ReadonlySet<DeferUsage>;",
          "11: }",
          "15: export function buildFieldPlan(",
          "17:   parentDeferUsages: DeferUsageSet = new Set<DeferUsage>(),",
          "41:   const map = new Map<",
          "42:     string,",
          "43:     {",
          "44:       deferUsageSet: DeferUsageSet;",
          "46:     }",
          "47:   >();",
          "50:     const deferUsageSet = new Set<DeferUsage>();",
          "51:     let inOriginalResult = false;",
          "53:       const deferUsage = fieldDetails.deferUsage;",
          "54:       if (deferUsage === undefined) {",
          "55:         inOriginalResult = true;",
          "",
          "[Removed Lines]",
          "4: import type { DeferUsage, FieldDetails } from './collectFields.js';",
          "8: export interface FieldGroup {",
          "9:   fields: ReadonlyArray<FieldDetails>;",
          "10:   deferUsages?: DeferUsageSet | undefined;",
          "13: export type GroupedFieldSet = Map<string, FieldGroup>;",
          "16:   fields: Map<string, ReadonlyArray<FieldDetails>>,",
          "18: ): {",
          "19:   groupedFieldSet: GroupedFieldSet;",
          "20:   newGroupedFieldSets: Map<DeferUsageSet, GroupedFieldSet>;",
          "21: } {",
          "22:   const groupedFieldSet = new Map<",
          "23:     string,",
          "24:     {",
          "25:       fields: Array<FieldDetails>;",
          "26:       deferUsages: DeferUsageSet;",
          "27:     }",
          "28:   >();",
          "30:   const newGroupedFieldSets = new Map<",
          "31:     DeferUsageSet,",
          "32:     Map<",
          "33:       string,",
          "34:       {",
          "35:         fields: Array<FieldDetails>;",
          "36:         deferUsages: DeferUsageSet;",
          "37:       }",
          "38:     >",
          "39:   >();",
          "45:       fieldDetailsList: ReadonlyArray<FieldDetails>;",
          "49:   for (const [responseKey, fieldDetailsList] of fields) {",
          "52:     for (const fieldDetails of fieldDetailsList) {",
          "",
          "[Added Lines]",
          "4: import type {",
          "5:   DeferUsage,",
          "6:   FieldGroup,",
          "7:   GroupedFieldSet,",
          "8: } from './collectFields.js';",
          "12: export interface FieldPlan {",
          "13:   groupedFieldSet: GroupedFieldSet;",
          "14:   newGroupedFieldSets: Map<DeferUsageSet, GroupedFieldSet>;",
          "18:   originalGroupedFieldSet: GroupedFieldSet,",
          "20: ): FieldPlan {",
          "21:   const groupedFieldSet = new Map<string, FieldGroup>();",
          "23:   const newGroupedFieldSets = new Map<DeferUsageSet, Map<string, FieldGroup>>();",
          "29:       fieldGroup: FieldGroup;",
          "33:   for (const [responseKey, fieldGroup] of originalGroupedFieldSet) {",
          "36:     for (const fieldDetails of fieldGroup) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:         }",
          "70:       });",
          "71:     }",
          "73:   }",
          "76:     if (isSameSet(deferUsageSet, parentDeferUsages)) {",
          "86:       continue;",
          "87:     }",
          "89:     let newGroupedFieldSet = getBySet(newGroupedFieldSets, deferUsageSet);",
          "90:     if (newGroupedFieldSet === undefined) {",
          "99:       newGroupedFieldSets.set(deferUsageSet, newGroupedFieldSet);",
          "100:     }",
          "110:   }",
          "112:   return {",
          "",
          "[Removed Lines]",
          "72:     map.set(responseKey, { deferUsageSet, fieldDetailsList });",
          "75:   for (const [responseKey, { deferUsageSet, fieldDetailsList }] of map) {",
          "77:       let fieldGroup = groupedFieldSet.get(responseKey);",
          "78:       if (fieldGroup === undefined) {",
          "79:         fieldGroup = {",
          "80:           fields: [],",
          "81:           deferUsages: deferUsageSet,",
          "82:         };",
          "83:         groupedFieldSet.set(responseKey, fieldGroup);",
          "84:       }",
          "85:       fieldGroup.fields.push(...fieldDetailsList);",
          "91:       newGroupedFieldSet = new Map<",
          "92:         string,",
          "93:         {",
          "94:           fields: Array<FieldDetails>;",
          "95:           deferUsages: DeferUsageSet;",
          "96:           knownDeferUsages: DeferUsageSet;",
          "97:         }",
          "98:       >();",
          "101:     let fieldGroup = newGroupedFieldSet.get(responseKey);",
          "102:     if (fieldGroup === undefined) {",
          "103:       fieldGroup = {",
          "104:         fields: [],",
          "105:         deferUsages: deferUsageSet,",
          "106:       };",
          "107:       newGroupedFieldSet.set(responseKey, fieldGroup);",
          "108:     }",
          "109:     fieldGroup.fields.push(...fieldDetailsList);",
          "",
          "[Added Lines]",
          "56:     map.set(responseKey, { deferUsageSet, fieldGroup });",
          "59:   for (const [responseKey, { deferUsageSet, fieldGroup }] of map) {",
          "61:       groupedFieldSet.set(responseKey, fieldGroup);",
          "67:       newGroupedFieldSet = new Map();",
          "70:     newGroupedFieldSet.set(responseKey, fieldGroup);",
          "",
          "---------------"
        ],
        "src/execution/collectFields.ts||src/execution/collectFields.ts": [
          "File: src/execution/collectFields.ts -> src/execution/collectFields.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   deferUsage: DeferUsage | undefined;",
          "37: }",
          "39: interface CollectFieldsContext {",
          "40:   schema: GraphQLSchema;",
          "41:   fragments: ObjMap<FragmentDefinitionNode>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: export type FieldGroup = ReadonlyArray<FieldDetails>;",
          "41: export type GroupedFieldSet = ReadonlyMap<string, FieldGroup>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   runtimeType: GraphQLObjectType,",
          "62:   operation: OperationDefinitionNode,",
          "63: ): {",
          "65:   newDeferUsages: ReadonlyArray<DeferUsage>;",
          "66: } {",
          "67:   const groupedFieldSet = new AccumulatorMap<string, FieldDetails>();",
          "",
          "[Removed Lines]",
          "64:   fields: Map<string, ReadonlyArray<FieldDetails>>;",
          "",
          "[Added Lines]",
          "68:   groupedFieldSet: GroupedFieldSet;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:     groupedFieldSet,",
          "82:     newDeferUsages,",
          "83:   );",
          "85: }",
          "",
          "[Removed Lines]",
          "84:   return { fields: groupedFieldSet, newDeferUsages };",
          "",
          "[Added Lines]",
          "88:   return { groupedFieldSet, newDeferUsages };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:   variableValues: { [variable: string]: unknown },",
          "102:   operation: OperationDefinitionNode,",
          "103:   returnType: GraphQLObjectType,",
          "105: ): {",
          "107:   newDeferUsages: ReadonlyArray<DeferUsage>;",
          "108: } {",
          "109:   const context: CollectFieldsContext = {",
          "",
          "[Removed Lines]",
          "104:   fieldDetails: ReadonlyArray<FieldDetails>,",
          "106:   fields: Map<string, ReadonlyArray<FieldDetails>>;",
          "",
          "[Added Lines]",
          "108:   fieldGroup: FieldGroup,",
          "110:   groupedFieldSet: GroupedFieldSet;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117:   const subGroupedFieldSet = new AccumulatorMap<string, FieldDetails>();",
          "118:   const newDeferUsages: Array<DeferUsage> = [];",
          "121:     const node = fieldDetail.node;",
          "122:     if (node.selectionSet) {",
          "123:       collectFieldsImpl(",
          "",
          "[Removed Lines]",
          "120:   for (const fieldDetail of fieldDetails) {",
          "",
          "[Added Lines]",
          "124:   for (const fieldDetail of fieldGroup) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "131:   }",
          "133:   return {",
          "135:     newDeferUsages,",
          "136:   };",
          "137: }",
          "",
          "[Removed Lines]",
          "134:     fields: subGroupedFieldSet,",
          "",
          "[Added Lines]",
          "138:     groupedFieldSet: subGroupedFieldSet,",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: import type { GraphQLSchema } from '../type/schema.js';",
          "48: import { assertValidSchema } from '../type/validate.js';",
          "50: import type {",
          "52:   FieldGroup,",
          "53:   GroupedFieldSet,",
          "58: import type {",
          "59:   CancellableStreamRecord,",
          "60:   DeferredGroupedFieldSetRecord,",
          "",
          "[Removed Lines]",
          "51:   DeferUsageSet,",
          "54: } from './buildFieldPlan.js';",
          "55: import { buildFieldPlan } from './buildFieldPlan.js';",
          "56: import type { DeferUsage, FieldDetails } from './collectFields.js';",
          "57: import { collectFields, collectSubfields } from './collectFields.js';",
          "",
          "[Added Lines]",
          "50: import type { DeferUsageSet, FieldPlan } from './buildFieldPlan.js';",
          "51: import { buildFieldPlan } from './buildFieldPlan.js';",
          "53:   DeferUsage,",
          "56: } from './collectFields.js';",
          "57: import {",
          "58:   collectFields,",
          "59:   collectSubfields as _collectSubfields,",
          "60: } from './collectFields.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:   (",
          "92:     exeContext: ExecutionContext,",
          "93:     returnType: GraphQLObjectType,",
          "94:     fieldGroup: FieldGroup,",
          "97:       exeContext.schema,",
          "98:       exeContext.fragments,",
          "99:       exeContext.variableValues,",
          "100:       exeContext.operation,",
          "101:       returnType,",
          "109: );",
          "",
          "[Removed Lines]",
          "90: const buildSubFieldPlan = memoize3(",
          "95:   ) => {",
          "96:     const { fields: subFields, newDeferUsages } = collectSubfields(",
          "102:       fieldGroup.fields,",
          "103:     );",
          "104:     return {",
          "105:       ...buildFieldPlan(subFields, fieldGroup.deferUsages),",
          "106:       newDeferUsages,",
          "107:     };",
          "108:   },",
          "",
          "[Added Lines]",
          "93: const collectSubfields = memoize3(",
          "98:   ) =>",
          "99:     _collectSubfields(",
          "105:       fieldGroup,",
          "106:     ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:   fieldResolver: GraphQLFieldResolver<any, any>;",
          "145:   typeResolver: GraphQLTypeResolver<any, any>;",
          "146:   subscribeFieldResolver: GraphQLFieldResolver<any, any>;",
          "147:   cancellableStreams: Set<CancellableStreamRecord>;",
          "148: }",
          "150: export interface ExecutionArgs {",
          "151:   schema: GraphQLSchema;",
          "152:   document: DocumentNode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:   errors: Array<GraphQLError>;",
          "149: interface IncrementalContext {",
          "150:   errors: Array<GraphQLError>;",
          "151:   deferUsageSet?: DeferUsageSet | undefined;",
          "152: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "259: function executeOperation(",
          "260:   exeContext: ExecutionContext,",
          "261: ): PromiseOrValue<ExecutionResult | ExperimentalIncrementalExecutionResults> {",
          "263:   try {",
          "264:     const { operation, schema, fragments, variableValues, rootValue } =",
          "265:       exeContext;",
          "",
          "[Removed Lines]",
          "262:   const errors: Array<GraphQLError> = [];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "271:       );",
          "272:     }",
          "275:       schema,",
          "276:       fragments,",
          "277:       variableValues,",
          "278:       rootType,",
          "279:       operation,",
          "280:     );",
          "309:     if (isPromise(graphqlWrappedResult)) {",
          "310:       return graphqlWrappedResult.then(",
          "313:         (error) => ({",
          "314:           data: null,",
          "316:         }),",
          "317:       );",
          "318:     }",
          "319:     return buildDataResponse(",
          "320:       exeContext,",
          "321:       graphqlWrappedResult[0],",
          "323:       graphqlWrappedResult[1],",
          "324:     );",
          "325:   } catch (error) {",
          "327:   }",
          "328: }",
          "",
          "[Removed Lines]",
          "274:     const { fields, newDeferUsages } = collectFields(",
          "281:     const { groupedFieldSet, newGroupedFieldSets } = buildFieldPlan(fields);",
          "283:     const newDeferMap = addNewDeferredFragments(newDeferUsages, new Map());",
          "285:     let graphqlWrappedResult = executeRootGroupedFieldSet(",
          "286:       exeContext,",
          "287:       operation.operation,",
          "288:       rootType,",
          "289:       rootValue,",
          "290:       groupedFieldSet,",
          "291:       errors,",
          "292:       newDeferMap,",
          "293:     );",
          "295:     const newDeferredGroupedFieldSetRecords = executeDeferredGroupedFieldSets(",
          "296:       exeContext,",
          "297:       rootType,",
          "298:       rootValue,",
          "299:       undefined,",
          "300:       undefined,",
          "301:       newGroupedFieldSets,",
          "302:       newDeferMap,",
          "303:     );",
          "305:     graphqlWrappedResult = withNewDeferredGroupedFieldSets(",
          "306:       graphqlWrappedResult,",
          "307:       newDeferredGroupedFieldSetRecords,",
          "308:     );",
          "311:         (resolved) =>",
          "312:           buildDataResponse(exeContext, resolved[0], errors, resolved[1]),",
          "315:           errors: withError(errors, error),",
          "322:       errors,",
          "326:     return { data: null, errors: withError(errors, error) };",
          "",
          "[Added Lines]",
          "277:     const collectedFields = collectFields(",
          "284:     let groupedFieldSet = collectedFields.groupedFieldSet;",
          "285:     const newDeferUsages = collectedFields.newDeferUsages;",
          "286:     let graphqlWrappedResult: PromiseOrValue<",
          "287:       GraphQLWrappedResult<ObjMap<unknown>>",
          "288:     >;",
          "289:     if (newDeferUsages.length === 0) {",
          "290:       graphqlWrappedResult = executeRootGroupedFieldSet(",
          "291:         exeContext,",
          "292:         operation.operation,",
          "293:         rootType,",
          "294:         rootValue,",
          "295:         groupedFieldSet,",
          "296:         undefined,",
          "297:       );",
          "298:     } else {",
          "299:       const fieldPLan = buildFieldPlan(groupedFieldSet);",
          "300:       groupedFieldSet = fieldPLan.groupedFieldSet;",
          "301:       const newGroupedFieldSets = fieldPLan.newGroupedFieldSets;",
          "302:       const newDeferMap = addNewDeferredFragments(newDeferUsages, new Map());",
          "304:       graphqlWrappedResult = executeRootGroupedFieldSet(",
          "305:         exeContext,",
          "306:         operation.operation,",
          "307:         rootType,",
          "308:         rootValue,",
          "309:         groupedFieldSet,",
          "310:         newDeferMap,",
          "311:       );",
          "313:       if (newGroupedFieldSets.size > 0) {",
          "314:         const newDeferredGroupedFieldSetRecords =",
          "315:           executeDeferredGroupedFieldSets(",
          "316:             exeContext,",
          "317:             rootType,",
          "318:             rootValue,",
          "319:             undefined,",
          "320:             undefined,",
          "321:             newGroupedFieldSets,",
          "322:             newDeferMap,",
          "323:           );",
          "325:         graphqlWrappedResult = withNewDeferredGroupedFieldSets(",
          "326:           graphqlWrappedResult,",
          "327:           newDeferredGroupedFieldSetRecords,",
          "328:         );",
          "329:       }",
          "330:     }",
          "333:         (resolved) => buildDataResponse(exeContext, resolved[0], resolved[1]),",
          "336:           errors: withError(exeContext.errors, error),",
          "346:     return { data: null, errors: withError(exeContext.errors, error) };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "352: function buildDataResponse(",
          "353:   exeContext: ExecutionContext,",
          "354:   data: ObjMap<unknown>,",
          "356:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "357: ): ExecutionResult | ExperimentalIncrementalExecutionResults {",
          "358:   if (incrementalDataRecords.length === 0) {",
          "359:     return errors.length > 0 ? { errors, data } : { data };",
          "360:   }",
          "",
          "[Removed Lines]",
          "355:   errors: ReadonlyArray<GraphQLError>,",
          "",
          "[Added Lines]",
          "377:   const errors = exeContext.errors;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "468:     fieldResolver: fieldResolver ?? defaultFieldResolver,",
          "469:     typeResolver: typeResolver ?? defaultTypeResolver,",
          "470:     subscribeFieldResolver: subscribeFieldResolver ?? defaultFieldResolver,",
          "471:     cancellableStreams: new Set(),",
          "472:   };",
          "473: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:     errors: [],",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "478: ): ExecutionContext {",
          "479:   return {",
          "480:     ...exeContext,",
          "481:     rootValue: payload,",
          "482:   };",
          "483: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "502:     errors: [],",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "488:   rootType: GraphQLObjectType,",
          "489:   rootValue: unknown,",
          "490:   groupedFieldSet: GroupedFieldSet,",
          "492:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "493: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "494:   switch (operation) {",
          "",
          "[Removed Lines]",
          "491:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "499:         rootValue,",
          "500:         undefined,",
          "501:         groupedFieldSet,",
          "503:         deferMap,",
          "504:       );",
          "505:     case OperationTypeNode.MUTATION:",
          "",
          "[Removed Lines]",
          "502:         errors,",
          "",
          "[Added Lines]",
          "523:         undefined,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "509:         rootValue,",
          "510:         undefined,",
          "511:         groupedFieldSet,",
          "513:         deferMap,",
          "514:       );",
          "515:     case OperationTypeNode.SUBSCRIPTION:",
          "",
          "[Removed Lines]",
          "512:         errors,",
          "",
          "[Added Lines]",
          "533:         undefined,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "521:         rootValue,",
          "522:         undefined,",
          "523:         groupedFieldSet,",
          "525:         deferMap,",
          "526:       );",
          "527:   }",
          "",
          "[Removed Lines]",
          "524:         errors,",
          "",
          "[Added Lines]",
          "545:         undefined,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "537:   sourceValue: unknown,",
          "538:   path: Path | undefined,",
          "539:   groupedFieldSet: GroupedFieldSet,",
          "541:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "542: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "543:   return promiseReduce(",
          "",
          "[Removed Lines]",
          "540:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "561:   incrementalContext: IncrementalContext | undefined,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "550:         sourceValue,",
          "551:         fieldGroup,",
          "552:         fieldPath,",
          "554:         deferMap,",
          "555:       );",
          "556:       if (result === undefined) {",
          "",
          "[Removed Lines]",
          "553:         errors,",
          "",
          "[Added Lines]",
          "574:         incrementalContext,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "581:   sourceValue: unknown,",
          "582:   path: Path | undefined,",
          "583:   groupedFieldSet: GroupedFieldSet,",
          "585:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "586: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "587:   const results = Object.create(null);",
          "",
          "[Removed Lines]",
          "584:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "605:   incrementalContext: IncrementalContext | undefined,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "600:         sourceValue,",
          "601:         fieldGroup,",
          "602:         fieldPath,",
          "604:         deferMap,",
          "605:       );",
          "",
          "[Removed Lines]",
          "603:         errors,",
          "",
          "[Added Lines]",
          "624:         incrementalContext,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "644: }",
          "646: function toNodes(fieldGroup: FieldGroup): ReadonlyArray<FieldNode> {",
          "648: }",
          "",
          "[Removed Lines]",
          "647:   return fieldGroup.fields.map((fieldDetails) => fieldDetails.node);",
          "",
          "[Added Lines]",
          "668:   return fieldGroup.map((fieldDetails) => fieldDetails.node);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "659:   source: unknown,",
          "660:   fieldGroup: FieldGroup,",
          "661:   path: Path,",
          "663:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "664: ): PromiseOrValue<GraphQLWrappedResult<unknown>> | undefined {",
          "666:   const fieldDef = exeContext.schema.getField(parentType, fieldName);",
          "667:   if (!fieldDef) {",
          "668:     return;",
          "",
          "[Removed Lines]",
          "662:   errors: Array<GraphQLError>,",
          "665:   const fieldName = fieldGroup.fields[0].node.name.value;",
          "",
          "[Added Lines]",
          "683:   incrementalContext: IncrementalContext | undefined,",
          "686:   const fieldName = fieldGroup[0].node.name.value;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "687:     const args = getArgumentValues(",
          "688:       fieldDef,",
          "690:       exeContext.variableValues,",
          "691:     );",
          "",
          "[Removed Lines]",
          "689:       fieldGroup.fields[0].node,",
          "",
          "[Added Lines]",
          "710:       fieldGroup[0].node,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "705:         info,",
          "706:         path,",
          "707:         result,",
          "709:         deferMap,",
          "710:       );",
          "711:     }",
          "",
          "[Removed Lines]",
          "708:         errors,",
          "",
          "[Added Lines]",
          "729:         incrementalContext,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "717:       info,",
          "718:       path,",
          "719:       result,",
          "721:       deferMap,",
          "722:     );",
          "",
          "[Removed Lines]",
          "720:       errors,",
          "",
          "[Added Lines]",
          "741:       incrementalContext,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "727:       return completed.then(undefined, (rawError) => {",
          "728:         handleFieldError(rawError, returnType, fieldGroup, path, errors);",
          "729:         return [null, []];",
          "730:       });",
          "731:     }",
          "732:     return completed;",
          "733:   } catch (rawError) {",
          "734:     handleFieldError(rawError, returnType, fieldGroup, path, errors);",
          "735:     return [null, []];",
          "736:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "749:         const errors = (incrementalContext ?? exeContext).errors;",
          "756:     const errors = (incrementalContext ?? exeContext).errors;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "811:   info: GraphQLResolveInfo,",
          "812:   path: Path,",
          "813:   result: unknown,",
          "815:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "816: ): PromiseOrValue<GraphQLWrappedResult<unknown>> {",
          "",
          "[Removed Lines]",
          "814:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "837:   incrementalContext: IncrementalContext | undefined,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "829:       info,",
          "830:       path,",
          "831:       result,",
          "833:       deferMap,",
          "834:     );",
          "835:     if ((completed as GraphQLWrappedResult<unknown>)[0] === null) {",
          "",
          "[Removed Lines]",
          "832:       errors,",
          "",
          "[Added Lines]",
          "855:       incrementalContext,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "854:       info,",
          "855:       path,",
          "856:       result,",
          "858:       deferMap,",
          "859:     );",
          "860:   }",
          "",
          "[Removed Lines]",
          "857:       errors,",
          "",
          "[Added Lines]",
          "880:       incrementalContext,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "875:       info,",
          "876:       path,",
          "877:       result,",
          "879:       deferMap,",
          "880:     );",
          "881:   }",
          "",
          "[Removed Lines]",
          "878:       errors,",
          "",
          "[Added Lines]",
          "901:       incrementalContext,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "889:       info,",
          "890:       path,",
          "891:       result,",
          "893:       deferMap,",
          "894:     );",
          "895:   }",
          "",
          "[Removed Lines]",
          "892:       errors,",
          "",
          "[Added Lines]",
          "915:       incrementalContext,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "908:   info: GraphQLResolveInfo,",
          "909:   path: Path,",
          "910:   result: Promise<unknown>,",
          "912:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "913: ): Promise<GraphQLWrappedResult<unknown>> {",
          "914:   try {",
          "",
          "[Removed Lines]",
          "911:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "934:   incrementalContext: IncrementalContext | undefined,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "920:       info,",
          "921:       path,",
          "922:       resolved,",
          "924:       deferMap,",
          "925:     );",
          "",
          "[Removed Lines]",
          "923:       errors,",
          "",
          "[Added Lines]",
          "946:       incrementalContext,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "929:     }",
          "930:     return completed;",
          "931:   } catch (rawError) {",
          "932:     handleFieldError(rawError, returnType, fieldGroup, path, errors);",
          "933:     return [null, []];",
          "934:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "955:     const errors = (incrementalContext ?? exeContext).errors;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "964:   const stream = getDirectiveValues(",
          "965:     GraphQLStreamDirective,",
          "967:     exeContext.variableValues,",
          "968:   );",
          "",
          "[Removed Lines]",
          "966:     fieldGroup.fields[0].node,",
          "",
          "[Added Lines]",
          "990:     fieldGroup[0].node,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "990:     '`@stream` directive not supported on subscription operations. Disable `@stream` by setting the `if` argument to `false`.',",
          "991:   );",
          "1000:   const streamUsage = {",
          "1001:     initialCount: stream.initialCount,",
          "",
          "[Removed Lines]",
          "993:   const streamedFieldGroup: FieldGroup = {",
          "994:     fields: fieldGroup.fields.map((fieldDetails) => ({",
          "995:       node: fieldDetails.node,",
          "996:       deferUsage: undefined,",
          "997:     })),",
          "998:   };",
          "",
          "[Added Lines]",
          "1017:   const streamedFieldGroup: FieldGroup = fieldGroup.map((fieldDetails) => ({",
          "1018:     node: fieldDetails.node,",
          "1019:     deferUsage: undefined,",
          "1020:   }));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1020:   info: GraphQLResolveInfo,",
          "1021:   path: Path,",
          "1022:   asyncIterator: AsyncIterator<unknown>,",
          "1024:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1025: ): Promise<GraphQLWrappedResult<ReadonlyArray<unknown>>> {",
          "1026:   let containsPromise = false;",
          "",
          "[Removed Lines]",
          "1023:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "1045:   incrementalContext: IncrementalContext | undefined,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1092:           info,",
          "1093:           itemPath,",
          "1094:           item,",
          "1096:           deferMap,",
          "1097:         ).then((resolved) => {",
          "1098:           graphqlWrappedResult[1].push(...resolved[1]);",
          "",
          "[Removed Lines]",
          "1095:           errors,",
          "",
          "[Added Lines]",
          "1117:           incrementalContext,",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1111:         fieldGroup,",
          "1112:         info,",
          "1113:         itemPath,",
          "1115:         deferMap,",
          "1116:       )",
          "",
          "[Removed Lines]",
          "1114:         errors,",
          "",
          "[Added Lines]",
          "1136:         incrementalContext,",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1142:   info: GraphQLResolveInfo,",
          "1143:   path: Path,",
          "1144:   result: unknown,",
          "1146:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1147: ): PromiseOrValue<GraphQLWrappedResult<ReadonlyArray<unknown>>> {",
          "1148:   const itemType = returnType.ofType;",
          "",
          "[Removed Lines]",
          "1145:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "1167:   incrementalContext: IncrementalContext | undefined,",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1157:       info,",
          "1158:       path,",
          "1159:       asyncIterator,",
          "1161:       deferMap,",
          "1162:     );",
          "1163:   }",
          "",
          "[Removed Lines]",
          "1160:       errors,",
          "",
          "[Added Lines]",
          "1182:       incrementalContext,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1217:           info,",
          "1218:           itemPath,",
          "1219:           item,",
          "1221:           deferMap,",
          "1222:         ).then((resolved) => {",
          "1223:           graphqlWrappedResult[1].push(...resolved[1]);",
          "",
          "[Removed Lines]",
          "1220:           errors,",
          "",
          "[Added Lines]",
          "1242:           incrementalContext,",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1235:         fieldGroup,",
          "1236:         info,",
          "1237:         itemPath,",
          "1239:         deferMap,",
          "1240:       )",
          "1241:     ) {",
          "",
          "[Removed Lines]",
          "1238:         errors,",
          "",
          "[Added Lines]",
          "1260:         incrementalContext,",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1268:   fieldGroup: FieldGroup,",
          "1269:   info: GraphQLResolveInfo,",
          "1270:   itemPath: Path,",
          "1272:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1273: ): boolean {",
          "1274:   try {",
          "",
          "[Removed Lines]",
          "1271:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "1293:   incrementalContext: IncrementalContext | undefined,",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1279:       info,",
          "1280:       itemPath,",
          "1281:       item,",
          "1283:       deferMap,",
          "1284:     );",
          "",
          "[Removed Lines]",
          "1282:       errors,",
          "",
          "[Added Lines]",
          "1304:       incrementalContext,",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1293:             return resolved[0];",
          "1294:           },",
          "1295:           (rawError) => {",
          "1296:             handleFieldError(rawError, itemType, fieldGroup, itemPath, errors);",
          "1297:             return null;",
          "1298:           },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1318:             const errors = (incrementalContext ?? exeContext).errors;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1304:     completedResults.push(completedItem[0]);",
          "1305:     parent[1].push(...completedItem[1]);",
          "1306:   } catch (rawError) {",
          "1307:     handleFieldError(rawError, itemType, fieldGroup, itemPath, errors);",
          "1308:     completedResults.push(null);",
          "1309:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1330:     const errors = (incrementalContext ?? exeContext).errors;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1339:   info: GraphQLResolveInfo,",
          "1340:   path: Path,",
          "1341:   result: unknown,",
          "1343:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1344: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "1345:   const resolveTypeFn = returnType.resolveType ?? exeContext.typeResolver;",
          "",
          "[Removed Lines]",
          "1342:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "1366:   incrementalContext: IncrementalContext | undefined,",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1362:         info,",
          "1363:         path,",
          "1364:         result,",
          "1366:         deferMap,",
          "1367:       ),",
          "1368:     );",
          "",
          "[Removed Lines]",
          "1365:         errors,",
          "",
          "[Added Lines]",
          "1389:         incrementalContext,",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1382:     info,",
          "1383:     path,",
          "1384:     result,",
          "1386:     deferMap,",
          "1387:   );",
          "1388: }",
          "",
          "[Removed Lines]",
          "1385:     errors,",
          "",
          "[Added Lines]",
          "1409:     incrementalContext,",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1452:   info: GraphQLResolveInfo,",
          "1453:   path: Path,",
          "1454:   result: unknown,",
          "1456:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1457: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "",
          "[Removed Lines]",
          "1455:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "1479:   incrementalContext: IncrementalContext | undefined,",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1472:           fieldGroup,",
          "1473:           path,",
          "1474:           result,",
          "1476:           deferMap,",
          "1477:         );",
          "1478:       });",
          "",
          "[Removed Lines]",
          "1475:           errors,",
          "",
          "[Added Lines]",
          "1499:           incrementalContext,",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1489:     fieldGroup,",
          "1490:     path,",
          "1491:     result,",
          "1493:     deferMap,",
          "1494:   );",
          "1495: }",
          "",
          "[Removed Lines]",
          "1492:     errors,",
          "",
          "[Added Lines]",
          "1516:     incrementalContext,",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1564:   fieldGroup: FieldGroup,",
          "1565:   path: Path,",
          "1566:   result: unknown,",
          "1568:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1569: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "1574:   const newDeferMap = addNewDeferredFragments(",
          "1575:     newDeferUsages,",
          "1576:     new Map(deferMap),",
          "",
          "[Removed Lines]",
          "1567:   errors: Array<GraphQLError>,",
          "1571:   const { groupedFieldSet, newGroupedFieldSets, newDeferUsages } =",
          "1572:     buildSubFieldPlan(exeContext, returnType, fieldGroup);",
          "",
          "[Added Lines]",
          "1591:   incrementalContext: IncrementalContext | undefined,",
          "1595:   const collectedSubfields = collectSubfields(",
          "1596:     exeContext,",
          "1597:     returnType,",
          "1598:     fieldGroup,",
          "1599:   );",
          "1600:   let groupedFieldSet = collectedSubfields.groupedFieldSet;",
          "1601:   const newDeferUsages = collectedSubfields.newDeferUsages;",
          "1602:   if (deferMap === undefined && newDeferUsages.length === 0) {",
          "1603:     return executeFields(",
          "1604:       exeContext,",
          "1605:       returnType,",
          "1606:       result,",
          "1607:       path,",
          "1608:       groupedFieldSet,",
          "1609:       incrementalContext,",
          "1610:       undefined,",
          "1611:     );",
          "1612:   }",
          "1613:   const subFieldPlan = buildSubFieldPlan(",
          "1614:     groupedFieldSet,",
          "1615:     incrementalContext?.deferUsageSet,",
          "1616:   );",
          "1618:   groupedFieldSet = subFieldPlan.groupedFieldSet;",
          "1619:   const newGroupedFieldSets = subFieldPlan.newGroupedFieldSets;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1583:     result,",
          "1584:     path,",
          "1585:     groupedFieldSet,",
          "1587:     newDeferMap,",
          "1588:   );",
          "1604: }",
          "",
          "[Removed Lines]",
          "1586:     errors,",
          "1590:   const newDeferredGroupedFieldSetRecords = executeDeferredGroupedFieldSets(",
          "1591:     exeContext,",
          "1592:     returnType,",
          "1593:     result,",
          "1594:     path,",
          "1595:     fieldGroup.deferUsages,",
          "1596:     newGroupedFieldSets,",
          "1597:     newDeferMap,",
          "1598:   );",
          "1600:   return withNewDeferredGroupedFieldSets(",
          "1601:     subFields,",
          "1602:     newDeferredGroupedFieldSetRecords,",
          "1603:   );",
          "",
          "[Added Lines]",
          "1632:     incrementalContext,",
          "1636:   if (newGroupedFieldSets.size > 0) {",
          "1637:     const newDeferredGroupedFieldSetRecords = executeDeferredGroupedFieldSets(",
          "1638:       exeContext,",
          "1639:       returnType,",
          "1640:       result,",
          "1641:       path,",
          "1642:       incrementalContext?.deferUsageSet,",
          "1643:       newGroupedFieldSets,",
          "1644:       newDeferMap,",
          "1645:     );",
          "1647:     return withNewDeferredGroupedFieldSets(",
          "1648:       subFields,",
          "1649:       newDeferredGroupedFieldSetRecords,",
          "1650:     );",
          "1651:   }",
          "1652:   return subFields;",
          "1653: }",
          "1655: function buildSubFieldPlan(",
          "1656:   originalGroupedFieldSet: GroupedFieldSet,",
          "1657:   deferUsageSet: DeferUsageSet | undefined,",
          "1658: ): FieldPlan {",
          "1659:   let fieldPlan = (",
          "1660:     originalGroupedFieldSet as unknown as { _fieldPlan: FieldPlan }",
          "1661:   )._fieldPlan;",
          "1662:   if (fieldPlan !== undefined) {",
          "1663:     return fieldPlan;",
          "1664:   }",
          "1665:   fieldPlan = buildFieldPlan(originalGroupedFieldSet, deferUsageSet);",
          "1666:   (originalGroupedFieldSet as unknown as { _fieldPlan: FieldPlan })._fieldPlan =",
          "1667:     fieldPlan;",
          "1668:   return fieldPlan;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1816:     );",
          "1817:   }",
          "1820:     schema,",
          "1821:     fragments,",
          "1822:     variableValues,",
          "",
          "[Removed Lines]",
          "1819:   const { fields } = collectFields(",
          "",
          "[Added Lines]",
          "1884:   const { groupedFieldSet } = collectFields(",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1824:     operation,",
          "1825:   );",
          "1828:     string,",
          "1830:   ];",
          "1833:   const fieldDef = schema.getField(rootType, fieldName);",
          "1836:   if (!fieldDef) {",
          "1837:     throw new GraphQLError(",
          "1838:       `The subscription field \"${fieldName}\" is not defined.`,",
          "",
          "[Removed Lines]",
          "1827:   const firstRootField = fields.entries().next().value as [",
          "1829:     ReadonlyArray<FieldDetails>,",
          "1831:   const [responseName, fieldDetailsList] = firstRootField;",
          "1832:   const fieldName = fieldDetailsList[0].node.name.value;",
          "1835:   const fieldNodes = fieldDetailsList.map((fieldDetails) => fieldDetails.node);",
          "",
          "[Added Lines]",
          "1892:   const firstRootField = groupedFieldSet.entries().next().value as [",
          "1894:     FieldGroup,",
          "1896:   const [responseName, fieldGroup] = firstRootField;",
          "1897:   const fieldName = fieldGroup[0].node.name.value;",
          "1900:   const fieldNodes = fieldGroup.map((fieldDetails) => fieldDetails.node);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1921:         sourceValue,",
          "1922:         path,",
          "1923:         groupedFieldSet,",
          "1925:         deferMap,",
          "1926:       );",
          "",
          "[Removed Lines]",
          "1924:         [],",
          "",
          "[Added Lines]",
          "1989:         {",
          "1990:           errors: [],",
          "1991:           deferUsageSet,",
          "1992:         },",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1961:   sourceValue: unknown,",
          "1962:   path: Path | undefined,",
          "1963:   groupedFieldSet: GroupedFieldSet,",
          "1965:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "1966: ): PromiseOrValue<DeferredGroupedFieldSetResult> {",
          "1967:   let result;",
          "",
          "[Removed Lines]",
          "1964:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "2032:   incrementalContext: IncrementalContext,",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1972:       sourceValue,",
          "1973:       path,",
          "1974:       groupedFieldSet,",
          "1976:       deferMap,",
          "1977:     );",
          "1978:   } catch (error) {",
          "1979:     return {",
          "1980:       deferredFragmentRecords,",
          "1981:       path: pathToArray(path),",
          "1983:     };",
          "1984:   }",
          "",
          "[Removed Lines]",
          "1975:       errors,",
          "1982:       errors: withError(errors, error),",
          "",
          "[Added Lines]",
          "2043:       incrementalContext,",
          "2050:       errors: withError(incrementalContext.errors, error),",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1987:     return result.then(",
          "1988:       (resolved) =>",
          "1989:         buildDeferredGroupedFieldSetResult(",
          "1991:           deferredFragmentRecords,",
          "1992:           path,",
          "1993:           resolved,",
          "",
          "[Removed Lines]",
          "1990:           errors,",
          "",
          "[Added Lines]",
          "2058:           incrementalContext.errors,",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1995:       (error) => ({",
          "1996:         deferredFragmentRecords,",
          "1997:         path: pathToArray(path),",
          "1999:       }),",
          "2000:     );",
          "2001:   }",
          "2003:   return buildDeferredGroupedFieldSetResult(",
          "2005:     deferredFragmentRecords,",
          "2006:     path,",
          "2007:     result,",
          "",
          "[Removed Lines]",
          "1998:         errors: withError(errors, error),",
          "2004:     errors,",
          "",
          "[Added Lines]",
          "2066:         errors: withError(incrementalContext.errors, error),",
          "2072:     incrementalContext.errors,",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2053:         initialPath,",
          "2054:         initialItem,",
          "2055:         exeContext,",
          "2057:         fieldGroup,",
          "2058:         info,",
          "2059:         itemType,",
          "",
          "[Removed Lines]",
          "2056:         [],",
          "",
          "[Added Lines]",
          "2124:         { errors: [] },",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2075:           currentPath,",
          "2076:           item,",
          "2077:           exeContext,",
          "2079:           fieldGroup,",
          "2080:           info,",
          "2081:           itemType,",
          "",
          "[Removed Lines]",
          "2078:           [],",
          "",
          "[Added Lines]",
          "2146:           { errors: [] },",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2191:     itemPath,",
          "2192:     iteration.value,",
          "2193:     exeContext,",
          "2195:     fieldGroup,",
          "2196:     info,",
          "2197:     itemType,",
          "",
          "[Removed Lines]",
          "2194:     [],",
          "",
          "[Added Lines]",
          "2262:     { errors: [] },",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2219:   itemPath: Path,",
          "2220:   item: unknown,",
          "2221:   exeContext: ExecutionContext,",
          "2223:   fieldGroup: FieldGroup,",
          "2224:   info: GraphQLResolveInfo,",
          "2225:   itemType: GraphQLOutputType,",
          "",
          "[Removed Lines]",
          "2222:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "2290:   incrementalContext: IncrementalContext,",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2232:       info,",
          "2233:       itemPath,",
          "2234:       item,",
          "2236:       new Map(),",
          "2237:     ).then(",
          "2238:       (resolvedItem) =>",
          "2240:       (error) => ({",
          "2241:         streamRecord,",
          "2243:       }),",
          "2244:     );",
          "2245:   }",
          "",
          "[Removed Lines]",
          "2235:       errors,",
          "2239:         buildStreamItemsResult(errors, streamRecord, resolvedItem),",
          "2242:         errors: withError(errors, error),",
          "",
          "[Added Lines]",
          "2303:       incrementalContext,",
          "2307:         buildStreamItemsResult(",
          "2308:           incrementalContext.errors,",
          "2309:           streamRecord,",
          "2310:           resolvedItem,",
          "2311:         ),",
          "2314:         errors: withError(incrementalContext.errors, error),",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2254:         info,",
          "2255:         itemPath,",
          "2256:         item,",
          "2258:         new Map(),",
          "2259:       );",
          "2260:     } catch (rawError) {",
          "2262:       result = [null, []];",
          "2263:     }",
          "2264:   } catch (error) {",
          "2265:     return {",
          "2266:       streamRecord,",
          "2268:     };",
          "2269:   }",
          "2271:   if (isPromise(result)) {",
          "2272:     return result",
          "2273:       .then(undefined, (rawError) => {",
          "2275:         return [null, []] as GraphQLWrappedResult<unknown>;",
          "2276:       })",
          "2277:       .then(",
          "2278:         (resolvedItem) =>",
          "2280:         (error) => ({",
          "2281:           streamRecord,",
          "2283:         }),",
          "2284:       );",
          "2285:   }",
          "2288: }",
          "2290: function buildStreamItemsResult(",
          "",
          "[Removed Lines]",
          "2257:         errors,",
          "2261:       handleFieldError(rawError, itemType, fieldGroup, itemPath, errors);",
          "2267:       errors: withError(errors, error),",
          "2274:         handleFieldError(rawError, itemType, fieldGroup, itemPath, errors);",
          "2279:           buildStreamItemsResult(errors, streamRecord, resolvedItem),",
          "2282:           errors: withError(errors, error),",
          "2287:   return buildStreamItemsResult(errors, streamRecord, result);",
          "",
          "[Added Lines]",
          "2329:         incrementalContext,",
          "2333:       handleFieldError(",
          "2334:         rawError,",
          "2335:         itemType,",
          "2336:         fieldGroup,",
          "2337:         itemPath,",
          "2338:         incrementalContext.errors,",
          "2339:       );",
          "2345:       errors: withError(incrementalContext.errors, error),",
          "2352:         handleFieldError(",
          "2353:           rawError,",
          "2354:           itemType,",
          "2355:           fieldGroup,",
          "2356:           itemPath,",
          "2357:           incrementalContext.errors,",
          "2358:         );",
          "2363:           buildStreamItemsResult(",
          "2364:             incrementalContext.errors,",
          "2365:             streamRecord,",
          "2366:             resolvedItem,",
          "2367:           ),",
          "2370:           errors: withError(incrementalContext.errors, error),",
          "2375:   return buildStreamItemsResult(",
          "2376:     incrementalContext.errors,",
          "2377:     streamRecord,",
          "2378:     result,",
          "2379:   );",
          "",
          "---------------"
        ],
        "src/validation/rules/SingleFieldSubscriptionsRule.ts||src/validation/rules/SingleFieldSubscriptionsRule.ts": [
          "File: src/validation/rules/SingleFieldSubscriptionsRule.ts -> src/validation/rules/SingleFieldSubscriptionsRule.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import { Kind } from '../../language/kinds.js';",
          "11: import type { ASTVisitor } from '../../language/visitor.js';",
          "14: import { collectFields } from '../../execution/collectFields.js';",
          "16: import type { ValidationContext } from '../ValidationContext.js';",
          "22: }",
          "",
          "[Removed Lines]",
          "13: import type { FieldDetails } from '../../execution/collectFields.js';",
          "18: function toNodes(",
          "19:   fieldDetailsList: ReadonlyArray<FieldDetails>,",
          "20: ): ReadonlyArray<FieldNode> {",
          "21:   return fieldDetailsList.map((fieldDetails) => fieldDetails.node);",
          "",
          "[Added Lines]",
          "13: import type { FieldGroup } from '../../execution/collectFields.js';",
          "18: function toNodes(fieldGroup: FieldGroup): ReadonlyArray<FieldNode> {",
          "19:   return fieldGroup.map((fieldDetails) => fieldDetails.node);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:               fragments[definition.name.value] = definition;",
          "50:             }",
          "51:           }",
          "53:             schema,",
          "54:             fragments,",
          "55:             variableValues,",
          "56:             subscriptionType,",
          "57:             node,",
          "58:           );",
          "61:             const extraFieldGroups = fieldGroups.slice(1);",
          "62:             const extraFieldSelections = extraFieldGroups.flatMap(",
          "63:               (fieldGroup) => toNodes(fieldGroup),",
          "",
          "[Removed Lines]",
          "52:           const { fields } = collectFields(",
          "59:           if (fields.size > 1) {",
          "60:             const fieldGroups = [...fields.values()];",
          "",
          "[Added Lines]",
          "50:           const { groupedFieldSet } = collectFields(",
          "57:           if (groupedFieldSet.size > 1) {",
          "58:             const fieldGroups = [...groupedFieldSet.values()];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:               ),",
          "72:             );",
          "73:           }",
          "75:             const fieldName = toNodes(fieldGroup)[0].name.value;",
          "76:             if (fieldName.startsWith('__')) {",
          "77:               context.reportError(",
          "",
          "[Removed Lines]",
          "74:           for (const fieldGroup of fields.values()) {",
          "",
          "[Added Lines]",
          "72:           for (const fieldGroup of groupedFieldSet.values()) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}