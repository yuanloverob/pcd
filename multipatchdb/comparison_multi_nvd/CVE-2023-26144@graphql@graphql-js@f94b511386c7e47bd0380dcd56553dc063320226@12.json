{
  "cve_id": "CVE-2023-26144",
  "cve_desc": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
  "repo": "graphql/graphql-js",
  "patch_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
  "patch_info": {
    "commit_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
    "repo": "graphql/graphql-js",
    "commit_url": "https://github.com/graphql/graphql-js/commit/f94b511386c7e47bd0380dcd56553dc063320226",
    "files": [
      "benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ],
    "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3958)\n\nCo-authored-by: AaronMoat <AaronMoat@users.noreply.github.com>\nCo-authored-by: Ivan Goncharov <ivan.goncharov.ua@gmail.com>\nResolves https://github.com/graphql/graphql-js/issues/3955 (at least",
    "before_after_code_files": [
      "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ]
  },
  "patch_diff": {
    "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
      "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { graphqlSync } from 'graphql/graphql.js';",
      "2: import { buildSchema } from 'graphql/utilities/buildASTSchema.js';",
      "4: const schema = buildSchema('type Query { hello: String! }');",
      "5: const source = `{ ${'hello '.repeat(250)}}`;",
      "7: export const benchmark = {",
      "8:   name: 'Many repeated fields',",
      "9:   count: 5,",
      "10:   measure() {",
      "11:     graphqlSync({ schema, source });",
      "12:   },",
      "13: };",
      "",
      "---------------"
    ],
    "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts": [
      "File: src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts -> src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "179:     ]);",
      "180:   });",
      "182:   it('mix of stream and no stream', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:   it('different stream directive extra argument', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "185:         name @stream(label: \"streamLabel\", initialCount: 1)",
      "186:         name @stream(label: \"streamLabel\", initialCount: 1, extraArg: true)",
      "187:       }",
      "188:     `).toDeepEqual([",
      "189:       {",
      "190:         message:",
      "191:           'Fields \"name\" conflict because they have differing stream directives. Use different aliases on the fields to fetch both if this was intentional.',",
      "192:         locations: [",
      "193:           { line: 3, column: 9 },",
      "194:           { line: 4, column: 9 },",
      "195:         ],",
      "196:       },",
      "197:     ]);",
      "198:   });",
      "",
      "---------------"
    ],
    "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
      "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   DirectiveNode,",
      "8:   FieldNode,",
      "9:   FragmentDefinitionNode,",
      "11:   SelectionSetNode,",
      "12: } from '../../language/ast.js';",
      "13: import { Kind } from '../../language/kinds.js';",
      "14: import { print } from '../../language/printer.js';",
      "",
      "[Removed Lines]",
      "10:   ObjectValueNode,",
      "",
      "[Added Lines]",
      "11:   ValueNode,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "592:     }",
      "596:       return [",
      "597:         [responseName, 'they have differing arguments'],",
      "598:         [node1],",
      "",
      "[Removed Lines]",
      "595:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
      "",
      "[Added Lines]",
      "595:     if (!sameArguments(node1, node2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "649:   }",
      "650: }",
      "665: }",
      "667: function getStreamDirective(",
      "",
      "[Removed Lines]",
      "652: function stringifyArguments(fieldNode: FieldNode | DirectiveNode): string {",
      "654:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
      "656:   const inputObjectWithArgs: ObjectValueNode = {",
      "657:     kind: Kind.OBJECT,",
      "658:     fields: args.map((argNode) => ({",
      "659:       kind: Kind.OBJECT_FIELD,",
      "660:       name: argNode.name,",
      "661:       value: argNode.value,",
      "662:     })),",
      "663:   };",
      "664:   return print(sortValueNode(inputObjectWithArgs));",
      "",
      "[Added Lines]",
      "652: function sameArguments(",
      "653:   node1: FieldNode | DirectiveNode,",
      "654:   node2: FieldNode | DirectiveNode,",
      "655: ): boolean {",
      "656:   const args1 = node1.arguments;",
      "657:   const args2 = node2.arguments;",
      "659:   if (args1 === undefined || args1.length === 0) {",
      "660:     return args2 === undefined || args2.length === 0;",
      "661:   }",
      "662:   if (args2 === undefined || args2.length === 0) {",
      "663:     return false;",
      "664:   }",
      "666:   if (args1.length !== args2.length) {",
      "667:     return false;",
      "668:   }",
      "670:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
      "671:   return args1.every((arg1) => {",
      "672:     const value1 = arg1.value;",
      "673:     const value2 = values2.get(arg1.name.value);",
      "674:     if (value2 === undefined) {",
      "675:       return false;",
      "676:     }",
      "678:     return stringifyValue(value1) === stringifyValue(value2);",
      "679:   });",
      "680: }",
      "682: function stringifyValue(value: ValueNode): string | null {",
      "683:   return print(sortValueNode(value));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "681:     return true;",
      "682:   } else if (stream1 && stream2) {",
      "685:   }",
      "687:   return false;",
      "",
      "[Removed Lines]",
      "684:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
      "",
      "[Added Lines]",
      "703:     return sameArguments(stream1, stream2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4275662172f91a3c33c0bcd04783f8127a3093ad",
      "candidate_info": {
        "commit_hash": "4275662172f91a3c33c0bcd04783f8127a3093ad",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/4275662172f91a3c33c0bcd04783f8127a3093ad",
        "files": [
          "resources/utils.ts"
        ],
        "message": "fix(benchmark): select npm.cmd on windows (#4030)\n\nsee: https://github.com/nodejs/node/issues/3675\nand in particular:\nhttps://github.com/nodejs/node/issues/3675#issuecomment-308963807",
        "before_after_code_files": [
          "resources/utils.ts||resources/utils.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "resources/utils.ts||resources/utils.ts": [
          "File: resources/utils.ts -> resources/utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: export function npm(options?: NPMOptions) {",
          "36:   const globalOptions = options?.quiet === true ? ['--quiet'] : [];",
          "37:   return {",
          "38:     run(...args: ReadonlyArray<string>): void {",
          "40:     },",
          "41:     install(...args: ReadonlyArray<string>): void {",
          "43:     },",
          "44:     ci(...args: ReadonlyArray<string>): void {",
          "46:     },",
          "47:     exec(...args: ReadonlyArray<string>): void {",
          "49:     },",
          "50:     pack(...args: ReadonlyArray<string>): string {",
          "52:     },",
          "53:     diff(...args: ReadonlyArray<string>): string {",
          "55:     },",
          "56:   };",
          "57: }",
          "",
          "[Removed Lines]",
          "39:       spawn('npm', [...globalOptions, 'run', ...args], options);",
          "42:       spawn('npm', [...globalOptions, 'install', ...args], options);",
          "45:       spawn('npm', [...globalOptions, 'ci', ...args], options);",
          "48:       spawn('npm', [...globalOptions, 'exec', ...args], options);",
          "51:       return spawnOutput('npm', [...globalOptions, 'pack', ...args], options);",
          "54:       return spawnOutput('npm', [...globalOptions, 'diff', ...args], options);",
          "",
          "[Added Lines]",
          "43:   const npmOptions = { shell: true, ...options };",
          "47:       spawn('npm', [...globalOptions, 'run', ...args], npmOptions);",
          "50:       spawn('npm', [...globalOptions, 'install', ...args], npmOptions);",
          "53:       spawn('npm', [...globalOptions, 'ci', ...args], npmOptions);",
          "56:       spawn('npm', [...globalOptions, 'exec', ...args], npmOptions);",
          "59:       return spawnOutput(",
          "60:         'npm',",
          "61:         [...globalOptions, 'pack', ...args],",
          "62:         npmOptions,",
          "63:       );",
          "66:       return spawnOutput(",
          "67:         'npm',",
          "68:         [...globalOptions, 'diff', ...args],",
          "69:         npmOptions,",
          "70:       );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: interface SpawnOptions {",
          "90:   cwd?: string;",
          "91:   env?: typeof process.env;",
          "92: }",
          "94: function spawnOutput(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   shell?: boolean;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e2e7517a400df3b0757b20d66fb71677cd43bcf",
      "candidate_info": {
        "commit_hash": "9e2e7517a400df3b0757b20d66fb71677cd43bcf",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/9e2e7517a400df3b0757b20d66fb71677cd43bcf",
        "files": [
          "src/type/__tests__/enumType-test.ts",
          "src/type/definition.ts"
        ],
        "message": "Enable passing values configuration to GraphQLEnumType as a thunk (#4018)",
        "before_after_code_files": [
          "src/type/__tests__/enumType-test.ts||src/type/__tests__/enumType-test.ts",
          "src/type/definition.ts||src/type/definition.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/type/__tests__/enumType-test.ts||src/type/__tests__/enumType-test.ts": [
          "File: src/type/__tests__/enumType-test.ts -> src/type/__tests__/enumType-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   },",
          "32: });",
          "34: const QueryType = new GraphQLObjectType({",
          "35:   name: 'Query',",
          "36:   fields: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: const ThunkValuesEnum = new GraphQLEnumType({",
          "35:   name: 'ThunkValues',",
          "36:   values: () => ({",
          "37:     A: { value: 'a' },",
          "38:     B: { value: 'b' },",
          "39:   }),",
          "40: });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:         return fromEnum;",
          "85:       },",
          "86:     },",
          "87:   },",
          "88: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:     thunkValuesString: {",
          "96:       type: GraphQLString,",
          "97:       args: {",
          "98:         fromEnum: { type: ThunkValuesEnum },",
          "99:       },",
          "100:       resolve(_source, { fromEnum }) {",
          "101:         return fromEnum;",
          "102:       },",
          "103:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "400:     });",
          "401:   });",
          "403:   it('can be introspected without error', () => {",
          "404:     expect(() => introspectionFromSchema(schema)).to.not.throw();",
          "405:   });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420:   it('may have values specified via a callback', () => {",
          "421:     const result = executeQuery('{ thunkValuesString(fromEnum: B) }');",
          "423:     expect(result).to.deep.equal({",
          "424:       data: { thunkValuesString: 'b' },",
          "425:     });",
          "426:   });",
          "",
          "---------------"
        ],
        "src/type/definition.ts||src/type/definition.ts": [
          "File: src/type/definition.ts -> src/type/definition.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1237:   [attributeName: string]: unknown;",
          "1238: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1240: function enumValuesFromConfig(values: GraphQLEnumValueConfigMap) {",
          "1241:   return Object.entries(values).map(([valueName, valueConfig]) => ({",
          "1242:     name: assertEnumValueName(valueName),",
          "1243:     description: valueConfig.description,",
          "1244:     value: valueConfig.value !== undefined ? valueConfig.value : valueName,",
          "1245:     deprecationReason: valueConfig.deprecationReason,",
          "1246:     extensions: toObjMap(valueConfig.extensions),",
          "1247:     astNode: valueConfig.astNode,",
          "1248:   }));",
          "1249: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1267:   astNode: Maybe<EnumTypeDefinitionNode>;",
          "1268:   extensionASTNodes: ReadonlyArray<EnumTypeExtensionNode>;",
          "1274:   constructor(config: Readonly<GraphQLEnumTypeConfig /* <T> */>) {",
          "1275:     this.name = assertName(config.name);",
          "",
          "[Removed Lines]",
          "1270:   private _values: ReadonlyArray<GraphQLEnumValue /* <T> */>;",
          "1271:   private _valueLookup: ReadonlyMap<any /* T */, GraphQLEnumValue>;",
          "1272:   private _nameLookup: ObjMap<GraphQLEnumValue>;",
          "",
          "[Added Lines]",
          "1281:   private _values:",
          "1282:     | ReadonlyArray<GraphQLEnumValue /* <T> */>",
          "1283:     | (() => GraphQLEnumValueConfigMap);",
          "1285:   private _valueLookup: ReadonlyMap<any /* T */, GraphQLEnumValue> | null;",
          "1286:   private _nameLookup: ObjMap<GraphQLEnumValue> | null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1278:     this.astNode = config.astNode;",
          "1279:     this.extensionASTNodes = config.extensionASTNodes ?? [];",
          "1295:   }",
          "1297:   get [Symbol.toStringTag]() {",
          "",
          "[Removed Lines]",
          "1281:     this._values = Object.entries(config.values).map(",
          "1282:       ([valueName, valueConfig]) => ({",
          "1283:         name: assertEnumValueName(valueName),",
          "1284:         description: valueConfig.description,",
          "1285:         value: valueConfig.value !== undefined ? valueConfig.value : valueName,",
          "1286:         deprecationReason: valueConfig.deprecationReason,",
          "1287:         extensions: toObjMap(valueConfig.extensions),",
          "1288:         astNode: valueConfig.astNode,",
          "1289:       }),",
          "1290:     );",
          "1291:     this._valueLookup = new Map(",
          "1292:       this._values.map((enumValue) => [enumValue.value, enumValue]),",
          "1293:     );",
          "1294:     this._nameLookup = keyMap(this._values, (value) => value.name);",
          "",
          "[Added Lines]",
          "1295:     this._values =",
          "1296:       typeof config.values === 'function'",
          "1297:         ? config.values",
          "1298:         : enumValuesFromConfig(config.values);",
          "1299:     this._valueLookup = null;",
          "1300:     this._nameLookup = null;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1299:   }",
          "1301:   getValues(): ReadonlyArray<GraphQLEnumValue /* <T> */> {",
          "1302:     return this._values;",
          "1303:   }",
          "1305:   getValue(name: string): Maybe<GraphQLEnumValue> {",
          "1306:     return this._nameLookup[name];",
          "1307:   }",
          "1309:   serialize(outputValue: unknown /* T */): Maybe<string> {",
          "1310:     const enumValue = this._valueLookup.get(outputValue);",
          "1311:     if (enumValue === undefined) {",
          "1312:       throw new GraphQLError(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1308:     if (typeof this._values === 'function') {",
          "1309:       this._values = enumValuesFromConfig(this._values());",
          "1310:     }",
          "1315:     if (this._nameLookup === null) {",
          "1316:       this._nameLookup = keyMap(this.getValues(), (value) => value.name);",
          "1317:     }",
          "1322:     if (this._valueLookup === null) {",
          "1323:       this._valueLookup = new Map(",
          "1324:         this.getValues().map((enumValue) => [enumValue.value, enumValue]),",
          "1325:       );",
          "1326:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1406: export interface GraphQLEnumTypeConfig {",
          "1407:   name: string;",
          "1408:   description?: Maybe<string>;",
          "1410:   extensions?: Maybe<Readonly<GraphQLEnumTypeExtensions>>;",
          "1411:   astNode?: Maybe<EnumTypeDefinitionNode>;",
          "1412:   extensionASTNodes?: Maybe<ReadonlyArray<EnumTypeExtensionNode>>;",
          "1413: }",
          "1415: interface GraphQLEnumTypeNormalizedConfig extends GraphQLEnumTypeConfig {",
          "1416:   extensions: Readonly<GraphQLEnumTypeExtensions>;",
          "1417:   extensionASTNodes: ReadonlyArray<EnumTypeExtensionNode>;",
          "1418: }",
          "",
          "[Removed Lines]",
          "1409:   values: GraphQLEnumValueConfigMap /* <T> */;",
          "",
          "[Added Lines]",
          "1426:   values: ThunkObjMap<GraphQLEnumValueConfig /* <T> */>;",
          "1433:   values: ObjMap<GraphQLEnumValueConfig /* <T> */>;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a6d055defd7a888f50c6133faae2b9010d45fad",
      "candidate_info": {
        "commit_hash": "7a6d055defd7a888f50c6133faae2b9010d45fad",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/7a6d055defd7a888f50c6133faae2b9010d45fad",
        "files": [
          ".eslintrc.cjs",
          "src/__testUtils__/kitchenSinkQuery.ts",
          "src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/stream-test.ts",
          "src/utilities/__tests__/printSchema-test.ts"
        ],
        "message": "tests: remove empty strings in string literals (#3970)",
        "before_after_code_files": [
          ".eslintrc.cjs||.eslintrc.cjs",
          "src/__testUtils__/kitchenSinkQuery.ts||src/__testUtils__/kitchenSinkQuery.ts",
          "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts",
          "src/utilities/__tests__/printSchema-test.ts||src/utilities/__tests__/printSchema-test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".eslintrc.cjs||.eslintrc.cjs": [
          "File: .eslintrc.cjs -> .eslintrc.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:     'no-restricted-globals': 'off',",
          "348:     'no-restricted-imports': 'off',",
          "349:     'no-restricted-properties': 'off',",
          "351:     'no-return-assign': 'error',",
          "352:     'no-return-await': 'error',",
          "353:     'no-script-url': 'error',",
          "",
          "[Removed Lines]",
          "350:     'no-restricted-syntax': 'off',",
          "",
          "[Added Lines]",
          "350:     'no-restricted-syntax': [",
          "351:       'error',",
          "352:       {",
          "353:         selector: 'TemplateElement[value.raw=/ \\\\n/]',",
          "354:         message:",
          "355:           'String literals should not contain trailing spaces. If needed for tests please disable locally using eslint comment',",
          "356:       },",
          "357:     ],",
          "",
          "---------------"
        ],
        "src/__testUtils__/kitchenSinkQuery.ts||src/__testUtils__/kitchenSinkQuery.ts": [
          "File: src/__testUtils__/kitchenSinkQuery.ts -> src/__testUtils__/kitchenSinkQuery.ts"
        ],
        "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts": [
          "File: src/execution/__tests__/defer-test.ts -> src/execution/__tests__/defer-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2025:       hero {",
          "2026:         friends {",
          "2027:           nonNullName",
          "2029:         }",
          "2030:       }",
          "2031:     }",
          "",
          "[Removed Lines]",
          "2028:           ...NameFragment @defer",
          "",
          "[Added Lines]",
          "2028:           ...NameFragment @defer",
          "",
          "---------------"
        ],
        "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts": [
          "File: src/execution/__tests__/stream-test.ts -> src/execution/__tests__/stream-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:   });",
          "315:   it('Can stream a field that returns a list of promises', async () => {",
          "316:     const document = parse(`",
          "318:         friendList @stream(initialCount: 2) {",
          "319:           name",
          "320:           id",
          "",
          "[Removed Lines]",
          "317:       query {",
          "",
          "[Added Lines]",
          "317:       query {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:   });",
          "361:   it('Can stream in correct order with lists of promises', async () => {",
          "362:     const document = parse(`",
          "364:         friendList @stream(initialCount: 0) {",
          "365:           name",
          "366:           id",
          "",
          "[Removed Lines]",
          "363:       query {",
          "",
          "[Added Lines]",
          "363:       query {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "410:   });",
          "411:   it('Can stream a field that returns a list with nested promises', async () => {",
          "412:     const document = parse(`",
          "414:         friendList @stream(initialCount: 2) {",
          "415:           name",
          "416:           id",
          "",
          "[Removed Lines]",
          "413:       query {",
          "",
          "[Added Lines]",
          "413:       query {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "460:   });",
          "461:   it('Handles rejections in a field that returns a list of promises before initialCount is reached', async () => {",
          "462:     const document = parse(`",
          "464:         friendList @stream(initialCount: 2) {",
          "465:           name",
          "466:           id",
          "",
          "[Removed Lines]",
          "463:       query {",
          "",
          "[Added Lines]",
          "463:       query {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "505:   });",
          "506:   it('Handles rejections in a field that returns a list of promises after initialCount is reached', async () => {",
          "507:     const document = parse(`",
          "509:         friendList @stream(initialCount: 1) {",
          "510:           name",
          "511:           id",
          "",
          "[Removed Lines]",
          "508:       query {",
          "",
          "[Added Lines]",
          "508:       query {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "559:   });",
          "560:   it('Can stream a field that returns an async iterable', async () => {",
          "561:     const document = parse(`",
          "563:         friendList @stream {",
          "564:           name",
          "565:           id",
          "",
          "[Removed Lines]",
          "562:       query {",
          "",
          "[Added Lines]",
          "562:       query {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "616:   });",
          "617:   it('Can stream a field that returns an async iterable, using a non-zero initialCount', async () => {",
          "618:     const document = parse(`",
          "620:         friendList @stream(initialCount: 2) {",
          "621:           name",
          "622:           id",
          "",
          "[Removed Lines]",
          "619:       query {",
          "",
          "[Added Lines]",
          "619:       query {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "658:   });",
          "659:   it('Negative values of initialCount throw field errors on a field that returns an async iterable', async () => {",
          "660:     const document = parse(`",
          "662:         friendList @stream(initialCount: -2) {",
          "663:           name",
          "664:           id",
          "",
          "[Removed Lines]",
          "661:       query {",
          "",
          "[Added Lines]",
          "661:       query {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "684:   });",
          "685:   it('Can handle concurrent calls to .next() without waiting', async () => {",
          "686:     const document = parse(`",
          "688:         friendList @stream(initialCount: 2) {",
          "689:           name",
          "690:           id",
          "",
          "[Removed Lines]",
          "687:       query {",
          "",
          "[Added Lines]",
          "687:       query {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "736:   });",
          "737:   it('Handles error thrown in async iterable before initialCount is reached', async () => {",
          "738:     const document = parse(`",
          "740:         friendList @stream(initialCount: 2) {",
          "741:           name",
          "742:           id",
          "",
          "[Removed Lines]",
          "739:       query {",
          "",
          "[Added Lines]",
          "739:       query {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "764:   });",
          "765:   it('Handles error thrown in async iterable after initialCount is reached', async () => {",
          "766:     const document = parse(`",
          "768:         friendList @stream(initialCount: 1) {",
          "769:           name",
          "770:           id",
          "",
          "[Removed Lines]",
          "767:       query {",
          "",
          "[Added Lines]",
          "767:       query {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "804:   });",
          "805:   it('Handles null returned in non-null list items after initialCount is reached', async () => {",
          "806:     const document = parse(`",
          "808:         nonNullFriendList @stream(initialCount: 1) {",
          "809:           name",
          "810:         }",
          "",
          "[Removed Lines]",
          "807:       query {",
          "",
          "[Added Lines]",
          "807:       query {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "842:   });",
          "843:   it('Handles null returned in non-null async iterable list items after initialCount is reached', async () => {",
          "844:     const document = parse(`",
          "846:         nonNullFriendList @stream(initialCount: 1) {",
          "847:           name",
          "848:         }",
          "",
          "[Removed Lines]",
          "845:       query {",
          "",
          "[Added Lines]",
          "845:       query {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "889:   });",
          "890:   it('Handles errors thrown by completeValue after initialCount is reached', async () => {",
          "891:     const document = parse(`",
          "893:         scalarList @stream(initialCount: 1)",
          "894:       }",
          "895:     `);",
          "",
          "[Removed Lines]",
          "892:       query {",
          "",
          "[Added Lines]",
          "892:       query {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "925:   });",
          "926:   it('Handles async errors thrown by completeValue after initialCount is reached', async () => {",
          "927:     const document = parse(`",
          "929:         friendList @stream(initialCount: 1) {",
          "930:           nonNullName",
          "931:         }",
          "",
          "[Removed Lines]",
          "928:       query {",
          "",
          "[Added Lines]",
          "928:       query {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "978:   });",
          "979:   it('Handles nested async errors thrown by completeValue after initialCount is reached', async () => {",
          "980:     const document = parse(`",
          "982:         friendList @stream(initialCount: 1) {",
          "983:           nonNullName",
          "984:         }",
          "",
          "[Removed Lines]",
          "981:       query {",
          "",
          "[Added Lines]",
          "981:       query {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1029:   });",
          "1030:   it('Handles async errors thrown by completeValue after initialCount is reached for a non-nullable list', async () => {",
          "1031:     const document = parse(`",
          "1033:         nonNullFriendList @stream(initialCount: 1) {",
          "1034:           nonNullName",
          "1035:         }",
          "",
          "[Removed Lines]",
          "1032:       query {",
          "",
          "[Added Lines]",
          "1032:       query {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1071:   });",
          "1072:   it('Handles nested async errors thrown by completeValue after initialCount is reached for a non-nullable list', async () => {",
          "1073:     const document = parse(`",
          "1075:         nonNullFriendList @stream(initialCount: 1) {",
          "1076:           nonNullName",
          "1077:         }",
          "",
          "[Removed Lines]",
          "1074:       query {",
          "",
          "[Added Lines]",
          "1074:       query {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1111:   });",
          "1112:   it('Handles async errors thrown by completeValue after initialCount is reached from async iterable', async () => {",
          "1113:     const document = parse(`",
          "1115:         friendList @stream(initialCount: 1) {",
          "1116:           nonNullName",
          "1117:         }",
          "",
          "[Removed Lines]",
          "1114:       query {",
          "",
          "[Added Lines]",
          "1114:       query {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1167:   });",
          "1168:   it('Handles async errors thrown by completeValue after initialCount is reached from async generator for a non-nullable list', async () => {",
          "1169:     const document = parse(`",
          "1171:         nonNullFriendList @stream(initialCount: 1) {",
          "1172:           nonNullName",
          "1173:         }",
          "",
          "[Removed Lines]",
          "1170:       query {",
          "",
          "[Added Lines]",
          "1170:       query {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1211:   });",
          "1212:   it('Handles async errors thrown by completeValue after initialCount is reached from async iterable for a non-nullable list when the async iterable does not provide a return method) ', async () => {",
          "1213:     const document = parse(`",
          "1215:         nonNullFriendList @stream(initialCount: 1) {",
          "1216:           nonNullName",
          "1217:         }",
          "",
          "[Removed Lines]",
          "1214:       query {",
          "",
          "[Added Lines]",
          "1214:       query {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1279:   });",
          "1280:   it('Handles async errors thrown by completeValue after initialCount is reached from async iterable for a non-nullable list when the async iterable provides concurrent next/return methods and has a slow return ', async () => {",
          "1281:     const document = parse(`",
          "1283:         nonNullFriendList @stream(initialCount: 1) {",
          "1284:           nonNullName",
          "1285:         }",
          "",
          "[Removed Lines]",
          "1282:       query {",
          "",
          "[Added Lines]",
          "1282:       query {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1358:   });",
          "1359:   it('Filters payloads that are nulled', async () => {",
          "1360:     const document = parse(`",
          "1362:         nestedObject {",
          "1363:           nonNullScalarField",
          "1364:           nestedFriendList @stream(initialCount: 0) {",
          "",
          "[Removed Lines]",
          "1361:       query {",
          "",
          "[Added Lines]",
          "1361:       query {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1391:   });",
          "1392:   it('Filters payloads that are nulled by a later synchronous error', async () => {",
          "1393:     const document = parse(`",
          "1395:         nestedObject {",
          "1396:           nestedFriendList @stream(initialCount: 0) {",
          "1397:             name",
          "",
          "[Removed Lines]",
          "1394:       query {",
          "",
          "[Added Lines]",
          "1394:       query {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1424:   });",
          "1425:   it('Does not filter payloads when null error is in a different path', async () => {",
          "1426:     const document = parse(`",
          "1428:         otherNestedObject: nestedObject {",
          "1429:           ... @defer {",
          "1430:             scalarField",
          "",
          "[Removed Lines]",
          "1427:       query {",
          "",
          "[Added Lines]",
          "1427:       query {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1486:   });",
          "1487:   it('Filters stream payloads that are nulled in a deferred payload', async () => {",
          "1488:     const document = parse(`",
          "1490:         nestedObject {",
          "1491:           ... @defer {",
          "1492:             deeperNestedObject {",
          "",
          "[Removed Lines]",
          "1489:       query {",
          "",
          "[Added Lines]",
          "1489:       query {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1545:   });",
          "1546:   it('Filters defer payloads that are nulled in a stream response', async () => {",
          "1547:     const document = parse(`",
          "1549:       friendList @stream(initialCount: 0) {",
          "1550:         nonNullName",
          "1551:         ... @defer {",
          "",
          "[Removed Lines]",
          "1548:     query {",
          "",
          "[Added Lines]",
          "1548:     query {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1624:     };",
          "1626:     const document = parse(`",
          "1628:         nestedObject {",
          "1629:           ... @defer {",
          "1630:             deeperNestedObject {",
          "",
          "[Removed Lines]",
          "1627:       query {",
          "",
          "[Added Lines]",
          "1627:       query {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1698:   });",
          "1699:   it('Handles promises returned by completeValue after initialCount is reached', async () => {",
          "1700:     const document = parse(`",
          "1702:         friendList @stream(initialCount: 1) {",
          "1703:           id",
          "1704:           name",
          "",
          "[Removed Lines]",
          "1701:       query {",
          "",
          "[Added Lines]",
          "1701:       query {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1815:     const { promise: slowFieldPromise, resolve: resolveSlowField } =",
          "1816:       promiseWithResolvers();",
          "1817:     const document = parse(`",
          "1819:         nestedObject {",
          "1820:           ... DeferFragment @defer",
          "1821:         }",
          "",
          "[Removed Lines]",
          "1818:       query {",
          "",
          "[Added Lines]",
          "1818:       query {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1918:     } = promiseWithResolvers();",
          "1920:     const document = parse(`",
          "1922:       friendList @stream(initialCount: 1, label:\"stream-label\") {",
          "1923:         ...NameFragment @defer(label: \"DeferName\") @defer(label: \"DeferName\")",
          "1924:         id",
          "",
          "[Removed Lines]",
          "1921:     query {",
          "",
          "[Added Lines]",
          "1921:     query {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2019:     } = promiseWithResolvers();",
          "2021:     const document = parse(`",
          "2023:       friendList @stream(initialCount: 1, label:\"stream-label\") {",
          "2024:         ...NameFragment @defer(label: \"DeferName\") @defer(label: \"DeferName\")",
          "2025:         id",
          "",
          "[Removed Lines]",
          "2022:     query {",
          "",
          "[Added Lines]",
          "2022:     query {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2131:     };",
          "2133:     const document = parse(`",
          "2135:         friendList @stream(initialCount: 1) {",
          "2136:           id",
          "2137:           ... @defer {",
          "",
          "[Removed Lines]",
          "2134:       query {",
          "",
          "[Added Lines]",
          "2134:       query {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2191:     };",
          "2193:     const document = parse(`",
          "2195:         friendList @stream(initialCount: 1) {",
          "2196:           name",
          "2197:           id",
          "",
          "[Removed Lines]",
          "2194:       query {",
          "",
          "[Added Lines]",
          "2194:       query {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2250:       }),",
          "2251:     };",
          "2252:     const document = parse(`",
          "2254:         friendList @stream(initialCount: 1) {",
          "2255:           ... @defer {",
          "2256:             name",
          "",
          "[Removed Lines]",
          "2253:       query {",
          "",
          "[Added Lines]",
          "2253:       query {",
          "",
          "---------------"
        ],
        "src/utilities/__tests__/printSchema-test.ts||src/utilities/__tests__/printSchema-test.ts": [
          "File: src/utilities/__tests__/printSchema-test.ts -> src/utilities/__tests__/printSchema-test.ts"
        ]
      }
    },
    {
      "candidate_hash": "8f4c64eb6a7112a929ffeef00caa67529b3f2fcf",
      "candidate_info": {
        "commit_hash": "8f4c64eb6a7112a929ffeef00caa67529b3f2fcf",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/8f4c64eb6a7112a929ffeef00caa67529b3f2fcf",
        "files": [
          "benchmark/repeated-fields-benchmark.js",
          "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
        ],
        "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3967)\n\nfixes from https://github.com/graphql/graphql-js/pull/3958 into",
        "before_after_code_files": [
          "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
          "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
            "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
          ],
          "candidate": [
            "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
            "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
          ]
        }
      },
      "candidate_diff": {
        "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
          "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: 'use strict';",
          "3: const { graphqlSync } = require('graphql/graphql.js');",
          "4: const { buildSchema } = require('graphql/utilities/buildASTSchema.js');",
          "6: const schema = buildSchema('type Query { hello: String! }');",
          "7: const source = `{ ${'hello '.repeat(250)}}`;",
          "9: module.exports = {",
          "10:   name: 'Many repeated fields',",
          "11:   count: 5,",
          "12:   measure() {",
          "13:     graphqlSync({ schema, source });",
          "14:   },",
          "15: };",
          "",
          "---------------"
        ],
        "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
          "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import { GraphQLError } from '../../error/GraphQLError';",
          "7: import type {",
          "8:   FieldNode,",
          "9:   FragmentDefinitionNode,",
          "11:   SelectionSetNode,",
          "12: } from '../../language/ast';",
          "13: import { Kind } from '../../language/kinds';",
          "14: import { print } from '../../language/printer';",
          "",
          "[Removed Lines]",
          "10:   ObjectValueNode,",
          "",
          "[Added Lines]",
          "8:   DirectiveNode,",
          "12:   ValueNode,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "588:     }",
          "592:       return [",
          "593:         [responseName, 'they have differing arguments'],",
          "594:         [node1],",
          "",
          "[Removed Lines]",
          "591:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
          "",
          "[Added Lines]",
          "592:     if (!sameArguments(node1, node2)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "634:   }",
          "635: }",
          "650: }",
          "",
          "[Removed Lines]",
          "637: function stringifyArguments(fieldNode: FieldNode): string {",
          "639:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
          "641:   const inputObjectWithArgs: ObjectValueNode = {",
          "642:     kind: Kind.OBJECT,",
          "643:     fields: args.map((argNode) => ({",
          "644:       kind: Kind.OBJECT_FIELD,",
          "645:       name: argNode.name,",
          "646:       value: argNode.value,",
          "647:     })),",
          "648:   };",
          "649:   return print(sortValueNode(inputObjectWithArgs));",
          "",
          "[Added Lines]",
          "638: function sameArguments(",
          "639:   node1: FieldNode | DirectiveNode,",
          "640:   node2: FieldNode | DirectiveNode,",
          "641: ): boolean {",
          "642:   const args1 = node1.arguments;",
          "643:   const args2 = node2.arguments;",
          "645:   if (args1 === undefined || args1.length === 0) {",
          "646:     return args2 === undefined || args2.length === 0;",
          "647:   }",
          "648:   if (args2 === undefined || args2.length === 0) {",
          "649:     return false;",
          "650:   }",
          "653:   if (args1.length !== args2.length) {",
          "655:     return false;",
          "657:   }",
          "659:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
          "660:   return args1.every((arg1) => {",
          "661:     const value1 = arg1.value;",
          "662:     const value2 = values2.get(arg1.name.value);",
          "663:     if (value2 === undefined) {",
          "664:       return false;",
          "665:     }",
          "667:     return stringifyValue(value1) === stringifyValue(value2);",
          "668:   });",
          "669: }",
          "671: function stringifyValue(value: ValueNode): string | null {",
          "672:   return print(sortValueNode(value));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e430e3d005ed0fade2f399eb87f24aad6449fda0",
      "candidate_info": {
        "commit_hash": "e430e3d005ed0fade2f399eb87f24aad6449fda0",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/e430e3d005ed0fade2f399eb87f24aad6449fda0",
        "files": [
          "validation/rules/OverlappingFieldsCanBeMergedRule.js",
          "validation/rules/OverlappingFieldsCanBeMergedRule.mjs"
        ],
        "message": "Deploy  to 'npm' branch",
        "before_after_code_files": [
          "validation/rules/OverlappingFieldsCanBeMergedRule.js||validation/rules/OverlappingFieldsCanBeMergedRule.js",
          "validation/rules/OverlappingFieldsCanBeMergedRule.mjs||validation/rules/OverlappingFieldsCanBeMergedRule.mjs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "validation/rules/OverlappingFieldsCanBeMergedRule.js||validation/rules/OverlappingFieldsCanBeMergedRule.js": [
          "File: validation/rules/OverlappingFieldsCanBeMergedRule.js -> validation/rules/OverlappingFieldsCanBeMergedRule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:       ];",
          "517:     }",
          "520:       return [",
          "521:         [responseName, 'they have differing arguments'],",
          "522:         [node1],",
          "",
          "[Removed Lines]",
          "519:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
          "",
          "[Added Lines]",
          "519:     if (!sameArguments(node1, node2)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:     return subfieldConflicts(conflicts, responseName, node1, node2);",
          "569:   }",
          "570: }",
          "585: }",
          "586: function getStreamDirective(directives) {",
          "587:   return directives.find((directive) => directive.name.value === 'stream');",
          "",
          "[Removed Lines]",
          "571: function stringifyArguments(fieldNode) {",
          "573:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
          "574:   const inputObjectWithArgs = {",
          "575:     kind: kinds_js_1.Kind.OBJECT,",
          "576:     fields: args.map((argNode) => ({",
          "577:       kind: kinds_js_1.Kind.OBJECT_FIELD,",
          "578:       name: argNode.name,",
          "579:       value: argNode.value,",
          "580:     })),",
          "581:   };",
          "582:   return (0, printer_js_1.print)(",
          "583:     (0, sortValueNode_js_1.sortValueNode)(inputObjectWithArgs),",
          "584:   );",
          "",
          "[Added Lines]",
          "571: function sameArguments(node1, node2) {",
          "572:   const args1 = node1.arguments;",
          "573:   const args2 = node2.arguments;",
          "574:   if (args1 === undefined || args1.length === 0) {",
          "575:     return args2 === undefined || args2.length === 0;",
          "576:   }",
          "577:   if (args2 === undefined || args2.length === 0) {",
          "578:     return false;",
          "579:   }",
          "580:   if (args1.length !== args2.length) {",
          "581:     return false;",
          "582:   }",
          "583:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
          "584:   return args1.every((arg1) => {",
          "585:     const value1 = arg1.value;",
          "586:     const value2 = values2.get(arg1.name.value);",
          "587:     if (value2 === undefined) {",
          "588:       return false;",
          "589:     }",
          "590:     return stringifyValue(value1) === stringifyValue(value2);",
          "591:   });",
          "592: }",
          "593: function stringifyValue(value) {",
          "594:   return (0, printer_js_1.print)((0, sortValueNode_js_1.sortValueNode)(value));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "594:     return true;",
          "595:   } else if (stream1 && stream2) {",
          "598:   }",
          "600:   return false;",
          "",
          "[Removed Lines]",
          "597:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
          "",
          "[Added Lines]",
          "607:     return sameArguments(stream1, stream2);",
          "",
          "---------------"
        ],
        "validation/rules/OverlappingFieldsCanBeMergedRule.mjs||validation/rules/OverlappingFieldsCanBeMergedRule.mjs": [
          "File: validation/rules/OverlappingFieldsCanBeMergedRule.mjs -> validation/rules/OverlappingFieldsCanBeMergedRule.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:       ];",
          "520:     }",
          "523:       return [",
          "524:         [responseName, 'they have differing arguments'],",
          "525:         [node1],",
          "",
          "[Removed Lines]",
          "522:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
          "",
          "[Added Lines]",
          "522:     if (!sameArguments(node1, node2)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "571:     return subfieldConflicts(conflicts, responseName, node1, node2);",
          "572:   }",
          "573: }",
          "586: }",
          "587: function getStreamDirective(directives) {",
          "588:   return directives.find((directive) => directive.name.value === 'stream');",
          "",
          "[Removed Lines]",
          "574: function stringifyArguments(fieldNode) {",
          "576:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
          "577:   const inputObjectWithArgs = {",
          "578:     kind: Kind.OBJECT,",
          "579:     fields: args.map((argNode) => ({",
          "580:       kind: Kind.OBJECT_FIELD,",
          "581:       name: argNode.name,",
          "582:       value: argNode.value,",
          "583:     })),",
          "584:   };",
          "585:   return print(sortValueNode(inputObjectWithArgs));",
          "",
          "[Added Lines]",
          "574: function sameArguments(node1, node2) {",
          "575:   const args1 = node1.arguments;",
          "576:   const args2 = node2.arguments;",
          "577:   if (args1 === undefined || args1.length === 0) {",
          "578:     return args2 === undefined || args2.length === 0;",
          "579:   }",
          "580:   if (args2 === undefined || args2.length === 0) {",
          "581:     return false;",
          "582:   }",
          "583:   if (args1.length !== args2.length) {",
          "584:     return false;",
          "585:   }",
          "586:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
          "587:   return args1.every((arg1) => {",
          "588:     const value1 = arg1.value;",
          "589:     const value2 = values2.get(arg1.name.value);",
          "590:     if (value2 === undefined) {",
          "591:       return false;",
          "592:     }",
          "593:     return stringifyValue(value1) === stringifyValue(value2);",
          "594:   });",
          "595: }",
          "596: function stringifyValue(value) {",
          "597:   return print(sortValueNode(value));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "595:     return true;",
          "596:   } else if (stream1 && stream2) {",
          "599:   }",
          "601:   return false;",
          "",
          "[Removed Lines]",
          "598:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
          "",
          "[Added Lines]",
          "610:     return sameArguments(stream1, stream2);",
          "",
          "---------------"
        ]
      }
    }
  ]
}