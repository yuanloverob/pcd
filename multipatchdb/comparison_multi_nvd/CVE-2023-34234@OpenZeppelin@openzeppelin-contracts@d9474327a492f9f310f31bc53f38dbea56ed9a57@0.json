{
  "cve_id": "CVE-2023-34234",
  "cve_desc": " OpenZeppelin Contracts is a library for smart contract development. By frontrunning the creation of a proposal, an attacker can become the proposer and gain the ability to cancel it. The attacker can do this repeatedly to try to prevent a proposal from being proposed at all. This impacts the `Governor` contract in v4.9.0 only, and the `GovernorCompatibilityBravo` contract since v4.3.0. This problem has been patched in 4.9.1 by introducing opt-in frontrunning protection. Users are advised to upgrade. Users unable to upgrade may submit the proposal creation transaction to an endpoint with frontrunning protection as a workaround.",
  "repo": "OpenZeppelin/openzeppelin-contracts",
  "patch_hash": "d9474327a492f9f310f31bc53f38dbea56ed9a57",
  "patch_info": {
    "commit_hash": "d9474327a492f9f310f31bc53f38dbea56ed9a57",
    "repo": "OpenZeppelin/openzeppelin-contracts",
    "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57",
    "files": [
      ".changeset/swift-bags-divide.md",
      "contracts/governance/Governor.sol",
      "test/governance/Governor.t.sol",
      "test/governance/Governor.test.js"
    ],
    "message": "Merge pull request from GHSA-5h3x-9wvq-w4m2\n\nCo-authored-by: Francisco <fg@frang.io>\nCo-authored-by: Ernesto Garc\u00eda <ernestognw@gmail.com>",
    "before_after_code_files": [
      "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
      "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
      "test/governance/Governor.test.js||test/governance/Governor.test.js"
    ]
  },
  "patch_diff": {
    "contracts/governance/Governor.sol||contracts/governance/Governor.sol": [
      "File: contracts/governance/Governor.sol -> contracts/governance/Governor.sol",
      "--- Hunk 1 ---",
      "[Context before]",
      "272:         string memory description",
      "273:     ) public virtual override returns (uint256) {",
      "274:         address proposer = _msgSender();",
      "277:         require(",
      "278:             getVotes(proposer, currentTimepoint - 1) >= proposalThreshold(),",
      "279:             \"Governor: proposer votes below proposal threshold\"",
      "",
      "[Removed Lines]",
      "275:         uint256 currentTimepoint = clock();",
      "",
      "[Added Lines]",
      "275:         require(_isValidDescriptionForProposer(proposer, description), \"Governor: proposer restricted\");",
      "277:         uint256 currentTimepoint = clock();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "628:     ) public virtual returns (bytes4) {",
      "629:         return this.onERC1155BatchReceived.selector;",
      "630:     }",
      "631: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "650:     function _isValidDescriptionForProposer(",
      "651:         address proposer,",
      "652:         string memory description",
      "653:     ) internal view virtual returns (bool) {",
      "654:         uint256 len = bytes(description).length;",
      "657:         if (len < 52) {",
      "658:             return true;",
      "659:         }",
      "662:         bytes12 marker;",
      "663:         assembly {",
      "670:             marker := mload(add(description, sub(len, 20)))",
      "671:         }",
      "674:         if (marker != bytes12(\"#proposer=0x\")) {",
      "675:             return true;",
      "676:         }",
      "679:         uint160 recovered = 0;",
      "680:         for (uint256 i = len - 40; i < len; ++i) {",
      "681:             (bool isHex, uint8 value) = _tryHexToUint(bytes(description)[i]);",
      "683:             if (!isHex) {",
      "684:                 return true;",
      "685:             }",
      "686:             recovered = (recovered << 4) | value;",
      "687:         }",
      "689:         return recovered == uint160(proposer);",
      "690:     }",
      "696:     function _tryHexToUint(bytes1 char) private pure returns (bool, uint8) {",
      "697:         uint8 c = uint8(char);",
      "698:         unchecked {",
      "700:             if (47 < c && c < 58) {",
      "701:                 return (true, c - 48);",
      "702:             }",
      "704:             else if (64 < c && c < 71) {",
      "705:                 return (true, c - 55);",
      "706:             }",
      "708:             else if (96 < c && c < 103) {",
      "709:                 return (true, c - 87);",
      "710:             }",
      "712:             else {",
      "713:                 return (false, 0);",
      "714:             }",
      "715:         }",
      "716:     }",
      "",
      "---------------"
    ],
    "test/governance/Governor.t.sol||test/governance/Governor.t.sol": [
      "File: test/governance/Governor.t.sol -> test/governance/Governor.t.sol",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: pragma solidity ^0.8.19;",
      "5: import \"forge-std/Test.sol\";",
      "6: import \"../../contracts/utils/Strings.sol\";",
      "7: import \"../../contracts/governance/Governor.sol\";",
      "9: contract GovernorInternalTest is Test, Governor {",
      "10:     constructor() Governor(\"\") {}",
      "12:     function testValidDescriptionForProposer(string memory description, address proposer, bool includeProposer) public {",
      "13:         if (includeProposer) {",
      "14:             description = string.concat(description, \"#proposer=\", Strings.toHexString(proposer));",
      "15:         }",
      "16:         assertTrue(_isValidDescriptionForProposer(proposer, description));",
      "17:     }",
      "19:     function testInvalidDescriptionForProposer(",
      "20:         string memory description,",
      "21:         address commitProposer,",
      "22:         address actualProposer",
      "23:     ) public {",
      "24:         vm.assume(commitProposer != actualProposer);",
      "25:         description = string.concat(description, \"#proposer=\", Strings.toHexString(commitProposer));",
      "26:         assertFalse(_isValidDescriptionForProposer(actualProposer, description));",
      "27:     }",
      "32:     function clock() public pure override returns (uint48) {}",
      "35:     function CLOCK_MODE() public pure override returns (string memory) {}",
      "38:     function COUNTING_MODE() public pure virtual override returns (string memory) {}",
      "40:     function votingDelay() public pure virtual override returns (uint256) {}",
      "42:     function votingPeriod() public pure virtual override returns (uint256) {}",
      "44:     function quorum(uint256) public pure virtual override returns (uint256) {}",
      "46:     function hasVoted(uint256, address) public pure virtual override returns (bool) {}",
      "48:     function _quorumReached(uint256) internal pure virtual override returns (bool) {}",
      "50:     function _voteSucceeded(uint256) internal pure virtual override returns (bool) {}",
      "52:     function _getVotes(address, uint256, bytes memory) internal pure virtual override returns (uint256) {}",
      "54:     function _countVote(uint256, address, uint8, uint256, bytes memory) internal virtual override {}",
      "55: }",
      "",
      "---------------"
    ],
    "test/governance/Governor.test.js||test/governance/Governor.test.js": [
      "File: test/governance/Governor.test.js -> test/governance/Governor.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "551:         });",
      "552:       });",
      "554:       describe('onlyGovernance updates', function () {",
      "555:         it('setVotingDelay is protected', async function () {",
      "556:           await expectRevert(this.mock.setVotingDelay('0'), 'Governor: onlyGovernance');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "554:       describe('frontrun protection using description suffix', function () {",
      "555:         describe('without protection', function () {",
      "556:           describe('without suffix', function () {",
      "557:             it('proposer can propose', async function () {",
      "558:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
      "559:             });",
      "561:             it('someone else can propose', async function () {",
      "562:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
      "563:             });",
      "564:           });",
      "566:           describe('with different suffix', function () {",
      "567:             beforeEach(async function () {",
      "568:               this.proposal = this.helper.setProposal(",
      "569:                 [",
      "570:                   {",
      "571:                     target: this.receiver.address,",
      "572:                     data: this.receiver.contract.methods.mockFunction().encodeABI(),",
      "573:                     value,",
      "574:                   },",
      "575:                 ],",
      "576:                 `<proposal description>#wrong-suffix=${proposer}`,",
      "577:               );",
      "578:             });",
      "580:             it('proposer can propose', async function () {",
      "581:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
      "582:             });",
      "584:             it('someone else can propose', async function () {",
      "585:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
      "586:             });",
      "587:           });",
      "589:           describe('with proposer suffix but bad address part', function () {",
      "590:             beforeEach(async function () {",
      "591:               this.proposal = this.helper.setProposal(",
      "592:                 [",
      "593:                   {",
      "594:                     target: this.receiver.address,",
      "595:                     data: this.receiver.contract.methods.mockFunction().encodeABI(),",
      "596:                     value,",
      "597:                   },",
      "598:                 ],",
      "599:                 `<proposal description>#proposer=0x3C44CdDdB6a900fa2b585dd299e03d12FA429XYZ`, // XYZ are not a valid hex char",
      "600:               );",
      "601:             });",
      "603:             it('propose can propose', async function () {",
      "604:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
      "605:             });",
      "607:             it('someone else can propose', async function () {",
      "608:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
      "609:             });",
      "610:           });",
      "611:         });",
      "613:         describe('with protection via proposer suffix', function () {",
      "614:           beforeEach(async function () {",
      "615:             this.proposal = this.helper.setProposal(",
      "616:               [",
      "617:                 {",
      "618:                   target: this.receiver.address,",
      "619:                   data: this.receiver.contract.methods.mockFunction().encodeABI(),",
      "620:                   value,",
      "621:                 },",
      "622:               ],",
      "623:               `<proposal description>#proposer=${proposer}`,",
      "624:             );",
      "625:           });",
      "627:           it('proposer can propose', async function () {",
      "628:             expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
      "629:           });",
      "631:           it('someone else cannot propose', async function () {",
      "632:             await expectRevert(this.helper.propose({ from: voter1 }), 'Governor: proposer restricted');",
      "633:           });",
      "634:         });",
      "635:       });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "33ff9b086dab790e87948f6007aa4b00bf5252cc",
      "candidate_info": {
        "commit_hash": "33ff9b086dab790e87948f6007aa4b00bf5252cc",
        "repo": "OpenZeppelin/openzeppelin-contracts",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/33ff9b086dab790e87948f6007aa4b00bf5252cc",
        "files": [
          ".changeset/swift-bags-divide.md",
          "contracts/governance/Governor.sol",
          "test/governance/Governor.t.sol",
          "test/governance/Governor.test.js"
        ],
        "message": "Merge pull request from GHSA-5h3x-9wvq-w4m2\n\nCo-authored-by: Francisco <fg@frang.io>\nCo-authored-by: Ernesto Garc\u00eda <ernestognw@gmail.com>\n(cherry picked from commit d9474327a492f9f310f31bc53f38dbea56ed9a57)",
        "before_after_code_files": [
          "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
          "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
          "test/governance/Governor.test.js||test/governance/Governor.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
            "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
            "test/governance/Governor.test.js||test/governance/Governor.test.js"
          ],
          "candidate": [
            "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
            "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
            "test/governance/Governor.test.js||test/governance/Governor.test.js"
          ]
        }
      },
      "candidate_diff": {
        "contracts/governance/Governor.sol||contracts/governance/Governor.sol": [
          "File: contracts/governance/Governor.sol -> contracts/governance/Governor.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:         string memory description",
          "273:     ) public virtual override returns (uint256) {",
          "274:         address proposer = _msgSender();",
          "277:         require(",
          "278:             getVotes(proposer, currentTimepoint - 1) >= proposalThreshold(),",
          "279:             \"Governor: proposer votes below proposal threshold\"",
          "",
          "[Removed Lines]",
          "275:         uint256 currentTimepoint = clock();",
          "",
          "[Added Lines]",
          "275:         require(_isValidDescriptionForProposer(proposer, description), \"Governor: proposer restricted\");",
          "277:         uint256 currentTimepoint = clock();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "634:     ) public virtual override returns (bytes4) {",
          "635:         return this.onERC1155BatchReceived.selector;",
          "636:     }",
          "637: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656:     function _isValidDescriptionForProposer(",
          "657:         address proposer,",
          "658:         string memory description",
          "659:     ) internal view virtual returns (bool) {",
          "660:         uint256 len = bytes(description).length;",
          "663:         if (len < 52) {",
          "664:             return true;",
          "665:         }",
          "668:         bytes12 marker;",
          "669:         assembly {",
          "676:             marker := mload(add(description, sub(len, 20)))",
          "677:         }",
          "680:         if (marker != bytes12(\"#proposer=0x\")) {",
          "681:             return true;",
          "682:         }",
          "685:         uint160 recovered = 0;",
          "686:         for (uint256 i = len - 40; i < len; ++i) {",
          "687:             (bool isHex, uint8 value) = _tryHexToUint(bytes(description)[i]);",
          "689:             if (!isHex) {",
          "690:                 return true;",
          "691:             }",
          "692:             recovered = (recovered << 4) | value;",
          "693:         }",
          "695:         return recovered == uint160(proposer);",
          "696:     }",
          "702:     function _tryHexToUint(bytes1 char) private pure returns (bool, uint8) {",
          "703:         uint8 c = uint8(char);",
          "704:         unchecked {",
          "706:             if (47 < c && c < 58) {",
          "707:                 return (true, c - 48);",
          "708:             }",
          "710:             else if (64 < c && c < 71) {",
          "711:                 return (true, c - 55);",
          "712:             }",
          "714:             else if (96 < c && c < 103) {",
          "715:                 return (true, c - 87);",
          "716:             }",
          "718:             else {",
          "719:                 return (false, 0);",
          "720:             }",
          "721:         }",
          "722:     }",
          "",
          "---------------"
        ],
        "test/governance/Governor.t.sol||test/governance/Governor.t.sol": [
          "File: test/governance/Governor.t.sol -> test/governance/Governor.t.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: pragma solidity ^0.8.19;",
          "5: import \"forge-std/Test.sol\";",
          "6: import \"../../contracts/utils/Strings.sol\";",
          "7: import \"../../contracts/governance/Governor.sol\";",
          "9: contract GovernorInternalTest is Test, Governor {",
          "10:     constructor() Governor(\"\") {}",
          "12:     function testValidDescriptionForProposer(string memory description, address proposer, bool includeProposer) public {",
          "13:         if (includeProposer) {",
          "14:             description = string.concat(description, \"#proposer=\", Strings.toHexString(proposer));",
          "15:         }",
          "16:         assertTrue(_isValidDescriptionForProposer(proposer, description));",
          "17:     }",
          "19:     function testInvalidDescriptionForProposer(",
          "20:         string memory description,",
          "21:         address commitProposer,",
          "22:         address actualProposer",
          "23:     ) public {",
          "24:         vm.assume(commitProposer != actualProposer);",
          "25:         description = string.concat(description, \"#proposer=\", Strings.toHexString(commitProposer));",
          "26:         assertFalse(_isValidDescriptionForProposer(actualProposer, description));",
          "27:     }",
          "32:     function clock() public pure override returns (uint48) {}",
          "35:     function CLOCK_MODE() public pure override returns (string memory) {}",
          "38:     function COUNTING_MODE() public pure virtual override returns (string memory) {}",
          "40:     function votingDelay() public pure virtual override returns (uint256) {}",
          "42:     function votingPeriod() public pure virtual override returns (uint256) {}",
          "44:     function quorum(uint256) public pure virtual override returns (uint256) {}",
          "46:     function hasVoted(uint256, address) public pure virtual override returns (bool) {}",
          "48:     function _quorumReached(uint256) internal pure virtual override returns (bool) {}",
          "50:     function _voteSucceeded(uint256) internal pure virtual override returns (bool) {}",
          "52:     function _getVotes(address, uint256, bytes memory) internal pure virtual override returns (uint256) {}",
          "54:     function _countVote(uint256, address, uint8, uint256, bytes memory) internal virtual override {}",
          "55: }",
          "",
          "---------------"
        ],
        "test/governance/Governor.test.js||test/governance/Governor.test.js": [
          "File: test/governance/Governor.test.js -> test/governance/Governor.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "544:         });",
          "545:       });",
          "547:       describe('onlyGovernance updates', function () {",
          "548:         it('setVotingDelay is protected', async function () {",
          "549:           await expectRevert(this.mock.setVotingDelay('0'), 'Governor: onlyGovernance');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "547:       describe('frontrun protection using description suffix', function () {",
          "548:         describe('without protection', function () {",
          "549:           describe('without suffix', function () {",
          "550:             it('proposer can propose', async function () {",
          "551:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
          "552:             });",
          "554:             it('someone else can propose', async function () {",
          "555:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
          "556:             });",
          "557:           });",
          "559:           describe('with different suffix', function () {",
          "560:             beforeEach(async function () {",
          "561:               this.proposal = this.helper.setProposal(",
          "562:                 [",
          "563:                   {",
          "564:                     target: this.receiver.address,",
          "565:                     data: this.receiver.contract.methods.mockFunction().encodeABI(),",
          "566:                     value,",
          "567:                   },",
          "568:                 ],",
          "569:                 `<proposal description>#wrong-suffix=${proposer}`,",
          "570:               );",
          "571:             });",
          "573:             it('proposer can propose', async function () {",
          "574:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
          "575:             });",
          "577:             it('someone else can propose', async function () {",
          "578:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
          "579:             });",
          "580:           });",
          "582:           describe('with proposer suffix but bad address part', function () {",
          "583:             beforeEach(async function () {",
          "584:               this.proposal = this.helper.setProposal(",
          "585:                 [",
          "586:                   {",
          "587:                     target: this.receiver.address,",
          "588:                     data: this.receiver.contract.methods.mockFunction().encodeABI(),",
          "589:                     value,",
          "590:                   },",
          "591:                 ],",
          "592:                 `<proposal description>#proposer=0x3C44CdDdB6a900fa2b585dd299e03d12FA429XYZ`, // XYZ are not a valid hex char",
          "593:               );",
          "594:             });",
          "596:             it('propose can propose', async function () {",
          "597:               expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
          "598:             });",
          "600:             it('someone else can propose', async function () {",
          "601:               expectEvent(await this.helper.propose({ from: voter1 }), 'ProposalCreated');",
          "602:             });",
          "603:           });",
          "604:         });",
          "606:         describe('with protection via proposer suffix', function () {",
          "607:           beforeEach(async function () {",
          "608:             this.proposal = this.helper.setProposal(",
          "609:               [",
          "610:                 {",
          "611:                   target: this.receiver.address,",
          "612:                   data: this.receiver.contract.methods.mockFunction().encodeABI(),",
          "613:                   value,",
          "614:                 },",
          "615:               ],",
          "616:               `<proposal description>#proposer=${proposer}`,",
          "617:             );",
          "618:           });",
          "620:           it('proposer can propose', async function () {",
          "621:             expectEvent(await this.helper.propose({ from: proposer }), 'ProposalCreated');",
          "622:           });",
          "624:           it('someone else cannot propose', async function () {",
          "625:             await expectRevert(this.helper.propose({ from: voter1 }), 'Governor: proposer restricted');",
          "626:           });",
          "627:         });",
          "628:       });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21716722ad78ee3e9bf21a5b47ff420323c8fe27",
      "candidate_info": {
        "commit_hash": "21716722ad78ee3e9bf21a5b47ff420323c8fe27",
        "repo": "OpenZeppelin/openzeppelin-contracts",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/21716722ad78ee3e9bf21a5b47ff420323c8fe27",
        "files": [
          ".changeset/brave-lobsters-punch.md",
          ".changeset/wild-beds-visit.md",
          "contracts/governance/Governor.sol",
          "contracts/governance/IGovernor.sol",
          "contracts/governance/README.adoc",
          "contracts/governance/compatibility/GovernorCompatibilityBravo.sol",
          "contracts/governance/compatibility/IGovernorCompatibilityBravo.sol",
          "contracts/governance/extensions/GovernorStorage.sol",
          "contracts/governance/extensions/GovernorTimelockCompound.sol",
          "contracts/governance/extensions/GovernorTimelockControl.sol",
          "contracts/governance/extensions/IGovernorTimelock.sol",
          "contracts/mocks/docs/governance/MyGovernor.sol",
          "contracts/mocks/governance/GovernorCompatibilityBravoMock.sol",
          "contracts/mocks/governance/GovernorStorageMock.sol",
          "contracts/mocks/governance/GovernorTimelockCompoundMock.sol",
          "contracts/mocks/governance/GovernorTimelockControlMock.sol",
          "docs/modules/ROOT/pages/governance.adoc",
          "test/governance/Governor.test.js",
          "test/governance/compatibility/GovernorCompatibilityBravo.test.js",
          "test/governance/extensions/GovernorStorage.test.js",
          "test/governance/extensions/GovernorTimelockCompound.test.js",
          "test/governance/extensions/GovernorTimelockControl.test.js",
          "test/helpers/create.js",
          "test/helpers/governance.js",
          "test/proxy/Clones.test.js",
          "test/utils/Create2.test.js",
          "test/utils/introspection/SupportsInterface.behavior.js"
        ],
        "message": "Remove GovernorCompatibilyBravo and add simpler GovernorStorage (#4360)\n\nCo-authored-by: Ernesto Garc\u00eda <ernestognw@gmail.com>\nCo-authored-by: Francisco Giordano <fg@frang.io>",
        "before_after_code_files": [
          "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
          "contracts/governance/IGovernor.sol||contracts/governance/IGovernor.sol",
          "contracts/governance/compatibility/GovernorCompatibilityBravo.sol||contracts/governance/compatibility/GovernorCompatibilityBravo.sol",
          "contracts/governance/compatibility/IGovernorCompatibilityBravo.sol||contracts/governance/compatibility/IGovernorCompatibilityBravo.sol",
          "contracts/governance/extensions/GovernorStorage.sol||contracts/governance/extensions/GovernorStorage.sol",
          "contracts/governance/extensions/GovernorTimelockCompound.sol||contracts/governance/extensions/GovernorTimelockCompound.sol",
          "contracts/governance/extensions/GovernorTimelockControl.sol||contracts/governance/extensions/GovernorTimelockControl.sol",
          "contracts/governance/extensions/IGovernorTimelock.sol||contracts/governance/extensions/IGovernorTimelock.sol",
          "contracts/mocks/governance/GovernorCompatibilityBravoMock.sol||contracts/mocks/governance/GovernorCompatibilityBravoMock.sol",
          "contracts/mocks/governance/GovernorStorageMock.sol||contracts/mocks/governance/GovernorStorageMock.sol",
          "contracts/mocks/governance/GovernorTimelockCompoundMock.sol||contracts/mocks/governance/GovernorTimelockCompoundMock.sol",
          "contracts/mocks/governance/GovernorTimelockControlMock.sol||contracts/mocks/governance/GovernorTimelockControlMock.sol",
          "test/governance/Governor.test.js||test/governance/Governor.test.js",
          "test/governance/compatibility/GovernorCompatibilityBravo.test.js||test/governance/compatibility/GovernorCompatibilityBravo.test.js",
          "test/governance/extensions/GovernorStorage.test.js||test/governance/extensions/GovernorStorage.test.js",
          "test/governance/extensions/GovernorTimelockCompound.test.js||test/governance/extensions/GovernorTimelockCompound.test.js",
          "test/governance/extensions/GovernorTimelockControl.test.js||test/governance/extensions/GovernorTimelockControl.test.js",
          "test/helpers/create.js||test/helpers/create.js",
          "test/helpers/governance.js||test/helpers/governance.js",
          "test/proxy/Clones.test.js||test/proxy/Clones.test.js",
          "test/utils/Create2.test.js||test/utils/Create2.test.js",
          "test/utils/introspection/SupportsInterface.behavior.js||test/utils/introspection/SupportsInterface.behavior.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
            "test/governance/Governor.test.js||test/governance/Governor.test.js"
          ],
          "candidate": [
            "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
            "test/governance/Governor.test.js||test/governance/Governor.test.js"
          ]
        }
      },
      "candidate_diff": {
        "contracts/governance/Governor.sol||contracts/governance/Governor.sol": [
          "File: contracts/governance/Governor.sol -> contracts/governance/Governor.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         bool executed;",
          "43:         bool canceled;",
          "44:     }",
          "47:     bytes32 private constant _ALL_PROPOSAL_STATES_BITMAP = bytes32((2 ** (uint8(type(ProposalState).max) + 1)) - 1);",
          "48:     string private _name;",
          "",
          "[Removed Lines]",
          "50:     mapping(uint256 => ProposalCore) private _proposals;",
          "",
          "[Added Lines]",
          "45:     struct ProposalExtra {",
          "46:         uint48 eta;",
          "47:     }",
          "50:     struct ProposalFull {",
          "51:         ProposalCore core;",
          "52:         ProposalExtra extra;",
          "53:     }",
          "58:     mapping(uint256 => ProposalFull) private _proposals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {",
          "110:         return",
          "114:             interfaceId == type(IERC1155Receiver).interfaceId ||",
          "115:             super.supportsInterface(interfaceId);",
          "116:     }",
          "",
          "[Removed Lines]",
          "93:         bytes4 governorCancelId = this.cancel.selector ^ this.proposalProposer.selector;",
          "95:         bytes4 governorParamsId = this.castVoteWithReasonAndParams.selector ^",
          "96:             this.castVoteWithReasonAndParamsBySig.selector ^",
          "97:             this.getVotesWithParams.selector;",
          "100:         bytes4 governor43Id = type(IGovernor).interfaceId ^",
          "101:             type(IERC6372).interfaceId ^",
          "102:             governorCancelId ^",
          "103:             governorParamsId;",
          "106:         bytes4 governor46Id = type(IGovernor).interfaceId ^ type(IERC6372).interfaceId ^ governorCancelId;",
          "111:             interfaceId == governor43Id ||",
          "112:             interfaceId == governor46Id ||",
          "113:             interfaceId == governorCancelId ||",
          "",
          "[Added Lines]",
          "102:             interfaceId == type(IGovernor).interfaceId ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:     function state(uint256 proposalId) public view virtual override returns (ProposalState) {",
          "163:             return ProposalState.Executed;",
          "167:             return ProposalState.Canceled;",
          "168:         }",
          "",
          "[Removed Lines]",
          "160:         ProposalCore memory proposal = _proposals[proposalId];",
          "162:         if (proposal.executed) {",
          "164:         }",
          "166:         if (proposal.canceled) {",
          "",
          "[Added Lines]",
          "149:         ProposalCore memory core = _proposals[proposalId].core;",
          "151:         if (core.executed) {",
          "153:         } else if (core.canceled) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:         if (deadline >= currentTimepoint) {",
          "185:             return ProposalState.Active;",
          "189:             return ProposalState.Succeeded;",
          "190:         } else {",
          "192:         }",
          "193:     }",
          "199:         return 0;",
          "200:     }",
          "",
          "[Removed Lines]",
          "186:         }",
          "188:         if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {",
          "191:             return ProposalState.Defeated;",
          "198:     function proposalThreshold() public view virtual returns (uint256) {",
          "",
          "[Added Lines]",
          "173:         } else if (!_quorumReached(proposalId) || !_voteSucceeded(proposalId)) {",
          "174:             return ProposalState.Defeated;",
          "175:         } else if (proposalEta(proposalId) == 0) {",
          "178:             return ProposalState.Queued;",
          "185:     function proposalThreshold() public view virtual override returns (uint256) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "205:     function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {",
          "207:     }",
          "212:     function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {",
          "214:     }",
          "219:     function proposalProposer(uint256 proposalId) public view virtual override returns (address) {",
          "221:     }",
          "",
          "[Removed Lines]",
          "206:         return _proposals[proposalId].voteStart;",
          "213:         return _proposals[proposalId].voteStart + _proposals[proposalId].voteDuration;",
          "220:         return _proposals[proposalId].proposer;",
          "",
          "[Added Lines]",
          "193:         return _proposals[proposalId].core.voteStart;",
          "200:         return _proposals[proposalId].core.voteStart + _proposals[proposalId].core.voteDuration;",
          "207:         return _proposals[proposalId].core.proposer;",
          "208:     }",
          "213:     function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {",
          "214:         return _proposals[proposalId].extra.eta;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "284:         string memory description",
          "285:     ) public virtual override returns (uint256) {",
          "286:         address proposer = _msgSender();",
          "298:         }",
          "300:         uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));",
          "302:         if (targets.length != values.length || targets.length != calldatas.length || targets.length == 0) {",
          "303:             revert GovernorInvalidProposalLength(targets.length, calldatas.length, values.length);",
          "304:         }",
          "306:             revert GovernorUnexpectedProposalState(proposalId, state(proposalId), bytes32(0));",
          "307:         }",
          "310:         uint256 duration = votingPeriod();",
          "313:             proposer: proposer,",
          "314:             voteStart: SafeCast.toUint48(snapshot),",
          "315:             voteDuration: SafeCast.toUint32(duration),",
          "",
          "[Removed Lines]",
          "287:         require(_isValidDescriptionForProposer(proposer, description), \"Governor: proposer restricted\");",
          "289:         uint256 currentTimepoint = clock();",
          "292:         {",
          "293:             uint256 proposerVotes = getVotes(proposer, currentTimepoint - 1);",
          "294:             uint256 votesThreshold = proposalThreshold();",
          "295:             if (proposerVotes < votesThreshold) {",
          "296:                 revert GovernorInsufficientProposerVotes(proposer, proposerVotes, votesThreshold);",
          "297:             }",
          "305:         if (_proposals[proposalId].voteStart != 0) {",
          "309:         uint256 snapshot = currentTimepoint + votingDelay();",
          "312:         _proposals[proposalId] = ProposalCore({",
          "",
          "[Added Lines]",
          "283:         if (!_isValidDescriptionForProposer(proposer, description)) {",
          "284:             revert GovernorRestrictedProposer(proposer);",
          "285:         }",
          "288:         uint256 proposerVotes = getVotes(proposer, clock() - 1);",
          "289:         uint256 votesThreshold = proposalThreshold();",
          "290:         if (proposerVotes < votesThreshold) {",
          "291:             revert GovernorInsufficientProposerVotes(proposer, proposerVotes, votesThreshold);",
          "294:         return _propose(targets, values, calldatas, description, proposer);",
          "295:     }",
          "302:     function _propose(",
          "303:         address[] memory targets,",
          "304:         uint256[] memory values,",
          "305:         bytes[] memory calldatas,",
          "306:         string memory description,",
          "307:         address proposer",
          "308:     ) internal virtual returns (uint256) {",
          "314:         if (_proposals[proposalId].core.voteStart != 0) {",
          "318:         uint256 snapshot = clock() + votingDelay();",
          "321:         _proposals[proposalId].core = ProposalCore({",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "333:     }",
          "339:         address[] memory targets,",
          "340:         uint256[] memory values,",
          "341:         bytes[] memory calldatas,",
          "342:         bytes32 descriptionHash",
          "344:         uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
          "362:         return proposalId;",
          "363:     }",
          "369:         address[] memory targets,",
          "370:         uint256[] memory values,",
          "371:         bytes[] memory calldatas,",
          "372:         bytes32 descriptionHash",
          "374:         uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
          "378:         }",
          "381:         }",
          "383:     }",
          "389:         uint256 /* proposalId */,",
          "390:         address[] memory targets,",
          "391:         uint256[] memory values,",
          "",
          "[Removed Lines]",
          "338:     function execute(",
          "343:     ) public payable virtual override returns (uint256) {",
          "346:         ProposalState currentState = state(proposalId);",
          "347:         if (currentState != ProposalState.Succeeded && currentState != ProposalState.Queued) {",
          "348:             revert GovernorUnexpectedProposalState(",
          "349:                 proposalId,",
          "350:                 currentState,",
          "351:                 _encodeStateBitmap(ProposalState.Succeeded) | _encodeStateBitmap(ProposalState.Queued)",
          "352:             );",
          "353:         }",
          "354:         _proposals[proposalId].executed = true;",
          "356:         emit ProposalExecuted(proposalId);",
          "358:         _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);",
          "359:         _execute(proposalId, targets, values, calldatas, descriptionHash);",
          "360:         _afterExecute(proposalId, targets, values, calldatas, descriptionHash);",
          "368:     function cancel(",
          "373:     ) public virtual override returns (uint256) {",
          "375:         ProposalState currentState = state(proposalId);",
          "376:         if (currentState != ProposalState.Pending) {",
          "377:             revert GovernorUnexpectedProposalState(proposalId, currentState, _encodeStateBitmap(ProposalState.Pending));",
          "379:         if (_msgSender() != proposalProposer(proposalId)) {",
          "380:             revert GovernorOnlyProposer(_msgSender());",
          "382:         return _cancel(targets, values, calldatas, descriptionHash);",
          "388:     function _execute(",
          "",
          "[Added Lines]",
          "347:     function queue(",
          "352:     ) public virtual override returns (uint256) {",
          "355:         _validateStateBitmap(proposalId, _encodeStateBitmap(ProposalState.Succeeded));",
          "357:         uint48 eta = _queueOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "359:         if (eta != 0) {",
          "360:             _proposals[proposalId].extra.eta = eta;",
          "361:             emit ProposalQueued(proposalId, eta);",
          "362:         } else {",
          "363:             revert GovernorQueueNotImplemented();",
          "364:         }",
          "382:     function _queueOperations(",
          "383:         uint256 /*proposalId*/,",
          "384:         address[] memory /*targets*/,",
          "385:         uint256[] memory /*values*/,",
          "386:         bytes[] memory /*calldatas*/,",
          "388:     ) internal virtual returns (uint48) {",
          "389:         return 0;",
          "390:     }",
          "395:     function execute(",
          "400:     ) public payable virtual override returns (uint256) {",
          "403:         _validateStateBitmap(",
          "404:             proposalId,",
          "405:             _encodeStateBitmap(ProposalState.Succeeded) | _encodeStateBitmap(ProposalState.Queued)",
          "406:         );",
          "409:         _proposals[proposalId].core.executed = true;",
          "412:         if (_executor() != address(this)) {",
          "413:             for (uint256 i = 0; i < targets.length; ++i) {",
          "414:                 if (targets[i] == address(this)) {",
          "415:                     _governanceCall.pushBack(keccak256(calldatas[i]));",
          "416:                 }",
          "417:             }",
          "420:         _executeOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "423:         if (_executor() != address(this) && !_governanceCall.empty()) {",
          "424:             _governanceCall.clear();",
          "427:         emit ProposalExecuted(proposalId);",
          "429:         return proposalId;",
          "439:     function _executeOperations(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "399:     }",
          "406:         address[] memory targets,",
          "408:         bytes[] memory calldatas,",
          "434:         }",
          "435:     }",
          "",
          "[Removed Lines]",
          "404:     function _beforeExecute(",
          "405:         uint256 /* proposalId */,",
          "407:         uint256[] memory /* values */,",
          "410:     ) internal virtual {",
          "411:         if (_executor() != address(this)) {",
          "412:             for (uint256 i = 0; i < targets.length; ++i) {",
          "413:                 if (targets[i] == address(this)) {",
          "414:                     _governanceCall.pushBack(keccak256(calldatas[i]));",
          "415:                 }",
          "416:             }",
          "417:         }",
          "418:     }",
          "423:     function _afterExecute(",
          "424:         uint256 /* proposalId */,",
          "425:         address[] memory /* targets */,",
          "426:         uint256[] memory /* values */,",
          "427:         bytes[] memory /* calldatas */,",
          "429:     ) internal virtual {",
          "430:         if (_executor() != address(this)) {",
          "431:             if (!_governanceCall.empty()) {",
          "432:                 _governanceCall.clear();",
          "433:             }",
          "",
          "[Added Lines]",
          "455:     function cancel(",
          "457:         uint256[] memory values,",
          "459:         bytes32 descriptionHash",
          "460:     ) public virtual override returns (uint256) {",
          "464:         uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
          "467:         _validateStateBitmap(proposalId, _encodeStateBitmap(ProposalState.Pending));",
          "468:         if (_msgSender() != proposalProposer(proposalId)) {",
          "469:             revert GovernorOnlyProposer(_msgSender());",
          "472:         return _cancel(targets, values, calldatas, descriptionHash);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "448:     ) internal virtual returns (uint256) {",
          "449:         uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
          "465:         emit ProposalCanceled(proposalId);",
          "467:         return proposalId;",
          "",
          "[Removed Lines]",
          "451:         ProposalState currentState = state(proposalId);",
          "453:         bytes32 forbiddenStates = _encodeStateBitmap(ProposalState.Canceled) |",
          "454:             _encodeStateBitmap(ProposalState.Expired) |",
          "455:             _encodeStateBitmap(ProposalState.Executed);",
          "456:         if (forbiddenStates & _encodeStateBitmap(currentState) != 0) {",
          "457:             revert GovernorUnexpectedProposalState(",
          "458:                 proposalId,",
          "459:                 currentState,",
          "460:                 _ALL_PROPOSAL_STATES_BITMAP ^ forbiddenStates",
          "461:             );",
          "462:         }",
          "463:         _proposals[proposalId].canceled = true;",
          "",
          "[Added Lines]",
          "489:         _validateStateBitmap(",
          "490:             proposalId,",
          "491:             _ALL_PROPOSAL_STATES_BITMAP ^",
          "492:                 _encodeStateBitmap(ProposalState.Canceled) ^",
          "493:                 _encodeStateBitmap(ProposalState.Expired) ^",
          "494:                 _encodeStateBitmap(ProposalState.Executed)",
          "495:         );",
          "497:         _proposals[proposalId].core.canceled = true;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "695:         return bytes32(1 << uint8(proposalState));",
          "696:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "737:     function _validateStateBitmap(uint256 proposalId, bytes32 allowedStates) private view returns (ProposalState) {",
          "738:         ProposalState currentState = state(proposalId);",
          "739:         if (_encodeStateBitmap(currentState) & allowedStates == bytes32(0)) {",
          "740:             revert GovernorUnexpectedProposalState(proposalId, currentState, allowedStates);",
          "741:         }",
          "742:         return currentState;",
          "743:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "779:             }",
          "780:         }",
          "781:     }",
          "782: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "833:     function clock() public view virtual returns (uint48);",
          "839:     function CLOCK_MODE() public view virtual returns (string memory);",
          "844:     function votingDelay() public view virtual returns (uint256);",
          "849:     function votingPeriod() public view virtual returns (uint256);",
          "854:     function quorum(uint256 timepoint) public view virtual returns (uint256);",
          "",
          "---------------"
        ],
        "contracts/governance/IGovernor.sol||contracts/governance/IGovernor.sol": [
          "File: contracts/governance/IGovernor.sol -> contracts/governance/IGovernor.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     enum ProposalState {",
          "14:         Pending,",
          "15:         Active,",
          "",
          "[Removed Lines]",
          "12: abstract contract IGovernor is IERC165, IERC6372 {",
          "",
          "[Added Lines]",
          "12: interface IGovernor is IERC165, IERC6372 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     error GovernorInvalidVotingPeriod(uint256 votingPeriod);",
          "74:     error GovernorInsufficientProposerVotes(address proposer, uint256 votes, uint256 threshold);",
          "79:     error GovernorInvalidVoteType();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     error GovernorRestrictedProposer(address proposer);",
          "89:     error GovernorQueueNotImplemented();",
          "94:     error GovernorNotQueuedProposal(uint256 proposalId);",
          "99:     error GovernorAlreadyQueuedProposal(uint256 proposalId);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:     );",
          "110:     event ProposalExecuted(uint256 proposalId);",
          "",
          "[Removed Lines]",
          "105:     event ProposalCanceled(uint256 proposalId);",
          "",
          "[Added Lines]",
          "125:     event ProposalQueued(uint256 proposalId, uint256 eta);",
          "135:     event ProposalCanceled(uint256 proposalId);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "138:     function name() public view virtual returns (string memory);",
          "144:     function version() public view virtual returns (string memory);",
          "150:     function clock() public view virtual returns (uint48);",
          "157:     function CLOCK_MODE() public view virtual returns (string memory);",
          "",
          "[Added Lines]",
          "163:     function name() external view returns (string memory);",
          "169:     function version() external view returns (string memory);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "182:     function COUNTING_MODE() public view virtual returns (string memory);",
          "",
          "[Added Lines]",
          "194:     function COUNTING_MODE() external view returns (string memory);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "190:         uint256[] memory values,",
          "191:         bytes[] memory calldatas,",
          "192:         bytes32 descriptionHash",
          "",
          "[Removed Lines]",
          "193:     ) public pure virtual returns (uint256);",
          "199:     function state(uint256 proposalId) public view virtual returns (ProposalState);",
          "",
          "[Added Lines]",
          "205:     ) external pure returns (uint256);",
          "211:     function state(uint256 proposalId) external view returns (ProposalState);",
          "217:     function proposalThreshold() external view returns (uint256);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "207:     function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);",
          "214:     function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);",
          "220:     function proposalProposer(uint256 proposalId) public view virtual returns (address);",
          "",
          "[Added Lines]",
          "225:     function proposalSnapshot(uint256 proposalId) external view returns (uint256);",
          "232:     function proposalDeadline(uint256 proposalId) external view returns (uint256);",
          "238:     function proposalProposer(uint256 proposalId) external view returns (address);",
          "246:     function proposalEta(uint256 proposalId) external view returns (uint256);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "233:     function votingDelay() public view virtual returns (uint256);",
          "",
          "[Added Lines]",
          "259:     function votingDelay() external view returns (uint256);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "247:     function votingPeriod() public view virtual returns (uint256);",
          "",
          "[Added Lines]",
          "273:     function votingPeriod() external view returns (uint256);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "256:     function quorum(uint256 timepoint) public view virtual returns (uint256);",
          "",
          "[Added Lines]",
          "282:     function quorum(uint256 timepoint) external view returns (uint256);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "265:     function getVotes(address account, uint256 timepoint) public view virtual returns (uint256);",
          "",
          "[Added Lines]",
          "291:     function getVotes(address account, uint256 timepoint) external view returns (uint256);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "272:         address account,",
          "273:         uint256 timepoint,",
          "274:         bytes memory params",
          "",
          "[Removed Lines]",
          "275:     ) public view virtual returns (uint256);",
          "281:     function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);",
          "",
          "[Added Lines]",
          "301:     ) external view returns (uint256);",
          "307:     function hasVoted(uint256 proposalId, address account) external view returns (bool);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "291:         uint256[] memory values,",
          "292:         bytes[] memory calldatas,",
          "293:         string memory description",
          "304:     function execute(",
          "305:         address[] memory targets,",
          "306:         uint256[] memory values,",
          "307:         bytes[] memory calldatas,",
          "308:         bytes32 descriptionHash",
          "",
          "[Removed Lines]",
          "294:     ) public virtual returns (uint256 proposalId);",
          "309:     ) public payable virtual returns (uint256 proposalId);",
          "",
          "[Added Lines]",
          "320:     ) external returns (uint256 proposalId);",
          "329:     function queue(",
          "330:         address[] memory targets,",
          "331:         uint256[] memory values,",
          "332:         bytes[] memory calldatas,",
          "333:         bytes32 descriptionHash",
          "334:     ) external returns (uint256 proposalId);",
          "350:     ) external payable returns (uint256 proposalId);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "319:         uint256[] memory values,",
          "320:         bytes[] memory calldatas,",
          "321:         bytes32 descriptionHash",
          "",
          "[Removed Lines]",
          "322:     ) public virtual returns (uint256 proposalId);",
          "329:     function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);",
          "",
          "[Added Lines]",
          "363:     ) external returns (uint256 proposalId);",
          "370:     function castVote(uint256 proposalId, uint8 support) external returns (uint256 balance);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "337:         uint256 proposalId,",
          "338:         uint8 support,",
          "339:         string calldata reason",
          "",
          "[Removed Lines]",
          "340:     ) public virtual returns (uint256 balance);",
          "",
          "[Added Lines]",
          "381:     ) external returns (uint256 balance);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "349:         uint8 support,",
          "350:         string calldata reason,",
          "351:         bytes memory params",
          "",
          "[Removed Lines]",
          "352:     ) public virtual returns (uint256 balance);",
          "",
          "[Added Lines]",
          "393:     ) external returns (uint256 balance);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "361:         uint8 support,",
          "362:         address voter,",
          "363:         bytes memory signature",
          "",
          "[Removed Lines]",
          "364:     ) public virtual returns (uint256 balance);",
          "",
          "[Added Lines]",
          "405:     ) external returns (uint256 balance);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "376:         string calldata reason,",
          "377:         bytes memory params,",
          "378:         bytes memory signature",
          "380: }",
          "",
          "[Removed Lines]",
          "379:     ) public virtual returns (uint256 balance);",
          "",
          "[Added Lines]",
          "420:     ) external returns (uint256 balance);",
          "",
          "---------------"
        ],
        "contracts/governance/compatibility/GovernorCompatibilityBravo.sol||contracts/governance/compatibility/GovernorCompatibilityBravo.sol": [
          "File: contracts/governance/compatibility/GovernorCompatibilityBravo.sol -> contracts/governance/compatibility/GovernorCompatibilityBravo.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contracts/governance/compatibility/IGovernorCompatibilityBravo.sol||contracts/governance/compatibility/IGovernorCompatibilityBravo.sol": [
          "File: contracts/governance/compatibility/IGovernorCompatibilityBravo.sol -> contracts/governance/compatibility/IGovernorCompatibilityBravo.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contracts/governance/extensions/GovernorStorage.sol||contracts/governance/extensions/GovernorStorage.sol": [
          "File: contracts/governance/extensions/GovernorStorage.sol -> contracts/governance/extensions/GovernorStorage.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: pragma solidity ^0.8.19;",
          "5: import {Governor} from \"../Governor.sol\";",
          "15: abstract contract GovernorStorage is Governor {",
          "16:     struct ProposalDetails {",
          "17:         address[] targets;",
          "18:         uint256[] values;",
          "19:         bytes[] calldatas;",
          "20:         bytes32 descriptionHash;",
          "21:     }",
          "23:     uint256[] private _proposalIds;",
          "24:     mapping(uint256 => ProposalDetails) private _proposalDetails;",
          "29:     function _propose(",
          "30:         address[] memory targets,",
          "31:         uint256[] memory values,",
          "32:         bytes[] memory calldatas,",
          "33:         string memory description,",
          "34:         address proposer",
          "35:     ) internal virtual override returns (uint256) {",
          "36:         uint256 proposalId = super._propose(targets, values, calldatas, description, proposer);",
          "39:         _proposalIds.push(proposalId);",
          "40:         _proposalDetails[proposalId] = ProposalDetails({",
          "41:             targets: targets,",
          "42:             values: values,",
          "43:             calldatas: calldatas,",
          "44:             descriptionHash: keccak256(bytes(description))",
          "45:         });",
          "47:         return proposalId;",
          "48:     }",
          "53:     function queue(uint256 proposalId) public virtual {",
          "55:         ProposalDetails storage details = _proposalDetails[proposalId];",
          "56:         queue(details.targets, details.values, details.calldatas, details.descriptionHash);",
          "57:     }",
          "62:     function execute(uint256 proposalId) public payable virtual {",
          "64:         ProposalDetails storage details = _proposalDetails[proposalId];",
          "65:         execute(details.targets, details.values, details.calldatas, details.descriptionHash);",
          "66:     }",
          "71:     function cancel(uint256 proposalId) public virtual {",
          "73:         ProposalDetails storage details = _proposalDetails[proposalId];",
          "74:         cancel(details.targets, details.values, details.calldatas, details.descriptionHash);",
          "75:     }",
          "80:     function proposalCount() public view virtual returns (uint256) {",
          "81:         return _proposalIds.length;",
          "82:     }",
          "87:     function proposalDetails(",
          "88:         uint256 proposalId",
          "89:     ) public view virtual returns (address[] memory, uint256[] memory, bytes[] memory, bytes32) {",
          "91:         ProposalDetails memory details = _proposalDetails[proposalId];",
          "92:         if (details.descriptionHash == 0) {",
          "93:             revert GovernorNonexistentProposal(proposalId);",
          "94:         }",
          "95:         return (details.targets, details.values, details.calldatas, details.descriptionHash);",
          "96:     }",
          "101:     function proposalDetailsAt(",
          "102:         uint256 index",
          "103:     ) public view virtual returns (uint256, address[] memory, uint256[] memory, bytes[] memory, bytes32) {",
          "104:         uint256 proposalId = _proposalIds[index];",
          "105:         (",
          "106:             address[] memory targets,",
          "107:             uint256[] memory values,",
          "108:             bytes[] memory calldatas,",
          "109:             bytes32 descriptionHash",
          "110:         ) = proposalDetails(proposalId);",
          "111:         return (proposalId, targets, values, calldatas, descriptionHash);",
          "112:     }",
          "113: }",
          "",
          "---------------"
        ],
        "contracts/governance/extensions/GovernorTimelockCompound.sol||contracts/governance/extensions/GovernorTimelockCompound.sol": [
          "File: contracts/governance/extensions/GovernorTimelockCompound.sol -> contracts/governance/extensions/GovernorTimelockCompound.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: pragma solidity ^0.8.20;",
          "7: import {IGovernor, Governor} from \"../Governor.sol\";",
          "8: import {ICompoundTimelock} from \"../../vendor/compound/ICompoundTimelock.sol\";",
          "9: import {IERC165} from \"../../interfaces/IERC165.sol\";",
          "10: import {Address} from \"../../utils/Address.sol\";",
          "",
          "[Removed Lines]",
          "6: import {IGovernorTimelock} from \"./IGovernorTimelock.sol\";",
          "",
          "[Added Lines]",
          "10: import {SafeCast} from \"../../utils/math/SafeCast.sol\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:     ICompoundTimelock private _timelock;",
          "",
          "[Removed Lines]",
          "22: abstract contract GovernorTimelockCompound is IGovernorTimelock, Governor {",
          "25:     mapping(uint256 => uint256) private _proposalTimelocks;",
          "",
          "[Added Lines]",
          "22: abstract contract GovernorTimelockCompound is Governor {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:     }",
          "50:         ProposalState currentState = super.state(proposalId);",
          "64:     }",
          "70:         return address(_timelock);",
          "71:     }",
          "84:         address[] memory targets,",
          "85:         uint256[] memory values,",
          "86:         bytes[] memory calldatas,",
          "103:         for (uint256 i = 0; i < targets.length; ++i) {",
          "104:             if (_timelock.queuedTransactions(keccak256(abi.encode(targets[i], values[i], \"\", calldatas[i], eta)))) {",
          "",
          "[Removed Lines]",
          "42:     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {",
          "43:         return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);",
          "44:     }",
          "49:     function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {",
          "52:         if (currentState != ProposalState.Succeeded) {",
          "53:             return currentState;",
          "54:         }",
          "56:         uint256 eta = proposalEta(proposalId);",
          "57:         if (eta == 0) {",
          "58:             return currentState;",
          "59:         } else if (block.timestamp >= eta + _timelock.GRACE_PERIOD()) {",
          "60:             return ProposalState.Expired;",
          "61:         } else {",
          "62:             return ProposalState.Queued;",
          "63:         }",
          "69:     function timelock() public view virtual override returns (address) {",
          "76:     function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {",
          "77:         return _proposalTimelocks[proposalId];",
          "78:     }",
          "83:     function queue(",
          "87:         bytes32 descriptionHash",
          "88:     ) public virtual override returns (uint256) {",
          "89:         uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
          "91:         ProposalState currentState = state(proposalId);",
          "92:         if (currentState != ProposalState.Succeeded) {",
          "93:             revert GovernorUnexpectedProposalState(",
          "94:                 proposalId,",
          "95:                 currentState,",
          "96:                 _encodeStateBitmap(ProposalState.Succeeded)",
          "97:             );",
          "98:         }",
          "100:         uint256 eta = block.timestamp + _timelock.delay();",
          "101:         _proposalTimelocks[proposalId] = eta;",
          "",
          "[Added Lines]",
          "40:     function state(uint256 proposalId) public view virtual override returns (ProposalState) {",
          "43:         return",
          "44:             (currentState == ProposalState.Queued &&",
          "45:                 block.timestamp >= proposalEta(proposalId) + _timelock.GRACE_PERIOD())",
          "46:                 ? ProposalState.Expired",
          "47:                 : currentState;",
          "53:     function timelock() public view virtual returns (address) {",
          "60:     function _queueOperations(",
          "61:         uint256 proposalId,",
          "66:     ) internal virtual override returns (uint48) {",
          "67:         uint48 eta = SafeCast.toUint48(block.timestamp + _timelock.delay());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:             _timelock.queueTransaction(targets[i], values[i], \"\", calldatas[i], eta);",
          "108:         }",
          "113:     }",
          "119:         uint256 proposalId,",
          "120:         address[] memory targets,",
          "121:         uint256[] memory values,",
          "",
          "[Removed Lines]",
          "110:         emit ProposalQueued(proposalId, eta);",
          "112:         return proposalId;",
          "118:     function _execute(",
          "",
          "[Added Lines]",
          "76:         return eta;",
          "83:     function _executeOperations(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147:         uint256 eta = proposalEta(proposalId);",
          "148:         if (eta > 0) {",
          "152:             for (uint256 i = 0; i < targets.length; ++i) {",
          "153:                 _timelock.cancelTransaction(targets[i], values[i], \"\", calldatas[i], eta);",
          "",
          "[Removed Lines]",
          "150:             delete _proposalTimelocks[proposalId];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contracts/governance/extensions/GovernorTimelockControl.sol||contracts/governance/extensions/GovernorTimelockControl.sol": [
          "File: contracts/governance/extensions/GovernorTimelockControl.sol -> contracts/governance/extensions/GovernorTimelockControl.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: pragma solidity ^0.8.20;",
          "7: import {IGovernor, Governor} from \"../Governor.sol\";",
          "8: import {TimelockController} from \"../TimelockController.sol\";",
          "9: import {IERC165} from \"../../interfaces/IERC165.sol\";",
          "",
          "[Removed Lines]",
          "6: import {IGovernorTimelock} from \"./IGovernorTimelock.sol\";",
          "",
          "[Added Lines]",
          "9: import {SafeCast} from \"../../utils/math/SafeCast.sol\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     TimelockController private _timelock;",
          "27:     mapping(uint256 => bytes32) private _timelockIds;",
          "",
          "[Removed Lines]",
          "25: abstract contract GovernorTimelockControl is IGovernorTimelock, Governor {",
          "",
          "[Added Lines]",
          "25: abstract contract GovernorTimelockControl is Governor {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:     }",
          "52:         ProposalState currentState = super.state(proposalId);",
          "55:             return currentState;",
          "56:         }",
          "59:         bytes32 queueid = _timelockIds[proposalId];",
          "63:             return ProposalState.Queued;",
          "64:         } else if (_timelock.isOperationDone(queueid)) {",
          "",
          "[Removed Lines]",
          "44:     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {",
          "45:         return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);",
          "46:     }",
          "51:     function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {",
          "54:         if (currentState != ProposalState.Succeeded) {",
          "60:         if (queueid == bytes32(0)) {",
          "61:             return currentState;",
          "62:         } else if (_timelock.isOperationPending(queueid)) {",
          "",
          "[Added Lines]",
          "44:     function state(uint256 proposalId) public view virtual override returns (ProposalState) {",
          "47:         if (currentState != ProposalState.Queued) {",
          "52:         if (_timelock.isOperationPending(queueid)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:         return address(_timelock);",
          "78:     }",
          "92:         address[] memory targets,",
          "93:         uint256[] memory values,",
          "94:         bytes[] memory calldatas,",
          "95:         bytes32 descriptionHash",
          "108:         uint256 delay = _timelock.getMinDelay();",
          "109:         bytes32 salt = _timelockSalt(descriptionHash);",
          "110:         _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, salt);",
          "111:         _timelock.scheduleBatch(targets, values, calldatas, 0, salt, delay);",
          "116:     }",
          "122:         uint256 proposalId,",
          "123:         address[] memory targets,",
          "124:         uint256[] memory values,",
          "",
          "[Removed Lines]",
          "76:     function timelock() public view virtual override returns (address) {",
          "83:     function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {",
          "84:         uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);",
          "85:         return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value",
          "86:     }",
          "91:     function queue(",
          "96:     ) public virtual override returns (uint256) {",
          "97:         uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
          "99:         ProposalState currentState = state(proposalId);",
          "100:         if (currentState != ProposalState.Succeeded) {",
          "101:             revert GovernorUnexpectedProposalState(",
          "102:                 proposalId,",
          "103:                 currentState,",
          "104:                 _encodeStateBitmap(ProposalState.Succeeded)",
          "105:             );",
          "106:         }",
          "113:         emit ProposalQueued(proposalId, block.timestamp + delay);",
          "115:         return proposalId;",
          "121:     function _execute(",
          "",
          "[Added Lines]",
          "66:     function timelock() public view virtual returns (address) {",
          "73:     function _queueOperations(",
          "74:         uint256 proposalId,",
          "79:     ) internal virtual override returns (uint48) {",
          "86:         return SafeCast.toUint48(block.timestamp + delay);",
          "93:     function _executeOperations(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "145:         bytes32 descriptionHash",
          "146:     ) internal virtual override returns (uint256) {",
          "147:         uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);",
          "150:         if (timelockId != 0) {",
          "152:             _timelock.cancel(timelockId);",
          "",
          "[Removed Lines]",
          "148:         bytes32 timelockId = _timelockIds[proposalId];",
          "",
          "[Added Lines]",
          "121:         bytes32 timelockId = _timelockIds[proposalId];",
          "",
          "---------------"
        ],
        "contracts/governance/extensions/IGovernorTimelock.sol||contracts/governance/extensions/IGovernorTimelock.sol": [
          "File: contracts/governance/extensions/IGovernorTimelock.sol -> contracts/governance/extensions/IGovernorTimelock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contracts/mocks/governance/GovernorCompatibilityBravoMock.sol||contracts/mocks/governance/GovernorCompatibilityBravoMock.sol": [
          "File: contracts/mocks/governance/GovernorCompatibilityBravoMock.sol -> contracts/mocks/governance/GovernorCompatibilityBravoMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contracts/mocks/governance/GovernorStorageMock.sol||contracts/mocks/governance/GovernorStorageMock.sol": [
          "File: contracts/mocks/governance/GovernorStorageMock.sol -> contracts/mocks/governance/GovernorStorageMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: pragma solidity ^0.8.19;",
          "5: import {IGovernor, Governor} from \"../../governance/Governor.sol\";",
          "6: import {GovernorTimelockControl} from \"../../governance/extensions/GovernorTimelockControl.sol\";",
          "7: import {GovernorSettings} from \"../../governance/extensions/GovernorSettings.sol\";",
          "8: import {GovernorCountingSimple} from \"../../governance/extensions/GovernorCountingSimple.sol\";",
          "9: import {GovernorVotesQuorumFraction} from \"../../governance/extensions/GovernorVotesQuorumFraction.sol\";",
          "10: import {GovernorStorage} from \"../../governance/extensions/GovernorStorage.sol\";",
          "12: abstract contract GovernorStorageMock is",
          "13:     GovernorSettings,",
          "14:     GovernorTimelockControl,",
          "15:     GovernorVotesQuorumFraction,",
          "16:     GovernorCountingSimple,",
          "17:     GovernorStorage",
          "18: {",
          "19:     function quorum(uint256 blockNumber) public view override(Governor, GovernorVotesQuorumFraction) returns (uint256) {",
          "20:         return super.quorum(blockNumber);",
          "21:     }",
          "23:     function state(uint256 proposalId) public view override(Governor, GovernorTimelockControl) returns (ProposalState) {",
          "24:         return super.state(proposalId);",
          "25:     }",
          "27:     function proposalThreshold() public view override(Governor, GovernorSettings) returns (uint256) {",
          "28:         return super.proposalThreshold();",
          "29:     }",
          "31:     function _propose(",
          "32:         address[] memory targets,",
          "33:         uint256[] memory values,",
          "34:         bytes[] memory calldatas,",
          "35:         string memory description,",
          "36:         address proposer",
          "37:     ) internal virtual override(Governor, GovernorStorage) returns (uint256) {",
          "38:         return super._propose(targets, values, calldatas, description, proposer);",
          "39:     }",
          "41:     function _queueOperations(",
          "42:         uint256 proposalId,",
          "43:         address[] memory targets,",
          "44:         uint256[] memory values,",
          "45:         bytes[] memory calldatas,",
          "46:         bytes32 descriptionHash",
          "47:     ) internal override(Governor, GovernorTimelockControl) returns (uint48) {",
          "48:         return super._queueOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "49:     }",
          "51:     function _executeOperations(",
          "52:         uint256 proposalId,",
          "53:         address[] memory targets,",
          "54:         uint256[] memory values,",
          "55:         bytes[] memory calldatas,",
          "56:         bytes32 descriptionHash",
          "57:     ) internal override(Governor, GovernorTimelockControl) {",
          "58:         super._executeOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "59:     }",
          "61:     function _cancel(",
          "62:         address[] memory targets,",
          "63:         uint256[] memory values,",
          "64:         bytes[] memory calldatas,",
          "65:         bytes32 descriptionHash",
          "66:     ) internal override(Governor, GovernorTimelockControl) returns (uint256) {",
          "67:         return super._cancel(targets, values, calldatas, descriptionHash);",
          "68:     }",
          "70:     function _executor() internal view override(Governor, GovernorTimelockControl) returns (address) {",
          "71:         return super._executor();",
          "72:     }",
          "73: }",
          "",
          "---------------"
        ],
        "contracts/mocks/governance/GovernorTimelockCompoundMock.sol||contracts/mocks/governance/GovernorTimelockCompoundMock.sol": [
          "File: contracts/mocks/governance/GovernorTimelockCompoundMock.sol -> contracts/mocks/governance/GovernorTimelockCompoundMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     GovernorVotesQuorumFraction,",
          "15:     GovernorCountingSimple",
          "16: {",
          "26:         return super.quorum(blockNumber);",
          "27:     }",
          "",
          "[Removed Lines]",
          "17:     function supportsInterface(",
          "18:         bytes4 interfaceId",
          "19:     ) public view override(Governor, GovernorTimelockCompound) returns (bool) {",
          "20:         return super.supportsInterface(interfaceId);",
          "21:     }",
          "23:     function quorum(",
          "24:         uint256 blockNumber",
          "25:     ) public view override(IGovernor, GovernorVotesQuorumFraction) returns (uint256) {",
          "",
          "[Added Lines]",
          "17:     function quorum(uint256 blockNumber) public view override(Governor, GovernorVotesQuorumFraction) returns (uint256) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:         return super.proposalThreshold();",
          "37:     }",
          "40:         uint256 proposalId,",
          "41:         address[] memory targets,",
          "42:         uint256[] memory values,",
          "43:         bytes[] memory calldatas,",
          "44:         bytes32 descriptionHash",
          "45:     ) internal override(Governor, GovernorTimelockCompound) {",
          "47:     }",
          "49:     function _cancel(",
          "50:         address[] memory targets,",
          "51:         uint256[] memory values,",
          "52:         bytes[] memory calldatas,",
          "56:     }",
          "58:     function _executor() internal view override(Governor, GovernorTimelockCompound) returns (address) {",
          "",
          "[Removed Lines]",
          "39:     function _execute(",
          "46:         super._execute(proposalId, targets, values, calldatas, descriptionHash);",
          "53:         bytes32 salt",
          "54:     ) internal override(Governor, GovernorTimelockCompound) returns (uint256 proposalId) {",
          "55:         return super._cancel(targets, values, calldatas, salt);",
          "",
          "[Added Lines]",
          "31:     function _queueOperations(",
          "32:         uint256 proposalId,",
          "33:         address[] memory targets,",
          "34:         uint256[] memory values,",
          "35:         bytes[] memory calldatas,",
          "36:         bytes32 descriptionHash",
          "37:     ) internal override(Governor, GovernorTimelockCompound) returns (uint48) {",
          "38:         return super._queueOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "39:     }",
          "41:     function _executeOperations(",
          "48:         super._executeOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "55:         bytes32 descriptionHash",
          "56:     ) internal override(Governor, GovernorTimelockCompound) returns (uint256) {",
          "57:         return super._cancel(targets, values, calldatas, descriptionHash);",
          "",
          "---------------"
        ],
        "contracts/mocks/governance/GovernorTimelockControlMock.sol||contracts/mocks/governance/GovernorTimelockControlMock.sol": [
          "File: contracts/mocks/governance/GovernorTimelockControlMock.sol -> contracts/mocks/governance/GovernorTimelockControlMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     GovernorVotesQuorumFraction,",
          "15:     GovernorCountingSimple",
          "16: {",
          "26:         return super.quorum(blockNumber);",
          "27:     }",
          "",
          "[Removed Lines]",
          "17:     function supportsInterface(",
          "18:         bytes4 interfaceId",
          "19:     ) public view override(Governor, GovernorTimelockControl) returns (bool) {",
          "20:         return super.supportsInterface(interfaceId);",
          "21:     }",
          "23:     function quorum(",
          "24:         uint256 blockNumber",
          "25:     ) public view override(IGovernor, GovernorVotesQuorumFraction) returns (uint256) {",
          "",
          "[Added Lines]",
          "17:     function quorum(uint256 blockNumber) public view override(Governor, GovernorVotesQuorumFraction) returns (uint256) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:         return super.proposalThreshold();",
          "35:     }",
          "38:         uint256 proposalId,",
          "39:         address[] memory targets,",
          "40:         uint256[] memory values,",
          "41:         bytes[] memory calldatas,",
          "42:         bytes32 descriptionHash",
          "43:     ) internal override(Governor, GovernorTimelockControl) {",
          "45:     }",
          "47:     function _cancel(",
          "",
          "[Removed Lines]",
          "37:     function _execute(",
          "44:         super._execute(proposalId, targets, values, calldatas, descriptionHash);",
          "",
          "[Added Lines]",
          "29:     function _queueOperations(",
          "30:         uint256 proposalId,",
          "31:         address[] memory targets,",
          "32:         uint256[] memory values,",
          "33:         bytes[] memory calldatas,",
          "34:         bytes32 descriptionHash",
          "35:     ) internal override(Governor, GovernorTimelockControl) returns (uint48) {",
          "36:         return super._queueOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "37:     }",
          "39:     function _executeOperations(",
          "46:         super._executeOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:         uint256[] memory values,",
          "50:         bytes[] memory calldatas,",
          "51:         bytes32 descriptionHash",
          "53:         return super._cancel(targets, values, calldatas, descriptionHash);",
          "54:     }",
          "",
          "[Removed Lines]",
          "52:     ) internal override(Governor, GovernorTimelockControl) returns (uint256 proposalId) {",
          "",
          "[Added Lines]",
          "54:     ) internal override(Governor, GovernorTimelockControl) returns (uint256) {",
          "",
          "---------------"
        ],
        "test/governance/Governor.test.js||test/governance/Governor.test.js": [
          "File: test/governance/Governor.test.js -> test/governance/Governor.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         );",
          "80:       });",
          "83:       shouldBehaveLikeEIP6372(mode);",
          "85:       it('deployment check', async function () {",
          "",
          "[Removed Lines]",
          "82:       shouldSupportInterfaces(['ERC165', 'ERC1155Receiver', 'Governor', 'GovernorWithParams', 'GovernorCancel']);",
          "",
          "[Added Lines]",
          "82:       shouldSupportInterfaces(['ERC165', 'ERC1155Receiver', 'Governor']);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305:               ZERO_BYTES32,",
          "306:             ]);",
          "307:           });",
          "308:         });",
          "310:         describe('on vote', function () {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:           it('if proposer has below threshold votes', async function () {",
          "310:             const votes = web3.utils.toWei('10');",
          "311:             const threshold = web3.utils.toWei('1000');",
          "312:             await this.mock.$_setProposalThreshold(threshold);",
          "313:             await expectRevertCustomError(this.helper.propose({ from: voter1 }), 'GovernorInsufficientProposerVotes', [",
          "314:               voter1,",
          "315:               votes,",
          "316:               threshold,",
          "317:             ]);",
          "318:           });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "427:           });",
          "428:         });",
          "430:         describe('on execute', function () {",
          "431:           it('if proposal does not exist', async function () {",
          "432:             await expectRevertCustomError(this.helper.execute(), 'GovernorNonexistentProposal', [this.proposal.id]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:         describe('on queue', function () {",
          "442:           it('always', async function () {",
          "443:             await this.helper.propose({ from: proposer });",
          "444:             await this.helper.waitForSnapshot();",
          "445:             await this.helper.vote({ support: Enums.VoteType.For }, { from: voter1 });",
          "446:             await this.helper.waitForDeadline();",
          "447:             await expectRevertCustomError(this.helper.queue(), 'GovernorQueueNotImplemented', []);",
          "448:           });",
          "449:         });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "826:           });",
          "828:           it('someone else cannot propose', async function () {",
          "830:           });",
          "831:         });",
          "832:       });",
          "",
          "[Removed Lines]",
          "829:             await expectRevert(this.helper.propose({ from: voter1 }), 'Governor: proposer restricted');",
          "",
          "[Added Lines]",
          "850:             await expectRevertCustomError(this.helper.propose({ from: voter1 }), 'GovernorRestrictedProposer', [",
          "851:               voter1,",
          "852:             ]);",
          "",
          "---------------"
        ],
        "test/governance/compatibility/GovernorCompatibilityBravo.test.js||test/governance/compatibility/GovernorCompatibilityBravo.test.js": [
          "File: test/governance/compatibility/GovernorCompatibilityBravo.test.js -> test/governance/compatibility/GovernorCompatibilityBravo.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/governance/extensions/GovernorStorage.test.js||test/governance/extensions/GovernorStorage.test.js": [
          "File: test/governance/extensions/GovernorStorage.test.js -> test/governance/extensions/GovernorStorage.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const { constants, expectEvent, expectRevert } = require('@openzeppelin/test-helpers');",
          "2: const { expect } = require('chai');",
          "4: const { expectRevertCustomError } = require('../../helpers/customError');",
          "5: const Enums = require('../../helpers/enums');",
          "6: const { GovernorHelper, timelockSalt } = require('../../helpers/governance');",
          "8: const Timelock = artifacts.require('TimelockController');",
          "9: const Governor = artifacts.require('$GovernorStorageMock');",
          "10: const CallReceiver = artifacts.require('CallReceiverMock');",
          "12: const TOKENS = [",
          "13:   { Token: artifacts.require('$ERC20Votes'), mode: 'blocknumber' },",
          "14:   { Token: artifacts.require('$ERC20VotesTimestampMock'), mode: 'timestamp' },",
          "15: ];",
          "17: contract('GovernorStorage', function (accounts) {",
          "18:   const [owner, voter1, voter2, voter3, voter4] = accounts;",
          "20:   const DEFAULT_ADMIN_ROLE = '0x0000000000000000000000000000000000000000000000000000000000000000';",
          "21:   const PROPOSER_ROLE = web3.utils.soliditySha3('PROPOSER_ROLE');",
          "22:   const EXECUTOR_ROLE = web3.utils.soliditySha3('EXECUTOR_ROLE');",
          "23:   const CANCELLER_ROLE = web3.utils.soliditySha3('CANCELLER_ROLE');",
          "25:   const name = 'OZ-Governor';",
          "26:   const version = '1';",
          "27:   const tokenName = 'MockToken';",
          "28:   const tokenSymbol = 'MTKN';",
          "29:   const tokenSupply = web3.utils.toWei('100');",
          "30:   const votingDelay = web3.utils.toBN(4);",
          "31:   const votingPeriod = web3.utils.toBN(16);",
          "32:   const value = web3.utils.toWei('1');",
          "34:   for (const { mode, Token } of TOKENS) {",
          "35:     describe(`using ${Token._json.contractName}`, function () {",
          "36:       beforeEach(async function () {",
          "37:         const [deployer] = await web3.eth.getAccounts();",
          "39:         this.token = await Token.new(tokenName, tokenSymbol, tokenName, version);",
          "40:         this.timelock = await Timelock.new(3600, [], [], deployer);",
          "41:         this.mock = await Governor.new(",
          "42:           name,",
          "43:           votingDelay,",
          "44:           votingPeriod,",
          "45:           0,",
          "46:           this.timelock.address,",
          "47:           this.token.address,",
          "48:           0,",
          "49:         );",
          "50:         this.receiver = await CallReceiver.new();",
          "52:         this.helper = new GovernorHelper(this.mock, mode);",
          "54:         await web3.eth.sendTransaction({ from: owner, to: this.timelock.address, value });",
          "57:         await this.timelock.grantRole(PROPOSER_ROLE, this.mock.address);",
          "58:         await this.timelock.grantRole(PROPOSER_ROLE, owner);",
          "59:         await this.timelock.grantRole(CANCELLER_ROLE, this.mock.address);",
          "60:         await this.timelock.grantRole(CANCELLER_ROLE, owner);",
          "61:         await this.timelock.grantRole(EXECUTOR_ROLE, constants.ZERO_ADDRESS);",
          "62:         await this.timelock.revokeRole(DEFAULT_ADMIN_ROLE, deployer);",
          "64:         await this.token.$_mint(owner, tokenSupply);",
          "65:         await this.helper.delegate({ token: this.token, to: voter1, value: web3.utils.toWei('10') }, { from: owner });",
          "66:         await this.helper.delegate({ token: this.token, to: voter2, value: web3.utils.toWei('7') }, { from: owner });",
          "67:         await this.helper.delegate({ token: this.token, to: voter3, value: web3.utils.toWei('5') }, { from: owner });",
          "68:         await this.helper.delegate({ token: this.token, to: voter4, value: web3.utils.toWei('2') }, { from: owner });",
          "71:         this.proposal = this.helper.setProposal(",
          "72:           [",
          "73:             {",
          "74:               target: this.receiver.address,",
          "75:               value,",
          "76:               data: this.receiver.contract.methods.mockFunction().encodeABI(),",
          "77:             },",
          "78:           ],",
          "79:           '<proposal description>',",
          "80:         );",
          "81:         this.proposal.timelockid = await this.timelock.hashOperationBatch(",
          "82:           ...this.proposal.shortProposal.slice(0, 3),",
          "83:           '0x0',",
          "84:           timelockSalt(this.mock.address, this.proposal.shortProposal[3]),",
          "85:         );",
          "86:       });",
          "88:       describe('proposal indexing', function () {",
          "89:         it('before propose', async function () {",
          "90:           expect(await this.mock.proposalCount()).to.be.bignumber.equal('0');",
          "93:           await expectRevert.unspecified(this.mock.proposalDetailsAt(0));",
          "95:           await expectRevertCustomError(this.mock.proposalDetails(this.proposal.id), 'GovernorNonexistentProposal', [",
          "96:             this.proposal.id,",
          "97:           ]);",
          "98:         });",
          "100:         it('after propose', async function () {",
          "101:           await this.helper.propose();",
          "103:           expect(await this.mock.proposalCount()).to.be.bignumber.equal('1');",
          "105:           const proposalDetailsAt0 = await this.mock.proposalDetailsAt(0);",
          "106:           expect(proposalDetailsAt0[0]).to.be.bignumber.equal(this.proposal.id);",
          "107:           expect(proposalDetailsAt0[1]).to.be.deep.equal(this.proposal.targets);",
          "108:           expect(proposalDetailsAt0[2].map(x => x.toString())).to.be.deep.equal(this.proposal.values);",
          "109:           expect(proposalDetailsAt0[3]).to.be.deep.equal(this.proposal.fulldata);",
          "110:           expect(proposalDetailsAt0[4]).to.be.equal(this.proposal.descriptionHash);",
          "112:           const proposalDetailsForId = await this.mock.proposalDetails(this.proposal.id);",
          "113:           expect(proposalDetailsForId[0]).to.be.deep.equal(this.proposal.targets);",
          "114:           expect(proposalDetailsForId[1].map(x => x.toString())).to.be.deep.equal(this.proposal.values);",
          "115:           expect(proposalDetailsForId[2]).to.be.deep.equal(this.proposal.fulldata);",
          "116:           expect(proposalDetailsForId[3]).to.be.equal(this.proposal.descriptionHash);",
          "117:         });",
          "118:       });",
          "120:       it('queue and execute by id', async function () {",
          "121:         await this.helper.propose();",
          "122:         await this.helper.waitForSnapshot();",
          "123:         await this.helper.vote({ support: Enums.VoteType.For }, { from: voter1 });",
          "124:         await this.helper.vote({ support: Enums.VoteType.For }, { from: voter2 });",
          "125:         await this.helper.vote({ support: Enums.VoteType.Against }, { from: voter3 });",
          "126:         await this.helper.vote({ support: Enums.VoteType.Abstain }, { from: voter4 });",
          "127:         await this.helper.waitForDeadline();",
          "128:         const txQueue = await this.mock.queue(this.proposal.id);",
          "129:         await this.helper.waitForEta();",
          "130:         const txExecute = await this.mock.execute(this.proposal.id);",
          "132:         expectEvent(txQueue, 'ProposalQueued', { proposalId: this.proposal.id });",
          "133:         await expectEvent.inTransaction(txQueue.tx, this.timelock, 'CallScheduled', { id: this.proposal.timelockid });",
          "134:         await expectEvent.inTransaction(txQueue.tx, this.timelock, 'CallSalt', {",
          "135:           id: this.proposal.timelockid,",
          "136:         });",
          "138:         expectEvent(txExecute, 'ProposalExecuted', { proposalId: this.proposal.id });",
          "139:         await expectEvent.inTransaction(txExecute.tx, this.timelock, 'CallExecuted', { id: this.proposal.timelockid });",
          "140:         await expectEvent.inTransaction(txExecute.tx, this.receiver, 'MockFunctionCalled');",
          "141:       });",
          "143:       it('cancel by id', async function () {",
          "144:         await this.helper.propose();",
          "145:         const txCancel = await this.mock.cancel(this.proposal.id);",
          "146:         expectEvent(txCancel, 'ProposalCanceled', { proposalId: this.proposal.id });",
          "147:       });",
          "148:     });",
          "149:   }",
          "150: });",
          "",
          "---------------"
        ],
        "test/governance/extensions/GovernorTimelockCompound.test.js||test/governance/extensions/GovernorTimelockCompound.test.js": [
          "File: test/governance/extensions/GovernorTimelockCompound.test.js -> test/governance/extensions/GovernorTimelockCompound.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: const { expectRevertCustomError } = require('../../helpers/customError');",
          "7: const { computeCreateAddress } = require('../../helpers/create');",
          "11: const Timelock = artifacts.require('CompTimelock');",
          "12: const Governor = artifacts.require('$GovernorTimelockCompoundMock');",
          "13: const CallReceiver = artifacts.require('CallReceiverMock');",
          "",
          "[Removed Lines]",
          "9: const { shouldSupportInterfaces } = require('../../utils/introspection/SupportsInterface.behavior');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         );",
          "78:       });",
          "82:       it(\"doesn't accept ether transfers\", async function () {",
          "83:         await expectRevert.unspecified(web3.eth.sendTransaction({ from: owner, to: this.mock.address, value: 1 }));",
          "84:       });",
          "",
          "[Removed Lines]",
          "80:       shouldSupportInterfaces(['ERC165', 'Governor', 'GovernorWithParams', 'GovernorTimelock']);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/governance/extensions/GovernorTimelockControl.test.js||test/governance/extensions/GovernorTimelockControl.test.js": [
          "File: test/governance/extensions/GovernorTimelockControl.test.js -> test/governance/extensions/GovernorTimelockControl.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: const { expect } = require('chai');",
          "4: const Enums = require('../../helpers/enums');",
          "6: const { expectRevertCustomError } = require('../../helpers/customError');",
          "10: const Timelock = artifacts.require('TimelockController');",
          "11: const Governor = artifacts.require('$GovernorTimelockControlMock');",
          "12: const CallReceiver = artifacts.require('CallReceiverMock');",
          "",
          "[Removed Lines]",
          "5: const { GovernorHelper, proposalStatesToBitMap } = require('../../helpers/governance');",
          "8: const { shouldSupportInterfaces } = require('../../utils/introspection/SupportsInterface.behavior');",
          "",
          "[Added Lines]",
          "5: const { GovernorHelper, proposalStatesToBitMap, timelockSalt } = require('../../helpers/governance');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   for (const { mode, Token } of TOKENS) {",
          "39:     describe(`using ${Token._json.contractName}`, function () {",
          "43:       beforeEach(async function () {",
          "44:         const [deployer] = await web3.eth.getAccounts();",
          "",
          "[Removed Lines]",
          "40:       const timelockSalt = (address, descriptionHash) =>",
          "41:         '0x' + web3.utils.toBN(address).shln(96).xor(web3.utils.toBN(descriptionHash)).toString(16, 64);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:         );",
          "98:       });",
          "102:       it(\"doesn't accept ether transfers\", async function () {",
          "103:         await expectRevert.unspecified(web3.eth.sendTransaction({ from: owner, to: this.mock.address, value: 1 }));",
          "104:       });",
          "",
          "[Removed Lines]",
          "100:       shouldSupportInterfaces(['ERC165', 'Governor', 'GovernorWithParams', 'GovernorTimelock']);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/helpers/create.js||test/helpers/create.js": [
          "File: test/helpers/create.js -> test/helpers/create.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: function computeCreateAddress(deployer, nonce) {",
          "5: }",
          "7: function computeCreate2Address(saltHex, bytecode, deployer) {",
          "8:   return web3.utils.toChecksumAddress(",
          "9:     web3.utils",
          "10:       .sha3(",
          "15:       )",
          "16:       .slice(-40),",
          "17:   );",
          "",
          "[Removed Lines]",
          "1: const { rlp } = require('ethereumjs-util');",
          "4:   return web3.utils.toChecksumAddress(web3.utils.sha3(rlp.encode([deployer.address ?? deployer, nonce])).slice(-40));",
          "11:         '0x' +",
          "12:           ['ff', deployer.address ?? deployer, saltHex, web3.utils.soliditySha3(bytecode)]",
          "13:             .map(x => x.replace(/0x/, ''))",
          "14:             .join(''),",
          "",
          "[Added Lines]",
          "1: const RLP = require('rlp');",
          "4:   return web3.utils.toChecksumAddress(web3.utils.sha3(RLP.encode([deployer.address ?? deployer, nonce])).slice(-40));",
          "11:         `0x${['ff', deployer.address ?? deployer, saltHex, web3.utils.soliditySha3(bytecode)]",
          "12:           .map(x => x.replace(/0x/, ''))",
          "13:           .join('')}`,",
          "",
          "---------------"
        ],
        "test/helpers/governance.js||test/helpers/governance.js": [
          "File: test/helpers/governance.js -> test/helpers/governance.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const { forward } = require('../helpers/time');",
          "2: const { ProposalState } = require('./enums');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const { web3 } = require('hardhat');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:   return opts ? args.concat(opts) : args;",
          "16: }",
          "18: class GovernorHelper {",
          "19:   constructor(governor, mode = 'blocknumber') {",
          "20:     this.governor = governor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: const timelockSalt = (address, descriptionHash) =>",
          "20:   '0x' + web3.utils.toBN(address).shln(96).xor(web3.utils.toBN(descriptionHash)).toString(16, 64);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245: module.exports = {",
          "246:   GovernorHelper,",
          "247:   proposalStatesToBitMap,",
          "248: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:   timelockSalt,",
          "",
          "---------------"
        ],
        "test/proxy/Clones.test.js||test/proxy/Clones.test.js": [
          "File: test/proxy/Clones.test.js -> test/proxy/Clones.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const { expectEvent } = require('@openzeppelin/test-helpers');",
          "3: const { expect } = require('chai');",
          "5: const { expectRevertCustomError } = require('../helpers/customError');",
          "7: const shouldBehaveLikeClone = require('./Clones.behaviour');",
          "",
          "[Removed Lines]",
          "2: const { computeCreate2Address } = require('../helpers/create');",
          "",
          "[Added Lines]",
          "3: const { computeCreate2Address } = require('../helpers/create');",
          "",
          "---------------"
        ],
        "test/utils/Create2.test.js||test/utils/Create2.test.js": [
          "File: test/utils/Create2.test.js -> test/utils/Create2.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const { balance, ether, expectEvent, expectRevert, send } = require('@openzeppelin/test-helpers');",
          "3: const { expect } = require('chai');",
          "4: const { expectRevertCustomError } = require('../helpers/customError');",
          "6: const Create2 = artifacts.require('$Create2');",
          "",
          "[Removed Lines]",
          "2: const { computeCreate2Address } = require('../helpers/create');",
          "",
          "[Added Lines]",
          "3: const { computeCreate2Address } = require('../helpers/create');",
          "",
          "---------------"
        ],
        "test/utils/introspection/SupportsInterface.behavior.js||test/utils/introspection/SupportsInterface.behavior.js": [
          "File: test/utils/introspection/SupportsInterface.behavior.js -> test/utils/introspection/SupportsInterface.behavior.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     'COUNTING_MODE()',",
          "57:     'hashProposal(address[],uint256[],bytes[],bytes32)',",
          "58:     'state(uint256)',",
          "59:     'proposalSnapshot(uint256)',",
          "60:     'proposalDeadline(uint256)',",
          "80:     'votingDelay()',",
          "81:     'votingPeriod()',",
          "82:     'quorum(uint256)',",
          "",
          "[Removed Lines]",
          "61:     'votingDelay()',",
          "62:     'votingPeriod()',",
          "63:     'quorum(uint256)',",
          "64:     'getVotes(address,uint256)',",
          "65:     'hasVoted(uint256,address)',",
          "66:     'propose(address[],uint256[],bytes[],string)',",
          "67:     'execute(address[],uint256[],bytes[],bytes32)',",
          "68:     'castVote(uint256,uint8)',",
          "69:     'castVoteWithReason(uint256,uint8,string)',",
          "70:     'castVoteBySig(uint256,uint8,address,bytes)',",
          "71:   ],",
          "72:   GovernorWithParams: [",
          "73:     'name()',",
          "74:     'version()',",
          "75:     'COUNTING_MODE()',",
          "76:     'hashProposal(address[],uint256[],bytes[],bytes32)',",
          "77:     'state(uint256)',",
          "78:     'proposalSnapshot(uint256)',",
          "79:     'proposalDeadline(uint256)',",
          "",
          "[Added Lines]",
          "59:     'proposalThreshold()',",
          "62:     'proposalProposer(uint256)',",
          "63:     'proposalEta(uint256)',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     'getVotesWithParams(address,uint256,bytes)',",
          "85:     'hasVoted(uint256,address)',",
          "86:     'propose(address[],uint256[],bytes[],string)',",
          "87:     'execute(address[],uint256[],bytes[],bytes32)',",
          "88:     'castVote(uint256,uint8)',",
          "89:     'castVoteWithReason(uint256,uint8,string)',",
          "90:     'castVoteWithReasonAndParams(uint256,uint8,string,bytes)',",
          "91:     'castVoteBySig(uint256,uint8,address,bytes)',",
          "92:     'castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)',",
          "93:   ],",
          "96:   ERC2981: ['royaltyInfo(uint256,uint256)'],",
          "97: };",
          "",
          "[Removed Lines]",
          "94:   GovernorCancel: ['proposalProposer(uint256)', 'cancel(address[],uint256[],bytes[],bytes32)'],",
          "95:   GovernorTimelock: ['timelock()', 'proposalEta(uint256)', 'queue(address[],uint256[],bytes[],bytes32)'],",
          "",
          "[Added Lines]",
          "71:     'queue(address[],uint256[],bytes[],bytes32)',",
          "73:     'cancel(address[],uint256[],bytes[],bytes32)',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a92fb82eadffb6ee347a2b37602861f6d2e98c9",
      "candidate_info": {
        "commit_hash": "8a92fb82eadffb6ee347a2b37602861f6d2e98c9",
        "repo": "OpenZeppelin/openzeppelin-contracts",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8a92fb82eadffb6ee347a2b37602861f6d2e98c9",
        "files": [
          ".changeset/brave-lobsters-punch.md",
          ".changeset/wild-beds-visit.md",
          "contracts/governance/Governor.sol",
          "contracts/governance/IGovernor.sol",
          "contracts/governance/README.adoc",
          "contracts/governance/compatibility/GovernorCompatibilityBravo.sol",
          "contracts/governance/compatibility/IGovernorCompatibilityBravo.sol",
          "contracts/governance/extensions/GovernorStorage.sol",
          "contracts/governance/extensions/GovernorTimelockCompound.sol",
          "contracts/governance/extensions/GovernorTimelockControl.sol",
          "contracts/governance/extensions/IGovernorTimelock.sol",
          "contracts/mocks/docs/governance/MyGovernor.sol",
          "contracts/mocks/governance/GovernorCompatibilityBravoMock.sol",
          "contracts/mocks/governance/GovernorStorageMock.sol",
          "contracts/mocks/governance/GovernorTimelockCompoundMock.sol",
          "contracts/mocks/governance/GovernorTimelockControlMock.sol",
          "docs/modules/ROOT/pages/governance.adoc",
          "test/governance/Governor.test.js",
          "test/governance/compatibility/GovernorCompatibilityBravo.test.js",
          "test/governance/extensions/GovernorStorage.test.js",
          "test/governance/extensions/GovernorTimelockCompound.test.js",
          "test/governance/extensions/GovernorTimelockControl.test.js",
          "test/helpers/create.js",
          "test/helpers/governance.js",
          "test/proxy/Clones.test.js",
          "test/utils/Create2.test.js",
          "test/utils/introspection/SupportsInterface.behavior.js"
        ],
        "message": "Remove GovernorCompatibilyBravo and add simpler GovernorStorage (#4360)",
        "before_after_code_files": [
          "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
          "contracts/governance/IGovernor.sol||contracts/governance/IGovernor.sol",
          "contracts/governance/compatibility/GovernorCompatibilityBravo.sol||contracts/governance/compatibility/GovernorCompatibilityBravo.sol",
          "contracts/governance/compatibility/IGovernorCompatibilityBravo.sol||contracts/governance/compatibility/IGovernorCompatibilityBravo.sol",
          "contracts/governance/extensions/GovernorStorage.sol||contracts/governance/extensions/GovernorStorage.sol",
          "contracts/governance/extensions/GovernorTimelockCompound.sol||contracts/governance/extensions/GovernorTimelockCompound.sol",
          "contracts/governance/extensions/GovernorTimelockControl.sol||contracts/governance/extensions/GovernorTimelockControl.sol",
          "contracts/governance/extensions/IGovernorTimelock.sol||contracts/governance/extensions/IGovernorTimelock.sol",
          "contracts/mocks/governance/GovernorCompatibilityBravoMock.sol||contracts/mocks/governance/GovernorCompatibilityBravoMock.sol",
          "contracts/mocks/governance/GovernorStorageMock.sol||contracts/mocks/governance/GovernorStorageMock.sol",
          "contracts/mocks/governance/GovernorTimelockCompoundMock.sol||contracts/mocks/governance/GovernorTimelockCompoundMock.sol",
          "contracts/mocks/governance/GovernorTimelockControlMock.sol||contracts/mocks/governance/GovernorTimelockControlMock.sol",
          "test/governance/Governor.test.js||test/governance/Governor.test.js",
          "test/governance/compatibility/GovernorCompatibilityBravo.test.js||test/governance/compatibility/GovernorCompatibilityBravo.test.js",
          "test/governance/extensions/GovernorStorage.test.js||test/governance/extensions/GovernorStorage.test.js",
          "test/governance/extensions/GovernorTimelockCompound.test.js||test/governance/extensions/GovernorTimelockCompound.test.js",
          "test/governance/extensions/GovernorTimelockControl.test.js||test/governance/extensions/GovernorTimelockControl.test.js",
          "test/helpers/create.js||test/helpers/create.js",
          "test/helpers/governance.js||test/helpers/governance.js",
          "test/proxy/Clones.test.js||test/proxy/Clones.test.js",
          "test/utils/Create2.test.js||test/utils/Create2.test.js",
          "test/utils/introspection/SupportsInterface.behavior.js||test/utils/introspection/SupportsInterface.behavior.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
            "test/governance/Governor.test.js||test/governance/Governor.test.js"
          ],
          "candidate": [
            "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
            "test/governance/Governor.test.js||test/governance/Governor.test.js"
          ]
        }
      },
      "candidate_diff": {
        "contracts/governance/Governor.sol||contracts/governance/Governor.sol": [
          "File: contracts/governance/Governor.sol -> contracts/governance/Governor.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         bool executed;",
          "43:         bool canceled;",
          "44:     }",
          "47:     bytes32 private constant _ALL_PROPOSAL_STATES_BITMAP = bytes32((2 ** (uint8(type(ProposalState).max) + 1)) - 1);",
          "48:     string private _name;",
          "",
          "[Removed Lines]",
          "50:     mapping(uint256 => ProposalCore) private _proposals;",
          "",
          "[Added Lines]",
          "45:     struct ProposalExtra {",
          "46:         uint48 eta;",
          "47:     }",
          "50:     struct ProposalFull {",
          "51:         ProposalCore core;",
          "52:         ProposalExtra extra;",
          "53:     }",
          "58:     mapping(uint256 => ProposalFull) private _proposals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {",
          "110:         return",
          "114:             interfaceId == type(IERC1155Receiver).interfaceId ||",
          "115:             super.supportsInterface(interfaceId);",
          "116:     }",
          "",
          "[Removed Lines]",
          "93:         bytes4 governorCancelId = this.cancel.selector ^ this.proposalProposer.selector;",
          "95:         bytes4 governorParamsId = this.castVoteWithReasonAndParams.selector ^",
          "96:             this.castVoteWithReasonAndParamsBySig.selector ^",
          "97:             this.getVotesWithParams.selector;",
          "100:         bytes4 governor43Id = type(IGovernor).interfaceId ^",
          "101:             type(IERC6372).interfaceId ^",
          "102:             governorCancelId ^",
          "103:             governorParamsId;",
          "106:         bytes4 governor46Id = type(IGovernor).interfaceId ^ type(IERC6372).interfaceId ^ governorCancelId;",
          "111:             interfaceId == governor43Id ||",
          "112:             interfaceId == governor46Id ||",
          "113:             interfaceId == governorCancelId ||",
          "",
          "[Added Lines]",
          "102:             interfaceId == type(IGovernor).interfaceId ^ type(IERC6372).interfaceId ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:     function state(uint256 proposalId) public view virtual override returns (ProposalState) {",
          "163:             return ProposalState.Executed;",
          "167:             return ProposalState.Canceled;",
          "168:         }",
          "",
          "[Removed Lines]",
          "160:         ProposalCore memory proposal = _proposals[proposalId];",
          "162:         if (proposal.executed) {",
          "164:         }",
          "166:         if (proposal.canceled) {",
          "",
          "[Added Lines]",
          "149:         ProposalCore memory core = _proposals[proposalId].core;",
          "151:         if (core.executed) {",
          "153:         } else if (core.canceled) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:         if (deadline >= currentTimepoint) {",
          "185:             return ProposalState.Active;",
          "189:             return ProposalState.Succeeded;",
          "190:         } else {",
          "192:         }",
          "193:     }",
          "199:         return 0;",
          "200:     }",
          "",
          "[Removed Lines]",
          "186:         }",
          "188:         if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {",
          "191:             return ProposalState.Defeated;",
          "198:     function proposalThreshold() public view virtual returns (uint256) {",
          "",
          "[Added Lines]",
          "173:         } else if (!_quorumReached(proposalId) || !_voteSucceeded(proposalId)) {",
          "174:             return ProposalState.Defeated;",
          "175:         } else if (proposalEta(proposalId) == 0) {",
          "178:             return ProposalState.Queued;",
          "185:     function proposalThreshold() public view virtual override returns (uint256) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "205:     function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {",
          "207:     }",
          "212:     function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {",
          "214:     }",
          "219:     function proposalProposer(uint256 proposalId) public view virtual override returns (address) {",
          "221:     }",
          "",
          "[Removed Lines]",
          "206:         return _proposals[proposalId].voteStart;",
          "213:         return _proposals[proposalId].voteStart + _proposals[proposalId].voteDuration;",
          "220:         return _proposals[proposalId].proposer;",
          "",
          "[Added Lines]",
          "193:         return _proposals[proposalId].core.voteStart;",
          "200:         return _proposals[proposalId].core.voteStart + _proposals[proposalId].core.voteDuration;",
          "207:         return _proposals[proposalId].core.proposer;",
          "208:     }",
          "213:     function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {",
          "214:         return _proposals[proposalId].extra.eta;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "284:         string memory description",
          "285:     ) public virtual override returns (uint256) {",
          "286:         address proposer = _msgSender();",
          "298:         }",
          "300:         uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));",
          "302:         if (targets.length != values.length || targets.length != calldatas.length || targets.length == 0) {",
          "303:             revert GovernorInvalidProposalLength(targets.length, calldatas.length, values.length);",
          "304:         }",
          "306:             revert GovernorUnexpectedProposalState(proposalId, state(proposalId), bytes32(0));",
          "307:         }",
          "310:         uint256 duration = votingPeriod();",
          "313:             proposer: proposer,",
          "314:             voteStart: SafeCast.toUint48(snapshot),",
          "315:             voteDuration: SafeCast.toUint32(duration),",
          "",
          "[Removed Lines]",
          "287:         require(_isValidDescriptionForProposer(proposer, description), \"Governor: proposer restricted\");",
          "289:         uint256 currentTimepoint = clock();",
          "292:         {",
          "293:             uint256 proposerVotes = getVotes(proposer, currentTimepoint - 1);",
          "294:             uint256 votesThreshold = proposalThreshold();",
          "295:             if (proposerVotes < votesThreshold) {",
          "296:                 revert GovernorInsufficientProposerVotes(proposer, proposerVotes, votesThreshold);",
          "297:             }",
          "305:         if (_proposals[proposalId].voteStart != 0) {",
          "309:         uint256 snapshot = currentTimepoint + votingDelay();",
          "312:         _proposals[proposalId] = ProposalCore({",
          "",
          "[Added Lines]",
          "283:         if (!_isValidDescriptionForProposer(proposer, description)) {",
          "284:             revert GovernorRestrictedProposer(proposer);",
          "285:         }",
          "288:         uint256 proposerVotes = getVotes(proposer, clock() - 1);",
          "289:         uint256 votesThreshold = proposalThreshold();",
          "290:         if (proposerVotes < votesThreshold) {",
          "291:             revert GovernorInsufficientProposerVotes(proposer, proposerVotes, votesThreshold);",
          "294:         return _propose(targets, values, calldatas, description, proposer);",
          "295:     }",
          "302:     function _propose(",
          "303:         address[] memory targets,",
          "304:         uint256[] memory values,",
          "305:         bytes[] memory calldatas,",
          "306:         string memory description,",
          "307:         address proposer",
          "308:     ) internal virtual returns (uint256) {",
          "314:         if (_proposals[proposalId].core.voteStart != 0) {",
          "318:         uint256 snapshot = clock() + votingDelay();",
          "321:         _proposals[proposalId].core = ProposalCore({",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "333:     }",
          "339:         address[] memory targets,",
          "340:         uint256[] memory values,",
          "341:         bytes[] memory calldatas,",
          "342:         bytes32 descriptionHash",
          "344:         uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
          "362:         return proposalId;",
          "363:     }",
          "369:         address[] memory targets,",
          "370:         uint256[] memory values,",
          "371:         bytes[] memory calldatas,",
          "372:         bytes32 descriptionHash",
          "374:         uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
          "378:         }",
          "381:         }",
          "383:     }",
          "389:         uint256 /* proposalId */,",
          "390:         address[] memory targets,",
          "391:         uint256[] memory values,",
          "",
          "[Removed Lines]",
          "338:     function execute(",
          "343:     ) public payable virtual override returns (uint256) {",
          "346:         ProposalState currentState = state(proposalId);",
          "347:         if (currentState != ProposalState.Succeeded && currentState != ProposalState.Queued) {",
          "348:             revert GovernorUnexpectedProposalState(",
          "349:                 proposalId,",
          "350:                 currentState,",
          "351:                 _encodeStateBitmap(ProposalState.Succeeded) | _encodeStateBitmap(ProposalState.Queued)",
          "352:             );",
          "353:         }",
          "354:         _proposals[proposalId].executed = true;",
          "356:         emit ProposalExecuted(proposalId);",
          "358:         _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);",
          "359:         _execute(proposalId, targets, values, calldatas, descriptionHash);",
          "360:         _afterExecute(proposalId, targets, values, calldatas, descriptionHash);",
          "368:     function cancel(",
          "373:     ) public virtual override returns (uint256) {",
          "375:         ProposalState currentState = state(proposalId);",
          "376:         if (currentState != ProposalState.Pending) {",
          "377:             revert GovernorUnexpectedProposalState(proposalId, currentState, _encodeStateBitmap(ProposalState.Pending));",
          "379:         if (_msgSender() != proposalProposer(proposalId)) {",
          "380:             revert GovernorOnlyProposer(_msgSender());",
          "382:         return _cancel(targets, values, calldatas, descriptionHash);",
          "388:     function _execute(",
          "",
          "[Added Lines]",
          "347:     function queue(",
          "352:     ) public virtual override returns (uint256) {",
          "355:         _validateStateBitmap(proposalId, _encodeStateBitmap(ProposalState.Succeeded));",
          "357:         uint48 eta = _queueOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "359:         if (eta != 0) {",
          "360:             _proposals[proposalId].extra.eta = eta;",
          "361:             emit ProposalQueued(proposalId, eta);",
          "362:         } else {",
          "363:             revert GovernorQueueNotImplemented();",
          "364:         }",
          "382:     function _queueOperations(",
          "383:         uint256 /*proposalId*/,",
          "384:         address[] memory /*targets*/,",
          "385:         uint256[] memory /*values*/,",
          "386:         bytes[] memory /*calldatas*/,",
          "388:     ) internal virtual returns (uint48) {",
          "389:         return 0;",
          "390:     }",
          "395:     function execute(",
          "400:     ) public payable virtual override returns (uint256) {",
          "403:         _validateStateBitmap(",
          "404:             proposalId,",
          "405:             _encodeStateBitmap(ProposalState.Succeeded) | _encodeStateBitmap(ProposalState.Queued)",
          "406:         );",
          "409:         _proposals[proposalId].core.executed = true;",
          "412:         if (_executor() != address(this)) {",
          "413:             for (uint256 i = 0; i < targets.length; ++i) {",
          "414:                 if (targets[i] == address(this)) {",
          "415:                     _governanceCall.pushBack(keccak256(calldatas[i]));",
          "416:                 }",
          "417:             }",
          "420:         _executeOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "423:         if (_executor() != address(this) && !_governanceCall.empty()) {",
          "424:             _governanceCall.clear();",
          "427:         emit ProposalExecuted(proposalId);",
          "429:         return proposalId;",
          "439:     function _executeOperations(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "399:     }",
          "406:         address[] memory targets,",
          "408:         bytes[] memory calldatas,",
          "434:         }",
          "435:     }",
          "",
          "[Removed Lines]",
          "404:     function _beforeExecute(",
          "405:         uint256 /* proposalId */,",
          "407:         uint256[] memory /* values */,",
          "410:     ) internal virtual {",
          "411:         if (_executor() != address(this)) {",
          "412:             for (uint256 i = 0; i < targets.length; ++i) {",
          "413:                 if (targets[i] == address(this)) {",
          "414:                     _governanceCall.pushBack(keccak256(calldatas[i]));",
          "415:                 }",
          "416:             }",
          "417:         }",
          "418:     }",
          "423:     function _afterExecute(",
          "424:         uint256 /* proposalId */,",
          "425:         address[] memory /* targets */,",
          "426:         uint256[] memory /* values */,",
          "427:         bytes[] memory /* calldatas */,",
          "429:     ) internal virtual {",
          "430:         if (_executor() != address(this)) {",
          "431:             if (!_governanceCall.empty()) {",
          "432:                 _governanceCall.clear();",
          "433:             }",
          "",
          "[Added Lines]",
          "455:     function cancel(",
          "457:         uint256[] memory values,",
          "459:         bytes32 descriptionHash",
          "460:     ) public virtual override returns (uint256) {",
          "464:         uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
          "467:         _validateStateBitmap(proposalId, _encodeStateBitmap(ProposalState.Pending));",
          "468:         if (_msgSender() != proposalProposer(proposalId)) {",
          "469:             revert GovernorOnlyProposer(_msgSender());",
          "472:         return _cancel(targets, values, calldatas, descriptionHash);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "448:     ) internal virtual returns (uint256) {",
          "449:         uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
          "465:         emit ProposalCanceled(proposalId);",
          "467:         return proposalId;",
          "",
          "[Removed Lines]",
          "451:         ProposalState currentState = state(proposalId);",
          "453:         bytes32 forbiddenStates = _encodeStateBitmap(ProposalState.Canceled) |",
          "454:             _encodeStateBitmap(ProposalState.Expired) |",
          "455:             _encodeStateBitmap(ProposalState.Executed);",
          "456:         if (forbiddenStates & _encodeStateBitmap(currentState) != 0) {",
          "457:             revert GovernorUnexpectedProposalState(",
          "458:                 proposalId,",
          "459:                 currentState,",
          "460:                 _ALL_PROPOSAL_STATES_BITMAP ^ forbiddenStates",
          "461:             );",
          "462:         }",
          "463:         _proposals[proposalId].canceled = true;",
          "",
          "[Added Lines]",
          "489:         _validateStateBitmap(",
          "490:             proposalId,",
          "491:             _ALL_PROPOSAL_STATES_BITMAP ^",
          "492:                 _encodeStateBitmap(ProposalState.Canceled) ^",
          "493:                 _encodeStateBitmap(ProposalState.Expired) ^",
          "494:                 _encodeStateBitmap(ProposalState.Executed)",
          "495:         );",
          "497:         _proposals[proposalId].core.canceled = true;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "695:         return bytes32(1 << uint8(proposalState));",
          "696:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "737:     function _validateStateBitmap(uint256 proposalId, bytes32 allowedStates) private view returns (ProposalState) {",
          "738:         ProposalState currentState = state(proposalId);",
          "739:         if (_encodeStateBitmap(currentState) & allowedStates == bytes32(0)) {",
          "740:             revert GovernorUnexpectedProposalState(proposalId, currentState, allowedStates);",
          "741:         }",
          "742:         return currentState;",
          "743:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "779:             }",
          "780:         }",
          "781:     }",
          "782: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "833:     function clock() public view virtual returns (uint48);",
          "839:     function CLOCK_MODE() public view virtual returns (string memory);",
          "844:     function votingDelay() public view virtual returns (uint256);",
          "849:     function votingPeriod() public view virtual returns (uint256);",
          "854:     function quorum(uint256 timepoint) public view virtual returns (uint256);",
          "",
          "---------------"
        ],
        "contracts/governance/IGovernor.sol||contracts/governance/IGovernor.sol": [
          "File: contracts/governance/IGovernor.sol -> contracts/governance/IGovernor.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     enum ProposalState {",
          "14:         Pending,",
          "15:         Active,",
          "",
          "[Removed Lines]",
          "12: abstract contract IGovernor is IERC165, IERC6372 {",
          "",
          "[Added Lines]",
          "12: interface IGovernor is IERC165, IERC6372 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     error GovernorInvalidVotingPeriod(uint256 votingPeriod);",
          "74:     error GovernorInsufficientProposerVotes(address proposer, uint256 votes, uint256 threshold);",
          "79:     error GovernorInvalidVoteType();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     error GovernorRestrictedProposer(address proposer);",
          "89:     error GovernorQueueNotImplemented();",
          "94:     error GovernorNotQueuedProposal(uint256 proposalId);",
          "99:     error GovernorAlreadyQueuedProposal(uint256 proposalId);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:     );",
          "110:     event ProposalExecuted(uint256 proposalId);",
          "",
          "[Removed Lines]",
          "105:     event ProposalCanceled(uint256 proposalId);",
          "",
          "[Added Lines]",
          "125:     event ProposalQueued(uint256 proposalId, uint256 eta);",
          "135:     event ProposalCanceled(uint256 proposalId);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "138:     function name() public view virtual returns (string memory);",
          "144:     function version() public view virtual returns (string memory);",
          "150:     function clock() public view virtual returns (uint48);",
          "157:     function CLOCK_MODE() public view virtual returns (string memory);",
          "",
          "[Added Lines]",
          "163:     function name() external view returns (string memory);",
          "169:     function version() external view returns (string memory);",
          "175:     function clock() external view returns (uint48);",
          "182:     function CLOCK_MODE() external view returns (string memory);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "182:     function COUNTING_MODE() public view virtual returns (string memory);",
          "",
          "[Added Lines]",
          "207:     function COUNTING_MODE() external view returns (string memory);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "190:         uint256[] memory values,",
          "191:         bytes[] memory calldatas,",
          "192:         bytes32 descriptionHash",
          "",
          "[Removed Lines]",
          "193:     ) public pure virtual returns (uint256);",
          "199:     function state(uint256 proposalId) public view virtual returns (ProposalState);",
          "",
          "[Added Lines]",
          "218:     ) external pure returns (uint256);",
          "224:     function state(uint256 proposalId) external view returns (ProposalState);",
          "230:     function proposalThreshold() external view returns (uint256);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "207:     function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);",
          "214:     function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);",
          "220:     function proposalProposer(uint256 proposalId) public view virtual returns (address);",
          "",
          "[Added Lines]",
          "238:     function proposalSnapshot(uint256 proposalId) external view returns (uint256);",
          "245:     function proposalDeadline(uint256 proposalId) external view returns (uint256);",
          "251:     function proposalProposer(uint256 proposalId) external view returns (address);",
          "259:     function proposalEta(uint256 proposalId) external view returns (uint256);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "233:     function votingDelay() public view virtual returns (uint256);",
          "",
          "[Added Lines]",
          "272:     function votingDelay() external view returns (uint256);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "247:     function votingPeriod() public view virtual returns (uint256);",
          "",
          "[Added Lines]",
          "286:     function votingPeriod() external view returns (uint256);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "256:     function quorum(uint256 timepoint) public view virtual returns (uint256);",
          "",
          "[Added Lines]",
          "295:     function quorum(uint256 timepoint) external view returns (uint256);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "265:     function getVotes(address account, uint256 timepoint) public view virtual returns (uint256);",
          "",
          "[Added Lines]",
          "304:     function getVotes(address account, uint256 timepoint) external view returns (uint256);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "272:         address account,",
          "273:         uint256 timepoint,",
          "274:         bytes memory params",
          "",
          "[Removed Lines]",
          "275:     ) public view virtual returns (uint256);",
          "281:     function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);",
          "",
          "[Added Lines]",
          "314:     ) external view returns (uint256);",
          "320:     function hasVoted(uint256 proposalId, address account) external view returns (bool);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "291:         uint256[] memory values,",
          "292:         bytes[] memory calldatas,",
          "293:         string memory description",
          "304:     function execute(",
          "305:         address[] memory targets,",
          "306:         uint256[] memory values,",
          "307:         bytes[] memory calldatas,",
          "308:         bytes32 descriptionHash",
          "",
          "[Removed Lines]",
          "294:     ) public virtual returns (uint256 proposalId);",
          "309:     ) public payable virtual returns (uint256 proposalId);",
          "",
          "[Added Lines]",
          "333:     ) external returns (uint256 proposalId);",
          "342:     function queue(",
          "343:         address[] memory targets,",
          "344:         uint256[] memory values,",
          "345:         bytes[] memory calldatas,",
          "346:         bytes32 descriptionHash",
          "347:     ) external returns (uint256 proposalId);",
          "363:     ) external payable returns (uint256 proposalId);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "319:         uint256[] memory values,",
          "320:         bytes[] memory calldatas,",
          "321:         bytes32 descriptionHash",
          "",
          "[Removed Lines]",
          "322:     ) public virtual returns (uint256 proposalId);",
          "329:     function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);",
          "",
          "[Added Lines]",
          "376:     ) external returns (uint256 proposalId);",
          "383:     function castVote(uint256 proposalId, uint8 support) external returns (uint256 balance);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "337:         uint256 proposalId,",
          "338:         uint8 support,",
          "339:         string calldata reason",
          "",
          "[Removed Lines]",
          "340:     ) public virtual returns (uint256 balance);",
          "",
          "[Added Lines]",
          "394:     ) external returns (uint256 balance);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "349:         uint8 support,",
          "350:         string calldata reason,",
          "351:         bytes memory params",
          "",
          "[Removed Lines]",
          "352:     ) public virtual returns (uint256 balance);",
          "",
          "[Added Lines]",
          "406:     ) external returns (uint256 balance);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "361:         uint8 support,",
          "362:         address voter,",
          "363:         bytes memory signature",
          "",
          "[Removed Lines]",
          "364:     ) public virtual returns (uint256 balance);",
          "",
          "[Added Lines]",
          "418:     ) external returns (uint256 balance);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "376:         string calldata reason,",
          "377:         bytes memory params,",
          "378:         bytes memory signature",
          "380: }",
          "",
          "[Removed Lines]",
          "379:     ) public virtual returns (uint256 balance);",
          "",
          "[Added Lines]",
          "433:     ) external returns (uint256 balance);",
          "",
          "---------------"
        ],
        "contracts/governance/compatibility/GovernorCompatibilityBravo.sol||contracts/governance/compatibility/GovernorCompatibilityBravo.sol": [
          "File: contracts/governance/compatibility/GovernorCompatibilityBravo.sol -> contracts/governance/compatibility/GovernorCompatibilityBravo.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contracts/governance/compatibility/IGovernorCompatibilityBravo.sol||contracts/governance/compatibility/IGovernorCompatibilityBravo.sol": [
          "File: contracts/governance/compatibility/IGovernorCompatibilityBravo.sol -> contracts/governance/compatibility/IGovernorCompatibilityBravo.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contracts/governance/extensions/GovernorStorage.sol||contracts/governance/extensions/GovernorStorage.sol": [
          "File: contracts/governance/extensions/GovernorStorage.sol -> contracts/governance/extensions/GovernorStorage.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: pragma solidity ^0.8.19;",
          "5: import {Governor} from \"../Governor.sol\";",
          "15: abstract contract GovernorStorage is Governor {",
          "16:     struct ProposalDetails {",
          "17:         address[] targets;",
          "18:         uint256[] values;",
          "19:         bytes[] calldatas;",
          "20:         bytes32 descriptionHash;",
          "21:     }",
          "23:     uint256[] private _proposalIds;",
          "24:     mapping(uint256 => ProposalDetails) private _proposalDetails;",
          "29:     function _propose(",
          "30:         address[] memory targets,",
          "31:         uint256[] memory values,",
          "32:         bytes[] memory calldatas,",
          "33:         string memory description,",
          "34:         address proposer",
          "35:     ) internal virtual override returns (uint256) {",
          "36:         uint256 proposalId = super._propose(targets, values, calldatas, description, proposer);",
          "39:         _proposalIds.push(proposalId);",
          "40:         _proposalDetails[proposalId] = ProposalDetails({",
          "41:             targets: targets,",
          "42:             values: values,",
          "43:             calldatas: calldatas,",
          "44:             descriptionHash: keccak256(bytes(description))",
          "45:         });",
          "47:         return proposalId;",
          "48:     }",
          "53:     function queue(uint256 proposalId) public virtual {",
          "54:         ProposalDetails storage details = _proposalDetails[proposalId];",
          "55:         queue(details.targets, details.values, details.calldatas, details.descriptionHash);",
          "56:     }",
          "61:     function execute(uint256 proposalId) public payable virtual {",
          "62:         ProposalDetails storage details = _proposalDetails[proposalId];",
          "63:         execute(details.targets, details.values, details.calldatas, details.descriptionHash);",
          "64:     }",
          "69:     function cancel(uint256 proposalId) public virtual {",
          "70:         ProposalDetails storage details = _proposalDetails[proposalId];",
          "71:         cancel(details.targets, details.values, details.calldatas, details.descriptionHash);",
          "72:     }",
          "77:     function proposalCount() public view virtual returns (uint256) {",
          "78:         return _proposalIds.length;",
          "79:     }",
          "84:     function proposalDetails(",
          "85:         uint256 proposalId",
          "86:     ) public view virtual returns (address[] memory, uint256[] memory, bytes[] memory, bytes32) {",
          "87:         ProposalDetails memory details = _proposalDetails[proposalId];",
          "88:         if (details.descriptionHash == 0) {",
          "89:             revert GovernorNonexistentProposal(proposalId);",
          "90:         }",
          "91:         return (details.targets, details.values, details.calldatas, details.descriptionHash);",
          "92:     }",
          "97:     function proposalDetailsAt(",
          "98:         uint256 index",
          "99:     ) public view virtual returns (uint256, address[] memory, uint256[] memory, bytes[] memory, bytes32) {",
          "100:         uint256 proposalId = _proposalIds[index];",
          "101:         (",
          "102:             address[] memory targets,",
          "103:             uint256[] memory values,",
          "104:             bytes[] memory calldatas,",
          "105:             bytes32 descriptionHash",
          "106:         ) = proposalDetails(proposalId);",
          "107:         return (proposalId, targets, values, calldatas, descriptionHash);",
          "108:     }",
          "109: }",
          "",
          "---------------"
        ],
        "contracts/governance/extensions/GovernorTimelockCompound.sol||contracts/governance/extensions/GovernorTimelockCompound.sol": [
          "File: contracts/governance/extensions/GovernorTimelockCompound.sol -> contracts/governance/extensions/GovernorTimelockCompound.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: pragma solidity ^0.8.20;",
          "7: import {IGovernor, Governor} from \"../Governor.sol\";",
          "8: import {ICompoundTimelock} from \"../../vendor/compound/ICompoundTimelock.sol\";",
          "9: import {IERC165} from \"../../interfaces/IERC165.sol\";",
          "10: import {Address} from \"../../utils/Address.sol\";",
          "",
          "[Removed Lines]",
          "6: import {IGovernorTimelock} from \"./IGovernorTimelock.sol\";",
          "",
          "[Added Lines]",
          "10: import {SafeCast} from \"../../utils/math/SafeCast.sol\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:     ICompoundTimelock private _timelock;",
          "",
          "[Removed Lines]",
          "22: abstract contract GovernorTimelockCompound is IGovernorTimelock, Governor {",
          "25:     mapping(uint256 => uint256) private _proposalTimelocks;",
          "",
          "[Added Lines]",
          "22: abstract contract GovernorTimelockCompound is Governor {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:     }",
          "50:         ProposalState currentState = super.state(proposalId);",
          "64:     }",
          "70:         return address(_timelock);",
          "71:     }",
          "84:         address[] memory targets,",
          "85:         uint256[] memory values,",
          "86:         bytes[] memory calldatas,",
          "103:         for (uint256 i = 0; i < targets.length; ++i) {",
          "104:             if (_timelock.queuedTransactions(keccak256(abi.encode(targets[i], values[i], \"\", calldatas[i], eta)))) {",
          "",
          "[Removed Lines]",
          "42:     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {",
          "43:         return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);",
          "44:     }",
          "49:     function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {",
          "52:         if (currentState != ProposalState.Succeeded) {",
          "53:             return currentState;",
          "54:         }",
          "56:         uint256 eta = proposalEta(proposalId);",
          "57:         if (eta == 0) {",
          "58:             return currentState;",
          "59:         } else if (block.timestamp >= eta + _timelock.GRACE_PERIOD()) {",
          "60:             return ProposalState.Expired;",
          "61:         } else {",
          "62:             return ProposalState.Queued;",
          "63:         }",
          "69:     function timelock() public view virtual override returns (address) {",
          "76:     function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {",
          "77:         return _proposalTimelocks[proposalId];",
          "78:     }",
          "83:     function queue(",
          "87:         bytes32 descriptionHash",
          "88:     ) public virtual override returns (uint256) {",
          "89:         uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
          "91:         ProposalState currentState = state(proposalId);",
          "92:         if (currentState != ProposalState.Succeeded) {",
          "93:             revert GovernorUnexpectedProposalState(",
          "94:                 proposalId,",
          "95:                 currentState,",
          "96:                 _encodeStateBitmap(ProposalState.Succeeded)",
          "97:             );",
          "98:         }",
          "100:         uint256 eta = block.timestamp + _timelock.delay();",
          "101:         _proposalTimelocks[proposalId] = eta;",
          "",
          "[Added Lines]",
          "40:     function state(uint256 proposalId) public view virtual override returns (ProposalState) {",
          "43:         return",
          "44:             (currentState == ProposalState.Queued &&",
          "45:                 block.timestamp >= proposalEta(proposalId) + _timelock.GRACE_PERIOD())",
          "46:                 ? ProposalState.Expired",
          "47:                 : currentState;",
          "53:     function timelock() public view virtual returns (address) {",
          "60:     function _queueOperations(",
          "61:         uint256 proposalId,",
          "66:     ) internal virtual override returns (uint48) {",
          "67:         uint48 eta = SafeCast.toUint48(block.timestamp + _timelock.delay());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:             _timelock.queueTransaction(targets[i], values[i], \"\", calldatas[i], eta);",
          "108:         }",
          "113:     }",
          "119:         uint256 proposalId,",
          "120:         address[] memory targets,",
          "121:         uint256[] memory values,",
          "",
          "[Removed Lines]",
          "110:         emit ProposalQueued(proposalId, eta);",
          "112:         return proposalId;",
          "118:     function _execute(",
          "",
          "[Added Lines]",
          "76:         return eta;",
          "83:     function _executeOperations(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147:         uint256 eta = proposalEta(proposalId);",
          "148:         if (eta > 0) {",
          "152:             for (uint256 i = 0; i < targets.length; ++i) {",
          "153:                 _timelock.cancelTransaction(targets[i], values[i], \"\", calldatas[i], eta);",
          "",
          "[Removed Lines]",
          "150:             delete _proposalTimelocks[proposalId];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contracts/governance/extensions/GovernorTimelockControl.sol||contracts/governance/extensions/GovernorTimelockControl.sol": [
          "File: contracts/governance/extensions/GovernorTimelockControl.sol -> contracts/governance/extensions/GovernorTimelockControl.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: pragma solidity ^0.8.20;",
          "7: import {IGovernor, Governor} from \"../Governor.sol\";",
          "8: import {TimelockController} from \"../TimelockController.sol\";",
          "9: import {IERC165} from \"../../interfaces/IERC165.sol\";",
          "",
          "[Removed Lines]",
          "6: import {IGovernorTimelock} from \"./IGovernorTimelock.sol\";",
          "",
          "[Added Lines]",
          "9: import {SafeCast} from \"../../utils/math/SafeCast.sol\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     TimelockController private _timelock;",
          "27:     mapping(uint256 => bytes32) private _timelockIds;",
          "",
          "[Removed Lines]",
          "25: abstract contract GovernorTimelockControl is IGovernorTimelock, Governor {",
          "",
          "[Added Lines]",
          "25: abstract contract GovernorTimelockControl is Governor {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:     }",
          "52:         ProposalState currentState = super.state(proposalId);",
          "55:             return currentState;",
          "56:         }",
          "59:         bytes32 queueid = _timelockIds[proposalId];",
          "63:             return ProposalState.Queued;",
          "64:         } else if (_timelock.isOperationDone(queueid)) {",
          "",
          "[Removed Lines]",
          "44:     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {",
          "45:         return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);",
          "46:     }",
          "51:     function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {",
          "54:         if (currentState != ProposalState.Succeeded) {",
          "60:         if (queueid == bytes32(0)) {",
          "61:             return currentState;",
          "62:         } else if (_timelock.isOperationPending(queueid)) {",
          "",
          "[Added Lines]",
          "44:     function state(uint256 proposalId) public view virtual override returns (ProposalState) {",
          "47:         if (currentState != ProposalState.Queued) {",
          "52:         if (_timelock.isOperationPending(queueid)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:         return address(_timelock);",
          "78:     }",
          "92:         address[] memory targets,",
          "93:         uint256[] memory values,",
          "94:         bytes[] memory calldatas,",
          "95:         bytes32 descriptionHash",
          "108:         uint256 delay = _timelock.getMinDelay();",
          "109:         bytes32 salt = _timelockSalt(descriptionHash);",
          "110:         _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, salt);",
          "111:         _timelock.scheduleBatch(targets, values, calldatas, 0, salt, delay);",
          "116:     }",
          "122:         uint256 proposalId,",
          "123:         address[] memory targets,",
          "124:         uint256[] memory values,",
          "",
          "[Removed Lines]",
          "76:     function timelock() public view virtual override returns (address) {",
          "83:     function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {",
          "84:         uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);",
          "85:         return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value",
          "86:     }",
          "91:     function queue(",
          "96:     ) public virtual override returns (uint256) {",
          "97:         uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
          "99:         ProposalState currentState = state(proposalId);",
          "100:         if (currentState != ProposalState.Succeeded) {",
          "101:             revert GovernorUnexpectedProposalState(",
          "102:                 proposalId,",
          "103:                 currentState,",
          "104:                 _encodeStateBitmap(ProposalState.Succeeded)",
          "105:             );",
          "106:         }",
          "113:         emit ProposalQueued(proposalId, block.timestamp + delay);",
          "115:         return proposalId;",
          "121:     function _execute(",
          "",
          "[Added Lines]",
          "66:     function timelock() public view virtual returns (address) {",
          "73:     function _queueOperations(",
          "74:         uint256 proposalId,",
          "79:     ) internal virtual override returns (uint48) {",
          "86:         return SafeCast.toUint48(block.timestamp + delay);",
          "93:     function _executeOperations(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "145:         bytes32 descriptionHash",
          "146:     ) internal virtual override returns (uint256) {",
          "147:         uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);",
          "150:         if (timelockId != 0) {",
          "152:             _timelock.cancel(timelockId);",
          "",
          "[Removed Lines]",
          "148:         bytes32 timelockId = _timelockIds[proposalId];",
          "",
          "[Added Lines]",
          "121:         bytes32 timelockId = _timelockIds[proposalId];",
          "",
          "---------------"
        ],
        "contracts/governance/extensions/IGovernorTimelock.sol||contracts/governance/extensions/IGovernorTimelock.sol": [
          "File: contracts/governance/extensions/IGovernorTimelock.sol -> contracts/governance/extensions/IGovernorTimelock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contracts/mocks/governance/GovernorCompatibilityBravoMock.sol||contracts/mocks/governance/GovernorCompatibilityBravoMock.sol": [
          "File: contracts/mocks/governance/GovernorCompatibilityBravoMock.sol -> contracts/mocks/governance/GovernorCompatibilityBravoMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contracts/mocks/governance/GovernorStorageMock.sol||contracts/mocks/governance/GovernorStorageMock.sol": [
          "File: contracts/mocks/governance/GovernorStorageMock.sol -> contracts/mocks/governance/GovernorStorageMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: pragma solidity ^0.8.19;",
          "5: import {IGovernor, Governor} from \"../../governance/Governor.sol\";",
          "6: import {GovernorTimelockControl} from \"../../governance/extensions/GovernorTimelockControl.sol\";",
          "7: import {GovernorSettings} from \"../../governance/extensions/GovernorSettings.sol\";",
          "8: import {GovernorCountingSimple} from \"../../governance/extensions/GovernorCountingSimple.sol\";",
          "9: import {GovernorVotesQuorumFraction} from \"../../governance/extensions/GovernorVotesQuorumFraction.sol\";",
          "10: import {GovernorStorage} from \"../../governance/extensions/GovernorStorage.sol\";",
          "12: abstract contract GovernorStorageMock is",
          "13:     GovernorSettings,",
          "14:     GovernorTimelockControl,",
          "15:     GovernorVotesQuorumFraction,",
          "16:     GovernorCountingSimple,",
          "17:     GovernorStorage",
          "18: {",
          "19:     function quorum(uint256 blockNumber) public view override(Governor, GovernorVotesQuorumFraction) returns (uint256) {",
          "20:         return super.quorum(blockNumber);",
          "21:     }",
          "23:     function state(uint256 proposalId) public view override(Governor, GovernorTimelockControl) returns (ProposalState) {",
          "24:         return super.state(proposalId);",
          "25:     }",
          "27:     function proposalThreshold() public view override(Governor, GovernorSettings) returns (uint256) {",
          "28:         return super.proposalThreshold();",
          "29:     }",
          "31:     function _propose(",
          "32:         address[] memory targets,",
          "33:         uint256[] memory values,",
          "34:         bytes[] memory calldatas,",
          "35:         string memory description,",
          "36:         address proposer",
          "37:     ) internal virtual override(Governor, GovernorStorage) returns (uint256) {",
          "38:         return super._propose(targets, values, calldatas, description, proposer);",
          "39:     }",
          "41:     function _queueOperations(",
          "42:         uint256 proposalId,",
          "43:         address[] memory targets,",
          "44:         uint256[] memory values,",
          "45:         bytes[] memory calldatas,",
          "46:         bytes32 descriptionHash",
          "47:     ) internal override(Governor, GovernorTimelockControl) returns (uint48) {",
          "48:         return super._queueOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "49:     }",
          "51:     function _executeOperations(",
          "52:         uint256 proposalId,",
          "53:         address[] memory targets,",
          "54:         uint256[] memory values,",
          "55:         bytes[] memory calldatas,",
          "56:         bytes32 descriptionHash",
          "57:     ) internal override(Governor, GovernorTimelockControl) {",
          "58:         super._executeOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "59:     }",
          "61:     function _cancel(",
          "62:         address[] memory targets,",
          "63:         uint256[] memory values,",
          "64:         bytes[] memory calldatas,",
          "65:         bytes32 descriptionHash",
          "66:     ) internal override(Governor, GovernorTimelockControl) returns (uint256) {",
          "67:         return super._cancel(targets, values, calldatas, descriptionHash);",
          "68:     }",
          "70:     function _executor() internal view override(Governor, GovernorTimelockControl) returns (address) {",
          "71:         return super._executor();",
          "72:     }",
          "73: }",
          "",
          "---------------"
        ],
        "contracts/mocks/governance/GovernorTimelockCompoundMock.sol||contracts/mocks/governance/GovernorTimelockCompoundMock.sol": [
          "File: contracts/mocks/governance/GovernorTimelockCompoundMock.sol -> contracts/mocks/governance/GovernorTimelockCompoundMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     GovernorVotesQuorumFraction,",
          "15:     GovernorCountingSimple",
          "16: {",
          "26:         return super.quorum(blockNumber);",
          "27:     }",
          "",
          "[Removed Lines]",
          "17:     function supportsInterface(",
          "18:         bytes4 interfaceId",
          "19:     ) public view override(Governor, GovernorTimelockCompound) returns (bool) {",
          "20:         return super.supportsInterface(interfaceId);",
          "21:     }",
          "23:     function quorum(",
          "24:         uint256 blockNumber",
          "25:     ) public view override(IGovernor, GovernorVotesQuorumFraction) returns (uint256) {",
          "",
          "[Added Lines]",
          "17:     function quorum(uint256 blockNumber) public view override(Governor, GovernorVotesQuorumFraction) returns (uint256) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:         return super.proposalThreshold();",
          "37:     }",
          "40:         uint256 proposalId,",
          "41:         address[] memory targets,",
          "42:         uint256[] memory values,",
          "43:         bytes[] memory calldatas,",
          "44:         bytes32 descriptionHash",
          "45:     ) internal override(Governor, GovernorTimelockCompound) {",
          "47:     }",
          "49:     function _cancel(",
          "50:         address[] memory targets,",
          "51:         uint256[] memory values,",
          "52:         bytes[] memory calldatas,",
          "56:     }",
          "58:     function _executor() internal view override(Governor, GovernorTimelockCompound) returns (address) {",
          "",
          "[Removed Lines]",
          "39:     function _execute(",
          "46:         super._execute(proposalId, targets, values, calldatas, descriptionHash);",
          "53:         bytes32 salt",
          "54:     ) internal override(Governor, GovernorTimelockCompound) returns (uint256 proposalId) {",
          "55:         return super._cancel(targets, values, calldatas, salt);",
          "",
          "[Added Lines]",
          "31:     function _queueOperations(",
          "32:         uint256 proposalId,",
          "33:         address[] memory targets,",
          "34:         uint256[] memory values,",
          "35:         bytes[] memory calldatas,",
          "36:         bytes32 descriptionHash",
          "37:     ) internal override(Governor, GovernorTimelockCompound) returns (uint48) {",
          "38:         return super._queueOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "39:     }",
          "41:     function _executeOperations(",
          "48:         super._executeOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "55:         bytes32 descriptionHash",
          "56:     ) internal override(Governor, GovernorTimelockCompound) returns (uint256) {",
          "57:         return super._cancel(targets, values, calldatas, descriptionHash);",
          "",
          "---------------"
        ],
        "contracts/mocks/governance/GovernorTimelockControlMock.sol||contracts/mocks/governance/GovernorTimelockControlMock.sol": [
          "File: contracts/mocks/governance/GovernorTimelockControlMock.sol -> contracts/mocks/governance/GovernorTimelockControlMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     GovernorVotesQuorumFraction,",
          "15:     GovernorCountingSimple",
          "16: {",
          "26:         return super.quorum(blockNumber);",
          "27:     }",
          "",
          "[Removed Lines]",
          "17:     function supportsInterface(",
          "18:         bytes4 interfaceId",
          "19:     ) public view override(Governor, GovernorTimelockControl) returns (bool) {",
          "20:         return super.supportsInterface(interfaceId);",
          "21:     }",
          "23:     function quorum(",
          "24:         uint256 blockNumber",
          "25:     ) public view override(IGovernor, GovernorVotesQuorumFraction) returns (uint256) {",
          "",
          "[Added Lines]",
          "17:     function quorum(uint256 blockNumber) public view override(Governor, GovernorVotesQuorumFraction) returns (uint256) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:         return super.proposalThreshold();",
          "35:     }",
          "38:         uint256 proposalId,",
          "39:         address[] memory targets,",
          "40:         uint256[] memory values,",
          "41:         bytes[] memory calldatas,",
          "42:         bytes32 descriptionHash",
          "43:     ) internal override(Governor, GovernorTimelockControl) {",
          "45:     }",
          "47:     function _cancel(",
          "",
          "[Removed Lines]",
          "37:     function _execute(",
          "44:         super._execute(proposalId, targets, values, calldatas, descriptionHash);",
          "",
          "[Added Lines]",
          "29:     function _queueOperations(",
          "30:         uint256 proposalId,",
          "31:         address[] memory targets,",
          "32:         uint256[] memory values,",
          "33:         bytes[] memory calldatas,",
          "34:         bytes32 descriptionHash",
          "35:     ) internal override(Governor, GovernorTimelockControl) returns (uint48) {",
          "36:         return super._queueOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "37:     }",
          "39:     function _executeOperations(",
          "46:         super._executeOperations(proposalId, targets, values, calldatas, descriptionHash);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:         uint256[] memory values,",
          "50:         bytes[] memory calldatas,",
          "51:         bytes32 descriptionHash",
          "53:         return super._cancel(targets, values, calldatas, descriptionHash);",
          "54:     }",
          "",
          "[Removed Lines]",
          "52:     ) internal override(Governor, GovernorTimelockControl) returns (uint256 proposalId) {",
          "",
          "[Added Lines]",
          "54:     ) internal override(Governor, GovernorTimelockControl) returns (uint256) {",
          "",
          "---------------"
        ],
        "test/governance/Governor.test.js||test/governance/Governor.test.js": [
          "File: test/governance/Governor.test.js -> test/governance/Governor.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         );",
          "80:       });",
          "83:       shouldBehaveLikeEIP6372(mode);",
          "85:       it('deployment check', async function () {",
          "",
          "[Removed Lines]",
          "82:       shouldSupportInterfaces(['ERC165', 'ERC1155Receiver', 'Governor', 'GovernorWithParams', 'GovernorCancel']);",
          "",
          "[Added Lines]",
          "82:       shouldSupportInterfaces(['ERC165', 'ERC1155Receiver', 'Governor']);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305:               ZERO_BYTES32,",
          "306:             ]);",
          "307:           });",
          "308:         });",
          "310:         describe('on vote', function () {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:           it('if proposer has below threshold votes', async function () {",
          "310:             const votes = web3.utils.toWei('10');",
          "311:             const threshold = web3.utils.toWei('1000');",
          "312:             await this.mock.$_setProposalThreshold(threshold);",
          "313:             await expectRevertCustomError(this.helper.propose({ from: voter1 }), 'GovernorInsufficientProposerVotes', [",
          "314:               voter1,",
          "315:               votes,",
          "316:               threshold,",
          "317:             ]);",
          "318:           });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "427:           });",
          "428:         });",
          "430:         describe('on execute', function () {",
          "431:           it('if proposal does not exist', async function () {",
          "432:             await expectRevertCustomError(this.helper.execute(), 'GovernorNonexistentProposal', [this.proposal.id]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:         describe('on queue', function () {",
          "442:           it('always', async function () {",
          "443:             await this.helper.propose({ from: proposer });",
          "444:             await this.helper.waitForSnapshot();",
          "445:             await this.helper.vote({ support: Enums.VoteType.For }, { from: voter1 });",
          "446:             await this.helper.waitForDeadline();",
          "447:             await expectRevertCustomError(this.helper.queue(), 'GovernorQueueNotImplemented', []);",
          "448:           });",
          "449:         });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "826:           });",
          "828:           it('someone else cannot propose', async function () {",
          "830:           });",
          "831:         });",
          "832:       });",
          "",
          "[Removed Lines]",
          "829:             await expectRevert(this.helper.propose({ from: voter1 }), 'Governor: proposer restricted');",
          "",
          "[Added Lines]",
          "850:             await expectRevertCustomError(this.helper.propose({ from: voter1 }), 'GovernorRestrictedProposer', [",
          "851:               voter1,",
          "852:             ]);",
          "",
          "---------------"
        ],
        "test/governance/compatibility/GovernorCompatibilityBravo.test.js||test/governance/compatibility/GovernorCompatibilityBravo.test.js": [
          "File: test/governance/compatibility/GovernorCompatibilityBravo.test.js -> test/governance/compatibility/GovernorCompatibilityBravo.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/governance/extensions/GovernorStorage.test.js||test/governance/extensions/GovernorStorage.test.js": [
          "File: test/governance/extensions/GovernorStorage.test.js -> test/governance/extensions/GovernorStorage.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const { constants, expectEvent, expectRevert } = require('@openzeppelin/test-helpers');",
          "2: const { expect } = require('chai');",
          "4: const { expectRevertCustomError } = require('../../helpers/customError');",
          "5: const Enums = require('../../helpers/enums');",
          "6: const { GovernorHelper, timelockSalt } = require('../../helpers/governance');",
          "8: const Timelock = artifacts.require('TimelockController');",
          "9: const Governor = artifacts.require('$GovernorStorageMock');",
          "10: const CallReceiver = artifacts.require('CallReceiverMock');",
          "12: const TOKENS = [",
          "13:   { Token: artifacts.require('$ERC20Votes'), mode: 'blocknumber' },",
          "14:   { Token: artifacts.require('$ERC20VotesTimestampMock'), mode: 'timestamp' },",
          "15: ];",
          "17: contract('GovernorStorage', function (accounts) {",
          "18:   const [owner, voter1, voter2, voter3, voter4] = accounts;",
          "20:   const DEFAULT_ADMIN_ROLE = '0x0000000000000000000000000000000000000000000000000000000000000000';",
          "21:   const PROPOSER_ROLE = web3.utils.soliditySha3('PROPOSER_ROLE');",
          "22:   const EXECUTOR_ROLE = web3.utils.soliditySha3('EXECUTOR_ROLE');",
          "23:   const CANCELLER_ROLE = web3.utils.soliditySha3('CANCELLER_ROLE');",
          "25:   const name = 'OZ-Governor';",
          "26:   const version = '1';",
          "27:   const tokenName = 'MockToken';",
          "28:   const tokenSymbol = 'MTKN';",
          "29:   const tokenSupply = web3.utils.toWei('100');",
          "30:   const votingDelay = web3.utils.toBN(4);",
          "31:   const votingPeriod = web3.utils.toBN(16);",
          "32:   const value = web3.utils.toWei('1');",
          "34:   for (const { mode, Token } of TOKENS) {",
          "35:     describe(`using ${Token._json.contractName}`, function () {",
          "36:       beforeEach(async function () {",
          "37:         const [deployer] = await web3.eth.getAccounts();",
          "39:         this.token = await Token.new(tokenName, tokenSymbol, tokenName, version);",
          "40:         this.timelock = await Timelock.new(3600, [], [], deployer);",
          "41:         this.mock = await Governor.new(",
          "42:           name,",
          "43:           votingDelay,",
          "44:           votingPeriod,",
          "45:           0,",
          "46:           this.timelock.address,",
          "47:           this.token.address,",
          "48:           0,",
          "49:         );",
          "50:         this.receiver = await CallReceiver.new();",
          "52:         this.helper = new GovernorHelper(this.mock, mode);",
          "54:         await web3.eth.sendTransaction({ from: owner, to: this.timelock.address, value });",
          "57:         await this.timelock.grantRole(PROPOSER_ROLE, this.mock.address);",
          "58:         await this.timelock.grantRole(PROPOSER_ROLE, owner);",
          "59:         await this.timelock.grantRole(CANCELLER_ROLE, this.mock.address);",
          "60:         await this.timelock.grantRole(CANCELLER_ROLE, owner);",
          "61:         await this.timelock.grantRole(EXECUTOR_ROLE, constants.ZERO_ADDRESS);",
          "62:         await this.timelock.revokeRole(DEFAULT_ADMIN_ROLE, deployer);",
          "64:         await this.token.$_mint(owner, tokenSupply);",
          "65:         await this.helper.delegate({ token: this.token, to: voter1, value: web3.utils.toWei('10') }, { from: owner });",
          "66:         await this.helper.delegate({ token: this.token, to: voter2, value: web3.utils.toWei('7') }, { from: owner });",
          "67:         await this.helper.delegate({ token: this.token, to: voter3, value: web3.utils.toWei('5') }, { from: owner });",
          "68:         await this.helper.delegate({ token: this.token, to: voter4, value: web3.utils.toWei('2') }, { from: owner });",
          "71:         this.proposal = this.helper.setProposal(",
          "72:           [",
          "73:             {",
          "74:               target: this.receiver.address,",
          "75:               value,",
          "76:               data: this.receiver.contract.methods.mockFunction().encodeABI(),",
          "77:             },",
          "78:           ],",
          "79:           '<proposal description>',",
          "80:         );",
          "81:         this.proposal.timelockid = await this.timelock.hashOperationBatch(",
          "82:           ...this.proposal.shortProposal.slice(0, 3),",
          "83:           '0x0',",
          "84:           timelockSalt(this.mock.address, this.proposal.shortProposal[3]),",
          "85:         );",
          "86:       });",
          "88:       describe('proposal indexing', function () {",
          "89:         it('before propose', async function () {",
          "90:           expect(await this.mock.proposalCount()).to.be.bignumber.equal('0');",
          "93:           await expectRevert.unspecified(this.mock.proposalDetailsAt(0));",
          "95:           await expectRevertCustomError(this.mock.proposalDetails(this.proposal.id), 'GovernorNonexistentProposal', [",
          "96:             this.proposal.id,",
          "97:           ]);",
          "98:         });",
          "100:         it('after propose', async function () {",
          "101:           await this.helper.propose();",
          "103:           expect(await this.mock.proposalCount()).to.be.bignumber.equal('1');",
          "105:           const proposalDetailsAt0 = await this.mock.proposalDetailsAt(0);",
          "106:           expect(proposalDetailsAt0[0]).to.be.bignumber.equal(this.proposal.id);",
          "107:           expect(proposalDetailsAt0[1]).to.be.deep.equal(this.proposal.targets);",
          "108:           expect(proposalDetailsAt0[2].map(x => x.toString())).to.be.deep.equal(this.proposal.values);",
          "109:           expect(proposalDetailsAt0[3]).to.be.deep.equal(this.proposal.fulldata);",
          "110:           expect(proposalDetailsAt0[4]).to.be.equal(this.proposal.descriptionHash);",
          "112:           const proposalDetailsForId = await this.mock.proposalDetails(this.proposal.id);",
          "113:           expect(proposalDetailsForId[0]).to.be.deep.equal(this.proposal.targets);",
          "114:           expect(proposalDetailsForId[1].map(x => x.toString())).to.be.deep.equal(this.proposal.values);",
          "115:           expect(proposalDetailsForId[2]).to.be.deep.equal(this.proposal.fulldata);",
          "116:           expect(proposalDetailsForId[3]).to.be.equal(this.proposal.descriptionHash);",
          "117:         });",
          "118:       });",
          "120:       it('queue and execute by id', async function () {",
          "121:         await this.helper.propose();",
          "122:         await this.helper.waitForSnapshot();",
          "123:         await this.helper.vote({ support: Enums.VoteType.For }, { from: voter1 });",
          "124:         await this.helper.vote({ support: Enums.VoteType.For }, { from: voter2 });",
          "125:         await this.helper.vote({ support: Enums.VoteType.Against }, { from: voter3 });",
          "126:         await this.helper.vote({ support: Enums.VoteType.Abstain }, { from: voter4 });",
          "127:         await this.helper.waitForDeadline();",
          "128:         const txQueue = await this.mock.queue(this.proposal.id);",
          "129:         await this.helper.waitForEta();",
          "130:         const txExecute = await this.mock.execute(this.proposal.id);",
          "132:         expectEvent(txQueue, 'ProposalQueued', { proposalId: this.proposal.id });",
          "133:         await expectEvent.inTransaction(txQueue.tx, this.timelock, 'CallScheduled', { id: this.proposal.timelockid });",
          "134:         await expectEvent.inTransaction(txQueue.tx, this.timelock, 'CallSalt', {",
          "135:           id: this.proposal.timelockid,",
          "136:         });",
          "138:         expectEvent(txExecute, 'ProposalExecuted', { proposalId: this.proposal.id });",
          "139:         await expectEvent.inTransaction(txExecute.tx, this.timelock, 'CallExecuted', { id: this.proposal.timelockid });",
          "140:         await expectEvent.inTransaction(txExecute.tx, this.receiver, 'MockFunctionCalled');",
          "141:       });",
          "143:       it('cancel by id', async function () {",
          "144:         await this.helper.propose();",
          "145:         const txCancel = await this.mock.cancel(this.proposal.id);",
          "146:         expectEvent(txCancel, 'ProposalCanceled', { proposalId: this.proposal.id });",
          "147:       });",
          "148:     });",
          "149:   }",
          "150: });",
          "",
          "---------------"
        ],
        "test/governance/extensions/GovernorTimelockCompound.test.js||test/governance/extensions/GovernorTimelockCompound.test.js": [
          "File: test/governance/extensions/GovernorTimelockCompound.test.js -> test/governance/extensions/GovernorTimelockCompound.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: const { expectRevertCustomError } = require('../../helpers/customError');",
          "7: const { computeCreateAddress } = require('../../helpers/create');",
          "11: const Timelock = artifacts.require('CompTimelock');",
          "12: const Governor = artifacts.require('$GovernorTimelockCompoundMock');",
          "13: const CallReceiver = artifacts.require('CallReceiverMock');",
          "",
          "[Removed Lines]",
          "9: const { shouldSupportInterfaces } = require('../../utils/introspection/SupportsInterface.behavior');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         );",
          "78:       });",
          "82:       it(\"doesn't accept ether transfers\", async function () {",
          "83:         await expectRevert.unspecified(web3.eth.sendTransaction({ from: owner, to: this.mock.address, value: 1 }));",
          "84:       });",
          "",
          "[Removed Lines]",
          "80:       shouldSupportInterfaces(['ERC165', 'Governor', 'GovernorWithParams', 'GovernorTimelock']);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/governance/extensions/GovernorTimelockControl.test.js||test/governance/extensions/GovernorTimelockControl.test.js": [
          "File: test/governance/extensions/GovernorTimelockControl.test.js -> test/governance/extensions/GovernorTimelockControl.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: const { expect } = require('chai');",
          "4: const Enums = require('../../helpers/enums');",
          "6: const { expectRevertCustomError } = require('../../helpers/customError');",
          "10: const Timelock = artifacts.require('TimelockController');",
          "11: const Governor = artifacts.require('$GovernorTimelockControlMock');",
          "12: const CallReceiver = artifacts.require('CallReceiverMock');",
          "",
          "[Removed Lines]",
          "5: const { GovernorHelper, proposalStatesToBitMap } = require('../../helpers/governance');",
          "8: const { shouldSupportInterfaces } = require('../../utils/introspection/SupportsInterface.behavior');",
          "",
          "[Added Lines]",
          "5: const { GovernorHelper, proposalStatesToBitMap, timelockSalt } = require('../../helpers/governance');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   for (const { mode, Token } of TOKENS) {",
          "39:     describe(`using ${Token._json.contractName}`, function () {",
          "43:       beforeEach(async function () {",
          "44:         const [deployer] = await web3.eth.getAccounts();",
          "",
          "[Removed Lines]",
          "40:       const timelockSalt = (address, descriptionHash) =>",
          "41:         '0x' + web3.utils.toBN(address).shln(96).xor(web3.utils.toBN(descriptionHash)).toString(16, 64);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:         );",
          "98:       });",
          "102:       it(\"doesn't accept ether transfers\", async function () {",
          "103:         await expectRevert.unspecified(web3.eth.sendTransaction({ from: owner, to: this.mock.address, value: 1 }));",
          "104:       });",
          "",
          "[Removed Lines]",
          "100:       shouldSupportInterfaces(['ERC165', 'Governor', 'GovernorWithParams', 'GovernorTimelock']);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/helpers/create.js||test/helpers/create.js": [
          "File: test/helpers/create.js -> test/helpers/create.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: function computeCreateAddress(deployer, nonce) {",
          "5: }",
          "7: function computeCreate2Address(saltHex, bytecode, deployer) {",
          "8:   return web3.utils.toChecksumAddress(",
          "9:     web3.utils",
          "10:       .sha3(",
          "15:       )",
          "16:       .slice(-40),",
          "17:   );",
          "",
          "[Removed Lines]",
          "1: const { rlp } = require('ethereumjs-util');",
          "4:   return web3.utils.toChecksumAddress(web3.utils.sha3(rlp.encode([deployer.address ?? deployer, nonce])).slice(-40));",
          "11:         '0x' +",
          "12:           ['ff', deployer.address ?? deployer, saltHex, web3.utils.soliditySha3(bytecode)]",
          "13:             .map(x => x.replace(/0x/, ''))",
          "14:             .join(''),",
          "",
          "[Added Lines]",
          "1: const RLP = require('rlp');",
          "4:   return web3.utils.toChecksumAddress(web3.utils.sha3(RLP.encode([deployer.address ?? deployer, nonce])).slice(-40));",
          "11:         `0x${['ff', deployer.address ?? deployer, saltHex, web3.utils.soliditySha3(bytecode)]",
          "12:           .map(x => x.replace(/0x/, ''))",
          "13:           .join('')}`,",
          "",
          "---------------"
        ],
        "test/helpers/governance.js||test/helpers/governance.js": [
          "File: test/helpers/governance.js -> test/helpers/governance.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const { forward } = require('../helpers/time');",
          "2: const { ProposalState } = require('./enums');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const { web3 } = require('hardhat');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:   return opts ? args.concat(opts) : args;",
          "16: }",
          "18: class GovernorHelper {",
          "19:   constructor(governor, mode = 'blocknumber') {",
          "20:     this.governor = governor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: const timelockSalt = (address, descriptionHash) =>",
          "20:   '0x' + web3.utils.toBN(address).shln(96).xor(web3.utils.toBN(descriptionHash)).toString(16, 64);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245: module.exports = {",
          "246:   GovernorHelper,",
          "247:   proposalStatesToBitMap,",
          "248: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:   timelockSalt,",
          "",
          "---------------"
        ],
        "test/proxy/Clones.test.js||test/proxy/Clones.test.js": [
          "File: test/proxy/Clones.test.js -> test/proxy/Clones.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const { expectEvent } = require('@openzeppelin/test-helpers');",
          "3: const { expect } = require('chai');",
          "5: const { expectRevertCustomError } = require('../helpers/customError');",
          "7: const shouldBehaveLikeClone = require('./Clones.behaviour');",
          "",
          "[Removed Lines]",
          "2: const { computeCreate2Address } = require('../helpers/create');",
          "",
          "[Added Lines]",
          "3: const { computeCreate2Address } = require('../helpers/create');",
          "",
          "---------------"
        ],
        "test/utils/Create2.test.js||test/utils/Create2.test.js": [
          "File: test/utils/Create2.test.js -> test/utils/Create2.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: const { balance, ether, expectEvent, expectRevert, send } = require('@openzeppelin/test-helpers');",
          "3: const { expect } = require('chai');",
          "4: const { expectRevertCustomError } = require('../helpers/customError');",
          "6: const Create2 = artifacts.require('$Create2');",
          "",
          "[Removed Lines]",
          "2: const { computeCreate2Address } = require('../helpers/create');",
          "",
          "[Added Lines]",
          "3: const { computeCreate2Address } = require('../helpers/create');",
          "",
          "---------------"
        ],
        "test/utils/introspection/SupportsInterface.behavior.js||test/utils/introspection/SupportsInterface.behavior.js": [
          "File: test/utils/introspection/SupportsInterface.behavior.js -> test/utils/introspection/SupportsInterface.behavior.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     'COUNTING_MODE()',",
          "57:     'hashProposal(address[],uint256[],bytes[],bytes32)',",
          "58:     'state(uint256)',",
          "59:     'proposalSnapshot(uint256)',",
          "60:     'proposalDeadline(uint256)',",
          "80:     'votingDelay()',",
          "81:     'votingPeriod()',",
          "82:     'quorum(uint256)',",
          "",
          "[Removed Lines]",
          "61:     'votingDelay()',",
          "62:     'votingPeriod()',",
          "63:     'quorum(uint256)',",
          "64:     'getVotes(address,uint256)',",
          "65:     'hasVoted(uint256,address)',",
          "66:     'propose(address[],uint256[],bytes[],string)',",
          "67:     'execute(address[],uint256[],bytes[],bytes32)',",
          "68:     'castVote(uint256,uint8)',",
          "69:     'castVoteWithReason(uint256,uint8,string)',",
          "70:     'castVoteBySig(uint256,uint8,address,bytes)',",
          "71:   ],",
          "72:   GovernorWithParams: [",
          "73:     'name()',",
          "74:     'version()',",
          "75:     'COUNTING_MODE()',",
          "76:     'hashProposal(address[],uint256[],bytes[],bytes32)',",
          "77:     'state(uint256)',",
          "78:     'proposalSnapshot(uint256)',",
          "79:     'proposalDeadline(uint256)',",
          "",
          "[Added Lines]",
          "59:     'proposalThreshold()',",
          "62:     'proposalProposer(uint256)',",
          "63:     'proposalEta(uint256)',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     'getVotesWithParams(address,uint256,bytes)',",
          "85:     'hasVoted(uint256,address)',",
          "86:     'propose(address[],uint256[],bytes[],string)',",
          "87:     'execute(address[],uint256[],bytes[],bytes32)',",
          "88:     'castVote(uint256,uint8)',",
          "89:     'castVoteWithReason(uint256,uint8,string)',",
          "90:     'castVoteWithReasonAndParams(uint256,uint8,string,bytes)',",
          "91:     'castVoteBySig(uint256,uint8,address,bytes)',",
          "92:     'castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)',",
          "93:   ],",
          "96:   ERC2981: ['royaltyInfo(uint256,uint256)'],",
          "97: };",
          "",
          "[Removed Lines]",
          "94:   GovernorCancel: ['proposalProposer(uint256)', 'cancel(address[],uint256[],bytes[],bytes32)'],",
          "95:   GovernorTimelock: ['timelock()', 'proposalEta(uint256)', 'queue(address[],uint256[],bytes[],bytes32)'],",
          "",
          "[Added Lines]",
          "71:     'queue(address[],uint256[],bytes[],bytes32)',",
          "73:     'cancel(address[],uint256[],bytes[],bytes32)',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8643fd45fda2741b13145e60931383dfe5794a33",
      "candidate_info": {
        "commit_hash": "8643fd45fda2741b13145e60931383dfe5794a33",
        "repo": "OpenZeppelin/openzeppelin-contracts",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8643fd45fda2741b13145e60931383dfe5794a33",
        "files": [
          "docs/modules/ROOT/pages/index.adoc",
          "remappings.txt",
          "test/governance/Governor.t.sol",
          "test/metatx/ERC2771Forwarder.t.sol",
          "test/token/ERC20/extensions/ERC4626.t.sol",
          "test/token/ERC721/extensions/ERC721Consecutive.t.sol",
          "test/utils/ShortStrings.t.sol",
          "test/utils/math/Math.t.sol"
        ],
        "message": "Update remappings and install instructions for Foundry on docs site (#4498)\n\nCo-authored-by: ernestognw <ernestognw@gmail.com>",
        "before_after_code_files": [
          "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
          "test/metatx/ERC2771Forwarder.t.sol||test/metatx/ERC2771Forwarder.t.sol",
          "test/token/ERC20/extensions/ERC4626.t.sol||test/token/ERC20/extensions/ERC4626.t.sol",
          "test/token/ERC721/extensions/ERC721Consecutive.t.sol||test/token/ERC721/extensions/ERC721Consecutive.t.sol",
          "test/utils/ShortStrings.t.sol||test/utils/ShortStrings.t.sol",
          "test/utils/math/Math.t.sol||test/utils/math/Math.t.sol"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/governance/Governor.t.sol||test/governance/Governor.t.sol"
          ],
          "candidate": [
            "test/governance/Governor.t.sol||test/governance/Governor.t.sol"
          ]
        }
      },
      "candidate_diff": {
        "test/governance/Governor.t.sol||test/governance/Governor.t.sol": [
          "File: test/governance/Governor.t.sol -> test/governance/Governor.t.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: pragma solidity ^0.8.20;",
          "5: import {Test} from \"forge-std/Test.sol\";",
          "9: contract GovernorInternalTest is Test, Governor {",
          "10:     constructor() Governor(\"\") {}",
          "",
          "[Removed Lines]",
          "6: import {Strings} from \"../../contracts/utils/Strings.sol\";",
          "7: import {Governor} from \"../../contracts/governance/Governor.sol\";",
          "",
          "[Added Lines]",
          "6: import {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";",
          "7: import {Governor} from \"@openzeppelin/contracts/governance/Governor.sol\";",
          "",
          "---------------"
        ],
        "test/metatx/ERC2771Forwarder.t.sol||test/metatx/ERC2771Forwarder.t.sol": [
          "File: test/metatx/ERC2771Forwarder.t.sol -> test/metatx/ERC2771Forwarder.t.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: pragma solidity ^0.8.20;",
          "5: import {Test} from \"forge-std/Test.sol\";",
          "9: struct ForwardRequest {",
          "10:     address from;",
          "",
          "[Removed Lines]",
          "6: import {ERC2771Forwarder} from \"contracts/metatx/ERC2771Forwarder.sol\";",
          "7: import {CallReceiverMockTrustingForwarder, CallReceiverMock} from \"contracts/mocks/CallReceiverMock.sol\";",
          "",
          "[Added Lines]",
          "6: import {ERC2771Forwarder} from \"@openzeppelin/contracts/metatx/ERC2771Forwarder.sol\";",
          "7: import {CallReceiverMockTrustingForwarder, CallReceiverMock} from \"@openzeppelin/contracts/mocks/CallReceiverMock.sol\";",
          "",
          "---------------"
        ],
        "test/token/ERC20/extensions/ERC4626.t.sol||test/token/ERC20/extensions/ERC4626.t.sol": [
          "File: test/token/ERC20/extensions/ERC4626.t.sol -> test/token/ERC20/extensions/ERC4626.t.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import {ERC4626Test} from \"erc4626-tests/ERC4626.test.sol\";",
          "13: contract ERC4626VaultOffsetMock is ERC4626OffsetMock {",
          "14:     constructor(",
          "",
          "[Removed Lines]",
          "6: import {ERC20} from \"openzeppelin/token/ERC20/ERC20.sol\";",
          "7: import {ERC4626} from \"openzeppelin/token/ERC20/extensions/ERC4626.sol\";",
          "9: import {ERC20Mock} from \"openzeppelin/mocks/token/ERC20Mock.sol\";",
          "10: import {ERC4626Mock} from \"openzeppelin/mocks/token/ERC4626Mock.sol\";",
          "11: import {ERC4626OffsetMock} from \"openzeppelin/mocks/token/ERC4626OffsetMock.sol\";",
          "",
          "[Added Lines]",
          "6: import {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";",
          "7: import {ERC4626} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";",
          "9: import {ERC20Mock} from \"@openzeppelin/contracts/mocks/token/ERC20Mock.sol\";",
          "10: import {ERC4626Mock} from \"@openzeppelin/contracts/mocks/token/ERC4626Mock.sol\";",
          "11: import {ERC4626OffsetMock} from \"@openzeppelin/contracts/mocks/token/ERC4626OffsetMock.sol\";",
          "",
          "---------------"
        ],
        "test/token/ERC721/extensions/ERC721Consecutive.t.sol||test/token/ERC721/extensions/ERC721Consecutive.t.sol": [
          "File: test/token/ERC721/extensions/ERC721Consecutive.t.sol -> test/token/ERC721/extensions/ERC721Consecutive.t.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import {Test, StdUtils} from \"forge-std/Test.sol\";",
          "11: function toSingleton(address account) pure returns (address[] memory) {",
          "",
          "[Removed Lines]",
          "7: import {ERC721} from \"../../../../contracts/token/ERC721/ERC721.sol\";",
          "8: import {ERC721Consecutive} from \"../../../../contracts/token/ERC721/extensions/ERC721Consecutive.sol\";",
          "",
          "[Added Lines]",
          "7: import {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";",
          "8: import {ERC721Consecutive} from \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Consecutive.sol\";",
          "",
          "---------------"
        ],
        "test/utils/ShortStrings.t.sol||test/utils/ShortStrings.t.sol": [
          "File: test/utils/ShortStrings.t.sol -> test/utils/ShortStrings.t.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import {Test} from \"forge-std/Test.sol\";",
          "9: contract ShortStringsTest is Test {",
          "10:     string _fallback;",
          "",
          "[Removed Lines]",
          "7: import {ShortStrings, ShortString} from \"../../contracts/utils/ShortStrings.sol\";",
          "",
          "[Added Lines]",
          "7: import {ShortStrings, ShortString} from \"@openzeppelin/contracts/utils/ShortStrings.sol\";",
          "",
          "---------------"
        ],
        "test/utils/math/Math.t.sol||test/utils/math/Math.t.sol": [
          "File: test/utils/math/Math.t.sol -> test/utils/math/Math.t.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import {Test} from \"forge-std/Test.sol\";",
          "9: contract MathTest is Test {",
          "",
          "[Removed Lines]",
          "7: import {Math} from \"../../../contracts/utils/math/Math.sol\";",
          "",
          "[Added Lines]",
          "7: import {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1d6ad5a307945c7825cb3c4c911f2fd017c8725",
      "candidate_info": {
        "commit_hash": "c1d6ad5a307945c7825cb3c4c911f2fd017c8725",
        "repo": "OpenZeppelin/openzeppelin-contracts",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/c1d6ad5a307945c7825cb3c4c911f2fd017c8725",
        "files": [
          ".changeset/eight-eyes-burn.md",
          "CHANGELOG.md",
          "contracts/governance/Governor.sol",
          "contracts/governance/IGovernor.sol",
          "contracts/governance/README.adoc",
          "contracts/governance/extensions/GovernorCountingFractional.sol",
          "contracts/governance/extensions/GovernorCountingSimple.sol",
          "contracts/mocks/governance/GovernorFractionalMock.sol",
          "contracts/mocks/governance/GovernorWithParamsMock.sol",
          "test/governance/Governor.t.sol",
          "test/governance/extensions/GovernorCountingFractional.test.js",
          "test/helpers/enums.js"
        ],
        "message": "Add GovernorCountingFractional (#5045)\n\nCo-authored-by: ernestognw <ernestognw@gmail.com>\nCo-authored-by: Francisco <fg@frang.io>",
        "before_after_code_files": [
          "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
          "contracts/governance/IGovernor.sol||contracts/governance/IGovernor.sol",
          "contracts/governance/extensions/GovernorCountingFractional.sol||contracts/governance/extensions/GovernorCountingFractional.sol",
          "contracts/governance/extensions/GovernorCountingSimple.sol||contracts/governance/extensions/GovernorCountingSimple.sol",
          "contracts/mocks/governance/GovernorFractionalMock.sol||contracts/mocks/governance/GovernorFractionalMock.sol",
          "contracts/mocks/governance/GovernorWithParamsMock.sol||contracts/mocks/governance/GovernorWithParamsMock.sol",
          "test/governance/Governor.t.sol||test/governance/Governor.t.sol",
          "test/governance/extensions/GovernorCountingFractional.test.js||test/governance/extensions/GovernorCountingFractional.test.js",
          "test/helpers/enums.js||test/helpers/enums.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
            "test/governance/Governor.t.sol||test/governance/Governor.t.sol"
          ],
          "candidate": [
            "contracts/governance/Governor.sol||contracts/governance/Governor.sol",
            "test/governance/Governor.t.sol||test/governance/Governor.t.sol"
          ]
        }
      },
      "candidate_diff": {
        "contracts/governance/Governor.sol||contracts/governance/Governor.sol": [
          "File: contracts/governance/Governor.sol -> contracts/governance/Governor.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:         uint256 proposalId,",
          "256:         address account,",
          "257:         uint8 support,",
          "259:         bytes memory params",
          "",
          "[Removed Lines]",
          "258:         uint256 weight,",
          "260:     ) internal virtual;",
          "",
          "[Added Lines]",
          "258:         uint256 totalWeight,",
          "260:     ) internal virtual returns (uint256);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "639:     ) internal virtual returns (uint256) {",
          "640:         _validateStateBitmap(proposalId, _encodeStateBitmap(ProposalState.Active));",
          "645:         if (params.length == 0) {",
          "647:         } else {",
          "649:         }",
          "652:     }",
          "",
          "[Removed Lines]",
          "642:         uint256 weight = _getVotes(account, proposalSnapshot(proposalId), params);",
          "643:         _countVote(proposalId, account, support, weight, params);",
          "646:             emit VoteCast(account, proposalId, support, weight, reason);",
          "648:             emit VoteCastWithParams(account, proposalId, support, weight, reason, params);",
          "651:         return weight;",
          "",
          "[Added Lines]",
          "642:         uint256 totalWeight = _getVotes(account, proposalSnapshot(proposalId), params);",
          "643:         uint256 votedWeight = _countVote(proposalId, account, support, totalWeight, params);",
          "646:             emit VoteCast(account, proposalId, support, votedWeight, reason);",
          "648:             emit VoteCastWithParams(account, proposalId, support, votedWeight, reason, params);",
          "651:         return votedWeight;",
          "",
          "---------------"
        ],
        "contracts/governance/IGovernor.sol||contracts/governance/IGovernor.sol": [
          "File: contracts/governance/IGovernor.sol -> contracts/governance/IGovernor.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     error GovernorInvalidVoteType();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     error GovernorInvalidVoteParams();",
          "",
          "---------------"
        ],
        "contracts/governance/extensions/GovernorCountingFractional.sol||contracts/governance/extensions/GovernorCountingFractional.sol": [
          "File: contracts/governance/extensions/GovernorCountingFractional.sol -> contracts/governance/extensions/GovernorCountingFractional.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: pragma solidity ^0.8.20;",
          "5: import {Governor} from \"../Governor.sol\";",
          "6: import {GovernorCountingSimple} from \"./GovernorCountingSimple.sol\";",
          "7: import {Math} from \"../../utils/math/Math.sol\";",
          "31: abstract contract GovernorCountingFractional is Governor {",
          "32:     using Math for *;",
          "34:     uint8 internal constant VOTE_TYPE_FRACTIONAL = 255;",
          "36:     struct ProposalVote {",
          "37:         uint256 againstVotes;",
          "38:         uint256 forVotes;",
          "39:         uint256 abstainVotes;",
          "40:         mapping(address voter => uint256) usedVotes;",
          "41:     }",
          "46:     mapping(uint256 => ProposalVote) private _proposalVotes;",
          "51:     error GovernorExceedRemainingWeight(address voter, uint256 usedVotes, uint256 remainingWeight);",
          "57:     function COUNTING_MODE() public pure virtual override returns (string memory) {",
          "58:         return \"support=bravo,fractional&quorum=for,abstain&params=fractional\";",
          "59:     }",
          "64:     function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {",
          "65:         return usedVotes(proposalId, account) > 0;",
          "66:     }",
          "72:     function usedVotes(uint256 proposalId, address account) public view virtual returns (uint256) {",
          "73:         return _proposalVotes[proposalId].usedVotes[account];",
          "74:     }",
          "79:     function proposalVotes(",
          "80:         uint256 proposalId",
          "81:     ) public view virtual returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) {",
          "82:         ProposalVote storage proposalVote = _proposalVotes[proposalId];",
          "83:         return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);",
          "84:     }",
          "89:     function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {",
          "90:         ProposalVote storage proposalVote = _proposalVotes[proposalId];",
          "91:         return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;",
          "92:     }",
          "97:     function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {",
          "98:         ProposalVote storage proposalVote = _proposalVotes[proposalId];",
          "99:         return proposalVote.forVotes > proposalVote.againstVotes;",
          "100:     }",
          "132:     function _countVote(",
          "133:         uint256 proposalId,",
          "134:         address account,",
          "135:         uint8 support,",
          "136:         uint256 totalWeight,",
          "137:         bytes memory params",
          "138:     ) internal virtual override returns (uint256) {",
          "140:         (, uint256 remainingWeight) = totalWeight.trySub(usedVotes(proposalId, account));",
          "141:         if (remainingWeight == 0) {",
          "142:             revert GovernorAlreadyCastVote(account);",
          "143:         }",
          "145:         uint256 againstVotes = 0;",
          "146:         uint256 forVotes = 0;",
          "147:         uint256 abstainVotes = 0;",
          "148:         uint256 usedWeight;",
          "155:         if (support == uint8(GovernorCountingSimple.VoteType.Against)) {",
          "156:             if (params.length != 0) revert GovernorInvalidVoteParams();",
          "157:             usedWeight = againstVotes = remainingWeight;",
          "158:         } else if (support == uint8(GovernorCountingSimple.VoteType.For)) {",
          "159:             if (params.length != 0) revert GovernorInvalidVoteParams();",
          "160:             usedWeight = forVotes = remainingWeight;",
          "161:         } else if (support == uint8(GovernorCountingSimple.VoteType.Abstain)) {",
          "162:             if (params.length != 0) revert GovernorInvalidVoteParams();",
          "163:             usedWeight = abstainVotes = remainingWeight;",
          "164:         } else if (support == VOTE_TYPE_FRACTIONAL) {",
          "167:             if (params.length != 0x30) revert GovernorInvalidVoteParams();",
          "169:             assembly (\"memory-safe\") {",
          "170:                 againstVotes := shr(128, mload(add(params, 0x20)))",
          "171:                 forVotes := shr(128, mload(add(params, 0x30)))",
          "172:                 abstainVotes := shr(128, mload(add(params, 0x40)))",
          "173:                 usedWeight := add(add(againstVotes, forVotes), abstainVotes) // inputs are uint128: cannot overflow",
          "174:             }",
          "177:             if (usedWeight > remainingWeight) {",
          "178:                 revert GovernorExceedRemainingWeight(account, usedWeight, remainingWeight);",
          "179:             }",
          "180:         } else {",
          "181:             revert GovernorInvalidVoteType();",
          "182:         }",
          "185:         ProposalVote storage details = _proposalVotes[proposalId];",
          "186:         if (againstVotes > 0) details.againstVotes += againstVotes;",
          "187:         if (forVotes > 0) details.forVotes += forVotes;",
          "188:         if (abstainVotes > 0) details.abstainVotes += abstainVotes;",
          "189:         details.usedVotes[account] += usedWeight;",
          "191:         return usedWeight;",
          "192:     }",
          "193: }",
          "",
          "---------------"
        ],
        "contracts/governance/extensions/GovernorCountingSimple.sol||contracts/governance/extensions/GovernorCountingSimple.sol": [
          "File: contracts/governance/extensions/GovernorCountingSimple.sol -> contracts/governance/extensions/GovernorCountingSimple.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:         uint256 proposalId,",
          "78:         address account,",
          "79:         uint8 support,",
          "81:         bytes memory // params",
          "83:         ProposalVote storage proposalVote = _proposalVotes[proposalId];",
          "85:         if (proposalVote.hasVoted[account]) {",
          "",
          "[Removed Lines]",
          "80:         uint256 weight,",
          "82:     ) internal virtual override {",
          "",
          "[Added Lines]",
          "80:         uint256 totalWeight,",
          "82:     ) internal virtual override returns (uint256) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         proposalVote.hasVoted[account] = true;",
          "90:         if (support == uint8(VoteType.Against)) {",
          "92:         } else if (support == uint8(VoteType.For)) {",
          "94:         } else if (support == uint8(VoteType.Abstain)) {",
          "96:         } else {",
          "97:             revert GovernorInvalidVoteType();",
          "98:         }",
          "99:     }",
          "100: }",
          "",
          "[Removed Lines]",
          "91:             proposalVote.againstVotes += weight;",
          "93:             proposalVote.forVotes += weight;",
          "95:             proposalVote.abstainVotes += weight;",
          "",
          "[Added Lines]",
          "91:             proposalVote.againstVotes += totalWeight;",
          "93:             proposalVote.forVotes += totalWeight;",
          "95:             proposalVote.abstainVotes += totalWeight;",
          "100:         return totalWeight;",
          "",
          "---------------"
        ],
        "contracts/mocks/governance/GovernorFractionalMock.sol||contracts/mocks/governance/GovernorFractionalMock.sol": [
          "File: contracts/mocks/governance/GovernorFractionalMock.sol -> contracts/mocks/governance/GovernorFractionalMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: pragma solidity ^0.8.20;",
          "5: import {Governor} from \"../../governance/Governor.sol\";",
          "6: import {GovernorSettings} from \"../../governance/extensions/GovernorSettings.sol\";",
          "7: import {GovernorCountingFractional} from \"../../governance/extensions/GovernorCountingFractional.sol\";",
          "8: import {GovernorVotesQuorumFraction} from \"../../governance/extensions/GovernorVotesQuorumFraction.sol\";",
          "10: abstract contract GovernorFractionalMock is GovernorSettings, GovernorVotesQuorumFraction, GovernorCountingFractional {",
          "11:     function proposalThreshold() public view override(Governor, GovernorSettings) returns (uint256) {",
          "12:         return super.proposalThreshold();",
          "13:     }",
          "14: }",
          "",
          "---------------"
        ],
        "contracts/mocks/governance/GovernorWithParamsMock.sol||contracts/mocks/governance/GovernorWithParamsMock.sol": [
          "File: contracts/mocks/governance/GovernorWithParamsMock.sol -> contracts/mocks/governance/GovernorWithParamsMock.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         uint8 support,",
          "42:         uint256 weight,",
          "43:         bytes memory params",
          "45:         if (params.length > 0) {",
          "46:             (uint256 _uintParam, string memory _strParam) = abi.decode(params, (uint256, string));",
          "47:             emit CountParams(_uintParam, _strParam);",
          "",
          "[Removed Lines]",
          "44:     ) internal override(Governor, GovernorCountingSimple) {",
          "",
          "[Added Lines]",
          "44:     ) internal override(Governor, GovernorCountingSimple) returns (uint256) {",
          "",
          "---------------"
        ],
        "test/governance/Governor.t.sol||test/governance/Governor.t.sol": [
          "File: test/governance/Governor.t.sol -> test/governance/Governor.t.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     function _getVotes(address, uint256, bytes memory) internal pure virtual override returns (uint256) {}",
          "55: }",
          "",
          "[Removed Lines]",
          "54:     function _countVote(uint256, address, uint8, uint256, bytes memory) internal virtual override {}",
          "",
          "[Added Lines]",
          "54:     function _countVote(uint256, address, uint8, uint256, bytes memory) internal virtual override returns (uint256) {}",
          "",
          "---------------"
        ],
        "test/governance/extensions/GovernorCountingFractional.test.js||test/governance/extensions/GovernorCountingFractional.test.js": [
          "File: test/governance/extensions/GovernorCountingFractional.test.js -> test/governance/extensions/GovernorCountingFractional.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const { ethers } = require('hardhat');",
          "2: const { expect } = require('chai');",
          "3: const { loadFixture } = require('@nomicfoundation/hardhat-network-helpers');",
          "5: const { GovernorHelper } = require('../../helpers/governance');",
          "6: const { VoteType } = require('../../helpers/enums');",
          "7: const { zip } = require('../../helpers/iterate');",
          "8: const { sum } = require('../../helpers/math');",
          "10: const TOKENS = [",
          "11:   { Token: '$ERC20Votes', mode: 'blocknumber' },",
          "12:   { Token: '$ERC20VotesTimestampMock', mode: 'timestamp' },",
          "13: ];",
          "15: const name = 'OZ-Governor';",
          "16: const version = '1';",
          "17: const tokenName = 'MockToken';",
          "18: const tokenSymbol = 'MTKN';",
          "19: const tokenSupply = ethers.parseEther('100');",
          "20: const votingDelay = 4n;",
          "21: const votingPeriod = 16n;",
          "22: const value = ethers.parseEther('1');",
          "24: describe('GovernorCountingFractional', function () {",
          "25:   for (const { Token, mode } of TOKENS) {",
          "26:     const fixture = async () => {",
          "27:       const [owner, proposer, voter1, voter2, voter3, voter4, other] = await ethers.getSigners();",
          "28:       const receiver = await ethers.deployContract('CallReceiverMock');",
          "30:       const token = await ethers.deployContract(Token, [tokenName, tokenSymbol, version]);",
          "31:       const mock = await ethers.deployContract('$GovernorFractionalMock', [",
          "32:         name, // name",
          "33:         votingDelay, // initialVotingDelay",
          "34:         votingPeriod, // initialVotingPeriod",
          "35:         0n, // initialProposalThreshold",
          "36:         token, // tokenAddress",
          "37:         10n, // quorumNumeratorValue",
          "38:       ]);",
          "40:       await owner.sendTransaction({ to: mock, value });",
          "41:       await token.$_mint(owner, tokenSupply);",
          "43:       const helper = new GovernorHelper(mock, mode);",
          "44:       await helper.connect(owner).delegate({ token, to: voter1, value: ethers.parseEther('10') });",
          "45:       await helper.connect(owner).delegate({ token, to: voter2, value: ethers.parseEther('7') });",
          "46:       await helper.connect(owner).delegate({ token, to: voter3, value: ethers.parseEther('5') });",
          "47:       await helper.connect(owner).delegate({ token, to: voter4, value: ethers.parseEther('2') });",
          "49:       return { owner, proposer, voter1, voter2, voter3, voter4, other, receiver, token, mock, helper };",
          "50:     };",
          "52:     describe(`using ${Token}`, function () {",
          "53:       beforeEach(async function () {",
          "54:         Object.assign(this, await loadFixture(fixture));",
          "57:         this.proposal = this.helper.setProposal(",
          "58:           [",
          "59:             {",
          "60:               target: this.receiver.target,",
          "61:               value,",
          "62:               data: this.receiver.interface.encodeFunctionData('mockFunction'),",
          "63:             },",
          "64:           ],",
          "65:           '<proposal description>',",
          "66:         );",
          "67:       });",
          "69:       it('deployment check', async function () {",
          "70:         expect(await this.mock.name()).to.equal(name);",
          "71:         expect(await this.mock.token()).to.equal(this.token);",
          "72:         expect(await this.mock.votingDelay()).to.equal(votingDelay);",
          "73:         expect(await this.mock.votingPeriod()).to.equal(votingPeriod);",
          "74:         expect(await this.mock.COUNTING_MODE()).to.equal(",
          "75:           'support=bravo,fractional&quorum=for,abstain&params=fractional',",
          "76:         );",
          "77:       });",
          "79:       it('nominal is unaffected', async function () {",
          "80:         await this.helper.connect(this.proposer).propose();",
          "81:         await this.helper.waitForSnapshot();",
          "82:         await this.helper.connect(this.voter1).vote({ support: VoteType.For, reason: 'This is nice' });",
          "83:         await this.helper.connect(this.voter2).vote({ support: VoteType.For });",
          "84:         await this.helper.connect(this.voter3).vote({ support: VoteType.Against });",
          "85:         await this.helper.connect(this.voter4).vote({ support: VoteType.Abstain });",
          "86:         await this.helper.waitForDeadline();",
          "87:         await this.helper.execute();",
          "89:         expect(await this.mock.hasVoted(this.proposal.id, this.owner)).to.be.false;",
          "90:         expect(await this.mock.hasVoted(this.proposal.id, this.voter1)).to.be.true;",
          "91:         expect(await this.mock.hasVoted(this.proposal.id, this.voter2)).to.be.true;",
          "92:         expect(await ethers.provider.getBalance(this.mock)).to.equal(0n);",
          "93:         expect(await ethers.provider.getBalance(this.receiver)).to.equal(value);",
          "94:       });",
          "96:       describe('voting with a fraction of the weight', function () {",
          "97:         it('twice', async function () {",
          "98:           await this.helper.connect(this.proposer).propose();",
          "99:           await this.helper.waitForSnapshot();",
          "101:           expect(await this.mock.proposalVotes(this.proposal.id)).to.deep.equal([0n, 0n, 0n]);",
          "102:           expect(await this.mock.hasVoted(this.proposal.id, this.voter2)).to.equal(false);",
          "103:           expect(await this.mock.usedVotes(this.proposal.id, this.voter2)).to.equal(0n);",
          "105:           const steps = [",
          "106:             ['0', '2', '1'],",
          "107:             ['1', '0', '1'],",
          "108:           ].map(votes => votes.map(vote => ethers.parseEther(vote)));",
          "110:           for (const votes of steps) {",
          "111:             const params = ethers.solidityPacked(['uint128', 'uint128', 'uint128'], votes);",
          "112:             await expect(",
          "113:               this.helper.connect(this.voter2).vote({",
          "114:                 support: VoteType.Parameters,",
          "115:                 reason: 'no particular reason',",
          "116:                 params,",
          "117:               }),",
          "118:             )",
          "119:               .to.emit(this.mock, 'VoteCastWithParams')",
          "120:               .withArgs(",
          "121:                 this.voter2,",
          "122:                 this.proposal.id,",
          "123:                 VoteType.Parameters,",
          "124:                 sum(...votes),",
          "125:                 'no particular reason',",
          "126:                 params,",
          "127:               );",
          "128:           }",
          "130:           expect(await this.mock.proposalVotes(this.proposal.id)).to.deep.equal(zip(...steps).map(v => sum(...v)));",
          "131:           expect(await this.mock.hasVoted(this.proposal.id, this.voter2)).to.equal(true);",
          "132:           expect(await this.mock.usedVotes(this.proposal.id, this.voter2)).to.equal(sum(...[].concat(...steps)));",
          "133:         });",
          "135:         it('fractional then nominal', async function () {",
          "136:           await this.helper.connect(this.proposer).propose();",
          "137:           await this.helper.waitForSnapshot();",
          "139:           expect(await this.mock.proposalVotes(this.proposal.id)).to.deep.equal([0n, 0n, 0n]);",
          "140:           expect(await this.mock.hasVoted(this.proposal.id, this.voter2)).to.equal(false);",
          "141:           expect(await this.mock.usedVotes(this.proposal.id, this.voter2)).to.equal(0n);",
          "143:           const weight = ethers.parseEther('7');",
          "144:           const fractional = ['1', '2', '1'].map(ethers.parseEther);",
          "146:           const params = ethers.solidityPacked(['uint128', 'uint128', 'uint128'], fractional);",
          "147:           await expect(",
          "148:             this.helper.connect(this.voter2).vote({",
          "149:               support: VoteType.Parameters,",
          "150:               reason: 'no particular reason',",
          "151:               params,",
          "152:             }),",
          "153:           )",
          "154:             .to.emit(this.mock, 'VoteCastWithParams')",
          "155:             .withArgs(",
          "156:               this.voter2,",
          "157:               this.proposal.id,",
          "158:               VoteType.Parameters,",
          "159:               sum(...fractional),",
          "160:               'no particular reason',",
          "161:               params,",
          "162:             );",
          "164:           await expect(this.helper.connect(this.voter2).vote({ support: VoteType.Against }))",
          "165:             .to.emit(this.mock, 'VoteCast')",
          "166:             .withArgs(this.voter2, this.proposal.id, VoteType.Against, weight - sum(...fractional), '');",
          "168:           expect(await this.mock.proposalVotes(this.proposal.id)).to.deep.equal([",
          "169:             weight - sum(...fractional.slice(1)),",
          "170:             ...fractional.slice(1),",
          "171:           ]);",
          "172:           expect(await this.mock.hasVoted(this.proposal.id, this.voter2)).to.equal(true);",
          "173:           expect(await this.mock.usedVotes(this.proposal.id, this.voter2)).to.equal(weight);",
          "174:         });",
          "176:         it('revert if params spend more than available', async function () {",
          "177:           await this.helper.connect(this.proposer).propose();",
          "178:           await this.helper.waitForSnapshot();",
          "180:           const weight = ethers.parseEther('7');",
          "181:           const fractional = ['0', '1000', '0'].map(ethers.parseEther);",
          "183:           await expect(",
          "184:             this.helper.connect(this.voter2).vote({",
          "185:               support: VoteType.Parameters,",
          "186:               reason: 'no particular reason',",
          "187:               params: ethers.solidityPacked(['uint128', 'uint128', 'uint128'], fractional),",
          "188:             }),",
          "189:           )",
          "190:             .to.be.revertedWithCustomError(this.mock, 'GovernorExceedRemainingWeight')",
          "191:             .withArgs(this.voter2, sum(...fractional), weight);",
          "192:         });",
          "194:         it('revert if no weight remaining', async function () {",
          "195:           await this.helper.connect(this.proposer).propose();",
          "196:           await this.helper.waitForSnapshot();",
          "197:           await this.helper.connect(this.voter2).vote({ support: VoteType.For });",
          "199:           await expect(",
          "200:             this.helper.connect(this.voter2).vote({",
          "201:               support: VoteType.Parameters,",
          "202:               reason: 'no particular reason',",
          "203:               params: ethers.solidityPacked(['uint128', 'uint128', 'uint128'], [0n, 1n, 0n]),",
          "204:             }),",
          "205:           )",
          "206:             .to.be.revertedWithCustomError(this.mock, 'GovernorAlreadyCastVote')",
          "207:             .withArgs(this.voter2);",
          "208:         });",
          "210:         it('revert if params are not properly formatted #1', async function () {",
          "211:           await this.helper.connect(this.proposer).propose();",
          "212:           await this.helper.waitForSnapshot();",
          "214:           await expect(",
          "215:             this.helper.connect(this.voter2).vote({",
          "216:               support: VoteType.Parameters,",
          "217:               reason: 'no particular reason',",
          "218:               params: ethers.solidityPacked(['uint128', 'uint128'], [0n, 1n]),",
          "219:             }),",
          "220:           ).to.be.revertedWithCustomError(this.mock, 'GovernorInvalidVoteParams');",
          "221:         });",
          "223:         it('revert if params are not properly formatted #2', async function () {",
          "224:           await this.helper.connect(this.proposer).propose();",
          "225:           await this.helper.waitForSnapshot();",
          "227:           await expect(",
          "228:             this.helper.connect(this.voter2).vote({",
          "229:               support: VoteType.Against,",
          "230:               reason: 'no particular reason',",
          "231:               params: ethers.solidityPacked(['uint128', 'uint128', 'uint128'], [0n, 1n, 0n]),",
          "232:             }),",
          "233:           ).to.be.revertedWithCustomError(this.mock, 'GovernorInvalidVoteParams');",
          "234:         });",
          "236:         it('revert if vote type is invalid', async function () {",
          "237:           await this.helper.connect(this.proposer).propose();",
          "238:           await this.helper.waitForSnapshot();",
          "240:           await expect(this.helper.connect(this.voter2).vote({ support: 128n })).to.be.revertedWithCustomError(",
          "241:             this.mock,",
          "242:             'GovernorInvalidVoteType',",
          "243:           );",
          "244:         });",
          "245:       });",
          "246:     });",
          "247:   }",
          "248: });",
          "",
          "---------------"
        ],
        "test/helpers/enums.js||test/helpers/enums.js": [
          "File: test/helpers/enums.js -> test/helpers/enums.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: module.exports = {",
          "6:   Enum,",
          "7:   ProposalState: Enum('Pending', 'Active', 'Canceled', 'Defeated', 'Succeeded', 'Queued', 'Expired', 'Executed'),",
          "9:   Rounding: Enum('Floor', 'Ceil', 'Trunc', 'Expand'),",
          "10:   OperationState: Enum('Unset', 'Waiting', 'Ready', 'Done'),",
          "11:   RevertType: Enum('None', 'RevertWithoutMessage', 'RevertWithMessage', 'RevertWithCustomError', 'Panic'),",
          "",
          "[Removed Lines]",
          "8:   VoteType: Enum('Against', 'For', 'Abstain'),",
          "",
          "[Added Lines]",
          "8:   VoteType: Object.assign(Enum('Against', 'For', 'Abstain'), { Parameters: 255n }),",
          "",
          "---------------"
        ]
      }
    }
  ]
}