{
  "cve_id": "CVE-2021-43846",
  "cve_desc": "`solidus_frontend` is the cart and storefront for the Solidus e-commerce project. Versions of `solidus_frontend` prior to 3.1.5, 3.0.5, and 2.11.14 contain a cross-site request forgery (CSRF) vulnerability that allows a malicious site to add an item to the user's cart without their knowledge. Versions 3.1.5, 3.0.5, and 2.11.14 contain a patch for this issue. The patch adds CSRF token verification to the \"Add to cart\" action. Adding forgery protection to a form that missed it can have some side effects. Other CSRF protection strategies as well as a workaround involving modifcation to config/application.rb` are available. More details on these mitigations are available in the GitHub Security Advisory.",
  "repo": "solidusio/solidus",
  "patch_hash": "4d17cacf066d9492fc04eb3a0b16084b47376d81",
  "patch_info": {
    "commit_hash": "4d17cacf066d9492fc04eb3a0b16084b47376d81",
    "repo": "solidusio/solidus",
    "commit_url": "https://github.com/solidusio/solidus/commit/4d17cacf066d9492fc04eb3a0b16084b47376d81",
    "files": [
      "frontend/app/controllers/spree/orders_controller.rb"
    ],
    "message": "Protect `Spree::OrdersController#populate` against CSRF attacks\n\nSee\nhttps://github.com/solidusio/solidus/security/advisories/GHSA-h3fg-h5v3-vf8m\nfor all the details.\n\nSome time ago, all order actions were left out of CSRF protection (see\n95ea57058ab1c5e722b327b10747cd41e68a4deb). The reason given was that the\nauthentication token got stale after the second rendering because the\nproduct page is cached. That was limited to `#populate` in\ncb797542c6948ef33d2cc9e6076c88f4cc927fb2 (see also\nhttps://github.com/spree/spree/pull/5601).\n\nHowever, those assumptions are not correct. Although the authenticity\ntoken changes at every request, that doesn't mean that the old ones are\nno longer valid. The variation comes from a one-time pad added to a\nsession-dependant token (and meant to avoid timing attacks). However,\nbefore validation, that one-time pad is removed. That means the token\nremains valid as long as the session has not been reset. Think about\nsubmitting a form from one browser tab after opening another with the\nsame URL. Even if both tokens differ, the submission from the first tab\nwill still be valid. You can read\nhttps://medium.com/rubyinside/a-deep-dive-into-csrf-protection-in-rails-19fa0a42c0ef\nfor an in-deep understanding.\n\nThe initial confusion could come because of\nhttps://github.com/rails/rails/issues/21948. Due to browser-side cache,\na form can be re-rendered and sent without any attached request cookie.\nThat will cause an authentication error, as the sent token won't match\nwith the one in the session (none in this case). There's no perfect\nsolution for that, and all partial fixes should be seen at the\napplication level. From our side, we must provide a safe default. For an\nexcellent survey of all the available options, take a look at\nhttps://github.com/betagouv/demarches-simplifiees.fr/blob/5b4f7f9ae9eaf0ac94008b62f7047e4714626cf9/doc/adr-csrf-forgery.md.\nThe information given in that link is third-party but it's very\nrelevant here. For that reason we've copied it in the security advisory\n(see link above), but all the credit goes to @kemenaran.",
    "before_after_code_files": [
      "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb"
    ]
  },
  "patch_diff": {
    "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb": [
      "File: frontend/app/controllers/spree/orders_controller.rb -> frontend/app/controllers/spree/orders_controller.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:     before_action :assign_order, only: :update",
      "11:     # note: do not lock the #edit action because that's where we redirect when we fail to acquire a lock",
      "12:     around_action :lock_order, only: :update",
      "15:     def show",
      "16:       @order = Spree::Order.find_by!(number: params[:id])",
      "",
      "[Removed Lines]",
      "13:     skip_before_action :verify_authenticity_token, only: [:populate]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a05d662243e8a8a922fd0c26e8a73d41412a5305",
      "candidate_info": {
        "commit_hash": "a05d662243e8a8a922fd0c26e8a73d41412a5305",
        "repo": "solidusio/solidus",
        "commit_url": "https://github.com/solidusio/solidus/commit/a05d662243e8a8a922fd0c26e8a73d41412a5305",
        "files": [
          "frontend/app/controllers/spree/orders_controller.rb"
        ],
        "message": "Protect `Spree::OrdersController#populate` against CSRF attacks\n\nSee\nhttps://github.com/solidusio/solidus/security/advisories/GHSA-h3fg-h5v3-vf8m\nfor all the details.\n\nSome time ago, all order actions were left out of CSRF protection (see\n95ea57058ab1c5e722b327b10747cd41e68a4deb). The reason given was that the\nauthentication token got stale after the second rendering because the\nproduct page is cached. That was limited to `#populate` in\ncb797542c6948ef33d2cc9e6076c88f4cc927fb2 (see also\nhttps://github.com/spree/spree/pull/5601).\n\nHowever, those assumptions are not correct. Although the authenticity\ntoken changes at every request, that doesn't mean that the old ones are\nno longer valid. The variation comes from a one-time pad added to a\nsession-dependant token (and meant to avoid timing attacks). However,\nbefore validation, that one-time pad is removed. That means the token\nremains valid as long as the session has not been reset. Think about\nsubmitting a form from one browser tab after opening another with the\nsame URL. Even if both tokens differ, the submission from the first tab\nwill still be valid. You can read\nhttps://medium.com/rubyinside/a-deep-dive-into-csrf-protection-in-rails-19fa0a42c0ef\nfor an in-deep understanding.\n\nThe initial confusion could come because of\nhttps://github.com/rails/rails/issues/21948. Due to browser-side cache,\na form can be re-rendered and sent without any attached request cookie.\nThat will cause an authentication error, as the sent token won't match\nwith the one in the session (none in this case). There's no perfect\nsolution for that, and all partial fixes should be seen at the\napplication level. From our side, we must provide a safe default. For an\nexcellent survey of all the available options, take a look at\nhttps://github.com/betagouv/demarches-simplifiees.fr/blob/5b4f7f9ae9eaf0ac94008b62f7047e4714626cf9/doc/adr-csrf-forgery.md.\nThe information given in that link is third-party but it's very\nrelevant here. For that reason we've copied it in the security advisory\n(see link above), but all the credit goes to @kemenaran.",
        "before_after_code_files": [
          "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb"
          ],
          "candidate": [
            "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb"
          ]
        }
      },
      "candidate_diff": {
        "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb": [
          "File: frontend/app/controllers/spree/orders_controller.rb -> frontend/app/controllers/spree/orders_controller.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     before_action :assign_order, only: :update",
          "11:     # note: do not lock the #edit action because that's where we redirect when we fail to acquire a lock",
          "12:     around_action :lock_order, only: :update",
          "15:     def show",
          "16:       @order = Spree::Order.find_by!(number: params[:id])",
          "",
          "[Removed Lines]",
          "13:     skip_before_action :verify_authenticity_token, only: [:populate]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c65b9a6e7d8eb7c8548c6a1b6bea55bcc36e53a",
      "candidate_info": {
        "commit_hash": "1c65b9a6e7d8eb7c8548c6a1b6bea55bcc36e53a",
        "repo": "solidusio/solidus",
        "commit_url": "https://github.com/solidusio/solidus/commit/1c65b9a6e7d8eb7c8548c6a1b6bea55bcc36e53a",
        "files": [
          "frontend/app/controllers/spree/orders_controller.rb"
        ],
        "message": "Protect `Spree::OrdersController#populate` against CSRF attacks\n\nSee\nhttps://github.com/solidusio/solidus/security/advisories/GHSA-h3fg-h5v3-vf8m\nfor all the details.\n\nSome time ago, all order actions were left out of CSRF protection (see\n95ea57058ab1c5e722b327b10747cd41e68a4deb). The reason given was that the\nauthentication token got stale after the second rendering because the\nproduct page is cached. That was limited to `#populate` in\ncb797542c6948ef33d2cc9e6076c88f4cc927fb2 (see also\nhttps://github.com/spree/spree/pull/5601).\n\nHowever, those assumptions are not correct. Although the authenticity\ntoken changes at every request, that doesn't mean that the old ones are\nno longer valid. The variation comes from a one-time pad added to a\nsession-dependant token (and meant to avoid timing attacks). However,\nbefore validation, that one-time pad is removed. That means the token\nremains valid as long as the session has not been reset. Think about\nsubmitting a form from one browser tab after opening another with the\nsame URL. Even if both tokens differ, the submission from the first tab\nwill still be valid. You can read\nhttps://medium.com/rubyinside/a-deep-dive-into-csrf-protection-in-rails-19fa0a42c0ef\nfor an in-deep understanding.\n\nThe initial confusion could come because of\nhttps://github.com/rails/rails/issues/21948. Due to browser-side cache,\na form can be re-rendered and sent without any attached request cookie.\nThat will cause an authentication error, as the sent token won't match\nwith the one in the session (none in this case). There's no perfect\nsolution for that, and all partial fixes should be seen at the\napplication level. From our side, we must provide a safe default. For an\nexcellent survey of all the available options, take a look at\nhttps://github.com/betagouv/demarches-simplifiees.fr/blob/5b4f7f9ae9eaf0ac94008b62f7047e4714626cf9/doc/adr-csrf-forgery.md.\nThe information given in that link is third-party but it's very\nrelevant here. For that reason we've copied it in the security advisory\n(see link above), but all the credit goes to @kemenaran.",
        "before_after_code_files": [
          "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb"
          ],
          "candidate": [
            "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb"
          ]
        }
      },
      "candidate_diff": {
        "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb": [
          "File: frontend/app/controllers/spree/orders_controller.rb -> frontend/app/controllers/spree/orders_controller.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     before_action :assign_order, only: :update",
          "11:     # note: do not lock the #edit action because that's where we redirect when we fail to acquire a lock",
          "12:     around_action :lock_order, only: :update",
          "15:     def show",
          "16:       @order = Spree::Order.find_by!(number: params[:id])",
          "",
          "[Removed Lines]",
          "13:     skip_before_action :verify_authenticity_token, only: [:populate]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03b2a7a1c1a09b8c21a5e215a14a5c33273a0f12",
      "candidate_info": {
        "commit_hash": "03b2a7a1c1a09b8c21a5e215a14a5c33273a0f12",
        "repo": "solidusio/solidus",
        "commit_url": "https://github.com/solidusio/solidus/commit/03b2a7a1c1a09b8c21a5e215a14a5c33273a0f12",
        "files": [
          "frontend/app/controllers/spree/orders_controller.rb"
        ],
        "message": "Protect `Spree::OrdersController#populate` against CSRF attacks\n\nSee\nhttps://github.com/solidusio/solidus/security/advisories/GHSA-h3fg-h5v3-vf8m\nfor all the details.\n\nSome time ago, all order actions were left out of CSRF protection (see\n95ea57058ab1c5e722b327b10747cd41e68a4deb). The reason given was that the\nauthentication token got stale after the second rendering because the\nproduct page is cached. That was limited to `#populate` in\ncb797542c6948ef33d2cc9e6076c88f4cc927fb2 (see also\nhttps://github.com/spree/spree/pull/5601).\n\nHowever, those assumptions are not correct. Although the authenticity\ntoken changes at every request, that doesn't mean that the old ones are\nno longer valid. The variation comes from a one-time pad added to a\nsession-dependant token (and meant to avoid timing attacks). However,\nbefore validation, that one-time pad is removed. That means the token\nremains valid as long as the session has not been reset. Think about\nsubmitting a form from one browser tab after opening another with the\nsame URL. Even if both tokens differ, the submission from the first tab\nwill still be valid. You can read\nhttps://medium.com/rubyinside/a-deep-dive-into-csrf-protection-in-rails-19fa0a42c0ef\nfor an in-deep understanding.\n\nThe initial confusion could come because of\nhttps://github.com/rails/rails/issues/21948. Due to browser-side cache,\na form can be re-rendered and sent without any attached request cookie.\nThat will cause an authentication error, as the sent token won't match\nwith the one in the session (none in this case). There's no perfect\nsolution for that, and all partial fixes should be seen at the\napplication level. From our side, we must provide a safe default. For an\nexcellent survey of all the available options, take a look at\nhttps://github.com/betagouv/demarches-simplifiees.fr/blob/5b4f7f9ae9eaf0ac94008b62f7047e4714626cf9/doc/adr-csrf-forgery.md.\nThe information given in that link is third-party but it's very\nrelevant here. For that reason we've copied it in the security advisory\n(see link above), but all the credit goes to @kemenaran.",
        "before_after_code_files": [
          "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb"
          ],
          "candidate": [
            "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb"
          ]
        }
      },
      "candidate_diff": {
        "frontend/app/controllers/spree/orders_controller.rb||frontend/app/controllers/spree/orders_controller.rb": [
          "File: frontend/app/controllers/spree/orders_controller.rb -> frontend/app/controllers/spree/orders_controller.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     # note: do not lock the #edit action because that's where we redirect when we fail to acquire a lock",
          "12:     around_action :lock_order, only: :update",
          "13:     before_action :apply_coupon_code, only: :update",
          "16:     def show",
          "17:       @order = Spree::Order.find_by!(number: params[:id])",
          "",
          "[Removed Lines]",
          "14:     skip_before_action :verify_authenticity_token, only: [:populate]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}