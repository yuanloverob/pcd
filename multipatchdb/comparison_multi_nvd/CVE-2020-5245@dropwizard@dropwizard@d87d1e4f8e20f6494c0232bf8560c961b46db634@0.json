{
  "cve_id": "CVE-2020-5245",
  "cve_desc": "Dropwizard-Validation before 1.3.19, and 2.0.2 may allow arbitrary code execution on the host system, with the privileges of the Dropwizard service account, by injecting arbitrary Java Expression Language expressions when using the self-validating feature.\n\nThe issue has been fixed in dropwizard-validation 1.3.19 and 2.0.2.",
  "repo": "dropwizard/dropwizard",
  "patch_hash": "d87d1e4f8e20f6494c0232bf8560c961b46db634",
  "patch_info": {
    "commit_hash": "d87d1e4f8e20f6494c0232bf8560c961b46db634",
    "repo": "dropwizard/dropwizard",
    "commit_url": "https://github.com/dropwizard/dropwizard/commit/d87d1e4f8e20f6494c0232bf8560c961b46db634",
    "files": [
      "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
      "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java"
    ],
    "message": "Escape EL expressions in ViolationCollector (#3157)\n\nFixes #3153",
    "before_after_code_files": [
      "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
      "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java||dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java"
    ]
  },
  "patch_diff": {
    "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java": [
      "File: dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java -> dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package io.dropwizard.validation.selfvalidating;",
      "3: import javax.validation.ConstraintValidatorContext;",
      "9: public class ViolationCollector {",
      "11:     private boolean violationOccurred = false;",
      "12:     private ConstraintValidatorContext context;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import javax.annotation.Nullable;",
      "5: import java.util.regex.Matcher;",
      "6: import java.util.regex.Pattern;",
      "13:     private static final Pattern ESCAPE_PATTERN = Pattern.compile(\"\\\\$\\\\{\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:     }",
      "25:         violationOccurred = true;",
      "28:     }",
      "",
      "[Removed Lines]",
      "24:     public void addViolation(String msg) {",
      "26:         context.buildConstraintViolationWithTemplate(msg)",
      "27:             .addConstraintViolation();",
      "",
      "[Added Lines]",
      "28:     public void addViolation(String message) {",
      "30:         String messageTemplate = escapeEl(message);",
      "31:         context.buildConstraintViolationWithTemplate(messageTemplate)",
      "32:                 .addConstraintViolation();",
      "33:     }",
      "42:     public void addViolation(String propertyName, String message) {",
      "43:         violationOccurred = true;",
      "44:         String messageTemplate = escapeEl(message);",
      "45:         context.buildConstraintViolationWithTemplate(messageTemplate)",
      "46:                 .addPropertyNode(propertyName)",
      "47:                 .addConstraintViolation();",
      "48:     }",
      "58:     public void addViolation(String propertyName, Integer index, String message) {",
      "59:         violationOccurred = true;",
      "60:         String messageTemplate = escapeEl(message);",
      "61:         context.buildConstraintViolationWithTemplate(messageTemplate)",
      "62:                 .addPropertyNode(propertyName)",
      "63:                 .addBeanNode().inIterable().atIndex(index)",
      "64:                 .addConstraintViolation();",
      "65:     }",
      "75:     public void addViolation(String propertyName, String key, String message) {",
      "76:         violationOccurred = true;",
      "77:         String messageTemplate = escapeEl(message);",
      "78:         context.buildConstraintViolationWithTemplate(messageTemplate)",
      "79:                 .addPropertyNode(propertyName)",
      "80:                 .addBeanNode().inIterable().atKey(key)",
      "81:                 .addConstraintViolation();",
      "82:     }",
      "84:     @Nullable",
      "85:     private String escapeEl(@Nullable String s) {",
      "86:         if (s == null || s.isEmpty()) {",
      "87:             return s;",
      "88:         }",
      "90:         final Matcher m = ESCAPE_PATTERN.matcher(s);",
      "91:         final StringBuffer sb = new StringBuffer(s.length() + 16);",
      "92:         while (m.find()) {",
      "93:             m.appendReplacement(sb, \"\\\\\\\\\\\\${\");",
      "94:         }",
      "95:         m.appendTail(sb);",
      "97:         return sb.toString();",
      "",
      "---------------"
    ],
    "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java||dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java": [
      "File: dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java -> dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package io.dropwizard.validation;",
      "12: import io.dropwizard.validation.selfvalidating.SelfValidating;",
      "13: import io.dropwizard.validation.selfvalidating.SelfValidation;",
      "14: import io.dropwizard.validation.selfvalidating.ViolationCollector;",
      "15: import uk.org.lidalia.slf4jext.Level;",
      "16: import uk.org.lidalia.slf4jtest.LoggingEvent;",
      "17: import uk.org.lidalia.slf4jtest.TestLoggerFactory;",
      "19: @NotThreadSafe",
      "20: public class SelfValidationTest {",
      "22:     private static final String FAILED = \"failed\";",
      "23:     private static final String FAILED_RESULT = \" \" + FAILED;",
      "26:     public void clearAllLoggers() {",
      "28:         TestLoggerFactory.clearAll();",
      "",
      "[Removed Lines]",
      "3: import static org.assertj.core.api.Assertions.assertThat;",
      "5: import javax.annotation.concurrent.NotThreadSafe;",
      "6: import javax.validation.Validator;",
      "8: import org.junit.jupiter.api.AfterEach;",
      "9: import org.junit.jupiter.api.BeforeEach;",
      "10: import org.junit.jupiter.api.Test;",
      "25:     @BeforeEach @AfterEach",
      "",
      "[Added Lines]",
      "6: import org.junit.jupiter.api.AfterEach;",
      "7: import org.junit.jupiter.api.BeforeEach;",
      "8: import org.junit.jupiter.api.Test;",
      "13: import javax.annotation.concurrent.NotThreadSafe;",
      "14: import javax.validation.Validator;",
      "16: import static org.assertj.core.api.Assertions.assertThat;",
      "24:     @AfterEach",
      "25:     @BeforeEach",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     @SelfValidating",
      "32:     public static class FailingExample {",
      "33:         @SelfValidation",
      "34:         public void validateFail(ViolationCollector col) {",
      "35:             col.addViolation(FAILED);",
      "36:         }",
      "37:     }",
      "39:     public static class SubclassExample extends FailingExample {",
      "40:         @SelfValidation",
      "41:         public void subValidateFail(ViolationCollector col) {",
      "44:     }",
      "46:     @SelfValidating",
      "47:     public static class AnnotatedSubclassExample extends FailingExample {",
      "48:         @SelfValidation",
      "49:         public void subValidateFail(ViolationCollector col) {",
      "52:     }",
      "54:     public static class OverridingExample extends FailingExample {",
      "55:         @Override",
      "56:         public void validateFail(ViolationCollector col) {",
      "58:     }",
      "60:     @SelfValidating",
      "61:     public static class DirectContextExample {",
      "62:         @SelfValidation",
      "63:         public void validateFail(ViolationCollector col) {",
      "64:             col.getContext().buildConstraintViolationWithTemplate(FAILED).addConstraintViolation();",
      "",
      "[Removed Lines]",
      "42:             col.addViolation(FAILED+\"subclass\");",
      "43:         }",
      "50:             col.addViolation(FAILED+\"subclass\");",
      "51:         }",
      "57:         }",
      "",
      "[Added Lines]",
      "33:         @SuppressWarnings(\"unused\")",
      "41:         @SuppressWarnings(\"unused\")",
      "44:             col.addViolation(FAILED + \"subclass\");",
      "45:         }",
      "50:         @SuppressWarnings(\"unused\")",
      "53:             col.addViolation(FAILED + \"subclass\");",
      "54:         }",
      "60:         }",
      "65:         @SuppressWarnings(\"unused\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "103:     @SelfValidating",
      "104:     public static class ComplexExample {",
      "105:         @SelfValidation",
      "106:         public void validateFail1(ViolationCollector col) {",
      "107:             col.addViolation(FAILED + \"1\");",
      "108:         }",
      "110:         @SelfValidation",
      "111:         public void validateFail2(ViolationCollector col) {",
      "113:         }",
      "115:         @SelfValidation",
      "116:         public void validateFail3(ViolationCollector col) {",
      "118:         }",
      "120:         @SuppressWarnings(\"unused\")",
      "",
      "[Removed Lines]",
      "112:             col.addViolation(FAILED + \"2\");",
      "117:             col.addViolation(FAILED + \"3\");",
      "",
      "[Added Lines]",
      "109:         @SuppressWarnings(\"unused\")",
      "115:         @SuppressWarnings(\"unused\")",
      "118:             col.addViolation(\"p2\", FAILED);",
      "121:         @SuppressWarnings(\"unused\")",
      "124:             col.addViolation(\"p\", 3, FAILED);",
      "125:         }",
      "127:         @SuppressWarnings(\"unused\")",
      "128:         @SelfValidation",
      "129:         public void validateFail4(ViolationCollector col) {",
      "130:             col.addViolation(\"p\", \"four\", FAILED);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "127:     public static class NoValidations {",
      "128:     }",
      "130:     private final Validator validator = BaseValidator.newValidator();",
      "132:     @Test",
      "134:         assertThat(ConstraintViolations.format(validator.validate(new FailingExample())))",
      "136:         assertThat(TestLoggerFactory.getAllLoggingEvents())",
      "138:     }",
      "140:     @Test",
      "142:         assertThat(ConstraintViolations.format(validator.validate(new SubclassExample())))",
      "147:         assertThat(TestLoggerFactory.getAllLoggingEvents())",
      "149:     }",
      "151:     @Test",
      "153:         assertThat(ConstraintViolations.format(validator.validate(new AnnotatedSubclassExample())))",
      "158:         assertThat(TestLoggerFactory.getAllLoggingEvents())",
      "160:     }",
      "162:     @Test",
      "164:         assertThat(ConstraintViolations.format(validator.validate(new OverridingExample())))",
      "166:         assertThat(TestLoggerFactory.getAllLoggingEvents())",
      "168:     }",
      "170:     @Test",
      "172:         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))",
      "174:         assertThat(TestLoggerFactory.getAllLoggingEvents())",
      "176:     }",
      "178:     @Test",
      "180:         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))",
      "182:         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))",
      "184:         assertThat(TestLoggerFactory.getAllLoggingEvents())",
      "186:     }",
      "188:     @Test",
      "190:         assertThat(ConstraintViolations.format(validator.validate(new DirectContextExample())))",
      "192:         assertThat(TestLoggerFactory.getAllLoggingEvents())",
      "194:     }",
      "196:     @Test",
      "198:         assertThat(ConstraintViolations.format(validator.validate(new ComplexExample())))",
      "204:         assertThat(TestLoggerFactory.getAllLoggingEvents())",
      "206:     }",
      "208:     @Test",
      "209:     public void invalidExample() throws Exception {",
      "210:         assertThat(ConstraintViolations.format(validator.validate(new InvalidExample())))",
      "212:         assertThat(TestLoggerFactory.getAllLoggingEvents())",
      "231:     }",
      "233:     @Test",
      "235:         assertThat(ConstraintViolations.format(validator.validate(new NoValidations())))",
      "237:         assertThat(TestLoggerFactory.getAllLoggingEvents())",
      "245:         );",
      "246:     }",
      "247: }",
      "",
      "[Removed Lines]",
      "133:     public void failingExample() throws Exception {",
      "135:             .containsExactlyInAnyOrder(FAILED_RESULT);",
      "137:             .isEmpty();",
      "141:     public void subClassExample() throws Exception {",
      "143:             .containsExactlyInAnyOrder(",
      "144:                     FAILED_RESULT,",
      "145:                     FAILED_RESULT+\"subclass\"",
      "146:             );",
      "148:             .isEmpty();",
      "152:     public void annotatedSubClassExample() throws Exception {",
      "154:             .containsExactlyInAnyOrder(",
      "155:                     FAILED_RESULT,",
      "156:                     FAILED_RESULT+\"subclass\"",
      "157:             );",
      "159:             .isEmpty();",
      "163:     public void overridingSubClassExample() throws Exception {",
      "165:             .isEmpty();",
      "167:             .isEmpty();",
      "171:     public void correctExample() throws Exception {",
      "173:             .isEmpty();",
      "175:             .isEmpty();",
      "179:     public void multipleTestingOfSameClass() throws Exception {",
      "181:             .isEmpty();",
      "183:             .isEmpty();",
      "185:             .isEmpty();",
      "189:     public void testDirectContextUsage() throws Exception {",
      "191:             .containsExactlyInAnyOrder(FAILED_RESULT);",
      "193:             .isEmpty();",
      "197:     public void complexExample() throws Exception {",
      "199:             .containsExactlyInAnyOrder(",
      "200:                 FAILED_RESULT + \"1\",",
      "201:                 FAILED_RESULT + \"2\",",
      "202:                 FAILED_RESULT + \"3\"",
      "203:             );",
      "205:             .isEmpty();",
      "211:             .isEmpty();",
      "213:             .containsExactlyInAnyOrder(",
      "214:                     new LoggingEvent(",
      "215:                             Level.ERROR,",
      "216:                             \"The method {} is annotated with @SelfValidation but does not have a single parameter of type {}\",",
      "217:                             InvalidExample.class.getMethod(\"validateFailAdditionalParameters\", ViolationCollector.class, int.class),",
      "218:                             ViolationCollector.class",
      "219:                     ),",
      "220:                     new LoggingEvent(",
      "221:                             Level.ERROR,",
      "222:                             \"The method {} is annotated with @SelfValidation but does not return void. It is ignored\",",
      "223:                             InvalidExample.class.getMethod(\"validateFailReturn\", ViolationCollector.class)",
      "224:                     ),",
      "225:                     new LoggingEvent(",
      "226:                             Level.ERROR,",
      "227:                             \"The method {} is annotated with @SelfValidation but is not public\",",
      "228:                             InvalidExample.class.getDeclaredMethod(\"validateFailPrivate\", ViolationCollector.class)",
      "229:                     )",
      "230:             );",
      "234:     public void giveWarningIfNoValidationMethods() throws Exception {",
      "236:             .isEmpty();",
      "238:         .containsExactlyInAnyOrder(",
      "239:                 new LoggingEvent(",
      "240:                         Level.WARN,",
      "241:                         \"The class {} is annotated with @SelfValidating but contains no valid methods that are annotated with @SelfValidation\",",
      "242:                         NoValidations.class",
      "243:                 )",
      "",
      "[Added Lines]",
      "143:     @SelfValidating",
      "144:     public static class InjectionExample {",
      "145:         @SuppressWarnings(\"unused\")",
      "146:         @SelfValidation",
      "147:         public void validateFail(ViolationCollector col) {",
      "148:             col.addViolation(\"${'value'}\");",
      "149:             col.addViolation(\"${'property'}\", \"${'value'}\");",
      "150:             col.addViolation(\"${'property'}\", 1, \"${'value'}\");",
      "151:             col.addViolation(\"${'property'}\", \"${'key'}\", \"${'value'}\");",
      "152:         }",
      "153:     }",
      "158:     public void failingExample() {",
      "160:                 .containsExactlyInAnyOrder(FAILED_RESULT);",
      "162:                 .isEmpty();",
      "166:     public void subClassExample() {",
      "168:                 .containsExactlyInAnyOrder(",
      "169:                         FAILED_RESULT,",
      "170:                         FAILED_RESULT + \"subclass\"",
      "171:                 );",
      "173:                 .isEmpty();",
      "177:     public void annotatedSubClassExample() {",
      "179:                 .containsExactlyInAnyOrder(",
      "180:                         FAILED_RESULT,",
      "181:                         FAILED_RESULT + \"subclass\"",
      "182:                 );",
      "184:                 .isEmpty();",
      "188:     public void overridingSubClassExample() {",
      "190:                 .isEmpty();",
      "192:                 .isEmpty();",
      "196:     public void correctExample() {",
      "198:                 .isEmpty();",
      "200:                 .isEmpty();",
      "204:     public void multipleTestingOfSameClass() {",
      "206:                 .isEmpty();",
      "208:                 .isEmpty();",
      "210:                 .isEmpty();",
      "214:     public void testDirectContextUsage() {",
      "216:                 .containsExactlyInAnyOrder(FAILED_RESULT);",
      "218:                 .isEmpty();",
      "222:     public void complexExample() {",
      "224:                 .containsExactly(",
      "225:                         \" failed1\",",
      "226:                         \"p2 failed\",",
      "227:                         \"p[3] failed\",",
      "228:                         \"p[four] failed\");",
      "230:                 .isEmpty();",
      "236:                 .isEmpty();",
      "238:                 .containsExactlyInAnyOrder(",
      "239:                         new LoggingEvent(",
      "240:                                 Level.ERROR,",
      "241:                                 \"The method {} is annotated with @SelfValidation but does not have a single parameter of type {}\",",
      "242:                                 InvalidExample.class.getMethod(\"validateFailAdditionalParameters\", ViolationCollector.class, int.class),",
      "243:                                 ViolationCollector.class",
      "244:                         ),",
      "245:                         new LoggingEvent(",
      "246:                                 Level.ERROR,",
      "247:                                 \"The method {} is annotated with @SelfValidation but does not return void. It is ignored\",",
      "248:                                 InvalidExample.class.getMethod(\"validateFailReturn\", ViolationCollector.class)",
      "249:                         ),",
      "250:                         new LoggingEvent(",
      "251:                                 Level.ERROR,",
      "252:                                 \"The method {} is annotated with @SelfValidation but is not public\",",
      "253:                                 InvalidExample.class.getDeclaredMethod(\"validateFailPrivate\", ViolationCollector.class)",
      "254:                         )",
      "255:                 );",
      "259:     public void giveWarningIfNoValidationMethods() {",
      "261:                 .isEmpty();",
      "263:                 .containsExactlyInAnyOrder(",
      "264:                         new LoggingEvent(",
      "265:                                 Level.WARN,",
      "266:                                 \"The class {} is annotated with @SelfValidating but contains no valid methods that are annotated with @SelfValidation\",",
      "267:                                 NoValidations.class",
      "268:                         )",
      "270:                 );",
      "271:     }",
      "273:     @Test",
      "274:     public void violationMessagesAreEscaped() {",
      "275:         assertThat(ConstraintViolations.format(validator.validate(new InjectionExample()))).containsExactly(",
      "276:                 \" ${'value'}\",",
      "277:                 \"${'property'} ${'value'}\",",
      "278:                 \"${'property'}[${'key'}] ${'value'}\",",
      "279:                 \"${'property'}[1] ${'value'}\"",
      "281:         assertThat(TestLoggerFactory.getAllLoggingEvents()).isEmpty();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "28479f743a9d0aab6d0e963fc07f3dd98e8c8236",
      "candidate_info": {
        "commit_hash": "28479f743a9d0aab6d0e963fc07f3dd98e8c8236",
        "repo": "dropwizard/dropwizard",
        "commit_url": "https://github.com/dropwizard/dropwizard/commit/28479f743a9d0aab6d0e963fc07f3dd98e8c8236",
        "files": [
          "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
          "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java"
        ],
        "message": "Escape EL expressions in ViolationCollector (#3160)\n\nFixes #3153\nRefs #3157\n(cherry picked from commit d87d1e4f8e20f6494c0232bf8560c961b46db634)",
        "before_after_code_files": [
          "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
          "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java||dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
            "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java||dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java"
          ],
          "candidate": [
            "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
            "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java||dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java": [
          "File: dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java -> dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package io.dropwizard.validation.selfvalidating;",
          "3: import javax.validation.ConstraintValidatorContext;",
          "9: public class ViolationCollector {",
          "11:     private boolean violationOccurred = false;",
          "12:     private ConstraintValidatorContext context;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import javax.annotation.Nullable;",
          "5: import java.util.regex.Matcher;",
          "6: import java.util.regex.Pattern;",
          "13:     private static final Pattern ESCAPE_PATTERN = Pattern.compile(\"\\\\$\\\\{\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     }",
          "25:         violationOccurred = true;",
          "28:     }",
          "",
          "[Removed Lines]",
          "24:     public void addViolation(String msg) {",
          "26:         context.buildConstraintViolationWithTemplate(msg)",
          "27:             .addConstraintViolation();",
          "",
          "[Added Lines]",
          "28:     public void addViolation(String message) {",
          "30:         String messageTemplate = escapeEl(message);",
          "31:         context.buildConstraintViolationWithTemplate(messageTemplate)",
          "32:                 .addConstraintViolation();",
          "33:     }",
          "42:     public void addViolation(String propertyName, String message) {",
          "43:         violationOccurred = true;",
          "44:         String messageTemplate = escapeEl(message);",
          "45:         context.buildConstraintViolationWithTemplate(messageTemplate)",
          "46:                 .addPropertyNode(propertyName)",
          "47:                 .addConstraintViolation();",
          "48:     }",
          "58:     public void addViolation(String propertyName, Integer index, String message) {",
          "59:         violationOccurred = true;",
          "60:         String messageTemplate = escapeEl(message);",
          "61:         context.buildConstraintViolationWithTemplate(messageTemplate)",
          "62:                 .addPropertyNode(propertyName)",
          "63:                 .addBeanNode().inIterable().atIndex(index)",
          "64:                 .addConstraintViolation();",
          "65:     }",
          "75:     public void addViolation(String propertyName, String key, String message) {",
          "76:         violationOccurred = true;",
          "77:         String messageTemplate = escapeEl(message);",
          "78:         context.buildConstraintViolationWithTemplate(messageTemplate)",
          "79:                 .addPropertyNode(propertyName)",
          "80:                 .addBeanNode().inIterable().atKey(key)",
          "81:                 .addConstraintViolation();",
          "82:     }",
          "84:     @Nullable",
          "85:     private String escapeEl(@Nullable String s) {",
          "86:         if (s == null || s.isEmpty()) {",
          "87:             return s;",
          "88:         }",
          "90:         final Matcher m = ESCAPE_PATTERN.matcher(s);",
          "91:         final StringBuffer sb = new StringBuffer(s.length() + 16);",
          "92:         while (m.find()) {",
          "93:             m.appendReplacement(sb, \"\\\\\\\\\\\\${\");",
          "94:         }",
          "95:         m.appendTail(sb);",
          "97:         return sb.toString();",
          "",
          "---------------"
        ],
        "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java||dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java": [
          "File: dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java -> dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import static org.assertj.core.api.Assertions.assertThat;",
          "12: public class SelfValidationTest {",
          "14:     private static final String FAILED = \"failed\";",
          "16:     @SelfValidating",
          "17:     public static class FailingExample {",
          "18:         @SelfValidation",
          "19:         public void validateFail(ViolationCollector col) {",
          "20:             col.addViolation(FAILED);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:         @SuppressWarnings(\"unused\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     @SelfValidating",
          "25:     public static class DirectContextExample {",
          "26:         @SelfValidation",
          "27:         public void validateFail(ViolationCollector col) {",
          "28:             col.getContext().buildConstraintViolationWithTemplate(FAILED).addConstraintViolation();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:         @SuppressWarnings(\"unused\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:             col.addViolation(FAILED);",
          "52:         }",
          "54:         @SelfValidation",
          "55:         public boolean validateFailReturn(ViolationCollector col) {",
          "56:             col.addViolation(FAILED);",
          "57:             return true;",
          "58:         }",
          "60:         @SelfValidation",
          "61:         private void validateFailPrivate(ViolationCollector col) {",
          "62:             col.addViolation(FAILED);",
          "63:         }",
          "64:     }",
          "67:     @SelfValidating",
          "68:     public static class ComplexExample {",
          "69:         @SelfValidation",
          "70:         public void validateFail1(ViolationCollector col) {",
          "71:             col.addViolation(FAILED + \"1\");",
          "72:         }",
          "74:         @SelfValidation",
          "75:         public void validateFail2(ViolationCollector col) {",
          "77:         }",
          "79:         @SelfValidation",
          "80:         public void validateFail3(ViolationCollector col) {",
          "82:         }",
          "84:         @SuppressWarnings(\"unused\")",
          "",
          "[Removed Lines]",
          "76:             col.addViolation(FAILED + \"2\");",
          "81:             col.addViolation(FAILED + \"3\");",
          "",
          "[Added Lines]",
          "55:         @SuppressWarnings(\"unused\")",
          "62:         @SuppressWarnings(\"unused\")",
          "71:         @SuppressWarnings(\"unused\")",
          "77:         @SuppressWarnings(\"unused\")",
          "80:             col.addViolation(\"p2\", FAILED);",
          "83:         @SuppressWarnings(\"unused\")",
          "86:             col.addViolation(\"p\", 3, FAILED);",
          "87:         }",
          "89:         @SuppressWarnings(\"unused\")",
          "90:         @SelfValidation",
          "91:         public void validateFail4(ViolationCollector col) {",
          "92:             col.addViolation(\"p\", \"four\", FAILED);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:     public static class NoValidations {",
          "92:     }",
          "94:     private final Validator validator = BaseValidator.newValidator();",
          "96:     @Test",
          "98:         assertThat(ConstraintViolations.format(validator.validate(new FailingExample())))",
          "99:             .containsOnly(\" \" + FAILED);",
          "100:     }",
          "102:     @Test",
          "104:         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))",
          "105:             .isEmpty();",
          "106:     }",
          "108:     @Test",
          "110:         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))",
          "112:         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))",
          "113:             .isEmpty();",
          "114:     }",
          "116:     @Test",
          "118:         assertThat(ConstraintViolations.format(validator.validate(new DirectContextExample())))",
          "119:             .containsOnly(\" \" + FAILED);",
          "120:     }",
          "122:     @Test",
          "124:         assertThat(ConstraintViolations.format(validator.validate(new ComplexExample())))",
          "130:     }",
          "132:     @Test",
          "",
          "[Removed Lines]",
          "97:     public void failingExample() throws Exception {",
          "103:     public void correctExample() throws Exception {",
          "109:     public void multipleTestingOfSameClass() throws Exception {",
          "111:             .isEmpty();",
          "117:     public void testDirectContextUsage() throws Exception {",
          "123:     public void complexExample() throws Exception {",
          "125:             .containsOnly(",
          "126:                 \" \" + FAILED + \"1\",",
          "127:                 \" \" + FAILED + \"2\",",
          "128:                 \" \" + FAILED + \"3\"",
          "129:             );",
          "",
          "[Added Lines]",
          "105:     @SelfValidating",
          "106:     public static class InjectionExample {",
          "107:         @SuppressWarnings(\"unused\")",
          "108:         @SelfValidation",
          "109:         public void validateFail(ViolationCollector col) {",
          "110:             col.addViolation(\"${'value'}\");",
          "111:             col.addViolation(\"${'property'}\", \"${'value'}\");",
          "112:             col.addViolation(\"${'property'}\", 1, \"${'value'}\");",
          "113:             col.addViolation(\"${'property'}\", \"${'key'}\", \"${'value'}\");",
          "114:         }",
          "115:     }",
          "120:     public void failingExample() {",
          "126:     public void correctExample() {",
          "132:     public void multipleTestingOfSameClass() {",
          "134:                 .isEmpty();",
          "140:     public void testDirectContextUsage() {",
          "146:     public void complexExample() {",
          "148:                 .containsExactly(",
          "149:                         \" failed1\",",
          "150:                         \"p2 failed\",",
          "151:                         \"p[3] failed\",",
          "152:                         \"p[four] failed\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:     }",
          "138:     @Test",
          "140:         assertThat(ConstraintViolations.format(validator.validate(new NoValidations())))",
          "141:             .isEmpty();",
          "142:     }",
          "143: }",
          "",
          "[Removed Lines]",
          "139:     public void giveWarningIfNoValidationMethods() throws Exception {",
          "",
          "[Added Lines]",
          "162:     public void giveWarningIfNoValidationMethods() {",
          "167:     @Test",
          "168:     public void violationMessagesAreEscaped() {",
          "169:         assertThat(ConstraintViolations.format(validator.validate(new InjectionExample()))).containsExactly(",
          "170:                 \" ${'value'}\",",
          "171:                 \"${'property'} ${'value'}\",",
          "172:                 \"${'property'}[${'key'}] ${'value'}\",",
          "173:                 \"${'property'}[1] ${'value'}\"",
          "174:         );",
          "175:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5a512f7abf965275f2a6b913ac4fe778e424242",
      "candidate_info": {
        "commit_hash": "d5a512f7abf965275f2a6b913ac4fe778e424242",
        "repo": "dropwizard/dropwizard",
        "commit_url": "https://github.com/dropwizard/dropwizard/commit/d5a512f7abf965275f2a6b913ac4fe778e424242",
        "files": [
          "dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java",
          "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java",
          "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java",
          "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
          "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java"
        ],
        "message": "Disable message interpolation in ConstraintViolations by default (#3208)\n\nDisable message interpolation in ConstraintViolations by default but allow enabling it explicitly with `SelfValidating#escapeExpressions()`.\n\nAdditionally, `ConstraintViolations` now provides a set of methods which take a map of message parameters for interpolation.\nThe message parameters will be escaped by default.\n\nRefs #3153\nRefs #3157",
        "before_after_code_files": [
          "dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java||dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java",
          "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java",
          "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java",
          "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
          "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java||dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
            "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java||dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java"
          ],
          "candidate": [
            "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
            "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java||dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java||dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java": [
          "File: dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java -> dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: package io.dropwizard.validation;",
          "9: import javax.annotation.Nullable;",
          "10: import java.util.regex.Matcher;",
          "11: import java.util.regex.Pattern;",
          "19: public final class InterpolationHelper {",
          "21:     public static final char BEGIN_TERM = '{';",
          "22:     public static final char END_TERM = '}';",
          "23:     public static final char EL_DESIGNATOR = '$';",
          "24:     public static final char ESCAPE_CHARACTER = '\\\\';",
          "26:     private static final Pattern ESCAPE_MESSAGE_PARAMETER_PATTERN = Pattern.compile(\"([\\\\\" + ESCAPE_CHARACTER + BEGIN_TERM + END_TERM + EL_DESIGNATOR + \"])\");",
          "28:     private InterpolationHelper() {",
          "29:     }",
          "31:     @Nullable",
          "32:     public static String escapeMessageParameter(@Nullable String messageParameter) {",
          "33:         if (messageParameter == null) {",
          "34:             return null;",
          "35:         }",
          "36:         return ESCAPE_MESSAGE_PARAMETER_PATTERN.matcher(messageParameter).replaceAll(Matcher.quoteReplacement(String.valueOf(ESCAPE_CHARACTER)) + \"$1\");",
          "37:     }",
          "38: }",
          "",
          "---------------"
        ],
        "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java": [
          "File: dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java -> dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import java.lang.annotation.Retention;",
          "8: import java.lang.annotation.RetentionPolicy;",
          "9: import java.lang.annotation.Target;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     Class<?>[] groups() default {};",
          "26:     Class<? extends Payload>[] payload() default {};",
          "27: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     boolean escapeExpressions() default true;",
          "",
          "---------------"
        ],
        "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java": [
          "File: dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java -> dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     private final AnnotationConfiguration annotationConfiguration = new AnnotationConfiguration.StdConfiguration(AnnotationInclusion.INCLUDE_AND_INHERIT_IF_INHERITED);",
          "32:     private final TypeResolver typeResolver = new TypeResolver();",
          "33:     private final MemberResolver memberResolver = new MemberResolver(typeResolver);",
          "35:     @Override",
          "36:     public void initialize(SelfValidating constraintAnnotation) {",
          "37:     }",
          "39:     @SuppressWarnings({\"unchecked\", \"rawtypes\"})",
          "40:     @Override",
          "41:     public boolean isValid(Object value, ConstraintValidatorContext context) {",
          "43:         context.disableDefaultConstraintViolation();",
          "44:         for (ValidationCaller caller : methodMap.computeIfAbsent(value.getClass(), this::findMethods)) {",
          "45:             caller.setValidationObject(value);",
          "",
          "[Removed Lines]",
          "42:         final ViolationCollector collector = new ViolationCollector(context);",
          "",
          "[Added Lines]",
          "34:     private boolean escapeExpressions = true;",
          "38:         escapeExpressions = constraintAnnotation.escapeExpressions();",
          "44:         final ViolationCollector collector = new ViolationCollector(context, escapeExpressions);",
          "",
          "---------------"
        ],
        "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java||dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java": [
          "File: dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java -> dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package io.dropwizard.validation.selfvalidating;",
          "3: import javax.annotation.Nullable;",
          "4: import javax.validation.ConstraintValidatorContext;",
          "12: public class ViolationCollector {",
          "15:     private boolean violationOccurred = false;",
          "21:     }",
          "28:     public void addViolation(String message) {",
          "29:         violationOccurred = true;",
          "32:                 .addConstraintViolation();",
          "33:     }",
          "42:     public void addViolation(String propertyName, String message) {",
          "43:         violationOccurred = true;",
          "46:                 .addPropertyNode(propertyName)",
          "47:                 .addConstraintViolation();",
          "48:     }",
          "58:     public void addViolation(String propertyName, Integer index, String message) {",
          "59:         violationOccurred = true;",
          "62:                 .addPropertyNode(propertyName)",
          "63:                 .addBeanNode().inIterable().atIndex(index)",
          "64:                 .addConstraintViolation();",
          "",
          "[Removed Lines]",
          "5: import java.util.regex.Matcher;",
          "6: import java.util.regex.Pattern;",
          "13:     private static final Pattern ESCAPE_PATTERN = Pattern.compile(\"\\\\$\\\\{\");",
          "16:     private ConstraintValidatorContext context;",
          "19:     public ViolationCollector(ConstraintValidatorContext context) {",
          "20:         this.context = context;",
          "30:         String messageTemplate = escapeEl(message);",
          "31:         context.buildConstraintViolationWithTemplate(messageTemplate)",
          "44:         String messageTemplate = escapeEl(message);",
          "45:         context.buildConstraintViolationWithTemplate(messageTemplate)",
          "60:         String messageTemplate = escapeEl(message);",
          "61:         context.buildConstraintViolationWithTemplate(messageTemplate)",
          "",
          "[Added Lines]",
          "3: import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorContext;",
          "7: import java.util.Collections;",
          "8: import java.util.Map;",
          "10: import static io.dropwizard.validation.InterpolationHelper.escapeMessageParameter;",
          "17:     private final ConstraintValidatorContext constraintValidatorContext;",
          "18:     private final boolean escapeExpressions;",
          "22:     public ViolationCollector(ConstraintValidatorContext constraintValidatorContext) {",
          "23:         this(constraintValidatorContext, true);",
          "24:     }",
          "26:     public ViolationCollector(ConstraintValidatorContext constraintValidatorContext, boolean escapeExpressions) {",
          "27:         this.constraintValidatorContext = constraintValidatorContext;",
          "28:         this.escapeExpressions = escapeExpressions;",
          "40:         addViolation(message, Collections.emptyMap());",
          "41:     }",
          "50:     public void addViolation(String message, Map<String, Object> messageParameters) {",
          "52:         getContextWithMessageParameters(messageParameters)",
          "53:                 .buildConstraintViolationWithTemplate(sanitizeTemplate(message))",
          "68:         addViolation(propertyName, message, Collections.emptyMap());",
          "69:     }",
          "79:     public void addViolation(String propertyName, String message, Map<String, Object> messageParameters) {",
          "81:         getContextWithMessageParameters(messageParameters)",
          "82:                 .buildConstraintViolationWithTemplate(sanitizeTemplate(message))",
          "98:         addViolation(propertyName, index, message, Collections.emptyMap());",
          "99:     }",
          "110:     public void addViolation(String propertyName, Integer index, String message, Map<String, Object> messageParameters) {",
          "112:         getContextWithMessageParameters(messageParameters)",
          "113:                 .buildConstraintViolationWithTemplate(sanitizeTemplate(message))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     public void addViolation(String propertyName, String key, String message) {",
          "76:         violationOccurred = true;",
          "78:         context.buildConstraintViolationWithTemplate(messageTemplate)",
          "79:                 .addPropertyNode(propertyName)",
          "80:                 .addBeanNode().inIterable().atKey(key)",
          "81:                 .addConstraintViolation();",
          "82:     }",
          "94:         }",
          "98:     }",
          "",
          "[Removed Lines]",
          "77:         String messageTemplate = escapeEl(message);",
          "84:     @Nullable",
          "85:     private String escapeEl(@Nullable String s) {",
          "86:         if (s == null || s.isEmpty()) {",
          "87:             return s;",
          "88:         }",
          "90:         final Matcher m = ESCAPE_PATTERN.matcher(s);",
          "91:         final StringBuffer sb = new StringBuffer(s.length() + 16);",
          "92:         while (m.find()) {",
          "93:             m.appendReplacement(sb, \"\\\\\\\\\\\\${\");",
          "95:         m.appendTail(sb);",
          "97:         return sb.toString();",
          "",
          "[Added Lines]",
          "128:         addViolation(propertyName, key, message, Collections.emptyMap());",
          "129:     }",
          "140:     public void addViolation(String propertyName, String key, String message, Map<String, Object> messageParameters) {",
          "142:         final String messageTemplate = sanitizeTemplate(message);",
          "143:         final HibernateConstraintValidatorContext context = getContextWithMessageParameters(messageParameters);",
          "150:     private HibernateConstraintValidatorContext getContextWithMessageParameters(Map<String, Object> messageParameters) {",
          "151:         final HibernateConstraintValidatorContext context =",
          "152:                 constraintValidatorContext.unwrap(HibernateConstraintValidatorContext.class);",
          "153:         for (Map.Entry<String, Object> messageParameter : messageParameters.entrySet()) {",
          "154:             final Object value = messageParameter.getValue();",
          "155:             final String escapedValue = value == null ? null : escapeMessageParameter(value.toString());",
          "156:             context.addMessageParameter(messageParameter.getKey(), escapedValue);",
          "158:         return context;",
          "159:     }",
          "161:     @Nullable",
          "162:     private String sanitizeTemplate(@Nullable String message) {",
          "163:         return escapeExpressions ? escapeMessageParameter(message) : message;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:     public ConstraintValidatorContext getContext() {",
          "108:     }",
          "",
          "[Removed Lines]",
          "107:         return context;",
          "",
          "[Added Lines]",
          "173:         return constraintValidatorContext;",
          "",
          "---------------"
        ],
        "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java||dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java": [
          "File: dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java -> dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package io.dropwizard.validation;",
          "3: import io.dropwizard.validation.selfvalidating.SelfValidating;",
          "4: import io.dropwizard.validation.selfvalidating.SelfValidation;",
          "5: import io.dropwizard.validation.selfvalidating.ViolationCollector;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import io.dropwizard.util.Maps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: import javax.annotation.concurrent.NotThreadSafe;",
          "14: import javax.validation.Validator;",
          "16: import static org.assertj.core.api.Assertions.assertThat;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "146:         @SelfValidation",
          "147:         public void validateFail(ViolationCollector col) {",
          "148:             col.addViolation(\"${'value'}\");",
          "149:             col.addViolation(\"${'property'}\", \"${'value'}\");",
          "150:             col.addViolation(\"${'property'}\", 1, \"${'value'}\");",
          "151:             col.addViolation(\"${'property'}\", \"${'key'}\", \"${'value'}\");",
          "152:         }",
          "153:     }",
          "155:     private final Validator validator = BaseValidator.newValidator();",
          "157:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:             col.addViolation(\"$\\\\A{1+1}\");",
          "152:             col.addViolation(\"{value}\", Collections.singletonMap(\"value\", \"TEST\"));",
          "159:     @SelfValidating(escapeExpressions = false)",
          "160:     public static class EscapingDisabledExample {",
          "161:         @SuppressWarnings(\"unused\")",
          "162:         @SelfValidation",
          "163:         public void validateFail(ViolationCollector col) {",
          "164:             col.addViolation(\"${'value'}\");",
          "165:             col.addViolation(\"$\\\\A{1+1}\");",
          "166:             col.addViolation(\"{value}\", Collections.singletonMap(\"value\", \"TEST\"));",
          "167:             col.addViolation(\"${'property'}\", \"${'value'}\");",
          "168:             col.addViolation(\"${'property'}\", 1, \"${'value'}\");",
          "169:             col.addViolation(\"${'property'}\", \"${'key'}\", \"${'value'}\");",
          "170:         }",
          "171:     }",
          "173:     @SelfValidating(escapeExpressions = false)",
          "174:     public static class MessageParametersExample {",
          "175:         @SuppressWarnings(\"unused\")",
          "176:         @SelfValidation",
          "177:         public void validateFail(ViolationCollector col) {",
          "178:             col.addViolation(\"{1+1}\");",
          "179:             col.addViolation(\"{value}\", Collections.singletonMap(\"value\", \"VALUE\"));",
          "180:             col.addViolation(\"No parameter\", Collections.singletonMap(\"value\", \"VALUE\"));",
          "181:             col.addViolation(\"{value} {unsetParameter}\", Collections.singletonMap(\"value\", \"VALUE\"));",
          "182:             col.addViolation(\"{value\", Collections.singletonMap(\"value\", \"VALUE\"));",
          "183:             col.addViolation(\"value}\", Collections.singletonMap(\"value\", \"VALUE\"));",
          "184:             col.addViolation(\"{  value  }\", Collections.singletonMap(\"value\", \"VALUE\"));",
          "185:             col.addViolation(\"Mixed ${'value'} {value}\", Collections.singletonMap(\"value\", \"VALUE\"));",
          "186:             col.addViolation(\"Nested {value}\", Collections.singletonMap(\"value\", \"${'nested'}\"));",
          "187:             col.addViolation(\"{property}\", \"{value}\", Maps.of(\"property\", \"PROPERTY\", \"value\", \"VALUE\"));",
          "188:             col.addViolation(\"{property}\", 1, \"{value}\", Maps.of(\"property\", \"PROPERTY\", \"value\", \"VALUE\"));",
          "189:             col.addViolation(\"{property}\", \"{key}\", \"{value}\", Maps.of(\"property\", \"PROPERTY\", \"key\", \"KEY\", \"value\", \"VALUE\"));",
          "190:         }",
          "191:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "271:     }",
          "273:     @Test",
          "275:         assertThat(ConstraintViolations.format(validator.validate(new InjectionExample()))).containsExactly(",
          "276:                 \" ${'value'}\",",
          "277:                 \"${'property'} ${'value'}\",",
          "278:                 \"${'property'}[${'key'}] ${'value'}\",",
          "279:                 \"${'property'}[1] ${'value'}\"",
          "280:         );",
          "281:         assertThat(TestLoggerFactory.getAllLoggingEvents()).isEmpty();",
          "282:     }",
          "283: }",
          "",
          "[Removed Lines]",
          "274:     public void violationMessagesAreEscaped() {",
          "",
          "[Added Lines]",
          "312:     public void violationMessagesAreEscapedByDefault() {",
          "314:                 \" $\\\\A{1+1}\",",
          "316:                 \" {value}\",",
          "324:     @Test",
          "325:     public void violationMessagesAreInterpolatedIfEscapingDisabled() {",
          "326:         assertThat(ConstraintViolations.format(validator.validate(new EscapingDisabledExample()))).containsExactly(",
          "327:                 \" A2\",",
          "328:                 \" TEST\",",
          "329:                 \" value\",",
          "330:                 \"${'property'} value\",",
          "331:                 \"${'property'}[${'key'}] value\",",
          "332:                 \"${'property'}[1] value\"",
          "333:         );",
          "334:         assertThat(TestLoggerFactory.getAllLoggingEvents()).isEmpty();",
          "335:     }",
          "337:     @Test",
          "338:     public void messageParametersExample() {",
          "339:         assertThat(ConstraintViolations.format(validator.validate(new MessageParametersExample()))).containsExactly(",
          "340:                 \" Mixed value VALUE\",",
          "341:                 \" Nested ${'nested'}\",",
          "342:                 \" No parameter\",",
          "343:                 \" VALUE\",",
          "344:                 \" VALUE {unsetParameter}\",",
          "345:                 \" value}\",",
          "346:                 \" {  value  }\",",
          "347:                 \" {1+1}\",",
          "348:                 \" {value\",",
          "349:                 \"{property} VALUE\",",
          "350:                 \"{property}[1] VALUE\",",
          "351:                 \"{property}[{key}] VALUE\"",
          "352:         );",
          "353:         assertThat(TestLoggerFactory.getAllLoggingEvents()).isEmpty();",
          "354:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}