{
  "cve_id": "CVE-2023-26144",
  "cve_desc": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
  "repo": "graphql/graphql-js",
  "patch_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
  "patch_info": {
    "commit_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
    "repo": "graphql/graphql-js",
    "commit_url": "https://github.com/graphql/graphql-js/commit/f94b511386c7e47bd0380dcd56553dc063320226",
    "files": [
      "benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ],
    "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3958)\n\nCo-authored-by: AaronMoat <AaronMoat@users.noreply.github.com>\nCo-authored-by: Ivan Goncharov <ivan.goncharov.ua@gmail.com>\nResolves https://github.com/graphql/graphql-js/issues/3955 (at least",
    "before_after_code_files": [
      "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ]
  },
  "patch_diff": {
    "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
      "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { graphqlSync } from 'graphql/graphql.js';",
      "2: import { buildSchema } from 'graphql/utilities/buildASTSchema.js';",
      "4: const schema = buildSchema('type Query { hello: String! }');",
      "5: const source = `{ ${'hello '.repeat(250)}}`;",
      "7: export const benchmark = {",
      "8:   name: 'Many repeated fields',",
      "9:   count: 5,",
      "10:   measure() {",
      "11:     graphqlSync({ schema, source });",
      "12:   },",
      "13: };",
      "",
      "---------------"
    ],
    "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts": [
      "File: src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts -> src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "179:     ]);",
      "180:   });",
      "182:   it('mix of stream and no stream', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:   it('different stream directive extra argument', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "185:         name @stream(label: \"streamLabel\", initialCount: 1)",
      "186:         name @stream(label: \"streamLabel\", initialCount: 1, extraArg: true)",
      "187:       }",
      "188:     `).toDeepEqual([",
      "189:       {",
      "190:         message:",
      "191:           'Fields \"name\" conflict because they have differing stream directives. Use different aliases on the fields to fetch both if this was intentional.',",
      "192:         locations: [",
      "193:           { line: 3, column: 9 },",
      "194:           { line: 4, column: 9 },",
      "195:         ],",
      "196:       },",
      "197:     ]);",
      "198:   });",
      "",
      "---------------"
    ],
    "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
      "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   DirectiveNode,",
      "8:   FieldNode,",
      "9:   FragmentDefinitionNode,",
      "11:   SelectionSetNode,",
      "12: } from '../../language/ast.js';",
      "13: import { Kind } from '../../language/kinds.js';",
      "14: import { print } from '../../language/printer.js';",
      "",
      "[Removed Lines]",
      "10:   ObjectValueNode,",
      "",
      "[Added Lines]",
      "11:   ValueNode,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "592:     }",
      "596:       return [",
      "597:         [responseName, 'they have differing arguments'],",
      "598:         [node1],",
      "",
      "[Removed Lines]",
      "595:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
      "",
      "[Added Lines]",
      "595:     if (!sameArguments(node1, node2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "649:   }",
      "650: }",
      "665: }",
      "667: function getStreamDirective(",
      "",
      "[Removed Lines]",
      "652: function stringifyArguments(fieldNode: FieldNode | DirectiveNode): string {",
      "654:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
      "656:   const inputObjectWithArgs: ObjectValueNode = {",
      "657:     kind: Kind.OBJECT,",
      "658:     fields: args.map((argNode) => ({",
      "659:       kind: Kind.OBJECT_FIELD,",
      "660:       name: argNode.name,",
      "661:       value: argNode.value,",
      "662:     })),",
      "663:   };",
      "664:   return print(sortValueNode(inputObjectWithArgs));",
      "",
      "[Added Lines]",
      "652: function sameArguments(",
      "653:   node1: FieldNode | DirectiveNode,",
      "654:   node2: FieldNode | DirectiveNode,",
      "655: ): boolean {",
      "656:   const args1 = node1.arguments;",
      "657:   const args2 = node2.arguments;",
      "659:   if (args1 === undefined || args1.length === 0) {",
      "660:     return args2 === undefined || args2.length === 0;",
      "661:   }",
      "662:   if (args2 === undefined || args2.length === 0) {",
      "663:     return false;",
      "664:   }",
      "666:   if (args1.length !== args2.length) {",
      "667:     return false;",
      "668:   }",
      "670:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
      "671:   return args1.every((arg1) => {",
      "672:     const value1 = arg1.value;",
      "673:     const value2 = values2.get(arg1.name.value);",
      "674:     if (value2 === undefined) {",
      "675:       return false;",
      "676:     }",
      "678:     return stringifyValue(value1) === stringifyValue(value2);",
      "679:   });",
      "680: }",
      "682: function stringifyValue(value: ValueNode): string | null {",
      "683:   return print(sortValueNode(value));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "681:     return true;",
      "682:   } else if (stream1 && stream2) {",
      "685:   }",
      "687:   return false;",
      "",
      "[Removed Lines]",
      "684:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
      "",
      "[Added Lines]",
      "703:     return sameArguments(stream1, stream2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "36e59f445588948b2108e514e19ef475f2591fca",
      "candidate_info": {
        "commit_hash": "36e59f445588948b2108e514e19ef475f2591fca",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/36e59f445588948b2108e514e19ef475f2591fca",
        "files": [
          "src/type/__tests__/validation-test.ts",
          "src/type/validate.ts"
        ],
        "message": "Require non-empty directive locations (#4100)",
        "before_after_code_files": [
          "src/type/__tests__/validation-test.ts||src/type/__tests__/validation-test.ts",
          "src/type/validate.ts||src/type/validate.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/type/__tests__/validation-test.ts||src/type/__tests__/validation-test.ts": [
          "File: src/type/__tests__/validation-test.ts -> src/type/__tests__/validation-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:       },",
          "432:     ]);",
          "433:   });",
          "434: });",
          "436: describe('Type System: Root types must all be different if provided', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:   it('rejects a Schema whose directives have empty locations', () => {",
          "436:     const badDirective = new GraphQLDirective({",
          "437:       name: 'BadDirective',",
          "438:       args: {},",
          "439:       locations: [],",
          "440:     });",
          "441:     const schema = new GraphQLSchema({",
          "442:       query: SomeObjectType,",
          "443:       directives: [badDirective],",
          "444:     });",
          "445:     expectJSON(validateSchema(schema)).toDeepEqual([",
          "446:       {",
          "447:         message: 'Directive @BadDirective must include 1 or more locations.',",
          "448:       },",
          "449:     ]);",
          "450:   });",
          "",
          "---------------"
        ],
        "src/type/validate.ts||src/type/validate.ts": [
          "File: src/type/validate.ts -> src/type/validate.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:     validateName(context, directive);",
          "189:     for (const arg of directive.args) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:     if (directive.locations.length === 0) {",
          "187:       context.reportError(",
          "188:         `Directive @${directive.name} must include 1 or more locations.`,",
          "189:         directive.astNode,",
          "190:       );",
          "191:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92f9bb0888151f0c3929b38da05557bd79b5e843",
      "candidate_info": {
        "commit_hash": "92f9bb0888151f0c3929b38da05557bd79b5e843",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/92f9bb0888151f0c3929b38da05557bd79b5e843",
        "files": [
          "src/execution/IncrementalPublisher.ts",
          "src/execution/execute.ts"
        ],
        "message": "perf: use undefined for empty (#4046)\n\nAs convention, we will lazily instantiate arrays/sets when adding the first item.\n\nThis applies to arrays/sets on execution/incremental context, as well as the second member of the GraphQLWrappedResult tuple holding the array of incremental data records.",
        "before_after_code_files": [
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts",
          "src/execution/execute.ts||src/execution/execute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { isPromise } from '../jsutils/isPromise.js';",
          "2: import type { ObjMap } from '../jsutils/ObjMap.js';",
          "3: import type { Path } from '../jsutils/Path.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { invariant } from '../jsutils/invariant.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172: export function buildIncrementalResponse(",
          "173:   context: IncrementalPublisherContext,",
          "174:   result: ObjMap<unknown>,",
          "176:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "177: ): ExperimentalIncrementalExecutionResults {",
          "178:   const incrementalPublisher = new IncrementalPublisher(context);",
          "",
          "[Removed Lines]",
          "175:   errors: ReadonlyArray<GraphQLError>,",
          "",
          "[Added Lines]",
          "176:   errors: ReadonlyArray<GraphQLError> | undefined,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184: }",
          "186: interface IncrementalPublisherContext {",
          "188: }",
          "",
          "[Removed Lines]",
          "187:   cancellableStreams: Set<CancellableStreamRecord>;",
          "",
          "[Added Lines]",
          "188:   cancellableStreams: Set<CancellableStreamRecord> | undefined;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "219:   buildResponse(",
          "220:     data: ObjMap<unknown>,",
          "222:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "223:   ): ExperimentalIncrementalExecutionResults {",
          "224:     this._addIncrementalDataRecords(incrementalDataRecords);",
          "",
          "[Removed Lines]",
          "221:     errors: ReadonlyArray<GraphQLError>,",
          "",
          "[Added Lines]",
          "222:     errors: ReadonlyArray<GraphQLError> | undefined,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "227:     const pending = this._pendingSourcesToResults();",
          "229:     const initialResult: InitialIncrementalExecutionResult =",
          "231:         ? { data, pending, hasNext: true }",
          "232:         : { errors, data, pending, hasNext: true };",
          "",
          "[Removed Lines]",
          "230:       errors.length === 0",
          "",
          "[Added Lines]",
          "231:       errors === undefined",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "444:     };",
          "446:     const returnStreamIterators = async (): Promise<void> => {",
          "447:       const promises: Array<Promise<unknown>> = [];",
          "449:         if (streamRecord.earlyReturn !== undefined) {",
          "450:           promises.push(streamRecord.earlyReturn());",
          "451:         }",
          "",
          "[Removed Lines]",
          "448:       for (const streamRecord of this._context.cancellableStreams) {",
          "",
          "[Added Lines]",
          "448:       const cancellableStreams = this._context.cancellableStreams;",
          "449:       if (cancellableStreams === undefined) {",
          "450:         return;",
          "451:       }",
          "453:       for (const streamRecord of cancellableStreams) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "519:       );",
          "520:     }",
          "526:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult.deferredFragmentRecords) {",
          "527:       const id = deferredFragmentRecord.id;",
          "",
          "[Removed Lines]",
          "522:     this._addIncrementalDataRecords(",
          "523:       deferredGroupedFieldSetResult.incrementalDataRecords,",
          "524:     );",
          "",
          "[Added Lines]",
          "527:     const incrementalDataRecords =",
          "528:       deferredGroupedFieldSetResult.incrementalDataRecords;",
          "529:     if (incrementalDataRecords !== undefined) {",
          "530:       this._addIncrementalDataRecords(incrementalDataRecords);",
          "531:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "587:       });",
          "588:       this._pending.delete(streamRecord);",
          "589:       if (isCancellableStreamRecord(streamRecord)) {",
          "590:         this._context.cancellableStreams.delete(streamRecord);",
          "591:         streamRecord.earlyReturn().catch(() => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:         invariant(this._context.cancellableStreams !== undefined);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "597:       this._completed.push({ id });",
          "598:       this._pending.delete(streamRecord);",
          "599:       if (isCancellableStreamRecord(streamRecord)) {",
          "600:         this._context.cancellableStreams.delete(streamRecord);",
          "601:       }",
          "602:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "608:         invariant(this._context.cancellableStreams !== undefined);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "608:       this._incremental.push(incrementalEntry);",
          "611:         this._addIncrementalDataRecords(",
          "612:           streamItemsResult.incrementalDataRecords,",
          "613:         );",
          "",
          "[Removed Lines]",
          "610:       if (streamItemsResult.incrementalDataRecords.length > 0) {",
          "",
          "[Added Lines]",
          "619:       if (streamItemsResult.incrementalDataRecords !== undefined) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "675:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "676:   path: Array<string | number>;",
          "677:   result: BareDeferredGroupedFieldSetResult;",
          "679:   sent?: true | undefined;",
          "680:   errors?: never;",
          "681: }",
          "",
          "[Removed Lines]",
          "678:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>;",
          "",
          "[Added Lines]",
          "687:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "743: interface ReconcilableStreamItemsResult {",
          "744:   streamRecord: SubsequentResultRecord;",
          "745:   result: BareStreamItemsResult;",
          "747:   errors?: never;",
          "748: }",
          "",
          "[Removed Lines]",
          "746:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>;",
          "",
          "[Added Lines]",
          "755:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:   fieldResolver: GraphQLFieldResolver<any, any>;",
          "143:   typeResolver: GraphQLTypeResolver<any, any>;",
          "144:   subscribeFieldResolver: GraphQLFieldResolver<any, any>;",
          "147: }",
          "149: interface IncrementalContext {",
          "151:   deferUsageSet?: DeferUsageSet | undefined;",
          "152: }",
          "",
          "[Removed Lines]",
          "145:   errors: Array<GraphQLError>;",
          "146:   cancellableStreams: Set<CancellableStreamRecord>;",
          "150:   errors: Array<GraphQLError>;",
          "",
          "[Added Lines]",
          "145:   errors: Array<GraphQLError> | undefined;",
          "146:   cancellableStreams: Set<CancellableStreamRecord> | undefined;",
          "150:   errors: Array<GraphQLError> | undefined;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:   fieldGroup: FieldGroup;",
          "170: }",
          "174: const UNEXPECTED_EXPERIMENTAL_DIRECTIVES =",
          "175:   'The provided schema unexpectedly contains experimental directives (@defer or @stream). These directives may only be utilized if experimental execution features are explicitly enabled.';",
          "",
          "[Removed Lines]",
          "172: type GraphQLWrappedResult<T> = [T, Array<IncrementalDataRecord>];",
          "",
          "[Added Lines]",
          "172: type GraphQLWrappedResult<T> = [T, Array<IncrementalDataRecord> | undefined];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "353: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "354:   if (isPromise(result)) {",
          "355:     return result.then((resolved) => {",
          "357:       return resolved;",
          "358:     });",
          "359:   }",
          "362:   return result;",
          "363: }",
          "365: function withError(",
          "367:   error: GraphQLError,",
          "368: ): ReadonlyArray<GraphQLError> {",
          "370: }",
          "372: function buildDataResponse(",
          "373:   exeContext: ExecutionContext,",
          "374:   data: ObjMap<unknown>,",
          "376: ): ExecutionResult | ExperimentalIncrementalExecutionResults {",
          "377:   const errors = exeContext.errors;",
          "380:   }",
          "382:   return buildIncrementalResponse(",
          "",
          "[Removed Lines]",
          "356:       resolved[1].push(...newDeferredGroupedFieldSetRecords);",
          "361:   result[1].push(...newDeferredGroupedFieldSetRecords);",
          "366:   errors: Array<GraphQLError>,",
          "369:   return errors.length === 0 ? [error] : [...errors, error];",
          "375:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "378:   if (incrementalDataRecords.length === 0) {",
          "379:     return errors.length > 0 ? { errors, data } : { data };",
          "",
          "[Added Lines]",
          "356:       addIncrementalDataRecords(resolved, newDeferredGroupedFieldSetRecords);",
          "361:   addIncrementalDataRecords(result, newDeferredGroupedFieldSetRecords);",
          "365: function addIncrementalDataRecords(",
          "366:   graphqlWrappedResult: GraphQLWrappedResult<unknown>,",
          "367:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined,",
          "368: ): void {",
          "369:   if (incrementalDataRecords === undefined) {",
          "370:     return;",
          "371:   }",
          "372:   if (graphqlWrappedResult[1] === undefined) {",
          "373:     graphqlWrappedResult[1] = [...incrementalDataRecords];",
          "374:   } else {",
          "375:     graphqlWrappedResult[1].push(...incrementalDataRecords);",
          "376:   }",
          "377: }",
          "380:   errors: Array<GraphQLError> | undefined,",
          "383:   return errors === undefined ? [error] : [...errors, error];",
          "389:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined,",
          "392:   if (incrementalDataRecords === undefined) {",
          "393:     return errors !== undefined ? { errors, data } : { data };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "488:     fieldResolver: fieldResolver ?? defaultFieldResolver,",
          "489:     typeResolver: typeResolver ?? defaultTypeResolver,",
          "490:     subscribeFieldResolver: subscribeFieldResolver ?? defaultFieldResolver,",
          "493:   };",
          "494: }",
          "",
          "[Removed Lines]",
          "491:     errors: [],",
          "492:     cancellableStreams: new Set(),",
          "",
          "[Added Lines]",
          "505:     errors: undefined,",
          "506:     cancellableStreams: undefined,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "499: ): ExecutionContext {",
          "500:   return {",
          "501:     ...exeContext,",
          "503:     rootValue: payload,",
          "504:   };",
          "505: }",
          "",
          "[Removed Lines]",
          "502:     errors: [],",
          "",
          "[Added Lines]",
          "517:     errors: undefined,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "580:       if (isPromise(result)) {",
          "581:         return result.then((resolved) => {",
          "582:           graphqlWrappedResult[0][responseName] = resolved[0];",
          "584:           return graphqlWrappedResult;",
          "585:         });",
          "586:       }",
          "587:       graphqlWrappedResult[0][responseName] = result[0];",
          "589:       return graphqlWrappedResult;",
          "590:     },",
          "592:   );",
          "593: }",
          "",
          "[Removed Lines]",
          "583:           graphqlWrappedResult[1].push(...resolved[1]);",
          "588:       graphqlWrappedResult[1].push(...result[1]);",
          "591:     [Object.create(null), []] as GraphQLWrappedResult<ObjMap<unknown>>,",
          "",
          "[Added Lines]",
          "597:           addIncrementalDataRecords(graphqlWrappedResult, resolved[1]);",
          "602:       addIncrementalDataRecords(graphqlWrappedResult, result[1]);",
          "605:     [Object.create(null), undefined] as GraphQLWrappedResult<ObjMap<unknown>>,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "608:   const results = Object.create(null);",
          "609:   const graphqlWrappedResult: GraphQLWrappedResult<ObjMap<unknown>> = [",
          "610:     results,",
          "612:   ];",
          "613:   let containsPromise = false;",
          "",
          "[Removed Lines]",
          "611:     [],",
          "",
          "[Added Lines]",
          "625:     undefined,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "628:       if (result !== undefined) {",
          "629:         if (isPromise(result)) {",
          "630:           results[responseName] = result.then((resolved) => {",
          "632:             return resolved[0];",
          "633:           });",
          "634:           containsPromise = true;",
          "635:         } else {",
          "636:           results[responseName] = result[0];",
          "638:         }",
          "639:       }",
          "640:     }",
          "",
          "[Removed Lines]",
          "631:             graphqlWrappedResult[1].push(...resolved[1]);",
          "637:           graphqlWrappedResult[1].push(...result[1]);",
          "",
          "[Added Lines]",
          "645:             addIncrementalDataRecords(graphqlWrappedResult, resolved[1]);",
          "651:           addIncrementalDataRecords(graphqlWrappedResult, result[1]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "748:       return completed.then(undefined, (rawError) => {",
          "752:       });",
          "753:     }",
          "754:     return completed;",
          "755:   } catch (rawError) {",
          "759:   }",
          "760: }",
          "",
          "[Removed Lines]",
          "749:         const errors = (incrementalContext ?? exeContext).errors;",
          "750:         handleFieldError(rawError, returnType, fieldGroup, path, errors);",
          "751:         return [null, []];",
          "756:     const errors = (incrementalContext ?? exeContext).errors;",
          "757:     handleFieldError(rawError, returnType, fieldGroup, path, errors);",
          "758:     return [null, []];",
          "",
          "[Added Lines]",
          "763:         handleFieldError(",
          "764:           rawError,",
          "765:           exeContext,",
          "766:           returnType,",
          "767:           fieldGroup,",
          "768:           path,",
          "769:           incrementalContext,",
          "770:         );",
          "771:         return [null, undefined];",
          "776:     handleFieldError(",
          "777:       rawError,",
          "778:       exeContext,",
          "779:       returnType,",
          "780:       fieldGroup,",
          "781:       path,",
          "782:       incrementalContext,",
          "783:     );",
          "784:     return [null, undefined];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "789: function handleFieldError(",
          "790:   rawError: unknown,",
          "791:   returnType: GraphQLOutputType,",
          "792:   fieldGroup: FieldGroup,",
          "793:   path: Path,",
          "795: ): void {",
          "796:   const error = locatedError(rawError, toNodes(fieldGroup), pathToArray(path));",
          "",
          "[Removed Lines]",
          "794:   errors: Array<GraphQLError>,",
          "",
          "[Added Lines]",
          "817:   exeContext: ExecutionContext,",
          "821:   incrementalContext: IncrementalContext | undefined,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "806:   errors.push(error);",
          "807: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "833:   const context = incrementalContext ?? exeContext;",
          "834:   let errors = context.errors;",
          "835:   if (errors === undefined) {",
          "836:     errors = [];",
          "837:     context.errors = errors;",
          "838:   }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "867:   if (result == null) {",
          "869:   }",
          "",
          "[Removed Lines]",
          "868:     return [null, []];",
          "",
          "[Added Lines]",
          "901:     return [null, undefined];",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "887:   if (isLeafType(returnType)) {",
          "889:   }",
          "",
          "[Removed Lines]",
          "888:     return [completeLeafValue(returnType, result), []];",
          "",
          "[Added Lines]",
          "921:     return [completeLeafValue(returnType, result), undefined];",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "952:     }",
          "953:     return completed;",
          "954:   } catch (rawError) {",
          "958:   }",
          "959: }",
          "",
          "[Removed Lines]",
          "955:     const errors = (incrementalContext ?? exeContext).errors;",
          "956:     handleFieldError(rawError, returnType, fieldGroup, path, errors);",
          "957:     return [null, []];",
          "",
          "[Added Lines]",
          "988:     handleFieldError(",
          "989:       rawError,",
          "990:       exeContext,",
          "991:       returnType,",
          "992:       fieldGroup,",
          "993:       path,",
          "994:       incrementalContext,",
          "995:     );",
          "996:     return [null, undefined];",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1049:   const completedResults: Array<unknown> = [];",
          "1050:   const graphqlWrappedResult: GraphQLWrappedResult<Array<unknown>> = [",
          "1051:     completedResults,",
          "1053:   ];",
          "1054:   let index = 0;",
          "1055:   const streamUsage = getStreamUsage(exeContext, fieldGroup, path);",
          "",
          "[Removed Lines]",
          "1052:     [],",
          "",
          "[Added Lines]",
          "1091:     undefined,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1069:           path,",
          "1070:           earlyReturn: returnFn.bind(asyncIterator),",
          "1071:         };",
          "1072:         exeContext.cancellableStreams.add(streamRecord);",
          "1073:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1111:         if (exeContext.cancellableStreams === undefined) {",
          "1112:           exeContext.cancellableStreams = new Set();",
          "1113:         }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1083:         itemType,",
          "1084:       );",
          "1087:       break;",
          "1088:     }",
          "",
          "[Removed Lines]",
          "1086:       graphqlWrappedResult[1].push(firstStreamItems);",
          "",
          "[Added Lines]",
          "1128:       addIncrementalDataRecords(graphqlWrappedResult, [firstStreamItems]);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1216:   const completedResults: Array<unknown> = [];",
          "1217:   const graphqlWrappedResult: GraphQLWrappedResult<Array<unknown>> = [",
          "1218:     completedResults,",
          "1220:   ];",
          "1221:   let index = 0;",
          "1222:   const streamUsage = getStreamUsage(exeContext, fieldGroup, path);",
          "",
          "[Removed Lines]",
          "1219:     [],",
          "",
          "[Added Lines]",
          "1261:     undefined,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1242:         itemType,",
          "1243:       );",
          "1246:       break;",
          "1247:     }",
          "",
          "[Removed Lines]",
          "1245:       graphqlWrappedResult[1].push(firstStreamItems);",
          "",
          "[Added Lines]",
          "1287:       addIncrementalDataRecords(graphqlWrappedResult, [firstStreamItems]);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1329:       completedResults.push(",
          "1330:         completedItem.then(",
          "1331:           (resolved) => {",
          "1333:             return resolved[0];",
          "1334:           },",
          "1335:           (rawError) => {",
          "1338:             return null;",
          "1339:           },",
          "1340:         ),",
          "",
          "[Removed Lines]",
          "1332:             parent[1].push(...resolved[1]);",
          "1336:             const errors = (incrementalContext ?? exeContext).errors;",
          "1337:             handleFieldError(rawError, itemType, fieldGroup, itemPath, errors);",
          "",
          "[Added Lines]",
          "1374:             addIncrementalDataRecords(parent, resolved[1]);",
          "1378:             handleFieldError(",
          "1379:               rawError,",
          "1380:               exeContext,",
          "1381:               itemType,",
          "1382:               fieldGroup,",
          "1383:               itemPath,",
          "1384:               incrementalContext,",
          "1385:             );",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1343:     }",
          "1345:     completedResults.push(completedItem[0]);",
          "1347:   } catch (rawError) {",
          "1350:     completedResults.push(null);",
          "1351:   }",
          "1352:   return false;",
          "",
          "[Removed Lines]",
          "1346:     parent[1].push(...completedItem[1]);",
          "1348:     const errors = (incrementalContext ?? exeContext).errors;",
          "1349:     handleFieldError(rawError, itemType, fieldGroup, itemPath, errors);",
          "",
          "[Added Lines]",
          "1394:     addIncrementalDataRecords(parent, completedItem[1]);",
          "1396:     handleFieldError(",
          "1397:       rawError,",
          "1398:       exeContext,",
          "1399:       itemType,",
          "1400:       fieldGroup,",
          "1401:       itemPath,",
          "1402:       incrementalContext,",
          "1403:     );",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1378:     if (isPromise(completed)) {",
          "1379:       completed = await completed;",
          "1380:     }",
          "1382:     return completed[0];",
          "1383:   } catch (rawError) {",
          "1386:     return null;",
          "1387:   }",
          "1388: }",
          "",
          "[Removed Lines]",
          "1381:     parent[1].push(...completed[1]);",
          "1384:     const errors = (incrementalContext ?? exeContext).errors;",
          "1385:     handleFieldError(rawError, itemType, fieldGroup, itemPath, errors);",
          "",
          "[Added Lines]",
          "1435:     addIncrementalDataRecords(parent, completed[1]);",
          "1438:     handleFieldError(",
          "1439:       rawError,",
          "1440:       exeContext,",
          "1441:       itemType,",
          "1442:       fieldGroup,",
          "1443:       itemPath,",
          "1444:       incrementalContext,",
          "1445:     );",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2040:         path,",
          "2041:         groupedFieldSet,",
          "2042:         {",
          "2044:           deferUsageSet,",
          "2045:         },",
          "2046:         deferMap,",
          "",
          "[Removed Lines]",
          "2043:           errors: [],",
          "",
          "[Added Lines]",
          "2103:           errors: undefined,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2130: }",
          "2132: function buildDeferredGroupedFieldSetResult(",
          "2134:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>,",
          "2135:   path: Path | undefined,",
          "2136:   result: GraphQLWrappedResult<ObjMap<unknown>>,",
          "",
          "[Removed Lines]",
          "2133:   errors: ReadonlyArray<GraphQLError>,",
          "",
          "[Added Lines]",
          "2193:   errors: ReadonlyArray<GraphQLError> | undefined,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2139:     deferredFragmentRecords,",
          "2140:     path: pathToArray(path),",
          "2141:     result:",
          "2143:     incrementalDataRecords: result[1],",
          "2144:   };",
          "2145: }",
          "",
          "[Removed Lines]",
          "2142:       errors.length === 0 ? { data: result[0] } : { data: result[0], errors },",
          "",
          "[Added Lines]",
          "2202:       errors === undefined ? { data: result[0] } : { data: result[0], errors },",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2174:         initialPath,",
          "2175:         initialItem,",
          "2176:         exeContext,",
          "2178:         fieldGroup,",
          "2179:         info,",
          "2180:         itemType,",
          "",
          "[Removed Lines]",
          "2177:         { errors: [] },",
          "",
          "[Added Lines]",
          "2237:         { errors: undefined },",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2197:           currentPath,",
          "2198:           item,",
          "2199:           exeContext,",
          "2201:           fieldGroup,",
          "2202:           info,",
          "2203:           itemType,",
          "",
          "[Removed Lines]",
          "2200:           { errors: [] },",
          "",
          "[Added Lines]",
          "2260:           { errors: undefined },",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2243:   result: StreamItemsResult,",
          "2244:   nextStreamItems: StreamItemsRecord,",
          "2245: ): StreamItemsResult {",
          "2255: }",
          "2257: function firstAsyncStreamItems(",
          "",
          "[Removed Lines]",
          "2246:   return isReconcilableStreamItemsResult(result)",
          "2247:     ? {",
          "2248:         ...result,",
          "2249:         incrementalDataRecords: [",
          "2250:           nextStreamItems,",
          "2251:           ...result.incrementalDataRecords,",
          "2252:         ],",
          "2253:       }",
          "2254:     : result;",
          "",
          "[Added Lines]",
          "2306:   if (!isReconcilableStreamItemsResult(result)) {",
          "2307:     return result;",
          "2308:   }",
          "2309:   const incrementalDataRecords = result.incrementalDataRecords;",
          "2310:   return {",
          "2311:     ...result,",
          "2312:     incrementalDataRecords:",
          "2313:       incrementalDataRecords === undefined",
          "2314:         ? [nextStreamItems]",
          "2315:         : [nextStreamItems, ...incrementalDataRecords],",
          "2316:   };",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2311:     itemPath,",
          "2312:     iteration.value,",
          "2313:     exeContext,",
          "2315:     fieldGroup,",
          "2316:     info,",
          "2317:     itemType,",
          "",
          "[Removed Lines]",
          "2314:     { errors: [] },",
          "",
          "[Added Lines]",
          "2376:     { errors: undefined },",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2384:     } catch (rawError) {",
          "2385:       handleFieldError(",
          "2386:         rawError,",
          "2387:         itemType,",
          "2388:         fieldGroup,",
          "2389:         itemPath,",
          "2391:       );",
          "2393:     }",
          "2394:   } catch (error) {",
          "2395:     return {",
          "",
          "[Removed Lines]",
          "2390:         incrementalContext.errors,",
          "2392:       result = [null, []];",
          "",
          "[Added Lines]",
          "2449:         exeContext,",
          "2453:         incrementalContext,",
          "2455:       result = [null, undefined];",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2403:       .then(undefined, (rawError) => {",
          "2404:         handleFieldError(",
          "2405:           rawError,",
          "2406:           itemType,",
          "2407:           fieldGroup,",
          "2408:           itemPath,",
          "2410:         );",
          "2412:       })",
          "2413:       .then(",
          "2414:         (resolvedItem) =>",
          "",
          "[Removed Lines]",
          "2409:           incrementalContext.errors,",
          "2411:         return [null, []] as GraphQLWrappedResult<unknown>;",
          "",
          "[Added Lines]",
          "2469:           exeContext,",
          "2473:           incrementalContext,",
          "2475:         return [null, undefined] as GraphQLWrappedResult<unknown>;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2432: }",
          "2434: function buildStreamItemsResult(",
          "2436:   streamRecord: SubsequentResultRecord,",
          "2437:   result: GraphQLWrappedResult<unknown>,",
          "2438: ): StreamItemsResult {",
          "2439:   return {",
          "2440:     streamRecord,",
          "2441:     result:",
          "2443:         ? { items: [result[0]] }",
          "2444:         : {",
          "2445:             items: [result[0]],",
          "",
          "[Removed Lines]",
          "2435:   errors: ReadonlyArray<GraphQLError>,",
          "2442:       errors.length === 0",
          "",
          "[Added Lines]",
          "2499:   errors: ReadonlyArray<GraphQLError> | undefined,",
          "2506:       errors === undefined",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28e079a3e82c8442a1db09f479feee2278b11a69",
      "candidate_info": {
        "commit_hash": "28e079a3e82c8442a1db09f479feee2278b11a69",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/28e079a3e82c8442a1db09f479feee2278b11a69",
        "files": [
          "src/execution/IncrementalGraph.ts"
        ],
        "message": "refactor(IncrementalGraph): remove unnecessary method",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:   }",
          "76:   getNewPending(): ReadonlyArray<SubsequentResultRecord> {",
          "78:     const newPending = [];",
          "80:       if (isDeferredFragmentRecord(node)) {",
          "81:         if (node.expectedReconcilableResults) {",
          "82:           this._pending.add(node);",
          "",
          "[Removed Lines]",
          "77:     const maybeEmptyNewPending = this._newPending;",
          "79:     for (const node of maybeEmptyNewPending) {",
          "",
          "[Added Lines]",
          "78:     for (const node of this._newPending) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:           continue;",
          "85:         }",
          "86:         for (const child of node.children) {",
          "88:         }",
          "89:       } else {",
          "90:         this._pending.add(node);",
          "",
          "[Removed Lines]",
          "87:           this._addNonEmptyNewPending(child, newPending);",
          "",
          "[Added Lines]",
          "86:           this._newPending.add(child);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:     this._addDeferredFragmentRecord(parent);",
          "189:   }",
          "207:   private _enqueueCompletedDeferredGroupedFieldSet(",
          "208:     result: DeferredGroupedFieldSetResult,",
          "209:   ): void {",
          "",
          "[Removed Lines]",
          "191:   private _addNonEmptyNewPending(",
          "192:     deferredFragmentRecord: DeferredFragmentRecord,",
          "193:     newPending: Array<SubsequentResultRecord>,",
          "194:   ): void {",
          "195:     if (deferredFragmentRecord.expectedReconcilableResults) {",
          "196:       this._pending.add(deferredFragmentRecord);",
          "197:       newPending.push(deferredFragmentRecord);",
          "198:       return;",
          "199:     }",
          "202:     for (const child of deferredFragmentRecord.children) {",
          "203:       this._addNonEmptyNewPending(child, newPending);",
          "204:     }",
          "205:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2744f588da379144b5d681625fe6a9e757737f5c",
      "candidate_info": {
        "commit_hash": "2744f588da379144b5d681625fe6a9e757737f5c",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/2744f588da379144b5d681625fe6a9e757737f5c",
        "files": [
          "src/index.ts",
          "src/validation/__tests__/MaxIntrospectionDepthRule-test.ts",
          "src/validation/index.ts",
          "src/validation/rules/MaxIntrospectionDepthRule.ts",
          "src/validation/specifiedRules.ts"
        ],
        "message": "Introduce \"recommended\" validation rules (#4118)\n\nCo-authored-by: enisdenjo <badurinadenis@gmail.com>\nCo-authored-by: enisdenjo <denis@denelop.com>",
        "before_after_code_files": [
          "src/index.ts||src/index.ts",
          "src/validation/__tests__/MaxIntrospectionDepthRule-test.ts||src/validation/__tests__/MaxIntrospectionDepthRule-test.ts",
          "src/validation/index.ts||src/validation/index.ts",
          "src/validation/rules/MaxIntrospectionDepthRule.ts||src/validation/rules/MaxIntrospectionDepthRule.ts",
          "src/validation/specifiedRules.ts||src/validation/specifiedRules.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/index.ts||src/index.ts": [
          "File: src/index.ts -> src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:   ValidationContext,",
          "357:   specifiedRules,",
          "359:   ExecutableDefinitionsRule,",
          "360:   FieldsOnCorrectTypeRule,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:   recommendedRules,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:   ValuesOfCorrectTypeRule,",
          "383:   VariablesAreInputTypesRule,",
          "384:   VariablesInAllowedPositionRule,",
          "386:   LoneSchemaDefinitionRule,",
          "387:   UniqueOperationTypesRule,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:   MaxIntrospectionDepthRule,",
          "",
          "---------------"
        ],
        "src/validation/__tests__/MaxIntrospectionDepthRule-test.ts||src/validation/__tests__/MaxIntrospectionDepthRule-test.ts": [
          "File: src/validation/__tests__/MaxIntrospectionDepthRule-test.ts -> src/validation/__tests__/MaxIntrospectionDepthRule-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { describe, it } from 'mocha';",
          "3: import { getIntrospectionQuery } from '../../utilities/getIntrospectionQuery.js';",
          "5: import { MaxIntrospectionDepthRule } from '../rules/MaxIntrospectionDepthRule.js';",
          "7: import { expectValidationErrors } from './harness.js';",
          "9: function expectErrors(queryStr: string) {",
          "10:   return expectValidationErrors(MaxIntrospectionDepthRule, queryStr);",
          "11: }",
          "13: function expectValid(queryStr: string) {",
          "14:   expectErrors(queryStr).toDeepEqual([]);",
          "15: }",
          "17: describe('Validate: Max introspection nodes rule', () => {",
          "18:   it('default introspection query', () => {",
          "19:     expectValid(getIntrospectionQuery());",
          "20:   });",
          "22:   it('all options introspection query', () => {",
          "23:     expectValid(",
          "24:       getIntrospectionQuery({",
          "25:         descriptions: true,",
          "26:         specifiedByUrl: true,",
          "27:         directiveIsRepeatable: true,",
          "28:         schemaDescription: true,",
          "29:         inputValueDeprecation: true,",
          "30:       }),",
          "31:     );",
          "32:   });",
          "34:   it('3 flat fields introspection query', () => {",
          "35:     expectValid(`",
          "36:     {",
          "37:       __type(name: \"Query\") {",
          "38:         trueFields: fields(includeDeprecated: true) {",
          "39:           name",
          "40:         }",
          "41:         falseFields: fields(includeDeprecated: false) {",
          "42:           name",
          "43:         }",
          "44:         omittedFields: fields {",
          "45:           name",
          "46:         }",
          "47:       }",
          "48:     }",
          "49:     `);",
          "50:   });",
          "52:   it('3 fields deep introspection query from __schema', () => {",
          "53:     expectErrors(`",
          "54:     {",
          "55:       __schema {",
          "56:         types {",
          "57:           fields {",
          "58:             type {",
          "59:               fields {",
          "60:                 type {",
          "61:                   fields {",
          "62:                     name",
          "63:                   }",
          "64:                 }",
          "65:               }",
          "66:             }",
          "67:           }",
          "68:         }",
          "69:       }",
          "70:     }",
          "71:     `).toDeepEqual([",
          "72:       {",
          "73:         message: 'Maximum introspection depth exceeded',",
          "74:         locations: [",
          "75:           {",
          "76:             column: 7,",
          "77:             line: 3,",
          "78:           },",
          "79:         ],",
          "80:       },",
          "81:     ]);",
          "82:   });",
          "84:   it('3 interfaces deep introspection query from __schema', () => {",
          "85:     expectErrors(`",
          "86:     {",
          "87:       __schema {",
          "88:         types {",
          "89:           interfaces {",
          "90:             interfaces {",
          "91:               interfaces {",
          "92:                 name",
          "93:               }",
          "94:             }",
          "95:           }",
          "96:         }",
          "97:       }",
          "98:     }",
          "99:     `).toDeepEqual([",
          "100:       {",
          "101:         message: 'Maximum introspection depth exceeded',",
          "102:         locations: [",
          "103:           {",
          "104:             column: 7,",
          "105:             line: 3,",
          "106:           },",
          "107:         ],",
          "108:       },",
          "109:     ]);",
          "110:   });",
          "112:   it('3 possibleTypes deep introspection query from __schema', () => {",
          "113:     expectErrors(`",
          "114:     {",
          "115:       __schema {",
          "116:         types {",
          "117:           possibleTypes {",
          "118:             possibleTypes {",
          "119:               possibleTypes {",
          "120:                 name",
          "121:               }",
          "122:             }",
          "123:           }",
          "124:         }",
          "125:       }",
          "126:     }",
          "127:     `).toDeepEqual([",
          "128:       {",
          "129:         message: 'Maximum introspection depth exceeded',",
          "130:         locations: [",
          "131:           {",
          "132:             column: 7,",
          "133:             line: 3,",
          "134:           },",
          "135:         ],",
          "136:       },",
          "137:     ]);",
          "138:   });",
          "140:   it('3 inputFields deep introspection query from __schema', () => {",
          "141:     expectErrors(`",
          "142:     {",
          "143:       __schema {",
          "144:         types {",
          "145:           inputFields {",
          "146:             type {",
          "147:               inputFields {",
          "148:                 type {",
          "149:                   inputFields {",
          "150:                     type {",
          "151:                       name",
          "152:                     }",
          "153:                   }",
          "154:                 }",
          "155:               }",
          "156:             }",
          "157:           }",
          "158:         }",
          "159:       }",
          "160:     }",
          "161:     `).toDeepEqual([",
          "162:       {",
          "163:         message: 'Maximum introspection depth exceeded',",
          "164:         locations: [",
          "165:           {",
          "166:             column: 7,",
          "167:             line: 3,",
          "168:           },",
          "169:         ],",
          "170:       },",
          "171:     ]);",
          "172:   });",
          "174:   it('3 fields deep introspection query from multiple __schema', () => {",
          "175:     expectErrors(`",
          "176:     {",
          "177:       one: __schema {",
          "178:         types {",
          "179:           fields {",
          "180:             type {",
          "181:               fields {",
          "182:                 type {",
          "183:                   fields {",
          "184:                     name",
          "185:                   }",
          "186:                 }",
          "187:               }",
          "188:             }",
          "189:           }",
          "190:         }",
          "191:       }",
          "192:       two: __schema {",
          "193:         types {",
          "194:           fields {",
          "195:             type {",
          "196:               fields {",
          "197:                 type {",
          "198:                   fields {",
          "199:                     name",
          "200:                   }",
          "201:                 }",
          "202:               }",
          "203:             }",
          "204:           }",
          "205:         }",
          "206:       }",
          "207:       three: __schema {",
          "208:         types {",
          "209:           fields {",
          "210:             type {",
          "211:               fields {",
          "212:                 type {",
          "213:                   fields {",
          "214:                     name",
          "215:                   }",
          "216:                 }",
          "217:               }",
          "218:             }",
          "219:           }",
          "220:         }",
          "221:       }",
          "222:     }",
          "223:     `).toDeepEqual([",
          "224:       {",
          "225:         message: 'Maximum introspection depth exceeded',",
          "226:         locations: [",
          "227:           {",
          "228:             column: 7,",
          "229:             line: 3,",
          "230:           },",
          "231:         ],",
          "232:       },",
          "233:       {",
          "234:         locations: [",
          "235:           {",
          "236:             column: 7,",
          "237:             line: 18,",
          "238:           },",
          "239:         ],",
          "240:         message: 'Maximum introspection depth exceeded',",
          "241:       },",
          "242:       {",
          "243:         locations: [",
          "244:           {",
          "245:             column: 7,",
          "246:             line: 33,",
          "247:           },",
          "248:         ],",
          "249:         message: 'Maximum introspection depth exceeded',",
          "250:       },",
          "251:     ]);",
          "252:   });",
          "254:   it('3 fields deep introspection query from __type', () => {",
          "255:     expectErrors(`",
          "256:     {",
          "257:       __type(name: \"Query\") {",
          "258:         types {",
          "259:           fields {",
          "260:             type {",
          "261:               fields {",
          "262:                 type {",
          "263:                   fields {",
          "264:                     name",
          "265:                   }",
          "266:                 }",
          "267:               }",
          "268:             }",
          "269:           }",
          "270:         }",
          "271:       }",
          "272:     }",
          "273:     `).toDeepEqual([",
          "274:       {",
          "275:         message: 'Maximum introspection depth exceeded',",
          "276:         locations: [",
          "277:           {",
          "278:             column: 7,",
          "279:             line: 3,",
          "280:           },",
          "281:         ],",
          "282:       },",
          "283:     ]);",
          "284:   });",
          "286:   it('3 fields deep introspection query from multiple __type', () => {",
          "287:     expectErrors(`",
          "288:     {",
          "289:       one: __type(name: \"Query\") {",
          "290:         types {",
          "291:           fields {",
          "292:             type {",
          "293:               fields {",
          "294:                 type {",
          "295:                   fields {",
          "296:                     name",
          "297:                   }",
          "298:                 }",
          "299:               }",
          "300:             }",
          "301:           }",
          "302:         }",
          "303:       }",
          "304:       two: __type(name: \"Query\") {",
          "305:         types {",
          "306:           fields {",
          "307:             type {",
          "308:               fields {",
          "309:                 type {",
          "310:                   fields {",
          "311:                     name",
          "312:                   }",
          "313:                 }",
          "314:               }",
          "315:             }",
          "316:           }",
          "317:         }",
          "318:       }",
          "319:       three: __type(name: \"Query\") {",
          "320:         types {",
          "321:           fields {",
          "322:             type {",
          "323:               fields {",
          "324:                 type {",
          "325:                   fields {",
          "326:                     name",
          "327:                   }",
          "328:                 }",
          "329:               }",
          "330:             }",
          "331:           }",
          "332:         }",
          "333:       }",
          "334:     }",
          "335:     `).toDeepEqual([",
          "336:       {",
          "337:         message: 'Maximum introspection depth exceeded',",
          "338:         locations: [",
          "339:           {",
          "340:             column: 7,",
          "341:             line: 3,",
          "342:           },",
          "343:         ],",
          "344:       },",
          "345:       {",
          "346:         locations: [",
          "347:           {",
          "348:             column: 7,",
          "349:             line: 18,",
          "350:           },",
          "351:         ],",
          "352:         message: 'Maximum introspection depth exceeded',",
          "353:       },",
          "354:       {",
          "355:         locations: [",
          "356:           {",
          "357:             column: 7,",
          "358:             line: 33,",
          "359:           },",
          "360:         ],",
          "361:         message: 'Maximum introspection depth exceeded',",
          "362:       },",
          "363:     ]);",
          "364:   });",
          "366:   it('1 fields deep with 3 fields introspection query', () => {",
          "367:     expectValid(`",
          "368:     {",
          "369:       __schema {",
          "370:         types {",
          "371:           fields {",
          "372:             type {",
          "373:               oneFields: fields {",
          "374:                 name",
          "375:               }",
          "376:               twoFields: fields {",
          "377:                 name",
          "378:               }",
          "379:               threeFields: fields {",
          "380:                 name",
          "381:               }",
          "382:             }",
          "383:           }",
          "384:         }",
          "385:       }",
          "386:     }",
          "387:     `);",
          "388:   });",
          "390:   it('3 fields deep from varying parents introspection query', () => {",
          "391:     expectErrors(`",
          "392:     {",
          "393:       __schema {",
          "394:         types {",
          "395:           fields {",
          "396:             type {",
          "397:               fields {",
          "398:                 type {",
          "399:                   ofType {",
          "400:                     fields {",
          "401:                       name",
          "402:                     }",
          "403:                   }",
          "404:                 }",
          "405:               }",
          "406:             }",
          "407:           }",
          "408:         }",
          "409:       }",
          "410:     }",
          "411:     `).toDeepEqual([",
          "412:       {",
          "413:         message: 'Maximum introspection depth exceeded',",
          "414:         locations: [",
          "415:           {",
          "416:             column: 7,",
          "417:             line: 3,",
          "418:           },",
          "419:         ],",
          "420:       },",
          "421:     ]);",
          "422:   });",
          "424:   it('3 fields deep introspection query with inline fragments', () => {",
          "425:     expectErrors(`",
          "426:     query test {",
          "427:       __schema {",
          "428:         types {",
          "429:           ... on __Type {",
          "430:             fields {",
          "431:               type {",
          "432:                 ... on __Type {",
          "433:                   ofType {",
          "434:                     fields {",
          "435:                       type {",
          "436:                         ... on __Type {",
          "437:                           fields {",
          "438:                             name",
          "439:                           }",
          "440:                         }",
          "441:                       }",
          "442:                     }",
          "443:                   }",
          "444:                 }",
          "445:               }",
          "446:             }",
          "447:           }",
          "448:         }",
          "449:       }",
          "450:     }",
          "451:     `).toDeepEqual([",
          "452:       {",
          "453:         message: 'Maximum introspection depth exceeded',",
          "454:         locations: [",
          "455:           {",
          "456:             column: 7,",
          "457:             line: 3,",
          "458:           },",
          "459:         ],",
          "460:       },",
          "461:     ]);",
          "462:   });",
          "464:   it('3 fields deep introspection query with fragments', () => {",
          "465:     expectErrors(`",
          "466:     query test {",
          "467:       __schema {",
          "468:         types {",
          "469:           ...One",
          "470:         }",
          "471:       }",
          "472:     }",
          "474:     fragment One on __Type {",
          "475:       fields {",
          "476:         type {",
          "477:           ...Two",
          "478:         }",
          "479:       }",
          "480:     }",
          "482:     fragment Two on __Type {",
          "483:       fields {",
          "484:         type {",
          "485:           ...Three",
          "486:         }",
          "487:       }",
          "488:     }",
          "490:     fragment Three on __Type {",
          "491:       fields {",
          "492:         name",
          "493:       }",
          "494:     }",
          "495:     `).toDeepEqual([",
          "496:       {",
          "497:         message: 'Maximum introspection depth exceeded',",
          "498:         locations: [",
          "499:           {",
          "500:             column: 7,",
          "501:             line: 3,",
          "502:           },",
          "503:         ],",
          "504:       },",
          "505:     ]);",
          "506:   });",
          "508:   it('3 fields deep inside inline fragment on query', () => {",
          "509:     expectErrors(`",
          "510:     {",
          "511:       ... {",
          "512:         __schema { types { fields { type { fields { type { fields { name } } } } } } }",
          "513:       }",
          "514:     }",
          "515:     `).toDeepEqual([",
          "516:       {",
          "517:         message: 'Maximum introspection depth exceeded',",
          "518:         locations: [",
          "519:           {",
          "520:             column: 9,",
          "521:             line: 4,",
          "522:           },",
          "523:         ],",
          "524:       },",
          "525:     ]);",
          "526:   });",
          "528:   it('opts out if fragment is missing', () => {",
          "529:     expectValid(`",
          "530:     query test {",
          "531:       __schema {",
          "532:         types {",
          "533:           ...Missing",
          "534:         }",
          "535:       }",
          "536:     }",
          "537:     `);",
          "538:   });",
          "540:   it(\"doesn't infinitely recurse on fragment cycle\", () => {",
          "541:     expectValid(`",
          "542:     query test {",
          "543:       __schema {",
          "544:         types {",
          "545:           ...Cycle",
          "546:         }",
          "547:       }",
          "548:     }",
          "549:     fragment Cycle on __Type {",
          "550:       ...Cycle",
          "551:     }",
          "552:     `);",
          "553:   });",
          "554: });",
          "",
          "---------------"
        ],
        "src/validation/index.ts||src/validation/index.ts": [
          "File: src/validation/index.ts -> src/validation/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: export type { ValidationRule } from './ValidationContext.js';",
          "10: export { DeferStreamDirectiveLabelRule } from './rules/DeferStreamDirectiveLabelRule.js';",
          "",
          "[Removed Lines]",
          "7: export { specifiedRules } from './specifiedRules.js';",
          "",
          "[Added Lines]",
          "7: export { specifiedRules, recommendedRules } from './specifiedRules.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97: export { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.js';",
          "100: export { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.js';",
          "101: export { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: export { MaxIntrospectionDepthRule } from './rules/MaxIntrospectionDepthRule.js';",
          "",
          "---------------"
        ],
        "src/validation/rules/MaxIntrospectionDepthRule.ts||src/validation/rules/MaxIntrospectionDepthRule.ts": [
          "File: src/validation/rules/MaxIntrospectionDepthRule.ts -> src/validation/rules/MaxIntrospectionDepthRule.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { GraphQLError } from '../../error/GraphQLError.js';",
          "3: import type { ASTNode } from '../../language/ast.js';",
          "4: import { Kind } from '../../language/kinds.js';",
          "5: import type { ASTVisitor } from '../../language/visitor.js';",
          "7: import type { ValidationContext } from '../ValidationContext.js';",
          "9: const MAX_LISTS_DEPTH = 3;",
          "11: export function MaxIntrospectionDepthRule(",
          "12:   context: ValidationContext,",
          "13: ): ASTVisitor {",
          "18:   function checkDepth(",
          "19:     node: ASTNode,",
          "20:     visitedFragments: {",
          "21:       [fragmentName: string]: true | undefined;",
          "22:     } = Object.create(null),",
          "23:     depth: number = 0,",
          "24:   ): boolean {",
          "25:     if (node.kind === Kind.FRAGMENT_SPREAD) {",
          "26:       const fragmentName = node.name.value;",
          "27:       if (visitedFragments[fragmentName] === true) {",
          "29:         return false;",
          "30:       }",
          "31:       const fragment = context.getFragment(fragmentName);",
          "32:       if (!fragment) {",
          "34:         return false;",
          "35:       }",
          "42:       try {",
          "43:         visitedFragments[fragmentName] = true;",
          "44:         return checkDepth(fragment, visitedFragments, depth);",
          "45:       } finally {",
          "46:         visitedFragments[fragmentName] = undefined;",
          "47:       }",
          "48:     }",
          "50:     if (",
          "51:       node.kind === Kind.FIELD &&",
          "54:       (node.name.value === 'fields' ||",
          "55:         node.name.value === 'interfaces' ||",
          "56:         node.name.value === 'possibleTypes' ||",
          "57:         node.name.value === 'inputFields')",
          "58:     ) {",
          "60:       depth++;",
          "61:       if (depth >= MAX_LISTS_DEPTH) {",
          "62:         return true;",
          "63:       }",
          "64:     }",
          "67:     if ('selectionSet' in node && node.selectionSet) {",
          "68:       for (const child of node.selectionSet.selections) {",
          "69:         if (checkDepth(child, visitedFragments, depth)) {",
          "70:           return true;",
          "71:         }",
          "72:       }",
          "73:     }",
          "75:     return false;",
          "76:   }",
          "78:   return {",
          "79:     Field(node) {",
          "80:       if (node.name.value === '__schema' || node.name.value === '__type') {",
          "81:         if (checkDepth(node)) {",
          "82:           context.reportError(",
          "83:             new GraphQLError('Maximum introspection depth exceeded', {",
          "84:               nodes: [node],",
          "85:             }),",
          "86:           );",
          "87:           return false;",
          "88:         }",
          "89:       }",
          "90:     },",
          "91:   };",
          "92: }",
          "",
          "---------------"
        ],
        "src/validation/specifiedRules.ts||src/validation/specifiedRules.ts": [
          "File: src/validation/specifiedRules.ts -> src/validation/specifiedRules.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.js';",
          "27: import { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.js';",
          "29: import { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import { MaxIntrospectionDepthRule } from './rules/MaxIntrospectionDepthRule.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: import { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.js';",
          "76: import type { SDLValidationRule, ValidationRule } from './ValidationContext.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: export const recommendedRules = Object.freeze([MaxIntrospectionDepthRule]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:   VariablesInAllowedPositionRule,",
          "113:   OverlappingFieldsCanBeMergedRule,",
          "114:   UniqueInputFieldNamesRule,",
          "115: ]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:   ...recommendedRules,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c7d4d1468f8453bdb598b2015b44c5198145a7a",
      "candidate_info": {
        "commit_hash": "5c7d4d1468f8453bdb598b2015b44c5198145a7a",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/5c7d4d1468f8453bdb598b2015b44c5198145a7a",
        "files": [
          "src/execution/IncrementalGraph.ts"
        ],
        "message": "polish(incremental): remove unnecessary helper\n\nimproves readability at the cost of pushing and then immediate popping",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:     }",
          "310:   }",
          "319:   private _enqueue(completed: IncrementalDataRecordResult): void {",
          "320:     const next = this._nextQueue.shift();",
          "323:       return;",
          "324:     }",
          "326:   }",
          "327: }",
          "",
          "[Removed Lines]",
          "312:   private *_yieldCurrentCompletedIncrementalData(",
          "313:     first: IncrementalDataRecordResult,",
          "314:   ): Generator<IncrementalDataRecordResult> {",
          "315:     yield first;",
          "316:     yield* this.currentCompletedBatch();",
          "317:   }",
          "321:     if (next !== undefined) {",
          "322:       next(this._yieldCurrentCompletedIncrementalData(completed));",
          "325:     this._completedQueue.push(completed);",
          "",
          "[Added Lines]",
          "313:     this._completedQueue.push(completed);",
          "315:     if (next === undefined) {",
          "318:     next(this.currentCompletedBatch());",
          "",
          "---------------"
        ]
      }
    }
  ]
}