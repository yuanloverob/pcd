{
  "cve_id": "CVE-2023-50726",
  "cve_desc": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. \"Local sync\" is an Argo CD feature that allows developers to temporarily override an Application's manifests with locally-defined manifests. Use of the feature should generally be limited to highly-trusted users, since it allows the user to bypass any merge protections in git. An improper validation bug allows users who have `create` privileges but not `override` privileges to sync local manifests on app creation. All other restrictions, including AppProject restrictions are still enforced. The only restriction which is not enforced is that the manifests come from some approved git/Helm/OCI source. The bug was introduced in 1.2.0-rc1 when the local manifest sync feature was added. The bug has been patched in Argo CD versions 2.10.3, 2.9.8, and 2.8.12. Users are advised to upgrade. Users unable to upgrade may mitigate the risk of branch protection bypass by removing `applications, create` RBAC access. The only way to eliminate the issue without removing RBAC access is to upgrade to a patched version.",
  "repo": "argoproj/argo-cd",
  "patch_hash": "3b8f673f06c2d228e01cbc830e5cb57cef008978",
  "patch_info": {
    "commit_hash": "3b8f673f06c2d228e01cbc830e5cb57cef008978",
    "repo": "argoproj/argo-cd",
    "commit_url": "https://github.com/argoproj/argo-cd/commit/3b8f673f06c2d228e01cbc830e5cb57cef008978",
    "files": [
      "server/application/application.go",
      "server/application/application_test.go"
    ],
    "message": "Merge pull request from GHSA-g623-jcgg-mhmm\n\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
    "before_after_code_files": [
      "server/application/application.go||server/application/application.go",
      "server/application/application_test.go||server/application/application_test.go"
    ]
  },
  "patch_diff": {
    "server/application/application.go||server/application/application.go": [
      "File: server/application/application.go -> server/application/application.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "333:   return nil, security.NamespaceNotPermittedError(appNs)",
      "334:  }",
      "336:  created, err := s.appclientset.ArgoprojV1alpha1().Applications(appNs).Create(ctx, a, metav1.CreateOptions{})",
      "337:  if err == nil {",
      "338:   s.logAppEvent(created, ctx, argo.EventReasonResourceCreated, \"created application\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "337:  if a.Operation != nil {",
      "338:   log.WithFields(log.Fields{",
      "339:    \"application\":            a.Name,",
      "340:    argocommon.SecurityField: argocommon.SecurityLow,",
      "341:   }).Warn(\"User attempted to set operation on application creation. This could have allowed them to bypass branch protection rules by setting manifests directly. Ignoring the set operation.\")",
      "342:   a.Operation = nil",
      "343:  }",
      "",
      "---------------"
    ],
    "server/application/application_test.go||server/application/application_test.go": [
      "File: server/application/application_test.go -> server/application/application_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1439:  assert.Equal(t, app.Spec.Destination.Server, \"https://cluster-api.example.com\")",
      "1440: }",
      "1442: func TestUpdateApp(t *testing.T) {",
      "1443:  testApp := newTestApp()",
      "1444:  appServer := newTestAppServer(t, testApp)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1444: func TestCreateAppWithOperation(t *testing.T) {",
      "1445:  appServer := newTestAppServer(t)",
      "1446:  testApp := newTestAppWithDestName()",
      "1447:  testApp.Operation = &appsv1.Operation{",
      "1448:   Sync: &appsv1.SyncOperation{",
      "1449:    Manifests: []string{",
      "1450:     \"test\",",
      "1451:    },",
      "1452:   },",
      "1453:  }",
      "1454:  createReq := application.ApplicationCreateRequest{",
      "1455:   Application: testApp,",
      "1456:  }",
      "1457:  app, err := appServer.Create(context.Background(), &createReq)",
      "1458:  require.NoError(t, err)",
      "1459:  require.NotNil(t, app)",
      "1460:  assert.Nil(t, app.Operation)",
      "1461: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9f0dc9402fb8245d95834b29f19397ff758147db",
      "candidate_info": {
        "commit_hash": "9f0dc9402fb8245d95834b29f19397ff758147db",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/9f0dc9402fb8245d95834b29f19397ff758147db",
        "files": [
          ".golangci.yaml",
          "applicationset/metrics/metrics_test.go",
          "applicationset/services/pull_request/azure_devops.go",
          "applicationset/services/pull_request/azure_devops_test.go",
          "cmd/argocd/commands/admin/notifications.go",
          "cmd/argocd/commands/app_actions.go",
          "controller/appcontroller_test.go",
          "controller/sharding/sharding.go",
          "controller/state_test.go",
          "pkg/apis/application/v1alpha1/values.go",
          "reposerver/apiclient/mocks/Clientset.go",
          "reposerver/repository/repository_test.go",
          "server/application/application_test.go",
          "server/badge/badge.go",
          "test/e2e/fixture/admin/utils/backup.go",
          "test/e2e/fixture/applicationsets/actions.go",
          "test/e2e/sync_with_impersonate_test.go",
          "util/db/db_test.go",
          "util/db/secrets.go",
          "util/notification/k8s/informers.go",
          "util/rbac/rbac.go",
          "util/settings/settings.go"
        ],
        "message": "chore: enable redundant-import-alias from revive (#21386)\n\nSigned-off-by: Matthieu MOREL <matthieu.morel35@gmail.com>",
        "before_after_code_files": [
          "applicationset/metrics/metrics_test.go||applicationset/metrics/metrics_test.go",
          "applicationset/services/pull_request/azure_devops.go||applicationset/services/pull_request/azure_devops.go",
          "applicationset/services/pull_request/azure_devops_test.go||applicationset/services/pull_request/azure_devops_test.go",
          "cmd/argocd/commands/admin/notifications.go||cmd/argocd/commands/admin/notifications.go",
          "cmd/argocd/commands/app_actions.go||cmd/argocd/commands/app_actions.go",
          "controller/appcontroller_test.go||controller/appcontroller_test.go",
          "controller/sharding/sharding.go||controller/sharding/sharding.go",
          "controller/state_test.go||controller/state_test.go",
          "pkg/apis/application/v1alpha1/values.go||pkg/apis/application/v1alpha1/values.go",
          "reposerver/apiclient/mocks/Clientset.go||reposerver/apiclient/mocks/Clientset.go",
          "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go",
          "server/application/application_test.go||server/application/application_test.go",
          "server/badge/badge.go||server/badge/badge.go",
          "test/e2e/fixture/admin/utils/backup.go||test/e2e/fixture/admin/utils/backup.go",
          "test/e2e/fixture/applicationsets/actions.go||test/e2e/fixture/applicationsets/actions.go",
          "test/e2e/sync_with_impersonate_test.go||test/e2e/sync_with_impersonate_test.go",
          "util/db/db_test.go||util/db/db_test.go",
          "util/db/secrets.go||util/db/secrets.go",
          "util/notification/k8s/informers.go||util/notification/k8s/informers.go",
          "util/rbac/rbac.go||util/rbac/rbac.go",
          "util/settings/settings.go||util/settings/settings.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server/application/application_test.go||server/application/application_test.go"
          ],
          "candidate": [
            "server/application/application_test.go||server/application/application_test.go"
          ]
        }
      },
      "candidate_diff": {
        "applicationset/metrics/metrics_test.go||applicationset/metrics/metrics_test.go": [
          "File: applicationset/metrics/metrics_test.go -> applicationset/metrics/metrics_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"testing\"",
          "8:  \"time\"",
          "13:  \"github.com/prometheus/client_golang/prometheus/promhttp\"",
          "14:  \"github.com/stretchr/testify/assert\"",
          "15:  \"github.com/stretchr/testify/require\"",
          "16:  \"k8s.io/apimachinery/pkg/runtime\"",
          "17:  ctrlclient \"sigs.k8s.io/controller-runtime/pkg/client\"",
          "24:  \"sigs.k8s.io/controller-runtime/pkg/metrics\"",
          "26:  \"sigs.k8s.io/yaml\"",
          "27: )",
          "29: var (",
          "",
          "[Removed Lines]",
          "10:  \"github.com/argoproj/argo-cd/v2/applicationset/utils\"",
          "11:  argoappv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "18:  fake \"sigs.k8s.io/controller-runtime/pkg/client/fake\"",
          "20:  prometheus \"github.com/prometheus/client_golang/prometheus\"",
          "22:  metricsutil \"github.com/argoproj/argo-cd/v2/util/metrics\"",
          "",
          "[Added Lines]",
          "10:  \"github.com/prometheus/client_golang/prometheus\"",
          "16:  \"sigs.k8s.io/controller-runtime/pkg/client/fake\"",
          "20:  \"github.com/argoproj/argo-cd/v2/applicationset/utils\"",
          "21:  argoappv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "22:  metricsutil \"github.com/argoproj/argo-cd/v2/util/metrics\"",
          "",
          "---------------"
        ],
        "applicationset/services/pull_request/azure_devops.go||applicationset/services/pull_request/azure_devops.go": [
          "File: applicationset/services/pull_request/azure_devops.go -> applicationset/services/pull_request/azure_devops.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"strings\"",
          "8:  \"github.com/microsoft/azure-devops-go-api/azuredevops\"",
          "11: )",
          "13: const AZURE_DEVOPS_DEFAULT_URL = \"https://dev.azure.com\"",
          "",
          "[Removed Lines]",
          "9:  core \"github.com/microsoft/azure-devops-go-api/azuredevops/core\"",
          "10:  git \"github.com/microsoft/azure-devops-go-api/azuredevops/git\"",
          "",
          "[Added Lines]",
          "9:  \"github.com/microsoft/azure-devops-go-api/azuredevops/core\"",
          "10:  \"github.com/microsoft/azure-devops-go-api/azuredevops/git\"",
          "",
          "---------------"
        ],
        "applicationset/services/pull_request/azure_devops_test.go||applicationset/services/pull_request/azure_devops_test.go": [
          "File: applicationset/services/pull_request/azure_devops_test.go -> applicationset/services/pull_request/azure_devops_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"github.com/microsoft/azure-devops-go-api/azuredevops/webapi\"",
          "9:  \"github.com/microsoft/azure-devops-go-api/azuredevops/core\"",
          "11:  \"github.com/stretchr/testify/assert\"",
          "12:  \"github.com/stretchr/testify/mock\"",
          "13:  \"github.com/stretchr/testify/require\"",
          "",
          "[Removed Lines]",
          "10:  git \"github.com/microsoft/azure-devops-go-api/azuredevops/git\"",
          "",
          "[Added Lines]",
          "10:  \"github.com/microsoft/azure-devops-go-api/azuredevops/git\"",
          "",
          "---------------"
        ],
        "cmd/argocd/commands/admin/notifications.go||cmd/argocd/commands/admin/notifications.go": [
          "File: cmd/argocd/commands/admin/notifications.go -> cmd/argocd/commands/admin/notifications.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  \"github.com/argoproj/argo-cd/v2/reposerver/apiclient\"",
          "12:  \"github.com/argoproj/argo-cd/v2/util/env\"",
          "13:  service \"github.com/argoproj/argo-cd/v2/util/notification/argocd\"",
          "15:  \"github.com/argoproj/argo-cd/v2/util/tls\"",
          "17:  \"github.com/argoproj/notifications-engine/pkg/cmd\"",
          "",
          "[Removed Lines]",
          "14:  settings \"github.com/argoproj/argo-cd/v2/util/notification/settings\"",
          "",
          "[Added Lines]",
          "14:  \"github.com/argoproj/argo-cd/v2/util/notification/settings\"",
          "",
          "---------------"
        ],
        "cmd/argocd/commands/app_actions.go||cmd/argocd/commands/app_actions.go": [
          "File: cmd/argocd/commands/app_actions.go -> cmd/argocd/commands/app_actions.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  argocdclient \"github.com/argoproj/argo-cd/v2/pkg/apiclient\"",
          "22:  applicationpkg \"github.com/argoproj/argo-cd/v2/pkg/apiclient/application\"",
          "23:  \"github.com/argoproj/argo-cd/v2/pkg/apis/application\"",
          "25:  \"github.com/argoproj/argo-cd/v2/util/argo\"",
          "26:  \"github.com/argoproj/argo-cd/v2/util/errors\"",
          "27:  \"github.com/argoproj/argo-cd/v2/util/io\"",
          "",
          "[Removed Lines]",
          "24:  v1alpha1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "",
          "[Added Lines]",
          "24:  \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "",
          "---------------"
        ],
        "controller/appcontroller_test.go||controller/appcontroller_test.go": [
          "File: controller/appcontroller_test.go -> controller/appcontroller_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
          "29:  \"github.com/stretchr/testify/assert\"",
          "30:  \"github.com/stretchr/testify/mock\"",
          "32:  corev1 \"k8s.io/api/core/v1\"",
          "33:  apierrors \"k8s.io/apimachinery/pkg/api/errors\"",
          "34:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "",
          "[Removed Lines]",
          "31:  v1 \"k8s.io/api/apps/v1\"",
          "",
          "[Added Lines]",
          "31:  appsv1 \"k8s.io/api/apps/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1696: }",
          "1698: func TestUpdateHealthStatusTransitionTime(t *testing.T) {",
          "1700:   TypeMeta: metav1.TypeMeta{",
          "1701:    APIVersion: \"apps/v1\",",
          "1702:    Kind:       \"Deployment\",",
          "",
          "[Removed Lines]",
          "1699:  deployment := kube.MustToUnstructured(&v1.Deployment{",
          "",
          "[Added Lines]",
          "1699:  deployment := kube.MustToUnstructured(&appsv1.Deployment{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1799: func TestUpdateHealthStatusProgression(t *testing.T) {",
          "1800:  app := newFakeAppWithHealthAndTime(health.HealthStatusDegraded, testTimestamp)",
          "1802:   TypeMeta: metav1.TypeMeta{",
          "1803:    APIVersion: \"apps/v1\",",
          "1804:    Kind:       \"Deployment\",",
          "",
          "[Removed Lines]",
          "1801:  deployment := kube.MustToUnstructured(&v1.Deployment{",
          "",
          "[Added Lines]",
          "1801:  deployment := kube.MustToUnstructured(&appsv1.Deployment{",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1807:    Name:      \"demo\",",
          "1808:    Namespace: \"default\",",
          "1809:   },",
          "1811:    ObservedGeneration: 0,",
          "1812:   },",
          "1813:  })",
          "",
          "[Removed Lines]",
          "1810:   Status: v1.DeploymentStatus{",
          "",
          "[Added Lines]",
          "1810:   Status: appsv1.DeploymentStatus{",
          "",
          "---------------"
        ],
        "controller/sharding/sharding.go||controller/sharding/sharding.go": [
          "File: controller/sharding/sharding.go -> controller/sharding/sharding.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"hash/fnv\"",
          "9:  \"math\"",
          "10:  \"os\"",
          "11:  \"sort\"",
          "12:  \"strconv\"",
          "13:  \"strings\"",
          "14:  \"time\"",
          "17:  corev1 \"k8s.io/api/core/v1\"",
          "18:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "19:  \"k8s.io/client-go/kubernetes\"",
          "",
          "[Removed Lines]",
          "16:  slices \"golang.org/x/exp/slices\"",
          "",
          "[Added Lines]",
          "11:  \"slices\"",
          "",
          "---------------"
        ],
        "controller/state_test.go||controller/state_test.go": [
          "File: controller/state_test.go -> controller/state_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  logrustest \"github.com/sirupsen/logrus/hooks/test\"",
          "17:  \"github.com/stretchr/testify/assert\"",
          "18:  \"github.com/stretchr/testify/require\"",
          "20:  corev1 \"k8s.io/api/core/v1\"",
          "21:  networkingv1 \"k8s.io/api/networking/v1\"",
          "22:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "",
          "[Removed Lines]",
          "19:  v1 \"k8s.io/api/apps/v1\"",
          "",
          "[Added Lines]",
          "19:  appsv1 \"k8s.io/api/apps/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "685: func TestSetHealth(t *testing.T) {",
          "686:  app := newFakeApp()",
          "688:   TypeMeta: metav1.TypeMeta{",
          "689:    APIVersion: \"apps/v1\",",
          "690:    Kind:       \"Deployment\",",
          "",
          "[Removed Lines]",
          "687:  deployment := kube.MustToUnstructured(&v1.Deployment{",
          "",
          "[Added Lines]",
          "687:  deployment := kube.MustToUnstructured(&appsv1.Deployment{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "721: func TestPreserveStatusTimestamp(t *testing.T) {",
          "722:  timestamp := metav1.Now()",
          "723:  app := newFakeAppWithHealthAndTime(health.HealthStatusHealthy, timestamp)",
          "725:   TypeMeta: metav1.TypeMeta{",
          "726:    APIVersion: \"apps/v1\",",
          "727:    Kind:       \"Deployment\",",
          "",
          "[Removed Lines]",
          "724:  deployment := kube.MustToUnstructured(&v1.Deployment{",
          "",
          "[Added Lines]",
          "724:  deployment := kube.MustToUnstructured(&appsv1.Deployment{",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "758: func TestSetHealthSelfReferencedApp(t *testing.T) {",
          "759:  app := newFakeApp()",
          "760:  unstructuredApp := kube.MustToUnstructured(app)",
          "762:   TypeMeta: metav1.TypeMeta{",
          "763:    APIVersion: \"apps/v1\",",
          "764:    Kind:       \"Deployment\",",
          "",
          "[Removed Lines]",
          "761:  deployment := kube.MustToUnstructured(&v1.Deployment{",
          "",
          "[Added Lines]",
          "761:  deployment := kube.MustToUnstructured(&appsv1.Deployment{",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/values.go||pkg/apis/application/v1alpha1/values.go": [
          "File: pkg/apis/application/v1alpha1/values.go -> pkg/apis/application/v1alpha1/values.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"encoding/json\"",
          "5:  \"fmt\"",
          "7:  \"strings\"",
          "10:  \"sigs.k8s.io/yaml\"",
          "11: )",
          "",
          "[Removed Lines]",
          "6:  reflect \"reflect\"",
          "9:  runtime \"k8s.io/apimachinery/pkg/runtime\"",
          "",
          "[Added Lines]",
          "6:  \"reflect\"",
          "9:  \"k8s.io/apimachinery/pkg/runtime\"",
          "",
          "---------------"
        ],
        "reposerver/apiclient/mocks/Clientset.go||reposerver/apiclient/mocks/Clientset.go": [
          "File: reposerver/apiclient/mocks/Clientset.go -> reposerver/apiclient/mocks/Clientset.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package mocks",
          "3: import (",
          "7: )",
          "9: type Clientset struct {",
          "",
          "[Removed Lines]",
          "4:  apiclient \"github.com/argoproj/argo-cd/v2/reposerver/apiclient\"",
          "6:  io \"github.com/argoproj/argo-cd/v2/util/io\"",
          "",
          "[Added Lines]",
          "4:  \"github.com/argoproj/argo-cd/v2/reposerver/apiclient\"",
          "5:  \"github.com/argoproj/argo-cd/v2/util/io\"",
          "",
          "---------------"
        ],
        "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go": [
          "File: reposerver/repository/repository_test.go -> reposerver/repository/repository_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  \"github.com/stretchr/testify/assert\"",
          "30:  \"github.com/stretchr/testify/mock\"",
          "31:  \"github.com/stretchr/testify/require\"",
          "33:  \"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"",
          "34:  \"k8s.io/apimachinery/pkg/runtime\"",
          "35:  \"sigs.k8s.io/yaml\"",
          "",
          "[Removed Lines]",
          "32:  v1 \"k8s.io/api/apps/v1\"",
          "",
          "[Added Lines]",
          "32:  appsv1 \"k8s.io/api/apps/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1113:   require.NoError(t, err)",
          "1115:   if obj.GetKind() == \"Deployment\" && obj.GetName() == \"test-redis-slave\" {",
          "1117:    err := runtime.DefaultUnstructuredConverter.FromUnstructured(obj.Object, &dep)",
          "1118:    require.NoError(t, err)",
          "1119:    assert.Equal(t, int32(2), *dep.Spec.Replicas)",
          "",
          "[Removed Lines]",
          "1116:    var dep v1.Deployment",
          "",
          "[Added Lines]",
          "1116:    var dep appsv1.Deployment",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1175:   require.NoError(t, err)",
          "1177:   if obj.GetKind() == \"Deployment\" && obj.GetName() == \"production-redis-slave\" {",
          "1179:    err := runtime.DefaultUnstructuredConverter.FromUnstructured(obj.Object, &dep)",
          "1180:    require.NoError(t, err)",
          "1181:    assert.Equal(t, int32(3), *dep.Spec.Replicas)",
          "",
          "[Removed Lines]",
          "1178:    var dep v1.Deployment",
          "",
          "[Added Lines]",
          "1178:    var dep appsv1.Deployment",
          "",
          "---------------"
        ],
        "server/application/application_test.go||server/application/application_test.go": [
          "File: server/application/application_test.go -> server/application/application_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  \"google.golang.org/grpc/codes\"",
          "25:  \"google.golang.org/grpc/metadata\"",
          "26:  \"google.golang.org/grpc/status\"",
          "28:  k8sbatchv1 \"k8s.io/api/batch/v1\"",
          "29:  corev1 \"k8s.io/api/core/v1\"",
          "30:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "",
          "[Removed Lines]",
          "27:  k8sappsv1 \"k8s.io/api/apps/v1\"",
          "",
          "[Added Lines]",
          "27:  appsv1 \"k8s.io/api/apps/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:  \"github.com/argoproj/argo-cd/v2/common\"",
          "43:  \"github.com/argoproj/argo-cd/v2/pkg/apiclient/application\"",
          "46:  apps \"github.com/argoproj/argo-cd/v2/pkg/client/clientset/versioned/fake\"",
          "47:  appinformer \"github.com/argoproj/argo-cd/v2/pkg/client/informers/externalversions\"",
          "48:  \"github.com/argoproj/argo-cd/v2/reposerver/apiclient\"",
          "",
          "[Removed Lines]",
          "44:  appsv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "45:  appv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "",
          "[Added Lines]",
          "44:  \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:  objects []runtime.Object",
          "74: }",
          "80:  go func() {",
          "81:   for _, obj := range b.objects {",
          "83:    if ok {",
          "84:     oldVersion, err := strconv.Atoi(app.ResourceVersion)",
          "85:     if err != nil {",
          "",
          "[Removed Lines]",
          "76: func (b broadcasterMock) Subscribe(ch chan *appv1.ApplicationWatchEvent, filters ...func(event *appv1.ApplicationWatchEvent) bool) func() {",
          "82:    app, ok := obj.(*appsv1.Application)",
          "",
          "[Added Lines]",
          "75: func (b broadcasterMock) Subscribe(ch chan *v1alpha1.ApplicationWatchEvent, filters ...func(event *v1alpha1.ApplicationWatchEvent) bool) func() {",
          "81:    app, ok := obj.(*v1alpha1.Application)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:     }",
          "88:     clonedApp := app.DeepCopy()",
          "89:     clonedApp.ResourceVersion = strconv.Itoa(oldVersion + 1)",
          "91:    }",
          "92:   }",
          "93:  }()",
          "",
          "[Removed Lines]",
          "90:     ch <- &appsv1.ApplicationWatchEvent{Type: watch.Added, Application: *clonedApp}",
          "",
          "[Added Lines]",
          "89:     ch <- &v1alpha1.ApplicationWatchEvent{Type: watch.Added, Application: *clonedApp}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "98: func (broadcasterMock) OnUpdate(any, any) {}",
          "99: func (broadcasterMock) OnDelete(any)      {}",
          "103:   Repo: fakeRepoURL,",
          "104:  }",
          "105: }",
          "109:   Server: \"https://cluster-api.example.com\",",
          "110:   Name:   \"fake-cluster\",",
          "112:  }",
          "113: }",
          "",
          "[Removed Lines]",
          "101: func fakeRepo() *appsv1.Repository {",
          "102:  return &appsv1.Repository{",
          "107: func fakeCluster() *appsv1.Cluster {",
          "108:  return &appsv1.Cluster{",
          "111:   Config: appsv1.ClusterConfig{},",
          "",
          "[Added Lines]",
          "100: func fakeRepo() *v1alpha1.Repository {",
          "101:  return &v1alpha1.Repository{",
          "106: func fakeCluster() *v1alpha1.Cluster {",
          "107:  return &v1alpha1.Cluster{",
          "110:   Config: v1alpha1.ClusterConfig{},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:  mockRepoServiceClient.On(\"GenerateManifest\", mock.Anything, mock.Anything).Return(&apiclient.ManifestResponse{}, nil)",
          "141:  mockRepoServiceClient.On(\"GetAppDetails\", mock.Anything, mock.Anything).Return(&apiclient.RepoAppDetailsResponse{}, nil)",
          "142:  mockRepoServiceClient.On(\"TestRepository\", mock.Anything, mock.Anything).Return(&apiclient.TestRepositoryResponse{}, nil)",
          "144:  mockWithFilesClient := &mocks.RepoServerService_GenerateManifestWithFilesClient{}",
          "145:  mockWithFilesClient.On(\"Send\", mock.Anything).Return(nil)",
          "146:  mockWithFilesClient.On(\"CloseAndRecv\").Return(&apiclient.ManifestResponse{}, nil)",
          "147:  mockRepoServiceClient.On(\"GenerateManifestWithFiles\", mock.Anything, mock.Anything).Return(mockWithFilesClient, nil)",
          "150:  if isHelm {",
          "151:   mockRepoServiceClient.On(\"ResolveRevision\", mock.Anything, mock.Anything).Return(fakeResolveRevisionResponseHelm(), nil)",
          "",
          "[Removed Lines]",
          "143:  mockRepoServiceClient.On(\"GetRevisionMetadata\", mock.Anything, mock.Anything).Return(&appsv1.RevisionMetadata{}, nil)",
          "148:  mockRepoServiceClient.On(\"GetRevisionChartDetails\", mock.Anything, mock.Anything).Return(&appsv1.ChartDetails{}, nil)",
          "",
          "[Added Lines]",
          "142:  mockRepoServiceClient.On(\"GetRevisionMetadata\", mock.Anything, mock.Anything).Return(&v1alpha1.RevisionMetadata{}, nil)",
          "147:  mockRepoServiceClient.On(\"GetRevisionChartDetails\", mock.Anything, mock.Anything).Return(&v1alpha1.ChartDetails{}, nil)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "197:  mockRepoClient := &mocks.Clientset{RepoServerServiceClient: fakeRepoServerClient(false)}",
          "200:   ObjectMeta: metav1.ObjectMeta{Name: \"default\", Namespace: \"default\"},",
          "202:    SourceRepos:  []string{\"*\"},",
          "204:   },",
          "205:  }",
          "208:   ObjectMeta: metav1.ObjectMeta{Name: \"my-proj\", Namespace: \"default\"},",
          "210:    SourceRepos:  []string{\"*\"},",
          "212:   },",
          "213:  }",
          "215:   ObjectMeta: metav1.ObjectMeta{Name: \"proj-maint\", Namespace: \"default\"},",
          "217:    SourceRepos:  []string{\"*\"},",
          "220:   },",
          "221:  }",
          "223:   Kind:         \"allow\",",
          "224:   Schedule:     \"* * * * *\",",
          "225:   Duration:     \"1h\",",
          "",
          "[Removed Lines]",
          "199:  defaultProj := &appsv1.AppProject{",
          "201:   Spec: appsv1.AppProjectSpec{",
          "203:    Destinations: []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "207:  myProj := &appsv1.AppProject{",
          "209:   Spec: appsv1.AppProjectSpec{",
          "211:    Destinations: []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "214:  projWithSyncWindows := &appsv1.AppProject{",
          "216:   Spec: appsv1.AppProjectSpec{",
          "218:    Destinations: []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "219:    SyncWindows:  appsv1.SyncWindows{},",
          "222:  matchingWindow := &appsv1.SyncWindow{",
          "",
          "[Added Lines]",
          "198:  defaultProj := &v1alpha1.AppProject{",
          "200:   Spec: v1alpha1.AppProjectSpec{",
          "202:    Destinations: []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "206:  myProj := &v1alpha1.AppProject{",
          "208:   Spec: v1alpha1.AppProjectSpec{",
          "210:    Destinations: []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "213:  projWithSyncWindows := &v1alpha1.AppProject{",
          "215:   Spec: v1alpha1.AppProjectSpec{",
          "217:    Destinations: []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "218:    SyncWindows:  v1alpha1.SyncWindows{},",
          "221:  matchingWindow := &v1alpha1.SyncWindow{",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "261:  appStateCache := appstate.NewCache(cache.NewCache(cache.NewInMemoryCache(time.Hour)), time.Hour)",
          "263:  for _, obj := range objects {",
          "265:   if ok {",
          "267:    require.NoError(t, err)",
          "271:    for i, res := range app.Status.Resources {",
          "274:       Group:     res.Group,",
          "275:       Kind:      res.Kind,",
          "276:       Version:   res.Version,",
          "",
          "[Removed Lines]",
          "264:   app, ok := obj.(*appsv1.Application)",
          "266:    err := appStateCache.SetAppManagedResources(app.Name, []*appsv1.ResourceDiff{})",
          "270:    nodes := make([]appsv1.ResourceNode, len(app.Status.Resources))",
          "272:     nodes[i] = appsv1.ResourceNode{",
          "273:      ResourceRef: appsv1.ResourceRef{",
          "",
          "[Added Lines]",
          "263:   app, ok := obj.(*v1alpha1.Application)",
          "265:    err := appStateCache.SetAppManagedResources(app.Name, []*v1alpha1.ResourceDiff{})",
          "269:    nodes := make([]v1alpha1.ResourceNode, len(app.Status.Resources))",
          "271:     nodes[i] = v1alpha1.ResourceNode{",
          "272:      ResourceRef: v1alpha1.ResourceRef{",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "280:      },",
          "281:     }",
          "282:    }",
          "284:     Nodes: nodes,",
          "285:    })",
          "286:    require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "283:    err = appStateCache.SetAppResourcesTree(app.Name, &appsv1.ApplicationTree{",
          "",
          "[Added Lines]",
          "282:    err = appStateCache.SetAppResourcesTree(app.Name, &v1alpha1.ApplicationTree{",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "361:  mockRepoClient := &mocks.Clientset{RepoServerServiceClient: fakeRepoServerClient(false)}",
          "364:   ObjectMeta: metav1.ObjectMeta{Name: \"default\", Namespace: \"default\"},",
          "366:    SourceRepos:  []string{\"*\"},",
          "368:   },",
          "369:  }",
          "371:   ObjectMeta: metav1.ObjectMeta{Name: \"my-proj\", Namespace: \"default\"},",
          "373:    SourceRepos:  []string{\"*\"},",
          "375:   },",
          "376:  }",
          "378:   ObjectMeta: metav1.ObjectMeta{Name: \"proj-maint\", Namespace: \"default\"},",
          "380:    SourceRepos:  []string{\"*\"},",
          "383:   },",
          "384:  }",
          "386:   Kind:         \"allow\",",
          "387:   Schedule:     \"* * * * *\",",
          "388:   Duration:     \"1h\",",
          "",
          "[Removed Lines]",
          "363:  defaultProj := &appsv1.AppProject{",
          "365:   Spec: appsv1.AppProjectSpec{",
          "367:    Destinations: []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "370:  myProj := &appsv1.AppProject{",
          "372:   Spec: appsv1.AppProjectSpec{",
          "374:    Destinations: []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "377:  projWithSyncWindows := &appsv1.AppProject{",
          "379:   Spec: appsv1.AppProjectSpec{",
          "381:    Destinations: []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "382:    SyncWindows:  appsv1.SyncWindows{},",
          "385:  matchingWindow := &appsv1.SyncWindow{",
          "",
          "[Added Lines]",
          "362:  defaultProj := &v1alpha1.AppProject{",
          "364:   Spec: v1alpha1.AppProjectSpec{",
          "366:    Destinations: []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "369:  myProj := &v1alpha1.AppProject{",
          "371:   Spec: v1alpha1.AppProjectSpec{",
          "373:    Destinations: []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "376:  projWithSyncWindows := &v1alpha1.AppProject{",
          "378:   Spec: v1alpha1.AppProjectSpec{",
          "380:    Destinations: []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "381:    SyncWindows:  v1alpha1.SyncWindows{},",
          "384:  matchingWindow := &v1alpha1.SyncWindow{",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "423:  appStateCache := appstate.NewCache(cache.NewCache(cache.NewInMemoryCache(time.Hour)), time.Hour)",
          "425:  for _, obj := range objects {",
          "427:   if ok {",
          "429:    require.NoError(b, err)",
          "433:    for i, res := range app.Status.Resources {",
          "436:       Group:     res.Group,",
          "437:       Kind:      res.Kind,",
          "438:       Version:   res.Version,",
          "",
          "[Removed Lines]",
          "426:   app, ok := obj.(*appsv1.Application)",
          "428:    err := appStateCache.SetAppManagedResources(app.Name, []*appsv1.ResourceDiff{})",
          "432:    nodes := make([]appsv1.ResourceNode, len(app.Status.Resources))",
          "434:     nodes[i] = appsv1.ResourceNode{",
          "435:      ResourceRef: appsv1.ResourceRef{",
          "",
          "[Added Lines]",
          "425:   app, ok := obj.(*v1alpha1.Application)",
          "427:    err := appStateCache.SetAppManagedResources(app.Name, []*v1alpha1.ResourceDiff{})",
          "431:    nodes := make([]v1alpha1.ResourceNode, len(app.Status.Resources))",
          "433:     nodes[i] = v1alpha1.ResourceNode{",
          "434:      ResourceRef: v1alpha1.ResourceRef{",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "442:      },",
          "443:     }",
          "444:    }",
          "446:     Nodes: nodes,",
          "447:    })",
          "448:    require.NoError(b, err)",
          "",
          "[Removed Lines]",
          "445:    err = appStateCache.SetAppResourcesTree(app.Name, &appsv1.ApplicationTree{",
          "",
          "[Added Lines]",
          "444:    err = appStateCache.SetAppResourcesTree(app.Name, &v1alpha1.ApplicationTree{",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "539:     server: https://cluster-api.example.com",
          "540: `",
          "543:  return createTestApp(fakeAppWithDestName, opts...)",
          "544: }",
          "547:  return createTestApp(fakeApp, opts...)",
          "548: }",
          "551:  return createTestApp(fakeAppWithAnnotations, opts...)",
          "552: }",
          "556:  err := yaml.Unmarshal([]byte(testApp), &app)",
          "557:  if err != nil {",
          "558:   panic(err)",
          "",
          "[Removed Lines]",
          "542: func newTestAppWithDestName(opts ...func(app *appsv1.Application)) *appsv1.Application {",
          "546: func newTestApp(opts ...func(app *appsv1.Application)) *appsv1.Application {",
          "550: func newTestAppWithAnnotations(opts ...func(app *appsv1.Application)) *appsv1.Application {",
          "554: func createTestApp(testApp string, opts ...func(app *appsv1.Application)) *appsv1.Application {",
          "555:  var app appsv1.Application",
          "",
          "[Added Lines]",
          "541: func newTestAppWithDestName(opts ...func(app *v1alpha1.Application)) *v1alpha1.Application {",
          "545: func newTestApp(opts ...func(app *v1alpha1.Application)) *v1alpha1.Application {",
          "549: func newTestAppWithAnnotations(opts ...func(app *v1alpha1.Application)) *v1alpha1.Application {",
          "553: func createTestApp(testApp string, opts ...func(app *v1alpha1.Application)) *v1alpha1.Application {",
          "554:  var app v1alpha1.Application",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "618:  ctx context.Context",
          "619: }",
          "622:  return nil",
          "623: }",
          "",
          "[Removed Lines]",
          "621: func (t *TestResourceTreeServer) Send(tree *appsv1.ApplicationTree) error {",
          "",
          "[Added Lines]",
          "620: func (t *TestResourceTreeServer) Send(tree *v1alpha1.ApplicationTree) error {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "692:   _ = enf.SetBuiltinPolicy(assets.BuiltinPolicyCSV)",
          "693:   enf.SetDefaultRole(\"role:none\")",
          "694:  }",
          "696:   TypeMeta: metav1.TypeMeta{",
          "697:    APIVersion: \"apps/v1\",",
          "698:    Kind:       \"Deployment\",",
          "",
          "[Removed Lines]",
          "695:  deployment := k8sappsv1.Deployment{",
          "",
          "[Added Lines]",
          "694:  deployment := appsv1.Deployment{",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "702:    Namespace: \"test\",",
          "703:   },",
          "704:  }",
          "706:   app.Name = \"test\"",
          "708:    {",
          "709:     Group:     deployment.GroupVersionKind().Group,",
          "710:     Kind:      deployment.GroupVersionKind().Kind,",
          "",
          "[Removed Lines]",
          "705:  testApp := newTestApp(func(app *appsv1.Application) {",
          "707:   app.Status.Resources = []appsv1.ResourceStatus{",
          "",
          "[Added Lines]",
          "704:  testApp := newTestApp(func(app *v1alpha1.Application) {",
          "706:   app.Status.Resources = []v1alpha1.ResourceStatus{",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "714:     Status:    \"Synced\",",
          "715:    },",
          "716:   }",
          "718:    {",
          "719:     ID: 0,",
          "721:      TargetRevision: \"something-old\",",
          "722:     },",
          "723:    },",
          "724:   }",
          "725:  })",
          "727:   app.Name = \"test-helm\"",
          "728:   app.Spec.Source.Path = \"\"",
          "729:   app.Spec.Source.Chart = \"test\"",
          "731:    {",
          "732:     Group:     deployment.GroupVersionKind().Group,",
          "733:     Kind:      deployment.GroupVersionKind().Kind,",
          "",
          "[Removed Lines]",
          "717:   app.Status.History = []appsv1.RevisionHistory{",
          "720:     Source: appsv1.ApplicationSource{",
          "726:  testHelmApp := newTestApp(func(app *appsv1.Application) {",
          "730:   app.Status.Resources = []appsv1.ResourceStatus{",
          "",
          "[Added Lines]",
          "716:   app.Status.History = []v1alpha1.RevisionHistory{",
          "719:     Source: v1alpha1.ApplicationSource{",
          "725:  testHelmApp := newTestApp(func(app *v1alpha1.Application) {",
          "729:   app.Status.Resources = []v1alpha1.ResourceStatus{",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "737:     Status:    \"Synced\",",
          "738:    },",
          "739:   }",
          "741:    {",
          "742:     ID: 0,",
          "744:      TargetRevision: \"something-old\",",
          "745:     },",
          "746:    },",
          "747:   }",
          "748:  })",
          "750:   app.Name = \"test-multi\"",
          "753:     TargetRevision: \"something-old\",",
          "754:    },",
          "756:     TargetRevision: \"something-old\",",
          "757:    },",
          "758:   }",
          "760:    {",
          "761:     Group:     deployment.GroupVersionKind().Group,",
          "762:     Kind:      deployment.GroupVersionKind().Kind,",
          "",
          "[Removed Lines]",
          "740:   app.Status.History = []appsv1.RevisionHistory{",
          "743:     Source: appsv1.ApplicationSource{",
          "749:  testAppMulti := newTestApp(func(app *appsv1.Application) {",
          "751:   app.Spec.Sources = appsv1.ApplicationSources{",
          "752:    appsv1.ApplicationSource{",
          "755:    appsv1.ApplicationSource{",
          "759:   app.Status.Resources = []appsv1.ResourceStatus{",
          "",
          "[Added Lines]",
          "739:   app.Status.History = []v1alpha1.RevisionHistory{",
          "742:     Source: v1alpha1.ApplicationSource{",
          "748:  testAppMulti := newTestApp(func(app *v1alpha1.Application) {",
          "750:   app.Spec.Sources = v1alpha1.ApplicationSources{",
          "751:    v1alpha1.ApplicationSource{",
          "754:    v1alpha1.ApplicationSource{",
          "758:   app.Status.Resources = []v1alpha1.ResourceStatus{",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "766:     Status:    \"Synced\",",
          "767:    },",
          "768:   }",
          "770:    {",
          "771:     ID: 1,",
          "774:       TargetRevision: \"something-old\",",
          "775:      },",
          "777:       TargetRevision: \"something-old\",",
          "778:      },",
          "779:     },",
          "",
          "[Removed Lines]",
          "769:   app.Status.History = []appsv1.RevisionHistory{",
          "772:     Sources: appsv1.ApplicationSources{",
          "773:      appsv1.ApplicationSource{",
          "776:      appsv1.ApplicationSource{",
          "",
          "[Added Lines]",
          "768:   app.Status.History = []v1alpha1.RevisionHistory{",
          "771:     Sources: v1alpha1.ApplicationSources{",
          "772:      v1alpha1.ApplicationSource{",
          "775:      v1alpha1.ApplicationSource{",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "825:  })",
          "827:  t.Run(\"UpdateSpec\", func(t *testing.T) {",
          "831:   }})",
          "832:   require.NoError(t, err)",
          "836:   }})",
          "837:   require.EqualError(t, err, common.PermissionDeniedAPIError.Error(), \"error message must be _only_ the permission error, to avoid leaking information about app existence\")",
          "841:   }})",
          "842:   require.EqualError(t, err, common.PermissionDeniedAPIError.Error(), \"error message must be _only_ the permission error, to avoid leaking information about app existence\")",
          "846:   }})",
          "847:   assert.EqualError(t, err, \"rpc error: code = NotFound desc = applications.argoproj.io \\\"doest-not-exist\\\" not found\", \"when the request specifies a project, we can return the standard k8s error message\")",
          "848:  })",
          "",
          "[Removed Lines]",
          "828:   _, err := appServer.UpdateSpec(adminCtx, &application.ApplicationUpdateSpecRequest{Name: ptr.To(\"test\"), Spec: &appsv1.ApplicationSpec{",
          "829:    Destination: appsv1.ApplicationDestination{Namespace: \"default\", Server: \"https://cluster-api.example.com\"},",
          "830:    Source:      &appsv1.ApplicationSource{RepoURL: \"https://some-fake-source\", Path: \".\"},",
          "833:   _, err = appServer.UpdateSpec(noRoleCtx, &application.ApplicationUpdateSpecRequest{Name: ptr.To(\"test\"), Spec: &appsv1.ApplicationSpec{",
          "834:    Destination: appsv1.ApplicationDestination{Namespace: \"default\", Server: \"https://cluster-api.example.com\"},",
          "835:    Source:      &appsv1.ApplicationSource{RepoURL: \"https://some-fake-source\", Path: \".\"},",
          "838:   _, err = appServer.UpdateSpec(adminCtx, &application.ApplicationUpdateSpecRequest{Name: ptr.To(\"doest-not-exist\"), Spec: &appsv1.ApplicationSpec{",
          "839:    Destination: appsv1.ApplicationDestination{Namespace: \"default\", Server: \"https://cluster-api.example.com\"},",
          "840:    Source:      &appsv1.ApplicationSource{RepoURL: \"https://some-fake-source\", Path: \".\"},",
          "843:   _, err = appServer.UpdateSpec(adminCtx, &application.ApplicationUpdateSpecRequest{Name: ptr.To(\"doest-not-exist\"), Project: ptr.To(\"test\"), Spec: &appsv1.ApplicationSpec{",
          "844:    Destination: appsv1.ApplicationDestination{Namespace: \"default\", Server: \"https://cluster-api.example.com\"},",
          "845:    Source:      &appsv1.ApplicationSource{RepoURL: \"https://some-fake-source\", Path: \".\"},",
          "",
          "[Added Lines]",
          "827:   _, err := appServer.UpdateSpec(adminCtx, &application.ApplicationUpdateSpecRequest{Name: ptr.To(\"test\"), Spec: &v1alpha1.ApplicationSpec{",
          "828:    Destination: v1alpha1.ApplicationDestination{Namespace: \"default\", Server: \"https://cluster-api.example.com\"},",
          "829:    Source:      &v1alpha1.ApplicationSource{RepoURL: \"https://some-fake-source\", Path: \".\"},",
          "832:   _, err = appServer.UpdateSpec(noRoleCtx, &application.ApplicationUpdateSpecRequest{Name: ptr.To(\"test\"), Spec: &v1alpha1.ApplicationSpec{",
          "833:    Destination: v1alpha1.ApplicationDestination{Namespace: \"default\", Server: \"https://cluster-api.example.com\"},",
          "834:    Source:      &v1alpha1.ApplicationSource{RepoURL: \"https://some-fake-source\", Path: \".\"},",
          "837:   _, err = appServer.UpdateSpec(adminCtx, &application.ApplicationUpdateSpecRequest{Name: ptr.To(\"doest-not-exist\"), Spec: &v1alpha1.ApplicationSpec{",
          "838:    Destination: v1alpha1.ApplicationDestination{Namespace: \"default\", Server: \"https://cluster-api.example.com\"},",
          "839:    Source:      &v1alpha1.ApplicationSource{RepoURL: \"https://some-fake-source\", Path: \".\"},",
          "842:   _, err = appServer.UpdateSpec(adminCtx, &application.ApplicationUpdateSpecRequest{Name: ptr.To(\"doest-not-exist\"), Project: ptr.To(\"test\"), Spec: &v1alpha1.ApplicationSpec{",
          "843:    Destination: v1alpha1.ApplicationDestination{Namespace: \"default\", Server: \"https://cluster-api.example.com\"},",
          "844:    Source:      &v1alpha1.ApplicationSource{RepoURL: \"https://some-fake-source\", Path: \".\"},",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1090:  app, err := appIf.Get(context.Background(), \"test\", metav1.GetOptions{})",
          "1091:  require.NoError(t, err)",
          "1094:  _, err = appIf.Update(context.Background(), app, metav1.UpdateOptions{})",
          "1095:  require.NoError(t, err)",
          "1096: }",
          "",
          "[Removed Lines]",
          "1093:  app.Status.OperationState = &appsv1.OperationState{Phase: synccommon.OperationRunning, Operation: appsv1.Operation{Sync: &appsv1.SyncOperation{}}}",
          "",
          "[Added Lines]",
          "1092:  app.Status.OperationState = &v1alpha1.OperationState{Phase: synccommon.OperationRunning, Operation: v1alpha1.Operation{Sync: &v1alpha1.SyncOperation{}}}",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1108: }",
          "1110: func TestListAppsInNamespaceWithLabels(t *testing.T) {",
          "1112:   app.Name = \"App1\"",
          "1113:   app.ObjectMeta.Namespace = \"test-namespace\"",
          "1114:   app.SetLabels(map[string]string{\"key1\": \"value1\", \"key2\": \"value1\"})",
          "1116:   app.Name = \"App2\"",
          "1117:   app.ObjectMeta.Namespace = \"test-namespace\"",
          "1118:   app.SetLabels(map[string]string{\"key1\": \"value2\"})",
          "1120:   app.Name = \"App3\"",
          "1121:   app.ObjectMeta.Namespace = \"test-namespace\"",
          "1122:   app.SetLabels(map[string]string{\"key1\": \"value3\"})",
          "",
          "[Removed Lines]",
          "1111:  appServer := newTestAppServer(t, newTestApp(func(app *appsv1.Application) {",
          "1115:  }), newTestApp(func(app *appsv1.Application) {",
          "1119:  }), newTestApp(func(app *appsv1.Application) {",
          "",
          "[Added Lines]",
          "1110:  appServer := newTestAppServer(t, newTestApp(func(app *v1alpha1.Application) {",
          "1114:  }), newTestApp(func(app *v1alpha1.Application) {",
          "1118:  }), newTestApp(func(app *v1alpha1.Application) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1129: }",
          "1131: func TestListAppsInDefaultNSWithLabels(t *testing.T) {",
          "1133:   app.Name = \"App1\"",
          "1134:   app.SetLabels(map[string]string{\"key1\": \"value1\", \"key2\": \"value1\"})",
          "1136:   app.Name = \"App2\"",
          "1137:   app.SetLabels(map[string]string{\"key1\": \"value2\"})",
          "1139:   app.Name = \"App3\"",
          "1140:   app.SetLabels(map[string]string{\"key1\": \"value3\"})",
          "1141:  }))",
          "",
          "[Removed Lines]",
          "1132:  appServer := newTestAppServer(t, newTestApp(func(app *appsv1.Application) {",
          "1135:  }), newTestApp(func(app *appsv1.Application) {",
          "1138:  }), newTestApp(func(app *appsv1.Application) {",
          "",
          "[Added Lines]",
          "1131:  appServer := newTestAppServer(t, newTestApp(func(app *v1alpha1.Application) {",
          "1134:  }), newTestApp(func(app *v1alpha1.Application) {",
          "1137:  }), newTestApp(func(app *v1alpha1.Application) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1227: }",
          "1229: func TestListAppWithProjects(t *testing.T) {",
          "1231:   app.Name = \"App1\"",
          "1232:   app.Spec.Project = \"test-project1\"",
          "1234:   app.Name = \"App2\"",
          "1235:   app.Spec.Project = \"test-project2\"",
          "1237:   app.Name = \"App3\"",
          "1238:   app.Spec.Project = \"test-project3\"",
          "1239:  }))",
          "",
          "[Removed Lines]",
          "1230:  appServer := newTestAppServer(t, newTestApp(func(app *appsv1.Application) {",
          "1233:  }), newTestApp(func(app *appsv1.Application) {",
          "1236:  }), newTestApp(func(app *appsv1.Application) {",
          "",
          "[Added Lines]",
          "1229:  appServer := newTestAppServer(t, newTestApp(func(app *v1alpha1.Application) {",
          "1232:  }), newTestApp(func(app *v1alpha1.Application) {",
          "1235:  }), newTestApp(func(app *v1alpha1.Application) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1278: }",
          "1280: func TestListApps(t *testing.T) {",
          "1282:   app.Name = \"bcd\"",
          "1284:   app.Name = \"abc\"",
          "1286:   app.Name = \"def\"",
          "1287:  }))",
          "",
          "[Removed Lines]",
          "1281:  appServer := newTestAppServer(t, newTestApp(func(app *appsv1.Application) {",
          "1283:  }), newTestApp(func(app *appsv1.Application) {",
          "1285:  }), newTestApp(func(app *appsv1.Application) {",
          "",
          "[Added Lines]",
          "1280:  appServer := newTestAppServer(t, newTestApp(func(app *v1alpha1.Application) {",
          "1282:  }), newTestApp(func(app *v1alpha1.Application) {",
          "1284:  }), newTestApp(func(app *v1alpha1.Application) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1308:  for projectId := 0; projectId < 100; projectId++ {",
          "1309:   projectName := fmt.Sprintf(\"proj-%d\", projectId)",
          "1310:   for appId := 0; appId < 100; appId++ {",
          "1312:     app.Name = fmt.Sprintf(\"app-%d-%d\", projectId, appId)",
          "1313:     app.Spec.Project = projectName",
          "1314:    }))",
          "",
          "[Removed Lines]",
          "1311:    objects = append(objects, newTestApp(func(app *appsv1.Application) {",
          "",
          "[Added Lines]",
          "1310:    objects = append(objects, newTestApp(func(app *v1alpha1.Application) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1338:  assert.Len(t, names, 300)",
          "1339: }",
          "1343:  for i := 0; i < num; i++ {",
          "1345:    app.Name = fmt.Sprintf(\"test-app%.6d\", i)",
          "1346:   }))",
          "1347:  }",
          "",
          "[Removed Lines]",
          "1341: func generateTestApp(num int) []*appsv1.Application {",
          "1342:  apps := []*appsv1.Application{}",
          "1344:   apps = append(apps, newTestApp(func(app *appsv1.Application) {",
          "",
          "[Added Lines]",
          "1340: func generateTestApp(num int) []*v1alpha1.Application {",
          "1341:  apps := []*v1alpha1.Application{}",
          "1343:   apps = append(apps, newTestApp(func(app *v1alpha1.Application) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1498: func TestCreateAppWithOperation(t *testing.T) {",
          "1499:  appServer := newTestAppServer(t)",
          "1500:  testApp := newTestAppWithDestName()",
          "1503:    Manifests: []string{",
          "1504:     \"test\",",
          "1505:    },",
          "",
          "[Removed Lines]",
          "1501:  testApp.Operation = &appsv1.Operation{",
          "1502:   Sync: &appsv1.SyncOperation{",
          "",
          "[Added Lines]",
          "1500:  testApp.Operation = &v1alpha1.Operation{",
          "1501:   Sync: &v1alpha1.SyncOperation{",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1567:   return true, nil, nil",
          "1568:  })",
          "1569:  fakeAppCs.AddReactor(\"get\", \"applications\", func(action kubetesting.Action) (handled bool, ret runtime.Object, err error) {",
          "1571:  })",
          "1572:  appServer.appclientset = fakeAppCs",
          "",
          "[Removed Lines]",
          "1570:   return true, &appsv1.Application{Spec: appsv1.ApplicationSpec{Source: &appsv1.ApplicationSource{}}}, nil",
          "",
          "[Added Lines]",
          "1569:   return true, &v1alpha1.Application{Spec: v1alpha1.ApplicationSpec{Source: &v1alpha1.ApplicationSource{}}}, nil",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1778:  assert.Regexp(t, \".*initiated sync to HEAD \\\\([0-9A-Fa-f]{40}\\\\).*\", event.Message)",
          "1782:   Operation: *app.Operation,",
          "1783:   Phase:     synccommon.OperationRunning,",
          "1784:   StartedAt: metav1.NewTime(time.Now()),",
          "",
          "[Removed Lines]",
          "1781:  app.Status.OperationState = &appsv1.OperationState{",
          "",
          "[Added Lines]",
          "1780:  app.Status.OperationState = &v1alpha1.OperationState{",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1851: func TestRollbackApp(t *testing.T) {",
          "1852:  testApp := newTestApp()",
          "1854:   ID:       1,",
          "1855:   Revision: \"abc\",",
          "1856:   Source:   *testApp.Spec.Source.DeepCopy(),",
          "",
          "[Removed Lines]",
          "1853:  testApp.Status.History = []appsv1.RevisionHistory{{",
          "",
          "[Added Lines]",
          "1852:  testApp.Status.History = []v1alpha1.RevisionHistory{{",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2008:  testApp := newTestApp()",
          "2009:  testApp.ObjectMeta.ResourceVersion = \"1\"",
          "2010:  testApp.Spec.Project = \"test-proj\"",
          "2012:   ObjectMeta: metav1.ObjectMeta{",
          "2013:    Name:      \"test-proj\",",
          "2014:    Namespace: testNamespace,",
          "",
          "[Removed Lines]",
          "2011:  testProj := &appsv1.AppProject{",
          "",
          "[Added Lines]",
          "2010:  testProj := &v1alpha1.AppProject{",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2017:  appServer := newTestAppServer(t, testApp, testProj)",
          "2018:  fakeClientSet := appServer.appclientset.(*apps.Clientset)",
          "2019:  fakeClientSet.AddReactor(\"get\", \"applications\", func(action kubetesting.Action) (handled bool, ret runtime.Object, err error) {",
          "2021:  })",
          "2022:  t.Run(\"NoError\", func(t *testing.T) {",
          "2023:   err := appServer.getCachedAppState(context.Background(), testApp, func() error {",
          "",
          "[Removed Lines]",
          "2020:   return true, &appsv1.Application{Spec: appsv1.ApplicationSpec{Source: &appsv1.ApplicationSource{}}}, nil",
          "",
          "[Added Lines]",
          "2019:   return true, &v1alpha1.Application{Spec: v1alpha1.ApplicationSpec{Source: &v1alpha1.ApplicationSource{}}}, nil",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2043:     return true, testApp, nil",
          "2044:    })",
          "2045:    fakeClientSet.AddReactor(\"get\", \"applications\", func(action kubetesting.Action) (handled bool, ret runtime.Object, err error) {",
          "2047:    })",
          "2048:    fakeClientSet.Unlock()",
          "2049:    fakeClientSet.AddWatchReactor(\"applications\", func(action kubetesting.Action) (handled bool, ret watch.Interface, err error) {",
          "",
          "[Removed Lines]",
          "2046:     return true, &appsv1.Application{Spec: appsv1.ApplicationSpec{Source: &appsv1.ApplicationSource{}}}, nil",
          "",
          "[Added Lines]",
          "2045:     return true, &v1alpha1.Application{Spec: v1alpha1.ApplicationSpec{Source: &v1alpha1.ApplicationSource{}}}, nil",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2105: }",
          "2107: func TestLogsGetSelectedPod(t *testing.T) {",
          "2113:   {ResourceRef: deployment, ParentRefs: nil},",
          "2116:   {ResourceRef: pod, ParentRefs: nil},",
          "2117:  }",
          "2118:  appName := \"appName\"",
          "",
          "[Removed Lines]",
          "2108:  deployment := appsv1.ResourceRef{Group: \"\", Version: \"v1\", Kind: \"Deployment\", Name: \"deployment\", UID: \"1\"}",
          "2109:  rs := appsv1.ResourceRef{Group: \"\", Version: \"v1\", Kind: \"ReplicaSet\", Name: \"rs\", UID: \"2\"}",
          "2110:  podRS := appsv1.ResourceRef{Group: \"\", Version: \"v1\", Kind: \"Pod\", Name: \"podrs\", UID: \"3\"}",
          "2111:  pod := appsv1.ResourceRef{Group: \"\", Version: \"v1\", Kind: \"Pod\", Name: \"pod\", UID: \"4\"}",
          "2112:  treeNodes := []appsv1.ResourceNode{",
          "2114:   {ResourceRef: rs, ParentRefs: []appsv1.ResourceRef{deployment}},",
          "2115:   {ResourceRef: podRS, ParentRefs: []appsv1.ResourceRef{rs}},",
          "",
          "[Added Lines]",
          "2107:  deployment := v1alpha1.ResourceRef{Group: \"\", Version: \"v1\", Kind: \"Deployment\", Name: \"deployment\", UID: \"1\"}",
          "2108:  rs := v1alpha1.ResourceRef{Group: \"\", Version: \"v1\", Kind: \"ReplicaSet\", Name: \"rs\", UID: \"2\"}",
          "2109:  podRS := v1alpha1.ResourceRef{Group: \"\", Version: \"v1\", Kind: \"Pod\", Name: \"podrs\", UID: \"3\"}",
          "2110:  pod := v1alpha1.ResourceRef{Group: \"\", Version: \"v1\", Kind: \"Pod\", Name: \"pod\", UID: \"4\"}",
          "2111:  treeNodes := []v1alpha1.ResourceNode{",
          "2113:   {ResourceRef: rs, ParentRefs: []v1alpha1.ResourceRef{deployment}},",
          "2114:   {ResourceRef: podRS, ParentRefs: []v1alpha1.ResourceRef{rs}},",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2222: func createAppServerWithMaxLodLogs(t *testing.T, podNumber int, maxPodLogsToRender ...int64) (*Server, context.Context) {",
          "2223:  t.Helper()",
          "2224:  runtimeObjects := make([]runtime.Object, podNumber+1)",
          "2227:  for i := 0; i < podNumber; i++ {",
          "2228:   pod := corev1.Pod{",
          "",
          "[Removed Lines]",
          "2225:  resources := make([]appsv1.ResourceStatus, podNumber)",
          "",
          "[Added Lines]",
          "2224:  resources := make([]v1alpha1.ResourceStatus, podNumber)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2235:     Namespace: \"test\",",
          "2236:    },",
          "2237:   }",
          "2239:    Group:     pod.GroupVersionKind().Group,",
          "2240:    Kind:      pod.GroupVersionKind().Kind,",
          "2241:    Version:   pod.GroupVersionKind().Version,",
          "",
          "[Removed Lines]",
          "2238:   resources[i] = appsv1.ResourceStatus{",
          "",
          "[Added Lines]",
          "2237:   resources[i] = v1alpha1.ResourceStatus{",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2246:   runtimeObjects[i] = kube.MustToUnstructured(&pod)",
          "2247:  }",
          "2250:   app.Name = \"test\"",
          "2251:   app.Status.Resources = resources",
          "2252:  })",
          "",
          "[Removed Lines]",
          "2249:  testApp := newTestApp(func(app *appsv1.Application) {",
          "",
          "[Added Lines]",
          "2248:  testApp := newTestApp(func(app *v1alpha1.Application) {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2278:   a, err := appServer.appLister.Applications(appNs).Get(aName)",
          "2279:   require.NoError(t, err)",
          "2280:   a = a.DeepCopy()",
          "2282:    a.SetAnnotations(map[string]string{})",
          "2283:    a.SetResourceVersion(\"999\")",
          "2284:    _, err = appServer.appclientset.ArgoprojV1alpha1().Applications(a.Namespace).Update(",
          "",
          "[Removed Lines]",
          "2281:   if a.GetAnnotations() != nil && a.GetAnnotations()[appsv1.AnnotationKeyRefresh] != \"\" {",
          "",
          "[Added Lines]",
          "2280:   if a.GetAnnotations() != nil && a.GetAnnotations()[v1alpha1.AnnotationKeyRefresh] != \"\" {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2307:  _, err := appServer.Get(context.Background(), &application.ApplicationQuery{",
          "2308:   Name:    &testApp.Name,",
          "2310:  })",
          "2311:  require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "2309:   Refresh: ptr.To(string(appsv1.RefreshTypeNormal)),",
          "",
          "[Added Lines]",
          "2308:   Refresh: ptr.To(string(v1alpha1.RefreshTypeNormal)),",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2342:  _, err := appServer.Get(context.Background(), &application.ApplicationQuery{",
          "2343:   Name:    &testApp.Name,",
          "2345:  })",
          "2346:  require.NoError(t, err)",
          "2347:  require.NotNil(t, getAppDetailsQuery)",
          "",
          "[Removed Lines]",
          "2344:   Refresh: ptr.To(string(appsv1.RefreshTypeHard)),",
          "",
          "[Added Lines]",
          "2343:   Refresh: ptr.To(string(v1alpha1.RefreshTypeHard)),",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2361:  cacheClient := cacheutil.NewCache(cacheutil.NewInMemoryCache(1 * time.Hour))",
          "2363:  testApp := newTestApp()",
          "2366:   Group:     \"apps\",",
          "2367:   Kind:      \"Deployment\",",
          "2368:   Name:      \"guestbook\",",
          "",
          "[Removed Lines]",
          "2364:  testApp.Status.ResourceHealthSource = appsv1.ResourceHealthLocationAppTree",
          "2365:  testApp.Status.Resources = []appsv1.ResourceStatus{{",
          "",
          "[Added Lines]",
          "2363:  testApp.Status.ResourceHealthSource = v1alpha1.ResourceHealthLocationAppTree",
          "2364:  testApp.Status.Resources = []v1alpha1.ResourceStatus{{",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2375:  }}",
          "2376:  appServer := newTestAppServer(t, testApp)",
          "2377:  appStateCache := appstate.NewCache(cacheClient, time.Minute)",
          "2380:    Group:     \"apps\",",
          "2381:    Kind:      \"Deployment\",",
          "2382:    Name:      \"guestbook\",",
          "2383:    Namespace: \"default\",",
          "2384:   },",
          "2386:    Status: health.HealthStatusDegraded,",
          "2387:   },",
          "2388:  }}})",
          "",
          "[Removed Lines]",
          "2378:  err := appStateCache.SetAppResourcesTree(testApp.Name, &appsv1.ApplicationTree{Nodes: []appsv1.ResourceNode{{",
          "2379:   ResourceRef: appsv1.ResourceRef{",
          "2385:   Health: &appsv1.HealthStatus{",
          "",
          "[Added Lines]",
          "2377:  err := appStateCache.SetAppResourcesTree(testApp.Name, &v1alpha1.ApplicationTree{Nodes: []v1alpha1.ResourceNode{{",
          "2378:   ResourceRef: v1alpha1.ResourceRef{",
          "2384:   Health: &v1alpha1.HealthStatus{",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2408:  action := \"create-job\"",
          "2409:  uid := \"1\"",
          "2412:   Group:     group,",
          "2413:   Kind:      kind,",
          "2414:   Name:      resourceName,",
          "",
          "[Removed Lines]",
          "2411:  resources := []appsv1.ResourceStatus{{",
          "",
          "[Added Lines]",
          "2410:  resources := []v1alpha1.ResourceStatus{{",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2419:  appStateCache := appstate.NewCache(cacheClient, time.Minute)",
          "2423:    Group:     group,",
          "2424:    Kind:      kind,",
          "2425:    Version:   version,",
          "",
          "[Removed Lines]",
          "2421:  nodes := []appsv1.ResourceNode{{",
          "2422:   ResourceRef: appsv1.ResourceRef{",
          "",
          "[Added Lines]",
          "2420:  nodes := []v1alpha1.ResourceNode{{",
          "2421:   ResourceRef: v1alpha1.ResourceRef{",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2429:   },",
          "2430:  }}",
          "2433:   ObjectMeta: metav1.ObjectMeta{Name: \"createJobDenyingProj\", Namespace: \"default\"},",
          "2435:    SourceRepos:                []string{\"*\"},",
          "2437:    NamespaceResourceWhitelist: []metav1.GroupKind{{Group: \"never\", Kind: \"mind\"}},",
          "2438:   },",
          "2439:  }",
          "",
          "[Removed Lines]",
          "2432:  createJobDenyingProj := &appsv1.AppProject{",
          "2434:   Spec: appsv1.AppProjectSpec{",
          "2436:    Destinations:               []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "[Added Lines]",
          "2431:  createJobDenyingProj := &v1alpha1.AppProject{",
          "2433:   Spec: v1alpha1.AppProjectSpec{",
          "2435:    Destinations:               []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2475:  t.Run(\"CreateOperationNotPermitted\", func(t *testing.T) {",
          "2476:   testApp := newTestApp()",
          "2477:   testApp.Spec.Project = \"createJobDenyingProj\"",
          "2479:   testApp.Status.Resources = resources",
          "2481:   appServer := newTestAppServer(t, testApp, createJobDenyingProj, kube.MustToUnstructured(&cronJob))",
          "2482:   appServer.cache = servercache.NewCache(appStateCache, time.Minute, time.Minute, time.Minute)",
          "2485:   require.NoError(t, err)",
          "2487:   appResponse, runErr := appServer.RunResourceAction(context.Background(), &application.ResourceActionRunRequest{",
          "",
          "[Removed Lines]",
          "2478:   testApp.Status.ResourceHealthSource = appsv1.ResourceHealthLocationAppTree",
          "2484:   err := appStateCache.SetAppResourcesTree(testApp.Name, &appsv1.ApplicationTree{Nodes: nodes})",
          "",
          "[Added Lines]",
          "2477:   testApp.Status.ResourceHealthSource = v1alpha1.ResourceHealthLocationAppTree",
          "2483:   err := appStateCache.SetAppResourcesTree(testApp.Name, &v1alpha1.ApplicationTree{Nodes: nodes})",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2502:  t.Run(\"CreateOperationPermitted\", func(t *testing.T) {",
          "2503:   testApp := newTestApp()",
          "2505:   testApp.Status.Resources = resources",
          "2507:   appServer := newTestAppServer(t, testApp, kube.MustToUnstructured(&cronJob))",
          "2508:   appServer.cache = servercache.NewCache(appStateCache, time.Minute, time.Minute, time.Minute)",
          "2511:   require.NoError(t, err)",
          "2513:   appResponse, runErr := appServer.RunResourceAction(context.Background(), &application.ResourceActionRunRequest{",
          "",
          "[Removed Lines]",
          "2504:   testApp.Status.ResourceHealthSource = appsv1.ResourceHealthLocationAppTree",
          "2510:   err := appStateCache.SetAppResourcesTree(testApp.Name, &appsv1.ApplicationTree{Nodes: nodes})",
          "",
          "[Added Lines]",
          "2503:   testApp.Status.ResourceHealthSource = v1alpha1.ResourceHealthLocationAppTree",
          "2509:   err := appStateCache.SetAppResourcesTree(testApp.Name, &v1alpha1.ApplicationTree{Nodes: nodes})",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2537:  action := \"pause\"",
          "2538:  uid := \"2\"",
          "2541:   Group:     group,",
          "2542:   Kind:      kind,",
          "2543:   Name:      resourceName,",
          "",
          "[Removed Lines]",
          "2540:  resources := []appsv1.ResourceStatus{{",
          "",
          "[Added Lines]",
          "2539:  resources := []v1alpha1.ResourceStatus{{",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2548:  appStateCache := appstate.NewCache(cacheClient, time.Minute)",
          "2552:    Group:     group,",
          "2553:    Kind:      kind,",
          "2554:    Version:   version,",
          "",
          "[Removed Lines]",
          "2550:  nodes := []appsv1.ResourceNode{{",
          "2551:   ResourceRef: appsv1.ResourceRef{",
          "",
          "[Added Lines]",
          "2549:  nodes := []v1alpha1.ResourceNode{{",
          "2550:   ResourceRef: v1alpha1.ResourceRef{",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2558:   },",
          "2559:  }}",
          "2562:   TypeMeta: metav1.TypeMeta{",
          "2563:    APIVersion: \"apps/v1\",",
          "2564:    Kind:       \"Deployment\",",
          "",
          "[Removed Lines]",
          "2561:  deployment := k8sappsv1.Deployment{",
          "",
          "[Added Lines]",
          "2560:  deployment := appsv1.Deployment{",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2572:  t.Run(\"DefaultPatchOperation\", func(t *testing.T) {",
          "2573:   testApp := newTestApp()",
          "2575:   testApp.Status.Resources = resources",
          "2578:   appServer := newTestAppServer(t, testApp, kube.MustToUnstructured(&deployment))",
          "2579:   appServer.cache = servercache.NewCache(appStateCache, time.Minute, time.Minute, time.Minute)",
          "2582:   require.NoError(t, err)",
          "2584:   appResponse, runErr := appServer.RunResourceAction(context.Background(), &application.ResourceActionRunRequest{",
          "",
          "[Removed Lines]",
          "2574:   testApp.Status.ResourceHealthSource = appsv1.ResourceHealthLocationAppTree",
          "2581:   err := appStateCache.SetAppResourcesTree(testApp.Name, &appsv1.ApplicationTree{Nodes: nodes})",
          "",
          "[Added Lines]",
          "2573:   testApp.Status.ResourceHealthSource = v1alpha1.ResourceHealthLocationAppTree",
          "2580:   err := appStateCache.SetAppResourcesTree(testApp.Name, &v1alpha1.ApplicationTree{Nodes: nodes})",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2720:   testApp := newTestApp()",
          "2721:   testApp.Namespace = \"argocd-1\"",
          "2722:   testApp.Spec.Project = \"other-ns\"",
          "2724:    ObjectMeta: metav1.ObjectMeta{Name: \"other-ns\", Namespace: \"default\"},",
          "2726:     SourceRepos:      []string{\"*\"},",
          "2728:     SourceNamespaces: []string{\"argocd-1\"},",
          "2729:    },",
          "2730:   }",
          "",
          "[Removed Lines]",
          "2723:   otherNsProj := &appsv1.AppProject{",
          "2725:    Spec: appsv1.AppProjectSpec{",
          "2727:     Destinations:     []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "[Added Lines]",
          "2722:   otherNsProj := &v1alpha1.AppProject{",
          "2724:    Spec: v1alpha1.AppProjectSpec{",
          "2726:     Destinations:     []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2744:   testApp := newTestApp()",
          "2745:   testApp.Namespace = \"argocd-1\"",
          "2746:   testApp.Spec.Project = \"other-ns\"",
          "2748:    ObjectMeta: metav1.ObjectMeta{Name: \"other-ns\", Namespace: \"default\"},",
          "2750:     SourceRepos:      []string{\"*\"},",
          "2752:     SourceNamespaces: []string{\"argocd-2\"},",
          "2753:    },",
          "2754:   }",
          "",
          "[Removed Lines]",
          "2747:   otherNsProj := &appsv1.AppProject{",
          "2749:    Spec: appsv1.AppProjectSpec{",
          "2751:     Destinations:     []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "[Added Lines]",
          "2746:   otherNsProj := &v1alpha1.AppProject{",
          "2748:    Spec: v1alpha1.AppProjectSpec{",
          "2750:     Destinations:     []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2767:   testApp := newTestApp()",
          "2768:   testApp.Namespace = \"argocd-1\"",
          "2769:   testApp.Spec.Project = \"other-ns\"",
          "2771:    ObjectMeta: metav1.ObjectMeta{Name: \"other-ns\", Namespace: \"default\"},",
          "2773:     SourceRepos:      []string{\"*\"},",
          "2775:     SourceNamespaces: []string{\"argocd-1\"},",
          "2776:    },",
          "2777:   }",
          "",
          "[Removed Lines]",
          "2770:   otherNsProj := &appsv1.AppProject{",
          "2772:    Spec: appsv1.AppProjectSpec{",
          "2774:     Destinations:     []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "[Added Lines]",
          "2769:   otherNsProj := &v1alpha1.AppProject{",
          "2771:    Spec: v1alpha1.AppProjectSpec{",
          "2773:     Destinations:     []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2791:   testApp := newTestApp()",
          "2792:   testApp.Namespace = \"argocd-1\"",
          "2793:   testApp.Spec.Project = \"other-ns\"",
          "2795:    ObjectMeta: metav1.ObjectMeta{Name: \"other-ns\", Namespace: \"default\"},",
          "2797:     SourceRepos:      []string{\"*\"},",
          "2799:     SourceNamespaces: []string{},",
          "2800:    },",
          "2801:   }",
          "",
          "[Removed Lines]",
          "2794:   otherNsProj := &appsv1.AppProject{",
          "2796:    Spec: appsv1.AppProjectSpec{",
          "2798:     Destinations:     []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "[Added Lines]",
          "2793:   otherNsProj := &v1alpha1.AppProject{",
          "2795:    Spec: v1alpha1.AppProjectSpec{",
          "2797:     Destinations:     []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2814:   testApp := newTestApp()",
          "2815:   testApp.Namespace = \"argocd-1\"",
          "2816:   testApp.Spec.Project = \"other-ns\"",
          "2818:    ObjectMeta: metav1.ObjectMeta{Name: \"other-ns\", Namespace: \"default\"},",
          "2820:     SourceRepos:      []string{\"*\"},",
          "2822:     SourceNamespaces: []string{\"argocd-1\"},",
          "2823:    },",
          "2824:   }",
          "",
          "[Removed Lines]",
          "2817:   otherNsProj := &appsv1.AppProject{",
          "2819:    Spec: appsv1.AppProjectSpec{",
          "2821:     Destinations:     []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "[Added Lines]",
          "2816:   otherNsProj := &v1alpha1.AppProject{",
          "2818:    Spec: v1alpha1.AppProjectSpec{",
          "2820:     Destinations:     []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2836:   testApp := newTestApp()",
          "2837:   testApp.Namespace = \"argocd-1\"",
          "2838:   testApp.Spec.Project = \"other-ns\"",
          "2840:    ObjectMeta: metav1.ObjectMeta{Name: \"other-ns\", Namespace: \"default\"},",
          "2842:     SourceRepos:      []string{\"*\"},",
          "2844:     SourceNamespaces: []string{\"argocd-1\"},",
          "2845:    },",
          "2846:   }",
          "",
          "[Removed Lines]",
          "2839:   otherNsProj := &appsv1.AppProject{",
          "2841:    Spec: appsv1.AppProjectSpec{",
          "2843:     Destinations:     []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "[Added Lines]",
          "2838:   otherNsProj := &v1alpha1.AppProject{",
          "2840:    Spec: v1alpha1.AppProjectSpec{",
          "2842:     Destinations:     []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2855:   testApp := newTestApp()",
          "2856:   testApp.Namespace = \"argocd-1\"",
          "2857:   testApp.Spec.Project = \"other-ns\"",
          "2859:    ObjectMeta: metav1.ObjectMeta{Name: \"other-ns\", Namespace: \"default\"},",
          "2861:     SourceRepos:      []string{\"*\"},",
          "2863:     SourceNamespaces: []string{\"argocd-2\"},",
          "2864:    },",
          "2865:   }",
          "",
          "[Removed Lines]",
          "2858:   otherNsProj := &appsv1.AppProject{",
          "2860:    Spec: appsv1.AppProjectSpec{",
          "2862:     Destinations:     []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "[Added Lines]",
          "2857:   otherNsProj := &v1alpha1.AppProject{",
          "2859:    Spec: v1alpha1.AppProjectSpec{",
          "2861:     Destinations:     []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2875:   testApp := newTestApp()",
          "2876:   testApp.Namespace = \"argocd-1\"",
          "2877:   testApp.Spec.Project = \"other-ns\"",
          "2879:    ObjectMeta: metav1.ObjectMeta{Name: \"other-ns\", Namespace: \"default\"},",
          "2881:     SourceRepos:      []string{\"*\"},",
          "2883:     SourceNamespaces: []string{\"argocd-2\"},",
          "2884:    },",
          "2885:   }",
          "",
          "[Removed Lines]",
          "2878:   otherNsProj := &appsv1.AppProject{",
          "2880:    Spec: appsv1.AppProjectSpec{",
          "2882:     Destinations:     []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "[Added Lines]",
          "2877:   otherNsProj := &v1alpha1.AppProject{",
          "2879:    Spec: v1alpha1.AppProjectSpec{",
          "2881:     Destinations:     []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2898:   testApp := newTestApp()",
          "2899:   testApp.Namespace = \"argocd-1\"",
          "2900:   testApp.Spec.Project = \"other-ns\"",
          "2902:    ObjectMeta: metav1.ObjectMeta{Name: \"other-ns\", Namespace: \"default\"},",
          "2904:     SourceRepos:      []string{\"*\"},",
          "2906:     SourceNamespaces: []string{\"argocd-1\"},",
          "2907:    },",
          "2908:   }",
          "",
          "[Removed Lines]",
          "2901:   otherNsProj := &appsv1.AppProject{",
          "2903:    Spec: appsv1.AppProjectSpec{",
          "2905:     Destinations:     []appsv1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "[Added Lines]",
          "2900:   otherNsProj := &v1alpha1.AppProject{",
          "2902:    Spec: v1alpha1.AppProjectSpec{",
          "2904:     Destinations:     []v1alpha1.ApplicationDestination{{Server: \"*\", Namespace: \"*\"}},",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2918: }",
          "2920: func TestGetAmbiguousRevision_MultiSource(t *testing.T) {",
          "2924:     {",
          "2925:      TargetRevision: \"revision1\",",
          "2926:     },",
          "",
          "[Removed Lines]",
          "2921:  app := &appv1.Application{",
          "2922:   Spec: appv1.ApplicationSpec{",
          "2923:    Sources: []appv1.ApplicationSource{",
          "",
          "[Added Lines]",
          "2920:  app := &v1alpha1.Application{",
          "2921:   Spec: v1alpha1.ApplicationSpec{",
          "2922:    Sources: []v1alpha1.ApplicationSource{",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2946:  assert.Equal(t, expected, result, \"Expected ambiguous revision to be %s, but got %s\", expected, result)",
          "2951:    TargetRevision: \"revision3\",",
          "2952:   },",
          "2953:   Sources: nil,",
          "",
          "[Removed Lines]",
          "2949:  app.Spec = appv1.ApplicationSpec{",
          "2950:   Source: &appv1.ApplicationSource{",
          "",
          "[Added Lines]",
          "2948:  app.Spec = v1alpha1.ApplicationSpec{",
          "2949:   Source: &v1alpha1.ApplicationSource{",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2961: }",
          "2963: func TestGetAmbiguousRevision_SingleSource(t *testing.T) {",
          "2967:     TargetRevision: \"revision1\",",
          "2968:    },",
          "2969:   },",
          "",
          "[Removed Lines]",
          "2964:  app := &appv1.Application{",
          "2965:   Spec: appv1.ApplicationSpec{",
          "2966:    Source: &appv1.ApplicationSource{",
          "",
          "[Added Lines]",
          "2963:  app := &v1alpha1.Application{",
          "2964:   Spec: v1alpha1.ApplicationSpec{",
          "2965:    Source: &v1alpha1.ApplicationSource{",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2983:  s := newTestAppServer(t)",
          "2985:  ctx := context.Background()",
          "2989:     {",
          "2990:      RepoURL: \"https://github.com/example/repo.git\",",
          "2991:     },",
          "",
          "[Removed Lines]",
          "2986:  a := &appv1.Application{",
          "2987:   Spec: appv1.ApplicationSpec{",
          "2988:    Sources: []appv1.ApplicationSource{",
          "",
          "[Added Lines]",
          "2985:  a := &v1alpha1.Application{",
          "2986:   Spec: v1alpha1.ApplicationSpec{",
          "2987:    Sources: []v1alpha1.ApplicationSource{",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3011:  s := newTestAppServer(t)",
          "3013:  ctx := context.Background()",
          "3017:     RepoURL: \"https://github.com/example/repo.git\",",
          "3018:    },",
          "3019:   },",
          "",
          "[Removed Lines]",
          "3014:  a := &appv1.Application{",
          "3015:   Spec: appv1.ApplicationSpec{",
          "3016:    Source: &appv1.ApplicationSource{",
          "",
          "[Added Lines]",
          "3013:  a := &v1alpha1.Application{",
          "3014:   Spec: v1alpha1.ApplicationSpec{",
          "3015:    Source: &v1alpha1.ApplicationSource{",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3038:  singleSourceApp := newTestApp()",
          "3039:  singleSourceApp.Name = \"single-source-app\"",
          "3042:    RepoURL:        \"https://github.com/argoproj/argocd-example-apps.git\",",
          "3043:    Path:           \"helm-guestbook\",",
          "3044:    TargetRevision: \"HEAD\",",
          "",
          "[Removed Lines]",
          "3040:  singleSourceApp.Spec = appv1.ApplicationSpec{",
          "3041:   Source: &appv1.ApplicationSource{",
          "",
          "[Added Lines]",
          "3039:  singleSourceApp.Spec = v1alpha1.ApplicationSpec{",
          "3040:   Source: &v1alpha1.ApplicationSource{",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3048:  multiSourceApp := newTestApp()",
          "3049:  multiSourceApp.Name = \"multi-source-app\"",
          "3052:    {",
          "3053:     RepoURL:        \"https://github.com/argoproj/argocd-example-apps.git\",",
          "3054:     Path:           \"helm-guestbook\",",
          "",
          "[Removed Lines]",
          "3050:  multiSourceApp.Spec = appv1.ApplicationSpec{",
          "3051:   Sources: []appv1.ApplicationSource{",
          "",
          "[Added Lines]",
          "3049:  multiSourceApp.Spec = v1alpha1.ApplicationSpec{",
          "3050:   Sources: []v1alpha1.ApplicationSource{",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3062:   },",
          "3063:  }",
          "3066:   {",
          "3067:    ID:       1,",
          "3068:    Source:   singleSourceApp.Spec.GetSource(),",
          "3069:    Revision: \"a\",",
          "3070:   },",
          "3071:  }",
          "3073:   {",
          "3074:    ID:        1,",
          "3075:    Sources:   multiSourceApp.Spec.GetSources(),",
          "",
          "[Removed Lines]",
          "3065:  singleSourceHistory := []appv1.RevisionHistory{",
          "3072:  multiSourceHistory := []appv1.RevisionHistory{",
          "",
          "[Added Lines]",
          "3064:  singleSourceHistory := []v1alpha1.RevisionHistory{",
          "3071:  multiSourceHistory := []v1alpha1.RevisionHistory{",
          "",
          "---------------"
        ],
        "server/badge/badge.go||server/badge/badge.go": [
          "File: server/badge/badge.go -> server/badge/badge.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  healthutil \"github.com/argoproj/gitops-engine/pkg/health\"",
          "12:  \"k8s.io/apimachinery/pkg/api/errors\"",
          "14:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "16:  appv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"",
          "",
          "[Removed Lines]",
          "13:  validation \"k8s.io/apimachinery/pkg/api/validation\"",
          "",
          "[Added Lines]",
          "13:  \"k8s.io/apimachinery/pkg/api/validation\"",
          "",
          "---------------"
        ],
        "test/e2e/fixture/admin/utils/backup.go||test/e2e/fixture/admin/utils/backup.go": [
          "File: test/e2e/fixture/admin/utils/backup.go -> test/e2e/fixture/admin/utils/backup.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"fmt\"",
          "5:  \"strings\"",
          "8:  yaml \"gopkg.in/yaml.v3\"",
          "9:  \"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"",
          "10: )",
          "",
          "[Removed Lines]",
          "7:  kube \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
          "",
          "[Added Lines]",
          "7:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
          "",
          "---------------"
        ],
        "test/e2e/fixture/applicationsets/actions.go||test/e2e/fixture/applicationsets/actions.go": [
          "File: test/e2e/fixture/applicationsets/actions.go -> test/e2e/fixture/applicationsets/actions.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  log \"github.com/sirupsen/logrus\"",
          "13:  corev1 \"k8s.io/api/core/v1\"",
          "15:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "16:  \"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"",
          "17:  \"k8s.io/apimachinery/pkg/runtime/schema\"",
          "",
          "[Removed Lines]",
          "14:  v1 \"k8s.io/api/rbac/v1\"",
          "",
          "[Added Lines]",
          "14:  rbacv1 \"k8s.io/api/rbac/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:  var err error",
          "246:   ObjectMeta: metav1.ObjectMeta{Name: \"placement-role\", Namespace: fixture.TestNamespace()},",
          "248:    {",
          "249:     Verbs:     []string{\"get\", \"list\", \"watch\"},",
          "250:     APIGroups: []string{\"cluster.open-cluster-management.io\"},",
          "",
          "[Removed Lines]",
          "245:  _, err = fixtureClient.KubeClientset.RbacV1().Roles(fixture.TestNamespace()).Create(context.Background(), &v1.Role{",
          "247:   Rules: []v1.PolicyRule{",
          "",
          "[Added Lines]",
          "245:  _, err = fixtureClient.KubeClientset.RbacV1().Roles(fixture.TestNamespace()).Create(context.Background(), &rbacv1.Role{",
          "247:   Rules: []rbacv1.PolicyRule{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "259:  if err == nil {",
          "260:   _, err = fixtureClient.KubeClientset.RbacV1().RoleBindings(fixture.TestNamespace()).Create(context.Background(),",
          "262:     ObjectMeta: metav1.ObjectMeta{Name: \"placement-role-binding\", Namespace: fixture.TestNamespace()},",
          "264:      {",
          "265:       Name:      \"argocd-applicationset-controller\",",
          "266:       Namespace: fixture.TestNamespace(),",
          "267:       Kind:      \"ServiceAccount\",",
          "268:      },",
          "269:     },",
          "271:      Kind:     \"Role\",",
          "272:      APIGroup: \"rbac.authorization.k8s.io\",",
          "273:      Name:     \"placement-role\",",
          "",
          "[Removed Lines]",
          "261:    &v1.RoleBinding{",
          "263:     Subjects: []v1.Subject{",
          "270:     RoleRef: v1.RoleRef{",
          "",
          "[Added Lines]",
          "261:    &rbacv1.RoleBinding{",
          "263:     Subjects: []rbacv1.Subject{",
          "270:     RoleRef: rbacv1.RoleRef{",
          "",
          "---------------"
        ],
        "test/e2e/sync_with_impersonate_test.go||test/e2e/sync_with_impersonate_test.go": [
          "File: test/e2e/sync_with_impersonate_test.go -> test/e2e/sync_with_impersonate_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"github.com/stretchr/testify/require\"",
          "10:  corev1 \"k8s.io/api/core/v1\"",
          "12:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "13:  \"k8s.io/apimachinery/pkg/types\"",
          "",
          "[Removed Lines]",
          "11:  rbac \"k8s.io/api/rbac/v1\"",
          "",
          "[Added Lines]",
          "11:  rbacv1 \"k8s.io/api/rbac/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:    require.NoError(t, err)",
          "79:    err = createTestAppProject(projectName, fixture.TestNamespace(), destinationServiceAccounts)",
          "80:    require.NoError(t, err)",
          "82:     {",
          "83:      APIGroups: []string{\"apps\", \"\"},",
          "84:      Resources: []string{\"deployments\"},",
          "",
          "[Removed Lines]",
          "81:    err = createTestRole(roleName, fixture.DeploymentNamespace(), []rbac.PolicyRule{",
          "",
          "[Added Lines]",
          "81:    err = createTestRole(roleName, fixture.DeploymentNamespace(), []rbacv1.PolicyRule{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:    require.NoError(t, err)",
          "133:    err = createTestAppProject(projectName, fixture.TestNamespace(), destinationServiceAccounts)",
          "134:    require.NoError(t, err)",
          "136:     {",
          "137:      APIGroups: []string{\"apps\", \"\"},",
          "138:      Resources: []string{\"deployments\"},",
          "",
          "[Removed Lines]",
          "135:    err = createTestRole(roleName, fixture.DeploymentNamespace(), []rbac.PolicyRule{",
          "",
          "[Added Lines]",
          "135:    err = createTestRole(roleName, fixture.DeploymentNamespace(), []rbacv1.PolicyRule{",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "182:    require.NoError(t, err)",
          "183:    err = createTestAppProject(projectName, fixture.TestNamespace(), destinationServiceAccounts)",
          "184:    require.NoError(t, err)",
          "186:     {",
          "187:      APIGroups: []string{\"apps\", \"\"},",
          "188:      Resources: []string{\"deployments\"},",
          "",
          "[Removed Lines]",
          "185:    err = createTestRole(roleName, fixture.DeploymentNamespace(), []rbac.PolicyRule{",
          "",
          "[Added Lines]",
          "185:    err = createTestRole(roleName, fixture.DeploymentNamespace(), []rbacv1.PolicyRule{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "251: }",
          "256:   ObjectMeta: metav1.ObjectMeta{",
          "257:    Name:      roleName,",
          "258:    Namespace: namespace,",
          "",
          "[Removed Lines]",
          "254: func createTestRole(roleName, namespace string, rules []rbac.PolicyRule) error {",
          "255:  role := &rbac.Role{",
          "",
          "[Added Lines]",
          "254: func createTestRole(roleName, namespace string, rules []rbacv1.PolicyRule) error {",
          "255:  role := &rbacv1.Role{",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "268: func createTestRoleBinding(roleName, serviceAccountName, namespace string) error {",
          "270:   ObjectMeta: metav1.ObjectMeta{",
          "271:    Name: roleName + \"-binding\",",
          "272:   },",
          "274:    {",
          "275:     Kind:      \"ServiceAccount\",",
          "276:     Name:      serviceAccountName,",
          "277:     Namespace: namespace,",
          "278:    },",
          "279:   },",
          "281:    Kind:     \"Role\",",
          "282:    Name:     roleName,",
          "283:    APIGroup: \"rbac.authorization.k8s.io\",",
          "",
          "[Removed Lines]",
          "269:  roleBinding := &rbac.RoleBinding{",
          "273:   Subjects: []rbac.Subject{",
          "280:   RoleRef: rbac.RoleRef{",
          "",
          "[Added Lines]",
          "269:  roleBinding := &rbacv1.RoleBinding{",
          "273:   Subjects: []rbacv1.Subject{",
          "280:   RoleRef: rbacv1.RoleRef{",
          "",
          "---------------"
        ],
        "util/db/db_test.go||util/db/db_test.go": [
          "File: util/db/db_test.go -> util/db/db_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  \"github.com/stretchr/testify/require\"",
          "11:  \"google.golang.org/grpc/codes\"",
          "12:  \"google.golang.org/grpc/status\"",
          "14:  corev1 \"k8s.io/api/core/v1\"",
          "15:  \"k8s.io/apimachinery/pkg/api/errors\"",
          "16:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "",
          "[Removed Lines]",
          "13:  appv1 \"k8s.io/api/apps/v1\"",
          "",
          "[Added Lines]",
          "13:  appsv1 \"k8s.io/api/apps/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "817:  assert.Equal(t, int(expectedReplicas), replicas)",
          "819:  expectedReplicas = int32(3)",
          "821:   ObjectMeta: metav1.ObjectMeta{",
          "822:    Name:      common.ApplicationController,",
          "823:    Namespace: testNamespace,",
          "824:   },",
          "826:    Replicas: &expectedReplicas,",
          "827:   },",
          "828:  })",
          "",
          "[Removed Lines]",
          "820:  clientset = getClientset(nil, &appv1.Deployment{",
          "825:   Spec: appv1.DeploymentSpec{",
          "",
          "[Added Lines]",
          "820:  clientset = getClientset(nil, &appsv1.Deployment{",
          "825:   Spec: appsv1.DeploymentSpec{",
          "",
          "---------------"
        ],
        "util/db/secrets.go||util/db/secrets.go": [
          "File: util/db/secrets.go -> util/db/secrets.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  \"k8s.io/apimachinery/pkg/fields\"",
          "17:  \"k8s.io/apimachinery/pkg/labels\"",
          "18:  \"k8s.io/apimachinery/pkg/selection\"",
          "20:  \"k8s.io/client-go/tools/cache\"",
          "22:  \"github.com/argoproj/argo-cd/v2/common\"",
          "",
          "[Removed Lines]",
          "19:  informerv1 \"k8s.io/client-go/informers/core/v1\"",
          "",
          "[Added Lines]",
          "19:  informersv1 \"k8s.io/client-go/informers/core/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:  }",
          "145:  indexers := cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}",
          "147:  _, err := clusterSecretInformer.AddEventHandler(secretEventHandler)",
          "148:  if err != nil {",
          "149:   log.Error(err)",
          "",
          "[Removed Lines]",
          "146:  clusterSecretInformer := informerv1.NewFilteredSecretInformer(db.kubeclientset, db.ns, 3*time.Minute, indexers, secretListOptions)",
          "",
          "[Added Lines]",
          "146:  clusterSecretInformer := informersv1.NewFilteredSecretInformer(db.kubeclientset, db.ns, 3*time.Minute, indexers, secretListOptions)",
          "",
          "---------------"
        ],
        "util/notification/k8s/informers.go||util/notification/k8s/informers.go": [
          "File: util/notification/k8s/informers.go -> util/notification/k8s/informers.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"time\"",
          "6:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "8:  \"k8s.io/client-go/kubernetes\"",
          "9:  \"k8s.io/client-go/tools/cache\"",
          "10: )",
          "",
          "[Removed Lines]",
          "7:  corev1 \"k8s.io/client-go/informers/core/v1\"",
          "",
          "[Added Lines]",
          "7:  informersv1 \"k8s.io/client-go/informers/core/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: )",
          "16: func NewSecretInformer(clientset kubernetes.Interface, namespace string, secretName string) cache.SharedIndexInformer {",
          "18:   options.FieldSelector = \"metadata.name=\" + secretName",
          "19:  })",
          "20: }",
          "22: func NewConfigMapInformer(clientset kubernetes.Interface, namespace string, configMapName string) cache.SharedIndexInformer {",
          "24:   options.FieldSelector = \"metadata.name=\" + configMapName",
          "25:  })",
          "26: }",
          "",
          "[Removed Lines]",
          "17:  return corev1.NewFilteredSecretInformer(clientset, namespace, settingsResyncDuration, cache.Indexers{}, func(options *metav1.ListOptions) {",
          "23:  return corev1.NewFilteredConfigMapInformer(clientset, namespace, settingsResyncDuration, cache.Indexers{}, func(options *metav1.ListOptions) {",
          "",
          "[Added Lines]",
          "17:  return informersv1.NewFilteredSecretInformer(clientset, namespace, settingsResyncDuration, cache.Indexers{}, func(options *metav1.ListOptions) {",
          "23:  return informersv1.NewFilteredConfigMapInformer(clientset, namespace, settingsResyncDuration, cache.Indexers{}, func(options *metav1.ListOptions) {",
          "",
          "---------------"
        ],
        "util/rbac/rbac.go||util/rbac/rbac.go": [
          "File: util/rbac/rbac.go -> util/rbac/rbac.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  apierrors \"k8s.io/apimachinery/pkg/api/errors\"",
          "28:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "29:  \"k8s.io/apimachinery/pkg/fields\"",
          "31:  \"k8s.io/client-go/kubernetes\"",
          "32:  \"k8s.io/client-go/tools/cache\"",
          "33: )",
          "",
          "[Removed Lines]",
          "30:  v1 \"k8s.io/client-go/informers/core/v1\"",
          "",
          "[Added Lines]",
          "30:  informersv1 \"k8s.io/client-go/informers/core/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "341:   options.FieldSelector = cmFieldSelector.String()",
          "342:  }",
          "343:  indexers := cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}",
          "345: }",
          "",
          "[Removed Lines]",
          "344:  return v1.NewFilteredConfigMapInformer(e.clientset, e.namespace, defaultRBACSyncPeriod, indexers, tweakConfigMap)",
          "",
          "[Added Lines]",
          "344:  return informersv1.NewFilteredConfigMapInformer(e.clientset, e.namespace, defaultRBACSyncPeriod, indexers, tweakConfigMap)",
          "",
          "---------------"
        ],
        "util/settings/settings.go||util/settings/settings.go": [
          "File: util/settings/settings.go -> util/settings/settings.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "26:  \"k8s.io/apimachinery/pkg/fields\"",
          "27:  \"k8s.io/apimachinery/pkg/labels\"",
          "29:  \"k8s.io/client-go/kubernetes\"",
          "30:  v1listers \"k8s.io/client-go/listers/core/v1\"",
          "31:  \"k8s.io/client-go/tools/cache\"",
          "",
          "[Removed Lines]",
          "28:  v1 \"k8s.io/client-go/informers/core/v1\"",
          "",
          "[Added Lines]",
          "28:  informersv1 \"k8s.io/client-go/informers/core/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1407:   ByProjectRepoIndexer:      byProjectIndexerFunc(common.LabelValueSecretTypeRepository),",
          "1408:   ByProjectRepoWriteIndexer: byProjectIndexerFunc(common.LabelValueSecretTypeRepositoryWrite),",
          "1409:  }",
          "1412:  _, err := cmInformer.AddEventHandler(eventHandler)",
          "1413:  if err != nil {",
          "1414:   log.Error(err)",
          "",
          "[Removed Lines]",
          "1410:  cmInformer := v1.NewFilteredConfigMapInformer(mgr.clientset, mgr.namespace, 3*time.Minute, indexers, tweakConfigMap)",
          "1411:  secretsInformer := v1.NewSecretInformer(mgr.clientset, mgr.namespace, 3*time.Minute, indexers)",
          "",
          "[Added Lines]",
          "1410:  cmInformer := informersv1.NewFilteredConfigMapInformer(mgr.clientset, mgr.namespace, 3*time.Minute, indexers, tweakConfigMap)",
          "1411:  secretsInformer := informersv1.NewSecretInformer(mgr.clientset, mgr.namespace, 3*time.Minute, indexers)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a410f344173e92f225ec9c616832eeb95b836b9",
      "candidate_info": {
        "commit_hash": "2a410f344173e92f225ec9c616832eeb95b836b9",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/2a410f344173e92f225ec9c616832eeb95b836b9",
        "files": [
          "server/application/application.go",
          "server/application/application_test.go"
        ],
        "message": "Merge pull request from GHSA-g623-jcgg-mhmm\n\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
        "before_after_code_files": [
          "server/application/application.go||server/application/application.go",
          "server/application/application_test.go||server/application/application_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "server/application/application.go||server/application/application.go",
            "server/application/application_test.go||server/application/application_test.go"
          ],
          "candidate": [
            "server/application/application.go||server/application/application.go",
            "server/application/application_test.go||server/application/application_test.go"
          ]
        }
      },
      "candidate_diff": {
        "server/application/application.go||server/application/application.go": [
          "File: server/application/application.go -> server/application/application.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:   return nil, security.NamespaceNotPermittedError(appNs)",
          "326:  }",
          "328:  created, err := s.appclientset.ArgoprojV1alpha1().Applications(appNs).Create(ctx, a, metav1.CreateOptions{})",
          "329:  if err == nil {",
          "330:   s.logAppEvent(created, ctx, argo.EventReasonResourceCreated, \"created application\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:  if a.Operation != nil {",
          "330:   log.WithFields(log.Fields{",
          "331:    \"application\":            a.Name,",
          "332:    argocommon.SecurityField: argocommon.SecurityLow,",
          "333:   }).Warn(\"User attempted to set operation on application creation. This could have allowed them to bypass branch protection rules by setting manifests directly. Ignoring the set operation.\")",
          "334:   a.Operation = nil",
          "335:  }",
          "",
          "---------------"
        ],
        "server/application/application_test.go||server/application/application_test.go": [
          "File: server/application/application_test.go -> server/application/application_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1439:  assert.Equal(t, app.Spec.Destination.Server, \"https://cluster-api.com\")",
          "1440: }",
          "1442: func TestUpdateApp(t *testing.T) {",
          "1443:  testApp := newTestApp()",
          "1444:  appServer := newTestAppServer(t, testApp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1444: func TestCreateAppWithOperation(t *testing.T) {",
          "1445:  appServer := newTestAppServer(t)",
          "1446:  testApp := newTestAppWithDestName()",
          "1447:  testApp.Operation = &appsv1.Operation{",
          "1448:   Sync: &appsv1.SyncOperation{",
          "1449:    Manifests: []string{",
          "1450:     \"test\",",
          "1451:    },",
          "1452:   },",
          "1453:  }",
          "1454:  createReq := application.ApplicationCreateRequest{",
          "1455:   Application: testApp,",
          "1456:  }",
          "1457:  app, err := appServer.Create(context.Background(), &createReq)",
          "1458:  require.NoError(t, err)",
          "1459:  require.NotNil(t, app)",
          "1460:  assert.Nil(t, app.Operation)",
          "1461: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c74355d83889b32f11f82ed4c8cbf64519b3b70d",
      "candidate_info": {
        "commit_hash": "c74355d83889b32f11f82ed4c8cbf64519b3b70d",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/c74355d83889b32f11f82ed4c8cbf64519b3b70d",
        "files": [
          "server/application/application.go",
          "server/application/application_test.go"
        ],
        "message": "Merge pull request from GHSA-g623-jcgg-mhmm\n\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
        "before_after_code_files": [
          "server/application/application.go||server/application/application.go",
          "server/application/application_test.go||server/application/application_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "server/application/application.go||server/application/application.go",
            "server/application/application_test.go||server/application/application_test.go"
          ],
          "candidate": [
            "server/application/application.go||server/application/application.go",
            "server/application/application_test.go||server/application/application_test.go"
          ]
        }
      },
      "candidate_diff": {
        "server/application/application.go||server/application/application.go": [
          "File: server/application/application.go -> server/application/application.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:   return nil, security.NamespaceNotPermittedError(appNs)",
          "322:  }",
          "324:  created, err := s.appclientset.ArgoprojV1alpha1().Applications(appNs).Create(ctx, a, metav1.CreateOptions{})",
          "325:  if err == nil {",
          "326:   s.logAppEvent(created, ctx, argo.EventReasonResourceCreated, \"created application\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325:  if a.Operation != nil {",
          "326:   log.WithFields(log.Fields{",
          "327:    \"application\":            a.Name,",
          "328:    argocommon.SecurityField: argocommon.SecurityLow,",
          "329:   }).Warn(\"User attempted to set operation on application creation. This could have allowed them to bypass branch protection rules by setting manifests directly. Ignoring the set operation.\")",
          "330:   a.Operation = nil",
          "331:  }",
          "",
          "---------------"
        ],
        "server/application/application_test.go||server/application/application_test.go": [
          "File: server/application/application_test.go -> server/application/application_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1438:  assert.Equal(t, app.Spec.Destination.Server, \"https://cluster-api.com\")",
          "1439: }",
          "1441: func TestUpdateApp(t *testing.T) {",
          "1442:  testApp := newTestApp()",
          "1443:  appServer := newTestAppServer(t, testApp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1443: func TestCreateAppWithOperation(t *testing.T) {",
          "1444:  appServer := newTestAppServer(t)",
          "1445:  testApp := newTestAppWithDestName()",
          "1446:  testApp.Operation = &appsv1.Operation{",
          "1447:   Sync: &appsv1.SyncOperation{",
          "1448:    Manifests: []string{",
          "1449:     \"test\",",
          "1450:    },",
          "1451:   },",
          "1452:  }",
          "1453:  createReq := application.ApplicationCreateRequest{",
          "1454:   Application: testApp,",
          "1455:  }",
          "1456:  app, err := appServer.Create(context.Background(), &createReq)",
          "1457:  require.NoError(t, err)",
          "1458:  require.NotNil(t, app)",
          "1459:  assert.Nil(t, app.Operation)",
          "1460: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0977f6155497b0ccbec9a60f897a3a2bb00f9045",
      "candidate_info": {
        "commit_hash": "0977f6155497b0ccbec9a60f897a3a2bb00f9045",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/0977f6155497b0ccbec9a60f897a3a2bb00f9045",
        "files": [
          "server/application/application.go",
          "server/application/application_test.go"
        ],
        "message": "Merge pull request from GHSA-g623-jcgg-mhmm\n\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
        "before_after_code_files": [
          "server/application/application.go||server/application/application.go",
          "server/application/application_test.go||server/application/application_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "server/application/application.go||server/application/application.go",
            "server/application/application_test.go||server/application/application_test.go"
          ],
          "candidate": [
            "server/application/application.go||server/application/application.go",
            "server/application/application_test.go||server/application/application_test.go"
          ]
        }
      },
      "candidate_diff": {
        "server/application/application.go||server/application/application.go": [
          "File: server/application/application.go -> server/application/application.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:   return nil, security.NamespaceNotPermittedError(appNs)",
          "334:  }",
          "336:  created, err := s.appclientset.ArgoprojV1alpha1().Applications(appNs).Create(ctx, a, metav1.CreateOptions{})",
          "337:  if err == nil {",
          "338:   s.logAppEvent(created, ctx, argo.EventReasonResourceCreated, \"created application\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:  if a.Operation != nil {",
          "338:   log.WithFields(log.Fields{",
          "339:    \"application\":            a.Name,",
          "340:    argocommon.SecurityField: argocommon.SecurityLow,",
          "341:   }).Warn(\"User attempted to set operation on application creation. This could have allowed them to bypass branch protection rules by setting manifests directly. Ignoring the set operation.\")",
          "342:   a.Operation = nil",
          "343:  }",
          "",
          "---------------"
        ],
        "server/application/application_test.go||server/application/application_test.go": [
          "File: server/application/application_test.go -> server/application/application_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1439:  assert.Equal(t, app.Spec.Destination.Server, \"https://cluster-api.example.com\")",
          "1440: }",
          "1442: func TestUpdateApp(t *testing.T) {",
          "1443:  testApp := newTestApp()",
          "1444:  appServer := newTestAppServer(t, testApp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1444: func TestCreateAppWithOperation(t *testing.T) {",
          "1445:  appServer := newTestAppServer(t)",
          "1446:  testApp := newTestAppWithDestName()",
          "1447:  testApp.Operation = &appsv1.Operation{",
          "1448:   Sync: &appsv1.SyncOperation{",
          "1449:    Manifests: []string{",
          "1450:     \"test\",",
          "1451:    },",
          "1452:   },",
          "1453:  }",
          "1454:  createReq := application.ApplicationCreateRequest{",
          "1455:   Application: testApp,",
          "1456:  }",
          "1457:  app, err := appServer.Create(context.Background(), &createReq)",
          "1458:  require.NoError(t, err)",
          "1459:  require.NotNil(t, app)",
          "1460:  assert.Nil(t, app.Operation)",
          "1461: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}