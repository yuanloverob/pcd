{
  "cve_id": "CVE-2023-34104",
  "cve_desc": "fast-xml-parser is an open source, pure javascript xml parser. fast-xml-parser allows special characters in entity names, which are not escaped or sanitized. Since the entity name is used for creating a regex for searching and replacing entities in the XML body, an attacker can abuse it for denial of service (DoS) attacks. By crafting an entity name that results in an intentionally bad performing regex and utilizing it in the entity replacement step of the parser, this can cause the parser to stall for an indefinite amount of time. This problem has been resolved in v4.2.4. Users are advised to upgrade. Users unable to upgrade should avoid using DOCTYPE parsing by setting the `processEntities: false` option.",
  "repo": "NaturalIntelligence/fast-xml-parser",
  "patch_hash": "39b0e050bb909e8499478657f84a3076e39ce76c",
  "patch_info": {
    "commit_hash": "39b0e050bb909e8499478657f84a3076e39ce76c",
    "repo": "NaturalIntelligence/fast-xml-parser",
    "commit_url": "https://github.com/NaturalIntelligence/fast-xml-parser/commit/39b0e050bb909e8499478657f84a3076e39ce76c",
    "files": [
      "spec/entities_spec.js",
      "src/xmlparser/DocTypeReader.js"
    ],
    "message": "fix security bug",
    "before_after_code_files": [
      "spec/entities_spec.js||spec/entities_spec.js",
      "src/xmlparser/DocTypeReader.js||src/xmlparser/DocTypeReader.js"
    ]
  },
  "patch_diff": {
    "spec/entities_spec.js||spec/entities_spec.js": [
      "File: spec/entities_spec.js -> spec/entities_spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "377:         expect(result).toEqual(expected);",
      "378:     });",
      "379: });",
      "381: describe(\"XMLParser External Entites\", function() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:     it(\"should throw error if an entity name contains special char\", function() {",
      "380:         const xmlData = `",
      "381:         <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "383:         <!DOCTYPE note [",
      "384:         <!ENTITY nj$ \"writer;\">",
      "385:         <!ENTITY wr?er \"Writer: Donald Duck.\">",
      "386:         ]>`;",
      "388:         const options = {",
      "389:             processEntities: true,",
      "390:         };",
      "392:         expect(() =>{",
      "393:             const parser = new XMLParser(options);",
      "394:             parser.parse(xmlData);",
      "395:         }).toThrowError(\"Invalid character $ in entity name\")",
      "396:     });",
      "",
      "---------------"
    ],
    "src/xmlparser/DocTypeReader.js||src/xmlparser/DocTypeReader.js": [
      "File: src/xmlparser/DocTypeReader.js -> src/xmlparser/DocTypeReader.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:                     i += 7;",
      "20:                     [entityName, val,i] = readEntityExp(xmlData,i+1);",
      "21:                     if(val.indexOf(\"&\") === -1) //Parameter entities are not supported",
      "23:                             regx : RegExp( `&${entityName};`,\"g\"),",
      "24:                             val: val",
      "25:                         };",
      "",
      "[Removed Lines]",
      "22:                         entities[ entityName ] = {",
      "",
      "[Added Lines]",
      "22:                         entities[ validateEntityName(entityName) ] = {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "140:     return false",
      "141: }",
      "143: module.exports = readDocType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "145: const specialChar = \"!?\\\\\\/[]$%{}^&*()<>\";",
      "147: function validateEntityName(name){",
      "148:     for (let i = 0; i < specialChar.length; i++) {",
      "149:         const ch = specialChar[i];",
      "150:         if(name.indexOf(ch) !== -1) throw new Error(`Invalid character ${ch} in entity name`);",
      "151:     }",
      "152:     return name;",
      "153: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9a880b887916855c3a510869fd1ee268d7fe58b1",
      "candidate_info": {
        "commit_hash": "9a880b887916855c3a510869fd1ee268d7fe58b1",
        "repo": "NaturalIntelligence/fast-xml-parser",
        "commit_url": "https://github.com/NaturalIntelligence/fast-xml-parser/commit/9a880b887916855c3a510869fd1ee268d7fe58b1",
        "files": [
          "spec/entities_spec.js",
          "src/xmlparser/DocTypeReader.js"
        ],
        "message": "Merge pull request from GHSA-gpv5-7x3g-ghjv\n\nCo-authored-by: Julian Gilbey <jdg@debian.org>",
        "before_after_code_files": [
          "spec/entities_spec.js||spec/entities_spec.js",
          "src/xmlparser/DocTypeReader.js||src/xmlparser/DocTypeReader.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spec/entities_spec.js||spec/entities_spec.js",
            "src/xmlparser/DocTypeReader.js||src/xmlparser/DocTypeReader.js"
          ],
          "candidate": [
            "spec/entities_spec.js||spec/entities_spec.js",
            "src/xmlparser/DocTypeReader.js||src/xmlparser/DocTypeReader.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/entities_spec.js||spec/entities_spec.js": [
          "File: spec/entities_spec.js -> spec/entities_spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:         expect(() =>{",
          "393:             const parser = new XMLParser(options);",
          "394:             parser.parse(xmlData);",
          "396:     });",
          "397: });",
          "",
          "[Removed Lines]",
          "395:         }).toThrowError(\"Invalid character $ in entity name\")",
          "",
          "[Added Lines]",
          "396:         }).toThrowError(\"Invalid entity name nj$\")",
          "397:     });",
          "399:     it(\"should allow localised entity names\", function() {",
          "400:         const xmlData = `",
          "401:         <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "403:         <!DOCTYPE note [",
          "404:         <!ENTITY \u1200\u120e \"Amharic hello!\">",
          "405:         <!ENTITY \u0417\u0434\u0440\u0430\u0432\u043e \"Macedonian hello.\">",
          "406:         ]>",
          "408:         <note>",
          "409:             <heading>Reminder</heading>",
          "410:             <body attr=\"&\u1200\u120e;\">Don't forget me this weekend! &\u0417\u0434\u0440\u0430\u0432\u043e;</body>",
          "411:         </note> `;",
          "413:         const expected = {",
          "414:             \"?xml\": {",
          "415:                 \"version\": \"1.0\",",
          "416:                 \"encoding\": \"UTF-8\"",
          "417:             },",
          "418:             \"note\": {",
          "419:                 \"heading\": \"Reminder\",",
          "420:                 \"body\": {",
          "421:                     \"#text\": \"Don't forget me this weekend! Macedonian hello.\",",
          "422:                     \"attr\": \"Amharic hello!\"",
          "423:                 }",
          "424:             }",
          "425:         };",
          "427:         const options = {",
          "428:             attributeNamePrefix: \"\",",
          "429:             ignoreAttributes:    false,",
          "430:             processEntities: true,",
          "431:             htmlEntities: true",
          "432:         };",
          "433:         const parser = new XMLParser(options);",
          "434:         let result = parser.parse(xmlData);",
          "437:         expect(result).toEqual(expected);",
          "",
          "---------------"
        ],
        "src/xmlparser/DocTypeReader.js||src/xmlparser/DocTypeReader.js": [
          "File: src/xmlparser/DocTypeReader.js -> src/xmlparser/DocTypeReader.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: function readDocType(xmlData, i){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const util = require('../util');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145: const specialChar = \"!?\\\\\\/[]$%{}^&*()<>|+\";",
          "147: function validateEntityName(name){",
          "153: }",
          "",
          "[Removed Lines]",
          "148:     for (let i = 0; i < specialChar.length; i++) {",
          "149:         const ch = specialChar[i];",
          "150:         if(name.indexOf(ch) !== -1) throw new Error(`Invalid character ${ch} in entity name`);",
          "151:     }",
          "152:     return name;",
          "155: module.exports = readDocType;",
          "",
          "[Added Lines]",
          "150:     if (util.isName(name))",
          "151:  return name;",
          "152:     else",
          "153:         throw new Error(`Invalid entity name ${name}`);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0955739fc404fbb048002920bdaec2d3e469308d",
      "candidate_info": {
        "commit_hash": "0955739fc404fbb048002920bdaec2d3e469308d",
        "repo": "NaturalIntelligence/fast-xml-parser",
        "commit_url": "https://github.com/NaturalIntelligence/fast-xml-parser/commit/0955739fc404fbb048002920bdaec2d3e469308d",
        "files": [
          "src/xmlparser/DocTypeReader.js"
        ],
        "message": "fix: security bug",
        "before_after_code_files": [
          "src/xmlparser/DocTypeReader.js||src/xmlparser/DocTypeReader.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/xmlparser/DocTypeReader.js||src/xmlparser/DocTypeReader.js"
          ],
          "candidate": [
            "src/xmlparser/DocTypeReader.js||src/xmlparser/DocTypeReader.js"
          ]
        }
      },
      "candidate_diff": {
        "src/xmlparser/DocTypeReader.js||src/xmlparser/DocTypeReader.js": [
          "File: src/xmlparser/DocTypeReader.js -> src/xmlparser/DocTypeReader.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: function validateEntityName(name){",
          "148:     for (let i = 0; i < specialChar.length; i++) {",
          "",
          "[Removed Lines]",
          "145: const specialChar = \"!?\\\\\\/[]$%{}^&*()<>\";",
          "",
          "[Added Lines]",
          "145: const specialChar = \"!?\\\\\\/[]$%{}^&*()<>|+\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}