{
  "cve_id": "CVE-2022-21655",
  "cve_desc": "Envoy is an open source edge and service proxy, designed for cloud-native applications. The envoy common router will segfault if an internal redirect selects a route configured with direct response or redirect actions. This will result in a denial of service. As a workaround turn off internal redirects if direct response entries are configured on the same listener.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "177d608155ba8b11598b9bbf8240e90d8c350682",
  "patch_info": {
    "commit_hash": "177d608155ba8b11598b9bbf8240e90d8c350682",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/177d608155ba8b11598b9bbf8240e90d8c350682",
    "files": [
      "docs/root/version_history/current.rst",
      "source/common/router/router.cc",
      "test/common/router/router_test.cc",
      "test/integration/redirect_integration_test.cc"
    ],
    "message": "CVE-2022-21655\n\nCrash with direct_response\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
    "before_after_code_files": [
      "source/common/router/router.cc||source/common/router/router.cc",
      "test/common/router/router_test.cc||test/common/router/router_test.cc",
      "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/router/router.cc||source/common/router/router.cc": [
      "File: source/common/router/router.cc -> source/common/router/router.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1692:     return false;",
      "1693:   }",
      "1696:   for (const auto& predicate : policy.predicates()) {",
      "1697:     if (!predicate->acceptTargetRoute(*filter_state, route_name, !scheme_is_http,",
      "1698:                                       !target_is_http)) {",
      "",
      "[Removed Lines]",
      "1695:   const auto& route_name = route->routeEntry()->routeName();",
      "",
      "[Added Lines]",
      "1695:   const auto& route_name = route->directResponseEntry() ? route->directResponseEntry()->routeName()",
      "1696:                                                         : route->routeEntry()->routeName();",
      "",
      "---------------"
    ],
    "test/common/router/router_test.cc||test/common/router/router_test.cc": [
      "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: using testing::Eq;",
      "57: using testing::InSequence;",
      "58: using testing::Invoke;",
      "59: using testing::MockFunction;",
      "60: using testing::NiceMock;",
      "61: using testing::Property;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59: using testing::InvokeWithoutArgs;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:       sendLocalReply(Http::Code::ServiceUnavailable,",
      "320:                      testing::Eq(\"missing required header: :method\"), _, _,",
      "321:                      \"filter_removed_required_request_headers{missing_required_header:_:method}\"))",
      "323:   router_.decodeHeaders(headers, true);",
      "324:   router_.onDestroy();",
      "325: }",
      "",
      "[Removed Lines]",
      "322:       .WillOnce(testing::InvokeWithoutArgs([] {}));",
      "",
      "[Added Lines]",
      "323:       .WillOnce(InvokeWithoutArgs([] {}));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3416:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
      "",
      "[Removed Lines]",
      "3414:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(testing::InvokeWithoutArgs([] {",
      "3415:   }));",
      "",
      "[Added Lines]",
      "3415:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(InvokeWithoutArgs([] {}));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4207:                    ->value());",
      "4208: }",
      "4210: TEST_F(RouterTest, InternalRedirectStripsFragment) {",
      "4211:   enableRedirects();",
      "4212:   default_request_headers_.setForwardedProto(\"http\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4210: TEST_F(RouterTest, HttpInternalRedirectMatchedToDirectResponseSucceeded) {",
      "4211:   NiceMock<MockDirectResponseEntry> direct_response;",
      "4212:   std::string route_name(\"route-test-name\");",
      "4213:   EXPECT_CALL(direct_response, routeName()).WillOnce(ReturnRef(route_name));",
      "4215:   enableRedirects();",
      "4216:   sendRequest();",
      "4217:   EXPECT_CALL(callbacks_, clearRouteCache()).WillOnce(InvokeWithoutArgs([&]() -> void {",
      "4219:     EXPECT_CALL(*callbacks_.route_, routeEntry()).WillRepeatedly(Return(nullptr));",
      "4220:     EXPECT_CALL(*callbacks_.route_, directResponseEntry()).WillRepeatedly(Return(&direct_response));",
      "4221:   }));",
      "4222:   EXPECT_CALL(callbacks_, recreateStream(_)).WillOnce(Return(true));",
      "4224:   response_decoder_->decodeHeaders(std::move(redirect_headers_), false);",
      "4225:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
      "4226:                     .counter(\"upstream_internal_redirect_succeeded_total\")",
      "4227:                     .value());",
      "4230:   router_.onDestroy();",
      "4231:   EXPECT_EQ(1, callbacks_.streamInfo()",
      "4232:                    .filterState()",
      "4233:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
      "4234:                    ->value());",
      "4235: }",
      "",
      "---------------"
    ],
    "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc": [
      "File: test/integration/redirect_integration_test.cc -> test/integration/redirect_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:         ->set_value(3);",
      "40:     config_helper_.addVirtualHost(handle_max_3_hop);",
      "42:     HttpProtocolIntegrationTest::initialize();",
      "43:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42:     auto handle_by_direct_response = config_helper_.createVirtualHost(\"handle.direct.response\");",
      "43:     handle_by_direct_response.mutable_routes(0)->set_name(\"direct_response\");",
      "44:     handle_by_direct_response.mutable_routes(0)->mutable_direct_response()->set_status(204);",
      "45:     handle_by_direct_response.mutable_routes(0)",
      "46:         ->mutable_direct_response()",
      "47:         ->mutable_body()",
      "48:         ->set_inline_string(EMPTY_STRING);",
      "49:     config_helper_.addVirtualHost(handle_by_direct_response);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "665:             response->headers().get(test_header_key_)[0]->value().getStringView());",
      "666: }",
      "668: INSTANTIATE_TEST_SUITE_P(Protocols, RedirectIntegrationTest,",
      "669:                          testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams()),",
      "670:                          HttpProtocolIntegrationTest::protocolTestParamsToString);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "677: TEST_P(RedirectIntegrationTest, InternalRedirectHandledByDirectResponse) {",
      "678:   useAccessLog(\"%RESPONSE_FLAGS% %RESPONSE_CODE% %RESPONSE_CODE_DETAILS% %RESP(test-header)%\");",
      "680:   config_helper_.addConfigModifier(",
      "681:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
      "682:              hcm) { hcm.set_via(\"via_value\"); });",
      "683:   initialize();",
      "685:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "687:   default_request_headers_.setHost(\"handle.internal.redirect\");",
      "688:   IntegrationStreamDecoderPtr response =",
      "689:       codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
      "691:   waitForNextUpstreamRequest();",
      "693:   redirect_response_.setLocation(\"http://handle.direct.response/\");",
      "694:   upstream_request_->encodeHeaders(redirect_response_, true);",
      "696:   ASSERT_TRUE(response->waitForEndStream());",
      "697:   ASSERT_TRUE(response->complete());",
      "698:   EXPECT_EQ(\"204\", response->headers().getStatusValue());",
      "699:   EXPECT_EQ(1, test_server_->counter(\"cluster.cluster_0.upstream_internal_redirect_succeeded_total\")",
      "700:                    ->value());",
      "702:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
      "703:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
      "704:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
      "705:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
      "707:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"204 direct_response -\\n\"));",
      "708: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7f9d04e2f077ac4db8aa98707e4904d1ce909d26",
      "candidate_info": {
        "commit_hash": "7f9d04e2f077ac4db8aa98707e4904d1ce909d26",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/7f9d04e2f077ac4db8aa98707e4904d1ce909d26",
        "files": [
          "test/integration/redirect_integration_test.cc"
        ],
        "message": "tests: Fix flaky redirect integration test for H/3 (#25606)\n\nSigned-off-by: Paul Sohn <paulsohn@google.com>",
        "before_after_code_files": [
          "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ],
          "candidate": [
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc": [
          "File: test/integration/redirect_integration_test.cc -> test/integration/redirect_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:   ASSERT_TRUE(response->waitForEndStream());",
          "701:   ASSERT_TRUE(response->complete());",
          "702:   EXPECT_EQ(\"204\", response->headers().getStatusValue());",
          "706:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "707:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "",
          "[Removed Lines]",
          "703:   EXPECT_EQ(1, test_server_->counter(\"cluster.cluster_0.upstream_internal_redirect_succeeded_total\")",
          "704:                    ->value());",
          "",
          "[Added Lines]",
          "703:   test_server_->waitForCounterEq(\"cluster.cluster_0.upstream_internal_redirect_succeeded_total\", 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a44fd09d9c0b276ad1812326b579c23d7e1f331",
      "candidate_info": {
        "commit_hash": "8a44fd09d9c0b276ad1812326b579c23d7e1f331",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/8a44fd09d9c0b276ad1812326b579c23d7e1f331",
        "files": [
          "envoy/http/BUILD",
          "envoy/http/async_client.h",
          "envoy/http/filter.h",
          "envoy/router/shadow_writer.h",
          "source/common/http/async_client_impl.cc",
          "source/common/http/async_client_impl.h",
          "source/common/router/router.cc",
          "source/common/router/router.h",
          "source/common/router/shadow_writer_impl.cc",
          "source/common/router/shadow_writer_impl.h",
          "source/common/runtime/runtime_features.cc",
          "test/common/buffer/buffer_test.cc",
          "test/common/http/async_client_impl_test.cc",
          "test/common/router/router_2_test.cc",
          "test/common/router/router_test.cc",
          "test/common/router/router_test_base.cc",
          "test/common/router/router_test_base.h",
          "test/integration/BUILD",
          "test/integration/buffer_accounting_integration_test.cc",
          "test/integration/shadow_policy_integration_test.cc",
          "test/mocks/http/mocks.cc",
          "test/mocks/http/mocks.h",
          "test/mocks/router/mocks.h"
        ],
        "message": "Revert \"Implement shadow streaming (#24365)\" (#25184)\n\nThis reverts commit b1c7055922a1bc5c24bc890a63ecc3c556ad393b.\n\nSigned-off-by: JP Simard <jp@jpsim.com>",
        "before_after_code_files": [
          "envoy/http/async_client.h||envoy/http/async_client.h",
          "envoy/http/filter.h||envoy/http/filter.h",
          "envoy/router/shadow_writer.h||envoy/router/shadow_writer.h",
          "source/common/http/async_client_impl.cc||source/common/http/async_client_impl.cc",
          "source/common/http/async_client_impl.h||source/common/http/async_client_impl.h",
          "source/common/router/router.cc||source/common/router/router.cc",
          "source/common/router/router.h||source/common/router/router.h",
          "source/common/router/shadow_writer_impl.cc||source/common/router/shadow_writer_impl.cc",
          "source/common/router/shadow_writer_impl.h||source/common/router/shadow_writer_impl.h",
          "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
          "test/common/buffer/buffer_test.cc||test/common/buffer/buffer_test.cc",
          "test/common/http/async_client_impl_test.cc||test/common/http/async_client_impl_test.cc",
          "test/common/router/router_2_test.cc||test/common/router/router_2_test.cc",
          "test/common/router/router_test.cc||test/common/router/router_test.cc",
          "test/common/router/router_test_base.cc||test/common/router/router_test_base.cc",
          "test/common/router/router_test_base.h||test/common/router/router_test_base.h",
          "test/integration/buffer_accounting_integration_test.cc||test/integration/buffer_accounting_integration_test.cc",
          "test/integration/shadow_policy_integration_test.cc||test/integration/shadow_policy_integration_test.cc",
          "test/mocks/http/mocks.cc||test/mocks/http/mocks.cc",
          "test/mocks/http/mocks.h||test/mocks/http/mocks.h",
          "test/mocks/router/mocks.h||test/mocks/router/mocks.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "envoy/http/async_client.h||envoy/http/async_client.h": [
          "File: envoy/http/async_client.h -> envoy/http/async_client.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <chrono>",
          "4: #include <memory>",
          "7: #include \"envoy/config/route/v3/route_components.pb.h\"",
          "8: #include \"envoy/event/dispatcher.h\"",
          "11: #include \"envoy/http/message.h\"",
          "12: #include \"envoy/stream_info/stream_info.h\"",
          "13: #include \"envoy/tracing/http_tracer.h\"",
          "",
          "[Removed Lines]",
          "6: #include \"envoy/buffer/buffer.h\"",
          "9: #include \"envoy/http/filter.h\"",
          "10: #include \"envoy/http/header_map.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:     virtual void onReset() PURE;",
          "133:   };",
          "",
          "[Removed Lines]",
          "135:   using StreamDestructorCallbacks = std::function<void()>;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:     virtual void reset() PURE;",
          "",
          "[Removed Lines]",
          "176:     virtual void setDestructorCallback(StreamDestructorCallbacks callback) PURE;",
          "182:     virtual void removeDestructorCallback() PURE;",
          "190:     virtual void setWatermarkCallbacks(DecoderFilterWatermarkCallbacks& callbacks) PURE;",
          "195:     virtual void removeWatermarkCallbacks() PURE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:     virtual bool isAboveWriteBufferHighWatermark() const PURE;",
          "202:   };",
          "218:   virtual ~AsyncClient() = default;",
          "",
          "[Removed Lines]",
          "209:   class OngoingRequest : public virtual Request, public virtual Stream {",
          "210:   public:",
          "215:     virtual void captureAndSendTrailers(RequestTrailerMapPtr&& trailers) PURE;",
          "216:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261:       return *this;",
          "262:     }",
          "275:     StreamOptions& setRetryPolicy(const envoy::config::route::v3::RetryPolicy& p) {",
          "276:       retry_policy = p;",
          "",
          "[Removed Lines]",
          "265:     StreamOptions& setBufferAccount(const Buffer::BufferMemoryAccountSharedPtr& account) {",
          "266:       account_ = account;",
          "267:       return *this;",
          "268:     }",
          "269:     StreamOptions& setBufferLimit(uint32_t limit) {",
          "270:       buffer_limit_ = limit;",
          "271:       return *this;",
          "272:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "314:     envoy::config::core::v3::Metadata metadata;",
          "321:     absl::optional<envoy::config::route::v3::RetryPolicy> retry_policy;",
          "323:     OptRef<Router::FilterConfig> filter_config_;",
          "",
          "[Removed Lines]",
          "317:     Buffer::BufferMemoryAccountSharedPtr account_{nullptr};",
          "319:     absl::optional<uint32_t> buffer_limit_;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "378:       sampled_ = sampled;",
          "379:       return *this;",
          "380:     }",
          "391:     bool operator==(const RequestOptions& src) const {",
          "",
          "[Removed Lines]",
          "381:     RequestOptions& setBufferAccount(const Buffer::BufferMemoryAccountSharedPtr& account) {",
          "382:       account_ = account;",
          "383:       return *this;",
          "384:     }",
          "385:     RequestOptions& setBufferLimit(uint32_t limit) {",
          "386:       buffer_limit_ = limit;",
          "387:       return *this;",
          "388:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "418:                         const RequestOptions& options) PURE;",
          "",
          "[Removed Lines]",
          "430:   virtual OngoingRequest* startRequest(RequestHeaderMapPtr&& request_headers, Callbacks& callbacks,",
          "431:                                        const RequestOptions& options) PURE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "envoy/http/filter.h||envoy/http/filter.h": [
          "File: envoy/http/filter.h -> envoy/http/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:   virtual OptRef<DownstreamStreamFilterCallbacks> downstreamCallbacks() PURE;",
          "430: };",
          "459: public:",
          "",
          "[Removed Lines]",
          "432: class DecoderFilterWatermarkCallbacks {",
          "433: public:",
          "434:   virtual ~DecoderFilterWatermarkCallbacks() = default;",
          "444:   virtual void onDecoderFilterAboveWriteBufferHighWatermark() PURE;",
          "450:   virtual void onDecoderFilterBelowWriteBufferLowWatermark() PURE;",
          "451: };",
          "457: class StreamDecoderFilterCallbacks : public virtual StreamFilterCallbacks,",
          "458:                                      public virtual DecoderFilterWatermarkCallbacks {",
          "",
          "[Added Lines]",
          "436: class StreamDecoderFilterCallbacks : public virtual StreamFilterCallbacks {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "649:   virtual void encodeMetadata(MetadataMapPtr&& metadata_map) PURE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "637:   virtual void onDecoderFilterAboveWriteBufferHighWatermark() PURE;",
          "643:   virtual void onDecoderFilterBelowWriteBufferLowWatermark() PURE;",
          "",
          "---------------"
        ],
        "envoy/router/shadow_writer.h||envoy/router/shadow_writer.h": [
          "File: envoy/router/shadow_writer.h -> envoy/router/shadow_writer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   virtual void shadow(const std::string& cluster, Http::RequestMessagePtr&& request,",
          "29:                       const Http::AsyncClient::RequestOptions& options) PURE;",
          "44: };",
          "46: using ShadowWriterPtr = std::unique_ptr<ShadowWriter>;",
          "",
          "[Removed Lines]",
          "41:   virtual Http::AsyncClient::OngoingRequest*",
          "42:   streamingShadow(const std::string& cluster, Http::RequestHeaderMapPtr&& headers,",
          "43:                   const Http::AsyncClient::RequestOptions& options) PURE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/common/http/async_client_impl.cc||source/common/http/async_client_impl.cc": [
          "File: source/common/http/async_client_impl.cc -> source/common/http/async_client_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   }",
          "53: }",
          "56:   async_request->initialize();",
          "57:   std::unique_ptr<AsyncStreamImpl> new_request{async_request};",
          "",
          "[Removed Lines]",
          "55: template <typename T> T* AsyncClientImpl::internalStartRequest(T* async_request) {",
          "",
          "[Added Lines]",
          "55: AsyncClient::Request* AsyncClientImpl::send(RequestMessagePtr&& request,",
          "56:                                             AsyncClient::Callbacks& callbacks,",
          "57:                                             const AsyncClient::RequestOptions& options) {",
          "58:   AsyncRequestImpl* async_request =",
          "59:       new AsyncRequestImpl(std::move(request), *this, callbacks, options);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   }",
          "67: }",
          "90: AsyncClient::Stream* AsyncClientImpl::start(AsyncClient::StreamCallbacks& callbacks,",
          "91:                                             const AsyncClient::StreamOptions& options) {",
          "92:   std::unique_ptr<AsyncStreamImpl> new_stream{new AsyncStreamImpl(*this, callbacks, options)};",
          "",
          "[Removed Lines]",
          "69: template AsyncRequestImpl*",
          "70: AsyncClientImpl::internalStartRequest<AsyncRequestImpl>(AsyncRequestImpl*);",
          "71: template AsyncOngoingRequestImpl*",
          "72: AsyncClientImpl::internalStartRequest<AsyncOngoingRequestImpl>(AsyncOngoingRequestImpl*);",
          "74: AsyncClient::Request* AsyncClientImpl::send(RequestMessagePtr&& request,",
          "75:                                             AsyncClient::Callbacks& callbacks,",
          "76:                                             const AsyncClient::RequestOptions& options) {",
          "77:   AsyncRequestImpl* async_request =",
          "78:       new AsyncRequestImpl(std::move(request), *this, callbacks, options);",
          "79:   return internalStartRequest(async_request);",
          "80: }",
          "82: AsyncClient::OngoingRequest*",
          "83: AsyncClientImpl::startRequest(RequestHeaderMapPtr&& request_headers, Callbacks& callbacks,",
          "84:                               const AsyncClient::RequestOptions& options) {",
          "85:   AsyncOngoingRequestImpl* async_request =",
          "86:       new AsyncOngoingRequestImpl(std::move(request_headers), *this, callbacks, options);",
          "87:   return internalStartRequest(async_request);",
          "88: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:       tracing_config_(Tracing::EgressConfig::get()),",
          "104:       route_(std::make_shared<RouteImpl>(parent_, options.timeout, options.hash_policy,",
          "105:                                          options.retry_policy)),",
          "107:       send_xff_(options.send_xff) {",
          "108:   stream_info_.dynamicMetadata().MergeFrom(options.metadata);",
          "109:   stream_info_.setIsShadow(options.is_shadow);",
          "111:   if (options.buffer_body_for_retry) {",
          "113:   }",
          "115:   router_.setDecoderFilterCallbacks(*this);",
          "",
          "[Removed Lines]",
          "106:       account_(options.account_), buffer_limit_(options.buffer_limit_),",
          "112:     buffered_body_ = std::make_unique<Buffer::OwnedImpl>(account_);",
          "",
          "[Added Lines]",
          "95:     buffered_body_ = std::make_unique<Buffer::OwnedImpl>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269:   cleanup();",
          "270: }",
          "276:   if (nullptr != options.parent_span_) {",
          "277:     const std::string child_span_name =",
          "278:         options.child_span_name_.empty()",
          "",
          "[Removed Lines]",
          "272: AsyncRequestSharedImpl::AsyncRequestSharedImpl(AsyncClientImpl& parent,",
          "273:                                                AsyncClient::Callbacks& callbacks,",
          "274:                                                const AsyncClient::RequestOptions& options)",
          "275:     : AsyncStreamImpl(parent, *this, options), callbacks_(callbacks) {",
          "",
          "[Added Lines]",
          "255: AsyncRequestImpl::AsyncRequestImpl(RequestMessagePtr&& request, AsyncClientImpl& parent,",
          "256:                                    AsyncClient::Callbacks& callbacks,",
          "257:                                    const AsyncClient::RequestOptions& options)",
          "258:     : AsyncStreamImpl(parent, *this, options), request_(std::move(request)), callbacks_(callbacks) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "302: }",
          "310:   callbacks_.onBeforeFinalizeUpstreamSpan(*child_span_, &response_->headers());",
          "312:   Tracing::HttpTracerUtility::finalizeUpstreamSpan(*child_span_, streamInfo(),",
          "",
          "[Removed Lines]",
          "304: void AsyncOngoingRequestImpl::initialize() {",
          "305:   child_span_->injectContext(*request_headers_, nullptr);",
          "306:   sendHeaders(*request_headers_, false);",
          "307: }",
          "309: void AsyncRequestSharedImpl::onComplete() {",
          "",
          "[Added Lines]",
          "287: void AsyncRequestImpl::onComplete() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "315:   callbacks_.onSuccess(*this, std::move(response_));",
          "316: }",
          "319:   const uint64_t response_code = Http::Utility::getResponseStatus(*headers);",
          "320:   streamInfo().response_code_ = response_code;",
          "321:   response_ = std::make_unique<ResponseMessageImpl>(std::move(headers));",
          "322: }",
          "325:   streamInfo().addBytesReceived(data.length());",
          "326:   response_->body().move(data);",
          "327: }",
          "330:   response_->trailers(std::move(trailers));",
          "331: }",
          "334:   if (!cancelled_) {",
          "",
          "[Removed Lines]",
          "318: void AsyncRequestSharedImpl::onHeaders(ResponseHeaderMapPtr&& headers, bool) {",
          "324: void AsyncRequestSharedImpl::onData(Buffer::Instance& data, bool) {",
          "329: void AsyncRequestSharedImpl::onTrailers(ResponseTrailerMapPtr&& trailers) {",
          "333: void AsyncRequestSharedImpl::onReset() {",
          "",
          "[Added Lines]",
          "296: void AsyncRequestImpl::onHeaders(ResponseHeaderMapPtr&& headers, bool) {",
          "302: void AsyncRequestImpl::onData(Buffer::Instance& data, bool) {",
          "307: void AsyncRequestImpl::onTrailers(ResponseTrailerMapPtr&& trailers) {",
          "311: void AsyncRequestImpl::onReset() {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "350:   }",
          "351: }",
          "354:   cancelled_ = true;",
          "",
          "[Removed Lines]",
          "353: void AsyncRequestSharedImpl::cancel() {",
          "",
          "[Added Lines]",
          "331: void AsyncRequestImpl::cancel() {",
          "",
          "---------------"
        ],
        "source/common/http/async_client_impl.h||source/common/http/async_client_impl.h": [
          "File: source/common/http/async_client_impl.h -> source/common/http/async_client_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include <string>",
          "10: #include <vector>",
          "13: #include \"envoy/common/random_generator.h\"",
          "14: #include \"envoy/common/scope_tracker.h\"",
          "15: #include \"envoy/config/core/v3/base.pb.h\"",
          "",
          "[Removed Lines]",
          "12: #include \"envoy/buffer/buffer.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: #include \"envoy/http/async_client.h\"",
          "20: #include \"envoy/http/codec.h\"",
          "21: #include \"envoy/http/context.h\"",
          "23: #include \"envoy/http/header_map.h\"",
          "24: #include \"envoy/http/message.h\"",
          "25: #include \"envoy/router/context.h\"",
          "",
          "[Removed Lines]",
          "22: #include \"envoy/http/filter.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: } // namespace",
          "56: class AsyncStreamImpl;",
          "59: class AsyncClientImpl final : public AsyncClient {",
          "60: public:",
          "",
          "[Removed Lines]",
          "57: class AsyncRequestSharedImpl;",
          "",
          "[Added Lines]",
          "55: class AsyncRequestImpl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "69:   Request* send(RequestMessagePtr&& request, Callbacks& callbacks,",
          "70:                 const AsyncClient::RequestOptions& options) override;",
          "71:   Stream* start(StreamCallbacks& callbacks, const AsyncClient::StreamOptions& options) override;",
          "74:   Event::Dispatcher& dispatcher() override { return dispatcher_; }",
          "76: private:",
          "78:   Upstream::ClusterInfoConstSharedPtr cluster_;",
          "79:   Router::FilterConfig config_;",
          "80:   Event::Dispatcher& dispatcher_;",
          "",
          "[Removed Lines]",
          "72:   OngoingRequest* startRequest(RequestHeaderMapPtr&& request_headers, Callbacks& callbacks,",
          "73:                                const AsyncClient::RequestOptions& options) override;",
          "77:   template <typename T> T* internalStartRequest(T* async_request);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "82:   Singleton::Manager& singleton_manager_;",
          "84:   friend class AsyncStreamImpl;",
          "86: };",
          "93:                         public StreamDecoderFilterCallbacks,",
          "94:                         public Event::DeferredDeletable,",
          "95:                         Logger::Loggable<Logger::Id::http>,",
          "",
          "[Removed Lines]",
          "85:   friend class AsyncRequestSharedImpl;",
          "92: class AsyncStreamImpl : public virtual AsyncClient::Stream,",
          "",
          "[Added Lines]",
          "80:   friend class AsyncRequestImpl;",
          "87: class AsyncStreamImpl : public AsyncClient::Stream,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "98: public:",
          "99:   AsyncStreamImpl(AsyncClientImpl& parent, AsyncClient::StreamCallbacks& callbacks,",
          "100:                   const AsyncClient::StreamOptions& options);",
          "137:   void sendHeaders(RequestHeaderMap& headers, bool end_stream) override;",
          "",
          "[Removed Lines]",
          "101:   ~AsyncStreamImpl() override {",
          "102:     router_.onDestroy();",
          "104:     ENVOY_BUG(high_watermark_calls_ == 0, \"Excess high watermark calls after async stream ended.\");",
          "105:     if (destructor_callback_.has_value()) {",
          "106:       (*destructor_callback_)();",
          "107:     }",
          "108:   }",
          "110:   void setDestructorCallback(AsyncClient::StreamDestructorCallbacks callback) override {",
          "111:     ASSERT(!destructor_callback_);",
          "112:     destructor_callback_.emplace(callback);",
          "113:   }",
          "115:   void removeDestructorCallback() override {",
          "116:     ASSERT(destructor_callback_);",
          "117:     destructor_callback_.reset();",
          "118:   }",
          "120:   void setWatermarkCallbacks(DecoderFilterWatermarkCallbacks& callbacks) override {",
          "121:     ASSERT(!watermark_callbacks_);",
          "122:     watermark_callbacks_.emplace(callbacks);",
          "123:     for (uint32_t i = 0; i < high_watermark_calls_; ++i) {",
          "124:       watermark_callbacks_->get().onDecoderFilterAboveWriteBufferHighWatermark();",
          "125:     }",
          "126:   }",
          "128:   void removeWatermarkCallbacks() override {",
          "129:     ASSERT(watermark_callbacks_);",
          "130:     for (uint32_t i = 0; i < high_watermark_calls_; ++i) {",
          "131:       watermark_callbacks_->get().onDecoderFilterBelowWriteBufferLowWatermark();",
          "132:     }",
          "133:     watermark_callbacks_.reset();",
          "134:   }",
          "",
          "[Added Lines]",
          "96:   ~AsyncStreamImpl() override { router_.onDestroy(); }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "146:   StreamInfo::StreamInfoImpl& streamInfo() override { return stream_info_; }",
          "148:   AsyncClientImpl& parent_;",
          "154: private:",
          "155:   struct NullHedgePolicy : public Router::HedgePolicy {",
          "",
          "[Removed Lines]",
          "150:   absl::optional<AsyncClient::StreamDestructorCallbacks> destructor_callback_;",
          "152:   absl::optional<std::reference_wrapper<DecoderFilterWatermarkCallbacks>> watermark_callbacks_;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "402:   Upstream::ClusterInfoConstSharedPtr clusterInfo() override { return parent_.cluster_; }",
          "403:   uint64_t streamId() const override { return stream_id_; }",
          "406:   Tracing::Span& activeSpan() override { return active_span_; }",
          "407:   OptRef<const Tracing::Config> tracingConfig() const override {",
          "408:     return makeOptRef<const Tracing::Config>(tracing_config_);",
          "",
          "[Removed Lines]",
          "405:   Buffer::BufferMemoryAccountSharedPtr account() const override { return account_; }",
          "",
          "[Added Lines]",
          "363:   Buffer::BufferMemoryAccountSharedPtr account() const override { return nullptr; }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "452:   void encodeTrailers(ResponseTrailerMapPtr&& trailers) override;",
          "453:   ResponseTrailerMapOptRef responseTrailers() const override { return {}; }",
          "454:   void encodeMetadata(MetadataMapPtr&&) override {}",
          "461:   void onDecoderFilterBelowWriteBufferLowWatermark() override {",
          "462:     ASSERT(high_watermark_calls_ != 0);",
          "463:     --high_watermark_calls_;",
          "467:   }",
          "468:   void addDownstreamWatermarkCallbacks(DownstreamWatermarkCallbacks&) override {}",
          "469:   void removeDownstreamWatermarkCallbacks(DownstreamWatermarkCallbacks&) override {}",
          "474:   bool recreateStream(const ResponseHeaderMap*) override { return false; }",
          "475:   const ScopeTrackedObject& scope() override { return *this; }",
          "476:   void restoreContextOnContinue(ScopeTrackedObjectStack& tracked_object_stack) override {",
          "",
          "[Removed Lines]",
          "455:   void onDecoderFilterAboveWriteBufferHighWatermark() override {",
          "456:     ++high_watermark_calls_;",
          "457:     if (watermark_callbacks_.has_value()) {",
          "458:       watermark_callbacks_->get().onDecoderFilterAboveWriteBufferHighWatermark();",
          "459:     }",
          "460:   }",
          "464:     if (watermark_callbacks_.has_value()) {",
          "465:       watermark_callbacks_->get().onDecoderFilterBelowWriteBufferLowWatermark();",
          "466:     }",
          "470:   void setDecoderBufferLimit(uint32_t) override {",
          "471:     IS_ENVOY_BUG(\"decoder buffer limits should not be overridden on async streams.\");",
          "472:   }",
          "473:   uint32_t decoderBufferLimit() override { return buffer_limit_.value_or(0); }",
          "",
          "[Added Lines]",
          "413:   void onDecoderFilterAboveWriteBufferHighWatermark() override { ++high_watermark_calls_; }",
          "420:   void setDecoderBufferLimit(uint32_t) override {}",
          "421:   uint32_t decoderBufferLimit() override { return 0; }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "508:   bool local_closed_{};",
          "509:   bool remote_closed_{};",
          "510:   Buffer::InstancePtr buffered_body_;",
          "513:   bool encoded_response_headers_{};",
          "514:   bool is_grpc_request_{};",
          "515:   bool is_head_request_{false};",
          "",
          "[Removed Lines]",
          "511:   Buffer::BufferMemoryAccountSharedPtr account_{nullptr};",
          "512:   absl::optional<uint32_t> buffer_limit_{absl::nullopt};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "519:   friend class AsyncClientImplUnitTest;",
          "520: };",
          "525: public:",
          "558: private:",
          "559:   void initialize();",
          "577:   void addDecodedData(Buffer::Instance&, bool) override {",
          "",
          "[Removed Lines]",
          "522: class AsyncRequestSharedImpl : public virtual AsyncClient::Request,",
          "523:                                protected AsyncStreamImpl,",
          "524:                                protected AsyncClient::StreamCallbacks {",
          "526:   void cancel() final;",
          "528: protected:",
          "529:   AsyncRequestSharedImpl(AsyncClientImpl& parent, AsyncClient::Callbacks& callbacks,",
          "530:                          const AsyncClient::RequestOptions& options);",
          "531:   void onHeaders(ResponseHeaderMapPtr&& headers, bool end_stream) final;",
          "532:   void onData(Buffer::Instance& data, bool end_stream) final;",
          "533:   void onTrailers(ResponseTrailerMapPtr&& trailers) final;",
          "534:   void onComplete() final;",
          "535:   void onReset() final;",
          "537:   AsyncClient::Callbacks& callbacks_;",
          "538:   Tracing::SpanPtr child_span_;",
          "539:   std::unique_ptr<ResponseMessageImpl> response_;",
          "540:   bool cancelled_{};",
          "541: };",
          "543: class AsyncOngoingRequestImpl final : public AsyncClient::OngoingRequest,",
          "544:                                       public AsyncRequestSharedImpl {",
          "545: public:",
          "546:   AsyncOngoingRequestImpl(RequestHeaderMapPtr&& request_headers, AsyncClientImpl& parent,",
          "547:                           AsyncClient::Callbacks& callbacks,",
          "548:                           const AsyncClient::RequestOptions& options)",
          "549:       : AsyncRequestSharedImpl(parent, callbacks, options),",
          "550:         request_headers_(std::move(request_headers)) {",
          "551:     ASSERT(request_headers_);",
          "552:   }",
          "553:   void captureAndSendTrailers(RequestTrailerMapPtr&& trailers) override {",
          "554:     request_trailers_ = std::move(trailers);",
          "555:     sendTrailers(*request_trailers_);",
          "556:   }",
          "561:   RequestHeaderMapPtr request_headers_;",
          "562:   RequestTrailerMapPtr request_trailers_;",
          "564:   friend class AsyncClientImpl;",
          "565: };",
          "567: class AsyncRequestImpl final : public AsyncRequestSharedImpl {",
          "568: public:",
          "569:   AsyncRequestImpl(RequestMessagePtr&& request, AsyncClientImpl& parent,",
          "570:                    AsyncClient::Callbacks& callbacks, const AsyncClient::RequestOptions& options)",
          "571:       : AsyncRequestSharedImpl(parent, callbacks, options), request_(std::move(request)) {}",
          "573: private:",
          "574:   void initialize();",
          "",
          "[Added Lines]",
          "468: class AsyncRequestImpl final : public AsyncClient::Request,",
          "469:                                AsyncStreamImpl,",
          "470:                                AsyncClient::StreamCallbacks {",
          "472:   AsyncRequestImpl(RequestMessagePtr&& request, AsyncClientImpl& parent,",
          "473:                    AsyncClient::Callbacks& callbacks, const AsyncClient::RequestOptions& options);",
          "476:   void cancel() override;",
          "482:   void onHeaders(ResponseHeaderMapPtr&& headers, bool end_stream) override;",
          "483:   void onData(Buffer::Instance& data, bool end_stream) override;",
          "484:   void onTrailers(ResponseTrailerMapPtr&& trailers) override;",
          "485:   void onComplete() override;",
          "486:   void onReset() override;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "582:   void modifyDecodingBuffer(std::function<void(Buffer::Instance&)>) override {}",
          "584:   RequestMessagePtr request_;",
          "586:   friend class AsyncClientImpl;",
          "587: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497:   AsyncClient::Callbacks& callbacks_;",
          "498:   std::unique_ptr<ResponseMessageImpl> response_;",
          "499:   bool cancelled_{};",
          "500:   Tracing::SpanPtr child_span_;",
          "",
          "---------------"
        ],
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"source/common/router/router.h\"",
          "4: #include <chrono>",
          "5: #include <cstdint>",
          "6: #include <functional>",
          "",
          "[Removed Lines]",
          "3: #include <algorithm>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:   ASSERT(upstream_requests_.empty());",
          "285:   ASSERT(!retry_state_);",
          "293: }",
          "295: const FilterUtility::StrictHeaderChecker::HeaderCheckResult",
          "",
          "[Removed Lines]",
          "288:   for (auto* shadow_stream : shadow_streams_) {",
          "289:     shadow_stream->removeDestructorCallback();",
          "290:     shadow_stream->removeWatermarkCallbacks();",
          "291:     shadow_stream->cancel();",
          "292:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "707:   LinkedList::moveIntoList(std::move(upstream_request), upstream_requests_);",
          "708:   upstream_requests_.front()->acceptHeadersFromRouter(end_stream);",
          "752:   if (end_stream) {",
          "753:     onRequestComplete();",
          "754:   }",
          "",
          "[Removed Lines]",
          "709:   if (streaming_shadows_) {",
          "711:     for (const auto& shadow_policy_wrapper : active_shadow_policies_) {",
          "712:       const auto& shadow_policy = shadow_policy_wrapper.get();",
          "713:       const absl::optional<absl::string_view> shadow_cluster_name =",
          "714:           getShadowCluster(shadow_policy, *downstream_headers_);",
          "715:       if (!shadow_cluster_name.has_value()) {",
          "716:         continue;",
          "717:       }",
          "718:       auto shadow_headers = Http::createHeaderMap<Http::RequestHeaderMapImpl>(*shadow_headers_);",
          "719:       auto options =",
          "720:           Http::AsyncClient::RequestOptions()",
          "721:               .setTimeout(timeout_.global_timeout_)",
          "722:               .setParentSpan(callbacks_->activeSpan())",
          "723:               .setChildSpanName(\"mirror\")",
          "724:               .setSampled(shadow_policy.traceSampled())",
          "725:               .setIsShadow(true)",
          "726:               .setBufferAccount(callbacks_->account())",
          "729:               .setBufferLimit(1 > retry_shadow_buffer_limit_ ? 1 : retry_shadow_buffer_limit_);",
          "730:       if (Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.closer_shadow_behavior\")) {",
          "731:         options.setFilterConfig(config_);",
          "732:       }",
          "733:       if (end_stream) {",
          "736:         Http::RequestMessagePtr request(new Http::RequestMessageImpl(",
          "737:             Http::createHeaderMap<Http::RequestHeaderMapImpl>(*shadow_headers_)));",
          "738:         config_.shadowWriter().shadow(std::string(shadow_cluster_name.value()), std::move(request),",
          "739:                                       options);",
          "740:       } else {",
          "741:         Http::AsyncClient::OngoingRequest* shadow_stream = config_.shadowWriter().streamingShadow(",
          "742:             std::string(shadow_cluster_name.value()), std::move(shadow_headers), options);",
          "743:         if (shadow_stream != nullptr) {",
          "744:           shadow_streams_.insert(shadow_stream);",
          "745:           shadow_stream->setDestructorCallback(",
          "746:               [this, shadow_stream]() { shadow_streams_.erase(shadow_stream); });",
          "747:           shadow_stream->setWatermarkCallbacks(*callbacks_);",
          "748:         }",
          "749:       }",
          "750:     }",
          "751:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "802:   ASSERT(upstream_requests_.size() <= 1);",
          "806:                    (route_entry_ && route_entry_->internalRedirectPolicy().enabled());",
          "807:   if (buffering &&",
          "808:       getLength(callbacks_->decodingBuffer()) + data.length() > retry_shadow_buffer_limit_) {",
          "",
          "[Removed Lines]",
          "804:   bool buffering = (retry_state_ && retry_state_->enabled()) ||",
          "805:                    (!active_shadow_policies_.empty() && !streaming_shadows_) ||",
          "",
          "[Added Lines]",
          "753:   bool buffering = (retry_state_ && retry_state_->enabled()) || !active_shadow_policies_.empty() ||",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "834:   ASSERT(buffering || !upstream_requests_.empty());",
          "847:   if (buffering) {",
          "852:     upstream_requests_.front()->acceptDataFromRouter(data, end_stream);",
          "853:   }",
          "",
          "[Removed Lines]",
          "836:   for (auto* shadow_stream : shadow_streams_) {",
          "837:     if (end_stream) {",
          "838:       shadow_stream->removeDestructorCallback();",
          "839:       shadow_stream->removeWatermarkCallbacks();",
          "840:     }",
          "841:     Buffer::OwnedImpl copy(data);",
          "842:     shadow_stream->sendData(copy, end_stream);",
          "843:   }",
          "844:   if (end_stream) {",
          "845:     shadow_streams_.clear();",
          "846:   }",
          "848:     Buffer::OwnedImpl copy(data);",
          "849:     callbacks_->addDecodedData(copy, true);",
          "850:   }",
          "851:   if (!upstream_requests_.empty()) {",
          "",
          "[Added Lines]",
          "787:     if (!upstream_requests_.empty()) {",
          "788:       Buffer::OwnedImpl copy(data);",
          "789:       upstream_requests_.front()->acceptDataFromRouter(copy, end_stream);",
          "790:     }",
          "797:     callbacks_->addDecodedData(data, true);",
          "798:   } else {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "876:   if (!upstream_requests_.empty()) {",
          "877:     upstream_requests_.front()->acceptTrailersFromRouter(trailers);",
          "878:   }",
          "887:   onRequestComplete();",
          "888:   return Http::FilterTrailersStatus::StopIteration;",
          "889: }",
          "",
          "[Removed Lines]",
          "879:   for (auto* shadow_stream : shadow_streams_) {",
          "880:     shadow_stream->removeDestructorCallback();",
          "881:     shadow_stream->removeWatermarkCallbacks();",
          "882:     shadow_stream->captureAndSendTrailers(",
          "883:         Http::createHeaderMap<Http::RequestTrailerMapImpl>(*shadow_trailers_));",
          "884:   }",
          "885:   shadow_streams_.clear();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "942:   for (const auto& shadow_policy_wrapper : active_shadow_policies_) {",
          "943:     const auto& shadow_policy = shadow_policy_wrapper.get();",
          "946:         getShadowCluster(shadow_policy, *downstream_headers_);",
          "950:       continue;",
          "951:     }",
          "",
          "[Removed Lines]",
          "945:     const absl::optional<absl::string_view> shadow_cluster_name =",
          "949:     if (!shadow_cluster_name.has_value()) {",
          "",
          "[Added Lines]",
          "884:     const absl::optional<absl::string_view> cluster_name =",
          "888:     if (!cluster_name.has_value()) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "968:     if (Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.closer_shadow_behavior\")) {",
          "969:       options.setFilterConfig(config_);",
          "970:     }",
          "973:   }",
          "974: }",
          "",
          "[Removed Lines]",
          "971:     config_.shadowWriter().shadow(std::string(shadow_cluster_name.value()), std::move(request),",
          "972:                                   options);",
          "",
          "[Added Lines]",
          "910:     config_.shadowWriter().shadow(std::string(cluster_name.value()), std::move(request), options);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "984:   if (!upstream_requests_.empty()) {",
          "991:     if (timeout_.global_timeout_.count() > 0) {",
          "992:       response_timeout_ = dispatcher.createTimer([this]() -> void { onResponseTimeout(); });",
          "",
          "[Removed Lines]",
          "987:     if (!streaming_shadows_) {",
          "988:       maybeDoShadowing();",
          "989:     }",
          "",
          "[Added Lines]",
          "925:     maybeDoShadowing();",
          "",
          "---------------"
        ],
        "source/common/router/router.h||source/common/router/router.h": [
          "File: source/common/router/router.h -> source/common/router/router.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:   Filter(FilterConfig& config, FilterStats& stats)",
          "367:       : config_(config), stats_(stats), downstream_1xx_headers_encoded_(false),",
          "368:         downstream_response_started_(false), downstream_end_stream_(false), is_retry_(false),",
          "372:   ~Filter() override;",
          "",
          "[Removed Lines]",
          "369:         request_buffer_overflowed_(false), streaming_shadows_(Runtime::runtimeFeatureEnabled(",
          "370:                                                \"envoy.reloadable_features.streaming_shadow\")) {}",
          "",
          "[Added Lines]",
          "369:         request_buffer_overflowed_(false) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "662:   Network::TransportSocketOptionsConstSharedPtr transport_socket_options_;",
          "663:   Network::Socket::OptionsSharedPtr upstream_options_;",
          "667: };",
          "669: class ProdFilter : public Filter {",
          "",
          "[Removed Lines]",
          "665:   absl::flat_hash_set<Http::AsyncClient::OngoingRequest*> shadow_streams_;",
          "666:   const bool streaming_shadows_;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/common/router/shadow_writer_impl.cc||source/common/router/shadow_writer_impl.cc": [
          "File: source/common/router/shadow_writer_impl.cc -> source/common/router/shadow_writer_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: namespace Envoy {",
          "12: namespace Router {",
          "27: void ShadowWriterImpl::shadow(const std::string& cluster, Http::RequestMessagePtr&& request,",
          "28:                               const Http::AsyncClient::RequestOptions& options) {",
          "55:   const auto thread_local_cluster = cm_.getThreadLocalCluster(cluster);",
          "56:   if (thread_local_cluster == nullptr) {",
          "57:     ENVOY_LOG(debug, \"shadow cluster '{}' does not exist\", cluster);",
          "59:   }",
          "65: }",
          "67: } // namespace Router",
          "",
          "[Removed Lines]",
          "14: namespace {",
          "16: std::string shadowAppendedHost(absl::string_view host) {",
          "17:   ASSERT(!host.empty());",
          "20:   auto parts = StringUtil::splitToken(host, \":\");",
          "21:   ASSERT(!parts.empty() && parts.size() <= 2);",
          "22:   return parts.size() == 2 ? absl::StrJoin(parts, \"-shadow:\") : absl::StrCat(host, \"-shadow\");",
          "23: }",
          "25: } // namespace",
          "29:   const auto thread_local_cluster =",
          "30:       getClusterAndPreprocessHeadersAndOptions(cluster, request->headers(), options);",
          "31:   if (thread_local_cluster == nullptr) {",
          "32:     return;",
          "33:   }",
          "35:   thread_local_cluster->httpAsyncClient().send(std::move(request), *this, options);",
          "36: }",
          "38: Http::AsyncClient::OngoingRequest*",
          "39: ShadowWriterImpl::streamingShadow(const std::string& cluster, Http::RequestHeaderMapPtr&& headers,",
          "40:                                   const Http::AsyncClient::RequestOptions& options) {",
          "41:   const auto thread_local_cluster =",
          "42:       getClusterAndPreprocessHeadersAndOptions(cluster, *headers, options);",
          "43:   if (thread_local_cluster == nullptr) {",
          "44:     return nullptr;",
          "45:   }",
          "46:   return thread_local_cluster->httpAsyncClient().startRequest(std::move(headers), *this, options);",
          "47: }",
          "49: Upstream::ThreadLocalCluster* ShadowWriterImpl::getClusterAndPreprocessHeadersAndOptions(",
          "50:     absl::string_view cluster, Http::RequestHeaderMap& headers,",
          "51:     const Http::AsyncClient::RequestOptions& options) {",
          "58:     return nullptr;",
          "61:   headers.setHost(shadowAppendedHost(headers.getHostValue()));",
          "63:   const_cast<Http::AsyncClient::RequestOptions&>(options).setIsShadow(true);",
          "64:   return thread_local_cluster;",
          "",
          "[Added Lines]",
          "22:     return;",
          "25:   ASSERT(!request->headers().getHostValue().empty());",
          "27:   auto parts = StringUtil::splitToken(request->headers().getHostValue(), \":\");",
          "28:   ASSERT(!parts.empty() && parts.size() <= 2);",
          "29:   request->headers().setHost(parts.size() == 2",
          "30:                                  ? absl::StrJoin(parts, \"-shadow:\")",
          "31:                                  : absl::StrCat(request->headers().getHostValue(), \"-shadow\"));",
          "32:   const auto& shadow_options = options.is_shadow ? options : [options] {",
          "33:     Http::AsyncClient::RequestOptions actual_options(options);",
          "34:     actual_options.setIsShadow(true);",
          "35:     return actual_options;",
          "36:   }();",
          "38:   thread_local_cluster->httpAsyncClient().send(std::move(request), *this, shadow_options);",
          "",
          "---------------"
        ],
        "source/common/router/shadow_writer_impl.h||source/common/router/shadow_writer_impl.h": [
          "File: source/common/router/shadow_writer_impl.h -> source/common/router/shadow_writer_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   void shadow(const std::string& cluster, Http::RequestMessagePtr&& request,",
          "24:               const Http::AsyncClient::RequestOptions& options) override;",
          "31:   void onSuccess(const Http::AsyncClient::Request&, Http::ResponseMessagePtr&&) override {}",
          "32:   void onFailure(const Http::AsyncClient::Request&, Http::AsyncClient::FailureReason) override {}",
          "",
          "[Removed Lines]",
          "26:   Http::AsyncClient::OngoingRequest*",
          "27:   streamingShadow(const std::string& cluster, Http::RequestHeaderMapPtr&& headers,",
          "28:                   const Http::AsyncClient::RequestOptions& options) override;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:                                     const Http::ResponseHeaderMap*) override {}",
          "36: private:",
          "41:   Upstream::ClusterManager& cm_;",
          "42: };",
          "",
          "[Removed Lines]",
          "37:   Upstream::ThreadLocalCluster*",
          "38:   getClusterAndPreprocessHeadersAndOptions(absl::string_view cluster,",
          "39:                                            Http::RequestHeaderMap& headers,",
          "40:                                            const Http::AsyncClient::RequestOptions& options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc": [
          "File: source/common/runtime/runtime_features.cc -> source/common/runtime/runtime_features.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: FALSE_RUNTIME_GUARD(envoy_reloadable_features_test_feature_false);",
          "84: FALSE_RUNTIME_GUARD(envoy_reloadable_features_unified_mux);",
          "",
          "[Removed Lines]",
          "82: FALSE_RUNTIME_GUARD(envoy_reloadable_features_streaming_shadow);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/common/buffer/buffer_test.cc||test/common/buffer/buffer_test.cc": [
          "File: test/common/buffer/buffer_test.cc -> test/common/buffer/buffer_test.cc"
        ],
        "test/common/http/async_client_impl_test.cc||test/common/http/async_client_impl_test.cc": [
          "File: test/common/http/async_client_impl_test.cc -> test/common/http/async_client_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: using testing::NiceMock;",
          "37: using testing::Return;",
          "38: using testing::ReturnRef;",
          "41: namespace Envoy {",
          "42: namespace Http {",
          "",
          "[Removed Lines]",
          "39: using testing::StrictMock;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   TestRequestHeaderMapImpl headers_{};",
          "83:   RequestMessagePtr message_{new RequestMessageImpl()};",
          "84:   Stats::MockIsolatedStatsStore stats_store_;",
          "87:   NiceMock<Upstream::MockClusterManager> cm_;",
          "88:   NiceMock<MockRequestEncoder> stream_encoder_;",
          "89:   ResponseDecoder* response_decoder_{};",
          "",
          "[Removed Lines]",
          "85:   NiceMock<MockAsyncClientCallbacks> callbacks_;",
          "86:   NiceMock<MockAsyncClientStreamCallbacks> stream_callbacks_;",
          "",
          "[Added Lines]",
          "84:   MockAsyncClientCallbacks callbacks_;",
          "85:   MockAsyncClientStreamCallbacks stream_callbacks_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "204:                      .value());",
          "205: }",
          "358: TEST_F(AsyncClientImplTracingTest, Basic) {",
          "359:   Tracing::MockSpan* child_span{new Tracing::MockSpan()};",
          "360:   message_->body().add(\"test body\");",
          "",
          "[Removed Lines]",
          "207: TEST_F(AsyncClientImplTest, BasicOngoingRequest) {",
          "208:   auto headers = std::make_unique<TestRequestHeaderMapImpl>();",
          "209:   HttpTestUtility::addDefaultHeaders(*headers);",
          "210:   TestRequestHeaderMapImpl headers_copy = *headers;",
          "212:   Buffer::OwnedImpl data(\"test data\");",
          "213:   const Buffer::OwnedImpl data_copy(data.toString());",
          "215:   auto trailers = std::make_unique<TestRequestTrailerMapImpl>();",
          "216:   trailers->addCopy(\"some\", \"trailer\");",
          "217:   const TestRequestTrailerMapImpl trailers_copy = *trailers;",
          "219:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "220:       .WillOnce(Invoke(",
          "221:           [&](ResponseDecoder& decoder, ConnectionPool::Callbacks& callbacks,",
          "222:               const ConnectionPool::Instance::StreamOptions&) -> ConnectionPool::Cancellable* {",
          "223:             callbacks.onPoolReady(stream_encoder_, cm_.thread_local_cluster_.conn_pool_.host_,",
          "224:                                   stream_info_, {});",
          "225:             response_decoder_ = &decoder;",
          "226:             return nullptr;",
          "227:           }));",
          "229:   headers_copy.addCopy(\"x-envoy-internal\", \"true\");",
          "230:   headers_copy.addCopy(\"x-forwarded-for\", \"127.0.0.1\");",
          "232:   EXPECT_CALL(stream_encoder_, encodeHeaders(HeaderMapEqualRef(&headers_copy), false));",
          "233:   EXPECT_CALL(stream_encoder_, encodeData(BufferEqual(&data_copy), false));",
          "234:   EXPECT_CALL(stream_encoder_, encodeTrailers(HeaderMapEqualRef(&trailers_copy)));",
          "236:   AsyncClient::OngoingRequest* request =",
          "237:       client_.startRequest(std::move(headers), callbacks_, AsyncClient::RequestOptions());",
          "238:   EXPECT_NE(request, nullptr);",
          "240:   request->sendData(data, false);",
          "241:   request->captureAndSendTrailers(std::move(trailers));",
          "243:   expectSuccess(request, 200);",
          "245:   ResponseHeaderMapPtr response_headers(new TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "246:   response_decoder_->decodeHeaders(std::move(response_headers), false);",
          "247:   Buffer::OwnedImpl response_data(\"test data\");",
          "248:   response_decoder_->decodeData(response_data, true);",
          "250:   EXPECT_EQ(",
          "251:       1UL,",
          "252:       cm_.thread_local_cluster_.cluster_.info_->stats_store_.counter(\"upstream_rq_200\").value());",
          "253:   EXPECT_EQ(1UL, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "254:                      .counter(\"internal.upstream_rq_200\")",
          "255:                      .value());",
          "256: }",
          "258: TEST_F(AsyncClientImplTest, OngoingRequestWithWatermarking) {",
          "259:   auto headers = std::make_unique<TestRequestHeaderMapImpl>();",
          "260:   HttpTestUtility::addDefaultHeaders(*headers);",
          "261:   TestRequestHeaderMapImpl headers_copy = *headers;",
          "262:   headers_copy.addCopy(\"x-envoy-internal\", \"true\");",
          "263:   headers_copy.addCopy(\"x-forwarded-for\", \"127.0.0.1\");",
          "265:   Buffer::OwnedImpl data(\"test data\");",
          "266:   const Buffer::OwnedImpl data_copy(data.toString());",
          "268:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "269:       .WillOnce(Invoke(",
          "270:           [&](ResponseDecoder& decoder, ConnectionPool::Callbacks& callbacks,",
          "271:               const ConnectionPool::Instance::StreamOptions&) -> ConnectionPool::Cancellable* {",
          "272:             callbacks.onPoolReady(stream_encoder_, cm_.thread_local_cluster_.conn_pool_.host_,",
          "273:                                   stream_info_, {});",
          "275:             dynamic_cast<MockStream&>(stream_encoder_.getStream()).runHighWatermarkCallbacks();",
          "276:             response_decoder_ = &decoder;",
          "277:             return nullptr;",
          "278:           }));",
          "280:   EXPECT_CALL(stream_encoder_, encodeHeaders(HeaderMapEqualRef(&headers_copy), false));",
          "282:   auto* request =",
          "283:       client_.startRequest(std::move(headers), callbacks_, AsyncClient::RequestOptions());",
          "284:   EXPECT_NE(request, nullptr);",
          "285:   StrictMock<MockStreamDecoderFilterCallbacks> watermark_callbacks;",
          "287:   EXPECT_CALL(watermark_callbacks, onDecoderFilterAboveWriteBufferHighWatermark());",
          "288:   request->setWatermarkCallbacks(watermark_callbacks);",
          "291:   EXPECT_CALL(watermark_callbacks, onDecoderFilterBelowWriteBufferLowWatermark());",
          "292:   dynamic_cast<MockStream&>(stream_encoder_.getStream()).runLowWatermarkCallbacks();",
          "294:   EXPECT_CALL(stream_encoder_, encodeData(BufferEqual(&data_copy), false));",
          "295:   request->sendData(data, false);",
          "297:   EXPECT_CALL(watermark_callbacks, onDecoderFilterAboveWriteBufferHighWatermark());",
          "298:   dynamic_cast<MockStream&>(stream_encoder_.getStream()).runHighWatermarkCallbacks();",
          "301:   EXPECT_CALL(watermark_callbacks, onDecoderFilterBelowWriteBufferLowWatermark());",
          "302:   request->removeWatermarkCallbacks();",
          "304:   EXPECT_CALL(watermark_callbacks, onDecoderFilterAboveWriteBufferHighWatermark());",
          "305:   request->setWatermarkCallbacks(watermark_callbacks);",
          "307:   EXPECT_CALL(stream_encoder_, encodeData(BufferStringEqual(\"\"), true));",
          "308:   Buffer::OwnedImpl empty;",
          "309:   request->sendData(empty, true);",
          "311:   ResponseHeaderMapPtr response_headers(new TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "313:   EXPECT_CALL(watermark_callbacks, onDecoderFilterBelowWriteBufferLowWatermark());",
          "314:   response_decoder_->decodeHeaders(std::move(response_headers), true);",
          "315: }",
          "317: TEST_F(AsyncClientImplTest, OngoingRequestWithWatermarkingAndReset) {",
          "318:   auto headers = std::make_unique<TestRequestHeaderMapImpl>();",
          "319:   HttpTestUtility::addDefaultHeaders(*headers);",
          "320:   TestRequestHeaderMapImpl headers_copy = *headers;",
          "321:   headers_copy.addCopy(\"x-envoy-internal\", \"true\");",
          "322:   headers_copy.addCopy(\"x-forwarded-for\", \"127.0.0.1\");",
          "324:   Buffer::OwnedImpl data(\"test data\");",
          "325:   const Buffer::OwnedImpl data_copy(data.toString());",
          "327:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "328:       .WillOnce(Invoke(",
          "329:           [&](ResponseDecoder& decoder, ConnectionPool::Callbacks& callbacks,",
          "330:               const ConnectionPool::Instance::StreamOptions&) -> ConnectionPool::Cancellable* {",
          "331:             callbacks.onPoolReady(stream_encoder_, cm_.thread_local_cluster_.conn_pool_.host_,",
          "332:                                   stream_info_, {});",
          "333:             response_decoder_ = &decoder;",
          "334:             return nullptr;",
          "335:           }));",
          "337:   EXPECT_CALL(stream_encoder_, encodeHeaders(HeaderMapEqualRef(&headers_copy), false));",
          "339:   auto* request =",
          "340:       client_.startRequest(std::move(headers), callbacks_, AsyncClient::RequestOptions());",
          "341:   EXPECT_NE(request, nullptr);",
          "343:   StrictMock<MockStreamDecoderFilterCallbacks> watermark_callbacks;",
          "344:   request->setWatermarkCallbacks(watermark_callbacks);",
          "346:   EXPECT_CALL(stream_encoder_, encodeData(BufferEqual(&data_copy), false));",
          "347:   request->sendData(data, false);",
          "349:   EXPECT_CALL(watermark_callbacks, onDecoderFilterAboveWriteBufferHighWatermark());",
          "350:   dynamic_cast<MockStream&>(stream_encoder_.getStream()).runHighWatermarkCallbacks();",
          "353:   EXPECT_CALL(watermark_callbacks, onDecoderFilterBelowWriteBufferLowWatermark());",
          "354:   expectSuccess(request, 503);",
          "355:   stream_encoder_.getStream().resetStream(StreamResetReason::RemoteReset);",
          "356: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1272:   stream->sendData(*body, false);",
          "1274:   Http::StreamDecoderFilterCallbacks* filter_callbacks =",
          "1276:   filter_callbacks->encodeHeaders(",
          "1277:       ResponseHeaderMapPtr(new TestResponseHeaderMapImpl{{\":status\", \"200\"}}), false, \"details\");",
          "1278:   dispatcher_.clearDeferredDeleteList();",
          "",
          "[Removed Lines]",
          "1275:       dynamic_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "[Added Lines]",
          "1123:       static_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1813:   AsyncClient::Stream* stream = client_.start(stream_callbacks_, AsyncClient::StreamOptions());",
          "1814:   stream->sendHeaders(headers_, false);",
          "1815:   Http::StreamDecoderFilterCallbacks* filter_callbacks =",
          "1817:   filter_callbacks->onDecoderFilterAboveWriteBufferHighWatermark();",
          "1818:   EXPECT_TRUE(stream->isAboveWriteBufferHighWatermark());",
          "1819:   filter_callbacks->onDecoderFilterAboveWriteBufferHighWatermark();",
          "",
          "[Removed Lines]",
          "1816:       dynamic_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "[Added Lines]",
          "1664:       static_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1829:   AsyncClient::Stream* stream = client_.start(stream_callbacks_, AsyncClient::StreamOptions());",
          "1830:   stream->sendHeaders(headers_, false);",
          "1831:   Http::StreamDecoderFilterCallbacks* filter_callbacks =",
          "1833:   auto route = filter_callbacks->route();",
          "1834:   ASSERT_NE(nullptr, route);",
          "1835:   auto route_entry = route->routeEntry();",
          "",
          "[Removed Lines]",
          "1832:       dynamic_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "[Added Lines]",
          "1680:       static_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1850: TEST_F(AsyncClientImplTest, DumpState) {",
          "1851:   AsyncClient::Stream* stream = client_.start(stream_callbacks_, AsyncClient::StreamOptions());",
          "1852:   Http::StreamDecoderFilterCallbacks* filter_callbacks =",
          "1855:   std::stringstream out;",
          "1856:   filter_callbacks->scope().dumpState(out);",
          "",
          "[Removed Lines]",
          "1853:       dynamic_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "[Added Lines]",
          "1701:       static_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "---------------"
        ],
        "test/common/router/router_2_test.cc||test/common/router/router_2_test.cc": [
          "File: test/common/router/router_2_test.cc -> test/common/router/router_2_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   Http::TestRequestHeaderMapImpl headers;",
          "31:   HttpTestUtility::addDefaultHeaders(headers);",
          "32:   EXPECT_CALL(callbacks_.route_->route_entry_, finalizeRequestHeaders(_, _, false));",
          "34:   EXPECT_FALSE(headers.has(\"x-envoy-expected-rq-timeout-ms\"));",
          "37:   EXPECT_CALL(cancellable_, cancel(_));",
          "39:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "40:   EXPECT_EQ(0U,",
          "41:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "33:   router_->decodeHeaders(headers, true);",
          "38:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "33:   router_.decodeHeaders(headers, true);",
          "38:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   Http::TestRequestHeaderMapImpl headers;",
          "56:   HttpTestUtility::addDefaultHeaders(headers);",
          "58: }",
          "",
          "[Removed Lines]",
          "57:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "57:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:   Http::TestRequestHeaderMapImpl headers;",
          "72:   HttpTestUtility::addDefaultHeaders(headers);",
          "74:   EXPECT_EQ(1U,",
          "75:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "73:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "73:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:   Http::TestRequestHeaderMapImpl headers;",
          "104:   HttpTestUtility::addDefaultHeaders(headers);",
          "106: }",
          "108: class WatermarkTest : public RouterTestBase {",
          "",
          "[Removed Lines]",
          "105:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "105:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:               return nullptr;",
          "136:             }));",
          "137:     HttpTestUtility::addDefaultHeaders(headers_);",
          "139:     if (pool_ready) {",
          "140:       EXPECT_EQ(",
          "141:           1U, callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "138:     router_->decodeHeaders(headers_, header_only_request);",
          "",
          "[Added Lines]",
          "138:     router_.decodeHeaders(headers_, header_only_request);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "201: TEST_F(WatermarkTest, FilterWatermarks) {",
          "202:   EXPECT_CALL(callbacks_, decoderBufferLimit()).Times(AtLeast(3)).WillRepeatedly(Return(10));",
          "205:   sendRequest(false, false);",
          "208:   Buffer::OwnedImpl data(\"1234567890\");",
          "210:   EXPECT_EQ(0u, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "211:                     .counter(\"upstream_flow_control_backed_up_total\")",
          "212:                     .value());",
          "",
          "[Removed Lines]",
          "203:   router_->setDecoderFilterCallbacks(callbacks_);",
          "209:   router_->decodeData(data, false);",
          "",
          "[Added Lines]",
          "203:   router_.setDecoderFilterCallbacks(callbacks_);",
          "209:   router_.decodeData(data, false);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "216:   Buffer::OwnedImpl last_byte(\"!\");",
          "218:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "219:                     .counter(\"upstream_flow_control_backed_up_total\")",
          "220:                     .value());",
          "",
          "[Removed Lines]",
          "217:   router_->decodeData(last_byte, true);",
          "",
          "[Added Lines]",
          "217:   router_.decodeData(last_byte, true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "238: TEST_F(WatermarkTest, FilterWatermarksUnwound) {",
          "239:   num_add_callbacks_ = 0;",
          "240:   EXPECT_CALL(callbacks_, decoderBufferLimit()).Times(AtLeast(3)).WillRepeatedly(Return(10));",
          "243:   sendRequest(false, false);",
          "246:   Buffer::OwnedImpl data(\"1234567890!\");",
          "248:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "249:                     .counter(\"upstream_flow_control_backed_up_total\")",
          "250:                     .value());",
          "",
          "[Removed Lines]",
          "241:   router_->setDecoderFilterCallbacks(callbacks_);",
          "247:   router_->decodeData(data, false);",
          "",
          "[Added Lines]",
          "241:   router_.setDecoderFilterCallbacks(callbacks_);",
          "247:   router_.decodeData(data, false);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "262: TEST_F(WatermarkTest, RetryRequestNotComplete) {",
          "263:   EXPECT_CALL(callbacks_, decoderBufferLimit()).Times(AtLeast(2)).WillRepeatedly(Return(10));",
          "265:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "266:   Http::ResponseDecoder* response_decoder = nullptr;",
          "267:   expectNewStreamWithImmediateEncoder(encoder1, &response_decoder, Http::Protocol::Http10);",
          "",
          "[Removed Lines]",
          "264:   router_->setDecoderFilterCallbacks(callbacks_);",
          "",
          "[Added Lines]",
          "264:   router_.setDecoderFilterCallbacks(callbacks_);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "272:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "273:   HttpTestUtility::addDefaultHeaders(headers);",
          "275:   Buffer::OwnedImpl data(\"1234567890123\");",
          "281:   EXPECT_EQ(1U,",
          "282:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "274:   router_->decodeHeaders(headers, false);",
          "276:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "277:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "278:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "280:   router_->decodeData(data, false);",
          "",
          "[Added Lines]",
          "274:   router_.decodeHeaders(headers, false);",
          "276:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "277:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "278:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "280:   router_.decodeData(data, false);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "321:   EXPECT_CALL(callbacks_.active_span_, spawnChild_(_, \"router observability_name egress\", _))",
          "322:       .WillOnce(Return(child_span));",
          "323:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "325:   EXPECT_EQ(1U,",
          "326:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "324:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "324:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "370:   EXPECT_CALL(callbacks_.active_span_, spawnChild_(_, \"router observability_name egress\", _))",
          "371:       .WillOnce(Return(child_span));",
          "372:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "374:   EXPECT_EQ(1U,",
          "375:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "373:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "373:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "423:   EXPECT_CALL(callbacks_.active_span_, spawnChild_(_, \"router observability_name egress\", _))",
          "424:       .WillOnce(Return(child_span));",
          "425:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "427:   EXPECT_EQ(1U,",
          "428:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "426:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "426:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "443:   EXPECT_CALL(*child_span,",
          "444:               setTag(Eq(Tracing::Tags::get().Canceled), Eq(Tracing::Tags::get().True)));",
          "445:   EXPECT_CALL(*child_span, finishSpan());",
          "447: }",
          "",
          "[Removed Lines]",
          "446:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "446:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "472:   EXPECT_CALL(callbacks_.active_span_, spawnChild_(_, \"router observability_name egress\", _))",
          "473:       .WillOnce(Return(child_span_1));",
          "474:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "476:   EXPECT_EQ(1U,",
          "477:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "475:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "475:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "492:   EXPECT_CALL(*child_span_1, setTag(Eq(Tracing::Tags::get().ErrorReason), Eq(\"remote reset\")));",
          "493:   EXPECT_CALL(*child_span_1, finishSpan());",
          "496:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "",
          "[Removed Lines]",
          "495:   router_->retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "495:   router_.retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "505:                      -> Http::ConnectionPool::Cancellable* {",
          "506:             response_decoder = &decoder;",
          "507:             EXPECT_CALL(*child_span_2, injectContext(_, _));",
          "509:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "510:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "511:             return nullptr;",
          "",
          "[Removed Lines]",
          "508:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "508:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "516:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "517:   EXPECT_CALL(*child_span_2, setTag(Eq(Tracing::Tags::get().RetryCount), Eq(\"1\")));",
          "520:   EXPECT_EQ(2U,",
          "521:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "519:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "519:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "566:   Http::TestRequestHeaderMapImpl headers;",
          "567:   HttpTestUtility::addDefaultHeaders(headers);",
          "569:   EXPECT_EQ(1U,",
          "570:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "568:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "568:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "632:         EXPECT_TRUE(end_stream);",
          "633:       }));",
          "636:   EXPECT_EQ(callbacks_.details(),",
          "637:             fmt::format(\"request_headers_failed_strict_check{{{}}}\", checked_header));",
          "638: }",
          "",
          "[Removed Lines]",
          "635:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_->decodeHeaders(req_headers, true));",
          "",
          "[Added Lines]",
          "635:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_.decodeHeaders(req_headers, true));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "662:   HttpTestUtility::addDefaultHeaders(headers);",
          "664:   expectResponseTimerCreate();",
          "667: }",
          "669: const std::vector<std::string> SUPPORTED_STRICT_CHECKED_HEADERS = {",
          "",
          "[Removed Lines]",
          "665:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_->decodeHeaders(headers, true));",
          "666:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "665:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_.decodeHeaders(headers, true));",
          "666:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "701:         EXPECT_FALSE(end_stream);",
          "702:       }));",
          "705:   EXPECT_THAT(callbacks_.details(),",
          "706:               StartsWith(fmt::format(\"request_headers_failed_strict_check{{\")));",
          "708: }",
          "",
          "[Removed Lines]",
          "704:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_->decodeHeaders(headers, true));",
          "707:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "704:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_.decodeHeaders(headers, true));",
          "707:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "769:   Http::TestRequestHeaderMapImpl headers{",
          "770:       {\"x-envoy-internal\", \"true\"}, {\"content-type\", \"application/grpc\"}, {\"grpc-timeout\", \"20S\"}};",
          "771:   HttpTestUtility::addDefaultHeaders(headers);",
          "773:   Buffer::OwnedImpl data;",
          "775:   EXPECT_EQ(1U,",
          "776:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "772:   router_->decodeHeaders(headers, false);",
          "774:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "772:   router_.decodeHeaders(headers, false);",
          "774:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "782:       {\":status\", \"504\"}, {\"content-length\", \"24\"}, {\"content-type\", \"text/plain\"}};",
          "783:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "784:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "786:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "787:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "788:   response_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "785:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "785:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "822:   Http::TestRequestHeaderMapImpl headers{",
          "823:       {\"x-envoy-internal\", \"true\"}, {\"content-type\", \"application/grpc\"}, {\"grpc-timeout\", \"20S\"}};",
          "824:   HttpTestUtility::addDefaultHeaders(headers);",
          "826:   Buffer::OwnedImpl data;",
          "828:   EXPECT_EQ(1U,",
          "829:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "825:   router_->decodeHeaders(headers, false);",
          "827:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "825:   router_.decodeHeaders(headers, false);",
          "827:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "835:       {\":status\", \"504\"}, {\"content-length\", \"24\"}, {\"content-type\", \"text/plain\"}};",
          "836:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "837:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "839:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "840:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "841:   response_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "838:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "838:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------"
        ],
        "test/common/router/router_test.cc||test/common/router/router_test.cc": [
          "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     EXPECT_CALL(",
          "123:         cm_.thread_local_cluster_.cluster_.info_->request_response_size_stats_store_,",
          "124:         deliverHistogramToSinks(Property(&Stats::Metric::name, \"upstream_rq_headers_size\"), 74ull));",
          "127:     EXPECT_CALL(callbacks_.dispatcher_, createTimer_);",
          "128:     EXPECT_CALL(",
          "",
          "[Removed Lines]",
          "125:     router_->decodeHeaders(headers, false);",
          "",
          "[Added Lines]",
          "125:     router_.decodeHeaders(headers, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:         deliverHistogramToSinks(Property(&Stats::Metric::name, \"upstream_rq_body_size\"), 5ull));",
          "131:     Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "132:     EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer,",
          "135:     if (with_trailers) {",
          "136:       Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "138:     }",
          "140:     EXPECT_CALL(",
          "",
          "[Removed Lines]",
          "133:               router_->decodeData(*body_data, !with_trailers));",
          "137:       router_->decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "133:               router_.decodeData(*body_data, !with_trailers));",
          "137:       router_.decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:       response_decoder->decodeTrailers(std::move(response_trailers));",
          "160:     }",
          "163:   }",
          "165:   void testAutoSniOptions(",
          "",
          "[Removed Lines]",
          "162:     router_->onDestroy();",
          "",
          "[Added Lines]",
          "162:     router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:     expectResponseTimerCreate();",
          "181:     HttpTestUtility::addDefaultHeaders(headers);",
          "183:     EXPECT_EQ(server_name,",
          "184:               stream_info.filterState()",
          "185:                   ->getDataReadOnly<Network::UpstreamServerName>(Network::UpstreamServerName::key())",
          "",
          "[Removed Lines]",
          "182:     router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "182:     router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "191:                                      ->value()[0]);",
          "192:     }",
          "193:     EXPECT_CALL(cancellable_, cancel(_));",
          "195:     EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "196:     EXPECT_EQ(0U,",
          "197:               callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "194:     router_->onDestroy();",
          "",
          "[Added Lines]",
          "194:     router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "294:   HttpTestUtility::addDefaultHeaders(headers);",
          "295:   EXPECT_CALL(callbacks_, route()).WillOnce(Return(nullptr));",
          "298:   EXPECT_EQ(1UL, stats_store_.counter(\"test.no_route\").value());",
          "299:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "300:   EXPECT_EQ(0U,",
          "",
          "[Removed Lines]",
          "297:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "297:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "322:                      testing::Eq(\"missing required header: :method\"), _, _,",
          "323:                      \"filter_removed_required_request_headers{missing_required_header:_:method}\"))",
          "324:       .WillOnce(InvokeWithoutArgs([] {}));",
          "327: }",
          "329: TEST_F(RouterTest, ClusterNotFound) {",
          "",
          "[Removed Lines]",
          "325:   router_->decodeHeaders(headers, true);",
          "326:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "325:   router_.decodeHeaders(headers, true);",
          "326:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "332:   Http::TestRequestHeaderMapImpl headers;",
          "333:   HttpTestUtility::addDefaultHeaders(headers);",
          "334:   ON_CALL(cm_, getThreadLocalCluster(_)).WillByDefault(Return(nullptr));",
          "336:   EXPECT_EQ(1UL, stats_store_.counter(\"test.no_cluster\").value());",
          "337:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "338:   EXPECT_EQ(0U,",
          "",
          "[Removed Lines]",
          "335:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "335:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "344:   ON_CALL(callbacks_.route_->route_entry_, priority())",
          "345:       .WillByDefault(Return(Upstream::ResourcePriority::High));",
          "346:   EXPECT_CALL(cm_.thread_local_cluster_,",
          "348:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "349:       .WillOnce(Invoke([&](Http::StreamDecoder&, Http::ConnectionPool::Callbacks& callbacks,",
          "350:                            const Http::ConnectionPool::Instance::StreamOptions&)",
          "",
          "[Removed Lines]",
          "347:               httpConnPool(Upstream::ResourcePriority::High, _, router_.get()));",
          "",
          "[Added Lines]",
          "347:               httpConnPool(Upstream::ResourcePriority::High, _, &router_));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "364:   Http::TestRequestHeaderMapImpl headers;",
          "365:   HttpTestUtility::addDefaultHeaders(headers);",
          "367:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "369:   EXPECT_EQ(0U,",
          "",
          "[Removed Lines]",
          "366:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "366:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "376:   ON_CALL(callbacks_.route_->route_entry_, priority())",
          "377:       .WillByDefault(Return(Upstream::ResourcePriority::High));",
          "378:   EXPECT_CALL(cm_.thread_local_cluster_,",
          "380:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "381:       .WillOnce(Invoke([&](Http::StreamDecoder&, Http::ConnectionPool::Callbacks& callbacks,",
          "382:                            const Http::ConnectionPool::Instance::StreamOptions&)",
          "",
          "[Removed Lines]",
          "379:               httpConnPool(Upstream::ResourcePriority::High, _, router_.get()));",
          "",
          "[Added Lines]",
          "379:               httpConnPool(Upstream::ResourcePriority::High, _, &router_));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "396:   Http::TestRequestHeaderMapImpl headers;",
          "397:   HttpTestUtility::addDefaultHeaders(headers);",
          "399:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "401:   EXPECT_EQ(0U,",
          "",
          "[Removed Lines]",
          "398:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "398:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "414:   HttpTestUtility::addDefaultHeaders(headers);",
          "415:   EXPECT_CALL(callbacks_.route_->route_entry_, finalizeRequestHeaders(_, _, true));",
          "418:   EXPECT_EQ(\"10\", headers.get_(\"x-envoy-expected-rq-timeout-ms\"));",
          "421:   EXPECT_CALL(cancellable_, cancel(_));",
          "423:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "424:   EXPECT_EQ(0U,",
          "425:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "417:   router_->decodeHeaders(headers, true);",
          "422:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "417:   router_.decodeHeaders(headers, true);",
          "422:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "434:   Http::TestRequestHeaderMapImpl headers;",
          "435:   HttpTestUtility::addDefaultHeaders(headers);",
          "440:   EXPECT_CALL(cancellable_, cancel(_));",
          "442:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "443:   EXPECT_EQ(0U,",
          "444:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "437:   router_->decodeHeaders(headers, true);",
          "441:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "437:   router_.decodeHeaders(headers, true);",
          "441:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "462:   Http::TestRequestHeaderMapImpl headers;",
          "463:   HttpTestUtility::addDefaultHeaders(headers);",
          "467:   EXPECT_CALL(cancellable_, cancel(_));",
          "469:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "470:   EXPECT_EQ(0U,",
          "471:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "464:   router_->decodeHeaders(headers, true);",
          "468:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "464:   router_.decodeHeaders(headers, true);",
          "468:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "476:       .WillByDefault(Return(&callbacks_.route_->route_entry_.hash_policy_));",
          "477:   EXPECT_CALL(callbacks_.route_->route_entry_.hash_policy_, generateHash(_, _, _, _))",
          "478:       .WillOnce(Return(absl::optional<uint64_t>()));",
          "480:       .WillOnce(Invoke([&](Upstream::ResourcePriority, absl::optional<Http::Protocol>,",
          "481:                            Upstream::LoadBalancerContext* context) {",
          "482:         EXPECT_FALSE(context->computeHashKey());",
          "",
          "[Removed Lines]",
          "479:   EXPECT_CALL(cm_.thread_local_cluster_, httpConnPool(_, _, router_.get()))",
          "",
          "[Added Lines]",
          "479:   EXPECT_CALL(cm_.thread_local_cluster_, httpConnPool(_, _, &router_))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "489:   Http::TestRequestHeaderMapImpl headers;",
          "490:   HttpTestUtility::addDefaultHeaders(headers);",
          "494:   EXPECT_CALL(cancellable_, cancel(_));",
          "496:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "497:   EXPECT_EQ(0U,",
          "498:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "491:   router_->decodeHeaders(headers, true);",
          "495:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "491:   router_.decodeHeaders(headers, true);",
          "495:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "501: TEST_F(RouterTest, HashKeyNoHashPolicy) {",
          "502:   ON_CALL(callbacks_.route_->route_entry_, hashPolicy()).WillByDefault(Return(nullptr));",
          "504: }",
          "506: TEST_F(RouterTest, AddCookie) {",
          "",
          "[Removed Lines]",
          "503:   EXPECT_FALSE(router_->computeHashKey().has_value());",
          "",
          "[Added Lines]",
          "503:   EXPECT_FALSE(router_.computeHashKey().has_value());",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "537:   Http::TestRequestHeaderMapImpl headers;",
          "538:   HttpTestUtility::addDefaultHeaders(headers);",
          "541:   Http::ResponseHeaderMapPtr response_headers(",
          "542:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "543:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "544:   EXPECT_EQ(callbacks_.details(), \"via_upstream\");",
          "547: }",
          "549: TEST_F(RouterTest, AddCookieNoDuplicate) {",
          "",
          "[Removed Lines]",
          "539:   router_->decodeHeaders(headers, true);",
          "546:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "539:   router_.decodeHeaders(headers, true);",
          "546:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "580:   Http::TestRequestHeaderMapImpl headers;",
          "581:   HttpTestUtility::addDefaultHeaders(headers);",
          "584:   Http::ResponseHeaderMapPtr response_headers(",
          "585:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}, {\"set-cookie\", \"foo=baz\"}});",
          "586:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "589: }",
          "591: TEST_F(RouterTest, AddMultipleCookies) {",
          "",
          "[Removed Lines]",
          "582:   router_->decodeHeaders(headers, true);",
          "588:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "582:   router_.decodeHeaders(headers, true);",
          "588:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "630:   Http::TestRequestHeaderMapImpl headers;",
          "631:   HttpTestUtility::addDefaultHeaders(headers);",
          "634:   Http::ResponseHeaderMapPtr response_headers(",
          "635:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "636:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "638: }",
          "642: TEST_F(RouterTest, MetadataMatchCriteria) {",
          "643:   ON_CALL(callbacks_.route_->route_entry_, metadataMatchCriteria())",
          "",
          "[Removed Lines]",
          "632:   router_->decodeHeaders(headers, true);",
          "637:   router_->onDestroy();",
          "640: TEST_F(RouterTest, MetadataNoOp) { EXPECT_EQ(nullptr, router_->metadataMatchCriteria()); }",
          "",
          "[Added Lines]",
          "632:   router_.decodeHeaders(headers, true);",
          "637:   router_.onDestroy();",
          "640: TEST_F(RouterTest, MetadataNoOp) { EXPECT_EQ(nullptr, router_.metadataMatchCriteria()); }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "656:   Http::TestRequestHeaderMapImpl headers;",
          "657:   HttpTestUtility::addDefaultHeaders(headers);",
          "661:   EXPECT_CALL(cancellable_, cancel(_));",
          "663: }",
          "665: TEST_F(RouterTest, MetadataMatchCriteriaFromRequest) {",
          "",
          "[Removed Lines]",
          "658:   router_->decodeHeaders(headers, true);",
          "662:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "658:   router_.decodeHeaders(headers, true);",
          "662:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "685:   Http::TestRequestHeaderMapImpl headers;",
          "686:   HttpTestUtility::addDefaultHeaders(headers);",
          "690:   EXPECT_CALL(cancellable_, cancel(_));",
          "692: }",
          "694: TEST_F(RouterTest, CancelBeforeBoundToPool) {",
          "",
          "[Removed Lines]",
          "687:   router_->decodeHeaders(headers, true);",
          "691:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "687:   router_.decodeHeaders(headers, true);",
          "691:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "699:   Http::TestRequestHeaderMapImpl headers;",
          "700:   HttpTestUtility::addDefaultHeaders(headers);",
          "704:   EXPECT_CALL(cancellable_, cancel(_));",
          "706:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "707:   EXPECT_EQ(0U,",
          "708:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "701:   router_->decodeHeaders(headers, true);",
          "705:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "701:   router_.decodeHeaders(headers, true);",
          "705:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "721:   Http::TestRequestHeaderMapImpl headers;",
          "722:   HttpTestUtility::addDefaultHeaders(headers);",
          "724:   EXPECT_EQ(0U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "725:                     .counter(\"upstream_rq_maintenance_mode\")",
          "726:                     .value());",
          "",
          "[Removed Lines]",
          "723:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "723:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "744:   Http::TestRequestHeaderMapImpl headers;",
          "745:   HttpTestUtility::addDefaultHeaders(headers);",
          "747:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "748:                     .counter(\"upstream_rq_maintenance_mode\")",
          "749:                     .value());",
          "",
          "[Removed Lines]",
          "746:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "746:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "765:   Http::TestRequestHeaderMapImpl headers;",
          "766:   HttpTestUtility::addDefaultHeaders(headers);",
          "769:   Http::ResponseHeaderMapPtr response_headers(",
          "770:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "767:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "767:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "783:   Http::TestRequestHeaderMapImpl headers;",
          "784:   HttpTestUtility::addDefaultHeaders(headers);",
          "787:   Http::ResponseHeaderMapPtr response_headers(",
          "788:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "785:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "785:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "844:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "845:   HttpTestUtility::addDefaultHeaders(headers);",
          "847:   EXPECT_EQ(1U,",
          "848:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "846:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "846:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "851:   EXPECT_EQ(1, atoi(std::string(headers.getEnvoyAttemptCountValue()).c_str()));",
          "855:   Upstream::RetryOptionsPredicate::UpdateOptionsReturn update_options_return{",
          "856:       std::make_shared<Network::Socket::Options>()};",
          "857:   EXPECT_CALL(*retry_options_predicate, updateOptions(_)).WillOnce(Return(update_options_return));",
          "",
          "[Removed Lines]",
          "854:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "854:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "867:   EXPECT_EQ(update_options_return.new_upstream_socket_options_.value(),",
          "871:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "872:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "873:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "875:   EXPECT_EQ(2U,",
          "876:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "868:             router_->upstreamSocketOptions());",
          "874:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "868:             router_.upstreamSocketOptions());",
          "874:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "879:   EXPECT_EQ(2, atoi(std::string(headers.getEnvoyAttemptCountValue()).c_str()));",
          "884:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "885:       .Times(0);",
          "886:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "882:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "883:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "882:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "944:   Http::TestRequestHeaderMapImpl headers;",
          "945:   HttpTestUtility::addDefaultHeaders(headers);",
          "948:   EXPECT_EQ(0U,",
          "949:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "946:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "945:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "965:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "966:   HttpTestUtility::addDefaultHeaders(headers);",
          "968:   EXPECT_EQ(1U,",
          "969:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "970:   EXPECT_EQ(1U, callbacks_.stream_info_.attemptCount().value());",
          "974:   Http::ResponseHeaderMapPtr response_headers1(",
          "975:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "976:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "967:   router_->decodeHeaders(headers, true);",
          "973:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "966:   router_.decodeHeaders(headers, true);",
          "972:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "982:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "983:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "984:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "986:   EXPECT_EQ(2U,",
          "987:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "988:   EXPECT_EQ(2U, callbacks_.stream_info_.attemptCount().value());",
          "993:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "994:       .Times(0);",
          "995:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "985:   router_->retry_state_->callback_();",
          "991:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "992:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "984:   router_.retry_state_->callback_();",
          "990:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1069:   Http::TestRequestHeaderMapImpl headers;",
          "1070:   HttpTestUtility::addDefaultHeaders(headers);",
          "1072:   EXPECT_EQ(0U,",
          "1073:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "1074:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "",
          "[Removed Lines]",
          "1071:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1069:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1083:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "1084:   HttpTestUtility::addDefaultHeaders(headers);",
          "1086:   EXPECT_EQ(1U,",
          "1087:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "1091:   Http::ResponseHeaderMapPtr response_headers1(",
          "1092:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "1093:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "1085:   router_->decodeHeaders(headers, true);",
          "1090:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "1083:   router_.decodeHeaders(headers, true);",
          "1088:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1099:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "1100:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "1101:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "1103:   EXPECT_EQ(2U,",
          "1104:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "1107:   EXPECT_CALL(callbacks_.stream_info_, setResponseFlag(StreamInfo::ResponseFlag::UpstreamOverflow));",
          "1109:       .WillOnce(Return(RetryStatus::NoOverflow));",
          "1110:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "1111:       .Times(0);",
          "",
          "[Removed Lines]",
          "1102:   router_->retry_state_->callback_();",
          "1108:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "1100:   router_.retry_state_->callback_();",
          "1106:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1142:               putResult(Upstream::Outlier::Result::LocalOriginConnectFailed, _))",
          "1143:       .Times(!upstream_filters);",
          "1146:   EXPECT_EQ(1U,",
          "1147:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "1149: }",
          "1151: TEST_F(RouterTest, UpstreamTimeoutAllStatsEmission) {",
          "",
          "[Removed Lines]",
          "1145:   router_->decodeHeaders(headers, true);",
          "1148:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "1143:   router_.decodeHeaders(headers, true);",
          "1146:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1158:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "1159:   HttpTestUtility::addDefaultHeaders(headers);",
          "1161:   Buffer::OwnedImpl data;",
          "1163:   EXPECT_EQ(1U,",
          "1164:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1160:   router_->decodeHeaders(headers, false);",
          "1162:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1158:   router_.decodeHeaders(headers, false);",
          "1160:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1190:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "1191:   HttpTestUtility::addDefaultHeaders(headers);",
          "1193:   Buffer::OwnedImpl data;",
          "1195:   EXPECT_EQ(1U,",
          "1196:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1192:   router_->decodeHeaders(headers, false);",
          "1194:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1190:   router_.decodeHeaders(headers, false);",
          "1192:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1202:       {\":status\", \"504\"}, {\"content-length\", \"24\"}, {\"content-type\", \"text/plain\"}};",
          "1203:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "1204:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "1206:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "1207:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "1208:   response_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "1205:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "1203:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1229:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1230:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"200\"}};",
          "1231:   HttpTestUtility::addDefaultHeaders(headers);",
          "1233:   Buffer::OwnedImpl data;",
          "1235:   EXPECT_EQ(1U,",
          "1236:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1232:   router_->decodeHeaders(headers, false);",
          "1234:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1230:   router_.decodeHeaders(headers, false);",
          "1232:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1265:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1266:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"200\"}};",
          "1267:   HttpTestUtility::addDefaultHeaders(headers);",
          "1269:   Buffer::OwnedImpl data;",
          "1271:   EXPECT_EQ(1U,",
          "1272:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1268:   router_->decodeHeaders(headers, false);",
          "1270:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1266:   router_.decodeHeaders(headers, false);",
          "1268:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1300:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"200\"}};",
          "1301:   HttpTestUtility::addDefaultHeaders(headers);",
          "1303:   Buffer::OwnedImpl data;",
          "1305:   EXPECT_EQ(1U,",
          "1306:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1302:   router_->decodeHeaders(headers, false);",
          "1304:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1300:   router_.decodeHeaders(headers, false);",
          "1302:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1335:                                          {\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1336:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"100\"}};",
          "1337:   HttpTestUtility::addDefaultHeaders(headers);",
          "1339:   Buffer::OwnedImpl data;",
          "1341:   EXPECT_EQ(1U,",
          "1342:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1338:   router_->decodeHeaders(headers, false);",
          "1340:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1336:   router_.decodeHeaders(headers, false);",
          "1338:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1356:   test_time_.advanceTimeWait(std::chrono::milliseconds(100));",
          "1358:   Http::ResponseHeaderMapPtr response_headers1(",
          "1359:       new Http::TestResponseHeaderMapImpl{{\":status\", \"504\"}});",
          "1360:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "1357:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "1355:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1369:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder2, Http::Protocol::Http10);",
          "1371:   expectPerTryTimerCreate();",
          "1373:   EXPECT_EQ(2U,",
          "1374:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1372:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "1370:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1393:   test_time_.advanceTimeWait(std::chrono::milliseconds(100));",
          "1394:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "1395:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "1397:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "1398:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "1399:   per_try_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "1396:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _));",
          "",
          "[Added Lines]",
          "1394:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1418:                                          {\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1419:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"320\"}};",
          "1420:   HttpTestUtility::addDefaultHeaders(headers);",
          "1422:   Buffer::OwnedImpl data;",
          "1424:   EXPECT_EQ(1U,",
          "1425:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1421:   router_->decodeHeaders(headers, false);",
          "1423:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1419:   router_.decodeHeaders(headers, false);",
          "1421:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1436:       .Times(0);",
          "1440:   Http::ResponseHeaderMapPtr response_headers1(",
          "1441:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "1442:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "1439:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "1437:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1451:   Http::ResponseDecoder* response_decoder2 = nullptr;",
          "1452:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder2, Http::Protocol::Http10);",
          "1453:   expectPerTryTimerCreate();",
          "1455:   EXPECT_EQ(2U,",
          "1456:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1454:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "1452:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1476:   test_time_.advanceTimeWait(std::chrono::milliseconds(240));",
          "1477:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "1478:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "1480:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "1481:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "1482:   response_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "1479:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "1477:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1499:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1500:                                          {\"grpc-timeout\", \"20S\"}};",
          "1501:   HttpTestUtility::addDefaultHeaders(headers);",
          "1503:   EXPECT_EQ(1U,",
          "1504:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1502:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1500:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1521:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1522:                                          {\"grpc-timeout\", \"20S\"}};",
          "1523:   HttpTestUtility::addDefaultHeaders(headers);",
          "1525:   EXPECT_EQ(1U,",
          "1526:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1524:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1522:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1543:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1544:                                          {\"grpc-timeout\", \"20S\"}};",
          "1545:   HttpTestUtility::addDefaultHeaders(headers);",
          "1547:   EXPECT_EQ(1U,",
          "1548:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1546:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1544:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1566:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1567:                                          {\"grpc-timeout\", \"20S\"}};",
          "1568:   HttpTestUtility::addDefaultHeaders(headers);",
          "1570:   EXPECT_EQ(1U,",
          "1571:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1569:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1567:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1589:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1590:                                          {\"grpc-timeout\", \"20S\"}};",
          "1591:   HttpTestUtility::addDefaultHeaders(headers);",
          "1593:   EXPECT_EQ(1U,",
          "1594:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1592:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1590:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1615:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1616:                                          {\"grpc-timeout\", \"20S\"}};",
          "1617:   HttpTestUtility::addDefaultHeaders(headers);",
          "1619:   EXPECT_EQ(1U,",
          "1620:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1618:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1616:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1642:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1643:                                          {\"grpc-timeout\", \"20S\"}};",
          "1644:   HttpTestUtility::addDefaultHeaders(headers);",
          "1646:   EXPECT_EQ(1U,",
          "1647:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1645:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1643:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1673:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1674:                                          {\"grpc-timeout\", \"20S\"}};",
          "1675:   HttpTestUtility::addDefaultHeaders(headers);",
          "1677:   EXPECT_EQ(1U,",
          "1678:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1676:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1674:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1698:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-alt-response\", \"204\"},",
          "1699:                                          {\"x-envoy-internal\", \"true\"}};",
          "1700:   HttpTestUtility::addDefaultHeaders(headers);",
          "1702:   Buffer::OwnedImpl data;",
          "1704:   EXPECT_EQ(1U,",
          "1705:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1701:   router_->decodeHeaders(headers, false);",
          "1703:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1699:   router_.decodeHeaders(headers, false);",
          "1701:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1709:   EXPECT_CALL(encoder.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "1710:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"204\"}};",
          "1711:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "1713:   EXPECT_CALL(",
          "1714:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "1715:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(204)));",
          "",
          "[Removed Lines]",
          "1712:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "1710:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1733:   bool filter_state_verified = false;",
          "1735:       std::make_shared<TestAccessLog>([&](const auto& stream_info) {",
          "1736:         filter_state_verified =",
          "1737:             stream_info.hasResponseFlag(StreamInfo::ResponseFlag::StreamIdleTimeout);",
          "",
          "[Removed Lines]",
          "1734:   router_->config().upstream_logs_.push_back(",
          "",
          "[Added Lines]",
          "1732:   router_.config().upstream_logs_.push_back(",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1754:   Http::TestRequestHeaderMapImpl headers;",
          "1755:   HttpTestUtility::addDefaultHeaders(headers);",
          "1758:   response_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1759:   EXPECT_CALL(*response_timeout_, enableTimer(_, _));",
          "1761:   Buffer::OwnedImpl data;",
          "1764:   per_try_idle_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1765:   EXPECT_CALL(*per_try_idle_timeout_, enableTimer(std::chrono::milliseconds(3000), _));",
          "",
          "[Removed Lines]",
          "1756:   router_->decodeHeaders(headers, false);",
          "1762:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1754:   router_.decodeHeaders(headers, false);",
          "1760:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1817:   Http::TestRequestHeaderMapImpl headers;",
          "1818:   HttpTestUtility::addDefaultHeaders(headers);",
          "1821:   response_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1822:   EXPECT_CALL(*response_timeout_, enableTimer(_, _));",
          "1824:   Buffer::OwnedImpl data;",
          "1827:   per_try_idle_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1828:   EXPECT_CALL(*per_try_idle_timeout_, enableTimer(std::chrono::milliseconds(3000), _));",
          "",
          "[Removed Lines]",
          "1819:   router_->decodeHeaders(headers, false);",
          "1825:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1817:   router_.decodeHeaders(headers, false);",
          "1823:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1856:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-internal\", \"true\"},",
          "1857:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "1858:   HttpTestUtility::addDefaultHeaders(headers);",
          "",
          "[Removed Lines]",
          "1859:   router_->decodeHeaders(headers, false);",
          "",
          "[Added Lines]",
          "1857:   router_.decodeHeaders(headers, false);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1864:   expectResponseTimerCreate();",
          "1866:   Buffer::OwnedImpl data;",
          "1868:   EXPECT_EQ(1U,",
          "1869:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1867:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1865:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1906:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-internal\", \"true\"},",
          "1907:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "1908:   HttpTestUtility::addDefaultHeaders(headers);",
          "1912:   expectResponseTimerCreate();",
          "1913:   Buffer::OwnedImpl data;",
          "1917:   expectPerTryTimerCreate();",
          "",
          "[Removed Lines]",
          "1909:   router_->decodeHeaders(headers, false);",
          "1914:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1907:   router_.decodeHeaders(headers, false);",
          "1912:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1963:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-internal\", \"true\"},",
          "1964:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "1965:   HttpTestUtility::addDefaultHeaders(headers);",
          "1967:   Buffer::OwnedImpl data;",
          "1970:   per_try_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1971:   EXPECT_CALL(*per_try_timeout_, enableTimer(_, _));",
          "",
          "[Removed Lines]",
          "1966:   router_->decodeHeaders(headers, false);",
          "1968:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "1964:   router_.decodeHeaders(headers, false);",
          "1966:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2015:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2016:                      -> Http::ConnectionPool::Cancellable* {",
          "2017:             response_decoder1 = &decoder;",
          "2019:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2020:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2021:             return nullptr;",
          "",
          "[Removed Lines]",
          "2018:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2016:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2026:       .Times(2);",
          "2027:   expectPerTryTimerCreate();",
          "2028:   expectResponseTimerCreate();",
          "2032:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2033:   HttpTestUtility::addDefaultHeaders(headers);",
          "2035:   EXPECT_EQ(1U,",
          "2036:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2029:   EXPECT_EQ(0U, router_->upstreamRequests().size());",
          "2030:   EXPECT_TRUE(router_->finalUpstreamRequest() == nullptr);",
          "2034:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2027:   EXPECT_EQ(0U, router_.upstreamRequests().size());",
          "2028:   EXPECT_TRUE(router_.finalUpstreamRequest() == nullptr);",
          "2032:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2041:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2042:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2043:   Http::ResponseDecoder* response_decoder2 = nullptr;",
          "2045:   EXPECT_CALL(*retry_options_predicate, updateOptions(_));",
          "2046:   per_try_timeout_->invokeCallback();",
          "2047:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "",
          "[Removed Lines]",
          "2044:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2042:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2050:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2051:                      -> Http::ConnectionPool::Cancellable* {",
          "2052:             response_decoder2 = &decoder;",
          "2054:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2055:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2056:             return nullptr;",
          "2057:           }));",
          "2059:   expectPerTryTimerCreate();",
          "2061:   EXPECT_EQ(2U,",
          "2062:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2053:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2060:   router_->retry_state_->callback_();",
          "2063:   EXPECT_EQ(2U, router_->upstreamRequests().size());",
          "2064:   EXPECT_TRUE(router_->finalUpstreamRequest() == nullptr);",
          "",
          "[Added Lines]",
          "2051:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2058:   router_.retry_state_->callback_();",
          "2061:   EXPECT_EQ(2U, router_.upstreamRequests().size());",
          "2062:   EXPECT_TRUE(router_.finalUpstreamRequest() == nullptr);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2072:   Http::ResponseHeaderMapPtr response_headers(",
          "2073:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "2075:       .WillOnce(Return(RetryState::RetryDecision::NoRetry));",
          "2076:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2077:               putHttpResponseCode(200));",
          "",
          "[Removed Lines]",
          "2074:   EXPECT_CALL(*router_->retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2072:   EXPECT_CALL(*router_.retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2086:   ASSERT(response_decoder1);",
          "2087:   response_decoder1->decodeHeaders(std::move(response_headers), true);",
          "2088:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "2093: }",
          "",
          "[Removed Lines]",
          "2089:   EXPECT_EQ(0U, router_->upstreamRequests().size());",
          "2090:   EXPECT_FALSE(router_->finalUpstreamRequest() == nullptr);",
          "",
          "[Added Lines]",
          "2087:   EXPECT_EQ(0U, router_.upstreamRequests().size());",
          "2088:   EXPECT_FALSE(router_.finalUpstreamRequest() == nullptr);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2110:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2111:                      -> Http::ConnectionPool::Cancellable* {",
          "2112:             response_decoder1 = &decoder;",
          "2114:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2115:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2116:             return nullptr;",
          "",
          "[Removed Lines]",
          "2113:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2111:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2125:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2126:   HttpTestUtility::addDefaultHeaders(headers);",
          "2128:   EXPECT_EQ(1U,",
          "2129:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2127:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2125:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2134:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2135:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2136:   Http::ResponseDecoder* response_decoder2 = nullptr;",
          "2138:   per_try_timeout_->invokeCallback();",
          "2140:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "",
          "[Removed Lines]",
          "2137:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2135:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2143:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2144:                      -> Http::ConnectionPool::Cancellable* {",
          "2145:             response_decoder2 = &decoder;",
          "2147:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2148:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2149:             return nullptr;",
          "2150:           }));",
          "2151:   expectPerTryTimerCreate();",
          "2153:   EXPECT_EQ(2U,",
          "2154:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2146:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2152:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2144:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2150:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2165:               putHttpResponseCode(500));",
          "2166:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2167:   EXPECT_CALL(encoder2.stream_, resetStream(_));",
          "2169:       .WillOnce(Return(RetryStatus::NoOverflow));",
          "2171:   ASSERT(response_decoder2);",
          "",
          "[Removed Lines]",
          "2168:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2166:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2221:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2222:                      -> Http::ConnectionPool::Cancellable* {",
          "2223:             response_decoder1 = &decoder;",
          "2225:             upstream_stream_info_.downstream_connection_info_provider_->setConnectionID(111);",
          "2226:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2227:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "",
          "[Removed Lines]",
          "2224:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2222:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2233:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2234:   HttpTestUtility::addDefaultHeaders(headers);",
          "2236:   EXPECT_EQ(1U,",
          "2237:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2235:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2233:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2249:               putHttpResponseCode(500));",
          "2250:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2251:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2254:   response_decoder1->decodeHeaders(std::move(response_headers1), true);",
          "",
          "[Removed Lines]",
          "2252:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "2250:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2261:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2262:                      -> Http::ConnectionPool::Cancellable* {",
          "2263:             response_decoder2 = &decoder;",
          "2265:             upstream_stream_info_.downstream_connection_info_provider_->setConnectionID(222);",
          "2266:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2267:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2268:             return nullptr;",
          "2269:           }));",
          "2270:   expectPerTryTimerCreate();",
          "2272:   EXPECT_EQ(2U,",
          "2273:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2275:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "2279:   EXPECT_CALL(",
          "2280:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2281:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "",
          "[Removed Lines]",
          "2264:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2271:   router_->retry_state_->callback_();",
          "2278:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2262:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2269:   router_.retry_state_->callback_();",
          "2276:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2287:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2288:                      -> Http::ConnectionPool::Cancellable* {",
          "2289:             response_decoder3 = &decoder;",
          "2291:             upstream_stream_info_.downstream_connection_info_provider_->setConnectionID(333);",
          "2292:             callbacks.onPoolReady(encoder3, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2293:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "",
          "[Removed Lines]",
          "2290:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2288:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2297:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2298:   per_try_timeout_->invokeCallback();",
          "2299:   expectPerTryTimerCreate();",
          "2301:   EXPECT_EQ(3U,",
          "2302:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2303:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2300:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2298:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2317:         EXPECT_EQ(headers.Status()->value(), \"200\");",
          "2318:         EXPECT_TRUE(end_stream);",
          "2319:       }));",
          "2323:   response_decoder3->decodeHeaders(std::move(response_headers2), true);",
          "2324:   EXPECT_TRUE(verifyHostUpstreamStats(1, 1));",
          "",
          "[Removed Lines]",
          "2320:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "2321:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "2318:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "2341:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2342:                      -> Http::ConnectionPool::Cancellable* {",
          "2343:             response_decoder1 = &decoder;",
          "2345:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2346:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2347:             return nullptr;",
          "",
          "[Removed Lines]",
          "2344:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2341:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "2356:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2357:   HttpTestUtility::addDefaultHeaders(headers);",
          "2360:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2362:   EXPECT_CALL(",
          "2363:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2364:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2366:   per_try_timeout_->invokeCallback();",
          "2368:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2358:   router_->decodeHeaders(headers, true);",
          "2365:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2355:   router_.decodeHeaders(headers, true);",
          "2362:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "2373:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2374:                      -> Http::ConnectionPool::Cancellable* {",
          "2375:             response_decoder2 = &decoder;",
          "2377:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2378:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2379:             return nullptr;",
          "2380:           }));",
          "2382:   expectPerTryTimerCreate();",
          "2386:   Http::ResponseHeaderMapPtr response_headers1(",
          "2387:       new Http::TestResponseHeaderMapImpl{{\":status\", \"500\"}});",
          "2388:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2389:               putHttpResponseCode(500));",
          "2392:       .WillOnce(Return(RetryState::RetryDecision::RetryWithBackoff));",
          "2393:   ASSERT(response_decoder1);",
          "2394:   response_decoder1->decodeHeaders(std::move(response_headers1), true);",
          "",
          "[Removed Lines]",
          "2376:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2383:   router_->retry_state_->callback_();",
          "2390:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "2391:   EXPECT_CALL(*router_->retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2373:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2380:   router_.retry_state_->callback_();",
          "2387:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "2388:   EXPECT_CALL(*router_.retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "2415:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2416:                      -> Http::ConnectionPool::Cancellable* {",
          "2417:             response_decoder1 = &decoder;",
          "2419:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2420:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2421:             return nullptr;",
          "",
          "[Removed Lines]",
          "2418:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2415:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "2430:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2431:   HttpTestUtility::addDefaultHeaders(headers);",
          "2434:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2436:   EXPECT_CALL(",
          "2437:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2438:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2440:   per_try_timeout_->invokeCallback();",
          "2442:   expectPerTryTimerCreate();",
          "",
          "[Removed Lines]",
          "2432:   router_->decodeHeaders(headers, true);",
          "2439:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2429:   router_.decodeHeaders(headers, true);",
          "2436:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "2447:       new Http::TestResponseHeaderMapImpl{{\":status\", \"500\"}});",
          "2448:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2449:               putHttpResponseCode(500));",
          "2452:       .WillOnce(Return(RetryState::RetryDecision::RetryWithBackoff));",
          "2453:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2454:   ASSERT(response_decoder1);",
          "",
          "[Removed Lines]",
          "2450:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "2451:   EXPECT_CALL(*router_->retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2447:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "2448:   EXPECT_CALL(*router_.retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "2463:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2464:                      -> Http::ConnectionPool::Cancellable* {",
          "2465:             response_decoder2 = &decoder;",
          "2467:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2468:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2469:             return nullptr;",
          "2470:           }));",
          "2473:   Http::ResponseHeaderMapPtr response_headers2(",
          "2474:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "2477:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _))",
          "2478:       .WillOnce(Invoke([&](Http::ResponseHeaderMap& headers, bool end_stream) -> void {",
          "2479:         EXPECT_EQ(headers.Status()->value(), \"200\");",
          "",
          "[Removed Lines]",
          "2466:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2471:   router_->retry_state_->callback_();",
          "2475:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "2476:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "2463:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2468:   router_.retry_state_->callback_();",
          "2472:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "2499:   Http::TestRequestHeaderMapImpl headers{",
          "2500:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2501:   HttpTestUtility::addDefaultHeaders(headers);",
          "2505:   EXPECT_CALL(*retry_options_predicate, updateOptions(_));",
          "2506:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2508:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2509:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "2510:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2512:   EXPECT_EQ(2U,",
          "2513:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2514:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2502:   router_->decodeHeaders(headers, false);",
          "2504:   router_->retry_state_->expectResetRetry();",
          "2511:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2498:   router_.decodeHeaders(headers, false);",
          "2500:   router_.retry_state_->expectResetRetry();",
          "2507:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "2517:   const std::string body(\"body\");",
          "2518:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body), true));",
          "2519:   Buffer::OwnedImpl buf(body);",
          "2523:   Http::ResponseHeaderMapPtr response_headers(",
          "",
          "[Removed Lines]",
          "2520:   router_->decodeData(buf, true);",
          "",
          "[Added Lines]",
          "2516:   router_.decodeData(buf, true);",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "2548:   Http::TestRequestHeaderMapImpl headers{",
          "2549:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2550:   HttpTestUtility::addDefaultHeaders(headers);",
          "2552:   const std::string body1(\"body1\");",
          "2553:   Buffer::OwnedImpl buf1(body1);",
          "2558:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2560:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2551:   router_->decodeHeaders(headers, false);",
          "2554:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "2555:   router_->decodeData(buf1, false);",
          "2557:   router_->retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "2547:   router_.decodeHeaders(headers, false);",
          "2550:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "2551:   router_.decodeData(buf1, false);",
          "2553:   router_.retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "2563:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2564:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body1), false));",
          "2566:   EXPECT_EQ(2U,",
          "2567:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2568:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2565:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2561:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "2571:   const std::string body2(\"body2\");",
          "2572:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body2), true));",
          "2573:   Buffer::OwnedImpl buf2(body2);",
          "2578:   Http::ResponseHeaderMapPtr response_headers(",
          "",
          "[Removed Lines]",
          "2574:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "2575:   router_->decodeData(buf2, true);",
          "",
          "[Added Lines]",
          "2570:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "2571:   router_.decodeData(buf2, true);",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "2602:   Http::TestRequestHeaderMapImpl headers{",
          "2603:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2604:   HttpTestUtility::addDefaultHeaders(headers);",
          "2606:   const std::string body1(\"body1\");",
          "2607:   Buffer::OwnedImpl buf1(body1);",
          "2612:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2614:   const std::string body2(\"body2\");",
          "2615:   Buffer::OwnedImpl buf2(body2);",
          "2618:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2619:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "2621:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2622:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body1 + body2), false));",
          "2624:   EXPECT_EQ(2U,",
          "2625:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2626:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2605:   router_->decodeHeaders(headers, false);",
          "2608:   EXPECT_CALL(*router_->retry_state_, enabled()).Times(3).WillRepeatedly(Return(true));",
          "2609:   router_->decodeData(buf1, false);",
          "2611:   router_->retry_state_->expectResetRetry();",
          "2616:   router_->decodeData(buf2, false);",
          "2623:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2601:   router_.decodeHeaders(headers, false);",
          "2604:   EXPECT_CALL(*router_.retry_state_, enabled()).Times(3).WillRepeatedly(Return(true));",
          "2605:   router_.decodeData(buf1, false);",
          "2607:   router_.retry_state_->expectResetRetry();",
          "2612:   router_.decodeData(buf2, false);",
          "2619:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "2629:   const std::string body3(\"body3\");",
          "2630:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body3), true));",
          "2631:   Buffer::OwnedImpl buf3(body3);",
          "2635:   Http::ResponseHeaderMapPtr response_headers(",
          "",
          "[Removed Lines]",
          "2632:   router_->decodeData(buf3, true);",
          "",
          "[Added Lines]",
          "2628:   router_.decodeData(buf3, true);",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "2658:   Http::TestRequestHeaderMapImpl headers{",
          "2659:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2660:   HttpTestUtility::addDefaultHeaders(headers);",
          "2662:   const std::string body1(\"body1\");",
          "2663:   Buffer::OwnedImpl buf1(body1);",
          "2668:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2671:   const std::string body2(\"body2\");",
          "2672:   Buffer::OwnedImpl buf2(body2);",
          "2675:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2676:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "2678:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2679:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body1 + body2), true));",
          "2681:   EXPECT_EQ(2U,",
          "2682:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2683:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2661:   router_->decodeHeaders(headers, false);",
          "2664:   EXPECT_CALL(*router_->retry_state_, enabled()).Times(2).WillRepeatedly(Return(true));",
          "2665:   router_->decodeData(buf1, false);",
          "2667:   router_->retry_state_->expectResetRetry();",
          "2673:   router_->decodeData(buf2, true);",
          "2680:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2657:   router_.decodeHeaders(headers, false);",
          "2660:   EXPECT_CALL(*router_.retry_state_, enabled()).Times(2).WillRepeatedly(Return(true));",
          "2661:   router_.decodeData(buf1, false);",
          "2663:   router_.retry_state_->expectResetRetry();",
          "2669:   router_.decodeData(buf2, true);",
          "2676:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "2709:   Http::TestRequestHeaderMapImpl headers{",
          "2710:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2711:   HttpTestUtility::addDefaultHeaders(headers);",
          "2713:   const std::string body1(\"body1\");",
          "2714:   Buffer::OwnedImpl buf1(body1);",
          "2719:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2722:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "2725:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2726:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "",
          "[Removed Lines]",
          "2712:   router_->decodeHeaders(headers, false);",
          "2715:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "2716:   router_->decodeData(buf1, false);",
          "2718:   router_->retry_state_->expectResetRetry();",
          "2723:   router_->decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "2708:   router_.decodeHeaders(headers, false);",
          "2711:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "2712:   router_.decodeData(buf1, false);",
          "2714:   router_.retry_state_->expectResetRetry();",
          "2719:   router_.decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "2728:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2729:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body1), false));",
          "2730:   EXPECT_CALL(encoder2, encodeTrailers(HeaderMapEqualRef(&trailers)));",
          "2732:   EXPECT_EQ(2U,",
          "2733:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2734:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2731:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2727:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "2761:   Http::TestRequestHeaderMapImpl headers{",
          "2762:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2763:   HttpTestUtility::addDefaultHeaders(headers);",
          "2765:   const std::string body1(\"body1\");",
          "2766:   Buffer::OwnedImpl buf1(body1);",
          "2771:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2774:   const std::string body2(50, 'a');",
          "2775:   Buffer::OwnedImpl buf2(body2);",
          "2778:   EXPECT_EQ(callbacks_.details(), \"request_payload_exceeded_retry_buffer_limit\");",
          "2779:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "",
          "[Removed Lines]",
          "2764:   router_->decodeHeaders(headers, false);",
          "2767:   EXPECT_CALL(*router_->retry_state_, enabled()).Times(2).WillRepeatedly(Return(true));",
          "2768:   router_->decodeData(buf1, false);",
          "2770:   router_->retry_state_->expectResetRetry();",
          "2776:   router_->decodeData(buf2, false);",
          "",
          "[Added Lines]",
          "2760:   router_.decodeHeaders(headers, false);",
          "2763:   EXPECT_CALL(*router_.retry_state_, enabled()).Times(2).WillRepeatedly(Return(true));",
          "2764:   router_.decodeData(buf1, false);",
          "2766:   router_.retry_state_->expectResetRetry();",
          "2772:   router_.decodeData(buf2, false);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "2795:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2796:                      -> Http::ConnectionPool::Cancellable* {",
          "2797:             response_decoder1 = &decoder;",
          "2799:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2800:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2801:             return nullptr;",
          "",
          "[Removed Lines]",
          "2798:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2794:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "2810:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2811:   HttpTestUtility::addDefaultHeaders(headers);",
          "2813:   EXPECT_EQ(1U,",
          "2814:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2812:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2808:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "2818:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2819:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2820:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2822:   per_try_timeout_->invokeCallback();",
          "2824:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2821:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2817:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "2829:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2830:                      -> Http::ConnectionPool::Cancellable* {",
          "2831:             response_decoder2 = &decoder;",
          "2833:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2834:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2835:             return nullptr;",
          "2836:           }));",
          "2837:   expectPerTryTimerCreate();",
          "2839:   EXPECT_EQ(2U,",
          "2840:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2832:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2838:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2828:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2834:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "2871:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2872:                      -> Http::ConnectionPool::Cancellable* {",
          "2873:             response_decoder1 = &decoder;",
          "2875:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2876:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2877:             return nullptr;",
          "",
          "[Removed Lines]",
          "2874:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2870:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "2885:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2886:   HttpTestUtility::addDefaultHeaders(headers);",
          "2888:   EXPECT_EQ(1U,",
          "2889:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2887:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2883:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "2893:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2894:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2895:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2897:   per_try_timeout_->invokeCallback();",
          "2899:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2896:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2892:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "2904:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2905:                      -> Http::ConnectionPool::Cancellable* {",
          "2906:             response_decoder2 = &decoder;",
          "2908:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2909:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2910:             return nullptr;",
          "",
          "[Removed Lines]",
          "2907:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2903:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "2913:               putResult(Upstream::Outlier::Result::LocalOriginConnectSuccess,",
          "2914:                         absl::optional<uint64_t>(absl::nullopt)));",
          "2915:   expectPerTryTimerCreate();",
          "2917:   EXPECT_EQ(2U,",
          "2918:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2916:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2912:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "2925:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2926:               putHttpResponseCode(503));",
          "2929:       .WillOnce(Return(RetryStatus::NoRetryLimitExceeded));",
          "2930:   ASSERT(response_decoder2);",
          "2931:   response_decoder2->decodeHeaders(std::move(bad_response_headers1), true);",
          "",
          "[Removed Lines]",
          "2928:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2924:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "2945:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _))",
          "2946:       .WillOnce(Invoke([&](Http::ResponseHeaderMap& headers, bool) -> void {",
          "",
          "[Removed Lines]",
          "2943:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "2939:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "2973:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2974:   HttpTestUtility::addDefaultHeaders(headers);",
          "2976:   EXPECT_EQ(1U,",
          "2977:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2975:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2971:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "2981:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2982:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2983:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2985:   per_try_timeout_->invokeCallback();",
          "2987:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2984:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2980:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "2989:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder2, Http::Protocol::Http10);",
          "2991:   expectPerTryTimerCreate();",
          "2993:   EXPECT_EQ(2U,",
          "2994:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2992:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2988:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "3009:   Http::ResponseHeaderMapPtr response_headers(",
          "3010:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3014:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _))",
          "3015:       .WillOnce(Invoke([&](Http::ResponseHeaderMap& headers, bool) -> void {",
          "3016:         EXPECT_EQ(headers.Status()->value(), \"200\");",
          "",
          "[Removed Lines]",
          "3006:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "3012:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3013:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3002:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "3008:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "3032:   NiceMock<Http::MockRequestEncoder> encoder;",
          "3033:   Http::ResponseDecoder* response_decoder = nullptr;",
          "3035:   expectNewStreamWithImmediateEncoder(encoder, &response_decoder, Http::Protocol::Http10);",
          "3037:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3034:   router_->retry_425_response_ = true;",
          "",
          "[Added Lines]",
          "3029:   router_.retry_425_response_ = true;",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "3041:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "3042:   HttpTestUtility::addDefaultHeaders(headers);",
          "3045:   expectPerTryTimerCreate();",
          "3046:   expectResponseTimerCreate();",
          "3047:   Buffer::OwnedImpl body(\"test body\");",
          "3048:   EXPECT_CALL(encoder, encodeData(_, _));",
          "3049:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "3053:   EXPECT_CALL(",
          "3054:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3043:   router_->decodeHeaders(headers, false);",
          "3050:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "3051:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, true));",
          "",
          "[Added Lines]",
          "3038:   router_.decodeHeaders(headers, false);",
          "3045:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "3046:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, true));",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "3064:                            const Http::ConnectionPool::Instance::StreamOptions& options)",
          "3065:                            -> Http::ConnectionPool::Cancellable* {",
          "3066:         EXPECT_FALSE(options.can_send_early_data_);",
          "3068:         EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "3069:                     putResult(Upstream::Outlier::Result::LocalOriginConnectFailed, _));",
          "3070:         callbacks.onPoolFailure(ConnectionPool::PoolFailureReason::RemoteConnectionFailure,",
          "3071:                                 absl::string_view(), cm_.thread_local_cluster_.conn_pool_.host_);",
          "3072:         return nullptr;",
          "3073:       }));",
          "3075:               shouldRetryReset(_, /*http3_used=*/RetryState::Http3Used::Unknown, _))",
          "3076:       .WillOnce(Return(RetryStatus::NoRetryLimitExceeded));",
          "3077:   ON_CALL(callbacks_, decodingBuffer()).WillByDefault(Return(body_data.get()));",
          "3080:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "3067:         EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "3074:   EXPECT_CALL(*router_->retry_state_,",
          "3078:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "3062:         EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "3069:   EXPECT_CALL(*router_.retry_state_,",
          "3073:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "3089:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _))",
          "3090:       .WillOnce(Invoke([&](Http::ResponseHeaderMap& headers, bool) -> void {",
          "3091:         EXPECT_EQ(headers.Status()->value(), \"200\");",
          "",
          "[Removed Lines]",
          "3088:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "3083:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "3110:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3111:   HttpTestUtility::addDefaultHeaders(headers);",
          "3115:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "3116:               putResult(Upstream::Outlier::Result::LocalOriginConnectFailed, _));",
          "3117:   encoder1.stream_.resetStream(Http::StreamResetReason::LocalReset);",
          "",
          "[Removed Lines]",
          "3112:   router_->decodeHeaders(headers, true);",
          "3114:   router_->retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "3107:   router_.decodeHeaders(headers, true);",
          "3109:   router_.retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "3123:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "3124:   EXPECT_CALL(callbacks_.stream_info_,",
          "3125:               setResponseFlag(StreamInfo::ResponseFlag::NoHealthyUpstream));",
          "3127:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "3129:   EXPECT_EQ(1U,",
          "",
          "[Removed Lines]",
          "3126:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "3121:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "3140:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3141:   HttpTestUtility::addDefaultHeaders(headers);",
          "3144:   EXPECT_CALL(callbacks_, addDecodedData(_, _));",
          "3145:   Buffer::OwnedImpl body(\"test body\");",
          "3147:   EXPECT_EQ(1U,",
          "3148:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3151:       .WillOnce(Invoke([this](const Http::StreamResetReason, RetryState::Http3Used http3_used,",
          "3152:                               RetryState::DoRetryResetCallback callback) {",
          "3153:         EXPECT_EQ(RetryState::Http3Used::No, http3_used);",
          "3155:         return RetryStatus::Yes;",
          "3156:       }));",
          "3157:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3142:   router_->decodeHeaders(headers, false);",
          "3143:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3146:   router_->decodeData(body, true);",
          "3150:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(Http::StreamResetReason::RemoteReset, _, _))",
          "3154:         router_->retry_state_->callback_ = [callback]() { callback(/*disable_http3=*/false); };",
          "",
          "[Added Lines]",
          "3137:   router_.decodeHeaders(headers, false);",
          "3138:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3141:   router_.decodeData(body, true);",
          "3145:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(Http::StreamResetReason::RemoteReset, _, _))",
          "3149:         router_.retry_state_->callback_ = [callback]() { callback(/*disable_http3=*/false); };",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "3175:             return nullptr;",
          "3176:           }));",
          "3179:   EXPECT_EQ(2U,",
          "3180:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3181:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "3186:   Http::ResponseHeaderMapPtr response_headers(",
          "3187:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3188:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3178:   router_->retry_state_->callback_();",
          "3184:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3185:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3173:   router_.retry_state_->callback_();",
          "3179:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "3194: TEST_F(RouterTest, RetryHttp3UpstreamReset) {",
          "3195:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "3196:   Http::ResponseDecoder* response_decoder = nullptr;",
          "3198:   expectNewStreamWithImmediateEncoder(encoder1, &response_decoder, Http::Protocol::Http3);",
          "3199:   expectResponseTimerCreate();",
          "3201:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3202:   HttpTestUtility::addDefaultHeaders(headers);",
          "3205:   EXPECT_CALL(callbacks_, addDecodedData(_, _));",
          "3206:   Buffer::OwnedImpl body(\"test body\");",
          "3208:   EXPECT_EQ(1U,",
          "3209:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3211:       .WillOnce(Invoke([this](const Http::StreamResetReason, RetryState::Http3Used http3_used,",
          "3212:                               RetryState::DoRetryResetCallback callback) {",
          "3213:         EXPECT_EQ(RetryState::Http3Used::Yes, http3_used);",
          "3215:         return RetryStatus::Yes;",
          "3216:       }));",
          "",
          "[Removed Lines]",
          "3197:   router_->retry_425_response_ = true;",
          "3203:   router_->decodeHeaders(headers, false);",
          "3204:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3207:   router_->decodeData(body, true);",
          "3210:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(Http::StreamResetReason::RemoteReset, _, _))",
          "3214:         router_->retry_state_->callback_ = [callback]() { callback(/*disable_http3=*/true); };",
          "",
          "[Added Lines]",
          "3191:   router_.retry_425_response_ = true;",
          "3197:   router_.decodeHeaders(headers, false);",
          "3198:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3201:   router_.decodeData(body, true);",
          "3204:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(Http::StreamResetReason::RemoteReset, _, _))",
          "3208:         router_.retry_state_->callback_ = [callback]() { callback(/*disable_http3=*/true); };",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "3237:             return nullptr;",
          "3238:           }));",
          "3241:   EXPECT_EQ(2U,",
          "3242:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3243:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "3248:   Http::ResponseHeaderMapPtr response_headers(",
          "3249:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3250:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3240:   router_->retry_state_->callback_();",
          "3246:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3247:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3234:   router_.retry_state_->callback_();",
          "3240:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "3262:   EXPECT_CALL(callbacks_.route_->route_entry_, retryShadowBufferLimit()).WillOnce(Return(0));",
          "3263:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3264:   HttpTestUtility::addDefaultHeaders(headers);",
          "3268:   EXPECT_CALL(callbacks_, addDecodedData(_, _)).Times(0);",
          "3269:   Buffer::OwnedImpl body(\"t\");",
          "3271:   EXPECT_EQ(1U,",
          "3272:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "3265:   router_->decodeHeaders(headers, false);",
          "3267:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3270:   router_->decodeData(body, false);",
          "",
          "[Added Lines]",
          "3258:   router_.decodeHeaders(headers, false);",
          "3260:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3263:   router_.decodeData(body, false);",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "3288:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "3289:                      -> Http::ConnectionPool::Cancellable* {",
          "3290:             response_decoder = &decoder;",
          "3292:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "3293:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "3294:             return nullptr;",
          "",
          "[Removed Lines]",
          "3291:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "3284:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "3301:                                          {\"x-envoy-internal\", \"true\"},",
          "3302:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "3303:   HttpTestUtility::addDefaultHeaders(headers);",
          "3305:   EXPECT_EQ(1U,",
          "3306:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3309:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "3310:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "3311:   per_try_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "3304:   router_->decodeHeaders(headers, true);",
          "3308:   router_->retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "3297:   router_.decodeHeaders(headers, true);",
          "3301:   router_.retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "3315:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "3317:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "3318:       .WillOnce(",
          "3319:           Invoke([&](Http::ResponseDecoder& decoder, Http::ConnectionPool::Callbacks& callbacks,",
          "",
          "[Removed Lines]",
          "3316:   EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "3309:   EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "3329:           }));",
          "3331:   expectPerTryTimerCreate();",
          "3333:   EXPECT_EQ(2U,",
          "3334:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3339:   Http::ResponseHeaderMapPtr response_headers(",
          "3340:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3341:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3332:   router_->retry_state_->callback_();",
          "3337:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3338:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3325:   router_.retry_state_->callback_();",
          "3330:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "3361:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3362:   HttpTestUtility::addDefaultHeaders(headers);",
          "3369:   conn_pool_callbacks->onPoolFailure(ConnectionPool::PoolFailureReason::RemoteConnectionFailure,",
          "3370:                                      absl::string_view(), nullptr);",
          "",
          "[Removed Lines]",
          "3363:   router_->decodeHeaders(headers, true);",
          "3365:   EXPECT_CALL(*router_->retry_state_, onHostAttempted(_)).Times(0);",
          "3367:   router_->retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "3355:   router_.decodeHeaders(headers, true);",
          "3357:   EXPECT_CALL(*router_.retry_state_, onHostAttempted(_)).Times(0);",
          "3359:   router_.retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "3381:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "3382:                      -> Http::ConnectionPool::Cancellable* {",
          "3383:             response_decoder = &decoder;",
          "3385:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "3386:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "3387:             return nullptr;",
          "3388:           }));",
          "3391:   EXPECT_EQ(1U,",
          "3392:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3397:   Http::ResponseHeaderMapPtr response_headers(",
          "3398:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3399:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3384:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "3390:   router_->retry_state_->callback_();",
          "3395:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3396:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3376:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "3382:   router_.retry_state_->callback_();",
          "3387:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "3413:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-internal\", \"true\"},",
          "3414:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "3415:   HttpTestUtility::addDefaultHeaders(headers);",
          "3417:   EXPECT_EQ(1U,",
          "3418:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3423:   EXPECT_CALL(callbacks_, encodeHeaders_(_, false));",
          "3424:   Http::ResponseHeaderMapPtr response_headers(",
          "3425:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "3416:   router_->decodeHeaders(headers, true);",
          "3421:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3422:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3407:   router_.decodeHeaders(headers, true);",
          "3412:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "3448:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3449:   HttpTestUtility::addDefaultHeaders(headers);",
          "3451:   EXPECT_EQ(1U,",
          "3452:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3457:   EXPECT_CALL(callbacks_, encodeHeaders_(_, false));",
          "3458:   Http::ResponseHeaderMapPtr response_headers(",
          "3459:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "3450:   router_->decodeHeaders(headers, true);",
          "3455:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3456:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3440:   router_.decodeHeaders(headers, true);",
          "3445:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "3487:   Http::TestRequestHeaderMapImpl headers;",
          "3488:   HttpTestUtility::addDefaultHeaders(headers);",
          "3490:   EXPECT_EQ(1U,",
          "3491:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "3489:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "3478:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "3540:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3541:   HttpTestUtility::addDefaultHeaders(headers);",
          "3543:   EXPECT_EQ(1U,",
          "3544:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3550:   EXPECT_CALL(callbacks_, encode1xxHeaders_(_));",
          "3551:   Http::ResponseHeaderMapPtr continue_headers(",
          "3552:       new Http::TestResponseHeaderMapImpl{{\":status\", \"100\"}});",
          "",
          "[Removed Lines]",
          "3542:   router_->decodeHeaders(headers, true);",
          "3548:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "3549:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "3531:   router_.decodeHeaders(headers, true);",
          "3537:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "3538:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "3572:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3573:   HttpTestUtility::addDefaultHeaders(headers);",
          "3575:   EXPECT_EQ(1U,",
          "3576:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3580:   Http::ResponseHeaderMapPtr response_headers1(",
          "3581:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3582:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3574:   router_->decodeHeaders(headers, true);",
          "3579:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3563:   router_.decodeHeaders(headers, true);",
          "3568:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "3589:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "3590:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "3593:   EXPECT_EQ(2U,",
          "3594:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3599:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "3600:       .Times(0);",
          "3601:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "3592:   router_->retry_state_->callback_();",
          "3597:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3598:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3581:   router_.retry_state_->callback_();",
          "3586:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "3616:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3617:   HttpTestUtility::addDefaultHeaders(headers);",
          "3619:   EXPECT_EQ(1U,",
          "3620:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3624:   Http::ResponseHeaderMapPtr response_headers1(",
          "3625:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3626:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3618:   router_->decodeHeaders(headers, true);",
          "3623:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3606:   router_.decodeHeaders(headers, true);",
          "3611:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "3653:   Http::TestRequestHeaderMapImpl headers;",
          "3654:   HttpTestUtility::addDefaultHeaders(headers);",
          "3656:   max_stream_duration_timer_->invokeCallback();",
          "3659:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "3660: }",
          "",
          "[Removed Lines]",
          "3655:   router_->decodeHeaders(headers, false);",
          "3658:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "3643:   router_.decodeHeaders(headers, false);",
          "3646:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "3671:   Http::TestRequestHeaderMapImpl headers;",
          "3672:   HttpTestUtility::addDefaultHeaders(headers);",
          "3676:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "3677: }",
          "",
          "[Removed Lines]",
          "3673:   router_->decodeHeaders(headers, false);",
          "3675:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "3661:   router_.decodeHeaders(headers, false);",
          "3663:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "3687:   Http::TestRequestHeaderMapImpl headers;",
          "3688:   HttpTestUtility::addDefaultHeaders(headers);",
          "3692:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "3693: }",
          "",
          "[Removed Lines]",
          "3689:   router_->decodeHeaders(headers, false);",
          "3691:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "3677:   router_.decodeHeaders(headers, false);",
          "3679:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "3703:   Http::TestRequestHeaderMapImpl headers;",
          "3704:   HttpTestUtility::addDefaultHeaders(headers);",
          "3706:   Http::ResponseHeaderMapPtr response_headers(",
          "3707:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3708:   response_decoder->decodeHeaders(std::move(response_headers), false);",
          "3709:   max_stream_duration_timer_->invokeCallback();",
          "3712:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "3713: }",
          "",
          "[Removed Lines]",
          "3705:   router_->decodeHeaders(headers, false);",
          "3711:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "3693:   router_.decodeHeaders(headers, false);",
          "3699:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "3724:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"reset\"},",
          "3725:                                          {\"x-envoy-internal\", \"true\"}};",
          "3726:   HttpTestUtility::addDefaultHeaders(headers);",
          "3730:   max_stream_duration_timer_->invokeCallback();",
          "",
          "[Removed Lines]",
          "3727:   router_->decodeHeaders(headers, false);",
          "3729:   router_->retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "3715:   router_.decodeHeaders(headers, false);",
          "3717:   router_.retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "3735:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "3737:   expectMaxStreamDurationTimerCreate(std::chrono::milliseconds(500));",
          "3742:   Http::ResponseHeaderMapPtr response_headers(",
          "3743:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3744:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "",
          "[Removed Lines]",
          "3738:   router_->retry_state_->callback_();",
          "3740:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3741:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3726:   router_.retry_state_->callback_();",
          "3728:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "3754:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3755:   HttpTestUtility::addDefaultHeaders(headers);",
          "3757:   EXPECT_EQ(1U,",
          "3758:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3762:   Http::ResponseHeaderMapPtr response_headers1(",
          "3763:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3764:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3756:   router_->decodeHeaders(headers, true);",
          "3761:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3743:   router_.decodeHeaders(headers, true);",
          "3748:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "3774:         response_decoder = &decoder;",
          "3775:         return &cancellable;",
          "3776:       }));",
          "3780:   EXPECT_CALL(cancellable, cancel(_));",
          "",
          "[Removed Lines]",
          "3777:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "3764:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "3806:                                          {\"x-envoy-internal\", \"true\"},",
          "3807:                                          {\"x-envoy-upstream-rq-timeout-alt-response\", \"204\"}};",
          "3808:   HttpTestUtility::addDefaultHeaders(headers);",
          "3810:   EXPECT_EQ(1U,",
          "3811:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3815:   Http::ResponseHeaderMapPtr response_headers1(",
          "3816:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3817:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3809:   router_->decodeHeaders(headers, true);",
          "3814:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3796:   router_.decodeHeaders(headers, true);",
          "3801:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "3827:         response_decoder = &decoder;",
          "3828:         return &cancellable;",
          "3829:       }));",
          "3833:   EXPECT_CALL(cancellable, cancel(_));",
          "",
          "[Removed Lines]",
          "3830:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "3817:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "3854:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3855:   HttpTestUtility::addDefaultHeaders(headers);",
          "3858:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "3860:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "3863:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "3865:   EXPECT_EQ(1U,",
          "3866:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3870:   Http::ResponseHeaderMapPtr response_headers1(",
          "3871:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3872:   EXPECT_CALL(encoder1.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "",
          "[Removed Lines]",
          "3856:   router_->decodeHeaders(headers, false);",
          "3859:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3861:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "3864:   router_->decodeTrailers(trailers);",
          "3869:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3843:   router_.decodeHeaders(headers, false);",
          "3846:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3848:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "3851:   router_.decodeTrailers(trailers);",
          "3856:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "3883:   EXPECT_CALL(encoder2, encodeHeaders(_, false));",
          "3884:   EXPECT_CALL(encoder2, encodeData(_, false));",
          "3885:   EXPECT_CALL(encoder2, encodeTrailers(_));",
          "3887:   EXPECT_EQ(2U,",
          "3888:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3893:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "3894:               putHttpResponseCode(200));",
          "3895:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_, putResponseTime(_));",
          "",
          "[Removed Lines]",
          "3886:   router_->retry_state_->callback_();",
          "3891:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3892:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3873:   router_.retry_state_->callback_();",
          "3878:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "3928:                                          {\"content-type\", \"application/grpc\"},",
          "3929:                                          {\"grpc-timeout\", \"20S\"}};",
          "3930:   HttpTestUtility::addDefaultHeaders(headers);",
          "3932:   EXPECT_EQ(1U,",
          "3933:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3937:   Http::ResponseHeaderMapPtr response_headers1(",
          "3938:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}, {\"grpc-status\", \"1\"}});",
          "3939:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3931:   router_->decodeHeaders(headers, true);",
          "3936:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3917:   router_.decodeHeaders(headers, true);",
          "3922:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "3946:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "3947:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "3950:   EXPECT_EQ(2U,",
          "3951:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3956:   Http::ResponseHeaderMapPtr response_headers(",
          "3957:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}, {\"grpc-status\", \"0\"}});",
          "3958:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3949:   router_->retry_state_->callback_();",
          "3954:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3955:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3935:   router_.retry_state_->callback_();",
          "3940:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "3966: TEST_F(RouterTest, RetryRespectsMaxHostSelectionCount) {",
          "3969:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "3970:   Http::ResponseDecoder* response_decoder = nullptr;",
          "",
          "[Removed Lines]",
          "3967:   router_->reject_all_hosts_ = true;",
          "",
          "[Added Lines]",
          "3952:   router_.reject_all_hosts_ = true;",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "3975:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3976:   HttpTestUtility::addDefaultHeaders(headers);",
          "3983:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "3985:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "3988:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "3990:   EXPECT_EQ(1U,",
          "3991:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3995:   Http::ResponseHeaderMapPtr response_headers1(",
          "3996:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3997:   EXPECT_CALL(encoder1.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "",
          "[Removed Lines]",
          "3977:   router_->decodeHeaders(headers, false);",
          "3979:   ON_CALL(*router_->retry_state_, hostSelectionMaxAttempts()).WillByDefault(Return(3));",
          "3981:   EXPECT_EQ(1, router_->hostSelectionRetryCount());",
          "3984:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3986:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "3989:   router_->decodeTrailers(trailers);",
          "3994:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3962:   router_.decodeHeaders(headers, false);",
          "3964:   ON_CALL(*router_.retry_state_, hostSelectionMaxAttempts()).WillByDefault(Return(3));",
          "3966:   EXPECT_EQ(1, router_.hostSelectionRetryCount());",
          "3969:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3971:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "3974:   router_.decodeTrailers(trailers);",
          "3979:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "4008:   EXPECT_CALL(encoder2, encodeHeaders(_, false));",
          "4009:   EXPECT_CALL(encoder2, encodeData(_, false));",
          "4010:   EXPECT_CALL(encoder2, encodeTrailers(_));",
          "4012:   EXPECT_EQ(2U,",
          "4013:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4021:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "4022:       .Times(0);",
          "4023:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "4011:   router_->retry_state_->callback_();",
          "4016:   EXPECT_EQ(3, router_->hostSelectionRetryCount());",
          "4019:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "4020:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3996:   router_.retry_state_->callback_();",
          "4001:   EXPECT_EQ(3, router_.hostSelectionRetryCount());",
          "4004:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "4033: TEST_F(RouterTest, RetryRespectsRetryHostPredicate) {",
          "4036:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "4037:   Http::ResponseDecoder* response_decoder = nullptr;",
          "",
          "[Removed Lines]",
          "4034:   router_->reject_all_hosts_ = true;",
          "",
          "[Added Lines]",
          "4018:   router_.reject_all_hosts_ = true;",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "4042:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "4043:   HttpTestUtility::addDefaultHeaders(headers);",
          "4046:   NiceMock<Upstream::MockHost> host;",
          "4050:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4052:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4055:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4057:   EXPECT_EQ(1U,",
          "4058:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4062:   Http::ResponseHeaderMapPtr response_headers1(",
          "4063:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "4064:   EXPECT_CALL(encoder1.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "",
          "[Removed Lines]",
          "4044:   router_->decodeHeaders(headers, false);",
          "4048:   EXPECT_FALSE(router_->shouldSelectAnotherHost(host));",
          "4051:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "4053:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4056:   router_->decodeTrailers(trailers);",
          "4061:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "4028:   router_.decodeHeaders(headers, false);",
          "4032:   EXPECT_FALSE(router_.shouldSelectAnotherHost(host));",
          "4035:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "4037:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "4040:   router_.decodeTrailers(trailers);",
          "4045:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "4075:   EXPECT_CALL(encoder2, encodeHeaders(_, false));",
          "4076:   EXPECT_CALL(encoder2, encodeData(_, false));",
          "4077:   EXPECT_CALL(encoder2, encodeTrailers(_));",
          "4079:   EXPECT_EQ(2U,",
          "4080:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4088:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "4089:       .Times(0);",
          "4090:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "4078:   router_->retry_state_->callback_();",
          "4083:   EXPECT_TRUE(router_->shouldSelectAnotherHost(host));",
          "4086:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "4087:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "4062:   router_.retry_state_->callback_();",
          "4067:   EXPECT_TRUE(router_.shouldSelectAnotherHost(host));",
          "4070:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "4189:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"random_fake_data\"));",
          "4190:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4193:   EXPECT_CALL(callbacks_.downstream_callbacks_, clearRouteCache());",
          "4194:   EXPECT_CALL(callbacks_, recreateStream(_)).WillOnce(Return(true));",
          "",
          "[Removed Lines]",
          "4191:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, true));",
          "",
          "[Added Lines]",
          "4174:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, true));",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "4204:                     .value());",
          "4208:   EXPECT_EQ(1, callbacks_.streamInfo()",
          "4209:                    .filterState()",
          "4210:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "",
          "[Removed Lines]",
          "4207:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "4190:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "4267:                     .value());",
          "4271:   EXPECT_EQ(3, callbacks_.streamInfo()",
          "4272:                    .filterState()",
          "4273:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "",
          "[Removed Lines]",
          "4270:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "4253:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "4296:                     .value());",
          "4300:   EXPECT_EQ(1, callbacks_.streamInfo()",
          "4301:                    .filterState()",
          "4302:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "",
          "[Removed Lines]",
          "4299:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "4282:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "4318:                     .value());",
          "4322:   EXPECT_EQ(\"/\", default_request_headers_.getPathValue());",
          "4323: }",
          "",
          "[Removed Lines]",
          "4321:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "4304:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "4340:                     .value());",
          "4344:   EXPECT_EQ(\"/#fragment\", default_request_headers_.getPathValue());",
          "4345: }",
          "",
          "[Removed Lines]",
          "4343:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "4326:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "4362:                     .value());",
          "4366: }",
          "4368: TEST_F(RouterTest, CrossSchemeRedirectAllowedByPolicy) {",
          "",
          "[Removed Lines]",
          "4365:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "4348:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "4385:                     .value());",
          "4389: }",
          "4391: namespace {",
          "",
          "[Removed Lines]",
          "4388:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "4371:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "4412: } // namespace",
          "4439:   ShadowPolicyPtr policy = makeShadowPolicy(\"\", \"some_header\", \"bar\");",
          "4440:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4441:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "",
          "[Removed Lines]",
          "4414: class RouterShadowingTest : public RouterTest, public testing::WithParamInterface<bool> {",
          "4415: public:",
          "4416:   RouterShadowingTest() : streaming_shadow_(GetParam()) {",
          "4417:     scoped_runtime_.mergeValues(",
          "4418:         {{\"envoy.reloadable_features.streaming_shadow\", streaming_shadow_ ? \"true\" : \"false\"}});",
          "4420:     router_ = std::make_unique<RouterTestFilter>(config_, config_.default_stats_);",
          "4421:     router_->setDecoderFilterCallbacks(callbacks_);",
          "4422:     router_->downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "4423:         ->setLocalAddress(host_address_);",
          "4424:     router_->downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "4425:         ->setRemoteAddress(Network::Utility::parseInternetAddressAndPort(\"1.2.3.4:80\"));",
          "4426:   }",
          "4428: protected:",
          "4429:   bool streaming_shadow_;",
          "4430:   TestScopedRuntime scoped_runtime_;",
          "4431: };",
          "4433: INSTANTIATE_TEST_SUITE_P(StreamingShadow, RouterShadowingTest, testing::Bool());",
          "4435: TEST_P(RouterShadowingTest, BufferingShadowWithClusterHeader) {",
          "4436:   if (streaming_shadow_) {",
          "4437:     GTEST_SKIP();",
          "4438:   }",
          "",
          "[Added Lines]",
          "4397: TEST_F(RouterTest, ShadowWithClusterHeader) {",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "4455:   HttpTestUtility::addDefaultHeaders(headers);",
          "4456:   headers.addCopy(\"some_header\", \"some_cluster\");",
          "4460:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4462:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4466:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4467:   EXPECT_CALL(callbacks_, decodingBuffer())",
          "4468:       .Times(AtLeast(2))",
          "4469:       .WillRepeatedly(Return(body_data.get()));",
          "4470:   EXPECT_CALL(*shadow_writer_, shadow_(\"some_cluster\", _, _))",
          "4471:       .WillOnce(Invoke([](const std::string&, Http::RequestMessagePtr& request,",
          "4472:                           const Http::AsyncClient::RequestOptions& options) -> void {",
          "",
          "[Removed Lines]",
          "4458:   router_->decodeHeaders(headers, false);",
          "4464:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "",
          "[Added Lines]",
          "4417:   router_.decodeHeaders(headers, false);",
          "4421:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "4475:         EXPECT_EQ(absl::optional<std::chrono::milliseconds>(10), options.timeout);",
          "4476:         EXPECT_TRUE(options.sampled_.value());",
          "4477:       }));",
          "4480:   EXPECT_EQ(1U,",
          "4481:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4479:   router_->decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "4436:   router_.decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "4486:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4487: }",
          "4490:   ShadowPolicyPtr policy = makeShadowPolicy(\"\", \"some_header\", \"bar\");",
          "4491:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4492:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "",
          "[Removed Lines]",
          "4489: TEST_P(RouterShadowingTest, ShadowNoClusterHeaderInHeader) {",
          "",
          "[Added Lines]",
          "4446: TEST_F(RouterTest, ShadowNoClusterHeaderInHeader) {",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "4504:   expectResponseTimerCreate();",
          "4505:   Http::TestRequestHeaderMapImpl headers;",
          "4506:   HttpTestUtility::addDefaultHeaders(headers);",
          "4510:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4516:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4518:   EXPECT_EQ(1U,",
          "4519:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4507:   EXPECT_CALL(*shadow_writer_, streamingShadow_(_, _, _)).Times(0);",
          "4508:   router_->decodeHeaders(headers, false);",
          "4511:   if (!streaming_shadow_) {",
          "4512:     EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4513:   }",
          "4514:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4517:   router_->decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "4464:   router_.decodeHeaders(headers, false);",
          "4467:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4468:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "4471:   router_.decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "4526:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4527: }",
          "4530:   ShadowPolicyPtr policy = makeShadowPolicy(\"\", \"some_header\", \"bar\");",
          "4531:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4532:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "",
          "[Removed Lines]",
          "4529: TEST_P(RouterShadowingTest, ShadowClusterNameEmptyInHeader) {",
          "",
          "[Added Lines]",
          "4483: TEST_F(RouterTest, ShadowClusterNameEmptyInHeader) {",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "4545:   Http::TestRequestHeaderMapImpl headers;",
          "4546:   HttpTestUtility::addDefaultHeaders(headers);",
          "4547:   headers.addCopy(\"some_header\", \"\");",
          "4551:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4557:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4559:   EXPECT_EQ(1U,",
          "4560:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4548:   EXPECT_CALL(*shadow_writer_, streamingShadow_(_, _, _)).Times(0);",
          "4549:   router_->decodeHeaders(headers, false);",
          "4552:   if (!streaming_shadow_) {",
          "4553:     EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4554:   }",
          "4555:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4558:   router_->decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "4502:   router_.decodeHeaders(headers, false);",
          "4505:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4506:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "4509:   router_.decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 181 ---",
          "[Context before]",
          "4566:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4567: }",
          "4643:   ShadowPolicyPtr policy = makeShadowPolicy(\"foo\", \"\", \"bar\");",
          "4644:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4645:   policy = makeShadowPolicy(\"fizz\", \"\", \"buzz\", envoy::type::v3::FractionalPercent(), false);",
          "",
          "[Removed Lines]",
          "4569: TEST_P(RouterShadowingTest, StreamingShadow) {",
          "4570:   if (!streaming_shadow_) {",
          "4571:     GTEST_SKIP();",
          "4572:   }",
          "4573:   ShadowPolicyPtr policy = makeShadowPolicy(\"foo\", \"\", \"bar\");",
          "4574:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4575:   policy = makeShadowPolicy(\"fizz\", \"\", \"buzz\", envoy::type::v3::FractionalPercent(), false);",
          "4576:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4577:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "4579:   NiceMock<Http::MockRequestEncoder> encoder;",
          "4580:   Http::ResponseDecoder* response_decoder = nullptr;",
          "4581:   expectNewStreamWithImmediateEncoder(encoder, &response_decoder, Http::Protocol::Http10);",
          "4583:   expectResponseTimerCreate();",
          "4585:   EXPECT_CALL(",
          "4586:       runtime_.snapshot_,",
          "4587:       featureEnabled(\"bar\", testing::Matcher<const envoy::type::v3::FractionalPercent&>(Percent(0)),",
          "4588:                      43))",
          "4589:       .WillOnce(Return(true));",
          "4590:   EXPECT_CALL(",
          "4591:       runtime_.snapshot_,",
          "4592:       featureEnabled(\"buzz\",",
          "4593:                      testing::Matcher<const envoy::type::v3::FractionalPercent&>(Percent(0)), 43))",
          "4594:       .WillOnce(Return(true));",
          "4596:   Http::TestRequestHeaderMapImpl headers;",
          "4597:   HttpTestUtility::addDefaultHeaders(headers);",
          "4598:   NiceMock<Http::MockAsyncClient> foo_client;",
          "4599:   NiceMock<Http::MockAsyncClientOngoingRequest> foo_request(&foo_client);",
          "4600:   EXPECT_CALL(*shadow_writer_, streamingShadow_(\"foo\", _, _))",
          "4601:       .WillOnce(Invoke([&](const std::string&, Http::RequestHeaderMapPtr&,",
          "4602:                            const Http::AsyncClient::RequestOptions& options) {",
          "4603:         EXPECT_EQ(absl::optional<std::chrono::milliseconds>(10), options.timeout);",
          "4604:         EXPECT_TRUE(options.sampled_.value());",
          "4605:         return &foo_request;",
          "4606:       }));",
          "4607:   NiceMock<Http::MockAsyncClient> fizz_client;",
          "4608:   NiceMock<Http::MockAsyncClientOngoingRequest> fizz_request(&fizz_client);",
          "4609:   EXPECT_CALL(*shadow_writer_, streamingShadow_(\"fizz\", _, _))",
          "4610:       .Times(1)",
          "4611:       .WillOnce(Invoke([&](const std::string&, Http::RequestHeaderMapPtr&,",
          "4612:                            const Http::AsyncClient::RequestOptions& options) {",
          "4613:         EXPECT_EQ(absl::optional<std::chrono::milliseconds>(10), options.timeout);",
          "4614:         EXPECT_FALSE(options.sampled_.value());",
          "4615:         return &fizz_request;",
          "4616:       }));",
          "4617:   router_->decodeHeaders(headers, false);",
          "4619:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4620:   EXPECT_CALL(callbacks_, addDecodedData(_, _)).Times(0);",
          "4621:   EXPECT_CALL(foo_request, sendData(BufferStringEqual(\"hello\"), false));",
          "4622:   EXPECT_CALL(fizz_request, sendData(BufferStringEqual(\"hello\"), false));",
          "4623:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4625:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4626:   EXPECT_CALL(callbacks_, decodingBuffer()).Times(0);",
          "4627:   EXPECT_CALL(foo_request, captureAndSendTrailers_(Http::HeaderValueOf(\"some\", \"trailer\")));",
          "4628:   EXPECT_CALL(fizz_request, captureAndSendTrailers_(Http::HeaderValueOf(\"some\", \"trailer\")));",
          "4629:   router_->decodeTrailers(trailers);",
          "4630:   EXPECT_EQ(1U,",
          "4631:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4633:   Http::ResponseHeaderMapPtr response_headers(",
          "4634:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "4635:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "4636:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4637: }",
          "4639: TEST_P(RouterShadowingTest, BufferingShadow) {",
          "4640:   if (streaming_shadow_) {",
          "4641:     GTEST_SKIP();",
          "4642:   }",
          "",
          "[Added Lines]",
          "4520: TEST_F(RouterTest, Shadow) {",
          "",
          "---------------",
          "--- Hunk 182 ---",
          "[Context before]",
          "4666:   Http::TestRequestHeaderMapImpl headers;",
          "4667:   HttpTestUtility::addDefaultHeaders(headers);",
          "4670:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4671:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4674:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4675:   EXPECT_CALL(callbacks_, decodingBuffer())",
          "",
          "[Removed Lines]",
          "4668:   router_->decodeHeaders(headers, false);",
          "4672:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "",
          "[Added Lines]",
          "4546:   router_.decodeHeaders(headers, false);",
          "4550:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "",
          "---------------",
          "--- Hunk 183 ---",
          "[Context before]",
          "4691:         EXPECT_EQ(absl::optional<std::chrono::milliseconds>(10), options.timeout);",
          "4692:         EXPECT_FALSE(options.sampled_.value());",
          "4693:       }));",
          "4695:   EXPECT_EQ(1U,",
          "4696:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4694:   router_->decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "4572:   router_.decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 184 ---",
          "[Context before]",
          "4701:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4702: }",
          "4705:   ShadowPolicyPtr policy = makeShadowPolicy(\"foo\");",
          "4706:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4707:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "",
          "[Removed Lines]",
          "4704: TEST_P(RouterShadowingTest, NoShadowForConnect) {",
          "",
          "[Added Lines]",
          "4582: TEST_F(RouterTest, NoShadowForConnect) {",
          "",
          "---------------",
          "--- Hunk 185 ---",
          "[Context before]",
          "4709:   Http::TestRequestHeaderMapImpl headers;",
          "4710:   HttpTestUtility::addDefaultHeaders(headers);",
          "4711:   headers.setMethod(\"CONNECT\");",
          "4714:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4715:   EXPECT_CALL(callbacks_, addDecodedData(_, true)).Times(0);",
          "4719: }",
          "4721: TEST_F(RouterTest, AltStatName) {",
          "",
          "[Removed Lines]",
          "4712:   router_->decodeHeaders(headers, false);",
          "4716:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4718:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "4590:   router_.decodeHeaders(headers, false);",
          "4594:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "4596:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 186 ---",
          "[Context before]",
          "4731:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-alt-stat-name\", \"alt_stat\"},",
          "4732:                                          {\"x-envoy-internal\", \"true\"}};",
          "4733:   HttpTestUtility::addDefaultHeaders(headers);",
          "4735:   EXPECT_EQ(1U,",
          "4736:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4734:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4612:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 187 ---",
          "[Context before]",
          "4780:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4781:   Http::TestRequestHeaderMapImpl headers;",
          "4782:   HttpTestUtility::addDefaultHeaders(headers);",
          "4784:   EXPECT_EQ(0U,",
          "4785:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4786:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "",
          "[Removed Lines]",
          "4783:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4661:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 188 ---",
          "[Context before]",
          "4804:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4805:   Http::TestRequestHeaderMapImpl headers;",
          "4806:   HttpTestUtility::addDefaultHeaders(headers);",
          "4808:   EXPECT_EQ(0U,",
          "4809:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4810:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "",
          "[Removed Lines]",
          "4807:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4685:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 189 ---",
          "[Context before]",
          "4825:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4826:   Http::TestRequestHeaderMapImpl headers;",
          "4827:   HttpTestUtility::addDefaultHeaders(headers);",
          "4829:   EXPECT_EQ(0U,",
          "4830:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4831:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "4832:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "4834: }",
          "4836: TEST_F(RouterTest, DirectResponseWithBody) {",
          "",
          "[Removed Lines]",
          "4828:   router_->decodeHeaders(headers, true);",
          "4833:   EXPECT_EQ(1UL, router_->stats().rq_direct_response_.value());",
          "",
          "[Added Lines]",
          "4706:   router_.decodeHeaders(headers, true);",
          "4711:   EXPECT_EQ(1UL, router_.stats().rq_direct_response_.value());",
          "",
          "---------------",
          "--- Hunk 190 ---",
          "[Context before]",
          "4850:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "4851:   Http::TestRequestHeaderMapImpl headers;",
          "4852:   HttpTestUtility::addDefaultHeaders(headers);",
          "4854:   EXPECT_EQ(0U,",
          "4855:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4856:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "4857:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "4859: }",
          "4861: TEST_F(RouterTest, DirectResponseWithLocation) {",
          "",
          "[Removed Lines]",
          "4853:   router_->decodeHeaders(headers, true);",
          "4858:   EXPECT_EQ(1UL, router_->stats().rq_direct_response_.value());",
          "",
          "[Added Lines]",
          "4731:   router_.decodeHeaders(headers, true);",
          "4736:   EXPECT_EQ(1UL, router_.stats().rq_direct_response_.value());",
          "",
          "---------------",
          "--- Hunk 191 ---",
          "[Context before]",
          "4874:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4875:   Http::TestRequestHeaderMapImpl headers;",
          "4876:   HttpTestUtility::addDefaultHeaders(headers);",
          "4878:   EXPECT_EQ(0U,",
          "4879:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4880:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "4881:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "4883: }",
          "4885: TEST_F(RouterTest, DirectResponseWithoutLocation) {",
          "",
          "[Removed Lines]",
          "4877:   router_->decodeHeaders(headers, true);",
          "4882:   EXPECT_EQ(1UL, router_->stats().rq_direct_response_.value());",
          "",
          "[Added Lines]",
          "4755:   router_.decodeHeaders(headers, true);",
          "4760:   EXPECT_EQ(1UL, router_.stats().rq_direct_response_.value());",
          "",
          "---------------",
          "--- Hunk 192 ---",
          "[Context before]",
          "4897:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4898:   Http::TestRequestHeaderMapImpl headers;",
          "4899:   HttpTestUtility::addDefaultHeaders(headers);",
          "4901:   EXPECT_EQ(0U,",
          "4902:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4903:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "4904:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "4906: }",
          "",
          "[Removed Lines]",
          "4900:   router_->decodeHeaders(headers, true);",
          "4905:   EXPECT_EQ(1UL, router_->stats().rq_direct_response_.value());",
          "",
          "[Added Lines]",
          "4778:   router_.decodeHeaders(headers, true);",
          "4783:   EXPECT_EQ(1UL, router_.stats().rq_direct_response_.value());",
          "",
          "---------------",
          "--- Hunk 193 ---",
          "[Context before]",
          "4915:   bool filter_state_verified = false;",
          "4917:       std::make_shared<TestAccessLog>([&](const auto& stream_info) {",
          "4918:         filter_state_verified =",
          "4919:             stream_info.upstreamInfo()->upstreamFilterState()->hasDataWithName(\"upstream data\");",
          "",
          "[Removed Lines]",
          "4916:   router_->config().upstream_logs_.push_back(",
          "",
          "[Added Lines]",
          "4794:   router_.config().upstream_logs_.push_back(",
          "",
          "---------------",
          "--- Hunk 194 ---",
          "[Context before]",
          "4928:   Http::TestRequestHeaderMapImpl headers{};",
          "4929:   HttpTestUtility::addDefaultHeaders(headers);",
          "4932:   Http::ResponseHeaderMapPtr response_headers(",
          "4933:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "4930:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4808:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 195 ---",
          "[Context before]",
          "4955:   Http::TestRequestHeaderMapImpl headers{};",
          "4956:   HttpTestUtility::addDefaultHeaders(headers);",
          "4958:   EXPECT_EQ(1U,",
          "4959:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4957:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4835:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 196 ---",
          "[Context before]",
          "4986:   Http::TestRequestHeaderMapImpl headers{};",
          "4987:   HttpTestUtility::addDefaultHeaders(headers);",
          "4990:   test_time_.advanceTimeWait(std::chrono::milliseconds(32));",
          "4991:   Buffer::OwnedImpl data;",
          "4993:   EXPECT_EQ(1U,",
          "4994:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4988:   router_->decodeHeaders(headers, false);",
          "4992:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "4866:   router_.decodeHeaders(headers, false);",
          "4870:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 197 ---",
          "[Context before]",
          "5040:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}};",
          "5041:   HttpTestUtility::addDefaultHeaders(headers);",
          "5046:   test_time_.advanceTimeWait(std::chrono::milliseconds(32));",
          "5047:   Buffer::OwnedImpl data;",
          "5049:   EXPECT_EQ(1U,",
          "5050:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "5042:   router_->decodeHeaders(headers, false);",
          "5044:   router_->retry_state_->expectHeadersRetry();",
          "5048:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "4920:   router_.decodeHeaders(headers, false);",
          "4922:   router_.retry_state_->expectHeadersRetry();",
          "4926:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 198 ---",
          "[Context before]",
          "5059:   response_decoder->decodeHeaders(std::move(bad_response_headers), true);",
          "5064:   MonotonicTime retry_time = test_time_.monotonicTime();",
          "5066:   Http::ResponseHeaderMapPtr good_response_headers(",
          "",
          "[Removed Lines]",
          "5061:   router_->retry_state_->callback_();",
          "5062:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "5063:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "4939:   router_.retry_state_->callback_();",
          "4940:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 199 ---",
          "[Context before]",
          "5112:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"50\"}};",
          "5113:   HttpTestUtility::addDefaultHeaders(headers);",
          "5115:   auto& upstream_timing = stream_info.upstreamInfo()->upstreamTiming();",
          "5116:   EXPECT_FALSE(upstream_timing.last_upstream_rx_byte_received_.has_value());",
          "5118:   test_time_.advanceTimeWait(std::chrono::milliseconds(13));",
          "5119:   Buffer::OwnedImpl data;",
          "5121:   EXPECT_EQ(1U,",
          "5122:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "5114:   router_->decodeHeaders(headers, false);",
          "5120:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "4991:   router_.decodeHeaders(headers, false);",
          "4997:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 200 ---",
          "[Context before]",
          "5723:   const absl::optional<std::string> virtual_cluster_name =",
          "5724:       absl::optional<std::string>(\"fake_virtual_cluster\");",
          "5725:   EXPECT_CALL(callbacks_.stream_info_, setVirtualClusterName(virtual_cluster_name));",
          "5727:   EXPECT_EQ(1U,",
          "5728:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "5726:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "5603:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 201 ---",
          "[Context before]",
          "5755:   const absl::optional<std::string> virtual_cluster_name =",
          "5756:       absl::optional<std::string>(\"fake_virtual_cluster\");",
          "5757:   EXPECT_CALL(callbacks_.stream_info_, setVirtualClusterName(virtual_cluster_name));",
          "5759:   EXPECT_EQ(1U,",
          "5760:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "5758:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "5635:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 202 ---",
          "[Context before]",
          "5802:       .WillOnce(InvokeWithoutArgs([] {}));",
          "5803:   EXPECT_CALL(callbacks_.route_->route_entry_, autoHostRewrite()).WillOnce(Return(true));",
          "5804:   EXPECT_CALL(callbacks_.route_->route_entry_, appendXfh()).WillOnce(Return(true));",
          "5806:   EXPECT_EQ(1U,",
          "5807:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "5809: }",
          "5811: TEST_F(RouterTest, AutoHostRewriteDisabled) {",
          "",
          "[Removed Lines]",
          "5805:   router_->decodeHeaders(incoming_headers, true);",
          "5808:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "5682:   router_.decodeHeaders(incoming_headers, true);",
          "5685:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 203 ---",
          "[Context before]",
          "5832:       }));",
          "5834:   EXPECT_CALL(callbacks_.route_->route_entry_, autoHostRewrite()).WillOnce(Return(false));",
          "5836:   EXPECT_EQ(1U,",
          "5837:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "5839: }",
          "5841: TEST_F(RouterTest, UpstreamSocketOptionsReturnedEmpty) {",
          "5843:   EXPECT_EQ(options.get(), nullptr);",
          "5844: }",
          "",
          "[Removed Lines]",
          "5835:   router_->decodeHeaders(incoming_headers, true);",
          "5838:   router_->onDestroy();",
          "5842:   auto options = router_->upstreamSocketOptions();",
          "",
          "[Added Lines]",
          "5712:   router_.decodeHeaders(incoming_headers, true);",
          "5715:   router_.onDestroy();",
          "5719:   auto options = router_.upstreamSocketOptions();",
          "",
          "---------------",
          "--- Hunk 204 ---",
          "[Context before]",
          "5853:   Http::TestRequestHeaderMapImpl headers;",
          "5854:   HttpTestUtility::addDefaultHeaders(headers);",
          "5855:   headers.setMethod(\"CONNECT\");",
          "5859:   EXPECT_EQ(expected_options->size(), options->size());",
          "5861:   for (size_t i = 0; i < 2; i++) {",
          "",
          "[Removed Lines]",
          "5856:   router_->decodeHeaders(headers, false);",
          "5858:   auto options = router_->upstreamSocketOptions();",
          "",
          "[Added Lines]",
          "5733:   router_.decodeHeaders(headers, false);",
          "5735:   auto options = router_.upstreamSocketOptions();",
          "",
          "---------------",
          "--- Hunk 205 ---",
          "[Context before]",
          "5865:     auto returned_details = options->at(i)->getOptionDetails(dummy_socket, state);",
          "5866:     EXPECT_TRUE(expected_details == returned_details);",
          "5867:   }",
          "5869: }",
          "5871: TEST_F(RouterTest, RedirectRecords) {",
          "",
          "[Removed Lines]",
          "5868:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "5745:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 206 ---",
          "[Context before]",
          "5873:   memcpy(redirect_records->buf_, reinterpret_cast<void*>(redirect_records_data_.data()),",
          "5874:          redirect_records_data_.size());",
          "5875:   redirect_records->buf_size_ = redirect_records_data_.size();",
          "5877:       Network::UpstreamSocketOptionsFilterState::key(),",
          "5878:       std::make_unique<Network::UpstreamSocketOptionsFilterState>(),",
          "5879:       StreamInfo::FilterState::StateType::Mutable, StreamInfo::FilterState::LifeSpan::Connection);",
          "5881:       ->getDataMutable<Network::UpstreamSocketOptionsFilterState>(",
          "5882:           Network::UpstreamSocketOptionsFilterState::key())",
          "5883:       ->addOption(Network::SocketOptionFactory::buildWFPRedirectRecordsOptions(*redirect_records));",
          "5884:   Http::TestRequestHeaderMapImpl headers;",
          "5885:   HttpTestUtility::addDefaultHeaders(headers);",
          "5886:   headers.setMethod(\"CONNECT\");",
          "5889:   Network::Socket::OptionsSharedPtr expected_options =",
          "5890:       Network::SocketOptionFactory::buildWFPRedirectRecordsOptions(*redirect_records);",
          "5892:   EXPECT_EQ(1, options->size());",
          "5894:   NiceMock<Network::MockConnectionSocket> dummy_socket;",
          "",
          "[Removed Lines]",
          "5876:   router_->downstream_connection_.stream_info_.filterState()->setData(",
          "5880:   router_->downstream_connection_.stream_info_.filterState()",
          "5887:   router_->decodeHeaders(headers, false);",
          "5891:   auto options = router_->upstreamSocketOptions();",
          "",
          "[Added Lines]",
          "5753:   router_.downstream_connection_.stream_info_.filterState()->setData(",
          "5757:   router_.downstream_connection_.stream_info_.filterState()",
          "5764:   router_.decodeHeaders(headers, false);",
          "5768:   auto options = router_.upstreamSocketOptions();",
          "",
          "---------------",
          "--- Hunk 207 ---",
          "[Context before]",
          "5896:   auto expected_details = expected_options->at(0)->getOptionDetails(dummy_socket, state);",
          "5897:   auto returned_details = options->at(0)->getOptionDetails(dummy_socket, state);",
          "5898:   EXPECT_TRUE(expected_details == returned_details);",
          "5900: }",
          "5902: TEST_F(RouterTest, ApplicationProtocols) {",
          "",
          "[Removed Lines]",
          "5899:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "5776:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 208 ---",
          "[Context before]",
          "5925:   Http::TestRequestHeaderMapImpl headers;",
          "5926:   HttpTestUtility::addDefaultHeaders(headers);",
          "5930:   EXPECT_CALL(cancellable_, cancel(_));",
          "5932:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "5933:   EXPECT_EQ(0U,",
          "5934:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "5927:   router_->decodeHeaders(headers, true);",
          "5931:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "5804:   router_.decodeHeaders(headers, true);",
          "5808:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 209 ---",
          "[Context before]",
          "5948:   HttpTestUtility::addDefaultHeaders(headers);",
          "5949:   headers.setMethod(\"CONNECT\");",
          "5950:   headers.removePath();",
          "5954:   EXPECT_CALL(encoder, encodeData(_, _)).Times(0);",
          "5955:   Buffer::OwnedImpl data;",
          "5959:   EXPECT_CALL(encoder, encodeData(_, _));",
          "",
          "[Removed Lines]",
          "5951:   router_->decodeHeaders(headers, false);",
          "5956:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "5828:   router_.decodeHeaders(headers, false);",
          "5833:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 210 ---",
          "[Context before]",
          "5991:   Http::TestRequestHeaderMapImpl headers;",
          "5992:   HttpTestUtility::addDefaultHeaders(headers);",
          "5993:   headers.setMethod(\"CONNECT\");",
          "5998: }",
          "",
          "[Removed Lines]",
          "5994:   EXPECT_ENVOY_BUG(router_->decodeHeaders(headers, false),",
          "5995:                    \"envoy bug failure: factory != nullptr.\");",
          "5997:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "5871:   EXPECT_ENVOY_BUG(router_.decodeHeaders(headers, false), \"envoy bug failure: factory != nullptr.\");",
          "5873:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 211 ---",
          "[Context before]",
          "6018:   HttpTestUtility::addDefaultHeaders(headers);",
          "6019:   headers.setMethod(\"CONNECT\");",
          "6020:   headers.removePath();",
          "6024:   EXPECT_CALL(encoder, encodeData(_, _)).Times(0);",
          "6025:   Buffer::OwnedImpl data;",
          "6029:   EXPECT_CALL(encoder, encodeData(_, _)).Times(0);",
          "",
          "[Removed Lines]",
          "6021:   router_->decodeHeaders(headers, false);",
          "6026:   router_->decodeData(data, true);",
          "",
          "[Added Lines]",
          "5897:   router_.decodeHeaders(headers, false);",
          "5902:   router_.decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 212 ---",
          "[Context before]",
          "6049:   HttpTestUtility::addDefaultHeaders(headers);",
          "6050:   headers.setMethod(\"CONNECT\");",
          "6051:   headers.removePath();",
          "6055: }",
          "6057: TEST_F(RouterTest, PostExplicitTcpUpstream) {",
          "",
          "[Removed Lines]",
          "6052:   router_->decodeHeaders(headers, false);",
          "6054:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "5928:   router_.decodeHeaders(headers, false);",
          "5930:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 213 ---",
          "[Context before]",
          "6071:   Http::TestRequestHeaderMapImpl headers;",
          "6072:   HttpTestUtility::addDefaultHeaders(headers);",
          "6073:   headers.setMethod(\"POST\");",
          "6077: }",
          "6079: TEST_F(RouterTest, PostHttpUpstream) {",
          "",
          "[Removed Lines]",
          "6074:   router_->decodeHeaders(headers, false);",
          "6076:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "5950:   router_.decodeHeaders(headers, false);",
          "5952:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 214 ---",
          "[Context before]",
          "6093:   Http::TestRequestHeaderMapImpl headers;",
          "6094:   HttpTestUtility::addDefaultHeaders(headers);",
          "6095:   headers.setMethod(\"POST\");",
          "6099: }",
          "6101: TEST_F(RouterTest, SetDynamicMaxStreamDuration) {",
          "",
          "[Removed Lines]",
          "6096:   router_->decodeHeaders(headers, false);",
          "6098:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "5972:   router_.decodeHeaders(headers, false);",
          "5974:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 215 ---",
          "[Context before]",
          "6107:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-stream-duration-ms\", \"500\"}};",
          "6109:   HttpTestUtility::addDefaultHeaders(headers);",
          "6111:   max_stream_duration_timer_->invokeCallback();",
          "6114:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "6115: }",
          "",
          "[Removed Lines]",
          "6110:   router_->decodeHeaders(headers, false);",
          "6113:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "5986:   router_.decodeHeaders(headers, false);",
          "5989:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 216 ---",
          "[Context before]",
          "6124:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-stream-duration-ms\", \"0\"}};",
          "6125:   HttpTestUtility::addDefaultHeaders(headers);",
          "6129:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "6130: }",
          "",
          "[Removed Lines]",
          "6126:   router_->decodeHeaders(headers, false);",
          "6128:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "6002:   router_.decodeHeaders(headers, false);",
          "6004:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 217 ---",
          "[Context before]",
          "6163:                                          {\"x-envoy-internal\", \"true\"},",
          "6164:                                          {\"x-envoy-upstream-rq-timeout-ms\", \"200\"}};",
          "6165:   HttpTestUtility::addDefaultHeaders(headers);",
          "6167:   EXPECT_EQ(1U,",
          "6168:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "6166:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "6042:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 218 ---",
          "[Context before]",
          "6174:   EXPECT_EQ(200, atoi(std::string(headers.getEnvoyExpectedRequestTimeoutMsValue()).c_str()));",
          "6178:   Upstream::RetryOptionsPredicate::UpdateOptionsReturn update_options_return{",
          "6179:       std::make_shared<Network::Socket::Options>()};",
          "6180:   EXPECT_CALL(*retry_options_predicate, updateOptions(_)).WillOnce(Return(update_options_return));",
          "",
          "[Removed Lines]",
          "6177:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "6053:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 219 ---",
          "[Context before]",
          "6190:   EXPECT_EQ(update_options_return.new_upstream_socket_options_.value(),",
          "6194:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "6195:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "6196:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "6199:   EXPECT_EQ(2U,",
          "6200:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "6191:             router_->upstreamSocketOptions());",
          "6198:   router_->retry_state_->callback_();",
          "",
          "[Added Lines]",
          "6067:             router_.upstreamSocketOptions());",
          "6074:   router_.retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 220 ---",
          "[Context before]",
          "6205:   EXPECT_EQ(150, atoi(std::string(headers.getEnvoyExpectedRequestTimeoutMsValue()).c_str()));",
          "6210:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "6211:       .Times(0);",
          "6212:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "6208:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "6209:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "6084:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 221 ---",
          "[Context before]",
          "6321:   HttpTestUtility::addDefaultHeaders(headers);",
          "6324:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "6325:   Http::ResponseDecoder* response_decoder1 = nullptr;",
          "6326:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "",
          "[Removed Lines]",
          "6323:   router_->retry_425_response_ = true;",
          "",
          "[Added Lines]",
          "6198:   router_.retry_425_response_ = true;",
          "",
          "---------------",
          "--- Hunk 222 ---",
          "[Context before]",
          "6337:           }));",
          "6338:   expectResponseTimerCreate();",
          "6339:   EXPECT_CALL(encoder1, encodeHeaders(_, _));",
          "6342:   Http::ResponseHeaderMapPtr response_headers1(",
          "6343:       new Http::TestResponseHeaderMapImpl{{\":status\", \"425\"}});",
          "6345:       .WillOnce(Invoke([this](const Http::ResponseHeaderMap&, const Http::RequestHeaderMap&,",
          "6346:                               RetryState::DoRetryHeaderCallback callback) {",
          "6348:         return RetryStatus::Yes;",
          "6349:       }));",
          "6350:   ASSERT(response_decoder1);",
          "",
          "[Removed Lines]",
          "6340:   router_->decodeHeaders(headers, true);",
          "6344:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, HeaderMapEqualRef(&headers), _))",
          "6347:         router_->retry_state_->callback_ = [callback]() { callback(/*disable_early_data=*/true); };",
          "",
          "[Added Lines]",
          "6215:   router_.decodeHeaders(headers, true);",
          "6219:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, HeaderMapEqualRef(&headers), _))",
          "6222:         router_.retry_state_->callback_ = [callback]() { callback(/*disable_early_data=*/true); };",
          "",
          "---------------",
          "--- Hunk 223 ---",
          "[Context before]",
          "6367:             return nullptr;",
          "6368:           }));",
          "6369:   EXPECT_CALL(encoder2, encodeHeaders(HeaderMapEqualRef(&headers), _));",
          "6372:   Http::ResponseHeaderMapPtr response_headers2(",
          "6373:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "6376:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _));",
          "6377:   response_decoder2->decodeHeaders(std::move(response_headers2), true);",
          "6378:   EXPECT_TRUE(verifyHostUpstreamStats(1, 1));",
          "",
          "[Removed Lines]",
          "6370:   router_->retry_state_->callback_();",
          "6374:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "6375:       .WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "6245:   router_.retry_state_->callback_();",
          "6249:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 224 ---",
          "[Context before]",
          "6400:   EXPECT_CALL(callbacks_, upstreamOverrideHost())",
          "6401:       .WillOnce(Return(absl::make_optional<absl::string_view>(\"1.2.3.4\")));",
          "6404:   EXPECT_EQ(\"1.2.3.4\", override_host.value());",
          "6406:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "6407:   HttpTestUtility::addDefaultHeaders(headers);",
          "6414:   Http::ResponseHeaderMapPtr response_headers_503(",
          "6415:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "6416:   ASSERT(response_decoder != nullptr);",
          "",
          "[Removed Lines]",
          "6403:   auto override_host = router_->overrideHostToSelect();",
          "6410:   router_->decodeHeaders(headers, true);",
          "6413:   router_->retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "6277:   auto override_host = router_.overrideHostToSelect();",
          "6284:   router_.decodeHeaders(headers, true);",
          "6287:   router_.retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 225 ---",
          "[Context before]",
          "6429:                               upstream_stream_info_, Http::Protocol::Http10);",
          "6430:         return nullptr;",
          "6431:       }));",
          "6436:   EXPECT_CALL(callbacks_, upstreamOverrideHost()).Times(0);",
          "6440:   Http::ResponseHeaderMapPtr response_headers_200(",
          "6441:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "6445:   ASSERT(response_decoder != nullptr);",
          "6447:   response_decoder->decodeHeaders(std::move(response_headers_200), true);",
          "6449:   EXPECT_EQ(2, callbacks_.stream_info_.attemptCount().value());",
          "6452: }",
          "6454: } // namespace Router",
          "",
          "[Removed Lines]",
          "6432:   router_->retry_state_->callback_();",
          "6437:   EXPECT_EQ(absl::nullopt, router_->overrideHostToSelect());",
          "6443:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "6444:       .WillOnce(Return(RetryStatus::No));",
          "6451:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "6306:   router_.retry_state_->callback_();",
          "6311:   EXPECT_EQ(absl::nullopt, router_.overrideHostToSelect());",
          "6317:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "6324:   router_.onDestroy();",
          "",
          "---------------"
        ],
        "test/common/router/router_test_base.cc||test/common/router/router_test_base.cc": [
          "File: test/common/router/router_test_base.cc -> test/common/router/router_test_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:               ShadowWriterPtr{shadow_writer_}, true, start_child_span, suppress_envoy_headers,",
          "20:               false, suppress_grpc_request_failure_code_stats, std::move(strict_headers_to_check),",
          "21:               test_time_.timeSystem(), http_context_, router_context_),",
          "24:   upstream_locality_.set_zone(\"to_az\");",
          "25:   cm_.initializeThreadLocalClusters({\"fake_cluster\"});",
          "26:   ON_CALL(*cm_.thread_local_cluster_.conn_pool_.host_, address())",
          "27:       .WillByDefault(Return(host_address_));",
          "28:   ON_CALL(*cm_.thread_local_cluster_.conn_pool_.host_, locality())",
          "29:       .WillByDefault(ReturnRef(upstream_locality_));",
          "33:       ->setRemoteAddress(Network::Utility::parseInternetAddressAndPort(\"1.2.3.4:80\"));",
          "",
          "[Removed Lines]",
          "22:       router_(std::make_unique<RouterTestFilter>(config_, config_.default_stats_)) {",
          "23:   router_->setDecoderFilterCallbacks(callbacks_);",
          "30:   router_->downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "31:       ->setLocalAddress(host_address_);",
          "32:   router_->downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "",
          "[Added Lines]",
          "22:       router_(config_, config_.default_stats_) {",
          "23:   router_.setDecoderFilterCallbacks(callbacks_);",
          "30:   router_.downstream_connection_.stream_info_.downstream_connection_info_provider_->setLocalAddress(",
          "31:       host_address_);",
          "32:   router_.downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:   Http::TestRequestHeaderMapImpl headers;",
          "142:   HttpTestUtility::addDefaultHeaders(headers);",
          "146:   EXPECT_CALL(cancellable_, cancel(_));",
          "148: }",
          "150: void RouterTestBase::verifyAttemptCountInRequestBasic(bool set_include_attempt_count_in_request,",
          "",
          "[Removed Lines]",
          "143:   router_->decodeHeaders(headers, true);",
          "147:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "143:   router_.decodeHeaders(headers, true);",
          "147:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:   if (preset_count) {",
          "162:     headers.setEnvoyAttemptCount(preset_count.value());",
          "163:   }",
          "166:   EXPECT_EQ(expected_count, atoi(std::string(headers.getEnvoyAttemptCountValue()).c_str()));",
          "167:   EXPECT_EQ(1U, callbacks_.stream_info_.attemptCount().value());",
          "170:   EXPECT_CALL(cancellable_, cancel(_));",
          "172:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "173:   EXPECT_EQ(0U,",
          "174:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "164:   router_->decodeHeaders(headers, true);",
          "171:   router_->onDestroy();",
          "",
          "[Added Lines]",
          "164:   router_.decodeHeaders(headers, true);",
          "171:   router_.onDestroy();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:   Http::TestRequestHeaderMapImpl headers;",
          "190:   HttpTestUtility::addDefaultHeaders(headers);",
          "193:   Http::ResponseHeaderMapPtr response_headers(",
          "194:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "191:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "191:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:                                       Http::Protocol::Http10);",
          "219:   HttpTestUtility::addDefaultHeaders(default_request_headers_, false);",
          "221: }",
          "223: void RouterTestBase::enableRedirects(uint32_t max_internal_redirects) {",
          "",
          "[Removed Lines]",
          "220:   router_->decodeHeaders(default_request_headers_, end_stream);",
          "",
          "[Added Lines]",
          "220:   router_.decodeHeaders(default_request_headers_, end_stream);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "290:   Http::TestRequestHeaderMapImpl headers;",
          "291:   HttpTestUtility::addDefaultHeaders(headers);",
          "293:   EXPECT_EQ(1U,",
          "294:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "292:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "292:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "335:   Http::TestRequestHeaderMapImpl headers;",
          "336:   HttpTestUtility::addDefaultHeaders(headers);",
          "338:   EXPECT_EQ(1U,",
          "339:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "337:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "337:   router_.decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "383:   Http::TestRequestHeaderMapImpl headers;",
          "384:   HttpTestUtility::addDefaultHeaders(headers);",
          "386:   EXPECT_EQ(0U,",
          "387:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "388:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "",
          "[Removed Lines]",
          "385:   router_->decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "385:   router_.decodeHeaders(headers, true);",
          "",
          "---------------"
        ],
        "test/common/router/router_test_base.h||test/common/router/router_test_base.h": [
          "File: test/common/router/router_test_base.h -> test/common/router/router_test_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   MockShadowWriter* shadow_writer_;",
          "105:   NiceMock<LocalInfo::MockLocalInfo> local_info_;",
          "106:   FilterConfig config_;",
          "108:   Event::MockTimer* response_timeout_{};",
          "109:   Event::MockTimer* per_try_timeout_{};",
          "110:   Event::MockTimer* per_try_idle_timeout_{};",
          "",
          "[Removed Lines]",
          "107:   std::unique_ptr<RouterTestFilter> router_;",
          "",
          "[Added Lines]",
          "107:   RouterTestFilter router_;",
          "",
          "---------------"
        ],
        "test/integration/buffer_accounting_integration_test.cc||test/integration/buffer_accounting_integration_test.cc": [
          "File: test/integration/buffer_accounting_integration_test.cc -> test/integration/buffer_accounting_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include \"test/integration/tracked_watermark_buffer.h\"",
          "16: #include \"test/integration/utility.h\"",
          "17: #include \"test/mocks/http/mocks.h\"",
          "20: #include \"fake_upstream.h\"",
          "21: #include \"gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "18: #include \"test/test_common/test_runtime.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:       public HttpIntegrationTest {",
          "98: public:",
          "99:   std::vector<IntegrationStreamDecoderPtr>",
          "102:     std::vector<IntegrationStreamDecoderPtr> responses;",
          "104:     Http::TestRequestHeaderMapImpl header_map{",
          "",
          "[Removed Lines]",
          "100:   sendRequests(uint32_t num_responses, uint32_t request_body_size, uint32_t response_body_size,",
          "101:                absl::string_view cluster_to_wait_for = \"\") {",
          "",
          "[Added Lines]",
          "99:   sendRequests(uint32_t num_responses, uint32_t request_body_size, uint32_t response_body_size) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:     for (uint32_t idx = 0; idx < num_responses; ++idx) {",
          "112:       responses.emplace_back(codec_client_->makeRequestWithBody(header_map, request_body_size));",
          "117:     }",
          "119:     return responses;",
          "",
          "[Removed Lines]",
          "113:       if (!cluster_to_wait_for.empty()) {",
          "114:         test_server_->waitForGaugeEq(",
          "115:             absl::StrCat(\"cluster.\", cluster_to_wait_for, \".upstream_rq_active\"), idx + 1);",
          "116:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "353:   if (streamBufferAccounting()) {",
          "",
          "[Removed Lines]",
          "349:   auto responses = sendRequests(num_requests, request_body_size, response_body_size,",
          "",
          "[Added Lines]",
          "343:   auto responses = sendRequests(num_requests, request_body_size, response_body_size);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "365:   }",
          "366: }",
          "425: TEST_P(Http2BufferWatermarksTest, ShouldTrackAllocatedBytesToDownstream) {",
          "426:   const int num_requests = 5;",
          "427:   const uint32_t request_body_size = 4096;",
          "",
          "[Removed Lines]",
          "368: TEST_P(Http2BufferWatermarksTest, ShouldTrackAllocatedBytesToShadowUpstream) {",
          "369:   const int num_requests = 5;",
          "370:   const uint32_t request_body_size = 4096;",
          "371:   const uint32_t response_body_size = 4096;",
          "372:   TestScopedRuntime scoped_runtime;",
          "373:   scoped_runtime.mergeValues({{\"envoy.reloadable_features.streaming_shadow\", \"true\"}});",
          "375:   autonomous_upstream_ = true;",
          "376:   autonomous_allow_incomplete_streams_ = true;",
          "377:   setUpstreamCount(2);",
          "378:   config_helper_.addConfigModifier([](envoy::config::bootstrap::v3::Bootstrap& bootstrap) {",
          "379:     auto* cluster = bootstrap.mutable_static_resources()->add_clusters();",
          "380:     cluster->MergeFrom(bootstrap.static_resources().clusters()[0]);",
          "381:     cluster->set_name(\"cluster_1\");",
          "382:   });",
          "383:   config_helper_.addConfigModifier(",
          "384:       [=](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "385:               hcm) -> void {",
          "386:         auto* mirror_policy = hcm.mutable_route_config()",
          "387:                                   ->mutable_virtual_hosts(0)",
          "388:                                   ->mutable_routes(0)",
          "389:                                   ->mutable_route()",
          "390:                                   ->add_request_mirror_policies();",
          "391:         mirror_policy->set_cluster(\"cluster_1\");",
          "392:       });",
          "393:   initialize();",
          "395:   buffer_factory_->setExpectedAccountBalance(request_body_size, num_requests);",
          "398:   write_matcher_->setDestinationPort(fake_upstreams_[1]->localAddress()->ip()->port());",
          "399:   write_matcher_->setWriteReturnsEgain();",
          "401:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "403:   auto responses = sendRequests(num_requests, request_body_size, response_body_size,",
          "407:   for (auto& response : responses) {",
          "408:     ASSERT_TRUE(response->waitForEndStream());",
          "409:     ASSERT_TRUE(response->complete());",
          "410:   }",
          "413:   if (streamBufferAccounting()) {",
          "414:     EXPECT_TRUE(",
          "415:         buffer_factory_->waitForExpectedAccountBalanceWithTimeout(TestUtility::DefaultTimeout))",
          "416:         << \"buffer total: \" << buffer_factory_->totalBufferSize() << \"\\n\"",
          "417:         << \" buffer max: \" << buffer_factory_->maxBufferSize() << \"\\n\"",
          "418:         << printAccounts();",
          "419:   }",
          "421:   write_matcher_->setResumeWrites();",
          "422:   test_server_->waitForCounterEq(\"cluster.cluster_1.upstream_rq_completed\", num_requests);",
          "423: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/integration/shadow_policy_integration_test.cc||test/integration/shadow_policy_integration_test.cc": [
          "File: test/integration/shadow_policy_integration_test.cc -> test/integration/shadow_policy_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <string>",
          "4: #include \"envoy/extensions/access_loggers/file/v3/file.pb.h\"",
          "",
          "[Removed Lines]",
          "1: #include <chrono>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: #include \"test/integration/filters/repick_cluster_filter.h\"",
          "9: #include \"test/integration/http_integration.h\"",
          "13: namespace Envoy {",
          "14: namespace {",
          "20: public:",
          "25:     setUpstreamProtocol(Http::CodecType::HTTP2);",
          "26:     autonomous_upstream_ = true;",
          "27:     setUpstreamCount(2);",
          "",
          "[Removed Lines]",
          "10: #include \"test/integration/socket_interface_swap.h\"",
          "11: #include \"test/test_common/test_runtime.h\"",
          "16: class ShadowPolicyIntegrationTest",
          "17:     : public testing::TestWithParam<std::tuple<Network::Address::IpVersion, bool>>,",
          "18:       public HttpIntegrationTest,",
          "19:       public SocketInterfaceSwap {",
          "21:   ShadowPolicyIntegrationTest()",
          "22:       : HttpIntegrationTest(Http::CodecType::HTTP2, std::get<0>(GetParam())) {",
          "23:     scoped_runtime_.mergeValues(",
          "24:         {{\"envoy.reloadable_features.streaming_shadow\", streaming_shadow_ ? \"true\" : \"false\"}});",
          "",
          "[Added Lines]",
          "13: class ShadowPolicyIntegrationTest : public testing::TestWithParam<Network::Address::IpVersion>,",
          "14:                                     public HttpIntegrationTest {",
          "16:   ShadowPolicyIntegrationTest() : HttpIntegrationTest(Http::CodecType::HTTP2, GetParam()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:       EXPECT_EQ(10U, response->body().size());",
          "82:     }",
          "83:     test_server_->waitForCounterEq(\"cluster.cluster_1.internal.upstream_rq_completed\", 1);",
          "85:     upstream_headers_ =",
          "86:         reinterpret_cast<AutonomousUpstream*>(fake_upstreams_[0].get())->lastRequestHeaders();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     test_server_->waitForCounterEq(\"cluster.cluster_1.internal.upstream_rq_completed\", 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:     cleanupUpstreamAndDownstream();",
          "93:   }",
          "96:   absl::optional<int> cluster_with_custom_filter_;",
          "97:   std::string filter_name_ = \"on-local-reply-filter\";",
          "98:   std::unique_ptr<Http::TestRequestHeaderMapImpl> upstream_headers_;",
          "99:   std::unique_ptr<Http::TestRequestHeaderMapImpl> mirror_headers_;",
          "101: };",
          "740: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithCluster) {",
          "",
          "[Removed Lines]",
          "95:   const bool streaming_shadow_ = std::get<1>(GetParam());",
          "100:   TestScopedRuntime scoped_runtime_;",
          "103: INSTANTIATE_TEST_SUITE_P(",
          "104:     IpVersionsAndStreaming, ShadowPolicyIntegrationTest,",
          "105:     testing::Combine(testing::ValuesIn(TestEnvironment::getIpVersionsForTest()), testing::Bool()),",
          "106:     [](const ::testing::TestParamInfo<ShadowPolicyIntegrationTest::ParamType>& params) {",
          "107:       return absl::StrCat(std::get<0>(params.param) == Network::Address::IpVersion::v4 ? \"IPv4\"",
          "108:                                                                                        : \"IPv6\",",
          "109:                           \"_\", std::get<1>(params.param) ? \"streaming_shadow\" : \"buffered_shadow\");",
          "110:     });",
          "112: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithDownstreamReset) {",
          "113:   if (!streaming_shadow_) {",
          "114:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "115:   }",
          "116:   autonomous_upstream_ = false;",
          "117:   initialConfigSetup(\"cluster_1\", \"\");",
          "118:   initialize();",
          "120:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "121:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "122:   request_headers.addCopy(\"potato\", \"salad\");",
          "123:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "124:       codec_client_->startRequest(request_headers, false);",
          "125:   auto& encoder = result.first;",
          "126:   auto response = std::move(result.second);",
          "128:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "129:   FakeStreamPtr upstream_request_main;",
          "130:   ASSERT_TRUE(",
          "131:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "132:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "133:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "134:   FakeStreamPtr upstream_request_shadow;",
          "135:   ASSERT_TRUE(",
          "136:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "137:   ASSERT_TRUE(",
          "138:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "139:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "140:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "141:   EXPECT_EQ(upstream_request_main->headers().get(Http::LowerCaseString(\"potato\"))[0]->value(),",
          "142:             \"salad\");",
          "143:   EXPECT_EQ(upstream_request_shadow->headers().get(Http::LowerCaseString(\"potato\"))[0]->value(),",
          "144:             \"salad\");",
          "146:   codec_client_->sendReset(encoder);",
          "148:   ASSERT_TRUE(upstream_request_main->waitForReset());",
          "149:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "150:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "151:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "152:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "153:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "155:   EXPECT_FALSE(upstream_request_main->complete());",
          "156:   EXPECT_FALSE(upstream_request_shadow->complete());",
          "157:   EXPECT_FALSE(response->complete());",
          "159:   cleanupUpstreamAndDownstream();",
          "161:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "162:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "163:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 1);",
          "164:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_tx_reset\")->value(), 1);",
          "165:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "166:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 0);",
          "167: }",
          "169: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithMainUpstreamReset) {",
          "170:   if (!streaming_shadow_) {",
          "171:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "172:   }",
          "173:   autonomous_upstream_ = false;",
          "174:   initialConfigSetup(\"cluster_1\", \"\");",
          "175:   initialize();",
          "177:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "178:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "179:   request_headers.addCopy(\"potato\", \"salad\");",
          "180:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "181:       codec_client_->startRequest(request_headers, false);",
          "182:   auto response = std::move(result.second);",
          "184:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "185:   FakeStreamPtr upstream_request_main;",
          "186:   ASSERT_TRUE(",
          "187:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "188:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "189:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "190:   FakeStreamPtr upstream_request_shadow;",
          "191:   ASSERT_TRUE(",
          "192:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "193:   ASSERT_TRUE(",
          "194:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "195:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "196:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "199:   upstream_request_main->encodeResetStream();",
          "200:   ASSERT_TRUE(response->waitForReset());",
          "201:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "203:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "204:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "205:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "206:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "207:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "209:   EXPECT_FALSE(upstream_request_main->complete());",
          "210:   EXPECT_FALSE(upstream_request_shadow->complete());",
          "211:   EXPECT_TRUE(response->complete());",
          "213:   cleanupUpstreamAndDownstream();",
          "215:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "216:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "218:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_rx_reset\")->value(), 1);",
          "219:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 1);",
          "220:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "221:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "222: }",
          "224: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithShadowUpstreamReset) {",
          "225:   if (!streaming_shadow_) {",
          "226:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "227:   }",
          "228:   autonomous_upstream_ = false;",
          "229:   initialConfigSetup(\"cluster_1\", \"\");",
          "230:   initialize();",
          "232:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "233:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "234:   request_headers.addCopy(\"potato\", \"salad\");",
          "235:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "236:       codec_client_->startRequest(request_headers, false);",
          "237:   auto& encoder = result.first;",
          "238:   auto response = std::move(result.second);",
          "240:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "241:   FakeStreamPtr upstream_request_main;",
          "242:   ASSERT_TRUE(",
          "243:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "244:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "245:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "246:   FakeStreamPtr upstream_request_shadow;",
          "247:   ASSERT_TRUE(",
          "248:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "249:   ASSERT_TRUE(",
          "250:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "251:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "252:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "255:   upstream_request_shadow->encodeResetStream();",
          "256:   test_server_->waitForCounterEq(\"cluster.cluster_1.upstream_rq_rx_reset\", 1,",
          "257:                                  std::chrono::milliseconds(1000));",
          "259:   codec_client_->sendData(encoder, 20, true);",
          "260:   ASSERT_TRUE(upstream_request_main->waitForData(*dispatcher_, 20));",
          "261:   ASSERT_TRUE(upstream_request_main->waitForEndStream(*dispatcher_));",
          "262:   upstream_request_main->encodeHeaders(default_response_headers_, true);",
          "263:   ASSERT_TRUE(response->waitForEndStream());",
          "264:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "265:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "266:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "267:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "269:   EXPECT_TRUE(upstream_request_main->complete());",
          "270:   EXPECT_FALSE(upstream_request_shadow->complete());",
          "271:   EXPECT_TRUE(response->complete());",
          "273:   cleanupUpstreamAndDownstream();",
          "275:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "276:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "278:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_rx_reset\")->value(), 1);",
          "279:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "280:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 1);",
          "281: }",
          "284: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithEarlyDownstreamTimeout) {",
          "285:   if (!streaming_shadow_) {",
          "286:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "287:   }",
          "288:   autonomous_upstream_ = false;",
          "289:   config_helper_.addConfigModifier(",
          "290:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "291:              hcm) {",
          "293:         hcm.mutable_stream_idle_timeout()->set_seconds(0);",
          "294:         hcm.mutable_stream_idle_timeout()->set_nanos(100 * 1000 * 1000);",
          "295:       });",
          "296:   initialConfigSetup(\"cluster_1\", \"\");",
          "297:   config_helper_.disableDelayClose();",
          "298:   initialize();",
          "300:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "301:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "302:   request_headers.addCopy(\"potato\", \"salad\");",
          "303:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "304:       codec_client_->startRequest(request_headers, false);",
          "305:   auto response = std::move(result.second);",
          "307:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "308:   FakeStreamPtr upstream_request_main;",
          "309:   ASSERT_TRUE(",
          "310:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "311:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "312:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "313:   FakeStreamPtr upstream_request_shadow;",
          "314:   ASSERT_TRUE(",
          "315:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "316:   ASSERT_TRUE(",
          "317:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "318:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "319:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "322:   ASSERT_TRUE(response->waitForReset());",
          "323:   ASSERT_TRUE(upstream_request_main->waitForReset());",
          "324:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "327:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "328:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "329:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "330:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "332:   EXPECT_FALSE(upstream_request_main->complete());",
          "333:   EXPECT_FALSE(upstream_request_shadow->complete());",
          "335:   cleanupUpstreamAndDownstream();",
          "337:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "338:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "339:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_tx_reset\")->value(), 1);",
          "340:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 1);",
          "341:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 0);",
          "342:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "343: }",
          "347: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithLateDownstreamTimeoutAndShadowComplete) {",
          "348:   if (!streaming_shadow_) {",
          "349:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "350:   }",
          "351:   autonomous_upstream_ = false;",
          "352:   initialConfigSetup(\"cluster_1\", \"\");",
          "353:   config_helper_.addConfigModifier(",
          "354:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "355:              hcm) {",
          "357:         hcm.mutable_stream_idle_timeout()->set_seconds(0);",
          "358:         hcm.mutable_stream_idle_timeout()->set_nanos(100 * 1000 * 1000);",
          "359:       });",
          "360:   config_helper_.disableDelayClose();",
          "361:   initialize();",
          "363:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "364:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "365:   request_headers.addCopy(\"potato\", \"salad\");",
          "367:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "368:       codec_client_->startRequest(request_headers, true);",
          "369:   auto response = std::move(result.second);",
          "371:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "372:   FakeStreamPtr upstream_request_main;",
          "373:   ASSERT_TRUE(",
          "374:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "375:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "376:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "377:   FakeStreamPtr upstream_request_shadow;",
          "378:   ASSERT_TRUE(",
          "379:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "380:   ASSERT_TRUE(",
          "381:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "382:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "383:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "384:   upstream_request_shadow->encodeHeaders(default_response_headers_, true);",
          "386:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "387:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "388:   EXPECT_TRUE(upstream_request_shadow->complete());",
          "391:   ASSERT_TRUE(response->waitForEndStream());",
          "392:   ASSERT_TRUE(upstream_request_main->waitForReset());",
          "393:   EXPECT_TRUE(response->complete());",
          "394:   EXPECT_EQ(response->headers().getStatusValue(), \"504\");",
          "397:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "398:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "400:   cleanupUpstreamAndDownstream();",
          "402:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "403:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "404:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_tx_reset\")->value(), 1);",
          "405:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 0);",
          "406:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 0);",
          "407:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 1);",
          "408: }",
          "411: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithShadowOnlyTimeout) {",
          "412:   if (!streaming_shadow_) {",
          "413:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "414:   }",
          "415:   autonomous_upstream_ = false;",
          "416:   initialConfigSetup(\"cluster_1\", \"\");",
          "417:   config_helper_.addConfigModifier(",
          "418:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "419:              hcm) {",
          "421:         auto* route_config = hcm.mutable_route_config();",
          "422:         auto* virtual_host = route_config->mutable_virtual_hosts(0);",
          "423:         auto* route = virtual_host->mutable_routes(0)->mutable_route();",
          "424:         route->mutable_timeout()->set_seconds(0);",
          "425:         route->mutable_timeout()->set_nanos(100 * 1000 * 1000);",
          "426:       });",
          "427:   config_helper_.disableDelayClose();",
          "428:   initialize();",
          "430:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "431:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "432:   request_headers.addCopy(\"potato\", \"salad\");",
          "434:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "435:       codec_client_->startRequest(request_headers, true);",
          "436:   auto response = std::move(result.second);",
          "438:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "439:   FakeStreamPtr upstream_request_main;",
          "440:   ASSERT_TRUE(",
          "441:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "442:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "443:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "444:   FakeStreamPtr upstream_request_shadow;",
          "445:   ASSERT_TRUE(",
          "446:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "447:   ASSERT_TRUE(",
          "448:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "449:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "450:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "452:   upstream_request_main->encodeHeaders(default_response_headers_, true);",
          "453:   ASSERT_TRUE(response->waitForEndStream());",
          "454:   EXPECT_TRUE(response->complete());",
          "457:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "460:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "461:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "463:   cleanupUpstreamAndDownstream();",
          "465:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "466:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "467:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 1);",
          "468:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_timeout\")->value(), 1);",
          "469: }",
          "471: TEST_P(ShadowPolicyIntegrationTest, MainRequestOverBufferLimit) {",
          "472:   if (!streaming_shadow_) {",
          "473:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "474:   }",
          "475:   autonomous_upstream_ = true;",
          "476:   cluster_with_custom_filter_ = 0;",
          "477:   filter_name_ = \"encoder-decoder-buffer-filter\";",
          "478:   initialConfigSetup(\"cluster_1\", \"\");",
          "479:   config_helper_.setBufferLimits(1024, 1024);",
          "480:   config_helper_.disableDelayClose();",
          "481:   initialize();",
          "483:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "484:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "485:   request_headers.addCopy(\"potato\", \"salad\");",
          "487:   auto response = codec_client_->makeRequestWithBody(",
          "488:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "489:                                      {\":path\", \"/dynamo/url\"},",
          "490:                                      {\":scheme\", \"http\"},",
          "491:                                      {\":authority\", \"sni.lyft.com\"},",
          "492:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "493:                                      {\"x-envoy-retry-on\", \"5xx\"}},",
          "494:       1024 * 65);",
          "496:   ASSERT_TRUE(response->waitForEndStream());",
          "497:   EXPECT_TRUE(response->complete());",
          "499:   cleanupUpstreamAndDownstream();",
          "501:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "502:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "503:   test_server_->waitForCounterEq(\"cluster.cluster_1.upstream_rq_completed\", 1);",
          "504: }",
          "506: TEST_P(ShadowPolicyIntegrationTest, ShadowRequestOverBufferLimit) {",
          "507:   if (!streaming_shadow_) {",
          "508:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "509:   }",
          "510:   autonomous_upstream_ = true;",
          "511:   cluster_with_custom_filter_ = 1;",
          "512:   filter_name_ = \"encoder-decoder-buffer-filter\";",
          "513:   initialConfigSetup(\"cluster_1\", \"\");",
          "514:   config_helper_.setBufferLimits(1024, 1024);",
          "515:   config_helper_.disableDelayClose();",
          "516:   initialize();",
          "518:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "519:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "520:   request_headers.addCopy(\"potato\", \"salad\");",
          "522:   auto response = codec_client_->makeRequestWithBody(",
          "523:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "524:                                      {\":path\", \"/dynamo/url\"},",
          "525:                                      {\":scheme\", \"http\"},",
          "526:                                      {\":authority\", \"sni.lyft.com\"},",
          "527:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "528:                                      {\"x-envoy-retry-on\", \"5xx\"}},",
          "529:       1024 * 65);",
          "531:   ASSERT_TRUE(response->waitForEndStream());",
          "532:   EXPECT_TRUE(response->complete());",
          "533:   EXPECT_EQ(response->headers().getStatusValue(), \"200\");",
          "535:   cleanupUpstreamAndDownstream();",
          "537:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "538:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "539:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "541:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "542: }",
          "544: TEST_P(ShadowPolicyIntegrationTest, ShadowRequestOverRouteBufferLimit) {",
          "545:   if (!streaming_shadow_) {",
          "546:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "547:   }",
          "548:   autonomous_upstream_ = true;",
          "549:   cluster_with_custom_filter_ = 1;",
          "550:   filter_name_ = \"encoder-decoder-buffer-filter\";",
          "551:   initialConfigSetup(\"cluster_1\", \"\");",
          "552:   config_helper_.addConfigModifier([](ConfigHelper::HttpConnectionManager& hcm) {",
          "553:     hcm.mutable_route_config()",
          "554:         ->mutable_virtual_hosts(0)",
          "555:         ->mutable_per_request_buffer_limit_bytes()",
          "556:         ->set_value(0);",
          "557:   });",
          "558:   config_helper_.disableDelayClose();",
          "559:   initialize();",
          "561:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "562:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "563:   request_headers.addCopy(\"potato\", \"salad\");",
          "565:   auto response = codec_client_->makeRequestWithBody(",
          "566:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "567:                                      {\":path\", \"/dynamo/url\"},",
          "568:                                      {\":scheme\", \"http\"},",
          "569:                                      {\":authority\", \"sni.lyft.com\"},",
          "570:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "571:                                      {\"x-envoy-retry-on\", \"5xx\"}},",
          "572:       1024 * 65);",
          "574:   ASSERT_TRUE(response->waitForEndStream());",
          "575:   EXPECT_TRUE(response->complete());",
          "576:   EXPECT_EQ(response->headers().getStatusValue(), \"200\");",
          "578:   cleanupUpstreamAndDownstream();",
          "580:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "581:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "582:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "584:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "585: }",
          "587: TEST_P(ShadowPolicyIntegrationTest, BackedUpConnectionBeforeShadowBegins) {",
          "588:   if (!streaming_shadow_) {",
          "589:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "590:   }",
          "591:   autonomous_upstream_ = true;",
          "592:   autonomous_allow_incomplete_streams_ = true;",
          "593:   initialConfigSetup(\"cluster_1\", \"\");",
          "595:   config_helper_.addConfigModifier([](envoy::config::bootstrap::v3::Bootstrap& bs) {",
          "596:     auto* shadow_cluster = bs.mutable_static_resources()->mutable_clusters(1);",
          "597:     shadow_cluster->mutable_per_connection_buffer_limit_bytes()->set_value(1024);",
          "598:   });",
          "601:   config_helper_.addConfigModifier(",
          "602:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "603:              hcm) {",
          "604:         auto* route_1 = hcm.mutable_route_config()->mutable_virtual_hosts(0)->add_routes();",
          "605:         route_1->mutable_route()->set_cluster(\"cluster_1\");",
          "606:         route_1->mutable_match()->set_prefix(\"/shadow\");",
          "607:         hcm.mutable_route_config()",
          "608:             ->mutable_virtual_hosts(0)",
          "609:             ->mutable_routes(0)",
          "610:             ->mutable_match()",
          "611:             ->set_prefix(\"/main\");",
          "612:       });",
          "613:   config_helper_.addRuntimeOverride(Runtime::defer_processing_backedup_streams, \"true\");",
          "614:   initialize();",
          "616:   write_matcher_->setDestinationPort(fake_upstreams_[1]->localAddress()->ip()->port());",
          "617:   write_matcher_->setWriteReturnsEgain();",
          "619:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "621:   auto shadow_direct_response = codec_client_->makeRequestWithBody(",
          "622:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "623:                                      {\":path\", \"/shadow\"},",
          "624:                                      {\":scheme\", \"http\"},",
          "625:                                      {\":authority\", \"sni.lyft.com\"},",
          "626:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "627:                                      {\"x-envoy-retry-on\", \"5xx\"}},",
          "628:       1024 * 3);",
          "631:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "632:       codec_client_->startRequest(Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "633:                                                                  {\":path\", \"/main\"},",
          "634:                                                                  {\":scheme\", \"http\"},",
          "635:                                                                  {\":authority\", \"sni.lyft.com\"},",
          "636:                                                                  {\"x-forwarded-for\", \"10.0.0.1\"},",
          "637:                                                                  {\"x-envoy-retry-on\", \"5xx\"}},",
          "638:                                   false);",
          "639:   auto& encoder = result.first;",
          "640:   auto main_response = std::move(result.second);",
          "643:   test_server_->waitForCounterEq(\"http.config_test.downstream_flow_control_paused_reading_total\", 1,",
          "644:                                  std::chrono::milliseconds(500));",
          "646:   codec_client_->sendData(encoder, 1023, false);",
          "648:   codec_client_->sendData(encoder, 10, true);",
          "650:   EXPECT_FALSE(main_response->waitForEndStream(std::chrono::milliseconds(500)));",
          "653:   write_matcher_->setResumeWrites();",
          "655:   EXPECT_TRUE(main_response->waitForEndStream());",
          "656:   EXPECT_TRUE(main_response->complete());",
          "657:   EXPECT_EQ(main_response->headers().getStatusValue(), \"200\");",
          "658:   EXPECT_TRUE(shadow_direct_response->waitForEndStream());",
          "659:   EXPECT_TRUE(shadow_direct_response->complete());",
          "660:   EXPECT_EQ(shadow_direct_response->headers().getStatusValue(), \"200\");",
          "663:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "664:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 2);",
          "665:   EXPECT_EQ(test_server_->counter(\"http.config_test.downstream_flow_control_paused_reading_total\")",
          "666:                 ->value(),",
          "667:             1);",
          "668: }",
          "670: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithShadowBackpressure) {",
          "671:   if (!streaming_shadow_) {",
          "672:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "673:   }",
          "674:   autonomous_upstream_ = false;",
          "675:   initialConfigSetup(\"cluster_1\", \"\");",
          "677:   config_helper_.addConfigModifier([](envoy::config::bootstrap::v3::Bootstrap& bs) {",
          "678:     auto* shadow_cluster = bs.mutable_static_resources()->mutable_clusters(1);",
          "679:     shadow_cluster->mutable_per_connection_buffer_limit_bytes()->set_value(1024);",
          "680:   });",
          "681:   initialize();",
          "683:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "684:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "685:   request_headers.addCopy(\"potato\", \"salad\");",
          "686:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "687:       codec_client_->startRequest(request_headers, false);",
          "688:   auto& encoder = result.first;",
          "689:   auto response = std::move(result.second);",
          "691:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "692:   FakeStreamPtr upstream_request_main;",
          "693:   ASSERT_TRUE(",
          "694:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "695:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "696:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "697:   FakeStreamPtr upstream_request_shadow;",
          "698:   ASSERT_TRUE(",
          "699:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "700:   ASSERT_TRUE(",
          "701:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "702:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "703:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "707:   codec_client_->sendData(encoder, 2048, false);",
          "708:   test_server_->waitForCounterGe(\"http.config_test.downstream_flow_control_paused_reading_total\",",
          "709:                                  1);",
          "710:   codec_client_->sendData(encoder, 2048, true);",
          "711:   ASSERT_TRUE(upstream_request_main->waitForData(*dispatcher_, 2048 * 2));",
          "712:   ASSERT_TRUE(upstream_request_shadow->waitForData(*dispatcher_, 2048 * 2));",
          "714:   ASSERT_TRUE(upstream_request_main->waitForEndStream(*dispatcher_));",
          "715:   ASSERT_TRUE(upstream_request_shadow->waitForEndStream(*dispatcher_));",
          "716:   upstream_request_main->encodeHeaders(default_response_headers_, true);",
          "717:   upstream_request_shadow->encodeHeaders(default_response_headers_, true);",
          "718:   ASSERT_TRUE(response->waitForEndStream());",
          "719:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "720:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "721:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "722:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "723:   EXPECT_TRUE(upstream_request_main->complete());",
          "724:   EXPECT_TRUE(upstream_request_shadow->complete());",
          "725:   EXPECT_TRUE(response->complete());",
          "727:   cleanupUpstreamAndDownstream();",
          "729:   EXPECT_EQ(test_server_->counter(\"http.config_test.downstream_flow_control_paused_reading_total\")",
          "730:                 ->value(),",
          "731:             1);",
          "732:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "733:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "735:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "736:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 1);",
          "737: }",
          "",
          "[Added Lines]",
          "94: INSTANTIATE_TEST_SUITE_P(IpVersions, ShadowPolicyIntegrationTest,",
          "95:                          testing::ValuesIn(TestEnvironment::getIpVersionsForTest()),",
          "96:                          TestUtility::ipTestParamsToString);",
          "",
          "---------------"
        ],
        "test/mocks/http/mocks.cc||test/mocks/http/mocks.cc": [
          "File: test/mocks/http/mocks.cc -> test/mocks/http/mocks.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: MockAsyncClientRequest::~MockAsyncClientRequest() { client_->onRequestDestroy(); }",
          "215: MockAsyncClientStream::MockAsyncClientStream() = default;",
          "222: MockFilterChainFactoryCallbacks::MockFilterChainFactoryCallbacks() = default;",
          "223: MockFilterChainFactoryCallbacks::~MockFilterChainFactoryCallbacks() = default;",
          "",
          "[Removed Lines]",
          "216: MockAsyncClientStream::~MockAsyncClientStream() {",
          "217:   if (destructor_callback_) {",
          "218:     (*destructor_callback_)();",
          "219:   }",
          "220: };",
          "",
          "[Added Lines]",
          "216: MockAsyncClientStream::~MockAsyncClientStream() = default;",
          "",
          "---------------"
        ],
        "test/mocks/http/mocks.h||test/mocks/http/mocks.h": [
          "File: test/mocks/http/mocks.h -> test/mocks/http/mocks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "479:                 const RequestOptions& args) override {",
          "480:     return send_(request, callbacks, args);",
          "481:   }",
          "486:   MOCK_METHOD(Request*, send_,",
          "487:               (RequestMessagePtr & request, Callbacks& callbacks, const RequestOptions& args));",
          "490:   MOCK_METHOD(Stream*, start, (StreamCallbacks & callbacks, const StreamOptions& args));",
          "492:   MOCK_METHOD(Event::Dispatcher&, dispatcher, ());",
          "",
          "[Removed Lines]",
          "482:   OngoingRequest* startRequest(RequestHeaderMapPtr&& headers, Callbacks& callbacks,",
          "483:                                const RequestOptions& args) override {",
          "484:     return startRequest_(headers, callbacks, args);",
          "485:   }",
          "488:   MOCK_METHOD(OngoingRequest*, startRequest_,",
          "489:               (RequestHeaderMapPtr & request, Callbacks& callbacks, const RequestOptions& args));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "529:   MOCK_METHOD(void, onReset, ());",
          "530: };",
          "533: public:",
          "534:   MockAsyncClientRequest(MockAsyncClient* client);",
          "535:   ~MockAsyncClientRequest() override;",
          "",
          "[Removed Lines]",
          "532: class MockAsyncClientRequest : public virtual AsyncClient::Request {",
          "",
          "[Added Lines]",
          "528: class MockAsyncClientRequest : public AsyncClient::Request {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "539:   MockAsyncClient* client_;",
          "540: };",
          "543: public:",
          "544:   MockAsyncClientStream();",
          "545:   ~MockAsyncClientStream() override;",
          "",
          "[Removed Lines]",
          "542: class MockAsyncClientStream : public virtual AsyncClient::Stream {",
          "",
          "[Added Lines]",
          "538: class MockAsyncClientStream : public AsyncClient::Stream {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "549:   MOCK_METHOD(void, sendTrailers, (RequestTrailerMap & trailers));",
          "550:   MOCK_METHOD(void, reset, ());",
          "551:   MOCK_METHOD(bool, isAboveWriteBufferHighWatermark, (), (const));",
          "573: };",
          "575: class MockDownstreamWatermarkCallbacks : public DownstreamWatermarkCallbacks {",
          "",
          "[Removed Lines]",
          "552:   void setDestructorCallback(AsyncClient::StreamDestructorCallbacks callback) override {",
          "553:     destructor_callback_ = callback;",
          "554:   }",
          "555:   void removeDestructorCallback() override { destructor_callback_.reset(); }",
          "556:   MOCK_METHOD(void, setWatermarkCallbacks, (DecoderFilterWatermarkCallbacks & callback),",
          "557:               (override));",
          "558:   MOCK_METHOD(void, removeWatermarkCallbacks, (), (override));",
          "560: private:",
          "561:   absl::optional<AsyncClient::StreamDestructorCallbacks> destructor_callback_;",
          "562: };",
          "564: class MockAsyncClientOngoingRequest : public virtual AsyncClient::OngoingRequest,",
          "565:                                       public MockAsyncClientStream,",
          "566:                                       public MockAsyncClientRequest {",
          "567: public:",
          "568:   MockAsyncClientOngoingRequest(MockAsyncClient* client) : MockAsyncClientRequest(client) {}",
          "569:   void captureAndSendTrailers(RequestTrailerMapPtr&& trailers) override {",
          "570:     return captureAndSendTrailers_(*trailers);",
          "571:   }",
          "572:   MOCK_METHOD(void, captureAndSendTrailers_, (RequestTrailerMap & trailers), ());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/mocks/router/mocks.h||test/mocks/router/mocks.h": [
          "File: test/mocks/router/mocks.h -> test/mocks/router/mocks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:   MOCK_METHOD(void, shadow_,",
          "268:               (const std::string& cluster, Http::RequestMessagePtr& request,",
          "269:                const Http::AsyncClient::RequestOptions& options));",
          "279: };",
          "281: class TestVirtualCluster : public VirtualCluster {",
          "",
          "[Removed Lines]",
          "271:   Http::AsyncClient::OngoingRequest*",
          "272:   streamingShadow(const std::string& cluster, Http::RequestHeaderMapPtr&& request,",
          "273:                   const Http::AsyncClient::RequestOptions& options) override {",
          "274:     return streamingShadow_(cluster, request, options);",
          "275:   }",
          "276:   MOCK_METHOD(Http::AsyncClient::OngoingRequest*, streamingShadow_,",
          "277:               (const std::string& cluster, Http::RequestHeaderMapPtr& request,",
          "278:                const Http::AsyncClient::RequestOptions& options));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42329eb4855952970d83061899808a0f6d900987",
      "candidate_info": {
        "commit_hash": "42329eb4855952970d83061899808a0f6d900987",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/42329eb4855952970d83061899808a0f6d900987",
        "files": [
          "envoy/http/BUILD",
          "envoy/http/async_client.h",
          "envoy/http/filter.h",
          "envoy/router/shadow_writer.h",
          "source/common/http/async_client_impl.cc",
          "source/common/http/async_client_impl.h",
          "source/common/router/router.cc",
          "source/common/router/router.h",
          "source/common/router/shadow_writer_impl.cc",
          "source/common/router/shadow_writer_impl.h",
          "source/common/runtime/runtime_features.cc",
          "test/common/buffer/buffer_test.cc",
          "test/common/http/async_client_impl_test.cc",
          "test/common/router/router_2_test.cc",
          "test/common/router/router_test.cc",
          "test/common/router/router_test_base.cc",
          "test/common/router/router_test_base.h",
          "test/integration/BUILD",
          "test/integration/buffer_accounting_integration_test.cc",
          "test/integration/protocol_integration_test.cc",
          "test/integration/shadow_policy_integration_test.cc",
          "test/mocks/http/mocks.cc",
          "test/mocks/http/mocks.h",
          "test/mocks/router/mocks.h"
        ],
        "message": "[router] Unrevert streaming shadows (#25207)\n\nSigned-off-by: Paul Gallagher <pgal@google.com>",
        "before_after_code_files": [
          "envoy/http/async_client.h||envoy/http/async_client.h",
          "envoy/http/filter.h||envoy/http/filter.h",
          "envoy/router/shadow_writer.h||envoy/router/shadow_writer.h",
          "source/common/http/async_client_impl.cc||source/common/http/async_client_impl.cc",
          "source/common/http/async_client_impl.h||source/common/http/async_client_impl.h",
          "source/common/router/router.cc||source/common/router/router.cc",
          "source/common/router/router.h||source/common/router/router.h",
          "source/common/router/shadow_writer_impl.cc||source/common/router/shadow_writer_impl.cc",
          "source/common/router/shadow_writer_impl.h||source/common/router/shadow_writer_impl.h",
          "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
          "test/common/buffer/buffer_test.cc||test/common/buffer/buffer_test.cc",
          "test/common/http/async_client_impl_test.cc||test/common/http/async_client_impl_test.cc",
          "test/common/router/router_2_test.cc||test/common/router/router_2_test.cc",
          "test/common/router/router_test.cc||test/common/router/router_test.cc",
          "test/common/router/router_test_base.cc||test/common/router/router_test_base.cc",
          "test/common/router/router_test_base.h||test/common/router/router_test_base.h",
          "test/integration/buffer_accounting_integration_test.cc||test/integration/buffer_accounting_integration_test.cc",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc",
          "test/integration/shadow_policy_integration_test.cc||test/integration/shadow_policy_integration_test.cc",
          "test/mocks/http/mocks.cc||test/mocks/http/mocks.cc",
          "test/mocks/http/mocks.h||test/mocks/http/mocks.h",
          "test/mocks/router/mocks.h||test/mocks/router/mocks.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "envoy/http/async_client.h||envoy/http/async_client.h": [
          "File: envoy/http/async_client.h -> envoy/http/async_client.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <chrono>",
          "4: #include <memory>",
          "6: #include \"envoy/config/route/v3/route_components.pb.h\"",
          "7: #include \"envoy/event/dispatcher.h\"",
          "8: #include \"envoy/http/message.h\"",
          "9: #include \"envoy/stream_info/stream_info.h\"",
          "10: #include \"envoy/tracing/http_tracer.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include \"envoy/buffer/buffer.h\"",
          "9: #include \"envoy/http/filter.h\"",
          "10: #include \"envoy/http/header_map.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:     virtual void onReset() PURE;",
          "130:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:   using StreamDestructorCallbacks = std::function<void()>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:     virtual void reset() PURE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:     virtual void setDestructorCallback(StreamDestructorCallbacks callback) PURE;",
          "182:     virtual void removeDestructorCallback() PURE;",
          "190:     virtual void setWatermarkCallbacks(DecoderFilterWatermarkCallbacks& callbacks) PURE;",
          "195:     virtual void removeWatermarkCallbacks() PURE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:     virtual bool isAboveWriteBufferHighWatermark() const PURE;",
          "171:   };",
          "173:   virtual ~AsyncClient() = default;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:   class OngoingRequest : public virtual Request, public virtual Stream {",
          "210:   public:",
          "215:     virtual void captureAndSendTrailers(RequestTrailerMapPtr&& trailers) PURE;",
          "216:   };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "216:       return *this;",
          "217:     }",
          "220:     StreamOptions& setRetryPolicy(const envoy::config::route::v3::RetryPolicy& p) {",
          "221:       retry_policy = p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     StreamOptions& setBufferAccount(const Buffer::BufferMemoryAccountSharedPtr& account) {",
          "266:       account_ = account;",
          "267:       return *this;",
          "268:     }",
          "269:     StreamOptions& setBufferLimit(uint32_t limit) {",
          "270:       buffer_limit_ = limit;",
          "271:       return *this;",
          "272:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "259:     envoy::config::core::v3::Metadata metadata;",
          "261:     absl::optional<envoy::config::route::v3::RetryPolicy> retry_policy;",
          "263:     OptRef<Router::FilterConfig> filter_config_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:     Buffer::BufferMemoryAccountSharedPtr account_{nullptr};",
          "319:     absl::optional<uint32_t> buffer_limit_;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "318:       sampled_ = sampled;",
          "319:       return *this;",
          "320:     }",
          "323:     bool operator==(const RequestOptions& src) const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:     RequestOptions& setBufferAccount(const Buffer::BufferMemoryAccountSharedPtr& account) {",
          "382:       account_ = account;",
          "383:       return *this;",
          "384:     }",
          "385:     RequestOptions& setBufferLimit(uint32_t limit) {",
          "386:       buffer_limit_ = limit;",
          "387:       return *this;",
          "388:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "350:                         const RequestOptions& options) PURE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:   virtual OngoingRequest* startRequest(RequestHeaderMapPtr&& request_headers, Callbacks& callbacks,",
          "431:                                        const RequestOptions& options) PURE;",
          "",
          "---------------"
        ],
        "envoy/http/filter.h||envoy/http/filter.h": [
          "File: envoy/http/filter.h -> envoy/http/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:   virtual OptRef<DownstreamStreamFilterCallbacks> downstreamCallbacks() PURE;",
          "430: };",
          "437: public:",
          "",
          "[Removed Lines]",
          "436: class StreamDecoderFilterCallbacks : public virtual StreamFilterCallbacks {",
          "",
          "[Added Lines]",
          "432: class DecoderFilterWatermarkCallbacks {",
          "433: public:",
          "434:   virtual ~DecoderFilterWatermarkCallbacks() = default;",
          "444:   virtual void onDecoderFilterAboveWriteBufferHighWatermark() PURE;",
          "450:   virtual void onDecoderFilterBelowWriteBufferLowWatermark() PURE;",
          "451: };",
          "457: class StreamDecoderFilterCallbacks : public virtual StreamFilterCallbacks,",
          "458:                                      public virtual DecoderFilterWatermarkCallbacks {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627:   virtual void encodeMetadata(MetadataMapPtr&& metadata_map) PURE;",
          "",
          "[Removed Lines]",
          "637:   virtual void onDecoderFilterAboveWriteBufferHighWatermark() PURE;",
          "643:   virtual void onDecoderFilterBelowWriteBufferLowWatermark() PURE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "envoy/router/shadow_writer.h||envoy/router/shadow_writer.h": [
          "File: envoy/router/shadow_writer.h -> envoy/router/shadow_writer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   virtual void shadow(const std::string& cluster, Http::RequestMessagePtr&& request,",
          "29:                       const Http::AsyncClient::RequestOptions& options) PURE;",
          "30: };",
          "32: using ShadowWriterPtr = std::unique_ptr<ShadowWriter>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:   virtual Http::AsyncClient::OngoingRequest*",
          "42:   streamingShadow(const std::string& cluster, Http::RequestHeaderMapPtr&& headers,",
          "43:                   const Http::AsyncClient::RequestOptions& options) PURE;",
          "",
          "---------------"
        ],
        "source/common/http/async_client_impl.cc||source/common/http/async_client_impl.cc": [
          "File: source/common/http/async_client_impl.cc -> source/common/http/async_client_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   }",
          "53: }",
          "60:   async_request->initialize();",
          "61:   std::unique_ptr<AsyncStreamImpl> new_request{async_request};",
          "",
          "[Removed Lines]",
          "55: AsyncClient::Request* AsyncClientImpl::send(RequestMessagePtr&& request,",
          "56:                                             AsyncClient::Callbacks& callbacks,",
          "57:                                             const AsyncClient::RequestOptions& options) {",
          "58:   AsyncRequestImpl* async_request =",
          "59:       new AsyncRequestImpl(std::move(request), *this, callbacks, options);",
          "",
          "[Added Lines]",
          "55: template <typename T> T* AsyncClientImpl::internalStartRequest(T* async_request) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   }",
          "71: }",
          "73: AsyncClient::Stream* AsyncClientImpl::start(AsyncClient::StreamCallbacks& callbacks,",
          "74:                                             const AsyncClient::StreamOptions& options) {",
          "75:   std::unique_ptr<AsyncStreamImpl> new_stream{new AsyncStreamImpl(*this, callbacks, options)};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: template AsyncRequestImpl*",
          "70: AsyncClientImpl::internalStartRequest<AsyncRequestImpl>(AsyncRequestImpl*);",
          "71: template AsyncOngoingRequestImpl*",
          "72: AsyncClientImpl::internalStartRequest<AsyncOngoingRequestImpl>(AsyncOngoingRequestImpl*);",
          "74: AsyncClient::Request* AsyncClientImpl::send(RequestMessagePtr&& request,",
          "75:                                             AsyncClient::Callbacks& callbacks,",
          "76:                                             const AsyncClient::RequestOptions& options) {",
          "77:   AsyncRequestImpl* async_request =",
          "78:       new AsyncRequestImpl(std::move(request), *this, callbacks, options);",
          "79:   return internalStartRequest(async_request);",
          "80: }",
          "82: AsyncClient::OngoingRequest*",
          "83: AsyncClientImpl::startRequest(RequestHeaderMapPtr&& request_headers, Callbacks& callbacks,",
          "84:                               const AsyncClient::RequestOptions& options) {",
          "85:   AsyncOngoingRequestImpl* async_request =",
          "86:       new AsyncOngoingRequestImpl(std::move(request_headers), *this, callbacks, options);",
          "87:   return internalStartRequest(async_request);",
          "88: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:       tracing_config_(Tracing::EgressConfig::get()),",
          "87:       route_(std::make_shared<RouteImpl>(parent_, options.timeout, options.hash_policy,",
          "88:                                          options.retry_policy)),",
          "89:       send_xff_(options.send_xff) {",
          "91:   stream_info_.dynamicMetadata().MergeFrom(options.metadata);",
          "92:   stream_info_.setIsShadow(options.is_shadow);",
          "94:   if (options.buffer_body_for_retry) {",
          "96:   }",
          "98:   router_.setDecoderFilterCallbacks(*this);",
          "",
          "[Removed Lines]",
          "95:     buffered_body_ = std::make_unique<Buffer::OwnedImpl>();",
          "",
          "[Added Lines]",
          "106:       account_(options.account_), buffer_limit_(options.buffer_limit_),",
          "112:     buffered_body_ = std::make_unique<Buffer::OwnedImpl>(account_);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "252:   cleanup();",
          "253: }",
          "259:   if (nullptr != options.parent_span_) {",
          "260:     const std::string child_span_name =",
          "261:         options.child_span_name_.empty()",
          "",
          "[Removed Lines]",
          "255: AsyncRequestImpl::AsyncRequestImpl(RequestMessagePtr&& request, AsyncClientImpl& parent,",
          "256:                                    AsyncClient::Callbacks& callbacks,",
          "257:                                    const AsyncClient::RequestOptions& options)",
          "258:     : AsyncStreamImpl(parent, *this, options), request_(std::move(request)), callbacks_(callbacks) {",
          "",
          "[Added Lines]",
          "272: AsyncRequestSharedImpl::AsyncRequestSharedImpl(AsyncClientImpl& parent,",
          "273:                                                AsyncClient::Callbacks& callbacks,",
          "274:                                                const AsyncClient::RequestOptions& options)",
          "275:     : AsyncStreamImpl(parent, *this, options), callbacks_(callbacks) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "285: }",
          "288:   callbacks_.onBeforeFinalizeUpstreamSpan(*child_span_, &response_->headers());",
          "290:   Tracing::HttpTracerUtility::finalizeUpstreamSpan(*child_span_, streamInfo(),",
          "",
          "[Removed Lines]",
          "287: void AsyncRequestImpl::onComplete() {",
          "",
          "[Added Lines]",
          "304: void AsyncOngoingRequestImpl::initialize() {",
          "305:   child_span_->injectContext(*request_headers_, nullptr);",
          "306:   sendHeaders(*request_headers_, false);",
          "307: }",
          "309: void AsyncRequestSharedImpl::onComplete() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "293:   callbacks_.onSuccess(*this, std::move(response_));",
          "294: }",
          "297:   const uint64_t response_code = Http::Utility::getResponseStatus(*headers);",
          "298:   streamInfo().response_code_ = response_code;",
          "299:   response_ = std::make_unique<ResponseMessageImpl>(std::move(headers));",
          "300: }",
          "303:   streamInfo().addBytesReceived(data.length());",
          "304:   response_->body().move(data);",
          "305: }",
          "308:   response_->trailers(std::move(trailers));",
          "309: }",
          "312:   if (!cancelled_) {",
          "",
          "[Removed Lines]",
          "296: void AsyncRequestImpl::onHeaders(ResponseHeaderMapPtr&& headers, bool) {",
          "302: void AsyncRequestImpl::onData(Buffer::Instance& data, bool) {",
          "307: void AsyncRequestImpl::onTrailers(ResponseTrailerMapPtr&& trailers) {",
          "311: void AsyncRequestImpl::onReset() {",
          "",
          "[Added Lines]",
          "318: void AsyncRequestSharedImpl::onHeaders(ResponseHeaderMapPtr&& headers, bool) {",
          "324: void AsyncRequestSharedImpl::onData(Buffer::Instance& data, bool) {",
          "329: void AsyncRequestSharedImpl::onTrailers(ResponseTrailerMapPtr&& trailers) {",
          "333: void AsyncRequestSharedImpl::onReset() {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "328:   }",
          "329: }",
          "332:   cancelled_ = true;",
          "",
          "[Removed Lines]",
          "331: void AsyncRequestImpl::cancel() {",
          "",
          "[Added Lines]",
          "353: void AsyncRequestSharedImpl::cancel() {",
          "",
          "---------------"
        ],
        "source/common/http/async_client_impl.h||source/common/http/async_client_impl.h": [
          "File: source/common/http/async_client_impl.h -> source/common/http/async_client_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include <string>",
          "10: #include <vector>",
          "12: #include \"envoy/common/random_generator.h\"",
          "13: #include \"envoy/common/scope_tracker.h\"",
          "14: #include \"envoy/config/core/v3/base.pb.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include \"envoy/buffer/buffer.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: #include \"envoy/http/async_client.h\"",
          "19: #include \"envoy/http/codec.h\"",
          "20: #include \"envoy/http/context.h\"",
          "21: #include \"envoy/http/header_map.h\"",
          "22: #include \"envoy/http/message.h\"",
          "23: #include \"envoy/router/context.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"envoy/http/filter.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52: } // namespace",
          "54: class AsyncStreamImpl;",
          "57: class AsyncClientImpl final : public AsyncClient {",
          "58: public:",
          "",
          "[Removed Lines]",
          "55: class AsyncRequestImpl;",
          "",
          "[Added Lines]",
          "57: class AsyncRequestSharedImpl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "67:   Request* send(RequestMessagePtr&& request, Callbacks& callbacks,",
          "68:                 const AsyncClient::RequestOptions& options) override;",
          "69:   Stream* start(StreamCallbacks& callbacks, const AsyncClient::StreamOptions& options) override;",
          "70:   Event::Dispatcher& dispatcher() override { return dispatcher_; }",
          "72: private:",
          "73:   Upstream::ClusterInfoConstSharedPtr cluster_;",
          "74:   Router::FilterConfig config_;",
          "75:   Event::Dispatcher& dispatcher_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   OngoingRequest* startRequest(RequestHeaderMapPtr&& request_headers, Callbacks& callbacks,",
          "73:                                const AsyncClient::RequestOptions& options) override;",
          "77:   template <typename T> T* internalStartRequest(T* async_request);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "77:   Singleton::Manager& singleton_manager_;",
          "79:   friend class AsyncStreamImpl;",
          "81: };",
          "88:                         public StreamDecoderFilterCallbacks,",
          "89:                         public Event::DeferredDeletable,",
          "90:                         Logger::Loggable<Logger::Id::http>,",
          "",
          "[Removed Lines]",
          "80:   friend class AsyncRequestImpl;",
          "87: class AsyncStreamImpl : public AsyncClient::Stream,",
          "",
          "[Added Lines]",
          "85:   friend class AsyncRequestSharedImpl;",
          "92: class AsyncStreamImpl : public virtual AsyncClient::Stream,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "93: public:",
          "94:   AsyncStreamImpl(AsyncClientImpl& parent, AsyncClient::StreamCallbacks& callbacks,",
          "95:                   const AsyncClient::StreamOptions& options);",
          "99:   void sendHeaders(RequestHeaderMap& headers, bool end_stream) override;",
          "",
          "[Removed Lines]",
          "96:   ~AsyncStreamImpl() override { router_.onDestroy(); }",
          "",
          "[Added Lines]",
          "101:   ~AsyncStreamImpl() override {",
          "102:     router_.onDestroy();",
          "104:     ENVOY_BUG(high_watermark_calls_ == 0, \"Excess high watermark calls after async stream ended.\");",
          "105:     if (destructor_callback_.has_value()) {",
          "106:       (*destructor_callback_)();",
          "107:     }",
          "108:   }",
          "110:   void setDestructorCallback(AsyncClient::StreamDestructorCallbacks callback) override {",
          "111:     ASSERT(!destructor_callback_);",
          "112:     destructor_callback_.emplace(callback);",
          "113:   }",
          "115:   void removeDestructorCallback() override {",
          "116:     ASSERT(destructor_callback_);",
          "117:     destructor_callback_.reset();",
          "118:   }",
          "120:   void setWatermarkCallbacks(DecoderFilterWatermarkCallbacks& callbacks) override {",
          "121:     ASSERT(!watermark_callbacks_);",
          "122:     watermark_callbacks_.emplace(callbacks);",
          "123:     for (uint32_t i = 0; i < high_watermark_calls_; ++i) {",
          "124:       watermark_callbacks_->get().onDecoderFilterAboveWriteBufferHighWatermark();",
          "125:     }",
          "126:   }",
          "128:   void removeWatermarkCallbacks() override {",
          "129:     ASSERT(watermark_callbacks_);",
          "130:     for (uint32_t i = 0; i < high_watermark_calls_; ++i) {",
          "131:       watermark_callbacks_->get().onDecoderFilterBelowWriteBufferLowWatermark();",
          "132:     }",
          "133:     watermark_callbacks_.reset();",
          "134:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "108:   StreamInfo::StreamInfoImpl& streamInfo() override { return stream_info_; }",
          "110:   AsyncClientImpl& parent_;",
          "112: private:",
          "113:   struct NullHedgePolicy : public Router::HedgePolicy {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:   absl::optional<AsyncClient::StreamDestructorCallbacks> destructor_callback_;",
          "152:   absl::optional<std::reference_wrapper<DecoderFilterWatermarkCallbacks>> watermark_callbacks_;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "360:   Upstream::ClusterInfoConstSharedPtr clusterInfo() override { return parent_.cluster_; }",
          "361:   uint64_t streamId() const override { return stream_id_; }",
          "364:   Tracing::Span& activeSpan() override { return active_span_; }",
          "365:   OptRef<const Tracing::Config> tracingConfig() const override {",
          "366:     return makeOptRef<const Tracing::Config>(tracing_config_);",
          "",
          "[Removed Lines]",
          "363:   Buffer::BufferMemoryAccountSharedPtr account() const override { return nullptr; }",
          "",
          "[Added Lines]",
          "405:   Buffer::BufferMemoryAccountSharedPtr account() const override { return account_; }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "410:   void encodeTrailers(ResponseTrailerMapPtr&& trailers) override;",
          "411:   ResponseTrailerMapOptRef responseTrailers() const override { return {}; }",
          "412:   void encodeMetadata(MetadataMapPtr&&) override {}",
          "414:   void onDecoderFilterBelowWriteBufferLowWatermark() override {",
          "415:     ASSERT(high_watermark_calls_ != 0);",
          "416:     --high_watermark_calls_;",
          "417:   }",
          "418:   void addDownstreamWatermarkCallbacks(DownstreamWatermarkCallbacks&) override {}",
          "419:   void removeDownstreamWatermarkCallbacks(DownstreamWatermarkCallbacks&) override {}",
          "422:   bool recreateStream(const ResponseHeaderMap*) override { return false; }",
          "423:   const ScopeTrackedObject& scope() override { return *this; }",
          "424:   void restoreContextOnContinue(ScopeTrackedObjectStack& tracked_object_stack) override {",
          "",
          "[Removed Lines]",
          "413:   void onDecoderFilterAboveWriteBufferHighWatermark() override { ++high_watermark_calls_; }",
          "420:   void setDecoderBufferLimit(uint32_t) override {}",
          "421:   uint32_t decoderBufferLimit() override { return 0; }",
          "",
          "[Added Lines]",
          "455:   void onDecoderFilterAboveWriteBufferHighWatermark() override {",
          "456:     ++high_watermark_calls_;",
          "457:     if (watermark_callbacks_.has_value()) {",
          "458:       watermark_callbacks_->get().onDecoderFilterAboveWriteBufferHighWatermark();",
          "459:     }",
          "460:   }",
          "464:     if (watermark_callbacks_.has_value()) {",
          "465:       watermark_callbacks_->get().onDecoderFilterBelowWriteBufferLowWatermark();",
          "466:     }",
          "470:   void setDecoderBufferLimit(uint32_t) override {",
          "471:     IS_ENVOY_BUG(\"decoder buffer limits should not be overridden on async streams.\");",
          "472:   }",
          "473:   uint32_t decoderBufferLimit() override { return buffer_limit_.value_or(0); }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "456:   bool local_closed_{};",
          "457:   bool remote_closed_{};",
          "458:   Buffer::InstancePtr buffered_body_;",
          "459:   bool encoded_response_headers_{};",
          "460:   bool is_grpc_request_{};",
          "461:   bool is_head_request_{false};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:   Buffer::BufferMemoryAccountSharedPtr account_{nullptr};",
          "512:   absl::optional<uint32_t> buffer_limit_{absl::nullopt};",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "465:   friend class AsyncClientImplUnitTest;",
          "466: };",
          "471: public:",
          "478: private:",
          "479:   void initialize();",
          "489:   void addDecodedData(Buffer::Instance&, bool) override {",
          "",
          "[Removed Lines]",
          "468: class AsyncRequestImpl final : public AsyncClient::Request,",
          "469:                                AsyncStreamImpl,",
          "470:                                AsyncClient::StreamCallbacks {",
          "472:   AsyncRequestImpl(RequestMessagePtr&& request, AsyncClientImpl& parent,",
          "473:                    AsyncClient::Callbacks& callbacks, const AsyncClient::RequestOptions& options);",
          "476:   void cancel() override;",
          "482:   void onHeaders(ResponseHeaderMapPtr&& headers, bool end_stream) override;",
          "483:   void onData(Buffer::Instance& data, bool end_stream) override;",
          "484:   void onTrailers(ResponseTrailerMapPtr&& trailers) override;",
          "485:   void onComplete() override;",
          "486:   void onReset() override;",
          "",
          "[Added Lines]",
          "522: class AsyncRequestSharedImpl : public virtual AsyncClient::Request,",
          "523:                                protected AsyncStreamImpl,",
          "524:                                protected AsyncClient::StreamCallbacks {",
          "526:   void cancel() final;",
          "528: protected:",
          "529:   AsyncRequestSharedImpl(AsyncClientImpl& parent, AsyncClient::Callbacks& callbacks,",
          "530:                          const AsyncClient::RequestOptions& options);",
          "531:   void onHeaders(ResponseHeaderMapPtr&& headers, bool end_stream) final;",
          "532:   void onData(Buffer::Instance& data, bool end_stream) final;",
          "533:   void onTrailers(ResponseTrailerMapPtr&& trailers) final;",
          "534:   void onComplete() final;",
          "535:   void onReset() final;",
          "537:   AsyncClient::Callbacks& callbacks_;",
          "538:   Tracing::SpanPtr child_span_;",
          "539:   std::unique_ptr<ResponseMessageImpl> response_;",
          "540:   bool cancelled_{};",
          "541: };",
          "543: class AsyncOngoingRequestImpl final : public AsyncClient::OngoingRequest,",
          "544:                                       public AsyncRequestSharedImpl {",
          "545: public:",
          "546:   AsyncOngoingRequestImpl(RequestHeaderMapPtr&& request_headers, AsyncClientImpl& parent,",
          "547:                           AsyncClient::Callbacks& callbacks,",
          "548:                           const AsyncClient::RequestOptions& options)",
          "549:       : AsyncRequestSharedImpl(parent, callbacks, options),",
          "550:         request_headers_(std::move(request_headers)) {",
          "551:     ASSERT(request_headers_);",
          "552:   }",
          "553:   void captureAndSendTrailers(RequestTrailerMapPtr&& trailers) override {",
          "554:     request_trailers_ = std::move(trailers);",
          "555:     sendTrailers(*request_trailers_);",
          "556:   }",
          "561:   RequestHeaderMapPtr request_headers_;",
          "562:   RequestTrailerMapPtr request_trailers_;",
          "564:   friend class AsyncClientImpl;",
          "565: };",
          "567: class AsyncRequestImpl final : public AsyncRequestSharedImpl {",
          "568: public:",
          "569:   AsyncRequestImpl(RequestMessagePtr&& request, AsyncClientImpl& parent,",
          "570:                    AsyncClient::Callbacks& callbacks, const AsyncClient::RequestOptions& options)",
          "571:       : AsyncRequestSharedImpl(parent, callbacks, options), request_(std::move(request)) {}",
          "573: private:",
          "574:   void initialize();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "494:   void modifyDecodingBuffer(std::function<void(Buffer::Instance&)>) override {}",
          "496:   RequestMessagePtr request_;",
          "502:   friend class AsyncClientImpl;",
          "503: };",
          "",
          "[Removed Lines]",
          "497:   AsyncClient::Callbacks& callbacks_;",
          "498:   std::unique_ptr<ResponseMessageImpl> response_;",
          "499:   bool cancelled_{};",
          "500:   Tracing::SpanPtr child_span_;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"source/common/router/router.h\"",
          "3: #include <chrono>",
          "4: #include <cstdint>",
          "5: #include <functional>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #include <algorithm>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:   ASSERT(upstream_requests_.empty());",
          "284:   ASSERT(!retry_state_);",
          "285: }",
          "287: const FilterUtility::StrictHeaderChecker::HeaderCheckResult",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:   for (auto* shadow_stream : shadow_streams_) {",
          "289:     shadow_stream->removeDestructorCallback();",
          "290:     shadow_stream->removeWatermarkCallbacks();",
          "291:     shadow_stream->cancel();",
          "292:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "699:   LinkedList::moveIntoList(std::move(upstream_request), upstream_requests_);",
          "700:   upstream_requests_.front()->acceptHeadersFromRouter(end_stream);",
          "701:   if (end_stream) {",
          "702:     onRequestComplete();",
          "703:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "709:   if (streaming_shadows_) {",
          "711:     for (const auto& shadow_policy_wrapper : active_shadow_policies_) {",
          "712:       const auto& shadow_policy = shadow_policy_wrapper.get();",
          "713:       const absl::optional<absl::string_view> shadow_cluster_name =",
          "714:           getShadowCluster(shadow_policy, *downstream_headers_);",
          "715:       if (!shadow_cluster_name.has_value()) {",
          "716:         continue;",
          "717:       }",
          "718:       auto shadow_headers = Http::createHeaderMap<Http::RequestHeaderMapImpl>(*shadow_headers_);",
          "719:       auto options =",
          "720:           Http::AsyncClient::RequestOptions()",
          "721:               .setTimeout(timeout_.global_timeout_)",
          "722:               .setParentSpan(callbacks_->activeSpan())",
          "723:               .setChildSpanName(\"mirror\")",
          "724:               .setSampled(shadow_policy.traceSampled())",
          "725:               .setIsShadow(true)",
          "726:               .setBufferAccount(callbacks_->account())",
          "729:               .setBufferLimit(1 > retry_shadow_buffer_limit_ ? 1 : retry_shadow_buffer_limit_);",
          "730:       if (Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.closer_shadow_behavior\")) {",
          "731:         options.setFilterConfig(config_);",
          "732:       }",
          "733:       if (end_stream) {",
          "736:         Http::RequestMessagePtr request(new Http::RequestMessageImpl(",
          "737:             Http::createHeaderMap<Http::RequestHeaderMapImpl>(*shadow_headers_)));",
          "738:         config_.shadowWriter().shadow(std::string(shadow_cluster_name.value()), std::move(request),",
          "739:                                       options);",
          "740:       } else {",
          "741:         Http::AsyncClient::OngoingRequest* shadow_stream = config_.shadowWriter().streamingShadow(",
          "742:             std::string(shadow_cluster_name.value()), std::move(shadow_headers), options);",
          "743:         if (shadow_stream != nullptr) {",
          "744:           shadow_streams_.insert(shadow_stream);",
          "745:           shadow_stream->setDestructorCallback(",
          "746:               [this, shadow_stream]() { shadow_streams_.erase(shadow_stream); });",
          "747:           shadow_stream->setWatermarkCallbacks(*callbacks_);",
          "748:         }",
          "749:       }",
          "750:     }",
          "751:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "751:   ASSERT(upstream_requests_.size() <= 1);",
          "754:                    (route_entry_ && route_entry_->internalRedirectPolicy().enabled());",
          "755:   if (buffering &&",
          "756:       getLength(callbacks_->decodingBuffer()) + data.length() > retry_shadow_buffer_limit_) {",
          "",
          "[Removed Lines]",
          "753:   bool buffering = (retry_state_ && retry_state_->enabled()) || !active_shadow_policies_.empty() ||",
          "",
          "[Added Lines]",
          "804:   bool buffering = (retry_state_ && retry_state_->enabled()) ||",
          "805:                    (!active_shadow_policies_.empty() && !streaming_shadows_) ||",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "782:   ASSERT(buffering || !upstream_requests_.empty());",
          "784:   if (buffering) {",
          "787:     if (!upstream_requests_.empty()) {",
          "788:       Buffer::OwnedImpl copy(data);",
          "789:       upstream_requests_.front()->acceptDataFromRouter(copy, end_stream);",
          "790:     }",
          "797:     callbacks_->addDecodedData(data, true);",
          "798:   } else {",
          "799:     upstream_requests_.front()->acceptDataFromRouter(data, end_stream);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "836:   for (auto* shadow_stream : shadow_streams_) {",
          "837:     if (end_stream) {",
          "838:       shadow_stream->removeDestructorCallback();",
          "839:       shadow_stream->removeWatermarkCallbacks();",
          "840:     }",
          "841:     Buffer::OwnedImpl copy(data);",
          "842:     shadow_stream->sendData(copy, end_stream);",
          "843:   }",
          "844:   if (end_stream) {",
          "845:     shadow_streams_.clear();",
          "846:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "823:   if (!upstream_requests_.empty()) {",
          "824:     upstream_requests_.front()->acceptTrailersFromRouter(trailers);",
          "825:   }",
          "826:   onRequestComplete();",
          "827:   return Http::FilterTrailersStatus::StopIteration;",
          "828: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "888:   for (auto* shadow_stream : shadow_streams_) {",
          "889:     shadow_stream->removeDestructorCallback();",
          "890:     shadow_stream->removeWatermarkCallbacks();",
          "891:     shadow_stream->captureAndSendTrailers(",
          "892:         Http::createHeaderMap<Http::RequestTrailerMapImpl>(*shadow_trailers_));",
          "893:   }",
          "894:   shadow_streams_.clear();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "881:   for (const auto& shadow_policy_wrapper : active_shadow_policies_) {",
          "882:     const auto& shadow_policy = shadow_policy_wrapper.get();",
          "885:         getShadowCluster(shadow_policy, *downstream_headers_);",
          "889:       continue;",
          "890:     }",
          "",
          "[Removed Lines]",
          "884:     const absl::optional<absl::string_view> cluster_name =",
          "888:     if (!cluster_name.has_value()) {",
          "",
          "[Added Lines]",
          "954:     const absl::optional<absl::string_view> shadow_cluster_name =",
          "958:     if (!shadow_cluster_name.has_value()) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "907:     if (Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.closer_shadow_behavior\")) {",
          "908:       options.setFilterConfig(config_);",
          "909:     }",
          "911:   }",
          "912: }",
          "",
          "[Removed Lines]",
          "910:     config_.shadowWriter().shadow(std::string(cluster_name.value()), std::move(request), options);",
          "",
          "[Added Lines]",
          "980:     config_.shadowWriter().shadow(std::string(shadow_cluster_name.value()), std::move(request),",
          "981:                                   options);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "922:   if (!upstream_requests_.empty()) {",
          "927:     if (timeout_.global_timeout_.count() > 0) {",
          "928:       response_timeout_ = dispatcher.createTimer([this]() -> void { onResponseTimeout(); });",
          "",
          "[Removed Lines]",
          "925:     maybeDoShadowing();",
          "",
          "[Added Lines]",
          "996:     if (!streaming_shadows_) {",
          "997:       maybeDoShadowing();",
          "998:     }",
          "",
          "---------------"
        ],
        "source/common/router/router.h||source/common/router/router.h": [
          "File: source/common/router/router.h -> source/common/router/router.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:   Filter(FilterConfig& config, FilterStats& stats)",
          "367:       : config_(config), stats_(stats), downstream_1xx_headers_encoded_(false),",
          "368:         downstream_response_started_(false), downstream_end_stream_(false), is_retry_(false),",
          "371:   ~Filter() override;",
          "",
          "[Removed Lines]",
          "369:         request_buffer_overflowed_(false) {}",
          "",
          "[Added Lines]",
          "369:         request_buffer_overflowed_(false), streaming_shadows_(Runtime::runtimeFeatureEnabled(",
          "370:                                                \"envoy.reloadable_features.streaming_shadow\")) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661:   Network::TransportSocketOptionsConstSharedPtr transport_socket_options_;",
          "662:   Network::Socket::OptionsSharedPtr upstream_options_;",
          "663: };",
          "665: class ProdFilter : public Filter {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "665:   absl::flat_hash_set<Http::AsyncClient::OngoingRequest*> shadow_streams_;",
          "666:   const bool streaming_shadows_;",
          "",
          "---------------"
        ],
        "source/common/router/shadow_writer_impl.cc||source/common/router/shadow_writer_impl.cc": [
          "File: source/common/router/shadow_writer_impl.cc -> source/common/router/shadow_writer_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: namespace Envoy {",
          "12: namespace Router {",
          "14: void ShadowWriterImpl::shadow(const std::string& cluster, Http::RequestMessagePtr&& request,",
          "15:                               const Http::AsyncClient::RequestOptions& options) {",
          "19:   const auto thread_local_cluster = cm_.getThreadLocalCluster(cluster);",
          "20:   if (thread_local_cluster == nullptr) {",
          "21:     ENVOY_LOG(debug, \"shadow cluster '{}' does not exist\", cluster);",
          "23:   }",
          "39: }",
          "41: } // namespace Router",
          "",
          "[Removed Lines]",
          "22:     return;",
          "25:   ASSERT(!request->headers().getHostValue().empty());",
          "27:   auto parts = StringUtil::splitToken(request->headers().getHostValue(), \":\");",
          "28:   ASSERT(!parts.empty() && parts.size() <= 2);",
          "29:   request->headers().setHost(parts.size() == 2",
          "30:                                  ? absl::StrJoin(parts, \"-shadow:\")",
          "31:                                  : absl::StrCat(request->headers().getHostValue(), \"-shadow\"));",
          "32:   const auto& shadow_options = options.is_shadow ? options : [options] {",
          "33:     Http::AsyncClient::RequestOptions actual_options(options);",
          "34:     actual_options.setIsShadow(true);",
          "35:     return actual_options;",
          "36:   }();",
          "38:   thread_local_cluster->httpAsyncClient().send(std::move(request), *this, shadow_options);",
          "",
          "[Added Lines]",
          "14: namespace {",
          "16: std::string shadowAppendedHost(absl::string_view host) {",
          "17:   ASSERT(!host.empty());",
          "20:   auto parts = StringUtil::splitToken(host, \":\");",
          "21:   ASSERT(!parts.empty() && parts.size() <= 2);",
          "22:   return parts.size() == 2 ? absl::StrJoin(parts, \"-shadow:\") : absl::StrCat(host, \"-shadow\");",
          "23: }",
          "25: } // namespace",
          "29:   const auto thread_local_cluster =",
          "30:       getClusterAndPreprocessHeadersAndOptions(cluster, request->headers(), options);",
          "31:   if (thread_local_cluster == nullptr) {",
          "32:     return;",
          "33:   }",
          "35:   thread_local_cluster->httpAsyncClient().send(std::move(request), *this, options);",
          "36: }",
          "38: Http::AsyncClient::OngoingRequest*",
          "39: ShadowWriterImpl::streamingShadow(const std::string& cluster, Http::RequestHeaderMapPtr&& headers,",
          "40:                                   const Http::AsyncClient::RequestOptions& options) {",
          "41:   const auto thread_local_cluster =",
          "42:       getClusterAndPreprocessHeadersAndOptions(cluster, *headers, options);",
          "43:   if (thread_local_cluster == nullptr) {",
          "44:     return nullptr;",
          "45:   }",
          "46:   return thread_local_cluster->httpAsyncClient().startRequest(std::move(headers), *this, options);",
          "47: }",
          "49: Upstream::ThreadLocalCluster* ShadowWriterImpl::getClusterAndPreprocessHeadersAndOptions(",
          "50:     absl::string_view cluster, Http::RequestHeaderMap& headers,",
          "51:     const Http::AsyncClient::RequestOptions& options) {",
          "58:     return nullptr;",
          "61:   headers.setHost(shadowAppendedHost(headers.getHostValue()));",
          "63:   const_cast<Http::AsyncClient::RequestOptions&>(options).setIsShadow(true);",
          "64:   return thread_local_cluster;",
          "",
          "---------------"
        ],
        "source/common/router/shadow_writer_impl.h||source/common/router/shadow_writer_impl.h": [
          "File: source/common/router/shadow_writer_impl.h -> source/common/router/shadow_writer_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   void shadow(const std::string& cluster, Http::RequestMessagePtr&& request,",
          "24:               const Http::AsyncClient::RequestOptions& options) override;",
          "27:   void onSuccess(const Http::AsyncClient::Request&, Http::ResponseMessagePtr&&) override {}",
          "28:   void onFailure(const Http::AsyncClient::Request&, Http::AsyncClient::FailureReason) override {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:   Http::AsyncClient::OngoingRequest*",
          "27:   streamingShadow(const std::string& cluster, Http::RequestHeaderMapPtr&& headers,",
          "28:                   const Http::AsyncClient::RequestOptions& options) override;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:                                     const Http::ResponseHeaderMap*) override {}",
          "32: private:",
          "33:   Upstream::ClusterManager& cm_;",
          "34: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:   Upstream::ThreadLocalCluster*",
          "38:   getClusterAndPreprocessHeadersAndOptions(absl::string_view cluster,",
          "39:                                            Http::RequestHeaderMap& headers,",
          "40:                                            const Http::AsyncClient::RequestOptions& options);",
          "",
          "---------------"
        ],
        "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc": [
          "File: source/common/runtime/runtime_features.cc -> source/common/runtime/runtime_features.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: FALSE_RUNTIME_GUARD(envoy_reloadable_features_test_feature_false);",
          "81: FALSE_RUNTIME_GUARD(envoy_reloadable_features_unified_mux);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: FALSE_RUNTIME_GUARD(envoy_reloadable_features_streaming_shadow);",
          "",
          "---------------"
        ],
        "test/common/buffer/buffer_test.cc||test/common/buffer/buffer_test.cc": [
          "File: test/common/buffer/buffer_test.cc -> test/common/buffer/buffer_test.cc"
        ],
        "test/common/http/async_client_impl_test.cc||test/common/http/async_client_impl_test.cc": [
          "File: test/common/http/async_client_impl_test.cc -> test/common/http/async_client_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: using testing::NiceMock;",
          "37: using testing::Return;",
          "38: using testing::ReturnRef;",
          "40: namespace Envoy {",
          "41: namespace Http {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: using testing::StrictMock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:   TestRequestHeaderMapImpl headers_{};",
          "82:   RequestMessagePtr message_{new RequestMessageImpl()};",
          "83:   Stats::MockIsolatedStatsStore stats_store_;",
          "86:   NiceMock<Upstream::MockClusterManager> cm_;",
          "87:   NiceMock<MockRequestEncoder> stream_encoder_;",
          "88:   ResponseDecoder* response_decoder_{};",
          "",
          "[Removed Lines]",
          "84:   MockAsyncClientCallbacks callbacks_;",
          "85:   MockAsyncClientStreamCallbacks stream_callbacks_;",
          "",
          "[Added Lines]",
          "85:   NiceMock<MockAsyncClientCallbacks> callbacks_;",
          "86:   NiceMock<MockAsyncClientStreamCallbacks> stream_callbacks_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:                      .value());",
          "204: }",
          "206: TEST_F(AsyncClientImplTracingTest, Basic) {",
          "207:   Tracing::MockSpan* child_span{new Tracing::MockSpan()};",
          "208:   message_->body().add(\"test body\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: TEST_F(AsyncClientImplTest, BasicOngoingRequest) {",
          "208:   auto headers = std::make_unique<TestRequestHeaderMapImpl>();",
          "209:   HttpTestUtility::addDefaultHeaders(*headers);",
          "210:   TestRequestHeaderMapImpl headers_copy = *headers;",
          "212:   Buffer::OwnedImpl data(\"test data\");",
          "213:   const Buffer::OwnedImpl data_copy(data.toString());",
          "215:   auto trailers = std::make_unique<TestRequestTrailerMapImpl>();",
          "216:   trailers->addCopy(\"some\", \"trailer\");",
          "217:   const TestRequestTrailerMapImpl trailers_copy = *trailers;",
          "219:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "220:       .WillOnce(Invoke(",
          "221:           [&](ResponseDecoder& decoder, ConnectionPool::Callbacks& callbacks,",
          "222:               const ConnectionPool::Instance::StreamOptions&) -> ConnectionPool::Cancellable* {",
          "223:             callbacks.onPoolReady(stream_encoder_, cm_.thread_local_cluster_.conn_pool_.host_,",
          "224:                                   stream_info_, {});",
          "225:             response_decoder_ = &decoder;",
          "226:             return nullptr;",
          "227:           }));",
          "229:   headers_copy.addCopy(\"x-envoy-internal\", \"true\");",
          "230:   headers_copy.addCopy(\"x-forwarded-for\", \"127.0.0.1\");",
          "232:   EXPECT_CALL(stream_encoder_, encodeHeaders(HeaderMapEqualRef(&headers_copy), false));",
          "233:   EXPECT_CALL(stream_encoder_, encodeData(BufferEqual(&data_copy), false));",
          "234:   EXPECT_CALL(stream_encoder_, encodeTrailers(HeaderMapEqualRef(&trailers_copy)));",
          "236:   AsyncClient::OngoingRequest* request =",
          "237:       client_.startRequest(std::move(headers), callbacks_, AsyncClient::RequestOptions());",
          "238:   EXPECT_NE(request, nullptr);",
          "240:   request->sendData(data, false);",
          "241:   request->captureAndSendTrailers(std::move(trailers));",
          "243:   expectSuccess(request, 200);",
          "245:   ResponseHeaderMapPtr response_headers(new TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "246:   response_decoder_->decodeHeaders(std::move(response_headers), false);",
          "247:   Buffer::OwnedImpl response_data(\"test data\");",
          "248:   response_decoder_->decodeData(response_data, true);",
          "250:   EXPECT_EQ(",
          "251:       1UL,",
          "252:       cm_.thread_local_cluster_.cluster_.info_->stats_store_.counter(\"upstream_rq_200\").value());",
          "253:   EXPECT_EQ(1UL, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "254:                      .counter(\"internal.upstream_rq_200\")",
          "255:                      .value());",
          "256: }",
          "258: TEST_F(AsyncClientImplTest, OngoingRequestWithWatermarking) {",
          "259:   auto headers = std::make_unique<TestRequestHeaderMapImpl>();",
          "260:   HttpTestUtility::addDefaultHeaders(*headers);",
          "261:   TestRequestHeaderMapImpl headers_copy = *headers;",
          "262:   headers_copy.addCopy(\"x-envoy-internal\", \"true\");",
          "263:   headers_copy.addCopy(\"x-forwarded-for\", \"127.0.0.1\");",
          "265:   Buffer::OwnedImpl data(\"test data\");",
          "266:   const Buffer::OwnedImpl data_copy(data.toString());",
          "268:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "269:       .WillOnce(Invoke(",
          "270:           [&](ResponseDecoder& decoder, ConnectionPool::Callbacks& callbacks,",
          "271:               const ConnectionPool::Instance::StreamOptions&) -> ConnectionPool::Cancellable* {",
          "272:             callbacks.onPoolReady(stream_encoder_, cm_.thread_local_cluster_.conn_pool_.host_,",
          "273:                                   stream_info_, {});",
          "275:             dynamic_cast<MockStream&>(stream_encoder_.getStream()).runHighWatermarkCallbacks();",
          "276:             response_decoder_ = &decoder;",
          "277:             return nullptr;",
          "278:           }));",
          "280:   EXPECT_CALL(stream_encoder_, encodeHeaders(HeaderMapEqualRef(&headers_copy), false));",
          "282:   auto* request =",
          "283:       client_.startRequest(std::move(headers), callbacks_, AsyncClient::RequestOptions());",
          "284:   EXPECT_NE(request, nullptr);",
          "285:   StrictMock<MockStreamDecoderFilterCallbacks> watermark_callbacks;",
          "287:   EXPECT_CALL(watermark_callbacks, onDecoderFilterAboveWriteBufferHighWatermark());",
          "288:   request->setWatermarkCallbacks(watermark_callbacks);",
          "291:   EXPECT_CALL(watermark_callbacks, onDecoderFilterBelowWriteBufferLowWatermark());",
          "292:   dynamic_cast<MockStream&>(stream_encoder_.getStream()).runLowWatermarkCallbacks();",
          "294:   EXPECT_CALL(stream_encoder_, encodeData(BufferEqual(&data_copy), false));",
          "295:   request->sendData(data, false);",
          "297:   EXPECT_CALL(watermark_callbacks, onDecoderFilterAboveWriteBufferHighWatermark());",
          "298:   dynamic_cast<MockStream&>(stream_encoder_.getStream()).runHighWatermarkCallbacks();",
          "301:   EXPECT_CALL(watermark_callbacks, onDecoderFilterBelowWriteBufferLowWatermark());",
          "302:   request->removeWatermarkCallbacks();",
          "304:   EXPECT_CALL(watermark_callbacks, onDecoderFilterAboveWriteBufferHighWatermark());",
          "305:   request->setWatermarkCallbacks(watermark_callbacks);",
          "307:   EXPECT_CALL(stream_encoder_, encodeData(BufferStringEqual(\"\"), true));",
          "308:   Buffer::OwnedImpl empty;",
          "309:   request->sendData(empty, true);",
          "311:   ResponseHeaderMapPtr response_headers(new TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "313:   EXPECT_CALL(watermark_callbacks, onDecoderFilterBelowWriteBufferLowWatermark());",
          "314:   response_decoder_->decodeHeaders(std::move(response_headers), true);",
          "315: }",
          "317: TEST_F(AsyncClientImplTest, OngoingRequestWithWatermarkingAndReset) {",
          "318:   auto headers = std::make_unique<TestRequestHeaderMapImpl>();",
          "319:   HttpTestUtility::addDefaultHeaders(*headers);",
          "320:   TestRequestHeaderMapImpl headers_copy = *headers;",
          "321:   headers_copy.addCopy(\"x-envoy-internal\", \"true\");",
          "322:   headers_copy.addCopy(\"x-forwarded-for\", \"127.0.0.1\");",
          "324:   Buffer::OwnedImpl data(\"test data\");",
          "325:   const Buffer::OwnedImpl data_copy(data.toString());",
          "327:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "328:       .WillOnce(Invoke(",
          "329:           [&](ResponseDecoder& decoder, ConnectionPool::Callbacks& callbacks,",
          "330:               const ConnectionPool::Instance::StreamOptions&) -> ConnectionPool::Cancellable* {",
          "331:             callbacks.onPoolReady(stream_encoder_, cm_.thread_local_cluster_.conn_pool_.host_,",
          "332:                                   stream_info_, {});",
          "333:             response_decoder_ = &decoder;",
          "334:             return nullptr;",
          "335:           }));",
          "337:   EXPECT_CALL(stream_encoder_, encodeHeaders(HeaderMapEqualRef(&headers_copy), false));",
          "339:   auto* request =",
          "340:       client_.startRequest(std::move(headers), callbacks_, AsyncClient::RequestOptions());",
          "341:   EXPECT_NE(request, nullptr);",
          "343:   StrictMock<MockStreamDecoderFilterCallbacks> watermark_callbacks;",
          "344:   request->setWatermarkCallbacks(watermark_callbacks);",
          "346:   EXPECT_CALL(stream_encoder_, encodeData(BufferEqual(&data_copy), false));",
          "347:   request->sendData(data, false);",
          "349:   EXPECT_CALL(watermark_callbacks, onDecoderFilterAboveWriteBufferHighWatermark());",
          "350:   dynamic_cast<MockStream&>(stream_encoder_.getStream()).runHighWatermarkCallbacks();",
          "353:   EXPECT_CALL(watermark_callbacks, onDecoderFilterBelowWriteBufferLowWatermark());",
          "354:   expectSuccess(request, 503);",
          "355:   stream_encoder_.getStream().resetStream(StreamResetReason::RemoteReset);",
          "356: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1120:   stream->sendData(*body, false);",
          "1122:   Http::StreamDecoderFilterCallbacks* filter_callbacks =",
          "1124:   filter_callbacks->encodeHeaders(",
          "1125:       ResponseHeaderMapPtr(new TestResponseHeaderMapImpl{{\":status\", \"200\"}}), false, \"details\");",
          "1126:   dispatcher_.clearDeferredDeleteList();",
          "",
          "[Removed Lines]",
          "1123:       static_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "[Added Lines]",
          "1275:       dynamic_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1661:   AsyncClient::Stream* stream = client_.start(stream_callbacks_, AsyncClient::StreamOptions());",
          "1662:   stream->sendHeaders(headers_, false);",
          "1663:   Http::StreamDecoderFilterCallbacks* filter_callbacks =",
          "1665:   filter_callbacks->onDecoderFilterAboveWriteBufferHighWatermark();",
          "1666:   EXPECT_TRUE(stream->isAboveWriteBufferHighWatermark());",
          "1667:   filter_callbacks->onDecoderFilterAboveWriteBufferHighWatermark();",
          "",
          "[Removed Lines]",
          "1664:       static_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "[Added Lines]",
          "1816:       dynamic_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1677:   AsyncClient::Stream* stream = client_.start(stream_callbacks_, AsyncClient::StreamOptions());",
          "1678:   stream->sendHeaders(headers_, false);",
          "1679:   Http::StreamDecoderFilterCallbacks* filter_callbacks =",
          "1681:   auto route = filter_callbacks->route();",
          "1682:   ASSERT_NE(nullptr, route);",
          "1683:   auto route_entry = route->routeEntry();",
          "",
          "[Removed Lines]",
          "1680:       static_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "[Added Lines]",
          "1832:       dynamic_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1698: TEST_F(AsyncClientImplTest, DumpState) {",
          "1699:   AsyncClient::Stream* stream = client_.start(stream_callbacks_, AsyncClient::StreamOptions());",
          "1700:   Http::StreamDecoderFilterCallbacks* filter_callbacks =",
          "1703:   std::stringstream out;",
          "1704:   filter_callbacks->scope().dumpState(out);",
          "",
          "[Removed Lines]",
          "1701:       static_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "[Added Lines]",
          "1853:       dynamic_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "---------------"
        ],
        "test/common/router/router_2_test.cc||test/common/router/router_2_test.cc": [
          "File: test/common/router/router_2_test.cc -> test/common/router/router_2_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   Http::TestRequestHeaderMapImpl headers;",
          "31:   HttpTestUtility::addDefaultHeaders(headers);",
          "32:   EXPECT_CALL(callbacks_.route_->route_entry_, finalizeRequestHeaders(_, _, false));",
          "34:   EXPECT_FALSE(headers.has(\"x-envoy-expected-rq-timeout-ms\"));",
          "37:   EXPECT_CALL(cancellable_, cancel(_));",
          "39:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "40:   EXPECT_EQ(0U,",
          "41:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "33:   router_.decodeHeaders(headers, true);",
          "38:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "33:   router_->decodeHeaders(headers, true);",
          "38:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   Http::TestRequestHeaderMapImpl headers;",
          "56:   HttpTestUtility::addDefaultHeaders(headers);",
          "58: }",
          "",
          "[Removed Lines]",
          "57:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "57:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:   Http::TestRequestHeaderMapImpl headers;",
          "72:   HttpTestUtility::addDefaultHeaders(headers);",
          "74:   EXPECT_EQ(1U,",
          "75:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "73:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "73:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:   Http::TestRequestHeaderMapImpl headers;",
          "104:   HttpTestUtility::addDefaultHeaders(headers);",
          "106: }",
          "108: class WatermarkTest : public RouterTestBase {",
          "",
          "[Removed Lines]",
          "105:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "105:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:               return nullptr;",
          "136:             }));",
          "137:     HttpTestUtility::addDefaultHeaders(headers_);",
          "139:     if (pool_ready) {",
          "140:       EXPECT_EQ(",
          "141:           1U, callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "138:     router_.decodeHeaders(headers_, header_only_request);",
          "",
          "[Added Lines]",
          "138:     router_->decodeHeaders(headers_, header_only_request);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "201: TEST_F(WatermarkTest, FilterWatermarks) {",
          "202:   EXPECT_CALL(callbacks_, decoderBufferLimit()).Times(AtLeast(3)).WillRepeatedly(Return(10));",
          "205:   sendRequest(false, false);",
          "208:   Buffer::OwnedImpl data(\"1234567890\");",
          "210:   EXPECT_EQ(0u, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "211:                     .counter(\"upstream_flow_control_backed_up_total\")",
          "212:                     .value());",
          "",
          "[Removed Lines]",
          "203:   router_.setDecoderFilterCallbacks(callbacks_);",
          "209:   router_.decodeData(data, false);",
          "",
          "[Added Lines]",
          "203:   router_->setDecoderFilterCallbacks(callbacks_);",
          "209:   router_->decodeData(data, false);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "216:   Buffer::OwnedImpl last_byte(\"!\");",
          "218:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "219:                     .counter(\"upstream_flow_control_backed_up_total\")",
          "220:                     .value());",
          "",
          "[Removed Lines]",
          "217:   router_.decodeData(last_byte, true);",
          "",
          "[Added Lines]",
          "217:   router_->decodeData(last_byte, true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "238: TEST_F(WatermarkTest, FilterWatermarksUnwound) {",
          "239:   num_add_callbacks_ = 0;",
          "240:   EXPECT_CALL(callbacks_, decoderBufferLimit()).Times(AtLeast(3)).WillRepeatedly(Return(10));",
          "243:   sendRequest(false, false);",
          "246:   Buffer::OwnedImpl data(\"1234567890!\");",
          "248:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "249:                     .counter(\"upstream_flow_control_backed_up_total\")",
          "250:                     .value());",
          "",
          "[Removed Lines]",
          "241:   router_.setDecoderFilterCallbacks(callbacks_);",
          "247:   router_.decodeData(data, false);",
          "",
          "[Added Lines]",
          "241:   router_->setDecoderFilterCallbacks(callbacks_);",
          "247:   router_->decodeData(data, false);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "262: TEST_F(WatermarkTest, RetryRequestNotComplete) {",
          "263:   EXPECT_CALL(callbacks_, decoderBufferLimit()).Times(AtLeast(2)).WillRepeatedly(Return(10));",
          "265:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "266:   Http::ResponseDecoder* response_decoder = nullptr;",
          "267:   expectNewStreamWithImmediateEncoder(encoder1, &response_decoder, Http::Protocol::Http10);",
          "",
          "[Removed Lines]",
          "264:   router_.setDecoderFilterCallbacks(callbacks_);",
          "",
          "[Added Lines]",
          "264:   router_->setDecoderFilterCallbacks(callbacks_);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "272:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "273:   HttpTestUtility::addDefaultHeaders(headers);",
          "275:   Buffer::OwnedImpl data(\"1234567890123\");",
          "281:   EXPECT_EQ(1U,",
          "282:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "274:   router_.decodeHeaders(headers, false);",
          "276:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "277:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "278:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "280:   router_.decodeData(data, false);",
          "",
          "[Added Lines]",
          "274:   router_->decodeHeaders(headers, false);",
          "276:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "277:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "278:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "280:   router_->decodeData(data, false);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "321:   EXPECT_CALL(callbacks_.active_span_, spawnChild_(_, \"router observability_name egress\", _))",
          "322:       .WillOnce(Return(child_span));",
          "323:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "325:   EXPECT_EQ(1U,",
          "326:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "324:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "324:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "370:   EXPECT_CALL(callbacks_.active_span_, spawnChild_(_, \"router observability_name egress\", _))",
          "371:       .WillOnce(Return(child_span));",
          "372:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "374:   EXPECT_EQ(1U,",
          "375:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "373:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "373:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "423:   EXPECT_CALL(callbacks_.active_span_, spawnChild_(_, \"router observability_name egress\", _))",
          "424:       .WillOnce(Return(child_span));",
          "425:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "427:   EXPECT_EQ(1U,",
          "428:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "426:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "426:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "443:   EXPECT_CALL(*child_span,",
          "444:               setTag(Eq(Tracing::Tags::get().Canceled), Eq(Tracing::Tags::get().True)));",
          "445:   EXPECT_CALL(*child_span, finishSpan());",
          "447: }",
          "",
          "[Removed Lines]",
          "446:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "446:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "472:   EXPECT_CALL(callbacks_.active_span_, spawnChild_(_, \"router observability_name egress\", _))",
          "473:       .WillOnce(Return(child_span_1));",
          "474:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "476:   EXPECT_EQ(1U,",
          "477:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "475:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "475:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "492:   EXPECT_CALL(*child_span_1, setTag(Eq(Tracing::Tags::get().ErrorReason), Eq(\"remote reset\")));",
          "493:   EXPECT_CALL(*child_span_1, finishSpan());",
          "496:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "",
          "[Removed Lines]",
          "495:   router_.retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "495:   router_->retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "505:                      -> Http::ConnectionPool::Cancellable* {",
          "506:             response_decoder = &decoder;",
          "507:             EXPECT_CALL(*child_span_2, injectContext(_, _));",
          "509:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "510:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "511:             return nullptr;",
          "",
          "[Removed Lines]",
          "508:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "508:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "516:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "517:   EXPECT_CALL(*child_span_2, setTag(Eq(Tracing::Tags::get().RetryCount), Eq(\"1\")));",
          "520:   EXPECT_EQ(2U,",
          "521:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "519:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "519:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "566:   Http::TestRequestHeaderMapImpl headers;",
          "567:   HttpTestUtility::addDefaultHeaders(headers);",
          "569:   EXPECT_EQ(1U,",
          "570:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "568:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "568:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "632:         EXPECT_TRUE(end_stream);",
          "633:       }));",
          "636:   EXPECT_EQ(callbacks_.details(),",
          "637:             fmt::format(\"request_headers_failed_strict_check{{{}}}\", checked_header));",
          "638: }",
          "",
          "[Removed Lines]",
          "635:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_.decodeHeaders(req_headers, true));",
          "",
          "[Added Lines]",
          "635:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_->decodeHeaders(req_headers, true));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "662:   HttpTestUtility::addDefaultHeaders(headers);",
          "664:   expectResponseTimerCreate();",
          "667: }",
          "669: const std::vector<std::string> SUPPORTED_STRICT_CHECKED_HEADERS = {",
          "",
          "[Removed Lines]",
          "665:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_.decodeHeaders(headers, true));",
          "666:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "665:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_->decodeHeaders(headers, true));",
          "666:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "701:         EXPECT_FALSE(end_stream);",
          "702:       }));",
          "705:   EXPECT_THAT(callbacks_.details(),",
          "706:               StartsWith(fmt::format(\"request_headers_failed_strict_check{{\")));",
          "708: }",
          "",
          "[Removed Lines]",
          "704:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_.decodeHeaders(headers, true));",
          "707:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "704:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_->decodeHeaders(headers, true));",
          "707:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "769:   Http::TestRequestHeaderMapImpl headers{",
          "770:       {\"x-envoy-internal\", \"true\"}, {\"content-type\", \"application/grpc\"}, {\"grpc-timeout\", \"20S\"}};",
          "771:   HttpTestUtility::addDefaultHeaders(headers);",
          "773:   Buffer::OwnedImpl data;",
          "775:   EXPECT_EQ(1U,",
          "776:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "772:   router_.decodeHeaders(headers, false);",
          "774:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "772:   router_->decodeHeaders(headers, false);",
          "774:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "782:       {\":status\", \"504\"}, {\"content-length\", \"24\"}, {\"content-type\", \"text/plain\"}};",
          "783:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "784:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "786:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "787:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "788:   response_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "785:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "785:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "822:   Http::TestRequestHeaderMapImpl headers{",
          "823:       {\"x-envoy-internal\", \"true\"}, {\"content-type\", \"application/grpc\"}, {\"grpc-timeout\", \"20S\"}};",
          "824:   HttpTestUtility::addDefaultHeaders(headers);",
          "826:   Buffer::OwnedImpl data;",
          "828:   EXPECT_EQ(1U,",
          "829:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "825:   router_.decodeHeaders(headers, false);",
          "827:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "825:   router_->decodeHeaders(headers, false);",
          "827:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "835:       {\":status\", \"504\"}, {\"content-length\", \"24\"}, {\"content-type\", \"text/plain\"}};",
          "836:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "837:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "839:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "840:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "841:   response_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "838:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "838:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------"
        ],
        "test/common/router/router_test.cc||test/common/router/router_test.cc": [
          "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     EXPECT_CALL(",
          "122:         cm_.thread_local_cluster_.cluster_.info_->request_response_size_stats_store_,",
          "123:         deliverHistogramToSinks(Property(&Stats::Metric::name, \"upstream_rq_headers_size\"), 74ull));",
          "126:     EXPECT_CALL(callbacks_.dispatcher_, createTimer_);",
          "127:     EXPECT_CALL(",
          "",
          "[Removed Lines]",
          "124:     router_.decodeHeaders(headers, false);",
          "",
          "[Added Lines]",
          "124:     router_->decodeHeaders(headers, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:         deliverHistogramToSinks(Property(&Stats::Metric::name, \"upstream_rq_body_size\"), 5ull));",
          "130:     Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "131:     EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer,",
          "134:     if (with_trailers) {",
          "135:       Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "137:     }",
          "139:     EXPECT_CALL(",
          "",
          "[Removed Lines]",
          "132:               router_.decodeData(*body_data, !with_trailers));",
          "136:       router_.decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "132:               router_->decodeData(*body_data, !with_trailers));",
          "136:       router_->decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:       response_decoder->decodeTrailers(std::move(response_trailers));",
          "159:     }",
          "162:   }",
          "164:   void testAutoSniOptions(",
          "",
          "[Removed Lines]",
          "161:     router_.onDestroy();",
          "",
          "[Added Lines]",
          "161:     router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:     expectResponseTimerCreate();",
          "180:     HttpTestUtility::addDefaultHeaders(headers);",
          "182:     EXPECT_EQ(server_name,",
          "183:               stream_info.filterState()",
          "184:                   ->getDataReadOnly<Network::UpstreamServerName>(Network::UpstreamServerName::key())",
          "",
          "[Removed Lines]",
          "181:     router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "181:     router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "190:                                      ->value()[0]);",
          "191:     }",
          "192:     EXPECT_CALL(cancellable_, cancel(_));",
          "194:     EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "195:     EXPECT_EQ(0U,",
          "196:               callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "193:     router_.onDestroy();",
          "",
          "[Added Lines]",
          "193:     router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "293:   HttpTestUtility::addDefaultHeaders(headers);",
          "294:   EXPECT_CALL(callbacks_, route()).WillOnce(Return(nullptr));",
          "297:   EXPECT_EQ(1UL, stats_store_.counter(\"test.no_route\").value());",
          "298:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "299:   EXPECT_EQ(0U,",
          "",
          "[Removed Lines]",
          "296:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "296:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "321:                      testing::Eq(\"missing required header: :method\"), _, _,",
          "322:                      \"filter_removed_required_request_headers{missing_required_header:_:method}\"))",
          "323:       .WillOnce(InvokeWithoutArgs([] {}));",
          "326: }",
          "328: TEST_F(RouterTest, ClusterNotFound) {",
          "",
          "[Removed Lines]",
          "324:   router_.decodeHeaders(headers, true);",
          "325:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "324:   router_->decodeHeaders(headers, true);",
          "325:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "331:   Http::TestRequestHeaderMapImpl headers;",
          "332:   HttpTestUtility::addDefaultHeaders(headers);",
          "333:   ON_CALL(cm_, getThreadLocalCluster(_)).WillByDefault(Return(nullptr));",
          "335:   EXPECT_EQ(1UL, stats_store_.counter(\"test.no_cluster\").value());",
          "336:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "337:   EXPECT_EQ(0U,",
          "",
          "[Removed Lines]",
          "334:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "334:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "343:   ON_CALL(callbacks_.route_->route_entry_, priority())",
          "344:       .WillByDefault(Return(Upstream::ResourcePriority::High));",
          "345:   EXPECT_CALL(cm_.thread_local_cluster_,",
          "347:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "348:       .WillOnce(Invoke([&](Http::StreamDecoder&, Http::ConnectionPool::Callbacks& callbacks,",
          "349:                            const Http::ConnectionPool::Instance::StreamOptions&)",
          "",
          "[Removed Lines]",
          "346:               httpConnPool(Upstream::ResourcePriority::High, _, &router_));",
          "",
          "[Added Lines]",
          "346:               httpConnPool(Upstream::ResourcePriority::High, _, router_.get()));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "363:   Http::TestRequestHeaderMapImpl headers;",
          "364:   HttpTestUtility::addDefaultHeaders(headers);",
          "366:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "368:   EXPECT_EQ(0U,",
          "",
          "[Removed Lines]",
          "365:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "365:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "375:   ON_CALL(callbacks_.route_->route_entry_, priority())",
          "376:       .WillByDefault(Return(Upstream::ResourcePriority::High));",
          "377:   EXPECT_CALL(cm_.thread_local_cluster_,",
          "379:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "380:       .WillOnce(Invoke([&](Http::StreamDecoder&, Http::ConnectionPool::Callbacks& callbacks,",
          "381:                            const Http::ConnectionPool::Instance::StreamOptions&)",
          "",
          "[Removed Lines]",
          "378:               httpConnPool(Upstream::ResourcePriority::High, _, &router_));",
          "",
          "[Added Lines]",
          "378:               httpConnPool(Upstream::ResourcePriority::High, _, router_.get()));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "395:   Http::TestRequestHeaderMapImpl headers;",
          "396:   HttpTestUtility::addDefaultHeaders(headers);",
          "398:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "400:   EXPECT_EQ(0U,",
          "",
          "[Removed Lines]",
          "397:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "397:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "413:   HttpTestUtility::addDefaultHeaders(headers);",
          "414:   EXPECT_CALL(callbacks_.route_->route_entry_, finalizeRequestHeaders(_, _, true));",
          "417:   EXPECT_EQ(\"10\", headers.get_(\"x-envoy-expected-rq-timeout-ms\"));",
          "420:   EXPECT_CALL(cancellable_, cancel(_));",
          "422:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "423:   EXPECT_EQ(0U,",
          "424:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "416:   router_.decodeHeaders(headers, true);",
          "421:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "416:   router_->decodeHeaders(headers, true);",
          "421:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "433:   Http::TestRequestHeaderMapImpl headers;",
          "434:   HttpTestUtility::addDefaultHeaders(headers);",
          "439:   EXPECT_CALL(cancellable_, cancel(_));",
          "441:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "442:   EXPECT_EQ(0U,",
          "443:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "436:   router_.decodeHeaders(headers, true);",
          "440:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "436:   router_->decodeHeaders(headers, true);",
          "440:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "461:   Http::TestRequestHeaderMapImpl headers;",
          "462:   HttpTestUtility::addDefaultHeaders(headers);",
          "466:   EXPECT_CALL(cancellable_, cancel(_));",
          "468:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "469:   EXPECT_EQ(0U,",
          "470:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "463:   router_.decodeHeaders(headers, true);",
          "467:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "463:   router_->decodeHeaders(headers, true);",
          "467:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "475:       .WillByDefault(Return(&callbacks_.route_->route_entry_.hash_policy_));",
          "476:   EXPECT_CALL(callbacks_.route_->route_entry_.hash_policy_, generateHash(_, _, _, _))",
          "477:       .WillOnce(Return(absl::optional<uint64_t>()));",
          "479:       .WillOnce(Invoke([&](Upstream::ResourcePriority, absl::optional<Http::Protocol>,",
          "480:                            Upstream::LoadBalancerContext* context) {",
          "481:         EXPECT_FALSE(context->computeHashKey());",
          "",
          "[Removed Lines]",
          "478:   EXPECT_CALL(cm_.thread_local_cluster_, httpConnPool(_, _, &router_))",
          "",
          "[Added Lines]",
          "478:   EXPECT_CALL(cm_.thread_local_cluster_, httpConnPool(_, _, router_.get()))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "488:   Http::TestRequestHeaderMapImpl headers;",
          "489:   HttpTestUtility::addDefaultHeaders(headers);",
          "493:   EXPECT_CALL(cancellable_, cancel(_));",
          "495:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "496:   EXPECT_EQ(0U,",
          "497:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "490:   router_.decodeHeaders(headers, true);",
          "494:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "490:   router_->decodeHeaders(headers, true);",
          "494:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "500: TEST_F(RouterTest, HashKeyNoHashPolicy) {",
          "501:   ON_CALL(callbacks_.route_->route_entry_, hashPolicy()).WillByDefault(Return(nullptr));",
          "503: }",
          "505: TEST_F(RouterTest, AddCookie) {",
          "",
          "[Removed Lines]",
          "502:   EXPECT_FALSE(router_.computeHashKey().has_value());",
          "",
          "[Added Lines]",
          "502:   EXPECT_FALSE(router_->computeHashKey().has_value());",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "536:   Http::TestRequestHeaderMapImpl headers;",
          "537:   HttpTestUtility::addDefaultHeaders(headers);",
          "540:   Http::ResponseHeaderMapPtr response_headers(",
          "541:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "542:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "543:   EXPECT_EQ(callbacks_.details(), \"via_upstream\");",
          "546: }",
          "548: TEST_F(RouterTest, AddCookieNoDuplicate) {",
          "",
          "[Removed Lines]",
          "538:   router_.decodeHeaders(headers, true);",
          "545:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "538:   router_->decodeHeaders(headers, true);",
          "545:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "579:   Http::TestRequestHeaderMapImpl headers;",
          "580:   HttpTestUtility::addDefaultHeaders(headers);",
          "583:   Http::ResponseHeaderMapPtr response_headers(",
          "584:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}, {\"set-cookie\", \"foo=baz\"}});",
          "585:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "588: }",
          "590: TEST_F(RouterTest, AddMultipleCookies) {",
          "",
          "[Removed Lines]",
          "581:   router_.decodeHeaders(headers, true);",
          "587:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "581:   router_->decodeHeaders(headers, true);",
          "587:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "629:   Http::TestRequestHeaderMapImpl headers;",
          "630:   HttpTestUtility::addDefaultHeaders(headers);",
          "633:   Http::ResponseHeaderMapPtr response_headers(",
          "634:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "635:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "637: }",
          "641: TEST_F(RouterTest, MetadataMatchCriteria) {",
          "642:   ON_CALL(callbacks_.route_->route_entry_, metadataMatchCriteria())",
          "",
          "[Removed Lines]",
          "631:   router_.decodeHeaders(headers, true);",
          "636:   router_.onDestroy();",
          "639: TEST_F(RouterTest, MetadataNoOp) { EXPECT_EQ(nullptr, router_.metadataMatchCriteria()); }",
          "",
          "[Added Lines]",
          "631:   router_->decodeHeaders(headers, true);",
          "636:   router_->onDestroy();",
          "639: TEST_F(RouterTest, MetadataNoOp) { EXPECT_EQ(nullptr, router_->metadataMatchCriteria()); }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "655:   Http::TestRequestHeaderMapImpl headers;",
          "656:   HttpTestUtility::addDefaultHeaders(headers);",
          "660:   EXPECT_CALL(cancellable_, cancel(_));",
          "662: }",
          "664: TEST_F(RouterTest, MetadataMatchCriteriaFromRequest) {",
          "",
          "[Removed Lines]",
          "657:   router_.decodeHeaders(headers, true);",
          "661:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "657:   router_->decodeHeaders(headers, true);",
          "661:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "684:   Http::TestRequestHeaderMapImpl headers;",
          "685:   HttpTestUtility::addDefaultHeaders(headers);",
          "689:   EXPECT_CALL(cancellable_, cancel(_));",
          "691: }",
          "693: TEST_F(RouterTest, CancelBeforeBoundToPool) {",
          "",
          "[Removed Lines]",
          "686:   router_.decodeHeaders(headers, true);",
          "690:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "686:   router_->decodeHeaders(headers, true);",
          "690:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "698:   Http::TestRequestHeaderMapImpl headers;",
          "699:   HttpTestUtility::addDefaultHeaders(headers);",
          "703:   EXPECT_CALL(cancellable_, cancel(_));",
          "705:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "706:   EXPECT_EQ(0U,",
          "707:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "700:   router_.decodeHeaders(headers, true);",
          "704:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "700:   router_->decodeHeaders(headers, true);",
          "704:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "720:   Http::TestRequestHeaderMapImpl headers;",
          "721:   HttpTestUtility::addDefaultHeaders(headers);",
          "723:   EXPECT_EQ(0U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "724:                     .counter(\"upstream_rq_maintenance_mode\")",
          "725:                     .value());",
          "",
          "[Removed Lines]",
          "722:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "722:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "743:   Http::TestRequestHeaderMapImpl headers;",
          "744:   HttpTestUtility::addDefaultHeaders(headers);",
          "746:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "747:                     .counter(\"upstream_rq_maintenance_mode\")",
          "748:                     .value());",
          "",
          "[Removed Lines]",
          "745:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "745:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "764:   Http::TestRequestHeaderMapImpl headers;",
          "765:   HttpTestUtility::addDefaultHeaders(headers);",
          "768:   Http::ResponseHeaderMapPtr response_headers(",
          "769:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "766:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "766:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "782:   Http::TestRequestHeaderMapImpl headers;",
          "783:   HttpTestUtility::addDefaultHeaders(headers);",
          "786:   Http::ResponseHeaderMapPtr response_headers(",
          "787:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "784:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "784:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "843:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "844:   HttpTestUtility::addDefaultHeaders(headers);",
          "846:   EXPECT_EQ(1U,",
          "847:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "845:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "845:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "850:   EXPECT_EQ(1, atoi(std::string(headers.getEnvoyAttemptCountValue()).c_str()));",
          "854:   Upstream::RetryOptionsPredicate::UpdateOptionsReturn update_options_return{",
          "855:       std::make_shared<Network::Socket::Options>()};",
          "856:   EXPECT_CALL(*retry_options_predicate, updateOptions(_)).WillOnce(Return(update_options_return));",
          "",
          "[Removed Lines]",
          "853:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "853:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "866:   EXPECT_EQ(update_options_return.new_upstream_socket_options_.value(),",
          "870:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "871:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "872:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "874:   EXPECT_EQ(2U,",
          "875:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "867:             router_.upstreamSocketOptions());",
          "873:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "867:             router_->upstreamSocketOptions());",
          "873:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "878:   EXPECT_EQ(2, atoi(std::string(headers.getEnvoyAttemptCountValue()).c_str()));",
          "882:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "883:       .Times(0);",
          "884:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "881:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "881:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "882:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "942:   Http::TestRequestHeaderMapImpl headers;",
          "943:   HttpTestUtility::addDefaultHeaders(headers);",
          "946:   EXPECT_EQ(0U,",
          "947:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "944:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "945:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "963:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "964:   HttpTestUtility::addDefaultHeaders(headers);",
          "966:   EXPECT_EQ(1U,",
          "967:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "968:   EXPECT_EQ(1U, callbacks_.stream_info_.attemptCount().value());",
          "972:   Http::ResponseHeaderMapPtr response_headers1(",
          "973:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "974:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "965:   router_.decodeHeaders(headers, true);",
          "971:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "966:   router_->decodeHeaders(headers, true);",
          "972:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "980:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "981:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "982:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "984:   EXPECT_EQ(2U,",
          "985:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "986:   EXPECT_EQ(2U, callbacks_.stream_info_.attemptCount().value());",
          "990:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "991:       .Times(0);",
          "992:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "983:   router_.retry_state_->callback_();",
          "989:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "984:   router_->retry_state_->callback_();",
          "990:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "991:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1066:   Http::TestRequestHeaderMapImpl headers;",
          "1067:   HttpTestUtility::addDefaultHeaders(headers);",
          "1069:   EXPECT_EQ(0U,",
          "1070:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "1071:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "",
          "[Removed Lines]",
          "1068:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1070:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1080:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "1081:   HttpTestUtility::addDefaultHeaders(headers);",
          "1083:   EXPECT_EQ(1U,",
          "1084:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "1088:   Http::ResponseHeaderMapPtr response_headers1(",
          "1089:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "1090:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "1082:   router_.decodeHeaders(headers, true);",
          "1087:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "1084:   router_->decodeHeaders(headers, true);",
          "1089:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1096:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "1097:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "1098:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "1100:   EXPECT_EQ(2U,",
          "1101:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "1104:   EXPECT_CALL(callbacks_.stream_info_, setResponseFlag(StreamInfo::ResponseFlag::UpstreamOverflow));",
          "1106:       .WillOnce(Return(RetryStatus::NoOverflow));",
          "1107:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "1108:       .Times(0);",
          "",
          "[Removed Lines]",
          "1099:   router_.retry_state_->callback_();",
          "1105:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "1101:   router_->retry_state_->callback_();",
          "1107:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1139:               putResult(Upstream::Outlier::Result::LocalOriginConnectFailed, _))",
          "1140:       .Times(!upstream_filters);",
          "1143:   EXPECT_EQ(1U,",
          "1144:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "1146: }",
          "1148: TEST_F(RouterTest, UpstreamTimeoutAllStatsEmission) {",
          "",
          "[Removed Lines]",
          "1142:   router_.decodeHeaders(headers, true);",
          "1145:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "1144:   router_->decodeHeaders(headers, true);",
          "1147:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1155:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "1156:   HttpTestUtility::addDefaultHeaders(headers);",
          "1158:   Buffer::OwnedImpl data;",
          "1160:   EXPECT_EQ(1U,",
          "1161:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1157:   router_.decodeHeaders(headers, false);",
          "1159:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1159:   router_->decodeHeaders(headers, false);",
          "1161:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1187:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "1188:   HttpTestUtility::addDefaultHeaders(headers);",
          "1190:   Buffer::OwnedImpl data;",
          "1192:   EXPECT_EQ(1U,",
          "1193:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1189:   router_.decodeHeaders(headers, false);",
          "1191:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1191:   router_->decodeHeaders(headers, false);",
          "1193:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1199:       {\":status\", \"504\"}, {\"content-length\", \"24\"}, {\"content-type\", \"text/plain\"}};",
          "1200:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "1201:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "1203:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "1204:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "1205:   response_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "1202:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "1204:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1226:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1227:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"200\"}};",
          "1228:   HttpTestUtility::addDefaultHeaders(headers);",
          "1230:   Buffer::OwnedImpl data;",
          "1232:   EXPECT_EQ(1U,",
          "1233:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1229:   router_.decodeHeaders(headers, false);",
          "1231:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1231:   router_->decodeHeaders(headers, false);",
          "1233:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1262:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1263:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"200\"}};",
          "1264:   HttpTestUtility::addDefaultHeaders(headers);",
          "1266:   Buffer::OwnedImpl data;",
          "1268:   EXPECT_EQ(1U,",
          "1269:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1265:   router_.decodeHeaders(headers, false);",
          "1267:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1267:   router_->decodeHeaders(headers, false);",
          "1269:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1297:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"200\"}};",
          "1298:   HttpTestUtility::addDefaultHeaders(headers);",
          "1300:   Buffer::OwnedImpl data;",
          "1302:   EXPECT_EQ(1U,",
          "1303:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1299:   router_.decodeHeaders(headers, false);",
          "1301:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1301:   router_->decodeHeaders(headers, false);",
          "1303:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1332:                                          {\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1333:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"100\"}};",
          "1334:   HttpTestUtility::addDefaultHeaders(headers);",
          "1336:   Buffer::OwnedImpl data;",
          "1338:   EXPECT_EQ(1U,",
          "1339:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1335:   router_.decodeHeaders(headers, false);",
          "1337:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1337:   router_->decodeHeaders(headers, false);",
          "1339:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1353:   test_time_.advanceTimeWait(std::chrono::milliseconds(100));",
          "1355:   Http::ResponseHeaderMapPtr response_headers1(",
          "1356:       new Http::TestResponseHeaderMapImpl{{\":status\", \"504\"}});",
          "1357:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "1354:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "1356:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1366:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder2, Http::Protocol::Http10);",
          "1368:   expectPerTryTimerCreate();",
          "1370:   EXPECT_EQ(2U,",
          "1371:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1369:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "1371:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1390:   test_time_.advanceTimeWait(std::chrono::milliseconds(100));",
          "1391:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "1392:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "1394:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "1395:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "1396:   per_try_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "1393:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _));",
          "",
          "[Added Lines]",
          "1395:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1415:                                          {\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1416:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"320\"}};",
          "1417:   HttpTestUtility::addDefaultHeaders(headers);",
          "1419:   Buffer::OwnedImpl data;",
          "1421:   EXPECT_EQ(1U,",
          "1422:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1418:   router_.decodeHeaders(headers, false);",
          "1420:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1420:   router_->decodeHeaders(headers, false);",
          "1422:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1433:       .Times(0);",
          "1437:   Http::ResponseHeaderMapPtr response_headers1(",
          "1438:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "1439:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "1436:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "1438:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1448:   Http::ResponseDecoder* response_decoder2 = nullptr;",
          "1449:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder2, Http::Protocol::Http10);",
          "1450:   expectPerTryTimerCreate();",
          "1452:   EXPECT_EQ(2U,",
          "1453:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1451:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "1453:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1473:   test_time_.advanceTimeWait(std::chrono::milliseconds(240));",
          "1474:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "1475:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "1477:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "1478:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "1479:   response_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "1476:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "1478:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1496:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1497:                                          {\"grpc-timeout\", \"20S\"}};",
          "1498:   HttpTestUtility::addDefaultHeaders(headers);",
          "1500:   EXPECT_EQ(1U,",
          "1501:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1499:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1501:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1518:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1519:                                          {\"grpc-timeout\", \"20S\"}};",
          "1520:   HttpTestUtility::addDefaultHeaders(headers);",
          "1522:   EXPECT_EQ(1U,",
          "1523:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1521:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1523:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1540:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1541:                                          {\"grpc-timeout\", \"20S\"}};",
          "1542:   HttpTestUtility::addDefaultHeaders(headers);",
          "1544:   EXPECT_EQ(1U,",
          "1545:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1543:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1545:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1563:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1564:                                          {\"grpc-timeout\", \"20S\"}};",
          "1565:   HttpTestUtility::addDefaultHeaders(headers);",
          "1567:   EXPECT_EQ(1U,",
          "1568:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1566:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1568:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1586:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1587:                                          {\"grpc-timeout\", \"20S\"}};",
          "1588:   HttpTestUtility::addDefaultHeaders(headers);",
          "1590:   EXPECT_EQ(1U,",
          "1591:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1589:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1591:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1612:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1613:                                          {\"grpc-timeout\", \"20S\"}};",
          "1614:   HttpTestUtility::addDefaultHeaders(headers);",
          "1616:   EXPECT_EQ(1U,",
          "1617:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1615:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1617:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1639:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1640:                                          {\"grpc-timeout\", \"20S\"}};",
          "1641:   HttpTestUtility::addDefaultHeaders(headers);",
          "1643:   EXPECT_EQ(1U,",
          "1644:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1642:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1644:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1670:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1671:                                          {\"grpc-timeout\", \"20S\"}};",
          "1672:   HttpTestUtility::addDefaultHeaders(headers);",
          "1674:   EXPECT_EQ(1U,",
          "1675:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1673:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1675:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1695:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-alt-response\", \"204\"},",
          "1696:                                          {\"x-envoy-internal\", \"true\"}};",
          "1697:   HttpTestUtility::addDefaultHeaders(headers);",
          "1699:   Buffer::OwnedImpl data;",
          "1701:   EXPECT_EQ(1U,",
          "1702:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1698:   router_.decodeHeaders(headers, false);",
          "1700:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1700:   router_->decodeHeaders(headers, false);",
          "1702:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1706:   EXPECT_CALL(encoder.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "1707:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"204\"}};",
          "1708:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "1710:   EXPECT_CALL(",
          "1711:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "1712:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(204)));",
          "",
          "[Removed Lines]",
          "1709:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "1711:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1730:   bool filter_state_verified = false;",
          "1732:       std::make_shared<TestAccessLog>([&](const auto& stream_info) {",
          "1733:         filter_state_verified =",
          "1734:             stream_info.hasResponseFlag(StreamInfo::ResponseFlag::StreamIdleTimeout);",
          "",
          "[Removed Lines]",
          "1731:   router_.config().upstream_logs_.push_back(",
          "",
          "[Added Lines]",
          "1733:   router_->config().upstream_logs_.push_back(",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1751:   Http::TestRequestHeaderMapImpl headers;",
          "1752:   HttpTestUtility::addDefaultHeaders(headers);",
          "1755:   response_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1756:   EXPECT_CALL(*response_timeout_, enableTimer(_, _));",
          "1758:   Buffer::OwnedImpl data;",
          "1761:   per_try_idle_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1762:   EXPECT_CALL(*per_try_idle_timeout_, enableTimer(std::chrono::milliseconds(3000), _));",
          "",
          "[Removed Lines]",
          "1753:   router_.decodeHeaders(headers, false);",
          "1759:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1755:   router_->decodeHeaders(headers, false);",
          "1761:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1814:   Http::TestRequestHeaderMapImpl headers;",
          "1815:   HttpTestUtility::addDefaultHeaders(headers);",
          "1818:   response_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1819:   EXPECT_CALL(*response_timeout_, enableTimer(_, _));",
          "1821:   Buffer::OwnedImpl data;",
          "1824:   per_try_idle_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1825:   EXPECT_CALL(*per_try_idle_timeout_, enableTimer(std::chrono::milliseconds(3000), _));",
          "",
          "[Removed Lines]",
          "1816:   router_.decodeHeaders(headers, false);",
          "1822:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1818:   router_->decodeHeaders(headers, false);",
          "1824:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1853:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-internal\", \"true\"},",
          "1854:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "1855:   HttpTestUtility::addDefaultHeaders(headers);",
          "",
          "[Removed Lines]",
          "1856:   router_.decodeHeaders(headers, false);",
          "",
          "[Added Lines]",
          "1858:   router_->decodeHeaders(headers, false);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1861:   expectResponseTimerCreate();",
          "1863:   Buffer::OwnedImpl data;",
          "1865:   EXPECT_EQ(1U,",
          "1866:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1864:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1866:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1903:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-internal\", \"true\"},",
          "1904:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "1905:   HttpTestUtility::addDefaultHeaders(headers);",
          "1909:   expectResponseTimerCreate();",
          "1910:   Buffer::OwnedImpl data;",
          "1914:   expectPerTryTimerCreate();",
          "",
          "[Removed Lines]",
          "1906:   router_.decodeHeaders(headers, false);",
          "1911:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1908:   router_->decodeHeaders(headers, false);",
          "1913:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1960:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-internal\", \"true\"},",
          "1961:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "1962:   HttpTestUtility::addDefaultHeaders(headers);",
          "1964:   Buffer::OwnedImpl data;",
          "1967:   per_try_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1968:   EXPECT_CALL(*per_try_timeout_, enableTimer(_, _));",
          "",
          "[Removed Lines]",
          "1963:   router_.decodeHeaders(headers, false);",
          "1965:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1965:   router_->decodeHeaders(headers, false);",
          "1967:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2012:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2013:                      -> Http::ConnectionPool::Cancellable* {",
          "2014:             response_decoder1 = &decoder;",
          "2016:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2017:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2018:             return nullptr;",
          "",
          "[Removed Lines]",
          "2015:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2017:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2023:       .Times(2);",
          "2024:   expectPerTryTimerCreate();",
          "2025:   expectResponseTimerCreate();",
          "2029:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2030:   HttpTestUtility::addDefaultHeaders(headers);",
          "2032:   EXPECT_EQ(1U,",
          "2033:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2026:   EXPECT_EQ(0U, router_.upstreamRequests().size());",
          "2027:   EXPECT_TRUE(router_.finalUpstreamRequest() == nullptr);",
          "2031:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2028:   EXPECT_EQ(0U, router_->upstreamRequests().size());",
          "2029:   EXPECT_TRUE(router_->finalUpstreamRequest() == nullptr);",
          "2033:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2038:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2039:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2040:   Http::ResponseDecoder* response_decoder2 = nullptr;",
          "2042:   EXPECT_CALL(*retry_options_predicate, updateOptions(_));",
          "2043:   per_try_timeout_->invokeCallback();",
          "2044:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "",
          "[Removed Lines]",
          "2041:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2043:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2047:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2048:                      -> Http::ConnectionPool::Cancellable* {",
          "2049:             response_decoder2 = &decoder;",
          "2051:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2052:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2053:             return nullptr;",
          "2054:           }));",
          "2056:   expectPerTryTimerCreate();",
          "2058:   EXPECT_EQ(2U,",
          "2059:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2050:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2057:   router_.retry_state_->callback_();",
          "2060:   EXPECT_EQ(2U, router_.upstreamRequests().size());",
          "2061:   EXPECT_TRUE(router_.finalUpstreamRequest() == nullptr);",
          "",
          "[Added Lines]",
          "2052:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2059:   router_->retry_state_->callback_();",
          "2062:   EXPECT_EQ(2U, router_->upstreamRequests().size());",
          "2063:   EXPECT_TRUE(router_->finalUpstreamRequest() == nullptr);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2069:   Http::ResponseHeaderMapPtr response_headers(",
          "2070:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "2072:       .WillOnce(Return(RetryState::RetryDecision::NoRetry));",
          "2073:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2074:               putHttpResponseCode(200));",
          "",
          "[Removed Lines]",
          "2071:   EXPECT_CALL(*router_.retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2073:   EXPECT_CALL(*router_->retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2083:   ASSERT(response_decoder1);",
          "2084:   response_decoder1->decodeHeaders(std::move(response_headers), true);",
          "2085:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "2090: }",
          "",
          "[Removed Lines]",
          "2086:   EXPECT_EQ(0U, router_.upstreamRequests().size());",
          "2087:   EXPECT_FALSE(router_.finalUpstreamRequest() == nullptr);",
          "",
          "[Added Lines]",
          "2088:   EXPECT_EQ(0U, router_->upstreamRequests().size());",
          "2089:   EXPECT_FALSE(router_->finalUpstreamRequest() == nullptr);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2107:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2108:                      -> Http::ConnectionPool::Cancellable* {",
          "2109:             response_decoder1 = &decoder;",
          "2111:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2112:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2113:             return nullptr;",
          "",
          "[Removed Lines]",
          "2110:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2112:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2122:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2123:   HttpTestUtility::addDefaultHeaders(headers);",
          "2125:   EXPECT_EQ(1U,",
          "2126:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2124:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2126:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2131:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2132:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2133:   Http::ResponseDecoder* response_decoder2 = nullptr;",
          "2135:   per_try_timeout_->invokeCallback();",
          "2137:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "",
          "[Removed Lines]",
          "2134:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2136:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2140:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2141:                      -> Http::ConnectionPool::Cancellable* {",
          "2142:             response_decoder2 = &decoder;",
          "2144:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2145:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2146:             return nullptr;",
          "2147:           }));",
          "2148:   expectPerTryTimerCreate();",
          "2150:   EXPECT_EQ(2U,",
          "2151:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2143:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2149:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2145:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2151:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2162:               putHttpResponseCode(500));",
          "2163:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2164:   EXPECT_CALL(encoder2.stream_, resetStream(_));",
          "2166:       .WillOnce(Return(RetryStatus::NoOverflow));",
          "2168:   ASSERT(response_decoder2);",
          "",
          "[Removed Lines]",
          "2165:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2167:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2218:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2219:                      -> Http::ConnectionPool::Cancellable* {",
          "2220:             response_decoder1 = &decoder;",
          "2222:             upstream_stream_info_.downstream_connection_info_provider_->setConnectionID(111);",
          "2223:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2224:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "",
          "[Removed Lines]",
          "2221:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2223:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2230:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2231:   HttpTestUtility::addDefaultHeaders(headers);",
          "2233:   EXPECT_EQ(1U,",
          "2234:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2232:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2234:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2246:               putHttpResponseCode(500));",
          "2247:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2248:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2251:   response_decoder1->decodeHeaders(std::move(response_headers1), true);",
          "",
          "[Removed Lines]",
          "2249:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "2251:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2258:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2259:                      -> Http::ConnectionPool::Cancellable* {",
          "2260:             response_decoder2 = &decoder;",
          "2262:             upstream_stream_info_.downstream_connection_info_provider_->setConnectionID(222);",
          "2263:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2264:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2265:             return nullptr;",
          "2266:           }));",
          "2267:   expectPerTryTimerCreate();",
          "2269:   EXPECT_EQ(2U,",
          "2270:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2272:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "2276:   EXPECT_CALL(",
          "2277:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2278:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "",
          "[Removed Lines]",
          "2261:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2268:   router_.retry_state_->callback_();",
          "2275:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2263:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2270:   router_->retry_state_->callback_();",
          "2277:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2284:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2285:                      -> Http::ConnectionPool::Cancellable* {",
          "2286:             response_decoder3 = &decoder;",
          "2288:             upstream_stream_info_.downstream_connection_info_provider_->setConnectionID(333);",
          "2289:             callbacks.onPoolReady(encoder3, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2290:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "",
          "[Removed Lines]",
          "2287:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2289:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2294:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2295:   per_try_timeout_->invokeCallback();",
          "2296:   expectPerTryTimerCreate();",
          "2298:   EXPECT_EQ(3U,",
          "2299:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2300:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2297:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2299:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2314:         EXPECT_EQ(headers.Status()->value(), \"200\");",
          "2315:         EXPECT_TRUE(end_stream);",
          "2316:       }));",
          "2319:   response_decoder3->decodeHeaders(std::move(response_headers2), true);",
          "2320:   EXPECT_TRUE(verifyHostUpstreamStats(1, 1));",
          "",
          "[Removed Lines]",
          "2317:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "2319:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "2320:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "2337:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2338:                      -> Http::ConnectionPool::Cancellable* {",
          "2339:             response_decoder1 = &decoder;",
          "2341:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2342:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2343:             return nullptr;",
          "",
          "[Removed Lines]",
          "2340:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2343:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "2352:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2353:   HttpTestUtility::addDefaultHeaders(headers);",
          "2356:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2358:   EXPECT_CALL(",
          "2359:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2360:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2362:   per_try_timeout_->invokeCallback();",
          "2364:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2354:   router_.decodeHeaders(headers, true);",
          "2361:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2357:   router_->decodeHeaders(headers, true);",
          "2364:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "2369:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2370:                      -> Http::ConnectionPool::Cancellable* {",
          "2371:             response_decoder2 = &decoder;",
          "2373:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2374:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2375:             return nullptr;",
          "2376:           }));",
          "2378:   expectPerTryTimerCreate();",
          "2382:   Http::ResponseHeaderMapPtr response_headers1(",
          "2383:       new Http::TestResponseHeaderMapImpl{{\":status\", \"500\"}});",
          "2384:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2385:               putHttpResponseCode(500));",
          "2388:       .WillOnce(Return(RetryState::RetryDecision::RetryWithBackoff));",
          "2389:   ASSERT(response_decoder1);",
          "2390:   response_decoder1->decodeHeaders(std::move(response_headers1), true);",
          "",
          "[Removed Lines]",
          "2372:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2379:   router_.retry_state_->callback_();",
          "2386:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "2387:   EXPECT_CALL(*router_.retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2375:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2382:   router_->retry_state_->callback_();",
          "2389:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "2390:   EXPECT_CALL(*router_->retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "2411:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2412:                      -> Http::ConnectionPool::Cancellable* {",
          "2413:             response_decoder1 = &decoder;",
          "2415:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2416:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2417:             return nullptr;",
          "",
          "[Removed Lines]",
          "2414:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2417:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "2426:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2427:   HttpTestUtility::addDefaultHeaders(headers);",
          "2430:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2432:   EXPECT_CALL(",
          "2433:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2434:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2436:   per_try_timeout_->invokeCallback();",
          "2438:   expectPerTryTimerCreate();",
          "",
          "[Removed Lines]",
          "2428:   router_.decodeHeaders(headers, true);",
          "2435:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2431:   router_->decodeHeaders(headers, true);",
          "2438:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "2443:       new Http::TestResponseHeaderMapImpl{{\":status\", \"500\"}});",
          "2444:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2445:               putHttpResponseCode(500));",
          "2448:       .WillOnce(Return(RetryState::RetryDecision::RetryWithBackoff));",
          "2449:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2450:   ASSERT(response_decoder1);",
          "",
          "[Removed Lines]",
          "2446:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "2447:   EXPECT_CALL(*router_.retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2449:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "2450:   EXPECT_CALL(*router_->retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "2459:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2460:                      -> Http::ConnectionPool::Cancellable* {",
          "2461:             response_decoder2 = &decoder;",
          "2463:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2464:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2465:             return nullptr;",
          "2466:           }));",
          "2469:   Http::ResponseHeaderMapPtr response_headers2(",
          "2470:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "2472:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _))",
          "2473:       .WillOnce(Invoke([&](Http::ResponseHeaderMap& headers, bool end_stream) -> void {",
          "2474:         EXPECT_EQ(headers.Status()->value(), \"200\");",
          "",
          "[Removed Lines]",
          "2462:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2467:   router_.retry_state_->callback_();",
          "2471:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "2465:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2470:   router_->retry_state_->callback_();",
          "2474:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "2475:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "2494:   Http::TestRequestHeaderMapImpl headers{",
          "2495:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2496:   HttpTestUtility::addDefaultHeaders(headers);",
          "2500:   EXPECT_CALL(*retry_options_predicate, updateOptions(_));",
          "2501:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2503:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2504:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "2505:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2507:   EXPECT_EQ(2U,",
          "2508:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2509:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2497:   router_.decodeHeaders(headers, false);",
          "2499:   router_.retry_state_->expectResetRetry();",
          "2506:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2501:   router_->decodeHeaders(headers, false);",
          "2503:   router_->retry_state_->expectResetRetry();",
          "2510:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "2512:   const std::string body(\"body\");",
          "2513:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body), true));",
          "2514:   Buffer::OwnedImpl buf(body);",
          "2518:   Http::ResponseHeaderMapPtr response_headers(",
          "",
          "[Removed Lines]",
          "2515:   router_.decodeData(buf, true);",
          "",
          "[Added Lines]",
          "2519:   router_->decodeData(buf, true);",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "2543:   Http::TestRequestHeaderMapImpl headers{",
          "2544:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2545:   HttpTestUtility::addDefaultHeaders(headers);",
          "2547:   const std::string body1(\"body1\");",
          "2548:   Buffer::OwnedImpl buf1(body1);",
          "2553:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2555:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2546:   router_.decodeHeaders(headers, false);",
          "2549:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "2550:   router_.decodeData(buf1, false);",
          "2552:   router_.retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "2550:   router_->decodeHeaders(headers, false);",
          "2553:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "2554:   router_->decodeData(buf1, false);",
          "2556:   router_->retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "2558:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2559:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body1), false));",
          "2561:   EXPECT_EQ(2U,",
          "2562:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2563:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2560:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2564:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "2566:   const std::string body2(\"body2\");",
          "2567:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body2), true));",
          "2568:   Buffer::OwnedImpl buf2(body2);",
          "2573:   Http::ResponseHeaderMapPtr response_headers(",
          "",
          "[Removed Lines]",
          "2569:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "2570:   router_.decodeData(buf2, true);",
          "",
          "[Added Lines]",
          "2573:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "2574:   router_->decodeData(buf2, true);",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "2597:   Http::TestRequestHeaderMapImpl headers{",
          "2598:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2599:   HttpTestUtility::addDefaultHeaders(headers);",
          "2601:   const std::string body1(\"body1\");",
          "2602:   Buffer::OwnedImpl buf1(body1);",
          "2607:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2609:   const std::string body2(\"body2\");",
          "2610:   Buffer::OwnedImpl buf2(body2);",
          "2613:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2614:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "2616:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2617:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body1 + body2), false));",
          "2619:   EXPECT_EQ(2U,",
          "2620:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2621:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2600:   router_.decodeHeaders(headers, false);",
          "2603:   EXPECT_CALL(*router_.retry_state_, enabled()).Times(3).WillRepeatedly(Return(true));",
          "2604:   router_.decodeData(buf1, false);",
          "2606:   router_.retry_state_->expectResetRetry();",
          "2611:   router_.decodeData(buf2, false);",
          "2618:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2604:   router_->decodeHeaders(headers, false);",
          "2607:   EXPECT_CALL(*router_->retry_state_, enabled()).Times(3).WillRepeatedly(Return(true));",
          "2608:   router_->decodeData(buf1, false);",
          "2610:   router_->retry_state_->expectResetRetry();",
          "2615:   router_->decodeData(buf2, false);",
          "2622:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "2624:   const std::string body3(\"body3\");",
          "2625:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body3), true));",
          "2626:   Buffer::OwnedImpl buf3(body3);",
          "2630:   Http::ResponseHeaderMapPtr response_headers(",
          "",
          "[Removed Lines]",
          "2627:   router_.decodeData(buf3, true);",
          "",
          "[Added Lines]",
          "2631:   router_->decodeData(buf3, true);",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "2653:   Http::TestRequestHeaderMapImpl headers{",
          "2654:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2655:   HttpTestUtility::addDefaultHeaders(headers);",
          "2657:   const std::string body1(\"body1\");",
          "2658:   Buffer::OwnedImpl buf1(body1);",
          "2663:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2666:   const std::string body2(\"body2\");",
          "2667:   Buffer::OwnedImpl buf2(body2);",
          "2670:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2671:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "2673:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2674:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body1 + body2), true));",
          "2676:   EXPECT_EQ(2U,",
          "2677:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2678:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2656:   router_.decodeHeaders(headers, false);",
          "2659:   EXPECT_CALL(*router_.retry_state_, enabled()).Times(2).WillRepeatedly(Return(true));",
          "2660:   router_.decodeData(buf1, false);",
          "2662:   router_.retry_state_->expectResetRetry();",
          "2668:   router_.decodeData(buf2, true);",
          "2675:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2660:   router_->decodeHeaders(headers, false);",
          "2663:   EXPECT_CALL(*router_->retry_state_, enabled()).Times(2).WillRepeatedly(Return(true));",
          "2664:   router_->decodeData(buf1, false);",
          "2666:   router_->retry_state_->expectResetRetry();",
          "2672:   router_->decodeData(buf2, true);",
          "2679:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "2704:   Http::TestRequestHeaderMapImpl headers{",
          "2705:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2706:   HttpTestUtility::addDefaultHeaders(headers);",
          "2708:   const std::string body1(\"body1\");",
          "2709:   Buffer::OwnedImpl buf1(body1);",
          "2714:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2717:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "2720:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2721:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "",
          "[Removed Lines]",
          "2707:   router_.decodeHeaders(headers, false);",
          "2710:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "2711:   router_.decodeData(buf1, false);",
          "2713:   router_.retry_state_->expectResetRetry();",
          "2718:   router_.decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "2711:   router_->decodeHeaders(headers, false);",
          "2714:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "2715:   router_->decodeData(buf1, false);",
          "2717:   router_->retry_state_->expectResetRetry();",
          "2722:   router_->decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "2723:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2724:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body1), false));",
          "2725:   EXPECT_CALL(encoder2, encodeTrailers(HeaderMapEqualRef(&trailers)));",
          "2727:   EXPECT_EQ(2U,",
          "2728:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2729:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2726:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2730:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "2756:   Http::TestRequestHeaderMapImpl headers{",
          "2757:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2758:   HttpTestUtility::addDefaultHeaders(headers);",
          "2760:   const std::string body1(\"body1\");",
          "2761:   Buffer::OwnedImpl buf1(body1);",
          "2766:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2769:   const std::string body2(50, 'a');",
          "2770:   Buffer::OwnedImpl buf2(body2);",
          "2773:   EXPECT_EQ(callbacks_.details(), \"request_payload_exceeded_retry_buffer_limit\");",
          "2774:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "",
          "[Removed Lines]",
          "2759:   router_.decodeHeaders(headers, false);",
          "2762:   EXPECT_CALL(*router_.retry_state_, enabled()).Times(2).WillRepeatedly(Return(true));",
          "2763:   router_.decodeData(buf1, false);",
          "2765:   router_.retry_state_->expectResetRetry();",
          "2771:   router_.decodeData(buf2, false);",
          "",
          "[Added Lines]",
          "2763:   router_->decodeHeaders(headers, false);",
          "2766:   EXPECT_CALL(*router_->retry_state_, enabled()).Times(2).WillRepeatedly(Return(true));",
          "2767:   router_->decodeData(buf1, false);",
          "2769:   router_->retry_state_->expectResetRetry();",
          "2775:   router_->decodeData(buf2, false);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "2790:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2791:                      -> Http::ConnectionPool::Cancellable* {",
          "2792:             response_decoder1 = &decoder;",
          "2794:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2795:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2796:             return nullptr;",
          "",
          "[Removed Lines]",
          "2793:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2797:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "2805:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2806:   HttpTestUtility::addDefaultHeaders(headers);",
          "2808:   EXPECT_EQ(1U,",
          "2809:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2807:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2811:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "2813:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2814:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2815:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2817:   per_try_timeout_->invokeCallback();",
          "2819:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2816:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2820:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "2824:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2825:                      -> Http::ConnectionPool::Cancellable* {",
          "2826:             response_decoder2 = &decoder;",
          "2828:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2829:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2830:             return nullptr;",
          "2831:           }));",
          "2832:   expectPerTryTimerCreate();",
          "2834:   EXPECT_EQ(2U,",
          "2835:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2827:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2833:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2831:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2837:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "2866:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2867:                      -> Http::ConnectionPool::Cancellable* {",
          "2868:             response_decoder1 = &decoder;",
          "2870:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2871:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2872:             return nullptr;",
          "",
          "[Removed Lines]",
          "2869:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2873:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "2880:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2881:   HttpTestUtility::addDefaultHeaders(headers);",
          "2883:   EXPECT_EQ(1U,",
          "2884:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2882:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2886:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "2888:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2889:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2890:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2892:   per_try_timeout_->invokeCallback();",
          "2894:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2891:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2895:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "2899:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2900:                      -> Http::ConnectionPool::Cancellable* {",
          "2901:             response_decoder2 = &decoder;",
          "2903:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2904:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2905:             return nullptr;",
          "",
          "[Removed Lines]",
          "2902:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2906:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "2908:               putResult(Upstream::Outlier::Result::LocalOriginConnectSuccess,",
          "2909:                         absl::optional<uint64_t>(absl::nullopt)));",
          "2910:   expectPerTryTimerCreate();",
          "2912:   EXPECT_EQ(2U,",
          "2913:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2911:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2915:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "2920:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2921:               putHttpResponseCode(503));",
          "2924:       .WillOnce(Return(RetryStatus::NoRetryLimitExceeded));",
          "2925:   ASSERT(response_decoder2);",
          "2926:   response_decoder2->decodeHeaders(std::move(bad_response_headers1), true);",
          "",
          "[Removed Lines]",
          "2923:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2927:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "2940:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _))",
          "2941:       .WillOnce(Invoke([&](Http::ResponseHeaderMap& headers, bool) -> void {",
          "",
          "[Removed Lines]",
          "2938:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "2942:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "2968:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2969:   HttpTestUtility::addDefaultHeaders(headers);",
          "2971:   EXPECT_EQ(1U,",
          "2972:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2970:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2974:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "2976:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2977:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2978:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2980:   per_try_timeout_->invokeCallback();",
          "2982:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2979:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2983:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "2984:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder2, Http::Protocol::Http10);",
          "2986:   expectPerTryTimerCreate();",
          "2988:   EXPECT_EQ(2U,",
          "2989:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2987:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2991:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "3004:   Http::ResponseHeaderMapPtr response_headers(",
          "3005:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3008:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _))",
          "3009:       .WillOnce(Invoke([&](Http::ResponseHeaderMap& headers, bool) -> void {",
          "3010:         EXPECT_EQ(headers.Status()->value(), \"200\");",
          "",
          "[Removed Lines]",
          "3001:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "3007:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3005:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "3011:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3012:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "3026:   NiceMock<Http::MockRequestEncoder> encoder;",
          "3027:   Http::ResponseDecoder* response_decoder = nullptr;",
          "3029:   expectNewStreamWithImmediateEncoder(encoder, &response_decoder, Http::Protocol::Http10);",
          "3031:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3028:   router_.retry_425_response_ = true;",
          "",
          "[Added Lines]",
          "3033:   router_->retry_425_response_ = true;",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "3035:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "3036:   HttpTestUtility::addDefaultHeaders(headers);",
          "3039:   expectPerTryTimerCreate();",
          "3040:   expectResponseTimerCreate();",
          "3041:   Buffer::OwnedImpl body(\"test body\");",
          "3042:   EXPECT_CALL(encoder, encodeData(_, _));",
          "3043:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "3047:   EXPECT_CALL(",
          "3048:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3037:   router_.decodeHeaders(headers, false);",
          "3044:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "3045:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, true));",
          "",
          "[Added Lines]",
          "3042:   router_->decodeHeaders(headers, false);",
          "3049:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "3050:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, true));",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "3058:                            const Http::ConnectionPool::Instance::StreamOptions& options)",
          "3059:                            -> Http::ConnectionPool::Cancellable* {",
          "3060:         EXPECT_FALSE(options.can_send_early_data_);",
          "3062:         EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "3063:                     putResult(Upstream::Outlier::Result::LocalOriginConnectFailed, _));",
          "3064:         callbacks.onPoolFailure(ConnectionPool::PoolFailureReason::RemoteConnectionFailure,",
          "3065:                                 absl::string_view(), cm_.thread_local_cluster_.conn_pool_.host_);",
          "3066:         return nullptr;",
          "3067:       }));",
          "3069:               shouldRetryReset(_, /*http3_used=*/RetryState::Http3Used::Unknown, _))",
          "3070:       .WillOnce(Return(RetryStatus::NoRetryLimitExceeded));",
          "3071:   ON_CALL(callbacks_, decodingBuffer()).WillByDefault(Return(body_data.get()));",
          "3074:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "3061:         EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "3068:   EXPECT_CALL(*router_.retry_state_,",
          "3072:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "3066:         EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "3073:   EXPECT_CALL(*router_->retry_state_,",
          "3077:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "3083:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _))",
          "3084:       .WillOnce(Invoke([&](Http::ResponseHeaderMap& headers, bool) -> void {",
          "3085:         EXPECT_EQ(headers.Status()->value(), \"200\");",
          "",
          "[Removed Lines]",
          "3082:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "3087:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "3104:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3105:   HttpTestUtility::addDefaultHeaders(headers);",
          "3109:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "3110:               putResult(Upstream::Outlier::Result::LocalOriginConnectFailed, _));",
          "3111:   encoder1.stream_.resetStream(Http::StreamResetReason::LocalReset);",
          "",
          "[Removed Lines]",
          "3106:   router_.decodeHeaders(headers, true);",
          "3108:   router_.retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "3111:   router_->decodeHeaders(headers, true);",
          "3113:   router_->retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "3117:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "3118:   EXPECT_CALL(callbacks_.stream_info_,",
          "3119:               setResponseFlag(StreamInfo::ResponseFlag::NoHealthyUpstream));",
          "3121:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "3123:   EXPECT_EQ(1U,",
          "",
          "[Removed Lines]",
          "3120:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "3125:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "3134:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3135:   HttpTestUtility::addDefaultHeaders(headers);",
          "3138:   EXPECT_CALL(callbacks_, addDecodedData(_, _));",
          "3139:   Buffer::OwnedImpl body(\"test body\");",
          "3141:   EXPECT_EQ(1U,",
          "3142:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3145:       .WillOnce(Invoke([this](const Http::StreamResetReason, RetryState::Http3Used http3_used,",
          "3146:                               RetryState::DoRetryResetCallback callback) {",
          "3147:         EXPECT_EQ(RetryState::Http3Used::No, http3_used);",
          "3149:         return RetryStatus::Yes;",
          "3150:       }));",
          "3151:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3136:   router_.decodeHeaders(headers, false);",
          "3137:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3140:   router_.decodeData(body, true);",
          "3144:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(Http::StreamResetReason::RemoteReset, _, _))",
          "3148:         router_.retry_state_->callback_ = [callback]() { callback(/*disable_http3=*/false); };",
          "",
          "[Added Lines]",
          "3141:   router_->decodeHeaders(headers, false);",
          "3142:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3145:   router_->decodeData(body, true);",
          "3149:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(Http::StreamResetReason::RemoteReset, _, _))",
          "3153:         router_->retry_state_->callback_ = [callback]() { callback(/*disable_http3=*/false); };",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "3169:             return nullptr;",
          "3170:           }));",
          "3173:   EXPECT_EQ(2U,",
          "3174:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3175:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "3179:   Http::ResponseHeaderMapPtr response_headers(",
          "3180:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3181:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3172:   router_.retry_state_->callback_();",
          "3178:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3177:   router_->retry_state_->callback_();",
          "3183:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3184:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "3187: TEST_F(RouterTest, RetryHttp3UpstreamReset) {",
          "3188:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "3189:   Http::ResponseDecoder* response_decoder = nullptr;",
          "3191:   expectNewStreamWithImmediateEncoder(encoder1, &response_decoder, Http::Protocol::Http3);",
          "3192:   expectResponseTimerCreate();",
          "3194:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3195:   HttpTestUtility::addDefaultHeaders(headers);",
          "3198:   EXPECT_CALL(callbacks_, addDecodedData(_, _));",
          "3199:   Buffer::OwnedImpl body(\"test body\");",
          "3201:   EXPECT_EQ(1U,",
          "3202:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3204:       .WillOnce(Invoke([this](const Http::StreamResetReason, RetryState::Http3Used http3_used,",
          "3205:                               RetryState::DoRetryResetCallback callback) {",
          "3206:         EXPECT_EQ(RetryState::Http3Used::Yes, http3_used);",
          "3208:         return RetryStatus::Yes;",
          "3209:       }));",
          "",
          "[Removed Lines]",
          "3190:   router_.retry_425_response_ = true;",
          "3196:   router_.decodeHeaders(headers, false);",
          "3197:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3200:   router_.decodeData(body, true);",
          "3203:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(Http::StreamResetReason::RemoteReset, _, _))",
          "3207:         router_.retry_state_->callback_ = [callback]() { callback(/*disable_http3=*/true); };",
          "",
          "[Added Lines]",
          "3196:   router_->retry_425_response_ = true;",
          "3202:   router_->decodeHeaders(headers, false);",
          "3203:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3206:   router_->decodeData(body, true);",
          "3209:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(Http::StreamResetReason::RemoteReset, _, _))",
          "3213:         router_->retry_state_->callback_ = [callback]() { callback(/*disable_http3=*/true); };",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "3230:             return nullptr;",
          "3231:           }));",
          "3234:   EXPECT_EQ(2U,",
          "3235:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3236:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "3240:   Http::ResponseHeaderMapPtr response_headers(",
          "3241:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3242:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3233:   router_.retry_state_->callback_();",
          "3239:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3239:   router_->retry_state_->callback_();",
          "3245:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3246:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "3254:   EXPECT_CALL(callbacks_.route_->route_entry_, retryShadowBufferLimit()).WillOnce(Return(0));",
          "3255:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3256:   HttpTestUtility::addDefaultHeaders(headers);",
          "3260:   EXPECT_CALL(callbacks_, addDecodedData(_, _)).Times(0);",
          "3261:   Buffer::OwnedImpl body(\"t\");",
          "3263:   EXPECT_EQ(1U,",
          "3264:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "3257:   router_.decodeHeaders(headers, false);",
          "3259:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3262:   router_.decodeData(body, false);",
          "",
          "[Added Lines]",
          "3264:   router_->decodeHeaders(headers, false);",
          "3266:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3269:   router_->decodeData(body, false);",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "3280:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "3281:                      -> Http::ConnectionPool::Cancellable* {",
          "3282:             response_decoder = &decoder;",
          "3284:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "3285:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "3286:             return nullptr;",
          "",
          "[Removed Lines]",
          "3283:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "3290:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "3293:                                          {\"x-envoy-internal\", \"true\"},",
          "3294:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "3295:   HttpTestUtility::addDefaultHeaders(headers);",
          "3297:   EXPECT_EQ(1U,",
          "3298:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3301:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "3302:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "3303:   per_try_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "3296:   router_.decodeHeaders(headers, true);",
          "3300:   router_.retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "3303:   router_->decodeHeaders(headers, true);",
          "3307:   router_->retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "3307:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "3309:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "3310:       .WillOnce(",
          "3311:           Invoke([&](Http::ResponseDecoder& decoder, Http::ConnectionPool::Callbacks& callbacks,",
          "",
          "[Removed Lines]",
          "3308:   EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "3315:   EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "3321:           }));",
          "3323:   expectPerTryTimerCreate();",
          "3325:   EXPECT_EQ(2U,",
          "3326:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3330:   Http::ResponseHeaderMapPtr response_headers(",
          "3331:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3332:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3324:   router_.retry_state_->callback_();",
          "3329:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3331:   router_->retry_state_->callback_();",
          "3336:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3337:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "3352:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3353:   HttpTestUtility::addDefaultHeaders(headers);",
          "3360:   conn_pool_callbacks->onPoolFailure(ConnectionPool::PoolFailureReason::RemoteConnectionFailure,",
          "3361:                                      absl::string_view(), nullptr);",
          "",
          "[Removed Lines]",
          "3354:   router_.decodeHeaders(headers, true);",
          "3356:   EXPECT_CALL(*router_.retry_state_, onHostAttempted(_)).Times(0);",
          "3358:   router_.retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "3362:   router_->decodeHeaders(headers, true);",
          "3364:   EXPECT_CALL(*router_->retry_state_, onHostAttempted(_)).Times(0);",
          "3366:   router_->retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "3372:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "3373:                      -> Http::ConnectionPool::Cancellable* {",
          "3374:             response_decoder = &decoder;",
          "3376:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "3377:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "3378:             return nullptr;",
          "3379:           }));",
          "3382:   EXPECT_EQ(1U,",
          "3383:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3387:   Http::ResponseHeaderMapPtr response_headers(",
          "3388:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3389:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3375:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "3381:   router_.retry_state_->callback_();",
          "3386:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3383:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "3389:   router_->retry_state_->callback_();",
          "3394:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3395:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "3403:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-internal\", \"true\"},",
          "3404:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "3405:   HttpTestUtility::addDefaultHeaders(headers);",
          "3407:   EXPECT_EQ(1U,",
          "3408:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3412:   EXPECT_CALL(callbacks_, encodeHeaders_(_, false));",
          "3413:   Http::ResponseHeaderMapPtr response_headers(",
          "3414:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "3406:   router_.decodeHeaders(headers, true);",
          "3411:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3415:   router_->decodeHeaders(headers, true);",
          "3420:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3421:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "3437:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3438:   HttpTestUtility::addDefaultHeaders(headers);",
          "3440:   EXPECT_EQ(1U,",
          "3441:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3445:   EXPECT_CALL(callbacks_, encodeHeaders_(_, false));",
          "3446:   Http::ResponseHeaderMapPtr response_headers(",
          "3447:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "3439:   router_.decodeHeaders(headers, true);",
          "3444:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3449:   router_->decodeHeaders(headers, true);",
          "3454:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3455:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "3475:   Http::TestRequestHeaderMapImpl headers;",
          "3476:   HttpTestUtility::addDefaultHeaders(headers);",
          "3478:   EXPECT_EQ(1U,",
          "3479:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "3477:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "3488:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "3528:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3529:   HttpTestUtility::addDefaultHeaders(headers);",
          "3531:   EXPECT_EQ(1U,",
          "3532:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3538:   EXPECT_CALL(callbacks_, encode1xxHeaders_(_));",
          "3539:   Http::ResponseHeaderMapPtr continue_headers(",
          "3540:       new Http::TestResponseHeaderMapImpl{{\":status\", \"100\"}});",
          "",
          "[Removed Lines]",
          "3530:   router_.decodeHeaders(headers, true);",
          "3536:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "3537:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "3541:   router_->decodeHeaders(headers, true);",
          "3547:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "3548:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "3560:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3561:   HttpTestUtility::addDefaultHeaders(headers);",
          "3563:   EXPECT_EQ(1U,",
          "3564:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3568:   Http::ResponseHeaderMapPtr response_headers1(",
          "3569:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3570:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3562:   router_.decodeHeaders(headers, true);",
          "3567:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3573:   router_->decodeHeaders(headers, true);",
          "3578:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "3577:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "3578:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "3581:   EXPECT_EQ(2U,",
          "3582:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3586:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "3587:       .Times(0);",
          "3588:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "3580:   router_.retry_state_->callback_();",
          "3585:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3591:   router_->retry_state_->callback_();",
          "3596:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3597:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "3603:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3604:   HttpTestUtility::addDefaultHeaders(headers);",
          "3606:   EXPECT_EQ(1U,",
          "3607:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3611:   Http::ResponseHeaderMapPtr response_headers1(",
          "3612:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3613:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3605:   router_.decodeHeaders(headers, true);",
          "3610:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3617:   router_->decodeHeaders(headers, true);",
          "3622:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "3640:   Http::TestRequestHeaderMapImpl headers;",
          "3641:   HttpTestUtility::addDefaultHeaders(headers);",
          "3643:   max_stream_duration_timer_->invokeCallback();",
          "3646:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "3647: }",
          "",
          "[Removed Lines]",
          "3642:   router_.decodeHeaders(headers, false);",
          "3645:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "3654:   router_->decodeHeaders(headers, false);",
          "3657:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "3658:   Http::TestRequestHeaderMapImpl headers;",
          "3659:   HttpTestUtility::addDefaultHeaders(headers);",
          "3663:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "3664: }",
          "",
          "[Removed Lines]",
          "3660:   router_.decodeHeaders(headers, false);",
          "3662:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "3672:   router_->decodeHeaders(headers, false);",
          "3674:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "3674:   Http::TestRequestHeaderMapImpl headers;",
          "3675:   HttpTestUtility::addDefaultHeaders(headers);",
          "3679:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "3680: }",
          "",
          "[Removed Lines]",
          "3676:   router_.decodeHeaders(headers, false);",
          "3678:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "3688:   router_->decodeHeaders(headers, false);",
          "3690:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "3690:   Http::TestRequestHeaderMapImpl headers;",
          "3691:   HttpTestUtility::addDefaultHeaders(headers);",
          "3693:   Http::ResponseHeaderMapPtr response_headers(",
          "3694:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3695:   response_decoder->decodeHeaders(std::move(response_headers), false);",
          "3696:   max_stream_duration_timer_->invokeCallback();",
          "3699:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "3700: }",
          "",
          "[Removed Lines]",
          "3692:   router_.decodeHeaders(headers, false);",
          "3698:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "3704:   router_->decodeHeaders(headers, false);",
          "3710:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "3711:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"reset\"},",
          "3712:                                          {\"x-envoy-internal\", \"true\"}};",
          "3713:   HttpTestUtility::addDefaultHeaders(headers);",
          "3717:   max_stream_duration_timer_->invokeCallback();",
          "",
          "[Removed Lines]",
          "3714:   router_.decodeHeaders(headers, false);",
          "3716:   router_.retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "3726:   router_->decodeHeaders(headers, false);",
          "3728:   router_->retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "3722:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "3724:   expectMaxStreamDurationTimerCreate(std::chrono::milliseconds(500));",
          "3728:   Http::ResponseHeaderMapPtr response_headers(",
          "3729:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3730:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "",
          "[Removed Lines]",
          "3725:   router_.retry_state_->callback_();",
          "3727:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3737:   router_->retry_state_->callback_();",
          "3739:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3740:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "3740:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3741:   HttpTestUtility::addDefaultHeaders(headers);",
          "3743:   EXPECT_EQ(1U,",
          "3744:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3748:   Http::ResponseHeaderMapPtr response_headers1(",
          "3749:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3750:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3742:   router_.decodeHeaders(headers, true);",
          "3747:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3755:   router_->decodeHeaders(headers, true);",
          "3760:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "3760:         response_decoder = &decoder;",
          "3761:         return &cancellable;",
          "3762:       }));",
          "3766:   EXPECT_CALL(cancellable, cancel(_));",
          "",
          "[Removed Lines]",
          "3763:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "3776:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "3792:                                          {\"x-envoy-internal\", \"true\"},",
          "3793:                                          {\"x-envoy-upstream-rq-timeout-alt-response\", \"204\"}};",
          "3794:   HttpTestUtility::addDefaultHeaders(headers);",
          "3796:   EXPECT_EQ(1U,",
          "3797:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3801:   Http::ResponseHeaderMapPtr response_headers1(",
          "3802:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3803:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3795:   router_.decodeHeaders(headers, true);",
          "3800:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3808:   router_->decodeHeaders(headers, true);",
          "3813:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "3813:         response_decoder = &decoder;",
          "3814:         return &cancellable;",
          "3815:       }));",
          "3819:   EXPECT_CALL(cancellable, cancel(_));",
          "",
          "[Removed Lines]",
          "3816:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "3829:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "3840:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3841:   HttpTestUtility::addDefaultHeaders(headers);",
          "3844:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "3846:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "3849:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "3851:   EXPECT_EQ(1U,",
          "3852:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3856:   Http::ResponseHeaderMapPtr response_headers1(",
          "3857:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3858:   EXPECT_CALL(encoder1.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "",
          "[Removed Lines]",
          "3842:   router_.decodeHeaders(headers, false);",
          "3845:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3847:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "3850:   router_.decodeTrailers(trailers);",
          "3855:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3855:   router_->decodeHeaders(headers, false);",
          "3858:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3860:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "3863:   router_->decodeTrailers(trailers);",
          "3868:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "3869:   EXPECT_CALL(encoder2, encodeHeaders(_, false));",
          "3870:   EXPECT_CALL(encoder2, encodeData(_, false));",
          "3871:   EXPECT_CALL(encoder2, encodeTrailers(_));",
          "3873:   EXPECT_EQ(2U,",
          "3874:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3878:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "3879:               putHttpResponseCode(200));",
          "3880:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_, putResponseTime(_));",
          "",
          "[Removed Lines]",
          "3872:   router_.retry_state_->callback_();",
          "3877:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3885:   router_->retry_state_->callback_();",
          "3890:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3891:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "3913:                                          {\"content-type\", \"application/grpc\"},",
          "3914:                                          {\"grpc-timeout\", \"20S\"}};",
          "3915:   HttpTestUtility::addDefaultHeaders(headers);",
          "3917:   EXPECT_EQ(1U,",
          "3918:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3922:   Http::ResponseHeaderMapPtr response_headers1(",
          "3923:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}, {\"grpc-status\", \"1\"}});",
          "3924:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3916:   router_.decodeHeaders(headers, true);",
          "3921:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3930:   router_->decodeHeaders(headers, true);",
          "3935:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "3931:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "3932:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "3935:   EXPECT_EQ(2U,",
          "3936:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3940:   Http::ResponseHeaderMapPtr response_headers(",
          "3941:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}, {\"grpc-status\", \"0\"}});",
          "3942:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3934:   router_.retry_state_->callback_();",
          "3939:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3948:   router_->retry_state_->callback_();",
          "3953:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3954:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "3950: TEST_F(RouterTest, RetryRespectsMaxHostSelectionCount) {",
          "3953:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "3954:   Http::ResponseDecoder* response_decoder = nullptr;",
          "",
          "[Removed Lines]",
          "3951:   router_.reject_all_hosts_ = true;",
          "",
          "[Added Lines]",
          "3966:   router_->reject_all_hosts_ = true;",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "3959:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3960:   HttpTestUtility::addDefaultHeaders(headers);",
          "3967:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "3969:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "3972:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "3974:   EXPECT_EQ(1U,",
          "3975:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3979:   Http::ResponseHeaderMapPtr response_headers1(",
          "3980:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3981:   EXPECT_CALL(encoder1.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "",
          "[Removed Lines]",
          "3961:   router_.decodeHeaders(headers, false);",
          "3963:   ON_CALL(*router_.retry_state_, hostSelectionMaxAttempts()).WillByDefault(Return(3));",
          "3965:   EXPECT_EQ(1, router_.hostSelectionRetryCount());",
          "3968:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3970:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "3973:   router_.decodeTrailers(trailers);",
          "3978:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3976:   router_->decodeHeaders(headers, false);",
          "3978:   ON_CALL(*router_->retry_state_, hostSelectionMaxAttempts()).WillByDefault(Return(3));",
          "3980:   EXPECT_EQ(1, router_->hostSelectionRetryCount());",
          "3983:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3985:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "3988:   router_->decodeTrailers(trailers);",
          "3993:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "3992:   EXPECT_CALL(encoder2, encodeHeaders(_, false));",
          "3993:   EXPECT_CALL(encoder2, encodeData(_, false));",
          "3994:   EXPECT_CALL(encoder2, encodeTrailers(_));",
          "3996:   EXPECT_EQ(2U,",
          "3997:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4004:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "4005:       .Times(0);",
          "4006:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "3995:   router_.retry_state_->callback_();",
          "4000:   EXPECT_EQ(3, router_.hostSelectionRetryCount());",
          "4003:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "4010:   router_->retry_state_->callback_();",
          "4015:   EXPECT_EQ(3, router_->hostSelectionRetryCount());",
          "4018:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "4019:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "4016: TEST_F(RouterTest, RetryRespectsRetryHostPredicate) {",
          "4019:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "4020:   Http::ResponseDecoder* response_decoder = nullptr;",
          "",
          "[Removed Lines]",
          "4017:   router_.reject_all_hosts_ = true;",
          "",
          "[Added Lines]",
          "4033:   router_->reject_all_hosts_ = true;",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "4025:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "4026:   HttpTestUtility::addDefaultHeaders(headers);",
          "4029:   NiceMock<Upstream::MockHost> host;",
          "4033:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4035:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4038:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4040:   EXPECT_EQ(1U,",
          "4041:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4045:   Http::ResponseHeaderMapPtr response_headers1(",
          "4046:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "4047:   EXPECT_CALL(encoder1.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "",
          "[Removed Lines]",
          "4027:   router_.decodeHeaders(headers, false);",
          "4031:   EXPECT_FALSE(router_.shouldSelectAnotherHost(host));",
          "4034:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "4036:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "4039:   router_.decodeTrailers(trailers);",
          "4044:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "4043:   router_->decodeHeaders(headers, false);",
          "4047:   EXPECT_FALSE(router_->shouldSelectAnotherHost(host));",
          "4050:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "4052:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4055:   router_->decodeTrailers(trailers);",
          "4060:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "4058:   EXPECT_CALL(encoder2, encodeHeaders(_, false));",
          "4059:   EXPECT_CALL(encoder2, encodeData(_, false));",
          "4060:   EXPECT_CALL(encoder2, encodeTrailers(_));",
          "4062:   EXPECT_EQ(2U,",
          "4063:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4070:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "4071:       .Times(0);",
          "4072:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "4061:   router_.retry_state_->callback_();",
          "4066:   EXPECT_TRUE(router_.shouldSelectAnotherHost(host));",
          "4069:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "4077:   router_->retry_state_->callback_();",
          "4082:   EXPECT_TRUE(router_->shouldSelectAnotherHost(host));",
          "4085:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "4086:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "4171:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"random_fake_data\"));",
          "4172:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4175:   EXPECT_CALL(callbacks_.downstream_callbacks_, clearRouteCache());",
          "4176:   EXPECT_CALL(callbacks_, recreateStream(_)).WillOnce(Return(true));",
          "",
          "[Removed Lines]",
          "4173:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, true));",
          "",
          "[Added Lines]",
          "4190:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, true));",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "4186:                     .value());",
          "4190:   EXPECT_EQ(1, callbacks_.streamInfo()",
          "4191:                    .filterState()",
          "4192:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "",
          "[Removed Lines]",
          "4189:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4206:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "4249:                     .value());",
          "4253:   EXPECT_EQ(3, callbacks_.streamInfo()",
          "4254:                    .filterState()",
          "4255:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "",
          "[Removed Lines]",
          "4252:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4269:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "4278:                     .value());",
          "4282:   EXPECT_EQ(1, callbacks_.streamInfo()",
          "4283:                    .filterState()",
          "4284:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "",
          "[Removed Lines]",
          "4281:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4298:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "4300:                     .value());",
          "4304:   EXPECT_EQ(\"/\", default_request_headers_.getPathValue());",
          "4305: }",
          "",
          "[Removed Lines]",
          "4303:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4320:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "4322:                     .value());",
          "4326:   EXPECT_EQ(\"/#fragment\", default_request_headers_.getPathValue());",
          "4327: }",
          "",
          "[Removed Lines]",
          "4325:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4342:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "4344:                     .value());",
          "4348: }",
          "4350: TEST_F(RouterTest, CrossSchemeRedirectAllowedByPolicy) {",
          "",
          "[Removed Lines]",
          "4347:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4364:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "4367:                     .value());",
          "4371: }",
          "4373: namespace {",
          "",
          "[Removed Lines]",
          "4370:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4387:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "4394: } // namespace",
          "4397:   ShadowPolicyPtr policy = makeShadowPolicy(\"\", \"some_header\", \"bar\");",
          "4398:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4399:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "",
          "[Removed Lines]",
          "4396: TEST_F(RouterTest, ShadowWithClusterHeader) {",
          "",
          "[Added Lines]",
          "4413: class RouterShadowingTest : public RouterTest, public testing::WithParamInterface<bool> {",
          "4414: public:",
          "4415:   RouterShadowingTest() : streaming_shadow_(GetParam()) {",
          "4416:     scoped_runtime_.mergeValues(",
          "4417:         {{\"envoy.reloadable_features.streaming_shadow\", streaming_shadow_ ? \"true\" : \"false\"}});",
          "4419:     router_ = std::make_unique<RouterTestFilter>(config_, config_.default_stats_);",
          "4420:     router_->setDecoderFilterCallbacks(callbacks_);",
          "4421:     router_->downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "4422:         ->setLocalAddress(host_address_);",
          "4423:     router_->downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "4424:         ->setRemoteAddress(Network::Utility::parseInternetAddressAndPort(\"1.2.3.4:80\"));",
          "4425:   }",
          "4427: protected:",
          "4428:   bool streaming_shadow_;",
          "4429:   TestScopedRuntime scoped_runtime_;",
          "4430: };",
          "4432: INSTANTIATE_TEST_SUITE_P(StreamingShadow, RouterShadowingTest, testing::Bool());",
          "4434: TEST_P(RouterShadowingTest, BufferingShadowWithClusterHeader) {",
          "4435:   if (streaming_shadow_) {",
          "4436:     GTEST_SKIP();",
          "4437:   }",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "4413:   HttpTestUtility::addDefaultHeaders(headers);",
          "4414:   headers.addCopy(\"some_header\", \"some_cluster\");",
          "4418:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4419:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4422:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4423:   EXPECT_CALL(callbacks_, decodingBuffer())",
          "4424:       .Times(AtLeast(2))",
          "4425:       .WillRepeatedly(Return(body_data.get()));",
          "4427:   EXPECT_CALL(*shadow_writer_, shadow_(\"some_cluster\", _, _))",
          "4428:       .WillOnce(Invoke([](const std::string&, Http::RequestMessagePtr& request,",
          "4429:                           const Http::AsyncClient::RequestOptions& options) -> void {",
          "",
          "[Removed Lines]",
          "4416:   router_.decodeHeaders(headers, false);",
          "4420:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "",
          "[Added Lines]",
          "4457:   router_->decodeHeaders(headers, false);",
          "4463:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "4432:         EXPECT_EQ(absl::optional<std::chrono::milliseconds>(10), options.timeout);",
          "4433:         EXPECT_TRUE(options.sampled_.value());",
          "4434:       }));",
          "4436:   EXPECT_EQ(1U,",
          "4437:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4435:   router_.decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "4478:   router_->decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "4442:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4443: }",
          "4446:   ShadowPolicyPtr policy = makeShadowPolicy(\"\", \"some_header\", \"bar\");",
          "4447:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4448:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "",
          "[Removed Lines]",
          "4445: TEST_F(RouterTest, ShadowNoClusterHeaderInHeader) {",
          "",
          "[Added Lines]",
          "4488: TEST_P(RouterShadowingTest, ShadowNoClusterHeaderInHeader) {",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "4460:   expectResponseTimerCreate();",
          "4461:   Http::TestRequestHeaderMapImpl headers;",
          "4462:   HttpTestUtility::addDefaultHeaders(headers);",
          "4465:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4469:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4471:   EXPECT_EQ(1U,",
          "4472:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4463:   router_.decodeHeaders(headers, false);",
          "4466:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4467:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "4470:   router_.decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "4506:   EXPECT_CALL(*shadow_writer_, streamingShadow_(_, _, _)).Times(0);",
          "4507:   router_->decodeHeaders(headers, false);",
          "4510:   if (!streaming_shadow_) {",
          "4511:     EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4512:   }",
          "4513:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4516:   router_->decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "4479:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4480: }",
          "4483:   ShadowPolicyPtr policy = makeShadowPolicy(\"\", \"some_header\", \"bar\");",
          "4484:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4485:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "",
          "[Removed Lines]",
          "4482: TEST_F(RouterTest, ShadowClusterNameEmptyInHeader) {",
          "",
          "[Added Lines]",
          "4528: TEST_P(RouterShadowingTest, ShadowClusterNameEmptyInHeader) {",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "4498:   Http::TestRequestHeaderMapImpl headers;",
          "4499:   HttpTestUtility::addDefaultHeaders(headers);",
          "4500:   headers.addCopy(\"some_header\", \"\");",
          "4503:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4507:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4509:   EXPECT_EQ(1U,",
          "4510:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4501:   router_.decodeHeaders(headers, false);",
          "4504:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4505:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "4508:   router_.decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "4547:   EXPECT_CALL(*shadow_writer_, streamingShadow_(_, _, _)).Times(0);",
          "4548:   router_->decodeHeaders(headers, false);",
          "4551:   if (!streaming_shadow_) {",
          "4552:     EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4553:   }",
          "4554:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4557:   router_->decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 181 ---",
          "[Context before]",
          "4516:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4517: }",
          "4520:   ShadowPolicyPtr policy = makeShadowPolicy(\"foo\", \"\", \"bar\");",
          "4521:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4522:   policy = makeShadowPolicy(\"fizz\", \"\", \"buzz\", envoy::type::v3::FractionalPercent(), false);",
          "",
          "[Removed Lines]",
          "4519: TEST_F(RouterTest, Shadow) {",
          "",
          "[Added Lines]",
          "4568: TEST_P(RouterShadowingTest, StreamingShadow) {",
          "4569:   if (!streaming_shadow_) {",
          "4570:     GTEST_SKIP();",
          "4571:   }",
          "4572:   ShadowPolicyPtr policy = makeShadowPolicy(\"foo\", \"\", \"bar\");",
          "4573:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4574:   policy = makeShadowPolicy(\"fizz\", \"\", \"buzz\", envoy::type::v3::FractionalPercent(), false);",
          "4575:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4576:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "4578:   NiceMock<Http::MockRequestEncoder> encoder;",
          "4579:   Http::ResponseDecoder* response_decoder = nullptr;",
          "4580:   expectNewStreamWithImmediateEncoder(encoder, &response_decoder, Http::Protocol::Http10);",
          "4582:   expectResponseTimerCreate();",
          "4584:   EXPECT_CALL(",
          "4585:       runtime_.snapshot_,",
          "4586:       featureEnabled(\"bar\", testing::Matcher<const envoy::type::v3::FractionalPercent&>(Percent(0)),",
          "4587:                      43))",
          "4588:       .WillOnce(Return(true));",
          "4589:   EXPECT_CALL(",
          "4590:       runtime_.snapshot_,",
          "4591:       featureEnabled(\"buzz\",",
          "4592:                      testing::Matcher<const envoy::type::v3::FractionalPercent&>(Percent(0)), 43))",
          "4593:       .WillOnce(Return(true));",
          "4595:   Http::TestRequestHeaderMapImpl headers;",
          "4596:   HttpTestUtility::addDefaultHeaders(headers);",
          "4597:   NiceMock<Http::MockAsyncClient> foo_client;",
          "4598:   NiceMock<Http::MockAsyncClientOngoingRequest> foo_request(&foo_client);",
          "4599:   EXPECT_CALL(*shadow_writer_, streamingShadow_(\"foo\", _, _))",
          "4600:       .WillOnce(Invoke([&](const std::string&, Http::RequestHeaderMapPtr&,",
          "4601:                            const Http::AsyncClient::RequestOptions& options) {",
          "4602:         EXPECT_EQ(absl::optional<std::chrono::milliseconds>(10), options.timeout);",
          "4603:         EXPECT_TRUE(options.sampled_.value());",
          "4604:         return &foo_request;",
          "4605:       }));",
          "4606:   NiceMock<Http::MockAsyncClient> fizz_client;",
          "4607:   NiceMock<Http::MockAsyncClientOngoingRequest> fizz_request(&fizz_client);",
          "4608:   EXPECT_CALL(*shadow_writer_, streamingShadow_(\"fizz\", _, _))",
          "4609:       .Times(1)",
          "4610:       .WillOnce(Invoke([&](const std::string&, Http::RequestHeaderMapPtr&,",
          "4611:                            const Http::AsyncClient::RequestOptions& options) {",
          "4612:         EXPECT_EQ(absl::optional<std::chrono::milliseconds>(10), options.timeout);",
          "4613:         EXPECT_FALSE(options.sampled_.value());",
          "4614:         return &fizz_request;",
          "4615:       }));",
          "4616:   router_->decodeHeaders(headers, false);",
          "4618:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4619:   EXPECT_CALL(callbacks_, addDecodedData(_, _)).Times(0);",
          "4620:   EXPECT_CALL(foo_request, sendData(BufferStringEqual(\"hello\"), false));",
          "4621:   EXPECT_CALL(fizz_request, sendData(BufferStringEqual(\"hello\"), false));",
          "4622:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4624:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4625:   EXPECT_CALL(callbacks_, decodingBuffer()).Times(0);",
          "4626:   EXPECT_CALL(foo_request, captureAndSendTrailers_(Http::HeaderValueOf(\"some\", \"trailer\")));",
          "4627:   EXPECT_CALL(fizz_request, captureAndSendTrailers_(Http::HeaderValueOf(\"some\", \"trailer\")));",
          "4628:   router_->decodeTrailers(trailers);",
          "4629:   EXPECT_EQ(1U,",
          "4630:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4632:   Http::ResponseHeaderMapPtr response_headers(",
          "4633:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "4634:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "4635:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4636: }",
          "4638: TEST_P(RouterShadowingTest, BufferingShadow) {",
          "4639:   if (streaming_shadow_) {",
          "4640:     GTEST_SKIP();",
          "4641:   }",
          "",
          "---------------",
          "--- Hunk 182 ---",
          "[Context before]",
          "4543:   Http::TestRequestHeaderMapImpl headers;",
          "4544:   HttpTestUtility::addDefaultHeaders(headers);",
          "4547:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4548:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4551:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4552:   EXPECT_CALL(callbacks_, decodingBuffer())",
          "",
          "[Removed Lines]",
          "4545:   router_.decodeHeaders(headers, false);",
          "4549:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "",
          "[Added Lines]",
          "4667:   router_->decodeHeaders(headers, false);",
          "4671:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "",
          "---------------",
          "--- Hunk 183 ---",
          "[Context before]",
          "4568:         EXPECT_EQ(absl::optional<std::chrono::milliseconds>(10), options.timeout);",
          "4569:         EXPECT_FALSE(options.sampled_.value());",
          "4570:       }));",
          "4572:   EXPECT_EQ(1U,",
          "4573:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4571:   router_.decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "4693:   router_->decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 184 ---",
          "[Context before]",
          "4578:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4579: }",
          "4582:   ShadowPolicyPtr policy = makeShadowPolicy(\"foo\");",
          "4583:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4584:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "",
          "[Removed Lines]",
          "4581: TEST_F(RouterTest, NoShadowForConnect) {",
          "",
          "[Added Lines]",
          "4703: TEST_P(RouterShadowingTest, NoShadowForConnect) {",
          "",
          "---------------",
          "--- Hunk 185 ---",
          "[Context before]",
          "4586:   Http::TestRequestHeaderMapImpl headers;",
          "4587:   HttpTestUtility::addDefaultHeaders(headers);",
          "4588:   headers.setMethod(\"CONNECT\");",
          "4591:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4592:   EXPECT_CALL(callbacks_, addDecodedData(_, true)).Times(0);",
          "4596: }",
          "4598: TEST_F(RouterTest, AltStatName) {",
          "",
          "[Removed Lines]",
          "4589:   router_.decodeHeaders(headers, false);",
          "4593:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "4595:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4711:   router_->decodeHeaders(headers, false);",
          "4715:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4717:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 186 ---",
          "[Context before]",
          "4608:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-alt-stat-name\", \"alt_stat\"},",
          "4609:                                          {\"x-envoy-internal\", \"true\"}};",
          "4610:   HttpTestUtility::addDefaultHeaders(headers);",
          "4612:   EXPECT_EQ(1U,",
          "4613:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4611:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4733:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 187 ---",
          "[Context before]",
          "4657:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4658:   Http::TestRequestHeaderMapImpl headers;",
          "4659:   HttpTestUtility::addDefaultHeaders(headers);",
          "4661:   EXPECT_EQ(0U,",
          "4662:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4663:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "",
          "[Removed Lines]",
          "4660:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4782:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 188 ---",
          "[Context before]",
          "4681:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4682:   Http::TestRequestHeaderMapImpl headers;",
          "4683:   HttpTestUtility::addDefaultHeaders(headers);",
          "4685:   EXPECT_EQ(0U,",
          "4686:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4687:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "",
          "[Removed Lines]",
          "4684:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4806:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 189 ---",
          "[Context before]",
          "4702:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4703:   Http::TestRequestHeaderMapImpl headers;",
          "4704:   HttpTestUtility::addDefaultHeaders(headers);",
          "4706:   EXPECT_EQ(0U,",
          "4707:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4708:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "4709:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "4711: }",
          "4713: TEST_F(RouterTest, DirectResponseWithBody) {",
          "",
          "[Removed Lines]",
          "4705:   router_.decodeHeaders(headers, true);",
          "4710:   EXPECT_EQ(1UL, router_.stats().rq_direct_response_.value());",
          "",
          "[Added Lines]",
          "4827:   router_->decodeHeaders(headers, true);",
          "4832:   EXPECT_EQ(1UL, router_->stats().rq_direct_response_.value());",
          "",
          "---------------",
          "--- Hunk 190 ---",
          "[Context before]",
          "4727:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "4728:   Http::TestRequestHeaderMapImpl headers;",
          "4729:   HttpTestUtility::addDefaultHeaders(headers);",
          "4731:   EXPECT_EQ(0U,",
          "4732:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4733:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "4734:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "4736: }",
          "4738: TEST_F(RouterTest, DirectResponseWithLocation) {",
          "",
          "[Removed Lines]",
          "4730:   router_.decodeHeaders(headers, true);",
          "4735:   EXPECT_EQ(1UL, router_.stats().rq_direct_response_.value());",
          "",
          "[Added Lines]",
          "4852:   router_->decodeHeaders(headers, true);",
          "4857:   EXPECT_EQ(1UL, router_->stats().rq_direct_response_.value());",
          "",
          "---------------",
          "--- Hunk 191 ---",
          "[Context before]",
          "4751:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4752:   Http::TestRequestHeaderMapImpl headers;",
          "4753:   HttpTestUtility::addDefaultHeaders(headers);",
          "4755:   EXPECT_EQ(0U,",
          "4756:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4757:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "4758:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "4760: }",
          "4762: TEST_F(RouterTest, DirectResponseWithoutLocation) {",
          "",
          "[Removed Lines]",
          "4754:   router_.decodeHeaders(headers, true);",
          "4759:   EXPECT_EQ(1UL, router_.stats().rq_direct_response_.value());",
          "",
          "[Added Lines]",
          "4876:   router_->decodeHeaders(headers, true);",
          "4881:   EXPECT_EQ(1UL, router_->stats().rq_direct_response_.value());",
          "",
          "---------------",
          "--- Hunk 192 ---",
          "[Context before]",
          "4774:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4775:   Http::TestRequestHeaderMapImpl headers;",
          "4776:   HttpTestUtility::addDefaultHeaders(headers);",
          "4778:   EXPECT_EQ(0U,",
          "4779:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4780:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "4781:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "4783: }",
          "",
          "[Removed Lines]",
          "4777:   router_.decodeHeaders(headers, true);",
          "4782:   EXPECT_EQ(1UL, router_.stats().rq_direct_response_.value());",
          "",
          "[Added Lines]",
          "4899:   router_->decodeHeaders(headers, true);",
          "4904:   EXPECT_EQ(1UL, router_->stats().rq_direct_response_.value());",
          "",
          "---------------",
          "--- Hunk 193 ---",
          "[Context before]",
          "4792:   bool filter_state_verified = false;",
          "4794:       std::make_shared<TestAccessLog>([&](const auto& stream_info) {",
          "4795:         filter_state_verified =",
          "4796:             stream_info.upstreamInfo()->upstreamFilterState()->hasDataWithName(\"upstream data\");",
          "",
          "[Removed Lines]",
          "4793:   router_.config().upstream_logs_.push_back(",
          "",
          "[Added Lines]",
          "4915:   router_->config().upstream_logs_.push_back(",
          "",
          "---------------",
          "--- Hunk 194 ---",
          "[Context before]",
          "4805:   Http::TestRequestHeaderMapImpl headers{};",
          "4806:   HttpTestUtility::addDefaultHeaders(headers);",
          "4809:   Http::ResponseHeaderMapPtr response_headers(",
          "4810:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "4807:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4929:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 195 ---",
          "[Context before]",
          "4832:   Http::TestRequestHeaderMapImpl headers{};",
          "4833:   HttpTestUtility::addDefaultHeaders(headers);",
          "4835:   EXPECT_EQ(1U,",
          "4836:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4834:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4956:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 196 ---",
          "[Context before]",
          "4863:   Http::TestRequestHeaderMapImpl headers{};",
          "4864:   HttpTestUtility::addDefaultHeaders(headers);",
          "4867:   test_time_.advanceTimeWait(std::chrono::milliseconds(32));",
          "4868:   Buffer::OwnedImpl data;",
          "4870:   EXPECT_EQ(1U,",
          "4871:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4865:   router_.decodeHeaders(headers, false);",
          "4869:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "4987:   router_->decodeHeaders(headers, false);",
          "4991:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 197 ---",
          "[Context before]",
          "4917:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}};",
          "4918:   HttpTestUtility::addDefaultHeaders(headers);",
          "4923:   test_time_.advanceTimeWait(std::chrono::milliseconds(32));",
          "4924:   Buffer::OwnedImpl data;",
          "4926:   EXPECT_EQ(1U,",
          "4927:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4919:   router_.decodeHeaders(headers, false);",
          "4921:   router_.retry_state_->expectHeadersRetry();",
          "4925:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "5041:   router_->decodeHeaders(headers, false);",
          "5043:   router_->retry_state_->expectHeadersRetry();",
          "5047:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 198 ---",
          "[Context before]",
          "4936:   response_decoder->decodeHeaders(std::move(bad_response_headers), true);",
          "4940:   MonotonicTime retry_time = test_time_.monotonicTime();",
          "4942:   Http::ResponseHeaderMapPtr good_response_headers(",
          "",
          "[Removed Lines]",
          "4938:   router_.retry_state_->callback_();",
          "4939:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "5060:   router_->retry_state_->callback_();",
          "5061:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "5062:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 199 ---",
          "[Context before]",
          "4988:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"50\"}};",
          "4989:   HttpTestUtility::addDefaultHeaders(headers);",
          "4991:   auto& upstream_timing = stream_info.upstreamInfo()->upstreamTiming();",
          "4992:   EXPECT_FALSE(upstream_timing.last_upstream_rx_byte_received_.has_value());",
          "4994:   test_time_.advanceTimeWait(std::chrono::milliseconds(13));",
          "4995:   Buffer::OwnedImpl data;",
          "4997:   EXPECT_EQ(1U,",
          "4998:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4990:   router_.decodeHeaders(headers, false);",
          "4996:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "5113:   router_->decodeHeaders(headers, false);",
          "5119:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 200 ---",
          "[Context before]",
          "5599:   const absl::optional<std::string> virtual_cluster_name =",
          "5600:       absl::optional<std::string>(\"fake_virtual_cluster\");",
          "5601:   EXPECT_CALL(callbacks_.stream_info_, setVirtualClusterName(virtual_cluster_name));",
          "5603:   EXPECT_EQ(1U,",
          "5604:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "5602:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "5725:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 201 ---",
          "[Context before]",
          "5631:   const absl::optional<std::string> virtual_cluster_name =",
          "5632:       absl::optional<std::string>(\"fake_virtual_cluster\");",
          "5633:   EXPECT_CALL(callbacks_.stream_info_, setVirtualClusterName(virtual_cluster_name));",
          "5635:   EXPECT_EQ(1U,",
          "5636:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "5634:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "5757:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 202 ---",
          "[Context before]",
          "5678:       .WillOnce(InvokeWithoutArgs([] {}));",
          "5679:   EXPECT_CALL(callbacks_.route_->route_entry_, autoHostRewrite()).WillOnce(Return(true));",
          "5680:   EXPECT_CALL(callbacks_.route_->route_entry_, appendXfh()).WillOnce(Return(true));",
          "5682:   EXPECT_EQ(1U,",
          "5683:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "5685: }",
          "5687: TEST_F(RouterTest, AutoHostRewriteDisabled) {",
          "",
          "[Removed Lines]",
          "5681:   router_.decodeHeaders(incoming_headers, true);",
          "5684:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "5804:   router_->decodeHeaders(incoming_headers, true);",
          "5807:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 203 ---",
          "[Context before]",
          "5708:       }));",
          "5710:   EXPECT_CALL(callbacks_.route_->route_entry_, autoHostRewrite()).WillOnce(Return(false));",
          "5712:   EXPECT_EQ(1U,",
          "5713:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "5715: }",
          "5717: TEST_F(RouterTest, UpstreamSocketOptionsReturnedEmpty) {",
          "5719:   EXPECT_EQ(options.get(), nullptr);",
          "5720: }",
          "",
          "[Removed Lines]",
          "5711:   router_.decodeHeaders(incoming_headers, true);",
          "5714:   router_.onDestroy();",
          "5718:   auto options = router_.upstreamSocketOptions();",
          "",
          "[Added Lines]",
          "5834:   router_->decodeHeaders(incoming_headers, true);",
          "5837:   router_->onDestroy();",
          "5841:   auto options = router_->upstreamSocketOptions();",
          "",
          "---------------",
          "--- Hunk 204 ---",
          "[Context before]",
          "5729:   Http::TestRequestHeaderMapImpl headers;",
          "5730:   HttpTestUtility::addDefaultHeaders(headers);",
          "5731:   headers.setMethod(\"CONNECT\");",
          "5735:   EXPECT_EQ(expected_options->size(), options->size());",
          "5737:   for (size_t i = 0; i < 2; i++) {",
          "",
          "[Removed Lines]",
          "5732:   router_.decodeHeaders(headers, false);",
          "5734:   auto options = router_.upstreamSocketOptions();",
          "",
          "[Added Lines]",
          "5855:   router_->decodeHeaders(headers, false);",
          "5857:   auto options = router_->upstreamSocketOptions();",
          "",
          "---------------",
          "--- Hunk 205 ---",
          "[Context before]",
          "5741:     auto returned_details = options->at(i)->getOptionDetails(dummy_socket, state);",
          "5742:     EXPECT_TRUE(expected_details == returned_details);",
          "5743:   }",
          "5745: }",
          "5747: TEST_F(RouterTest, RedirectRecords) {",
          "",
          "[Removed Lines]",
          "5744:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "5867:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 206 ---",
          "[Context before]",
          "5749:   memcpy(redirect_records->buf_, reinterpret_cast<void*>(redirect_records_data_.data()),",
          "5750:          redirect_records_data_.size());",
          "5751:   redirect_records->buf_size_ = redirect_records_data_.size();",
          "5753:       Network::UpstreamSocketOptionsFilterState::key(),",
          "5754:       std::make_unique<Network::UpstreamSocketOptionsFilterState>(),",
          "5755:       StreamInfo::FilterState::StateType::Mutable, StreamInfo::FilterState::LifeSpan::Connection);",
          "5757:       ->getDataMutable<Network::UpstreamSocketOptionsFilterState>(",
          "5758:           Network::UpstreamSocketOptionsFilterState::key())",
          "5759:       ->addOption(Network::SocketOptionFactory::buildWFPRedirectRecordsOptions(*redirect_records));",
          "5760:   Http::TestRequestHeaderMapImpl headers;",
          "5761:   HttpTestUtility::addDefaultHeaders(headers);",
          "5762:   headers.setMethod(\"CONNECT\");",
          "5765:   Network::Socket::OptionsSharedPtr expected_options =",
          "5766:       Network::SocketOptionFactory::buildWFPRedirectRecordsOptions(*redirect_records);",
          "5768:   EXPECT_EQ(1, options->size());",
          "5770:   NiceMock<Network::MockConnectionSocket> dummy_socket;",
          "",
          "[Removed Lines]",
          "5752:   router_.downstream_connection_.stream_info_.filterState()->setData(",
          "5756:   router_.downstream_connection_.stream_info_.filterState()",
          "5763:   router_.decodeHeaders(headers, false);",
          "5767:   auto options = router_.upstreamSocketOptions();",
          "",
          "[Added Lines]",
          "5875:   router_->downstream_connection_.stream_info_.filterState()->setData(",
          "5879:   router_->downstream_connection_.stream_info_.filterState()",
          "5886:   router_->decodeHeaders(headers, false);",
          "5890:   auto options = router_->upstreamSocketOptions();",
          "",
          "---------------",
          "--- Hunk 207 ---",
          "[Context before]",
          "5772:   auto expected_details = expected_options->at(0)->getOptionDetails(dummy_socket, state);",
          "5773:   auto returned_details = options->at(0)->getOptionDetails(dummy_socket, state);",
          "5774:   EXPECT_TRUE(expected_details == returned_details);",
          "5776: }",
          "5778: TEST_F(RouterTest, ApplicationProtocols) {",
          "",
          "[Removed Lines]",
          "5775:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "5898:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 208 ---",
          "[Context before]",
          "5801:   Http::TestRequestHeaderMapImpl headers;",
          "5802:   HttpTestUtility::addDefaultHeaders(headers);",
          "5806:   EXPECT_CALL(cancellable_, cancel(_));",
          "5808:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "5809:   EXPECT_EQ(0U,",
          "5810:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "5803:   router_.decodeHeaders(headers, true);",
          "5807:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "5926:   router_->decodeHeaders(headers, true);",
          "5930:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 209 ---",
          "[Context before]",
          "5824:   HttpTestUtility::addDefaultHeaders(headers);",
          "5825:   headers.setMethod(\"CONNECT\");",
          "5826:   headers.removePath();",
          "5830:   EXPECT_CALL(encoder, encodeData(_, _)).Times(0);",
          "5831:   Buffer::OwnedImpl data;",
          "5835:   EXPECT_CALL(encoder, encodeData(_, _));",
          "",
          "[Removed Lines]",
          "5827:   router_.decodeHeaders(headers, false);",
          "5832:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "5950:   router_->decodeHeaders(headers, false);",
          "5955:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 210 ---",
          "[Context before]",
          "5866:   Http::TestRequestHeaderMapImpl headers;",
          "5867:   HttpTestUtility::addDefaultHeaders(headers);",
          "5868:   headers.setMethod(\"CONNECT\");",
          "5872: }",
          "",
          "[Removed Lines]",
          "5869:   EXPECT_ENVOY_BUG(router_.decodeHeaders(headers, false), \"envoy bug failure: factory != nullptr.\");",
          "5871:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "5992:   EXPECT_ENVOY_BUG(router_->decodeHeaders(headers, false),",
          "5993:                    \"envoy bug failure: factory != nullptr.\");",
          "5995:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 211 ---",
          "[Context before]",
          "5891:   HttpTestUtility::addDefaultHeaders(headers);",
          "5892:   headers.setMethod(\"CONNECT\");",
          "5893:   headers.removePath();",
          "5897:   EXPECT_CALL(encoder, encodeData(_, _)).Times(0);",
          "5898:   Buffer::OwnedImpl data;",
          "5902:   EXPECT_CALL(encoder, encodeData(_, _)).Times(0);",
          "",
          "[Removed Lines]",
          "5894:   router_.decodeHeaders(headers, false);",
          "5899:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "6018:   router_->decodeHeaders(headers, false);",
          "6023:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 212 ---",
          "[Context before]",
          "5921:   HttpTestUtility::addDefaultHeaders(headers);",
          "5922:   headers.setMethod(\"CONNECT\");",
          "5923:   headers.removePath();",
          "5927: }",
          "5929: TEST_F(RouterTest, PostExplicitTcpUpstream) {",
          "",
          "[Removed Lines]",
          "5924:   router_.decodeHeaders(headers, false);",
          "5926:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "6048:   router_->decodeHeaders(headers, false);",
          "6050:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 213 ---",
          "[Context before]",
          "5942:   Http::TestRequestHeaderMapImpl headers;",
          "5943:   HttpTestUtility::addDefaultHeaders(headers);",
          "5944:   headers.setMethod(\"POST\");",
          "5948: }",
          "5950: TEST_F(RouterTest, PostHttpUpstream) {",
          "",
          "[Removed Lines]",
          "5945:   router_.decodeHeaders(headers, false);",
          "5947:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "6069:   router_->decodeHeaders(headers, false);",
          "6071:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 214 ---",
          "[Context before]",
          "5963:   Http::TestRequestHeaderMapImpl headers;",
          "5964:   HttpTestUtility::addDefaultHeaders(headers);",
          "5965:   headers.setMethod(\"POST\");",
          "5969: }",
          "5971: TEST_F(RouterTest, SetDynamicMaxStreamDuration) {",
          "",
          "[Removed Lines]",
          "5966:   router_.decodeHeaders(headers, false);",
          "5968:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "6090:   router_->decodeHeaders(headers, false);",
          "6092:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 215 ---",
          "[Context before]",
          "5977:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-stream-duration-ms\", \"500\"}};",
          "5979:   HttpTestUtility::addDefaultHeaders(headers);",
          "5981:   max_stream_duration_timer_->invokeCallback();",
          "5984:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "5985: }",
          "",
          "[Removed Lines]",
          "5980:   router_.decodeHeaders(headers, false);",
          "5983:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "6104:   router_->decodeHeaders(headers, false);",
          "6107:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 216 ---",
          "[Context before]",
          "5994:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-stream-duration-ms\", \"0\"}};",
          "5995:   HttpTestUtility::addDefaultHeaders(headers);",
          "5999:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "6000: }",
          "",
          "[Removed Lines]",
          "5996:   router_.decodeHeaders(headers, false);",
          "5998:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "6120:   router_->decodeHeaders(headers, false);",
          "6122:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 217 ---",
          "[Context before]",
          "6033:                                          {\"x-envoy-internal\", \"true\"},",
          "6034:                                          {\"x-envoy-upstream-rq-timeout-ms\", \"200\"}};",
          "6035:   HttpTestUtility::addDefaultHeaders(headers);",
          "6037:   EXPECT_EQ(1U,",
          "6038:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "6036:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "6160:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 218 ---",
          "[Context before]",
          "6044:   EXPECT_EQ(200, atoi(std::string(headers.getEnvoyExpectedRequestTimeoutMsValue()).c_str()));",
          "6048:   Upstream::RetryOptionsPredicate::UpdateOptionsReturn update_options_return{",
          "6049:       std::make_shared<Network::Socket::Options>()};",
          "6050:   EXPECT_CALL(*retry_options_predicate, updateOptions(_)).WillOnce(Return(update_options_return));",
          "",
          "[Removed Lines]",
          "6047:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "6171:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 219 ---",
          "[Context before]",
          "6060:   EXPECT_EQ(update_options_return.new_upstream_socket_options_.value(),",
          "6064:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "6065:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "6066:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "6069:   EXPECT_EQ(2U,",
          "6070:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "6061:             router_.upstreamSocketOptions());",
          "6068:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "6185:             router_->upstreamSocketOptions());",
          "6192:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 220 ---",
          "[Context before]",
          "6075:   EXPECT_EQ(150, atoi(std::string(headers.getEnvoyExpectedRequestTimeoutMsValue()).c_str()));",
          "6079:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "6080:       .Times(0);",
          "6081:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "6078:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "6202:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "6203:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 221 ---",
          "[Context before]",
          "6190:   HttpTestUtility::addDefaultHeaders(headers);",
          "6193:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "6194:   Http::ResponseDecoder* response_decoder1 = nullptr;",
          "6195:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "",
          "[Removed Lines]",
          "6192:   router_.retry_425_response_ = true;",
          "",
          "[Added Lines]",
          "6317:   router_->retry_425_response_ = true;",
          "",
          "---------------",
          "--- Hunk 222 ---",
          "[Context before]",
          "6206:           }));",
          "6207:   expectResponseTimerCreate();",
          "6208:   EXPECT_CALL(encoder1, encodeHeaders(_, _));",
          "6211:   Http::ResponseHeaderMapPtr response_headers1(",
          "6212:       new Http::TestResponseHeaderMapImpl{{\":status\", \"425\"}});",
          "6214:       .WillOnce(Invoke([this](const Http::ResponseHeaderMap&, const Http::RequestHeaderMap&,",
          "6215:                               RetryState::DoRetryHeaderCallback callback) {",
          "6217:         return RetryStatus::Yes;",
          "6218:       }));",
          "6219:   ASSERT(response_decoder1);",
          "",
          "[Removed Lines]",
          "6209:   router_.decodeHeaders(headers, true);",
          "6213:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, HeaderMapEqualRef(&headers), _))",
          "6216:         router_.retry_state_->callback_ = [callback]() { callback(/*disable_early_data=*/true); };",
          "",
          "[Added Lines]",
          "6334:   router_->decodeHeaders(headers, true);",
          "6338:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, HeaderMapEqualRef(&headers), _))",
          "6341:         router_->retry_state_->callback_ = [callback]() { callback(/*disable_early_data=*/true); };",
          "",
          "---------------",
          "--- Hunk 223 ---",
          "[Context before]",
          "6236:             return nullptr;",
          "6237:           }));",
          "6238:   EXPECT_CALL(encoder2, encodeHeaders(HeaderMapEqualRef(&headers), _));",
          "6241:   Http::ResponseHeaderMapPtr response_headers2(",
          "6242:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "6244:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _));",
          "6245:   response_decoder2->decodeHeaders(std::move(response_headers2), true);",
          "6246:   EXPECT_TRUE(verifyHostUpstreamStats(1, 1));",
          "",
          "[Removed Lines]",
          "6239:   router_.retry_state_->callback_();",
          "6243:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "6364:   router_->retry_state_->callback_();",
          "6368:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "6369:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 224 ---",
          "[Context before]",
          "6268:   EXPECT_CALL(callbacks_, upstreamOverrideHost())",
          "6269:       .WillOnce(Return(absl::make_optional<absl::string_view>(\"1.2.3.4\")));",
          "6272:   EXPECT_EQ(\"1.2.3.4\", override_host.value());",
          "6274:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "6275:   HttpTestUtility::addDefaultHeaders(headers);",
          "6282:   Http::ResponseHeaderMapPtr response_headers_503(",
          "6283:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "6284:   ASSERT(response_decoder != nullptr);",
          "",
          "[Removed Lines]",
          "6271:   auto override_host = router_.overrideHostToSelect();",
          "6278:   router_.decodeHeaders(headers, true);",
          "6281:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "6397:   auto override_host = router_->overrideHostToSelect();",
          "6404:   router_->decodeHeaders(headers, true);",
          "6407:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 225 ---",
          "[Context before]",
          "6297:                               upstream_stream_info_, Http::Protocol::Http10);",
          "6298:         return nullptr;",
          "6299:       }));",
          "6304:   EXPECT_CALL(callbacks_, upstreamOverrideHost()).Times(0);",
          "6308:   Http::ResponseHeaderMapPtr response_headers_200(",
          "6309:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "6312:   ASSERT(response_decoder != nullptr);",
          "6314:   response_decoder->decodeHeaders(std::move(response_headers_200), true);",
          "6316:   EXPECT_EQ(2, callbacks_.stream_info_.attemptCount().value());",
          "6319: }",
          "6321: } // namespace Router",
          "",
          "[Removed Lines]",
          "6300:   router_.retry_state_->callback_();",
          "6305:   EXPECT_EQ(absl::nullopt, router_.overrideHostToSelect());",
          "6311:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "6318:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "6426:   router_->retry_state_->callback_();",
          "6431:   EXPECT_EQ(absl::nullopt, router_->overrideHostToSelect());",
          "6437:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "6438:       .WillOnce(Return(RetryStatus::No));",
          "6445:   router_->onDestroy();",
          "",
          "---------------"
        ],
        "test/common/router/router_test_base.cc||test/common/router/router_test_base.cc": [
          "File: test/common/router/router_test_base.cc -> test/common/router/router_test_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:               ShadowWriterPtr{shadow_writer_}, true, start_child_span, suppress_envoy_headers,",
          "20:               false, suppress_grpc_request_failure_code_stats, std::move(strict_headers_to_check),",
          "21:               test_time_.timeSystem(), http_context_, router_context_),",
          "24:   upstream_locality_.set_zone(\"to_az\");",
          "25:   cm_.initializeThreadLocalClusters({\"fake_cluster\"});",
          "26:   ON_CALL(*cm_.thread_local_cluster_.conn_pool_.host_, address())",
          "27:       .WillByDefault(Return(host_address_));",
          "28:   ON_CALL(*cm_.thread_local_cluster_.conn_pool_.host_, locality())",
          "29:       .WillByDefault(ReturnRef(upstream_locality_));",
          "33:       ->setRemoteAddress(Network::Utility::parseInternetAddressAndPort(\"1.2.3.4:80\"));",
          "",
          "[Removed Lines]",
          "22:       router_(config_, config_.default_stats_) {",
          "23:   router_.setDecoderFilterCallbacks(callbacks_);",
          "30:   router_.downstream_connection_.stream_info_.downstream_connection_info_provider_->setLocalAddress(",
          "31:       host_address_);",
          "32:   router_.downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "",
          "[Added Lines]",
          "22:       router_(std::make_unique<RouterTestFilter>(config_, config_.default_stats_)) {",
          "23:   router_->setDecoderFilterCallbacks(callbacks_);",
          "30:   router_->downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "31:       ->setLocalAddress(host_address_);",
          "32:   router_->downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:   Http::TestRequestHeaderMapImpl headers;",
          "142:   HttpTestUtility::addDefaultHeaders(headers);",
          "146:   EXPECT_CALL(cancellable_, cancel(_));",
          "148: }",
          "150: void RouterTestBase::verifyAttemptCountInRequestBasic(bool set_include_attempt_count_in_request,",
          "",
          "[Removed Lines]",
          "143:   router_.decodeHeaders(headers, true);",
          "147:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "143:   router_->decodeHeaders(headers, true);",
          "147:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:   if (preset_count) {",
          "162:     headers.setEnvoyAttemptCount(preset_count.value());",
          "163:   }",
          "166:   EXPECT_EQ(expected_count, atoi(std::string(headers.getEnvoyAttemptCountValue()).c_str()));",
          "167:   EXPECT_EQ(1U, callbacks_.stream_info_.attemptCount().value());",
          "170:   EXPECT_CALL(cancellable_, cancel(_));",
          "172:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "173:   EXPECT_EQ(0U,",
          "174:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "164:   router_.decodeHeaders(headers, true);",
          "171:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "164:   router_->decodeHeaders(headers, true);",
          "171:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:   Http::TestRequestHeaderMapImpl headers;",
          "190:   HttpTestUtility::addDefaultHeaders(headers);",
          "193:   Http::ResponseHeaderMapPtr response_headers(",
          "194:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "191:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "191:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:                                       Http::Protocol::Http10);",
          "219:   HttpTestUtility::addDefaultHeaders(default_request_headers_, false);",
          "221: }",
          "223: void RouterTestBase::enableRedirects(uint32_t max_internal_redirects) {",
          "",
          "[Removed Lines]",
          "220:   router_.decodeHeaders(default_request_headers_, end_stream);",
          "",
          "[Added Lines]",
          "220:   router_->decodeHeaders(default_request_headers_, end_stream);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "290:   Http::TestRequestHeaderMapImpl headers;",
          "291:   HttpTestUtility::addDefaultHeaders(headers);",
          "293:   EXPECT_EQ(1U,",
          "294:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "292:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "292:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "335:   Http::TestRequestHeaderMapImpl headers;",
          "336:   HttpTestUtility::addDefaultHeaders(headers);",
          "338:   EXPECT_EQ(1U,",
          "339:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "337:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "337:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "383:   Http::TestRequestHeaderMapImpl headers;",
          "384:   HttpTestUtility::addDefaultHeaders(headers);",
          "386:   EXPECT_EQ(0U,",
          "387:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "388:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "",
          "[Removed Lines]",
          "385:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "385:   router_->decodeHeaders(headers, true);",
          "",
          "---------------"
        ],
        "test/common/router/router_test_base.h||test/common/router/router_test_base.h": [
          "File: test/common/router/router_test_base.h -> test/common/router/router_test_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   MockShadowWriter* shadow_writer_;",
          "105:   NiceMock<LocalInfo::MockLocalInfo> local_info_;",
          "106:   FilterConfig config_;",
          "108:   Event::MockTimer* response_timeout_{};",
          "109:   Event::MockTimer* per_try_timeout_{};",
          "110:   Event::MockTimer* per_try_idle_timeout_{};",
          "",
          "[Removed Lines]",
          "107:   RouterTestFilter router_;",
          "",
          "[Added Lines]",
          "107:   std::unique_ptr<RouterTestFilter> router_;",
          "",
          "---------------"
        ],
        "test/integration/buffer_accounting_integration_test.cc||test/integration/buffer_accounting_integration_test.cc": [
          "File: test/integration/buffer_accounting_integration_test.cc -> test/integration/buffer_accounting_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include \"test/integration/tracked_watermark_buffer.h\"",
          "16: #include \"test/integration/utility.h\"",
          "17: #include \"test/mocks/http/mocks.h\"",
          "19: #include \"fake_upstream.h\"",
          "20: #include \"gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"test/test_common/test_runtime.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:       public HttpIntegrationTest {",
          "97: public:",
          "98:   std::vector<IntegrationStreamDecoderPtr>",
          "100:     std::vector<IntegrationStreamDecoderPtr> responses;",
          "102:     Http::TestRequestHeaderMapImpl header_map{",
          "",
          "[Removed Lines]",
          "99:   sendRequests(uint32_t num_responses, uint32_t request_body_size, uint32_t response_body_size) {",
          "",
          "[Added Lines]",
          "100:   sendRequests(uint32_t num_responses, uint32_t request_body_size, uint32_t response_body_size,",
          "101:                absl::string_view cluster_to_wait_for = \"\") {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:     for (uint32_t idx = 0; idx < num_responses; ++idx) {",
          "110:       responses.emplace_back(codec_client_->makeRequestWithBody(header_map, request_body_size));",
          "111:     }",
          "113:     return responses;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:       if (!cluster_to_wait_for.empty()) {",
          "114:         test_server_->waitForGaugeEq(",
          "115:             absl::StrCat(\"cluster.\", cluster_to_wait_for, \".upstream_rq_active\"), idx + 1);",
          "116:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "346:   if (streamBufferAccounting()) {",
          "",
          "[Removed Lines]",
          "343:   auto responses = sendRequests(num_requests, request_body_size, response_body_size);",
          "",
          "[Added Lines]",
          "349:   auto responses = sendRequests(num_requests, request_body_size, response_body_size,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "358:   }",
          "359: }",
          "361: TEST_P(Http2BufferWatermarksTest, ShouldTrackAllocatedBytesToDownstream) {",
          "362:   const int num_requests = 5;",
          "363:   const uint32_t request_body_size = 4096;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368: TEST_P(Http2BufferWatermarksTest, ShouldTrackAllocatedBytesToShadowUpstream) {",
          "369:   const int num_requests = 5;",
          "370:   const uint32_t request_body_size = 4096;",
          "371:   const uint32_t response_body_size = 4096;",
          "372:   TestScopedRuntime scoped_runtime;",
          "373:   scoped_runtime.mergeValues({{\"envoy.reloadable_features.streaming_shadow\", \"true\"}});",
          "375:   autonomous_upstream_ = true;",
          "376:   autonomous_allow_incomplete_streams_ = true;",
          "377:   setUpstreamCount(2);",
          "378:   config_helper_.addConfigModifier([](envoy::config::bootstrap::v3::Bootstrap& bootstrap) {",
          "379:     auto* cluster = bootstrap.mutable_static_resources()->add_clusters();",
          "380:     cluster->MergeFrom(bootstrap.static_resources().clusters()[0]);",
          "381:     cluster->set_name(\"cluster_1\");",
          "382:   });",
          "383:   config_helper_.addConfigModifier(",
          "384:       [=](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "385:               hcm) -> void {",
          "386:         auto* mirror_policy = hcm.mutable_route_config()",
          "387:                                   ->mutable_virtual_hosts(0)",
          "388:                                   ->mutable_routes(0)",
          "389:                                   ->mutable_route()",
          "390:                                   ->add_request_mirror_policies();",
          "391:         mirror_policy->set_cluster(\"cluster_1\");",
          "392:       });",
          "393:   initialize();",
          "395:   buffer_factory_->setExpectedAccountBalance(request_body_size, num_requests);",
          "398:   write_matcher_->setDestinationPort(fake_upstreams_[1]->localAddress()->ip()->port());",
          "399:   write_matcher_->setWriteReturnsEgain();",
          "401:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "403:   auto responses = sendRequests(num_requests, request_body_size, response_body_size,",
          "407:   for (auto& response : responses) {",
          "408:     ASSERT_TRUE(response->waitForEndStream());",
          "409:     ASSERT_TRUE(response->complete());",
          "410:   }",
          "413:   if (streamBufferAccounting()) {",
          "414:     EXPECT_TRUE(",
          "415:         buffer_factory_->waitForExpectedAccountBalanceWithTimeout(TestUtility::DefaultTimeout))",
          "416:         << \"buffer total: \" << buffer_factory_->totalBufferSize() << \"\\n\"",
          "417:         << \" buffer max: \" << buffer_factory_->maxBufferSize() << \"\\n\"",
          "418:         << printAccounts();",
          "419:   }",
          "421:   write_matcher_->setResumeWrites();",
          "422:   test_server_->waitForCounterEq(\"cluster.cluster_1.upstream_rq_completed\", num_requests);",
          "423: }",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"test/integration/protocol_integration_test.h\"",
          "3: #include <functional>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"protocol_integration_test.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "824:       BytesCountExpectation(2204, 520, 150, 6));",
          "825: }",
          "827: TEST_P(ProtocolIntegrationTest, RetryStreaming) {",
          "828:   initialize();",
          "829:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "831: TEST_P(ProtocolIntegrationTest, RetryWithBuffer) {",
          "832:   config_helper_.prependFilter(R\"EOF(",
          "833:   name: add-body-filter",
          "834:   typed_config:",
          "835:       \"@type\": type.googleapis.com/test.integration.filters.AddBodyFilterConfig",
          "836:       where_to_add_body: DEFAULT",
          "837:   )EOF\");",
          "838:   initialize();",
          "839:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "840:   auto response = codec_client_->makeHeaderOnlyRequest(",
          "841:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "842:                                      {\":path\", \"/test/long/url\"},",
          "843:                                      {\":scheme\", \"http\"},",
          "844:                                      {\":authority\", \"sni.lyft.com\"},",
          "845:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "846:                                      {\"x-envoy-retry-on\", \"5xx\"}});",
          "847:   waitForNextUpstreamRequest();",
          "848:   EXPECT_TRUE(upstream_request_->complete());",
          "849:   EXPECT_TRUE(upstream_request_->receivedData());",
          "850:   EXPECT_EQ(upstream_request_->bodyLength(), 4);",
          "851:   upstream_request_->encodeHeaders(default_response_headers_, true);",
          "852:   ASSERT_TRUE(response->waitForEndStream());",
          "853: }",
          "",
          "---------------"
        ],
        "test/integration/shadow_policy_integration_test.cc||test/integration/shadow_policy_integration_test.cc": [
          "File: test/integration/shadow_policy_integration_test.cc -> test/integration/shadow_policy_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <string>",
          "3: #include \"envoy/extensions/access_loggers/file/v3/file.pb.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <chrono>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7: #include \"test/integration/filters/repick_cluster_filter.h\"",
          "8: #include \"test/integration/http_integration.h\"",
          "10: namespace Envoy {",
          "11: namespace {",
          "15: public:",
          "17:     setUpstreamProtocol(Http::CodecType::HTTP2);",
          "18:     autonomous_upstream_ = true;",
          "19:     setUpstreamCount(2);",
          "",
          "[Removed Lines]",
          "13: class ShadowPolicyIntegrationTest : public testing::TestWithParam<Network::Address::IpVersion>,",
          "14:                                     public HttpIntegrationTest {",
          "16:   ShadowPolicyIntegrationTest() : HttpIntegrationTest(Http::CodecType::HTTP2, GetParam()) {",
          "",
          "[Added Lines]",
          "10: #include \"test/integration/socket_interface_swap.h\"",
          "11: #include \"test/test_common/test_runtime.h\"",
          "16: class ShadowPolicyIntegrationTest",
          "17:     : public testing::TestWithParam<std::tuple<Network::Address::IpVersion, bool>>,",
          "18:       public HttpIntegrationTest,",
          "19:       public SocketInterfaceSwap {",
          "21:   ShadowPolicyIntegrationTest()",
          "22:       : HttpIntegrationTest(Http::CodecType::HTTP2, std::get<0>(GetParam())) {",
          "23:     scoped_runtime_.mergeValues(",
          "24:         {{\"envoy.reloadable_features.streaming_shadow\", streaming_shadow_ ? \"true\" : \"false\"}});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:       EXPECT_EQ(10U, response->body().size());",
          "74:     }",
          "75:     test_server_->waitForCounterEq(\"cluster.cluster_1.internal.upstream_rq_completed\", 1);",
          "78:     upstream_headers_ =",
          "79:         reinterpret_cast<AutonomousUpstream*>(fake_upstreams_[0].get())->lastRequestHeaders();",
          "",
          "[Removed Lines]",
          "76:     test_server_->waitForCounterEq(\"cluster.cluster_1.internal.upstream_rq_completed\", 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85:     cleanupUpstreamAndDownstream();",
          "86:   }",
          "88:   absl::optional<int> cluster_with_custom_filter_;",
          "89:   std::string filter_name_ = \"on-local-reply-filter\";",
          "90:   std::unique_ptr<Http::TestRequestHeaderMapImpl> upstream_headers_;",
          "91:   std::unique_ptr<Http::TestRequestHeaderMapImpl> mirror_headers_;",
          "92: };",
          "99: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithCluster) {",
          "",
          "[Removed Lines]",
          "94: INSTANTIATE_TEST_SUITE_P(IpVersions, ShadowPolicyIntegrationTest,",
          "95:                          testing::ValuesIn(TestEnvironment::getIpVersionsForTest()),",
          "96:                          TestUtility::ipTestParamsToString);",
          "",
          "[Added Lines]",
          "95:   const bool streaming_shadow_ = std::get<1>(GetParam());",
          "100:   TestScopedRuntime scoped_runtime_;",
          "103: INSTANTIATE_TEST_SUITE_P(",
          "104:     IpVersionsAndStreaming, ShadowPolicyIntegrationTest,",
          "105:     testing::Combine(testing::ValuesIn(TestEnvironment::getIpVersionsForTest()), testing::Bool()),",
          "106:     [](const ::testing::TestParamInfo<ShadowPolicyIntegrationTest::ParamType>& params) {",
          "107:       return absl::StrCat(std::get<0>(params.param) == Network::Address::IpVersion::v4 ? \"IPv4\"",
          "108:                                                                                        : \"IPv6\",",
          "109:                           \"_\", std::get<1>(params.param) ? \"streaming_shadow\" : \"buffered_shadow\");",
          "110:     });",
          "112: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithDownstreamReset) {",
          "113:   if (!streaming_shadow_) {",
          "114:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "115:   }",
          "116:   autonomous_upstream_ = false;",
          "117:   initialConfigSetup(\"cluster_1\", \"\");",
          "118:   initialize();",
          "120:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "121:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "122:   request_headers.addCopy(\"potato\", \"salad\");",
          "123:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "124:       codec_client_->startRequest(request_headers, false);",
          "125:   auto& encoder = result.first;",
          "126:   auto response = std::move(result.second);",
          "128:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "129:   FakeStreamPtr upstream_request_main;",
          "130:   ASSERT_TRUE(",
          "131:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "132:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "133:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "134:   FakeStreamPtr upstream_request_shadow;",
          "135:   ASSERT_TRUE(",
          "136:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "137:   ASSERT_TRUE(",
          "138:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "139:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "140:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "141:   EXPECT_EQ(upstream_request_main->headers().get(Http::LowerCaseString(\"potato\"))[0]->value(),",
          "142:             \"salad\");",
          "143:   EXPECT_EQ(upstream_request_shadow->headers().get(Http::LowerCaseString(\"potato\"))[0]->value(),",
          "144:             \"salad\");",
          "146:   codec_client_->sendReset(encoder);",
          "148:   ASSERT_TRUE(upstream_request_main->waitForReset());",
          "149:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "150:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "151:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "152:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "153:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "155:   EXPECT_FALSE(upstream_request_main->complete());",
          "156:   EXPECT_FALSE(upstream_request_shadow->complete());",
          "157:   EXPECT_FALSE(response->complete());",
          "159:   cleanupUpstreamAndDownstream();",
          "161:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "162:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "163:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 1);",
          "164:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_tx_reset\")->value(), 1);",
          "165:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "166:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 0);",
          "167: }",
          "169: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithMainUpstreamReset) {",
          "170:   if (!streaming_shadow_) {",
          "171:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "172:   }",
          "173:   autonomous_upstream_ = false;",
          "174:   initialConfigSetup(\"cluster_1\", \"\");",
          "175:   initialize();",
          "177:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "178:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "179:   request_headers.addCopy(\"potato\", \"salad\");",
          "180:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "181:       codec_client_->startRequest(request_headers, false);",
          "182:   auto response = std::move(result.second);",
          "184:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "185:   FakeStreamPtr upstream_request_main;",
          "186:   ASSERT_TRUE(",
          "187:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "188:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "189:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "190:   FakeStreamPtr upstream_request_shadow;",
          "191:   ASSERT_TRUE(",
          "192:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "193:   ASSERT_TRUE(",
          "194:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "195:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "196:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "199:   upstream_request_main->encodeResetStream();",
          "200:   ASSERT_TRUE(response->waitForReset());",
          "201:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "203:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "204:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "205:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "206:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "207:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "209:   EXPECT_FALSE(upstream_request_main->complete());",
          "210:   EXPECT_FALSE(upstream_request_shadow->complete());",
          "211:   EXPECT_TRUE(response->complete());",
          "213:   cleanupUpstreamAndDownstream();",
          "215:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "216:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "218:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_rx_reset\")->value(), 1);",
          "219:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 1);",
          "220:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "221:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "222: }",
          "224: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithShadowUpstreamReset) {",
          "225:   if (!streaming_shadow_) {",
          "226:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "227:   }",
          "228:   autonomous_upstream_ = false;",
          "229:   initialConfigSetup(\"cluster_1\", \"\");",
          "230:   initialize();",
          "232:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "233:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "234:   request_headers.addCopy(\"potato\", \"salad\");",
          "235:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "236:       codec_client_->startRequest(request_headers, false);",
          "237:   auto& encoder = result.first;",
          "238:   auto response = std::move(result.second);",
          "240:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "241:   FakeStreamPtr upstream_request_main;",
          "242:   ASSERT_TRUE(",
          "243:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "244:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "245:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "246:   FakeStreamPtr upstream_request_shadow;",
          "247:   ASSERT_TRUE(",
          "248:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "249:   ASSERT_TRUE(",
          "250:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "251:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "252:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "255:   upstream_request_shadow->encodeResetStream();",
          "256:   test_server_->waitForCounterEq(\"cluster.cluster_1.upstream_rq_rx_reset\", 1,",
          "257:                                  std::chrono::milliseconds(1000));",
          "259:   codec_client_->sendData(encoder, 20, true);",
          "260:   ASSERT_TRUE(upstream_request_main->waitForData(*dispatcher_, 20));",
          "261:   ASSERT_TRUE(upstream_request_main->waitForEndStream(*dispatcher_));",
          "262:   upstream_request_main->encodeHeaders(default_response_headers_, true);",
          "263:   ASSERT_TRUE(response->waitForEndStream());",
          "264:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "265:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "266:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "267:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "269:   EXPECT_TRUE(upstream_request_main->complete());",
          "270:   EXPECT_FALSE(upstream_request_shadow->complete());",
          "271:   EXPECT_TRUE(response->complete());",
          "273:   cleanupUpstreamAndDownstream();",
          "275:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "276:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "278:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_rx_reset\")->value(), 1);",
          "279:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "280:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 1);",
          "281: }",
          "284: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithEarlyDownstreamTimeout) {",
          "285:   if (!streaming_shadow_) {",
          "286:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "287:   }",
          "288:   autonomous_upstream_ = false;",
          "289:   config_helper_.addConfigModifier(",
          "290:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "291:              hcm) {",
          "293:         hcm.mutable_stream_idle_timeout()->set_seconds(0);",
          "294:         hcm.mutable_stream_idle_timeout()->set_nanos(100 * 1000 * 1000);",
          "295:       });",
          "296:   initialConfigSetup(\"cluster_1\", \"\");",
          "297:   config_helper_.disableDelayClose();",
          "298:   initialize();",
          "300:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "301:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "302:   request_headers.addCopy(\"potato\", \"salad\");",
          "303:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "304:       codec_client_->startRequest(request_headers, false);",
          "305:   auto response = std::move(result.second);",
          "307:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "308:   FakeStreamPtr upstream_request_main;",
          "309:   ASSERT_TRUE(",
          "310:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "311:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "312:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "313:   FakeStreamPtr upstream_request_shadow;",
          "314:   ASSERT_TRUE(",
          "315:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "316:   ASSERT_TRUE(",
          "317:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "318:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "319:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "322:   ASSERT_TRUE(response->waitForReset());",
          "323:   ASSERT_TRUE(upstream_request_main->waitForReset());",
          "324:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "327:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "328:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "329:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "330:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "332:   EXPECT_FALSE(upstream_request_main->complete());",
          "333:   EXPECT_FALSE(upstream_request_shadow->complete());",
          "335:   cleanupUpstreamAndDownstream();",
          "337:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "338:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "339:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_tx_reset\")->value(), 1);",
          "340:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 1);",
          "341:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 0);",
          "342:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "343: }",
          "347: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithLateDownstreamTimeoutAndShadowComplete) {",
          "348:   if (!streaming_shadow_) {",
          "349:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "350:   }",
          "351:   autonomous_upstream_ = false;",
          "352:   initialConfigSetup(\"cluster_1\", \"\");",
          "353:   config_helper_.addConfigModifier(",
          "354:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "355:              hcm) {",
          "357:         hcm.mutable_stream_idle_timeout()->set_seconds(0);",
          "358:         hcm.mutable_stream_idle_timeout()->set_nanos(100 * 1000 * 1000);",
          "359:       });",
          "360:   config_helper_.disableDelayClose();",
          "361:   initialize();",
          "363:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "364:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "365:   request_headers.addCopy(\"potato\", \"salad\");",
          "367:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "368:       codec_client_->startRequest(request_headers, true);",
          "369:   auto response = std::move(result.second);",
          "371:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "372:   FakeStreamPtr upstream_request_main;",
          "373:   ASSERT_TRUE(",
          "374:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "375:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "376:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "377:   FakeStreamPtr upstream_request_shadow;",
          "378:   ASSERT_TRUE(",
          "379:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "380:   ASSERT_TRUE(",
          "381:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "382:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "383:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "384:   upstream_request_shadow->encodeHeaders(default_response_headers_, true);",
          "386:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "387:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "388:   EXPECT_TRUE(upstream_request_shadow->complete());",
          "391:   ASSERT_TRUE(response->waitForEndStream());",
          "392:   ASSERT_TRUE(upstream_request_main->waitForReset());",
          "393:   EXPECT_TRUE(response->complete());",
          "394:   EXPECT_EQ(response->headers().getStatusValue(), \"504\");",
          "397:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "398:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "400:   cleanupUpstreamAndDownstream();",
          "402:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "403:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "404:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_tx_reset\")->value(), 1);",
          "405:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 0);",
          "406:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 0);",
          "407:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 1);",
          "408: }",
          "411: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithShadowOnlyTimeout) {",
          "412:   if (!streaming_shadow_) {",
          "413:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "414:   }",
          "415:   autonomous_upstream_ = false;",
          "416:   initialConfigSetup(\"cluster_1\", \"\");",
          "417:   config_helper_.addConfigModifier(",
          "418:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "419:              hcm) {",
          "421:         auto* route_config = hcm.mutable_route_config();",
          "422:         auto* virtual_host = route_config->mutable_virtual_hosts(0);",
          "423:         auto* route = virtual_host->mutable_routes(0)->mutable_route();",
          "424:         route->mutable_timeout()->set_seconds(0);",
          "425:         route->mutable_timeout()->set_nanos(100 * 1000 * 1000);",
          "426:       });",
          "427:   config_helper_.disableDelayClose();",
          "428:   initialize();",
          "430:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "431:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "432:   request_headers.addCopy(\"potato\", \"salad\");",
          "434:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "435:       codec_client_->startRequest(request_headers, true);",
          "436:   auto response = std::move(result.second);",
          "438:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "439:   FakeStreamPtr upstream_request_main;",
          "440:   ASSERT_TRUE(",
          "441:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "442:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "443:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "444:   FakeStreamPtr upstream_request_shadow;",
          "445:   ASSERT_TRUE(",
          "446:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "447:   ASSERT_TRUE(",
          "448:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "449:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "450:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "452:   upstream_request_main->encodeHeaders(default_response_headers_, true);",
          "453:   ASSERT_TRUE(response->waitForEndStream());",
          "454:   EXPECT_TRUE(response->complete());",
          "457:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "460:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "461:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "463:   cleanupUpstreamAndDownstream();",
          "465:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "466:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "467:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 1);",
          "468:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_timeout\")->value(), 1);",
          "469: }",
          "471: TEST_P(ShadowPolicyIntegrationTest, MainRequestOverBufferLimit) {",
          "472:   if (!streaming_shadow_) {",
          "473:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "474:   }",
          "475:   autonomous_upstream_ = true;",
          "476:   cluster_with_custom_filter_ = 0;",
          "477:   filter_name_ = \"encoder-decoder-buffer-filter\";",
          "478:   initialConfigSetup(\"cluster_1\", \"\");",
          "479:   config_helper_.setBufferLimits(1024, 1024);",
          "480:   config_helper_.disableDelayClose();",
          "481:   initialize();",
          "483:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "484:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "485:   request_headers.addCopy(\"potato\", \"salad\");",
          "487:   auto response = codec_client_->makeRequestWithBody(",
          "488:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "489:                                      {\":path\", \"/dynamo/url\"},",
          "490:                                      {\":scheme\", \"http\"},",
          "491:                                      {\":authority\", \"sni.lyft.com\"},",
          "492:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "493:                                      {\"x-envoy-retry-on\", \"5xx\"}},",
          "494:       1024 * 65);",
          "496:   ASSERT_TRUE(response->waitForEndStream());",
          "497:   EXPECT_TRUE(response->complete());",
          "499:   cleanupUpstreamAndDownstream();",
          "501:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "502:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "503:   test_server_->waitForCounterEq(\"cluster.cluster_1.upstream_rq_completed\", 1);",
          "504: }",
          "506: TEST_P(ShadowPolicyIntegrationTest, ShadowRequestOverBufferLimit) {",
          "507:   if (!streaming_shadow_) {",
          "508:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "509:   }",
          "510:   autonomous_upstream_ = true;",
          "511:   cluster_with_custom_filter_ = 1;",
          "512:   filter_name_ = \"encoder-decoder-buffer-filter\";",
          "513:   initialConfigSetup(\"cluster_1\", \"\");",
          "514:   config_helper_.setBufferLimits(1024, 1024);",
          "515:   config_helper_.disableDelayClose();",
          "516:   initialize();",
          "518:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "519:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "520:   request_headers.addCopy(\"potato\", \"salad\");",
          "522:   auto response = codec_client_->makeRequestWithBody(",
          "523:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "524:                                      {\":path\", \"/dynamo/url\"},",
          "525:                                      {\":scheme\", \"http\"},",
          "526:                                      {\":authority\", \"sni.lyft.com\"},",
          "527:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "528:                                      {\"x-envoy-retry-on\", \"5xx\"}},",
          "529:       1024 * 65);",
          "531:   ASSERT_TRUE(response->waitForEndStream());",
          "532:   EXPECT_TRUE(response->complete());",
          "533:   EXPECT_EQ(response->headers().getStatusValue(), \"200\");",
          "535:   cleanupUpstreamAndDownstream();",
          "537:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "538:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "539:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "541:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "542: }",
          "544: TEST_P(ShadowPolicyIntegrationTest, ShadowRequestOverRouteBufferLimit) {",
          "545:   if (!streaming_shadow_) {",
          "546:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "547:   }",
          "548:   autonomous_upstream_ = true;",
          "549:   cluster_with_custom_filter_ = 1;",
          "550:   filter_name_ = \"encoder-decoder-buffer-filter\";",
          "551:   initialConfigSetup(\"cluster_1\", \"\");",
          "552:   config_helper_.addConfigModifier([](ConfigHelper::HttpConnectionManager& hcm) {",
          "553:     hcm.mutable_route_config()",
          "554:         ->mutable_virtual_hosts(0)",
          "555:         ->mutable_per_request_buffer_limit_bytes()",
          "556:         ->set_value(0);",
          "557:   });",
          "558:   config_helper_.disableDelayClose();",
          "559:   initialize();",
          "561:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "562:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "563:   request_headers.addCopy(\"potato\", \"salad\");",
          "565:   auto response = codec_client_->makeRequestWithBody(",
          "566:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "567:                                      {\":path\", \"/dynamo/url\"},",
          "568:                                      {\":scheme\", \"http\"},",
          "569:                                      {\":authority\", \"sni.lyft.com\"},",
          "570:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "571:                                      {\"x-envoy-retry-on\", \"5xx\"}},",
          "572:       1024 * 65);",
          "574:   ASSERT_TRUE(response->waitForEndStream());",
          "575:   EXPECT_TRUE(response->complete());",
          "576:   EXPECT_EQ(response->headers().getStatusValue(), \"200\");",
          "578:   cleanupUpstreamAndDownstream();",
          "580:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "581:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "582:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "584:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "585: }",
          "587: TEST_P(ShadowPolicyIntegrationTest, BackedUpConnectionBeforeShadowBegins) {",
          "588:   if (!streaming_shadow_) {",
          "589:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "590:   }",
          "591:   autonomous_upstream_ = true;",
          "592:   autonomous_allow_incomplete_streams_ = true;",
          "593:   initialConfigSetup(\"cluster_1\", \"\");",
          "595:   config_helper_.addConfigModifier([](envoy::config::bootstrap::v3::Bootstrap& bs) {",
          "596:     auto* shadow_cluster = bs.mutable_static_resources()->mutable_clusters(1);",
          "597:     shadow_cluster->mutable_per_connection_buffer_limit_bytes()->set_value(1024);",
          "598:   });",
          "601:   config_helper_.addConfigModifier(",
          "602:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "603:              hcm) {",
          "604:         auto* route_1 = hcm.mutable_route_config()->mutable_virtual_hosts(0)->add_routes();",
          "605:         route_1->mutable_route()->set_cluster(\"cluster_1\");",
          "606:         route_1->mutable_match()->set_prefix(\"/shadow\");",
          "607:         hcm.mutable_route_config()",
          "608:             ->mutable_virtual_hosts(0)",
          "609:             ->mutable_routes(0)",
          "610:             ->mutable_match()",
          "611:             ->set_prefix(\"/main\");",
          "612:       });",
          "613:   config_helper_.addRuntimeOverride(Runtime::defer_processing_backedup_streams, \"true\");",
          "614:   initialize();",
          "616:   write_matcher_->setDestinationPort(fake_upstreams_[1]->localAddress()->ip()->port());",
          "617:   write_matcher_->setWriteReturnsEgain();",
          "619:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "621:   auto shadow_direct_response = codec_client_->makeRequestWithBody(",
          "622:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "623:                                      {\":path\", \"/shadow\"},",
          "624:                                      {\":scheme\", \"http\"},",
          "625:                                      {\":authority\", \"sni.lyft.com\"},",
          "626:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "627:                                      {\"x-envoy-retry-on\", \"5xx\"}},",
          "628:       1024 * 3);",
          "631:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "632:       codec_client_->startRequest(Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "633:                                                                  {\":path\", \"/main\"},",
          "634:                                                                  {\":scheme\", \"http\"},",
          "635:                                                                  {\":authority\", \"sni.lyft.com\"},",
          "636:                                                                  {\"x-forwarded-for\", \"10.0.0.1\"},",
          "637:                                                                  {\"x-envoy-retry-on\", \"5xx\"}},",
          "638:                                   false);",
          "639:   auto& encoder = result.first;",
          "640:   auto main_response = std::move(result.second);",
          "643:   test_server_->waitForCounterEq(\"http.config_test.downstream_flow_control_paused_reading_total\", 1,",
          "644:                                  std::chrono::milliseconds(500));",
          "646:   codec_client_->sendData(encoder, 1023, false);",
          "648:   codec_client_->sendData(encoder, 10, true);",
          "650:   EXPECT_FALSE(main_response->waitForEndStream(std::chrono::milliseconds(500)));",
          "653:   write_matcher_->setResumeWrites();",
          "655:   EXPECT_TRUE(main_response->waitForEndStream());",
          "656:   EXPECT_TRUE(main_response->complete());",
          "657:   EXPECT_EQ(main_response->headers().getStatusValue(), \"200\");",
          "658:   EXPECT_TRUE(shadow_direct_response->waitForEndStream());",
          "659:   EXPECT_TRUE(shadow_direct_response->complete());",
          "660:   EXPECT_EQ(shadow_direct_response->headers().getStatusValue(), \"200\");",
          "663:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "664:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 2);",
          "665:   EXPECT_EQ(test_server_->counter(\"http.config_test.downstream_flow_control_paused_reading_total\")",
          "666:                 ->value(),",
          "667:             1);",
          "668: }",
          "670: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithShadowBackpressure) {",
          "671:   if (!streaming_shadow_) {",
          "672:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "673:   }",
          "674:   autonomous_upstream_ = false;",
          "675:   initialConfigSetup(\"cluster_1\", \"\");",
          "677:   config_helper_.addConfigModifier([](envoy::config::bootstrap::v3::Bootstrap& bs) {",
          "678:     auto* shadow_cluster = bs.mutable_static_resources()->mutable_clusters(1);",
          "679:     shadow_cluster->mutable_per_connection_buffer_limit_bytes()->set_value(1024);",
          "680:   });",
          "681:   initialize();",
          "683:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "684:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "685:   request_headers.addCopy(\"potato\", \"salad\");",
          "686:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "687:       codec_client_->startRequest(request_headers, false);",
          "688:   auto& encoder = result.first;",
          "689:   auto response = std::move(result.second);",
          "691:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "692:   FakeStreamPtr upstream_request_main;",
          "693:   ASSERT_TRUE(",
          "694:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "695:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "696:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "697:   FakeStreamPtr upstream_request_shadow;",
          "698:   ASSERT_TRUE(",
          "699:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "700:   ASSERT_TRUE(",
          "701:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "702:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "703:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "707:   codec_client_->sendData(encoder, 2048, false);",
          "708:   test_server_->waitForCounterGe(\"http.config_test.downstream_flow_control_paused_reading_total\",",
          "709:                                  1);",
          "710:   codec_client_->sendData(encoder, 2048, true);",
          "711:   ASSERT_TRUE(upstream_request_main->waitForData(*dispatcher_, 2048 * 2));",
          "712:   ASSERT_TRUE(upstream_request_shadow->waitForData(*dispatcher_, 2048 * 2));",
          "714:   ASSERT_TRUE(upstream_request_main->waitForEndStream(*dispatcher_));",
          "715:   ASSERT_TRUE(upstream_request_shadow->waitForEndStream(*dispatcher_));",
          "716:   upstream_request_main->encodeHeaders(default_response_headers_, true);",
          "717:   upstream_request_shadow->encodeHeaders(default_response_headers_, true);",
          "718:   ASSERT_TRUE(response->waitForEndStream());",
          "719:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "720:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "721:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "722:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "723:   EXPECT_TRUE(upstream_request_main->complete());",
          "724:   EXPECT_TRUE(upstream_request_shadow->complete());",
          "725:   EXPECT_TRUE(response->complete());",
          "727:   cleanupUpstreamAndDownstream();",
          "729:   EXPECT_EQ(test_server_->counter(\"http.config_test.downstream_flow_control_paused_reading_total\")",
          "730:                 ->value(),",
          "731:             1);",
          "732:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "733:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "735:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "736:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 1);",
          "737: }",
          "",
          "---------------"
        ],
        "test/mocks/http/mocks.cc||test/mocks/http/mocks.cc": [
          "File: test/mocks/http/mocks.cc -> test/mocks/http/mocks.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: MockAsyncClientRequest::~MockAsyncClientRequest() { client_->onRequestDestroy(); }",
          "215: MockAsyncClientStream::MockAsyncClientStream() = default;",
          "218: MockFilterChainFactoryCallbacks::MockFilterChainFactoryCallbacks() = default;",
          "219: MockFilterChainFactoryCallbacks::~MockFilterChainFactoryCallbacks() = default;",
          "",
          "[Removed Lines]",
          "216: MockAsyncClientStream::~MockAsyncClientStream() = default;",
          "",
          "[Added Lines]",
          "216: MockAsyncClientStream::~MockAsyncClientStream() {",
          "217:   if (destructor_callback_) {",
          "218:     (*destructor_callback_)();",
          "219:   }",
          "220: };",
          "",
          "---------------"
        ],
        "test/mocks/http/mocks.h||test/mocks/http/mocks.h": [
          "File: test/mocks/http/mocks.h -> test/mocks/http/mocks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "479:                 const RequestOptions& args) override {",
          "480:     return send_(request, callbacks, args);",
          "481:   }",
          "483:   MOCK_METHOD(Request*, send_,",
          "484:               (RequestMessagePtr & request, Callbacks& callbacks, const RequestOptions& args));",
          "486:   MOCK_METHOD(Stream*, start, (StreamCallbacks & callbacks, const StreamOptions& args));",
          "488:   MOCK_METHOD(Event::Dispatcher&, dispatcher, ());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:   OngoingRequest* startRequest(RequestHeaderMapPtr&& headers, Callbacks& callbacks,",
          "483:                                const RequestOptions& args) override {",
          "484:     return startRequest_(headers, callbacks, args);",
          "485:   }",
          "488:   MOCK_METHOD(OngoingRequest*, startRequest_,",
          "489:               (RequestHeaderMapPtr & request, Callbacks& callbacks, const RequestOptions& args));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:   MOCK_METHOD(void, onReset, ());",
          "526: };",
          "529: public:",
          "530:   MockAsyncClientRequest(MockAsyncClient* client);",
          "531:   ~MockAsyncClientRequest() override;",
          "",
          "[Removed Lines]",
          "528: class MockAsyncClientRequest : public AsyncClient::Request {",
          "",
          "[Added Lines]",
          "532: class MockAsyncClientRequest : public virtual AsyncClient::Request {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "535:   MockAsyncClient* client_;",
          "536: };",
          "539: public:",
          "540:   MockAsyncClientStream();",
          "541:   ~MockAsyncClientStream() override;",
          "",
          "[Removed Lines]",
          "538: class MockAsyncClientStream : public AsyncClient::Stream {",
          "",
          "[Added Lines]",
          "542: class MockAsyncClientStream : public virtual AsyncClient::Stream {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "545:   MOCK_METHOD(void, sendTrailers, (RequestTrailerMap & trailers));",
          "546:   MOCK_METHOD(void, reset, ());",
          "547:   MOCK_METHOD(bool, isAboveWriteBufferHighWatermark, (), (const));",
          "548: };",
          "550: class MockDownstreamWatermarkCallbacks : public DownstreamWatermarkCallbacks {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "552:   void setDestructorCallback(AsyncClient::StreamDestructorCallbacks callback) override {",
          "553:     destructor_callback_ = callback;",
          "554:   }",
          "555:   void removeDestructorCallback() override { destructor_callback_.reset(); }",
          "556:   MOCK_METHOD(void, setWatermarkCallbacks, (DecoderFilterWatermarkCallbacks & callback),",
          "557:               (override));",
          "558:   MOCK_METHOD(void, removeWatermarkCallbacks, (), (override));",
          "560: private:",
          "561:   absl::optional<AsyncClient::StreamDestructorCallbacks> destructor_callback_;",
          "562: };",
          "564: class MockAsyncClientOngoingRequest : public virtual AsyncClient::OngoingRequest,",
          "565:                                       public MockAsyncClientStream,",
          "566:                                       public MockAsyncClientRequest {",
          "567: public:",
          "568:   MockAsyncClientOngoingRequest(MockAsyncClient* client) : MockAsyncClientRequest(client) {}",
          "569:   void captureAndSendTrailers(RequestTrailerMapPtr&& trailers) override {",
          "570:     return captureAndSendTrailers_(*trailers);",
          "571:   }",
          "572:   MOCK_METHOD(void, captureAndSendTrailers_, (RequestTrailerMap & trailers), ());",
          "",
          "---------------"
        ],
        "test/mocks/router/mocks.h||test/mocks/router/mocks.h": [
          "File: test/mocks/router/mocks.h -> test/mocks/router/mocks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:   MOCK_METHOD(void, shadow_,",
          "268:               (const std::string& cluster, Http::RequestMessagePtr& request,",
          "269:                const Http::AsyncClient::RequestOptions& options));",
          "270: };",
          "272: class TestVirtualCluster : public VirtualCluster {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:   Http::AsyncClient::OngoingRequest*",
          "272:   streamingShadow(const std::string& cluster, Http::RequestHeaderMapPtr&& request,",
          "273:                   const Http::AsyncClient::RequestOptions& options) override {",
          "274:     return streamingShadow_(cluster, request, options);",
          "275:   }",
          "276:   MOCK_METHOD(Http::AsyncClient::OngoingRequest*, streamingShadow_,",
          "277:               (const std::string& cluster, Http::RequestHeaderMapPtr& request,",
          "278:                const Http::AsyncClient::RequestOptions& options));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f0b10a9c7c130588d77d46af6240622b49b5d5e",
      "candidate_info": {
        "commit_hash": "8f0b10a9c7c130588d77d46af6240622b49b5d5e",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/8f0b10a9c7c130588d77d46af6240622b49b5d5e",
        "files": [
          "test/extensions/filters/http/cache/cache_filter_integration_test.cc",
          "test/extensions/internal_redirect/redirect_extension_integration_test.cc",
          "test/integration/base_integration_test.cc",
          "test/integration/base_integration_test.h",
          "test/integration/http2_flood_integration_test.cc",
          "test/integration/http_protocol_integration.cc",
          "test/integration/protocol_integration_test.cc",
          "test/integration/redirect_integration_test.cc"
        ],
        "message": "test: fixing waitforaccesslogs (#21809)\n\n* test: fixing waitforaccesslogs\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>",
        "before_after_code_files": [
          "test/extensions/filters/http/cache/cache_filter_integration_test.cc||test/extensions/filters/http/cache/cache_filter_integration_test.cc",
          "test/extensions/internal_redirect/redirect_extension_integration_test.cc||test/extensions/internal_redirect/redirect_extension_integration_test.cc",
          "test/integration/base_integration_test.cc||test/integration/base_integration_test.cc",
          "test/integration/base_integration_test.h||test/integration/base_integration_test.h",
          "test/integration/http2_flood_integration_test.cc||test/integration/http2_flood_integration_test.cc",
          "test/integration/http_protocol_integration.cc||test/integration/http_protocol_integration.cc",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc",
          "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ],
          "candidate": [
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "test/extensions/filters/http/cache/cache_filter_integration_test.cc||test/extensions/filters/http/cache/cache_filter_integration_test.cc": [
          "File: test/extensions/filters/http/cache/cache_filter_integration_test.cc -> test/extensions/filters/http/cache/cache_filter_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:     simTime().advanceTimeWait(Seconds(1));",
          "222:                 testing::HasSubstr(\"RFCF cache.response_from_cache_filter\"));",
          "223:   }",
          "224: }",
          "",
          "[Removed Lines]",
          "221:     EXPECT_THAT(waitForAccessLog(access_log_name_, 1),",
          "",
          "[Added Lines]",
          "221:     EXPECT_THAT(waitForAccessLog(access_log_name_, 2),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:     simTime().advanceTimeWait(Seconds(1));",
          "280:   }",
          "281: }",
          "",
          "[Removed Lines]",
          "279:     EXPECT_THAT(waitForAccessLog(access_log_name_), testing::HasSubstr(\"- via_upstream\"));",
          "",
          "[Added Lines]",
          "279:     EXPECT_THAT(waitForAccessLog(access_log_name_, 1), testing::HasSubstr(\"- via_upstream\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390:     EXPECT_EQ(response_decoder->headers().get(Http::CustomHeaders::get().Age).size(), 0);",
          "392:     simTime().advanceTimeWait(Seconds(1));",
          "394:   }",
          "395: }",
          "",
          "[Removed Lines]",
          "393:     EXPECT_THAT(waitForAccessLog(access_log_name_), testing::HasSubstr(\"- via_upstream\"));",
          "",
          "[Added Lines]",
          "393:     EXPECT_THAT(waitForAccessLog(access_log_name_, 1), testing::HasSubstr(\"- via_upstream\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "595:     simTime().advanceTimeWait(Seconds(1));",
          "597:   }",
          "598: }",
          "",
          "[Removed Lines]",
          "596:     EXPECT_THAT(waitForAccessLog(access_log_name_), testing::HasSubstr(\"- via_upstream\"));",
          "",
          "[Added Lines]",
          "596:     EXPECT_THAT(waitForAccessLog(access_log_name_, 1), testing::HasSubstr(\"- via_upstream\"));",
          "",
          "---------------"
        ],
        "test/extensions/internal_redirect/redirect_extension_integration_test.cc||test/extensions/internal_redirect/redirect_extension_integration_test.cc": [
          "File: test/extensions/internal_redirect/redirect_extension_integration_test.cc -> test/extensions/internal_redirect/redirect_extension_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:   redirect_response_.setLocation(\"http://handle.internal.redirect.max.three.hop/random/path\");",
          "124:   first_request->encodeHeaders(redirect_response_, true);",
          "126:   auto second_request = waitForNextStream();",
          "128:   redirect_response_.setLocation(\"http://handle.internal.redirect.no.repeated.target/another/path\");",
          "129:   second_request->encodeHeaders(redirect_response_, true);",
          "131:   auto third_request = waitForNextStream();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "126:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "132:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1),",
          "133:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:   ASSERT_TRUE(response->waitForEndStream());",
          "137:   ASSERT_TRUE(response->complete());",
          "138:   EXPECT_EQ(\"302\", response->headers().getStatusValue());",
          "139:   EXPECT_EQ(\"http://handle.internal.redirect.max.three.hop/yet/another/path\",",
          "140:             response->headers().getLocationValue());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:   EXPECT_THAT(waitForAccessLog(access_log_name_, 2),",
          "143:               HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:       1,",
          "145:       test_server_->counter(\"http.config_test.passthrough_internal_redirect_predicate\")->value());",
          "146:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "153:   EXPECT_EQ(\"test-header-value\",",
          "154:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "155: }",
          "",
          "[Removed Lines]",
          "147:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "148:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "149:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1),",
          "150:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "151:   EXPECT_THAT(waitForAccessLog(access_log_name_, 2),",
          "152:               HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:   redirect_response_.setLocation(\"http://handle.internal.redirect.max.three.hop/random/path\");",
          "191:   first_request->encodeHeaders(redirect_response_, true);",
          "193:   auto second_request = waitForNextStream();",
          "195:   redirect_response_.setLocation(",
          "196:       \"http://handle.internal.redirect.only.allow.listed.target/another/path\");",
          "197:   second_request->encodeHeaders(redirect_response_, true);",
          "199:   auto third_request = waitForNextStream();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "193:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "200:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1),",
          "201:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "212:       1,",
          "213:       test_server_->counter(\"http.config_test.passthrough_internal_redirect_predicate\")->value());",
          "214:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "219:   EXPECT_THAT(waitForAccessLog(access_log_name_, 2),",
          "220:               HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "221:   EXPECT_EQ(\"test-header-value\",",
          "",
          "[Removed Lines]",
          "215:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "216:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "217:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1),",
          "218:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:   redirect_response_.setLocation(\"http://handle.internal.redirect.max.three.hop/random/path\");",
          "261:   first_request->encodeHeaders(redirect_response_, true);",
          "263:   auto second_request = waitForNextStream();",
          "265:   redirect_response_.setLocation(",
          "266:       \"http://handle.internal.redirect.only.allow.safe.cross.scheme.redirect/another/path\");",
          "267:   second_request->encodeHeaders(redirect_response_, true);",
          "269:   auto third_request = waitForNextStream();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "263:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "270:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1),",
          "271:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "282:       1,",
          "283:       test_server_->counter(\"http.config_test.passthrough_internal_redirect_predicate\")->value());",
          "284:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "289:   EXPECT_THAT(waitForAccessLog(access_log_name_, 2),",
          "290:               HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "291:   EXPECT_EQ(\"test-header-value\",",
          "",
          "[Removed Lines]",
          "285:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "286:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "287:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1),",
          "288:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/integration/base_integration_test.cc||test/integration/base_integration_test.cc": [
          "File: test/integration/base_integration_test.cc -> test/integration/base_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:   return index;",
          "478: }",
          "482:   std::string contents;",
          "483:   for (int i = 0; i < 1000; ++i) {",
          "484:     contents = TestEnvironment::readFileToStringForTest(filename);",
          "485:     size_t index = entryIndex(contents, entry);",
          "486:     if (contents.length() > index) {",
          "487:       return contents.substr(index);",
          "488:     }",
          "489:     absl::SleepFor(absl::Milliseconds(1));",
          "",
          "[Removed Lines]",
          "480: std::string BaseIntegrationTest::waitForAccessLog(const std::string& filename, uint32_t entry) {",
          "",
          "[Added Lines]",
          "480: std::string BaseIntegrationTest::waitForAccessLog(const std::string& filename, uint32_t entry,",
          "481:                                                   bool allow_excess_entries) {",
          "488:       if (!allow_excess_entries) {",
          "489:         EXPECT_EQ(contents.length(), entryIndex(contents, entry + 1))",
          "490:             << \"Waiting for entry \" << entry << \" but it was not the last entry\";",
          "491:       }",
          "",
          "---------------"
        ],
        "test/integration/base_integration_test.h||test/integration/base_integration_test.h": [
          "File: test/integration/base_integration_test.h -> test/integration/base_integration_test.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   void useListenerAccessLog(absl::string_view format = \"\");",
          "149:   std::string listener_access_log_name_;",
          "",
          "[Removed Lines]",
          "147:   std::string waitForAccessLog(const std::string& filename, uint32_t entry = 0);",
          "",
          "[Added Lines]",
          "148:   std::string waitForAccessLog(const std::string& filename, uint32_t entry = 0,",
          "149:                                bool allow_excess_entries = false);",
          "",
          "---------------"
        ],
        "test/integration/http2_flood_integration_test.cc||test/integration/http2_flood_integration_test.cc": [
          "File: test/integration/http2_flood_integration_test.cc -> test/integration/http2_flood_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1158:   EXPECT_EQ(1, test_server_->counter(\"http2.rx_messaging_error\")->value());",
          "1159:   EXPECT_EQ(0,",
          "1160:             test_server_->counter(\"http.config_test.downstream_cx_delayed_close_timeout\")->value());",
          "1164: }",
          "1166: TEST_P(Http2FloodMitigationTest, UpstreamPingFlood) {",
          "",
          "[Removed Lines]",
          "1161:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"http2.invalid.header.field\"));",
          "1163:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"DPE\"));",
          "",
          "[Added Lines]",
          "1162:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0, true), HasSubstr(\"http2.invalid.header.field\"));",
          "1163:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0, true), HasSubstr(\"DPE\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1283:       0,",
          "1284:       test_server_->counter(\"cluster.cluster_0.upstream_cx_destroy_local_with_active_rq\")->value());",
          "1287:               HasSubstr(\"upstream_reset_before_response_started\"));",
          "1289: }",
          "1291: TEST_P(Http2FloodMitigationTest, UpstreamEmptyData) {",
          "",
          "[Removed Lines]",
          "1286:   EXPECT_THAT(waitForAccessLog(access_log_name_),",
          "1288:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"UPE\"));",
          "",
          "[Added Lines]",
          "1286:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0, true),",
          "1288:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0, true), HasSubstr(\"UPE\"));",
          "",
          "---------------"
        ],
        "test/integration/http_protocol_integration.cc||test/integration/http_protocol_integration.cc": [
          "File: test/integration/http_protocol_integration.cc -> test/integration/http_protocol_integration.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     BytesCountExpectation h1_expectation, BytesCountExpectation h2_expectation,",
          "103:     BytesCountExpectation h3_expectation, const int id) {",
          "104:   auto integer_near = [](int x, int y) -> bool { return std::abs(x - y) <= (x / 20); };",
          "106:   std::vector<std::string> log_entries = absl::StrSplit(access_log, ' ');",
          "107:   int wire_bytes_sent = std::stoi(log_entries[0]), wire_bytes_received = std::stoi(log_entries[1]),",
          "108:       header_bytes_sent = std::stoi(log_entries[2]),",
          "",
          "[Removed Lines]",
          "105:   std::string access_log = waitForAccessLog(access_log_name_, id);",
          "",
          "[Added Lines]",
          "105:   std::string access_log = waitForAccessLog(access_log_name_, id, true);",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:   ASSERT_TRUE(response->waitForEndStream());",
          "544:   EXPECT_TRUE(response->complete());",
          "545:   EXPECT_EQ(\"503\", response->headers().getStatusValue());",
          "547: }",
          "549: TEST_P(DownstreamProtocolIntegrationTest, FaultyFilterWithConnect) {",
          "",
          "[Removed Lines]",
          "546:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"missing_required_header\"));",
          "",
          "[Added Lines]",
          "546:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"missing_required_header\"));",
          "",
          "---------------"
        ],
        "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc": [
          "File: test/integration/redirect_integration_test.cc -> test/integration/redirect_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:   waitForNextUpstreamRequest();",
          "173:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "175:   waitForNextUpstreamRequest();",
          "176:   ASSERT(upstream_request_->headers().EnvoyOriginalUrl() != nullptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "175:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "192:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "196:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\\n\"));",
          "197: }",
          "",
          "[Removed Lines]",
          "193:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "194:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:   waitForNextUpstreamRequest();",
          "218:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "220:   waitForNextUpstreamRequest();",
          "221:   upstream_request_->encodeHeaders(default_response_headers_, true);",
          "223:   ASSERT_TRUE(response->waitForEndStream());",
          "224:   ASSERT_TRUE(response->complete());",
          "228:   expectDownstreamBytesSentAndReceived(BytesCountExpectation(140, 63, 121, 31),",
          "229:                                        BytesCountExpectation(77, 42, 77, 42),",
          "230:                                        BytesCountExpectation(77, 42, 77, 42), 1);",
          "",
          "[Removed Lines]",
          "225:   expectDownstreamBytesSentAndReceived(BytesCountExpectation(0, 63, 0, 31),",
          "226:                                        BytesCountExpectation(0, 42, 0, 42),",
          "227:                                        BytesCountExpectation(0, 42, 0, 42), 0);",
          "",
          "[Added Lines]",
          "219:   expectDownstreamBytesSentAndReceived(BytesCountExpectation(0, 63, 0, 31),",
          "220:                                        BytesCountExpectation(0, 42, 0, 42),",
          "221:                                        BytesCountExpectation(0, 42, 0, 42), 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "331:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "334:   waitForNextUpstreamRequest();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "333:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "352:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "353:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "357:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\\n\"));",
          "358: }",
          "",
          "[Removed Lines]",
          "354:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "355:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "389:   redirect_response_.setStatus(303);",
          "390:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "393:   waitForNextUpstreamRequest();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "392:               HasSubstr(\"303 internal_redirect test-header-value\\n\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "413:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "414:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "418:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\\n\"));",
          "419: }",
          "",
          "[Removed Lines]",
          "415:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "416:               HasSubstr(\"303 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "447:   redirect_response_.setStatus(303);",
          "448:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "451:   waitForNextUpstreamRequest();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "449:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "450:               HasSubstr(\"303 internal_redirect test-header-value\\n\"));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "470:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "471:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "475:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\\n\"));",
          "476: }",
          "",
          "[Removed Lines]",
          "472:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "473:               HasSubstr(\"303 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "581:     auto next_location = fmt::format(HandleThreeHopLocationFormat, i + 1);",
          "582:     redirect_response_.setLocation(next_location);",
          "583:     upstream_requests.back()->encodeHeaders(redirect_response_, true);",
          "584:   }",
          "586:   ASSERT_TRUE(response->waitForEndStream());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584:     if (i != 3) {",
          "585:       EXPECT_THAT(waitForAccessLog(access_log_name_, i),",
          "586:                   HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "587:     } else {",
          "588:       EXPECT_THAT(waitForAccessLog(access_log_name_, i),",
          "589:                   HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "590:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "593:       1, test_server_->counter(\"http.config_test.passthrough_internal_redirect_too_many_redirects\")",
          "594:              ->value());",
          "595:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "604:   EXPECT_EQ(\"test-header-value\",",
          "605:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "606: }",
          "",
          "[Removed Lines]",
          "596:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "597:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "598:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1),",
          "599:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "600:   EXPECT_THAT(waitForAccessLog(access_log_name_, 2),",
          "601:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "602:   EXPECT_THAT(waitForAccessLog(access_log_name_, 3),",
          "603:               HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "625:   waitForNextUpstreamRequest();",
          "626:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "628:   waitForNextUpstreamRequest();",
          "629:   ASSERT(upstream_request_->headers().EnvoyOriginalUrl() != nullptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "627:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "647:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "648:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "652:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\\n\"));",
          "653: }",
          "",
          "[Removed Lines]",
          "649:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "650:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "702:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "703:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "705:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "707:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"204 direct_response -\\n\"));",
          "",
          "[Removed Lines]",
          "704:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "",
          "[Added Lines]",
          "703:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0, true),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fee4d00ac89b7605f2461509dec31f19834afd2",
      "candidate_info": {
        "commit_hash": "3fee4d00ac89b7605f2461509dec31f19834afd2",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/3fee4d00ac89b7605f2461509dec31f19834afd2",
        "files": [
          "test/extensions/internal_redirect/redirect_extension_integration_test.cc",
          "test/integration/base_integration_test.cc",
          "test/integration/filter_integration_test.cc",
          "test/integration/multiplexed_integration_test.cc",
          "test/integration/protocol_integration_test.cc",
          "test/integration/redirect_integration_test.cc",
          "test/integration/upstream_filter_state_integration_test.cc"
        ],
        "message": "test: fixing access log function (#23380)\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>",
        "before_after_code_files": [
          "test/extensions/internal_redirect/redirect_extension_integration_test.cc||test/extensions/internal_redirect/redirect_extension_integration_test.cc",
          "test/integration/base_integration_test.cc||test/integration/base_integration_test.cc",
          "test/integration/filter_integration_test.cc||test/integration/filter_integration_test.cc",
          "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc",
          "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc",
          "test/integration/upstream_filter_state_integration_test.cc||test/integration/upstream_filter_state_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ],
          "candidate": [
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "test/extensions/internal_redirect/redirect_extension_integration_test.cc||test/extensions/internal_redirect/redirect_extension_integration_test.cc": [
          "File: test/extensions/internal_redirect/redirect_extension_integration_test.cc -> test/extensions/internal_redirect/redirect_extension_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:   redirect_response_.setLocation(\"http://handle.internal.redirect.max.three.hop/random/path\");",
          "124:   first_request->encodeHeaders(redirect_response_, true);",
          "125:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "128:   auto second_request = waitForNextStream();",
          "130:   redirect_response_.setLocation(\"http://handle.internal.redirect.no.repeated.target/another/path\");",
          "131:   second_request->encodeHeaders(redirect_response_, true);",
          "132:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1),",
          "135:   auto third_request = waitForNextStream();",
          "",
          "[Removed Lines]",
          "126:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "133:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "126:               HasSubstr(\"302 internal_redirect test-header-value\"));",
          "133:               HasSubstr(\"302 internal_redirect test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:   ASSERT_TRUE(response->waitForEndStream());",
          "141:   ASSERT_TRUE(response->complete());",
          "142:   EXPECT_THAT(waitForAccessLog(access_log_name_, 2),",
          "144:   EXPECT_EQ(\"302\", response->headers().getStatusValue());",
          "145:   EXPECT_EQ(\"http://handle.internal.redirect.max.three.hop/yet/another/path\",",
          "146:             response->headers().getLocationValue());",
          "",
          "[Removed Lines]",
          "143:               HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "143:               HasSubstr(\"302 via_upstream test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190:   redirect_response_.setLocation(\"http://handle.internal.redirect.max.three.hop/random/path\");",
          "191:   first_request->encodeHeaders(redirect_response_, true);",
          "192:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "195:   auto second_request = waitForNextStream();",
          "",
          "[Removed Lines]",
          "193:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "193:               HasSubstr(\"302 internal_redirect test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:       \"http://handle.internal.redirect.only.allow.listed.target/another/path\");",
          "199:   second_request->encodeHeaders(redirect_response_, true);",
          "200:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1),",
          "203:   auto third_request = waitForNextStream();",
          "",
          "[Removed Lines]",
          "201:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "201:               HasSubstr(\"302 internal_redirect test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:       test_server_->counter(\"http.config_test.passthrough_internal_redirect_predicate\")->value());",
          "218:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "219:   EXPECT_THAT(waitForAccessLog(access_log_name_, 2),",
          "221:   EXPECT_EQ(\"test-header-value\",",
          "222:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "223: }",
          "",
          "[Removed Lines]",
          "220:               HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "220:               HasSubstr(\"302 via_upstream test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:   redirect_response_.setLocation(\"http://handle.internal.redirect.max.three.hop/random/path\");",
          "261:   first_request->encodeHeaders(redirect_response_, true);",
          "262:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "265:   auto second_request = waitForNextStream();",
          "",
          "[Removed Lines]",
          "263:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "263:               HasSubstr(\"302 internal_redirect test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "268:       \"http://handle.internal.redirect.only.allow.safe.cross.scheme.redirect/another/path\");",
          "269:   second_request->encodeHeaders(redirect_response_, true);",
          "270:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1),",
          "273:   auto third_request = waitForNextStream();",
          "",
          "[Removed Lines]",
          "271:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "271:               HasSubstr(\"302 internal_redirect test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "287:       test_server_->counter(\"http.config_test.passthrough_internal_redirect_predicate\")->value());",
          "288:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "289:   EXPECT_THAT(waitForAccessLog(access_log_name_, 2),",
          "291:   EXPECT_EQ(\"test-header-value\",",
          "292:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "293: }",
          "",
          "[Removed Lines]",
          "290:               HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "290:               HasSubstr(\"302 via_upstream test-header-value\"));",
          "",
          "---------------"
        ],
        "test/integration/base_integration_test.cc||test/integration/base_integration_test.cc": [
          "File: test/integration/base_integration_test.cc -> test/integration/base_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "468:   ASSERT_TRUE(config_helper_.setListenerAccessLog(listener_access_log_name_, format));",
          "469: }",
          "486: std::string BaseIntegrationTest::waitForAccessLog(const std::string& filename, uint32_t entry,",
          "487:                                                   bool allow_excess_entries) {",
          "489:   std::string contents;",
          "490:   for (int i = 0; i < 1000; ++i) {",
          "491:     contents = TestEnvironment::readFileToStringForTest(filename);",
          "499:     }",
          "500:     absl::SleepFor(absl::Milliseconds(1));",
          "501:   }",
          "503:   return \"\";",
          "504: }",
          "",
          "[Removed Lines]",
          "474: size_t entryIndex(const std::string& file, uint32_t entry) {",
          "475:   size_t index = 0;",
          "476:   for (uint32_t i = 0; i < entry; ++i) {",
          "477:     index = file.find('\\n', index);",
          "478:     if (index == std::string::npos || index == file.length()) {",
          "479:       return file.length();",
          "480:     }",
          "481:     ++index;",
          "482:   }",
          "483:   return index;",
          "484: }",
          "492:     size_t index = entryIndex(contents, entry);",
          "493:     if (contents.length() > index) {",
          "494:       if (!allow_excess_entries) {",
          "495:         EXPECT_EQ(contents.length(), entryIndex(contents, entry + 1))",
          "496:             << \"Waiting for entry \" << entry << \" but it was not the last entry\";",
          "497:       }",
          "498:       return contents.substr(index);",
          "502:   RELEASE_ASSERT(0, absl::StrCat(\"Timed out waiting for access log. Found: \", contents));",
          "",
          "[Added Lines]",
          "477:     std::vector<std::string> entries = absl::StrSplit(contents, '\\n', absl::SkipEmpty());",
          "478:     if (entries.size() >= entry + 1) {",
          "481:       EXPECT_TRUE(allow_excess_entries || entries.size() == entry + 1)",
          "482:           << \"Waiting for entry index \" << entry << \" but it was not the last entry as there were \"",
          "483:           << entries.size() << \"\\n\"",
          "484:           << contents;",
          "485:       return entries[entry];",
          "489:   RELEASE_ASSERT(0, absl::StrCat(\"Timed out waiting for access log. Found: '\", contents, \"'\"));",
          "",
          "---------------"
        ],
        "test/integration/filter_integration_test.cc||test/integration/filter_integration_test.cc": [
          "File: test/integration/filter_integration_test.cc -> test/integration/filter_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:   ASSERT_TRUE(response->waitForEndStream());",
          "240:   EXPECT_TRUE(response->complete());",
          "241:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "243: }",
          "245: TEST_P(FilterIntegrationTest, MissingHeadersLocalReplyWithBodyBytesCount) {",
          "",
          "[Removed Lines]",
          "242:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"invalid_header_filter_ready\\n\"));",
          "",
          "[Added Lines]",
          "242:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"invalid_header_filter_ready\"));",
          "",
          "---------------"
        ],
        "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc": [
          "File: test/integration/multiplexed_integration_test.cc -> test/integration/multiplexed_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1076:   ASSERT_TRUE(response->waitForEndStream());",
          "1077:   EXPECT_TRUE(response->complete());",
          "1078:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "1080: }",
          "1082: TEST_P(MultiplexedIntegrationTest, GrpcRequestTimeout) {",
          "",
          "[Removed Lines]",
          "1079:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"via_upstream\\n\"));",
          "",
          "[Added Lines]",
          "1079:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"via_upstream\"));",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "608:   ASSERT_TRUE(response->waitForEndStream());",
          "609:   EXPECT_TRUE(response->complete());",
          "610:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "612: }",
          "614: TEST_P(DownstreamProtocolIntegrationTest, MissingHeadersLocalReplyDownstreamBytesCount) {",
          "",
          "[Removed Lines]",
          "611:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"invalid_header_filter_ready\\n\"));",
          "",
          "[Added Lines]",
          "611:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"invalid_header_filter_ready\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "675:   ASSERT_TRUE(response->waitForEndStream());",
          "676:   EXPECT_TRUE(response->complete());",
          "677:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "679: }",
          "681: TEST_P(DownstreamProtocolIntegrationTest, MissingHeadersLocalReplyWithBodyBytesCount) {",
          "",
          "[Removed Lines]",
          "678:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"invalid_header_filter_ready\\n\"));",
          "",
          "[Added Lines]",
          "678:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"invalid_header_filter_ready\"));",
          "",
          "---------------"
        ],
        "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc": [
          "File: test/integration/redirect_integration_test.cc -> test/integration/redirect_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:   EXPECT_TRUE(response->complete());",
          "112:   EXPECT_EQ(\"302\", response->headers().getStatusValue());",
          "113:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "116:   EXPECT_EQ(\"test-header-value\",",
          "117:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "118: }",
          "",
          "[Removed Lines]",
          "114:   EXPECT_THAT(waitForAccessLog(access_log_name_),",
          "115:               HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "114:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"302 via_upstream test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:       0,",
          "149:       test_server_->counter(\"cluster.cluster_0.upstream_internal_redirect_failed_total\")->value());",
          "150:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "153:   EXPECT_EQ(\"test-header-value\",",
          "154:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "155: }",
          "",
          "[Removed Lines]",
          "151:   EXPECT_THAT(waitForAccessLog(access_log_name_),",
          "152:               HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "150:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"302 via_upstream test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "177:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "180:   waitForNextUpstreamRequest();",
          "181:   ASSERT(upstream_request_->headers().EnvoyOriginalUrl() != nullptr);",
          "",
          "[Removed Lines]",
          "178:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "176:               HasSubstr(\"302 internal_redirect test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "197:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "200: }",
          "202: TEST_P(RedirectIntegrationTest, BasicInternalRedirectDownstreamBytesCount) {",
          "",
          "[Removed Lines]",
          "199:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\\n\"));",
          "",
          "[Added Lines]",
          "197:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "334:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "335:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "339:   waitForNextUpstreamRequest();",
          "",
          "[Removed Lines]",
          "336:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "334:               HasSubstr(\"302 internal_redirect test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "357:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "358:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "361: }",
          "363: TEST_P(RedirectIntegrationTest, InternalRedirectHandlesHttp303) {",
          "",
          "[Removed Lines]",
          "360:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\\n\"));",
          "",
          "[Added Lines]",
          "358:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "392:   redirect_response_.setStatus(303);",
          "393:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "394:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "398:   waitForNextUpstreamRequest();",
          "",
          "[Removed Lines]",
          "395:               HasSubstr(\"303 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "393:               HasSubstr(\"303 internal_redirect test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "418:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "419:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "422: }",
          "424: TEST_P(RedirectIntegrationTest, InternalRedirectHttp303PreservesHeadMethod) {",
          "",
          "[Removed Lines]",
          "421:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\\n\"));",
          "",
          "[Added Lines]",
          "419:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\"));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "450:   redirect_response_.setStatus(303);",
          "451:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "452:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "456:   waitForNextUpstreamRequest();",
          "",
          "[Removed Lines]",
          "453:               HasSubstr(\"303 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "451:               HasSubstr(\"303 internal_redirect test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "475:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "476:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "479: }",
          "481: TEST_P(RedirectIntegrationTest, InternalRedirectCancelledDueToBufferOverflow) {",
          "",
          "[Removed Lines]",
          "478:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\\n\"));",
          "",
          "[Added Lines]",
          "476:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\"));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "586:     upstream_requests.back()->encodeHeaders(redirect_response_, true);",
          "587:     if (i != 3) {",
          "588:       EXPECT_THAT(waitForAccessLog(access_log_name_, i),",
          "590:     } else {",
          "591:       EXPECT_THAT(waitForAccessLog(access_log_name_, i),",
          "593:     }",
          "594:   }",
          "",
          "[Removed Lines]",
          "589:                   HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "592:                   HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "587:                   HasSubstr(\"302 internal_redirect test-header-value\"));",
          "590:                   HasSubstr(\"302 via_upstream test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "627:   waitForNextUpstreamRequest();",
          "628:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "629:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "632:   waitForNextUpstreamRequest();",
          "633:   ASSERT(upstream_request_->headers().EnvoyOriginalUrl() != nullptr);",
          "",
          "[Removed Lines]",
          "630:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "628:               HasSubstr(\"302 internal_redirect test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "651:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "652:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "655: }",
          "657: TEST_P(RedirectIntegrationTest, InvalidRedirect) {",
          "",
          "[Removed Lines]",
          "654:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\\n\"));",
          "",
          "[Added Lines]",
          "652:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"200 via_upstream -\"));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "670:       1,",
          "671:       test_server_->counter(\"cluster.cluster_0.upstream_internal_redirect_failed_total\")->value());",
          "672:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "675:   EXPECT_EQ(\"test-header-value\",",
          "676:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "677: }",
          "",
          "[Removed Lines]",
          "673:   EXPECT_THAT(waitForAccessLog(access_log_name_),",
          "674:               HasSubstr(\"302 via_upstream test-header-value\\n\"));",
          "",
          "[Added Lines]",
          "671:   EXPECT_THAT(waitForAccessLog(access_log_name_), HasSubstr(\"302 via_upstream test-header-value\"));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "704:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "705:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "706:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0, true),",
          "710: }",
          "712: INSTANTIATE_TEST_SUITE_P(Protocols, RedirectIntegrationTest,",
          "",
          "[Removed Lines]",
          "707:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "709:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"204 direct_response -\\n\"));",
          "",
          "[Added Lines]",
          "704:               HasSubstr(\"302 internal_redirect test-header-value\"));",
          "706:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"204 direct_response -\"));",
          "",
          "---------------"
        ],
        "test/integration/upstream_filter_state_integration_test.cc||test/integration/upstream_filter_state_integration_test.cc": [
          "File: test/integration/upstream_filter_state_integration_test.cc -> test/integration/upstream_filter_state_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:         envoy::extensions::access_loggers::file::v3::FileAccessLog access_log_config;",
          "146:         access_log_config.set_path(log_file);",
          "147:         access_log_config.mutable_log_format()->mutable_text_format_source()->set_inline_string(",
          "149:         upstream_log_config->mutable_typed_config()->PackFrom(access_log_config);",
          "150:         typed_config->PackFrom(router_config);",
          "151:       });",
          "",
          "[Removed Lines]",
          "148:             \"%UPSTREAM_FILTER_STATE(test_key)%\");",
          "",
          "[Added Lines]",
          "148:             \"%UPSTREAM_FILTER_STATE(test_key)%\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}