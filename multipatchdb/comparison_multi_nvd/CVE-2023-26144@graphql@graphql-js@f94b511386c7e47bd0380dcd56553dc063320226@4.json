{
  "cve_id": "CVE-2023-26144",
  "cve_desc": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
  "repo": "graphql/graphql-js",
  "patch_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
  "patch_info": {
    "commit_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
    "repo": "graphql/graphql-js",
    "commit_url": "https://github.com/graphql/graphql-js/commit/f94b511386c7e47bd0380dcd56553dc063320226",
    "files": [
      "benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ],
    "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3958)\n\nCo-authored-by: AaronMoat <AaronMoat@users.noreply.github.com>\nCo-authored-by: Ivan Goncharov <ivan.goncharov.ua@gmail.com>\nResolves https://github.com/graphql/graphql-js/issues/3955 (at least",
    "before_after_code_files": [
      "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ]
  },
  "patch_diff": {
    "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
      "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { graphqlSync } from 'graphql/graphql.js';",
      "2: import { buildSchema } from 'graphql/utilities/buildASTSchema.js';",
      "4: const schema = buildSchema('type Query { hello: String! }');",
      "5: const source = `{ ${'hello '.repeat(250)}}`;",
      "7: export const benchmark = {",
      "8:   name: 'Many repeated fields',",
      "9:   count: 5,",
      "10:   measure() {",
      "11:     graphqlSync({ schema, source });",
      "12:   },",
      "13: };",
      "",
      "---------------"
    ],
    "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts": [
      "File: src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts -> src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "179:     ]);",
      "180:   });",
      "182:   it('mix of stream and no stream', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:   it('different stream directive extra argument', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "185:         name @stream(label: \"streamLabel\", initialCount: 1)",
      "186:         name @stream(label: \"streamLabel\", initialCount: 1, extraArg: true)",
      "187:       }",
      "188:     `).toDeepEqual([",
      "189:       {",
      "190:         message:",
      "191:           'Fields \"name\" conflict because they have differing stream directives. Use different aliases on the fields to fetch both if this was intentional.',",
      "192:         locations: [",
      "193:           { line: 3, column: 9 },",
      "194:           { line: 4, column: 9 },",
      "195:         ],",
      "196:       },",
      "197:     ]);",
      "198:   });",
      "",
      "---------------"
    ],
    "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
      "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   DirectiveNode,",
      "8:   FieldNode,",
      "9:   FragmentDefinitionNode,",
      "11:   SelectionSetNode,",
      "12: } from '../../language/ast.js';",
      "13: import { Kind } from '../../language/kinds.js';",
      "14: import { print } from '../../language/printer.js';",
      "",
      "[Removed Lines]",
      "10:   ObjectValueNode,",
      "",
      "[Added Lines]",
      "11:   ValueNode,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "592:     }",
      "596:       return [",
      "597:         [responseName, 'they have differing arguments'],",
      "598:         [node1],",
      "",
      "[Removed Lines]",
      "595:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
      "",
      "[Added Lines]",
      "595:     if (!sameArguments(node1, node2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "649:   }",
      "650: }",
      "665: }",
      "667: function getStreamDirective(",
      "",
      "[Removed Lines]",
      "652: function stringifyArguments(fieldNode: FieldNode | DirectiveNode): string {",
      "654:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
      "656:   const inputObjectWithArgs: ObjectValueNode = {",
      "657:     kind: Kind.OBJECT,",
      "658:     fields: args.map((argNode) => ({",
      "659:       kind: Kind.OBJECT_FIELD,",
      "660:       name: argNode.name,",
      "661:       value: argNode.value,",
      "662:     })),",
      "663:   };",
      "664:   return print(sortValueNode(inputObjectWithArgs));",
      "",
      "[Added Lines]",
      "652: function sameArguments(",
      "653:   node1: FieldNode | DirectiveNode,",
      "654:   node2: FieldNode | DirectiveNode,",
      "655: ): boolean {",
      "656:   const args1 = node1.arguments;",
      "657:   const args2 = node2.arguments;",
      "659:   if (args1 === undefined || args1.length === 0) {",
      "660:     return args2 === undefined || args2.length === 0;",
      "661:   }",
      "662:   if (args2 === undefined || args2.length === 0) {",
      "663:     return false;",
      "664:   }",
      "666:   if (args1.length !== args2.length) {",
      "667:     return false;",
      "668:   }",
      "670:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
      "671:   return args1.every((arg1) => {",
      "672:     const value1 = arg1.value;",
      "673:     const value2 = values2.get(arg1.name.value);",
      "674:     if (value2 === undefined) {",
      "675:       return false;",
      "676:     }",
      "678:     return stringifyValue(value1) === stringifyValue(value2);",
      "679:   });",
      "680: }",
      "682: function stringifyValue(value: ValueNode): string | null {",
      "683:   return print(sortValueNode(value));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "681:     return true;",
      "682:   } else if (stream1 && stream2) {",
      "685:   }",
      "687:   return false;",
      "",
      "[Removed Lines]",
      "684:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
      "",
      "[Added Lines]",
      "703:     return sameArguments(stream1, stream2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "98b6541e3b68948dfee0f7f8e5d0e7eb4a806bff",
      "candidate_info": {
        "commit_hash": "98b6541e3b68948dfee0f7f8e5d0e7eb4a806bff",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/98b6541e3b68948dfee0f7f8e5d0e7eb4a806bff",
        "files": [
          "src/execution/__tests__/union-interface-test.ts",
          "src/execution/execute.ts"
        ],
        "message": "fix: improve handling of promises in defaultTypeResolver (#3494)\n\nCurrently it is possible to have unhandled promise rejections that arise\nfrom a mix of sync and async isTypeOf checks.\n\n\nThis should fix that issue.",
        "before_after_code_files": [
          "src/execution/__tests__/union-interface-test.ts||src/execution/__tests__/union-interface-test.ts",
          "src/execution/execute.ts||src/execution/execute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/__tests__/union-interface-test.ts||src/execution/__tests__/union-interface-test.ts": [
          "File: src/execution/__tests__/union-interface-test.ts -> src/execution/__tests__/union-interface-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { expect } from 'chai';",
          "2: import { describe, it } from 'mocha';",
          "4: import { parse } from '../../language/parser.js';",
          "6: import {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import { expectJSON } from '../../__testUtils__/expectJSON.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12: import { GraphQLBoolean, GraphQLString } from '../../type/scalars.js';",
          "13: import { GraphQLSchema } from '../../type/schema.js';",
          "17: class Dog {",
          "18:   name: string;",
          "",
          "[Removed Lines]",
          "15: import { executeSync } from '../execute.js';",
          "",
          "[Added Lines]",
          "17: import { execute, executeSync } from '../execute.js';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:   }",
          "43: }",
          "45: class Person {",
          "46:   name: string;",
          "47:   pets: ReadonlyArray<Dog | Cat> | undefined;",
          "48:   friends: ReadonlyArray<Dog | Cat | Person> | undefined;",
          "50:   constructor(",
          "51:     name: string,",
          "52:     pets?: ReadonlyArray<Dog | Cat>,",
          "53:     friends?: ReadonlyArray<Dog | Cat | Person>,",
          "54:   ) {",
          "55:     this.name = name;",
          "56:     this.pets = pets;",
          "57:     this.friends = friends;",
          "58:   }",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: class Plant {",
          "48:   name: string;",
          "50:   constructor(name: string) {",
          "51:     this.name = name;",
          "52:   }",
          "53: }",
          "59:   responsibilities: ReadonlyArray<Dog | Cat | Plant> | undefined;",
          "65:     responsibilities?: ReadonlyArray<Dog | Cat | Plant>,",
          "70:     this.responsibilities = responsibilities;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:   isTypeOf: (value) => value instanceof Cat,",
          "109: });",
          "111: const PetType = new GraphQLUnionType({",
          "112:   name: 'Pet',",
          "113:   types: [DogType, CatType],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: const PlantType: GraphQLObjectType = new GraphQLObjectType({",
          "125:   name: 'Plant',",
          "126:   interfaces: [NamedType],",
          "127:   fields: () => ({",
          "128:     name: { type: GraphQLString },",
          "129:   }),",
          "131:   isTypeOf: async () => {",
          "132:     throw new Error('Not sure if this is a plant');",
          "133:   },",
          "134: });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "124:   },",
          "125: });",
          "127: const PersonType: GraphQLObjectType = new GraphQLObjectType({",
          "128:   name: 'Person',",
          "129:   interfaces: [NamedType, MammalType, LifeType],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: const PetOrPlantType = new GraphQLUnionType({",
          "153:   name: 'PetOrPlantType',",
          "154:   types: [PlantType, DogType, CatType],",
          "155: });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "131:     name: { type: GraphQLString },",
          "132:     pets: { type: new GraphQLList(PetType) },",
          "133:     friends: { type: new GraphQLList(NamedType) },",
          "134:     progeny: { type: new GraphQLList(PersonType) },",
          "135:     mother: { type: PersonType },",
          "136:     father: { type: PersonType },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:     responsibilities: { type: new GraphQLList(PetOrPlantType) },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "151: odie.mother = new Dog(\"Odie's Mom\", true);",
          "152: odie.mother.progeny = [odie];",
          "154: const liz = new Person('Liz');",
          "157: describe('Execute: Union and intersection types', () => {",
          "158:   it('can introspect on union and intersection types', () => {",
          "",
          "[Removed Lines]",
          "155: const john = new Person('John', [garfield, odie], [liz, odie]);",
          "",
          "[Added Lines]",
          "185: const fern = new Plant('Fern');",
          "187: const john = new Person(",
          "188:   'John',",
          "189:   [garfield, odie],",
          "190:   [liz, odie],",
          "191:   [garfield, fern],",
          "192: );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "195:           name: 'Named',",
          "196:           fields: [{ name: 'name' }],",
          "197:           interfaces: [],",
          "199:           enumValues: null,",
          "200:           inputFields: null,",
          "201:         },",
          "",
          "[Removed Lines]",
          "198:           possibleTypes: [{ name: 'Dog' }, { name: 'Cat' }, { name: 'Person' }],",
          "",
          "[Added Lines]",
          "235:           possibleTypes: [",
          "236:             { name: 'Dog' },",
          "237:             { name: 'Cat' },",
          "238:             { name: 'Person' },",
          "239:             { name: 'Plant' },",
          "240:           ],",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "545:     expect(encounteredRootValue).to.equal(rootValue);",
          "546:     expect(encounteredContext).to.equal(contextValue);",
          "547:   });",
          "548: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "591:   it('it handles rejections from isTypeOf after after an isTypeOf returns true', async () => {",
          "592:     const document = parse(`",
          "593:       {",
          "594:         responsibilities {",
          "595:           __typename",
          "596:           ... on Dog {",
          "597:             name",
          "598:             barks",
          "599:           }",
          "600:           ... on Cat {",
          "601:             name",
          "602:             meows",
          "603:           }",
          "604:         }",
          "605:       }",
          "606:     `);",
          "608:     const rootValue = new Person('John', [], [liz], [garfield]);",
          "609:     const contextValue = { authToken: '123abc' };",
          "613:     process.on('unhandledRejection', () => {",
          "614:       expect.fail('Unhandled rejection');",
          "615:     });",
          "617:     const result = await execute({",
          "618:       schema,",
          "619:       document,",
          "620:       rootValue,",
          "621:       contextValue,",
          "622:     });",
          "624:     expectJSON(result).toDeepEqual({",
          "625:       data: {",
          "626:         responsibilities: [",
          "627:           {",
          "628:             __typename: 'Cat',",
          "629:             meows: false,",
          "630:             name: 'Garfield',",
          "631:           },",
          "632:         ],",
          "633:       },",
          "634:     });",
          "635:   });",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1823:         if (isPromise(isTypeOfResult)) {",
          "1824:           promisedIsTypeOfResults[i] = isTypeOfResult;",
          "1825:         } else if (isTypeOfResult) {",
          "1826:           return type.name;",
          "1827:         }",
          "1828:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1826:           if (promisedIsTypeOfResults.length > 0) {",
          "1827:             Promise.all(promisedIsTypeOfResults).then(undefined, () => {",
          "1829:             });",
          "1830:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d811c97d57d14f579fc546b2f03f783f590c33bb",
      "candidate_info": {
        "commit_hash": "d811c97d57d14f579fc546b2f03f783f590c33bb",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/d811c97d57d14f579fc546b2f03f783f590c33bb",
        "files": [
          "src/execution/execute.ts"
        ],
        "message": "refactor: introduce completeIterableValue (#4052)\n\nrefactoring that will streamline when we introduce two versions of this\nfunction to optimize the loop when not streaming\n\ndepends on #4051",
        "before_after_code_files": [
          "src/execution/execute.ts||src/execution/execute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1188:     );",
          "1189:   }",
          "1193:   let containsPromise = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1191:   return completeIterableValue(",
          "1192:     exeContext,",
          "1193:     itemType,",
          "1194:     fieldGroup,",
          "1195:     info,",
          "1196:     path,",
          "1197:     result,",
          "1198:     incrementalContext,",
          "1199:     deferMap,",
          "1200:   );",
          "1201: }",
          "1203: function completeIterableValue(",
          "1204:   exeContext: ExecutionContext,",
          "1205:   itemType: GraphQLOutputType,",
          "1206:   fieldGroup: FieldGroup,",
          "1207:   info: GraphQLResolveInfo,",
          "1208:   path: Path,",
          "1209:   items: Iterable<unknown>,",
          "1210:   incrementalContext: IncrementalContext | undefined,",
          "1211:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1212: ): PromiseOrValue<GraphQLWrappedResult<ReadonlyArray<unknown>>> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1198:   ];",
          "1199:   let index = 0;",
          "1200:   const streamUsage = getStreamUsage(exeContext, fieldGroup, path);",
          "1202:   let iteration = iterator.next();",
          "1203:   while (!iteration.done) {",
          "1204:     const item = iteration.value;",
          "",
          "[Removed Lines]",
          "1201:   const iterator = result[Symbol.iterator]();",
          "",
          "[Added Lines]",
          "1223:   const iterator = items[Symbol.iterator]();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83e5ec5f1b59d2b16e20238ea94ea3c5869f99e2",
      "candidate_info": {
        "commit_hash": "83e5ec5f1b59d2b16e20238ea94ea3c5869f99e2",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/83e5ec5f1b59d2b16e20238ea94ea3c5869f99e2",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts"
        ],
        "message": "polish(incremental): refactor getNewPending functionality (#4108)\n\nreturn newPending alongside incremental results when completing a\nfragment\n\n= removes need to track `newPending` and `newIncrementalDataRecords` as\npart of the class\n= unifies handling of retrieving new pending for initial result,\ncompleted fragments, and stream items incremental entries",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { BoxedPromiseOrValue } from '../jsutils/BoxedPromiseOrValue.js';",
          "2: import { isPromise } from '../jsutils/isPromise.js';",
          "3: import { promiseWithResolvers } from '../jsutils/promiseWithResolvers.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import { invariant } from '../jsutils/invariant.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:   deferredFragmentRecord: DeferredFragmentRecord;",
          "21:   deferredGroupedFieldSetRecords: Set<DeferredGroupedFieldSetRecord>;",
          "22:   reconcilableResults: Set<ReconcilableDeferredGroupedFieldSetResult>;",
          "24: }",
          "26: function isDeferredFragmentNode(",
          "28: ): node is DeferredFragmentNode {",
          "36: }",
          "38: type SubsequentResultNode = DeferredFragmentNode | StreamRecord;",
          "",
          "[Removed Lines]",
          "23:   children: Array<DeferredFragmentNode>;",
          "27:   node: DeferredFragmentNode | undefined,",
          "29:   return node !== undefined;",
          "30: }",
          "32: function isStreamNode(",
          "33:   record: SubsequentResultNode | IncrementalDataRecord,",
          "34: ): record is StreamRecord {",
          "35:   return 'streamItemQueue' in record;",
          "",
          "[Added Lines]",
          "24:   children: Set<SubsequentResultNode>;",
          "28:   node: SubsequentResultNode | undefined,",
          "30:   return node !== undefined && 'deferredFragmentRecord' in node;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43: export class IncrementalGraph {",
          "45:   private _deferredFragmentNodes: Map<",
          "46:     DeferredFragmentRecord,",
          "47:     DeferredFragmentNode",
          "48:   >;",
          "52:   private _completedQueue: Array<IncrementalDataRecordResult>;",
          "53:   private _nextQueue: Array<",
          "54:     (iterable: IteratorResult<Iterable<IncrementalDataRecordResult>>) => void",
          "55:   >;",
          "57:   constructor() {",
          "59:     this._deferredFragmentNodes = new Map();",
          "62:     this._completedQueue = [];",
          "63:     this._nextQueue = [];",
          "64:   }",
          "67:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "76:   }",
          "78:   addCompletedReconcilableDeferredGroupedFieldSet(",
          "79:     reconcilableResult: ReconcilableDeferredGroupedFieldSetResult,",
          "80:   ): void {",
          "88:       deferredFragmentNode.deferredGroupedFieldSetRecords.delete(",
          "89:         reconcilableResult.deferredGroupedFieldSetRecord,",
          "90:       );",
          "91:       deferredFragmentNode.reconcilableResults.add(reconcilableResult);",
          "92:     }",
          "137:     }",
          "141:   }",
          "143:   completedIncrementalData() {",
          "",
          "[Removed Lines]",
          "44:   private _pending: Set<SubsequentResultNode>;",
          "50:   private _newPending: Set<SubsequentResultNode>;",
          "51:   private _newIncrementalDataRecords: Set<IncrementalDataRecord>;",
          "58:     this._pending = new Set();",
          "60:     this._newIncrementalDataRecords = new Set();",
          "61:     this._newPending = new Set();",
          "66:   addIncrementalDataRecords(",
          "68:   ): void {",
          "69:     for (const incrementalDataRecord of incrementalDataRecords) {",
          "70:       if (isDeferredGroupedFieldSetRecord(incrementalDataRecord)) {",
          "71:         this._addDeferredGroupedFieldSetRecord(incrementalDataRecord);",
          "72:       } else {",
          "73:         this._addStreamRecord(incrementalDataRecord);",
          "74:       }",
          "75:     }",
          "81:     const deferredFragmentNodes: Array<DeferredFragmentNode> =",
          "82:       reconcilableResult.deferredGroupedFieldSetRecord.deferredFragmentRecords",
          "83:         .map((deferredFragmentRecord) =>",
          "84:           this._deferredFragmentNodes.get(deferredFragmentRecord),",
          "85:         )",
          "86:         .filter<DeferredFragmentNode>(isDeferredFragmentNode);",
          "87:     for (const deferredFragmentNode of deferredFragmentNodes) {",
          "93:   }",
          "95:   getNewPending(): ReadonlyArray<SubsequentResultRecord> {",
          "96:     const newPending: Array<SubsequentResultRecord> = [];",
          "97:     for (const node of this._newPending) {",
          "98:       if (isStreamNode(node)) {",
          "99:         this._pending.add(node);",
          "100:         newPending.push(node);",
          "101:         this._newIncrementalDataRecords.add(node);",
          "102:       } else if (node.deferredGroupedFieldSetRecords.size > 0) {",
          "103:         for (const deferredGroupedFieldSetNode of node.deferredGroupedFieldSetRecords) {",
          "104:           this._newIncrementalDataRecords.add(deferredGroupedFieldSetNode);",
          "105:         }",
          "106:         this._pending.add(node);",
          "107:         newPending.push(node.deferredFragmentRecord);",
          "108:       } else {",
          "109:         for (const child of node.children) {",
          "110:           this._newPending.add(child);",
          "111:         }",
          "112:       }",
          "113:     }",
          "114:     this._newPending.clear();",
          "116:     for (const incrementalDataRecord of this._newIncrementalDataRecords) {",
          "117:       if (isStreamNode(incrementalDataRecord)) {",
          "119:         this._onStreamItems(",
          "120:           incrementalDataRecord,",
          "121:           incrementalDataRecord.streamItemQueue,",
          "122:         );",
          "123:       } else {",
          "124:         const deferredGroupedFieldSetResult = incrementalDataRecord.result;",
          "125:         const result =",
          "126:           deferredGroupedFieldSetResult instanceof BoxedPromiseOrValue",
          "127:             ? deferredGroupedFieldSetResult.value",
          "128:             : deferredGroupedFieldSetResult().value;",
          "130:         if (isPromise(result)) {",
          "132:           result.then((resolved) => this._enqueue(resolved));",
          "133:         } else {",
          "134:           this._enqueue(result);",
          "135:         }",
          "136:       }",
          "138:     this._newIncrementalDataRecords.clear();",
          "140:     return newPending;",
          "",
          "[Added Lines]",
          "39:   private _rootNodes: Set<SubsequentResultNode>;",
          "51:     this._rootNodes = new Set();",
          "57:   getNewRootNodes(",
          "59:   ): ReadonlyArray<SubsequentResultRecord> {",
          "60:     const initialResultChildren = new Set<SubsequentResultNode>();",
          "61:     this._addIncrementalDataRecords(",
          "62:       incrementalDataRecords,",
          "63:       undefined,",
          "64:       initialResultChildren,",
          "65:     );",
          "66:     return this._promoteNonEmptyToRoot(initialResultChildren);",
          "72:     for (const deferredFragmentNode of this._fragmentsToNodes(",
          "73:       reconcilableResult.deferredGroupedFieldSetRecord.deferredFragmentRecords,",
          "74:     )) {",
          "81:     const incrementalDataRecords = reconcilableResult.incrementalDataRecords;",
          "82:     if (incrementalDataRecords !== undefined) {",
          "83:       this._addIncrementalDataRecords(",
          "84:         incrementalDataRecords,",
          "85:         reconcilableResult.deferredGroupedFieldSetRecord",
          "86:           .deferredFragmentRecords,",
          "87:       );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:   }",
          "176:   hasNext(): boolean {",
          "178:   }",
          "183:     const deferredFragmentNode = this._deferredFragmentNodes.get(",
          "184:       deferredFragmentRecord,",
          "185:     );",
          "188:     if (deferredFragmentNode === undefined) {",
          "190:     }",
          "191:     if (deferredFragmentNode.deferredGroupedFieldSetRecords.size > 0) {",
          "192:       return;",
          "",
          "[Removed Lines]",
          "177:     return this._pending.size > 0;",
          "180:   completeDeferredFragment(",
          "181:     deferredFragmentRecord: DeferredFragmentRecord,",
          "182:   ): Array<ReconcilableDeferredGroupedFieldSetResult> | undefined {",
          "189:       return undefined;",
          "",
          "[Added Lines]",
          "125:     return this._rootNodes.size > 0;",
          "128:   completeDeferredFragment(deferredFragmentRecord: DeferredFragmentRecord):",
          "129:     | {",
          "130:         newRootNodes: ReadonlyArray<SubsequentResultRecord>;",
          "131:         reconcilableResults: ReadonlyArray<ReconcilableDeferredGroupedFieldSetResult>;",
          "132:       }",
          "133:     | undefined {",
          "140:       return;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "194:     const reconcilableResults = Array.from(",
          "195:       deferredFragmentNode.reconcilableResults,",
          "196:     );",
          "197:     for (const reconcilableResult of reconcilableResults) {",
          "206:         otherDeferredFragmentNode.reconcilableResults.delete(",
          "207:           reconcilableResult,",
          "208:         );",
          "209:       }",
          "210:     }",
          "216:   }",
          "218:   removeDeferredFragment(",
          "",
          "[Removed Lines]",
          "198:       for (const otherDeferredFragmentRecord of reconcilableResult",
          "199:         .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "200:         const otherDeferredFragmentNode = this._deferredFragmentNodes.get(",
          "201:           otherDeferredFragmentRecord,",
          "202:         );",
          "203:         if (otherDeferredFragmentNode === undefined) {",
          "204:           continue;",
          "205:         }",
          "211:     this._removePending(deferredFragmentNode);",
          "212:     for (const child of deferredFragmentNode.children) {",
          "213:       this._newPending.add(child);",
          "214:     }",
          "215:     return reconcilableResults;",
          "",
          "[Added Lines]",
          "148:     this._removeRootNode(deferredFragmentNode);",
          "150:       for (const otherDeferredFragmentNode of this._fragmentsToNodes(",
          "151:         reconcilableResult.deferredGroupedFieldSetRecord",
          "152:           .deferredFragmentRecords,",
          "153:       )) {",
          "159:     const newRootNodes = this._promoteNonEmptyToRoot(",
          "160:       deferredFragmentNode.children,",
          "161:     );",
          "162:     return { newRootNodes, reconcilableResults };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "224:     if (deferredFragmentNode === undefined) {",
          "225:       return false;",
          "226:     }",
          "228:     this._deferredFragmentNodes.delete(deferredFragmentRecord);",
          "231:     for (const child of deferredFragmentNode.children) {",
          "233:     }",
          "234:     return true;",
          "235:   }",
          "237:   removeStream(streamRecord: StreamRecord): void {",
          "239:   }",
          "244:       for (const resolve of this._nextQueue) {",
          "245:         resolve({ value: undefined, done: true });",
          "246:       }",
          "247:     }",
          "248:   }",
          "252:   ): void {",
          "259:       }",
          "263:     }",
          "264:   }",
          "268:   }",
          "270:   private _addDeferredFragmentNode(",
          "271:     deferredFragmentRecord: DeferredFragmentRecord,",
          "272:   ): DeferredFragmentNode {",
          "273:     let deferredFragmentNode = this._deferredFragmentNodes.get(",
          "274:       deferredFragmentRecord,",
          "",
          "[Removed Lines]",
          "227:     this._removePending(deferredFragmentNode);",
          "232:       this.removeDeferredFragment(child.deferredFragmentRecord);",
          "238:     this._removePending(streamRecord);",
          "241:   private _removePending(subsequentResultNode: SubsequentResultNode): void {",
          "242:     this._pending.delete(subsequentResultNode);",
          "243:     if (this._pending.size === 0) {",
          "250:   private _addDeferredGroupedFieldSetRecord(",
          "251:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "253:     for (const deferredFragmentRecord of deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "254:       const deferredFragmentNode = this._addDeferredFragmentNode(",
          "255:         deferredFragmentRecord,",
          "256:       );",
          "257:       if (this._pending.has(deferredFragmentNode)) {",
          "258:         this._newIncrementalDataRecords.add(deferredGroupedFieldSetRecord);",
          "260:       deferredFragmentNode.deferredGroupedFieldSetRecords.add(",
          "261:         deferredGroupedFieldSetRecord,",
          "262:       );",
          "266:   private _addStreamRecord(streamRecord: StreamRecord): void {",
          "267:     this._newPending.add(streamRecord);",
          "",
          "[Added Lines]",
          "174:     this._removeRootNode(deferredFragmentNode);",
          "179:       if (isDeferredFragmentNode(child)) {",
          "180:         this.removeDeferredFragment(child.deferredFragmentRecord);",
          "181:       }",
          "187:     this._removeRootNode(streamRecord);",
          "190:   private _removeRootNode(subsequentResultNode: SubsequentResultNode): void {",
          "191:     this._rootNodes.delete(subsequentResultNode);",
          "192:     if (this._rootNodes.size === 0) {",
          "199:   private _addIncrementalDataRecords(",
          "200:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "201:     parents: ReadonlyArray<DeferredFragmentRecord> | undefined,",
          "202:     initialResultChildren?: Set<SubsequentResultNode> | undefined,",
          "204:     for (const incrementalDataRecord of incrementalDataRecords) {",
          "205:       if (isDeferredGroupedFieldSetRecord(incrementalDataRecord)) {",
          "206:         for (const deferredFragmentRecord of incrementalDataRecord.deferredFragmentRecords) {",
          "207:           const deferredFragmentNode = this._addDeferredFragmentNode(",
          "208:             deferredFragmentRecord,",
          "209:             initialResultChildren,",
          "210:           );",
          "211:           deferredFragmentNode.deferredGroupedFieldSetRecords.add(",
          "212:             incrementalDataRecord,",
          "213:           );",
          "214:         }",
          "215:         if (this._completesRootNode(incrementalDataRecord)) {",
          "216:           this._onDeferredGroupedFieldSet(incrementalDataRecord);",
          "217:         }",
          "218:       } else if (parents === undefined) {",
          "219:         invariant(initialResultChildren !== undefined);",
          "220:         initialResultChildren.add(incrementalDataRecord);",
          "221:       } else {",
          "222:         for (const parent of parents) {",
          "223:           const deferredFragmentNode = this._addDeferredFragmentNode(",
          "224:             parent,",
          "225:             initialResultChildren,",
          "226:           );",
          "227:           deferredFragmentNode.children.add(incrementalDataRecord);",
          "228:         }",
          "229:       }",
          "230:     }",
          "231:   }",
          "233:   private _promoteNonEmptyToRoot(",
          "234:     maybeEmptyNewRootNodes: Set<SubsequentResultNode>,",
          "235:   ): ReadonlyArray<SubsequentResultRecord> {",
          "236:     const newRootNodes: Array<SubsequentResultRecord> = [];",
          "237:     for (const node of maybeEmptyNewRootNodes) {",
          "238:       if (isDeferredFragmentNode(node)) {",
          "239:         if (node.deferredGroupedFieldSetRecords.size > 0) {",
          "240:           for (const deferredGroupedFieldSetRecord of node.deferredGroupedFieldSetRecords) {",
          "241:             if (!this._completesRootNode(deferredGroupedFieldSetRecord)) {",
          "242:               this._onDeferredGroupedFieldSet(deferredGroupedFieldSetRecord);",
          "243:             }",
          "244:           }",
          "245:           this._rootNodes.add(node);",
          "246:           newRootNodes.push(node.deferredFragmentRecord);",
          "247:           continue;",
          "248:         }",
          "249:         this._deferredFragmentNodes.delete(node.deferredFragmentRecord);",
          "250:         for (const child of node.children) {",
          "251:           maybeEmptyNewRootNodes.add(child);",
          "252:         }",
          "253:       } else {",
          "254:         this._rootNodes.add(node);",
          "255:         newRootNodes.push(node);",
          "258:         this._onStreamItems(node);",
          "261:     return newRootNodes;",
          "264:   private _completesRootNode(",
          "265:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "266:   ): boolean {",
          "267:     return this._fragmentsToNodes(",
          "268:       deferredGroupedFieldSetRecord.deferredFragmentRecords,",
          "269:     ).some((node) => this._rootNodes.has(node));",
          "270:   }",
          "272:   private _fragmentsToNodes(",
          "273:     deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>,",
          "274:   ): Array<DeferredFragmentNode> {",
          "275:     return deferredFragmentRecords",
          "276:       .map((deferredFragmentRecord) =>",
          "277:         this._deferredFragmentNodes.get(deferredFragmentRecord),",
          "278:       )",
          "279:       .filter<DeferredFragmentNode>(isDeferredFragmentNode);",
          "284:     initialResultChildren: Set<SubsequentResultNode> | undefined,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "280:       deferredFragmentRecord,",
          "281:       deferredGroupedFieldSetRecords: new Set(),",
          "282:       reconcilableResults: new Set(),",
          "284:     };",
          "285:     this._deferredFragmentNodes.set(",
          "286:       deferredFragmentRecord,",
          "",
          "[Removed Lines]",
          "283:       children: [],",
          "",
          "[Added Lines]",
          "296:       children: new Set(),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "288:     );",
          "289:     const parent = deferredFragmentRecord.parent;",
          "290:     if (parent === undefined) {",
          "292:       return deferredFragmentNode;",
          "293:     }",
          "296:     return deferredFragmentNode;",
          "297:   }",
          "303:     let items: Array<unknown> = [];",
          "304:     let errors: Array<GraphQLError> = [];",
          "305:     let incrementalDataRecords: Array<IncrementalDataRecord> = [];",
          "306:     let streamItemRecord: StreamItemRecord | undefined;",
          "307:     while ((streamItemRecord = streamItemQueue.shift()) !== undefined) {",
          "308:       let result =",
          "",
          "[Removed Lines]",
          "291:       this._newPending.add(deferredFragmentNode);",
          "294:     const parentNode = this._addDeferredFragmentNode(parent);",
          "295:     parentNode.children.push(deferredFragmentNode);",
          "299:   private async _onStreamItems(",
          "300:     streamRecord: StreamRecord,",
          "301:     streamItemQueue: Array<StreamItemRecord>,",
          "302:   ): Promise<void> {",
          "",
          "[Added Lines]",
          "304:       invariant(initialResultChildren !== undefined);",
          "305:       initialResultChildren.add(deferredFragmentNode);",
          "308:     const parentNode = this._addDeferredFragmentNode(",
          "309:       parent,",
          "310:       initialResultChildren,",
          "311:     );",
          "312:     parentNode.children.add(deferredFragmentNode);",
          "316:   private _onDeferredGroupedFieldSet(",
          "317:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "318:   ): void {",
          "319:     const deferredGroupedFieldSetResult = deferredGroupedFieldSetRecord.result;",
          "320:     const result =",
          "321:       deferredGroupedFieldSetResult instanceof BoxedPromiseOrValue",
          "322:         ? deferredGroupedFieldSetResult.value",
          "323:         : deferredGroupedFieldSetResult().value;",
          "325:     if (isPromise(result)) {",
          "327:       result.then((resolved) => this._enqueue(resolved));",
          "328:     } else {",
          "329:       this._enqueue(result);",
          "330:     }",
          "331:   }",
          "333:   private async _onStreamItems(streamRecord: StreamRecord): Promise<void> {",
          "337:     const streamItemQueue = streamRecord.streamItemQueue;",
          "",
          "---------------"
        ],
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     errors: ReadonlyArray<GraphQLError> | undefined,",
          "75:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "76:   ): ExperimentalIncrementalExecutionResults {",
          "82:     const initialResult: InitialIncrementalExecutionResult =",
          "83:       errors === undefined",
          "",
          "[Removed Lines]",
          "77:     this._incrementalGraph.addIncrementalDataRecords(incrementalDataRecords);",
          "78:     const newPending = this._incrementalGraph.getNewPending();",
          "80:     const pending = this._pendingSourcesToResults(newPending);",
          "",
          "[Added Lines]",
          "77:     const newRootNodes = this._incrementalGraph.getNewRootNodes(",
          "78:       incrementalDataRecords,",
          "79:     );",
          "81:     const pending = this._toPendingResults(newRootNodes);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     };",
          "91:   }",
          "95:   ): Array<PendingResult> {",
          "96:     const pendingResults: Array<PendingResult> = [];",
          "98:       const id = String(this._getNextId());",
          "100:       const pendingResult: PendingResult = {",
          "101:         id,",
          "103:       };",
          "106:       }",
          "107:       pendingResults.push(pendingResult);",
          "108:     }",
          "",
          "[Removed Lines]",
          "93:   private _pendingSourcesToResults(",
          "94:     newPending: ReadonlyArray<SubsequentResultRecord>,",
          "97:     for (const pendingSource of newPending) {",
          "99:       pendingSource.id = id;",
          "102:         path: pathToArray(pendingSource.path),",
          "104:       if (pendingSource.label !== undefined) {",
          "105:         pendingResult.label = pendingSource.label;",
          "",
          "[Added Lines]",
          "94:   private _toPendingResults(",
          "95:     newRootNodes: ReadonlyArray<SubsequentResultRecord>,",
          "98:     for (const node of newRootNodes) {",
          "100:       node.id = id;",
          "103:         path: pathToArray(node.path),",
          "105:       if (node.label !== undefined) {",
          "106:         pendingResult.label = node.label;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:     } else {",
          "218:       this._handleCompletedStreamItems(completedIncrementalData, context);",
          "219:     }",
          "222:   }",
          "224:   private _handleCompletedDeferredGroupedFieldSet(",
          "",
          "[Removed Lines]",
          "220:     const newPending = this._incrementalGraph.getNewPending();",
          "221:     context.pending.push(...this._pendingSourcesToResults(newPending));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "252:       deferredGroupedFieldSetResult,",
          "253:     );",
          "261:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult",
          "262:       .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "266:         continue;",
          "267:       }",
          "268:       const id = deferredFragmentRecord.id;",
          "269:       invariant(id !== undefined);",
          "270:       const incremental = context.incremental;",
          "271:       for (const reconcilableResult of reconcilableResults) {",
          "272:         const { bestId, subPath } = this._getBestIdAndSubPath(",
          "273:           id,",
          "",
          "[Removed Lines]",
          "255:     const incrementalDataRecords =",
          "256:       deferredGroupedFieldSetResult.incrementalDataRecords;",
          "257:     if (incrementalDataRecords !== undefined) {",
          "258:       this._incrementalGraph.addIncrementalDataRecords(incrementalDataRecords);",
          "259:     }",
          "263:       const reconcilableResults =",
          "264:         this._incrementalGraph.completeDeferredFragment(deferredFragmentRecord);",
          "265:       if (reconcilableResults === undefined) {",
          "",
          "[Added Lines]",
          "256:       const completion = this._incrementalGraph.completeDeferredFragment(",
          "257:         deferredFragmentRecord,",
          "258:       );",
          "259:       if (completion === undefined) {",
          "265:       const { newRootNodes, reconcilableResults } = completion;",
          "266:       context.pending.push(...this._toPendingResults(newRootNodes));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "324:       context.incremental.push(incrementalEntry);",
          "329:         );",
          "330:       }",
          "331:     }",
          "332:   }",
          "",
          "[Removed Lines]",
          "326:       if (streamItemsResult.incrementalDataRecords !== undefined) {",
          "327:         this._incrementalGraph.addIncrementalDataRecords(",
          "328:           streamItemsResult.incrementalDataRecords,",
          "",
          "[Added Lines]",
          "322:       const incrementalDataRecords = streamItemsResult.incrementalDataRecords;",
          "323:       if (incrementalDataRecords !== undefined) {",
          "324:         const newRootNodes = this._incrementalGraph.getNewRootNodes(",
          "325:           incrementalDataRecords,",
          "327:         context.pending.push(...this._toPendingResults(newRootNodes));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75dca3dd18e5be3031416965049fbde48a5adb20",
      "candidate_info": {
        "commit_hash": "75dca3dd18e5be3031416965049fbde48a5adb20",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/75dca3dd18e5be3031416965049fbde48a5adb20",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/stream-test.ts",
          "src/execution/execute.ts",
          "src/execution/types.ts"
        ],
        "message": "incremental: disable early execution by default (#4097)\n\ndepends on #4098",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts",
          "src/execution/execute.ts||src/execution/execute.ts",
          "src/execution/types.ts||src/execution/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { isPromise } from '../jsutils/isPromise.js';",
          "2: import { promiseWithResolvers } from '../jsutils/promiseWithResolvers.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { BoxedPromiseOrValue } from '../jsutils/BoxedPromiseOrValue.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:           incrementalDataRecord.streamItemQueue,",
          "121:         );",
          "122:       } else {",
          "124:         if (isPromise(result)) {",
          "126:           result.then((resolved) => this._enqueue(resolved));",
          "",
          "[Removed Lines]",
          "123:         const result = incrementalDataRecord.result.value;",
          "",
          "[Added Lines]",
          "124:         const deferredGroupedFieldSetResult = incrementalDataRecord.result;",
          "125:         const result =",
          "126:           deferredGroupedFieldSetResult instanceof BoxedPromiseOrValue",
          "127:             ? deferredGroupedFieldSetResult.value",
          "128:             : deferredGroupedFieldSetResult().value;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "299:     let incrementalDataRecords: Array<IncrementalDataRecord> = [];",
          "300:     let streamItemRecord: StreamItemRecord | undefined;",
          "301:     while ((streamItemRecord = streamItemQueue.shift()) !== undefined) {",
          "303:       if (isPromise(result)) {",
          "304:         if (items.length > 0) {",
          "305:           this._enqueue({",
          "",
          "[Removed Lines]",
          "302:       let result = streamItemRecord.value;",
          "",
          "[Added Lines]",
          "308:       let result =",
          "309:         streamItemRecord instanceof BoxedPromiseOrValue",
          "310:           ? streamItemRecord.value",
          "311:           : streamItemRecord().value;",
          "",
          "---------------"
        ],
        "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts": [
          "File: src/execution/__tests__/defer-test.ts -> src/execution/__tests__/defer-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: const schema = new GraphQLSchema({ query });",
          "139:   const result = await experimentalExecuteIncrementally({",
          "140:     schema,",
          "141:     document,",
          "142:     rootValue,",
          "143:   });",
          "145:   if ('initialResult' in result) {",
          "",
          "[Removed Lines]",
          "138: async function complete(document: DocumentNode, rootValue: unknown = { hero }) {",
          "",
          "[Added Lines]",
          "138: async function complete(",
          "139:   document: DocumentNode,",
          "140:   rootValue: unknown = { hero },",
          "141:   enableEarlyExecution = false,",
          "142: ) {",
          "147:     enableEarlyExecution,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:       },",
          "248:     ]);",
          "249:   });",
          "250:   it('Can defer fragments on the top level Query field', async () => {",
          "251:     const document = parse(`",
          "252:       query HeroNameQuery {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:   it('Does not execute deferred fragments early when not specified', async () => {",
          "256:     const document = parse(`",
          "257:       query HeroNameQuery {",
          "258:         hero {",
          "259:           id",
          "260:           ...NameFragment @defer",
          "261:         }",
          "262:       }",
          "263:       fragment NameFragment on Hero {",
          "264:         name",
          "265:       }",
          "266:     `);",
          "267:     const order: Array<string> = [];",
          "268:     const result = await complete(document, {",
          "269:       hero: {",
          "270:         ...hero,",
          "271:         id: async () => {",
          "272:           await resolveOnNextTick();",
          "273:           await resolveOnNextTick();",
          "274:           order.push('slow-id');",
          "275:           return hero.id;",
          "276:         },",
          "277:         name: () => {",
          "278:           order.push('fast-name');",
          "279:           return hero.name;",
          "280:         },",
          "281:       },",
          "282:     });",
          "284:     expectJSON(result).toDeepEqual([",
          "285:       {",
          "286:         data: {",
          "287:           hero: {",
          "288:             id: '1',",
          "289:           },",
          "290:         },",
          "291:         pending: [{ id: '0', path: ['hero'] }],",
          "292:         hasNext: true,",
          "293:       },",
          "294:       {",
          "295:         incremental: [",
          "296:           {",
          "297:             data: {",
          "298:               name: 'Luke',",
          "299:             },",
          "300:             id: '0',",
          "301:           },",
          "302:         ],",
          "303:         completed: [{ id: '0' }],",
          "304:         hasNext: false,",
          "305:       },",
          "306:     ]);",
          "307:     expect(order).to.deep.equal(['slow-id', 'fast-name']);",
          "308:   });",
          "309:   it('Does execute deferred fragments early when specified', async () => {",
          "310:     const document = parse(`",
          "311:       query HeroNameQuery {",
          "312:         hero {",
          "313:           id",
          "314:           ...NameFragment @defer",
          "315:         }",
          "316:       }",
          "317:       fragment NameFragment on Hero {",
          "318:         name",
          "319:       }",
          "320:     `);",
          "321:     const order: Array<string> = [];",
          "322:     const result = await complete(",
          "323:       document,",
          "324:       {",
          "325:         hero: {",
          "326:           ...hero,",
          "327:           id: async () => {",
          "328:             await resolveOnNextTick();",
          "329:             await resolveOnNextTick();",
          "330:             order.push('slow-id');",
          "331:             return hero.id;",
          "332:           },",
          "333:           name: () => {",
          "334:             order.push('fast-name');",
          "335:             return hero.name;",
          "336:           },",
          "337:         },",
          "338:       },",
          "339:       true,",
          "340:     );",
          "342:     expectJSON(result).toDeepEqual([",
          "343:       {",
          "344:         data: {",
          "345:           hero: {",
          "346:             id: '1',",
          "347:           },",
          "348:         },",
          "349:         pending: [{ id: '0', path: ['hero'] }],",
          "350:         hasNext: true,",
          "351:       },",
          "352:       {",
          "353:         incremental: [",
          "354:           {",
          "355:             data: {",
          "356:               name: 'Luke',",
          "357:             },",
          "358:             id: '0',",
          "359:           },",
          "360:         ],",
          "361:         completed: [{ id: '0' }],",
          "362:         hasNext: false,",
          "363:       },",
          "364:     ]);",
          "365:     expect(order).to.deep.equal(['fast-name', 'slow-id']);",
          "366:   });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1492:         }",
          "1493:       }",
          "1494:     `);",
          "1503:             },",
          "1504:           },",
          "1505:         },",
          "1507:       },",
          "1509:     expectJSON(result).toDeepEqual([",
          "1510:       {",
          "1511:         data: {",
          "",
          "[Removed Lines]",
          "1495:     const result = await complete(document, {",
          "1496:       a: {",
          "1497:         b: {",
          "1498:           c: {",
          "1499:             d: 'd',",
          "1500:             nonNullErrorField: async () => {",
          "1501:               await resolveOnNextTick();",
          "1502:               return null;",
          "1506:         someField: 'someField',",
          "1508:     });",
          "",
          "[Added Lines]",
          "1612:     const result = await complete(",
          "1613:       document,",
          "1614:       {",
          "1615:         a: {",
          "1616:           b: {",
          "1617:             c: {",
          "1618:               d: 'd',",
          "1619:               nonNullErrorField: async () => {",
          "1620:                 await resolveOnNextTick();",
          "1621:                 return null;",
          "1622:               },",
          "1625:           someField: 'someField',",
          "1628:       true,",
          "1629:     );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1564:         }",
          "1565:       }",
          "1566:     `);",
          "1571:       },",
          "1573:     expectJSON(result).toDeepEqual({",
          "1574:       data: {",
          "1575:         hero: null,",
          "",
          "[Removed Lines]",
          "1567:     const result = await complete(document, {",
          "1568:       hero: {",
          "1569:         ...hero,",
          "1570:         nonNullName: () => null,",
          "1572:     });",
          "",
          "[Added Lines]",
          "1688:     const result = await complete(",
          "1689:       document,",
          "1690:       {",
          "1691:         hero: {",
          "1692:           ...hero,",
          "1693:           nonNullName: () => null,",
          "1694:         },",
          "1696:       true,",
          "1697:     );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1596:         }",
          "1597:       }",
          "1598:     `);",
          "1603:       },",
          "1605:     expectJSON(result).toDeepEqual([",
          "1606:       {",
          "1607:         data: {},",
          "",
          "[Removed Lines]",
          "1599:     const result = await complete(document, {",
          "1600:       hero: {",
          "1601:         ...hero,",
          "1602:         nonNullName: () => null,",
          "1604:     });",
          "",
          "[Added Lines]",
          "1724:     const result = await complete(",
          "1725:       document,",
          "1726:       {",
          "1727:         hero: {",
          "1728:           ...hero,",
          "1729:           nonNullName: () => null,",
          "1730:         },",
          "1732:       true,",
          "1733:     );",
          "",
          "---------------"
        ],
        "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts": [
          "File: src/execution/__tests__/stream-test.ts -> src/execution/__tests__/stream-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: const schema = new GraphQLSchema({ query });",
          "88:   const result = await experimentalExecuteIncrementally({",
          "89:     schema,",
          "90:     document,",
          "91:     rootValue,",
          "92:   });",
          "94:   if ('initialResult' in result) {",
          "",
          "[Removed Lines]",
          "87: async function complete(document: DocumentNode, rootValue: unknown = {}) {",
          "",
          "[Added Lines]",
          "87: async function complete(",
          "88:   document: DocumentNode,",
          "89:   rootValue: unknown = {},",
          "90:   enableEarlyExecution = false,",
          "91: ) {",
          "96:     enableEarlyExecution,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "354:       {",
          "355:         incremental: [",
          "356:           {",
          "362:             id: '0',",
          "363:           },",
          "364:         ],",
          "",
          "[Removed Lines]",
          "357:             items: [",
          "358:               { name: 'Luke', id: '1' },",
          "359:               { name: 'Han', id: '2' },",
          "360:               { name: 'Leia', id: '3' },",
          "361:             ],",
          "",
          "[Added Lines]",
          "362:             items: [{ name: 'Luke', id: '1' }],",
          "363:             id: '0',",
          "364:           },",
          "365:         ],",
          "366:         hasNext: true,",
          "367:       },",
          "368:       {",
          "369:         incremental: [",
          "370:           {",
          "371:             items: [{ name: 'Han', id: '2' }],",
          "372:             id: '0',",
          "373:           },",
          "374:         ],",
          "375:         hasNext: true,",
          "376:       },",
          "377:       {",
          "378:         incremental: [",
          "379:           {",
          "380:             items: [{ name: 'Leia', id: '3' }],",
          "381:             id: '0',",
          "382:           },",
          "383:         ],",
          "384:         completed: [{ id: '0' }],",
          "385:         hasNext: false,",
          "386:       },",
          "387:     ]);",
          "388:   });",
          "389:   it('Does not execute early if not specified', async () => {",
          "390:     const document = parse(`",
          "391:       query {",
          "392:         friendList @stream(initialCount: 0) {",
          "393:           id",
          "394:         }",
          "395:       }",
          "396:     `);",
          "397:     const order: Array<number> = [];",
          "398:     const result = await complete(document, {",
          "399:       friendList: () =>",
          "400:         friends.map((f, i) => ({",
          "401:           id: async () => {",
          "402:             const slowness = 3 - i;",
          "403:             for (let j = 0; j < slowness; j++) {",
          "405:               await resolveOnNextTick();",
          "406:             }",
          "407:             order.push(i);",
          "408:             return f.id;",
          "409:           },",
          "410:         })),",
          "411:     });",
          "412:     expectJSON(result).toDeepEqual([",
          "413:       {",
          "414:         data: {",
          "415:           friendList: [],",
          "416:         },",
          "417:         pending: [{ id: '0', path: ['friendList'] }],",
          "418:         hasNext: true,",
          "419:       },",
          "420:       {",
          "421:         incremental: [",
          "422:           {",
          "423:             items: [{ id: '1' }],",
          "424:             id: '0',",
          "425:           },",
          "426:         ],",
          "427:         hasNext: true,",
          "428:       },",
          "429:       {",
          "430:         incremental: [",
          "431:           {",
          "432:             items: [{ id: '2' }],",
          "433:             id: '0',",
          "434:           },",
          "435:         ],",
          "436:         hasNext: true,",
          "437:       },",
          "438:       {",
          "439:         incremental: [",
          "440:           {",
          "441:             items: [{ id: '3' }],",
          "442:             id: '0',",
          "443:           },",
          "444:         ],",
          "445:         completed: [{ id: '0' }],",
          "446:         hasNext: false,",
          "447:       },",
          "448:     ]);",
          "449:     expect(order).to.deep.equal([0, 1, 2]);",
          "450:   });",
          "451:   it('Executes early if specified', async () => {",
          "452:     const document = parse(`",
          "453:       query {",
          "454:         friendList @stream(initialCount: 0) {",
          "455:           id",
          "456:         }",
          "457:       }",
          "458:     `);",
          "459:     const order: Array<number> = [];",
          "460:     const result = await complete(",
          "461:       document,",
          "462:       {",
          "463:         friendList: () =>",
          "464:           friends.map((f, i) => ({",
          "465:             id: async () => {",
          "466:               const slowness = 3 - i;",
          "467:               for (let j = 0; j < slowness; j++) {",
          "469:                 await resolveOnNextTick();",
          "470:               }",
          "471:               order.push(i);",
          "472:               return f.id;",
          "473:             },",
          "474:           })),",
          "475:       },",
          "476:       true,",
          "477:     );",
          "478:     expectJSON(result).toDeepEqual([",
          "479:       {",
          "480:         data: {",
          "481:           friendList: [],",
          "482:         },",
          "483:         pending: [{ id: '0', path: ['friendList'] }],",
          "484:         hasNext: true,",
          "485:       },",
          "486:       {",
          "487:         incremental: [",
          "488:           {",
          "489:             items: [{ id: '1' }, { id: '2' }, { id: '3' }],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "366:         hasNext: false,",
          "367:       },",
          "368:     ]);",
          "369:   });",
          "370:   it('Can stream a field that returns a list with nested promises', async () => {",
          "371:     const document = parse(`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497:     expect(order).to.deep.equal([2, 1, 0]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "491:       {",
          "492:         incremental: [",
          "493:           {",
          "495:             id: '0',",
          "496:             errors: [",
          "497:               {",
          "",
          "[Removed Lines]",
          "494:             items: [null, { name: 'Leia', id: '3' }],",
          "",
          "[Added Lines]",
          "623:             items: [null],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "502:             ],",
          "503:           },",
          "504:         ],",
          "505:         completed: [{ id: '0' }],",
          "506:         hasNext: false,",
          "507:       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "634:         hasNext: true,",
          "635:       },",
          "636:       {",
          "637:         incremental: [",
          "638:           {",
          "639:             items: [{ name: 'Leia', id: '3' }],",
          "640:             id: '0',",
          "641:           },",
          "642:         ],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "556:             id: '0',",
          "557:           },",
          "558:         ],",
          "559:         completed: [{ id: '0' }],",
          "560:         hasNext: false,",
          "561:       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "697:         hasNext: true,",
          "698:       },",
          "699:       {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "595:             id: '0',",
          "596:           },",
          "597:         ],",
          "598:         completed: [{ id: '0' }],",
          "599:         hasNext: false,",
          "600:       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:         hasNext: true,",
          "740:       },",
          "741:       {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "626:       },",
          "627:     });",
          "628:   });",
          "629:   it('Can handle concurrent calls to .next() without waiting', async () => {",
          "630:     const document = parse(`",
          "631:       query {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "773:   it('Does not execute early if not specified, when streaming from an async iterable', async () => {",
          "774:     const document = parse(`",
          "775:       query {",
          "776:         friendList @stream(initialCount: 0) {",
          "777:           id",
          "778:         }",
          "779:       }",
          "780:     `);",
          "781:     const order: Array<number> = [];",
          "783:     const slowFriend = async (n: number) => ({",
          "784:       id: async () => {",
          "785:         const slowness = (3 - n) * 10;",
          "786:         for (let j = 0; j < slowness; j++) {",
          "788:           await resolveOnNextTick();",
          "789:         }",
          "790:         order.push(n);",
          "791:         return friends[n].id;",
          "792:       },",
          "793:     });",
          "794:     const result = await complete(document, {",
          "795:       async *friendList() {",
          "796:         yield await Promise.resolve(slowFriend(0));",
          "797:         yield await Promise.resolve(slowFriend(1));",
          "798:         yield await Promise.resolve(slowFriend(2));",
          "799:       },",
          "800:     });",
          "801:     expectJSON(result).toDeepEqual([",
          "802:       {",
          "803:         data: {",
          "804:           friendList: [],",
          "805:         },",
          "806:         pending: [{ id: '0', path: ['friendList'] }],",
          "807:         hasNext: true,",
          "808:       },",
          "809:       {",
          "810:         incremental: [",
          "811:           {",
          "812:             items: [{ id: '1' }],",
          "813:             id: '0',",
          "814:           },",
          "815:         ],",
          "816:         hasNext: true,",
          "817:       },",
          "818:       {",
          "819:         incremental: [",
          "820:           {",
          "821:             items: [{ id: '2' }],",
          "822:             id: '0',",
          "823:           },",
          "824:         ],",
          "825:         hasNext: true,",
          "826:       },",
          "827:       {",
          "828:         incremental: [",
          "829:           {",
          "830:             items: [{ id: '3' }],",
          "831:             id: '0',",
          "832:           },",
          "833:         ],",
          "834:         hasNext: true,",
          "835:       },",
          "836:       {",
          "837:         completed: [{ id: '0' }],",
          "838:         hasNext: false,",
          "839:       },",
          "840:     ]);",
          "841:     expect(order).to.deep.equal([0, 1, 2]);",
          "842:   });",
          "843:   it('Executes early if specified when streaming from an async iterable', async () => {",
          "844:     const document = parse(`",
          "845:       query {",
          "846:         friendList @stream(initialCount: 0) {",
          "847:           id",
          "848:         }",
          "849:       }",
          "850:     `);",
          "851:     const order: Array<number> = [];",
          "852:     const slowFriend = (n: number) => ({",
          "853:       id: async () => {",
          "854:         const slowness = (3 - n) * 10;",
          "855:         for (let j = 0; j < slowness; j++) {",
          "857:           await resolveOnNextTick();",
          "858:         }",
          "859:         order.push(n);",
          "860:         return friends[n].id;",
          "861:       },",
          "862:     });",
          "863:     const result = await complete(",
          "864:       document,",
          "865:       {",
          "866:         async *friendList() {",
          "867:           yield await Promise.resolve(slowFriend(0));",
          "868:           yield await Promise.resolve(slowFriend(1));",
          "869:           yield await Promise.resolve(slowFriend(2));",
          "870:         },",
          "871:       },",
          "872:       true,",
          "873:     );",
          "874:     expectJSON(result).toDeepEqual([",
          "875:       {",
          "876:         data: {",
          "877:           friendList: [],",
          "878:         },",
          "879:         pending: [{ id: '0', path: ['friendList'] }],",
          "880:         hasNext: true,",
          "881:       },",
          "882:       {",
          "883:         incremental: [",
          "884:           {",
          "885:             items: [{ id: '1' }, { id: '2' }, { id: '3' }],",
          "886:             id: '0',",
          "887:           },",
          "888:         ],",
          "889:         completed: [{ id: '0' }],",
          "890:         hasNext: false,",
          "891:       },",
          "892:     ]);",
          "893:     expect(order).to.deep.equal([2, 1, 0]);",
          "894:   });",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "895:       {",
          "896:         incremental: [",
          "897:           {",
          "899:             id: '0',",
          "900:             errors: [",
          "901:               {",
          "",
          "[Removed Lines]",
          "898:             items: [null, { nonNullName: 'Han' }],",
          "",
          "[Added Lines]",
          "1164:             items: [null],",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "906:             ],",
          "907:           },",
          "908:         ],",
          "909:         completed: [{ id: '0' }],",
          "910:         hasNext: false,",
          "911:       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1175:         hasNext: true,",
          "1176:       },",
          "1177:       {",
          "1178:         incremental: [",
          "1179:           {",
          "1180:             items: [{ nonNullName: 'Han' }],",
          "1181:             id: '0',",
          "1182:           },",
          "1183:         ],",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "937:       {",
          "938:         incremental: [",
          "939:           {",
          "941:             id: '0',",
          "942:             errors: [",
          "943:               {",
          "",
          "[Removed Lines]",
          "940:             items: [null, { nonNullName: 'Han' }],",
          "",
          "[Added Lines]",
          "1215:             items: [null],",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "948:             ],",
          "949:           },",
          "950:         ],",
          "951:         completed: [{ id: '0' }],",
          "952:         hasNext: false,",
          "953:       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1226:         hasNext: true,",
          "1227:       },",
          "1228:       {",
          "1229:         incremental: [",
          "1230:           {",
          "1231:             items: [{ nonNullName: 'Han' }],",
          "1232:             id: '0',",
          "1233:           },",
          "1234:         ],",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1063:       {",
          "1064:         incremental: [",
          "1065:           {",
          "1067:             id: '0',",
          "1068:             errors: [",
          "1069:               {",
          "",
          "[Removed Lines]",
          "1066:             items: [null, { nonNullName: 'Han' }],",
          "",
          "[Added Lines]",
          "1350:             items: [null],",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1074:             ],",
          "1075:           },",
          "1076:         ],",
          "1077:         completed: [{ id: '0' }],",
          "1078:         hasNext: false,",
          "1079:       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1361:         hasNext: true,",
          "1362:       },",
          "1363:       {",
          "1364:         incremental: [",
          "1365:           {",
          "1366:             items: [{ nonNullName: 'Han' }],",
          "1367:             id: '0',",
          "1368:           },",
          "1369:         ],",
          "1370:         hasNext: true,",
          "1371:       },",
          "1372:       {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1092:         yield await Promise.resolve({ nonNullName: friends[0].name });",
          "1093:         yield await Promise.resolve({",
          "1094:           nonNullName: () => Promise.reject(new Error('Oops')),",
          "1099:       } /* c8 ignore stop */,",
          "1100:     });",
          "",
          "[Removed Lines]",
          "1095:         });",
          "1096:         yield await Promise.resolve({",
          "1097:           nonNullName: friends[1].name,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1149:                     nonNullName: () => Promise.reject(new Error('Oops')),",
          "1150:                   },",
          "1151:                 });",
          "1160:                 return Promise.resolve({",
          "1161:                   done: false,",
          "1163:                 });",
          "1164:             }",
          "1165:           },",
          "",
          "[Removed Lines]",
          "1152:               case 2:",
          "1153:                 return Promise.resolve({",
          "1154:                   done: false,",
          "1155:                   value: { nonNullName: friends[1].name },",
          "1156:                 });",
          "1159:               case 3:",
          "1162:                   value: { nonNullName: friends[2].name },",
          "",
          "[Added Lines]",
          "1447:               case 2:",
          "1450:                   value: { nonNullName: friends[1].name },",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1222:                     nonNullName: () => Promise.reject(new Error('Oops')),",
          "1223:                   },",
          "1224:                 });",
          "1233:                 return Promise.resolve({",
          "1234:                   done: false,",
          "1236:                 });",
          "1237:             }",
          "1238:           },",
          "",
          "[Removed Lines]",
          "1225:               case 2:",
          "1226:                 return Promise.resolve({",
          "1227:                   done: false,",
          "1228:                   value: { nonNullName: friends[1].name },",
          "1229:                 });",
          "1232:               case 3:",
          "1235:                   value: { nonNullName: friends[2].name },",
          "",
          "[Added Lines]",
          "1515:               case 2:",
          "1518:                   value: { nonNullName: friends[1].name },",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1373:       },",
          "1374:       {",
          "1375:         incremental: [",
          "1376:           {",
          "1377:             data: { scalarField: null },",
          "1378:             id: '0',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1659:           {",
          "1660:             items: [{ name: 'Luke' }],",
          "1661:             id: '1',",
          "1662:           },",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1384:               },",
          "1385:             ],",
          "1386:           },",
          "1391:         ],",
          "1393:         hasNext: false,",
          "1394:       },",
          "1395:     ]);",
          "",
          "[Removed Lines]",
          "1387:           {",
          "1388:             items: [{ name: 'Luke' }],",
          "1389:             id: '1',",
          "1390:           },",
          "1392:         completed: [{ id: '0' }, { id: '1' }],",
          "",
          "[Added Lines]",
          "1675:         completed: [{ id: '0' }],",
          "1676:         hasNext: true,",
          "1677:       },",
          "1678:       {",
          "1679:         completed: [{ id: '1' }],",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1495:             ],",
          "1496:           },",
          "1497:         ],",
          "1498:         completed: [{ id: '0' }],",
          "1499:         hasNext: false,",
          "1500:       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1785:         hasNext: true,",
          "1786:       },",
          "1787:       {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1556:           },",
          "1557:         },",
          "1558:       },",
          "1559:     });",
          "1560:     assert('initialResult' in executeResult);",
          "1561:     const iterator = executeResult.subsequentResults[Symbol.asyncIterator]();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1849:       enableEarlyExecution: true,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1646:             id: '0',",
          "1647:           },",
          "1648:         ],",
          "1649:         completed: [{ id: '0' }],",
          "1650:         hasNext: false,",
          "1651:       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1940:         hasNext: true,",
          "1941:       },",
          "1942:       {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1690:       {",
          "1691:         incremental: [",
          "1692:           {",
          "1697:             id: '0',",
          "1698:           },",
          "1699:         ],",
          "1700:         completed: [{ id: '0' }],",
          "1701:         hasNext: false,",
          "1702:       },",
          "",
          "[Removed Lines]",
          "1693:             items: [",
          "1694:               { id: '1', name: 'Luke' },",
          "1695:               { id: '2', name: 'Han' },",
          "1696:             ],",
          "",
          "[Added Lines]",
          "1987:             items: [{ id: '1', name: 'Luke' }],",
          "1991:         hasNext: true,",
          "1992:       },",
          "1993:       {",
          "1994:         incremental: [",
          "1995:           {",
          "1996:             items: [{ id: '2', name: 'Han' }],",
          "1997:             id: '0',",
          "1998:           },",
          "1999:         ],",
          "2000:         hasNext: true,",
          "2001:       },",
          "2002:       {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1754:             data: { scalarField: 'slow', nestedFriendList: [] },",
          "1755:             id: '0',",
          "1756:           },",
          "1757:           {",
          "1759:             id: '1',",
          "1760:           },",
          "1761:         ],",
          "1763:         hasNext: false,",
          "1764:       },",
          "1765:       done: false,",
          "1766:     });",
          "1769:       value: undefined,",
          "1770:       done: true,",
          "1771:     });",
          "",
          "[Removed Lines]",
          "1758:             items: [{ name: 'Luke' }, { name: 'Han' }],",
          "1762:         completed: [{ id: '0' }, { id: '1' }],",
          "1767:     const result3 = await iterator.next();",
          "1768:     expectJSON(result3).toDeepEqual({",
          "",
          "[Added Lines]",
          "2060:         ],",
          "2061:         completed: [{ id: '0' }],",
          "2062:         hasNext: true,",
          "2063:       },",
          "2064:       done: false,",
          "2065:     });",
          "2067:     const result3 = await iterator.next();",
          "2068:     expectJSON(result3).toDeepEqual({",
          "2069:       value: {",
          "2070:         incremental: [",
          "2071:           {",
          "2072:             items: [{ name: 'Luke' }],",
          "2073:             id: '1',",
          "2074:           },",
          "2075:         ],",
          "2076:         hasNext: true,",
          "2077:       },",
          "2078:       done: false,",
          "2079:     });",
          "2081:     const result4 = await iterator.next();",
          "2082:     expectJSON(result4).toDeepEqual({",
          "2083:       value: {",
          "2084:         incremental: [",
          "2086:             items: [{ name: 'Han' }],",
          "2090:         hasNext: true,",
          "2091:       },",
          "2092:       done: false,",
          "2093:     });",
          "2095:     const result5 = await iterator.next();",
          "2096:     expectJSON(result5).toDeepEqual({",
          "2097:       value: {",
          "2098:         completed: [{ id: '1' }],",
          "2103:     const result6 = await iterator.next();",
          "2104:     expectJSON(result6).toDeepEqual({",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1824:     const result2 = await result2Promise;",
          "1825:     expectJSON(result2).toDeepEqual({",
          "1826:       value: {",
          "1828:         incremental: [",
          "1829:           {",
          "1830:             data: { name: 'Luke' },",
          "1831:             id: '0',",
          "1832:           },",
          "1837:         ],",
          "1838:         completed: [{ id: '0' }],",
          "1839:         hasNext: true,",
          "",
          "[Removed Lines]",
          "1827:         pending: [{ id: '2', path: ['friendList', 1], label: 'DeferName' }],",
          "1833:           {",
          "1834:             items: [{ id: '2' }],",
          "1835:             id: '1',",
          "1836:           },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1846:     const result3 = await result3Promise;",
          "1847:     expectJSON(result3).toDeepEqual({",
          "1848:       value: {",
          "1850:         hasNext: true,",
          "1851:       },",
          "1852:       done: false,",
          "1853:     });",
          "1854:     const result4 = await iterator.next();",
          "1855:     expectJSON(result4).toDeepEqual({",
          "1856:       value: {",
          "1857:         incremental: [",
          "1858:           {",
          "",
          "[Removed Lines]",
          "1849:         completed: [{ id: '1' }],",
          "",
          "[Added Lines]",
          "2180:         pending: [{ id: '2', path: ['friendList', 1], label: 'DeferName' }],",
          "2181:         incremental: [",
          "2182:           {",
          "2183:             items: [{ id: '2' }],",
          "2184:             id: '1',",
          "2185:           },",
          "2186:         ],",
          "2193:       value: {",
          "2194:         completed: [{ id: '1' }],",
          "2195:         hasNext: true,",
          "2196:       },",
          "2197:       done: false,",
          "2198:     });",
          "2199:     const result5 = await iterator.next();",
          "2200:     expectJSON(result5).toDeepEqual({",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1865:       },",
          "1866:       done: false,",
          "1867:     });",
          "1870:       value: undefined,",
          "1871:       done: true,",
          "1872:     });",
          "",
          "[Removed Lines]",
          "1868:     const result5 = await iterator.next();",
          "1869:     expectJSON(result5).toDeepEqual({",
          "",
          "[Added Lines]",
          "2213:     const result6 = await iterator.next();",
          "2214:     expectJSON(result6).toDeepEqual({",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1925:     const result2 = await result2Promise;",
          "1926:     expectJSON(result2).toDeepEqual({",
          "1927:       value: {",
          "1929:         incremental: [",
          "1930:           {",
          "1931:             data: { name: 'Luke' },",
          "1932:             id: '0',",
          "1933:           },",
          "1934:           {",
          "1935:             items: [{ id: '2' }],",
          "1936:             id: '1',",
          "1937:           },",
          "1938:         ],",
          "1940:         hasNext: true,",
          "1941:       },",
          "1942:       done: false,",
          "1943:     });",
          "1947:       value: {",
          "1948:         incremental: [",
          "1949:           {",
          "",
          "[Removed Lines]",
          "1928:         pending: [{ id: '2', path: ['friendList', 1], label: 'DeferName' }],",
          "1939:         completed: [{ id: '0' }],",
          "1945:     const result3 = await iterator.next();",
          "1946:     expectJSON(result3).toDeepEqual({",
          "",
          "[Added Lines]",
          "2278:         ],",
          "2279:         completed: [{ id: '0' }],",
          "2280:         hasNext: true,",
          "2281:       },",
          "2282:       done: false,",
          "2283:     });",
          "2285:     const result3 = await iterator.next();",
          "2286:     expectJSON(result3).toDeepEqual({",
          "2287:       value: {",
          "2288:         pending: [{ id: '2', path: ['friendList', 1], label: 'DeferName' }],",
          "2289:         incremental: [",
          "2300:     const result4 = await iterator.next();",
          "2301:     expectJSON(result4).toDeepEqual({",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1957:       done: false,",
          "1958:     });",
          "1961:     resolveIterableCompletion(null);",
          "1964:       value: {",
          "1965:         completed: [{ id: '1' }],",
          "1966:         hasNext: false,",
          "",
          "[Removed Lines]",
          "1960:     const result4Promise = iterator.next();",
          "1962:     const result4 = await result4Promise;",
          "1963:     expectJSON(result4).toDeepEqual({",
          "",
          "[Added Lines]",
          "2315:     const result5Promise = iterator.next();",
          "2317:     const result5 = await result5Promise;",
          "2318:     expectJSON(result5).toDeepEqual({",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1968:       done: false,",
          "1969:     });",
          "1973:       value: undefined,",
          "1974:       done: true,",
          "1975:     });",
          "",
          "[Removed Lines]",
          "1971:     const result5 = await iterator.next();",
          "1972:     expectJSON(result5).toDeepEqual({",
          "",
          "[Added Lines]",
          "2326:     const result6 = await iterator.next();",
          "2327:     expectJSON(result6).toDeepEqual({",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:   fieldResolver: GraphQLFieldResolver<any, any>;",
          "141:   typeResolver: GraphQLTypeResolver<any, any>;",
          "142:   subscribeFieldResolver: GraphQLFieldResolver<any, any>;",
          "143:   errors: Array<GraphQLError> | undefined;",
          "144:   cancellableStreams: Set<CancellableStreamRecord> | undefined;",
          "145: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:   enableEarlyExecution: boolean;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:   fieldResolver?: Maybe<GraphQLFieldResolver<any, any>>;",
          "160:   typeResolver?: Maybe<GraphQLTypeResolver<any, any>>;",
          "161:   subscribeFieldResolver?: Maybe<GraphQLFieldResolver<any, any>>;",
          "162: }",
          "164: export interface StreamUsage {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:   enableEarlyExecution?: Maybe<boolean>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "437:     fieldResolver,",
          "438:     typeResolver,",
          "439:     subscribeFieldResolver,",
          "440:   } = args;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442:     enableEarlyExecution,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "500:     fieldResolver: fieldResolver ?? defaultFieldResolver,",
          "501:     typeResolver: typeResolver ?? defaultTypeResolver,",
          "502:     subscribeFieldResolver: subscribeFieldResolver ?? defaultFieldResolver,",
          "503:     errors: undefined,",
          "504:     cancellableStreams: undefined,",
          "505:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:     enableEarlyExecution: enableEarlyExecution === true,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2110:         deferMap,",
          "2111:       );",
          "2117:     );",
          "2119:     newDeferredGroupedFieldSetRecords.push(deferredGroupedFieldSetRecord);",
          "2120:   }",
          "",
          "[Removed Lines]",
          "2113:     deferredGroupedFieldSetRecord.result = new BoxedPromiseOrValue(",
          "2114:       shouldDefer(parentDeferUsages, deferUsageSet)",
          "2115:         ? Promise.resolve().then(executor)",
          "2116:         : executor(),",
          "",
          "[Added Lines]",
          "2117:     const shouldDeferThisDeferUsageSet = shouldDefer(",
          "2118:       parentDeferUsages,",
          "2119:       deferUsageSet,",
          "2122:     deferredGroupedFieldSetRecord.result = shouldDeferThisDeferUsageSet",
          "2123:       ? exeContext.enableEarlyExecution",
          "2124:         ? new BoxedPromiseOrValue(Promise.resolve().then(executor))",
          "2125:         : () => new BoxedPromiseOrValue(executor())",
          "2126:       : new BoxedPromiseOrValue(executor());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2226:   info: GraphQLResolveInfo,",
          "2227:   itemType: GraphQLOutputType,",
          "2228: ): Array<StreamItemRecord> {",
          "2272:         }",
          "2281:   return streamItemQueue;",
          "2282: }",
          "",
          "[Removed Lines]",
          "2229:   const streamItemQueue: Array<StreamItemRecord> = [",
          "2230:     new BoxedPromiseOrValue(",
          "2231:       Promise.resolve().then(() => {",
          "2232:         const initialPath = addPath(streamPath, initialIndex, undefined);",
          "2233:         const firstStreamItem = new BoxedPromiseOrValue(",
          "2234:           completeStreamItem(",
          "2235:             initialPath,",
          "2236:             initialItem,",
          "2237:             exeContext,",
          "2238:             { errors: undefined },",
          "2239:             fieldGroup,",
          "2240:             info,",
          "2241:             itemType,",
          "2242:           ),",
          "2243:         );",
          "2244:         let iteration = iterator.next();",
          "2245:         let currentIndex = initialIndex + 1;",
          "2246:         let currentStreamItem = firstStreamItem;",
          "2247:         while (!iteration.done) {",
          "2250:           const result = currentStreamItem.value;",
          "2251:           if (!isPromise(result) && result.errors !== undefined) {",
          "2252:             break;",
          "2253:           }",
          "2255:           const itemPath = addPath(streamPath, currentIndex, undefined);",
          "2257:           currentStreamItem = new BoxedPromiseOrValue(",
          "2258:             completeStreamItem(",
          "2259:               itemPath,",
          "2260:               iteration.value,",
          "2261:               exeContext,",
          "2262:               { errors: undefined },",
          "2263:               fieldGroup,",
          "2264:               info,",
          "2265:               itemType,",
          "2266:             ),",
          "2267:           );",
          "2268:           streamItemQueue.push(currentStreamItem);",
          "2270:           iteration = iterator.next();",
          "2271:           currentIndex = initialIndex + 1;",
          "2274:         streamItemQueue.push(new BoxedPromiseOrValue({}));",
          "2276:         return firstStreamItem.value;",
          "2277:       }),",
          "2278:     ),",
          "2279:   ];",
          "",
          "[Added Lines]",
          "2238:   const streamItemQueue: Array<StreamItemRecord> = [];",
          "2240:   const enableEarlyExecution = exeContext.enableEarlyExecution;",
          "2242:   const firstExecutor = () => {",
          "2243:     const initialPath = addPath(streamPath, initialIndex, undefined);",
          "2244:     const firstStreamItem = new BoxedPromiseOrValue(",
          "2245:       completeStreamItem(",
          "2246:         initialPath,",
          "2247:         initialItem,",
          "2248:         exeContext,",
          "2249:         { errors: undefined },",
          "2250:         fieldGroup,",
          "2251:         info,",
          "2252:         itemType,",
          "2253:       ),",
          "2254:     );",
          "2256:     let iteration = iterator.next();",
          "2257:     let currentIndex = initialIndex + 1;",
          "2258:     let currentStreamItem:",
          "2259:       | BoxedPromiseOrValue<StreamItemResult>",
          "2260:       | (() => BoxedPromiseOrValue<StreamItemResult>) = firstStreamItem;",
          "2261:     while (!iteration.done) {",
          "2264:       if (currentStreamItem instanceof BoxedPromiseOrValue) {",
          "2265:         const result = currentStreamItem.value;",
          "2266:         if (!isPromise(result) && result.errors !== undefined) {",
          "2267:           break;",
          "2269:       }",
          "2271:       const itemPath = addPath(streamPath, currentIndex, undefined);",
          "2273:       const value = iteration.value;",
          "2275:       const currentExecutor = () =>",
          "2276:         completeStreamItem(",
          "2277:           itemPath,",
          "2278:           value,",
          "2279:           exeContext,",
          "2280:           { errors: undefined },",
          "2281:           fieldGroup,",
          "2282:           info,",
          "2283:           itemType,",
          "2284:         );",
          "2286:       currentStreamItem = enableEarlyExecution",
          "2287:         ? new BoxedPromiseOrValue(currentExecutor())",
          "2288:         : () => new BoxedPromiseOrValue(currentExecutor());",
          "2290:       streamItemQueue.push(currentStreamItem);",
          "2292:       iteration = iterator.next();",
          "2293:       currentIndex = initialIndex + 1;",
          "2294:     }",
          "2296:     streamItemQueue.push(new BoxedPromiseOrValue({}));",
          "2298:     return firstStreamItem.value;",
          "2299:   };",
          "2301:   streamItemQueue.push(",
          "2302:     enableEarlyExecution",
          "2303:       ? new BoxedPromiseOrValue(Promise.resolve().then(firstExecutor))",
          "2304:       : () => new BoxedPromiseOrValue(firstExecutor()),",
          "2305:   );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2291:   itemType: GraphQLOutputType,",
          "2292: ): Array<StreamItemRecord> {",
          "2293:   const streamItemQueue: Array<StreamItemRecord> = [];",
          "2294:   streamItemQueue.push(",
          "2307:   );",
          "2308:   return streamItemQueue;",
          "2309: }",
          "",
          "[Removed Lines]",
          "2295:     new BoxedPromiseOrValue(",
          "2296:       getNextAsyncStreamItemResult(",
          "2297:         streamItemQueue,",
          "2298:         streamPath,",
          "2299:         initialIndex,",
          "2300:         asyncIterator,",
          "2301:         exeContext,",
          "2302:         fieldGroup,",
          "2303:         info,",
          "2304:         itemType,",
          "2305:       ),",
          "2306:     ),",
          "",
          "[Added Lines]",
          "2320:   const executor = () =>",
          "2321:     getNextAsyncStreamItemResult(",
          "2322:       streamItemQueue,",
          "2323:       streamPath,",
          "2324:       initialIndex,",
          "2325:       asyncIterator,",
          "2326:       exeContext,",
          "2327:       fieldGroup,",
          "2328:       info,",
          "2329:       itemType,",
          "2330:     );",
          "2333:     exeContext.enableEarlyExecution",
          "2334:       ? new BoxedPromiseOrValue(executor())",
          "2335:       : () => new BoxedPromiseOrValue(executor()),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2345:     itemType,",
          "2346:   );",
          "2348:   streamItemQueue.push(",
          "2361:   );",
          "2363:   return result;",
          "",
          "[Removed Lines]",
          "2349:     new BoxedPromiseOrValue(",
          "2350:       getNextAsyncStreamItemResult(",
          "2351:         streamItemQueue,",
          "2352:         streamPath,",
          "2353:         index,",
          "2354:         asyncIterator,",
          "2355:         exeContext,",
          "2356:         fieldGroup,",
          "2357:         info,",
          "2358:         itemType,",
          "2359:       ),",
          "2360:     ),",
          "",
          "[Added Lines]",
          "2378:   const executor = () =>",
          "2379:     getNextAsyncStreamItemResult(",
          "2380:       streamItemQueue,",
          "2381:       streamPath,",
          "2382:       index,",
          "2383:       asyncIterator,",
          "2384:       exeContext,",
          "2385:       fieldGroup,",
          "2386:       info,",
          "2387:       itemType,",
          "2388:     );",
          "2391:     exeContext.enableEarlyExecution",
          "2392:       ? new BoxedPromiseOrValue(executor())",
          "2393:       : () => new BoxedPromiseOrValue(executor()),",
          "",
          "---------------"
        ],
        "src/execution/types.ts||src/execution/types.ts": [
          "File: src/execution/types.ts -> src/execution/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:   return deferredGroupedFieldSetResult.errors !== undefined;",
          "204: }",
          "206: export interface DeferredGroupedFieldSetRecord {",
          "207:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "209: }",
          "211: export type SubsequentResultRecord = DeferredFragmentRecord | StreamRecord;",
          "",
          "[Removed Lines]",
          "208:   result: BoxedPromiseOrValue<DeferredGroupedFieldSetResult>;",
          "",
          "[Added Lines]",
          "206: type ThunkIncrementalResult<T> =",
          "207:   | BoxedPromiseOrValue<T>",
          "208:   | (() => BoxedPromiseOrValue<T>);",
          "212:   result: ThunkIncrementalResult<DeferredGroupedFieldSetResult>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "223:   errors?: ReadonlyArray<GraphQLError> | undefined;",
          "224: }",
          "228: export interface StreamRecord {",
          "229:   path: Path;",
          "",
          "[Removed Lines]",
          "226: export type StreamItemRecord = BoxedPromiseOrValue<StreamItemResult>;",
          "",
          "[Added Lines]",
          "230: export type StreamItemRecord = ThunkIncrementalResult<StreamItemResult>;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d32b99d003f8560cf0f878443fab1446f1adf20c",
      "candidate_info": {
        "commit_hash": "d32b99d003f8560cf0f878443fab1446f1adf20c",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/d32b99d003f8560cf0f878443fab1446f1adf20c",
        "files": [
          "src/execution/execute.ts"
        ],
        "message": "polish: improve addDeferredFragments readability (#3966)\n\n-- improve variable naming:\n\n`parentDeferUsage` => `parentTarget`\n`deferUsage` => `newDeferUsage`\n\n-- add comments",
        "before_after_code_files": [
          "src/execution/execute.ts||src/execution/execute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1425:   deferMap?: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "1426:   path?: Path | undefined,",
          "1427: ): ReadonlyMap<DeferUsage, DeferredFragmentRecord> {",
          "1429:   if (newDeferUsages.length === 0) {",
          "1456:   }",
          "1458:   return newDeferMap;",
          "",
          "[Removed Lines]",
          "1428:   let newDeferMap;",
          "1430:     newDeferMap = deferMap ?? new Map<DeferUsage, DeferredFragmentRecord>();",
          "1431:   } else {",
          "1432:     newDeferMap =",
          "1433:       deferMap === undefined",
          "1434:         ? new Map<DeferUsage, DeferredFragmentRecord>()",
          "1435:         : new Map<DeferUsage, DeferredFragmentRecord>(deferMap);",
          "1436:     for (const deferUsage of newDeferUsages) {",
          "1437:       const parentDeferUsage = deferUsage.ancestors[0];",
          "1439:       const parent =",
          "1440:         parentDeferUsage === undefined",
          "1441:           ? (incrementalDataRecord as InitialResultRecord | StreamItemsRecord)",
          "1442:           : deferredFragmentRecordFromDeferUsage(parentDeferUsage, newDeferMap);",
          "1444:       const deferredFragmentRecord = new DeferredFragmentRecord({",
          "1445:         path,",
          "1446:         label: deferUsage.label,",
          "1447:       });",
          "1449:       incrementalPublisher.reportNewDeferFragmentRecord(",
          "1450:         deferredFragmentRecord,",
          "1451:         parent,",
          "1452:       );",
          "1454:       newDeferMap.set(deferUsage, deferredFragmentRecord);",
          "1455:     }",
          "",
          "[Added Lines]",
          "1447:     return deferMap ?? new Map<DeferUsage, DeferredFragmentRecord>();",
          "1448:   }",
          "1451:   const newDeferMap =",
          "1452:     deferMap === undefined",
          "1453:       ? new Map<DeferUsage, DeferredFragmentRecord>()",
          "1454:       : new Map<DeferUsage, DeferredFragmentRecord>(deferMap);",
          "1457:   for (const newDeferUsage of newDeferUsages) {",
          "1459:     const parentTarget = newDeferUsage.ancestors[0];",
          "1466:     const parent =",
          "1467:       parentTarget === undefined",
          "1468:         ? (incrementalDataRecord as InitialResultRecord | StreamItemsRecord)",
          "1469:         : deferredFragmentRecordFromDeferUsage(parentTarget, newDeferMap);",
          "1472:     const deferredFragmentRecord = new DeferredFragmentRecord({",
          "1473:       path,",
          "1474:       label: newDeferUsage.label,",
          "1475:     });",
          "1478:     incrementalPublisher.reportNewDeferFragmentRecord(",
          "1479:       deferredFragmentRecord,",
          "1480:       parent,",
          "1481:     );",
          "1484:     newDeferMap.set(newDeferUsage, deferredFragmentRecord);",
          "",
          "---------------"
        ]
      }
    }
  ]
}