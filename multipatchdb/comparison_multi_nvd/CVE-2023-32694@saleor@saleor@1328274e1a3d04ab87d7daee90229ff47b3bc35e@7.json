{
  "cve_id": "CVE-2023-32694",
  "cve_desc": "Saleor Core is a composable, headless commerce API. Saleor's `validate_hmac_signature` function is vulnerable to timing attacks. Malicious users could abuse this vulnerability on Saleor deployments having the Adyen plugin enabled in order to determine the secret key and forge fake events, this could affect the database integrity such as marking an order as paid when it is not. This issue has been patched in versions 3.7.68, 3.8.40, 3.9.49, 3.10.36, 3.11.35, 3.12.25, and 3.13.16.",
  "repo": "saleor/saleor",
  "patch_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
  "patch_info": {
    "commit_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "repo": "saleor/saleor",
    "commit_url": "https://github.com/saleor/saleor/commit/1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "files": [
      "saleor/graphql/schema.graphql",
      "saleor/order/__init__.py",
      "saleor/order/events.py",
      "saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py"
    ],
    "message": "Add webhooks logic",
    "before_after_code_files": [
      "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
      "saleor/order/__init__.py||saleor/order/__init__.py",
      "saleor/order/events.py||saleor/order/events.py",
      "saleor/payment/__init__.py||saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py||saleor/payment/utils.py"
    ]
  },
  "patch_diff": {
    "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
      "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   exportProducts(input: ExportProductsInput!): ExportProducts",
      "2751:   checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode",
      "2752:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate",
      "2754:   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate",
      "2755:   checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach",
      "2756:   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach",
      "",
      "[Removed Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "[Added Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3063:   EMAIL_SENT",
      "3064:   PAYMENT_AUTHORIZED",
      "3065:   PAYMENT_CAPTURED",
      "3066:   PAYMENT_REFUNDED",
      "3067:   PAYMENT_VOIDED",
      "3068:   PAYMENT_FAILED",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3066:   PAYMENT_GATEWAY_NOTIFICATION",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3388: enum PaymentChargeStatusEnum {",
      "3389:   NOT_CHARGED",
      "3390:   PARTIALLY_CHARGED",
      "3391:   FULLY_CHARGED",
      "3392:   PARTIALLY_REFUNDED",
      "3393:   FULLY_REFUNDED",
      "3394: }",
      "3396: type PaymentCountableConnection {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3391:   PENDING",
      "3396:   REFUSED",
      "3397:   CANCELLED",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3435: input PaymentInput {",
      "3436:   gateway: String!",
      "3437:   token: String",
      "3439:   amount: Decimal",
      "3440:   billingAddress: AddressInput",
      "3441: }",
      "",
      "[Removed Lines]",
      "3438:   paymentData: JSONString",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5024: enum TransactionKind {",
      "5025:   AUTH",
      "5026:   REFUND",
      "5027:   CAPTURE",
      "5028:   VOID",
      "5029:   CONFIRM",
      "5030: }",
      "5032: union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029:   PENDING",
      "5031:   REFUND_ONGOING",
      "5035:   CANCEL",
      "",
      "---------------"
    ],
    "saleor/order/__init__.py||saleor/order/__init__.py": [
      "File: saleor/order/__init__.py -> saleor/order/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     PAYMENT_REFUNDED = \"payment_refunded\"",
      "52:     PAYMENT_VOIDED = \"payment_voided\"",
      "53:     PAYMENT_FAILED = \"payment_failed\"",
      "55:     INVOICE_REQUESTED = \"invoice_requested\"",
      "56:     INVOICE_GENERATED = \"invoice_generated\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     PAYMENT_GATEWAY_NOTIFICATION = \"payment_gateway_notification\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         (EMAIL_SENT, \"The email was sent\"),",
      "81:         (PAYMENT_AUTHORIZED, \"The payment was authorized\"),",
      "82:         (PAYMENT_CAPTURED, \"The payment was captured\"),",
      "83:         (PAYMENT_REFUNDED, \"The payment was refunded\"),",
      "84:         (PAYMENT_VOIDED, \"The payment was voided\"),",
      "85:         (PAYMENT_FAILED, \"The payment was failed\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         (PAYMENT_GATEWAY_NOTIFICATION, \"Notification from payment gateway\"),",
      "",
      "---------------"
    ],
    "saleor/order/events.py||saleor/order/events.py": [
      "File: saleor/order/events.py -> saleor/order/events.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:     )",
      "263: def fulfillment_canceled_event(",
      "265: ) -> OrderEvent:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: def payment_gateway_notification_event(",
      "265: ) -> OrderEvent:",
      "266:     if not _user_is_valid(user):",
      "267:         user = None",
      "268:     parameters = {\"message\": message}",
      "270:     if payment:",
      "271:         parameters.update({\"gateway\": payment.gateway, \"payment_id\": payment.token})",
      "273:     return OrderEvent.objects.create(",
      "274:         order=order,",
      "275:         type=OrderEvents.PAYMENT_GATEWAY_NOTIFICATION,",
      "276:         user=user,",
      "277:         parameters=parameters,",
      "278:     )",
      "",
      "---------------"
    ],
    "saleor/payment/__init__.py||saleor/payment/__init__.py": [
      "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     AUTH = \"auth\"",
      "61:     CAPTURE = \"capture\"",
      "62:     VOID = \"void\"",
      "63:     PENDING = \"pending\"",
      "64:     REFUND = \"refund\"",
      "65:     REFUND_ONGOING = \"refund_ongoing\"",
      "66:     CONFIRM = \"confirm\"",
      "67:     # FIXME we could use another status like WAITING_FOR_AUTH for transactions",
      "68:     # Which were authorized, but needs to be confirmed manually by staff",
      "69:     # eg. Braintree with \"submit_for_settlement\" enabled",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     CAPTURE_FAILED = \"capture_failed\"",
      "67:     REFUND_FAILED = \"refund_failed\"",
      "68:     REFUND_REVERSED = \"refund_reversed\"",
      "70:     CANCEL = \"cancel\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         (CAPTURE, \"Capture\"),",
      "76:         (VOID, \"Void\"),",
      "77:         (CONFIRM, \"Confirm\"),",
      "78:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         (CANCEL, \"Cancel\"),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:     FULLY_CHARGED = \"fully-charged\"",
      "98:     PARTIALLY_REFUNDED = \"partially-refunded\"",
      "99:     FULLY_REFUNDED = \"fully-refunded\"",
      "101:     CHOICES = [",
      "102:         (NOT_CHARGED, \"Not charged\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     REFUSED = \"refused\"",
      "106:     CANCELLED = \"cancelled\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:         (FULLY_CHARGED, \"Fully charged\"),",
      "106:         (PARTIALLY_REFUNDED, \"Partially refunded\"),",
      "107:         (FULLY_REFUNDED, \"Fully refunded\"),",
      "108:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:         (REFUSED, \"Refused\"),",
      "116:         (CANCELLED, \"Cancelled\"),",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
      "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import json",
      "4: import Adyen",
      "5: from babel.numbers import get_currency_precision",
      "6: from django.core.handlers.wsgi import WSGIRequest",
      "8: from graphql_relay import from_global_id",
      "10: from ....checkout.models import Checkout",
      "",
      "[Removed Lines]",
      "2: from typing import Optional",
      "7: from django.http import HttpResponse, JsonResponse",
      "",
      "[Added Lines]",
      "2: from typing import List, Optional",
      "6: from django.contrib.auth.hashers import make_password",
      "8: from django.http import HttpResponse, HttpResponseNotFound, JsonResponse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     request_data_for_payment,",
      "22:     request_for_payment_refund,",
      "23: )",
      "25: GATEWAY_NAME = \"Adyen\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: from .webhooks import handle_webhook",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:         {\"name\": \"Origin Key\", \"value\": \"\"},",
      "51:         {\"name\": \"Origin Url\", \"value\": \"\"},",
      "52:         {\"name\": \"Live\", \"value\": \"\"},",
      "54:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
      "55:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
      "56:         {\"name\": \"Notification user\", \"value\": \"\"},",
      "",
      "[Removed Lines]",
      "53:         {\"name\": \"Enable notifications\", \"value\": True},",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:             \"type\": ConfigurationTypeField.BOOLEAN,",
      "110:             \"help_text\": (",
      "111:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
      "114:                 \"https://docs.adyen.com/development-resources/webhooks\"",
      "115:             ),",
      "116:             \"label\": \"Enable notifications\",",
      "",
      "[Removed Lines]",
      "112:                 \"webhook url is <your-backend-url>/plugins/mirumee.payments.adyen/\"",
      "113:                 \"webhooks/ \"",
      "",
      "[Added Lines]",
      "113:                 \"webhook url is http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:             \"help_text\": (",
      "135:                 \"Provide secret key generated on Adyen side.\"",
      "136:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
      "138:             ),",
      "139:             \"label\": \"HMAC secret key\",",
      "140:         },",
      "",
      "[Removed Lines]",
      "137:                 \"ions-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "137:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
      "138:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "143:             \"help_text\": (",
      "144:                 \"Base User provided on the Adyen side for authenticate incoming \"",
      "145:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "147:             ),",
      "148:             \"label\": \"Notification user\",",
      "149:         },",
      "",
      "[Removed Lines]",
      "146:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "147:                 \"set-up-notifications-in-your-customer-area \"",
      "148:                 \"The Saleor webhook url is \"",
      "149:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "152:             \"help_text\": (",
      "153:                 \"User password provided on the Adyen side for authenticate incoming \"",
      "154:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "156:             ),",
      "157:             \"label\": \"Notification password\",",
      "158:         },",
      "",
      "[Removed Lines]",
      "155:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "158:                 \"set-up-notifications-in-your-customer-area \"",
      "159:                 \"The Saleor webhook url is \"",
      "160:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
      "164:         self.config = GatewayConfig(",
      "165:             gateway_name=GATEWAY_NAME,",
      "167:             supported_currencies=configuration[\"Supported currencies\"],",
      "168:             connection_params={",
      "169:                 \"api_key\": configuration[\"API key\"],",
      "",
      "[Removed Lines]",
      "166:             auto_capture=True,  # FIXME check this",
      "",
      "[Added Lines]",
      "171:             auto_capture=configuration[",
      "172:                 \"Automatically mark payment as a capture\"",
      "173:             ],  # FIXME check this",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "171:                 \"return_url\": configuration[\"Return Url\"],",
      "172:                 \"origin_key\": configuration[\"Origin Key\"],",
      "173:                 \"origin_url\": configuration[\"Origin Url\"],",
      "174:             },",
      "175:         )",
      "176:         api_key = self.config.connection_params[\"api_key\"]",
      "177:         self.adyen = Adyen.Adyen(xapikey=api_key)",
      "179:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
      "184:     def _get_gateway_config(self) -> GatewayConfig:",
      "185:         return self.config",
      "",
      "[Removed Lines]",
      "181:         print(request.body)",
      "182:         return HttpResponse(\"[accepted]\")",
      "",
      "[Added Lines]",
      "181:                 \"live\": configuration[\"Live\"],",
      "182:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
      "183:                 \"webhook_user\": configuration[\"Notification user\"],",
      "184:                 \"webhook_user_password\": configuration[\"Notification password\"],",
      "191:         config = self._get_gateway_config()",
      "192:         return handle_webhook(request, config)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "238:             raw_response=result.message,",
      "239:         )",
      "241:     @require_active_plugin",
      "242:     def get_payment_config(self, previous_value):",
      "243:         return []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @classmethod",
      "252:     def _update_config_items(",
      "253:         cls, configuration_to_update: List[dict], current_config: List[dict]",
      "254:     ):",
      "255:         super()._update_config_items(configuration_to_update, current_config)",
      "256:         for item in current_config:",
      "257:             if item.get(\"name\") == \"Notification password\":",
      "258:                 item[\"value\"] = make_password(item[\"value\"])",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
      "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: logger = logging.getLogger(__name__)",
      "18: def get_price_amount(value: Decimal, currency: str):",
      "19:     \"\"\"Adyen doesn't use values with comma.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: def convert_adyen_price_format(value: str, currency: str):",
      "19:     value = Decimal(value)",
      "20:     precision = get_currency_precision(currency)",
      "21:     number_places = Decimal(10) ** -precision",
      "22:     return value * number_places",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
      "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import base64",
      "2: import binascii",
      "3: import hashlib",
      "4: import hmac",
      "5: import json",
      "6: from typing import Any, Dict, Optional",
      "8: from django.contrib.auth.hashers import check_password",
      "9: from django.core.handlers.wsgi import WSGIRequest",
      "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
      "11: from django.http.request import HttpHeaders",
      "12: from graphql_relay import from_global_id",
      "14: from ....order.events import payment_gateway_notification_event",
      "15: from ....payment.models import Payment, Transaction",
      "16: from ... import TransactionKind",
      "17: from ...interface import GatewayConfig, GatewayResponse",
      "18: from ...utils import create_transaction, gateway_postprocess",
      "19: from .utils import convert_adyen_price_format",
      "22: def get_payment(payment_id: str) -> Payment:",
      "23:     _type, payment_id = from_global_id(payment_id)",
      "24:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
      "25:     return payment",
      "28: def get_transaction(",
      "29:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
      "30: ) -> Transaction:",
      "31:     transaction = payment.transactions.filter(kind=kind, token=transaction_id)",
      "32:     return transaction",
      "35: def create_new_transaction(notification, payment, kind):",
      "36:     transaction_id = notification.get(\"pspReference\")",
      "37:     currency = notification.get(\"amount\", {}).get(\"currency\")",
      "38:     amount = convert_adyen_price_format(",
      "39:         notification.get(\"amount\", {}).get(\"value\"), currency",
      "40:     )",
      "41:     is_success = True if notification.get(\"success\") == \"true\" else False",
      "43:     gateway_response = GatewayResponse(",
      "44:         kind=kind,",
      "45:         action_required=False,",
      "46:         transaction_id=transaction_id,",
      "47:         is_success=is_success,",
      "48:         amount=amount,",
      "49:         currency=currency,",
      "50:         error=\"\",",
      "51:         raw_response={},",
      "52:     )",
      "53:     return create_transaction(",
      "54:         payment,",
      "55:         kind=kind,",
      "56:         payment_information=None,",
      "57:         action_required=False,",
      "58:         gateway_response=gateway_response,",
      "59:     )",
      "62: def create_payment_notification_for_order(",
      "63:     payment: Payment, success_msg: str, failed_msg: Optional[str], is_success: bool",
      "64: ):",
      "65:     if not payment.order:",
      "66:         # Order is not assigned",
      "67:         return",
      "68:     msg = success_msg if is_success else failed_msg",
      "70:     payment_gateway_notification_event(",
      "71:         order=payment.order, user=None, message=msg, payment=payment",
      "72:     )",
      "75: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "76:     mark_capture = gateway_config.auto_capture",
      "77:     if mark_capture:",
      "78:         # If we mark order as a capture by default we don't need to handle auth actions",
      "79:         return",
      "80:     payment = get_payment(notification.get(\"merchantReference\"))",
      "81:     if not payment:",
      "82:         # We don't know anything about that payment",
      "83:         return",
      "85:     transaction_id = notification.get(\"pspReference\")",
      "86:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
      "87:     if transaction:",
      "88:         # We already marked it as Auth",
      "89:         return",
      "91:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
      "93:     success_msg = \"Adyen: The payment request was successful.\"",
      "94:     failed_msg = \"Adyen: The payment request failed.\"",
      "95:     create_payment_notification_for_order(",
      "96:         payment, success_msg, failed_msg, transaction.is_success",
      "97:     )",
      "100: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "101:     payment = get_payment(notification.get(\"merchantReference\"))",
      "102:     if not payment:",
      "103:         return",
      "104:     transaction_id = notification.get(\"pspReference\")",
      "105:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
      "106:     if transaction:",
      "107:         # it is already cancelled",
      "108:         return",
      "109:     new_transaction = create_new_transaction(",
      "110:         notification, payment, TransactionKind.CANCEL",
      "111:     )",
      "112:     gateway_postprocess(new_transaction, payment)",
      "114:     success_msg = \"Adyen: The cancel request was successful.\"",
      "115:     failed_msg = \"Adyen: The request failed.\"",
      "116:     create_payment_notification_for_order(",
      "117:         payment, success_msg, failed_msg, transaction.is_success",
      "118:     )",
      "121: def handle_cancel_or_refund(",
      "122:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "123: ):",
      "124:     additional_data = notification.get(\"additionalData\")",
      "125:     action = additional_data.get(\"modification.action\")",
      "126:     if action == \"refund\":",
      "127:         handle_refund(notification, gateway_config)",
      "128:     elif action == \"cancel\":",
      "129:         handle_cancellation(notification, gateway_config)",
      "132: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "133:     payment = get_payment(notification.get(\"merchantReference\"))",
      "134:     if not payment:",
      "135:         return",
      "136:     transaction_id = notification.get(\"pspReference\")",
      "137:     transaction = get_transaction(payment, transaction_id, TransactionKind.CAPTURE)",
      "138:     if transaction and transaction.is_success:",
      "139:         # it is already captured",
      "140:         return",
      "142:     new_transaction = create_new_transaction(",
      "143:         notification, payment, TransactionKind.CAPTURE",
      "144:     )",
      "145:     gateway_postprocess(new_transaction, payment)",
      "147:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
      "148:     failed_msg = f\"Adyen: The capture {transaction_id} request failed.\"",
      "149:     create_payment_notification_for_order(",
      "150:         payment, success_msg, failed_msg, transaction.is_success",
      "151:     )",
      "154: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "155:     payment = get_payment(notification.get(\"merchantReference\"))",
      "156:     if not payment:",
      "157:         return",
      "158:     transaction_id = notification.get(\"pspReference\")",
      "160:     transaction = get_transaction(",
      "161:         payment, transaction_id, TransactionKind.CAPTURE_FAILED",
      "162:     )",
      "163:     if transaction and transaction.is_success:",
      "164:         # it is already failed",
      "165:         return",
      "166:     new_transaction = create_new_transaction(",
      "167:         notification, payment, TransactionKind.CAPTURE_FAILED",
      "168:     )",
      "169:     gateway_postprocess(new_transaction, payment)",
      "171:     msg = f\"Adyen: The capture for {transaction_id} failed due to a technical issue.\"",
      "172:     create_payment_notification_for_order(payment, msg, None, True)",
      "175: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "176:     mark_capture = gateway_config.auto_capture",
      "177:     if mark_capture:",
      "178:         # If we mark order as a capture by default we don't need to handle this action",
      "179:         return",
      "180:     payment = get_payment(notification.get(\"merchantReference\"))",
      "181:     if not payment:",
      "182:         return",
      "183:     transaction_id = notification.get(\"pspReference\")",
      "184:     transaction = get_transaction(payment, transaction_id, TransactionKind.PENDING)",
      "185:     if transaction and transaction.is_success:",
      "186:         # it is already pending",
      "187:         return",
      "188:     new_transaction = create_new_transaction(",
      "189:         notification, payment, TransactionKind.PENDING",
      "190:     )",
      "191:     gateway_postprocess(new_transaction, payment)",
      "193:     msg = f\"Adyen: The transaction {transaction_id} is pending.\"",
      "194:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
      "197: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "198:     payment = get_payment(notification.get(\"merchantReference\"))",
      "199:     if not payment:",
      "200:         return",
      "201:     transaction_id = notification.get(\"pspReference\")",
      "202:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "203:     if transaction and transaction.is_success:",
      "204:         # it is already refunded",
      "205:         return",
      "206:     new_transaction = create_new_transaction(",
      "207:         notification, payment, TransactionKind.REFUND",
      "208:     )",
      "209:     gateway_postprocess(new_transaction, payment)",
      "211:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "212:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "213:     create_payment_notification_for_order(",
      "214:         payment, success_msg, failed_msg, transaction.is_success",
      "215:     )",
      "218: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "219:     payment = get_payment(notification.get(\"merchantReference\"))",
      "220:     if not payment:",
      "221:         return",
      "222:     transaction_id = notification.get(\"pspReference\")",
      "223:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "224:     if transaction and not transaction.is_success:",
      "225:         # The refund is already saved",
      "226:         return",
      "227:     new_transaction = create_new_transaction(",
      "228:         notification, payment, TransactionKind.REFUND",
      "229:     )",
      "230:     gateway_postprocess(new_transaction, payment)",
      "232:     msg = (",
      "233:         f\"The refund {transaction_id} failed due to a technical issue. If you receive \"",
      "234:         f\"more than two failures on the same refund, contact Adyen Support Team.\"",
      "235:     )",
      "236:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "239: def handle_reversed_refund(",
      "240:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "241: ):",
      "242:     payment = get_payment(notification.get(\"merchantReference\"))",
      "243:     if not payment:",
      "244:         return",
      "245:     transaction_id = notification.get(\"pspReference\")",
      "246:     transaction = get_transaction(",
      "247:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
      "248:     )",
      "250:     if transaction and not transaction.is_success:",
      "251:         # it is already refunded",
      "252:         return",
      "253:     new_transaction = create_new_transaction(",
      "254:         notification, payment, TransactionKind.REFUND_REVERSED",
      "255:     )",
      "256:     gateway_postprocess(new_transaction, payment)",
      "257:     msg = (",
      "258:         f\"Adyen: The refunded amount from {transaction_id} has been returned to Adyen, \"",
      "259:         f\"and is back in your account. This may happen if the shopper's bank account \"",
      "260:         f\"is no longer valid\"",
      "261:     )",
      "262:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "265: def handle_refund_with_data(",
      "266:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "267: ):",
      "269:     payment = get_payment(notification.get(\"merchantReference\"))",
      "270:     if not payment:",
      "271:         return",
      "272:     transaction_id = notification.get(\"pspReference\")",
      "273:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "274:     if transaction:",
      "275:         # it is already refunded",
      "276:         return",
      "277:     new_transaction = create_new_transaction(",
      "278:         notification, payment, TransactionKind.REFUND",
      "279:     )",
      "280:     gateway_postprocess(new_transaction, payment)",
      "281:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "282:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "283:     create_payment_notification_for_order(",
      "284:         payment, success_msg, failed_msg, transaction.is_success",
      "285:     )",
      "288: def webhook_not_implemented(",
      "289:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "290: ):",
      "291:     adyen_id = notification.get(\"pspReference\")",
      "292:     success = notification.get(\"success\", True)",
      "293:     event = notification.get(\"eventCode\")",
      "294:     payment = get_payment(notification.get(\"merchantReference\"))",
      "295:     if not payment:",
      "296:         return",
      "297:     msg = (",
      "298:         f\"Received not implemented notification from Adyen. Event name: {event}, \"",
      "299:         f\"success: {success}, adyen reference: {adyen_id}.\"",
      "300:     )",
      "301:     create_payment_notification_for_order(payment, msg, None, True)",
      "304: EVENT_MAP = {",
      "305:     \"AUTHORISATION\": handle_authorization,",
      "306:     \"AUTHORISATION_ADJUSTMENT\": webhook_not_implemented,",
      "307:     \"CANCELLATION\": handle_cancellation,",
      "308:     \"CANCEL_OR_REFUND\": handle_cancel_or_refund,",
      "309:     \"CAPTURE\": handle_capture,",
      "310:     \"CAPTURE_FAILED\": handle_failed_capture,",
      "311:     \"HANDLED_EXTERNALLY\": webhook_not_implemented,",
      "312:     \"ORDER_OPENED\": webhook_not_implemented,",
      "313:     \"ORDER_CLOSED\": webhook_not_implemented,",
      "314:     \"PENDING\": handle_pending,",
      "315:     \"PROCESS_RETRY\": webhook_not_implemented,",
      "316:     \"REFUND\": handle_refund,",
      "317:     \"REFUND_FAILED\": handle_failed_refund,",
      "318:     \"REFUNDED_REVERSED\": handle_reversed_refund,",
      "319:     \"REFUND_WITH_DATA\": handle_refund_with_data,",
      "320:     \"REPORT_AVAILABLE\": webhook_not_implemented,",
      "321:     \"VOID_PENDING_REFUND\": webhook_not_implemented,",
      "322: }",
      "325: def validate_hmac_signature(",
      "326:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
      "327: ) -> bool:",
      "329:     \"\"\"",
      "330:     pspReference 7914073381342284",
      "331:     originalReference",
      "332:     merchantAccountCode YOUR_MERCHANT_ACCOUNT",
      "333:     merchantReference TestPayment-1407325143704",
      "334:     value 1130",
      "335:     currency EUR",
      "336:     eventCode AUTHORISATION",
      "337:     success true",
      "338:     \"\"\"",
      "339:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
      "340:     if not hmac_key:",
      "341:         return True",
      "343:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
      "344:     if not hmac_signature and hmac_key:",
      "345:         return False",
      "347:     success = \"true\" if notification.get(\"success\", \"\") else \"false\"",
      "348:     if notification.get(\"success\", None) is None:",
      "349:         success = \"\"",
      "351:     payload_list = [",
      "352:         notification.get(\"pspReference\", \"\"),",
      "353:         notification.get(\"originalReference\", \"\"),",
      "354:         notification.get(\"merchantAccountCode\", \"\"),",
      "355:         notification.get(\"merchantReference\", \"\"),",
      "356:         notification.get(\"value\", \"\"),",
      "357:         notification.get(\"currency\", \"\"),",
      "358:         notification.get(\"eventCode\", \"\"),",
      "359:         success,",
      "360:     ]",
      "361:     payload = \":\".join(payload_list)",
      "363:     hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)",
      "364:     expected_merchant_sign = base64.b64encode(hm.digest())",
      "365:     return hmac_signature == expected_merchant_sign.decode(\"utf-8\")",
      "368: def validate_auth_user(headers: HttpHeaders, gateway_config: \"GatewayConfig\") -> bool:",
      "369:     username = gateway_config.connection_params[\"webhook_user\"]",
      "370:     password = gateway_config.connection_params[\"webhook_user_password\"]",
      "371:     auth_header = headers.get(\"Authorization\")",
      "372:     if not auth_header and not username:",
      "373:         return True",
      "375:     split_auth = auth_header.split(maxsplit=1)",
      "376:     prefix = \"BASIC\"",
      "378:     if len(split_auth) != 2 or split_auth[0].upper() != prefix:",
      "379:         return False",
      "381:     auth = split_auth[1]",
      "382:     try:",
      "383:         request_username, request_password = base64.b64decode(auth).split(\":\")",
      "384:         user_is_correct = request_username == username",
      "385:         if user_is_correct and check_password(request_password, password):",
      "386:             return True",
      "387:     except binascii.Error:",
      "388:         pass",
      "389:     return False",
      "392: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
      "393:     json_data = json.loads(request.body)",
      "394:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
      "395:     # object.",
      "396:     notification = json_data.get(\"notificationItems\")[0].get(",
      "397:         \"NotificationRequestItem\", {}",
      "398:     )",
      "400:     if not validate_hmac_signature(notification, gateway_config):",
      "401:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
      "402:     if not validate_auth_user(notification, gateway_config):",
      "403:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
      "405:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
      "406:     if event_handler:",
      "407:         event_handler(notification, gateway_config)",
      "408:         return HttpResponse(\"[accepted]\")",
      "409:     return HttpResponseNotFound()",
      "",
      "---------------"
    ],
    "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py": [
      "File: saleor/payment/migrations/0019_auto_20200721_1313.py -> saleor/payment/migrations/0019_auto_20200721_1313.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Generated by Django 3.0.6 on 2020-07-21 13:13",
      "3: from django.db import migrations, models",
      "6: class Migration(migrations.Migration):",
      "8:     dependencies = [",
      "9:         (\"payment\", \"0018_auto_20200720_1118\"),",
      "10:     ]",
      "12:     operations = [",
      "13:         migrations.AlterField(",
      "14:             model_name=\"payment\",",
      "15:             name=\"charge_status\",",
      "16:             field=models.CharField(",
      "17:                 choices=[",
      "18:                     (\"not-charged\", \"Not charged\"),",
      "19:                     (\"pending\", \"Pending\"),",
      "20:                     (\"partially-charged\", \"Partially charged\"),",
      "21:                     (\"fully-charged\", \"Fully charged\"),",
      "22:                     (\"partially-refunded\", \"Partially refunded\"),",
      "23:                     (\"fully-refunded\", \"Fully refunded\"),",
      "24:                     (\"refused\", \"Refused\"),",
      "25:                     (\"cancelled\", \"Cancelled\"),",
      "26:                 ],",
      "27:                 default=\"not-charged\",",
      "28:                 max_length=20,",
      "29:             ),",
      "30:         ),",
      "31:         migrations.AlterField(",
      "32:             model_name=\"transaction\",",
      "33:             name=\"kind\",",
      "34:             field=models.CharField(",
      "35:                 choices=[",
      "36:                     (\"auth\", \"Authorization\"),",
      "37:                     (\"pending\", \"Pending\"),",
      "38:                     (\"refund\", \"Refund\"),",
      "39:                     (\"refund_ongoing\", \"Refund in progress\"),",
      "40:                     (\"capture\", \"Capture\"),",
      "41:                     (\"void\", \"Void\"),",
      "42:                     (\"confirm\", \"Confirm\"),",
      "43:                     (\"cancel\", \"Cancel\"),",
      "44:                 ],",
      "45:                 max_length=25,",
      "46:             ),",
      "47:         ),",
      "48:     ]",
      "",
      "---------------"
    ],
    "saleor/payment/utils.py||saleor/payment/utils.py": [
      "File: saleor/payment/utils.py -> saleor/payment/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: def create_transaction(",
      "133:     payment: Payment,",
      "134:     kind: str,",
      "136:     action_required: bool = False,",
      "137:     gateway_response: GatewayResponse = None,",
      "138:     error_msg=None,",
      "",
      "[Removed Lines]",
      "135:     payment_information: PaymentData,",
      "",
      "[Added Lines]",
      "135:     payment_information: Optional[PaymentData],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
      "221:     #     payment.save(update_fields=[\"charge_status\", ])",
      "224:         payment.captured_amount += transaction.amount",
      "226:         # Set payment charge status to fully charged",
      "",
      "[Removed Lines]",
      "223:     if transaction_kind in {TransactionKind.CAPTURE, TransactionKind.CONFIRM}:",
      "",
      "[Added Lines]",
      "223:     if transaction_kind in {",
      "224:         TransactionKind.CAPTURE,",
      "225:         TransactionKind.CONFIRM,",
      "226:         TransactionKind.REFUND_REVERSED,",
      "227:     }:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "249:         payment.save(",
      "250:             update_fields=[\"charge_status\",]",
      "251:         )",
      "254: def fetch_customer_id(user: User, gateway: str):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:     elif transaction_kind == TransactionKind.CANCEL:",
      "257:         payment.charge_status = ChargeStatus.CANCELLED",
      "258:         payment.save(",
      "259:             update_fields=[\"charge_status\",]",
      "260:         )",
      "261:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
      "262:         if payment.charge_status in {",
      "263:             ChargeStatus.PARTIALLY_CHARGED,",
      "264:             ChargeStatus.FULLY_CHARGED,",
      "265:         }:",
      "266:             payment.captured_amount -= transaction.amount",
      "267:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
      "268:             if payment.get_charge_amount() <= 0:",
      "269:                 payment.charge_status = ChargeStatus.FULLY_CHARGED",
      "271:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5bbe330446bac5acb376c5979ebc5185e6947d87",
      "candidate_info": {
        "commit_hash": "5bbe330446bac5acb376c5979ebc5185e6947d87",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/5bbe330446bac5acb376c5979ebc5185e6947d87",
        "files": [
          "saleor/checkout/migrations/0028_auto_20200824_1019.py",
          "saleor/checkout/models.py",
          "saleor/checkout/tests/test_checkout.py",
          "saleor/checkout/utils.py",
          "saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/tests/test_checkout.py",
          "saleor/graphql/checkout/tests/test_checkout_complete.py",
          "saleor/graphql/checkout/utils.py",
          "saleor/payment/gateway.py",
          "saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/webhooks/cassettes/test_handle_authorization_for_checkout_wrong_total.yaml",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/utils.py",
          "saleor/tests/fixtures.py"
        ],
        "message": "Init for locking checkoutComplete",
        "before_after_code_files": [
          "saleor/checkout/migrations/0028_auto_20200824_1019.py||saleor/checkout/migrations/0028_auto_20200824_1019.py",
          "saleor/checkout/models.py||saleor/checkout/models.py",
          "saleor/checkout/tests/test_checkout.py||saleor/checkout/tests/test_checkout.py",
          "saleor/checkout/utils.py||saleor/checkout/utils.py",
          "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/tests/test_checkout.py||saleor/graphql/checkout/tests/test_checkout.py",
          "saleor/graphql/checkout/tests/test_checkout_complete.py||saleor/graphql/checkout/tests/test_checkout_complete.py",
          "saleor/graphql/checkout/utils.py||saleor/graphql/checkout/utils.py",
          "saleor/payment/gateway.py||saleor/payment/gateway.py",
          "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/utils.py||saleor/payment/utils.py",
          "saleor/tests/fixtures.py||saleor/tests/fixtures.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/checkout/migrations/0028_auto_20200824_1019.py||saleor/checkout/migrations/0028_auto_20200824_1019.py": [
          "File: saleor/checkout/migrations/0028_auto_20200824_1019.py -> saleor/checkout/migrations/0028_auto_20200824_1019.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Generated by Django 3.1 on 2020-08-24 10:19",
          "3: from django.db import migrations, models",
          "6: class Migration(migrations.Migration):",
          "8:     dependencies = [",
          "9:         (\"checkout\", \"0027_auto_20200810_1415\"),",
          "10:     ]",
          "12:     operations = [",
          "13:         migrations.AddField(",
          "14:             model_name=\"checkout\",",
          "15:             name=\"redirect_url\",",
          "16:             field=models.URLField(blank=True, null=True),",
          "17:         ),",
          "18:         migrations.AddField(",
          "19:             model_name=\"checkout\",",
          "20:             name=\"tracking_code\",",
          "21:             field=models.CharField(blank=True, max_length=255, null=True),",
          "22:         ),",
          "23:     ]",
          "",
          "---------------"
        ],
        "saleor/checkout/models.py||saleor/checkout/models.py": [
          "File: saleor/checkout/models.py -> saleor/checkout/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     voucher_code = models.CharField(max_length=12, blank=True, null=True)",
          "97:     gift_cards = models.ManyToManyField(GiftCard, blank=True, related_name=\"checkouts\")",
          "99:     objects = CheckoutQueryset.as_manager()",
          "101:     class Meta:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     redirect_url = models.URLField(blank=True, null=True)",
          "100:     tracking_code = models.CharField(max_length=255, blank=True, null=True)",
          "",
          "---------------"
        ],
        "saleor/checkout/tests/test_checkout.py||saleor/checkout/tests/test_checkout.py": [
          "File: saleor/checkout/tests/test_checkout.py -> saleor/checkout/tests/test_checkout.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     checkout.shipping_address = customer_user.default_shipping_address",
          "106:     checkout.shipping_method = shipping_method",
          "107:     checkout.payments.add(payment_txn_captured)",
          "108:     checkout.save()",
          "110:     # Place checkout",
          "111:     order = create_order(",
          "112:         checkout=checkout,",
          "113:         order_data=prepare_order_data(",
          "118:         ),",
          "119:         user=customer_user,",
          "121:     )",
          "122:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "114:             checkout=checkout,",
          "115:             lines=list(checkout),",
          "116:             tracking_code=\"tracking_code\",",
          "117:             discounts=None,",
          "120:         redirect_url=\"https://www.example.com\",",
          "",
          "[Added Lines]",
          "108:     checkout.tracking_code = \"tracking_code\"",
          "109:     checkout.redirect_url = \"https://www.example.com\"",
          "116:             checkout=checkout, lines=list(checkout), discounts=None,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     checkout.shipping_address = customer_user.default_shipping_address",
          "229:     checkout.shipping_method = shipping_method",
          "230:     checkout.payments.add(payment_txn_captured)",
          "231:     checkout.save()",
          "233:     # Place checkout",
          "234:     order = create_order(",
          "235:         checkout=checkout,",
          "236:         order_data=prepare_order_data(",
          "241:         ),",
          "242:         user=AnonymousUser(),",
          "244:     )",
          "245:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "237:             checkout=checkout,",
          "238:             lines=list(checkout),",
          "239:             tracking_code=\"tracking_code\",",
          "240:             discounts=None,",
          "243:         redirect_url=\"https://www.example.com\",",
          "",
          "[Added Lines]",
          "229:     checkout.tracking_code = \"tracking_code\"",
          "230:     checkout.redirect_url = \"https://www.example.com\"",
          "237:             checkout=checkout, lines=list(checkout), discounts=None,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "343:     checkout.shipping_address = customer_user.default_shipping_address",
          "344:     checkout.shipping_method = shipping_method",
          "345:     checkout.payments.add(payment_txn_preauth)",
          "346:     checkout.save()",
          "348:     # Place checkout",
          "349:     order = create_order(",
          "350:         checkout=checkout,",
          "351:         order_data=prepare_order_data(",
          "356:         ),",
          "357:         user=customer_user,",
          "359:     )",
          "360:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "352:             checkout=checkout,",
          "353:             lines=list(checkout),",
          "354:             tracking_code=\"tracking_code\",",
          "355:             discounts=None,",
          "358:         redirect_url=\"https://www.example.com\",",
          "",
          "[Added Lines]",
          "342:     checkout.tracking_code = \"tracking_code\"",
          "343:     checkout.redirect_url = \"https://www.example.com\"",
          "350:             checkout=checkout, lines=list(checkout), discounts=None,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "437:     checkout.shipping_address = customer_user.default_shipping_address",
          "438:     checkout.shipping_method = shipping_method",
          "439:     checkout.payments.add(payment_txn_preauth)",
          "440:     checkout.save()",
          "442:     # Place checkout",
          "443:     order = create_order(",
          "444:         checkout=checkout,",
          "445:         order_data=prepare_order_data(",
          "450:         ),",
          "451:         user=AnonymousUser(),",
          "453:     )",
          "454:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "446:             checkout=checkout,",
          "447:             lines=list(checkout),",
          "448:             tracking_code=\"tracking_code\",",
          "449:             discounts=None,",
          "452:         redirect_url=\"https://www.example.com\",",
          "",
          "[Added Lines]",
          "434:     checkout.tracking_code = \"tracking_code\"",
          "435:     checkout.redirect_url = \"https://www.example.com\"",
          "442:             checkout=checkout, lines=list(checkout), discounts=None,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "515:     checkout.user = customer_user",
          "516:     checkout.billing_address = customer_user.default_billing_address",
          "517:     checkout.shipping_address = customer_user.default_billing_address",
          "518:     checkout.save()",
          "520:     with pytest.raises(InsufficientStock):",
          "521:         prepare_order_data(",
          "526:         )",
          "",
          "[Removed Lines]",
          "522:             checkout=checkout,",
          "523:             lines=list(checkout),",
          "524:             tracking_code=\"tracking_code\",",
          "525:             discounts=None,",
          "",
          "[Added Lines]",
          "510:     checkout.tracking_code = \"tracking_code\"",
          "515:             checkout=checkout, lines=list(checkout), discounts=None,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "534:     checkout.billing_address = customer_user.default_billing_address",
          "535:     checkout.shipping_address = customer_user.default_billing_address",
          "536:     checkout.shipping_method = shipping_method",
          "537:     checkout.save()",
          "539:     order_data = prepare_order_data(",
          "541:     )",
          "543:     order_1 = create_order(",
          "548:     )",
          "549:     assert order_1.checkout_token == checkout.token",
          "551:     order_2 = create_order(",
          "556:     )",
          "557:     assert order_1.pk == order_2.pk",
          "",
          "[Removed Lines]",
          "540:         checkout=checkout, lines=list(checkout), tracking_code=\"\", discounts=None",
          "544:         checkout=checkout,",
          "545:         order_data=order_data,",
          "546:         user=customer_user,",
          "547:         redirect_url=\"https://www.example.com\",",
          "552:         checkout=checkout,",
          "553:         order_data=order_data,",
          "554:         user=customer_user,",
          "555:         redirect_url=\"https://www.example.com\",",
          "",
          "[Added Lines]",
          "527:     checkout.tracking_code = \"\"",
          "528:     checkout.redirect_url = \"https://www.example.com\"",
          "532:         checkout=checkout, lines=list(checkout), discounts=None",
          "536:         checkout=checkout, order_data=order_data, user=customer_user,",
          "541:         checkout=checkout, order_data=order_data, user=customer_user,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "567:     checkout.billing_address = customer_user.default_billing_address",
          "568:     checkout.shipping_address = customer_user.default_billing_address",
          "569:     checkout.shipping_method = shipping_method",
          "570:     checkout.save()",
          "572:     lines = list(checkout)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:     checkout.tracking_code = \"tracking_code\"",
          "557:     checkout.redirect_url = \"https://www.example.com\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "582:     order = create_order(",
          "583:         checkout=checkout,",
          "590:         user=customer_user if not is_anonymous_user else AnonymousUser(),",
          "592:     )",
          "594:     assert order.gift_cards.count() == 1",
          "",
          "[Removed Lines]",
          "584:         order_data=prepare_order_data(",
          "585:             checkout=checkout,",
          "586:             lines=lines,",
          "587:             tracking_code=\"tracking_code\",",
          "588:             discounts=None,",
          "589:         ),",
          "591:         redirect_url=\"https://www.example.com\",",
          "",
          "[Added Lines]",
          "572:         order_data=prepare_order_data(checkout=checkout, lines=lines, discounts=None,),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "604:     checkout.billing_address = customer_user.default_billing_address",
          "605:     checkout.shipping_address = customer_user.default_billing_address",
          "606:     checkout.shipping_method = shipping_method",
          "607:     checkout.save()",
          "609:     price_without_gift_card = calculations.checkout_total(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589:     checkout.tracking_code = \"tracking_code\"",
          "590:     checkout.redirect_url = \"https://www.example.com\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "617:     order = create_order(",
          "618:         checkout=checkout,",
          "619:         order_data=prepare_order_data(",
          "624:         ),",
          "625:         user=customer_user,",
          "627:     )",
          "629:     gift_card_used.refresh_from_db()",
          "",
          "[Removed Lines]",
          "620:             checkout=checkout,",
          "621:             lines=list(checkout),",
          "622:             tracking_code=\"tracking_code\",",
          "623:             discounts=None,",
          "626:         redirect_url=\"https://www.example.com\",",
          "",
          "[Added Lines]",
          "604:             checkout=checkout, lines=list(checkout), discounts=None,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "649:     checkout.billing_address = customer_user.default_billing_address",
          "650:     checkout.shipping_address = customer_user.default_billing_address",
          "651:     checkout.shipping_method = shipping_method",
          "652:     checkout.save()",
          "654:     price_without_gift_card = calculations.checkout_total(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632:     checkout.tracking_code = \"tracking_code\"",
          "633:     checkout.redirect_url = \"https://www.example.com\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "666:     order = create_order(",
          "667:         checkout=checkout,",
          "668:         order_data=prepare_order_data(",
          "673:         ),",
          "674:         user=customer_user,",
          "676:     )",
          "678:     gift_card_created_by_staff.refresh_from_db()",
          "",
          "[Removed Lines]",
          "669:             checkout=checkout,",
          "670:             lines=list(checkout),",
          "671:             tracking_code=\"tracking_code\",",
          "672:             discounts=None,",
          "675:         redirect_url=\"https://www.example.com\",",
          "",
          "[Added Lines]",
          "651:             checkout=checkout, lines=list(checkout), discounts=None,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "689: def test_note_in_created_order(checkout_with_item, address, customer_user):",
          "690:     checkout_with_item.shipping_address = address",
          "691:     checkout_with_item.note = \"test_note\"",
          "692:     checkout_with_item.save()",
          "693:     order = create_order(",
          "694:         checkout=checkout_with_item,",
          "695:         order_data=prepare_order_data(",
          "700:         ),",
          "701:         user=customer_user,",
          "703:     )",
          "704:     assert order.customer_note == checkout_with_item.note",
          "",
          "[Removed Lines]",
          "696:             checkout=checkout_with_item,",
          "697:             lines=list(checkout_with_item),",
          "698:             tracking_code=\"tracking_code\",",
          "699:             discounts=None,",
          "702:         redirect_url=\"https://www.example.com\",",
          "",
          "[Added Lines]",
          "670:     checkout_with_item.tracking_code = \"tracking_code\"",
          "671:     checkout_with_item.redirect_url = \"https://www.example.com\"",
          "676:             checkout=checkout_with_item, lines=list(checkout_with_item), discounts=None,",
          "",
          "---------------"
        ],
        "saleor/checkout/utils.py||saleor/checkout/utils.py": [
          "File: saleor/checkout/utils.py -> saleor/checkout/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from datetime import date",
          "3: from decimal import Decimal",
          "4: from typing import Iterable, List, Optional, Tuple",
          "6: from django.core.exceptions import ValidationError",
          "7: from django.db import transaction",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: from uuid import UUID",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660:     order_data.update(",
          "661:         {",
          "662:             \"language_code\": get_language(),",
          "664:             \"total\": taxed_total,",
          "665:         }",
          "666:     )",
          "",
          "[Removed Lines]",
          "663:             \"tracking_client_id\": tracking_code,",
          "",
          "[Added Lines]",
          "664:             \"tracking_client_id\": checkout.tracking_code or \"\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "695:             remove_voucher_usage_by_customer(voucher, order_data[\"user_email\"])",
          "698: @transaction.atomic",
          "699: def create_order(",
          "701: ) -> Order:",
          "702:     \"\"\"Create an order from the checkout.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699: def get_order(checkout_token: UUID) -> Optional[Order]:",
          "700:     \"\"\"Get order based on checkout token.\"\"\"",
          "701:     order = Order.objects.confirmed().filter(checkout_token=checkout_token).first()",
          "702:     if order is not None:",
          "703:         return order",
          "704:     return None",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "745:     # Send the order confirmation email",
          "746:     transaction.on_commit(",
          "748:     )",
          "749:     transaction.on_commit(",
          "751:     )",
          "753:     return order",
          "",
          "[Removed Lines]",
          "747:         lambda: send_order_confirmation.delay(order.pk, redirect_url, user.pk)",
          "750:         lambda: send_staff_order_confirmation.delay(order.pk, redirect_url)",
          "",
          "[Added Lines]",
          "756:         lambda: send_order_confirmation.delay(order.pk, checkout.redirect_url, user.pk)",
          "759:         lambda: send_staff_order_confirmation.delay(order.pk, checkout.redirect_url)",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py": [
          "File: saleor/graphql/checkout/mutations.py -> saleor/graphql/checkout/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import graphene",
          "4: from django.conf import settings",
          "5: from django.core.exceptions import ObjectDoesNotExist, ValidationError",
          "6: from django.db import transaction",
          "7: from django.db.models import Prefetch",
          "9: from ...account.error_codes import AccountErrorCode",
          "10: from ...checkout import models",
          "11: from ...checkout.calculations import calculate_checkout_total_with_gift_cards",
          "12: from ...checkout.error_codes import CheckoutErrorCode",
          "",
          "[Removed Lines]",
          "1: from typing import List, Optional, Tuple",
          "",
          "[Added Lines]",
          "1: from typing import List, Optional, Tuple, Union",
          "5: from django.contrib.auth.models import AnonymousUser",
          "11: from ...account.models import User",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     change_billing_address_in_checkout,",
          "18:     change_shipping_address_in_checkout,",
          "19:     create_order,",
          "20:     get_user_checkout,",
          "21:     get_valid_shipping_methods_for_checkout,",
          "22:     prepare_order_data,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     get_order,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28: from ...core.permissions import OrderPermissions",
          "29: from ...core.taxes import TaxError",
          "30: from ...core.utils.url import validate_storefront_url",
          "32: from ...graphql.checkout.utils import clean_checkout_payment, clean_checkout_shipping",
          "33: from ...payment import PaymentError, gateway, models as payment_models",
          "35: from ...payment.utils import store_customer_id",
          "36: from ...product import models as product_models",
          "37: from ...warehouse.availability import check_stock_quantity, get_available_quantity",
          "",
          "[Removed Lines]",
          "31: from ...discount import models as voucher_model",
          "34: from ...payment.interface import AddressData",
          "",
          "[Added Lines]",
          "34: from ...discount import DiscountInfo, models as voucher_model",
          "36: from ...order import models as order_models",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "789:             )",
          "791:     @classmethod",
          "809:         lines = list(checkout)",
          "814:         clean_checkout_shipping(checkout, lines, discounts, CheckoutErrorCode)",
          "815:         clean_checkout_payment(checkout, lines, discounts, CheckoutErrorCode)",
          "",
          "[Removed Lines]",
          "792:     def perform_mutation(cls, _root, info, checkout_id, store_source, **data):",
          "793:         checkout = cls.get_node_or_error(",
          "794:             info,",
          "795:             checkout_id,",
          "796:             only_type=Checkout,",
          "797:             field=\"checkout_id\",",
          "798:             qs=models.Checkout.objects.prefetch_related(",
          "799:                 \"gift_cards\",",
          "800:                 \"lines\",",
          "801:                 Prefetch(",
          "802:                     \"payments\",",
          "803:                     queryset=payment_models.Payment.objects.prefetch_related(",
          "804:                         \"order\", \"order__lines\"",
          "805:                     ),",
          "806:                 ),",
          "807:             ).select_related(\"shipping_method\", \"shipping_method__shipping_zone\"),",
          "808:         )",
          "811:         discounts = info.context.discounts",
          "812:         user = info.context.user",
          "",
          "[Added Lines]",
          "795:     @transaction.atomic",
          "796:     def _prepare_checkout(cls, checkout: models.Checkout, context, redirect_url):",
          "799:         discounts = context.discounts",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "819:         cls.validate_payment_amount(discounts, payment, checkout)",
          "822:         if redirect_url:",
          "823:             try:",
          "824:                 validate_storefront_url(redirect_url)",
          "825:             except ValidationError as error:",
          "826:                 raise ValidationError(",
          "828:                 )",
          "862:         payment_confirmation = payment.to_confirm",
          "863:         try:",
          "864:             if payment_confirmation:",
          "866:             else:",
          "867:                 txn = gateway.process_payment(",
          "868:                     payment=payment,",
          "869:                     token=payment.token,",
          "870:                     store_source=store_source,",
          "872:                 )",
          "873:             if not txn.is_success:",
          "874:                 raise PaymentError(txn.error)",
          "876:         except PaymentError as e:",
          "877:             abort_order_data(order_data)",
          "885:         if not txn.action_required:",
          "896:         # If gateway returns information that additional steps are required we need",
          "897:         # to inform the frontend and pass all required data",
          "",
          "[Removed Lines]",
          "821:         redirect_url = data.get(\"redirect_url\", \"\")",
          "827:                     {\"redirect_url\": error}, code=AccountErrorCode.INVALID",
          "830:         with transaction.atomic():",
          "831:             try:",
          "832:                 order_data = prepare_order_data(",
          "833:                     checkout=checkout,",
          "834:                     lines=lines,",
          "835:                     tracking_code=analytics.get_client_id(info.context),",
          "836:                     discounts=discounts,",
          "837:                 )",
          "838:             except InsufficientStock as e:",
          "839:                 gateway.payment_refund_or_void(payment)",
          "840:                 raise ValidationError(",
          "841:                     f\"Insufficient product stock: {e.item}\", code=e.code",
          "842:                 )",
          "843:             except voucher_model.NotApplicable:",
          "844:                 raise ValidationError(",
          "845:                     \"Voucher not applicable\",",
          "846:                     code=CheckoutErrorCode.VOUCHER_NOT_APPLICABLE,",
          "847:                 )",
          "848:             except TaxError as tax_error:",
          "849:                 raise ValidationError(",
          "850:                     \"Unable to calculate taxes - %s\" % str(tax_error),",
          "851:                     code=CheckoutErrorCode.TAX_ERROR,",
          "852:                 )",
          "854:         billing_address = order_data[\"billing_address\"]",
          "855:         shipping_address = order_data.get(\"shipping_address\", None)",
          "857:         billing_address = AddressData(**billing_address.as_data())",
          "859:         if shipping_address is not None:",
          "860:             shipping_address = AddressData(**shipping_address.as_data())",
          "865:                 txn = gateway.confirm(payment, additional_data=data.get(\"payment_data\"))",
          "871:                     additional_data=data.get(\"payment_data\"),",
          "878:             raise ValidationError(str(e), code=CheckoutErrorCode.PAYMENT_ERROR)",
          "880:         if txn.customer_id and user.is_authenticated:",
          "881:             store_customer_id(user, payment.gateway, txn.customer_id)",
          "883:         order = None",
          "886:             order = create_order(",
          "887:                 checkout=checkout,",
          "888:                 order_data=order_data,",
          "889:                 user=user,",
          "890:                 redirect_url=redirect_url,",
          "891:             )",
          "893:             # remove checkout after order is successfully paid",
          "894:             checkout.delete()",
          "",
          "[Added Lines]",
          "812:                     {\"redirect_url\": error}, code=AccountErrorCode.INVALID.value",
          "815:         to_update = []",
          "816:         if redirect_url and redirect_url != checkout.redirect_url:",
          "817:             checkout.redirect_url = redirect_url",
          "818:             to_update.append(\"redirect_url\")",
          "820:         tracking_code = analytics.get_client_id(context)",
          "821:         if tracking_code and tracking_code != checkout.tracking_code:",
          "822:             checkout.tracking_code = tracking_code",
          "823:             to_update.append(\"tracking_code\")",
          "825:         if to_update:",
          "826:             checkout.save()",
          "828:     @classmethod",
          "829:     @transaction.atomic",
          "830:     def _convert_checkout_to_order(",
          "831:         cls,",
          "832:         checkout: models.Checkout,",
          "833:         order_data: dict,",
          "834:         user: Union[User, AnonymousUser],",
          "835:     ) -> order_models.Order:",
          "836:         order = create_order(",
          "837:             checkout=checkout, order_data=order_data, user=user  # type: ignore",
          "838:         )",
          "839:         # remove checkout after order is successfully created",
          "840:         checkout.delete()",
          "841:         return order",
          "843:     @classmethod",
          "844:     def _get_order_data(",
          "845:         cls, checkout: models.Checkout, discounts: List[DiscountInfo]",
          "846:     ) -> dict:",
          "847:         try:",
          "848:             with transaction.atomic():",
          "849:                 order_data = prepare_order_data(",
          "850:                     checkout=checkout, lines=list(checkout), discounts=discounts,",
          "851:                 )",
          "852:         except InsufficientStock as e:",
          "853:             raise ValidationError(f\"Insufficient product stock: {e.item}\", code=e.code)",
          "854:         except voucher_model.NotApplicable:",
          "855:             raise ValidationError(",
          "856:                 \"Voucher not applicable\",",
          "857:                 code=CheckoutErrorCode.VOUCHER_NOT_APPLICABLE.value,",
          "858:             )",
          "859:         except TaxError as tax_error:",
          "860:             raise ValidationError(",
          "861:                 \"Unable to calculate taxes - %s\" % str(tax_error),",
          "862:                 code=CheckoutErrorCode.TAX_ERROR.value,",
          "863:             )",
          "864:         return order_data",
          "866:     @classmethod",
          "867:     def _process_payment(",
          "868:         cls,",
          "869:         payment: payment_models.Payment,",
          "870:         store_source: bool,",
          "871:         payment_data: Optional[dict],",
          "872:         order_data: dict,",
          "873:     ) -> payment_models.Transaction:",
          "877:                 txn = gateway.confirm(payment, additional_data=payment_data)",
          "883:                     additional_data=payment_data,",
          "889:             raise ValidationError(str(e), code=CheckoutErrorCode.PAYMENT_ERROR.value)",
          "890:         return txn",
          "892:     @classmethod",
          "893:     def complete_checkout(cls, checkout: models.Checkout, context, data, store_source):",
          "894:         order = get_order(checkout.token)",
          "895:         if order:",
          "896:             return CheckoutComplete(",
          "897:                 order=order, confirmation_needed=False, confirmation_data={},",
          "898:             )",
          "899:         cls._prepare_checkout(",
          "900:             checkout=checkout,",
          "901:             context=context,",
          "902:             redirect_url=data.get(\"redirect_url\", \"\"),",
          "903:         )",
          "905:         payment = checkout.get_last_active_payment()  # type: ignore",
          "907:         try:",
          "908:             order_data = cls._get_order_data(checkout, context.discounts)",
          "909:         except ValidationError as error:",
          "910:             gateway.payment_refund_or_void(payment)",
          "911:             raise error",
          "913:         txn = cls._process_payment(",
          "914:             payment=payment,  # type: ignore",
          "915:             store_source=store_source,",
          "916:             payment_data=data.get(\"payment_data\"),",
          "917:             order_data=order_data,",
          "918:         )",
          "920:         user = context.user",
          "921:         if txn.customer_id and user.is_authenticated:",
          "922:             store_customer_id(user, payment.gateway, txn.customer_id)  # type: ignore",
          "925:             try:",
          "926:                 with transaction.atomic():",
          "927:                     order = get_order(checkout.token)",
          "928:                     if order:",
          "929:                         # Order was created asynchronously, we can release the lock made",
          "930:                         # on order_data",
          "931:                         abort_order_data(order_data)",
          "932:                     else:",
          "933:                         order = cls._convert_checkout_to_order(",
          "934:                             checkout=checkout, order_data=order_data, user=user",
          "935:                         )",
          "936:             except InsufficientStock as e:",
          "937:                 abort_order_data(order_data)",
          "938:                 gateway.payment_refund_or_void(payment)",
          "939:                 raise ValidationError(",
          "940:                     f\"Insufficient product stock: {e.item}\", code=e.code",
          "941:                 )",
          "943:         if not order:",
          "944:             abort_order_data(order_data)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "901:             confirmation_data=txn.action_required_data if txn.action_required else {},",
          "902:         )",
          "905: class CheckoutAddPromoCode(BaseMutation):",
          "906:     checkout = graphene.Field(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "954:     @classmethod",
          "955:     def perform_mutation(cls, _root, info, checkout_id, store_source, **data):",
          "956:         checkout_token = from_global_id_strict_type(",
          "957:             checkout_id, Checkout, field=\"checkout_id\"",
          "958:         )",
          "959:         order = get_order(checkout_token)",
          "960:         if order:",
          "961:             # The order is already created. We return it as a success checkoutComplete",
          "962:             # response. Order is anonymized for not logged in user",
          "963:             return CheckoutComplete(",
          "964:                 order=order, confirmation_needed=False, confirmation_data={}",
          "965:             )",
          "967:         with transaction.atomic():",
          "968:             checkout = cls.get_node_or_error(",
          "969:                 info,",
          "970:                 checkout_id,",
          "971:                 only_type=Checkout,",
          "972:                 field=\"checkout_id\",",
          "973:                 qs=models.Checkout.objects.select_for_update(of=(\"self\",))",
          "974:                 .prefetch_related(",
          "975:                     \"gift_cards\",",
          "976:                     \"lines\",",
          "977:                     Prefetch(",
          "978:                         \"payments\",",
          "979:                         queryset=payment_models.Payment.objects.prefetch_related(",
          "980:                             \"order\", \"order__lines\"",
          "981:                         ),",
          "982:                     ),",
          "983:                 )",
          "984:                 .select_related(\"shipping_method\", \"shipping_method__shipping_zone\"),",
          "985:             )",
          "986:         return cls.complete_checkout(checkout, info.context, data, store_source)",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/test_checkout.py||saleor/graphql/checkout/tests/test_checkout.py": [
          "File: saleor/graphql/checkout/tests/test_checkout.py -> saleor/graphql/checkout/tests/test_checkout.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: from ....checkout.models import Checkout",
          "16: from ....checkout.utils import add_variant_to_checkout",
          "17: from ....core.payments import PaymentInterface",
          "22: from ....payment.interface import GatewayResponse",
          "23: from ....plugins.manager import PluginsManager",
          "24: from ....plugins.tests.sample_plugins import ActiveDummyPaymentGateway",
          "25: from ....warehouse.models import Stock",
          "27: from ...tests.utils import assert_no_permission, get_graphql_content",
          "28: from ..mutations import (",
          "29:     clean_shipping_method,",
          "",
          "[Removed Lines]",
          "18: from ....core.taxes import zero_money",
          "19: from ....order.models import Order",
          "20: from ....payment import ChargeStatus, TransactionKind",
          "21: from ....payment.gateways.dummy_credit_card import TOKEN_VALIDATION_MAPPING",
          "26: from ....warehouse.tests.utils import get_available_quantity_for_stock",
          "",
          "[Added Lines]",
          "18: from ....payment import TransactionKind",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1665:     assert checkout_errors[0][\"code\"] == CheckoutErrorCode.REQUIRED.name",
          "1964: @pytest.fixture",
          "1965: def fake_manager(mocker):",
          "1966:     return mocker.Mock(spec=PaymentInterface)",
          "",
          "[Removed Lines]",
          "1668: MUTATION_CHECKOUT_COMPLETE = \"\"\"",
          "1669:     mutation checkoutComplete($checkoutId: ID!, $redirectUrl: String) {",
          "1670:         checkoutComplete(checkoutId: $checkoutId, redirectUrl: $redirectUrl) {",
          "1671:             order {",
          "1672:                 id,",
          "1673:                 token",
          "1674:             },",
          "1675:             checkoutErrors {",
          "1676:                 field,",
          "1677:                 message,",
          "1678:                 code",
          "1679:             }",
          "1680:             confirmationNeeded",
          "1681:             confirmationData",
          "1682:         }",
          "1683:     }",
          "1684:     \"\"\"",
          "1687: @pytest.mark.integration",
          "1688: def test_checkout_complete(",
          "1689:     user_api_client,",
          "1690:     checkout_with_gift_card,",
          "1691:     gift_card,",
          "1692:     payment_dummy,",
          "1693:     address,",
          "1694:     shipping_method,",
          "1695: ):",
          "1697:     assert not gift_card.last_used_on",
          "1699:     checkout = checkout_with_gift_card",
          "1700:     checkout.shipping_address = address",
          "1701:     checkout.shipping_method = shipping_method",
          "1702:     checkout.billing_address = address",
          "1703:     checkout.store_value_in_metadata(items={\"accepted\": \"true\"})",
          "1704:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "1705:     checkout.save()",
          "1707:     checkout_line = checkout.lines.first()",
          "1708:     checkout_line_quantity = checkout_line.quantity",
          "1709:     checkout_line_variant = checkout_line.variant",
          "1711:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "1712:     payment = payment_dummy",
          "1713:     payment.is_active = True",
          "1714:     payment.order = None",
          "1715:     payment.total = total.gross.amount",
          "1716:     payment.currency = total.gross.currency",
          "1717:     payment.checkout = checkout",
          "1718:     payment.save()",
          "1719:     assert not payment.transactions.exists()",
          "1721:     orders_count = Order.objects.count()",
          "1722:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1723:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "1724:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "1726:     content = get_graphql_content(response)",
          "1727:     data = content[\"data\"][\"checkoutComplete\"]",
          "1728:     assert not data[\"checkoutErrors\"]",
          "1730:     order_token = data[\"order\"][\"token\"]",
          "1731:     assert Order.objects.count() == orders_count + 1",
          "1732:     order = Order.objects.first()",
          "1733:     assert order.token == order_token",
          "1734:     assert order.total.gross == total.gross",
          "1735:     assert order.metadata == checkout.metadata",
          "1736:     assert order.private_metadata == checkout.private_metadata",
          "1738:     order_line = order.lines.first()",
          "1739:     assert checkout_line_quantity == order_line.quantity",
          "1740:     assert checkout_line_variant == order_line.variant",
          "1741:     assert order.shipping_address == address",
          "1742:     assert order.shipping_method == checkout.shipping_method",
          "1743:     assert order.payments.exists()",
          "1744:     order_payment = order.payments.first()",
          "1745:     assert order_payment == payment",
          "1746:     assert payment.transactions.count() == 1",
          "1748:     gift_card.refresh_from_db()",
          "1749:     assert gift_card.current_balance == zero_money()",
          "1750:     assert gift_card.last_used_on",
          "1752:     assert not Checkout.objects.filter(",
          "1753:         pk=checkout.pk",
          "1754:     ).exists(), \"Checkout should have been deleted\"",
          "1757: @pytest.mark.integration",
          "1758: def test_checkout_with_voucher_complete(",
          "1759:     user_api_client,",
          "1760:     checkout_with_voucher_percentage,",
          "1761:     voucher_percentage,",
          "1762:     payment_dummy,",
          "1763:     address,",
          "1764:     shipping_method,",
          "1765: ):",
          "1766:     voucher_used_count = voucher_percentage.used",
          "1768:     checkout = checkout_with_voucher_percentage",
          "1769:     checkout.shipping_address = address",
          "1770:     checkout.shipping_method = shipping_method",
          "1771:     checkout.billing_address = address",
          "1772:     checkout.store_value_in_metadata(items={\"accepted\": \"true\"})",
          "1773:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "1774:     checkout.save()",
          "1776:     checkout_line = checkout.lines.first()",
          "1777:     checkout_line_quantity = checkout_line.quantity",
          "1778:     checkout_line_variant = checkout_line.variant",
          "1780:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "1781:     payment = payment_dummy",
          "1782:     payment.is_active = True",
          "1783:     payment.order = None",
          "1784:     payment.total = total.gross.amount",
          "1785:     payment.currency = total.gross.currency",
          "1786:     payment.checkout = checkout",
          "1787:     payment.save()",
          "1788:     assert not payment.transactions.exists()",
          "1790:     orders_count = Order.objects.count()",
          "1791:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1792:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "1793:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "1795:     content = get_graphql_content(response)",
          "1796:     data = content[\"data\"][\"checkoutComplete\"]",
          "1797:     assert not data[\"checkoutErrors\"]",
          "1799:     order_token = data[\"order\"][\"token\"]",
          "1800:     assert Order.objects.count() == orders_count + 1",
          "1801:     order = Order.objects.first()",
          "1802:     assert order.token == order_token",
          "1803:     assert order.metadata == checkout.metadata",
          "1804:     assert order.private_metadata == checkout.private_metadata",
          "1806:     order_line = order.lines.first()",
          "1807:     assert checkout_line_quantity == order_line.quantity",
          "1808:     assert checkout_line_variant == order_line.variant",
          "1809:     assert order.shipping_address == address",
          "1810:     assert order.shipping_method == checkout.shipping_method",
          "1811:     assert order.payments.exists()",
          "1812:     order_payment = order.payments.first()",
          "1813:     assert order_payment == payment",
          "1814:     assert payment.transactions.count() == 1",
          "1816:     voucher_percentage.refresh_from_db()",
          "1817:     assert voucher_percentage.used == voucher_used_count + 1",
          "1819:     assert not Checkout.objects.filter(",
          "1820:         pk=checkout.pk",
          "1821:     ).exists(), \"Checkout should have been deleted\"",
          "1824: @pytest.mark.integration",
          "1825: def test_checkout_complete_without_inventory_tracking(",
          "1826:     user_api_client,",
          "1827:     checkout_with_variant_without_inventory_tracking,",
          "1828:     payment_dummy,",
          "1829:     address,",
          "1830:     shipping_method,",
          "1831: ):",
          "1832:     checkout = checkout_with_variant_without_inventory_tracking",
          "1833:     checkout.shipping_address = address",
          "1834:     checkout.shipping_method = shipping_method",
          "1835:     checkout.billing_address = address",
          "1836:     checkout.store_value_in_metadata(items={\"accepted\": \"true\"})",
          "1837:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "1838:     checkout.save()",
          "1840:     checkout_line = checkout.lines.first()",
          "1841:     checkout_line_quantity = checkout_line.quantity",
          "1842:     checkout_line_variant = checkout_line.variant",
          "1844:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "1845:     payment = payment_dummy",
          "1846:     payment.is_active = True",
          "1847:     payment.order = None",
          "1848:     payment.total = total.gross.amount",
          "1849:     payment.currency = total.gross.currency",
          "1850:     payment.checkout = checkout",
          "1851:     payment.save()",
          "1852:     assert not payment.transactions.exists()",
          "1854:     orders_count = Order.objects.count()",
          "1855:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1856:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "1857:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "1859:     content = get_graphql_content(response)",
          "1860:     data = content[\"data\"][\"checkoutComplete\"]",
          "1861:     assert not data[\"checkoutErrors\"]",
          "1863:     order_token = data[\"order\"][\"token\"]",
          "1864:     assert Order.objects.count() == orders_count + 1",
          "1865:     order = Order.objects.first()",
          "1866:     assert order.token == order_token",
          "1867:     assert order.total.gross == total.gross",
          "1868:     assert order.metadata == checkout.metadata",
          "1869:     assert order.private_metadata == checkout.private_metadata",
          "1871:     order_line = order.lines.first()",
          "1872:     assert checkout_line_quantity == order_line.quantity",
          "1873:     assert checkout_line_variant == order_line.variant",
          "1874:     assert not order_line.allocations.all()",
          "1875:     assert order.shipping_address == address",
          "1876:     assert order.shipping_method == checkout.shipping_method",
          "1877:     assert order.payments.exists()",
          "1878:     order_payment = order.payments.first()",
          "1879:     assert order_payment == payment",
          "1880:     assert payment.transactions.count() == 1",
          "1882:     assert not Checkout.objects.filter(",
          "1883:         pk=checkout.pk",
          "1884:     ).exists(), \"Checkout should have been deleted\"",
          "1887: @pytest.mark.integration",
          "1888: @pytest.mark.parametrize(\"token, error\", list(TOKEN_VALIDATION_MAPPING.items()))",
          "1889: @patch(",
          "1890:     \"saleor.payment.gateways.dummy_credit_card.plugin.\"",
          "1891:     \"DummyCreditCardGatewayPlugin.DEFAULT_ACTIVE\",",
          "1892:     True,",
          "1893: )",
          "1894: def test_checkout_complete_error_in_gateway_response_for_dummy_credit_card(",
          "1895:     token,",
          "1896:     error,",
          "1897:     user_api_client,",
          "1898:     checkout_with_gift_card,",
          "1899:     gift_card,",
          "1900:     payment_dummy_credit_card,",
          "1901:     address,",
          "1902:     shipping_method,",
          "1903: ):",
          "1904:     assert not gift_card.last_used_on",
          "1906:     checkout = checkout_with_gift_card",
          "1907:     checkout.shipping_address = address",
          "1908:     checkout.shipping_method = shipping_method",
          "1909:     checkout.billing_address = address",
          "1910:     checkout.store_value_in_metadata(items={\"accepted\": \"true\"})",
          "1911:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "1912:     checkout.save()",
          "1914:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "1915:     payment = payment_dummy_credit_card",
          "1916:     payment.is_active = True",
          "1917:     payment.order = None",
          "1918:     payment.total = total.gross.amount",
          "1919:     payment.currency = total.gross.currency",
          "1920:     payment.checkout = checkout",
          "1921:     payment.token = token",
          "1922:     payment.save()",
          "1923:     assert not payment.transactions.exists()",
          "1925:     orders_count = Order.objects.count()",
          "1926:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "1927:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "1928:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "1930:     content = get_graphql_content(response)",
          "1931:     data = content[\"data\"][\"checkoutComplete\"]",
          "1932:     assert len(data[\"checkoutErrors\"])",
          "1933:     assert data[\"checkoutErrors\"][0][\"message\"] == error",
          "1934:     assert payment.transactions.count() == 1",
          "1935:     assert Order.objects.count() == orders_count",
          "1938: ERROR_GATEWAY_RESPONSE = GatewayResponse(",
          "1939:     is_success=False,",
          "1940:     action_required=False,",
          "1941:     kind=TransactionKind.CAPTURE,",
          "1942:     amount=Decimal(0),",
          "1943:     currency=\"usd\",",
          "1944:     transaction_id=\"1234\",",
          "1945:     error=\"ERROR\",",
          "1946: )",
          "1949: def _process_payment_transaction_returns_error(*args, **kwards):",
          "1950:     return ERROR_GATEWAY_RESPONSE",
          "1953: def _process_payment_raise_error(*args, **kwargs):",
          "1954:     raise Exception(\"Oops! Something went wrong.\")",
          "1957: @pytest.fixture(",
          "1958:     params=[_process_payment_raise_error, _process_payment_transaction_returns_error]",
          "1959: )",
          "1960: def error_side_effect(request):",
          "1961:     return request.param",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1977:     manager.assert_called_once()",
          "2086: TRANSACTION_CONFIRM_GATEWAY_RESPONSE = GatewayResponse(",
          "2087:     is_success=False,",
          "2088:     action_required=False,",
          "",
          "[Removed Lines]",
          "1980: def test_checkout_complete_does_not_delete_checkout_after_unsuccessful_payment(",
          "1981:     mock_get_manager,",
          "1982:     error_side_effect,",
          "1983:     user_api_client,",
          "1984:     checkout_with_voucher,",
          "1985:     voucher,",
          "1986:     payment_dummy,",
          "1987:     address,",
          "1988:     shipping_method,",
          "1989: ):",
          "1990:     mock_get_manager.process_payment.side_effect = error_side_effect",
          "1991:     expected_voucher_usage_count = voucher.used",
          "1992:     checkout = checkout_with_voucher",
          "1993:     checkout.shipping_address = address",
          "1994:     checkout.shipping_method = shipping_method",
          "1995:     checkout.billing_address = address",
          "1996:     checkout.save()",
          "1998:     taxed_total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "1999:     payment = payment_dummy",
          "2000:     payment.is_active = True",
          "2001:     payment.order = None",
          "2002:     payment.total = taxed_total.gross.amount",
          "2003:     payment.currency = taxed_total.gross.currency",
          "2004:     payment.checkout = checkout",
          "2005:     payment.save()",
          "2006:     assert not payment.transactions.exists()",
          "2008:     orders_count = Order.objects.count()",
          "2009:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2010:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "2011:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "2012:     get_graphql_content(response)",
          "2014:     assert Order.objects.count() == orders_count",
          "2016:     payment.refresh_from_db(fields=[\"order\"])",
          "2017:     transaction = payment.transactions.get()",
          "2018:     assert transaction.error",
          "2019:     assert payment.order is None",
          "2021:     # ensure the voucher usage count was not incremented",
          "2022:     voucher.refresh_from_db(fields=[\"used\"])",
          "2023:     assert voucher.used == expected_voucher_usage_count",
          "2025:     assert Checkout.objects.filter(",
          "2026:         pk=checkout.pk",
          "2027:     ).exists(), \"Checkout should not have been deleted\"",
          "2030: def test_checkout_complete_invalid_checkout_id(user_api_client):",
          "2031:     checkout_id = \"invalidId\"",
          "2032:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "2033:     orders_count = Order.objects.count()",
          "2034:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "2035:     content = get_graphql_content(response)",
          "2036:     data = content[\"data\"][\"checkoutComplete\"]",
          "2037:     assert (",
          "2038:         data[\"checkoutErrors\"][0][\"message\"] == \"Couldn't resolve to a node: invalidId\"",
          "2039:     )",
          "2040:     assert data[\"checkoutErrors\"][0][\"field\"] == \"checkoutId\"",
          "2041:     assert orders_count == Order.objects.count()",
          "2044: def test_checkout_complete_no_payment(",
          "2045:     user_api_client, checkout_with_item, address, shipping_method",
          "2046: ):",
          "2047:     checkout = checkout_with_item",
          "2048:     checkout.shipping_address = address",
          "2049:     checkout.shipping_method = shipping_method",
          "2050:     checkout.billing_address = address",
          "2051:     checkout.save()",
          "2052:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2053:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "2054:     orders_count = Order.objects.count()",
          "2055:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "2056:     content = get_graphql_content(response)",
          "2057:     data = content[\"data\"][\"checkoutComplete\"]",
          "2058:     assert data[\"checkoutErrors\"][0][\"message\"] == (",
          "2059:         \"Provided payment methods can not cover the checkout's total amount\"",
          "2060:     )",
          "2061:     assert orders_count == Order.objects.count()",
          "2064: ACTION_REQUIRED_GATEWAY_RESPONSE = GatewayResponse(",
          "2065:     is_success=True,",
          "2066:     action_required=True,",
          "2067:     action_required_data={",
          "2068:         \"paymentData\": \"test\",",
          "2069:         \"paymentMethodType\": \"scheme\",",
          "2070:         \"url\": \"https://test.adyen.com/hpp/3d/validate.shtml\",",
          "2071:         \"data\": {",
          "2072:             \"MD\": \"md-test-data\",",
          "2073:             \"PaReq\": \"PaReq-test-data\",",
          "2074:             \"TermUrl\": \"http://127.0.0.1:3000/\",",
          "2075:         },",
          "2076:         \"method\": \"POST\",",
          "2077:         \"type\": \"redirect\",",
          "2078:     },",
          "2079:     kind=TransactionKind.CAPTURE,",
          "2080:     amount=Decimal(3.0),",
          "2081:     currency=\"usd\",",
          "2082:     transaction_id=\"1234\",",
          "2083:     error=None,",
          "2084: )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2094: )",
          "2427: def test_fetch_checkout_by_token(user_api_client, checkout_with_item):",
          "2428:     query = \"\"\"",
          "2429:     query getCheckout($token: UUID!) {",
          "",
          "[Removed Lines]",
          "2097: def test_checkout_complete_confirmation_needed(",
          "2098:     mock_get_manager,",
          "2099:     user_api_client,",
          "2100:     checkout_with_item,",
          "2101:     address,",
          "2102:     payment_dummy,",
          "2103:     shipping_method,",
          "2104: ):",
          "2105:     mock_get_manager.process_payment.return_value = ACTION_REQUIRED_GATEWAY_RESPONSE",
          "2106:     checkout = checkout_with_item",
          "2107:     checkout.shipping_address = address",
          "2108:     checkout.shipping_method = shipping_method",
          "2109:     checkout.billing_address = address",
          "2110:     checkout.save()",
          "2112:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "2113:     payment = payment_dummy",
          "2114:     payment.is_active = True",
          "2115:     payment.order = None",
          "2116:     payment.total = total.gross.amount",
          "2117:     payment.currency = total.gross.currency",
          "2118:     payment.checkout = checkout",
          "2119:     payment.save()",
          "2121:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2122:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "2123:     orders_count = Order.objects.count()",
          "2125:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "2126:     content = get_graphql_content(response)",
          "2127:     data = content[\"data\"][\"checkoutComplete\"]",
          "2128:     assert not data[\"checkoutErrors\"]",
          "2129:     assert data[\"confirmationNeeded\"] is True",
          "2130:     assert data[\"confirmationData\"]",
          "2132:     new_orders_count = Order.objects.count()",
          "2133:     assert new_orders_count == orders_count",
          "2134:     checkout.refresh_from_db()",
          "2135:     payment_dummy.refresh_from_db()",
          "2136:     assert payment_dummy.is_active",
          "2137:     assert payment_dummy.to_confirm",
          "2140: def test_checkout_confirm(",
          "2141:     user_api_client,",
          "2142:     mock_get_manager,",
          "2143:     checkout_with_item,",
          "2144:     payment_txn_to_confirm,",
          "2145:     address,",
          "2146:     shipping_method,",
          "2147: ):",
          "2148:     mock_get_manager.confirm_payment.return_value = ACTION_REQUIRED_GATEWAY_RESPONSE",
          "2150:     checkout = checkout_with_item",
          "2151:     checkout.shipping_address = address",
          "2152:     checkout.shipping_method = shipping_method",
          "2153:     checkout.billing_address = address",
          "2154:     checkout.save()",
          "2156:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "2157:     payment = payment_txn_to_confirm",
          "2158:     payment.is_active = True",
          "2159:     payment.order = None",
          "2160:     payment.total = total.gross.amount",
          "2161:     payment.currency = total.gross.currency",
          "2162:     payment.checkout = checkout",
          "2163:     payment.save()",
          "2165:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2166:     orders_count = Order.objects.count()",
          "2168:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "2169:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "2170:     content = get_graphql_content(response)",
          "2171:     data = content[\"data\"][\"checkoutComplete\"]",
          "2173:     assert not data[\"checkoutErrors\"]",
          "2174:     assert not data[\"confirmationNeeded\"]",
          "2176:     mock_get_manager.confirm_payment.assert_called_once()",
          "2178:     new_orders_count = Order.objects.count()",
          "2179:     assert new_orders_count == orders_count + 1",
          "2182: def test_checkout_complete_insufficient_stock(",
          "2183:     user_api_client, checkout_with_item, address, payment_dummy, shipping_method",
          "2184: ):",
          "2185:     checkout = checkout_with_item",
          "2186:     checkout_line = checkout.lines.first()",
          "2187:     stock = Stock.objects.get(product_variant=checkout_line.variant)",
          "2188:     quantity_available = get_available_quantity_for_stock(stock)",
          "2189:     checkout_line.quantity = quantity_available + 1",
          "2190:     checkout_line.save()",
          "2191:     checkout.shipping_address = address",
          "2192:     checkout.shipping_method = shipping_method",
          "2193:     checkout.billing_address = address",
          "2194:     checkout.save()",
          "2195:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "2196:     payment = payment_dummy",
          "2197:     payment.is_active = True",
          "2198:     payment.order = None",
          "2199:     payment.total = total.gross.amount",
          "2200:     payment.currency = total.gross.currency",
          "2201:     payment.checkout = checkout",
          "2202:     payment.save()",
          "2203:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2204:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "2205:     orders_count = Order.objects.count()",
          "2206:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "2207:     content = get_graphql_content(response)",
          "2208:     data = content[\"data\"][\"checkoutComplete\"]",
          "2209:     assert data[\"checkoutErrors\"][0][\"message\"] == \"Insufficient product stock: 123\"",
          "2210:     assert orders_count == Order.objects.count()",
          "2213: @patch(\"saleor.graphql.checkout.mutations.gateway.refund\")",
          "2214: def test_checkout_complete_insufficient_stock_payment_refunded(",
          "2215:     gateway_refund_mock,",
          "2216:     checkout_with_item,",
          "2217:     address,",
          "2218:     shipping_method,",
          "2219:     payment_dummy,",
          "2220:     user_api_client,",
          "2221: ):",
          "2222:     # given",
          "2223:     checkout = checkout_with_item",
          "2224:     checkout_line = checkout.lines.first()",
          "2225:     stock = Stock.objects.get(product_variant=checkout_line.variant)",
          "2226:     quantity_available = get_available_quantity_for_stock(stock)",
          "2227:     checkout_line.quantity = quantity_available + 1",
          "2228:     checkout_line.save()",
          "2230:     checkout.shipping_address = address",
          "2231:     checkout.shipping_method = shipping_method",
          "2232:     checkout.billing_address = address",
          "2233:     checkout.save()",
          "2235:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "2237:     payment = payment_dummy",
          "2238:     payment.is_active = True",
          "2239:     payment.order = None",
          "2240:     payment.total = total.gross.amount",
          "2241:     payment.currency = total.gross.currency",
          "2242:     payment.checkout = checkout",
          "2243:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "2244:     payment.save()",
          "2246:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2247:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "2248:     orders_count = Order.objects.count()",
          "2250:     # when",
          "2251:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "2253:     # then",
          "2254:     content = get_graphql_content(response)",
          "2255:     data = content[\"data\"][\"checkoutComplete\"]",
          "2257:     assert data[\"checkoutErrors\"][0][\"message\"] == \"Insufficient product stock: 123\"",
          "2258:     assert orders_count == Order.objects.count()",
          "2260:     gateway_refund_mock.assert_called_once_with(payment)",
          "2263: @patch(\"saleor.graphql.checkout.mutations.gateway.void\")",
          "2264: def test_checkout_complete_insufficient_stock_payment_voided(",
          "2265:     gateway_void_mock,",
          "2266:     checkout_with_item,",
          "2267:     address,",
          "2268:     shipping_method,",
          "2269:     payment_txn_preauth,",
          "2270:     user_api_client,",
          "2271: ):",
          "2272:     # given",
          "2273:     checkout = checkout_with_item",
          "2274:     checkout_line = checkout.lines.first()",
          "2275:     stock = Stock.objects.get(product_variant=checkout_line.variant)",
          "2276:     quantity_available = get_available_quantity_for_stock(stock)",
          "2277:     checkout_line.quantity = quantity_available + 1",
          "2278:     checkout_line.save()",
          "2280:     checkout.shipping_address = address",
          "2281:     checkout.shipping_method = shipping_method",
          "2282:     checkout.billing_address = address",
          "2283:     checkout.save()",
          "2285:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "2287:     payment = payment_txn_preauth",
          "2288:     payment.is_active = True",
          "2289:     payment.order = None",
          "2290:     payment.total = total.gross.amount",
          "2291:     payment.currency = total.gross.currency",
          "2292:     payment.checkout = checkout",
          "2293:     payment.charge_status = ChargeStatus.NOT_CHARGED",
          "2294:     payment.save()",
          "2296:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2297:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "2298:     orders_count = Order.objects.count()",
          "2300:     # when",
          "2301:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "2303:     # then",
          "2304:     content = get_graphql_content(response)",
          "2305:     data = content[\"data\"][\"checkoutComplete\"]",
          "2307:     assert data[\"checkoutErrors\"][0][\"message\"] == \"Insufficient product stock: 123\"",
          "2308:     assert orders_count == Order.objects.count()",
          "2310:     gateway_void_mock.assert_called_once_with(payment)",
          "2313: def test_checkout_complete_without_redirect_url(",
          "2314:     user_api_client,",
          "2315:     checkout_with_gift_card,",
          "2316:     gift_card,",
          "2317:     payment_dummy,",
          "2318:     address,",
          "2319:     shipping_method,",
          "2320: ):",
          "2322:     assert not gift_card.last_used_on",
          "2324:     checkout = checkout_with_gift_card",
          "2325:     checkout.shipping_address = address",
          "2326:     checkout.shipping_method = shipping_method",
          "2327:     checkout.billing_address = address",
          "2328:     checkout.save()",
          "2330:     checkout_line = checkout.lines.first()",
          "2331:     checkout_line_quantity = checkout_line.quantity",
          "2332:     checkout_line_variant = checkout_line.variant",
          "2334:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "2335:     payment = payment_dummy",
          "2336:     payment.is_active = True",
          "2337:     payment.order = None",
          "2338:     payment.total = total.gross.amount",
          "2339:     payment.currency = total.gross.currency",
          "2340:     payment.checkout = checkout",
          "2341:     payment.save()",
          "2342:     assert not payment.transactions.exists()",
          "2344:     orders_count = Order.objects.count()",
          "2345:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2346:     variables = {\"checkoutId\": checkout_id}",
          "2347:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "2349:     content = get_graphql_content(response)",
          "2350:     data = content[\"data\"][\"checkoutComplete\"]",
          "2351:     assert not data[\"checkoutErrors\"]",
          "2353:     order_token = data[\"order\"][\"token\"]",
          "2354:     assert Order.objects.count() == orders_count + 1",
          "2355:     order = Order.objects.first()",
          "2356:     assert order.token == order_token",
          "2357:     assert order.total.gross == total.gross",
          "2359:     order_line = order.lines.first()",
          "2360:     assert checkout_line_quantity == order_line.quantity",
          "2361:     assert checkout_line_variant == order_line.variant",
          "2362:     assert order.shipping_address == address",
          "2363:     assert order.shipping_method == checkout.shipping_method",
          "2364:     assert order.payments.exists()",
          "2365:     order_payment = order.payments.first()",
          "2366:     assert order_payment == payment",
          "2367:     assert payment.transactions.count() == 1",
          "2369:     gift_card.refresh_from_db()",
          "2370:     assert gift_card.current_balance == zero_money()",
          "2371:     assert gift_card.last_used_on",
          "2373:     assert not Checkout.objects.filter(",
          "2374:         pk=checkout.pk",
          "2375:     ).exists(), \"Checkout should have been deleted\"",
          "2378: @patch(\"saleor.graphql.checkout.mutations.gateway.payment_refund_or_void\")",
          "2379: def test_checkout_complete_payment_payment_total_different_than_checkout(",
          "2380:     gateway_refund_or_void_mock,",
          "2381:     checkout_with_item,",
          "2382:     address,",
          "2383:     shipping_method,",
          "2384:     payment_dummy,",
          "2385:     user_api_client,",
          "2386: ):",
          "2387:     # given",
          "2388:     checkout = checkout_with_item",
          "2389:     checkout.shipping_address = address",
          "2390:     checkout.shipping_method = shipping_method",
          "2391:     checkout.billing_address = address",
          "2392:     checkout.store_value_in_metadata(items={\"accepted\": \"true\"})",
          "2393:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "2394:     checkout.save()",
          "2396:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "2397:     payment = payment_dummy",
          "2398:     payment.is_active = True",
          "2399:     payment.order = None",
          "2400:     payment.total = total.gross.amount + Decimal(10)",
          "2401:     payment.currency = total.gross.currency",
          "2402:     payment.checkout = checkout",
          "2403:     payment.save()",
          "2404:     assert not payment.transactions.exists()",
          "2406:     orders_count = Order.objects.count()",
          "2407:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "2408:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "2409:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "2411:     # when",
          "2412:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "2414:     # then",
          "2415:     content = get_graphql_content(response)",
          "2416:     data = content[\"data\"][\"checkoutComplete\"]",
          "2418:     assert (",
          "2419:         data[\"checkoutErrors\"][0][\"code\"]",
          "2420:         == CheckoutErrorCode.CHECKOUT_NOT_FULLY_PAID.name",
          "2421:     )",
          "2422:     assert orders_count == Order.objects.count()",
          "2424:     gateway_refund_or_void_mock.assert_called_with(payment)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/test_checkout_complete.py||saleor/graphql/checkout/tests/test_checkout_complete.py": [
          "File: saleor/graphql/checkout/tests/test_checkout_complete.py -> saleor/graphql/checkout/tests/test_checkout_complete.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from decimal import Decimal",
          "2: from unittest.mock import patch",
          "4: import graphene",
          "5: import pytest",
          "7: from ....checkout import calculations",
          "8: from ....checkout.error_codes import CheckoutErrorCode",
          "9: from ....checkout.models import Checkout",
          "10: from ....core.exceptions import InsufficientStock",
          "11: from ....core.taxes import zero_money",
          "12: from ....order.models import Order",
          "13: from ....payment import ChargeStatus, PaymentError, TransactionKind",
          "14: from ....payment.gateways.dummy_credit_card import TOKEN_VALIDATION_MAPPING",
          "15: from ....payment.interface import GatewayResponse",
          "16: from ....warehouse.models import Stock",
          "17: from ....warehouse.tests.utils import get_available_quantity_for_stock",
          "18: from ...tests.utils import get_graphql_content",
          "20: MUTATION_CHECKOUT_COMPLETE = \"\"\"",
          "21:     mutation checkoutComplete($checkoutId: ID!, $redirectUrl: String) {",
          "22:         checkoutComplete(checkoutId: $checkoutId, redirectUrl: $redirectUrl) {",
          "23:             order {",
          "24:                 id,",
          "25:                 token",
          "26:             },",
          "27:             checkoutErrors {",
          "28:                 field,",
          "29:                 message,",
          "30:                 code",
          "31:             }",
          "32:             confirmationNeeded",
          "33:             confirmationData",
          "34:         }",
          "35:     }",
          "36:     \"\"\"",
          "39: ACTION_REQUIRED_GATEWAY_RESPONSE = GatewayResponse(",
          "40:     is_success=True,",
          "41:     action_required=True,",
          "42:     action_required_data={",
          "43:         \"paymentData\": \"test\",",
          "44:         \"paymentMethodType\": \"scheme\",",
          "45:         \"url\": \"https://test.adyen.com/hpp/3d/validate.shtml\",",
          "46:         \"data\": {",
          "47:             \"MD\": \"md-test-data\",",
          "48:             \"PaReq\": \"PaReq-test-data\",",
          "49:             \"TermUrl\": \"http://127.0.0.1:3000/\",",
          "50:         },",
          "51:         \"method\": \"POST\",",
          "52:         \"type\": \"redirect\",",
          "53:     },",
          "54:     kind=TransactionKind.CAPTURE,",
          "55:     amount=Decimal(3.0),",
          "56:     currency=\"usd\",",
          "57:     transaction_id=\"1234\",",
          "58:     error=None,",
          "59: )",
          "62: @pytest.mark.integration",
          "63: def test_checkout_complete(",
          "64:     user_api_client,",
          "65:     checkout_with_gift_card,",
          "66:     gift_card,",
          "67:     payment_dummy,",
          "68:     address,",
          "69:     shipping_method,",
          "70: ):",
          "72:     assert not gift_card.last_used_on",
          "74:     checkout = checkout_with_gift_card",
          "75:     checkout.shipping_address = address",
          "76:     checkout.shipping_method = shipping_method",
          "77:     checkout.billing_address = address",
          "78:     checkout.store_value_in_metadata(items={\"accepted\": \"true\"})",
          "79:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "80:     checkout.save()",
          "82:     checkout_line = checkout.lines.first()",
          "83:     checkout_line_quantity = checkout_line.quantity",
          "84:     checkout_line_variant = checkout_line.variant",
          "86:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "87:     payment = payment_dummy",
          "88:     payment.is_active = True",
          "89:     payment.order = None",
          "90:     payment.total = total.gross.amount",
          "91:     payment.currency = total.gross.currency",
          "92:     payment.checkout = checkout",
          "93:     payment.save()",
          "94:     assert not payment.transactions.exists()",
          "96:     orders_count = Order.objects.count()",
          "97:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "98:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "99:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "101:     content = get_graphql_content(response)",
          "102:     data = content[\"data\"][\"checkoutComplete\"]",
          "103:     assert not data[\"checkoutErrors\"]",
          "105:     order_token = data[\"order\"][\"token\"]",
          "106:     assert Order.objects.count() == orders_count + 1",
          "107:     order = Order.objects.first()",
          "108:     assert order.token == order_token",
          "109:     assert order.total.gross == total.gross",
          "110:     assert order.metadata == checkout.metadata",
          "111:     assert order.private_metadata == checkout.private_metadata",
          "113:     order_line = order.lines.first()",
          "114:     assert checkout_line_quantity == order_line.quantity",
          "115:     assert checkout_line_variant == order_line.variant",
          "116:     assert order.shipping_address == address",
          "117:     assert order.shipping_method == checkout.shipping_method",
          "118:     assert order.payments.exists()",
          "119:     order_payment = order.payments.first()",
          "120:     assert order_payment == payment",
          "121:     assert payment.transactions.count() == 1",
          "123:     gift_card.refresh_from_db()",
          "124:     assert gift_card.current_balance == zero_money()",
          "125:     assert gift_card.last_used_on",
          "127:     assert not Checkout.objects.filter(",
          "128:         pk=checkout.pk",
          "129:     ).exists(), \"Checkout should have been deleted\"",
          "132: @pytest.mark.integration",
          "133: def test_checkout_with_voucher_complete(",
          "134:     user_api_client,",
          "135:     checkout_with_voucher_percentage,",
          "136:     voucher_percentage,",
          "137:     payment_dummy,",
          "138:     address,",
          "139:     shipping_method,",
          "140: ):",
          "141:     voucher_used_count = voucher_percentage.used",
          "143:     checkout = checkout_with_voucher_percentage",
          "144:     checkout.shipping_address = address",
          "145:     checkout.shipping_method = shipping_method",
          "146:     checkout.billing_address = address",
          "147:     checkout.store_value_in_metadata(items={\"accepted\": \"true\"})",
          "148:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "149:     checkout.save()",
          "151:     checkout_line = checkout.lines.first()",
          "152:     checkout_line_quantity = checkout_line.quantity",
          "153:     checkout_line_variant = checkout_line.variant",
          "155:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "156:     payment = payment_dummy",
          "157:     payment.is_active = True",
          "158:     payment.order = None",
          "159:     payment.total = total.gross.amount",
          "160:     payment.currency = total.gross.currency",
          "161:     payment.checkout = checkout",
          "162:     payment.save()",
          "163:     assert not payment.transactions.exists()",
          "165:     orders_count = Order.objects.count()",
          "166:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "167:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "168:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "170:     content = get_graphql_content(response)",
          "171:     data = content[\"data\"][\"checkoutComplete\"]",
          "172:     assert not data[\"checkoutErrors\"]",
          "174:     order_token = data[\"order\"][\"token\"]",
          "175:     assert Order.objects.count() == orders_count + 1",
          "176:     order = Order.objects.first()",
          "177:     assert order.token == order_token",
          "178:     assert order.metadata == checkout.metadata",
          "179:     assert order.private_metadata == checkout.private_metadata",
          "181:     order_line = order.lines.first()",
          "182:     assert checkout_line_quantity == order_line.quantity",
          "183:     assert checkout_line_variant == order_line.variant",
          "184:     assert order.shipping_address == address",
          "185:     assert order.shipping_method == checkout.shipping_method",
          "186:     assert order.payments.exists()",
          "187:     order_payment = order.payments.first()",
          "188:     assert order_payment == payment",
          "189:     assert payment.transactions.count() == 1",
          "191:     voucher_percentage.refresh_from_db()",
          "192:     assert voucher_percentage.used == voucher_used_count + 1",
          "194:     assert not Checkout.objects.filter(",
          "195:         pk=checkout.pk",
          "196:     ).exists(), \"Checkout should have been deleted\"",
          "199: @pytest.mark.integration",
          "200: def test_checkout_complete_without_inventory_tracking(",
          "201:     user_api_client,",
          "202:     checkout_with_variant_without_inventory_tracking,",
          "203:     payment_dummy,",
          "204:     address,",
          "205:     shipping_method,",
          "206: ):",
          "207:     checkout = checkout_with_variant_without_inventory_tracking",
          "208:     checkout.shipping_address = address",
          "209:     checkout.shipping_method = shipping_method",
          "210:     checkout.billing_address = address",
          "211:     checkout.store_value_in_metadata(items={\"accepted\": \"true\"})",
          "212:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "213:     checkout.save()",
          "215:     checkout_line = checkout.lines.first()",
          "216:     checkout_line_quantity = checkout_line.quantity",
          "217:     checkout_line_variant = checkout_line.variant",
          "219:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "220:     payment = payment_dummy",
          "221:     payment.is_active = True",
          "222:     payment.order = None",
          "223:     payment.total = total.gross.amount",
          "224:     payment.currency = total.gross.currency",
          "225:     payment.checkout = checkout",
          "226:     payment.save()",
          "227:     assert not payment.transactions.exists()",
          "229:     orders_count = Order.objects.count()",
          "230:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "231:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "232:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "234:     content = get_graphql_content(response)",
          "235:     data = content[\"data\"][\"checkoutComplete\"]",
          "236:     assert not data[\"checkoutErrors\"]",
          "238:     order_token = data[\"order\"][\"token\"]",
          "239:     assert Order.objects.count() == orders_count + 1",
          "240:     order = Order.objects.first()",
          "241:     assert order.token == order_token",
          "242:     assert order.total.gross == total.gross",
          "243:     assert order.metadata == checkout.metadata",
          "244:     assert order.private_metadata == checkout.private_metadata",
          "246:     order_line = order.lines.first()",
          "247:     assert checkout_line_quantity == order_line.quantity",
          "248:     assert checkout_line_variant == order_line.variant",
          "249:     assert not order_line.allocations.all()",
          "250:     assert order.shipping_address == address",
          "251:     assert order.shipping_method == checkout.shipping_method",
          "252:     assert order.payments.exists()",
          "253:     order_payment = order.payments.first()",
          "254:     assert order_payment == payment",
          "255:     assert payment.transactions.count() == 1",
          "257:     assert not Checkout.objects.filter(",
          "258:         pk=checkout.pk",
          "259:     ).exists(), \"Checkout should have been deleted\"",
          "262: @pytest.mark.integration",
          "263: @pytest.mark.parametrize(\"token, error\", list(TOKEN_VALIDATION_MAPPING.items()))",
          "264: @patch(",
          "265:     \"saleor.payment.gateways.dummy_credit_card.plugin.\"",
          "266:     \"DummyCreditCardGatewayPlugin.DEFAULT_ACTIVE\",",
          "267:     True,",
          "268: )",
          "269: def test_checkout_complete_error_in_gateway_response_for_dummy_credit_card(",
          "270:     token,",
          "271:     error,",
          "272:     user_api_client,",
          "273:     checkout_with_gift_card,",
          "274:     gift_card,",
          "275:     payment_dummy_credit_card,",
          "276:     address,",
          "277:     shipping_method,",
          "278: ):",
          "279:     assert not gift_card.last_used_on",
          "281:     checkout = checkout_with_gift_card",
          "282:     checkout.shipping_address = address",
          "283:     checkout.shipping_method = shipping_method",
          "284:     checkout.billing_address = address",
          "285:     checkout.store_value_in_metadata(items={\"accepted\": \"true\"})",
          "286:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "287:     checkout.save()",
          "289:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "290:     payment = payment_dummy_credit_card",
          "291:     payment.is_active = True",
          "292:     payment.order = None",
          "293:     payment.total = total.gross.amount",
          "294:     payment.currency = total.gross.currency",
          "295:     payment.checkout = checkout",
          "296:     payment.token = token",
          "297:     payment.save()",
          "298:     assert not payment.transactions.exists()",
          "300:     orders_count = Order.objects.count()",
          "301:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "302:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "303:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "305:     content = get_graphql_content(response)",
          "306:     data = content[\"data\"][\"checkoutComplete\"]",
          "307:     assert len(data[\"checkoutErrors\"])",
          "308:     assert data[\"checkoutErrors\"][0][\"message\"] == error",
          "309:     assert payment.transactions.count() == 1",
          "310:     assert Order.objects.count() == orders_count",
          "313: ERROR_GATEWAY_RESPONSE = GatewayResponse(",
          "314:     is_success=False,",
          "315:     action_required=False,",
          "316:     kind=TransactionKind.CAPTURE,",
          "317:     amount=Decimal(0),",
          "318:     currency=\"usd\",",
          "319:     transaction_id=\"1234\",",
          "320:     error=\"ERROR\",",
          "321: )",
          "324: def _process_payment_transaction_returns_error(*args, **kwards):",
          "325:     return ERROR_GATEWAY_RESPONSE",
          "328: def _process_payment_raise_error(*args, **kwargs):",
          "329:     raise PaymentError(\"Oops! Something went wrong.\")",
          "332: @pytest.fixture(",
          "333:     params=[_process_payment_raise_error, _process_payment_transaction_returns_error]",
          "334: )",
          "335: def error_side_effect(request):",
          "336:     return request.param",
          "339: def test_checkout_complete_does_not_delete_checkout_after_unsuccessful_payment(",
          "340:     mock_get_manager,",
          "341:     error_side_effect,",
          "342:     user_api_client,",
          "343:     checkout_with_voucher,",
          "344:     voucher,",
          "345:     payment_dummy,",
          "346:     address,",
          "347:     shipping_method,",
          "348: ):",
          "349:     mock_get_manager.process_payment.side_effect = error_side_effect",
          "350:     expected_voucher_usage_count = voucher.used",
          "351:     checkout = checkout_with_voucher",
          "352:     checkout.shipping_address = address",
          "353:     checkout.shipping_method = shipping_method",
          "354:     checkout.billing_address = address",
          "355:     checkout.save()",
          "357:     taxed_total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "358:     payment = payment_dummy",
          "359:     payment.is_active = True",
          "360:     payment.order = None",
          "361:     payment.total = taxed_total.gross.amount",
          "362:     payment.currency = taxed_total.gross.currency",
          "363:     payment.checkout = checkout",
          "364:     payment.save()",
          "365:     assert not payment.transactions.exists()",
          "367:     orders_count = Order.objects.count()",
          "368:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "369:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "370:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "371:     get_graphql_content(response)",
          "373:     assert Order.objects.count() == orders_count",
          "375:     payment.refresh_from_db(fields=[\"order\"])",
          "376:     transaction = payment.transactions.get()",
          "377:     assert transaction.error",
          "378:     assert payment.order is None",
          "380:     # ensure the voucher usage count was not incremented",
          "381:     voucher.refresh_from_db(fields=[\"used\"])",
          "382:     assert voucher.used == expected_voucher_usage_count",
          "384:     assert Checkout.objects.filter(",
          "385:         pk=checkout.pk",
          "386:     ).exists(), \"Checkout should not have been deleted\"",
          "389: def test_checkout_complete_invalid_checkout_id(user_api_client):",
          "390:     checkout_id = \"invalidId\"",
          "391:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "392:     orders_count = Order.objects.count()",
          "393:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "394:     content = get_graphql_content(response)",
          "395:     data = content[\"data\"][\"checkoutComplete\"]",
          "396:     assert (",
          "397:         data[\"checkoutErrors\"][0][\"message\"] == \"Couldn't resolve to a node: invalidId\"",
          "398:     )",
          "399:     assert data[\"checkoutErrors\"][0][\"field\"] == \"checkoutId\"",
          "400:     assert orders_count == Order.objects.count()",
          "403: def test_checkout_complete_no_payment(",
          "404:     user_api_client, checkout_with_item, address, shipping_method",
          "405: ):",
          "406:     checkout = checkout_with_item",
          "407:     checkout.shipping_address = address",
          "408:     checkout.shipping_method = shipping_method",
          "409:     checkout.billing_address = address",
          "410:     checkout.save()",
          "411:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "412:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "413:     orders_count = Order.objects.count()",
          "414:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "415:     content = get_graphql_content(response)",
          "416:     data = content[\"data\"][\"checkoutComplete\"]",
          "417:     assert data[\"checkoutErrors\"][0][\"message\"] == (",
          "418:         \"Provided payment methods can not cover the checkout's total amount\"",
          "419:     )",
          "420:     assert orders_count == Order.objects.count()",
          "423: def test_checkout_complete_confirmation_needed(",
          "424:     mock_get_manager,",
          "425:     user_api_client,",
          "426:     checkout_with_item,",
          "427:     address,",
          "428:     payment_dummy,",
          "429:     shipping_method,",
          "430: ):",
          "431:     mock_get_manager.process_payment.return_value = ACTION_REQUIRED_GATEWAY_RESPONSE",
          "432:     checkout = checkout_with_item",
          "433:     checkout.shipping_address = address",
          "434:     checkout.shipping_method = shipping_method",
          "435:     checkout.billing_address = address",
          "436:     checkout.save()",
          "438:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "439:     payment = payment_dummy",
          "440:     payment.is_active = True",
          "441:     payment.order = None",
          "442:     payment.total = total.gross.amount",
          "443:     payment.currency = total.gross.currency",
          "444:     payment.checkout = checkout",
          "445:     payment.save()",
          "447:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "448:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "449:     orders_count = Order.objects.count()",
          "451:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "452:     content = get_graphql_content(response)",
          "453:     data = content[\"data\"][\"checkoutComplete\"]",
          "454:     assert not data[\"checkoutErrors\"]",
          "455:     assert data[\"confirmationNeeded\"] is True",
          "456:     assert data[\"confirmationData\"]",
          "458:     new_orders_count = Order.objects.count()",
          "459:     assert new_orders_count == orders_count",
          "460:     checkout.refresh_from_db()",
          "461:     payment_dummy.refresh_from_db()",
          "462:     assert payment_dummy.is_active",
          "463:     assert payment_dummy.to_confirm",
          "466: def test_checkout_confirm(",
          "467:     user_api_client,",
          "468:     mock_get_manager,",
          "469:     checkout_with_item,",
          "470:     payment_txn_to_confirm,",
          "471:     address,",
          "472:     shipping_method,",
          "473: ):",
          "474:     mock_get_manager.confirm_payment.return_value = ACTION_REQUIRED_GATEWAY_RESPONSE",
          "476:     checkout = checkout_with_item",
          "477:     checkout.shipping_address = address",
          "478:     checkout.shipping_method = shipping_method",
          "479:     checkout.billing_address = address",
          "480:     checkout.save()",
          "482:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "483:     payment = payment_txn_to_confirm",
          "484:     payment.is_active = True",
          "485:     payment.order = None",
          "486:     payment.total = total.gross.amount",
          "487:     payment.currency = total.gross.currency",
          "488:     payment.checkout = checkout",
          "489:     payment.save()",
          "491:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "492:     orders_count = Order.objects.count()",
          "494:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "495:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "496:     content = get_graphql_content(response)",
          "497:     data = content[\"data\"][\"checkoutComplete\"]",
          "499:     assert not data[\"checkoutErrors\"]",
          "500:     assert not data[\"confirmationNeeded\"]",
          "502:     mock_get_manager.confirm_payment.assert_called_once()",
          "504:     new_orders_count = Order.objects.count()",
          "505:     assert new_orders_count == orders_count + 1",
          "508: def test_checkout_complete_insufficient_stock(",
          "509:     user_api_client, checkout_with_item, address, payment_dummy, shipping_method",
          "510: ):",
          "511:     checkout = checkout_with_item",
          "512:     checkout_line = checkout.lines.first()",
          "513:     stock = Stock.objects.get(product_variant=checkout_line.variant)",
          "514:     quantity_available = get_available_quantity_for_stock(stock)",
          "515:     checkout_line.quantity = quantity_available + 1",
          "516:     checkout_line.save()",
          "517:     checkout.shipping_address = address",
          "518:     checkout.shipping_method = shipping_method",
          "519:     checkout.billing_address = address",
          "520:     checkout.save()",
          "521:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "522:     payment = payment_dummy",
          "523:     payment.is_active = True",
          "524:     payment.order = None",
          "525:     payment.total = total.gross.amount",
          "526:     payment.currency = total.gross.currency",
          "527:     payment.checkout = checkout",
          "528:     payment.save()",
          "529:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "530:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "531:     orders_count = Order.objects.count()",
          "532:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "533:     content = get_graphql_content(response)",
          "534:     data = content[\"data\"][\"checkoutComplete\"]",
          "535:     assert data[\"checkoutErrors\"][0][\"message\"] == \"Insufficient product stock: 123\"",
          "536:     assert orders_count == Order.objects.count()",
          "539: @patch(\"saleor.graphql.checkout.mutations.gateway.refund\")",
          "540: def test_checkout_complete_insufficient_stock_payment_refunded(",
          "541:     gateway_refund_mock,",
          "542:     checkout_with_item,",
          "543:     address,",
          "544:     shipping_method,",
          "545:     payment_dummy,",
          "546:     user_api_client,",
          "547: ):",
          "548:     # given",
          "549:     checkout = checkout_with_item",
          "550:     checkout_line = checkout.lines.first()",
          "551:     stock = Stock.objects.get(product_variant=checkout_line.variant)",
          "552:     quantity_available = get_available_quantity_for_stock(stock)",
          "553:     checkout_line.quantity = quantity_available + 1",
          "554:     checkout_line.save()",
          "556:     checkout.shipping_address = address",
          "557:     checkout.shipping_method = shipping_method",
          "558:     checkout.billing_address = address",
          "559:     checkout.save()",
          "561:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "563:     payment = payment_dummy",
          "564:     payment.is_active = True",
          "565:     payment.order = None",
          "566:     payment.total = total.gross.amount",
          "567:     payment.currency = total.gross.currency",
          "568:     payment.checkout = checkout",
          "569:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "570:     payment.save()",
          "572:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "573:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "574:     orders_count = Order.objects.count()",
          "576:     # when",
          "577:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "579:     # then",
          "580:     content = get_graphql_content(response)",
          "581:     data = content[\"data\"][\"checkoutComplete\"]",
          "583:     assert data[\"checkoutErrors\"][0][\"message\"] == \"Insufficient product stock: 123\"",
          "584:     assert orders_count == Order.objects.count()",
          "586:     gateway_refund_mock.assert_called_once_with(payment)",
          "589: @patch(\"saleor.graphql.checkout.mutations.gateway.void\")",
          "590: def test_checkout_complete_insufficient_stock_payment_voided(",
          "591:     gateway_void_mock,",
          "592:     checkout_with_item,",
          "593:     address,",
          "594:     shipping_method,",
          "595:     payment_txn_preauth,",
          "596:     user_api_client,",
          "597: ):",
          "598:     # given",
          "599:     checkout = checkout_with_item",
          "600:     checkout_line = checkout.lines.first()",
          "601:     stock = Stock.objects.get(product_variant=checkout_line.variant)",
          "602:     quantity_available = get_available_quantity_for_stock(stock)",
          "603:     checkout_line.quantity = quantity_available + 1",
          "604:     checkout_line.save()",
          "606:     checkout.shipping_address = address",
          "607:     checkout.shipping_method = shipping_method",
          "608:     checkout.billing_address = address",
          "609:     checkout.save()",
          "611:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "613:     payment = payment_txn_preauth",
          "614:     payment.is_active = True",
          "615:     payment.order = None",
          "616:     payment.total = total.gross.amount",
          "617:     payment.currency = total.gross.currency",
          "618:     payment.checkout = checkout",
          "619:     payment.charge_status = ChargeStatus.NOT_CHARGED",
          "620:     payment.save()",
          "622:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "623:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "624:     orders_count = Order.objects.count()",
          "626:     # when",
          "627:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "629:     # then",
          "630:     content = get_graphql_content(response)",
          "631:     data = content[\"data\"][\"checkoutComplete\"]",
          "633:     assert data[\"checkoutErrors\"][0][\"message\"] == \"Insufficient product stock: 123\"",
          "634:     assert orders_count == Order.objects.count()",
          "636:     gateway_void_mock.assert_called_once_with(payment)",
          "639: def test_checkout_complete_without_redirect_url(",
          "640:     user_api_client,",
          "641:     checkout_with_gift_card,",
          "642:     gift_card,",
          "643:     payment_dummy,",
          "644:     address,",
          "645:     shipping_method,",
          "646: ):",
          "648:     assert not gift_card.last_used_on",
          "650:     checkout = checkout_with_gift_card",
          "651:     checkout.shipping_address = address",
          "652:     checkout.shipping_method = shipping_method",
          "653:     checkout.billing_address = address",
          "654:     checkout.save()",
          "656:     checkout_line = checkout.lines.first()",
          "657:     checkout_line_quantity = checkout_line.quantity",
          "658:     checkout_line_variant = checkout_line.variant",
          "660:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "661:     payment = payment_dummy",
          "662:     payment.is_active = True",
          "663:     payment.order = None",
          "664:     payment.total = total.gross.amount",
          "665:     payment.currency = total.gross.currency",
          "666:     payment.checkout = checkout",
          "667:     payment.save()",
          "668:     assert not payment.transactions.exists()",
          "670:     orders_count = Order.objects.count()",
          "671:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "672:     variables = {\"checkoutId\": checkout_id}",
          "673:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "675:     content = get_graphql_content(response)",
          "676:     data = content[\"data\"][\"checkoutComplete\"]",
          "677:     assert not data[\"checkoutErrors\"]",
          "679:     order_token = data[\"order\"][\"token\"]",
          "680:     assert Order.objects.count() == orders_count + 1",
          "681:     order = Order.objects.first()",
          "682:     assert order.token == order_token",
          "683:     assert order.total.gross == total.gross",
          "685:     order_line = order.lines.first()",
          "686:     assert checkout_line_quantity == order_line.quantity",
          "687:     assert checkout_line_variant == order_line.variant",
          "688:     assert order.shipping_address == address",
          "689:     assert order.shipping_method == checkout.shipping_method",
          "690:     assert order.payments.exists()",
          "691:     order_payment = order.payments.first()",
          "692:     assert order_payment == payment",
          "693:     assert payment.transactions.count() == 1",
          "695:     gift_card.refresh_from_db()",
          "696:     assert gift_card.current_balance == zero_money()",
          "697:     assert gift_card.last_used_on",
          "699:     assert not Checkout.objects.filter(",
          "700:         pk=checkout.pk",
          "701:     ).exists(), \"Checkout should have been deleted\"",
          "704: @patch(\"saleor.graphql.checkout.mutations.gateway.payment_refund_or_void\")",
          "705: def test_checkout_complete_payment_payment_total_different_than_checkout(",
          "706:     gateway_refund_or_void_mock,",
          "707:     checkout_with_items,",
          "708:     payment_dummy,",
          "709:     user_api_client,",
          "710:     address,",
          "711:     shipping_method,",
          "712: ):",
          "713:     # given",
          "714:     checkout = checkout_with_items",
          "715:     checkout.shipping_address = address",
          "716:     checkout.shipping_method = shipping_method",
          "717:     checkout.billing_address = address",
          "718:     checkout.save()",
          "720:     total = calculations.checkout_total(checkout=checkout, lines=list(checkout))",
          "721:     payment = payment_dummy",
          "722:     payment.is_active = True",
          "723:     payment.order = None",
          "724:     payment.total = total.gross.amount + Decimal(10)",
          "725:     payment.currency = total.gross.currency",
          "726:     payment.checkout = checkout",
          "727:     payment.save()",
          "728:     assert not payment.transactions.exists()",
          "730:     orders_count = Order.objects.count()",
          "731:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "732:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "733:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "735:     # when",
          "736:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "738:     # then",
          "739:     content = get_graphql_content(response)",
          "740:     data = content[\"data\"][\"checkoutComplete\"]",
          "742:     assert (",
          "743:         data[\"checkoutErrors\"][0][\"code\"]",
          "744:         == CheckoutErrorCode.CHECKOUT_NOT_FULLY_PAID.name",
          "745:     )",
          "746:     assert orders_count == Order.objects.count()",
          "748:     gateway_refund_or_void_mock.assert_called_with(payment)",
          "751: def test_order_already_exists(",
          "752:     user_api_client, checkout_ready_to_complete, payment_dummy, order_with_lines",
          "753: ):",
          "755:     checkout = checkout_ready_to_complete",
          "756:     order_with_lines.checkout_token = checkout.token",
          "757:     order_with_lines.save()",
          "759:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "760:     checkout.delete()",
          "761:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "762:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "764:     content = get_graphql_content(response)",
          "765:     data = content[\"data\"][\"checkoutComplete\"]",
          "766:     assert not data[\"checkoutErrors\"]",
          "768:     order_token = data[\"order\"][\"token\"]",
          "769:     assert Order.objects.count() == 1",
          "770:     order = Order.objects.first()",
          "771:     assert order.token == order_token",
          "773:     assert Checkout.objects.count() == 0",
          "776: @patch(\"saleor.graphql.checkout.mutations.create_order\")",
          "777: def test_create_order_raises_insufficient_stock(",
          "778:     mocked_create_order, user_api_client, checkout_ready_to_complete,",
          "779: ):",
          "780:     mocked_create_order.side_effect = InsufficientStock(\"InsufficientStock\")",
          "781:     checkout = checkout_ready_to_complete",
          "783:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "784:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "785:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "787:     content = get_graphql_content(response)",
          "788:     data = content[\"data\"][\"checkoutComplete\"]",
          "789:     assert not data[\"checkoutErrors\"]",
          "790:     assert mocked_create_order.called",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/utils.py||saleor/graphql/checkout/utils.py": [
          "File: saleor/graphql/checkout/utils.py -> saleor/graphql/checkout/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from django.core.exceptions import ValidationError",
          "",
          "[Removed Lines]",
          "1: from typing import Iterable, Union",
          "",
          "[Added Lines]",
          "1: from typing import Iterable, Type, Union",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     checkout: Checkout,",
          "14:     lines: Iterable[CheckoutLine],",
          "15:     discounts: Iterable[DiscountInfo],",
          "17: ):",
          "18:     if checkout.is_shipping_required():",
          "19:         if not checkout.shipping_method:",
          "",
          "[Removed Lines]",
          "16:     error_code: Union[CheckoutErrorCode, PaymentErrorCode],",
          "",
          "[Added Lines]",
          "16:     error_code: Union[Type[CheckoutErrorCode], Type[PaymentErrorCode]],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "21:                 {",
          "22:                     \"shipping_method\": ValidationError(",
          "23:                         \"Shipping method is not set\",",
          "25:                     )",
          "26:                 }",
          "27:             )",
          "",
          "[Removed Lines]",
          "24:                         code=error_code.SHIPPING_METHOD_NOT_SET,",
          "",
          "[Added Lines]",
          "24:                         code=error_code.SHIPPING_METHOD_NOT_SET.value,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "30:                 {",
          "31:                     \"shipping_address\": ValidationError(",
          "32:                         \"Shipping address is not set\",",
          "34:                     )",
          "35:                 }",
          "36:             )",
          "",
          "[Removed Lines]",
          "33:                         code=error_code.SHIPPING_ADDRESS_NOT_SET,",
          "",
          "[Added Lines]",
          "33:                         code=error_code.SHIPPING_ADDRESS_NOT_SET.value,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "39:                 {",
          "40:                     \"shipping_method\": ValidationError(",
          "41:                         \"Shipping method is not valid for your shipping address\",",
          "43:                     )",
          "44:                 }",
          "45:             )",
          "48: def clean_billing_address(",
          "50: ):",
          "51:     if not checkout.billing_address:",
          "52:         raise ValidationError(",
          "53:             {",
          "54:                 \"billing_address\": ValidationError(",
          "55:                     \"Billing address is not set\",",
          "57:                 )",
          "58:             }",
          "59:         )",
          "",
          "[Removed Lines]",
          "42:                         code=error_code.INVALID_SHIPPING_METHOD,",
          "49:     checkout: Checkout, error_code: Union[CheckoutErrorCode, PaymentErrorCode],",
          "56:                     code=error_code.BILLING_ADDRESS_NOT_SET,",
          "",
          "[Added Lines]",
          "42:                         code=error_code.INVALID_SHIPPING_METHOD.value,",
          "49:     checkout: Checkout,",
          "50:     error_code: Union[Type[CheckoutErrorCode], Type[PaymentErrorCode]],",
          "57:                     code=error_code.BILLING_ADDRESS_NOT_SET.value,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "63:     checkout: Checkout,",
          "64:     lines: Iterable[CheckoutLine],",
          "65:     discounts: Iterable[DiscountInfo],",
          "67: ):",
          "68:     clean_billing_address(checkout, error_code)",
          "69:     if not is_fully_paid(checkout, lines, discounts):",
          "70:         raise ValidationError(",
          "71:             \"Provided payment methods can not cover the checkout's total amount\",",
          "73:         )",
          "",
          "[Removed Lines]",
          "66:     error_code: CheckoutErrorCode,",
          "72:             code=error_code.CHECKOUT_NOT_FULLY_PAID,",
          "",
          "[Added Lines]",
          "67:     error_code: Type[CheckoutErrorCode],",
          "73:             code=error_code.CHECKOUT_NOT_FULLY_PAID.value,",
          "",
          "---------------"
        ],
        "saleor/payment/gateway.py||saleor/payment/gateway.py": [
          "File: saleor/payment/gateway.py -> saleor/payment/gateway.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:         logger.exception(\"Gateway response validation failed!\")",
          "249:         response = None",
          "250:         error = ERROR_MSG",
          "252:         logger.exception(\"Error encountered while executing payment gateway.\")",
          "253:         error = ERROR_MSG",
          "254:         response = None",
          "",
          "[Removed Lines]",
          "251:     except Exception:",
          "",
          "[Added Lines]",
          "251:     except PaymentError:",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py": [
          "File: saleor/payment/gateways/adyen/tests/conftest.py -> saleor/payment/gateways/adyen/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     payment = create_payment(",
          "58:         gateway=AdyenGatewayPlugin.PLUGIN_ID,",
          "59:         payment_token=\"\",",
          "61:         currency=checkout_with_items.currency,",
          "62:         email=checkout_with_items.email,",
          "63:         customer_ip_address=\"\",",
          "",
          "[Removed Lines]",
          "60:         total=Decimal(\"1234\"),",
          "",
          "[Added Lines]",
          "60:         total=Decimal(\"12.34\"),",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: )",
          "26:     payment = payment_adyen_for_order",
          "27:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "28:     notification = notification(",
          "",
          "[Removed Lines]",
          "25: def test_handle_authorization(notification, adyen_plugin, payment_adyen_for_order):",
          "",
          "[Added Lines]",
          "25: def test_handle_authorization_for_order(",
          "26:     notification, adyen_plugin, payment_adyen_for_order",
          "27: ):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     assert transaction.kind == TransactionKind.AUTH",
          "41: def test_handle_authorization_with_adyen_auto_capture(",
          "42:     notification, adyen_plugin, payment_adyen_for_order",
          "43: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: def test_handle_authorization_for_checkout(",
          "44:     notification, adyen_plugin, payment_adyen_for_checkout",
          "45: ):",
          "46:     payment = payment_adyen_for_checkout",
          "47:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "48:     notification = notification(",
          "49:         merchant_reference=payment_id,",
          "50:         value=to_adyen_price(payment.total, payment.currency),",
          "51:     )",
          "52:     config = adyen_plugin().config",
          "53:     handle_authorization(notification, config)",
          "55:     payment.refresh_from_db()",
          "56:     assert payment.transactions.count() == 1",
          "57:     transaction = payment.transactions.get()",
          "58:     assert transaction.is_success is True",
          "59:     assert transaction.kind == TransactionKind.AUTH",
          "60:     assert payment.checkout is None",
          "61:     assert payment.order",
          "64: @pytest.mark.vcr",
          "65: def test_handle_authorization_for_checkout_wrong_total(",
          "66:     notification, adyen_plugin, payment_adyen_for_checkout",
          "67: ):",
          "68:     payment = payment_adyen_for_checkout",
          "69:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "70:     notification = notification(",
          "71:         merchant_reference=payment_id,",
          "72:         value=to_adyen_price(Decimal(10), payment.currency),",
          "73:     )",
          "74:     config = adyen_plugin().config",
          "75:     handle_authorization(notification, config)",
          "77:     payment.refresh_from_db()",
          "78:     assert payment.transactions.count() == 1",
          "79:     transaction = payment.transactions.get()",
          "80:     assert transaction.is_success is True",
          "81:     assert transaction.kind == TransactionKind.AUTH",
          "82:     assert payment.checkout is None",
          "83:     assert payment.order",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import Adyen",
          "7: from babel.numbers import get_currency_precision",
          "8: from django.conf import settings",
          "9: from django_countries.fields import Country",
          "11: from ....checkout.calculations import checkout_line_total, checkout_total",
          "12: from ....checkout.models import Checkout",
          "13: from ....core.prices import quantize_price",
          "14: from ....discount.utils import fetch_active_discounts",
          "15: from ....payment.models import Payment",
          "16: from ... import PaymentError",
          "17: from ...interface import PaymentData, PaymentMethodInfo",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: from django.contrib.auth.models import AnonymousUser",
          "14: from ....checkout.utils import create_order, is_fully_paid, prepare_order_data",
          "17: from ....order.models import Order",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:             type=\"card\" if payment_method == \"scheme\" else payment_method,",
          "282:         )",
          "283:     return payment_method_info",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289: def create_order_from_checkout(checkout: \"Checkout\") -> \"Order\":",
          "290:     discounts = fetch_active_discounts()",
          "291:     lines = list(checkout)",
          "293:     if not is_fully_paid(checkout, lines, discounts):",
          "294:         raise PaymentError(",
          "295:             \"Provided payment methods can not cover the checkout's total amount\"",
          "296:         )",
          "298:     order_data = prepare_order_data(",
          "299:         checkout=checkout, lines=lines, discounts=discounts,",
          "300:     )",
          "301:     user = checkout.user or AnonymousUser()",
          "302:     return create_order(",
          "303:         checkout=checkout, order_data=order_data, user=user  # type: ignore",
          "304:     )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: from django.contrib.auth.hashers import check_password",
          "12: from django.core.exceptions import ObjectDoesNotExist",
          "13: from django.core.handlers.wsgi import WSGIRequest",
          "14: from django.http import (",
          "15:     HttpResponse,",
          "16:     HttpResponseBadRequest,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: from django.db import transaction",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: from django.shortcuts import redirect",
          "22: from graphql_relay import from_global_id",
          "24: from ....core.utils.url import prepare_url",
          "25: from ....order.actions import (",
          "26:     cancel_order,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from ....checkout.models import Checkout",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31: from ....order.events import external_notification_event",
          "32: from ....payment.models import Payment, Transaction",
          "33: from ... import ChargeStatus, PaymentError, TransactionKind",
          "35: from ...interface import GatewayConfig, GatewayResponse",
          "36: from ...utils import create_payment_information, create_transaction, gateway_postprocess",
          "40: def get_payment(payment_id: Optional[str]) -> Optional[Payment]:",
          "",
          "[Removed Lines]",
          "34: from ...gateway import capture",
          "37: from .utils import FAILED_STATUSES, api_call, from_adyen_price",
          "",
          "[Added Lines]",
          "36: from ...gateway import capture, payment_refund_or_void",
          "39: from .utils import (",
          "40:     FAILED_STATUSES,",
          "41:     api_call,",
          "42:     create_order_from_checkout,",
          "43:     from_adyen_price,",
          "44: )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "45:     except UnicodeDecodeError:",
          "46:         return None",
          "47:     payment = (",
          "50:         .filter(id=db_payment_id)",
          "51:         .first()",
          "52:     )",
          "53:     return payment",
          "56: def get_transaction(",
          "57:     payment: \"Payment\", transaction_id: Optional[str], kind: str,",
          "58: ) -> Optional[Transaction]:",
          "",
          "[Removed Lines]",
          "48:         Payment.objects.prefetch_related(\"order\")",
          "49:         .select_related()",
          "",
          "[Added Lines]",
          "55:         Payment.objects.prefetch_related(\"order\", \"checkout\")",
          "56:         .select_for_update(of=(\"self\",))",
          "63: def get_checkout(payment: Payment) -> Optional[Checkout]:",
          "64:     if not payment.checkout:",
          "65:         return None",
          "66:     # Lock checkout in the same way as in checkoutComplete",
          "67:     return (",
          "68:         Checkout.objects.select_for_update(of=(\"self\",))",
          "69:         .prefetch_related(\"gift_cards\", \"lines\",)",
          "70:         .select_related(\"shipping_method\", \"shipping_method__shipping_zone\")",
          "71:         .filter(token=payment.checkout.pk)",
          "72:         .first()",
          "73:     )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101:     )",
          "104: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "105:     payment = get_payment(notification.get(\"merchantReference\"))",
          "106:     if not payment:",
          "107:         # We don't know anything about that payment",
          "108:         return",
          "109:     if payment.charge_status in {",
          "110:         ChargeStatus.FULLY_CHARGED,",
          "111:         ChargeStatus.PARTIALLY_CHARGED,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: @transaction.atomic",
          "130:     checkout = get_checkout(payment)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "132:     transaction = create_new_transaction(notification, payment, kind)",
          "133:     reason = notification.get(\"reason\", \"-\")",
          "135:     success_msg = f\"Adyen: The payment  {transaction_id} request  was successful.\"",
          "136:     failed_msg = f\"Adyen: The payment {transaction_id} request failed. Reason: {reason}\"",
          "137:     create_payment_notification_for_order(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:     if not payment.order and transaction.is_success and checkout:",
          "158:         try:",
          "159:             order = create_order_from_checkout(checkout)",
          "160:         except Exception:",
          "161:             payment_refund_or_void(payment)",
          "162:             return",
          "163:         checkout.delete()",
          "164:         payment.order = order",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "150:         order_captured(payment.order, None, transaction.amount, payment)",
          "153: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "154:     # https://docs.adyen.com/checkout/cancel#cancellation-notifciation",
          "155:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184: @transaction.atomic",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "189:         handle_cancellation(notification, gateway_config)",
          "192: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "193:     # https://docs.adyen.com/checkout/capture#capture-notification",
          "194:     payment = get_payment(notification.get(\"merchantReference\"))",
          "195:     if not payment:",
          "196:         return",
          "197:     transaction_id = notification.get(\"pspReference\")",
          "198:     if payment.charge_status == ChargeStatus.FULLY_CHARGED:",
          "199:         # the payment has already status captured.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224: @transaction.atomic",
          "230:     checkout = get_checkout(payment)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "206:     gateway_postprocess(new_transaction, payment)",
          "208:     reason = notification.get(\"reason\", \"-\")",
          "209:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
          "210:     failed_msg = f\"Adyen: The capture {transaction_id} request failed. Reason: {reason}\"",
          "211:     create_payment_notification_for_order(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:     if not payment.order and new_transaction.is_success and checkout:",
          "246:         try:",
          "247:             order = create_order_from_checkout(checkout)",
          "248:         except Exception:",
          "249:             payment_refund_or_void(payment)",
          "250:             return",
          "251:         checkout.delete()",
          "252:         payment.order = order",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "215:         order_captured(payment.order, None, new_transaction.amount, payment)",
          "218: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "219:     # https://docs.adyen.com/checkout/capture#failed-capture",
          "220:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263: @transaction.atomic",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "241:     create_payment_notification_for_order(payment, msg, None, True)",
          "244: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "245:     # https://docs.adyen.com/development-resources/webhooks/understand-notifications#",
          "246:     # event-codes\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290: @transaction.atomic",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "264:     )",
          "267: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "268:     # https://docs.adyen.com/checkout/refund#refund-notification",
          "269:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314: @transaction.atomic",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "296:     return TransactionKind.CAPTURE",
          "299: def handle_failed_refund(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "300:     # https://docs.adyen.com/checkout/refund#failed-refund",
          "301:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347: @transaction.atomic",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "359:         gateway_postprocess(new_transaction, payment)",
          "362: def handle_reversed_refund(",
          "363:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
          "364: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411: @transaction.atomic",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "395:     handle_refund(notification, gateway_config)",
          "398: def webhook_not_implemented(",
          "399:     notification: Dict[str, Any], gateway_config: GatewayConfig",
          "400: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448: @transaction.atomic",
          "",
          "---------------"
        ],
        "saleor/payment/utils.py||saleor/payment/utils.py": [
          "File: saleor/payment/utils.py -> saleor/payment/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:     error_msg=None,",
          "195: ) -> Transaction:",
          "196:     if gateway_response and gateway_response.transaction_already_processed:",
          "200:     return create_transaction(",
          "201:         payment,",
          "202:         kind,",
          "",
          "[Removed Lines]",
          "197:         transaction = get_already_processed_transaction(payment, gateway_response)",
          "198:         if transaction:",
          "199:             return transaction",
          "",
          "[Added Lines]",
          "197:         txn = get_already_processed_transaction(payment, gateway_response)",
          "198:         if txn:",
          "199:             return txn",
          "",
          "---------------"
        ],
        "saleor/tests/fixtures.py||saleor/tests/fixtures.py": [
          "File: saleor/tests/fixtures.py -> saleor/tests/fixtures.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:     return checkout",
          "249: @pytest.fixture",
          "250: def checkout_with_shipping_required(checkout_with_item, product):",
          "251:     checkout = checkout_with_item",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249: @pytest.fixture",
          "250: def checkout_ready_to_complete(checkout_with_item, address, shipping_method, gift_card):",
          "251:     checkout = checkout_with_item",
          "252:     checkout.shipping_address = address",
          "253:     checkout.shipping_method = shipping_method",
          "254:     checkout.billing_address = address",
          "255:     checkout.store_value_in_metadata(items={\"accepted\": \"true\"})",
          "256:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "257:     checkout_with_item.gift_cards.add(gift_card)",
          "258:     checkout.save()",
          "259:     return checkout",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286: @pytest.fixture",
          "287: def checkout_with_variant_without_inventory_tracking(",
          "289: ):",
          "290:     variant = variant_without_inventory_tracking",
          "291:     add_variant_to_checkout(checkout, variant, 1)",
          "292:     checkout.save()",
          "293:     return checkout",
          "",
          "[Removed Lines]",
          "288:     checkout, variant_without_inventory_tracking",
          "",
          "[Added Lines]",
          "301:     checkout, variant_without_inventory_tracking, address, shipping_method",
          "305:     checkout.shipping_address = address",
          "306:     checkout.shipping_method = shipping_method",
          "307:     checkout.billing_address = address",
          "308:     checkout.store_value_in_metadata(items={\"accepted\": \"true\"})",
          "309:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c20abd36e82b9adfc28b0f17e663ccf6ef120724",
      "candidate_info": {
        "commit_hash": "c20abd36e82b9adfc28b0f17e663ccf6ef120724",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/c20abd36e82b9adfc28b0f17e663ccf6ef120724",
        "files": [
          "saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Handle POST and GET in handle_additional_actions for adyen",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py": [
          "File: saleor/payment/gateways/adyen/tests/test_webhook.py -> saleor/payment/gateways/adyen/tests/test_webhook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "636: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "638:     # given",
          "639:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "640:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "",
          "[Removed Lines]",
          "637: def test_handle_additional_actions(api_call_mock, payment_adyen_for_checkout):",
          "",
          "[Added Lines]",
          "637: def test_handle_additional_actions_post(api_call_mock, payment_adyen_for_checkout):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "675:     assert transaction.kind == \"auth\"",
          "678: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "679: def test_handle_additional_actions_adyen_auto_capture(",
          "680:     api_call_mock, payment_adyen_for_checkout",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "678: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "679: def test_handle_additional_actions_get(api_call_mock, payment_adyen_for_checkout):",
          "680:     # given",
          "681:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "682:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "683:     )",
          "684:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\"])",
          "686:     transaction_count = payment_adyen_for_checkout.transactions.all().count()",
          "688:     checkout = payment_adyen_for_checkout.checkout",
          "689:     payment_id = graphene.Node.to_global_id(\"Payment\", payment_adyen_for_checkout.pk)",
          "690:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "692:     request_mock = mock.Mock()",
          "693:     request_mock.GET = {",
          "694:         \"payment\": payment_id,",
          "695:         \"checkout\": checkout.pk,",
          "696:         \"payload\": \"test\",",
          "697:     }",
          "699:     payment_details_mock = mock.Mock()",
          "700:     message = {",
          "701:         \"resultCode\": \"Test\",",
          "702:     }",
          "703:     api_call_mock.return_value.message = message",
          "705:     # when",
          "706:     response = handle_additional_actions(",
          "707:         request_mock, payment_details_mock, False, False",
          "708:     )",
          "710:     # then",
          "711:     payment_adyen_for_checkout.refresh_from_db()",
          "712:     assert response.status_code == 302",
          "713:     assert f\"checkout={quote_plus(checkout_id)}\" in response.url",
          "714:     assert f\"resultCode={message['resultCode']}\" in response.url",
          "715:     assert f\"payment={quote_plus(payment_id)}\" in response.url",
          "716:     assert (",
          "717:         payment_adyen_for_checkout.transactions.all().count() == transaction_count + 1",
          "718:     )",
          "719:     transaction = payment_adyen_for_checkout.transactions.last()",
          "720:     assert transaction.kind == \"auth\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1086:     # then",
          "1087:     assert response.status_code == 400",
          "1088:     assert response.content.decode() == \"Cannot perform not adyen payment.\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1136: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "1137: def test_handle_additional_actions_lack_of_parameter_in_request(",
          "1138:     api_call_mock, payment_adyen_for_checkout",
          "1139: ):",
          "1140:     # given",
          "1141:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "1142:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\", \"second_param\"]}",
          "1143:     )",
          "1144:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\"])",
          "1146:     checkout = payment_adyen_for_checkout.checkout",
          "1147:     payment_id = graphene.Node.to_global_id(\"Payment\", payment_adyen_for_checkout.pk)",
          "1149:     request_mock = mock.Mock()",
          "1150:     request_mock.GET = {\"payment\": payment_id, \"checkout\": checkout.pk}",
          "1151:     request_mock.POST = {\"payload\": \"test\"}",
          "1153:     payment_details_mock = mock.Mock()",
          "1154:     message = {",
          "1155:         \"resultCode\": \"Test\",",
          "1156:     }",
          "1157:     api_call_mock.return_value.message = message",
          "1159:     # when",
          "1160:     response = handle_additional_actions(",
          "1161:         request_mock, payment_details_mock, False, False",
          "1162:     )",
          "1164:     # then",
          "1165:     payment_adyen_for_checkout.refresh_from_db()",
          "1166:     assert response.status_code == 400",
          "1167:     assert (",
          "1168:         response.content.decode()",
          "1169:         == \"Cannot perform payment. Lack of required parameters in request.\"",
          "1170:     )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: from django.contrib.auth.hashers import check_password",
          "12: from django.core.exceptions import ObjectDoesNotExist",
          "13: from django.core.handlers.wsgi import WSGIRequest",
          "15: from django.http.request import HttpHeaders",
          "16: from django.shortcuts import redirect",
          "17: from graphql_relay import from_global_id",
          "",
          "[Removed Lines]",
          "14: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
          "",
          "[Added Lines]",
          "14: from django.http import (",
          "15:     HttpResponse,",
          "16:     HttpResponseBadRequest,",
          "17:     HttpResponseNotFound,",
          "18:     QueryDict,",
          "19: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "534:             \"Cannot perform payment. Lack of data about returnUrl.\"",
          "535:         )",
          "542:     try:",
          "543:         result = api_call(request_data, payment_details)",
          "",
          "[Removed Lines]",
          "537:     request_data = {",
          "538:         \"paymentData\": data[\"payment_data\"],",
          "539:         \"details\": {key: request.POST[key] for key in data[\"parameters\"]},",
          "540:     }",
          "",
          "[Added Lines]",
          "542:     try:",
          "543:         request_data = prepare_api_request_data(request, data)",
          "544:     except KeyError as e:",
          "545:         return HttpResponseBadRequest(e.args[0])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "569:         return HttpResponseBadRequest(\"Cannot perform not adyen payment.\")",
          "572: def prepare_redirect_url(",
          "573:     payment_id: str, checkout_pk: str, api_response: Adyen.Adyen, return_url: str",
          "574: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "577: def prepare_api_request_data(request: WSGIRequest, data: dict):",
          "578:     params = data[\"parameters\"]",
          "579:     request_data: \"QueryDict\" = QueryDict(\"\")",
          "581:     if all([param in request.GET for param in params]):",
          "582:         request_data = request.GET",
          "583:     elif all([param in request.POST for param in params]):",
          "584:         request_data = request.POST",
          "586:     if not request_data:",
          "587:         raise KeyError(",
          "588:             \"Cannot perform payment. Lack of required parameters in request.\"",
          "589:         )",
          "591:     api_request_data = {",
          "592:         \"paymentData\": data[\"payment_data\"],",
          "593:         \"details\": {key: request_data[key] for key in params},",
          "594:     }",
          "595:     return api_request_data",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77d8c9bfc5e8b1a46341cfe0dbf2fa5a2ce4d6dc",
      "candidate_info": {
        "commit_hash": "77d8c9bfc5e8b1a46341cfe0dbf2fa5a2ce4d6dc",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/77d8c9bfc5e8b1a46341cfe0dbf2fa5a2ce4d6dc",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Update adyen configuration and webhooks",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from django.contrib.auth.hashers import make_password",
          "7: from django.core.exceptions import ObjectDoesNotExist",
          "8: from django.core.handlers.wsgi import WSGIRequest",
          "10: from graphql_relay import from_global_id",
          "12: from ....checkout.models import Checkout",
          "13: from ....core.emails import prepare_url",
          "14: from ....plugins.base_plugin import BasePlugin, ConfigurationTypeField",
          "15: from ... import PaymentError, TransactionKind",
          "16: from ...interface import GatewayConfig, GatewayResponse, PaymentData, PaymentGateway",
          "",
          "[Removed Lines]",
          "9: from django.http import HttpResponse",
          "",
          "[Added Lines]",
          "9: from django.http import HttpResponse, HttpResponseNotFound",
          "14: from ....core.utils import build_absolute_uri",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     request_for_payment_refund,",
          "25:     update_payment_with_action_required_data,",
          "26: )",
          "29: GATEWAY_NAME = \"Adyen\"",
          "32: def require_active_plugin(fn):",
          "",
          "[Removed Lines]",
          "27: from .webhooks import handle_webhook",
          "",
          "[Added Lines]",
          "28: from .webhooks import handle_additional_actions, handle_webhook",
          "31: WEBHOOK_PATH = \"/webhooks\"",
          "32: ADDITIONAL_ACTION_PATH = \"/additional_actions\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:         {\"name\": \"Merchant Account\", \"value\": None},",
          "50:         {\"name\": \"API key\", \"value\": None},",
          "51:         {\"name\": \"Supported currencies\", \"value\": \"\"},",
          "53:         {\"name\": \"Origin Key\", \"value\": \"\"},",
          "54:         {\"name\": \"Origin Url\", \"value\": \"\"},",
          "55:         {\"name\": \"Live\", \"value\": \"\"},",
          "",
          "[Removed Lines]",
          "52:         {\"name\": \"Return Url\", \"value\": \"\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:             \" Please enter currency codes separated by a comma.\",",
          "81:             \"label\": \"Supported currencies\",",
          "82:         },",
          "88:         \"Origin Key\": {",
          "89:             \"type\": ConfigurationTypeField.STRING,",
          "90:             \"help_text\": \"\",  # FIXME define them as per channel",
          "",
          "[Removed Lines]",
          "83:         \"Return Url\": {",
          "84:             \"type\": ConfigurationTypeField.STRING,",
          "85:             \"help_text\": \"\",  # FIXME define them as per channel",
          "86:             \"label\": \"Return Url\",",
          "87:         },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175:             connection_params={",
          "176:                 \"api_key\": configuration[\"API key\"],",
          "177:                 \"merchant_account\": configuration[\"Merchant Account\"],",
          "179:                 \"origin_key\": configuration[\"Origin Key\"],",
          "180:                 \"origin_url\": configuration[\"Origin Url\"],",
          "181:                 \"live\": configuration[\"Live\"],",
          "",
          "[Removed Lines]",
          "178:                 \"return_url\": configuration[\"Return Url\"],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
          "196:         config = self._get_gateway_config()",
          "199:     def _get_gateway_config(self) -> GatewayConfig:",
          "200:         return self.config",
          "",
          "[Removed Lines]",
          "197:         return handle_webhook(request, config, self.adyen.checkout.payments_details)",
          "",
          "[Added Lines]",
          "193:         if path.startswith(WEBHOOK_PATH):",
          "194:             return handle_webhook(request, config)",
          "195:         elif path.startswith(ADDITIONAL_ACTION_PATH):",
          "196:             return handle_additional_actions(",
          "197:                 request, self.adyen.checkout.payments_details",
          "198:             )",
          "199:         return HttpResponseNotFound()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "234:         self, payment_information: \"PaymentData\", previous_value",
          "235:     ) -> \"GatewayResponse\":",
          "236:         params = urlencode({\"payment\": payment_information.payment_id})",
          "237:         request_data = request_data_for_payment(",
          "238:             payment_information,",
          "240:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "241:             origin_url=self.config.connection_params[\"origin_url\"],",
          "242:         )",
          "",
          "[Removed Lines]",
          "239:             return_url=prepare_url(params, self.config.connection_params[\"return_url\"]),",
          "",
          "[Added Lines]",
          "239:         return_url = prepare_url(",
          "240:             params,",
          "241:             build_absolute_uri(",
          "242:                 f\"/plugins/{self.PLUGIN_ID}/additional_actions\"",
          "243:             ),  # type: ignore",
          "244:         )",
          "247:             return_url=return_url,",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "470:     return False",
          "481:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
          "482:     # object.",
          "483:     notification = json_data.get(\"notificationItems\")[0].get(",
          "",
          "[Removed Lines]",
          "473: def handle_webhook(",
          "474:     request: WSGIRequest, gateway_config: \"GatewayConfig\", payment_details: Callable",
          "475: ):",
          "476:     try:",
          "477:         json_data = json.loads(request.body)",
          "478:     except ValueError:",
          "479:         return handle_additional_actions(request, payment_details)",
          "",
          "[Added Lines]",
          "473: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
          "474:     json_data = json.loads(request.body)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5b684e7b84b647668478a73af8039b544d796b4",
      "candidate_info": {
        "commit_hash": "b5b684e7b84b647668478a73af8039b544d796b4",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/b5b684e7b84b647668478a73af8039b544d796b4",
        "files": [
          "saleor/graphql/payment/mutations.py",
          "saleor/graphql/payment/schema.py",
          "saleor/graphql/payment/tests/test_payment.py",
          "saleor/graphql/payment/types.py",
          "saleor/graphql/plugins/tests/test_plugins.py",
          "saleor/graphql/plugins/types.py",
          "saleor/graphql/schema.graphql",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/utils/__init__.py",
          "saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py",
          "saleor/payment/gateways/adyen/tests/utils/test_common.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/utils/__init__.py",
          "saleor/payment/gateways/adyen/utils/apple_pay.py",
          "saleor/payment/gateways/adyen/utils/common.py",
          "saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/interface.py",
          "saleor/plugins/base_plugin.py",
          "saleor/plugins/manager.py",
          "saleor/plugins/tests/sample_plugins.py"
        ],
        "message": "Saleor 1514 adyen apple pay for web for 2 11 (#6466)\n\n* Add Apple Pay certificate to configuration dict\n\n* Add new mutation to handle validation process for apple pay on the web\n\n* Add multiline secret field\n\n* Extend test to cover the multiline secret field\n\n* Fix missing dependency in tests\n\n* Use secret text for apple pay cert\n\n* Add validation of the provided configuration\n\n* Fix test, mock the checking request in tests\n\n* Apply changes after review\n\n* Update secret multiline field",
        "before_after_code_files": [
          "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py",
          "saleor/graphql/payment/schema.py||saleor/graphql/payment/schema.py",
          "saleor/graphql/payment/tests/test_payment.py||saleor/graphql/payment/tests/test_payment.py",
          "saleor/graphql/payment/types.py||saleor/graphql/payment/types.py",
          "saleor/graphql/plugins/tests/test_plugins.py||saleor/graphql/plugins/tests/test_plugins.py",
          "saleor/graphql/plugins/types.py||saleor/graphql/plugins/types.py",
          "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py||saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py",
          "saleor/payment/gateways/adyen/tests/test_utils.py||saleor/payment/gateways/adyen/tests/utils/test_common.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/utils/apple_pay.py||saleor/payment/gateways/adyen/utils/apple_pay.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils/common.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/interface.py||saleor/payment/interface.py",
          "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py",
          "saleor/plugins/manager.py||saleor/plugins/manager.py",
          "saleor/plugins/tests/sample_plugins.py||saleor/plugins/tests/sample_plugins.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py": [
          "File: saleor/graphql/payment/mutations.py -> saleor/graphql/payment/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from ..core.scalars import PositiveDecimal",
          "19: from ..core.types import common as common_types",
          "20: from ..core.utils import from_global_id_strict_type",
          "24: class PaymentInput(graphene.InputObjectType):",
          "",
          "[Removed Lines]",
          "21: from .types import Payment",
          "",
          "[Added Lines]",
          "21: from .types import Payment, PaymentInitialized",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:         except PaymentError as e:",
          "255:             raise ValidationError(str(e), code=PaymentErrorCode.PAYMENT_ERROR)",
          "256:         return PaymentVoid(payment=payment)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259: class PaymentInitialize(BaseMutation):",
          "260:     initialized_payment = graphene.Field(PaymentInitialized, required=False)",
          "262:     class Arguments:",
          "263:         gateway = graphene.String(",
          "264:             description=\"A gateway name used to initialize the payment.\", required=True,",
          "265:         )",
          "266:         payment_data = graphene.JSONString(",
          "267:             required=False,",
          "268:             description=(",
          "269:                 \"Client-side generated data required to initialize the payment.\"",
          "270:             ),",
          "271:         )",
          "273:     class Meta:",
          "274:         description = \"Initializes payment process when it is required by gateway.\"",
          "275:         error_type_class = common_types.PaymentError",
          "276:         error_type_field = \"payment_errors\"",
          "278:     @classmethod",
          "279:     def perform_mutation(cls, _root, info, gateway, payment_data):",
          "280:         try:",
          "281:             response = info.context.plugins.initialize_payment(gateway, payment_data)",
          "282:         except PaymentError as e:",
          "283:             raise ValidationError(",
          "284:                 {",
          "285:                     \"payment_data\": ValidationError(",
          "286:                         str(e), code=PaymentErrorCode.INVALID.value",
          "287:                     )",
          "288:                 }",
          "289:             )",
          "290:         return PaymentInitialize(initialized_payment=response)",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/schema.py||saleor/graphql/payment/schema.py": [
          "File: saleor/graphql/payment/schema.py -> saleor/graphql/payment/schema.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from ...core.permissions import OrderPermissions",
          "4: from ..core.fields import PrefetchingConnectionField",
          "5: from ..decorators import permission_required",
          "7: from .resolvers import resolve_payments",
          "8: from .types import Payment",
          "",
          "[Removed Lines]",
          "6: from .mutations import PaymentCapture, PaymentRefund, PaymentVoid",
          "",
          "[Added Lines]",
          "6: from .mutations import PaymentCapture, PaymentInitialize, PaymentRefund, PaymentVoid",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     payment_capture = PaymentCapture.Field()",
          "32:     payment_refund = PaymentRefund.Field()",
          "33:     payment_void = PaymentVoid.Field()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:     payment_initialize = PaymentInitialize.Field()",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/tests/test_payment.py||saleor/graphql/payment/tests/test_payment.py": [
          "File: saleor/graphql/payment/tests/test_payment.py -> saleor/graphql/payment/tests/test_payment.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from decimal import Decimal",
          "2: from unittest.mock import patch",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import json",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5: import pytest",
          "7: from ....checkout import calculations",
          "8: from ....payment.error_codes import PaymentErrorCode",
          "9: from ....payment.gateways.dummy_credit_card import (",
          "10:     TOKEN_EXPIRED,",
          "11:     TOKEN_VALIDATION_MAPPING,",
          "12: )",
          "14: from ....payment.models import ChargeStatus, Payment, TransactionKind",
          "15: from ....payment.utils import fetch_customer_id, store_customer_id",
          "16: from ...tests.utils import assert_no_permission, get_graphql_content",
          "17: from ..enums import OrderAction, PaymentChargeStatusEnum",
          "",
          "[Removed Lines]",
          "13: from ....payment.interface import CustomerSource, PaymentMethodInfo, TokenConfig",
          "",
          "[Added Lines]",
          "9: from ....payment import PaymentError",
          "15: from ....payment.interface import (",
          "16:     CustomerSource,",
          "17:     InitializedPaymentResponse,",
          "18:     PaymentMethodInfo,",
          "19:     TokenConfig,",
          "20: )",
          "23: from ....plugins.manager import PluginsManager",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "821:         query, variables, permissions=[permission_manage_users]",
          "822:     )",
          "823:     assert_no_permission(response)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "834: PAYMENT_INITIALIZE_MUTATION = \"\"\"",
          "835: mutation PaymentInitialize($gateway: String!, $paymentData: JSONString){",
          "836:       paymentInitialize(gateway: $gateway, paymentData: $paymentData)",
          "837:       {",
          "838:         initializedPayment{",
          "839:           gateway",
          "840:           name",
          "841:           data",
          "842:         }",
          "843:         paymentErrors{",
          "844:           field",
          "845:           message",
          "846:         }",
          "847:       }",
          "848: }",
          "849: \"\"\"",
          "852: @patch.object(PluginsManager, \"initialize_payment\")",
          "853: def test_payment_initialize(mocked_initialize_payment, api_client):",
          "854:     exected_initialize_payment_response = InitializedPaymentResponse(",
          "855:         gateway=\"gateway.id\",",
          "856:         name=\"PaymentPluginName\",",
          "857:         data={",
          "858:             \"epochTimestamp\": 1604652056653,",
          "859:             \"expiresAt\": 1604655656653,",
          "860:             \"merchantSessionIdentifier\": \"SSH5EFCB46BA25C4B14B3F37795A7F5B974_BB8E\",",
          "861:         },",
          "862:     )",
          "863:     mocked_initialize_payment.return_value = exected_initialize_payment_response",
          "865:     query = PAYMENT_INITIALIZE_MUTATION",
          "866:     variables = {",
          "867:         \"gateway\": exected_initialize_payment_response.gateway,",
          "868:         \"paymentData\": json.dumps(",
          "869:             {\"paymentMethod\": \"applepay\", \"validationUrl\": \"https://127.0.0.1/valid\"}",
          "870:         ),",
          "871:     }",
          "872:     response = api_client.post_graphql(query, variables)",
          "873:     content = get_graphql_content(response)",
          "874:     init_payment_data = content[\"data\"][\"paymentInitialize\"][\"initializedPayment\"]",
          "875:     assert init_payment_data[\"gateway\"] == exected_initialize_payment_response.gateway",
          "876:     assert init_payment_data[\"name\"] == exected_initialize_payment_response.name",
          "877:     assert (",
          "878:         json.loads(init_payment_data[\"data\"])",
          "879:         == exected_initialize_payment_response.data",
          "880:     )",
          "883: def test_payment_initialize_gateway_doesnt_exist(api_client):",
          "884:     query = PAYMENT_INITIALIZE_MUTATION",
          "885:     variables = {",
          "886:         \"gateway\": \"wrong.gateway\",",
          "887:         \"paymentData\": json.dumps(",
          "888:             {\"paymentMethod\": \"applepay\", \"validationUrl\": \"https://127.0.0.1/valid\"}",
          "889:         ),",
          "890:     }",
          "891:     response = api_client.post_graphql(query, variables)",
          "892:     content = get_graphql_content(response)",
          "893:     assert content[\"data\"][\"paymentInitialize\"][\"initializedPayment\"] is None",
          "896: @patch.object(PluginsManager, \"initialize_payment\")",
          "897: def test_payment_initialize_plugin_raises_error(mocked_initialize_payment, api_client):",
          "898:     error_msg = \"Missing paymentMethod field.\"",
          "899:     mocked_initialize_payment.side_effect = PaymentError(error_msg)",
          "901:     query = PAYMENT_INITIALIZE_MUTATION",
          "902:     variables = {",
          "903:         \"gateway\": \"gateway.id\",",
          "904:         \"paymentData\": json.dumps({\"validationUrl\": \"https://127.0.0.1/valid\"}),",
          "905:     }",
          "906:     response = api_client.post_graphql(query, variables)",
          "907:     content = get_graphql_content(response)",
          "908:     initialized_payment_data = content[\"data\"][\"paymentInitialize\"][",
          "909:         \"initializedPayment\"",
          "910:     ]",
          "911:     errors = content[\"data\"][\"paymentInitialize\"][\"paymentErrors\"]",
          "912:     assert initialized_payment_data is None",
          "913:     assert len(errors) == 1",
          "914:     assert errors[0][\"field\"] == \"paymentData\"",
          "915:     assert errors[0][\"message\"] == error_msg",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/types.py||saleor/graphql/payment/types.py": [
          "File: saleor/graphql/payment/types.py -> saleor/graphql/payment/types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:         if not any(data.values()):",
          "153:             return None",
          "154:         return CreditCard(**data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: class PaymentInitialized(graphene.ObjectType):",
          "158:     class Meta:",
          "159:         description = (",
          "160:             \"Server-side data generated by a payment gateway. Optional step when the \"",
          "161:             \"payment provider requires an additional action to initialize payment \"",
          "162:             \"session.\"",
          "163:         )",
          "165:     gateway = graphene.String(description=\"ID of a payment gateway.\", required=True)",
          "166:     name = graphene.String(description=\"Payment gateway name.\", required=True)",
          "167:     data = graphene.JSONString(",
          "168:         description=\"Initialized data by gateway.\", required=False",
          "169:     )",
          "",
          "---------------"
        ],
        "saleor/graphql/plugins/tests/test_plugins.py||saleor/graphql/plugins/tests/test_plugins.py": [
          "File: saleor/graphql/plugins/tests/test_plugins.py -> saleor/graphql/plugins/tests/test_plugins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: @pytest.mark.parametrize(",
          "84:     [",
          "89:     ],",
          "90: )",
          "91: def test_query_plugins_hides_secret_fields(",
          "",
          "[Removed Lines]",
          "83:     \"password, expected_password, api_key, expected_api_key\",",
          "85:         (None, None, None, None),",
          "86:         (\"ABCDEFGHIJ\", \"\", \"123456789\", \"6789\"),",
          "87:         (\"\", None, \"\", None),",
          "88:         (None, None, \"1234\", \"4\"),",
          "",
          "[Added Lines]",
          "83:     \"password, expected_password, api_key, expected_api_key, cert, expected_cert\",",
          "85:         (None, None, None, None, None, None),",
          "86:         (\"ABCDEFGHIJ\", \"\", \"123456789\", \"6789\", \"long text\\n with new\\n lines\", \"ines\"),",
          "87:         (\"\", None, \"\", None, \"\", None),",
          "88:         (None, None, \"1234\", \"4\", None, None),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     expected_password,",
          "94:     api_key,",
          "95:     expected_api_key,",
          "96:     staff_api_client,",
          "97:     permission_manage_plugins,",
          "98:     settings,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     cert,",
          "97:     expected_cert,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:             conf_field[\"value\"] = password",
          "108:         if conf_field[\"name\"] == \"API private key\":",
          "109:             conf_field[\"value\"] = api_key",
          "110:     manager.save_plugin_configuration(",
          "111:         PluginSample.PLUGIN_ID,",
          "112:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:         if conf_field[\"name\"] == \"certificate\":",
          "113:             conf_field[\"value\"] = cert",
          "",
          "---------------"
        ],
        "saleor/graphql/plugins/types.py||saleor/graphql/plugins/types.py": [
          "File: saleor/graphql/plugins/types.py -> saleor/graphql/plugins/types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:         if field_type == ConfigurationTypeField.PASSWORD:",
          "23:             field[\"value\"] = \"\" if value else None",
          "26:             if not value:",
          "27:                 field[\"value\"] = None",
          "28:             elif len(value) > 4:",
          "",
          "[Removed Lines]",
          "25:         if field_type == ConfigurationTypeField.SECRET:",
          "",
          "[Added Lines]",
          "25:         if field_type in [",
          "26:             ConfigurationTypeField.SECRET,",
          "27:             ConfigurationTypeField.SECRET_MULTILINE,",
          "28:         ]:",
          "",
          "---------------"
        ],
        "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
          "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
          "--- Hunk 1 ---",
          "[Context before]",
          "1261:   BOOLEAN",
          "1262:   SECRET",
          "1263:   PASSWORD",
          "1264: }",
          "1266: type ConfirmAccount {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1264:   SECRETMULTILINE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2692:   paymentCapture(amount: PositiveDecimal, paymentId: ID!): PaymentCapture",
          "2693:   paymentRefund(amount: PositiveDecimal, paymentId: ID!): PaymentRefund",
          "2694:   paymentVoid(paymentId: ID!): PaymentVoid",
          "2695:   pageCreate(input: PageInput!): PageCreate",
          "2696:   pageDelete(id: ID!): PageDelete",
          "2697:   pageBulkDelete(ids: [ID]!): PageBulkDelete",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2696:   paymentInitialize(gateway: String!, paymentData: JSONString): PaymentInitialize",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3466:   currencies: [String]!",
          "3467: }",
          "3469: input PaymentInput {",
          "3470:   gateway: String!",
          "3471:   token: String",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3471: type PaymentInitialize {",
          "3472:   errors: [Error!]! @deprecated(reason: \"Use typed errors with error codes. This field will be removed after 2020-07-31.\")",
          "3473:   initializedPayment: PaymentInitialized",
          "3474:   paymentErrors: [PaymentError!]!",
          "3475: }",
          "3477: type PaymentInitialized {",
          "3478:   gateway: String!",
          "3479:   name: String!",
          "3480:   data: JSONString",
          "3481: }",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import Adyen",
          "6: from django.contrib.auth.hashers import make_password",
          "8: from django.core.handlers.wsgi import WSGIRequest",
          "9: from django.http import HttpResponse, HttpResponseNotFound",
          "11: from ....checkout.models import Checkout",
          "12: from ....core.utils import build_absolute_uri",
          "13: from ....core.utils.url import prepare_url",
          "14: from ....order.events import external_notification_event",
          "15: from ....plugins.base_plugin import BasePlugin, ConfigurationTypeField",
          "16: from ... import PaymentError, TransactionKind",
          "18: from ...models import Payment, Transaction",
          "19: from ..utils import get_supported_currencies",
          "21:     AUTH_STATUS,",
          "22:     FAILED_STATUSES,",
          "23:     PENDING_STATUSES,",
          "",
          "[Removed Lines]",
          "7: from django.core.exceptions import ObjectDoesNotExist",
          "17: from ...interface import GatewayConfig, GatewayResponse, PaymentData, PaymentGateway",
          "20: from .utils import (",
          "",
          "[Added Lines]",
          "7: from django.core.exceptions import ObjectDoesNotExist, ValidationError",
          "10: from requests.exceptions import SSLError",
          "17: from ....plugins.error_codes import PluginErrorCode",
          "18: from ....plugins.models import PluginConfiguration",
          "20: from ...interface import (",
          "21:     GatewayConfig,",
          "22:     GatewayResponse,",
          "23:     InitializedPaymentResponse,",
          "24:     PaymentData,",
          "25:     PaymentGateway,",
          "26: )",
          "29: from .utils.apple_pay import initialize_apple_pay, make_request_to_initialize_apple_pay",
          "30: from .utils.common import (",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         {\"name\": \"notification-user\", \"value\": \"\"},",
          "63:         {\"name\": \"notification-password\", \"value\": \"\"},",
          "64:         {\"name\": \"enable-native-3d-secure\", \"value\": False},",
          "65:     ]",
          "67:     CONFIG_STRUCTURE = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:         {\"name\": \"apple-pay-cert\", \"value\": None},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:             ),",
          "169:             \"label\": \"Enable native 3D Secure\",",
          "170:         },",
          "171:     }",
          "173:     def __init__(self, *args, **kwargs):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:         \"apple-pay-cert\": {",
          "183:             \"type\": ConfigurationTypeField.SECRET_MULTILINE,",
          "184:             \"help_text\": (",
          "185:                 \"Follow the Adyen docs related to activating the Apple Pay for the \"",
          "186:                 \"web - https://docs.adyen.com/payment-methods/apple-pay/\"",
          "187:                 \"enable-apple-pay. This certificate is only required when you offer \"",
          "188:                 \"the Apple Pay as a web payment method.  Leave it blank if you don't \"",
          "189:                 \"offer Apple Pay or offer it only as a payment method in your iOS app.\"",
          "190:             ),",
          "191:             \"label\": \"Apple Pay certificate\",",
          "192:         },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:                 \"webhook_user_password\": configuration[\"notification-password\"],",
          "188:                 \"adyen_auto_capture\": configuration[\"adyen-auto-capture\"],",
          "189:                 \"enable_native_3d_secure\": configuration[\"enable-native-3d-secure\"],",
          "190:             },",
          "191:         )",
          "192:         api_key = self.config.connection_params[\"api_key\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:                 \"apple_pay_cert\": configuration[\"apple-pay-cert\"],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "214:     def token_is_required_as_payment_input(self, previous_value):",
          "215:         return False",
          "217:     @require_active_plugin",
          "218:     def get_payment_gateway_for_checkout(",
          "219:         self, checkout: \"Checkout\", previous_value,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     @require_active_plugin",
          "241:     def initialize_payment(",
          "242:         self, payment_data, previous_value",
          "243:     ) -> \"InitializedPaymentResponse\":",
          "244:         payment_method = payment_data.get(\"paymentMethod\")",
          "245:         if payment_method == \"applepay\":",
          "246:             # The apple pay on the web requires additional step",
          "247:             session_obj = initialize_apple_pay(",
          "248:                 payment_data, self.config.connection_params[\"apple_pay_cert\"]",
          "249:             )",
          "250:             return InitializedPaymentResponse(",
          "251:                 gateway=self.PLUGIN_ID, name=self.PLUGIN_NAME, data=session_obj",
          "252:             )",
          "253:         return previous_value",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "551:             raw_response=result.message,",
          "552:             searchable_key=result.message.get(\"pspReference\", \"\"),",
          "553:         )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:     @classmethod",
          "594:     def validate_plugin_configuration(cls, plugin_configuration: \"PluginConfiguration\"):",
          "595:         \"\"\"Validate if provided configuration is correct.\"\"\"",
          "596:         configuration = plugin_configuration.configuration",
          "597:         configuration = {item[\"name\"]: item[\"value\"] for item in configuration}",
          "598:         apple_certificate = configuration[\"apple-pay-cert\"]",
          "599:         if plugin_configuration.active and apple_certificate:",
          "600:             global_apple_url = (",
          "601:                 \"https://apple-pay-gateway.apple.com/paymentservices/paymentSession\"",
          "602:             )",
          "603:             request_data = {",
          "604:                 \"merchantIdentifier\": \"\",",
          "605:                 \"displayName\": \"\",",
          "606:                 \"initiative\": \"web\",",
          "607:                 \"initiativeContext\": \"\",",
          "608:             }",
          "609:             # Try to exectue the session request without all required data. If the",
          "610:             # apple certificate is correct we will get the error related to the missing",
          "611:             # parameters. If certificate is incorrect, the SSL error will be raised.",
          "612:             try:",
          "613:                 make_request_to_initialize_apple_pay(",
          "614:                     validation_url=global_apple_url,",
          "615:                     request_data=request_data,",
          "616:                     certificate=apple_certificate,",
          "617:                 )",
          "618:             except SSLError:",
          "619:                 raise ValidationError(",
          "620:                     {",
          "621:                         \"apple-pay-cert\": ValidationError(",
          "622:                             \"The provided apple certificate is invalid.\",",
          "623:                             code=PluginErrorCode.INVALID.value,",
          "624:                         )",
          "625:                     }",
          "626:                 )",
          "627:             except Exception:",
          "628:                 pass",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py": [
          "File: saleor/payment/gateways/adyen/tests/conftest.py -> saleor/payment/gateways/adyen/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from .....checkout import calculations",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from unittest import mock",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:         origin_url=None,",
          "19:         adyen_auto_capture=None,",
          "20:         auto_capture=None,",
          "21:     ):",
          "22:         api_key = api_key or \"test_key\"",
          "23:         merchant_account = merchant_account or \"SaleorECOM\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:         apple_pay_cert=None,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:         auto_capture = auto_capture or False",
          "29:         settings.PLUGINS = [\"saleor.payment.gateways.adyen.plugin.AdyenGatewayPlugin\"]",
          "30:         manager = get_plugins_manager()",
          "48:         manager = get_plugins_manager()",
          "49:         return manager.plugins[0]",
          "",
          "[Removed Lines]",
          "31:         manager.save_plugin_configuration(",
          "32:             AdyenGatewayPlugin.PLUGIN_ID,",
          "33:             {",
          "34:                 \"active\": True,",
          "35:                 \"configuration\": [",
          "36:                     {\"name\": \"api-key\", \"value\": api_key},",
          "37:                     {\"name\": \"merchant-account\", \"value\": merchant_account},",
          "38:                     {\"name\": \"return-url\", \"value\": return_url},",
          "39:                     {\"name\": \"client-key\", \"value\": client_key},",
          "40:                     {\"name\": \"origin-url\", \"value\": origin_url},",
          "41:                     {\"name\": \"adyen-auto-capture\", \"value\": adyen_auto_capture},",
          "42:                     {\"name\": \"auto-capture\", \"value\": auto_capture},",
          "43:                     {\"name\": \"supported-currencies\", \"value\": \"USD\"},",
          "44:                 ],",
          "45:             },",
          "46:         )",
          "",
          "[Added Lines]",
          "35:         with mock.patch(\"saleor.payment.gateways.adyen.utils.apple_pay.requests.post\"):",
          "36:             manager.save_plugin_configuration(",
          "37:                 AdyenGatewayPlugin.PLUGIN_ID,",
          "38:                 {",
          "39:                     \"active\": True,",
          "40:                     \"configuration\": [",
          "41:                         {\"name\": \"api-key\", \"value\": api_key},",
          "42:                         {\"name\": \"merchant-account\", \"value\": merchant_account},",
          "43:                         {\"name\": \"return-url\", \"value\": return_url},",
          "44:                         {\"name\": \"client-key\", \"value\": client_key},",
          "45:                         {\"name\": \"origin-url\", \"value\": origin_url},",
          "46:                         {\"name\": \"adyen-auto-capture\", \"value\": adyen_auto_capture},",
          "47:                         {\"name\": \"auto-capture\", \"value\": auto_capture},",
          "48:                         {\"name\": \"supported-currencies\", \"value\": \"USD\"},",
          "49:                         {\"name\": \"apple-pay-cert\", \"value\": apple_pay_cert},",
          "50:                     ],",
          "51:                 },",
          "52:             )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py": [
          "File: saleor/payment/gateways/adyen/tests/test_plugin.py -> saleor/payment/gateways/adyen/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from unittest import mock",
          "5: import pytest",
          "7: from .... import PaymentError, TransactionKind",
          "8: from ....interface import GatewayResponse, PaymentMethodInfo",
          "9: from ....models import Payment",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: from django.core.exceptions import ValidationError",
          "7: from requests.exceptions import RequestException, SSLError",
          "9: from .....plugins.models import PluginConfiguration",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473:     assert response.currency == order_with_lines.currency",
          "474:     assert response.transaction_id == \"852595499936560C\"  # ID returned by Adyen",
          "475:     assert response.payment_method_info == PaymentMethodInfo(brand=\"visa\", type=\"test\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481: @mock.patch(\"saleor.payment.gateways.adyen.utils.apple_pay.requests.post\")",
          "482: def test_validate_plugin_configuration_incorrect_certificate(",
          "483:     mocked_request, adyen_plugin",
          "484: ):",
          "485:     plugin = adyen_plugin(apple_pay_cert=\"cert\")",
          "486:     mocked_request.side_effect = SSLError()",
          "487:     configuration = PluginConfiguration.objects.get()",
          "488:     with pytest.raises(ValidationError):",
          "489:         plugin.validate_plugin_configuration(configuration)",
          "492: @mock.patch(\"saleor.payment.gateways.adyen.utils.apple_pay.requests.post\")",
          "493: def test_validate_plugin_configuration_correct_cert(mocked_request, adyen_plugin):",
          "494:     plugin = adyen_plugin(apple_pay_cert=\"correct_cert\")",
          "495:     mocked_request.side_effect = RequestException()",
          "496:     configuration = PluginConfiguration.objects.get()",
          "497:     plugin.validate_plugin_configuration(configuration)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py||saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py": [
          "File: saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py -> saleor/payment/gateways/adyen/tests/utils/test_apple_pay.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from unittest import mock",
          "3: import pytest",
          "5: from saleor.payment import PaymentError",
          "6: from saleor.payment.gateways.adyen.utils.apple_pay import (",
          "7:     initialize_apple_pay_session,",
          "8:     validate_payment_data_for_apple_pay,",
          "9: )",
          "12: @pytest.mark.parametrize(",
          "13:     \"validation_url,merchant_identifier,domain,display_name,certificate\",",
          "14:     [",
          "15:         (",
          "16:             \"https://apple-pay-gateway.apple.com/paymentservices/startSession\",",
          "17:             \"merchant.com.identifier\",",
          "18:             \"saleor.com\",",
          "19:             None,",
          "20:             \"certifiate data\",",
          "21:         ),",
          "22:         (None, \"merchant.com.identifier\", \"saleor.com\", \"Saleor\", \"certifiate data\"),",
          "23:         (",
          "24:             \"https://apple-pay-gateway.apple.com/paymentservices/startSession\",",
          "25:             None,",
          "26:             \"saleor.com\",",
          "27:             \"Saleor\",",
          "28:             \"certifiate data\",",
          "29:         ),",
          "30:         (",
          "31:             \"https://apple-pay-gateway.apple.com/paymentservices/startSession\",",
          "32:             \"merchant.com.identifier\",",
          "33:             None,",
          "34:             \"Saleor\",",
          "35:             \"certifiate data\",",
          "36:         ),",
          "37:         (",
          "38:             \"https://not-whitelisted-domain.com/paymentservices/startSession\",",
          "39:             \"merchant.com.identifier\",",
          "40:             \"saleor.com\",",
          "41:             \"Saleor\",",
          "42:             \"certifiate data\",",
          "43:         ),",
          "44:         (",
          "45:             \"https://apple-pay-gateway.apple.com/paymentservices/startSession\",",
          "46:             \"merchant.com.identifier\",",
          "47:             \"saleor.com\",",
          "48:             \"Saleor\",",
          "49:             None,",
          "50:         ),",
          "51:     ],",
          "52: )",
          "53: def test_validate_payment_data_for_apple_pay_raises_payment_error(",
          "54:     validation_url, merchant_identifier, domain, display_name, certificate",
          "55: ):",
          "56:     with pytest.raises(PaymentError):",
          "57:         validate_payment_data_for_apple_pay(",
          "58:             validation_url, merchant_identifier, domain, display_name, certificate",
          "59:         )",
          "62: def test_validate_payment_data_for_apple_pay():",
          "63:     validation_url = \"https://apple-pay-gateway.apple.com/paymentservices/startSession\"",
          "64:     merchant_identifier = \"merchant.com.identifier\"",
          "65:     domain = \"saleor.com\"",
          "66:     display_name = \"Saleor \"",
          "67:     certificate = \"certifiate data\"",
          "69:     validate_payment_data_for_apple_pay(",
          "70:         validation_url, merchant_identifier, domain, display_name, certificate",
          "71:     )",
          "74: @mock.patch(\"saleor.payment.gateways.adyen.utils.apple_pay.NamedTemporaryFile\")",
          "75: @mock.patch(\"saleor.payment.gateways.adyen.utils.apple_pay.requests.post\")",
          "76: def test_initialize_payment_for_apple_pay(mocked_request, mocked_tmp_file):",
          "77:     mocked_cert_file_name = \"cert-file-name\"",
          "78:     mocked_file = mock.MagicMock()",
          "79:     mocked_file.__enter__.return_value = mocked_file",
          "80:     mocked_file.name = mocked_cert_file_name",
          "81:     mocked_tmp_file.return_value = mocked_file",
          "83:     mocked_response = mock.Mock()",
          "84:     mocked_response.ok = True",
          "85:     mocked_response.json.return_value = {",
          "86:         \"epochTimestamp\": 1604652056653,",
          "87:         \"expiresAt\": 1604655656653,",
          "88:         \"merchantSessionIdentifier\": \"SSH5EFCB46BA25C4B14B3F37795A7F5B974_BB8E\",",
          "89:     }",
          "90:     mocked_request.return_value = mocked_response",
          "92:     validation_url = \"https://apple-pay-gateway.apple.com/paymentservices/startSession\"",
          "93:     merchant_identifier = \"merchant.com.identifier\"",
          "94:     domain = \"saleor.com\"",
          "95:     display_name = \"Saleor Shop\"",
          "96:     certificate = \"certifiate data\"",
          "98:     initialize_apple_pay_session(",
          "99:         validation_url, merchant_identifier, domain, display_name, certificate,",
          "100:     )",
          "102:     expected_data = {",
          "103:         \"merchantIdentifier\": merchant_identifier,",
          "104:         \"displayName\": display_name,",
          "105:         \"initiative\": \"web\",",
          "106:         \"initiativeContext\": domain,",
          "107:     }",
          "109:     mocked_request.assert_called_with(",
          "110:         validation_url, json=expected_data, cert=mocked_cert_file_name",
          "111:     )",
          "114: @mock.patch(\"saleor.payment.gateways.adyen.utils.apple_pay.requests.post\")",
          "115: def test_initialize_payment_for_apple_pay_request_failed(mocked_request):",
          "117:     mocked_response = mock.Mock()",
          "118:     mocked_response.ok = False",
          "119:     mocked_response.json.return_value = {}",
          "120:     mocked_request.return_value = mocked_response",
          "122:     validation_url = \"https://apple-pay-gateway.apple.com/paymentservices/startSession\"",
          "123:     merchant_identifier = \"merchant.com.identifier\"",
          "124:     domain = \"saleor.com\"",
          "125:     display_name = \"Saleor Shop\"",
          "126:     certificate = \"certifiate data\"",
          "128:     with pytest.raises(PaymentError):",
          "129:         initialize_apple_pay_session(",
          "130:             validation_url, merchant_identifier, domain, display_name, certificate,",
          "131:         )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_utils.py||saleor/payment/gateways/adyen/tests/utils/test_common.py": [
          "File: saleor/payment/gateways/adyen/tests/test_utils.py -> saleor/payment/gateways/adyen/tests/utils/test_common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import pytest",
          "6: from prices import Money, TaxedMoney",
          "12:     append_klarna_data,",
          "13:     from_adyen_price,",
          "14:     get_payment_method_info,",
          "",
          "[Removed Lines]",
          "8: from .....core.prices import quantize_price",
          "9: from .... import PaymentError",
          "10: from ....interface import PaymentMethodInfo",
          "11: from ..utils import (",
          "",
          "[Added Lines]",
          "8: from saleor.core.prices import quantize_price",
          "9: from saleor.payment import PaymentError",
          "10: from saleor.payment.gateways.adyen.utils.common import (",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     to_adyen_price,",
          "19:     update_payment_with_action_required_data,",
          "20: )",
          "23: @pytest.mark.parametrize(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: from saleor.payment.interface import PaymentMethodInfo",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:     }",
          "81: def test_append_klarna_data_tax_included(",
          "82:     mocked_checkout_line_total,",
          "83:     dummy_payment_data,",
          "",
          "[Removed Lines]",
          "80: @mock.patch(\"saleor.payment.gateways.adyen.utils.checkout_line_total\")",
          "",
          "[Added Lines]",
          "80: @mock.patch(\"saleor.payment.gateways.adyen.utils.common.checkout_line_total\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:     }",
          "276: def test_request_data_for_payment_append_klarna_data(",
          "277:     append_klarna_data_mock, dummy_payment_data",
          "278: ):",
          "",
          "[Removed Lines]",
          "275: @mock.patch(\"saleor.payment.gateways.adyen.utils.append_klarna_data\")",
          "",
          "[Added Lines]",
          "275: @mock.patch(\"saleor.payment.gateways.adyen.utils.common.append_klarna_data\")",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from ......checkout import calculations",
          "9: from ......order import OrderEvents, OrderStatus",
          "10: from ..... import ChargeStatus, TransactionKind",
          "12: from ...webhooks import (",
          "13:     create_new_transaction,",
          "14:     handle_authorization,",
          "",
          "[Removed Lines]",
          "11: from ...utils import to_adyen_price",
          "",
          "[Added Lines]",
          "11: from ...utils.common import to_adyen_price",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils/apple_pay.py||saleor/payment/gateways/adyen/utils/apple_pay.py": [
          "File: saleor/payment/gateways/adyen/utils/apple_pay.py -> saleor/payment/gateways/adyen/utils/apple_pay.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import logging",
          "2: from tempfile import NamedTemporaryFile",
          "3: from typing import Optional",
          "4: from urllib.parse import urlsplit",
          "6: import requests",
          "8: from .... import PaymentError",
          "10: # https://developer.apple.com/documentation/apple_pay_on_the_web/",
          "11: # setting_up_your_server#3172427",
          "13: APPLE_DOMAINS = [",
          "14:     \"apple-pay-gateway.apple.com\",",
          "15:     \"cn-apple-pay-gateway.apple.com\",",
          "16:     \"apple-pay-gateway-nc-pod1.apple.com\",",
          "17:     \"apple-pay-gateway-nc-pod2.apple.com\",",
          "18:     \"apple-pay-gateway-nc-pod3.apple.com\",",
          "19:     \"apple-pay-gateway-nc-pod4.apple.com\",",
          "20:     \"apple-pay-gateway-nc-pod5.apple.com\",",
          "21:     \"apple-pay-gateway-pr-pod1.apple.com\",",
          "22:     \"apple-pay-gateway-pr-pod2.apple.com\",",
          "23:     \"apple-pay-gateway-pr-pod3.apple.com\",",
          "24:     \"apple-pay-gateway-pr-pod4.apple.com\",",
          "25:     \"apple-pay-gateway-pr-pod5.apple.com\",",
          "26:     \"cn-apple-pay-gateway-sh-pod1.apple.com\",",
          "27:     \"cn-apple-pay-gateway-sh-pod2.apple.com\",",
          "28:     \"cn-apple-pay-gateway-sh-pod3.apple.com\",",
          "29:     \"cn-apple-pay-gateway-tj-pod1.apple.com\",",
          "30:     \"cn-apple-pay-gateway-tj-pod2.apple.com\",",
          "31:     \"cn-apple-pay-gateway-tj-pod3.apple.com\",",
          "32:     \"apple-pay-gateway-cert.apple.com\",",
          "33:     \"cn-apple-pay-gateway-cert.apple.com\",",
          "34: ]",
          "36: logger = logging.getLogger(__name__)",
          "39: def validate_payment_data_for_apple_pay(",
          "40:     validation_url: Optional[str],",
          "41:     merchant_identifier: Optional[str],",
          "42:     domain: Optional[str],",
          "43:     display_name: Optional[str],",
          "44:     certificate,",
          "45: ):",
          "46:     if not certificate:",
          "47:         raise PaymentError(\"Support for Apple Pay on the web is disabled.\")",
          "49:     required_fields = [",
          "50:         (validation_url, \"validationUrl\"),",
          "51:         (merchant_identifier, \"merchantIdentifier\"),",
          "52:         (domain, \"domain\"),",
          "53:         (display_name, \"displayName\"),",
          "54:     ]",
          "55:     for field, name in required_fields:",
          "56:         if not field:",
          "57:             raise PaymentError(f\"Missing {name} in the input data.\")",
          "59:     domain = urlsplit(validation_url).netloc",
          "60:     if domain not in APPLE_DOMAINS:",
          "61:         raise PaymentError(",
          "62:             \"The domain of the validation url is not defined as an Apple Pay domain.\"",
          "63:         )",
          "66: def initialize_apple_pay_session(",
          "67:     validation_url: str,",
          "68:     merchant_identifier: str,",
          "69:     domain: str,",
          "70:     display_name: str,",
          "71:     certificate: str,",
          "72: ) -> dict:",
          "74:     request_data = {",
          "75:         \"merchantIdentifier\": merchant_identifier,",
          "76:         \"displayName\": display_name,",
          "77:         \"initiative\": \"web\",",
          "78:         \"initiativeContext\": domain,",
          "79:     }",
          "80:     request_exception = False",
          "81:     response = None",
          "82:     try:",
          "83:         response = make_request_to_initialize_apple_pay(",
          "84:             validation_url, request_data, certificate",
          "85:         )",
          "86:     except requests.exceptions.RequestException:",
          "87:         logger.warning(\"Failed to fetch the Apple Pay session\", exc_info=True)",
          "88:         request_exception = True",
          "89:     if request_exception or response and not response.ok:",
          "90:         raise PaymentError(",
          "91:             \"Unable to create Apple Pay payment session. Make sure that input data \"",
          "92:             \" and certificate are correct.\"",
          "93:         )",
          "94:     return response.json()  # type: ignore",
          "97: def make_request_to_initialize_apple_pay(",
          "98:     validation_url: str, request_data: dict, certificate: str",
          "99: ):",
          "100:     with NamedTemporaryFile() as f:",
          "101:         f.write(certificate.encode())",
          "102:         f.flush()  # ensure all data written",
          "103:         return requests.post(validation_url, json=request_data, cert=f.name)",
          "106: def initialize_apple_pay(payment_data: dict, certificate: str) -> dict:",
          "107:     # The apple pay on the web requires additional step",
          "108:     validation_url = payment_data.get(\"validationUrl\", \"\")",
          "109:     merchant_identifier = payment_data.get(\"merchantIdentifier\", \"\")",
          "110:     domain = payment_data.get(\"domain\", \"\")",
          "111:     display_name = payment_data.get(\"displayName\", \"\")",
          "112:     validate_payment_data_for_apple_pay(",
          "113:         validation_url=validation_url,",
          "114:         merchant_identifier=merchant_identifier,",
          "115:         domain=domain,",
          "116:         display_name=display_name,",
          "117:         certificate=certificate,",
          "118:     )",
          "119:     return initialize_apple_pay_session(",
          "120:         validation_url=validation_url,",
          "121:         merchant_identifier=merchant_identifier,",
          "122:         domain=domain,",
          "123:         display_name=display_name,",
          "124:         certificate=certificate,",
          "125:     )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils/common.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils/common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from django.conf import settings",
          "9: from django_countries.fields import Country",
          "12:     checkout_line_total,",
          "13:     checkout_shipping_price,",
          "14:     checkout_total,",
          "15: )",
          "23: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "11: from ....checkout.calculations import (",
          "16: from ....checkout.models import Checkout",
          "17: from ....core.prices import quantize_price",
          "18: from ....discount.utils import fetch_active_discounts",
          "19: from ....payment.models import Payment",
          "20: from ... import PaymentError",
          "21: from ...interface import PaymentData, PaymentMethodInfo",
          "",
          "[Added Lines]",
          "11: from .....checkout.calculations import (",
          "16: from .....checkout.models import Checkout",
          "17: from .....core.prices import quantize_price",
          "18: from .....discount.utils import fetch_active_discounts",
          "19: from .....payment.models import Payment",
          "20: from .... import PaymentError",
          "21: from ....interface import PaymentData, PaymentMethodInfo",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: from ...gateway import payment_refund_or_void",
          "42: from ...interface import GatewayConfig, GatewayResponse",
          "43: from ...utils import create_payment_information, create_transaction, gateway_postprocess",
          "46: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "44: from .utils import FAILED_STATUSES, api_call, from_adyen_price",
          "",
          "[Added Lines]",
          "44: from .utils.common import FAILED_STATUSES, api_call, from_adyen_price",
          "",
          "---------------"
        ],
        "saleor/payment/interface.py||saleor/payment/interface.py": [
          "File: saleor/payment/interface.py -> saleor/payment/interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:     name: str",
          "124:     currencies: List[str]",
          "125:     config: List[Dict[str, Any]]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: @dataclass",
          "129: class InitializedPaymentResponse:",
          "130:     gateway: str",
          "131:     name: str",
          "132:     data: Optional[JSONType] = None",
          "",
          "---------------"
        ],
        "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py": [
          "File: saleor/plugins/base_plugin.py -> saleor/plugins/base_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from ..payment.interface import (",
          "11:     CustomerSource,",
          "12:     GatewayResponse,",
          "13:     PaymentData,",
          "14:     PaymentGateway,",
          "15: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:     InitializedPaymentResponse,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:     STRING = \"String\"",
          "34:     BOOLEAN = \"Boolean\"",
          "35:     SECRET = \"Secret\"",
          "36:     PASSWORD = \"Password\"",
          "37:     CHOICES = [",
          "38:         (STRING, \"Field is a String\"),",
          "39:         (BOOLEAN, \"Field is a Boolean\"),",
          "40:         (SECRET, \"Field is a Secret\"),",
          "41:         (PASSWORD, \"Field is a Password\"),",
          "42:     ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     SECRET_MULTILINE = \"SecretMultiline\"",
          "44:         (SECRET_MULTILINE, \"Field is a Secret multiline\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:         \"\"\"Triggered when ShopFetchTaxRates mutation is called.\"\"\"",
          "369:         return NotImplemented",
          "371:     def authorize_payment(",
          "372:         self, payment_information: \"PaymentData\", previous_value",
          "373:     ) -> \"GatewayResponse\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374:     def initialize_payment(",
          "375:         self, payment_data: dict, previous_value",
          "376:     ) -> \"InitializedPaymentResponse\":",
          "377:         return NotImplemented",
          "",
          "---------------"
        ],
        "saleor/plugins/manager.py||saleor/plugins/manager.py": [
          "File: saleor/plugins/manager.py -> saleor/plugins/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:         GatewayResponse,",
          "31:         CustomerSource,",
          "32:         PaymentGateway,",
          "33:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:         InitializedPaymentResponse,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:         default_value = None",
          "315:         return self.__run_method_on_plugins(\"checkout_updated\", default_value, checkout)",
          "317:     def authorize_payment(",
          "318:         self, gateway: str, payment_information: \"PaymentData\"",
          "319:     ) -> \"GatewayResponse\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:     def initialize_payment(",
          "319:         self, gateway, payment_data: dict",
          "320:     ) -> Optional[\"InitializedPaymentResponse\"]:",
          "321:         method_name = \"initialize_payment\"",
          "322:         default_value = None",
          "323:         gtw = self.get_plugin(gateway)",
          "324:         if not gtw:",
          "325:             return None",
          "327:         return self.__run_method_on_single_plugin(",
          "328:             gtw, method_name, previous_value=default_value, payment_data=payment_data,",
          "329:         )",
          "",
          "---------------"
        ],
        "saleor/plugins/tests/sample_plugins.py||saleor/plugins/tests/sample_plugins.py": [
          "File: saleor/plugins/tests/sample_plugins.py -> saleor/plugins/tests/sample_plugins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:             \"help_text\": \"API key\",",
          "48:             \"label\": \"Private key\",",
          "49:         },",
          "50:     }",
          "52:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:         \"certificate\": {",
          "51:             \"type\": ConfigurationTypeField.SECRET_MULTILINE,",
          "52:             \"help_text\": \"\",",
          "53:             \"label\": \"Multiline certificate\",",
          "54:         },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0fcf02eae3c17a985255300437669e1742a9147",
      "candidate_info": {
        "commit_hash": "f0fcf02eae3c17a985255300437669e1742a9147",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/f0fcf02eae3c17a985255300437669e1742a9147",
        "files": [
          "CHANGELOG.md",
          "saleor/graphql/schema.graphql",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/plugins/base_plugin.py",
          "saleor/plugins/manager.py",
          "saleor/plugins/tests/sample_plugins.py",
          "saleor/plugins/tests/test_views.py",
          "saleor/plugins/views.py",
          "saleor/urls.py"
        ],
        "message": "Rebuild webhooks logic to handle plugins with channel configuration (#7332)\n\n* Add new configuration type field - OUTPUT\n\n* Add possibility to use webhook with plugins per channels\n\n* Update the changelog\n\n* Fix typo in function name",
        "before_after_code_files": [
          "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py",
          "saleor/plugins/manager.py||saleor/plugins/manager.py",
          "saleor/plugins/tests/sample_plugins.py||saleor/plugins/tests/sample_plugins.py",
          "saleor/plugins/tests/test_views.py||saleor/plugins/tests/test_views.py",
          "saleor/plugins/views.py||saleor/plugins/views.py",
          "saleor/urls.py||saleor/urls.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
          ],
          "candidate": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
          "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
          "--- Hunk 1 ---",
          "[Context before]",
          "1301:   SECRET",
          "1302:   PASSWORD",
          "1303:   SECRETMULTILINE",
          "1304: }",
          "1306: type ConfirmAccount {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1304:   OUTPUT",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import json",
          "2: from typing import List, Optional",
          "5: import Adyen",
          "6: import opentracing",
          "",
          "[Removed Lines]",
          "3: from urllib.parse import urlencode",
          "",
          "[Added Lines]",
          "3: from urllib.parse import urlencode, urljoin",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: from django.core.exceptions import ObjectDoesNotExist, ValidationError",
          "11: from django.core.handlers.wsgi import WSGIRequest",
          "12: from django.http import HttpResponse, HttpResponseNotFound",
          "13: from requests.exceptions import SSLError",
          "15: from ....checkout.models import Checkout",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: from django.urls import reverse",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:             \"help_text\": (",
          "136:                 \"Provide secret key generated on Adyen side.\"",
          "137:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
          "140:             ),",
          "141:             \"label\": \"HMAC secret key\",",
          "142:         },",
          "",
          "[Removed Lines]",
          "138:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
          "139:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
          "",
          "[Added Lines]",
          "139:                 \"ions-in-your-customer-area.\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:                 \"Base User provided on the Adyen side to authenticate incoming \"",
          "147:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
          "148:                 \"set-up-notifications-in-your-customer-area \"",
          "151:             ),",
          "152:             \"label\": \"Notification user\",",
          "153:         },",
          "",
          "[Removed Lines]",
          "149:                 \"The Saleor webhook url is \"",
          "150:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:                 \"User password provided on the Adyen side for authenticate incoming \"",
          "158:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
          "159:                 \"set-up-notifications-in-your-customer-area \"",
          "162:             ),",
          "163:             \"label\": \"Notification password\",",
          "164:         },",
          "",
          "[Removed Lines]",
          "160:                 \"The Saleor webhook url is \"",
          "161:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "184:             ),",
          "185:             \"label\": \"Apple Pay certificate\",",
          "186:         },",
          "187:     }",
          "189:     def __init__(self, *args, **kwargs):",
          "190:         super().__init__(*args, **kwargs)",
          "191:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
          "192:         self.config = GatewayConfig(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:         \"webhook-endpoint\": {",
          "184:             \"type\": ConfigurationTypeField.OUTPUT,",
          "185:             \"help_text\": (",
          "186:                 \"Endpoint which should be used to activate Adyen's webhooks. \"",
          "187:                 \"More details can be find here: \"",
          "188:                 \"https://docs.adyen.com/development-resources/webhooks\"",
          "189:             ),",
          "190:             \"label\": \"Webhook endpoint\",",
          "191:         },",
          "195:         channel = kwargs[\"channel\"]",
          "196:         raw_configuration = kwargs[\"configuration\"].copy()",
          "197:         self._insert_webhook_endpoint_to_configuration(raw_configuration, channel)",
          "198:         kwargs[\"configuration\"] = raw_configuration",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214:             xapikey=api_key, live_endpoint_prefix=live_endpoint, platform=platform",
          "215:         )",
          "217:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
          "218:         config = self._get_gateway_config()",
          "219:         if path.startswith(WEBHOOK_PATH):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:     def _insert_webhook_endpoint_to_configuration(self, raw_configuration, channel):",
          "228:         updated = False",
          "229:         for config in raw_configuration:",
          "230:             if config[\"name\"] == \"webhook-endpoint\":",
          "231:                 updated = True",
          "232:                 config[\"value\"] = self._generate_webhook_url(channel)",
          "233:         if not updated:",
          "234:             raw_configuration.append(",
          "235:                 {",
          "236:                     \"name\": \"webhook-endpoint\",",
          "237:                     \"value\": self._generate_webhook_url(channel),",
          "238:                 }",
          "239:             )",
          "241:     def _generate_webhook_url(self, channel) -> str:",
          "242:         api_path = reverse(",
          "243:             \"plugins-per-channel\",",
          "244:             kwargs={\"plugin_id\": self.PLUGIN_ID, \"channel_slug\": channel.slug},",
          "245:         )",
          "246:         base_url = build_absolute_uri(api_path)",
          "247:         return urljoin(base_url, \"webhooks\")  # type: ignore",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "315:         return_url = prepare_url(",
          "316:             params,",
          "317:             build_absolute_uri(",
          "320:         )",
          "321:         request_data = request_data_for_payment(",
          "322:             payment_information,",
          "",
          "[Removed Lines]",
          "318:                 f\"/plugins/{self.PLUGIN_ID}/additional-actions\"",
          "319:             ),  # type: ignore",
          "",
          "[Added Lines]",
          "350:                 f\"/plugins/channel/{self.channel.slug}/\"  # type: ignore",
          "351:                 f\"{self.PLUGIN_ID}/additional-actions\"",
          "352:             ),",
          "",
          "---------------"
        ],
        "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py": [
          "File: saleor/plugins/base_plugin.py -> saleor/plugins/base_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     SECRET = \"Secret\"",
          "42:     SECRET_MULTILINE = \"SecretMultiline\"",
          "43:     PASSWORD = \"Password\"",
          "44:     CHOICES = [",
          "45:         (STRING, \"Field is a String\"),",
          "46:         (MULTILINE, \"Field is a Multiline\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     OUTPUT = \"OUTPUT\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         (SECRET, \"Field is a Secret\"),",
          "49:         (PASSWORD, \"Field is a Password\"),",
          "50:         (SECRET_MULTILINE, \"Field is a Secret multiline\"),",
          "51:     ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:         (OUTPUT, \"Field is a read only\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "667:                         and not isinstance(new_value, bool)",
          "668:                     ):",
          "669:                         new_value = new_value.lower() == \"true\"",
          "670:                     config_item.update([(\"value\", new_value)])",
          "672:         # Get new keys that don't exist in current_config and extend it.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "672:                     if item_type == ConfigurationTypeField.OUTPUT:",
          "673:                         # OUTPUT field is read only. No need to update it",
          "674:                         continue",
          "",
          "---------------"
        ],
        "saleor/plugins/manager.py||saleor/plugins/manager.py": [
          "File: saleor/plugins/manager.py -> saleor/plugins/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "907:         default_value = False",
          "908:         return self.__run_method_on_plugins(\"fetch_taxes_data\", default_value)",
          "911:         split_path = request.path.split(plugin_id, maxsplit=1)",
          "912:         path = None",
          "913:         if len(split_path) == 2:",
          "914:             path = split_path[1]",
          "917:         default_value = HttpResponseNotFound()",
          "918:         plugin = self.get_plugin(plugin_id)",
          "919:         if not plugin:",
          "",
          "[Removed Lines]",
          "910:     def webhook(self, request: WSGIRequest, plugin_id: str) -> HttpResponse:",
          "916:         # FIXME",
          "",
          "[Added Lines]",
          "909:     def webhook_endpoint_without_channel(",
          "910:         self, request: WSGIRequest, plugin_id: str",
          "911:     ) -> HttpResponse:",
          "912:         # This should be removed in 3.0.0-a.25 as we want to give a possibility to have",
          "913:         # no downtime between RCs",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "922:             plugin, \"webhook\", default_value, request, path",
          "923:         )",
          "925:     def notify(",
          "926:         self,",
          "927:         event: \"NotifyEventTypeChoice\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927:     def webhook(",
          "928:         self, request: WSGIRequest, plugin_id: str, channel_slug: Optional[str] = None",
          "929:     ) -> HttpResponse:",
          "930:         split_path = request.path.split(plugin_id, maxsplit=1)",
          "931:         path = None",
          "932:         if len(split_path) == 2:",
          "933:             path = split_path[1]",
          "935:         default_value = HttpResponseNotFound()",
          "936:         plugin = self.get_plugin(plugin_id, channel_slug=channel_slug)",
          "937:         if not plugin:",
          "938:             return default_value",
          "940:         if not plugin.active:",
          "941:             return default_value",
          "943:         if plugin.CONFIGURATION_PER_CHANNEL and not channel_slug:",
          "944:             return HttpResponseNotFound(",
          "945:                 \"Incorrect endpoint. Use /plugins/channel/<channel_slug>/\"",
          "946:                 f\"{plugin.PLUGIN_ID}/\"",
          "947:             )",
          "949:         return self.__run_method_on_single_plugin(",
          "950:             plugin, \"webhook\", default_value, request, path",
          "951:         )",
          "",
          "---------------"
        ],
        "saleor/plugins/tests/sample_plugins.py||saleor/plugins/tests/sample_plugins.py": [
          "File: saleor/plugins/tests/sample_plugins.py -> saleor/plugins/tests/sample_plugins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:     }",
          "241: class PluginInactive(BasePlugin):",
          "242:     PLUGIN_ID = \"mirumee.taxes.plugin.inactive\"",
          "243:     PLUGIN_NAME = \"PluginInactive\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:     }",
          "241: class InactiveChannelPluginSample(PluginSample):",
          "242:     PLUGIN_ID = \"channel.plugin.inactive.sample\"",
          "243:     PLUGIN_NAME = \"Inactive Channel Plugin\"",
          "244:     PLUGIN_DESCRIPTION = \"Test channel plugin\"",
          "245:     DEFAULT_ACTIVE = False",
          "246:     CONFIGURATION_PER_CHANNEL = True",
          "247:     DEFAULT_CONFIGURATION = [{\"name\": \"input-per-channel\", \"value\": None}]",
          "",
          "---------------"
        ],
        "saleor/plugins/tests/test_views.py||saleor/plugins/tests/test_views.py": [
          "File: saleor/plugins/tests/test_views.py -> saleor/plugins/tests/test_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "6: @pytest.mark.parametrize(",
          "",
          "[Removed Lines]",
          "3: from .sample_plugins import PluginInactive, PluginSample",
          "",
          "[Added Lines]",
          "3: from .sample_plugins import (",
          "4:     ChannelPluginSample,",
          "5:     InactiveChannelPluginSample,",
          "6:     PluginInactive,",
          "7:     PluginSample,",
          "8: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     response = client.post(f\"/plugins/{plugin_id}{plugin_path}\")",
          "23:     assert response.status_code == status_code",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: @pytest.mark.parametrize(",
          "32:     \"plugin_id, plugin_path, status_code\",",
          "33:     [",
          "34:         (PluginSample.PLUGIN_ID, \"/webhook/paid\", 200),",
          "35:         (ChannelPluginSample.PLUGIN_ID, \"/webhook/paid\", 200),",
          "36:         (InactiveChannelPluginSample.PLUGIN_ID, \"/webhook/paid\", 404),",
          "37:         (\"wrong.id\", \"/webhook/\", 404),",
          "38:     ],",
          "39: )",
          "40: def test_plugin_per_channel_webhook_view(",
          "41:     plugin_id, plugin_path, status_code, client, settings, monkeypatch, channel_PLN",
          "42: ):",
          "43:     settings.PLUGINS = [",
          "44:         \"saleor.plugins.tests.sample_plugins.PluginSample\",",
          "45:         \"saleor.plugins.tests.sample_plugins.ChannelPluginSample\",",
          "46:         \"saleor.plugins.tests.sample_plugins.InactiveChannelPluginSample\",",
          "47:     ]",
          "49:     response = client.post(",
          "50:         f\"/plugins/channel/{channel_PLN.slug}/{plugin_id}{plugin_path}\"",
          "51:     )",
          "52:     assert response.status_code == status_code",
          "55: @pytest.mark.parametrize(",
          "56:     \"plugin_id, plugin_path, status_code\",",
          "57:     [",
          "58:         (PluginSample.PLUGIN_ID, \"/webhook/paid\", 200),",
          "59:         (PluginInactive.PLUGIN_ID, \"/webhook/paid\", 404),",
          "60:         (\"wrong.id\", \"/webhook/\", 404),",
          "61:     ],",
          "62: )",
          "63: def test_plugin_global_webhook_view(",
          "64:     plugin_id, plugin_path, status_code, client, settings, monkeypatch, channel_PLN",
          "65: ):",
          "66:     settings.PLUGINS = [",
          "67:         \"saleor.plugins.tests.sample_plugins.PluginSample\",",
          "68:         \"saleor.plugins.tests.sample_plugins.PluginInactive\",",
          "69:     ]",
          "71:     response = client.post(f\"/plugins/global/{plugin_id}{plugin_path}\")",
          "72:     assert response.status_code == status_code",
          "",
          "---------------"
        ],
        "saleor/plugins/views.py||saleor/plugins/views.py": [
          "File: saleor/plugins/views.py -> saleor/plugins/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: def handle_plugin_webhook(request: WSGIRequest, plugin_id: str) -> HttpResponse:",
          "8:     manager = get_plugins_manager()",
          "",
          "[Removed Lines]",
          "9:     return manager.webhook(request, plugin_id)",
          "",
          "[Added Lines]",
          "9:     return manager.webhook_endpoint_without_channel(request, plugin_id)",
          "12: def handle_global_plugin_webhook(request: WSGIRequest, plugin_id: str) -> HttpResponse:",
          "13:     manager = get_plugins_manager()",
          "14:     return manager.webhook(request, plugin_id, channel_slug=None)",
          "17: def handle_plugin_per_channel_webhook(",
          "18:     request: WSGIRequest, plugin_id: str, channel_slug: str",
          "19: ) -> HttpResponse:",
          "20:     manager = get_plugins_manager()",
          "21:     return manager.webhook(request, plugin_id, channel_slug=channel_slug)",
          "",
          "---------------"
        ],
        "saleor/urls.py||saleor/urls.py": [
          "File: saleor/urls.py -> saleor/urls.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from .graphql.api import schema",
          "8: from .graphql.views import GraphQLView",
          "10: from .product.views import digital_product",
          "12: urlpatterns = [",
          "",
          "[Removed Lines]",
          "9: from .plugins.views import handle_plugin_webhook",
          "",
          "[Added Lines]",
          "9: from .plugins.views import (",
          "10:     handle_global_plugin_webhook,",
          "11:     handle_plugin_per_channel_webhook,",
          "12:     handle_plugin_webhook,",
          "13: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:         digital_product,",
          "17:         name=\"digital-product\",",
          "18:     ),",
          "19:     url(",
          "20:         r\"plugins/(?P<plugin_id>[.0-9A-Za-z_\\-]+)/\",",
          "21:         handle_plugin_webhook,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:     url(",
          "24:         r\"plugins/channel/(?P<channel_slug>[.0-9A-Za-z_\\-]+)/\"",
          "25:         r\"(?P<plugin_id>[.0-9A-Za-z_\\-]+)/\",",
          "26:         handle_plugin_per_channel_webhook,",
          "27:         name=\"plugins-per-channel\",",
          "28:     ),",
          "29:     url(",
          "30:         r\"plugins/global/(?P<plugin_id>[.0-9A-Za-z_\\-]+)/\",",
          "31:         handle_global_plugin_webhook,",
          "32:         name=\"plugins-global\",",
          "33:     ),",
          "",
          "---------------"
        ]
      }
    }
  ]
}