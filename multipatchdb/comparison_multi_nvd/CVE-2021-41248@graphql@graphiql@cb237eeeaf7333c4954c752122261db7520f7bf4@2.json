{
  "cve_id": "CVE-2021-41248",
  "cve_desc": "GraphiQL is the reference implementation of this monorepo, GraphQL IDE, an official project under the GraphQL Foundation. All versions of graphiql older than graphiql@1.4.7 are vulnerable to compromised HTTP schema introspection responses or schema prop values with malicious GraphQL type names, exposing a dynamic XSS attack surface that can allow code injection on operation autocomplete. In order for the attack to take place, the user must load a vulnerable schema in graphiql. There are a number of ways that can occur. By default, the schema URL is not attacker-controllable in graphiql or in its suggested implementations or examples, leaving only very complex attack vectors. If a custom implementation of graphiql's fetcher allows the schema URL to be set dynamically, such as a URL query parameter like ?endpoint= in graphql-playground, or a database provided value, then this custom graphiql implementation is vulnerable to phishing attacks, and thus much more readily available, low or no privelege level xss attacks. The URLs could look like any generic looking graphql schema URL. It should be noted that desktop clients such as Altair, Insomnia, Postwoman, do not appear to be impacted by this. This vulnerability does not impact codemirror-graphql, monaco-graphql or other dependents, as it exists in onHasCompletion.ts in graphiql. It does impact all forks of graphiql, and every released version of graphiql.",
  "repo": "graphql/graphiql",
  "patch_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
  "patch_info": {
    "commit_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
    "repo": "graphql/graphiql",
    "commit_url": "https://github.com/graphql/graphiql/commit/cb237eeeaf7333c4954c752122261db7520f7bf4",
    "files": [
      "README.md",
      "SECURITY.md",
      "docs/security/2021-introspection-schema-xss.md",
      "packages/graphiql/README.md",
      "packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/package.json",
      "packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js",
      "yarn.lock"
    ],
    "message": "Merge pull request from GHSA-x4r7-m2q9-69c8\n\nThis change fixes an XSS vulnerability that has been present since the first\ncommit of GraphiQL when used with an untrusted GraphQL server. It applies three\nstrategies to fix via defense-in-depth: HTML escaping a string in a contexts\nthat uses innerHTML; validating incoming schemas with graphql-js validateSchema;\nand updating markdown-it to the latest version.\n\nSee docs/security/2021-introspection-schema-xss.md for more details.\n\nCo-authored-by: Rikki <rikki.schulte@gmail.com>",
    "before_after_code_files": [
      "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
      "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:   it('Executes a GraphQL query over HTTP that has the expected result', () => {",
      "45:     cy.assertQueryResult({ query: testQuery }, mockSuccess);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:   it('Shows the expected error when the schema is invalid', () => {",
      "48:     cy.visit(`/?bad=true`);",
      "49:     cy.assertResult({",
      "50:       errors: [",
      "51:         {",
      "52:           message:",
      "53:             'Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"<img src=x onerror=alert(document.domain)>\" does not.',",
      "54:         },",
      "55:       ],",
      "56:     });",
      "57:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts": [
      "File: packages/graphiql/cypress/support/commands.ts -> packages/graphiql/cypress/support/commands.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:   type MockResult =",
      "20:     | { data: any }",
      "21:     | { data: any; hasNext?: boolean }",
      "23:   interface Chainable<Subject = any> {",
      "",
      "[Removed Lines]",
      "22:     | { error: any[] };",
      "",
      "[Added Lines]",
      "22:     | { error: any[] }",
      "23:     | { errors: any[] };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     visitWithOp(op: Op): Chainable<Element>;",
      "32:     clickPrettify(): Chainable<Element>;",
      "33:     assertHasValues(op: Op): Chainable<Element>;",
      "34:     assertQueryResult(",
      "35:       op: Op,",
      "36:       expectedResult: MockResult,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:     assertResult(result: MockResult): Chainable<Element>;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:     expect(value).to.deep.equal(JSON.stringify(mockSuccess, null, 2));",
      "92:   });",
      "93: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "97: Cypress.Commands.add('assertResult', (expectedResult, timeout = 200) => {",
      "98:   cy.wait(timeout);",
      "99:   cy.window().then(w => {",
      "101:     const value = w.g.resultComponent.viewer.getValue();",
      "102:     expect(value).to.deep.equal(JSON.stringify(expectedResult, null, 2));",
      "103:   });",
      "104: });",
      "",
      "---------------"
    ],
    "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js": [
      "File: packages/graphiql/resources/renderExample.js -> packages/graphiql/resources/renderExample.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:   history.replaceState(null, null, newSearch);",
      "92: }",
      "",
      "[Removed Lines]",
      "94: const isDev = window.location.hostname.match(/localhost$/);",
      "95: const api = isDev ? '/graphql' : '/.netlify/functions/schema-demo';",
      "",
      "[Added Lines]",
      "94: function getSchemaUrl() {",
      "95:   const isDev = window.location.hostname.match(/localhost$/);",
      "97:   if (isDev) {",
      "99:     if (parameters.bad && parameters.bad === 'true') {",
      "100:       return '/bad/graphql';",
      "101:     } else {",
      "102:       return '/graphql';",
      "103:     }",
      "104:   }",
      "105:   return '/.netlify/functions/schema-demo';",
      "106: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101: ReactDOM.render(",
      "102:   React.createElement(GraphiQL, {",
      "104:     query: parameters.query,",
      "105:     variables: parameters.variables,",
      "106:     headers: parameters.headers,",
      "",
      "[Removed Lines]",
      "103:     fetcher: GraphiQL.createFetcher({ url: api }),",
      "",
      "[Added Lines]",
      "114:     fetcher: GraphiQL.createFetcher({ url: getSchemaUrl() }),",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
      "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import React from 'react';",
      "10: import { FieldType } from './DocExplorer/types';",
      "12: import FieldDoc from './DocExplorer/FieldDoc';",
      "",
      "[Removed Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType } from 'graphql';",
      "",
      "[Added Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType, GraphQLError } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: type DocExplorerProps = {",
      "31:   schema?: GraphQLSchema | null;",
      "32: };",
      "34: type DocExplorerState = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:   ) {",
      "69:     return (",
      "70:       this.props.schema !== nextProps.schema ||",
      "72:     );",
      "73:   }",
      "75:   render() {",
      "77:     const navStack = this.state.navStack;",
      "78:     const navItem = navStack[navStack.length - 1];",
      "80:     let content;",
      "83:       content = (",
      "84:         <div className=\"spinner-container\">",
      "",
      "[Removed Lines]",
      "71:       this.state.navStack !== nextState.navStack",
      "76:     const { schema } = this.props;",
      "81:     if (schema === undefined) {",
      "",
      "[Added Lines]",
      "72:       this.state.navStack !== nextState.navStack ||",
      "73:       this.props.schemaErrors !== nextProps.schemaErrors",
      "78:     const { schema, schemaErrors } = this.props;",
      "83:     if (schemaErrors) {",
      "84:       content = (",
      "85:         <div className=\"error-container\">{'Error fetching schema'}</div>",
      "86:       );",
      "87:     } else if (schema === undefined) {",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
      "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:   ValidationRule,",
      "24:   FragmentDefinitionNode,",
      "25:   DocumentNode,",
      "26: } from 'graphql';",
      "27: import copyToClipboard from 'copy-to-clipboard';",
      "28: import { getFragmentDependenciesForAST } from 'graphql-language-service-utils';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26:   GraphQLError,",
      "27:   formatError as formatGraphQLError,",
      "28:   GraphQLFormattedError,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66: } from '@graphiql/toolkit';",
      "67: import HistoryStore from '../utility/HistoryStore';",
      "69: const DEFAULT_DOC_EXPLORER_WIDTH = 350;",
      "71: const majorVersion = parseInt(React.version.slice(0, 2), 10);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72: import { validateSchema } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95:   additionalContent?: React.ReactNode;",
      "96: };",
      "98: export type GraphiQLProps = {",
      "99:   fetcher: Fetcher;",
      "100:   schema?: GraphQLSchema;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103: export type GenericError =",
      "104:   | Error",
      "105:   | string",
      "106:   | readonly Error[]",
      "107:   | readonly string[]",
      "108:   | GraphQLError",
      "109:   | readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "121:   editorTheme?: string;",
      "122:   onToggleHistory?: (historyPaneOpen: boolean) => void;",
      "123:   ResultsTooltip?: typeof Component | FunctionComponent;",
      "124:   readOnly?: boolean;",
      "125:   docExplorerOpen?: boolean;",
      "126:   toolbar?: GraphiQLToolbarConfig;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "140:   dangerouslyAssumeSchemaIsValid?: boolean;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "143:   headerEditorEnabled: boolean;",
      "144:   shouldPersistHeaders: boolean;",
      "145:   historyPaneOpen: boolean;",
      "146:   docExplorerWidth: number;",
      "147:   isWaitingForResponse: boolean;",
      "148:   subscription?: Unsubscribable | null;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "152:   maxHistoryLength: number;",
      "153: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "173: const stringify = (obj: unknown): string => JSON.stringify(obj, null, 2);",
      "175: const formatSingleError = (error: Error): Error => ({",
      "176:   ...error,",
      "178:   message: error.message,",
      "179:   stack: error.stack,",
      "180: });",
      "182: type InputError = Error | GraphQLError | string;",
      "184: const handleSingleError = (",
      "185:   error: InputError,",
      "186: ): GraphQLFormattedError | Error | string => {",
      "187:   if (error instanceof GraphQLError) {",
      "188:     return formatGraphQLError(error);",
      "189:   }",
      "190:   if (error instanceof Error) {",
      "191:     return formatSingleError(error);",
      "192:   }",
      "193:   return error;",
      "194: };",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "166:     return JSON.stringify(result, null, 2);",
      "167:   }",
      "177:   _editorQueryID = 0;",
      "",
      "[Removed Lines]",
      "169:   static formatError(rawError: Error) {",
      "170:     const result = Array.isArray(rawError)",
      "171:       ? rawError.map(formatSingleError)",
      "172:       : formatSingleError(rawError);",
      "173:     return JSON.stringify(result, null, 2);",
      "174:   }",
      "",
      "[Added Lines]",
      "210:   static formatError = (error: GenericError): string => {",
      "211:     if (Array.isArray(error)) {",
      "212:       return stringify({",
      "213:         errors: error.map((e: InputError) => handleSingleError(e)),",
      "214:       });",
      "215:     }",
      "217:     return stringify({ errors: handleSingleError(error) });",
      "218:   };",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "266:     const headerEditorEnabled = props.headerEditorEnabled ?? false;",
      "267:     const shouldPersistHeaders = props.shouldPersistHeaders ?? false;",
      "270:     this.state = {",
      "272:       query,",
      "273:       variables: variables as string,",
      "274:       headers: headers as string,",
      "275:       operationName,",
      "276:       docExplorerOpen,",
      "278:       editorFlex: Number(this._storage.get('editorFlex')) || 1,",
      "279:       secondaryEditorOpen,",
      "280:       secondaryEditorHeight:",
      "",
      "[Removed Lines]",
      "271:       schema: props.schema,",
      "277:       response: props.response,",
      "",
      "[Added Lines]",
      "313:     let schema = props.schema;",
      "314:     let response = props.response;",
      "315:     let schemaErrors: readonly GraphQLError[] | undefined = undefined;",
      "316:     if (schema && !this.props.dangerouslyAssumeSchemaIsValid) {",
      "317:       const validationErrors = validateSchema(schema);",
      "318:       if (validationErrors && validationErrors.length > 0) {",
      "321:         response = GraphiQL.formatError(validationErrors);",
      "322:         schema = undefined;",
      "323:         schemaErrors = validationErrors;",
      "324:       }",
      "325:     }",
      "329:       schema,",
      "335:       schemaErrors,",
      "336:       response,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "357:         nextQuery !== this.state.query ||",
      "358:         nextOperationName !== this.state.operationName)",
      "359:     ) {",
      "360:       const updatedQueryAttributes = this._updateQueryFacts(",
      "361:         nextQuery,",
      "362:         nextOperationName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:       if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "420:         const validationErrors = validateSchema(nextSchema);",
      "421:         if (validationErrors && validationErrors.length > 0) {",
      "422:           this.handleSchemaErrors(validationErrors);",
      "423:           nextSchema = undefined;",
      "424:         }",
      "425:       }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "665:               ref={c => {",
      "666:                 this.docExplorerComponent = c;",
      "667:               }}",
      "668:               schema={this.state.schema}>",
      "669:               <button",
      "670:                 className=\"docExplorerHide\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "735:               schemaErrors={this.state.schemaErrors}",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "871:         }",
      "873:         if (typeof result !== 'string' && 'data' in result) {",
      "877:         } else {",
      "878:           const responseString =",
      "879:             typeof result === 'string' ? result : GraphiQL.formatResult(result);",
      "885:         }",
      "886:       })",
      "887:       .catch(error => {",
      "892:       });",
      "893:   }",
      "895:   private async _fetchQuery(",
      "896:     query: string,",
      "897:     variables: string,",
      "",
      "[Removed Lines]",
      "874:           const schema = buildClientSchema(result.data);",
      "875:           const queryFacts = getOperationFacts(schema, this.state.query);",
      "876:           this.safeSetState({ schema, ...queryFacts });",
      "880:           this.safeSetState({",
      "882:             schema: undefined,",
      "883:             response: responseString,",
      "884:           });",
      "888:         this.safeSetState({",
      "889:           schema: undefined,",
      "890:           response: error ? GraphiQL.formatError(error) : undefined,",
      "891:         });",
      "",
      "[Added Lines]",
      "942:           let schema: GraphQLSchema | undefined = buildClientSchema(",
      "943:             result.data,",
      "944:           );",
      "945:           if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "946:             const errors = validateSchema(schema);",
      "948:             if (errors && errors.length > 0) {",
      "949:               schema = undefined;",
      "950:               this.handleSchemaErrors(errors);",
      "951:             }",
      "952:           }",
      "953:           if (schema) {",
      "954:             const queryFacts = getOperationFacts(schema, this.state.query);",
      "955:             this.safeSetState({",
      "956:               schema,",
      "957:               ...queryFacts,",
      "958:               schemaErrors: undefined,",
      "959:             });",
      "960:           }",
      "965:           this.handleSchemaErrors([responseString]);",
      "969:         this.handleSchemaErrors([error]);",
      "973:   private handleSchemaErrors(",
      "974:     schemaErrors: readonly GraphQLError[] | readonly string[],",
      "975:   ) {",
      "976:     this.safeSetState({",
      "977:       response: schemaErrors ? GraphiQL.formatError(schemaErrors) : undefined,",
      "978:       schema: undefined,",
      "979:       schemaErrors,",
      "980:     });",
      "981:   }",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "908:       jsonVariables =",
      "909:         variables && variables.trim() !== '' ? JSON.parse(variables) : null;",
      "910:     } catch (error) {",
      "912:     }",
      "914:     if (typeof jsonVariables !== 'object') {",
      "",
      "[Removed Lines]",
      "911:       throw new Error(`Variables are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "999:       throw new Error(",
      "1000:         `Variables are invalid JSON: ${(error as Error).message}.`,",
      "1001:       );",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "919:       jsonHeaders =",
      "920:         headers && headers.trim() !== '' ? JSON.parse(headers) : null;",
      "921:     } catch (error) {",
      "923:     }",
      "925:     if (typeof jsonHeaders !== 'object') {",
      "",
      "[Removed Lines]",
      "922:       throw new Error(`Headers are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "1012:       throw new Error(`Headers are invalid JSON: ${(error as Error).message}.`);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1008:             } catch (error) {",
      "1009:               this.safeSetState({",
      "1010:                 isWaitingForResponse: false,",
      "1012:                 subscription: null,",
      "1013:               });",
      "1014:             }",
      "",
      "[Removed Lines]",
      "1011:                 response: error ? GraphiQL.formatError(error) : undefined,",
      "",
      "[Added Lines]",
      "1101:                 response: error",
      "1102:                   ? GraphiQL.formatError(error as Error)",
      "1103:                   : undefined,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1167:     } catch (error) {",
      "1168:       this.setState({",
      "1169:         isWaitingForResponse: false,",
      "1171:       });",
      "1172:     }",
      "1173:   };",
      "",
      "[Removed Lines]",
      "1170:         response: error.message,",
      "",
      "[Added Lines]",
      "1262:         response: (error as Error).message,",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1699: }",
      "1700: GraphiQLFooter.displayName = 'GraphiQLFooter';",
      "1709: const defaultQuery = `# Welcome to GraphiQL",
      "1710: #",
      "1711: # GraphiQL is an in-browser tool for writing, validating, and",
      "",
      "[Removed Lines]",
      "1702: const formatSingleError = (error: Error) => ({",
      "1703:   ...error,",
      "1705:   message: error.message,",
      "1706:   stack: error.stack,",
      "1707: });",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts": [
      "File: packages/graphiql/src/utility/onHasCompletion.ts -> packages/graphiql/src/utility/onHasCompletion.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:   GraphQLType,",
      "13:   GraphQLField,",
      "14: } from 'graphql';",
      "15: import MD from 'markdown-it';",
      "17: const md = new MD();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: import escapeHTML from 'escape-html';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:   if (type instanceof GraphQLList) {",
      "109:     return `[${renderType(type.ofType)}]`;",
      "110:   }",
      "112: }",
      "",
      "[Removed Lines]",
      "111:   return `<a class=\"typeName\">${type.name}</a>`;",
      "",
      "[Added Lines]",
      "112:   return `<a class=\"typeName\">${escapeHTML(type.name)}</a>`;",
      "",
      "---------------"
    ],
    "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js": [
      "File: packages/graphiql/test/bad-schema.js -> packages/graphiql/test/bad-schema.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: const { buildClientSchema } = require('graphql');",
      "3: module.exports.schema = {",
      "4:   __schema: {",
      "5:     queryType: {",
      "6:       name: 'Query',",
      "7:     },",
      "8:     mutationType: null,",
      "9:     subscriptionType: null,",
      "10:     types: [",
      "11:       {",
      "12:         kind: 'OBJECT',",
      "13:         name: 'Query',",
      "14:         description: null,",
      "15:         fields: [",
      "16:           {",
      "17:             name: 'user',",
      "18:             description: null,",
      "19:             args: [",
      "20:               {",
      "21:                 name: 'id',",
      "22:                 description: null,",
      "23:                 type: {",
      "24:                   kind: 'NON_NULL',",
      "25:                   name: null,",
      "26:                   ofType: {",
      "27:                     kind: 'SCALAR',",
      "28:                     name: 'ID',",
      "29:                     ofType: null,",
      "30:                   },",
      "31:                 },",
      "32:                 defaultValue: null,",
      "33:               },",
      "34:             ],",
      "35:             type: {",
      "36:               kind: 'OBJECT',",
      "37:               name: '<img src=x onerror=alert(document.domain)>',",
      "38:               ofType: null,",
      "39:             },",
      "40:             isDeprecated: false,",
      "41:             deprecationReason: null,",
      "42:           },",
      "43:         ],",
      "44:         inputFields: null,",
      "45:         interfaces: [],",
      "46:         enumValues: null,",
      "47:         possibleTypes: null,",
      "48:       },",
      "49:       {",
      "50:         kind: 'SCALAR',",
      "51:         name: 'ID',",
      "52:         description: '',",
      "53:         fields: null,",
      "54:         inputFields: null,",
      "55:         interfaces: null,",
      "56:         enumValues: null,",
      "57:         possibleTypes: null,",
      "58:       },",
      "59:       {",
      "60:         kind: 'OBJECT',",
      "61:         name: '<img src=x onerror=alert(document.domain)>',",
      "62:         description: null,",
      "63:         fields: [",
      "64:           {",
      "65:             name: 'name',",
      "66:             description: null,",
      "67:             args: [],",
      "68:             type: {",
      "69:               kind: 'NON_NULL',",
      "70:               name: null,",
      "71:               ofType: {",
      "72:                 kind: 'SCALAR',",
      "73:                 name: 'String',",
      "74:                 ofType: null,",
      "75:               },",
      "76:             },",
      "77:             isDeprecated: false,",
      "78:             deprecationReason: null,",
      "79:           },",
      "80:         ],",
      "81:         inputFields: null,",
      "82:         interfaces: [],",
      "83:         enumValues: null,",
      "84:         possibleTypes: null,",
      "85:       },",
      "86:       {",
      "87:         kind: 'SCALAR',",
      "88:         name: 'String',",
      "89:         description: '',",
      "90:         fields: null,",
      "91:         inputFields: null,",
      "92:         interfaces: null,",
      "93:         enumValues: null,",
      "94:         possibleTypes: null,",
      "95:       },",
      "96:     ],",
      "97:     directives: [],",
      "98:   },",
      "99: };",
      "",
      "---------------"
    ],
    "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js": [
      "File: packages/graphiql/test/beforeDevServer.js -> packages/graphiql/test/beforeDevServer.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: const path = require('path');",
      "10: const { graphqlHTTP } = require('express-graphql');",
      "11: const schema = require('./schema');",
      "13: module.exports = function beforeDevServer(app, _server, _compiler) {",
      "15:   app.post('/graphql', graphqlHTTP({ schema }));",
      "17:   app.get(",
      "18:     '/graphql',",
      "19:     graphqlHTTP({",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: const { schema: badSchema } = require('./bad-schema');",
      "18:   app.post('/bad/graphql', (_req, res, next) => {",
      "19:     res.json({ data: badSchema });",
      "20:     next();",
      "21:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js": [
      "File: packages/graphiql/test/e2e-server.js -> packages/graphiql/test/e2e-server.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: const path = require('path');",
      "11: const { graphqlHTTP } = require('express-graphql');",
      "12: const schema = require('./schema');",
      "14: const app = express();",
      "17: app.post('/graphql', graphqlHTTP({ schema }));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: const { schema: badSchema } = require('./bad-schema');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23:   }),",
      "24: );",
      "26: app.use(express.static(path.resolve(__dirname, '../')));",
      "28: app.listen(process.env.PORT || 0, function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: app.post('/bad/graphql', (_req, res, next) => {",
      "27:   res.json({ data: badSchema });",
      "28:   next();",
      "29: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "3288:   integrity sha512-6U71C2Wp7r5XtFtQzYrW5iKFT67OixrSxjI4MptCHzdSVlgabczzqLe0ZSgnub/5Kp4hSbpDB1tMytZY9pwxxA==",
      "3290: \"@graphiql/toolkit@file:packages/graphiql-toolkit\":",
      "3292:   dependencies:",
      "3293:     \"@n1ru4l/push-pull-async-iterable-iterator\" \"^3.0.0\"",
      "3294:     graphql-ws \"^4.9.0\"",
      "",
      "[Removed Lines]",
      "3291:   version \"0.3.0\"",
      "",
      "[Added Lines]",
      "3291:   version \"0.3.2\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4881:   dependencies:",
      "4882:     \"@types/node\" \"*\"",
      "4884: \"@types/eslint-visitor-keys@^1.0.0\":",
      "4885:   version \"1.0.0\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz#1ee30d79544ca84d68d4b3cdb0af4f205663dd2d\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4884: \"@types/escape-html@^1.0.1\":",
      "4885:   version \"1.0.1\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/escape-html/-/escape-html-1.0.1.tgz#b19b4646915f0ae2c306bf984dc0a59c5cfc97ba\"",
      "4887:   integrity sha512-4mI1FuUUZiuT95fSVqvZxp/ssQK9zsa86S43h9x3zPOSU9BBJ+BfDkXwuaU7BfsD+e7U0/cUUfJFk3iW2M4okA==",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5021:   dependencies:",
      "5022:     \"@types/linkify-it\" \"*\"",
      "5024: \"@types/mime@^1\":",
      "5025:   version \"1.3.2\"",
      "5026:   resolved \"https://registry.yarnpkg.com/@types/mime/-/mime-1.3.2.tgz#93e25bf9ee75fe0fd80b594bc4feb0e862111b5a\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029: \"@types/markdown-it@^12.2.3\":",
      "5030:   version \"12.2.3\"",
      "5031:   resolved \"https://registry.yarnpkg.com/@types/markdown-it/-/markdown-it-12.2.3.tgz#0d6f6e5e413f8daaa26522904597be3d6cd93b51\"",
      "5032:   integrity sha512-GKMHFfv3458yYy+v/N8gjufHO6MSZKCOXpZc5GXIWWy8uldwfmPn98vp81gZ5f9SVw8YYBctgfJ22a2d7AOMeQ==",
      "5033:   dependencies:",
      "5034:     \"@types/linkify-it\" \"*\"",
      "5035:     \"@types/mdurl\" \"*\"",
      "5037: \"@types/mdurl@*\":",
      "5038:   version \"1.0.2\"",
      "5039:   resolved \"https://registry.yarnpkg.com/@types/mdurl/-/mdurl-1.0.2.tgz#e2ce9d83a613bacf284c7be7d491945e39e1f8e9\"",
      "5040:   integrity sha512-eC4U9MlIcu2q0KQmXszyn5Akca/0jrQmwDRgpAMJai7qBWq4amIQhZyNau4VYGtCeALvW1/NtjzJJ567aZxfKA==",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6121:   dependencies:",
      "6122:     sprintf-js \"~1.0.2\"",
      "6124: aria-query@^3.0.0:",
      "6125:   version \"3.0.0\"",
      "6126:   resolved \"https://registry.yarnpkg.com/aria-query/-/aria-query-3.0.0.tgz#65b3fcc1ca1155a8c9ae64d6eee297f15d5133cc\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6142: argparse@^2.0.1:",
      "6143:   version \"2.0.1\"",
      "6144:   resolved \"https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38\"",
      "6145:   integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "9586:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.0.3.tgz#5c487e5742ab93c15abb5da22759b8590ec03b7f\"",
      "9587:   integrity sha512-MyoZ0jgnLvB2X3Lg5HqpFmn1kybDiIfEQmKzTb5apr51Rb+T3KdmMiqa70T+bhGnyv7bQ6WMj2QMHpGMmlrUYQ==",
      "9589: envinfo@^7.3.1:",
      "9590:   version \"7.8.1\"",
      "9591:   resolved \"https://registry.yarnpkg.com/envinfo/-/envinfo-7.8.1.tgz#06377e3e5f4d379fea7ac592d5ad8927e0c4d475\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9612: entities@~2.1.0:",
      "9613:   version \"2.1.0\"",
      "9614:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.1.0.tgz#992d3129cf7df6870b96c57858c249a120f8b8b5\"",
      "9615:   integrity sha512-hCx1oky9PFrJ611mf0ifBLBRW8lUUVRlFolb5gWRfIELabBlbp9xZvrqZLZAs+NxFnbfQoeGd8wDkygjg7U85w==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9751:   resolved \"https://registry.yarnpkg.com/escalade/-/escalade-3.1.1.tgz#d8cfdc7000965c5a0174b4a82eaa5c0552742e40\"",
      "9752:   integrity sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "9755:   version \"1.0.3\"",
      "9756:   resolved \"https://registry.yarnpkg.com/escape-html/-/escape-html-1.0.3.tgz#0258eae4d3d0c0974de1c169188ef0051d1d1988\"",
      "9757:   integrity sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=",
      "",
      "[Removed Lines]",
      "9754: escape-html@~1.0.3:",
      "",
      "[Added Lines]",
      "9782: escape-html@^1.0.3, escape-html@~1.0.3:",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "11512:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
      "11514: \"graphiql@file:packages/graphiql\":",
      "11516:   dependencies:",
      "11518:     codemirror \"^5.58.2\"",
      "11520:     copy-to-clipboard \"^3.2.0\"",
      "11521:     dset \"^3.1.0\"",
      "11522:     entities \"^2.0.0\"",
      "11526: graphql-config@^3.0.2:",
      "11527:   version \"3.0.3\"",
      "",
      "[Removed Lines]",
      "11515:   version \"1.4.3\"",
      "11517:     \"@graphiql/toolkit\" \"^0.3.0\"",
      "11519:     codemirror-graphql \"^1.0.0\"",
      "11523:     graphql-language-service \"^3.1.5\"",
      "11524:     markdown-it \"^10.0.0\"",
      "",
      "[Added Lines]",
      "11543:   version \"1.4.6\"",
      "11545:     \"@graphiql/toolkit\" \"^0.3.2\"",
      "11547:     codemirror-graphql \"^1.0.3\"",
      "11551:     escape-html \"^1.0.3\"",
      "11552:     graphql-language-service \"^3.1.6\"",
      "11553:     markdown-it \"^12.2.0\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "14280:   dependencies:",
      "14281:     uc.micro \"^1.0.1\"",
      "14283: lint-staged@^10.1.2:",
      "14284:   version \"10.1.3\"",
      "14285:   resolved \"https://registry.yarnpkg.com/lint-staged/-/lint-staged-10.1.3.tgz#da27713d3ac519da305381b4de87d5f866b1d2f1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14312: linkify-it@^3.0.1:",
      "14313:   version \"3.0.3\"",
      "14314:   resolved \"https://registry.yarnpkg.com/linkify-it/-/linkify-it-3.0.3.tgz#a98baf44ce45a550efb4d49c769d07524cc2fa2e\"",
      "14315:   integrity sha512-ynTsyrFSdE5oZ/O9GEf00kPngmOfVwazR5GKDq6EYfhlpFug3J2zybX56a2PRRpc9P+FuSoGNAwjlbDs9jJBPQ==",
      "14316:   dependencies:",
      "14317:     uc.micro \"^1.0.1\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "14711:     mdurl \"^1.0.1\"",
      "14712:     uc.micro \"^1.0.5\"",
      "14714: markdown-to-jsx@^6.11.4:",
      "14715:   version \"6.11.4\"",
      "14716:   resolved \"https://registry.yarnpkg.com/markdown-to-jsx/-/markdown-to-jsx-6.11.4.tgz#b4528b1ab668aef7fe61c1535c27e837819392c5\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14750: markdown-it@^12.2.0:",
      "14751:   version \"12.2.0\"",
      "14752:   resolved \"https://registry.yarnpkg.com/markdown-it/-/markdown-it-12.2.0.tgz#091f720fd5db206f80de7a8d1f1a7035fd0d38db\"",
      "14753:   integrity sha512-Wjws+uCrVQRqOoJvze4HCqkKl1AsSh95iFAeQDwnyfxM09divCBSXlDR1uTvyUP3Grzpn4Ru8GeCxYPM8vkCQg==",
      "14754:   dependencies:",
      "14755:     argparse \"^2.0.1\"",
      "14756:     entities \"~2.1.0\"",
      "14757:     linkify-it \"^3.0.1\"",
      "14758:     mdurl \"^1.0.1\"",
      "14759:     uc.micro \"^1.0.5\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ad4486934ba69247efd33ee500e30f8236ecd079",
      "candidate_info": {
        "commit_hash": "ad4486934ba69247efd33ee500e30f8236ecd079",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/ad4486934ba69247efd33ee500e30f8236ecd079",
        "files": [
          ".changeset/olive-seals-shake.md",
          "packages/graphiql-react/src/editor/__tests__/common.spec.ts",
          "packages/graphiql-react/src/editor/components/image-preview.tsx",
          "packages/graphiql-react/src/editor/components/index.ts",
          "packages/graphiql-react/src/editor/context.tsx",
          "packages/graphiql-react/src/editor/index.ts",
          "packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/cypress/integration/init.spec.ts",
          "packages/graphiql/cypress/support/commands.ts",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/ImagePreview.tsx",
          "packages/graphiql/src/components/ResultViewer.tsx",
          "packages/graphiql/src/types.ts",
          "packages/graphiql/src/utility/CodeMirrorSizer.ts",
          "packages/graphiql/src/utility/commonKeys.ts",
          "packages/graphiql/src/utility/importCodeMirror.ts"
        ],
        "message": "add `useResponseEditor` hook to `@graphiql/react` (#2411)\n\n* refactor image preview\n\n* move ImagePreview to @graphiql/react\n\n* add useResultEditor to @graphiql/react\n\n* rename result-editor to response-editor\n\n* add changeset\n\n* mock useResponseEditor in tests\n\n* move test file to @graphiql/react\n\n* clean up image preview state\n\n* avoid using refs in e2e tests",
        "before_after_code_files": [
          "packages/graphiql/src/utility/__tests__/importCodeMirror.spec.ts||packages/graphiql-react/src/editor/__tests__/common.spec.ts",
          "packages/graphiql-react/src/editor/components/image-preview.tsx||packages/graphiql-react/src/editor/components/image-preview.tsx",
          "packages/graphiql-react/src/editor/components/index.ts||packages/graphiql-react/src/editor/components/index.ts",
          "packages/graphiql-react/src/editor/context.tsx||packages/graphiql-react/src/editor/context.tsx",
          "packages/graphiql-react/src/editor/index.ts||packages/graphiql-react/src/editor/index.ts",
          "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
          "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/ImagePreview.tsx||packages/graphiql/src/components/ImagePreview.tsx",
          "packages/graphiql/src/components/ResultViewer.tsx||packages/graphiql/src/components/ResultViewer.tsx",
          "packages/graphiql/src/types.ts||packages/graphiql/src/types.ts",
          "packages/graphiql/src/utility/CodeMirrorSizer.ts||packages/graphiql/src/utility/CodeMirrorSizer.ts",
          "packages/graphiql/src/utility/commonKeys.ts||packages/graphiql/src/utility/commonKeys.ts",
          "packages/graphiql/src/utility/importCodeMirror.ts||packages/graphiql/src/utility/importCodeMirror.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
            "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
            "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql/src/utility/__tests__/importCodeMirror.spec.ts||packages/graphiql-react/src/editor/__tests__/common.spec.ts": [
          "File: packages/graphiql/src/utility/__tests__/importCodeMirror.spec.ts -> packages/graphiql-react/src/editor/__tests__/common.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: describe('importCodeMirror', () => {",
          "4:   it('should dynamically load codemirror module', async () => {",
          "",
          "[Removed Lines]",
          "1: import { importCodeMirror } from '../importCodeMirror';",
          "",
          "[Added Lines]",
          "1: import { importCodeMirror } from '../common';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/components/image-preview.tsx||packages/graphiql-react/src/editor/components/image-preview.tsx": [
          "File: packages/graphiql-react/src/editor/components/image-preview.tsx -> packages/graphiql-react/src/editor/components/image-preview.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { Token } from 'codemirror';",
          "2: import { useEffect, useRef, useState } from 'react';",
          "4: type ImagePreviewProps = { token: Token };",
          "6: type Dimensions = {",
          "7:   width: number | null;",
          "8:   height: number | null;",
          "9: };",
          "11: export function ImagePreview(props: ImagePreviewProps) {",
          "12:   const [dimensions, setDimensions] = useState<Dimensions>({",
          "13:     width: null,",
          "14:     height: null,",
          "15:   });",
          "16:   const [mime, setMime] = useState<string | null>(null);",
          "18:   const ref = useRef<HTMLImageElement>(null);",
          "20:   const src = tokenToURL(props.token)?.href;",
          "22:   useEffect(() => {",
          "23:     if (!ref.current) {",
          "24:       return;",
          "25:     }",
          "26:     if (!src) {",
          "27:       setDimensions({ width: null, height: null });",
          "28:       setMime(null);",
          "29:       return;",
          "30:     }",
          "32:     fetch(src, { method: 'HEAD' })",
          "33:       .then(response => {",
          "34:         setMime(response.headers.get('Content-Type'));",
          "35:       })",
          "36:       .catch(() => {",
          "37:         setMime(null);",
          "38:       });",
          "39:   }, [src]);",
          "41:   const dims =",
          "42:     dimensions.width !== null && dimensions.height !== null ? (",
          "43:       <div>",
          "44:         {dimensions.width}x{dimensions.height}",
          "45:         {mime !== null ? ' ' + mime : null}",
          "46:       </div>",
          "47:     ) : null;",
          "49:   return (",
          "50:     <div>",
          "51:       <img",
          "52:         onLoad={() => {",
          "53:           setDimensions({",
          "54:             width: ref.current?.naturalWidth ?? null,",
          "55:             height: ref.current?.naturalHeight ?? null,",
          "56:           });",
          "57:         }}",
          "58:         ref={ref}",
          "59:         src={src}",
          "60:       />",
          "61:       {dims}",
          "62:     </div>",
          "63:   );",
          "64: }",
          "66: ImagePreview.shouldRender = function shouldRender(token: Token) {",
          "67:   const url = tokenToURL(token);",
          "68:   return url ? isImageURL(url) : false;",
          "69: };",
          "71: function tokenToURL(token: Token) {",
          "72:   if (token.type !== 'string') {",
          "73:     return;",
          "74:   }",
          "76:   const value = token.string.slice(1).slice(0, -1).trim();",
          "78:   try {",
          "79:     const location = window.location;",
          "80:     return new URL(value, location.protocol + '//' + location.host);",
          "81:   } catch (err) {",
          "82:     return;",
          "83:   }",
          "84: }",
          "86: function isImageURL(url: URL) {",
          "87:   return /(bmp|gif|jpeg|jpg|png|svg)$/.test(url.pathname);",
          "88: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/components/index.ts||packages/graphiql-react/src/editor/components/index.ts": [
          "File: packages/graphiql-react/src/editor/components/index.ts -> packages/graphiql-react/src/editor/components/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { ImagePreview } from './image-preview';",
          "3: export { ImagePreview };",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/context.tsx||packages/graphiql-react/src/editor/context.tsx": [
          "File: packages/graphiql-react/src/editor/context.tsx -> packages/graphiql-react/src/editor/context.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: export type EditorContextType = {",
          "6:   headerEditor: CodeMirrorEditor | null;",
          "7:   queryEditor: CodeMirrorEditor | null;",
          "8:   variableEditor: CodeMirrorEditor | null;",
          "9:   setHeaderEditor(newEditor: CodeMirrorEditor): void;",
          "10:   setQueryEditor(newEditor: CodeMirrorEditor): void;",
          "11:   setVariableEditor(newEditor: CodeMirrorEditor): void;",
          "12: };",
          "14: export const EditorContext = createContext<EditorContextType>({",
          "15:   headerEditor: null,",
          "16:   queryEditor: null,",
          "17:   variableEditor: null,",
          "18:   setHeaderEditor() {},",
          "19:   setQueryEditor() {},",
          "20:   setVariableEditor() {},",
          "21: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:   responseEditor: CodeMirrorEditor | null;",
          "12:   setResponseEditor(newEditor: CodeMirrorEditor): void;",
          "19:   responseEditor: null,",
          "23:   setResponseEditor() {},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     null,",
          "29:   );",
          "30:   const [queryEditor, setQueryEditor] = useState<CodeMirrorEditor | null>(null);",
          "31:   const [variableEditor, setVariableEditor] = useState<CodeMirrorEditor | null>(",
          "32:     null,",
          "33:   );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:   const [responseEditor, setResponseEditor] = useState<CodeMirrorEditor | null>(",
          "36:     null,",
          "37:   );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:       value={{",
          "37:         headerEditor,",
          "38:         queryEditor,",
          "39:         variableEditor,",
          "40:         setHeaderEditor,",
          "41:         setQueryEditor,",
          "42:         setVariableEditor,",
          "43:       }}>",
          "44:       {props.children}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         responseEditor,",
          "50:         setResponseEditor,",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/index.ts||packages/graphiql-react/src/editor/index.ts": [
          "File: packages/graphiql-react/src/editor/index.ts -> packages/graphiql-react/src/editor/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { onHasCompletion } from './completion';",
          "2: import { EditorContext, EditorContextProvider } from './context';",
          "3: import { useHeaderEditor } from './header-editor';",
          "4: import { useQueryEditor } from './query-editor';",
          "5: import { useVariableEditor } from './variable-editor';",
          "7: import type { EditorContextType } from './context';",
          "8: import type { UseHeaderEditorArgs } from './header-editor';",
          "9: import type { UseQueryEditorArgs } from './query-editor';",
          "10: import type { UseVariableEditorArgs } from './variable-editor';",
          "12: export {",
          "13:   onHasCompletion,",
          "14:   EditorContext,",
          "15:   EditorContextProvider,",
          "16:   useHeaderEditor,",
          "17:   useQueryEditor,",
          "18:   useVariableEditor,",
          "19: };",
          "21: export type {",
          "22:   EditorContextType,",
          "23:   UseHeaderEditorArgs,",
          "24:   UseQueryEditorArgs,",
          "25:   UseVariableEditorArgs,",
          "26: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import { ImagePreview } from './components';",
          "6: import { useResponseEditor } from './response-editor';",
          "12: import type {",
          "13:   ResponseTooltipType,",
          "14:   UseResponseEditorArgs,",
          "15: } from './response-editor';",
          "20:   ImagePreview,",
          "25:   useResponseEditor,",
          "31:   ResponseTooltipType,",
          "34:   UseResponseEditorArgs,",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx": [
          "File: packages/graphiql-react/src/editor/response-editor.tsx -> packages/graphiql-react/src/editor/response-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { Position, Token } from 'codemirror';",
          "2: import { ComponentType, useContext, useEffect, useRef } from 'react';",
          "3: import ReactDOM from 'react-dom';",
          "5: import { commonKeys, importCodeMirror } from './common';",
          "6: import { ImagePreview } from './components';",
          "7: import { EditorContext } from './context';",
          "8: import { useResizeEditor, useSynchronizeValue } from './hooks';",
          "9: import { CodeMirrorEditor } from './types';",
          "11: export type ResponseTooltipType = ComponentType<{ pos: Position }>;",
          "13: export type UseResponseEditorArgs = {",
          "14:   ResponseTooltip?: ResponseTooltipType;",
          "15:   editorTheme?: string;",
          "16:   value?: string;",
          "17: };",
          "19: export function useResponseEditor({",
          "20:   ResponseTooltip,",
          "21:   editorTheme = 'graphiql',",
          "22:   value,",
          "23: }: UseResponseEditorArgs = {}) {",
          "24:   const context = useContext(EditorContext);",
          "25:   const ref = useRef<HTMLDivElement>(null);",
          "27:   const responseTooltipRef = useRef<ResponseTooltipType | undefined>(",
          "28:     ResponseTooltip,",
          "29:   );",
          "30:   useEffect(() => {",
          "31:     responseTooltipRef.current = ResponseTooltip;",
          "32:   }, [ResponseTooltip]);",
          "34:   if (!context) {",
          "35:     throw new Error(",
          "36:       'Tried to call the `useResponseEditor` hook without the necessary context. Make sure that the `EditorContextProvider` from `@graphiql/react` is rendered higher in the tree.',",
          "37:     );",
          "38:   }",
          "40:   const { responseEditor, setResponseEditor } = context;",
          "42:   useEffect(() => {",
          "43:     let isActive = true;",
          "44:     importCodeMirror(",
          "45:       [",
          "46:         import('codemirror/addon/fold/foldgutter'),",
          "47:         import('codemirror/addon/fold/brace-fold'),",
          "48:         import('codemirror/addon/dialog/dialog'),",
          "49:         import('codemirror/addon/search/search'),",
          "50:         import('codemirror/addon/search/searchcursor'),",
          "51:         import('codemirror/addon/search/jump-to-line'),",
          "53:         import('codemirror/keymap/sublime'),",
          "54:         import('codemirror-graphql/esm/results/mode'),",
          "55:         import('codemirror-graphql/esm/utils/info-addon'),",
          "56:       ],",
          "57:       { useCommonAddons: false },",
          "58:     ).then(CodeMirror => {",
          "60:       if (!isActive) {",
          "61:         return;",
          "62:       }",
          "65:       const tooltipDiv = document.createElement('div');",
          "66:       CodeMirror.registerHelper(",
          "67:         'info',",
          "68:         'graphql-results',",
          "69:         (token: Token, _options: any, _cm: CodeMirrorEditor, pos: Position) => {",
          "70:           const infoElements: JSX.Element[] = [];",
          "72:           const ResponseTooltipComponent = responseTooltipRef.current;",
          "73:           if (ResponseTooltipComponent) {",
          "74:             infoElements.push(<ResponseTooltipComponent pos={pos} />);",
          "75:           }",
          "77:           if (ImagePreview.shouldRender(token)) {",
          "78:             infoElements.push(",
          "79:               <ImagePreview key=\"image-preview\" token={token} />,",
          "80:             );",
          "81:           }",
          "83:           if (!infoElements.length) {",
          "84:             ReactDOM.unmountComponentAtNode(tooltipDiv);",
          "85:             return null;",
          "86:           }",
          "87:           ReactDOM.render(infoElements, tooltipDiv);",
          "88:           return tooltipDiv;",
          "89:         },",
          "90:       );",
          "92:       const container = ref.current;",
          "93:       if (!container) {",
          "94:         return;",
          "95:       }",
          "97:       const newEditor = CodeMirror(container, {",
          "98:         lineWrapping: true,",
          "99:         readOnly: true,",
          "100:         theme: editorTheme,",
          "101:         mode: 'graphql-results',",
          "102:         keyMap: 'sublime',",
          "103:         foldGutter: true,",
          "104:         gutters: ['CodeMirror-foldgutter'],",
          "106:         info: true,",
          "107:         extraKeys: commonKeys,",
          "108:       });",
          "110:       setResponseEditor(newEditor);",
          "111:     });",
          "113:     return () => {",
          "114:       isActive = false;",
          "115:     };",
          "116:   }, [editorTheme, setResponseEditor]);",
          "118:   useSynchronizeValue(responseEditor, value);",
          "120:   useResizeEditor(responseEditor, ref);",
          "122:   return ref;",
          "123: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts": [
          "File: packages/graphiql-react/src/index.ts -> packages/graphiql-react/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {",
          "2:   EditorContext,",
          "3:   EditorContextProvider,",
          "4:   onHasCompletion,",
          "5:   useHeaderEditor,",
          "6:   useQueryEditor,",
          "7:   useVariableEditor,",
          "8: } from './editor';",
          "9: import {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4:   ImagePreview,",
          "8:   useResponseEditor,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: import type {",
          "16:   EditorContextType,",
          "17:   UseHeaderEditorArgs,",
          "18:   UseQueryEditorArgs,",
          "19:   UseVariableEditorArgs,",
          "20: } from './editor';",
          "21: import type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:   ResponseTooltipType,",
          "22:   UseResponseEditorArgs,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30:   EditorContext,",
          "31:   EditorContextProvider,",
          "32:   onHasCompletion,",
          "33:   useHeaderEditor,",
          "34:   useQueryEditor,",
          "35:   useVariableEditor,",
          "37:   ExplorerContext,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:   ImagePreview,",
          "40:   useResponseEditor,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "42: export type {",
          "44:   EditorContextType,",
          "45:   UseHeaderEditorArgs,",
          "46:   UseQueryEditorArgs,",
          "47:   UseVariableEditorArgs,",
          "49:   ExplorerContextType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   ResponseTooltipType,",
          "54:   UseResponseEditorArgs,",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts": [
          "File: packages/graphiql/__mocks__/@graphiql/react.ts -> packages/graphiql/__mocks__/@graphiql/react.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:   useExplorerNavStack,",
          "7:   useHeaderEditor as _useHeaderEditor,",
          "8:   useQueryEditor as _useQueryEditor,",
          "9:   useVariableEditor as _useVariableEditor,",
          "10: } from '@graphiql/react';",
          "11: import type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:   useResponseEditor as _useResponseEditor,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:   return useMockedEditor('query', value, onEdit);",
          "140: };",
          "142: export const useVariableEditor: typeof _useVariableEditor = function useVariableEditor({",
          "143:   onEdit,",
          "144:   value,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: export const useResponseEditor: typeof _useResponseEditor = function useResponseEditor({",
          "144:   value,",
          "145: }) {",
          "146:   return useMockedEditor('query', value);",
          "147: };",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
          "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   it('Shows the expected error when the schema is invalid', () => {",
          "49:     cy.visit(`/?bad=true`);",
          "50:     cy.wait(200);",
          "56:     });",
          "57:   });",
          "58: });",
          "",
          "[Removed Lines]",
          "51:     cy.window().then(w => {",
          "53:       const value = w.g.resultComponent.viewer.getValue();",
          "55:       expect(value).to.contain('Names must');",
          "",
          "[Added Lines]",
          "51:     cy.get('section#graphiql-result-viewer').should(element => {",
          "52:       expect(element.get(0).innerText).to.contain('Names must');",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts": [
          "File: packages/graphiql/cypress/support/commands.ts -> packages/graphiql/cypress/support/commands.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     visitWithOp(op: Op): Chainable<Element>;",
          "33:     clickPrettify(): Chainable<Element>;",
          "34:     assertHasValues(op: Op): Chainable<Element>;",
          "36:     assertQueryResult(",
          "37:       op: Op,",
          "38:       expectedResult: MockResult,",
          "",
          "[Removed Lines]",
          "35:     assertResult(result: MockResult): Chainable<Element>;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   cy.visitWithOp(op);",
          "91:   cy.clickExecuteQuery();",
          "92:   cy.wait(timeout);",
          "106:   });",
          "107: });",
          "",
          "[Removed Lines]",
          "93:   cy.window().then(w => {",
          "95:     const value = w.g.resultComponent.viewer.getValue();",
          "96:     expect(value).to.deep.equal(JSON.stringify(mockSuccess, null, 2));",
          "97:   });",
          "98: });",
          "100: Cypress.Commands.add('assertResult', (expectedResult, timeout = 200) => {",
          "101:   cy.wait(timeout);",
          "102:   cy.window().then(w => {",
          "104:     const value = w.g.resultComponent.viewer.getValue();",
          "105:     expect(value).to.deep.equal(JSON.stringify(expectedResult, null, 2));",
          "",
          "[Added Lines]",
          "92:   cy.get('section#graphiql-result-viewer').should(element => {",
          "94:     const response = element.get(0).innerText.replace(/[\\u00a0]/g, ' ');",
          "95:     expect(response).to.equal(JSON.stringify(mockSuccess, null, 2));",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   ComponentType,",
          "10:   PropsWithChildren,",
          "11:   MouseEventHandler,",
          "14:   ReactNode,",
          "15: } from 'react';",
          "16: import {",
          "",
          "[Removed Lines]",
          "12:   Component,",
          "13:   FunctionComponent,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   EditorContextType,",
          "47:   ExplorerContextType,",
          "48:   ExplorerFieldDef,",
          "49: } from '@graphiql/react';",
          "51: import { ExecuteButton } from './ExecuteButton';",
          "53: import { ToolbarButton } from './ToolbarButton';",
          "54: import { ToolbarGroup } from './ToolbarGroup';",
          "55: import { ToolbarMenu, ToolbarMenuItem } from './ToolbarMenu';",
          "56: import { QueryEditor } from './QueryEditor';",
          "57: import { VariableEditor } from './VariableEditor';",
          "58: import { HeaderEditor } from './HeaderEditor';",
          "60: import { DocExplorer } from './DocExplorer';",
          "61: import { QueryHistory } from './QueryHistory';",
          "63: import StorageAPI, { Storage } from '../utility/StorageAPI';",
          "64: import getSelectedOperationName from '../utility/getSelectedOperationName';",
          "65: import debounce from '../utility/debounce';",
          "",
          "[Removed Lines]",
          "52: import { ImagePreview } from './ImagePreview';",
          "59: import { ResultViewer } from './ResultViewer';",
          "62: import CodeMirrorSizer from '../utility/CodeMirrorSizer';",
          "",
          "[Added Lines]",
          "47:   ResponseTooltipType,",
          "57: import { ResultViewer, RESULT_VIEWER_ID } from './ResultViewer';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "253:   ResultsTooltip?: typeof Component | FunctionComponent;",
          "",
          "[Added Lines]",
          "250:   ResultsTooltip?: ResponseTooltipType;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "447:   _introspectionQueryName: string;",
          "448:   _introspectionQuerySansSubscriptions: string;",
          "452:   componentIsMounted: boolean;",
          "455:   graphiqlContainer: Maybe<HTMLDivElement>;",
          "457:   _queryHistory: Maybe<QueryHistory>;",
          "458:   _historyStore: Maybe<HistoryStore>;",
          "459:   editorBarComponent: Maybe<HTMLDivElement>;",
          "462:   constructor(props: GraphiQLWithContextProps) {",
          "463:     super(props);",
          "",
          "[Removed Lines]",
          "450:   codeMirrorSizer!: CodeMirrorSizer;",
          "456:   resultComponent: Maybe<ResultViewer>;",
          "460:   resultViewerElement: Maybe<HTMLElement>;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "673:       this.fetchSchema();",
          "674:     }",
          "679:     if (typeof window !== 'undefined') {",
          "680:       window.g = this;",
          "681:     }",
          "",
          "[Removed Lines]",
          "677:     this.codeMirrorSizer = new CodeMirrorSizer();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "759:     );",
          "760:   }",
          "770:   safeSetState = (nextState: any, callback?: any): void => {",
          "",
          "[Removed Lines]",
          "762:   componentDidUpdate() {",
          "765:     this.codeMirrorSizer.updateSizes([this.resultComponent]);",
          "766:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1052:                 </div>",
          "1053:               )}",
          "1054:               <ResultViewer",
          "1061:                 value={this.state.response}",
          "1062:                 editorTheme={this.props.editorTheme}",
          "1065:               />",
          "1066:               {footer}",
          "1067:             </div>",
          "",
          "[Removed Lines]",
          "1055:                 registerRef={n => {",
          "1056:                   this.resultViewerElement = n;",
          "1057:                 }}",
          "1058:                 ref={c => {",
          "1059:                   this.resultComponent = c;",
          "1060:                 }}",
          "1063:                 ResultsTooltip={this.props.ResultsTooltip}",
          "1064:                 ImagePreview={ImagePreview}",
          "",
          "[Added Lines]",
          "1042:                 ResponseTooltip={this.props.ResultsTooltip}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1126:     this.props.editorContext?.queryEditor?.refresh();",
          "1127:     this.props.editorContext?.variableEditor?.refresh();",
          "1128:     this.props.editorContext?.headerEditor?.refresh();",
          "1132:   }",
          "",
          "[Removed Lines]",
          "1129:     if (this.resultComponent) {",
          "1130:       this.resultComponent.getCodeMirror().refresh();",
          "1131:     }",
          "",
          "[Added Lines]",
          "1107:     this.props.editorContext?.responseEditor?.refresh();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1936:     if (event.button !== 0 || event.ctrlKey) {",
          "1937:       return false;",
          "1938:     }",
          "1941:     if (target.className.indexOf('CodeMirror-gutter') !== 0) {",
          "1942:       return false;",
          "1943:     }",
          "1953:   }",
          "1955:   private handleDocsResizeStart: MouseEventHandler<",
          "",
          "[Removed Lines]",
          "1939:     let target = event.target as Element;",
          "1945:     const resultWindow = this.resultViewerElement;",
          "1946:     while (target) {",
          "1947:       if (target === resultWindow) {",
          "1948:         return true;",
          "1949:       }",
          "1950:       target = target.parentNode as Element;",
          "1951:     }",
          "1952:     return false;",
          "",
          "[Added Lines]",
          "1915:     const target = event.target;",
          "1916:     if (!(target instanceof Element)) {",
          "1917:       return false;",
          "1918:     }",
          "1924:     const resultWindow = target.closest('section');",
          "1925:     return resultWindow ? resultWindow.id === RESULT_VIEWER_ID : false;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/ImagePreview.tsx||packages/graphiql/src/components/ImagePreview.tsx": [
          "File: packages/graphiql/src/components/ImagePreview.tsx -> packages/graphiql/src/components/ImagePreview.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/ResultViewer.tsx||packages/graphiql/src/components/ResultViewer.tsx": [
          "File: packages/graphiql/src/components/ResultViewer.tsx -> packages/graphiql/src/components/ResultViewer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: }",
          "",
          "[Removed Lines]",
          "8: import React, { Component, FunctionComponent } from 'react';",
          "9: import type * as CM from 'codemirror';",
          "10: import ReactDOM from 'react-dom';",
          "11: import commonKeys from '../utility/commonKeys';",
          "12: import { SizerComponent } from '../utility/CodeMirrorSizer';",
          "13: import { ImagePreview as ImagePreviewComponent } from './ImagePreview';",
          "14: import { importCodeMirror } from '../utility/importCodeMirror';",
          "15: import { CodeMirrorEditor } from '../types';",
          "17: type ResultViewerProps = {",
          "18:   value?: string;",
          "19:   editorTheme?: string;",
          "20:   ResultsTooltip?: typeof Component | FunctionComponent;",
          "21:   ImagePreview: typeof ImagePreviewComponent;",
          "22:   registerRef: (node: HTMLElement) => void;",
          "23: };",
          "35: export class ResultViewer extends React.Component<ResultViewerProps, {}>",
          "36:   implements SizerComponent {",
          "37:   viewer: CodeMirrorEditor | null = null;",
          "38:   _node: HTMLElement | null = null;",
          "40:   componentDidMount() {",
          "41:     this.initializeEditor();",
          "42:   }",
          "44:   shouldComponentUpdate(nextProps: ResultViewerProps) {",
          "45:     return this.props.value !== nextProps.value;",
          "46:   }",
          "48:   componentDidUpdate() {",
          "49:     if (this.viewer) {",
          "50:       this.viewer.setValue(this.props.value || '');",
          "51:     }",
          "52:   }",
          "54:   componentWillUnmount() {",
          "55:     this.viewer = null;",
          "56:   }",
          "58:   render() {",
          "59:     return (",
          "60:       <section",
          "61:         className=\"result-window\"",
          "62:         aria-label=\"Result Window\"",
          "63:         aria-live=\"polite\"",
          "64:         aria-atomic=\"true\"",
          "65:         ref={node => {",
          "66:           if (node) {",
          "67:             this.props.registerRef(node);",
          "68:             this._node = node;",
          "69:           }",
          "70:         }}",
          "71:       />",
          "72:     );",
          "73:   }",
          "75:   allAddons = () => [",
          "76:     import('codemirror/addon/fold/foldgutter'),",
          "77:     import('codemirror/addon/fold/brace-fold'),",
          "78:     import('codemirror/addon/dialog/dialog'),",
          "79:     import('codemirror/addon/search/search'),",
          "80:     import('codemirror/addon/search/searchcursor'),",
          "81:     import('codemirror/addon/search/jump-to-line'),",
          "83:     import('codemirror/keymap/sublime'),",
          "84:     import('codemirror-graphql/results/mode'),",
          "85:   ];",
          "87:   async initializeEditor() {",
          "90:     const CodeMirror = await importCodeMirror(this.allAddons(), {",
          "91:       useCommonAddons: false,",
          "92:     });",
          "93:     const Tooltip = this.props.ResultsTooltip;",
          "94:     const ImagePreview = this.props.ImagePreview;",
          "96:     if (Tooltip || ImagePreview) {",
          "97:       await import('codemirror-graphql/utils/info-addon');",
          "98:       const tooltipDiv = document.createElement('div');",
          "99:       CodeMirror.registerHelper(",
          "100:         'info',",
          "101:         'graphql-results',",
          "102:         (token: any, _options: any, _cm: CodeMirror.Editor, pos: any) => {",
          "103:           const infoElements: JSX.Element[] = [];",
          "104:           if (Tooltip) {",
          "105:             infoElements.push(<Tooltip pos={pos} />);",
          "106:           }",
          "108:           if (",
          "109:             ImagePreview &&",
          "110:             typeof ImagePreview.shouldRender === 'function' &&",
          "111:             ImagePreview.shouldRender(token)",
          "112:           ) {",
          "113:             infoElements.push(<ImagePreview token={token} />);",
          "114:           }",
          "116:           if (!infoElements.length) {",
          "117:             ReactDOM.unmountComponentAtNode(tooltipDiv);",
          "118:             return null;",
          "119:           }",
          "120:           ReactDOM.render(<div>{infoElements}</div>, tooltipDiv);",
          "121:           return tooltipDiv;",
          "122:         },",
          "123:       );",
          "124:     }",
          "126:     this.viewer = CodeMirror(this._node!, {",
          "127:       lineWrapping: true,",
          "128:       value: this.props.value || '',",
          "129:       readOnly: true,",
          "130:       theme: this.props.editorTheme || 'graphiql',",
          "131:       mode: 'graphql-results',",
          "132:       keyMap: 'sublime',",
          "133:       foldGutter: {",
          "135:         minFoldSize: 4,",
          "136:       },",
          "137:       gutters: ['CodeMirror-foldgutter'],",
          "138:       info: Boolean(this.props.ResultsTooltip || this.props.ImagePreview),",
          "139:       extraKeys: commonKeys,",
          "140:     }) as CodeMirrorEditor;",
          "141:   }",
          "147:   getCodeMirror() {",
          "148:     return this.viewer as CM.Editor;",
          "149:   }",
          "154:   getClientHeight() {",
          "155:     return this._node && this._node.clientHeight;",
          "156:   }",
          "",
          "[Added Lines]",
          "8: import { useResponseEditor, UseResponseEditorArgs } from '@graphiql/react';",
          "9: import React from 'react';",
          "11: export const RESULT_VIEWER_ID = 'graphiql-result-viewer';",
          "19: export function ResultViewer(props: UseResponseEditorArgs) {",
          "20:   const ref = useResponseEditor(props);",
          "21:   return (",
          "22:     <section",
          "23:       id={RESULT_VIEWER_ID}",
          "24:       className=\"result-window\"",
          "25:       aria-label=\"Result Window\"",
          "26:       aria-live=\"polite\"",
          "27:       aria-atomic=\"true\"",
          "28:       ref={ref}",
          "29:     />",
          "30:   );",
          "",
          "---------------"
        ],
        "packages/graphiql/src/types.ts||packages/graphiql/src/types.ts": [
          "File: packages/graphiql/src/types.ts -> packages/graphiql/src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: export type Maybe<T> = T | null | undefined;",
          "5: export type ReactComponentLike =",
          "",
          "[Removed Lines]",
          "1: import CM from 'codemirror';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:   | boolean",
          "23:   | null",
          "24:   | undefined;",
          "",
          "[Removed Lines]",
          "26: export type CodeMirrorEditor = CM.Editor & { options?: any };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/CodeMirrorSizer.ts||packages/graphiql/src/utility/CodeMirrorSizer.ts": [
          "File: packages/graphiql/src/utility/CodeMirrorSizer.ts -> packages/graphiql/src/utility/CodeMirrorSizer.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/commonKeys.ts||packages/graphiql/src/utility/commonKeys.ts": [
          "File: packages/graphiql/src/utility/commonKeys.ts -> packages/graphiql/src/utility/commonKeys.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/importCodeMirror.ts||packages/graphiql/src/utility/importCodeMirror.ts": [
          "File: packages/graphiql/src/utility/importCodeMirror.ts -> packages/graphiql/src/utility/importCodeMirror.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "974d5e20039887eab42277b748060c8b5e4e7c6a",
      "candidate_info": {
        "commit_hash": "974d5e20039887eab42277b748060c8b5e4e7c6a",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/974d5e20039887eab42277b748060c8b5e4e7c6a",
        "files": [
          ".github/workflows/pr-graphql-compat-check.yml",
          "examples/cm6-graphql-parcel/package.json",
          "examples/graphiql-create-react-app/package.json",
          "examples/graphiql-parcel/package.json",
          "examples/graphiql-webpack/package.json",
          "examples/monaco-graphql-webpack/package.json",
          "packages/codemirror-graphql/package.json",
          "packages/graphiql-2-rfc-context/package.json",
          "packages/graphiql-toolkit/package.json",
          "packages/graphiql/cypress/integration/docs.spec.ts",
          "packages/graphiql/package.json",
          "packages/graphiql/resources/index.html.ejs",
          "packages/graphiql/resources/renderExample.js",
          "packages/graphiql/resources/webpack.config.js",
          "packages/graphql-language-service-cli/package.json",
          "packages/graphql-language-service-interface/package.json",
          "packages/graphql-language-service-parser/package.json",
          "packages/graphql-language-service-server/package.json",
          "packages/graphql-language-service-types/package.json",
          "packages/graphql-language-service-utils/package.json",
          "packages/graphql-language-service/package.json",
          "packages/graphql-language-service/src/interface/__tests__/getAutocompleteSuggestions-test.ts",
          "packages/monaco-graphql/package.json",
          "yarn.lock"
        ],
        "message": "use graphql@16.3.0, matrix for the range",
        "before_after_code_files": [
          "packages/graphiql/cypress/integration/docs.spec.ts||packages/graphiql/cypress/integration/docs.spec.ts",
          "packages/graphiql/resources/index.html.ejs||packages/graphiql/resources/index.html.ejs",
          "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
          "packages/graphiql/resources/webpack.config.js||packages/graphiql/resources/webpack.config.js",
          "packages/graphql-language-service/src/interface/__tests__/getAutocompleteSuggestions-test.ts||packages/graphql-language-service/src/interface/__tests__/getAutocompleteSuggestions-test.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql/cypress/integration/docs.spec.ts||packages/graphiql/cypress/integration/docs.spec.ts": [
          "File: packages/graphiql/cypress/integration/docs.spec.ts -> packages/graphiql/cypress/integration/docs.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: describe('GraphiQL DocExplorer - button', () => {",
          "2:   before(() => {",
          "3:     cy.visit(`/`);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { version } from 'graphql/version';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   });",
          "80:   it('should show deprecated fields category title', () => {",
          "81:     cy.get('.doc-category>.doc-category-item').first().find('a').click();",
          "82:     cy.get('.doc-category>.doc-category-title')",
          "83:       .last()",
          "84:       .should('have.text', 'deprecated fields');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     cy.wait(300);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:         '<p>No longer in use, try <code>test</code> instead.</p>',",
          "98:       );",
          "99:   });",
          "100:   it('should show deprecated arguments category title', () => {",
          "101:     cy.get('#doc-fields .doc-category-item a.field-name').last().click();",
          "102:     cy.get('#doc-deprecated-args>.doc-category-title')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: });",
          "105: let describeOrSkip = describe.skip;",
          "108: if (!version.includes('15.5')) {",
          "109:   describeOrSkip = describe;",
          "110: }",
          "112: describeOrSkip('GraphQL DocExplorer - deprecated arguments', () => {",
          "",
          "---------------"
        ],
        "packages/graphiql/resources/index.html.ejs||packages/graphiql/resources/index.html.ejs": [
          "File: packages/graphiql/resources/index.html.ejs -> packages/graphiql/resources/index.html.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   </head>",
          "39:   <body>",
          "40:     <div id=\"graphiql\">Loading...</div>",
          "41:     <script defer src=\"/resources/renderExample.js\" type=\"application/javascript\"></script>",
          "42:   </body>",
          "43: </html>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     <script type=\"application/javascript\"> window.GraphQLVersion = <%= htmlWebpackPlugin.options.graphqlVersion %> </script>",
          "",
          "---------------"
        ],
        "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js": [
          "File: packages/graphiql/resources/renderExample.js -> packages/graphiql/resources/renderExample.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:     onEditOperationName: onEditOperationName,",
          "136:     headerEditorEnabled: true,",
          "137:     shouldPersistHeaders: true,",
          "139:     tabs: {",
          "140:       onTabChange: onTabChange,",
          "141:     },",
          "",
          "[Removed Lines]",
          "138:     inputValueDeprecation: true,",
          "",
          "[Added Lines]",
          "138:     inputValueDeprecation: GraphQLVersion.includes('15.5') ? undefined : true,",
          "",
          "---------------"
        ],
        "packages/graphiql/resources/webpack.config.js||packages/graphiql/resources/webpack.config.js": [
          "File: packages/graphiql/resources/webpack.config.js -> packages/graphiql/resources/webpack.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');",
          "6: const MiniCssExtractPlugin = require('mini-css-extract-plugin');",
          "7: const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');",
          "9: const isDev = process.env.NODE_ENV === 'development';",
          "10: const isHMR = Boolean(isDev && process.env.WEBPACK_DEV_SERVER);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: const graphql = require('graphql');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     new webpack.optimize.LimitChunkCountPlugin({",
          "80:       maxChunks: 1,",
          "81:     }),",
          "82:     new HtmlWebpackPlugin({",
          "83:       template: relPath('index.html.ejs'),",
          "84:       inject: 'head',",
          "85:       filename: isDev && !isHMR ? 'dev.html' : 'index.html',",
          "86:     }),",
          "87:     new MiniCssExtractPlugin({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:       graphqlVersion: JSON.stringify(graphql.version),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:   cssLoaders.push('postcss-loader');",
          "116: }",
          "120: if (process.env.ANALYZE) {",
          "121:   resultConfig.plugins.push(",
          "122:     new BundleAnalyzerPlugin({",
          "",
          "[Removed Lines]",
          "118: resultConfig.module.rules.push();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphql-language-service/src/interface/__tests__/getAutocompleteSuggestions-test.ts||packages/graphql-language-service/src/interface/__tests__/getAutocompleteSuggestions-test.ts": [
          "File: packages/graphql-language-service/src/interface/__tests__/getAutocompleteSuggestions-test.ts -> packages/graphql-language-service/src/interface/__tests__/getAutocompleteSuggestions-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:       });",
          "122:   }",
          "123:   describe('with Operation types', () => {",
          "124:     it('provides correct sortText response', () => {",
          "125:       const result = getAutocompleteSuggestions(",
          "126:         schema,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     const expectedDirectiveSuggestions = [",
          "125:       { label: 'include' },",
          "126:       { label: 'skip' },",
          "127:     ];",
          "129:     console.log({ graphQLVersion });",
          "132:     if (graphQLVersion.startsWith('16.0.0-experimental-stream-defer')) {",
          "133:       console.log('expect stream');",
          "134:       expectedDirectiveSuggestions.push({ label: 'stream' }, { label: 'test' });",
          "135:     } else {",
          "136:       expectedDirectiveSuggestions.push({ label: 'test' });",
          "137:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "432:       ]);",
          "433:     });",
          "445:     it('provides correct directive suggestions', () => {",
          "446:       expect(testSuggestions('{ test @ }', new Position(0, 8))).toEqual(",
          "447:         expectedDirectiveSuggestions,",
          "",
          "[Removed Lines]",
          "435:     const expectedDirectiveSuggestions = [",
          "436:       { label: 'include' },",
          "437:       { label: 'skip' },",
          "438:     ];",
          "440:     if (graphQLVersion.includes('defer')) {",
          "441:       expectedDirectiveSuggestions.push({ label: 'stream' });",
          "442:     }",
          "443:     expectedDirectiveSuggestions.push({ label: 'test' });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "6853:   resolved \"https://registry.yarnpkg.com/acorn/-/acorn-7.4.1.tgz#feaed255973d2e77555b83dbc08851a6c63520fa\"",
          "6854:   integrity sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
          "6861: acorn@^8.2.4:",
          "6862:   version \"8.6.0\"",
          "6863:   resolved \"https://registry.yarnpkg.com/acorn/-/acorn-8.6.0.tgz#e3692ba0eb1a0c83eaa4f37f5fa7368dd7142895\"",
          "",
          "[Removed Lines]",
          "6856: acorn@^8.1.0:",
          "6857:   version \"8.1.0\"",
          "6858:   resolved \"https://registry.yarnpkg.com/acorn/-/acorn-8.1.0.tgz#52311fd7037ae119cbb134309e901aa46295b3fe\"",
          "6859:   integrity sha512-LWCF/Wn0nfHOmJ9rzQApGnxnvgfROzGilS8936rqN/lfcYkY9MYZzdMqN+2NJ4SlTc+m5HiSa+kNfDtI64dwUA==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12504:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
          "12506: \"graphiql@file:packages/graphiql\":",
          "12508:   dependencies:",
          "12509:     \"@graphiql/toolkit\" \"^0.4.3\"",
          "12510:     codemirror \"^5.65.3\"",
          "12512:     copy-to-clipboard \"^3.2.0\"",
          "12513:     entities \"^2.0.0\"",
          "12514:     escape-html \"^1.0.3\"",
          "12516:     markdown-it \"^12.2.0\"",
          "12517:     set-value \"^4.1.0\"",
          "12520:   version \"4.3.0\"",
          "12521:   resolved \"https://registry.yarnpkg.com/graphql-config/-/graphql-config-4.3.0.tgz#b9bb7bf9c892a90e66ea937e8d7ed170eb1fd5e2\"",
          "12522:   integrity sha512-Uiu3X7+s5c056WyrvdZVz2vG1fhAipMlYmtiCU/4Z2mX79OXDr1SqIon2MprC/pExIWJfAQZCcjYDY76fPBUQg==",
          "",
          "[Removed Lines]",
          "12507:   version \"1.8.7\"",
          "12511:     codemirror-graphql \"^1.2.17\"",
          "12515:     graphql-language-service \"^5.0.3\"",
          "12519: graphql-config@^4.3.0:",
          "",
          "[Added Lines]",
          "12502:   version \"1.8.8\"",
          "12506:     codemirror-graphql \"^1.3.0\"",
          "12510:     graphql-language-service \"^5.0.4\"",
          "12514: graphql-config@^4.1.0, graphql-config@^4.3.0:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12555:   resolved \"https://registry.yarnpkg.com/graphql-ws/-/graphql-ws-5.5.5.tgz#f375486d3f196e2a2527b503644693ae3a8670a9\"",
          "12556:   integrity sha512-hvyIS71vs4Tu/yUYHPvGXsTgo0t3arU820+lT5VjZS2go0ewp2LqyCgxEN56CzOG7Iys52eRhHBiD1gGRdiQtw==",
          "12568: growly@^1.3.0:",
          "12569:   version \"1.3.0\"",
          "",
          "[Removed Lines]",
          "12558: graphql@16.0.0-experimental-stream-defer.5:",
          "12559:   version \"16.0.0-experimental-stream-defer.5\"",
          "12560:   resolved \"https://registry.yarnpkg.com/graphql/-/graphql-16.0.0-experimental-stream-defer.5.tgz#d668566fd33053a054dc5367c38c20a4ac4e4224\"",
          "12561:   integrity sha512-bluMjYpxh3a1lwZuNP+FAaEDMWzccVhkv+STcw0ckB2EPtLRTYUdXQhF9YBbUHd3tZSAR7LXzsxIw2GZXhg5rw==",
          "12563: graphql@^16.1.0:",
          "12564:   version \"16.3.0\"",
          "12565:   resolved \"https://registry.yarnpkg.com/graphql/-/graphql-16.3.0.tgz#a91e24d10babf9e60c706919bb182b53ccdffc05\"",
          "12566:   integrity sha512-xm+ANmA16BzCT5pLjuXySbQVFwH3oJctUVdy81w1sV0vBU0KgDdBGtxQOUd5zqOBk/JayAFeG8Dlmeq74rjm/A==",
          "",
          "[Added Lines]",
          "12553: graphql@15.8, graphql@16.0.0-experimental-stream-defer.5, graphql@^16.1.0, graphql@^16.4.0:",
          "12554:   version \"15.8.0\"",
          "12555:   resolved \"https://registry.yarnpkg.com/graphql/-/graphql-15.8.0.tgz#33410e96b012fa3bdb1091cc99a94769db212b38\"",
          "12556:   integrity sha512-5gghUc24tP9HRznNpV2+FIoq3xKkj5dTQqf4v0CpdPbFVwFkWoxOM+o+2OC9ZSvjEMTjfmG9QT+gcvggTwW1zw==",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "13738:   resolved \"https://registry.yarnpkg.com/is-posix-bracket/-/is-posix-bracket-0.1.1.tgz#3334dc79774368e92f016e6fbc0a88f5cd6e6bc4\"",
          "13739:   integrity sha1-MzTceXdDaOkvAW5vvAqI9c1ua8Q=",
          "13746: is-potential-custom-element-name@^1.0.1:",
          "13747:   version \"1.0.1\"",
          "13748:   resolved \"https://registry.yarnpkg.com/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.1.tgz#171ed6f19e3ac554394edf78caa05784a45bebb5\"",
          "",
          "[Removed Lines]",
          "13741: is-potential-custom-element-name@^1.0.0:",
          "13742:   version \"1.0.0\"",
          "13743:   resolved \"https://registry.yarnpkg.com/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.0.tgz#0c52e54bcca391bb2c494b21e8626d7336c6e397\"",
          "13744:   integrity sha1-DFLlS8yjkbssSUsh6GJtczbG45c=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "15139:     ws \"^7.0.0\"",
          "15140:     xml-name-validator \"^3.0.0\"",
          "15175:   version \"16.7.0\"",
          "15176:   resolved \"https://registry.yarnpkg.com/jsdom/-/jsdom-16.7.0.tgz#918ae71965424b197c819f8183a754e18977b710\"",
          "15177:   integrity sha512-u9Smc2G1USStM+s/x1ru5Sxrl6mPYCbByG1U/hUmqaVsm4tbNyS7CicOSRyuGQYZhTu0h84qkZZQ/I+dzizSVw==",
          "",
          "[Removed Lines]",
          "15142: jsdom@^16.4.0:",
          "15143:   version \"16.5.2\"",
          "15144:   resolved \"https://registry.yarnpkg.com/jsdom/-/jsdom-16.5.2.tgz#583fac89a0aea31dbf6237e7e4bedccd9beab472\"",
          "15145:   integrity sha512-JxNtPt9C1ut85boCbJmffaQ06NBnzkQY/MWO3YxPW8IWS38A26z+B1oBvA9LwKrytewdfymnhi4UNH3/RAgZrg==",
          "15146:   dependencies:",
          "15147:     abab \"^2.0.5\"",
          "15148:     acorn \"^8.1.0\"",
          "15149:     acorn-globals \"^6.0.0\"",
          "15150:     cssom \"^0.4.4\"",
          "15151:     cssstyle \"^2.3.0\"",
          "15152:     data-urls \"^2.0.0\"",
          "15153:     decimal.js \"^10.2.1\"",
          "15154:     domexception \"^2.0.1\"",
          "15155:     escodegen \"^2.0.0\"",
          "15156:     html-encoding-sniffer \"^2.0.1\"",
          "15157:     is-potential-custom-element-name \"^1.0.0\"",
          "15158:     nwsapi \"^2.2.0\"",
          "15159:     parse5 \"6.0.1\"",
          "15160:     request \"^2.88.2\"",
          "15161:     request-promise-native \"^1.0.9\"",
          "15162:     saxes \"^5.0.1\"",
          "15163:     symbol-tree \"^3.2.4\"",
          "15164:     tough-cookie \"^4.0.0\"",
          "15165:     w3c-hr-time \"^1.0.2\"",
          "15166:     w3c-xmlserializer \"^2.0.0\"",
          "15167:     webidl-conversions \"^6.1.0\"",
          "15168:     whatwg-encoding \"^1.0.5\"",
          "15169:     whatwg-mimetype \"^2.3.0\"",
          "15170:     whatwg-url \"^8.5.0\"",
          "15171:     ws \"^7.4.4\"",
          "15172:     xml-name-validator \"^3.0.0\"",
          "15174: jsdom@^16.6.0:",
          "",
          "[Added Lines]",
          "15127: jsdom@^16.3.0, jsdom@^16.6.0:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "19307:   dependencies:",
          "19308:     lodash \"^4.17.19\"",
          "19311:   version \"1.0.9\"",
          "19312:   resolved \"https://registry.yarnpkg.com/request-promise-native/-/request-promise-native-1.0.9.tgz#e407120526a5efdc9a39b28a5679bf47b9d9dc28\"",
          "19313:   integrity sha512-wcW+sIUiWnKgNY0dqCpOZkUbF/I+YPi+f09JZIDa39Ec+q82CpSYniDp+ISgTTbKmnpJWASeJBPZmoxH84wt3g==",
          "",
          "[Removed Lines]",
          "19310: request-promise-native@^1.0.7, request-promise-native@^1.0.9:",
          "",
          "[Added Lines]",
          "19263: request-promise-native@^1.0.7:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "19316:     stealthy-require \"^1.1.1\"",
          "19317:     tough-cookie \"^2.3.3\"",
          "19320:   version \"2.88.2\"",
          "19321:   resolved \"https://registry.yarnpkg.com/request/-/request-2.88.2.tgz#d73c918731cb5a87da047e207234146f664d12b3\"",
          "19322:   integrity sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
          "",
          "[Removed Lines]",
          "19319: request@^2.88.0, request@^2.88.2:",
          "",
          "[Added Lines]",
          "19272: request@^2.88.0:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "21945:     yauzl \"^2.3.1\"",
          "21946:     yazl \"^2.2.2\"",
          "21948: vscode-jsonrpc@^4.0.0:",
          "21949:   version \"4.0.0\"",
          "21950:   resolved \"https://registry.yarnpkg.com/vscode-jsonrpc/-/vscode-jsonrpc-4.0.0.tgz#a7bf74ef3254d0a0c272fab15c82128e378b3be9\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21901: vscode-jsonrpc@6.0.0:",
          "21902:   version \"6.0.0\"",
          "21903:   resolved \"https://registry.yarnpkg.com/vscode-jsonrpc/-/vscode-jsonrpc-6.0.0.tgz#108bdb09b4400705176b957ceca9e0880e9b6d4e\"",
          "21904:   integrity sha512-wnJA4BnEjOSyFMvjZdpiOwhSq9uDoK8e/kpRJDTaMYzwlkrhG1fwDIZI94CLsLzlCK5cIbMMtFlJlfR57Lavmg==",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "21979:     vscode-jsonrpc \"^5.0.1\"",
          "21980:     vscode-languageserver-types \"3.15.1\"",
          "21982: vscode-languageserver-types@3.14.0:",
          "21983:   version \"3.14.0\"",
          "21984:   resolved \"https://registry.yarnpkg.com/vscode-languageserver-types/-/vscode-languageserver-types-3.14.0.tgz#d3b5952246d30e5241592b6dde8280e03942e743\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21940: vscode-languageserver-protocol@^3.16.0:",
          "21941:   version \"3.16.0\"",
          "21942:   resolved \"https://registry.yarnpkg.com/vscode-languageserver-protocol/-/vscode-languageserver-protocol-3.16.0.tgz#34135b61a9091db972188a07d337406a3cdbe821\"",
          "21943:   integrity sha512-sdeUoAawceQdgIfTI+sdcwkiK2KU+2cbEYA0agzM2uqaUy2UpnnGHtWTHVEtS0ES4zHU0eMFRGN+oQgDxlD66A==",
          "21944:   dependencies:",
          "21945:     vscode-jsonrpc \"6.0.0\"",
          "21946:     vscode-languageserver-types \"3.16.0\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "21989:   resolved \"https://registry.yarnpkg.com/vscode-languageserver-types/-/vscode-languageserver-types-3.15.1.tgz#17be71d78d2f6236d414f0001ce1ef4d23e6b6de\"",
          "21990:   integrity sha512-+a9MPUQrNGRrGU630OGbYVQ+11iOIovjCkqxajPa9w57Sd5ruK8WQNsslzpa0x/QJqC8kRc2DUxWjIFwoNm4ZQ==",
          "21992: vscode-languageserver@^6.1.1:",
          "21993:   version \"6.1.1\"",
          "21994:   resolved \"https://registry.yarnpkg.com/vscode-languageserver/-/vscode-languageserver-6.1.1.tgz#d76afc68172c27d4327ee74332b468fbc740d762\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21958: vscode-languageserver-types@3.16.0:",
          "21959:   version \"3.16.0\"",
          "21960:   resolved \"https://registry.yarnpkg.com/vscode-languageserver-types/-/vscode-languageserver-types-3.16.0.tgz#ecf393fc121ec6974b2da3efb3155644c514e247\"",
          "21961:   integrity sha512-k8luDIWJWyenLc5ToFQQMaSrqCHiLwyKPHKPQZ5zz21vM+vIVUSvsRpcbiECH4WR88K2XZqc4ScRcZ7nk/jbeA==",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "22591:   dependencies:",
          "22592:     async-limiter \"~1.0.0\"",
          "22595:   version \"7.4.4\"",
          "22596:   resolved \"https://registry.yarnpkg.com/ws/-/ws-7.4.4.tgz#383bc9742cb202292c9077ceab6f6047b17f2d59\"",
          "22597:   integrity sha512-Qm8k8ojNQIMx7S+Zp8u/uHOx7Qazv3Yv4q68MiWWWOJhiwG5W3x7iqmRtJo8xxrciZUY4vRxUTJCKuRnF28ZZw==",
          "",
          "[Removed Lines]",
          "22594: ws@^7.0.0, ws@^7.4.4:",
          "",
          "[Added Lines]",
          "22565: ws@^7.0.0:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5268c9ad6cc84f416b41b9e53cc2f3620cf4088b",
      "candidate_info": {
        "commit_hash": "5268c9ad6cc84f416b41b9e53cc2f3620cf4088b",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/5268c9ad6cc84f416b41b9e53cc2f3620cf4088b",
        "files": [
          "packages/graphiql-react/src/editor/completion.ts",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/DocExplorer/Argument.tsx",
          "packages/graphiql/src/components/DocExplorer/FieldDoc.tsx",
          "packages/graphiql/src/components/DocExplorer/FieldLink.tsx",
          "packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx",
          "packages/graphiql/src/components/DocExplorer/SearchResults.tsx",
          "packages/graphiql/src/components/DocExplorer/TypeDoc.tsx",
          "packages/graphiql/src/components/DocExplorer/TypeLink.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts",
          "packages/graphiql/src/components/DocExplorer/types.ts"
        ],
        "message": "simplify doc explorer components (#2477)\n\n* simplify type link\n\n* refactor class components to function components\n\n* remove props and consume contexts\n\n* simplify field link\n\n* use type assertion functions from graphql-js\n\n* add back schema prop to DocExplorer",
        "before_after_code_files": [
          "packages/graphiql-react/src/editor/completion.ts||packages/graphiql-react/src/editor/completion.ts",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/DocExplorer/Argument.tsx||packages/graphiql/src/components/DocExplorer/Argument.tsx",
          "packages/graphiql/src/components/DocExplorer/FieldDoc.tsx||packages/graphiql/src/components/DocExplorer/FieldDoc.tsx",
          "packages/graphiql/src/components/DocExplorer/FieldLink.tsx||packages/graphiql/src/components/DocExplorer/FieldLink.tsx",
          "packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx||packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx",
          "packages/graphiql/src/components/DocExplorer/SearchResults.tsx||packages/graphiql/src/components/DocExplorer/SearchResults.tsx",
          "packages/graphiql/src/components/DocExplorer/TypeDoc.tsx||packages/graphiql/src/components/DocExplorer/TypeDoc.tsx",
          "packages/graphiql/src/components/DocExplorer/TypeLink.tsx||packages/graphiql/src/components/DocExplorer/TypeLink.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts||packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts",
          "packages/graphiql/src/components/DocExplorer/types.ts||packages/graphiql/src/components/DocExplorer/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/editor/completion.ts||packages/graphiql-react/src/editor/completion.ts": [
          "File: packages/graphiql-react/src/editor/completion.ts -> packages/graphiql-react/src/editor/completion.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import type { Editor, EditorChange } from 'codemirror';",
          "2: import escapeHTML from 'escape-html';",
          "10: import { ExplorerContextType } from '../explorer';",
          "11: import { markdown } from '../markdown';",
          "",
          "[Removed Lines]",
          "3: import {",
          "4:   GraphQLList,",
          "5:   GraphQLNonNull,",
          "6:   GraphQLSchema,",
          "7:   GraphQLType,",
          "8: } from 'graphql';",
          "",
          "[Added Lines]",
          "3: import { GraphQLSchema, GraphQLType, isListType, isNonNullType } from 'graphql';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: }",
          "119: function renderType(type: GraphQLType): string {",
          "121:     return `${renderType(type.ofType)}!`;",
          "122:   }",
          "124:     return `[${renderType(type.ofType)}]`;",
          "125:   }",
          "126:   return `<a class=\"typeName\">${escapeHTML(type.name)}</a>`;",
          "",
          "[Removed Lines]",
          "120:   if (type instanceof GraphQLNonNull) {",
          "123:   if (type instanceof GraphQLList) {",
          "",
          "[Added Lines]",
          "115:   if (isNonNullType(type)) {",
          "118:   if (isListType(type)) {",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React, { ReactNode } from 'react';",
          "16: import FieldDoc from './DocExplorer/FieldDoc';",
          "17: import SchemaDoc from './DocExplorer/SchemaDoc';",
          "",
          "[Removed Lines]",
          "9: import { isType, GraphQLNamedType } from 'graphql';",
          "10: import {",
          "11:   ExplorerFieldDef,",
          "12:   useExplorerContext,",
          "13:   useSchemaContext,",
          "14: } from '@graphiql/react';",
          "",
          "[Added Lines]",
          "9: import { GraphQLSchema, isType } from 'graphql';",
          "10: import { useExplorerContext, useSchemaContext } from '@graphiql/react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: type DocExplorerProps = {",
          "23:   onClose?(): void;",
          "24: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:   schema?: GraphQLSchema | null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:   const {",
          "34:     fetchError,",
          "35:     isFetching,",
          "37:     validationErrors,",
          "38:   } = useSchemaContext({ nonNull: true });",
          "40:     nonNull: true,",
          "41:   });",
          "43:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "54:   if (fetchError) {",
          "55:     content = <div className=\"error-container\">Error fetching schema</div>;",
          "56:   } else if (validationErrors) {",
          "",
          "[Removed Lines]",
          "36:     schema,",
          "39:   const { explorerNavStack, hide, pop, push, showSearch } = useExplorerContext({",
          "45:   function handleClickType(type: GraphQLNamedType) {",
          "46:     push({ name: type.name, def: type });",
          "47:   }",
          "49:   function handleClickField(field: ExplorerFieldDef) {",
          "50:     push({ name: field.name, def: field });",
          "51:   }",
          "53:   let content: ReactNode;",
          "",
          "[Added Lines]",
          "40:     schema: schemaFromContext,",
          "43:   const { explorerNavStack, hide, pop, showSearch } = useExplorerContext({",
          "50:   const schema = props.schema === undefined ? schemaFromContext : props.schema;",
          "52:   let content: ReactNode = null;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72:     content = <div className=\"error-container\">No Schema Available</div>;",
          "73:   } else if (navItem.search) {",
          "83:   } else if (explorerNavStack.length === 1) {",
          "85:   } else if (isType(navItem.def)) {",
          "96:   }",
          "98:   const shouldSearchBoxAppear =",
          "",
          "[Removed Lines]",
          "74:     content = (",
          "75:       <SearchResults",
          "76:         searchValue={navItem.search}",
          "77:         withinType={navItem.def as GraphQLNamedType}",
          "78:         schema={schema}",
          "79:         onClickType={handleClickType}",
          "80:         onClickField={handleClickField}",
          "81:       />",
          "82:     );",
          "84:     content = <SchemaDoc schema={schema} onClickType={handleClickType} />;",
          "86:     content = (",
          "87:       <TypeDoc",
          "88:         schema={schema}",
          "89:         type={navItem.def}",
          "90:         onClickType={handleClickType}",
          "91:         onClickField={handleClickField}",
          "92:       />",
          "93:     );",
          "94:   } else {",
          "95:     content = <FieldDoc field={navItem.def} onClickType={handleClickType} />;",
          "",
          "[Added Lines]",
          "73:     content = <SearchResults />;",
          "75:     content = <SchemaDoc />;",
          "77:     content = <TypeDoc />;",
          "78:   } else if (navItem.def) {",
          "79:     content = <FieldDoc />;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/Argument.tsx||packages/graphiql/src/components/DocExplorer/Argument.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/Argument.tsx -> packages/graphiql/src/components/DocExplorer/Argument.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { GraphQLArgument } from 'graphql';",
          "10: import TypeLink from './TypeLink';",
          "11: import DefaultValue from './DefaultValue';",
          "14: type ArgumentProps = {",
          "15:   arg: GraphQLArgument;",
          "17:   showDefaultValue?: boolean;",
          "18: };",
          "25:   return (",
          "26:     <span className=\"arg\">",
          "27:       <span className=\"arg-name\">{arg.name}</span>",
          "28:       {': '}",
          "30:       {showDefaultValue !== false && <DefaultValue field={arg} />}",
          "31:     </span>",
          "32:   );",
          "",
          "[Removed Lines]",
          "12: import { OnClickTypeFunction } from './types';",
          "16:   onClickType: OnClickTypeFunction;",
          "20: export default function Argument({",
          "21:   arg,",
          "22:   onClickType,",
          "23:   showDefaultValue,",
          "24: }: ArgumentProps) {",
          "29:       <TypeLink type={arg.type} onClick={onClickType} />",
          "",
          "[Added Lines]",
          "18: export default function Argument({ arg, showDefaultValue }: ArgumentProps) {",
          "23:       <TypeLink type={arg.type} />",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/FieldDoc.tsx||packages/graphiql/src/components/DocExplorer/FieldDoc.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/FieldDoc.tsx -> packages/graphiql/src/components/DocExplorer/FieldDoc.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React from 'react';",
          "12: import Argument from './Argument';",
          "13: import Directive from './Directive';",
          "14: import MarkdownContent from './MarkdownContent';",
          "15: import TypeLink from './TypeLink';",
          "24:   const [showDeprecated, handleShowDeprecated] = React.useState(false);",
          "25:   let argsDef;",
          "26:   let deprecatedArgsDef;",
          "27:   if (field && 'args' in field && field.args.length > 0) {",
          "",
          "[Removed Lines]",
          "9: import { GraphQLArgument, DirectiveNode } from 'graphql';",
          "10: import { ExplorerFieldDef } from '@graphiql/react';",
          "16: import { OnClickTypeFunction } from './types';",
          "18: type FieldDocProps = {",
          "19:   field?: ExplorerFieldDef;",
          "20:   onClickType: OnClickTypeFunction;",
          "21: };",
          "23: export default function FieldDoc({ field, onClickType }: FieldDocProps) {",
          "",
          "[Added Lines]",
          "9: import { GraphQLArgument, DirectiveNode, isType } from 'graphql';",
          "10: import { useExplorerContext } from '@graphiql/react';",
          "17: export default function FieldDoc() {",
          "18:   const { explorerNavStack } = useExplorerContext({ nonNull: true });",
          "21:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "22:   const field = navItem.def;",
          "23:   if (!field || isType(field)) {",
          "24:     return null;",
          "25:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:           .map((arg: GraphQLArgument) => (",
          "34:             <div key={arg.name} className=\"doc-category-item\">",
          "35:               <div>",
          "37:               </div>",
          "38:               <MarkdownContent",
          "39:                 className=\"doc-value-description\"",
          "",
          "[Removed Lines]",
          "36:                 <Argument arg={arg} onClickType={onClickType} />",
          "",
          "[Added Lines]",
          "38:                 <Argument arg={arg} />",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:             deprecatedArgs.map((arg, i) => (",
          "67:               <div key={i}>",
          "68:                 <div>",
          "70:                 </div>",
          "71:                 <MarkdownContent",
          "72:                   className=\"doc-value-description\"",
          "",
          "[Removed Lines]",
          "69:                   <Argument arg={arg} onClickType={onClickType} />",
          "",
          "[Added Lines]",
          "71:                   <Argument arg={arg} />",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:     <div>",
          "107:       <MarkdownContent",
          "108:         className=\"doc-type-description\"",
          "110:       />",
          "111:       {field && 'deprecationReason' in field && (",
          "112:         <MarkdownContent",
          "113:           className=\"doc-deprecation\"",
          "115:         />",
          "116:       )}",
          "117:       <div className=\"doc-category\">",
          "118:         <div className=\"doc-category-title\">type</div>",
          "120:       </div>",
          "121:       {argsDef}",
          "122:       {directivesDef}",
          "",
          "[Removed Lines]",
          "109:         markdown={field?.description || 'No Description'}",
          "114:           markdown={field?.deprecationReason}",
          "119:         <TypeLink type={field?.type} onClick={onClickType} />",
          "",
          "[Added Lines]",
          "111:         markdown={field.description || 'No Description'}",
          "116:           markdown={field.deprecationReason}",
          "121:         <TypeLink type={field.type} />",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/FieldLink.tsx||packages/graphiql/src/components/DocExplorer/FieldLink.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/FieldLink.tsx -> packages/graphiql/src/components/DocExplorer/FieldLink.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import React from 'react';",
          "10: import { ExplorerFieldDef, useExplorerContext } from '@graphiql/react';",
          "12: type FieldLinkProps = {",
          "13:   field: ExplorerFieldDef;",
          "14: };",
          "16: export default function FieldLink(props: FieldLinkProps) {",
          "17:   const { push } = useExplorerContext({ nonNull: true });",
          "19:   return (",
          "20:     <a",
          "21:       className=\"field-name\"",
          "22:       onClick={event => {",
          "23:         event.preventDefault();",
          "24:         push({ name: props.field.name, def: props.field });",
          "25:       }}",
          "26:       href=\"#\">",
          "27:       {props.field.name}",
          "28:     </a>",
          "29:   );",
          "30: }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx||packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx -> packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React from 'react';",
          "9: import TypeLink from './TypeLink';",
          "10: import MarkdownContent from './MarkdownContent';",
          "21:   const queryType = schema.getQueryType();",
          "22:   const mutationType = schema.getMutationType?.();",
          "23:   const subscriptionType = schema.getSubscriptionType?.();",
          "",
          "[Removed Lines]",
          "11: import { GraphQLSchema } from 'graphql';",
          "12: import { OnClickTypeFunction } from './types';",
          "14: type SchemaDocProps = {",
          "15:   schema: GraphQLSchema;",
          "16:   onClickType: OnClickTypeFunction;",
          "17: };",
          "20: export default function SchemaDoc({ schema, onClickType }: SchemaDocProps) {",
          "",
          "[Added Lines]",
          "11: import { useSchemaContext } from '@graphiql/react';",
          "14: export default function SchemaDoc() {",
          "15:   const { schema } = useSchemaContext({ nonNull: true });",
          "17:   if (!schema) {",
          "18:     return null;",
          "19:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:       />",
          "34:       <div className=\"doc-category\">",
          "35:         <div className=\"doc-category-title\">root types</div>",
          "41:         {mutationType && (",
          "42:           <div className=\"doc-category-item\">",
          "43:             <span className=\"keyword\">mutation</span>",
          "44:             {': '}",
          "46:           </div>",
          "47:         )}",
          "48:         {subscriptionType && (",
          "49:           <div className=\"doc-category-item\">",
          "50:             <span className=\"keyword\">subscription</span>",
          "51:             {': '}",
          "53:           </div>",
          "54:         )}",
          "55:       </div>",
          "",
          "[Removed Lines]",
          "36:         <div className=\"doc-category-item\">",
          "37:           <span className=\"keyword\">query</span>",
          "38:           {': '}",
          "39:           <TypeLink type={queryType} onClick={onClickType} />",
          "40:         </div>",
          "45:             <TypeLink type={mutationType} onClick={onClickType} />",
          "52:             <TypeLink type={subscriptionType} onClick={onClickType} />",
          "",
          "[Added Lines]",
          "36:         {queryType ? (",
          "37:           <div className=\"doc-category-item\">",
          "38:             <span className=\"keyword\">query</span>",
          "39:             {': '}",
          "40:             <TypeLink type={queryType} />",
          "41:           </div>",
          "42:         ) : null}",
          "47:             <TypeLink type={mutationType} />",
          "54:             <TypeLink type={subscriptionType} />",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/SearchResults.tsx||packages/graphiql/src/components/DocExplorer/SearchResults.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/SearchResults.tsx -> packages/graphiql/src/components/DocExplorer/SearchResults.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React, { ReactNode } from 'react';",
          "11: import Argument from './Argument';",
          "12: import TypeLink from './TypeLink';",
          "32:   }",
          "52:     }",
          "86:               return;",
          "87:             }",
          "120:           } else {",
          "122:           }",
          "132:     }",
          "147:     return (",
          "149:         {matchedWithin}",
          "152:       </div>",
          "153:     );",
          "154:   }",
          "155: }",
          "157: function isMatch(sourceText: string, searchValue: string) {",
          "",
          "[Removed Lines]",
          "9: import { GraphQLSchema, GraphQLNamedType } from 'graphql';",
          "13: import { OnClickFieldFunction, OnClickTypeFunction } from './types';",
          "15: type SearchResultsProps = {",
          "16:   schema: GraphQLSchema;",
          "17:   withinType?: GraphQLNamedType;",
          "18:   searchValue: string;",
          "19:   onClickType: OnClickTypeFunction;",
          "20:   onClickField: OnClickFieldFunction;",
          "21: };",
          "23: export default class SearchResults extends React.Component<",
          "24:   SearchResultsProps,",
          "25:   {}",
          "26: > {",
          "27:   shouldComponentUpdate(nextProps: SearchResultsProps) {",
          "28:     return (",
          "29:       this.props.schema !== nextProps.schema ||",
          "30:       this.props.searchValue !== nextProps.searchValue",
          "31:     );",
          "34:   render() {",
          "35:     const searchValue = this.props.searchValue;",
          "36:     const withinType = this.props.withinType;",
          "37:     const schema = this.props.schema;",
          "38:     const onClickType = this.props.onClickType;",
          "39:     const onClickField = this.props.onClickField;",
          "41:     const matchedWithin: ReactNode[] = [];",
          "42:     const matchedTypes: ReactNode[] = [];",
          "43:     const matchedFields: ReactNode[] = [];",
          "45:     const typeMap = schema.getTypeMap();",
          "46:     let typeNames = Object.keys(typeMap);",
          "49:     if (withinType) {",
          "50:       typeNames = typeNames.filter(n => n !== withinType.name);",
          "51:       typeNames.unshift(withinType.name);",
          "54:     for (const typeName of typeNames) {",
          "55:       if (",
          "56:         matchedWithin.length + matchedTypes.length + matchedFields.length >=",
          "57:         100",
          "58:       ) {",
          "59:         break;",
          "60:       }",
          "62:       const type = typeMap[typeName];",
          "63:       if (withinType !== type && isMatch(typeName, searchValue)) {",
          "64:         matchedTypes.push(",
          "65:           <div className=\"doc-category-item\" key={typeName}>",
          "66:             <TypeLink type={type} onClick={onClickType} />",
          "67:           </div>,",
          "68:         );",
          "69:       }",
          "71:       if (type && 'getFields' in type) {",
          "72:         const fields = type.getFields();",
          "73:         Object.keys(fields).forEach(fieldName => {",
          "74:           const field = fields[fieldName];",
          "75:           let matchingArgs;",
          "77:           if (!isMatch(fieldName, searchValue)) {",
          "78:             if ('args' in field && field.args.length) {",
          "79:               matchingArgs = field.args.filter(arg =>",
          "80:                 isMatch(arg.name, searchValue),",
          "81:               );",
          "82:               if (matchingArgs.length === 0) {",
          "83:                 return;",
          "84:               }",
          "85:             } else {",
          "88:           }",
          "90:           const match = (",
          "91:             <div className=\"doc-category-item\" key={typeName + '.' + fieldName}>",
          "92:               {withinType !== type && [",
          "93:                 <TypeLink key=\"type\" type={type} onClick={onClickType} />,",
          "94:                 '.',",
          "95:               ]}",
          "96:               <a",
          "97:                 className=\"field-name\"",
          "98:                 onClick={event => onClickField(field, type, event)}>",
          "99:                 {field.name}",
          "100:               </a>",
          "101:               {matchingArgs && [",
          "102:                 '(',",
          "103:                 <span key=\"args\">",
          "104:                   {matchingArgs.map(arg => (",
          "105:                     <Argument",
          "106:                       key={arg.name}",
          "107:                       arg={arg}",
          "108:                       onClickType={onClickType}",
          "109:                       showDefaultValue={false}",
          "110:                     />",
          "111:                   ))}",
          "112:                 </span>,",
          "113:                 ')',",
          "114:               ]}",
          "115:             </div>",
          "116:           );",
          "118:           if (withinType === type) {",
          "119:             matchedWithin.push(match);",
          "121:             matchedFields.push(match);",
          "123:         });",
          "124:       }",
          "125:     }",
          "127:     if (",
          "128:       matchedWithin.length + matchedTypes.length + matchedFields.length ===",
          "129:       0",
          "130:     ) {",
          "131:       return <span className=\"doc-alert-text\">No results found.</span>;",
          "134:     if (withinType && matchedTypes.length + matchedFields.length > 0) {",
          "135:       return (",
          "136:         <div>",
          "137:           {matchedWithin}",
          "138:           <div className=\"doc-category\">",
          "139:             <div className=\"doc-category-title\">other results</div>",
          "140:             {matchedTypes}",
          "141:             {matchedFields}",
          "142:           </div>",
          "143:         </div>",
          "144:       );",
          "145:     }",
          "148:       <div className=\"doc-search-items\">",
          "150:         {matchedTypes}",
          "151:         {matchedFields}",
          "",
          "[Added Lines]",
          "12: import { useExplorerContext, useSchemaContext } from '@graphiql/react';",
          "13: import FieldLink from './FieldLink';",
          "15: export default function SearchResults() {",
          "16:   const { explorerNavStack } = useExplorerContext({ nonNull: true });",
          "17:   const { schema } = useSchemaContext({ nonNull: true });",
          "19:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "21:   if (!schema || !navItem.search) {",
          "22:     return null;",
          "25:   const searchValue = navItem.search;",
          "26:   const withinType = navItem.def;",
          "28:   const matchedWithin: ReactNode[] = [];",
          "29:   const matchedTypes: ReactNode[] = [];",
          "30:   const matchedFields: ReactNode[] = [];",
          "32:   const typeMap = schema.getTypeMap();",
          "33:   let typeNames = Object.keys(typeMap);",
          "36:   if (withinType) {",
          "37:     typeNames = typeNames.filter(n => n !== withinType.name);",
          "38:     typeNames.unshift(withinType.name);",
          "39:   }",
          "41:   for (const typeName of typeNames) {",
          "42:     if (",
          "43:       matchedWithin.length + matchedTypes.length + matchedFields.length >=",
          "44:       100",
          "45:     ) {",
          "46:       break;",
          "47:     }",
          "49:     const type = typeMap[typeName];",
          "50:     if (withinType !== type && isMatch(typeName, searchValue)) {",
          "51:       matchedTypes.push(",
          "52:         <div className=\"doc-category-item\" key={typeName}>",
          "53:           <TypeLink type={type} />",
          "54:         </div>,",
          "55:       );",
          "58:     if (type && 'getFields' in type) {",
          "59:       const fields = type.getFields();",
          "60:       Object.keys(fields).forEach(fieldName => {",
          "61:         const field = fields[fieldName];",
          "62:         let matchingArgs;",
          "64:         if (!isMatch(fieldName, searchValue)) {",
          "65:           if ('args' in field && field.args.length) {",
          "66:             matchingArgs = field.args.filter(arg =>",
          "67:               isMatch(arg.name, searchValue),",
          "68:             );",
          "69:             if (matchingArgs.length === 0) {",
          "73:             return;",
          "75:         }",
          "77:         const match = (",
          "78:           <div className=\"doc-category-item\" key={typeName + '.' + fieldName}>",
          "79:             {withinType !== type && [<TypeLink key=\"type\" type={type} />, '.']}",
          "80:             <FieldLink field={field} />",
          "81:             {matchingArgs && [",
          "82:               '(',",
          "83:               <span key=\"args\">",
          "84:                 {matchingArgs.map(arg => (",
          "85:                   <Argument key={arg.name} arg={arg} showDefaultValue={false} />",
          "86:                 ))}",
          "87:               </span>,",
          "88:               ')',",
          "89:             ]}",
          "90:           </div>",
          "91:         );",
          "93:         if (withinType === type) {",
          "94:           matchedWithin.push(match);",
          "95:         } else {",
          "96:           matchedFields.push(match);",
          "97:         }",
          "98:       });",
          "100:   }",
          "102:   if (matchedWithin.length + matchedTypes.length + matchedFields.length === 0) {",
          "103:     return <span className=\"doc-alert-text\">No results found.</span>;",
          "104:   }",
          "106:   if (withinType && matchedTypes.length + matchedFields.length > 0) {",
          "108:       <div>",
          "110:         <div className=\"doc-category\">",
          "111:           <div className=\"doc-category-title\">other results</div>",
          "112:           {matchedTypes}",
          "113:           {matchedFields}",
          "114:         </div>",
          "119:   return (",
          "120:     <div className=\"doc-search-items\">",
          "121:       {matchedWithin}",
          "122:       {matchedTypes}",
          "123:       {matchedFields}",
          "124:     </div>",
          "125:   );",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/TypeDoc.tsx||packages/graphiql/src/components/DocExplorer/TypeDoc.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/TypeDoc.tsx -> packages/graphiql/src/components/DocExplorer/TypeDoc.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import {",
          "16:   GraphQLEnumValue,",
          "17: } from 'graphql';",
          "20: import Argument from './Argument';",
          "21: import MarkdownContent from './MarkdownContent';",
          "22: import TypeLink from './TypeLink';",
          "44:   }",
          "52:   }",
          "82:           ))}",
          "107:         </div>",
          "108:       );",
          "135:     }",
          "142:         <div className=\"doc-category\">",
          "147:               <EnumValue key={value.name} value={value} />",
          "149:         </div>",
          "150:       );",
          "171:     }",
          "189:   }",
          "192: }",
          "194: type FieldProps = {",
          "196:   field: ExplorerFieldDef;",
          "199: };",
          "202:   return (",
          "203:     <div className=\"doc-category-item\">",
          "209:       {'args' in field &&",
          "210:         field.args &&",
          "211:         field.args.length > 0 && [",
          "",
          "[Removed Lines]",
          "8: import React, { ReactNode } from 'react';",
          "10:   GraphQLSchema,",
          "11:   GraphQLObjectType,",
          "12:   GraphQLInterfaceType,",
          "13:   GraphQLUnionType,",
          "14:   GraphQLEnumType,",
          "15:   GraphQLType,",
          "18: import { ExplorerFieldDef } from '@graphiql/react';",
          "23: import DefaultValue from './DefaultValue';",
          "24: import { OnClickTypeFunction, OnClickFieldFunction } from './types';",
          "26: type TypeDocProps = {",
          "27:   schema: GraphQLSchema;",
          "28:   type: GraphQLType;",
          "29:   onClickType: OnClickTypeFunction;",
          "30:   onClickField: OnClickFieldFunction;",
          "31: };",
          "33: type TypeDocState = {",
          "34:   showDeprecated: boolean;",
          "35: };",
          "37: export default class TypeDoc extends React.Component<",
          "38:   TypeDocProps,",
          "39:   TypeDocState",
          "40: > {",
          "41:   constructor(props: TypeDocProps) {",
          "42:     super(props);",
          "43:     this.state = { showDeprecated: false };",
          "46:   shouldComponentUpdate(nextProps: TypeDocProps, nextState: TypeDocState) {",
          "47:     return (",
          "48:       this.props.type !== nextProps.type ||",
          "49:       this.props.schema !== nextProps.schema ||",
          "50:       this.state.showDeprecated !== nextState.showDeprecated",
          "51:     );",
          "54:   render() {",
          "55:     const schema = this.props.schema;",
          "56:     const type = this.props.type;",
          "57:     const onClickType = this.props.onClickType;",
          "58:     const onClickField = this.props.onClickField;",
          "60:     let typesTitle: string | null = null;",
          "61:     let types: readonly (GraphQLObjectType | GraphQLInterfaceType)[] = [];",
          "62:     if (type instanceof GraphQLUnionType) {",
          "63:       typesTitle = 'possible types';",
          "64:       types = schema.getPossibleTypes(type);",
          "65:     } else if (type instanceof GraphQLInterfaceType) {",
          "66:       typesTitle = 'implementations';",
          "67:       types = schema.getPossibleTypes(type);",
          "68:     } else if (type instanceof GraphQLObjectType) {",
          "69:       typesTitle = 'implements';",
          "70:       types = type.getInterfaces();",
          "71:     }",
          "73:     let typesDef;",
          "74:     if (types && types.length > 0) {",
          "75:       typesDef = (",
          "76:         <div id=\"doc-types\" className=\"doc-category\">",
          "77:           <div className=\"doc-category-title\">{typesTitle}</div>",
          "78:           {types.map(subtype => (",
          "79:             <div key={subtype.name} className=\"doc-category-item\">",
          "80:               <TypeLink type={subtype} onClick={onClickType} />",
          "81:             </div>",
          "83:         </div>",
          "84:       );",
          "85:     }",
          "88:     let fieldsDef;",
          "89:     let deprecatedFieldsDef;",
          "90:     if (type && 'getFields' in type) {",
          "91:       const fieldMap = type.getFields();",
          "92:       const fields = Object.keys(fieldMap).map(name => fieldMap[name]);",
          "93:       fieldsDef = (",
          "94:         <div id=\"doc-fields\" className=\"doc-category\">",
          "95:           <div className=\"doc-category-title\">fields</div>",
          "96:           {fields",
          "97:             .filter(field => !field.deprecationReason)",
          "98:             .map(field => (",
          "99:               <Field",
          "100:                 key={field.name}",
          "101:                 type={type}",
          "102:                 field={field}",
          "103:                 onClickType={onClickType}",
          "104:                 onClickField={onClickField}",
          "105:               />",
          "106:             ))}",
          "110:       const deprecatedFields = fields.filter(field =>",
          "111:         Boolean(field.deprecationReason),",
          "112:       );",
          "113:       if (deprecatedFields.length > 0) {",
          "114:         deprecatedFieldsDef = (",
          "115:           <div id=\"doc-deprecated-fields\" className=\"doc-category\">",
          "116:             <div className=\"doc-category-title\">deprecated fields</div>",
          "117:             {!this.state.showDeprecated ? (",
          "118:               <button className=\"show-btn\" onClick={this.handleShowDeprecated}>",
          "119:                 Show deprecated fields...",
          "120:               </button>",
          "121:             ) : (",
          "122:               deprecatedFields.map(field => (",
          "123:                 <Field",
          "124:                   key={field.name}",
          "125:                   type={type}",
          "126:                   field={field}",
          "127:                   onClickType={onClickType}",
          "128:                   onClickField={onClickField}",
          "129:                 />",
          "130:               ))",
          "131:             )}",
          "132:           </div>",
          "133:         );",
          "134:       }",
          "137:     let valuesDef: ReactNode;",
          "138:     let deprecatedValuesDef: ReactNode;",
          "139:     if (type instanceof GraphQLEnumType) {",
          "140:       const values = type.getValues();",
          "141:       valuesDef = (",
          "143:           <div className=\"doc-category-title\">values</div>",
          "144:           {values",
          "145:             .filter(value => Boolean(!value.deprecationReason))",
          "146:             .map(value => (",
          "148:             ))}",
          "152:       const deprecatedValues = values.filter(value =>",
          "153:         Boolean(value.deprecationReason),",
          "154:       );",
          "155:       if (deprecatedValues.length > 0) {",
          "156:         deprecatedValuesDef = (",
          "157:           <div className=\"doc-category\">",
          "158:             <div className=\"doc-category-title\">deprecated values</div>",
          "159:             {!this.state.showDeprecated ? (",
          "160:               <button className=\"show-btn\" onClick={this.handleShowDeprecated}>",
          "161:                 Show deprecated values...",
          "162:               </button>",
          "163:             ) : (",
          "164:               deprecatedValues.map(value => (",
          "165:                 <EnumValue key={value.name} value={value} />",
          "166:               ))",
          "167:             )}",
          "168:           </div>",
          "169:         );",
          "170:       }",
          "173:     return (",
          "174:       <div>",
          "175:         <MarkdownContent",
          "176:           className=\"doc-type-description\"",
          "177:           markdown={",
          "178:             ('description' in type && type.description) || 'No Description'",
          "179:           }",
          "180:         />",
          "181:         {type instanceof GraphQLObjectType && typesDef}",
          "182:         {fieldsDef}",
          "183:         {deprecatedFieldsDef}",
          "184:         {valuesDef}",
          "185:         {deprecatedValuesDef}",
          "186:         {!(type instanceof GraphQLObjectType) && typesDef}",
          "187:       </div>",
          "188:     );",
          "191:   handleShowDeprecated = () => this.setState({ showDeprecated: true });",
          "195:   type: GraphQLType;",
          "197:   onClickType: OnClickTypeFunction;",
          "198:   onClickField: OnClickFieldFunction;",
          "201: function Field({ type, field, onClickType, onClickField }: FieldProps) {",
          "204:       <a",
          "205:         className=\"field-name\"",
          "206:         onClick={event => onClickField(field, type, event)}>",
          "207:         {field.name}",
          "208:       </a>",
          "",
          "[Added Lines]",
          "9:   ExplorerFieldDef,",
          "10:   useExplorerContext,",
          "11:   useSchemaContext,",
          "12: } from '@graphiql/react';",
          "13: import {",
          "15:   GraphQLInterfaceType,",
          "16:   GraphQLNamedType,",
          "17:   GraphQLObjectType,",
          "18:   isEnumType,",
          "19:   isInterfaceType,",
          "20:   isNamedType,",
          "21:   isObjectType,",
          "22:   isUnionType,",
          "24: import React, { ReactNode, useState } from 'react';",
          "27: import DefaultValue from './DefaultValue';",
          "28: import FieldLink from './FieldLink';",
          "32: export default function TypeDoc() {",
          "33:   const { schema } = useSchemaContext({ nonNull: true });",
          "34:   const { explorerNavStack } = useExplorerContext({ nonNull: true });",
          "35:   const [showDeprecated, setShowDeprecated] = useState(false);",
          "37:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "38:   const type = navItem.def;",
          "40:   if (!schema || !isNamedType(type)) {",
          "41:     return null;",
          "44:   let typesTitle: string | null = null;",
          "45:   let types: readonly (GraphQLObjectType | GraphQLInterfaceType)[] = [];",
          "46:   if (isUnionType(type)) {",
          "47:     typesTitle = 'possible types';",
          "48:     types = schema.getPossibleTypes(type);",
          "49:   } else if (isInterfaceType(type)) {",
          "50:     typesTitle = 'implementations';",
          "51:     types = schema.getPossibleTypes(type);",
          "52:   } else if (isObjectType(type)) {",
          "53:     typesTitle = 'implements';",
          "54:     types = type.getInterfaces();",
          "57:   let typesDef;",
          "58:   if (types && types.length > 0) {",
          "59:     typesDef = (",
          "60:       <div id=\"doc-types\" className=\"doc-category\">",
          "61:         <div className=\"doc-category-title\">{typesTitle}</div>",
          "62:         {types.map(subtype => (",
          "63:           <div key={subtype.name} className=\"doc-category-item\">",
          "64:             <TypeLink type={subtype} />",
          "65:           </div>",
          "66:         ))}",
          "67:       </div>",
          "68:     );",
          "69:   }",
          "72:   let fieldsDef;",
          "73:   let deprecatedFieldsDef;",
          "74:   if (type && 'getFields' in type) {",
          "75:     const fieldMap = type.getFields();",
          "76:     const fields = Object.keys(fieldMap).map(name => fieldMap[name]);",
          "77:     fieldsDef = (",
          "78:       <div id=\"doc-fields\" className=\"doc-category\">",
          "79:         <div className=\"doc-category-title\">fields</div>",
          "80:         {fields",
          "81:           .filter(field => !field.deprecationReason)",
          "82:           .map(field => (",
          "83:             <Field key={field.name} type={type} field={field} />",
          "85:       </div>",
          "86:     );",
          "88:     const deprecatedFields = fields.filter(field =>",
          "89:       Boolean(field.deprecationReason),",
          "90:     );",
          "91:     if (deprecatedFields.length > 0) {",
          "92:       deprecatedFieldsDef = (",
          "93:         <div id=\"doc-deprecated-fields\" className=\"doc-category\">",
          "94:           <div className=\"doc-category-title\">deprecated fields</div>",
          "95:           {!showDeprecated ? (",
          "96:             <button",
          "97:               className=\"show-btn\"",
          "98:               onClick={() => {",
          "99:                 setShowDeprecated(true);",
          "100:               }}>",
          "101:               Show deprecated fields...",
          "102:             </button>",
          "103:           ) : (",
          "104:             deprecatedFields.map(field => (",
          "105:               <Field key={field.name} type={type} field={field} />",
          "106:             ))",
          "107:           )}",
          "111:   }",
          "113:   let valuesDef: ReactNode;",
          "114:   let deprecatedValuesDef: ReactNode;",
          "115:   if (isEnumType(type)) {",
          "116:     const values = type.getValues();",
          "117:     valuesDef = (",
          "118:       <div className=\"doc-category\">",
          "119:         <div className=\"doc-category-title\">values</div>",
          "120:         {values",
          "121:           .filter(value => Boolean(!value.deprecationReason))",
          "122:           .map(value => (",
          "123:             <EnumValue key={value.name} value={value} />",
          "124:           ))}",
          "125:       </div>",
          "126:     );",
          "128:     const deprecatedValues = values.filter(value =>",
          "129:       Boolean(value.deprecationReason),",
          "130:     );",
          "131:     if (deprecatedValues.length > 0) {",
          "132:       deprecatedValuesDef = (",
          "134:           <div className=\"doc-category-title\">deprecated values</div>",
          "135:           {!showDeprecated ? (",
          "136:             <button",
          "137:               className=\"show-btn\"",
          "138:               onClick={() => {",
          "139:                 setShowDeprecated(true);",
          "140:               }}>",
          "141:               Show deprecated values...",
          "142:             </button>",
          "143:           ) : (",
          "144:             deprecatedValues.map(value => (",
          "146:             ))",
          "147:           )}",
          "153:   return (",
          "154:     <div>",
          "155:       <MarkdownContent",
          "156:         className=\"doc-type-description\"",
          "157:         markdown={",
          "158:           ('description' in type && type.description) || 'No Description'",
          "159:         }",
          "160:       />",
          "161:       {isObjectType(type) && typesDef}",
          "162:       {fieldsDef}",
          "163:       {deprecatedFieldsDef}",
          "164:       {valuesDef}",
          "165:       {deprecatedValuesDef}",
          "166:       {!isObjectType(type) && typesDef}",
          "167:     </div>",
          "168:   );",
          "172:   type: GraphQLNamedType;",
          "176: function Field({ field }: FieldProps) {",
          "179:       <FieldLink field={field} />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:             {field.args",
          "215:               .filter(arg => !arg.deprecationReason)",
          "216:               .map(arg => (",
          "218:               ))}",
          "219:           </span>,",
          "220:           ')',",
          "221:         ]}",
          "222:       {': '}",
          "224:       <DefaultValue field={field} />",
          "225:       {field.description && (",
          "226:         <MarkdownContent",
          "",
          "[Removed Lines]",
          "217:                 <Argument key={arg.name} arg={arg} onClickType={onClickType} />",
          "223:       <TypeLink type={field.type} onClick={onClickType} />",
          "",
          "[Added Lines]",
          "188:                 <Argument key={arg.name} arg={arg} />",
          "194:       <TypeLink type={field.type} />",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/TypeLink.tsx||packages/graphiql/src/components/DocExplorer/TypeLink.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/TypeLink.tsx -> packages/graphiql/src/components/DocExplorer/TypeLink.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React from 'react';",
          "19: type TypeLinkProps = {",
          "22: };",
          "24: export default function TypeLink(props: TypeLinkProps) {",
          "32:   }",
          "35:   }",
          "36:   return (",
          "37:     <a",
          "38:       className=\"type-name\"",
          "39:       onClick={event => {",
          "40:         event.preventDefault();",
          "42:       }}",
          "43:       href=\"#\">",
          "45:     </a>",
          "46:   );",
          "47: }",
          "",
          "[Removed Lines]",
          "9: import {",
          "10:   GraphQLList,",
          "11:   GraphQLNonNull,",
          "12:   GraphQLType,",
          "13:   GraphQLNamedType,",
          "14: } from 'graphql';",
          "15: import { OnClickTypeFunction } from './types';",
          "17: import { Maybe } from '../../types';",
          "20:   type?: Maybe<GraphQLType>;",
          "21:   onClick?: OnClickTypeFunction;",
          "25:   const onClick = props.onClick ? props.onClick : () => null;",
          "26:   return renderType(props.type, onClick);",
          "27: }",
          "29: function renderType(type: Maybe<GraphQLType>, onClick: OnClickTypeFunction) {",
          "30:   if (type instanceof GraphQLNonNull) {",
          "31:     return <span>{renderType(type.ofType, onClick)}!</span>;",
          "33:   if (type instanceof GraphQLList) {",
          "34:     return <span>[{renderType(type.ofType, onClick)}]</span>;",
          "41:         onClick(type as GraphQLNamedType, event);",
          "44:       {type?.name}",
          "",
          "[Added Lines]",
          "8: import { useExplorerContext } from '@graphiql/react';",
          "9: import { GraphQLType, isListType, isNonNullType } from 'graphql';",
          "13:   type: GraphQLType;",
          "17:   const { push } = useExplorerContext({ nonNull: true, caller: TypeLink });",
          "19:   if (!props.type) {",
          "20:     return null;",
          "21:   }",
          "23:   const type = props.type;",
          "24:   if (isNonNullType(type)) {",
          "25:     return (",
          "26:       <>",
          "27:         <TypeLink type={type.ofType} />!",
          "28:       </>",
          "29:     );",
          "31:   if (isListType(type)) {",
          "32:     return (",
          "33:       <>",
          "34:         [<TypeLink type={type.ofType} />]",
          "35:       </>",
          "36:     );",
          "43:         push({ name: type.name, def: type });",
          "46:       {type.name}",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx -> packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React from 'react';",
          "11: import FieldDoc from '../FieldDoc';",
          "15: const exampleObject = new GraphQLObjectType({",
          "16:   name: 'Query',",
          "17:   fields: {",
          "18:     string: {",
          "20:       type: GraphQLString,",
          "21:     },",
          "22:     stringWithArgs: {",
          "24:       type: GraphQLString,",
          "25:       description: 'Example String field with arguments',",
          "26:       args: {",
          "27:         stringArg: {",
          "29:           type: GraphQLString,",
          "30:         },",
          "31:         deprecatedStringArg: {",
          "33:           type: GraphQLString,",
          "34:           deprecationReason: 'no longer used',",
          "35:         },",
          "36:       },",
          "37:     },",
          "38:     stringWithDirective: {",
          "40:       type: GraphQLString,",
          "41:       astNode: {",
          "43:         name: {",
          "45:           value: 'stringWithDirective',",
          "46:         },",
          "47:         type: {",
          "49:           name: {",
          "51:             value: 'GraphQLString',",
          "52:           },",
          "53:         },",
          "54:         directives: [",
          "55:           {",
          "57:             name: {",
          "59:               value: 'development',",
          "60:             },",
          "61:           },",
          "",
          "[Removed Lines]",
          "9: import { render, fireEvent } from '@testing-library/react';",
          "13: import { GraphQLString, GraphQLObjectType } from 'graphql';",
          "19:       name: 'simpleStringField',",
          "23:       name: 'stringWithArgs',",
          "28:           name: 'stringArg',",
          "32:           name: 'deprecatedStringArg',",
          "39:       name: 'stringWithDirective',",
          "42:         kind: 'FieldDefinition',",
          "44:           kind: 'Name',",
          "48:           kind: 'NamedType',",
          "50:             kind: 'Name',",
          "56:             kind: 'Directive',",
          "58:               kind: 'Name',",
          "",
          "[Added Lines]",
          "8: import { ExplorerContext, ExplorerFieldDef } from '@graphiql/react';",
          "9: import {",
          "11:   fireEvent,",
          "12:   render,",
          "13: } from '@testing-library/react';",
          "14: import { GraphQLString, GraphQLObjectType, Kind } from 'graphql';",
          "18: import { mockExplorerContextValue } from './test-utils';",
          "42:         kind: Kind.FIELD_DEFINITION,",
          "44:           kind: Kind.NAME,",
          "48:           kind: Kind.NAMED_TYPE,",
          "50:             kind: Kind.NAME,",
          "56:             kind: Kind.DIRECTIVE,",
          "58:               kind: Kind.NAME,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:   },",
          "66: });",
          "68: describe('FieldDoc', () => {",
          "69:   it('should render a simple string field', () => {",
          "70:     const { container } = render(",
          "75:     );",
          "76:     expect(container.querySelector('.doc-type-description')).toHaveTextContent(",
          "77:       'No Description',",
          "",
          "[Removed Lines]",
          "71:       <FieldDoc",
          "72:         field={exampleObject.getFields().string}",
          "73:         onClickType={jest.fn()}",
          "74:       />,",
          "",
          "[Added Lines]",
          "68: function FieldDocWithContext(props: { field: ExplorerFieldDef }) {",
          "69:   return (",
          "70:     <ExplorerContext.Provider",
          "71:       value={mockExplorerContextValue({",
          "72:         name: props.field.name,",
          "73:         def: props.field,",
          "74:       })}>",
          "75:       <FieldDoc />",
          "76:     </ExplorerContext.Provider>",
          "77:   );",
          "78: }",
          "83:       <FieldDocWithContext field={exampleObject.getFields().string} />,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:   it('should re-render on field change', () => {",
          "84:     const { container, rerender } = render(",
          "89:     );",
          "90:     expect(container.querySelector('.doc-type-description')).toHaveTextContent(",
          "91:       'No Description',",
          "",
          "[Removed Lines]",
          "85:       <FieldDoc",
          "86:         field={exampleObject.getFields().string}",
          "87:         onClickType={jest.fn()}",
          "88:       />,",
          "",
          "[Added Lines]",
          "94:       <FieldDocWithContext field={exampleObject.getFields().string} />,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:     expect(container.querySelector('.arg')).not.toBeInTheDocument();",
          "96:     rerender(",
          "101:     );",
          "102:     expect(container.querySelector('.type-name')).toHaveTextContent('String');",
          "103:     expect(container.querySelector('.doc-type-description')).toHaveTextContent(",
          "",
          "[Removed Lines]",
          "97:       <FieldDoc",
          "98:         field={exampleObject.getFields().stringWithArgs}",
          "99:         onClickType={jest.fn()}",
          "100:       />,",
          "",
          "[Added Lines]",
          "103:       <FieldDocWithContext field={exampleObject.getFields().stringWithArgs} />,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "108:   it('should render a string field with arguments', () => {",
          "109:     const { container } = render(",
          "114:     );",
          "115:     expect(container.querySelector('.type-name')).toHaveTextContent('String');",
          "116:     expect(container.querySelector('.doc-type-description')).toHaveTextContent(",
          "",
          "[Removed Lines]",
          "110:       <FieldDoc",
          "111:         field={exampleObject.getFields().stringWithArgs}",
          "112:         onClickType={jest.fn()}",
          "113:       />,",
          "",
          "[Added Lines]",
          "113:       <FieldDocWithContext field={exampleObject.getFields().stringWithArgs} />,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "132:   it('should render a string field with directives', () => {",
          "133:     const { container } = render(",
          "135:         field={exampleObject.getFields().stringWithDirective}",
          "137:       />,",
          "138:     );",
          "139:     expect(container.querySelector('.type-name')).toHaveTextContent('String');",
          "",
          "[Removed Lines]",
          "134:       <FieldDoc",
          "136:         onClickType={jest.fn()}",
          "",
          "[Added Lines]",
          "134:       <FieldDocWithContext",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx -> packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React from 'react';",
          "15: import {",
          "16:   ExampleSchema,",
          "",
          "[Removed Lines]",
          "9: import { render, fireEvent } from '@testing-library/react';",
          "11: import { GraphQLString } from 'graphql';",
          "13: import TypeDoc from '../TypeDoc';",
          "",
          "[Added Lines]",
          "8: import { ExplorerContext, SchemaContext } from '@graphiql/react';",
          "9: import {",
          "11:   fireEvent,",
          "12:   render,",
          "13: } from '@testing-library/react';",
          "14: import { GraphQLNamedType } from 'graphql';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:   ExampleUnion,",
          "19:   ExampleEnum,",
          "20: } from '../../__tests__/ExampleSchema';",
          "22: describe('TypeDoc', () => {",
          "23:   it('renders a top-level query object type', () => {",
          "32:     const description = container.querySelectorAll('.doc-type-description');",
          "33:     expect(description).toHaveLength(1);",
          "34:     expect(description[0]).toHaveTextContent('Query description\\nSecond line', {",
          "",
          "[Removed Lines]",
          "24:     const { container } = render(",
          "26:       <TypeDoc",
          "27:         schema={ExampleSchema}",
          "28:         type={ExampleQuery}",
          "29:         onClickType={jest.fn()}",
          "30:       />,",
          "31:     );",
          "",
          "[Added Lines]",
          "23: import TypeDoc from '../TypeDoc';",
          "24: import { mockExplorerContextValue, unwrapType } from './test-utils';",
          "26: function TypeDocWithContext(props: { type: GraphQLNamedType }) {",
          "27:   return (",
          "28:     <SchemaContext.Provider",
          "29:       value={{",
          "30:         fetchError: null,",
          "31:         isFetching: false,",
          "32:         schema: ExampleSchema,",
          "33:         setFetchError() {},",
          "34:         setSchema() {},",
          "35:         validationErrors: null,",
          "36:       }}>",
          "37:       <ExplorerContext.Provider",
          "38:         value={mockExplorerContextValue({",
          "39:           name: unwrapType(props.type).name,",
          "40:           def: props.type,",
          "41:         })}>",
          "42:         <TypeDoc />",
          "43:       </ExplorerContext.Provider>",
          "44:     </SchemaContext.Provider>",
          "45:   );",
          "46: }",
          "50:     const { container } = render(<TypeDocWithContext type={ExampleQuery} />);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:     );",
          "44:   });",
          "68:   it('renders deprecated fields when you click to see them', () => {",
          "77:     let cats = container.querySelectorAll('.doc-category-item');",
          "78:     expect(cats).toHaveLength(3);",
          "",
          "[Removed Lines]",
          "46:   it('handles onClickField and onClickType', () => {",
          "47:     const onClickType = jest.fn();",
          "48:     const onClickField = jest.fn();",
          "49:     const { container } = render(",
          "50:       <TypeDoc",
          "51:         schema={ExampleSchema}",
          "52:         type={ExampleQuery}",
          "53:         onClickType={onClickType}",
          "54:         onClickField={onClickField}",
          "55:       />,",
          "56:     );",
          "57:     fireEvent.click(container.querySelector('.type-name')!);",
          "58:     expect(onClickType.mock.calls.length).toEqual(1);",
          "59:     expect(onClickType.mock.calls[0][0]).toEqual(GraphQLString);",
          "61:     fireEvent.click(container.querySelector('.field-name')!);",
          "62:     expect(onClickField.mock.calls.length).toEqual(1);",
          "63:     expect(onClickField.mock.calls[0][0].name).toEqual('string');",
          "64:     expect(onClickField.mock.calls[0][0].type).toEqual(GraphQLString);",
          "65:     expect(onClickField.mock.calls[0][1]).toEqual(ExampleQuery);",
          "66:   });",
          "69:     const { container } = render(",
          "71:       <TypeDoc",
          "72:         schema={ExampleSchema}",
          "73:         type={ExampleQuery}",
          "74:         onClickType={jest.fn()}",
          "75:       />,",
          "76:     );",
          "",
          "[Added Lines]",
          "66:     const { container } = render(<TypeDocWithContext type={ExampleQuery} />);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:   });",
          "92:   it('renders a Union type', () => {",
          "97:     expect(container.querySelector('.doc-category-title')).toHaveTextContent(",
          "98:       'possible types',",
          "99:     );",
          "100:   });",
          "102:   it('renders an Enum type', () => {",
          "107:     expect(container.querySelector('.doc-category-title')).toHaveTextContent(",
          "108:       'values',",
          "109:     );",
          "",
          "[Removed Lines]",
          "93:     const { container } = render(",
          "95:       <TypeDoc schema={ExampleSchema} type={ExampleUnion} />,",
          "96:     );",
          "103:     const { container } = render(",
          "105:       <TypeDoc schema={ExampleSchema} type={ExampleEnum} />,",
          "106:     );",
          "",
          "[Added Lines]",
          "83:     const { container } = render(<TypeDocWithContext type={ExampleUnion} />);",
          "90:     const { container } = render(<TypeDocWithContext type={ExampleEnum} />);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:   it('shows deprecated enum values on click', () => {",
          "116:     const { getByText, container } = render(",
          "119:     );",
          "120:     const showBtn = getByText('Show deprecated values...');",
          "121:     expect(showBtn).toBeInTheDocument();",
          "",
          "[Removed Lines]",
          "118:       <TypeDoc schema={ExampleSchema} type={ExampleEnum} />,",
          "",
          "[Added Lines]",
          "101:       <TypeDocWithContext type={ExampleEnum} />,",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx -> packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import TypeLink from '../TypeLink';",
          "15: const nonNullType = new GraphQLNonNull(GraphQLString);",
          "16: const listType = new GraphQLList(GraphQLString);",
          "18: describe('TypeLink', () => {",
          "19:   it('should render a string', () => {",
          "21:     expect(container).toHaveTextContent('String');",
          "22:     expect(container.querySelectorAll('a')).toHaveLength(1);",
          "23:     expect(container.querySelector('a')).toHaveClass('type-name');",
          "24:   });",
          "25:   it('should render a nonnull type', () => {",
          "27:     expect(container).toHaveTextContent('String!');",
          "28:     expect(container.querySelectorAll('span')).toHaveLength(1);",
          "29:   });",
          "30:   it('should render a list type', () => {",
          "32:     expect(container).toHaveTextContent('[String]');",
          "33:     expect(container.querySelectorAll('span')).toHaveLength(1);",
          "34:   });",
          "38:     fireEvent.click(container.querySelector('a')!);",
          "41:   });",
          "42:   it('should re-render on type change', () => {",
          "44:     expect(container).toHaveTextContent('[String]');",
          "46:     expect(container).toHaveTextContent('String');",
          "47:   });",
          "48: });",
          "",
          "[Removed Lines]",
          "8: import React from 'react';",
          "9: import { render, fireEvent } from '@testing-library/react';",
          "13: import { GraphQLNonNull, GraphQLList, GraphQLString } from 'graphql';",
          "20:     const { container } = render(<TypeLink type={GraphQLString} />);",
          "26:     const { container } = render(<TypeLink type={nonNullType} />);",
          "31:     const { container } = render(<TypeLink type={listType} />);",
          "35:   it('should handle a click event', () => {",
          "36:     const op = jest.fn();",
          "37:     const { container } = render(<TypeLink type={listType} onClick={op} />);",
          "39:     expect(op.mock.calls.length).toEqual(1);",
          "40:     expect(op.mock.calls[0][0]).toEqual(GraphQLString);",
          "43:     const { container, rerender } = render(<TypeLink type={listType} />);",
          "45:     rerender(<TypeLink type={GraphQLString} />);",
          "",
          "[Added Lines]",
          "8: import { ExplorerContext } from '@graphiql/react';",
          "9: import {",
          "11:   fireEvent,",
          "12:   render,",
          "13: } from '@testing-library/react';",
          "14: import { GraphQLNonNull, GraphQLList, GraphQLString } from 'graphql';",
          "15: import React, { ComponentProps } from 'react';",
          "18: import { mockExplorerContextValue, unwrapType } from './test-utils';",
          "23: function TypeLinkWithContext(props: ComponentProps<typeof TypeLink>) {",
          "24:   return (",
          "25:     <ExplorerContext.Provider",
          "26:       value={mockExplorerContextValue({",
          "27:         name: unwrapType(props.type).name,",
          "28:         def: unwrapType(props.type),",
          "29:       })}>",
          "30:       <TypeLink {...props} />",
          "31:       {/* Print the top of the current nav stack for test assertions */}",
          "32:       <ExplorerContext.Consumer>",
          "33:         {({ explorerNavStack }) => (",
          "34:           <span data-testid=\"nav-stack\">",
          "35:             {JSON.stringify(explorerNavStack[explorerNavStack.length + 1])}",
          "36:           </span>",
          "37:         )}",
          "38:       </ExplorerContext.Consumer>",
          "39:     </ExplorerContext.Provider>",
          "40:   );",
          "41: }",
          "45:     const { container } = render(<TypeLinkWithContext type={GraphQLString} />);",
          "51:     const { container } = render(<TypeLinkWithContext type={nonNullType} />);",
          "56:     const { container } = render(<TypeLinkWithContext type={listType} />);",
          "60:   it('should push to the nav stack on click', () => {",
          "61:     const { container, getByTestId } = render(",
          "62:       <TypeLinkWithContext type={listType} />,",
          "63:     );",
          "65:     expect(getByTestId('nav-stack')).toHaveTextContent('');",
          "68:     const { container, rerender } = render(",
          "69:       <TypeLinkWithContext type={listType} />,",
          "70:     );",
          "72:     rerender(<TypeLinkWithContext type={GraphQLString} />);",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts||packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts": [
          "File: packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts -> packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { ExplorerContextType, ExplorerNavStackItem } from '@graphiql/react';",
          "2: import { GraphQLNamedType, GraphQLType } from 'graphql';",
          "4: export function mockExplorerContextValue(",
          "5:   navStackItem: ExplorerNavStackItem,",
          "6: ): ExplorerContextType {",
          "7:   return {",
          "8:     explorerNavStack: [navStackItem],",
          "9:     hide() {},",
          "10:     isVisible: true,",
          "11:     pop() {},",
          "12:     push() {},",
          "13:     reset() {},",
          "14:     show() {},",
          "15:     showSearch() {},",
          "16:   };",
          "17: }",
          "19: export function unwrapType(type: GraphQLType): GraphQLNamedType {",
          "20:   return 'ofType' in type ? unwrapType(type.ofType) : type;",
          "21: }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/types.ts||packages/graphiql/src/components/DocExplorer/types.ts": [
          "File: packages/graphiql/src/components/DocExplorer/types.ts -> packages/graphiql/src/components/DocExplorer/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3137a6c4333dad8db8a0eb980d6c6464c7292946",
      "candidate_info": {
        "commit_hash": "3137a6c4333dad8db8a0eb980d6c6464c7292946",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/3137a6c4333dad8db8a0eb980d6c6464c7292946",
        "files": [
          ".changeset/lemon-eagles-knock.md",
          "package.json",
          "packages/graphiql/resources/renderExample.js",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/Tabs.tsx",
          "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "packages/graphiql/src/css/app.css",
          "packages/graphiql/src/utility/__tests__/fuzzyExtractOperationTitle.spec.ts",
          "packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts",
          "packages/graphiql/src/utility/guid.ts",
          "packages/graphiql/src/utility/id-from-tab-contents.ts"
        ],
        "message": "feat: tabs (#2197)\n\nCo-authored-by: Rikki Schulte <rikki.schulte@gmail.com>\nCo-authored-by: timsuchanek <tim.suchanek@gmail.com>",
        "before_after_code_files": [
          "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/Tabs.tsx||packages/graphiql/src/components/Tabs.tsx",
          "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx||packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "packages/graphiql/src/css/app.css||packages/graphiql/src/css/app.css",
          "packages/graphiql/src/utility/__tests__/fuzzyExtractOperationTitle.spec.ts||packages/graphiql/src/utility/__tests__/fuzzyExtractOperationTitle.spec.ts",
          "packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts||packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts",
          "packages/graphiql/src/utility/guid.ts||packages/graphiql/src/utility/guid.ts",
          "packages/graphiql/src/utility/id-from-tab-contents.ts||packages/graphiql/src/utility/id-from-tab-contents.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js": [
          "File: packages/graphiql/resources/renderExample.js -> packages/graphiql/resources/renderExample.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:   updateURL();",
          "76: }",
          "78: function updateURL() {",
          "79:   var newSearch =",
          "80:     '?' +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: function onTabChange(tabsState) {",
          "79:   const activeTab = tabsState.tabs[tabsState.activeTabIndex];",
          "80:   parameters.query = activeTab.query;",
          "81:   parameters.variables = activeTab.variables;",
          "82:   parameters.headers = activeTab.headers;",
          "83:   parameters.operationName = activeTab.operationName;",
          "84:   updateURL();",
          "85: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:     headerEditorEnabled: true,",
          "128:     shouldPersistHeaders: true,",
          "129:     inputValueDeprecation: true,",
          "130:   }),",
          "131:   document.getElementById('graphiql'),",
          "132: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:     tabs: {",
          "140:       onTabChange: onTabChange,",
          "141:     },",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: import HistoryStore from '../utility/HistoryStore';",
          "72: import { validateSchema } from 'graphql';",
          "74: const DEFAULT_DOC_EXPLORER_WIDTH = 350;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: import { Tab, TabAddButton, Tabs } from './Tabs';",
          "74: import { fuzzyExtractOperationTitle } from '../utility/fuzzyExtractOperationTitle';",
          "75: import { idFromTabContents } from '../utility/id-from-tab-contents';",
          "76: import { guid } from '../utility/guid';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:   beforeTopBarContent?: React.ReactElement | null;",
          "295: };",
          "297: export type GraphiQLState = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:   tabs?:",
          "305:     | boolean",
          "306:     | {",
          "310:         onTabChange?: (tab: TabsState) => void;",
          "311:       };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:   operations?: OperationDefinitionNode[];",
          "319:   documentAST?: DocumentNode;",
          "320:   maxHistoryLength: number;",
          "321: };",
          "323: const stringify = (obj: unknown): string => JSON.stringify(obj, null, 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:   tabs: TabsState;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "343:   return error;",
          "344: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364: type TabState = {",
          "365:   id: string;",
          "366:   hash: string;",
          "367:   title: string;",
          "368:   query: string | undefined;",
          "369:   variables: string | undefined;",
          "370:   headers: string | undefined;",
          "371:   operationName: string | undefined;",
          "372:   response: string | undefined;",
          "373: };",
          "375: type TabsState = {",
          "376:   activeTabIndex: number;",
          "377:   tabs: Array<TabState>;",
          "378: };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "493:       '',",
          "494:     );",
          "499:       query,",
          "500:       variables: variables as string,",
          "501:       headers: headers as string,",
          "502:       operationName,",
          "503:       docExplorerOpen,",
          "504:       schemaErrors,",
          "506:       editorFlex: Number(this._storage.get('editorFlex')) || 1,",
          "507:       secondaryEditorOpen,",
          "508:       secondaryEditorHeight:",
          "",
          "[Removed Lines]",
          "497:     this.state = {",
          "498:       schema,",
          "505:       response,",
          "",
          "[Added Lines]",
          "530:     const initialTabHash = idFromTabContents({",
          "531:       query,",
          "532:       variables: variables as string,",
          "533:       headers: headers as string,",
          "534:     });",
          "536:     const initialTab: TabState = {",
          "537:       id: guid(),",
          "538:       hash: initialTabHash,",
          "539:       title: operationName ?? '<untitled>',",
          "544:       response: undefined,",
          "545:     };",
          "547:     let rawTabState: string | null = null;",
          "549:     if (this.props.tabs) {",
          "550:       rawTabState = this._storage.get('tabState');",
          "551:     }",
          "553:     let tabsState: TabsState;",
          "554:     if (rawTabState === null) {",
          "555:       tabsState = {",
          "556:         activeTabIndex: 0,",
          "557:         tabs: [initialTab],",
          "558:       };",
          "559:     } else {",
          "560:       tabsState = JSON.parse(rawTabState);",
          "561:       let queryParameterOperationIsWithinTabs = false;",
          "562:       for (const tab of tabsState.tabs) {",
          "564:         tab.query = tab.query!;",
          "565:         tab.variables = tab.variables!;",
          "566:         tab.headers = shouldPersistHeaders ? tab.headers! : undefined;",
          "567:         tab.response = undefined;",
          "568:         tab.operationName = undefined;",
          "570:         tab.id = guid();",
          "572:         tab.hash = idFromTabContents(tab);",
          "574:         if (tab.hash === initialTabHash) {",
          "575:           queryParameterOperationIsWithinTabs = true;",
          "576:         }",
          "577:       }",
          "579:       if (queryParameterOperationIsWithinTabs === false) {",
          "580:         tabsState.tabs.push(initialTab);",
          "581:         tabsState.activeTabIndex = tabsState.tabs.length - 1;",
          "582:       }",
          "583:     }",
          "585:     let activeTab = tabsState.tabs[0];",
          "586:     let index = 0;",
          "587:     for (const tab of tabsState.tabs) {",
          "588:       if (tab.hash === initialTabHash) {",
          "589:         tabsState.activeTabIndex = index;",
          "590:         activeTab = tab;",
          "591:         break;",
          "592:       }",
          "593:       index++;",
          "594:     }",
          "597:     this.state = {",
          "598:       tabs: tabsState,",
          "599:       schema,",
          "600:       query: activeTab?.query,",
          "601:       variables: activeTab?.variables,",
          "602:       headers: activeTab?.headers,",
          "603:       operationName: activeTab?.operationName,",
          "604:       response: activeTab?.response ?? response,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "656:     this.componentIsMounted && this.setState(nextState, callback);",
          "657:   };",
          "659:   render() {",
          "660:     const children = React.Children.toArray(this.props.children);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760:   private persistTabsState = () => {",
          "761:     if (this.props.tabs) {",
          "762:       this._storage.set(",
          "763:         'tabState',",
          "764:         JSON.stringify(this.state.tabs, (key, value) =>",
          "765:           key === 'response' ||",
          "766:           (this.state.shouldPersistHeaders && key === 'headers')",
          "767:             ? undefined",
          "768:             : value,",
          "769:         ),",
          "770:       );",
          "771:       if (typeof this.props.tabs === 'object') {",
          "772:         this.props.tabs.onTabChange?.(this.state.tabs);",
          "773:       }",
          "774:     }",
          "775:   };",
          "777:   private makeHandleOnSelectTab = (index: number) => () => {",
          "778:     this.handleStopQuery();",
          "779:     this.setState(",
          "780:       state => stateOnSelectTabReducer(index, state),",
          "781:       this.persistTabsState,",
          "782:     );",
          "783:   };",
          "785:   private makeHandleOnCloseTab = (index: number) => () => {",
          "786:     if (this.state.tabs.activeTabIndex === index) {",
          "787:       this.handleStopQuery();",
          "788:     }",
          "789:     this.setState(",
          "790:       state => stateOnCloseTabReducer(index, state),",
          "791:       this.persistTabsState,",
          "792:     );",
          "793:   };",
          "795:   private handleOnAddTab = () => {",
          "796:     this.setState(state => stateOnTabAddReducer(state), this.persistTabsState);",
          "797:   };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "722:         ? this.state.secondaryEditorHeight",
          "723:         : undefined,",
          "724:     };",
          "726:     return (",
          "727:       <div",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "865:     const tabsState = this.state.tabs;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "773:               </button>",
          "774:             )}",
          "775:           </div>",
          "776:           <div",
          "777:             ref={n => {",
          "778:               this.editorBarComponent = n;",
          "779:             }}",
          "780:             className=\"editorBar\"",
          "781:             onDoubleClick={this.handleResetResize}",
          "782:             onMouseDown={this.handleResizeStart}>",
          "783:             <div className=\"queryWrap\" style={queryWrapStyle}>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "917:           {this.props.tabs ? (",
          "918:             <Tabs",
          "919:               tabsProps={{",
          "920:                 'aria-label': 'Select active operation',",
          "921:               }}>",
          "922:               {tabsState.tabs.map((tab, index) => (",
          "923:                 <Tab",
          "924:                   key={tab.id}",
          "925:                   isActive={index === tabsState.activeTabIndex}",
          "926:                   title={tab.title}",
          "927:                   isCloseable={tabsState.tabs.length > 1}",
          "928:                   onSelect={this.makeHandleOnSelectTab(index)}",
          "929:                   onClose={this.makeHandleOnCloseTab(index)}",
          "930:                   tabProps={{",
          "931:                     'aria-controls': 'sessionWrap',",
          "932:                     id: `session-tab-${index}`,",
          "933:                   }}",
          "934:                 />",
          "935:               ))}",
          "936:               <TabAddButton onClick={this.handleOnAddTab} />",
          "937:             </Tabs>",
          "938:           ) : null}",
          "943:             role=\"tabpanel\"",
          "944:             id=\"sessionWrap\"",
          "946:             aria-labelledby={`session-tab-${tabsState.activeTabIndex}`}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1052:       shouldPersistHeaders: Boolean(this.props.shouldPersistHeaders),",
          "1053:       documentAST: this.state.documentAST,",
          "1054:     };",
          "1060:     }",
          "1062:     const fetch = fetcherReturnToPromise(",
          "",
          "[Removed Lines]",
          "1055:     if (this.state.headers && this.state.headers.trim().length > 2) {",
          "1056:       fetcherOpts.headers = JSON.parse(this.state.headers);",
          "1058:     } else if (this.props.headers) {",
          "1059:       fetcherOpts.headers = JSON.parse(this.props.headers);",
          "",
          "[Added Lines]",
          "1221:     try {",
          "1222:       if (this.state.headers && this.state.headers.trim().length > 2) {",
          "1223:         fetcherOpts.headers = JSON.parse(this.state.headers);",
          "1225:       } else if (this.props.headers) {",
          "1226:         fetcherOpts.headers = JSON.parse(this.props.headers);",
          "1227:       }",
          "1228:     } catch (err) {",
          "1229:       this.setState({",
          "1230:         response: 'Introspection failed as headers are invalid.',",
          "1231:       });",
          "1232:       return;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1412:                 response: GraphiQL.formatResult(fullResponse),",
          "1413:               });",
          "1414:             } else {",
          "1419:             }",
          "1420:           }",
          "1421:         },",
          "",
          "[Removed Lines]",
          "1415:               this.setState({",
          "1416:                 isWaitingForResponse: false,",
          "1417:                 response: GraphiQL.formatResult(result),",
          "1418:               });",
          "",
          "[Added Lines]",
          "1588:               const response = GraphiQL.formatResult(result);",
          "1589:               this.setState(",
          "1590:                 state => ({",
          "1591:                   ...state,",
          "1592:                   tabs: {",
          "1593:                     ...state.tabs,",
          "1594:                     tabs: state.tabs.tabs.map((tab, index) => {",
          "1595:                       if (index !== state.tabs.activeTabIndex) {",
          "1596:                         return tab;",
          "1597:                       }",
          "1598:                       return {",
          "1599:                         ...tab,",
          "1600:                         response,",
          "1601:                       };",
          "1602:                     }),",
          "1603:                   },",
          "1604:                   isWaitingForResponse: false,",
          "1605:                   response,",
          "1606:                 }),",
          "1607:                 this.persistTabsState,",
          "1608:               );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1534:       this.state.operations,",
          "1535:       this.state.schema,",
          "1536:     );",
          "1541:     this._storage.set('query', value);",
          "1542:     if (this.props.onEditQuery) {",
          "1543:       return this.props.onEditQuery(value, queryFacts?.documentAST);",
          "",
          "[Removed Lines]",
          "1537:     this.setState({",
          "1538:       query: value,",
          "1539:       ...queryFacts,",
          "1540:     });",
          "",
          "[Added Lines]",
          "1728:     this.setState(",
          "1729:       state => ({",
          "1730:         ...state,",
          "1731:         query: value,",
          "1732:         ...queryFacts,",
          "1733:         tabs: tabsStateEditQueryReducer(value, state.tabs),",
          "1734:       }),",
          "1735:       this.persistTabsState,",
          "1736:     );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1592:   };",
          "1594:   handleEditVariables = (value: string) => {",
          "1596:     debounce(500, () => this._storage.set('variables', value))();",
          "1597:     if (this.props.onEditVariables) {",
          "1598:       this.props.onEditVariables(value);",
          "",
          "[Removed Lines]",
          "1595:     this.setState({ variables: value });",
          "",
          "[Added Lines]",
          "1791:     this.setState(",
          "1792:       state => ({",
          "1793:         ...state,",
          "1794:         variables: value,",
          "1795:         tabs: tabsStateEditVariablesReducer(value, state.tabs),",
          "1796:       }),",
          "1797:       this.persistTabsState,",
          "1798:     );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1600:   };",
          "1602:   handleEditHeaders = (value: string) => {",
          "1604:     this.props.shouldPersistHeaders &&",
          "1605:       debounce(500, () => this._storage.set('headers', value))();",
          "1606:     if (this.props.onEditHeaders) {",
          "",
          "[Removed Lines]",
          "1603:     this.setState({ headers: value });",
          "",
          "[Added Lines]",
          "1806:     this.setState(",
          "1807:       state => ({",
          "1808:         ...state,",
          "1809:         headers: value,",
          "1810:         tabs: tabsStateEditHeadersReducer(value, state.tabs),",
          "1811:       }),",
          "1812:       this.persistTabsState,",
          "1813:     );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2085:   return child.type === component;",
          "2086: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2298: function tabsStateEditHeadersReducer(",
          "2299:   value: string,",
          "2300:   state: TabsState,",
          "2301: ): TabsState {",
          "2302:   return {",
          "2303:     ...state,",
          "2304:     tabs: state.tabs.map((tab, index) => {",
          "2305:       if (index !== state.activeTabIndex) {",
          "2306:         return tab;",
          "2307:       }",
          "2308:       return {",
          "2309:         ...tab,",
          "2310:         headers: value,",
          "2311:         hash: idFromTabContents({",
          "2312:           query: tab.query,",
          "2313:           headers: value,",
          "2314:           variables: tab.variables,",
          "2315:         }),",
          "2316:       };",
          "2317:     }),",
          "2318:   };",
          "2319: }",
          "2321: function tabsStateEditVariablesReducer(",
          "2322:   value: string,",
          "2323:   state: TabsState,",
          "2324: ): TabsState {",
          "2325:   return {",
          "2326:     ...state,",
          "2327:     tabs: state.tabs.map((tab, index) => {",
          "2328:       if (index !== state.activeTabIndex) {",
          "2329:         return tab;",
          "2330:       }",
          "2331:       return {",
          "2332:         ...tab,",
          "2333:         variables: value,",
          "2334:         hash: idFromTabContents({",
          "2335:           query: tab.query,",
          "2336:           headers: tab.headers,",
          "2337:           variables: value,",
          "2338:         }),",
          "2339:       };",
          "2340:     }),",
          "2341:   };",
          "2342: }",
          "2344: function tabsStateEditQueryReducer(value: string, state: TabsState): TabsState {",
          "2345:   return {",
          "2346:     ...state,",
          "2347:     tabs: state.tabs.map((tab, index) => {",
          "2348:       if (index !== state.activeTabIndex) {",
          "2349:         return tab;",
          "2350:       }",
          "2351:       return {",
          "2352:         ...tab,",
          "2353:         title: fuzzyExtractOperationTitle(value),",
          "2354:         query: value,",
          "2355:         hash: idFromTabContents({",
          "2356:           query: value,",
          "2357:           headers: tab.headers,",
          "2358:           variables: tab.variables,",
          "2359:         }),",
          "2360:       };",
          "2361:     }),",
          "2362:   };",
          "2363: }",
          "2365: function stateOnSelectTabReducer(",
          "2366:   index: number,",
          "2367:   state: GraphiQLState,",
          "2368: ): GraphiQLState {",
          "2369:   const oldActiveTabIndex = state.tabs.activeTabIndex;",
          "2370:   const tabs = state.tabs.tabs.map((currentTab, tabIndex) => {",
          "2371:     if (tabIndex !== oldActiveTabIndex) {",
          "2372:       return currentTab;",
          "2373:     }",
          "2375:     return {",
          "2376:       ...currentTab,",
          "2377:       query: state.query,",
          "2378:       variables: state.variables,",
          "2379:       operationName: state.operationName,",
          "2380:       headers: state.headers,",
          "2381:       response: state.response,",
          "2382:       hash: idFromTabContents({",
          "2383:         query: state.query,",
          "2384:         variables: state.variables,",
          "2385:         headers: state.headers,",
          "2386:       }),",
          "2387:     };",
          "2388:   });",
          "2390:   const newActiveTab = state.tabs.tabs[index];",
          "2392:   return {",
          "2393:     ...state,",
          "2394:     query: newActiveTab.query,",
          "2395:     variables: newActiveTab.variables,",
          "2396:     operationName: newActiveTab.operationName,",
          "2397:     headers: newActiveTab.headers,",
          "2398:     response: newActiveTab.response,",
          "2399:     tabs: { ...state.tabs, tabs, activeTabIndex: index },",
          "2400:   };",
          "2401: }",
          "2403: function stateOnCloseTabReducer(",
          "2404:   index: number,",
          "2405:   state: GraphiQLState,",
          "2406: ): GraphiQLState {",
          "2407:   const newActiveTabIndex =",
          "2408:     state.tabs.activeTabIndex > 0 ? state.tabs.activeTabIndex - 1 : 0;",
          "2409:   const newTabsState = {",
          "2410:     ...state.tabs,",
          "2411:     activeTabIndex: newActiveTabIndex,",
          "2412:     tabs: state.tabs.tabs.filter((_tab, i) => index !== i),",
          "2413:   };",
          "2414:   const activeTab = newTabsState.tabs[newActiveTabIndex];",
          "2415:   return {",
          "2416:     ...state,",
          "2417:     query: activeTab.query,",
          "2418:     variables: activeTab.variables,",
          "2419:     operationName: activeTab.operationName,",
          "2420:     headers: activeTab.headers,",
          "2421:     response: activeTab.response,",
          "2422:     tabs: newTabsState,",
          "2423:   };",
          "2424: }",
          "2426: function stateOnTabAddReducer(state: GraphiQLState): GraphiQLState {",
          "2427:   const oldActiveTabIndex = state.tabs.activeTabIndex;",
          "2429:   const newTab: TabState = {",
          "2430:     id: guid(),",
          "2431:     title: '<untitled>',",
          "2432:     headers: '',",
          "2433:     variables: '',",
          "2434:     query: '',",
          "2435:     operationName: '',",
          "2436:     response: '',",
          "2437:     hash: idFromTabContents({",
          "2438:       query: '',",
          "2439:       variables: '',",
          "2440:       headers: '',",
          "2441:     }),",
          "2442:   };",
          "2444:   const tabs = state.tabs.tabs.map((tab, index) => {",
          "2445:     if (index !== oldActiveTabIndex) {",
          "2446:       return tab;",
          "2447:     }",
          "2449:     return {",
          "2450:       ...tab,",
          "2451:       headers: state.headers,",
          "2452:       variables: state.variables,",
          "2453:       query: state.query,",
          "2454:       operationName: state.operationName,",
          "2455:       response: state.response,",
          "2456:     };",
          "2457:   });",
          "2459:   return {",
          "2460:     ...state,",
          "2461:     headers: newTab.headers,",
          "2462:     variables: newTab.variables,",
          "2463:     query: newTab.query,",
          "2464:     operationName: newTab.operationName,",
          "2465:     response: newTab.response,",
          "2466:     tabs: {",
          "2467:       ...state.tabs,",
          "2468:       activeTabIndex: state.tabs.tabs.length,",
          "2469:       tabs: [...tabs, newTab],",
          "2470:     },",
          "2471:   };",
          "2472: }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/Tabs.tsx||packages/graphiql/src/components/Tabs.tsx": [
          "File: packages/graphiql/src/components/Tabs.tsx -> packages/graphiql/src/components/Tabs.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import React from 'react';",
          "7: function TabCloseButton(props: { onClick: () => void }) {",
          "8:   return (",
          "9:     <div",
          "10:       role=\"button\"",
          "11:       aria-pressed={false}",
          "12:       className=\"close\"",
          "13:       aria-label=\"Close Tab\"",
          "14:       title=\"Close Tab\"",
          "15:       onClick={ev => {",
          "16:         ev.stopPropagation();",
          "17:         props.onClick();",
          "18:       }}",
          "19:     />",
          "20:   );",
          "21: }",
          "23: export type TabProps = {",
          "24:   isActive: boolean;",
          "25:   title: string;",
          "26:   isCloseable: boolean;",
          "27:   onSelect: () => void;",
          "28:   onClose: () => void;",
          "29:   tabProps?: React.ButtonHTMLAttributes<{}>;",
          "30: };",
          "35: export function Tab(props: TabProps): React.ReactElement {",
          "36:   return (",
          "37:     <button",
          "38:       {...props.tabProps}",
          "39:       role=\"tab\"",
          "40:       type=\"button\"",
          "41:       aria-selected={props.isActive}",
          "42:       title={props.title}",
          "43:       className={`tab${props.isActive ? ' active' : ''}`}",
          "44:       onClick={props.onSelect}>",
          "45:       {props.title}",
          "46:       {props.isCloseable ? (",
          "47:         <TabCloseButton onClick={() => props.onClose()} />",
          "48:       ) : null}",
          "49:     </button>",
          "50:   );",
          "51: }",
          "53: export function TabAddButton(props: { onClick: () => void }) {",
          "54:   return (",
          "55:     <button onClick={props.onClick} className=\"tab-add\" title=\"Create new tab\">",
          "56:       <span>{'+'}</span>",
          "57:     </button>",
          "58:   );",
          "59: }",
          "61: export type TabsProps = {",
          "62:   children: Array<React.ReactNode>;",
          "63:   tabsProps?: React.HTMLAttributes<{}>;",
          "64: };",
          "68: export function Tabs(props: TabsProps) {",
          "69:   return (",
          "70:     <div role=\"tablist\" className=\"tabs\" {...props.tabsProps}>",
          "71:       {props.children}",
          "72:     </div>",
          "73:   );",
          "74: }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx||packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx": [
          "File: packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx -> packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "550:     spy.mockRestore();",
          "551:   });",
          "552: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:   describe('Tabs', () => {",
          "554:     it('not enabled by default', () => {",
          "555:       const { container } = render(<GraphiQL fetcher={noOpFetcher} />);",
          "556:       expect(container.querySelector('.tabs')).not.toBeInTheDocument();",
          "557:     });",
          "558:     it('enable tabs via \"tabs\" property boolean', () => {",
          "559:       const { container } = render(<GraphiQL fetcher={noOpFetcher} tabs />);",
          "560:       expect(container.querySelector('.tabs')).toBeInTheDocument();",
          "561:     });",
          "562:     it('enable tabs via \"tabs\" property object', () => {",
          "563:       const { container } = render(",
          "564:         <GraphiQL fetcher={noOpFetcher} tabs={{}} />,",
          "565:       );",
          "566:       expect(container.querySelector('.tabs')).toBeInTheDocument();",
          "567:     });",
          "568:     it('only one tab is open by default', () => {",
          "569:       const { container } = render(<GraphiQL fetcher={noOpFetcher} tabs />);",
          "570:       expect(container.querySelectorAll('.tabs .tab')).toHaveLength(1);",
          "571:     });",
          "572:     it('single tab has no close button', () => {",
          "573:       const { container } = render(<GraphiQL fetcher={noOpFetcher} tabs />);",
          "574:       expect(container.querySelector('.tab .close')).not.toBeInTheDocument();",
          "575:     });",
          "576:     it('open multiple tabs', () => {",
          "577:       const { container } = render(<GraphiQL fetcher={noOpFetcher} tabs />);",
          "578:       expect(container.querySelectorAll('.tabs .tab')).toHaveLength(1);",
          "579:       fireEvent.click(container.querySelector('.tab-add'));",
          "580:       expect(container.querySelectorAll('.tabs .tab')).toHaveLength(2);",
          "581:       fireEvent.click(container.querySelector('.tab-add'));",
          "582:       expect(container.querySelectorAll('.tabs .tab')).toHaveLength(3);",
          "583:     });",
          "584:     it('each tab has a close button when multiple tabs are open', () => {",
          "585:       const { container } = render(<GraphiQL fetcher={noOpFetcher} tabs />);",
          "586:       expect(container.querySelectorAll('.tab .close')).toHaveLength(0);",
          "587:       fireEvent.click(container.querySelector('.tab-add'));",
          "588:       expect(container.querySelectorAll('.tab .close')).toHaveLength(2);",
          "589:       fireEvent.click(container.querySelector('.tab-add'));",
          "590:       expect(container.querySelectorAll('.tab .close')).toHaveLength(3);",
          "591:     });",
          "592:     it('close button removes a tab', () => {",
          "593:       const { container } = render(<GraphiQL fetcher={noOpFetcher} tabs />);",
          "594:       fireEvent.click(container.querySelector('.tab-add'));",
          "595:       expect(container.querySelectorAll('.tab .close')).toHaveLength(2);",
          "596:       fireEvent.click(container.querySelector('.tab .close'));",
          "597:       expect(container.querySelectorAll('.tabs .tab')).toHaveLength(1);",
          "598:       expect(container.querySelectorAll('.tab .close')).toHaveLength(0);",
          "599:     });",
          "600:   });",
          "",
          "---------------"
        ],
        "packages/graphiql/src/css/app.css||packages/graphiql/src/css/app.css": [
          "File: packages/graphiql/src/css/app.css -> packages/graphiql/src/css/app.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:   color: #000;",
          "489: }",
          "493: .graphiql-container .CodeMirror-foldmarker {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491: .graphiql-container .tabs {",
          "492:   height: 42px;",
          "493:   background-image: linear-gradient(#f7f7f7, #e2e2e2);",
          "494:   display: flex;",
          "495:   align-items: center;",
          "496: }",
          "498: .graphiql-container .tab {",
          "499:   position: relative;",
          "500:   cursor: pointer;",
          "501:   display: flex;",
          "502:   align-items: center;",
          "503:   justify-content: center;",
          "504:   padding-top: 0;",
          "505:   padding-right: 6px;",
          "506:   padding-left: 14px;",
          "507:   height: 100%;",
          "508:   color: rgba(0, 0, 0, 0.6);",
          "510:   border-left: 1px solid lightgray;",
          "512:   Needed for `button` components.",
          "514:   border-top-style: none;",
          "515:   border-bottom-style: none;",
          "516:   border-right-style: none;",
          "517: }",
          "520:   If it's only one tab, we don't have the X button, so we want more padding.",
          "521:   In the .tabs container, we have one more child - the plus button.",
          "522:   So if this tab is first child and the second last at the same time,",
          "523:   this is the case we want to target.",
          "526: .graphiql-container .tab:first-child:nth-last-child(2) {",
          "527:   padding-right: 14px;",
          "528: }",
          "530: .graphiql-container .tab:hover {",
          "531:   background-image: linear-gradient(",
          "532:     rgba(245, 245, 245, 0.7),",
          "533:     rgba(215, 215, 215, 1)",
          "534:   );",
          "535:   color: rgba(0, 0, 0, 0.8);",
          "536: }",
          "538: .graphiql-container .tab.active {",
          "539:   background-image: linear-gradient(",
          "540:     rgba(233, 233, 233, 0.7),",
          "541:     rgba(205, 205, 205, 1)",
          "542:   );",
          "543:   color: black;",
          "544: }",
          "547:   background-image: linear-gradient(",
          "548:     rgba(223, 223, 223, 0.5),",
          "549:     rgba(196, 196, 196, 1)",
          "550:   );",
          "553: .graphiql-container .tab .close {",
          "554:   display: inline-block;",
          "555:   cursor: pointer;",
          "556:   border: none;",
          "557:   background: transparent;",
          "558:   margin-left: 6px;",
          "559:   padding: 3px 6px;",
          "560:   border-radius: 4px;",
          "561: }",
          "563: .graphiql-container .tab:hover .close,",
          "564: .graphiql-container .tab.active .close {",
          "565:   opacity: 1;",
          "566: }",
          "568: .graphiql-container .tab .close::before {",
          "569:   content: '\u2715';",
          "570:   display: inline-block;",
          "571:   font-weight: bold;",
          "572:   font-size: 12px;",
          "573:   color: rgba(0, 0, 0, 0.7);",
          "574:   height: 14px;",
          "575: }",
          "577: .graphiql-container .tab .close:hover {",
          "578:   background: rgba(0, 0, 0, 0.08);",
          "579: }",
          "581: .graphiql-container .tab .close:active {",
          "582:   background: rgba(0, 0, 0, 0.12);",
          "583: }",
          "585: .graphiql-container .tab-add {",
          "586:   display: flex;",
          "587:   align-items: center;",
          "588:   justify-content: center;",
          "589:   border: none;",
          "590:   background: transparent;",
          "591:   line-height: 1;",
          "592:   font-size: 26px;",
          "593:   padding: 0 8px;",
          "594:   height: 30px;",
          "595:   border-radius: 4px;",
          "596:   color: rgba(0, 0, 0, 0.5);",
          "597:   padding-bottom: 3px;",
          "598:   margin-left: 6px;",
          "599:   cursor: pointer;",
          "600: }",
          "602: .graphiql-container .tab-add:hover {",
          "603:   background: rgba(0, 0, 0, 0.06);",
          "604: }",
          "606: .graphiql-container .tab-add:active {",
          "607:   background: rgba(0, 0, 0, 0.1);",
          "608: }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/__tests__/fuzzyExtractOperationTitle.spec.ts||packages/graphiql/src/utility/__tests__/fuzzyExtractOperationTitle.spec.ts": [
          "File: packages/graphiql/src/utility/__tests__/fuzzyExtractOperationTitle.spec.ts -> packages/graphiql/src/utility/__tests__/fuzzyExtractOperationTitle.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { fuzzyExtractOperationTitle } from '../fuzzyExtractOperationTitle';",
          "3: describe('fuzzyExtractionOperationTitle', () => {",
          "4:   it('should extract query names', () => {",
          "5:     expect(fuzzyExtractOperationTitle(' query MyExampleQuery() {}')).toEqual(",
          "6:       'MyExampleQuery',",
          "7:     );",
          "8:   });",
          "9:   it('should extract query names with special characters', () => {",
          "10:     expect(fuzzyExtractOperationTitle(' query My_ExampleQuery() {}')).toEqual(",
          "11:       'My_ExampleQuery',",
          "12:     );",
          "13:   });",
          "14:   it('should extract query names with numbers', () => {",
          "15:     expect(fuzzyExtractOperationTitle(' query My_3xampleQuery() {}')).toEqual(",
          "16:       'My_3xampleQuery',",
          "17:     );",
          "18:   });",
          "19:   it('should extract mutation names with numbers', () => {",
          "20:     expect(",
          "21:       fuzzyExtractOperationTitle(' mutation My_3xampleQuery() {}'),",
          "22:     ).toEqual('My_3xampleQuery');",
          "23:   });",
          "24:   it('should return null for anonymous queries', () => {",
          "25:     expect(fuzzyExtractOperationTitle('{}')).toEqual('<untitled>');",
          "26:   });",
          "27:   it('should not extract query names with comments', () => {",
          "28:     expect(fuzzyExtractOperationTitle('# query My_3xampleQuery() {}')).toEqual(",
          "29:       '<untitled>',",
          "30:     );",
          "31:   });",
          "32: });",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts||packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts": [
          "File: packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts -> packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: export function fuzzyExtractOperationTitle(str: string): string {",
          "5:   const regex = /^[^#](query|subscription|mutation) ([a-zA-Z0-9_]+)/;",
          "6:   const match = regex.exec(str);",
          "8:   return match?.[2] ?? '<untitled>';",
          "9: }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/guid.ts||packages/graphiql/src/utility/guid.ts": [
          "File: packages/graphiql/src/utility/guid.ts -> packages/graphiql/src/utility/guid.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export function guid() {",
          "2:   const s4 = () => {",
          "3:     return Math.floor((1 + Math.random()) * 0x10000)",
          "4:       .toString(16)",
          "5:       .substring(1);",
          "6:   };",
          "9:   return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();",
          "10: }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/id-from-tab-contents.ts||packages/graphiql/src/utility/id-from-tab-contents.ts": [
          "File: packages/graphiql/src/utility/id-from-tab-contents.ts -> packages/graphiql/src/utility/id-from-tab-contents.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export function idFromTabContents(params: {",
          "2:   query: string | undefined;",
          "3:   variables: string | undefined;",
          "4:   headers: string | undefined;",
          "5: }) {",
          "6:   return [",
          "7:     params.query ?? '',",
          "8:     params.variables ?? '',",
          "9:     params.headers ?? '',",
          "10:   ].join('|');",
          "11: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9813eb8fc89e9ff4942da304dea98dad0ceb604b",
      "candidate_info": {
        "commit_hash": "9813eb8fc89e9ff4942da304dea98dad0ceb604b",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/9813eb8fc89e9ff4942da304dea98dad0ceb604b",
        "files": [
          ".changeset/long-gorillas-act.md",
          ".changeset/nice-garlics-help.md",
          "packages/graphiql-react/package.json",
          "packages/graphiql-react/src/editor/components/header-editor.tsx",
          "packages/graphiql-react/src/editor/components/query-editor.tsx",
          "packages/graphiql-react/src/editor/components/variable-editor.tsx",
          "packages/graphiql-react/src/editor/style/codemirror.css",
          "packages/graphiql-react/src/icons/chevron-down.svg",
          "packages/graphiql-react/src/icons/chevron-up.svg",
          "packages/graphiql-react/src/icons/index.tsx",
          "packages/graphiql-react/src/index.ts",
          "packages/graphiql-react/src/style/root.css",
          "packages/graphiql-react/src/ui/button.css",
          "packages/graphiql-react/src/ui/button.tsx",
          "packages/graphiql-react/src/ui/index.ts",
          "packages/graphiql-react/src/vite-env.d.ts",
          "packages/graphiql-react/vite.config.ts",
          "packages/graphiql/__mocks__/@graphiql/react.tsx",
          "packages/graphiql/cypress/integration/init.spec.ts",
          "packages/graphiql/cypress/integration/tabs.spec.ts",
          "packages/graphiql/cypress/support/commands.ts",
          "packages/graphiql/src/cdn.ts",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx",
          "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "packages/graphiql/src/css/app.css",
          "packages/graphiql/src/css/loading.css",
          "packages/graphiql/src/style.css",
          "yarn.lock"
        ],
        "message": "[redesign] layout for editor components (#2515)\n\n* add icons to `@graphiql/react`\n\n* add `UnstyledButton` ui component\n\n* implement new design for editors layout\n\n* rename `Unstyled` to `UnStyled` for spell checking\n\n* remove unused class and whitespace in `className`\n\n* make tiny change for deploy preview \ud83e\udd1e\n\n* this will do it, i think?\n\nCo-authored-by: Rikki Schulte <rikki.schulte@gmail.com>",
        "before_after_code_files": [
          "packages/graphiql-react/src/editor/components/header-editor.tsx||packages/graphiql-react/src/editor/components/header-editor.tsx",
          "packages/graphiql-react/src/editor/components/query-editor.tsx||packages/graphiql-react/src/editor/components/query-editor.tsx",
          "packages/graphiql-react/src/editor/components/variable-editor.tsx||packages/graphiql-react/src/editor/components/variable-editor.tsx",
          "packages/graphiql-react/src/editor/style/codemirror.css||packages/graphiql-react/src/editor/style/codemirror.css",
          "packages/graphiql-react/src/icons/index.tsx||packages/graphiql-react/src/icons/index.tsx",
          "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts",
          "packages/graphiql-react/src/style/root.css||packages/graphiql-react/src/style/root.css",
          "packages/graphiql-react/src/ui/button.css||packages/graphiql-react/src/ui/button.css",
          "packages/graphiql-react/src/ui/button.tsx||packages/graphiql-react/src/ui/button.tsx",
          "packages/graphiql-react/src/ui/index.ts||packages/graphiql-react/src/ui/index.ts",
          "packages/graphiql-react/src/vite-env.d.ts||packages/graphiql-react/src/vite-env.d.ts",
          "packages/graphiql-react/vite.config.ts||packages/graphiql-react/vite.config.ts",
          "packages/graphiql/__mocks__/@graphiql/react.tsx||packages/graphiql/__mocks__/@graphiql/react.tsx",
          "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
          "packages/graphiql/cypress/integration/tabs.spec.ts||packages/graphiql/cypress/integration/tabs.spec.ts",
          "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
          "packages/graphiql/src/cdn.ts||packages/graphiql/src/cdn.ts",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx||packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx",
          "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx||packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "packages/graphiql/src/css/app.css||packages/graphiql/src/css/app.css",
          "packages/graphiql/src/css/loading.css||packages/graphiql/src/css/loading.css",
          "packages/graphiql/src/style.css||packages/graphiql/src/style.css",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
            "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
            "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/editor/components/header-editor.tsx||packages/graphiql-react/src/editor/components/header-editor.tsx": [
          "File: packages/graphiql-react/src/editor/components/header-editor.tsx -> packages/graphiql-react/src/editor/components/header-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import '../style/codemirror.css';",
          "4: import '../style/fold.css';",
          "9:   const ref = useHeaderEditor(hookArgs);",
          "10:   return (",
          "21:   );",
          "22: }",
          "",
          "[Removed Lines]",
          "6: type HeaderEditorProps = UseHeaderEditorArgs & { active?: boolean };",
          "8: export function HeaderEditor({ active, ...hookArgs }: HeaderEditorProps) {",
          "11:     <div",
          "12:       className=\"codemirrorWrap\"",
          "15:       style={{",
          "16:         position: active ? 'relative' : 'absolute',",
          "17:         visibility: active ? 'visible' : 'hidden',",
          "18:       }}",
          "19:       ref={ref}",
          "20:     />",
          "",
          "[Added Lines]",
          "6: type HeaderEditorProps = UseHeaderEditorArgs & { isHidden?: boolean };",
          "8: export function HeaderEditor({ isHidden, ...hookArgs }: HeaderEditorProps) {",
          "11:     <div className={`graphiql-editor${isHidden ? ' hidden' : ''}`} ref={ref} />",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/components/query-editor.tsx||packages/graphiql-react/src/editor/components/query-editor.tsx": [
          "File: packages/graphiql-react/src/editor/components/query-editor.tsx -> packages/graphiql-react/src/editor/components/query-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: export function QueryEditor(props: UseQueryEditorArgs) {",
          "12:   const ref = useQueryEditor(props);",
          "16: }",
          "",
          "[Removed Lines]",
          "13:   return (",
          "14:     <section className=\"query-editor\" aria-label=\"Query Editor\" ref={ref} />",
          "15:   );",
          "",
          "[Added Lines]",
          "13:   return <div className=\"graphiql-editor\" ref={ref} />;",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/components/variable-editor.tsx||packages/graphiql-react/src/editor/components/variable-editor.tsx": [
          "File: packages/graphiql-react/src/editor/components/variable-editor.tsx -> packages/graphiql-react/src/editor/components/variable-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import '../style/hint.css';",
          "8: type VariableEditorProps = UseVariableEditorArgs & {",
          "10: };",
          "13:   const ref = useVariableEditor(hookArgs);",
          "14:   return (",
          "25:   );",
          "26: }",
          "",
          "[Removed Lines]",
          "9:   active?: boolean;",
          "12: export function VariableEditor({ active, ...hookArgs }: VariableEditorProps) {",
          "15:     <div",
          "16:       className=\"codemirrorWrap\"",
          "19:       style={{",
          "20:         position: active ? 'relative' : 'absolute',",
          "21:         visibility: active ? 'visible' : 'hidden',",
          "22:       }}",
          "23:       ref={ref}",
          "24:     />",
          "",
          "[Added Lines]",
          "9:   isHidden?: boolean;",
          "12: export function VariableEditor({ isHidden, ...hookArgs }: VariableEditorProps) {",
          "15:     <div className={`graphiql-editor${isHidden ? ' hidden' : ''}`} ref={ref} />",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/style/codemirror.css||packages/graphiql-react/src/editor/style/codemirror.css": [
          "File: packages/graphiql-react/src/editor/style/codemirror.css -> packages/graphiql-react/src/editor/style/codemirror.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: .cm-s-graphiql {",
          "38:   & .cm-keyword {",
          "39:     color: var(--color-pink);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   color: var(--color-neutral-60);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/icons/index.tsx||packages/graphiql-react/src/icons/index.tsx": [
          "File: packages/graphiql-react/src/icons/index.tsx -> packages/graphiql-react/src/icons/index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import _ChevronDownIcon from './chevron-down.svg';",
          "2: import _ChevronUpIcon from './chevron-up.svg';",
          "4: export const ChevronDownIcon = generateIcon(",
          "5:   _ChevronDownIcon,",
          "6:   'chevron down icon',",
          "7: );",
          "8: export const ChevronUpIcon = generateIcon(_ChevronUpIcon, 'chevron up icon');",
          "10: function generateIcon(RawComponent: any, title: string) {",
          "11:   const WithTitle = function IconComponent(",
          "12:     props: JSX.IntrinsicElements['svg'],",
          "13:   ) {",
          "14:     return <RawComponent {...props} title={title} />;",
          "15:   };",
          "16:   Object.defineProperty(WithTitle, 'name', { value: RawComponent.name });",
          "17:   return WithTitle;",
          "18: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts": [
          "File: packages/graphiql-react/src/index.ts -> packages/graphiql-react/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   useHistoryContext,",
          "34:   useSelectHistoryItem,",
          "35: } from './history';",
          "36: export {",
          "37:   SchemaContext,",
          "38:   SchemaContextProvider,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: export * from './icons';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:   StorageContextProvider,",
          "44:   useStorageContext,",
          "45: } from './storage';",
          "46: export { useDragResize } from './utility/resize';",
          "48: export type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: export * from './ui';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/style/root.css||packages/graphiql-react/src/style/root.css": [
          "File: packages/graphiql-react/src/style/root.css -> packages/graphiql-react/src/style/root.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   --px-16: 16px;",
          "44:   --border-radius-4: 4px;",
          "45:   --border-radius-8: 8px;",
          "48:   --box-shadow: 0px 6px 20px rgba(59, 76, 106, 0.13),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:   --border-radius-2: 2px;",
          "47:   --border-radius-12: 12px;",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/ui/button.css||packages/graphiql-react/src/ui/button.css": [
          "File: packages/graphiql-react/src/ui/button.css -> packages/graphiql-react/src/ui/button.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: button.graphiql-un-styled {",
          "2:   all: unset;",
          "3:   border-radius: var(--border-radius-4);",
          "4:   cursor: pointer;",
          "6:   &:active {",
          "7:     background-color: var(--color-neutral-7);",
          "8:   }",
          "10:   &:focus {",
          "11:     outline: var(--color-neutral-15) auto 1px;",
          "12:   }",
          "13: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/ui/button.tsx||packages/graphiql-react/src/ui/button.tsx": [
          "File: packages/graphiql-react/src/ui/button.tsx -> packages/graphiql-react/src/ui/button.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import './button.css';",
          "3: export function UnStyledButton(props: JSX.IntrinsicElements['button']) {",
          "4:   return (",
          "5:     <button",
          "6:       {...props}",
          "7:       className={`graphiql-un-styled ${props.className || ''}`.trim()}",
          "8:     />",
          "9:   );",
          "10: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/ui/index.ts||packages/graphiql-react/src/ui/index.ts": [
          "File: packages/graphiql-react/src/ui/index.ts -> packages/graphiql-react/src/ui/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export * from './button';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/vite-env.d.ts||packages/graphiql-react/src/vite-env.d.ts": [
          "File: packages/graphiql-react/src/vite-env.d.ts -> packages/graphiql-react/src/vite-env.d.ts"
        ],
        "packages/graphiql-react/vite.config.ts||packages/graphiql-react/vite.config.ts": [
          "File: packages/graphiql-react/vite.config.ts -> packages/graphiql-react/vite.config.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { defineConfig } from 'vite';",
          "2: import react from '@vitejs/plugin-react';",
          "4: export default defineConfig({",
          "6:   esbuild: {",
          "",
          "[Removed Lines]",
          "5:   plugins: [react()],",
          "",
          "[Added Lines]",
          "3: import reactSvgPlugin from 'vite-plugin-react-svg';",
          "6:   plugins: [",
          "7:     react(),",
          "8:     reactSvgPlugin({",
          "9:       defaultExport: 'component',",
          "10:       expandProps: 'end',",
          "11:       titleProp: true,",
          "12:     }),",
          "13:   ],",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.tsx||packages/graphiql/__mocks__/@graphiql/react.tsx": [
          "File: packages/graphiql/__mocks__/@graphiql/react.tsx -> packages/graphiql/__mocks__/@graphiql/react.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {",
          "2:   EditorContext,",
          "3:   EditorContextProvider,",
          "4:   ExecutionContext,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:   ChevronDownIcon,",
          "3:   ChevronUpIcon,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:   SchemaContextProvider,",
          "14:   StorageContext,",
          "15:   StorageContextProvider,",
          "16:   useAutoCompleteLeafs,",
          "17:   useCopyQuery,",
          "18:   useDragResize,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   UnStyledButton,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: import React, { useEffect, useRef, useState } from 'react';",
          "56: export {",
          "57:   EditorContext,",
          "58:   EditorContextProvider,",
          "59:   ExecutionContext,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:   ChevronDownIcon,",
          "61:   ChevronUpIcon,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:   SchemaContextProvider,",
          "69:   StorageContext,",
          "70:   StorageContextProvider,",
          "71:   useAutoCompleteLeafs,",
          "72:   useCopyQuery,",
          "73:   useDragResize,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:   UnStyledButton,",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
          "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:       '.graphiql-container',",
          "34:       '.topBarWrap',",
          "35:       '.editorWrap',",
          "39:     ];",
          "40:     cy.visit(`/`);",
          "42:     containers.forEach(cSelector => cy.get(cSelector).should('be.visible'));",
          "43:   });",
          "",
          "[Removed Lines]",
          "36:       '.queryWrap',",
          "37:       '.resultWrap',",
          "38:       '.variable-editor',",
          "41:     cy.get('.query-editor').contains('# Welcome to GraphiQL');",
          "",
          "[Added Lines]",
          "36:       '.graphiql-editors',",
          "37:       '.graphiql-response',",
          "38:       '.graphiql-editor-tool',",
          "41:     cy.get('.graphiql-query-editor').contains('# Welcome to GraphiQL');",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/integration/tabs.spec.ts||packages/graphiql/cypress/integration/tabs.spec.ts": [
          "File: packages/graphiql/cypress/integration/tabs.spec.ts -> packages/graphiql/cypress/integration/tabs.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:     cy.get('#session-tab-0').should('have.text', '<untitled>');",
          "8:     cy.get('#session-tab-0').should('have.text', '<untitled>');",
          "",
          "[Removed Lines]",
          "7:     cy.get('.query-editor textarea').type('{id', { force: true }).wait(500);",
          "",
          "[Added Lines]",
          "7:     cy.get('.graphiql-query-editor textarea')",
          "8:       .type('{id', { force: true })",
          "9:       .wait(500);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:     cy.get('.tab-add').click();",
          "18:       .type('query Foo {image', { force: true })",
          "19:       .wait(500);",
          "20:     cy.get('#session-tab-1').should('have.text', 'Foo');",
          "24:       .eq(0)",
          "25:       .type('{\"someVar\":42', { force: true });",
          "30:       .eq(1)",
          "31:       .type('{\"someHeader\":\"someValue\"', { force: true });",
          "",
          "[Removed Lines]",
          "17:     cy.get('.query-editor textarea')",
          "23:     cy.get('.variable-editor textarea')",
          "28:     cy.contains('Request Headers').click();",
          "29:     cy.get('.variable-editor textarea')",
          "",
          "[Added Lines]",
          "19:     cy.get('.graphiql-query-editor textarea')",
          "25:     cy.get('.graphiql-editor-tool textarea')",
          "30:     cy.contains('Headers').click();",
          "31:     cy.get('.graphiql-editor-tool textarea')",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts": [
          "File: packages/graphiql/cypress/support/commands.ts -> packages/graphiql/cypress/support/commands.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: Cypress.Commands.add(",
          "73:   'assertHasValues',",
          "74:   ({ query, variables, variablesString, headersString, response }: Op) => {",
          "76:       expect(normalize(element.get(0).innerText)).to.equal(",
          "77:         codeWithLineNumbers(query),",
          "78:       );",
          "79:     });",
          "80:     if (typeof variables !== 'undefined') {",
          "83:         .eq(0)",
          "84:         .should(element => {",
          "85:           expect(normalize(element.get(0).innerText)).to.equal(",
          "",
          "[Removed Lines]",
          "75:     cy.get('.query-editor').should(element => {",
          "81:       cy.contains('Query Variables').click();",
          "82:       cy.get('.variable-editor .codemirrorWrap')",
          "",
          "[Added Lines]",
          "75:     cy.get('.graphiql-query-editor').should(element => {",
          "81:       cy.contains('Variables').click();",
          "82:       cy.get('.graphiql-editor-tool .graphiql-editor')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         });",
          "89:     }",
          "90:     if (typeof variablesString !== 'undefined') {",
          "93:         .eq(0)",
          "94:         .should(element => {",
          "95:           expect(normalize(element.get(0).innerText)).to.equal(",
          "",
          "[Removed Lines]",
          "91:       cy.contains('Query Variables').click();",
          "92:       cy.get('.variable-editor .codemirrorWrap')",
          "",
          "[Added Lines]",
          "91:       cy.contains('Variables').click();",
          "92:       cy.get('.graphiql-editor-tool .graphiql-editor')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:         });",
          "99:     }",
          "100:     if (typeof headersString !== 'undefined') {",
          "103:         .eq(1)",
          "104:         .should(element => {",
          "105:           expect(normalize(element.get(0).innerText)).to.equal(",
          "",
          "[Removed Lines]",
          "101:       cy.contains('Request Headers').click();",
          "102:       cy.get('.variable-editor .codemirrorWrap')",
          "",
          "[Added Lines]",
          "101:       cy.contains('Headers').click();",
          "102:       cy.get('.graphiql-editor-tool .graphiql-editor')",
          "",
          "---------------"
        ],
        "packages/graphiql/src/cdn.ts||packages/graphiql/src/cdn.ts": [
          "File: packages/graphiql/src/cdn.ts -> packages/graphiql/src/cdn.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import '@graphiql/react/font/roboto.css';",
          "12: import '@graphiql/react/font/fira-code.css';",
          "13: import '@graphiql/react/dist/style.css';",
          "14: import './css/app.css';",
          "16: import './css/doc-explorer.css';",
          "17: import './css/history.css';",
          "",
          "[Removed Lines]",
          "15: import './css/loading.css';",
          "",
          "[Added Lines]",
          "14: import './style.css';",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     );",
          "61:   } else if (isFetching) {",
          "68:   } else if (!schema) {",
          "",
          "[Removed Lines]",
          "63:     content = (",
          "64:       <div className=\"spinner-container\">",
          "65:         <div className=\"spinner\" />",
          "66:       </div>",
          "67:     );",
          "",
          "[Added Lines]",
          "63:     content = <div className=\"graphiql-spinner\" />;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: } from 'graphql';",
          "24: import {",
          "25:   EditorContextProvider,",
          "26:   ExecutionContextProvider,",
          "27:   ExecutionContextType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:   ChevronDownIcon,",
          "26:   ChevronUpIcon,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   ResponseEditor,",
          "33:   SchemaContextProvider,",
          "34:   StorageContextProvider,",
          "35:   useAutoCompleteLeafs,",
          "36:   useCopyQuery,",
          "37:   useDragResize,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:   UnStyledButton,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "553:     direction: 'horizontal',",
          "554:     storageKey: 'editorFlex',",
          "555:   });",
          "557:     defaultSizeRelation: 3,",
          "558:     direction: 'vertical',",
          "559:     initiallyHidden: (() => {",
          "",
          "[Removed Lines]",
          "556:   const secondaryEditorResize = useDragResize({",
          "",
          "[Added Lines]",
          "559:   const editorToolsResize = useDragResize({",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "589:       prettify={prettify}",
          "590:       docResize={docResize}",
          "591:       editorResize={editorResize}",
          "593:       ref={ref}",
          "594:     />",
          "595:   );",
          "",
          "[Removed Lines]",
          "592:       secondaryEditorResize={secondaryEditorResize}",
          "",
          "[Added Lines]",
          "595:       editorToolsResize={editorToolsResize}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "614:   docResize: ReturnType<typeof useDragResize>;",
          "615:   editorResize: ReturnType<typeof useDragResize>;",
          "617: };",
          "619: export type GraphiQLState = {",
          "",
          "[Removed Lines]",
          "616:   secondaryEditorResize: ReturnType<typeof useDragResize>;",
          "",
          "[Added Lines]",
          "619:   editorToolsResize: ReturnType<typeof useDragResize>;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "737:                       this.props.editorContext.closeTab(index);",
          "738:                     }}",
          "739:                     tabProps={{",
          "741:                       id: `session-tab-${index}`,",
          "742:                     }}",
          "743:                   />",
          "",
          "[Removed Lines]",
          "740:                       'aria-controls': 'sessionWrap',",
          "",
          "[Added Lines]",
          "743:                       'aria-controls': 'graphiql-session',",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "751:             ) : null}",
          "752:             <div",
          "753:               role=\"tabpanel\"",
          "756:               aria-labelledby={`session-tab-${this.props.editorContext.activeTabIndex}`}>",
          "757:               <div ref={this.props.editorResize.firstRef}>",
          "794:                           }",
          "814:                               : ''",
          "816:                           onClick={() => {",
          "817:                             if (",
          "819:                               'second'",
          "820:                             ) {",
          "822:                                 null,",
          "823:                               );",
          "824:                             }",
          "825:                             this.setState(",
          "826:                               {",
          "828:                               },",
          "829:                               () => {",
          "831:                               },",
          "832:                             );",
          "833:                           }}>",
          "837:                     </div>",
          "838:                   </div>",
          "840:                     <section",
          "842:                       aria-label={",
          "843:                         this.state.activeSecondaryEditor === 'variable'",
          "846:                       }>",
          "847:                       <VariableEditor",
          "848:                         onEdit={this.props.onEditVariables}",
          "849:                         editorTheme={this.props.editorTheme}",
          "850:                         readOnly={this.props.readOnly}",
          "852:                         keyMap={this.props.keyMap}",
          "853:                       />",
          "854:                       {headerEditorEnabled && (",
          "855:                         <HeaderEditor",
          "857:                           editorTheme={this.props.editorTheme}",
          "858:                           onEdit={this.props.onEditHeaders}",
          "859:                           readOnly={this.props.readOnly}",
          "",
          "[Removed Lines]",
          "754:               id=\"sessionWrap\"",
          "755:               className=\"editorBar\"",
          "758:                 <div className=\"queryWrap\">",
          "759:                   <div ref={this.props.secondaryEditorResize.firstRef}>",
          "760:                     <QueryEditor",
          "761:                       editorTheme={this.props.editorTheme}",
          "762:                       externalFragments={this.props.externalFragments}",
          "763:                       onClickReference={() => {",
          "764:                         if (this.props.docResize.hiddenElement === 'second') {",
          "765:                           this.props.docResize.setHiddenElement(null);",
          "766:                         }",
          "767:                       }}",
          "768:                       keyMap={this.props.keyMap}",
          "769:                       onCopyQuery={this.props.onCopyQuery}",
          "770:                       onEdit={this.props.onEditQuery}",
          "771:                       onEditOperationName={this.props.onEditOperationName}",
          "772:                       readOnly={this.props.readOnly}",
          "773:                       validationRules={this.props.validationRules}",
          "774:                     />",
          "775:                   </div>",
          "776:                   <div ref={this.props.secondaryEditorResize.dragBarRef}>",
          "777:                     <div",
          "778:                       className=\"secondary-editor-title variable-editor-title\"",
          "779:                       id=\"secondary-editor-title\">",
          "780:                       <div",
          "781:                         className={`variable-editor-title-text${",
          "782:                           this.state.activeSecondaryEditor === 'variable'",
          "783:                             ? ' active'",
          "784:                             : ''",
          "785:                         }`}",
          "786:                         onClick={() => {",
          "787:                           if (",
          "788:                             this.props.secondaryEditorResize.hiddenElement ===",
          "789:                             'second'",
          "790:                           ) {",
          "791:                             this.props.secondaryEditorResize.setHiddenElement(",
          "792:                               null,",
          "793:                             );",
          "795:                           this.setState(",
          "796:                             {",
          "797:                               activeSecondaryEditor: 'variable',",
          "798:                             },",
          "799:                             () => {",
          "800:                               this.props.editorContext.variableEditor?.refresh();",
          "801:                             },",
          "802:                           );",
          "803:                         }}>",
          "804:                         Query Variables",
          "805:                       </div>",
          "806:                       {headerEditorEnabled && (",
          "807:                         <div",
          "808:                           style={{",
          "809:                             marginLeft: '20px',",
          "810:                           }}",
          "811:                           className={`variable-editor-title-text${",
          "812:                             this.state.activeSecondaryEditor === 'header'",
          "813:                               ? ' active'",
          "815:                           }`}",
          "818:                               this.props.secondaryEditorResize.hiddenElement ===",
          "821:                               this.props.secondaryEditorResize.setHiddenElement(",
          "827:                                 activeSecondaryEditor: 'header',",
          "830:                                 this.props.editorContext.headerEditor?.refresh();",
          "834:                           Request Headers",
          "835:                         </div>",
          "836:                       )}",
          "839:                   <div ref={this.props.secondaryEditorResize.secondRef}>",
          "841:                       className=\"variable-editor secondary-editor\"",
          "844:                           ? 'Query Variables'",
          "845:                           : 'Request Headers'",
          "851:                         active={this.state.activeSecondaryEditor === 'variable'}",
          "856:                           active={this.state.activeSecondaryEditor === 'header'}",
          "",
          "[Added Lines]",
          "757:               id=\"graphiql-session\"",
          "758:               className=\"graphiql-session\"",
          "761:                 <div className=\"graphiql-editors\">",
          "762:                   <div ref={this.props.editorToolsResize.firstRef}>",
          "763:                     <section",
          "764:                       className=\"graphiql-query-editor\"",
          "765:                       aria-label=\"Query Editor\">",
          "766:                       <QueryEditor",
          "767:                         editorTheme={this.props.editorTheme}",
          "768:                         externalFragments={this.props.externalFragments}",
          "769:                         keyMap={this.props.keyMap}",
          "770:                         onClickReference={() => {",
          "771:                           if (this.props.docResize.hiddenElement === 'second') {",
          "772:                             this.props.docResize.setHiddenElement(null);",
          "774:                         }}",
          "775:                         onCopyQuery={this.props.onCopyQuery}",
          "776:                         onEdit={this.props.onEditQuery}",
          "777:                         onEditOperationName={this.props.onEditOperationName}",
          "778:                         readOnly={this.props.readOnly}",
          "779:                         validationRules={this.props.validationRules}",
          "780:                       />",
          "781:                     </section>",
          "782:                   </div>",
          "783:                   <div ref={this.props.editorToolsResize.dragBarRef}>",
          "784:                     <div className=\"graphiql-editor-tools\">",
          "785:                       <div className=\"graphiql-editor-tools-tabs\">",
          "786:                         <UnStyledButton",
          "787:                           className={",
          "788:                             this.state.activeSecondaryEditor === 'variable'",
          "789:                               ? 'active'",
          "791:                           }",
          "794:                               this.props.editorToolsResize.hiddenElement ===",
          "797:                               this.props.editorToolsResize.setHiddenElement(",
          "803:                                 activeSecondaryEditor: 'variable',",
          "806:                                 this.props.editorContext.variableEditor?.refresh();",
          "810:                           Variables",
          "811:                         </UnStyledButton>",
          "812:                         {this.props.headerEditorEnabled ? (",
          "813:                           <UnStyledButton",
          "814:                             className={",
          "815:                               this.state.activeSecondaryEditor === 'header'",
          "816:                                 ? 'active'",
          "817:                                 : ''",
          "818:                             }",
          "819:                             onClick={() => {",
          "820:                               if (",
          "821:                                 this.props.editorToolsResize.hiddenElement ===",
          "822:                                 'second'",
          "823:                               ) {",
          "824:                                 this.props.editorToolsResize.setHiddenElement(",
          "825:                                   null,",
          "826:                                 );",
          "827:                               }",
          "828:                               this.setState(",
          "829:                                 {",
          "830:                                   activeSecondaryEditor: 'header',",
          "831:                                 },",
          "832:                                 () => {",
          "833:                                   this.props.editorContext.headerEditor?.refresh();",
          "834:                                 },",
          "835:                               );",
          "836:                             }}>",
          "837:                             Headers",
          "838:                           </UnStyledButton>",
          "839:                         ) : null}",
          "840:                       </div>",
          "841:                       <UnStyledButton",
          "842:                         onClick={() => {",
          "843:                           if (",
          "844:                             this.props.editorToolsResize.hiddenElement ===",
          "845:                             'second'",
          "846:                           ) {",
          "847:                             this.props.editorToolsResize.setHiddenElement(null);",
          "848:                           } else {",
          "849:                             this.props.editorToolsResize.setHiddenElement(",
          "850:                               'second',",
          "851:                             );",
          "852:                           }",
          "853:                         }}>",
          "854:                         {this.props.editorToolsResize.hiddenElement ===",
          "855:                         'second' ? (",
          "856:                           <ChevronUpIcon className=\"graphiql-chevron-icon\" />",
          "857:                         ) : (",
          "858:                           <ChevronDownIcon className=\"graphiql-chevron-icon\" />",
          "859:                         )}",
          "860:                       </UnStyledButton>",
          "863:                   <div ref={this.props.editorToolsResize.secondRef}>",
          "865:                       className=\"graphiql-editor-tool\"",
          "868:                           ? 'Variables'",
          "869:                           : 'Headers'",
          "875:                         isHidden={",
          "876:                           this.state.activeSecondaryEditor !== 'variable'",
          "877:                         }",
          "882:                           isHidden={",
          "883:                             this.state.activeSecondaryEditor !== 'header'",
          "884:                           }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "866:                 </div>",
          "867:               </div>",
          "868:               <div ref={this.props.editorResize.dragBarRef}>",
          "870:               </div>",
          "871:               <div ref={this.props.editorResize.secondRef}>",
          "878:                   <ResponseEditor",
          "879:                     value={this.props.response}",
          "880:                     editorTheme={this.props.editorTheme}",
          "",
          "[Removed Lines]",
          "869:                 <div className=\"editor-drag-bar\" />",
          "872:                 <div className=\"resultWrap\">",
          "873:                   {this.props.executionContext.isFetching && (",
          "874:                     <div className=\"spinner-container\">",
          "875:                       <div className=\"spinner\" />",
          "876:                     </div>",
          "877:                   )}",
          "",
          "[Added Lines]",
          "897:                 <div className=\"graphiql-horizontal-drag-bar\" />",
          "900:                 <div className=\"graphiql-response\">",
          "901:                   {this.props.executionContext.isFetching ? (",
          "902:                     <div className=\"graphiql-spinner\" />",
          "903:                   ) : null}",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx||packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx": [
          "File: packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx -> packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:         <DocExplorerWithContext />",
          "47:       </SchemaContext.Provider>,",
          "48:     );",
          "50:     expect(spinner).toHaveLength(1);",
          "51:   });",
          "52:   it('renders with null schema', () => {",
          "",
          "[Removed Lines]",
          "49:     const spinner = container.querySelectorAll('.spinner-container');",
          "",
          "[Added Lines]",
          "49:     const spinner = container.querySelectorAll('.graphiql-spinner');",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx||packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx": [
          "File: packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx -> packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     const { container: container1 } = render(",
          "138:       <GraphiQL fetcher={noOpFetcher} />,",
          "139:     );",
          "142:     expect(queryVariables).not.toBeVisible();",
          "144:     const secondaryEditorTitle = container1.querySelector(",
          "146:     );",
          "147:     fireEvent.mouseDown(secondaryEditorTitle);",
          "148:     fireEvent.mouseMove(secondaryEditorTitle, { buttons: 1, clientY: 50 });",
          "",
          "[Removed Lines]",
          "140:     const queryVariables = container1.querySelector('.variable-editor');",
          "145:       '#secondary-editor-title',",
          "",
          "[Added Lines]",
          "140:     const queryVariables = container1.querySelector('.graphiql-editor-tool');",
          "145:       '.graphiql-editor-tools',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:     const { container: container2 } = render(",
          "152:       <GraphiQL fetcher={noOpFetcher} defaultVariableEditorOpen />,",
          "153:     );",
          "158:     const { container: container3 } = render(",
          "159:       <GraphiQL",
          "",
          "[Removed Lines]",
          "154:     expect(",
          "155:       container2.querySelector('[aria-label=\"Query Variables\"]'),",
          "156:     ).toBeVisible();",
          "",
          "[Added Lines]",
          "154:     expect(container2.querySelector('[aria-label=\"Variables\"]')).toBeVisible();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:         defaultVariableEditorOpen={false}",
          "163:       />,",
          "164:     );",
          "166:     expect(queryVariables3).not.toBeVisible();",
          "167:   });",
          "",
          "[Removed Lines]",
          "165:     const queryVariables3 = container3.querySelector('.variable-editor');",
          "",
          "[Added Lines]",
          "163:     const queryVariables3 = container3.querySelector('.graphiql-editor-tool');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "290:     await wait();",
          "292:     fireEvent.change(",
          "294:       {",
          "295:         target: { value: mockVariables2 },",
          "296:       },",
          "",
          "[Removed Lines]",
          "293:       container.querySelector('[aria-label=\"Query Variables\"] .mockCodeMirror'),",
          "",
          "[Added Lines]",
          "291:       container.querySelector('[aria-label=\"Variables\"] .mockCodeMirror'),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "319:     expect(container.querySelectorAll('.history-label')).toHaveLength(1);",
          "320:     await wait();",
          "324:     fireEvent.change(",
          "326:       {",
          "327:         target: { value: mockHeaders2 },",
          "328:       },",
          "",
          "[Removed Lines]",
          "322:     fireEvent.click(getByText('Request Headers'));",
          "325:       container.querySelector('[aria-label=\"Request Headers\"] .mockCodeMirror'),",
          "",
          "[Added Lines]",
          "320:     fireEvent.click(getByText('Headers'));",
          "323:       container.querySelector('[aria-label=\"Headers\"] .mockCodeMirror'),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "504:     await wait();",
          "509:     fireEvent.mouseDown(dragBar, {",
          "510:       button: 0,",
          "",
          "[Removed Lines]",
          "506:     const dragBar = container.querySelector('.editor-drag-bar');",
          "507:     const queryWrap = container.querySelector('.queryWrap');",
          "",
          "[Added Lines]",
          "504:     const dragBar = container.querySelector('.graphiql-horizontal-drag-bar');",
          "505:     const editors = container.querySelector('.graphiql-editors');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "519:     fireEvent.mouseUp(dragBar);",
          "524:     clientWidthSpy.mockRestore();",
          "525:     boundingClientRectSpy.mockRestore();",
          "",
          "[Removed Lines]",
          "522:     expect(queryWrap.parentElement.style.flex).toEqual('3.5');",
          "",
          "[Added Lines]",
          "520:     expect(editors.parentElement.style.flex).toEqual('3.5');",
          "",
          "---------------"
        ],
        "packages/graphiql/src/css/app.css||packages/graphiql/src/css/app.css": [
          "File: packages/graphiql/src/css/app.css -> packages/graphiql/src/css/app.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   width: 9px;",
          "89: }",
          "112: .graphiql-container .docExplorerWrap,",
          "113: .graphiql-container .historyPaneWrap {",
          "114:   background: white;",
          "",
          "[Removed Lines]",
          "91: .graphiql-container .editorBar {",
          "92:   display: flex;",
          "93:   flex-direction: row;",
          "94:   flex: 1;",
          "95:   max-height: 100%;",
          "96: }",
          "98: .graphiql-container .queryWrap {",
          "99:   display: flex;",
          "100:   flex-direction: column;",
          "101:   flex: 1;",
          "102: }",
          "104: .graphiql-container .resultWrap {",
          "105:   display: flex;",
          "106:   flex-direction: column;",
          "107:   flex: 1;",
          "108:   flex-basis: 1em;",
          "109:   position: relative;",
          "110: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:   line-height: 14px;",
          "142: }",
          "177: .graphiql-container .result-window {",
          "178:   flex: 1;",
          "179:   height: 100%;",
          "",
          "[Removed Lines]",
          "144: .graphiql-container div .query-editor {",
          "145:   flex: 1;",
          "146:   position: relative;",
          "147: }",
          "149: .graphiql-container .secondary-editor {",
          "150:   display: flex;",
          "151:   flex-direction: column;",
          "152:   height: 100%;",
          "153:   position: relative;",
          "154: }",
          "156: .graphiql-container .secondary-editor-title {",
          "157:   background: #eeeeee;",
          "158:   border-bottom: 1px solid #d6d6d6;",
          "159:   border-top: 1px solid #e0e0e0;",
          "160:   color: #777;",
          "161:   cursor: row-resize;",
          "162:   font-variant: small-caps;",
          "163:   font-weight: bold;",
          "164:   letter-spacing: 1px;",
          "165:   line-height: 14px;",
          "166:   padding: 6px 0 8px 43px;",
          "167:   text-transform: lowercase;",
          "168:   user-select: none;",
          "169: }",
          "171: .graphiql-container .codemirrorWrap {",
          "172:   flex: 1;",
          "173:   height: 100%;",
          "174:   position: relative;",
          "175: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:   width: 12px;",
          "199: }",
          "209: .graphiql-container .toolbar-button {",
          "210:   background: #fdfdfd;",
          "211:   background: linear-gradient(#f9f9f9, #ececec);",
          "",
          "[Removed Lines]",
          "201: .editor-drag-bar {",
          "202:   width: 12px;",
          "203:   background-color: #eeeeee;",
          "204:   border-left: 1px solid #e0e0e0;",
          "205:   border-right: 1px solid #e0e0e0;",
          "206:   cursor: col-resize;",
          "207: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "370:   fill: #fff;",
          "371: }",
          "383: .graphiql-container .tabs {",
          "384:   height: 42px;",
          "385:   background-image: linear-gradient(#f7f7f7, #e2e2e2);",
          "",
          "[Removed Lines]",
          "373: .graphiql-container .variable-editor-title-text {",
          "374:   cursor: pointer;",
          "375:   display: inline-block;",
          "376:   color: gray;",
          "377: }",
          "379: .graphiql-container .variable-editor-title-text.active {",
          "380:   color: #000;",
          "381: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/css/loading.css||packages/graphiql/src/css/loading.css": [
          "File: packages/graphiql/src/css/loading.css -> packages/graphiql/src/css/loading.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/style.css||packages/graphiql/src/style.css": [
          "File: packages/graphiql/src/style.css -> packages/graphiql/src/style.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: .graphiql-container .graphiql-session {",
          "3:   background-color: var(--color-neutral-7);",
          "5:   border-radius: calc(var(--border-radius-12) + var(--px-8));",
          "6:   display: flex;",
          "7:   flex: 1;",
          "8:   max-height: 100%;",
          "9:   padding: var(--px-8);",
          "10: }",
          "13: .graphiql-container .graphiql-editors {",
          "14:   background-color: var(--color-neutral-0);",
          "15:   border-radius: calc(var(--border-radius-12));",
          "16:   display: flex;",
          "17:   flex: 1;",
          "18:   flex-direction: column;",
          "19: }",
          "20: .graphiql-container .graphiql-editors .CodeMirror-gutters {",
          "21:   background-color: var(--color-neutral-0);",
          "22: }",
          "25: .graphiql-container .graphiql-response {",
          "26:   flex: 1;",
          "27:   position: relative;",
          "28: }",
          "31: .graphiql-container .graphiql-query-editor {",
          "32:   border-bottom: 1px solid var(--color-neutral-15);",
          "33:   flex: 1;",
          "34:   padding: var(--px-16);",
          "35: }",
          "38: .graphiql-container .graphiql-editor {",
          "39:   height: 100%;",
          "40:   position: relative;",
          "41: }",
          "42: .graphiql-container .graphiql-editor.hidden {",
          "44:   position: absolute;",
          "45:   visibility: hidden;",
          "46: }",
          "49: .graphiql-container .graphiql-editor-tools {",
          "50:   align-items: center;",
          "51:   color: var(--color-neutral-60);",
          "52:   cursor: row-resize;",
          "53:   display: flex;",
          "54:   justify-content: space-between;",
          "55:   padding: var(--px-8);",
          "56: }",
          "57: .graphiql-container .graphiql-editor-tools .active {",
          "58:   color: var(--color-neutral-100);",
          "59: }",
          "62: .graphiql-container .graphiql-editor-tools-tabs {",
          "63:   cursor: auto;",
          "64:   display: flex;",
          "65: }",
          "66: .graphiql-container .graphiql-editor-tools-tabs > button {",
          "67:   padding: var(--px-8) var(--px-12);",
          "68: }",
          "69: .graphiql-container .graphiql-editor-tools-tabs > button + button {",
          "70:   margin-left: var(--px-8);",
          "71: }",
          "74: .graphiql-container .graphiql-editor-tool {",
          "75:   flex: 1;",
          "76:   padding: var(--px-16);",
          "77: }",
          "80: .graphiql-container .graphiql-spinner {",
          "81:   height: 56px;",
          "82:   left: 50%;",
          "83:   position: relative;",
          "84:   top: 50%;",
          "85:   transform: translate(-50%, -50%);",
          "86:   width: 56px;",
          "87: }",
          "88: .graphiql-container .graphiql-spinner::after {",
          "89:   animation: rotation 0.6s infinite linear;",
          "90:   border: 4px solid transparent;",
          "91:   border-radius: 100%;",
          "92:   border-top: 4px solid var(--color-neutral-40);",
          "93:   content: '';",
          "94:   display: inline-block;",
          "95:   height: 46px;",
          "96:   vertical-align: middle;",
          "97:   width: 46px;",
          "98: }",
          "99: @keyframes rotation {",
          "100:   from {",
          "101:     transform: rotate(0deg);",
          "102:   }",
          "103:   to {",
          "104:     transform: rotate(359deg);",
          "105:   }",
          "106: }",
          "109: .graphiql-container .graphiql-horizontal-drag-bar {",
          "110:   width: var(--px-12);",
          "111:   cursor: col-resize;",
          "112: }",
          "113: .graphiql-container .graphiql-horizontal-drag-bar:hover::after {",
          "114:   border: var(--px-2) solid var(--color-neutral-15);",
          "115:   border-radius: var(--border-radius-2);",
          "116:   content: '';",
          "117:   display: block;",
          "118:   height: 25%;",
          "119:   margin: 0 auto;",
          "120:   position: relative;",
          "122:   top: 37.5%;",
          "123:   width: 0;",
          "124: }",
          "127: .graphiql-container .graphiql-chevron-icon {",
          "128:   color: var(--color-neutral-40);",
          "129:   display: block;",
          "130:   height: var(--px-12);",
          "131:   padding: var(--px-12);",
          "132:   width: var(--px-12);",
          "133: }",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "806:   resolved \"https://registry.yarnpkg.com/@babel/helper-plugin-utils/-/helper-plugin-utils-7.16.7.tgz#aa3a8ab4c3cceff8e65eb9e73d87dc4ff320b2f5\"",
          "807:   integrity sha512-Qg3Nk7ZxpgMrsox6HreY1ZNKdBq7K72tDSliA6dCl5f007jR4ne8iD5UzuNnCJH2xBf2BEEVGr+/OL6Gdp7RxA==",
          "809: \"@babel/helper-plugin-utils@^7.18.6\":",
          "810:   version \"7.18.9\"",
          "811:   resolved \"https://registry.yarnpkg.com/@babel/helper-plugin-utils/-/helper-plugin-utils-7.18.9.tgz#4b8aea3b069d8cb8a72cdfe28ddf5ceca695ef2f\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "809: \"@babel/helper-plugin-utils@^7.17.12\":",
          "810:   version \"7.17.12\"",
          "811:   resolved \"https://registry.yarnpkg.com/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz#86c2347da5acbf5583ba0a10aed4c9bf9da9cf96\"",
          "812:   integrity sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1672:   dependencies:",
          "1673:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "1675: \"@babel/plugin-syntax-logical-assignment-operators@^7.10.4\", \"@babel/plugin-syntax-logical-assignment-operators@^7.8.3\":",
          "1676:   version \"7.10.4\"",
          "1677:   resolved \"https://registry.yarnpkg.com/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz#ca91ef46303530448b906652bac2e9fe9941f699\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1680: \"@babel/plugin-syntax-jsx@^7.17.12\":",
          "1681:   version \"7.17.12\"",
          "1682:   resolved \"https://registry.yarnpkg.com/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.17.12.tgz#834035b45061983a491f60096f61a2e7c5674a47\"",
          "1683:   integrity sha512-spyY3E3AURfxh/RHtjx5j6hs8am5NbUBGfcZ2vB3uShSpZdQyXSf5rR5Mk76vbtlAZOelyVQ71Fg0x9SG4fsog==",
          "1684:   dependencies:",
          "1685:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2384:   dependencies:",
          "2385:     \"@babel/helper-plugin-utils\" \"^7.16.7\"",
          "2387: \"@babel/plugin-transform-react-jsx@^7.12.17\", \"@babel/plugin-transform-react-jsx@^7.13.12\":",
          "2388:   version \"7.13.12\"",
          "2389:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-react-jsx/-/plugin-transform-react-jsx-7.13.12.tgz#1df5dfaf0f4b784b43e96da6f28d630e775f68b3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2399: \"@babel/plugin-transform-react-jsx@^7.12.12\":",
          "2400:   version \"7.17.12\"",
          "2401:   resolved \"https://registry.yarnpkg.com/@babel/plugin-transform-react-jsx/-/plugin-transform-react-jsx-7.17.12.tgz#2aa20022709cd6a3f40b45d60603d5f269586dba\"",
          "2402:   integrity sha512-Lcaw8bxd1DKht3thfD4A12dqo1X16he1Lm8rIv8sTwjAYNInRS1qHa9aJoqvzpscItXvftKDCfaEQzwoVyXpEQ==",
          "2403:   dependencies:",
          "2404:     \"@babel/helper-annotate-as-pure\" \"^7.16.7\"",
          "2405:     \"@babel/helper-module-imports\" \"^7.16.7\"",
          "2406:     \"@babel/helper-plugin-utils\" \"^7.17.12\"",
          "2407:     \"@babel/plugin-syntax-jsx\" \"^7.17.12\"",
          "2408:     \"@babel/types\" \"^7.17.12\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3180:     lodash \"^4.17.19\"",
          "3181:     to-fast-properties \"^2.0.0\"",
          "3183: \"@babel/types@^7.14.9\", \"@babel/types@^7.15.4\", \"@babel/types@^7.15.6\":",
          "3184:   version \"7.15.6\"",
          "3185:   resolved \"https://registry.yarnpkg.com/@babel/types/-/types-7.15.6.tgz#99abdc48218b2881c058dd0a7ab05b99c9be758f\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3206: \"@babel/types@^7.12.6\", \"@babel/types@^7.17.12\":",
          "3207:   version \"7.18.4\"",
          "3208:   resolved \"https://registry.yarnpkg.com/@babel/types/-/types-7.18.4.tgz#27eae9b9fd18e9dccc3f9d6ad051336f307be354\"",
          "3209:   integrity sha512-ThN1mBcMq5pG/Vm2IcBmPPfyPXbd8S02rS+OBIDENdufvqC7Z/jHPCv9IcP01277aKtDI8g/2XysBN4hA8niiw==",
          "3210:   dependencies:",
          "3211:     \"@babel/helper-validator-identifier\" \"^7.16.7\"",
          "3212:     to-fast-properties \"^2.0.0\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4405:   dependencies:",
          "4406:     highlight.js \"^9.15.6\"",
          "4408: \"@szmarczak/http-timer@^1.1.2\":",
          "4409:   version \"1.1.2\"",
          "4410:   resolved \"https://registry.yarnpkg.com/@szmarczak/http-timer/-/http-timer-1.1.2.tgz#b1665e2c461a2cd92f4c1bbf50d5454de0d4b421\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4439: \"@svgr/babel-plugin-add-jsx-attribute@^5.4.0\":",
          "4440:   version \"5.4.0\"",
          "4441:   resolved \"https://registry.yarnpkg.com/@svgr/babel-plugin-add-jsx-attribute/-/babel-plugin-add-jsx-attribute-5.4.0.tgz#81ef61947bb268eb9d50523446f9c638fb355906\"",
          "4442:   integrity sha512-ZFf2gs/8/6B8PnSofI0inYXr2SDNTDScPXhN7k5EqD4aZ3gi6u+rbmZHVB8IM3wDyx8ntKACZbtXSm7oZGRqVg==",
          "4444: \"@svgr/babel-plugin-remove-jsx-attribute@^5.4.0\":",
          "4445:   version \"5.4.0\"",
          "4446:   resolved \"https://registry.yarnpkg.com/@svgr/babel-plugin-remove-jsx-attribute/-/babel-plugin-remove-jsx-attribute-5.4.0.tgz#6b2c770c95c874654fd5e1d5ef475b78a0a962ef\"",
          "4447:   integrity sha512-yaS4o2PgUtwLFGTKbsiAy6D0o3ugcUhWK0Z45umJ66EPWunAz9fuFw2gJuje6wqQvQWOTJvIahUwndOXb7QCPg==",
          "4449: \"@svgr/babel-plugin-remove-jsx-empty-expression@^5.0.1\":",
          "4450:   version \"5.0.1\"",
          "4451:   resolved \"https://registry.yarnpkg.com/@svgr/babel-plugin-remove-jsx-empty-expression/-/babel-plugin-remove-jsx-empty-expression-5.0.1.tgz#25621a8915ed7ad70da6cea3d0a6dbc2ea933efd\"",
          "4452:   integrity sha512-LA72+88A11ND/yFIMzyuLRSMJ+tRKeYKeQ+mR3DcAZ5I4h5CPWN9AHyUzJbWSYp/u2u0xhmgOe0+E41+GjEueA==",
          "4454: \"@svgr/babel-plugin-replace-jsx-attribute-value@^5.0.1\":",
          "4455:   version \"5.0.1\"",
          "4456:   resolved \"https://registry.yarnpkg.com/@svgr/babel-plugin-replace-jsx-attribute-value/-/babel-plugin-replace-jsx-attribute-value-5.0.1.tgz#0b221fc57f9fcd10e91fe219e2cd0dd03145a897\"",
          "4457:   integrity sha512-PoiE6ZD2Eiy5mK+fjHqwGOS+IXX0wq/YDtNyIgOrc6ejFnxN4b13pRpiIPbtPwHEc+NT2KCjteAcq33/F1Y9KQ==",
          "4459: \"@svgr/babel-plugin-svg-dynamic-title@^5.4.0\":",
          "4460:   version \"5.4.0\"",
          "4461:   resolved \"https://registry.yarnpkg.com/@svgr/babel-plugin-svg-dynamic-title/-/babel-plugin-svg-dynamic-title-5.4.0.tgz#139b546dd0c3186b6e5db4fefc26cb0baea729d7\"",
          "4462:   integrity sha512-zSOZH8PdZOpuG1ZVx/cLVePB2ibo3WPpqo7gFIjLV9a0QsuQAzJiwwqmuEdTaW2pegyBE17Uu15mOgOcgabQZg==",
          "4464: \"@svgr/babel-plugin-svg-em-dimensions@^5.4.0\":",
          "4465:   version \"5.4.0\"",
          "4466:   resolved \"https://registry.yarnpkg.com/@svgr/babel-plugin-svg-em-dimensions/-/babel-plugin-svg-em-dimensions-5.4.0.tgz#6543f69526632a133ce5cabab965deeaea2234a0\"",
          "4467:   integrity sha512-cPzDbDA5oT/sPXDCUYoVXEmm3VIoAWAPT6mSPTJNbQaBNUuEKVKyGH93oDY4e42PYHRW67N5alJx/eEol20abw==",
          "4469: \"@svgr/babel-plugin-transform-react-native-svg@^5.4.0\":",
          "4470:   version \"5.4.0\"",
          "4471:   resolved \"https://registry.yarnpkg.com/@svgr/babel-plugin-transform-react-native-svg/-/babel-plugin-transform-react-native-svg-5.4.0.tgz#00bf9a7a73f1cad3948cdab1f8dfb774750f8c80\"",
          "4472:   integrity sha512-3eYP/SaopZ41GHwXma7Rmxcv9uRslRDTY1estspeB1w1ueZWd/tPlMfEOoccYpEMZU3jD4OU7YitnXcF5hLW2Q==",
          "4474: \"@svgr/babel-plugin-transform-svg-component@^5.5.0\":",
          "4475:   version \"5.5.0\"",
          "4476:   resolved \"https://registry.yarnpkg.com/@svgr/babel-plugin-transform-svg-component/-/babel-plugin-transform-svg-component-5.5.0.tgz#583a5e2a193e214da2f3afeb0b9e8d3250126b4a\"",
          "4477:   integrity sha512-q4jSH1UUvbrsOtlo/tKcgSeiCHRSBdXoIoqX1pgcKK/aU3JD27wmMKwGtpB8qRYUYoyXvfGxUVKchLuR5pB3rQ==",
          "4479: \"@svgr/babel-preset@^5.5.0\":",
          "4480:   version \"5.5.0\"",
          "4481:   resolved \"https://registry.yarnpkg.com/@svgr/babel-preset/-/babel-preset-5.5.0.tgz#8af54f3e0a8add7b1e2b0fcd5a882c55393df327\"",
          "4482:   integrity sha512-4FiXBjvQ+z2j7yASeGPEi8VD/5rrGQk4Xrq3EdJmoZgz/tpqChpo5hgXDvmEauwtvOc52q8ghhZK4Oy7qph4ig==",
          "4483:   dependencies:",
          "4484:     \"@svgr/babel-plugin-add-jsx-attribute\" \"^5.4.0\"",
          "4485:     \"@svgr/babel-plugin-remove-jsx-attribute\" \"^5.4.0\"",
          "4486:     \"@svgr/babel-plugin-remove-jsx-empty-expression\" \"^5.0.1\"",
          "4487:     \"@svgr/babel-plugin-replace-jsx-attribute-value\" \"^5.0.1\"",
          "4488:     \"@svgr/babel-plugin-svg-dynamic-title\" \"^5.4.0\"",
          "4489:     \"@svgr/babel-plugin-svg-em-dimensions\" \"^5.4.0\"",
          "4490:     \"@svgr/babel-plugin-transform-react-native-svg\" \"^5.4.0\"",
          "4491:     \"@svgr/babel-plugin-transform-svg-component\" \"^5.5.0\"",
          "4493: \"@svgr/core@^5.5.0\":",
          "4494:   version \"5.5.0\"",
          "4495:   resolved \"https://registry.yarnpkg.com/@svgr/core/-/core-5.5.0.tgz#82e826b8715d71083120fe8f2492ec7d7874a579\"",
          "4496:   integrity sha512-q52VOcsJPvV3jO1wkPtzTuKlvX7Y3xIcWRpCMtBF3MrteZJtBfQw/+u0B1BHy5ColpQc1/YVTrPEtSYIMNZlrQ==",
          "4497:   dependencies:",
          "4498:     \"@svgr/plugin-jsx\" \"^5.5.0\"",
          "4499:     camelcase \"^6.2.0\"",
          "4500:     cosmiconfig \"^7.0.0\"",
          "4502: \"@svgr/hast-util-to-babel-ast@^5.5.0\":",
          "4503:   version \"5.5.0\"",
          "4504:   resolved \"https://registry.yarnpkg.com/@svgr/hast-util-to-babel-ast/-/hast-util-to-babel-ast-5.5.0.tgz#5ee52a9c2533f73e63f8f22b779f93cd432a5461\"",
          "4505:   integrity sha512-cAaR/CAiZRB8GP32N+1jocovUtvlj0+e65TB50/6Lcime+EA49m/8l+P2ko+XPJ4dw3xaPS3jOL4F2X4KWxoeQ==",
          "4506:   dependencies:",
          "4507:     \"@babel/types\" \"^7.12.6\"",
          "4509: \"@svgr/plugin-jsx@^5.5.0\":",
          "4510:   version \"5.5.0\"",
          "4511:   resolved \"https://registry.yarnpkg.com/@svgr/plugin-jsx/-/plugin-jsx-5.5.0.tgz#1aa8cd798a1db7173ac043466d7b52236b369000\"",
          "4512:   integrity sha512-V/wVh33j12hGh05IDg8GpIUXbjAPnTdPTKuP4VNLggnwaHMPNQNae2pRnyTAILWCQdz5GyMqtO488g7CKM8CBA==",
          "4513:   dependencies:",
          "4514:     \"@babel/core\" \"^7.12.3\"",
          "4515:     \"@svgr/babel-preset\" \"^5.5.0\"",
          "4516:     \"@svgr/hast-util-to-babel-ast\" \"^5.5.0\"",
          "4517:     svg-parser \"^2.0.2\"",
          "4519: \"@svgr/plugin-svgo@^5.5.0\":",
          "4520:   version \"5.5.0\"",
          "4521:   resolved \"https://registry.yarnpkg.com/@svgr/plugin-svgo/-/plugin-svgo-5.5.0.tgz#02da55d85320549324e201c7b2e53bf431fcc246\"",
          "4522:   integrity sha512-r5swKk46GuQl4RrVejVwpeeJaydoxkdwkM1mBKOgJLBUJPGaLci6ylg/IjhrRsREKDkr4kbMWdgOtbXEh0fyLQ==",
          "4523:   dependencies:",
          "4524:     cosmiconfig \"^7.0.0\"",
          "4525:     deepmerge \"^4.2.2\"",
          "4526:     svgo \"^1.2.2\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "16890:   resolved \"https://registry.yarnpkg.com/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz#6eda4bd344a3c94aea376d4cc31bc77311039e09\"",
          "16891:   integrity sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
          "16894:   version \"1.3.2\"",
          "16895:   resolved \"https://registry.yarnpkg.com/svgo/-/svgo-1.3.2.tgz#b6dc511c063346c9e415b81e43401145b96d4167\"",
          "16896:   integrity sha512-yhy/sQYxR5BkC98CY7o31VGsg014AKLEPxdfhora76l36hD9Rdy5NZA/Ocn6yayNPgSamYdtX2rFJdcv07AYVw==",
          "",
          "[Removed Lines]",
          "16893: svgo@^1.0.0:",
          "",
          "[Added Lines]",
          "17013: svg-parser@^2.0.2:",
          "17014:   version \"2.0.4\"",
          "17015:   resolved \"https://registry.yarnpkg.com/svg-parser/-/svg-parser-2.0.4.tgz#fdc2e29e13951736140b76cb122c8ee6630eb6b5\"",
          "17016:   integrity sha512-e4hG1hRwoOdRb37cIMSgzNsxyzKfayW6VOflrwvR+/bzrkyxY/31WkbgnQpgtrNp1SdpJvpUAGTa/ZoiPNDuRQ==",
          "17018: svgo@^1.0.0, svgo@^1.2.2:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "17667:   resolved \"https://registry.yarnpkg.com/use/-/use-3.1.1.tgz#d50c8cac79a19fbc20f2911f56eb973f4e10070f\"",
          "17668:   integrity sha512-cwESVXlO3url9YWlFW/TA9cshCEhtu7IKJ/p5soJ/gGpj7vbvFrAY/eIioQ6Dw23KjZhYgiIo8HOs1nQ2vr/oQ==",
          "17671:   version \"1.0.2\"",
          "17672:   resolved \"https://registry.yarnpkg.com/util-deprecate/-/util-deprecate-1.0.2.tgz#450d4dc9fa70de732762fbd2d4a28981419a0ccf\"",
          "17673:   integrity sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=",
          "",
          "[Removed Lines]",
          "17670: util-deprecate@^1.0.1, util-deprecate@~1.0.1:",
          "",
          "[Added Lines]",
          "17795: util-deprecate@^1.0.1, util-deprecate@^1.0.2, util-deprecate@~1.0.1:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "17798:   resolved \"https://registry.yarnpkg.com/vite-plugin-monaco-editor/-/vite-plugin-monaco-editor-1.0.10.tgz#cd370f68d4121bced6f902c6284649cc8eca4170\"",
          "17799:   integrity sha512-7yTAFIE0SefjCmfnjrvXOl53wkxeSASc/ZIcB5tZeEK3vAmHhveV8y3f90Vp8b+PYdbUipjqf91mbFbSENkpcw==",
          "17801: vite@^2.7.0:",
          "17802:   version \"2.7.0\"",
          "17803:   resolved \"https://registry.yarnpkg.com/vite/-/vite-2.7.0.tgz#d3d753220d10afb055731cd7feaa8e87b2b779b6\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17926: vite-plugin-react-svg@^0.2.0:",
          "17927:   version \"0.2.0\"",
          "17928:   resolved \"https://registry.yarnpkg.com/vite-plugin-react-svg/-/vite-plugin-react-svg-0.2.0.tgz#e8464187919688e4405a6f52971375fa894d7532\"",
          "17929:   integrity sha512-Qza30GSMb9SBp9Ma5Bq1O/GmZzkB97Tn6JJGPonuJ2h8NRZWESK69ux9lZHcdqekLnVxvDxabcJVOrygAeSyxQ==",
          "17930:   dependencies:",
          "17931:     \"@babel/plugin-transform-react-jsx\" \"^7.12.12\"",
          "17932:     \"@svgr/core\" \"^5.5.0\"",
          "17933:     \"@svgr/plugin-jsx\" \"^5.5.0\"",
          "17934:     \"@svgr/plugin-svgo\" \"^5.5.0\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}