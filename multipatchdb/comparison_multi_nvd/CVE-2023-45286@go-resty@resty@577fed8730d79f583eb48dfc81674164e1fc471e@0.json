{
  "cve_id": "CVE-2023-45286",
  "cve_desc": "A race condition in go-resty can result in HTTP request body disclosure across requests. This condition can be triggered by calling sync.Pool.Put with the same *bytes.Buffer more than once, when request retries are enabled and a retry occurs. The call to sync.Pool.Get will then return a bytes.Buffer that hasn't had bytes.Buffer.Reset called on it. This dirty buffer will contain the HTTP request body from an unrelated request, and go-resty will append the current HTTP request body to it, sending two bodies in one request. The sync.Pool in question is defined at package level scope, so a completely unrelated server could receive the request body.",
  "repo": "go-resty/resty",
  "patch_hash": "577fed8730d79f583eb48dfc81674164e1fc471e",
  "patch_info": {
    "commit_hash": "577fed8730d79f583eb48dfc81674164e1fc471e",
    "repo": "go-resty/resty",
    "commit_url": "https://github.com/go-resty/resty/commit/577fed8730d79f583eb48dfc81674164e1fc471e",
    "files": [
      "middleware.go"
    ],
    "message": "Don't put the same bytes.Buffer into sync.Pool twice (#745)",
    "before_after_code_files": [
      "middleware.go||middleware.go"
    ]
  },
  "patch_diff": {
    "middleware.go||middleware.go": [
      "File: middleware.go -> middleware.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "482: func handleRequestBody(c *Client, r *Request) error {",
      "483:  var bodyBytes []byte",
      "485:  r.bodyBuf = nil",
      "487:  switch body := r.Body.(type) {",
      "",
      "[Removed Lines]",
      "484:  releaseBuffer(r.bodyBuf)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e1e237bca0f9ae94606243bbfad79e8a9022799c",
      "candidate_info": {
        "commit_hash": "e1e237bca0f9ae94606243bbfad79e8a9022799c",
        "repo": "go-resty/resty",
        "commit_url": "https://github.com/go-resty/resty/commit/e1e237bca0f9ae94606243bbfad79e8a9022799c",
        "files": [
          "client.go",
          "middleware.go",
          "middleware_test.go",
          "request.go",
          "request_test.go",
          "resty_test.go",
          "stream.go",
          "util.go",
          "util_curl.go"
        ],
        "message": "feat(continue)!: add content type encoder and decoder, implement encoder in the request generation flow #439 (#862)",
        "before_after_code_files": [
          "client.go||client.go",
          "middleware.go||middleware.go",
          "middleware_test.go||middleware_test.go",
          "request.go||request.go",
          "request_test.go||request_test.go",
          "resty_test.go||resty_test.go",
          "stream.go||stream.go",
          "util.go||util.go",
          "util_curl.go||util_curl.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "middleware.go||middleware.go"
          ],
          "candidate": [
            "middleware.go||middleware.go"
          ]
        }
      },
      "candidate_diff": {
        "client.go||client.go": [
          "File: client.go -> client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "733:  return c",
          "734: }",
          "737: func (c *Client) ContentTypeDecoders() map[string]ContentTypeDecoder {",
          "738:  c.lock.RLock()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "736: func (c *Client) inferContentTypeEncoder(ct ...string) (ContentTypeEncoder, bool) {",
          "737:  c.lock.RLock()",
          "738:  defer c.lock.RUnlock()",
          "739:  for _, v := range ct {",
          "740:   if d, f := c.contentTypeEncoders[v]; f {",
          "741:    return d, f",
          "742:   }",
          "743:  }",
          "744:  return nil, false",
          "745: }",
          "",
          "---------------"
        ],
        "middleware.go||middleware.go": [
          "File: middleware.go -> middleware.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:   case len(c.FormData()) > 0 || len(r.FormData) > 0: // Handling Form Data",
          "184:    handleFormData(c, r)",
          "185:   case r.Body != nil: // Handling Request body",
          "188:    if err := handleRequestBody(c, r); err != nil {",
          "189:     return err",
          "190:    }",
          "",
          "[Removed Lines]",
          "186:    handleContentType(c, r)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "498:  r.isFormData = true",
          "499: }",
          "502:  contentType := r.Header.Get(hdrContentTypeKey)",
          "503:  if IsStringEmpty(contentType) {",
          "504:   contentType = DetectContentType(r.Body)",
          "505:   r.Header.Set(hdrContentTypeKey, contentType)",
          "506:  }",
          "513:  switch body := r.Body.(type) {",
          "514:  case io.Reader:",
          "515:   if r.setContentLength { // keep backward compatibility",
          "517:    if _, err := r.bodyBuf.ReadFrom(body); err != nil {",
          "518:     return err",
          "519:    }",
          "520:    r.Body = nil",
          "521:   } else {",
          "523:    return nil",
          "524:   }",
          "525:  case []byte:",
          "527:  case string:",
          "529:  default:",
          "539:   }",
          "541:    return err",
          "542:   }",
          "543:  }",
          "555:  return nil",
          "556: }",
          "",
          "[Removed Lines]",
          "501: func handleContentType(c *Client, r *Request) {",
          "507: }",
          "509: func handleRequestBody(c *Client, r *Request) error {",
          "510:  var bodyBytes []byte",
          "511:  r.bodyBuf = nil",
          "516:    r.bodyBuf = acquireBuffer()",
          "526:   bodyBytes = body",
          "528:   bodyBytes = []byte(body)",
          "530:   contentType := r.Header.Get(hdrContentTypeKey)",
          "531:   kind := inferKind(r.Body)",
          "532:   var err error",
          "533:   if IsJSONType(contentType) && (kind == reflect.Struct || kind == reflect.Map || kind == reflect.Slice) {",
          "534:    r.bodyBuf, err = jsonMarshal(c, r, r.Body)",
          "535:   } else if IsXMLType(contentType) && (kind == reflect.Struct) {",
          "536:    c.lock.RLock()",
          "537:    bodyBytes, err = c.xmlMarshal(r.Body)",
          "538:    c.lock.RUnlock()",
          "540:   if err != nil {",
          "545:  if bodyBytes == nil && r.bodyBuf == nil {",
          "546:   return errors.New(\"unsupported 'Body' type/value\")",
          "547:  }",
          "550:  if bodyBytes != nil && r.bodyBuf == nil {",
          "551:   r.bodyBuf = acquireBuffer()",
          "552:   _, _ = r.bodyBuf.Write(bodyBytes)",
          "553:  }",
          "",
          "[Added Lines]",
          "499: var ErrUnsupportedRequestBodyKind = errors.New(\"resty: unsupported request body kind\")",
          "501: func handleRequestBody(c *Client, r *Request) error {",
          "509:  r.bodyBuf = acquireBuffer()",
          "516:     releaseBuffer(r.bodyBuf)",
          "522:    releaseBuffer(r.bodyBuf)",
          "523:    r.bodyBuf = nil",
          "527:   r.bodyBuf.Write(body)",
          "529:   r.bodyBuf.Write([]byte(body))",
          "531:   encKey := inferContentTypeMapKey(contentType)",
          "532:   if jsonKey == encKey {",
          "533:    if !r.jsonEscapeHTML {",
          "534:     return encodeJSONEscapeHTML(r.bodyBuf, r.Body, r.jsonEscapeHTML)",
          "535:    }",
          "536:   } else if xmlKey == encKey {",
          "537:    if inferKind(r.Body) != reflect.Struct {",
          "538:     releaseBuffer(r.bodyBuf)",
          "539:     return ErrUnsupportedRequestBodyKind",
          "540:    }",
          "544:   encFunc, found := c.inferContentTypeEncoder(contentType, encKey)",
          "545:   if !found {",
          "546:    releaseBuffer(r.bodyBuf)",
          "547:    return fmt.Errorf(\"resty: content-type encoder not found for %s\", contentType)",
          "548:   }",
          "549:   if err := encFunc(r.bodyBuf, r.Body); err != nil {",
          "550:    releaseBuffer(r.bodyBuf)",
          "",
          "---------------"
        ],
        "middleware_test.go||middleware_test.go": [
          "File: middleware_test.go -> middleware_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:      Bar: \"2\",",
          "673:     }).SetContentLength(true)",
          "674:    },",
          "676:    expectedContentType:   jsonContentType,",
          "678:   },",
          "679:   {",
          "680:    name: \"json from slice\",",
          "681:    initRequest: func(r *Request) {",
          "682:     r.SetBody([]string{\"foo\", \"bar\"}).SetContentLength(true)",
          "683:    },",
          "685:    expectedContentType:   jsonContentType,",
          "687:   },",
          "688:   {",
          "689:    name: \"json from map\",",
          "",
          "[Removed Lines]",
          "675:    expectedBodyBuf:       []byte(`{\"foo\":\"1\",\"bar\":\"2\"}`),",
          "677:    expectedContentLength: \"21\",",
          "684:    expectedBodyBuf:       []byte(`[\"foo\",\"bar\"]`),",
          "686:    expectedContentLength: \"13\",",
          "",
          "[Added Lines]",
          "675:    expectedBodyBuf:       append([]byte(`{\"foo\":\"1\",\"bar\":\"2\"}`), '\\n'),",
          "677:    expectedContentLength: \"22\",",
          "684:    expectedBodyBuf:       append([]byte(`[\"foo\",\"bar\"]`), '\\n'),",
          "686:    expectedContentLength: \"14\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697:      \"xyz\": nil,",
          "698:     }).SetContentLength(true)",
          "699:    },",
          "701:    expectedContentType:   jsonContentType,",
          "703:   },",
          "704:   {",
          "705:    name: \"json from map\",",
          "",
          "[Removed Lines]",
          "700:    expectedBodyBuf:       []byte(`{\"bar\":[1,2,3],\"baz\":{\"qux\":\"4\"},\"foo\":\"1\",\"xyz\":null}`),",
          "702:    expectedContentLength: \"54\",",
          "",
          "[Added Lines]",
          "700:    expectedBodyBuf:       append([]byte(`{\"bar\":[1,2,3],\"baz\":{\"qux\":\"4\"},\"foo\":\"1\",\"xyz\":null}`), '\\n'),",
          "702:    expectedContentLength: \"55\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "713:      \"xyz\": nil,",
          "714:     }).SetContentLength(true)",
          "715:    },",
          "717:    expectedContentType:   jsonContentType,",
          "719:   },",
          "720:   {",
          "721:    name: \"json from map\",",
          "",
          "[Removed Lines]",
          "716:    expectedBodyBuf:       []byte(`{\"bar\":[1,2,3],\"baz\":{\"qux\":\"4\"},\"foo\":\"1\",\"xyz\":null}`),",
          "718:    expectedContentLength: \"54\",",
          "",
          "[Added Lines]",
          "716:    expectedBodyBuf:       append([]byte(`{\"bar\":[1,2,3],\"baz\":{\"qux\":\"4\"},\"foo\":\"1\",\"xyz\":null}`), '\\n'),",
          "718:    expectedContentLength: \"55\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "729:      \"xyz\": nil,",
          "730:     }).SetContentLength(true)",
          "731:    },",
          "733:    expectedContentType:   jsonContentType,",
          "735:   },",
          "736:   {",
          "737:    name: \"xml from struct\",",
          "",
          "[Removed Lines]",
          "732:    expectedBodyBuf:       []byte(`{\"bar\":[1,2,3],\"baz\":{\"qux\":\"4\"},\"foo\":\"1\",\"xyz\":null}`),",
          "734:    expectedContentLength: \"54\",",
          "",
          "[Added Lines]",
          "732:    expectedBodyBuf:       append([]byte(`{\"bar\":[1,2,3],\"baz\":{\"qux\":\"4\"},\"foo\":\"1\",\"xyz\":null}`), '\\n'),",
          "734:    expectedContentLength: \"55\",",
          "",
          "---------------"
        ],
        "request.go||request.go": [
          "File: request.go -> request.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1268:  }",
          "1269: }",
          "1283: var noescapeJSONMarshalIndent = func(v any) (*bytes.Buffer, error) {",
          "1284:  buf := acquireBuffer()",
          "1285:  encoder := json.NewEncoder(buf)",
          "",
          "[Removed Lines]",
          "1271: var noescapeJSONMarshal = func(v any) (*bytes.Buffer, error) {",
          "1272:  buf := acquireBuffer()",
          "1273:  encoder := json.NewEncoder(buf)",
          "1274:  encoder.SetEscapeHTML(false)",
          "1275:  if err := encoder.Encode(v); err != nil {",
          "1276:   releaseBuffer(buf)",
          "1277:   return nil, err",
          "1278:  }",
          "1280:  return buf, nil",
          "1281: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "request_test.go||request_test.go": [
          "File: request_test.go -> request_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "591:   SetBody(map[string]any{\"Username\": \"testuser\", \"Password\": \"testpass\"}).",
          "592:   Post(ts.URL + \"/login\")",
          "595: }",
          "597: func TestRequestBasicAuth(t *testing.T) {",
          "",
          "[Removed Lines]",
          "594:  assertEqual(t, \"unsupported 'Body' type/value\", err.Error())",
          "",
          "[Added Lines]",
          "594:  assertErrorIs(t, ErrUnsupportedRequestBodyKind, err)",
          "",
          "---------------"
        ],
        "resty_test.go||resty_test.go": [
          "File: resty_test.go -> resty_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:     return",
          "386:    }",
          "387:   }",
          "388:  })",
          "390:  return ts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:   if r.Method == MethodPut {",
          "391:    if r.URL.Path == \"/raw-upload\" {",
          "392:     body, _ := io.ReadAll(r.Body)",
          "393:     bl, _ := strconv.Atoi(r.Header.Get(\"Content-Length\"))",
          "394:     assertEqual(t, len(body), bl)",
          "395:     w.WriteHeader(http.StatusOK)",
          "396:    }",
          "398:   }",
          "",
          "---------------"
        ],
        "stream.go||stream.go": [
          "File: stream.go -> stream.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: )",
          "22: func encodeJSON(w io.Writer, v any) error {",
          "24: }",
          "26: func decodeJSON(r io.Reader, v any) error {",
          "",
          "[Removed Lines]",
          "23:  return json.NewEncoder(w).Encode(v)",
          "",
          "[Added Lines]",
          "23:  return encodeJSONEscapeHTML(w, v, true)",
          "24: }",
          "26: func encodeJSONEscapeHTML(w io.Writer, v any, esc bool) error {",
          "27:  enc := json.NewEncoder(w)",
          "28:  enc.SetEscapeHTML(esc)",
          "29:  return enc.Encode(v)",
          "",
          "---------------"
        ],
        "util.go||util.go": [
          "File: util.go -> util.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:  default:",
          "98:   if b, ok := body.([]byte); ok {",
          "99:    contentType = http.DetectContentType(b)",
          "101:    contentType = jsonContentType",
          "102:   }",
          "103:  }",
          "",
          "[Removed Lines]",
          "100:   } else if kind == reflect.Slice {",
          "",
          "[Added Lines]",
          "100:   } else if kind == reflect.Slice { // check slice here to differentiate between any slice vs byte slice",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:  Body   string",
          "153: }",
          "173: func firstNonEmpty(v ...string) string {",
          "174:  for _, s := range v {",
          "175:   if !IsStringEmpty(s) {",
          "",
          "[Removed Lines]",
          "156: func jsonMarshal(c *Client, r *Request, d any) (*bytes.Buffer, error) {",
          "157:  if !r.jsonEscapeHTML {",
          "158:   return noescapeJSONMarshal(d)",
          "159:  }",
          "161:  c.lock.RLock()",
          "162:  data, err := c.jsonMarshal(d)",
          "163:  c.lock.RUnlock()",
          "164:  if err != nil {",
          "165:   return nil, err",
          "166:  }",
          "168:  buf := acquireBuffer()",
          "169:  _, _ = buf.Write(data)",
          "170:  return buf, nil",
          "171: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util_curl.go||util_curl.go": [
          "File: util_curl.go -> util_curl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  if req.Body != nil {",
          "36:   buf, _ := io.ReadAll(req.Body)",
          "37:   req.Body = io.NopCloser(bytes.NewBuffer(buf)) // important!!",
          "39:  }",
          "41:  urlString := shellescape.Quote(req.URL.String())",
          "",
          "[Removed Lines]",
          "38:   curl += `-d ` + shellescape.Quote(string(buf))",
          "",
          "[Added Lines]",
          "38:   curl += `-d ` + shellescape.Quote(string(bytes.TrimRight(buf, \"\\n\")))",
          "",
          "---------------"
        ]
      }
    }
  ]
}