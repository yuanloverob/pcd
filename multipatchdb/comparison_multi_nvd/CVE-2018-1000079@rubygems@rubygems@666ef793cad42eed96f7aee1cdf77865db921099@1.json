{
  "cve_id": "CVE-2018-1000079",
  "cve_desc": "RubyGems version Ruby 2.2 series: 2.2.9 and earlier, Ruby 2.3 series: 2.3.6 and earlier, Ruby 2.4 series: 2.4.3 and earlier, Ruby 2.5 series: 2.5.0 and earlier, prior to trunk revision 62422 contains a Directory Traversal vulnerability in gem installation that can result in the gem could write to arbitrary filesystem locations during installation. This attack appear to be exploitable via the victim must install a malicious gem. This vulnerability appears to have been fixed in 2.7.6.",
  "repo": "rubygems/rubygems",
  "patch_hash": "666ef793cad42eed96f7aee1cdf77865db921099",
  "patch_info": {
    "commit_hash": "666ef793cad42eed96f7aee1cdf77865db921099",
    "repo": "rubygems/rubygems",
    "commit_url": "https://github.com/rubygems/rubygems/commit/666ef793cad42eed96f7aee1cdf77865db921099",
    "files": [
      "lib/rubygems/package.rb",
      "test/rubygems/test_gem_package.rb"
    ],
    "message": "Implement a safe mkdir for package that verifies were inside the destination dir for all new directories ccreated",
    "before_after_code_files": [
      "lib/rubygems/package.rb||lib/rubygems/package.rb",
      "test/rubygems/test_gem_package.rb||test/rubygems/test_gem_package.rb"
    ]
  },
  "patch_diff": {
    "lib/rubygems/package.rb||lib/rubygems/package.rb": [
      "File: lib/rubygems/package.rb -> lib/rubygems/package.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "378:             File.dirname destination",
      "379:           end",
      "383:         File.open destination, 'wb' do |out|",
      "384:           out.write entry.read",
      "",
      "[Removed Lines]",
      "381:         FileUtils.mkdir_p mkdir, mkdir_options",
      "",
      "[Added Lines]",
      "381:         mkdir_p_safe mkdir, mkdir_options, destination_dir, entry.full_name",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "416:     raise Gem::Package::PathError.new(filename, destination_dir) if",
      "417:       filename.start_with? '/'",
      "421:     destination_dir = File.expand_path destination_dir",
      "423:     destination = File.join destination_dir, filename",
      "426:     destination = File.expand_path destination",
      "428:     raise Gem::Package::PathError.new(destination, destination_dir) unless",
      "",
      "[Removed Lines]",
      "419:     destination_dir = File.realpath destination_dir if",
      "420:       File.respond_to? :realpath",
      "424:     destination = File.realpath destination if",
      "425:       File.respond_to? :realpath",
      "",
      "[Added Lines]",
      "419:     destination_dir = realpath destination_dir",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "432:     destination",
      "433:   end",
      "435:   ##",
      "436:   # Loads a Gem::Specification from the TarEntry +entry+",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "432:   def mkdir_p_safe mkdir, mkdir_options, destination_dir, file_name",
      "433:     destination_dir = realpath File.expand_path(destination_dir)",
      "434:     parts = mkdir.split(File::SEPARATOR)",
      "435:     parts.reduce do |path, basename|",
      "436:       path = realpath path  unless path == \"\"",
      "437:       path = File.expand_path(path + File::SEPARATOR + basename)",
      "438:       lstat = File.lstat path rescue nil",
      "439:       if !lstat || !lstat.directory?",
      "440:         unless path.start_with? destination_dir and (FileUtils.mkdir path, mkdir_options rescue false)",
      "441:           raise Gem::Package::PathError.new(file_name, destination_dir)",
      "442:         end",
      "443:       end",
      "444:       path",
      "445:     end",
      "446:   end",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "622:     raise Gem::Package::FormatError.new(e.message, entry.full_name)",
      "623:   end",
      "625: end",
      "627: require 'rubygems/package/digest_io'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "638:   if File.respond_to? :realpath",
      "639:     def realpath file",
      "640:       File.realpath file",
      "641:     end",
      "642:   else",
      "643:     def realpath file",
      "644:       file",
      "645:     end",
      "646:   end",
      "",
      "---------------"
    ],
    "test/rubygems/test_gem_package.rb||test/rubygems/test_gem_package.rb": [
      "File: test/rubygems/test_gem_package.rb -> test/rubygems/test_gem_package.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "476:      package.extract_tar_gz tgz_io, destination_subdir",
      "477:    end",
      "480:                  \"#{destination_subdir} is not allowed\", e.message)",
      "481:   end",
      "",
      "[Removed Lines]",
      "479:    assert_equal(\"installing into parent path ../outside.txt of \" +",
      "",
      "[Added Lines]",
      "479:    assert_equal(\"installing into parent path lib/link/outside.txt of \" +",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e9590c4772c8550746ce7d56ec09874a950dc54a",
      "candidate_info": {
        "commit_hash": "e9590c4772c8550746ce7d56ec09874a950dc54a",
        "repo": "rubygems/rubygems",
        "commit_url": "https://github.com/rubygems/rubygems/commit/e9590c4772c8550746ce7d56ec09874a950dc54a",
        "files": [
          "lib/rubygems/package.rb",
          "test/rubygems/test_gem_package.rb"
        ],
        "message": "Auto merge of #2211 - larskanis:fix-win-case, r=hsbt\n\nFix path checks for case insensitive filesystem\n\n# Description:\nOn Windows paths are case insensitive. That means that path comparisons must be done case insensitive.\n\nDifferent lower / upper case characters can happen, when RbConfig::TOPDIR or GEM_HOME are set to a path of different case.\n\nThis bug was introduced in commit 666ef793c . It stood out in this nokogiri issue: https://github.com/sparklemotion/nokogiri/issues/1726\n\n______________\n\n# Tasks:\n\n- [x] Describe the problem / feature\n- [x] Write tests\n- [x] Write code to solve the problem\n- [ ] Get code review from coworkers / friends\n\nI will abide by the [code of conduct](https://github.com/rubygems/rubygems/blob/master/CODE_OF_CONDUCT.md).",
        "before_after_code_files": [
          "lib/rubygems/package.rb||lib/rubygems/package.rb",
          "test/rubygems/test_gem_package.rb||test/rubygems/test_gem_package.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/rubygems/package.rb||lib/rubygems/package.rb",
            "test/rubygems/test_gem_package.rb||test/rubygems/test_gem_package.rb"
          ],
          "candidate": [
            "lib/rubygems/package.rb||lib/rubygems/package.rb",
            "test/rubygems/test_gem_package.rb||test/rubygems/test_gem_package.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/rubygems/package.rb||lib/rubygems/package.rb": [
          "File: lib/rubygems/package.rb -> lib/rubygems/package.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:     destination",
          "430:   end",
          "432:   def mkdir_p_safe mkdir, mkdir_options, destination_dir, file_name",
          "433:     destination_dir = realpath File.expand_path(destination_dir)",
          "434:     parts = mkdir.split(File::SEPARATOR)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:   def normalize_path(pathname)",
          "433:     if Gem.win_platform?",
          "434:       pathname.downcase",
          "435:     else",
          "436:       pathname",
          "437:     end",
          "438:   end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "437:       path = File.expand_path(path + File::SEPARATOR + basename)",
          "438:       lstat = File.lstat path rescue nil",
          "439:       if !lstat || !lstat.directory?",
          "441:           raise Gem::Package::PathError.new(file_name, destination_dir)",
          "442:         end",
          "443:       end",
          "",
          "[Removed Lines]",
          "440:         unless path.start_with? destination_dir and (FileUtils.mkdir path, mkdir_options rescue false)",
          "",
          "[Added Lines]",
          "448:         unless normalize_path(path).start_with? normalize_path(destination_dir) and (FileUtils.mkdir path, mkdir_options rescue false)",
          "",
          "---------------"
        ],
        "test/rubygems/test_gem_package.rb||test/rubygems/test_gem_package.rb": [
          "File: test/rubygems/test_gem_package.rb -> test/rubygems/test_gem_package.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:     assert_path_exists extracted",
          "525:   end",
          "527:   def test_install_location",
          "528:     package = Gem::Package.new @gem",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "527:   if Gem.win_platform?",
          "528:     def test_extract_tar_gz_case_insensitive",
          "529:       package = Gem::Package.new @gem",
          "531:       tgz_io = util_tar_gz do |tar|",
          "532:         tar.add_file 'foo/file.rb', 0644 do |io| io.write 'hi' end",
          "533:       end",
          "535:       package.extract_tar_gz tgz_io, @destination.upcase",
          "537:       extracted = File.join @destination, 'foo/file.rb'",
          "538:       assert_path_exists extracted",
          "539:     end",
          "540:   end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a67d9f629b88c08b871d9bb1ac34ae6b832a1640",
      "candidate_info": {
        "commit_hash": "a67d9f629b88c08b871d9bb1ac34ae6b832a1640",
        "repo": "rubygems/rubygems",
        "commit_url": "https://github.com/rubygems/rubygems/commit/a67d9f629b88c08b871d9bb1ac34ae6b832a1640",
        "files": [
          "test/rubygems/test_gem_package.rb"
        ],
        "message": "Add test case for bug 270072",
        "before_after_code_files": [
          "test/rubygems/test_gem_package.rb||test/rubygems/test_gem_package.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/rubygems/test_gem_package.rb||test/rubygems/test_gem_package.rb"
          ],
          "candidate": [
            "test/rubygems/test_gem_package.rb||test/rubygems/test_gem_package.rb"
          ]
        }
      },
      "candidate_diff": {
        "test/rubygems/test_gem_package.rb||test/rubygems/test_gem_package.rb": [
          "File: test/rubygems/test_gem_package.rb -> test/rubygems/test_gem_package.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:                  File.read(extracted)",
          "456:   end",
          "458:   def test_extract_tar_gz_directory",
          "459:     package = Gem::Package.new @gem",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:   def test_extract_symlink_parent",
          "459:    skip 'symlink not supported' if Gem.win_platform?",
          "461:    package = Gem::Package.new @gem",
          "463:    tgz_io = util_tar_gz do |tar|",
          "464:      tar.mkdir       'lib',               0755",
          "465:      tar.add_symlink 'lib/link', '../..', 0644",
          "466:      tar.add_file    'lib/link/outside.txt', 0644 do |io| io.write 'hi' end",
          "467:    end",
          "469:    # Extract into a subdirectory of @destination; if this test fails it writes",
          "470:    # a file outside destination_subdir, but we want the file to remain inside",
          "471:    # @destination so it will be cleaned up.",
          "472:    destination_subdir = File.join @destination, 'subdir'",
          "473:    FileUtils.mkdir_p destination_subdir",
          "475:    e = assert_raises Gem::Package::PathError do",
          "476:      package.extract_tar_gz tgz_io, destination_subdir",
          "477:    end",
          "479:    assert_equal(\"installing into parent path ../outside.txt of \" +",
          "480:                  \"#{destination_subdir} is not allowed\", e.message)",
          "481:   end",
          "",
          "---------------"
        ]
      }
    }
  ]
}