{
  "cve_id": "CVE-2018-20458",
  "cve_desc": "In radare2 prior to 3.1.1, r_bin_dyldcache_extract in libr/bin/format/mach0/dyldcache.c may allow attackers to cause a denial-of-service (application crash caused by out-of-bounds read) by crafting an input file.",
  "repo": "radareorg/radare2",
  "patch_hash": "30f4c7b52a4e2dc0d0b1bae487d90f5437c69d19",
  "patch_info": {
    "commit_hash": "30f4c7b52a4e2dc0d0b1bae487d90f5437c69d19",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/30f4c7b52a4e2dc0d0b1bae487d90f5437c69d19",
    "files": [
      "libr/bin/format/mach0/dyldcache.c"
    ],
    "message": "Fix #12374 - oobread crash in truncated dyldcache ##bin (#12381)",
    "before_after_code_files": [
      "libr/bin/format/mach0/dyldcache.c||libr/bin/format/mach0/dyldcache.c"
    ]
  },
  "patch_diff": {
    "libr/bin/format/mach0/dyldcache.c||libr/bin/format/mach0/dyldcache.c": [
      "File: libr/bin/format/mach0/dyldcache.c -> libr/bin/format/mach0/dyldcache.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: #define NZ_OFFSET(x) if((x) > 0) r_bin_dyldcache_apply_patch (dbuf, (x) - linkedit_offset, (ut64)((size_t)&(x) - (size_t)data))",
      "25: struct r_bin_dyldcache_lib_t *r_bin_dyldcache_extract(struct r_bin_dyldcache_obj_t* bin, int idx, int *nlib) {",
      "26:  ut64 liboff, linkedit_offset;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: static ut64 r_buf_read64le (RBuffer *buf, ut64 off) {",
      "26:  ut8 data[8] = {0};",
      "27:  r_buf_read_at (buf, off, data, 8);",
      "28:  return r_read_le64 (data);",
      "29: }",
      "31: static char *r_buf_read_string (RBuffer *buf, ut64 addr, int len) {",
      "32:  ut8 *data = malloc (len);",
      "33:  if (data) {",
      "34:   r_buf_read_at (buf, addr, data, len);",
      "35:   data[len-1] = 0;",
      "36:   return data;",
      "37:  }",
      "38:  return NULL;",
      "39: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:  ret = R_NEW0 (struct r_bin_dyldcache_lib_t);",
      "49:  if (!ret) {",
      "51:   return NULL;",
      "52:  }",
      "53:  if (bin->hdr.startaddr > bin->size) {",
      "",
      "[Removed Lines]",
      "50:   perror (\"malloc (ret)\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55:   free (ret);",
      "56:   return NULL;",
      "57:  }",
      "58:  if (bin->hdr.startaddr > bin->size || bin->hdr.baseaddroff > bin->size) {",
      "59:   eprintf (\"corrupted dyldcache\");",
      "60:   free (ret);",
      "61:   return NULL;",
      "62:  }",
      "65:  liboff = image_infos[idx].address - dyld_vmbase;",
      "66:  if (liboff > bin->size) {",
      "67:   eprintf (\"Corrupted file\\n\");",
      "",
      "[Removed Lines]",
      "63:  image_infos = (struct dyld_cache_image_info*) (bin->b->buf + bin->hdr.startaddr);",
      "64:  dyld_vmbase = *(ut64 *)(bin->b->buf + bin->hdr.baseaddroff);",
      "",
      "[Added Lines]",
      "80:  int sz = bin->nlibs * sizeof (struct dyld_cache_image_info);",
      "81:  image_infos = malloc (sz); //(struct dyld_cache_image_info*) (bin->b->buf + bin->hdr.startaddr);",
      "82:  if (!image_infos) {",
      "83:   free (ret);",
      "84:   return NULL;",
      "85:  }",
      "86:  r_buf_read_at (bin->b, bin->hdr.startaddr, (ut8*)image_infos, sz);",
      "87:  dyld_vmbase = r_buf_read64le (bin->b, bin->hdr.baseaddroff);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "69:   return NULL;",
      "70:  }",
      "71:  ret->offset = liboff;",
      "74:   free (ret);",
      "75:   return NULL;",
      "76:  }",
      "79:  data = bin->b->buf + liboff;",
      "80:  mh = (struct mach_header *)data;",
      "",
      "[Removed Lines]",
      "72:  if (image_infos[idx].pathFileOffset > bin->size) {",
      "73:      eprintf (\"corrupted file\\n\");",
      "77:  libname = (char *)(bin->b->buf + image_infos[idx].pathFileOffset);",
      "",
      "[Added Lines]",
      "95:  int pfo = image_infos[idx].pathFileOffset;",
      "96:  if (pfo < 0 || pfo > bin->size) {",
      "97:   eprintf (\"corrupted file: pathFileOffset > bin->size (%d)\\n\", pfo);",
      "101:  libname = r_buf_read_string (bin->b, pfo, 64);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "224: }",
      "226: struct r_bin_dyldcache_obj_t* r_bin_dyldcache_from_bytes_new(const ut8* buf, ut64 size) {",
      "229:   return NULL;",
      "230:  }",
      "232:  if (!buf) {",
      "233:   return r_bin_dyldcache_free (bin);",
      "234:  }",
      "237:   return r_bin_dyldcache_free (bin);",
      "238:  }",
      "239:  if (!r_bin_dyldcache_init (bin)) {",
      "",
      "[Removed Lines]",
      "227:  struct r_bin_dyldcache_obj_t *bin;",
      "228:  if (!(bin = malloc (sizeof (struct r_bin_dyldcache_obj_t)))) {",
      "231:  memset (bin, 0, sizeof (struct r_bin_dyldcache_obj_t));",
      "235:  bin->b = r_buf_new();",
      "236:  if (!r_buf_set_bytes (bin->b, buf, size)) {",
      "",
      "[Added Lines]",
      "251:  struct r_bin_dyldcache_obj_t *bin = R_NEW0 (struct r_bin_dyldcache_obj_t);",
      "252:  if (!bin) {",
      "258:  bin->b = r_buf_new ();",
      "259:  if (!bin->b || !r_buf_set_bytes (bin->b, buf, size)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b143e1b1b5622ef2f41a90f4c0f7ed4c477caf40",
      "candidate_info": {
        "commit_hash": "b143e1b1b5622ef2f41a90f4c0f7ed4c477caf40",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/b143e1b1b5622ef2f41a90f4c0f7ed4c477caf40",
        "files": [
          "configure",
          "configure.acr",
          "libr/bin/format/mach0/dyldcache.c"
        ],
        "message": "Release 3.1.1",
        "before_after_code_files": [
          "configure.acr||configure.acr",
          "libr/bin/format/mach0/dyldcache.c||libr/bin/format/mach0/dyldcache.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/format/mach0/dyldcache.c||libr/bin/format/mach0/dyldcache.c"
          ],
          "candidate": [
            "libr/bin/format/mach0/dyldcache.c||libr/bin/format/mach0/dyldcache.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.acr||configure.acr": [
          "File: configure.acr -> configure.acr",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: PKGNAME radare2",
          "3: CONTACT pancake ; pancake@nopcode.org",
          "5: LANG_C!",
          "",
          "[Removed Lines]",
          "2: VERSION 3.1.0",
          "",
          "[Added Lines]",
          "2: VERSION 3.1.1",
          "",
          "---------------"
        ],
        "libr/bin/format/mach0/dyldcache.c||libr/bin/format/mach0/dyldcache.c": [
          "File: libr/bin/format/mach0/dyldcache.c -> libr/bin/format/mach0/dyldcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  ut8 *data = malloc (len);",
          "33:  if (data) {",
          "34:   r_buf_read_at (buf, addr, data, len);",
          "37:  }",
          "38:  return NULL;",
          "39: }",
          "",
          "[Removed Lines]",
          "35:   data[len-1] = 0;",
          "36:   return data;",
          "",
          "[Added Lines]",
          "35:   data[len - 1] = 0;",
          "36:   return (char *)data;",
          "",
          "---------------"
        ]
      }
    }
  ]
}