{
  "cve_id": "CVE-2024-21650",
  "cve_desc": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. XWiki is vulnerable to a remote code execution (RCE) attack through its user registration feature. This issue allows an attacker to execute arbitrary code by crafting malicious payloads in the \"first name\" or \"last name\" fields during user registration. This impacts all installations that have user registration enabled for guests. This vulnerability has been patched in XWiki 14.10.17, 15.5.3 and 15.8 RC1.",
  "repo": "xwiki/xwiki-platform",
  "patch_hash": "b290bfd573c6f7db6cc15a88dd4111d9fcad0d31",
  "patch_info": {
    "commit_hash": "b290bfd573c6f7db6cc15a88dd4111d9fcad0d31",
    "repo": "xwiki/xwiki-platform",
    "commit_url": "https://github.com/xwiki/xwiki-platform/commit/b290bfd573c6f7db6cc15a88dd4111d9fcad0d31",
    "files": [
      "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
      "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-ui/src/main/resources/XWiki/RegistrationConfig.xml",
      "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java"
    ],
    "message": "XWIKI-21173: Improve escaping in registration success message\n\n* Use $xwiki.getUserName to link to the user profile.\n* Add an integration test to test proper escaping.",
    "before_after_code_files": [
      "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
      "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java"
    ]
  },
  "patch_diff": {
    "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java": [
      "File: xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java -> xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: package org.xwiki.administration.test.ui;",
      "23: import java.util.stream.Stream;",
      "25: import org.junit.jupiter.api.Order;",
      "26: import org.junit.jupiter.params.ParameterizedTest;",
      "27: import org.junit.jupiter.params.provider.Arguments;",
      "28: import org.junit.jupiter.params.provider.MethodSource;",
      "29: import org.openqa.selenium.By;",
      "30: import org.openqa.selenium.NoSuchElementException;",
      "32: import org.xwiki.administration.test.po.RegistrationModal;",
      "33: import org.xwiki.test.docker.junit5.UITest;",
      "34: import org.xwiki.test.ui.TestUtils;",
      "35: import org.xwiki.test.ui.po.AbstractRegistrationPage;",
      "36: import org.xwiki.test.ui.po.RegistrationPage;",
      "38: import static org.junit.jupiter.api.Assertions.assertFalse;",
      "39: import static org.junit.jupiter.api.Assertions.assertTrue;",
      "",
      "[Removed Lines]",
      "22: import java.util.List;",
      "31: import org.openqa.selenium.WebElement;",
      "",
      "[Added Lines]",
      "25: import org.junit.jupiter.api.Test;",
      "37: import static org.junit.jupiter.api.Assertions.assertEquals;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "161:         assertTrue(registrationPage.validationFailureMessagesInclude(\"Please enter a valid email address.\"));",
      "162:     }",
      "164:     private AbstractRegistrationPage setUp(TestUtils testUtils, boolean useLiveValidation, boolean isModal)",
      "165:         throws Exception",
      "166:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "164:     @Test",
      "165:     @Order(8)",
      "166:     void registerWikiSyntaxName(TestUtils testUtils) throws Exception",
      "167:     {",
      "168:         AbstractRegistrationPage registrationPage = setUp(testUtils, false, false);",
      "169:         String password = \"SomePassword\";",
      "170:         String firstName = \"]]{{/html}}{{html clean=false}}HT&amp;ML\";",
      "171:         String lastName = \"]]{{/html}}\";",
      "172:         String username = \"WikiSyntaxName\";",
      "173:         registrationPage.fillRegisterForm(firstName, lastName, username, password, password, \"wiki@example.com\");",
      "174:         assertTrue(validateAndRegister(testUtils, false, false, registrationPage));",
      "176:         assertEquals(String.format(\"%s %s (%s): Registration successful.\", firstName, lastName, username),",
      "177:             ((RegistrationPage) registrationPage).getRegistrationSuccessMessage().orElseThrow());",
      "178:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:         if (isModal) {",
      "237:             return administrationModalUserCreation(testUtils, registrationPage);",
      "238:         } else {",
      "240:         }",
      "241:     }",
      "",
      "[Removed Lines]",
      "239:             return guestUserRegistration(testUtils, registrationPage);",
      "",
      "[Added Lines]",
      "255:             return guestUserRegistration(registrationPage);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "265:         }",
      "266:     }",
      "269:     {",
      "270:         registrationPage.clickRegister();",
      "279:     }",
      "281:     private void tryToLoginAsJohnSmith(TestUtils testUtils, AbstractRegistrationPage registrationPage)",
      "",
      "[Removed Lines]",
      "268:     private boolean guestUserRegistration(TestUtils testUtils, AbstractRegistrationPage registrationPage)",
      "272:         List<WebElement> infos = testUtils.getDriver().findElements(By.className(\"infomessage\"));",
      "273:         for (WebElement info : infos) {",
      "274:             if (info.getText().contains(\"Registration successful.\")) {",
      "275:                 return true;",
      "276:             }",
      "277:         }",
      "278:         return false;",
      "",
      "[Added Lines]",
      "284:     private boolean guestUserRegistration(AbstractRegistrationPage registrationPage)",
      "288:         return ((RegistrationPage) registrationPage).getRegistrationSuccessMessage().isPresent();",
      "",
      "---------------"
    ],
    "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java": [
      "File: xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java -> xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: package org.xwiki.test.ui.po;",
      "22: import org.openqa.selenium.WebElement;",
      "23: import org.openqa.selenium.support.FindBy;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.List;",
      "23: import java.util.Optional;",
      "25: import org.openqa.selenium.By;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     {",
      "48:         this.submitButton.click();",
      "49:     }",
      "50: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     public Optional<String> getRegistrationSuccessMessage()",
      "63:     {",
      "64:         List<WebElement> infos = getDriver().findElements(By.className(\"infomessage\"));",
      "65:         for (WebElement info : infos) {",
      "66:             if (info.getText().contains(\"Registration successful.\")) {",
      "67:                 return Optional.of(info.getText());",
      "68:             }",
      "69:         }",
      "71:         return Optional.empty();",
      "72:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ec608f303913f5e8af061f2a98506f49d69be60f",
      "candidate_info": {
        "commit_hash": "ec608f303913f5e8af061f2a98506f49d69be60f",
        "repo": "xwiki/xwiki-platform",
        "commit_url": "https://github.com/xwiki/xwiki-platform/commit/ec608f303913f5e8af061f2a98506f49d69be60f",
        "files": [
          "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
          "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-ui/src/main/resources/XWiki/RegistrationConfig.xml",
          "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java"
        ],
        "message": "XWIKI-21173: Improve escaping in registration success message\n\n* Use $xwiki.getUserName to link to the user profile.\n* Add an integration test to test proper escaping.\n\n(cherry picked from commit b290bfd573c6f7db6cc15a88dd4111d9fcad0d31)",
        "before_after_code_files": [
          "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
          "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
            "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java"
          ],
          "candidate": [
            "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
            "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java"
          ]
        }
      },
      "candidate_diff": {
        "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java": [
          "File: xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java -> xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.xwiki.administration.test.ui;",
          "23: import java.util.stream.Stream;",
          "25: import org.junit.jupiter.api.Order;",
          "26: import org.junit.jupiter.params.ParameterizedTest;",
          "27: import org.junit.jupiter.params.provider.Arguments;",
          "28: import org.junit.jupiter.params.provider.MethodSource;",
          "29: import org.openqa.selenium.By;",
          "30: import org.openqa.selenium.NoSuchElementException;",
          "32: import org.xwiki.administration.test.po.RegistrationModal;",
          "33: import org.xwiki.test.docker.junit5.UITest;",
          "34: import org.xwiki.test.ui.TestUtils;",
          "35: import org.xwiki.test.ui.po.AbstractRegistrationPage;",
          "36: import org.xwiki.test.ui.po.RegistrationPage;",
          "38: import static org.junit.jupiter.api.Assertions.assertFalse;",
          "39: import static org.junit.jupiter.api.Assertions.assertTrue;",
          "",
          "[Removed Lines]",
          "22: import java.util.List;",
          "31: import org.openqa.selenium.WebElement;",
          "",
          "[Added Lines]",
          "25: import org.junit.jupiter.api.Test;",
          "37: import static org.junit.jupiter.api.Assertions.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:         assertTrue(registrationPage.validationFailureMessagesInclude(\"Please enter a valid email address.\"));",
          "162:     }",
          "164:     private AbstractRegistrationPage setUp(TestUtils testUtils, boolean useLiveValidation, boolean isModal)",
          "165:         throws Exception",
          "166:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:     @Test",
          "165:     @Order(8)",
          "166:     void registerWikiSyntaxName(TestUtils testUtils) throws Exception",
          "167:     {",
          "168:         AbstractRegistrationPage registrationPage = setUp(testUtils, false, false);",
          "169:         String password = \"SomePassword\";",
          "170:         String firstName = \"]]{{/html}}{{html clean=false}}HT&amp;ML\";",
          "171:         String lastName = \"]]{{/html}}\";",
          "172:         String username = \"WikiSyntaxName\";",
          "173:         registrationPage.fillRegisterForm(firstName, lastName, username, password, password, \"wiki@example.com\");",
          "174:         assertTrue(validateAndRegister(testUtils, false, false, registrationPage));",
          "176:         assertEquals(String.format(\"%s %s (%s): Registration successful.\", firstName, lastName, username),",
          "177:             ((RegistrationPage) registrationPage).getRegistrationSuccessMessage().orElseThrow());",
          "178:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:         if (isModal) {",
          "237:             return administrationModalUserCreation(testUtils, registrationPage);",
          "238:         } else {",
          "240:         }",
          "241:     }",
          "",
          "[Removed Lines]",
          "239:             return guestUserRegistration(testUtils, registrationPage);",
          "",
          "[Added Lines]",
          "255:             return guestUserRegistration(registrationPage);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "265:         }",
          "266:     }",
          "269:     {",
          "270:         registrationPage.clickRegister();",
          "279:     }",
          "281:     private void tryToLoginAsJohnSmith(TestUtils testUtils, AbstractRegistrationPage registrationPage)",
          "",
          "[Removed Lines]",
          "268:     private boolean guestUserRegistration(TestUtils testUtils, AbstractRegistrationPage registrationPage)",
          "272:         List<WebElement> infos = testUtils.getDriver().findElements(By.className(\"infomessage\"));",
          "273:         for (WebElement info : infos) {",
          "274:             if (info.getText().contains(\"Registration successful.\")) {",
          "275:                 return true;",
          "276:             }",
          "277:         }",
          "278:         return false;",
          "",
          "[Added Lines]",
          "284:     private boolean guestUserRegistration(AbstractRegistrationPage registrationPage)",
          "288:         return ((RegistrationPage) registrationPage).getRegistrationSuccessMessage().isPresent();",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java": [
          "File: xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java -> xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.xwiki.test.ui.po;",
          "22: import org.openqa.selenium.WebElement;",
          "23: import org.openqa.selenium.support.FindBy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.List;",
          "23: import java.util.Optional;",
          "25: import org.openqa.selenium.By;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     {",
          "48:         this.submitButton.click();",
          "49:     }",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     public Optional<String> getRegistrationSuccessMessage()",
          "63:     {",
          "64:         List<WebElement> infos = getDriver().findElements(By.className(\"infomessage\"));",
          "65:         for (WebElement info : infos) {",
          "66:             if (info.getText().contains(\"Registration successful.\")) {",
          "67:                 return Optional.of(info.getText());",
          "68:             }",
          "69:         }",
          "71:         return Optional.empty();",
          "72:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cdf5be8c20b6b6fe6b9b56a6557561007859655f",
      "candidate_info": {
        "commit_hash": "cdf5be8c20b6b6fe6b9b56a6557561007859655f",
        "repo": "xwiki/xwiki-platform",
        "commit_url": "https://github.com/xwiki/xwiki-platform/commit/cdf5be8c20b6b6fe6b9b56a6557561007859655f",
        "files": [
          "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
          "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-ui/src/main/resources/XWiki/RegistrationConfig.xml",
          "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java"
        ],
        "message": "XWIKI-21173: Improve escaping in registration success message\n\n* Use $xwiki.getUserName to link to the user profile.\n* Add an integration test to test proper escaping.\n\n(cherry picked from commit b290bfd573c6f7db6cc15a88dd4111d9fcad0d31)",
        "before_after_code_files": [
          "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
          "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
            "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java"
          ],
          "candidate": [
            "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
            "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java"
          ]
        }
      },
      "candidate_diff": {
        "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java": [
          "File: xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java -> xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.xwiki.administration.test.ui;",
          "23: import java.util.stream.Stream;",
          "25: import org.junit.jupiter.api.Order;",
          "26: import org.junit.jupiter.params.ParameterizedTest;",
          "27: import org.junit.jupiter.params.provider.Arguments;",
          "28: import org.junit.jupiter.params.provider.MethodSource;",
          "29: import org.openqa.selenium.By;",
          "30: import org.openqa.selenium.NoSuchElementException;",
          "32: import org.xwiki.administration.test.po.RegistrationModal;",
          "33: import org.xwiki.test.docker.junit5.UITest;",
          "34: import org.xwiki.test.ui.TestUtils;",
          "35: import org.xwiki.test.ui.po.AbstractRegistrationPage;",
          "36: import org.xwiki.test.ui.po.RegistrationPage;",
          "38: import static org.junit.jupiter.api.Assertions.assertFalse;",
          "39: import static org.junit.jupiter.api.Assertions.assertTrue;",
          "",
          "[Removed Lines]",
          "22: import java.util.List;",
          "31: import org.openqa.selenium.WebElement;",
          "",
          "[Added Lines]",
          "25: import org.junit.jupiter.api.Test;",
          "37: import static org.junit.jupiter.api.Assertions.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:         assertTrue(registrationPage.validationFailureMessagesInclude(\"Please enter a valid email address.\"));",
          "162:     }",
          "164:     private AbstractRegistrationPage setUp(TestUtils testUtils, boolean useLiveValidation, boolean isModal)",
          "165:         throws Exception",
          "166:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:     @Test",
          "165:     @Order(8)",
          "166:     void registerWikiSyntaxName(TestUtils testUtils) throws Exception",
          "167:     {",
          "168:         AbstractRegistrationPage registrationPage = setUp(testUtils, false, false);",
          "169:         String password = \"SomePassword\";",
          "170:         String firstName = \"]]{{/html}}{{html clean=false}}HT&amp;ML\";",
          "171:         String lastName = \"]]{{/html}}\";",
          "172:         String username = \"WikiSyntaxName\";",
          "173:         registrationPage.fillRegisterForm(firstName, lastName, username, password, password, \"wiki@example.com\");",
          "174:         assertTrue(validateAndRegister(testUtils, false, false, registrationPage));",
          "176:         assertEquals(String.format(\"%s %s (%s): Registration successful.\", firstName, lastName, username),",
          "177:             ((RegistrationPage) registrationPage).getRegistrationSuccessMessage().orElseThrow());",
          "178:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:         if (isModal) {",
          "237:             return administrationModalUserCreation(testUtils, registrationPage);",
          "238:         } else {",
          "240:         }",
          "241:     }",
          "",
          "[Removed Lines]",
          "239:             return guestUserRegistration(testUtils, registrationPage);",
          "",
          "[Added Lines]",
          "255:             return guestUserRegistration(registrationPage);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "265:         }",
          "266:     }",
          "269:     {",
          "270:         registrationPage.clickRegister();",
          "279:     }",
          "281:     private void tryToLoginAsJohnSmith(TestUtils testUtils, AbstractRegistrationPage registrationPage)",
          "",
          "[Removed Lines]",
          "268:     private boolean guestUserRegistration(TestUtils testUtils, AbstractRegistrationPage registrationPage)",
          "272:         List<WebElement> infos = testUtils.getDriver().findElements(By.className(\"infomessage\"));",
          "273:         for (WebElement info : infos) {",
          "274:             if (info.getText().contains(\"Registration successful.\")) {",
          "275:                 return true;",
          "276:             }",
          "277:         }",
          "278:         return false;",
          "",
          "[Added Lines]",
          "284:     private boolean guestUserRegistration(AbstractRegistrationPage registrationPage)",
          "288:         return ((RegistrationPage) registrationPage).getRegistrationSuccessMessage().isPresent();",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java": [
          "File: xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java -> xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.xwiki.test.ui.po;",
          "22: import org.openqa.selenium.WebElement;",
          "23: import org.openqa.selenium.support.FindBy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.List;",
          "23: import java.util.Optional;",
          "25: import org.openqa.selenium.By;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     {",
          "48:         this.submitButton.click();",
          "49:     }",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     public Optional<String> getRegistrationSuccessMessage()",
          "63:     {",
          "64:         List<WebElement> infos = getDriver().findElements(By.className(\"infomessage\"));",
          "65:         for (WebElement info : infos) {",
          "66:             if (info.getText().contains(\"Registration successful.\")) {",
          "67:                 return Optional.of(info.getText());",
          "68:             }",
          "69:         }",
          "71:         return Optional.empty();",
          "72:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "539f97b0d6f8f9e049abe2a0c5321e41a137ffa0",
      "candidate_info": {
        "commit_hash": "539f97b0d6f8f9e049abe2a0c5321e41a137ffa0",
        "repo": "xwiki/xwiki-platform",
        "commit_url": "https://github.com/xwiki/xwiki-platform/commit/539f97b0d6f8f9e049abe2a0c5321e41a137ffa0",
        "files": [
          "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
          "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-ui/src/main/resources/XWiki/Registration.xml",
          "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWiki.java",
          "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/RegisterAction.java",
          "xwiki-platform-core/xwiki-platform-oldcore/src/main/resources/ApplicationResources.properties",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/RegistrationConfiguration.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/ResetPasswordManager.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfiguration.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManager.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/RegistrationConfigurationSource.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/resources/ApplicationResources.properties",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/resources/META-INF/components.txt",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfigurationTest.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManagerTest.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/main/java/org/xwiki/security/authentication/script/RegistrationScriptService.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/main/resources/META-INF/components.txt",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/test/java/org/xwiki/security/authentication/script/RegistrationScriptServiceTest.java",
          "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/AbstractRegistrationPage.java",
          "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/passwd.vm",
          "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/register_macros.vm",
          "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/registerinline.vm",
          "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/resetpasswordinline.vm"
        ],
        "message": "XWIKI-17510: The reset password functionality is not affected by password strength rules (#2488)\n\nThis work mainly provides new Java APIs to access information from RegistrationConfiguration. It also provides a new API to check that the policy for the passwords is respected, and use that new API for user creation. This fixes a bug when creating a new user in private wiki. Note that this PR doesn't provide an API for all information exposed in RegistrationConfiguration: specifically all configuration related to velocity scripts are not exposed.\nThis PR also improves the default template used for registration to enable live validation, and allows to see captcha, and fixes a few bug when using registration without a RegistrationConfig xobject.\nMost of those scenario are now covered in the integration tests which is checking if the registration works in open/close wiki, with and without a RegistrationConfig page.\n\n  * Provide new APIs for accessing RegistrationConfiguration\n  * Define a script service to access this API from scripts\n  * Rewrite velocity macro #loadConfig to exploit this new API and to\n    remove unused arguments\n  * Use the new API also in oldcore where needed\n  * Provide new API in ResetPasswordManager to allow ensuring a password\n    is compliant with the registration rules on backend\n  * Fix bugs and perform improvments on templates\n  * Add a new integration test for checking password policy\n  * Get rid of the testing without livevalidation as we don't have that\n    option anymore\n  * Improve integration test to also test with and without the\n    RegistrationConfig page\n---------\n\nCo-authored-by: Manuel Leduc <manuel.leduc@xwiki.com>",
        "before_after_code_files": [
          "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
          "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWiki.java||xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWiki.java",
          "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/RegisterAction.java||xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/RegisterAction.java",
          "xwiki-platform-core/xwiki-platform-oldcore/src/main/resources/ApplicationResources.properties||xwiki-platform-core/xwiki-platform-oldcore/src/main/resources/ApplicationResources.properties",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/RegistrationConfiguration.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/RegistrationConfiguration.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/ResetPasswordManager.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/ResetPasswordManager.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfiguration.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfiguration.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManager.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManager.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/RegistrationConfigurationSource.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/RegistrationConfigurationSource.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/resources/ApplicationResources.properties||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/resources/ApplicationResources.properties",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfigurationTest.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfigurationTest.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManagerTest.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManagerTest.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/main/java/org/xwiki/security/authentication/script/RegistrationScriptService.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/main/java/org/xwiki/security/authentication/script/RegistrationScriptService.java",
          "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/test/java/org/xwiki/security/authentication/script/RegistrationScriptServiceTest.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/test/java/org/xwiki/security/authentication/script/RegistrationScriptServiceTest.java",
          "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/AbstractRegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/AbstractRegistrationPage.java",
          "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/passwd.vm||xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/passwd.vm",
          "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/register_macros.vm||xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/register_macros.vm",
          "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/registerinline.vm||xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/registerinline.vm",
          "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/resetpasswordinline.vm||xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/resetpasswordinline.vm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java"
          ],
          "candidate": [
            "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java"
          ]
        }
      },
      "candidate_diff": {
        "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java||xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java": [
          "File: xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java -> xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/RegisterIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.stream.Stream;",
          "24: import org.junit.jupiter.api.Order;",
          "26: import org.junit.jupiter.params.ParameterizedTest;",
          "27: import org.junit.jupiter.params.provider.Arguments;",
          "28: import org.junit.jupiter.params.provider.MethodSource;",
          "",
          "[Removed Lines]",
          "25: import org.junit.jupiter.api.Test;",
          "",
          "[Added Lines]",
          "24: import org.junit.jupiter.api.AfterEach;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import org.xwiki.test.docker.junit5.UITest;",
          "33: import org.xwiki.test.ui.TestUtils;",
          "34: import org.xwiki.test.ui.po.AbstractRegistrationPage;",
          "35: import org.xwiki.test.ui.po.RegistrationPage;",
          "37: import static org.junit.jupiter.api.Assertions.assertEquals;",
          "38: import static org.junit.jupiter.api.Assertions.assertFalse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import org.xwiki.test.ui.po.DeletePageOutcomePage;",
          "37: import org.xwiki.test.ui.po.ViewPage;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64: @UITest",
          "65: class RegisterIT",
          "66: {",
          "182:     {",
          "184:         testUtils.loginAsSuperAdmin();",
          "185:         testUtils.createAdminUser();",
          "189:         switchUser(testUtils, isModal);",
          "191:         AbstractRegistrationPage registrationPage = this.getRegistrationPage(isModal);",
          "196:         return registrationPage;",
          "197:     }",
          "",
          "[Removed Lines]",
          "73:     private static Stream<Arguments> testsParameters()",
          "74:     {",
          "75:         return Stream.of(",
          "76:             Arguments.of(true, false),",
          "77:             Arguments.of(false, false),",
          "78:             Arguments.of(true, true)",
          "79:         );",
          "80:     }",
          "82:     @ParameterizedTest",
          "83:     @MethodSource(\"testsParameters\")",
          "84:     @Order(1)",
          "85:     void registerJohnSmith(boolean useLiveValidation, boolean isModal, TestUtils testUtils) throws Exception",
          "86:     {",
          "87:         AbstractRegistrationPage registrationPage = setUp(testUtils, useLiveValidation, isModal);",
          "88:         assertTrue(validateAndRegister(testUtils, useLiveValidation, isModal, registrationPage));",
          "89:         tryToLoginAsJohnSmith(testUtils, registrationPage);",
          "90:     }",
          "92:     @ParameterizedTest",
          "93:     @MethodSource(\"testsParameters\")",
          "94:     @Order(2)",
          "95:     void registerExistingUser(boolean useLiveValidation, boolean isModal, TestUtils testUtils) throws Exception",
          "96:     {",
          "97:         AbstractRegistrationPage registrationPage = setUp(testUtils, useLiveValidation, isModal);",
          "100:         registrationPage.fillRegisterForm(\"\", \"\", \"Admin\", \"password\", \"password\", \"\");",
          "102:         assertFalse(tryToRegister(testUtils, registrationPage, isModal));",
          "103:         assertTrue(registrationPage.validationFailureMessagesInclude(\"User already exists.\"));",
          "104:     }",
          "106:     @ParameterizedTest",
          "107:     @MethodSource(\"testsParameters\")",
          "108:     @Order(3)",
          "109:     void registerPasswordTooShort(boolean useLiveValidation, boolean isModal, TestUtils testUtils) throws Exception",
          "110:     {",
          "111:         AbstractRegistrationPage registrationPage = setUp(testUtils, useLiveValidation, isModal);",
          "112:         registrationPage.fillRegisterForm(null, null, null, \"short\", \"short\", null);",
          "113:         assertFalse(validateAndRegister(testUtils, useLiveValidation, isModal, registrationPage));",
          "114:         assertTrue(",
          "115:             registrationPage.validationFailureMessagesInclude(\"Your new password must be at least 6 characters long.\"));",
          "116:     }",
          "118:     @ParameterizedTest",
          "119:     @MethodSource(\"testsParameters\")",
          "120:     @Order(4)",
          "121:     void registerDifferentPasswords(boolean useLiveValidation, boolean isModal, TestUtils testUtils)",
          "122:         throws Exception",
          "123:     {",
          "124:         AbstractRegistrationPage registrationPage = setUp(testUtils, useLiveValidation, isModal);",
          "125:         registrationPage.fillRegisterForm(null, null, null, null, \"DifferentPassword\", null);",
          "126:         assertFalse(validateAndRegister(testUtils, useLiveValidation, isModal, registrationPage));",
          "127:         assertTrue(registrationPage.validationFailureMessagesInclude(\"The two passwords do not match.\"));",
          "128:     }",
          "130:     @ParameterizedTest",
          "131:     @MethodSource(\"testsParameters\")",
          "132:     @Order(5)",
          "133:     void registerEmptyPassword(boolean useLiveValidation, boolean isModal, TestUtils testUtils) throws Exception",
          "134:     {",
          "135:         AbstractRegistrationPage registrationPage = setUp(testUtils, useLiveValidation, isModal);",
          "136:         registrationPage.fillRegisterForm(null, null, null, \"\", \"\", null);",
          "137:         assertFalse(validateAndRegister(testUtils, useLiveValidation, isModal, registrationPage));",
          "138:         assertTrue(registrationPage.validationFailureMessagesInclude(\"This field is required.\"));",
          "139:     }",
          "141:     @ParameterizedTest",
          "142:     @MethodSource(\"testsParameters\")",
          "143:     @Order(6)",
          "144:     void registerEmptyUserName(boolean useLiveValidation, boolean isModal, TestUtils testUtils) throws Exception",
          "145:     {",
          "146:         AbstractRegistrationPage registrationPage = setUp(testUtils, useLiveValidation, isModal);",
          "148:         registrationPage.fillRegisterForm(\"\", \"\", \"\", null, null, null);",
          "149:         assertFalse(validateAndRegister(testUtils, useLiveValidation, isModal, registrationPage));",
          "150:         assertTrue(registrationPage.validationFailureMessagesInclude(\"This field is required.\"));",
          "151:     }",
          "153:     @ParameterizedTest",
          "154:     @MethodSource(\"testsParameters\")",
          "155:     @Order(7)",
          "156:     void registerInvalidEmail(boolean useLiveValidation, boolean isModal, TestUtils testUtils) throws Exception",
          "157:     {",
          "158:         AbstractRegistrationPage registrationPage = setUp(testUtils, useLiveValidation, isModal);",
          "159:         registrationPage.fillRegisterForm(null, null, null, null, null, \"not an email address\");",
          "160:         assertFalse(validateAndRegister(testUtils, useLiveValidation, isModal, registrationPage));",
          "161:         assertTrue(registrationPage.validationFailureMessagesInclude(\"Please enter a valid email address.\"));",
          "162:     }",
          "164:     @Test",
          "165:     @Order(8)",
          "166:     void registerWikiSyntaxName(TestUtils testUtils) throws Exception",
          "167:     {",
          "168:         AbstractRegistrationPage registrationPage = setUp(testUtils, false, false);",
          "169:         String password = \"SomePassword\";",
          "170:         String firstName = \"]]{{/html}}{{html clean=false}}HT&amp;ML\";",
          "171:         String lastName = \"]]{{/html}}\";",
          "172:         String username = \"WikiSyntaxName\";",
          "173:         registrationPage.fillRegisterForm(firstName, lastName, username, password, password, \"wiki@example.com\");",
          "174:         assertTrue(validateAndRegister(testUtils, false, false, registrationPage));",
          "176:         assertEquals(String.format(\"%s %s (%s): Registration successful.\", firstName, lastName, username),",
          "177:             ((RegistrationPage) registrationPage).getRegistrationSuccessMessage().orElseThrow());",
          "178:     }",
          "180:     private AbstractRegistrationPage setUp(TestUtils testUtils, boolean useLiveValidation, boolean isModal)",
          "181:         throws Exception",
          "186:         deleteJohnSmith(testUtils);",
          "187:         testUtils.updateObject(\"XWiki\", \"RegistrationConfig\", \"XWiki.Registration\", 0, \"liveValidation_enabled\",",
          "188:             useLiveValidation);",
          "190:         testUtils.recacheSecretToken();",
          "194:         testUtils.getDriver().executeJavascript(\"document.getElementById('xwikiname').onfocus = null;\");",
          "195:         registrationPage.fillInJohnSmithValues();",
          "",
          "[Added Lines]",
          "70:     private AbstractRegistrationPage setUp(TestUtils testUtils, boolean isModal, boolean closeWiki,",
          "71:         boolean withRegistrationConfig) throws Exception",
          "75:         if (closeWiki) {",
          "76:             testUtils.setWikiPreference(\"authenticate_view\", \"1\");",
          "77:         }",
          "78:         if (!withRegistrationConfig) {",
          "79:             testUtils.deletePage(\"XWiki\", \"RegistrationConfig\");",
          "80:         }",
          "85:         if (!closeWiki) {",
          "88:             testUtils.getDriver().executeJavascript(\"document.getElementById('xwikiname').onfocus = null;\");",
          "89:         }",
          "93:     @AfterEach",
          "94:     void afterEach(TestUtils testUtils) throws Exception",
          "95:     {",
          "96:         testUtils.loginAsSuperAdmin();",
          "97:         testUtils.setWikiPreference(\"authenticate_view\", \"0\");",
          "98:         ViewPage viewPage = testUtils.gotoPage(\"XWiki\", \"RegistrationConfig\");",
          "99:         if (!viewPage.exists()) {",
          "102:             DeletePageOutcomePage deletePageOutcomePage = new DeletePageOutcomePage();",
          "103:             deletePageOutcomePage.getDeletedTerminalPagesEntries().get(0).clickRestore();",
          "104:         } else {",
          "105:             testUtils.updateObject(\"XWiki\", \"RegistrationConfig\", \"XWiki.Registration\", 0, \"passwordLength\", 6);",
          "106:             testUtils.updateObject(\"XWiki\", \"RegistrationConfig\", \"XWiki.Registration\", 0,",
          "107:                 \"passwordRuleOneNumberEnabled\", 0);",
          "108:         }",
          "109:         deleteJohnSmith(testUtils);",
          "110:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:     {",
          "248:     }",
          "250:     private boolean tryToRegister(TestUtils testUtils, AbstractRegistrationPage registrationPage, boolean isModal)",
          "",
          "[Removed Lines]",
          "232:     private boolean validateAndRegister(TestUtils testUtils, boolean useLiveValidation, boolean isModal,",
          "233:         AbstractRegistrationPage registrationPage)",
          "235:         if (useLiveValidation) {",
          "236:             registrationPage.triggerLiveValidation();",
          "237:             if (!registrationPage.getValidationFailureMessages().isEmpty()) {",
          "238:                 return false;",
          "239:             }",
          "240:             boolean result = tryToRegister(testUtils, registrationPage, isModal);",
          "242:             assertTrue(registrationPage.getValidationFailureMessages().isEmpty(),",
          "243:                 \"LiveValidation did not show a failure message but clicking on the register button did.\");",
          "245:             return result;",
          "246:         }",
          "247:         return tryToRegister(testUtils, registrationPage, isModal);",
          "",
          "[Added Lines]",
          "145:     private boolean validateAndRegister(TestUtils testUtils, boolean isModal, AbstractRegistrationPage registrationPage)",
          "147:         registrationPage.triggerLiveValidation();",
          "148:         if (!registrationPage.getValidationFailureMessages().isEmpty()) {",
          "149:             return false;",
          "150:         }",
          "151:         boolean result = tryToRegister(testUtils, registrationPage, isModal);",
          "153:         assertTrue(registrationPage.getValidationFailureMessages().isEmpty(),",
          "154:             \"LiveValidation did not show a failure message but clicking on the register button did.\");",
          "156:         return result;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "288:         return ((RegistrationPage) registrationPage).getRegistrationSuccessMessage().isPresent();",
          "289:     }",
          "292:     {",
          "294:         testUtils.forceGuestUser();",
          "296:         assertTrue(registrationPage.isAuthenticated());",
          "299:     }",
          "",
          "[Removed Lines]",
          "291:     private void tryToLoginAsJohnSmith(TestUtils testUtils, AbstractRegistrationPage registrationPage)",
          "295:         testUtils.getDriver().get(testUtils.getURLToLoginAs(\"JohnSmith\", \"WeakPassword\"));",
          "297:         testUtils.recacheSecretToken();",
          "298:         testUtils.setDefaultCredentials(\"JohnSmith\", \"WeakPassword\");",
          "",
          "[Added Lines]",
          "200:     private void tryToLoginAsJohnSmith(TestUtils testUtils, String password, AbstractRegistrationPage registrationPage)",
          "204:         testUtils.loginAndGotoPage(AbstractRegistrationPage.JOHN_SMITH_USERNAME, password,",
          "205:             testUtils.getDriver().getCurrentUrl());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "304:     private void deleteJohnSmith(TestUtils testUtils) throws Exception",
          "305:     {",
          "306:         testUtils.loginAsSuperAdmin();",
          "308:     }",
          "309: }",
          "",
          "[Removed Lines]",
          "307:         testUtils.rest().deletePage(\"XWiki\", \"JohnSmith\");",
          "",
          "[Added Lines]",
          "215:         testUtils.rest().deletePage(\"XWiki\", AbstractRegistrationPage.JOHN_SMITH_USERNAME);",
          "216:     }",
          "224:     private static Stream<Arguments> testsParameters()",
          "225:     {",
          "226:         return Stream.of(",
          "229:             Arguments.of(false, false, true),",
          "230:             Arguments.of(false, true, true),",
          "231:             Arguments.of(true, false, true),",
          "232:             Arguments.of(false, false, false),",
          "233:             Arguments.of(false, true, false),",
          "234:             Arguments.of(true, false, false)",
          "235:         );",
          "236:     }",
          "238:     @ParameterizedTest()",
          "239:     @MethodSource(\"testsParameters\")",
          "240:     @Order(1)",
          "241:     void registerJohnSmith(boolean isModal, boolean closedWiki, boolean withRegistrationConfig, TestUtils testUtils)",
          "242:         throws Exception",
          "243:     {",
          "244:         AbstractRegistrationPage registrationPage = setUp(testUtils, isModal, closedWiki, withRegistrationConfig);",
          "245:         registrationPage.fillInJohnSmithValues();",
          "246:         assertTrue(validateAndRegister(testUtils, isModal, registrationPage));",
          "247:         tryToLoginAsJohnSmith(testUtils, AbstractRegistrationPage.JOHN_SMITH_PASSWORD, registrationPage);",
          "248:     }",
          "250:     @ParameterizedTest()",
          "251:     @MethodSource(\"testsParameters\")",
          "252:     @Order(2)",
          "253:     void registerExistingUser(boolean isModal, boolean closedWiki, boolean withRegistrationConfig,",
          "254:         TestUtils testUtils) throws Exception",
          "255:     {",
          "256:         AbstractRegistrationPage registrationPage = setUp(testUtils, isModal, closedWiki, withRegistrationConfig);",
          "259:         registrationPage.fillRegisterForm(\"\", \"\", \"Admin\", \"password\", \"password\", \"\");",
          "261:         assertFalse(tryToRegister(testUtils, registrationPage, isModal));",
          "262:         if (closedWiki) {",
          "263:             assertTrue(registrationPage.errorMessageInclude(\"Error: User already exists.\"));",
          "264:         } else {",
          "265:             assertTrue(registrationPage.validationFailureMessagesInclude(\"User already exists.\"));",
          "266:         }",
          "267:     }",
          "269:     @ParameterizedTest()",
          "270:     @MethodSource(\"testsParameters\")",
          "271:     @Order(3)",
          "272:     void registerPasswordTooShort(boolean isModal, boolean closedWiki, boolean withRegistrationConfig,",
          "273:         TestUtils testUtils) throws Exception",
          "274:     {",
          "275:         AbstractRegistrationPage registrationPage = setUp(testUtils, isModal, closedWiki, withRegistrationConfig);",
          "276:         registrationPage.fillRegisterForm(null, null, null, \"short\", \"short\", null);",
          "277:         assertFalse(validateAndRegister(testUtils, isModal, registrationPage));",
          "278:         assertTrue(",
          "279:             registrationPage.validationFailureMessagesInclude(\"Your new password must be at least 6 characters long.\"));",
          "282:     @ParameterizedTest()",
          "283:     @MethodSource(\"testsParameters\")",
          "284:     @Order(4)",
          "285:     void registerDifferentPasswords(boolean isModal, boolean closedWiki, boolean withRegistrationConfig,",
          "286:         TestUtils testUtils) throws Exception",
          "287:     {",
          "288:         AbstractRegistrationPage registrationPage = setUp(testUtils, isModal, closedWiki, withRegistrationConfig);",
          "289:         registrationPage.fillRegisterForm(null, null, null, null, \"DifferentPassword\", null);",
          "290:         assertFalse(validateAndRegister(testUtils, isModal, registrationPage));",
          "291:         assertTrue(registrationPage.validationFailureMessagesInclude(\"The two passwords do not match.\"));",
          "292:     }",
          "294:     @ParameterizedTest()",
          "295:     @MethodSource(\"testsParameters\")",
          "296:     @Order(5)",
          "297:     void registerEmptyPassword(boolean isModal, boolean closedWiki, boolean withRegistrationConfig,",
          "298:         TestUtils testUtils) throws Exception",
          "299:     {",
          "300:         AbstractRegistrationPage registrationPage = setUp(testUtils, isModal, closedWiki, withRegistrationConfig);",
          "301:         registrationPage.fillRegisterForm(null, null, null, \"\", \"\", null);",
          "302:         assertFalse(validateAndRegister(testUtils, isModal, registrationPage));",
          "303:         assertTrue(registrationPage.validationFailureMessagesInclude(\"This field is required.\"));",
          "304:     }",
          "306:     @ParameterizedTest()",
          "307:     @MethodSource(\"testsParameters\")",
          "308:     @Order(6)",
          "309:     void registerEmptyUserName(boolean isModal, boolean closedWiki, boolean withRegistrationConfig,",
          "310:         TestUtils testUtils) throws Exception",
          "311:     {",
          "312:         AbstractRegistrationPage registrationPage = setUp(testUtils, isModal, closedWiki, withRegistrationConfig);",
          "314:         registrationPage.fillRegisterForm(\"\", \"\", \"\", null, null, null);",
          "315:         assertFalse(validateAndRegister(testUtils, isModal, registrationPage));",
          "316:         assertTrue(registrationPage.validationFailureMessagesInclude(\"This field is required.\"));",
          "317:     }",
          "319:     @ParameterizedTest()",
          "320:     @MethodSource(\"testsParameters\")",
          "321:     @Order(7)",
          "322:     void registerInvalidEmail(boolean isModal, boolean closedWiki, boolean withRegistrationConfig,",
          "323:         TestUtils testUtils) throws Exception",
          "324:     {",
          "325:         AbstractRegistrationPage registrationPage = setUp(testUtils, isModal, closedWiki, withRegistrationConfig);",
          "326:         registrationPage.fillRegisterForm(null, null, null, null, null, \"not an email address\");",
          "327:         assertFalse(validateAndRegister(testUtils, isModal, registrationPage));",
          "328:         assertTrue(registrationPage.validationFailureMessagesInclude(\"Please enter a valid email address.\"));",
          "329:     }",
          "331:     @ParameterizedTest()",
          "332:     @MethodSource(\"testsParameters\")",
          "333:     @Order(8)",
          "334:     void registerWikiSyntaxName(boolean isModal, boolean closedWiki, boolean withRegistrationConfig,",
          "335:         TestUtils testUtils) throws Exception",
          "336:     {",
          "339:         if (!isModal) {",
          "340:             AbstractRegistrationPage registrationPage = setUp(testUtils, isModal, closedWiki, withRegistrationConfig);",
          "341:             String firstName = \"]]{{/html}}{{html clean=false}}HT&amp;ML\";",
          "342:             String lastName = \"]]{{/html}}\";",
          "343:             String password = AbstractRegistrationPage.JOHN_SMITH_PASSWORD;",
          "344:             registrationPage.fillRegisterForm(firstName, lastName,",
          "345:                 AbstractRegistrationPage.JOHN_SMITH_USERNAME, password, password, \"wiki@example.com\");",
          "346:             assertTrue(validateAndRegister(testUtils, isModal, registrationPage), String.format(\"isModal: %s close \"",
          "347:                 + \"wiki: %s withRegistrationConfig: %s\", isModal, closedWiki, withRegistrationConfig));",
          "349:             assertEquals(String.format(\"%s %s (%s): Registration successful.\", firstName, lastName,",
          "350:                     AbstractRegistrationPage.JOHN_SMITH_USERNAME),",
          "351:                 ((RegistrationPage) registrationPage).getRegistrationSuccessMessage().orElseThrow());",
          "352:         }",
          "353:     }",
          "355:     @ParameterizedTest()",
          "356:     @MethodSource(\"testsParameters\")",
          "357:     @Order(9)",
          "358:     void registerWithCustomPasswordPolicy(boolean isModal, boolean closedWiki, boolean withRegistrationConfig,",
          "359:         TestUtils testUtils) throws Exception",
          "360:     {",
          "362:         if (withRegistrationConfig) {",
          "363:             testUtils.loginAsSuperAdmin();",
          "365:             testUtils.updateObject(\"XWiki\", \"RegistrationConfig\", \"XWiki.Registration\", 0, \"passwordLength\", 10);",
          "366:             testUtils.updateObject(\"XWiki\", \"RegistrationConfig\", \"XWiki.Registration\", 0,",
          "367:                 \"passwordRuleOneNumberEnabled\", 1);",
          "369:             AbstractRegistrationPage registrationPage = setUp(testUtils, isModal, closedWiki, withRegistrationConfig);",
          "371:             String password = \"password\";",
          "372:             registrationPage.fillRegisterForm(\"John\", \"Smith\", AbstractRegistrationPage.JOHN_SMITH_USERNAME,",
          "373:                 password, password, \"johnsmith@xwiki.org\");",
          "374:             assertFalse(validateAndRegister(testUtils, isModal, registrationPage));",
          "375:             assertTrue(registrationPage.validationFailureMessagesInclude(",
          "376:                 \"Your new password must be at least 10 characters long.\"));",
          "378:             password = \"passwordpassword\";",
          "379:             registrationPage.fillRegisterForm(\"John\", \"Smith\", AbstractRegistrationPage.JOHN_SMITH_USERNAME,",
          "380:                 password, password, \"johnsmith@xwiki.org\");",
          "381:             assertFalse(validateAndRegister(testUtils, isModal, registrationPage));",
          "382:             assertTrue(registrationPage.validationFailureMessagesInclude(",
          "383:                 \"The password must contain at least one number.\"));",
          "385:             password = \"password4password\";",
          "386:             registrationPage.fillRegisterForm(\"John\", \"Smith\", AbstractRegistrationPage.JOHN_SMITH_USERNAME,",
          "387:                 password, password, \"johnsmith@xwiki.org\");",
          "388:             assertTrue(validateAndRegister(testUtils, isModal, registrationPage), String.format(\"isModal: %s close \"",
          "389:                 + \"wiki: %s withRegistrationConfig: %s\", isModal, closedWiki, withRegistrationConfig));",
          "390:             tryToLoginAsJohnSmith(testUtils, password, registrationPage);",
          "391:         }",
          "392:     }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWiki.java||xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWiki.java": [
          "File: xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWiki.java -> xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWiki.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3939:                 }",
          "3940:             }",
          "3944:                 return -2;",
          "3945:             }",
          "",
          "[Removed Lines]",
          "3942:             if ((!password.equals(password2))) {",
          "",
          "[Added Lines]",
          "3942:             if (!password.equals(password2)) {",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/RegisterAction.java||xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/RegisterAction.java": [
          "File: xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/RegisterAction.java -> xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/RegisterAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.Arrays;",
          "23: import java.util.List;",
          "25: import javax.inject.Named;",
          "26: import javax.inject.Singleton;",
          "27: import javax.script.ScriptContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import javax.inject.Inject;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import org.xwiki.captcha.CaptchaConfiguration;",
          "34: import org.xwiki.component.annotation.Component;",
          "35: import org.xwiki.model.reference.DocumentReference;",
          "37: import com.xpn.xwiki.XWiki;",
          "38: import com.xpn.xwiki.XWikiContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.xwiki.security.authentication.RegistrationConfiguration;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:     private static final String REGISTER = \"register\";",
          "56:     private static final Logger LOGGER = LoggerFactory.getLogger(RegisterAction.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     private static final String REG_CONSTANT = \"reg\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     private static final List<String> ALLOWED_TEMPLATES = Arrays.asList(REGISTER, \"registerinline\");",
          "64:     @Override",
          "65:     public boolean action(XWikiContext context) throws XWikiException",
          "66:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     @Inject",
          "72:     private RegistrationConfiguration registrationConfiguration;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "80:             if (!csrfTokenCheck(context)) {",
          "81:                 return false;",
          "82:             }",
          "84:             if (!verifyCaptcha(context, xwiki)) {",
          "92:             } else {",
          "94:             }",
          "98:             String redirect = Utils.getRedirect(request, null);",
          "",
          "[Removed Lines]",
          "85:                 return false;",
          "86:             }",
          "88:             int useemail = xwiki.getXWikiPreferenceAsInt(\"use_email_verification\", 0, context);",
          "89:             int result;",
          "90:             if (useemail == 1) {",
          "91:                 result = xwiki.createUser(true, \"edit\", context);",
          "93:                 result = xwiki.createUser(context);",
          "95:             getCurrentScriptContext().setAttribute(\"reg\", Integer.valueOf(result), ScriptContext.ENGINE_SCOPE);",
          "",
          "[Added Lines]",
          "93:             int result;",
          "96:                 result = -9;",
          "98:                 if (this.registrationConfiguration.isEmailValidationRequired()) {",
          "99:                     result = xwiki.createUser(true, \"edit\", context);",
          "100:                 } else {",
          "101:                     result = xwiki.createUser(context);",
          "102:                 }",
          "104:             getCurrentScriptContext().setAttribute(REG_CONSTANT, Integer.valueOf(result), ScriptContext.ENGINE_SCOPE);",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-oldcore/src/main/resources/ApplicationResources.properties||xwiki-platform-core/xwiki-platform-oldcore/src/main/resources/ApplicationResources.properties": [
          "File: xwiki-platform-core/xwiki-platform-oldcore/src/main/resources/ApplicationResources.properties -> xwiki-platform-core/xwiki-platform-oldcore/src/main/resources/ApplicationResources.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "1663: core.register.userAlreadyExists=User already exists.",
          "1664: core.register.invalidUsername=Invalid username provided. Please use only letters from the latin alphabet, numbers, and the underscore character '_'.",
          "1665: core.register.mailSenderWronglyConfigured=The user has been created but the validation email has not been sent. Please check the Mail Sending Configuration and consider recreating the user.",
          "1666: core.register.registerFailed=Registration has failed due to unknown reasons. (Error code: {0})",
          "1667: core.register.successful={0} ({1}): Registration successful.",
          "1668: core.register.firstName=First Name",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1666: core.register.invalidCaptcha=Incorrect CAPTCHA answer.",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/RegistrationConfiguration.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/RegistrationConfiguration.java": [
          "File: xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/RegistrationConfiguration.java -> xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/RegistrationConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.xwiki.security.authentication;",
          "22: import java.util.Set;",
          "23: import java.util.regex.Pattern;",
          "25: import org.xwiki.component.annotation.Role;",
          "26: import org.xwiki.stability.Unstable;",
          "34: @Unstable",
          "35: @Role",
          "36: public interface RegistrationConfiguration",
          "37: {",
          "41:     int DEFAULT_MINIMUM_PASSWORD_LENGTH = 6;",
          "46:     enum PasswordRules",
          "47:     {",
          "51:         ONE_LOWER_CASE_CHARACTER(\".*[a-z]+.*\"),",
          "56:         ONE_UPPER_CASE_CHARACTER(\".*[A-Z]+.*\"),",
          "61:         ONE_SYMBOL_CHARACTER(\".*(_\\\\W)+.*\"),",
          "66:         ONE_NUMBER_CHARACTER(\".*[0-9]+.*\");",
          "68:         private final String regularExpression;",
          "70:         PasswordRules(String expression)",
          "71:         {",
          "72:             this.regularExpression = expression;",
          "73:         }",
          "78:         public Pattern getPattern()",
          "79:         {",
          "80:             return Pattern.compile(this.regularExpression);",
          "81:         }",
          "82:     }",
          "87:     int getPasswordMinimumLength();",
          "92:     Set<PasswordRules> getPasswordRules();",
          "97:     boolean isCaptchaRequired();",
          "102:     boolean isEmailValidationRequired();",
          "107:     boolean isAutoLoginEnabled();",
          "112:     boolean isLoginEnabled();",
          "113: }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/ResetPasswordManager.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/ResetPasswordManager.java": [
          "File: xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/ResetPasswordManager.java -> xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/ResetPasswordManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.xwiki.security.authentication;",
          "22: import org.xwiki.component.annotation.Role;",
          "23: import org.xwiki.user.UserReference;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.xwiki.stability.Unstable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     void resetPassword(UserReference userReference, String newPassword)",
          "79:         throws ResetPasswordException;",
          "80: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     @Unstable",
          "91:     default boolean isPasswordCompliantWithRegistrationRules(String newPassword)",
          "92:     {",
          "93:         return true;",
          "94:     }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfiguration.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfiguration.java": [
          "File: xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfiguration.java -> xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.xwiki.security.authentication.internal;",
          "22: import java.util.HashSet;",
          "23: import java.util.Set;",
          "25: import javax.inject.Inject;",
          "26: import javax.inject.Named;",
          "27: import javax.inject.Singleton;",
          "29: import org.xwiki.component.annotation.Component;",
          "30: import org.xwiki.configuration.ConfigurationSource;",
          "31: import org.xwiki.security.authentication.RegistrationConfiguration;",
          "39: @Component",
          "40: @Singleton",
          "41: public class DefaultRegistrationConfiguration implements RegistrationConfiguration",
          "42: {",
          "43:     @Inject",
          "44:     @Named(\"registration\")",
          "45:     private ConfigurationSource configuration;",
          "47:     @Inject",
          "48:     @Named(\"wiki\")",
          "49:     private ConfigurationSource wikiPreferencesConfigurationSource;",
          "51:     @Override",
          "52:     public int getPasswordMinimumLength()",
          "53:     {",
          "54:         int length = configuration.getProperty(\"passwordLength\", DEFAULT_MINIMUM_PASSWORD_LENGTH);",
          "55:         return (length > 1) ? length : DEFAULT_MINIMUM_PASSWORD_LENGTH;",
          "56:     }",
          "58:     @Override",
          "59:     public Set<PasswordRules> getPasswordRules()",
          "60:     {",
          "61:         Set<PasswordRules> result = new HashSet<>();",
          "62:         if (configuration.getProperty(\"passwordRuleOneLowerCaseEnabled\", 0) == 1) {",
          "63:             result.add(PasswordRules.ONE_LOWER_CASE_CHARACTER);",
          "64:         }",
          "65:         if (configuration.getProperty(\"passwordRuleOneNumberEnabled\", 0) == 1) {",
          "66:             result.add(PasswordRules.ONE_NUMBER_CHARACTER);",
          "67:         }",
          "68:         if (configuration.getProperty(\"passwordRuleOneSymbolEnabled\", 0) == 1) {",
          "69:             result.add(PasswordRules.ONE_SYMBOL_CHARACTER);",
          "70:         }",
          "71:         if (configuration.getProperty(\"passwordRuleOneUpperCaseEnabled\", 0) == 1) {",
          "72:             result.add(PasswordRules.ONE_UPPER_CASE_CHARACTER);",
          "73:         }",
          "74:         return result;",
          "75:     }",
          "77:     @Override",
          "78:     public boolean isCaptchaRequired()",
          "79:     {",
          "80:         return configuration.getProperty(\"requireCaptcha\", 0) == 1;",
          "81:     }",
          "83:     @Override",
          "84:     public boolean isEmailValidationRequired()",
          "85:     {",
          "86:         return wikiPreferencesConfigurationSource.getProperty(\"use_email_verification\", 0) == 1;",
          "87:     }",
          "89:     @Override",
          "90:     public boolean isAutoLoginEnabled()",
          "91:     {",
          "92:         return configuration.getProperty(\"loginButton_autoLogin_enabled\", 0) == 1;",
          "93:     }",
          "95:     @Override",
          "96:     public boolean isLoginEnabled()",
          "97:     {",
          "98:         return configuration.getProperty(\"loginButton_enabled\", 1) == 1;",
          "99:     }",
          "100: }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManager.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManager.java": [
          "File: xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManager.java -> xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import org.xwiki.resource.UnsupportedResourceReferenceException;",
          "44: import org.xwiki.security.authentication.AuthenticationAction;",
          "45: import org.xwiki.security.authentication.AuthenticationResourceReference;",
          "46: import org.xwiki.security.authentication.ResetPasswordException;",
          "47: import org.xwiki.security.authentication.ResetPasswordManager;",
          "48: import org.xwiki.security.authentication.ResetPasswordRequestResponse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import org.xwiki.security.authentication.RegistrationConfiguration;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:     @Named(\"xwikiproperties\")",
          "121:     private ConfigurationSource configurationSource;",
          "123:     @Inject",
          "124:     private Logger logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     @Inject",
          "125:     private RegistrationConfiguration registrationConfiguration;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "311:         throws ResetPasswordException",
          "312:     {",
          "313:         if (this.checkUserReference(userReference)) {",
          "314:             XWikiContext context = this.contextProvider.get();",
          "316:             DocumentUserReference documentUserReference = (DocumentUserReference) userReference;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:             if (!this.isPasswordCompliantWithRegistrationRules(newPassword)) {",
          "319:                 throw new ResetPasswordException(\"The provided password is not compliant with the password security \"",
          "320:                     + \"rules.\");",
          "321:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "332:             }",
          "333:         }",
          "334:     }",
          "335: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:     @Override",
          "345:     public boolean isPasswordCompliantWithRegistrationRules(String newPassword)",
          "346:     {",
          "347:         int passwordMinimumLength = this.registrationConfiguration.getPasswordMinimumLength();",
          "348:         boolean result = newPassword.length() >= passwordMinimumLength;",
          "350:         if (result) {",
          "351:             for (RegistrationConfiguration.PasswordRules passwordRule",
          "352:                 : this.registrationConfiguration.getPasswordRules()) {",
          "353:                 if (!passwordRule.getPattern().matcher(newPassword).matches()) {",
          "354:                     result = false;",
          "355:                     break;",
          "356:                 }",
          "357:             }",
          "358:         }",
          "360:         return result;",
          "361:     }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/RegistrationConfigurationSource.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/RegistrationConfigurationSource.java": [
          "File: xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/RegistrationConfigurationSource.java -> xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/RegistrationConfigurationSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.xwiki.security.authentication.internal;",
          "22: import java.util.List;",
          "24: import javax.inject.Named;",
          "25: import javax.inject.Singleton;",
          "27: import org.xwiki.component.annotation.Component;",
          "28: import org.xwiki.configuration.internal.AbstractDocumentConfigurationSource;",
          "29: import org.xwiki.model.reference.DocumentReference;",
          "30: import org.xwiki.model.reference.LocalDocumentReference;",
          "38: @Component",
          "39: @Named(\"registration\")",
          "40: @Singleton",
          "41: public class RegistrationConfigurationSource extends AbstractDocumentConfigurationSource",
          "42: {",
          "43:     private static final List<String> SPACE_NAMES = List.of(\"XWiki\");",
          "45:     private static final LocalDocumentReference CLASS_REFERENCE =",
          "46:         new LocalDocumentReference(SPACE_NAMES, \"Registration\");",
          "48:     private static final LocalDocumentReference DOC_REFERENCE =",
          "49:         new LocalDocumentReference(SPACE_NAMES, \"RegistrationConfig\");",
          "51:     @Override",
          "52:     protected DocumentReference getDocumentReference()",
          "53:     {",
          "54:         return new DocumentReference(DOC_REFERENCE, getCurrentWikiReference());",
          "55:     }",
          "57:     @Override",
          "58:     protected LocalDocumentReference getClassReference()",
          "59:     {",
          "60:         return CLASS_REFERENCE;",
          "61:     }",
          "63:     @Override",
          "64:     protected String getCacheId()",
          "65:     {",
          "66:         return \"configuration.document.registration\";",
          "67:     }",
          "68: }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/resources/ApplicationResources.properties||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/resources/ApplicationResources.properties": [
          "File: xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/resources/ApplicationResources.properties -> xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/resources/ApplicationResources.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: security.authentication.security.email.error=Error when sending a security email",
          "26: security.authentication.migration1400600000XWIKI19869.email.subject=Important security issue",
          "",
          "[Removed Lines]",
          "27: security.authentication.migration1400600000XWIKI19869.email.content=Dear user, \\n\\ndue to a bug your password was stored in plain text in our wiki. We cannot exclude that your plain text password was exposed in a data leak. Therefore, you might receive a second email to choose a new password. \\nPlease contact the administrator in case of problem or for further questions.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfigurationTest.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfigurationTest.java": [
          "File: xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfigurationTest.java -> xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultRegistrationConfigurationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.xwiki.security.authentication.internal;",
          "22: import java.util.Set;",
          "24: import javax.inject.Named;",
          "26: import org.junit.jupiter.api.Test;",
          "27: import org.xwiki.configuration.ConfigurationSource;",
          "28: import org.xwiki.security.authentication.RegistrationConfiguration;",
          "29: import org.xwiki.test.junit5.mockito.ComponentTest;",
          "30: import org.xwiki.test.junit5.mockito.InjectMockComponents;",
          "31: import org.xwiki.test.junit5.mockito.MockComponent;",
          "33: import static org.junit.jupiter.api.Assertions.*;",
          "34: import static org.mockito.Mockito.when;",
          "35: import static org.xwiki.security.authentication.RegistrationConfiguration.DEFAULT_MINIMUM_PASSWORD_LENGTH;",
          "43: @ComponentTest",
          "44: class DefaultRegistrationConfigurationTest",
          "45: {",
          "46:     @InjectMockComponents",
          "47:     private DefaultRegistrationConfiguration defaultRegistrationConfiguration;",
          "49:     @MockComponent",
          "50:     @Named(\"registration\")",
          "51:     private ConfigurationSource configuration;",
          "53:     @MockComponent",
          "54:     @Named(\"wiki\")",
          "55:     private ConfigurationSource wikiPreferencesConfigurationSource;",
          "57:     @Test",
          "58:     void getPasswordMinimumLength()",
          "59:     {",
          "60:         when(configuration.getProperty(\"passwordLength\", DEFAULT_MINIMUM_PASSWORD_LENGTH)).thenReturn(5);",
          "61:         assertEquals(5, this.defaultRegistrationConfiguration.getPasswordMinimumLength());",
          "63:         when(configuration.getProperty(\"passwordLength\", DEFAULT_MINIMUM_PASSWORD_LENGTH)).thenReturn(-5);",
          "64:         assertEquals(DEFAULT_MINIMUM_PASSWORD_LENGTH, this.defaultRegistrationConfiguration.getPasswordMinimumLength());",
          "65:     }",
          "67:     @Test",
          "68:     void getPasswordRules()",
          "69:     {",
          "70:         when(configuration.getProperty(\"passwordRuleOneLowerCaseEnabled\", 0)).thenReturn(1);",
          "71:         when(configuration.getProperty(\"passwordRuleOneNumberEnabled\", 0)).thenReturn(1);",
          "72:         when(configuration.getProperty(\"passwordRuleOneSymbolEnabled\", 0)).thenReturn(1);",
          "73:         when(configuration.getProperty(\"passwordRuleOneUpperCaseEnabled\", 0)).thenReturn(1);",
          "74:         assertEquals(Set.of(",
          "75:             RegistrationConfiguration.PasswordRules.ONE_LOWER_CASE_CHARACTER,",
          "76:             RegistrationConfiguration.PasswordRules.ONE_NUMBER_CHARACTER,",
          "77:             RegistrationConfiguration.PasswordRules.ONE_UPPER_CASE_CHARACTER,",
          "78:             RegistrationConfiguration.PasswordRules.ONE_SYMBOL_CHARACTER",
          "79:         ), this.defaultRegistrationConfiguration.getPasswordRules());",
          "81:         when(configuration.getProperty(\"passwordRuleOneLowerCaseEnabled\", 0)).thenReturn(0);",
          "82:         when(configuration.getProperty(\"passwordRuleOneNumberEnabled\", 0)).thenReturn(0);",
          "83:         when(configuration.getProperty(\"passwordRuleOneSymbolEnabled\", 0)).thenReturn(0);",
          "84:         when(configuration.getProperty(\"passwordRuleOneUpperCaseEnabled\", 0)).thenReturn(0);",
          "86:         assertEquals(Set.of(), this.defaultRegistrationConfiguration.getPasswordRules());",
          "88:         when(configuration.getProperty(\"passwordRuleOneLowerCaseEnabled\", 0)).thenReturn(1);",
          "89:         when(configuration.getProperty(\"passwordRuleOneUpperCaseEnabled\", 0)).thenReturn(1);",
          "90:         when(configuration.getProperty(\"passwordRuleOneNumberEnabled\", 0)).thenReturn(0);",
          "91:         when(configuration.getProperty(\"passwordRuleOneSymbolEnabled\", 0)).thenReturn(0);",
          "93:         assertEquals(Set.of(",
          "94:             RegistrationConfiguration.PasswordRules.ONE_LOWER_CASE_CHARACTER,",
          "95:             RegistrationConfiguration.PasswordRules.ONE_UPPER_CASE_CHARACTER",
          "96:         ), this.defaultRegistrationConfiguration.getPasswordRules());",
          "98:         when(configuration.getProperty(\"passwordRuleOneLowerCaseEnabled\", 0)).thenReturn(0);",
          "99:         when(configuration.getProperty(\"passwordRuleOneUpperCaseEnabled\", 0)).thenReturn(0);",
          "100:         when(configuration.getProperty(\"passwordRuleOneNumberEnabled\", 0)).thenReturn(1);",
          "101:         when(configuration.getProperty(\"passwordRuleOneSymbolEnabled\", 0)).thenReturn(1);",
          "103:         assertEquals(Set.of(",
          "104:             RegistrationConfiguration.PasswordRules.ONE_NUMBER_CHARACTER,",
          "105:             RegistrationConfiguration.PasswordRules.ONE_SYMBOL_CHARACTER",
          "106:         ), this.defaultRegistrationConfiguration.getPasswordRules());",
          "107:     }",
          "109:     @Test",
          "110:     void isEmailValidationRequired()",
          "111:     {",
          "112:         when(wikiPreferencesConfigurationSource.getProperty(\"use_email_verification\", 0)).thenReturn(1);",
          "113:         assertTrue(this.defaultRegistrationConfiguration.isEmailValidationRequired());",
          "115:         when(wikiPreferencesConfigurationSource.getProperty(\"use_email_verification\", 0)).thenReturn(0);",
          "116:         assertFalse(this.defaultRegistrationConfiguration.isEmailValidationRequired());",
          "118:         when(wikiPreferencesConfigurationSource.getProperty(\"use_email_verification\", 0)).thenReturn(-8);",
          "119:         assertFalse(this.defaultRegistrationConfiguration.isEmailValidationRequired());",
          "120:     }",
          "122:     @Test",
          "123:     void isCaptchaRequired()",
          "124:     {",
          "125:         when(configuration.getProperty(\"requireCaptcha\", 0)).thenReturn(1);",
          "126:         assertTrue(this.defaultRegistrationConfiguration.isCaptchaRequired());",
          "128:         when(configuration.getProperty(\"requireCaptcha\", 0)).thenReturn(0);",
          "129:         assertFalse(this.defaultRegistrationConfiguration.isCaptchaRequired());",
          "131:         when(configuration.getProperty(\"requireCaptcha\", 0)).thenReturn(11);",
          "132:         assertFalse(this.defaultRegistrationConfiguration.isCaptchaRequired());",
          "133:     }",
          "134: }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManagerTest.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManagerTest.java": [
          "File: xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManagerTest.java -> xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManagerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.time.temporal.ChronoUnit;",
          "25: import java.util.Arrays;",
          "26: import java.util.Date;",
          "28: import javax.inject.Named;",
          "29: import javax.inject.Provider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import java.util.Set;",
          "28: import java.util.stream.Stream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import org.junit.jupiter.api.BeforeEach;",
          "33: import org.junit.jupiter.api.Test;",
          "34: import org.junit.jupiter.api.extension.RegisterExtension;",
          "35: import org.xwiki.configuration.ConfigurationSource;",
          "36: import org.xwiki.localization.ContextualLocalizationManager;",
          "37: import org.xwiki.model.reference.DocumentReference;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.junit.jupiter.params.ParameterizedTest;",
          "38: import org.junit.jupiter.params.provider.Arguments;",
          "39: import org.junit.jupiter.params.provider.MethodSource;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40: import org.xwiki.resource.ResourceReferenceSerializer;",
          "41: import org.xwiki.security.authentication.AuthenticationAction;",
          "42: import org.xwiki.security.authentication.AuthenticationResourceReference;",
          "43: import org.xwiki.security.authentication.ResetPasswordException;",
          "44: import org.xwiki.security.authentication.ResetPasswordRequestResponse;",
          "45: import org.xwiki.test.LogLevel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: import org.xwiki.security.authentication.RegistrationConfiguration;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:     @Named(\"xwikiproperties\")",
          "116:     private ConfigurationSource configurationSource;",
          "118:     @RegisterExtension",
          "119:     private LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.INFO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     @MockComponent",
          "125:     private RegistrationConfiguration registrationConfiguration;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "456:             () -> this.resetPasswordManager.resetPassword(otherUserReference, \"some password\"));",
          "457:         assertEquals(exceptionMessage, resetPasswordException.getMessage());",
          "458:     }",
          "459: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "469:     @ParameterizedTest",
          "470:     @MethodSource(\"provideArgumentsForIsPasswordCompliantWithRegistrationRules\")",
          "471:     void isPasswordCompliantWithRegistrationRules(int minimumLength,",
          "472:         Set<RegistrationConfiguration.PasswordRules> rules, String password, boolean expectation)",
          "473:     {",
          "474:         when(this.registrationConfiguration.getPasswordMinimumLength()).thenReturn(minimumLength);",
          "475:         when(this.registrationConfiguration.getPasswordRules()).thenReturn(rules);",
          "476:         assertEquals(expectation, this.resetPasswordManager.isPasswordCompliantWithRegistrationRules(password));",
          "477:     }",
          "479:     private static Stream<Arguments> provideArgumentsForIsPasswordCompliantWithRegistrationRules()",
          "480:     {",
          "481:         Set<RegistrationConfiguration.PasswordRules> noRules = Set.of();",
          "482:         Set<RegistrationConfiguration.PasswordRules> lowerMandatory =",
          "483:             Set.of(RegistrationConfiguration.PasswordRules.ONE_LOWER_CASE_CHARACTER);",
          "484:         Set<RegistrationConfiguration.PasswordRules> upperMandatory =",
          "485:             Set.of(RegistrationConfiguration.PasswordRules.ONE_UPPER_CASE_CHARACTER);",
          "486:         Set<RegistrationConfiguration.PasswordRules> symbolMandatory =",
          "487:             Set.of(RegistrationConfiguration.PasswordRules.ONE_SYMBOL_CHARACTER);",
          "488:         Set<RegistrationConfiguration.PasswordRules> numberMandatory =",
          "489:             Set.of(RegistrationConfiguration.PasswordRules.ONE_NUMBER_CHARACTER);",
          "490:         Set<RegistrationConfiguration.PasswordRules> upperAndNumberMandatory =",
          "491:             Set.of(",
          "492:                 RegistrationConfiguration.PasswordRules.ONE_UPPER_CASE_CHARACTER,",
          "493:                 RegistrationConfiguration.PasswordRules.ONE_NUMBER_CHARACTER",
          "494:             );",
          "495:         Set<RegistrationConfiguration.PasswordRules> lowerAndUpperMandatory =",
          "496:             Set.of(",
          "497:                 RegistrationConfiguration.PasswordRules.ONE_LOWER_CASE_CHARACTER,",
          "498:                 RegistrationConfiguration.PasswordRules.ONE_UPPER_CASE_CHARACTER",
          "499:             );",
          "500:         Set<RegistrationConfiguration.PasswordRules> allRules =",
          "501:             Set.of(",
          "502:                 RegistrationConfiguration.PasswordRules.ONE_LOWER_CASE_CHARACTER,",
          "503:                 RegistrationConfiguration.PasswordRules.ONE_UPPER_CASE_CHARACTER,",
          "504:                 RegistrationConfiguration.PasswordRules.ONE_NUMBER_CHARACTER,",
          "505:                 RegistrationConfiguration.PasswordRules.ONE_SYMBOL_CHARACTER",
          "506:             );",
          "508:         String onlyLower3Chars = \"foo\";",
          "509:         String onlyLower6Chars = \"fooooo\";",
          "510:         String lowerUpper11Chars = \"foooOOOOOoo\";",
          "511:         String lowerNumber6Chars = \"foo000\";",
          "512:         String lowerUpperNumber11Chars = \"fooOOOOo000\";",
          "513:         String lowerNumberSymbolSpace9Chars = \"foo_/ 000\";",
          "514:         String lowerSymbolNoSpace5Chars = \"foo_/\";",
          "515:         String lowerUpperSymbolNoSpace9Chars = \"fOOOOoo_/\";",
          "516:         String lowerUpperSymbolNumberSpace12Chars = \"foOOOo_/ 000\";",
          "517:         String lowerUpperSymbolNumberSpaceAccents14Chars = \"foOOOo_/ \u00e9\u00e9000\";",
          "518:         String symbolSpace3Chars = \" _/\";",
          "519:         String symbolNumberNoSpace6Chars = \"_/3434\";",
          "520:         String onlyUpper3Chars = \"FOO\";",
          "521:         String onlyUpper6Chars = \"FOOOOO\";",
          "523:         return Stream.of(",
          "525:             Arguments.of(3, noRules, onlyLower3Chars, true),",
          "526:             Arguments.of(3, noRules, onlyLower6Chars, true),",
          "527:             Arguments.of(3, noRules, lowerUpper11Chars, true),",
          "528:             Arguments.of(3, noRules, lowerNumber6Chars, true),",
          "529:             Arguments.of(3, noRules, lowerUpperNumber11Chars, true),",
          "530:             Arguments.of(3, noRules, lowerNumberSymbolSpace9Chars, true),",
          "531:             Arguments.of(3, noRules, lowerSymbolNoSpace5Chars, true),",
          "532:             Arguments.of(3, noRules, lowerUpperSymbolNoSpace9Chars, true),",
          "533:             Arguments.of(3, noRules, lowerUpperSymbolNumberSpace12Chars, true),",
          "534:             Arguments.of(3, noRules, lowerUpperSymbolNumberSpaceAccents14Chars, true),",
          "535:             Arguments.of(3, noRules, symbolSpace3Chars, true),",
          "536:             Arguments.of(3, noRules, symbolNumberNoSpace6Chars, true),",
          "537:             Arguments.of(3, noRules, onlyUpper3Chars, true),",
          "538:             Arguments.of(3, noRules, onlyUpper6Chars, true),",
          "540:             Arguments.of(6, noRules, onlyLower3Chars, false),",
          "541:             Arguments.of(6, noRules, onlyLower6Chars, true),",
          "542:             Arguments.of(6, noRules, lowerUpper11Chars, true),",
          "543:             Arguments.of(6, noRules, lowerNumber6Chars, true),",
          "544:             Arguments.of(6, noRules, lowerUpperNumber11Chars, true),",
          "545:             Arguments.of(6, noRules, lowerNumberSymbolSpace9Chars, true),",
          "546:             Arguments.of(6, noRules, lowerSymbolNoSpace5Chars, false),",
          "547:             Arguments.of(6, noRules, lowerUpperSymbolNoSpace9Chars, true),",
          "548:             Arguments.of(6, noRules, lowerUpperSymbolNumberSpace12Chars, true),",
          "549:             Arguments.of(6, noRules, lowerUpperSymbolNumberSpaceAccents14Chars, true),",
          "550:             Arguments.of(6, noRules, symbolSpace3Chars, false),",
          "551:             Arguments.of(6, noRules, symbolNumberNoSpace6Chars, true),",
          "552:             Arguments.of(6, noRules, onlyUpper3Chars, false),",
          "553:             Arguments.of(6, noRules, onlyUpper6Chars, true),",
          "555:             Arguments.of(6, lowerMandatory, onlyLower3Chars, false),",
          "556:             Arguments.of(6, lowerMandatory, onlyLower6Chars, true),",
          "557:             Arguments.of(6, lowerMandatory, lowerUpper11Chars, true),",
          "558:             Arguments.of(6, lowerMandatory, lowerNumber6Chars, true),",
          "559:             Arguments.of(6, lowerMandatory, lowerUpperNumber11Chars, true),",
          "560:             Arguments.of(6, lowerMandatory, lowerNumberSymbolSpace9Chars, true),",
          "561:             Arguments.of(6, lowerMandatory, lowerSymbolNoSpace5Chars, false),",
          "562:             Arguments.of(6, lowerMandatory, lowerUpperSymbolNoSpace9Chars, true),",
          "563:             Arguments.of(6, lowerMandatory, lowerUpperSymbolNumberSpace12Chars, true),",
          "564:             Arguments.of(6, lowerMandatory, lowerUpperSymbolNumberSpaceAccents14Chars, true),",
          "565:             Arguments.of(6, lowerMandatory, symbolSpace3Chars, false),",
          "566:             Arguments.of(6, lowerMandatory, symbolNumberNoSpace6Chars, false),",
          "567:             Arguments.of(6, lowerMandatory, onlyUpper3Chars, false),",
          "568:             Arguments.of(6, lowerMandatory, onlyUpper6Chars, false),",
          "570:             Arguments.of(6, upperMandatory, onlyLower3Chars, false),",
          "571:             Arguments.of(6, upperMandatory, onlyLower6Chars, false),",
          "572:             Arguments.of(6, upperMandatory, lowerUpper11Chars, true),",
          "573:             Arguments.of(6, upperMandatory, lowerNumber6Chars, false),",
          "574:             Arguments.of(6, upperMandatory, lowerUpperNumber11Chars, true),",
          "575:             Arguments.of(6, upperMandatory, lowerNumberSymbolSpace9Chars, false),",
          "576:             Arguments.of(6, upperMandatory, lowerSymbolNoSpace5Chars, false),",
          "577:             Arguments.of(6, upperMandatory, lowerUpperSymbolNoSpace9Chars, true),",
          "578:             Arguments.of(6, upperMandatory, lowerUpperSymbolNumberSpace12Chars, true),",
          "579:             Arguments.of(6, upperMandatory, lowerUpperSymbolNumberSpaceAccents14Chars, true),",
          "580:             Arguments.of(6, upperMandatory, symbolSpace3Chars, false),",
          "581:             Arguments.of(6, upperMandatory, symbolNumberNoSpace6Chars, false),",
          "582:             Arguments.of(6, upperMandatory, onlyUpper3Chars, false),",
          "583:             Arguments.of(6, upperMandatory, onlyUpper6Chars, true),",
          "585:             Arguments.of(6, numberMandatory, onlyLower3Chars, false),",
          "586:             Arguments.of(6, numberMandatory, onlyLower6Chars, false),",
          "587:             Arguments.of(6, numberMandatory, lowerUpper11Chars, false),",
          "588:             Arguments.of(6, numberMandatory, lowerNumber6Chars, true),",
          "589:             Arguments.of(6, numberMandatory, lowerUpperNumber11Chars, true),",
          "590:             Arguments.of(6, numberMandatory, lowerNumberSymbolSpace9Chars, true),",
          "591:             Arguments.of(6, numberMandatory, lowerSymbolNoSpace5Chars, false),",
          "592:             Arguments.of(6, numberMandatory, lowerUpperSymbolNoSpace9Chars, false),",
          "593:             Arguments.of(6, numberMandatory, lowerUpperSymbolNumberSpace12Chars, true),",
          "594:             Arguments.of(6, numberMandatory, lowerUpperSymbolNumberSpaceAccents14Chars, true),",
          "595:             Arguments.of(6, numberMandatory, symbolSpace3Chars, false),",
          "596:             Arguments.of(6, numberMandatory, symbolNumberNoSpace6Chars, true),",
          "597:             Arguments.of(6, numberMandatory, onlyUpper3Chars, false),",
          "598:             Arguments.of(6, numberMandatory, onlyUpper6Chars, false),",
          "600:             Arguments.of(6, symbolMandatory, onlyLower3Chars, false),",
          "601:             Arguments.of(6, symbolMandatory, onlyLower6Chars, false),",
          "602:             Arguments.of(6, symbolMandatory, lowerUpper11Chars, false),",
          "603:             Arguments.of(6, symbolMandatory, lowerNumber6Chars, false),",
          "604:             Arguments.of(6, symbolMandatory, lowerUpperNumber11Chars, false),",
          "605:             Arguments.of(6, symbolMandatory, lowerNumberSymbolSpace9Chars, true),",
          "606:             Arguments.of(6, symbolMandatory, lowerSymbolNoSpace5Chars, false),",
          "607:             Arguments.of(6, symbolMandatory, lowerUpperSymbolNoSpace9Chars, true),",
          "608:             Arguments.of(6, symbolMandatory, lowerUpperSymbolNumberSpace12Chars, true),",
          "609:             Arguments.of(6, symbolMandatory, lowerUpperSymbolNumberSpaceAccents14Chars, true),",
          "610:             Arguments.of(6, symbolMandatory, symbolSpace3Chars, false),",
          "611:             Arguments.of(6, symbolMandatory, symbolNumberNoSpace6Chars, true),",
          "612:             Arguments.of(6, symbolMandatory, onlyUpper3Chars, false),",
          "613:             Arguments.of(6, symbolMandatory, onlyUpper6Chars, false),",
          "615:             Arguments.of(6, upperAndNumberMandatory, onlyLower3Chars, false),",
          "616:             Arguments.of(6, upperAndNumberMandatory, onlyLower6Chars, false),",
          "617:             Arguments.of(6, upperAndNumberMandatory, lowerUpper11Chars, false),",
          "618:             Arguments.of(6, upperAndNumberMandatory, lowerNumber6Chars, false),",
          "619:             Arguments.of(6, upperAndNumberMandatory, lowerUpperNumber11Chars, true),",
          "620:             Arguments.of(6, upperAndNumberMandatory, lowerNumberSymbolSpace9Chars, false),",
          "621:             Arguments.of(6, upperAndNumberMandatory, lowerSymbolNoSpace5Chars, false),",
          "622:             Arguments.of(6, upperAndNumberMandatory, lowerUpperSymbolNoSpace9Chars, false),",
          "623:             Arguments.of(6, upperAndNumberMandatory, lowerUpperSymbolNumberSpace12Chars, true),",
          "624:             Arguments.of(6, upperAndNumberMandatory, lowerUpperSymbolNumberSpaceAccents14Chars, true),",
          "625:             Arguments.of(6, upperAndNumberMandatory, symbolSpace3Chars, false),",
          "626:             Arguments.of(6, upperAndNumberMandatory, symbolNumberNoSpace6Chars, false),",
          "627:             Arguments.of(6, upperAndNumberMandatory, onlyUpper3Chars, false),",
          "628:             Arguments.of(6, upperAndNumberMandatory, onlyUpper6Chars, false),",
          "630:             Arguments.of(6, lowerAndUpperMandatory, onlyLower3Chars, false),",
          "631:             Arguments.of(6, lowerAndUpperMandatory, onlyLower6Chars, false),",
          "632:             Arguments.of(6, lowerAndUpperMandatory, lowerUpper11Chars, true),",
          "633:             Arguments.of(6, lowerAndUpperMandatory, lowerNumber6Chars, false),",
          "634:             Arguments.of(6, lowerAndUpperMandatory, lowerUpperNumber11Chars, true),",
          "635:             Arguments.of(6, lowerAndUpperMandatory, lowerNumberSymbolSpace9Chars, false),",
          "636:             Arguments.of(6, lowerAndUpperMandatory, lowerSymbolNoSpace5Chars, false),",
          "637:             Arguments.of(6, lowerAndUpperMandatory, lowerUpperSymbolNoSpace9Chars, true),",
          "638:             Arguments.of(6, lowerAndUpperMandatory, lowerUpperSymbolNumberSpace12Chars, true),",
          "639:             Arguments.of(6, lowerAndUpperMandatory, lowerUpperSymbolNumberSpaceAccents14Chars, true),",
          "640:             Arguments.of(6, lowerAndUpperMandatory, symbolSpace3Chars, false),",
          "641:             Arguments.of(6, lowerAndUpperMandatory, symbolNumberNoSpace6Chars, false),",
          "642:             Arguments.of(6, lowerAndUpperMandatory, onlyUpper3Chars, false),",
          "643:             Arguments.of(6, lowerAndUpperMandatory, onlyUpper6Chars, false),",
          "645:             Arguments.of(6, allRules, onlyLower3Chars, false),",
          "646:             Arguments.of(6, allRules, onlyLower6Chars, false),",
          "647:             Arguments.of(6, allRules, lowerUpper11Chars, false),",
          "648:             Arguments.of(6, allRules, lowerNumber6Chars, false),",
          "649:             Arguments.of(6, allRules, lowerUpperNumber11Chars, false),",
          "650:             Arguments.of(6, allRules, lowerNumberSymbolSpace9Chars, false),",
          "651:             Arguments.of(6, allRules, lowerSymbolNoSpace5Chars, false),",
          "652:             Arguments.of(6, allRules, lowerUpperSymbolNoSpace9Chars, false),",
          "653:             Arguments.of(6, allRules, lowerUpperSymbolNumberSpace12Chars, true),",
          "654:             Arguments.of(6, allRules, lowerUpperSymbolNumberSpaceAccents14Chars, true),",
          "655:             Arguments.of(6, allRules, symbolSpace3Chars, false),",
          "656:             Arguments.of(6, allRules, symbolNumberNoSpace6Chars, false),",
          "657:             Arguments.of(6, allRules, onlyUpper3Chars, false),",
          "658:             Arguments.of(6, allRules, onlyUpper6Chars, false),",
          "660:             Arguments.of(13, allRules, lowerUpperSymbolNumberSpace12Chars, false),",
          "661:             Arguments.of(13, allRules, lowerUpperSymbolNumberSpaceAccents14Chars, true)",
          "662:         );",
          "663:     }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/main/java/org/xwiki/security/authentication/script/RegistrationScriptService.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/main/java/org/xwiki/security/authentication/script/RegistrationScriptService.java": [
          "File: xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/main/java/org/xwiki/security/authentication/script/RegistrationScriptService.java -> xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/main/java/org/xwiki/security/authentication/script/RegistrationScriptService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.xwiki.security.authentication.script;",
          "22: import java.util.Set;",
          "23: import java.util.stream.Collectors;",
          "25: import javax.inject.Inject;",
          "26: import javax.inject.Named;",
          "27: import javax.inject.Singleton;",
          "29: import org.xwiki.component.annotation.Component;",
          "30: import org.xwiki.script.service.ScriptService;",
          "31: import org.xwiki.security.authentication.RegistrationConfiguration;",
          "32: import org.xwiki.security.script.SecurityScriptService;",
          "33: import org.xwiki.stability.Unstable;",
          "41: @Unstable",
          "42: @Component",
          "43: @Named(SecurityScriptService.ROLEHINT + '.' + RegistrationScriptService.ID)",
          "44: @Singleton",
          "45: public class RegistrationScriptService implements ScriptService",
          "46: {",
          "50:     public static final String ID = \"registration\";",
          "52:     @Inject",
          "53:     private RegistrationConfiguration registrationConfiguration;",
          "58:     public int getPasswordMinimumLength()",
          "59:     {",
          "60:         return this.registrationConfiguration.getPasswordMinimumLength();",
          "61:     }",
          "70:     public Set<String> getPasswordRules()",
          "71:     {",
          "72:         return this.registrationConfiguration.getPasswordRules()",
          "73:             .stream().map(RegistrationConfiguration.PasswordRules::name)",
          "74:             .collect(Collectors.toSet());",
          "75:     }",
          "80:     public boolean isCaptchaRequired()",
          "81:     {",
          "82:         return this.registrationConfiguration.isCaptchaRequired();",
          "83:     }",
          "88:     public boolean isEmailValidationRequired()",
          "89:     {",
          "90:         return this.registrationConfiguration.isEmailValidationRequired();",
          "91:     }",
          "96:     public boolean isAutoLoginEnabled()",
          "97:     {",
          "98:         return this.registrationConfiguration.isAutoLoginEnabled();",
          "99:     }",
          "104:     public boolean isLoginEnabled()",
          "105:     {",
          "106:         return this.registrationConfiguration.isLoginEnabled();",
          "107:     }",
          "108: }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/test/java/org/xwiki/security/authentication/script/RegistrationScriptServiceTest.java||xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/test/java/org/xwiki/security/authentication/script/RegistrationScriptServiceTest.java": [
          "File: xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/test/java/org/xwiki/security/authentication/script/RegistrationScriptServiceTest.java -> xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/test/java/org/xwiki/security/authentication/script/RegistrationScriptServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.xwiki.security.authentication.script;",
          "22: import java.util.Set;",
          "24: import org.junit.jupiter.api.Test;",
          "25: import org.xwiki.security.authentication.RegistrationConfiguration;",
          "26: import org.xwiki.test.junit5.mockito.ComponentTest;",
          "27: import org.xwiki.test.junit5.mockito.InjectMockComponents;",
          "28: import org.xwiki.test.junit5.mockito.MockComponent;",
          "30: import static org.junit.jupiter.api.Assertions.*;",
          "31: import static org.mockito.Mockito.verify;",
          "32: import static org.mockito.Mockito.when;",
          "40: @ComponentTest",
          "41: class RegistrationScriptServiceTest",
          "42: {",
          "43:     @InjectMockComponents",
          "44:     private RegistrationScriptService scriptService;",
          "46:     @MockComponent",
          "47:     private RegistrationConfiguration registrationConfiguration;",
          "49:     @Test",
          "50:     void getPasswordMinimumLength()",
          "51:     {",
          "52:         when(registrationConfiguration.getPasswordMinimumLength()).thenReturn(745);",
          "53:         assertEquals(745, scriptService.getPasswordMinimumLength());",
          "54:     }",
          "56:     @Test",
          "57:     void getPasswordRules()",
          "58:     {",
          "59:         when(registrationConfiguration.getPasswordRules()).thenReturn(Set.of(",
          "60:             RegistrationConfiguration.PasswordRules.ONE_LOWER_CASE_CHARACTER,",
          "61:             RegistrationConfiguration.PasswordRules.ONE_SYMBOL_CHARACTER));",
          "62:         assertEquals(Set.of(\"ONE_LOWER_CASE_CHARACTER\",\"ONE_SYMBOL_CHARACTER\"),",
          "63:             scriptService.getPasswordRules());",
          "64:     }",
          "66:     @Test",
          "67:     void isCaptchaRequired()",
          "68:     {",
          "69:         when(registrationConfiguration.isCaptchaRequired()).thenReturn(true);",
          "70:         assertTrue(scriptService.isCaptchaRequired());",
          "71:         verify(registrationConfiguration).isCaptchaRequired();",
          "72:     }",
          "74:     @Test",
          "75:     void isEmailValidationRequired()",
          "76:     {",
          "77:         when(registrationConfiguration.isEmailValidationRequired()).thenReturn(true);",
          "78:         assertTrue(scriptService.isEmailValidationRequired());",
          "79:         verify(registrationConfiguration).isEmailValidationRequired();",
          "80:     }",
          "82:     @Test",
          "83:     void isAutoLoginEnabled()",
          "84:     {",
          "85:         when(registrationConfiguration.isAutoLoginEnabled()).thenReturn(true);",
          "86:         assertTrue(scriptService.isAutoLoginEnabled());",
          "87:         verify(registrationConfiguration).isAutoLoginEnabled();",
          "88:     }",
          "90:     @Test",
          "91:     void isLoginEnabled()",
          "92:     {",
          "93:         when(registrationConfiguration.isLoginEnabled()).thenReturn(true);",
          "94:         assertTrue(scriptService.isLoginEnabled());",
          "95:         verify(registrationConfiguration).isLoginEnabled();",
          "96:     }",
          "97: }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/AbstractRegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/AbstractRegistrationPage.java": [
          "File: xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/AbstractRegistrationPage.java -> xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/AbstractRegistrationPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: public abstract class AbstractRegistrationPage extends BasePage",
          "38: {",
          "39:     @FindBy(id = \"register\")",
          "40:     private WebElement registerFormElement;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     public static final String JOHN_SMITH_USERNAME = \"JohnSmith\";",
          "49:     public static final String JOHN_SMITH_PASSWORD = \"WeakPassword\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     public void fillInJohnSmithValues()",
          "47:     {",
          "49:     }",
          "51:     public void fillRegisterForm(final String firstName, final String lastName, final String username,",
          "",
          "[Removed Lines]",
          "48:         fillRegisterForm(\"John\", \"Smith\", \"JohnSmith\", \"WeakPassword\", \"WeakPassword\", \"johnsmith@xwiki.org\");",
          "",
          "[Added Lines]",
          "60:         fillRegisterForm(\"John\", \"Smith\", JOHN_SMITH_USERNAME, JOHN_SMITH_PASSWORD, JOHN_SMITH_PASSWORD,",
          "61:             \"johnsmith@xwiki.org\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:     public List<WebElement> getValidationFailureMessages()",
          "89:     {",
          "91:     }",
          "94:     public boolean validationFailureMessagesInclude(String message)",
          "95:     {",
          "98:     }",
          "",
          "[Removed Lines]",
          "90:         return getDriver().findElementsWithoutWaiting(By.xpath(\"//dd/span[contains(@class,'LV_validation_message LV_invalid')]\"));",
          "96:         return getDriver().findElementsWithoutWaiting(",
          "97:             By.xpath(\"//dd/span[contains(@class,'LV_validation_message LV_invalid') and . = '\" + message + \"']\")).size() > 0;",
          "",
          "[Added Lines]",
          "103:         return getDriver().findElementsWithoutWaiting(",
          "104:             By.xpath(\"//dd/span[contains(@class,'LV_validation_message LV_invalid')]\"));",
          "105:     }",
          "110:     public WebElement getErrorMessage(String message)",
          "111:     {",
          "112:         return getDriver().findElementWithoutWaiting(By.xpath(\"//div[@class = 'errormessage']\"));",
          "118:         return !getDriver().findElementsWithoutWaiting(",
          "119:             By.xpath(\"//dd/span[contains(@class,'LV_validation_message LV_invalid') and . = '\" + message + \"']\"))",
          "120:             .isEmpty();",
          "121:     }",
          "124:     public boolean errorMessageInclude(String message)",
          "125:     {",
          "126:         return !getDriver().findElementsWithoutWaiting(",
          "127:                 By.xpath(\"//div[@class = 'errormessage' and . = '\" + message + \"']\"))",
          "128:             .isEmpty();",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/passwd.vm||xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/passwd.vm": [
          "File: xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/passwd.vm -> xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/passwd.vm",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #template(\"startpage.vm\")",
          "25: #template(\"register_macros.vm\")",
          "26: #set ($fields = [])",
          "28: #definePasswordFields($fields, 'xwikipassword', 'xwikipassword2', $passwordOptions)",
          "29: <div class=\"minwidthb\"></div>",
          "30: <div class=\"main layoutsubsection\">",
          "",
          "[Removed Lines]",
          "27: #loadConfig('XWiki.RegistrationConfig')",
          "",
          "[Added Lines]",
          "27: #set ($passwordOptions = $NULL)",
          "28: #_loadPasswordOptions($passwordOptions)",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/register_macros.vm||xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/register_macros.vm": [
          "File: xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/register_macros.vm -> xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/register_macros.vm",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:   #end ## CSRF check",
          "388: #end##macro",
          "390: #*",
          "396:   #set($configurationClassName = 'XWiki.Registration')",
          "397:   #set($configDocument = $xwiki.getDocument($configDocumentName))",
          "399:   #if(!$configDocument || !$configDocument.getObject($configurationClassName))",
          "400:   ## No config document, load defaults.",
          "407:     #set($userFullName = \"$request.get('register_first_name') $request.get('register_last_name')\")",
          "414:   #else",
          "415:     #set($configObject = $configDocument.getObject($configurationClassName))",
          "416:     #if ($xcontext.action == 'register')",
          "418:     #else",
          "452:     #end",
          "453:   #end",
          "454: #end",
          "",
          "[Removed Lines]",
          "395: #macro(loadConfig, $configDocumentName)",
          "398:   #set ($passwordOptions = {})",
          "401:     #set($heading = \"$services.localization.render('core.register.title')\")",
          "402:     #set($welcomeMessage = \"$services.localization.render('core.register.welcome')\")",
          "403:     #set($useLiveValidation = true)",
          "404:     #set($defaultFieldOkayMessage = \"$services.localization.render('core.validation.valid.message')\")",
          "405:     #set($loginButton = true)",
          "406:     #set($defaultRedirect = \"$xwiki.getURL($services.model.resolveDocument('', 'default', $doc.documentReference.extractReference('WIKI')))\")",
          "408:     #set($registrationSuccessMessage = '{{info}}$services.localization.render(\"core.register.successful\", [\"[[${userFullName}>>${userSpace}${userName}]]\", ${userName}]){{/info}}')",
          "409:     #set($passwordOptions.passwordLength = 6)",
          "410:     #set($passwordOptions.passwordRuleOneLowerCaseEnabled = false)",
          "411:     #set($passwordOptions.passwordRuleOneUpperCaseEnabled = false)",
          "412:     #set($passwordOptions.passwordRuleOneNumberEnabled = false)",
          "413:     #set($passwordOptions.passwordRuleOneSymbolEnabled = false)",
          "417:       #set ($heading = \"(% id='document-title'%)((( = #evaluate($configObject.getProperty('heading').getValue()) = )))(%%)\")",
          "419:       #set ($heading = \"= #evaluate($configObject.getProperty('heading').getValue()) =\")",
          "420:     #end",
          "421:     #set($welcomeMessage = \"#evaluate($configObject.getProperty('welcomeMessage').getValue())\")",
          "422:     #if($configObject.getProperty('liveValidation_enabled').getValue() == 1)",
          "423:       #set($useLiveValidation = true)",
          "424:     #end",
          "425:     #set($defaultFieldOkayMessage = \"#evaluate($configObject.getProperty('liveValidation_defaultFieldOkMessage').getValue())\")",
          "426:     #if($configObject.getProperty('loginButton_enabled').getValue() == 1)",
          "427:       #set($loginButton = true)",
          "428:     #end",
          "429:     #if($configObject.getProperty('loginButton_autoLogin_enabled').getValue() == 1)",
          "430:       #set($autoLogin = true)",
          "431:     #end",
          "432:     #set($defaultRedirect = \"#evaluate($configObject.getProperty('defaultRedirect').getValue())\")",
          "433:     #set($registrationSuccessMessage = \"$configObject.getProperty('registrationSuccessMessage').getValue()\")",
          "434:     #if($configObject.getProperty('requireCaptcha').getValue() == 1)",
          "435:       #set($requireCaptcha = true)",
          "436:     #end",
          "437:     #if($configObject.getProperty('passwordRuleOneLowerCaseEnabled').getValue() == 1)",
          "438:       #set($passwordOptions.passwordRuleOneLowerCaseEnabled = true)",
          "439:     #end",
          "440:     #if($configObject.getProperty('passwordRuleOneUpperCaseEnabled').getValue() == 1)",
          "441:       #set($passwordOptions.passwordRuleOneUpperCaseEnabled = true)",
          "442:     #end",
          "443:     #if($configObject.getProperty('passwordRuleOneNumberEnabled').getValue() == 1)",
          "444:       #set($passwordOptions.passwordRuleOneNumberEnabled = true)",
          "445:     #end",
          "446:     #if($configObject.getProperty('passwordRuleOneSymbolEnabled').getValue() == 1)",
          "447:       #set($passwordOptions.passwordRuleOneSymbolEnabled = true)",
          "448:     #end",
          "449:     #set($passwordOptions.passwordLength = $configObject.getProperty('passwordLength').getValue())",
          "450:     #if (\"$!passwordOptions.passwordLength\" == \"\" || $passwordOptions.passwordLength <= 1)",
          "451:       #set ($passwordOptions.passwordLength = 6)",
          "",
          "[Added Lines]",
          "392: #macro(_loadPasswordOptions $return)",
          "393:   #set ($passwordOptions = {})",
          "394:   #set ($passwordOptions.passwordLength = $services.security.registration.passwordMinimumLength)",
          "395:   #set ($passwordRules = $services.security.registration.passwordRules)",
          "396:   #set($passwordOptions.passwordRuleOneLowerCaseEnabled = $passwordRules.contains('ONE_LOWER_CASE_CHARACTER'))",
          "397:   #set($passwordOptions.passwordRuleOneUpperCaseEnabled = $passwordRules.contains('ONE_UPPER_CASE_CHARACTER'))",
          "398:   #set($passwordOptions.passwordRuleOneNumberEnabled = $passwordRules.contains('ONE_NUMBER_CHARACTER'))",
          "399:   #set($passwordOptions.passwordRuleOneSymbolEnabled = $passwordRules.contains('ONE_SYMBOL_CHARACTER'))",
          "400:   #setVariable(\"$return\" $passwordOptions)",
          "401: #end",
          "406: #macro(_loadConfig $return)",
          "407:   #set ($registrationConfig = {})",
          "408:   #set($registrationConfig.loginButton = $services.security.registration.isLoginEnabled())",
          "409:   #set($registrationConfig.autoLogin = $services.security.registration.isAutoLoginEnabled())",
          "410:   #set($registrationConfig.requireCaptcha = $services.security.registration.isCaptchaRequired())",
          "411:   #set($registrationConfig.useEmailVerification = $services.security.registration.isEmailValidationRequired())",
          "412:   #_loadPasswordOptions($passwordOptions)",
          "413:   #set ($registrationConfig.passwordOptions = $passwordOptions)",
          "414:   ## FIXME: All remaining values should probably also be retrieved from API",
          "416:   #set ($configDocumentName = 'XWiki.RegistrationConfig')",
          "420:     #set($registrationConfig.heading = \"$services.localization.render('core.register.title')\")",
          "421:     #set($registrationConfig.welcomeMessage = \"$services.localization.render('core.register.welcome')\")",
          "422:     #set($registrationConfig.defaultRedirect = \"$xwiki.getURL($services.model.resolveDocument('', 'default', $doc.documentReference.extractReference('WIKI')))\")",
          "424:     #set($userSpace = 'XWiki.')",
          "426:     #set($userLink = $xwiki.getUserName(\"$userSpace$userName\"))",
          "427:     #define($registrationSuccessMessage)",
          "428:       #set($message = $services.localization.render('core.register.successful', 'xwiki/2.1', ['USERLINK', $userName]))",
          "429:       #set($userLink = $xwiki.getUserName(\"$userSpace$userName\"))",
          "430:       {{info}}$message.replace('USERLINK', \"{{html clean=false}}$userLink{{/html}}\"){{/info}}",
          "431:     #end",
          "432:     #set ($registrationConfig.registrationSuccessMessage = $registrationSuccessMessage)",
          "436:       #set ($registrationConfig.heading = \"(% id='document-title'%)((( = #evaluate($configObject.getProperty('heading').getValue()) = )))(%%)\")",
          "438:       #set ($registrationConfig.heading = \"= #evaluate($configObject.getProperty('heading').getValue()) =\")",
          "440:     #set($registrationConfig.welcomeMessage = \"#evaluate($configObject.getProperty('welcomeMessage').getValue())\")",
          "441:     #set($registrationConfig.defaultRedirect = \"#evaluate($configObject.getProperty('defaultRedirect').getValue())\")",
          "442:     #set($registrationConfig.registrationSuccessMessage = \"$configObject.getProperty('registrationSuccessMessage').getValue()\")",
          "444:   #setVariable(\"$return\" $registrationConfig)",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/registerinline.vm||xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/registerinline.vm": [
          "File: xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/registerinline.vm -> xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/registerinline.vm",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: ## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA",
          "18: ## 02110-1301 USA, or see the FSF site: http://www.fsf.org.",
          "19: ## ---------------------------------------------------------------------------",
          "20: #if (!$xwiki.hasAccessLevel('view', 'XWiki.Registration') || $xwiki.getDocument('XWiki.Registration').isNew())",
          "21:   ## Display the static content included in this template, as there's no override in the wiki.",
          "22:   <h1>$services.localization.render('core.register.title')</h1>",
          "26:   #if ($reg && $reg <= 0)",
          "27:     #if ($reg == -2)",
          "28:       #error($services.localization.render('core.register.passwordMismatch'))",
          "",
          "[Removed Lines]",
          "23:   #if (!$reg || $reg < 0)",
          "24:     <p>$services.localization.render('core.register.welcome')</p>",
          "25:   #end",
          "",
          "[Added Lines]",
          "20: #template(\"register_macros.vm\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:       #error($services.localization.render('core.register.invalidUsername'))",
          "33:     #elseif ($reg == -8)",
          "34:       #error($services.localization.render('core.register.userAlreadyExists'))",
          "35:     #else",
          "36:       #error($services.localization.render('core.register.registerFailed', [$reg]))",
          "37:     #end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     #elseif ($reg == -9)",
          "34:       #error($services.localization.render('core.register.invalidCaptcha'))",
          "35:     ## Note that -10 is reserved already (see api.XWiki#createUser)",
          "36:     #elseif($reg == -11)",
          "37:       #error($services.localization.render('core.register.mailSenderWronglyConfigured'))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:       $escapetool.xml($request.xwikiname)]))",
          "42:   #end",
          "43:   #if (!$reg || $reg < 0)",
          "58:         #end",
          "100:       </div>",
          "101:       <div class=\"buttons\">",
          "102:         <span class=\"buttonwrapper\">",
          "103:           <input type=\"submit\" value=\"$services.localization.render('core.register.submit')\" class=\"button\"/>",
          "",
          "[Removed Lines]",
          "44:     <form id=\"register\" action=\"\" method=\"post\" class=\"xform third\">",
          "45:       <div>",
          "46:         <input type=\"hidden\" name=\"form_token\" value=\"$!services.csrf.token\" />",
          "47:         <input type=\"hidden\" name=\"register\" value=\"1\" />",
          "48:         <input type=\"hidden\" name=\"xredirect\" value=\"$!escapetool.xml($!request.xredirect)\" />",
          "49:         #set ($class = $xwiki.getClass('XWiki.XWikiUsers'))",
          "50:         #set ($obj = $class.newObject())",
          "51:         #set ($serverobj = $class.newObject())",
          "52:         #set ($discard = $doc.use('XWiki.XWikiUsers'))",
          "53:         #if ($request.register_first_name)",
          "54:           $doc.set('first_name', $request.register_first_name)",
          "55:         #end",
          "56:         #if ($request.register_last_name)",
          "57:           $doc.set('last_name', $request.register_last_name)",
          "59:         <dl>",
          "60:           #set ($prop = $class.first_name)",
          "61:           <dt><label for=\"register_${prop.name}\">$services.localization.render('core.register.firstName')</label></dt>",
          "62:           <dd>$doc.displayEdit($prop, 'register_',  $obj).replace('type=', 'autocomplete=\"given-name\" type=')</dd>",
          "64:           #set ($prop = $class.last_name)",
          "65:           <dt><label for=\"register_${prop.name}\">$services.localization.render('core.register.lastName')</label></dt>",
          "66:           <dd>$doc.displayEdit($prop, 'register_',  $obj).replace('type=', 'autocomplete=\"family-name\" type=')</dd>",
          "68:           <dt>",
          "69:             <label for=\"register_username\">",
          "70:               $services.localization.render('core.register.username')",
          "71:               <span class=\"xRequired\">$services.localization.render('core.validation.required')</span>",
          "72:             </label>",
          "73:           </dt>",
          "74:           <dd>",
          "75:             <input name=\"xwikiname\" id=\"register_username\" type=\"text\" autocomplete='username' size=\"20\"",
          "76:               onfocus=\"prepareName(document.forms.register);\" />",
          "77:           </dd>",
          "79:           #set ($prop = $class.password)",
          "80:           <dt>",
          "81:             <label for=\"register_${prop.name}\">",
          "82:               $services.localization.render('core.register.password')",
          "83:               <span class=\"xRequired\">$services.localization.render('core.validation.required')</span>",
          "84:             </label>",
          "85:           </dt>",
          "86:           <dd>$doc.displayEdit($prop, 'register_',  $obj).replace('type=', 'autocomplete=\"new-password\" type=')</dd>",
          "88:           <dt>",
          "89:             <label for=\"register2_${prop.name}\">",
          "90:               $services.localization.render('core.register.passwordRepeat')",
          "91:               <span class=\"xRequired\">$services.localization.render('core.validation.required')</span>",
          "92:             </label>",
          "93:           </dt>",
          "94:           <dd>$doc.displayEdit($prop, 'register2_',  $obj).replace('type=', 'autocomplete=\"new-password\" type=')</dd>",
          "96:           #set ($prop = $class.email)",
          "97:           <dt><label for=\"register_${prop.name}\">$services.localization.render('core.register.email')</label></dt>",
          "98:           <dd>$doc.displayEdit($prop, 'register_',  $obj).replace('type=', 'autocomplete=\"email\" type=')</dd>",
          "99:         </dl>",
          "",
          "[Added Lines]",
          "47:     <p>$services.localization.render('core.register.welcome')</p>",
          "48:     #set ($registrationConfig = $NULL)",
          "49:     #_loadConfig($registrationConfig)",
          "50:     #set($fields = [])",
          "51:     ##",
          "52:     ## The first name field, no checking.",
          "53:     #set($field =",
          "54:       {'name' : 'register_first_name',",
          "55:         'label' : $services.localization.render('core.register.firstName'),",
          "56:         'params' : {",
          "57:           'type' : 'text',",
          "58:           'size' : '60',",
          "59:           'autocomplete' : 'given-name'",
          "60:         }",
          "61:     })",
          "62:     #set($discard = $fields.add($field))",
          "63:     ##",
          "64:     ## The last name field, no checking.",
          "65:     #set($field =",
          "66:       {'name' : 'register_last_name',",
          "67:         'label' : $services.localization.render('core.register.lastName'),",
          "68:         'params' : {",
          "69:           'type' : 'text',",
          "70:           'size' : '60',",
          "71:           'autocomplete' : 'family-name'",
          "72:         }",
          "73:     })",
          "74:     #set($discard = $fields.add($field))",
          "75:     ##",
          "76:     ## The user name field, mandatory and programmatically checked to make sure the username doesn't exist.",
          "77:     #set($field =",
          "78:       {'name' : 'xwikiname',",
          "79:         'label' : $services.localization.render('core.register.username'),",
          "80:         'params' : {",
          "81:           'type' : 'text',",
          "82:           'onfocus' : 'prepareName(document.forms.register);',",
          "83:           'size' : '60',",
          "84:           'autocomplete' : 'username'",
          "85:         },",
          "86:         'validate' : {",
          "87:           'mandatory' : {",
          "88:           'failureMessage' : $services.localization.render('core.validation.required.message')",
          "89:         }",
          "90:       }",
          "91:     })",
          "92:     #set($discard = $fields.add($field))",
          "93:     ## Make sure the chosen user name is not already taken",
          "94:     ## This macro is called by programmaticValidation for xwikiname (above)",
          "95:     #macro (nameAvailable, $name)",
          "96:       #if ($xwiki.exists(\"$userSpace$name\"))",
          "97:       failed",
          "98:       #end",
          "99:     #end",
          "100:     ##",
          "101:     ##The password field, mandatory and must be at least 6 characters long.",
          "102:     ##The confirm password field, mandatory, must match password field, and must also be 6+ characters long.",
          "103:     #definePasswordFields($fields, 'register_password', 'register2_password', $registrationConfig.passwordOptions)",
          "104:     ##",
          "105:     ## The email address field, regex checked with an email pattern. Mandatory if registration uses email verification",
          "106:     #set($field =",
          "107:       {'name' : 'register_email',",
          "108:         'label' : $services.localization.render('core.register.email'),",
          "109:         'params' : {",
          "110:           'type' : 'text',",
          "111:           'size' : '60',",
          "112:           'autocomplete' : 'email'",
          "113:         },",
          "114:         'validate' : {",
          "115:           'regex' : {",
          "116:             'pattern' : '/^([^@\\s]+)@((?:[-a-zA-Z0-9]+\\.)+[a-zA-Z]{2,})$/',",
          "117:             'failureMessage' : $services.localization.render('xe.admin.registration.invalidEmail')",
          "118:           }",
          "119:         }",
          "120:     })",
          "121:     #if($registrationConfig.useEmailVerification)",
          "122:       #set($field.validate.mandatory = {'failureMessage' : $services.localization.render('core.validation.required.message')})",
          "123:     #end",
          "124:     #set($discard = $fields.add($field))",
          "125:     ##",
          "126:     ## To disable the CAPTCHA on this page, comment out the next entry.",
          "127:     ## The CAPTCHA, not really an input field but still defined the same way.",
          "128:     #if($services.captcha && !$invited && $xcontext.getUser() == \"XWiki.XWikiGuest\" && $registrationConfig.requireCaptcha)",
          "129:       ## The CAPTCHA field, programmatically checked to make sure the CAPTCHA is right.",
          "130:       ## Not checked by javascript because javascript can't check the CAPTCHA and the Ok message because it passes the",
          "131:       ## mandatory test is misleading.",
          "132:       ## Also, not filled back in if there is an error ('noReturn').",
          "133:       #set($field =",
          "134:         {'name' : 'captcha_placeholder',",
          "135:           'label' : $services.localization.render('core.captcha.instruction'),",
          "136:           'skipLabelFor' : true,",
          "137:           'type'  : 'html',",
          "138:           'html'  : \"$!{services.captcha.default.display()}\",",
          "139:           'noReturn' : true",
          "140:       })",
          "141:       #set($discard = $fields.add($field))",
          "142:     #end",
          "143:     #set($field =",
          "144:     {'name' : 'xredirect',",
          "145:       'params' : {",
          "146:         'type' : 'hidden',",
          "147:         'value': \"$!escapetool.xml($!request.xredirect)\"",
          "148:         }",
          "149:     })",
          "150:     #set($discard = $fields.add($field))",
          "151:     #set($field =",
          "152:     {'name' : 'register',",
          "153:       'params' : {",
          "154:         'type' : 'hidden',",
          "155:         'value': '1'",
          "156:       }",
          "157:     })",
          "158:     #set($discard = $fields.add($field))",
          "159:     <form id=\"register\" action=\"$xwiki.relativeRequestURL\" method=\"post\" class=\"xform third\">",
          "160:       <div class=\"hidden\">",
          "161:         #if ($request.xpage == 'registerinline')",
          "162:           #skinExtensionHooks",
          "165:       #generateHtml($fields, $request)",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/resetpasswordinline.vm||xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/resetpasswordinline.vm": [
          "File: xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/resetpasswordinline.vm -> xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/resetpasswordinline.vm",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:         #else",
          "114:             #resetPasswordBoxStart('default')",
          "115:         #end",
          "118:         #set ($passwordFields = [])",
          "119:         #definePasswordFields($passwordFields, 'p', 'p2', $passwordOptions)",
          "",
          "[Removed Lines]",
          "116:         ## Load the configuration from a seperate document.",
          "117:         #loadConfig('XWiki.RegistrationConfig')",
          "",
          "[Added Lines]",
          "116:         #set ($passwordOptions = $NULL)",
          "117:         #_loadPasswordOptions($passwordOptions)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "beaeb18d3aaf1028f40cbfcf2a958f0c1c459b8d",
      "candidate_info": {
        "commit_hash": "beaeb18d3aaf1028f40cbfcf2a958f0c1c459b8d",
        "repo": "xwiki/xwiki-platform",
        "commit_url": "https://github.com/xwiki/xwiki-platform/commit/beaeb18d3aaf1028f40cbfcf2a958f0c1c459b8d",
        "files": [
          "xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-resources/src/main/resources/flamingo/less/messages.less",
          "xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-docker/src/test/it/org/xwiki/invitation/test/docker/InvitationIT.java",
          "xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationFooterElement.java",
          "xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationSenderPage.java",
          "xwiki-platform-core/xwiki-platform-realtime/xwiki-platform-realtime-wysiwyg/xwiki-platform-realtime-wysiwyg-test/xwiki-platform-realtime-wysiwyg-test-docker/src/test/it/org/xwiki/realtime/wysiwyg/test/ui/RealtimeWYSIWYGEditorIT.java",
          "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-macros/pom.xml",
          "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-macros/xwiki-platform-rendering-macro-message/pom.xml",
          "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-macros/xwiki-platform-rendering-macro-message/src/main/java/org/xwiki/rendering/internal/macro/message/MacroIconPrettyNameProvider.java",
          "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-macros/xwiki-platform-rendering-macro-message/src/main/resources/META-INF/components.txt",
          "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/pom.xml",
          "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/main/java/org/xwiki/rendering/internal/util/XWikiIconProvider.java",
          "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/main/resources/META-INF/components.txt",
          "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/test/java/org/xwiki/rendering/internal/util/XWikiIconProviderTest.java",
          "xwiki-platform-core/xwiki-platform-repository/xwiki-platform-repository-test/xwiki-platform-repository-test-pageobjects/src/main/java/org/xwiki/repository/test/po/ExtensionPage.java",
          "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/LoginPage.java",
          "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java",
          "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/macros.vm",
          "xwiki-platform-distribution/xwiki-platform-distribution-war-dependencies/pom.xml"
        ],
        "message": "XWIKI-21452: Macros info, success, warning and error are only distinguished by colors (#3023)\n\nCo-authored-by: Thiago Krieck <thiago.krieck@xwiki.com>",
        "before_after_code_files": [
          "xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-resources/src/main/resources/flamingo/less/messages.less||xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-resources/src/main/resources/flamingo/less/messages.less",
          "xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-docker/src/test/it/org/xwiki/invitation/test/docker/InvitationIT.java||xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-docker/src/test/it/org/xwiki/invitation/test/docker/InvitationIT.java",
          "xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationFooterElement.java||xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationFooterElement.java",
          "xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationSenderPage.java||xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationSenderPage.java",
          "xwiki-platform-core/xwiki-platform-realtime/xwiki-platform-realtime-wysiwyg/xwiki-platform-realtime-wysiwyg-test/xwiki-platform-realtime-wysiwyg-test-docker/src/test/it/org/xwiki/realtime/wysiwyg/test/ui/RealtimeWYSIWYGEditorIT.java||xwiki-platform-core/xwiki-platform-realtime/xwiki-platform-realtime-wysiwyg/xwiki-platform-realtime-wysiwyg-test/xwiki-platform-realtime-wysiwyg-test-docker/src/test/it/org/xwiki/realtime/wysiwyg/test/ui/RealtimeWYSIWYGEditorIT.java",
          "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-macros/xwiki-platform-rendering-macro-message/src/main/java/org/xwiki/rendering/internal/macro/message/MacroIconPrettyNameProvider.java||xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-macros/xwiki-platform-rendering-macro-message/src/main/java/org/xwiki/rendering/internal/macro/message/MacroIconPrettyNameProvider.java",
          "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/main/java/org/xwiki/rendering/internal/util/XWikiIconProvider.java||xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/main/java/org/xwiki/rendering/internal/util/XWikiIconProvider.java",
          "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/test/java/org/xwiki/rendering/internal/util/XWikiIconProviderTest.java||xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/test/java/org/xwiki/rendering/internal/util/XWikiIconProviderTest.java",
          "xwiki-platform-core/xwiki-platform-repository/xwiki-platform-repository-test/xwiki-platform-repository-test-pageobjects/src/main/java/org/xwiki/repository/test/po/ExtensionPage.java||xwiki-platform-core/xwiki-platform-repository/xwiki-platform-repository-test/xwiki-platform-repository-test-pageobjects/src/main/java/org/xwiki/repository/test/po/ExtensionPage.java",
          "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/LoginPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/LoginPage.java",
          "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java",
          "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/macros.vm||xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/macros.vm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java"
          ],
          "candidate": [
            "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java"
          ]
        }
      },
      "candidate_diff": {
        "xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-resources/src/main/resources/flamingo/less/messages.less||xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-resources/src/main/resources/flamingo/less/messages.less": [
          "File: xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-resources/src/main/resources/flamingo/less/messages.less -> xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-resources/src/main/resources/flamingo/less/messages.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: }",
          "11: .box, .plainmessage, // Used by: Code Macro, Success Macro, etc.",
          "",
          "[Removed Lines]",
          "5: .successmessage, .errormessage, .warningmessage, .infomessage,",
          "6: span.successmessage, span.errormessage, span.warningmessage, span.infomessage,",
          "7: span.box { // Used by: Inline boxes and messages",
          "8:   padding: floor(@font-size-base * 0.2);",
          "",
          "[Added Lines]",
          "6: span.successmessage, span.errormessage, span.warningmessage, span.infomessage {",
          "7:   border: none;",
          "8: }",
          "10: span.box, span.successmessage, span.errormessage, span.warningmessage, span.infomessage {",
          "11:   padding: 0 floor(@font-size-base * 0.2);",
          "12:   box-shadow: none;",
          "13:   & > img {",
          "15:     margin: 0 .6rem 0 .2rem;",
          "16:     vertical-align: sub;",
          "17:   }",
          "19:   & > span.fa {",
          "21:     margin: 0 .6rem 0 .2rem;",
          "22:   }",
          "23: }",
          "26: div.successmessage, div.errormessage, div.warningmessage, div.infomessage {",
          "27:   display: flex;",
          "28:   gap: 2rem;",
          "29:   justify-content: left;",
          "30:   align-items: baseline;",
          "31:   padding: 2rem;",
          "32:   border: none;",
          "33:   border-left: 4px solid;",
          "34:   box-shadow: none;",
          "36:   & > img {",
          "38:     align-self: flex-start;",
          "39:   }",
          "41:   & > div > .box-title,",
          "42:   & > div > .xwiki-metadata-container[data-xwiki-parameter-name=\"title\"] {",
          "43:     font-weight: bold;",
          "44:   }",
          "47:   & > div > p,",
          "48:   & > div > [data-cke-display-name=\"$content\"] {",
          "49:     margin: 0;",
          "50:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: .successmessage {",
          "29:   .alert-success;",
          "30: }",
          "32: .errormessage {",
          "33:   .alert-danger;",
          "34: }",
          "36: .warningmessage {",
          "37:   .alert-warning;",
          "38: }",
          "40: .infomessage {",
          "41:   .alert-info;",
          "42: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   background-color: @state-success-bg;",
          "73:   border-color: @brand-success;",
          "78:   background-color: @state-danger-bg;",
          "79:   border-color: @brand-danger;",
          "84:   background-color: @state-warning-bg;",
          "85:   border-color: @brand-warning;",
          "90:   background-color: @state-info-bg;",
          "91:   border-color: @brand-primary;",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-docker/src/test/it/org/xwiki/invitation/test/docker/InvitationIT.java||xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-docker/src/test/it/org/xwiki/invitation/test/docker/InvitationIT.java": [
          "File: xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-docker/src/test/it/org/xwiki/invitation/test/docker/InvitationIT.java -> xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-docker/src/test/it/org/xwiki/invitation/test/docker/InvitationIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:             assertMessageValid(messageB);",
          "219:             TableElement table = sent.getTable();",
          "220:             assertEquals(3, table.numberOfRows());",
          "221:             assertEquals(3, table.numberOfColumns());",
          "",
          "[Removed Lines]",
          "218:             assertTrue(sent.getMessageBoxContent().contains(\"Your message has been sent.\"));",
          "",
          "[Added Lines]",
          "218:             assertTrue(sent.getMessageBoxContent().contains(\"Information\\nYour message has been sent.\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:             getGreenMail().waitForIncomingEmail(2000, 2);",
          "300:             MimeMessage[] messages = getGreenMail().getReceivedMessages();",
          "301:             assertEquals(0, messages.length, \"Messages were received when they shouldn't have been sent!\");",
          "303:                 sent.getMessageBoxContent(),",
          "304:                 \"User was not shown the correct error message.\");",
          "305:             stopGreenMail();",
          "",
          "[Removed Lines]",
          "302:             assertEquals(\"Your message could not be sent because there were no valid email addresses to send to.\",",
          "",
          "[Added Lines]",
          "302:             assertEquals(\"Error\\nYour message could not be sent because there were no valid email addresses to send to.\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "321:             getGreenMail().waitForIncomingEmail(10000, 2);",
          "322:             messages = getGreenMail().getReceivedMessages();",
          "323:             assertEquals(2, messages.length, \"Non admins cannot send mail to even with permission\");",
          "325:                 \"User was not given the message that their mail was sent.\");",
          "326:         } finally {",
          "327:             stopGreenMail();",
          "",
          "[Removed Lines]",
          "324:             assertEquals(\"Your message has been sent.\", sent.getMessageBoxContent(),",
          "",
          "[Added Lines]",
          "324:             assertEquals(\"Information\\nYour message has been sent.\", sent.getMessageBoxContent(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "404:                 \"The message by the spam reporter is not shown to the admin.\");",
          "406:             String memo = \"Actually the email lottery is quite legitimate.\";",
          "409:             String successMessage = inspect.notSpam(\"Actually the email lottery is quite legitimate.\");",
          "",
          "[Removed Lines]",
          "407:             String expectedSuccessMessage = \"Invitation successfully marked as not spam. Log entry: \" + memo;",
          "",
          "[Added Lines]",
          "407:             String expectedSuccessMessage = \"Information\\nInvitation successfully marked as not spam. Log entry: \" + memo;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "634:                 confirm.getLabel().toLowerCase());",
          "636:             confirm.setMemo(\"Sorry, wrong email address.\");",
          "640:             setup.forceGuestUser();",
          "",
          "[Removed Lines]",
          "637:             assertEquals(\"Invitation successfully rescinded.\", confirm.confirm());",
          "",
          "[Added Lines]",
          "637:             assertEquals(\"Information\\nInvitation successfully rescinded.\", confirm.confirm());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "646:             InvitationGuestActionsPage guestPage =",
          "647:                 InvitationGuestActionsPage.gotoPage(htmlMessage, InvitationGuestActionsPage.Action.ACCEPT);",
          "648:             assertNotEquals(\"\", guestPage.getMessage(), \"Guest was able to accept a message which had been canceled.\");",
          "650:                 guestPage.getMessage());",
          "653:             guestPage = InvitationGuestActionsPage.gotoPage(htmlMessage, InvitationGuestActionsPage.Action.DECLINE);",
          "654:             assertNotEquals(\"\", guestPage.getMessage(), \"Guest was able to decline a message which had been canceled.\");",
          "656:                 guestPage.getMessage());",
          "",
          "[Removed Lines]",
          "649:             assertEquals(\"We're sorry but this invitation has been rescinded.\" + commonPart,",
          "655:             assertEquals(\"This invitation has been rescinded and thus cannot be declined.\" + commonPart,",
          "",
          "[Added Lines]",
          "649:             assertEquals(\"Error\\nWe're sorry but this invitation has been rescinded.\" + commonPart,",
          "655:             assertEquals(\"Error\\nThis invitation has been rescinded and thus cannot be declined.\" + commonPart,",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationFooterElement.java||xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationFooterElement.java": [
          "File: xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationFooterElement.java -> xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationFooterElement.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         }",
          "71:         String message = getDriver().findElementsWithoutWaiting(this.footer,",
          "72:             By.id(\"my-pending-invitations\")).get(0).getText().trim();",
          "74:     }",
          "76:     public int spamReports()",
          "",
          "[Removed Lines]",
          "73:         return Integer.parseInt(message.substring(0, message.indexOf(\" pending\")));",
          "",
          "[Added Lines]",
          "73:         return Integer.parseInt(message.substring(message.indexOf(\"\\n\") + 1, message.indexOf(\" pending\")));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:         }",
          "81:         String message = getDriver().findElementsWithoutWaiting(this.footer,",
          "82:             By.id(\"spam-reports\")).get(0).getText().trim();",
          "84:     }",
          "85: }",
          "",
          "[Removed Lines]",
          "83:         return Integer.parseInt(message.substring(0, message.indexOf(\" reported as spam\")));",
          "",
          "[Added Lines]",
          "83:         return Integer.parseInt(message.substring(message.indexOf(\"\\n\") + 1, message.indexOf(\" reported as spam\")));",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationSenderPage.java||xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationSenderPage.java": [
          "File: xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationSenderPage.java -> xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationSenderPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     {",
          "69:         for (WebElement error : getDriver().findElementsWithoutWaiting(By.id(\"invitation-permission-error\"))) {",
          "70:             if (error.getText().equals(",
          "72:                     + \" been suspended pending investigation, we apologize for the inconvenience.\")) {",
          "73:                 return true;",
          "74:             }",
          "",
          "[Removed Lines]",
          "71:                 \"A message which you sent was reported as spam and your privilege to send mail has\"",
          "",
          "[Added Lines]",
          "71:                 \"Error\\nA message which you sent was reported as spam and your privilege to send mail has\"",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-realtime/xwiki-platform-realtime-wysiwyg/xwiki-platform-realtime-wysiwyg-test/xwiki-platform-realtime-wysiwyg-test-docker/src/test/it/org/xwiki/realtime/wysiwyg/test/ui/RealtimeWYSIWYGEditorIT.java||xwiki-platform-core/xwiki-platform-realtime/xwiki-platform-realtime-wysiwyg/xwiki-platform-realtime-wysiwyg-test/xwiki-platform-realtime-wysiwyg-test-docker/src/test/it/org/xwiki/realtime/wysiwyg/test/ui/RealtimeWYSIWYGEditorIT.java": [
          "File: xwiki-platform-core/xwiki-platform-realtime/xwiki-platform-realtime-wysiwyg/xwiki-platform-realtime-wysiwyg-test/xwiki-platform-realtime-wysiwyg-test-docker/src/test/it/org/xwiki/realtime/wysiwyg/test/ui/RealtimeWYSIWYGEditorIT.java -> xwiki-platform-core/xwiki-platform-realtime/xwiki-platform-realtime-wysiwyg/xwiki-platform-realtime-wysiwyg-test/xwiki-platform-realtime-wysiwyg-test-docker/src/test/it/org/xwiki/realtime/wysiwyg/test/ui/RealtimeWYSIWYGEditorIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:         ViewPage viewPage = secondEditPage.clickSaveAndView();",
          "375:     }",
          "377:     @Test",
          "",
          "[Removed Lines]",
          "374:         assertEquals(\"my info message\\none two three\", viewPage.getContent());",
          "",
          "[Added Lines]",
          "374:         assertEquals(\"Information\\nmy info message\\none two three\", viewPage.getContent());",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-macros/xwiki-platform-rendering-macro-message/src/main/java/org/xwiki/rendering/internal/macro/message/MacroIconPrettyNameProvider.java||xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-macros/xwiki-platform-rendering-macro-message/src/main/java/org/xwiki/rendering/internal/macro/message/MacroIconPrettyNameProvider.java": [
          "File: xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-macros/xwiki-platform-rendering-macro-message/src/main/java/org/xwiki/rendering/internal/macro/message/MacroIconPrettyNameProvider.java -> xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-macros/xwiki-platform-rendering-macro-message/src/main/java/org/xwiki/rendering/internal/macro/message/MacroIconPrettyNameProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.xwiki.rendering.internal.macro.message;",
          "22: import org.xwiki.component.annotation.Component;",
          "23: import org.xwiki.localization.ContextualLocalizationManager;",
          "25: import javax.inject.Inject;",
          "26: import javax.inject.Singleton;",
          "34: @Component(roles = MacroIconPrettyNameProvider.class)",
          "35: @Singleton",
          "36: public class MacroIconPrettyNameProvider",
          "37: {",
          "38:     private static final String TRANSLATION_KEY_PREFIX = \"rendering.macro.message.icon.alternative.\";",
          "39:     @Inject",
          "40:     private ContextualLocalizationManager l10n;",
          "46:     public String getIconPrettyName(String macroId)",
          "47:     {",
          "48:         return l10n.getTranslationPlain(TRANSLATION_KEY_PREFIX + macroId);",
          "49:     }",
          "50: }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/main/java/org/xwiki/rendering/internal/util/XWikiIconProvider.java||xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/main/java/org/xwiki/rendering/internal/util/XWikiIconProvider.java": [
          "File: xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/main/java/org/xwiki/rendering/internal/util/XWikiIconProvider.java -> xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/main/java/org/xwiki/rendering/internal/util/XWikiIconProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.xwiki.rendering.internal.util;",
          "22: import javax.inject.Inject;",
          "23: import javax.inject.Singleton;",
          "24: import org.xwiki.component.annotation.Component;",
          "25: import org.xwiki.icon.IconException;",
          "26: import org.xwiki.icon.IconRenderer;",
          "27: import org.xwiki.icon.IconSet;",
          "28: import org.xwiki.icon.IconSetManager;",
          "29: import org.xwiki.rendering.block.Block;",
          "30: import org.xwiki.rendering.block.RawBlock;",
          "31: import org.xwiki.rendering.syntax.Syntax;",
          "39: @Component",
          "40: @Singleton",
          "41: public class XWikiIconProvider extends DefaultIconProvider",
          "42: {",
          "43:     @Inject",
          "44:     private IconSetManager iconSetManager;",
          "45:     @Inject",
          "46:     private IconRenderer iconRenderer;",
          "53:     @Override",
          "54:     public Block get(String iconName)",
          "55:     {",
          "56:         try {",
          "57:             IconSet iconSet = getIconSet(iconName);",
          "58:             String iconContent = this.iconRenderer.renderHTML(iconName, iconSet);",
          "59:             return new RawBlock(iconContent, Syntax.HTML_5_0);",
          "60:         } catch (IconException e) {",
          "61:             return super.get(iconName);",
          "62:         }",
          "63:     }",
          "65:     private IconSet getIconSet(String iconName) throws IconException",
          "66:     {",
          "67:         IconSet iconSet = this.iconSetManager.getCurrentIconSet();",
          "68:         if (iconSet == null || !iconSet.hasIcon(iconName)) {",
          "69:             iconSet = this.iconSetManager.getDefaultIconSet();",
          "70:         }",
          "71:         return iconSet;",
          "72:     }",
          "73: }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/test/java/org/xwiki/rendering/internal/util/XWikiIconProviderTest.java||xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/test/java/org/xwiki/rendering/internal/util/XWikiIconProviderTest.java": [
          "File: xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/test/java/org/xwiki/rendering/internal/util/XWikiIconProviderTest.java -> xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-xwiki/src/test/java/org/xwiki/rendering/internal/util/XWikiIconProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.xwiki.rendering.internal.util;",
          "22: import org.junit.jupiter.api.Test;",
          "23: import org.mockito.Mock;",
          "24: import org.xwiki.icon.Icon;",
          "25: import org.xwiki.icon.IconRenderer;",
          "26: import org.xwiki.icon.IconSet;",
          "27: import org.xwiki.icon.IconSetManager;",
          "28: import org.xwiki.localization.ContextualLocalizationManager;",
          "29: import org.xwiki.localization.Translation;",
          "30: import org.xwiki.rendering.block.*;",
          "31: import org.xwiki.test.junit5.mockito.ComponentTest;",
          "32: import org.xwiki.test.junit5.mockito.InjectMockComponents;",
          "33: import org.xwiki.test.junit5.mockito.MockComponent;",
          "35: import static org.junit.jupiter.api.Assertions.assertEquals;",
          "36: import static org.mockito.Mockito.when;",
          "43: @ComponentTest",
          "44: class XWikiIconProviderTest",
          "45: {",
          "46:     @InjectMockComponents",
          "47:     private XWikiIconProvider iconProvider;",
          "49:     @MockComponent",
          "50:     private IconSetManager iconSetManager;",
          "51:     @MockComponent",
          "52:     private IconRenderer iconRenderer;",
          "53:     @MockComponent",
          "54:     private ContextualLocalizationManager l10n;",
          "56:     @Mock",
          "57:     private Translation translationResult;",
          "59:     @Test",
          "60:     public void get() throws Exception {",
          "63:         IconSet currentIconSet = new IconSet(\"fontawesome\");",
          "64:         IconSet defaultIconSet = new IconSet(\"silk\");",
          "65:         currentIconSet.addIcon(\"test\", new Icon(\"hello\"));",
          "66:         when(iconSetManager.getCurrentIconSet()).thenReturn(currentIconSet);",
          "67:         when(iconSetManager.getDefaultIconSet()).thenReturn(defaultIconSet);",
          "70:         String testIconFA = \"<span class=\\\"fa fa-test\\\"aria-hidden=\\\"true\\\"></span>\";",
          "71:         String testIconSilk = \"<img src=\\\"$xwiki.getSkinFile(\\\"icons/silk/test.png\\\")\\\" alt=\\\"\\\" \" +",
          "72:          \"data-xwiki-lightbox=\\\"false\\\" />\";",
          "73:         when(this.iconRenderer.renderHTML(\"test\", currentIconSet)).thenReturn(testIconFA);",
          "74:         when(this.iconRenderer.renderHTML(\"test\", defaultIconSet)).thenReturn(testIconSilk);",
          "76:         Block translationRendered = new CompositeBlock();",
          "77:         translationRendered.addChild(new WordBlock(\"Test translation\"));",
          "78:         when(l10n.getTranslation(\"rendering.icon.provider.icon.alternative.test\")).thenReturn(translationResult);",
          "79:         when(translationResult.render()).thenReturn(translationRendered);",
          "82:         Block result = iconProvider.get(\"test\");",
          "84:         assertEquals(result.getClass(), RawBlock.class);",
          "86:         assertEquals(RawBlock.class, result.getClass());",
          "87:         assertEquals(testIconFA, ((RawBlock)result).getRawContent());",
          "88:     }",
          "90:     @Test",
          "91:     public void getNoTranslation() throws Exception {",
          "94:         IconSet currentIconSet = new IconSet(\"fontawesome\");",
          "95:         IconSet defaultIconSet = new IconSet(\"silk\");",
          "96:         currentIconSet.addIcon(\"test\", new Icon(\"hello\"));",
          "97:         when(iconSetManager.getCurrentIconSet()).thenReturn(currentIconSet);",
          "98:         when(iconSetManager.getDefaultIconSet()).thenReturn(defaultIconSet);",
          "101:         String testIconFA = \"<span class=\\\"fa fa-test\\\"aria-hidden=\\\"true\\\"></span>\";",
          "102:         String testIconSilk = \"<img src=\\\"$xwiki.getSkinFile(\\\"icons/silk/test.png\\\")\\\" alt=\\\"\\\" \" +",
          "103:                 \"data-xwiki-lightbox=\\\"false\\\" />\";",
          "104:         when(this.iconRenderer.renderHTML(\"test\", currentIconSet)).thenReturn(testIconFA);",
          "105:         when(this.iconRenderer.renderHTML(\"test\", defaultIconSet)).thenReturn(testIconSilk);",
          "107:         when(l10n.getTranslation(\"rendering.icon.provider.icon.alternative.test\")).thenReturn(null);",
          "110:         Block result = iconProvider.get(\"test\");",
          "111:     }",
          "113:     @Test",
          "114:     public void getDefaultIconsetFallback() throws Exception {",
          "117:         IconSet currentIconSet = new IconSet(\"fontawesome\");",
          "118:         IconSet defaultIconSet = new IconSet(\"silk\");",
          "119:         defaultIconSet.addIcon(\"test\", new Icon(\"hello\"));",
          "120:         when(iconSetManager.getCurrentIconSet()).thenReturn(currentIconSet);",
          "121:         when(iconSetManager.getDefaultIconSet()).thenReturn(defaultIconSet);",
          "124:         String testIconFA = \"<span class=\\\"fa fa-test\\\"aria-hidden=\\\"true\\\"></span>\";",
          "125:         String testIconSilk = \"<img src=\\\"$xwiki.getSkinFile(\\\"icons/silk/test.png\\\")\\\" alt=\\\"\\\" \" +",
          "126:                 \"data-xwiki-lightbox=\\\"false\\\" />\";",
          "127:         when(this.iconRenderer.renderHTML(\"test\", currentIconSet)).thenReturn(testIconFA);",
          "128:         when(this.iconRenderer.renderHTML(\"test\", defaultIconSet)).thenReturn(testIconSilk);",
          "130:         Block translationRendered = new CompositeBlock();",
          "131:         translationRendered.addChild(new WordBlock(\"Test translation\"));",
          "132:         when(l10n.getTranslation(\"rendering.icon.provider.icon.alternative.test\")).thenReturn(translationResult);",
          "133:         when(translationResult.render()).thenReturn(translationRendered);",
          "136:         Block result = iconProvider.get(\"test\");",
          "138:         assertEquals(testIconSilk, ((RawBlock)result).getRawContent());",
          "139:     }",
          "140: }",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-repository/xwiki-platform-repository-test/xwiki-platform-repository-test-pageobjects/src/main/java/org/xwiki/repository/test/po/ExtensionPage.java||xwiki-platform-core/xwiki-platform-repository/xwiki-platform-repository-test/xwiki-platform-repository-test-pageobjects/src/main/java/org/xwiki/repository/test/po/ExtensionPage.java": [
          "File: xwiki-platform-core/xwiki-platform-repository/xwiki-platform-repository-test/xwiki-platform-repository-test-pageobjects/src/main/java/org/xwiki/repository/test/po/ExtensionPage.java -> xwiki-platform-core/xwiki-platform-repository/xwiki-platform-repository-test/xwiki-platform-repository-test-pageobjects/src/main/java/org/xwiki/repository/test/po/ExtensionPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     public boolean isValidExtension()",
          "42:     {",
          "43:         List<WebElement> elements = getDriver().findElements(",
          "45:         return !elements.isEmpty();",
          "46:     }",
          "",
          "[Removed Lines]",
          "44:             By.xpath(\"//div[@class = 'box successmessage' and . = 'Installable with the Extension Manager']\"));",
          "",
          "[Added Lines]",
          "44:             By.xpath(\"//div[@class = 'box successmessage' and ./p[contains(., 'Installable with the Extension Manager')]]\"));",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/LoginPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/LoginPage.java": [
          "File: xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/LoginPage.java -> xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/LoginPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     public boolean hasInvalidCredentialsErrorMessage()",
          "86:     {",
          "88:     }",
          "",
          "[Removed Lines]",
          "87:         return getErrorMessages().contains(\"Error: Invalid credentials\");",
          "",
          "[Added Lines]",
          "87:         return getErrorMessages().contains(\"Error\\nInvalid credentials\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     public boolean hasCaptchaErrorMessage()",
          "94:     {",
          "96:     }",
          "",
          "[Removed Lines]",
          "95:         return getErrorMessages().contains(\"Error: Please fill the captcha form to login.\");",
          "",
          "[Added Lines]",
          "95:         return getErrorMessages().contains(\"Error\\nPlease fill the captcha form to login.\");",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java||xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java": [
          "File: xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java -> xwiki-platform-core/xwiki-platform-test/xwiki-platform-test-ui/src/main/java/org/xwiki/test/ui/po/RegistrationPage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:         List<WebElement> infos = getDriver().findElements(By.className(\"infomessage\"));",
          "65:         for (WebElement info : infos) {",
          "66:             if (info.getText().contains(\"Registration successful.\")) {",
          "68:             }",
          "69:         }",
          "",
          "[Removed Lines]",
          "67:                 return Optional.of(info.getText());",
          "",
          "[Added Lines]",
          "67:                 return Optional.of(info.getText().replaceAll(\"\\n\", \" \"));",
          "",
          "---------------"
        ],
        "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/macros.vm||xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/macros.vm": [
          "File: xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/macros.vm -> xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/macros.vm",
          "--- Hunk 1 ---",
          "[Context before]",
          "952: ###",
          "954: #macro(warning $text)",
          "956: #end",
          "958: #macro(error $text)",
          "960: #end",
          "962: #macro(info $text)",
          "964: #end",
          "966: #macro(message $text)",
          "",
          "[Removed Lines]",
          "955: <div class=\"warningmessage\"><span class=\"messagetype\">$services.localization.render('warning'): </span>$text</div>",
          "959: <div class=\"errormessage\"><span class=\"messagetype\">$services.localization.render('error'): </span>$text</div>",
          "963: <div class=\"infomessage\">$text</div>",
          "",
          "[Added Lines]",
          "955: <div class=\"box warningmessage\"><span class=\"messagetype\">$services.localization.render('warning'): </span>$text</div>",
          "959: <div class=\"box errormessage\"><span class=\"messagetype\">$services.localization.render('error'): </span>$text</div>",
          "963: <div class=\"box infomessage\">$text</div>",
          "",
          "---------------"
        ]
      }
    }
  ]
}