{
  "cve_id": "CVE-2024-29896",
  "cve_desc": "Astro-Shield is a library to compute the subresource integrity hashes for your JS scripts and CSS stylesheets. When automated CSP headers generation for SSR content is enabled and the web application serves content that can be partially controlled by external users, then it is possible that the CSP headers generation feature might be \"allow-listing\" malicious injected resources like inlined JS, or references to external malicious scripts. The fix is available in version 1.3.0.",
  "repo": "KindSpells/astro-shield",
  "patch_hash": "41b84576d37fa486a57005ea297658d0bc38566d",
  "patch_info": {
    "commit_hash": "41b84576d37fa486a57005ea297658d0bc38566d",
    "repo": "KindSpells/astro-shield",
    "commit_url": "https://github.com/KindSpells/astro-shield/commit/41b84576d37fa486a57005ea297658d0bc38566d",
    "files": [
      "README.md",
      "package.json",
      "src/core.mjs",
      "src/headers.mjs",
      "src/main.mjs",
      "tests/core.test.mts",
      "tests/headers.test.mts",
      "tests/main.test.mts",
      "vitest.config.unit.mts"
    ],
    "message": "feat: cross-origin resources allow-lists\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
    "before_after_code_files": [
      "src/core.mjs||src/core.mjs",
      "src/headers.mjs||src/headers.mjs",
      "src/main.mjs||src/main.mjs",
      "tests/core.test.mts||tests/core.test.mts",
      "tests/headers.test.mts||tests/headers.test.mts",
      "tests/main.test.mts||tests/main.test.mts",
      "vitest.config.unit.mts||vitest.config.unit.mts"
    ]
  },
  "patch_diff": {
    "src/core.mjs||src/core.mjs": [
      "File: src/core.mjs -> src/core.mjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: const scriptReplacer = (hash, attrs, setCrossorigin, content) =>",
      "54:   setCrossorigin ? ' crossorigin=\"anonymous\"' : ''",
      "55:  }>${content ?? ''}</script>`",
      "58: const styleReplacer = (hash, attrs, setCrossorigin, content) =>",
      "60:   setCrossorigin ? ' crossorigin=\"anonymous\"' : ''",
      "61:  }>${content ?? ''}</style>`",
      "64: const linkStyleReplacer = (hash, attrs, setCrossorigin) =>",
      "66:   setCrossorigin ? ' crossorigin=\"anonymous\"' : ''",
      "67:  }/>`",
      "",
      "[Removed Lines]",
      "53:  `<script${attrs} integrity=\"${hash}\"${",
      "59:  `<style${attrs} integrity=\"${hash}\"${",
      "65:  `<link${attrs} integrity=\"${hash}\"${",
      "",
      "[Added Lines]",
      "53:  `<script${attrs}${hash !== null ? ` integrity=\"${hash}\"` : ''}${",
      "59:  `<style${attrs}${hash !== null ? ` integrity=\"${hash}\"` : ''}${",
      "65:  `<link${attrs}${hash !== null ? ` integrity=\"${hash}\"` : ''}${",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "242:  logger,",
      "243:  content,",
      "244:  globalHashes,",
      "246: ) => {",
      "247:  const processors = getRegexProcessors()",
      "",
      "[Removed Lines]",
      "245:  sri",
      "",
      "[Added Lines]",
      "245:  sri,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "331:       if (sriHash) {",
      "332:        pageHashes[t2].add(sriHash)",
      "333:       } else {",
      "340:       }",
      "341:      } else {",
      "342:       logger.warn(`Unable to process external resource: \"${src}\"`)",
      "",
      "[Removed Lines]",
      "334:        const resourceResponse = await fetch(src, { method: 'GET' })",
      "335:        const resourceContent = await resourceResponse.arrayBuffer()",
      "337:        sriHash = generateSRIHash(resourceContent)",
      "338:        globalHashes[t2].set(src, sriHash)",
      "339:        pageHashes[t2].add(sriHash)",
      "",
      "[Added Lines]",
      "334:        logger.warn(",
      "335:         `Detected reference to not-allow-listed external resource \"${src}\"`,",
      "336:        )",
      "337:        if (setCrossorigin) {",
      "338:         updatedContent = updatedContent.replace(",
      "339:          match[0],",
      "340:          replacer(null, attrs, true, ''),",
      "341:         )",
      "342:        }",
      "343:        continue",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "517:  )",
      "518: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "535: export const scanAllowLists = async (sri, h) => {",
      "536:  for (const scriptUrl of sri.scriptsAllowListUrls) {",
      "537:   const resourceResponse = await fetch(scriptUrl, { method: 'GET' })",
      "538:   const resourceContent = await resourceResponse.arrayBuffer()",
      "539:   const sriHash = generateSRIHash(resourceContent)",
      "541:   h.extScriptHashes.add(sriHash)",
      "542:   h.perResourceSriHashes.scripts.set(scriptUrl, sriHash)",
      "543:  }",
      "545:  for (const styleUrl of sri.stylesAllowListUrls) {",
      "546:   const resourceResponse = await fetch(styleUrl, { method: 'GET' })",
      "547:   const resourceContent = await resourceResponse.arrayBuffer()",
      "548:   const sriHash = generateSRIHash(resourceContent)",
      "550:   h.extStyleHashes.add(sriHash)",
      "551:   h.perResourceSriHashes.styles.set(styleUrl, sriHash)",
      "552:  }",
      "553: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "673: }",
      "681:  return async (_ctx, next) => {",
      "682:   const response = await next()",
      "683:   const content = await response.text()",
      "685:   const { updatedContent } = await updateDynamicPageSriHashes(",
      "687:    content,",
      "688:    globalHashes,",
      "689:   )",
      "691:   const patchedResponse = new Response(updatedContent, {",
      "",
      "[Removed Lines]",
      "679: export const getMiddlewareHandler = globalHashes => {",
      "686:    console,",
      "",
      "[Added Lines]",
      "716: export const getMiddlewareHandler = (logger, globalHashes, sri) => {",
      "723:    logger,",
      "726:    sri,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "709:  return async (_ctx, next) => {",
      "710:   const response = await next()",
      "711:   const content = await response.text()",
      "713:   const { updatedContent, pageHashes } = await updateDynamicPageSriHashes(",
      "715:    content,",
      "716:    globalHashes,",
      "717:   )",
      "719:   const patchedResponse = new Response(updatedContent, {",
      "",
      "[Removed Lines]",
      "707: export const getCSPMiddlewareHandler = (globalHashes, securityHeadersOpts) => {",
      "714:    console,",
      "",
      "[Added Lines]",
      "747: export const getCSPMiddlewareHandler = (",
      "748:  logger,",
      "749:  globalHashes,",
      "750:  securityHeadersOpts,",
      "751:  sri,",
      "752: ) => {",
      "759:    logger,",
      "762:    sri,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "766:   await scanForNestedResources(logger, publicDir, h)",
      "767:   await generateSRIHashesModule(",
      "768:    logger,",
      "769:    h,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "813:   await scanAllowLists(sri, h)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "822:  return defineMiddleware(${",
      "823:   securityHeadersOptions !== undefined",
      "825:      securityHeadersOptions,",
      "828:  })",
      "829: })()",
      "830: `",
      "",
      "[Removed Lines]",
      "824:    ? `getCSPMiddlewareHandler(globalHashes, ${JSON.stringify(",
      "826:     )})`",
      "827:    : 'getMiddlewareHandler(globalHashes)'",
      "",
      "[Added Lines]",
      "871:    ? `getCSPMiddlewareHandler(console, globalHashes, ${JSON.stringify(",
      "873:     )}, ${JSON.stringify(sri)})`",
      "874:    : `getMiddlewareHandler(console, globalHashes, ${JSON.stringify(sri)})`",
      "",
      "---------------"
    ],
    "src/headers.mjs||src/headers.mjs": [
      "File: src/headers.mjs -> src/headers.mjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "97:  if (pageHashes.scripts.size > 0) {",
      "98:   setSrcDirective(directives, 'script-src', pageHashes.scripts)",
      "99:  }",
      "100:  if (pageHashes.styles.size > 0) {",
      "101:   setSrcDirective(directives, 'style-src', pageHashes.styles)",
      "102:  }",
      "103:  if (Object.keys(directives).length > 0) {",
      "104:   plainHeaders['content-security-policy'] = serialiseCspDirectives(directives)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99:  } else {",
      "100:   directives['script-src'] = \"'none'\"",
      "104:  } else {",
      "105:   directives['style-src'] = \"'none'\"",
      "",
      "---------------"
    ],
    "src/main.mjs||src/main.mjs": [
      "File: src/main.mjs -> src/main.mjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "78:  return /** @satisfies {AstroIntegration} */ {",
      "79:   name: '@kindspells/astro-shield',",
      "80:   hooks: {",
      "82:     ? {",
      "83:       'astro:build:done': getAstroBuildDone(_sri),",
      "84:      }",
      "85:     : undefined),",
      "87:     ? {",
      "88:       'astro:config:setup': getAstroConfigSetup(_sri, securityHeaders),",
      "89:      }",
      "",
      "[Removed Lines]",
      "81:    ...((enableStatic_SRI ?? true) === true",
      "86:    ...(enableMiddleware_SRI === true",
      "",
      "[Added Lines]",
      "81:    ...(_sri.enableStatic === true",
      "86:    ...(_sri.enableMiddleware === true",
      "",
      "---------------"
    ],
    "tests/core.test.mts||tests/core.test.mts": [
      "File: tests/core.test.mts -> tests/core.test.mts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: import { resolve } from 'node:path'",
      "8: import { readdir, rm } from 'node:fs/promises'",
      "11: import {",
      "12:  arraysEqual,",
      "13:  generateSRIHash,",
      "14:  generateSRIHashesModule,",
      "15:  pageHashesEqual,",
      "16:  scanForNestedResources,",
      "17:  sriHashesEqual,",
      "18:  updateDynamicPageSriHashes,",
      "",
      "[Removed Lines]",
      "10: import { beforeEach, describe, expect, it } from 'vitest'",
      "",
      "[Added Lines]",
      "10: import { assert, beforeEach, describe, expect, it } from 'vitest'",
      "15:  getCSPMiddlewareHandler,",
      "16:  getMiddlewareHandler,",
      "18:  scanAllowLists,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "362:     <title>My Test Page</title>",
      "363:    </head>",
      "364:    <body>",
      "366:    </body>",
      "367:   </html>`",
      "",
      "[Removed Lines]",
      "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-vSvqa4zN5DZN/gOtz1s6Xuw0MUYNKQXvUPL8pXWgHGo=\"></script>",
      "",
      "[Added Lines]",
      "368:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-Xbdu1jxIAqCjb78wAdgir+Swc5faxBuLHPm0DC/lG80=\"></script>",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "379:   expect(h.extScriptHashes.size).toBe(1)",
      "380:   expect(",
      "381:    h.extScriptHashes.has(",
      "383:    ),",
      "384:   ).toBe(true)",
      "385:   expect(h.inlineScriptHashes.size).toBe(0)",
      "",
      "[Removed Lines]",
      "382:     'sha256-vSvqa4zN5DZN/gOtz1s6Xuw0MUYNKQXvUPL8pXWgHGo=',",
      "",
      "[Added Lines]",
      "385:     'sha256-Xbdu1jxIAqCjb78wAdgir+Swc5faxBuLHPm0DC/lG80=',",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "656:   expect(pageHashes.styles.size).toBe(0)",
      "657:  })",
      "660:   const remoteScript =",
      "661:    'https://raw.githubusercontent.com/KindSpells/astro-shield/ae9521048f2129f633c075b7f7ef24e11bbd1884/main.mjs'",
      "662:   const content = `<html>",
      "",
      "[Removed Lines]",
      "659:  it('adds sri hash to external script (cross origin)', async () => {",
      "",
      "[Added Lines]",
      "662:  it('avoids adding sri hash to external script when not allow-listed (cross origin)', async () => {",
      "663:   const remoteScript =",
      "664:    'https://raw.githubusercontent.com/KindSpells/astro-shield/ae9521048f2129f633c075b7f7ef24e11bbd1884/main.mjs'",
      "665:   const content = `<html>",
      "666:    <head>",
      "667:     <title>My Test Page</title>",
      "668:    </head>",
      "669:    <body>",
      "670:     <script type=\"module\" src=\"${remoteScript}\"></script>",
      "671:    </body>",
      "672:   </html>`",
      "674:   const expected = `<html>",
      "675:    <head>",
      "676:     <title>My Test Page</title>",
      "677:    </head>",
      "678:    <body>",
      "679:     <script type=\"module\" src=\"${remoteScript}\" crossorigin=\"anonymous\"></script>",
      "680:    </body>",
      "681:   </html>`",
      "683:   const h = getMiddlewareHashes()",
      "684:   let warnCounter = 0",
      "685:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
      "686:    {",
      "687:     info: () => {},",
      "688:     warn: () => {",
      "689:      warnCounter += 1",
      "690:     },",
      "691:     error: () => {},",
      "692:    },",
      "693:    content,",
      "694:    h,",
      "695:   )",
      "697:   expect(warnCounter).toBe(1)",
      "698:   expect(updatedContent).toEqual(expected)",
      "699:   expect(h.scripts.size).toBe(0)",
      "700:   expect(h.styles.size).toBe(0)",
      "701:   expect(h.scripts.get(remoteScript)).toBeUndefined()",
      "702:   expect(pageHashes.scripts.size).toBe(0)",
      "703:   expect(",
      "704:    pageHashes.scripts.has(",
      "705:     'sha256-i4WR4ifasidZIuS67Rr6Knsy7/hK1xbVTc8ZAmnAv1Q=',",
      "706:    ),",
      "707:   ).toBe(false)",
      "708:   expect(pageHashes.styles.size).toBe(0)",
      "709:  })",
      "711:  it('adds sri hash to external script when allow-listed (cross origin)', async () => {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "678:   </html>`",
      "680:   const h = getMiddlewareHashes()",
      "681:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
      "682:    console,",
      "683:    content,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "733:   h.scripts.set(",
      "734:    remoteScript,",
      "735:    'sha256-i4WR4ifasidZIuS67Rr6Knsy7/hK1xbVTc8ZAmnAv1Q=',",
      "736:   )",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "779:   let warnCalls = 0",
      "780:   const testLogger = {",
      "785:     warnCalls += 1",
      "790:    },",
      "791:   }",
      "793:   const h = getMiddlewareHashes()",
      "",
      "[Removed Lines]",
      "781:    info(msg: string) {",
      "782:     return console.info(msg)",
      "783:    },",
      "784:    warn(msg: string) {",
      "786:     return console.warn(msg)",
      "787:    },",
      "788:    error(msg: string) {",
      "789:     return console.error(msg)",
      "",
      "[Added Lines]",
      "837:    info(_msg: string) {},",
      "838:    warn(_msg: string) {",
      "841:    error(_msg: string) {},",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "846:  })",
      "847: })",
      "849: describe('scanForNestedResources', () => {",
      "850:  it('populates our hashes collection with hashes from nested resources', async () => {",
      "851:   const h = getEmptyHashes()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "900: describe('scanAllowLists', () => {",
      "901:  it('populates hashes collection with hashes from allow-listed resources', async () => {",
      "902:   const scriptUrl =",
      "903:    'https://raw.githubusercontent.com/KindSpells/astro-shield/ae9521048f2129f633c075b7f7ef24e11bbd1884/main.mjs'",
      "904:   const styleUrl =",
      "905:    'https://raw.githubusercontent.com/KindSpells/astro-shield/26fdf5399d79baa3a8ea70ded526116b0bfc06ed/e2e/fixtures/hybrid2/src/styles/normalize.css'",
      "907:   const h = getEmptyHashes()",
      "908:   await scanAllowLists(",
      "909:    {",
      "910:     scriptsAllowListUrls: [scriptUrl],",
      "911:     stylesAllowListUrls: [styleUrl],",
      "912:    },",
      "913:    h,",
      "914:   )",
      "916:   expect(h.extScriptHashes.size).toBe(1)",
      "917:   expect(h.extStyleHashes.size).toBe(1)",
      "918:   expect(h.perResourceSriHashes.scripts.get(scriptUrl)).toBe(",
      "919:    'sha256-i4WR4ifasidZIuS67Rr6Knsy7/hK1xbVTc8ZAmnAv1Q=',",
      "920:   )",
      "921:   expect(h.perResourceSriHashes.styles.get(styleUrl)).toBe(",
      "922:    'sha256-7o69ZgSUx++S5DC0Ek7X2CbY4GnxxUkwGZDdybWxSG8=',",
      "923:   )",
      "924:  })",
      "925: })",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "901:   expect(hashesModule).toHaveProperty('perResourceSriHashes')",
      "902:  })",
      "903: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "983: describe('getMiddlewareHandler', () => {",
      "984:  it('returns a working middleware handler', async () => {",
      "985:   const hashes = {",
      "986:    scripts: new Map<string, string>(),",
      "987:    styles: new Map<string, string>(),",
      "988:   }",
      "989:   let warnCounter = 0",
      "990:   const middleware = getMiddlewareHandler(",
      "991:    {",
      "992:     info: () => {},",
      "993:     warn: () => {",
      "994:      warnCounter += 1",
      "995:     },",
      "996:     error: () => {},",
      "997:    },",
      "998:    hashes,",
      "999:    {",
      "1000:     enableStatic: true,",
      "1001:     enableMiddleware: true,",
      "1002:     hashesModule: undefined,",
      "1003:     allowInlineScripts: 'all',",
      "1004:     allowInlineStyles: 'all',",
      "1005:     scriptsAllowListUrls: [],",
      "1006:     stylesAllowListUrls: [],",
      "1007:    },",
      "1008:   )",
      "1009:   type MidParams = Parameters<typeof middleware>",
      "1011:   const patchedResponse = await middleware(",
      "1012:    undefined as unknown as MidParams[0],",
      "1013:    (async () => {",
      "1014:     return {",
      "1015:      text: async () => `",
      "1016: <html>",
      "1017:  <head>",
      "1018:   <title>My Test Page</title>",
      "1019:  </head>",
      "1020:  <body>",
      "1021:   <script>console.log(\"Hello World!\")</script>",
      "1022:  </body>",
      "1023: </html>`,",
      "1024:      status: 200,",
      "1025:      statusText: 'OK',",
      "1026:      headers: new Headers(),",
      "1027:     }",
      "1028:    }) as MidParams[1],",
      "1029:   )",
      "1031:   expect(warnCounter).toBe(0)",
      "1032:   assert(patchedResponse instanceof Response)",
      "1033:   const responseText = await patchedResponse.text()",
      "1034:   expect(responseText).toBe(`",
      "1035: <html>",
      "1036:  <head>",
      "1037:   <title>My Test Page</title>",
      "1038:  </head>",
      "1039:  <body>",
      "1040:   <script integrity=\"sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=\">console.log(\"Hello World!\")</script>",
      "1041:  </body>",
      "1042: </html>`)",
      "1043:  })",
      "1045:  it('protects from validating disallowed inline scripts', async () => {",
      "1046:   const hashes = {",
      "1047:    scripts: new Map<string, string>(),",
      "1048:    styles: new Map<string, string>(),",
      "1049:   }",
      "1051:   let warnCounter = 0",
      "1052:   const middleware = getMiddlewareHandler(",
      "1053:    {",
      "1054:     info: () => {},",
      "1055:     warn: () => {",
      "1056:      warnCounter += 1",
      "1057:     },",
      "1058:     error: () => {},",
      "1059:    },",
      "1060:    hashes,",
      "1061:    {",
      "1062:     enableStatic: true,",
      "1063:     enableMiddleware: true,",
      "1064:     hashesModule: undefined,",
      "1065:     allowInlineScripts: 'static',",
      "1066:     allowInlineStyles: 'static',",
      "1067:     scriptsAllowListUrls: [],",
      "1068:     stylesAllowListUrls: [],",
      "1069:    },",
      "1070:   )",
      "1071:   type MidParams = Parameters<typeof middleware>",
      "1073:   const patchedResponse = await middleware(",
      "1074:    undefined as unknown as MidParams[0],",
      "1075:    (async () => {",
      "1076:     return {",
      "1077:      text: async () => `",
      "1078: <html>",
      "1079:  <head>",
      "1080:   <title>My Test Page</title>",
      "1081:  </head>",
      "1082:  <body>",
      "1083:   <script>console.log(\"Hello World!\")</script>",
      "1084:  </body>",
      "1085: </html>`,",
      "1086:      status: 200,",
      "1087:      statusText: 'OK',",
      "1088:      headers: new Headers(),",
      "1089:     }",
      "1090:    }) as MidParams[1],",
      "1091:   )",
      "1093:   expect(warnCounter).toBe(1)",
      "1094:   assert(patchedResponse instanceof Response)",
      "1095:   const responseText = await patchedResponse.text()",
      "1096:   expect(patchedResponse.headers.has('content-security-policy')).toBe(false)",
      "1097:   expect(responseText).toBe(`",
      "1098: <html>",
      "1099:  <head>",
      "1100:   <title>My Test Page</title>",
      "1101:  </head>",
      "1102:  <body>",
      "1103:   <script>console.log(\"Hello World!\")</script>",
      "1104:  </body>",
      "1105: </html>`)",
      "1106:  })",
      "1107: })",
      "1109: describe('getCSPMiddlewareHandler', () => {",
      "1110:  it('returns a working middleware handler', async () => {",
      "1111:   const hashes = {",
      "1112:    scripts: new Map<string, string>(),",
      "1113:    styles: new Map<string, string>(),",
      "1114:   }",
      "1115:   let warnCounter = 0",
      "1116:   const middleware = getCSPMiddlewareHandler(",
      "1117:    {",
      "1118:     info: () => {},",
      "1119:     warn: () => {",
      "1120:      warnCounter += 1",
      "1121:     },",
      "1122:     error: () => {},",
      "1123:    },",
      "1124:    hashes,",
      "1125:    {",
      "1126:     contentSecurityPolicy: {},",
      "1127:    },",
      "1128:    {",
      "1129:     enableStatic: true,",
      "1130:     enableMiddleware: true,",
      "1131:     hashesModule: undefined,",
      "1132:     allowInlineScripts: 'all',",
      "1133:     allowInlineStyles: 'all',",
      "1134:     scriptsAllowListUrls: [],",
      "1135:     stylesAllowListUrls: [],",
      "1136:    },",
      "1137:   )",
      "1138:   type MidParams = Parameters<typeof middleware>",
      "1140:   const patchedResponse = await middleware(",
      "1141:    undefined as unknown as MidParams[0],",
      "1142:    (async () => {",
      "1143:     return {",
      "1144:      text: async () => `",
      "1145: <html>",
      "1146:  <head>",
      "1147:   <title>My Test Page</title>",
      "1148:  </head>",
      "1149:  <body>",
      "1150:   <script>console.log(\"Hello World!\")</script>",
      "1151:  </body>",
      "1152: </html>`,",
      "1153:      status: 200,",
      "1154:      statusText: 'OK',",
      "1155:      headers: new Headers(),",
      "1156:     }",
      "1157:    }) as MidParams[1],",
      "1158:   )",
      "1160:   expect(warnCounter).toBe(0)",
      "1161:   assert(patchedResponse instanceof Response)",
      "1162:   expect(patchedResponse.headers.has('content-security-policy')).toBe(true)",
      "1163:   expect(patchedResponse.headers.get('content-security-policy')).toBe(",
      "1164:    `script-src 'self' 'sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q='; style-src 'none'`,",
      "1165:   )",
      "1166:   const responseText = await patchedResponse.text()",
      "1167:   expect(responseText).toBe(`",
      "1168: <html>",
      "1169:  <head>",
      "1170:   <title>My Test Page</title>",
      "1171:  </head>",
      "1172:  <body>",
      "1173:   <script integrity=\"sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=\">console.log(\"Hello World!\")</script>",
      "1174:  </body>",
      "1175: </html>`)",
      "1176:  })",
      "1178:  it('protects from validating disallowed inline scripts', async () => {",
      "1179:   const hashes = {",
      "1180:    scripts: new Map<string, string>(),",
      "1181:    styles: new Map<string, string>(),",
      "1182:   }",
      "1184:   let warnCounter = 0",
      "1185:   const middleware = getCSPMiddlewareHandler(",
      "1186:    {",
      "1187:     info: () => {},",
      "1188:     warn: () => {",
      "1189:      warnCounter += 1",
      "1190:     },",
      "1191:     error: () => {},",
      "1192:    },",
      "1193:    hashes,",
      "1194:    { contentSecurityPolicy: {} },",
      "1195:    {",
      "1196:     enableStatic: true,",
      "1197:     enableMiddleware: true,",
      "1198:     hashesModule: undefined,",
      "1199:     allowInlineScripts: 'static',",
      "1200:     allowInlineStyles: 'static',",
      "1201:     scriptsAllowListUrls: [],",
      "1202:     stylesAllowListUrls: [],",
      "1203:    },",
      "1204:   )",
      "1205:   type MidParams = Parameters<typeof middleware>",
      "1207:   const patchedResponse = await middleware(",
      "1208:    undefined as unknown as MidParams[0],",
      "1209:    (async () => {",
      "1210:     return {",
      "1211:      text: async () => `",
      "1212: <html>",
      "1213:  <head>",
      "1214:   <title>My Test Page</title>",
      "1215:  </head>",
      "1216:  <body>",
      "1217:   <script>console.log(\"Hello World!\")</script>",
      "1218:  </body>",
      "1219: </html>`,",
      "1220:      status: 200,",
      "1221:      statusText: 'OK',",
      "1222:      headers: new Headers(),",
      "1223:     }",
      "1224:    }) as MidParams[1],",
      "1225:   )",
      "1227:   expect(warnCounter).toBe(1)",
      "1228:   assert(patchedResponse instanceof Response)",
      "1229:   const responseText = await patchedResponse.text()",
      "1230:   expect(patchedResponse.headers.has('content-security-policy')).toBe(true)",
      "1231:   expect(responseText).toBe(`",
      "1232: <html>",
      "1233:  <head>",
      "1234:   <title>My Test Page</title>",
      "1235:  </head>",
      "1236:  <body>",
      "1237:   <script>console.log(\"Hello World!\")</script>",
      "1238:  </body>",
      "1239: </html>`)",
      "1240:  })",
      "1241: })",
      "",
      "---------------"
    ],
    "tests/headers.test.mts||tests/headers.test.mts": [
      "File: tests/headers.test.mts -> tests/headers.test.mts",
      "--- Hunk 1 ---",
      "[Context before]",
      "155:   const patchedHeaders = patchHeaders(headers, pageHashes, settings)",
      "156:   expect(patchedHeaders.get('content-security-policy')).toBe(",
      "158:   )",
      "159:  })",
      "",
      "[Removed Lines]",
      "157:    \"form-action 'self'; frame-ancestors 'none'\",",
      "",
      "[Added Lines]",
      "157:    \"form-action 'self'; frame-ancestors 'none'; script-src 'none'; style-src 'none'\",",
      "",
      "---------------"
    ],
    "tests/main.test.mts||tests/main.test.mts": [
      "File: tests/main.test.mts -> tests/main.test.mts",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:  })",
      "38:  it('returns a valid AstroIntegration object for almost-default config', () => {",
      "40:   checkIntegration(integration)",
      "41:  })",
      "43:  it('returns an \"empty\" integration when we disable all features', () => {",
      "45:   checkIntegration(integration, [])",
      "46:  })",
      "48:  it('returns hooks for static & dynamic content when we enable middleware', () => {",
      "50:   checkIntegration(integration, ['astro:build:done', 'astro:config:setup'])",
      "51:  })",
      "",
      "[Removed Lines]",
      "39:   const integration = shield({ enableStatic_SRI: true })",
      "44:   const integration = shield({ enableStatic_SRI: false })",
      "49:   const integration = shield({ enableMiddleware_SRI: true })",
      "",
      "[Added Lines]",
      "39:   const integration = shield({ sri: { enableStatic: true } })",
      "44:   const integration = shield({ sri: { enableStatic: false } })",
      "49:   const integration = shield({ sri: { enableMiddleware: true } })",
      "",
      "---------------"
    ],
    "vitest.config.unit.mts||vitest.config.unit.mts": [
      "File: vitest.config.unit.mts -> vitest.config.unit.mts",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:     'coverage-unit/**/*',",
      "20:    ],",
      "21:    thresholds: {",
      "26:    },",
      "27:    reportsDirectory: 'coverage-unit',",
      "28:   },",
      "",
      "[Removed Lines]",
      "22:     statements: 72.0,",
      "23:     branches: 76.0,",
      "24:     functions: 80.0,",
      "25:     lines: 72.0,",
      "",
      "[Added Lines]",
      "22:     statements: 77.0,",
      "23:     branches: 77.0,",
      "24:     functions: 87.0,",
      "25:     lines: 77.0,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9252be67c7bea4c963f43fe549a21d2fa954fa24",
      "candidate_info": {
        "commit_hash": "9252be67c7bea4c963f43fe549a21d2fa954fa24",
        "repo": "KindSpells/astro-shield",
        "commit_url": "https://github.com/KindSpells/astro-shield/commit/9252be67c7bea4c963f43fe549a21d2fa954fa24",
        "files": [
          "README.md",
          "src/core.mjs",
          "src/headers.mjs",
          "src/main.d.ts",
          "src/main.mjs",
          "tests/core.test.mts",
          "tests/headers.test.mts",
          "vitest.config.unit.mts"
        ],
        "message": "feat: soft-deprecate sparse sri options\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
        "before_after_code_files": [
          "src/core.mjs||src/core.mjs",
          "src/headers.mjs||src/headers.mjs",
          "src/main.d.ts||src/main.d.ts",
          "src/main.mjs||src/main.mjs",
          "tests/core.test.mts||tests/core.test.mts",
          "tests/headers.test.mts||tests/headers.test.mts",
          "vitest.config.unit.mts||vitest.config.unit.mts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/kindspells/astro-shield/pull/45"
        ],
        "olp_code_files": {
          "patch": [
            "src/core.mjs||src/core.mjs",
            "src/headers.mjs||src/headers.mjs",
            "src/main.mjs||src/main.mjs",
            "tests/core.test.mts||tests/core.test.mts",
            "tests/headers.test.mts||tests/headers.test.mts",
            "vitest.config.unit.mts||vitest.config.unit.mts"
          ],
          "candidate": [
            "src/core.mjs||src/core.mjs",
            "src/headers.mjs||src/headers.mjs",
            "src/main.mjs||src/main.mjs",
            "tests/core.test.mts||tests/core.test.mts",
            "tests/headers.test.mts||tests/headers.test.mts",
            "vitest.config.unit.mts||vitest.config.unit.mts"
          ]
        }
      },
      "candidate_diff": {
        "src/core.mjs||src/core.mjs": [
          "File: src/core.mjs -> src/core.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:  const h = /** @satisfies {HashesCollection} */ {",
          "615:   inlineScriptHashes: new Set(),",
          "616:   inlineStyleHashes: new Set(),",
          "",
          "[Removed Lines]",
          "610: export const processStaticFiles = async (",
          "611:  logger,",
          "612:  { distDir, sriHashesModule, enableMiddleware_SRI },",
          "613: ) => {",
          "",
          "[Added Lines]",
          "611: export const processStaticFiles = async (logger, { distDir, sri }) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "634:  await scanForNestedResources(logger, distDir, h)",
          "637:   return",
          "638:  }",
          "640:  await generateSRIHashesModule(",
          "641:   logger,",
          "642:   h,",
          "645:  )",
          "646: }",
          "",
          "[Removed Lines]",
          "636:  if (!sriHashesModule) {",
          "643:   sriHashesModule,",
          "644:   enableMiddleware_SRI,",
          "",
          "[Added Lines]",
          "634:  if (!sri.hashesModule) {",
          "641:   sri.hashesModule,",
          "642:   sri.enableMiddleware,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "846: }",
          "861:  return async ({ logger, addMiddleware, config, updateConfig }) => {",
          "862:   const publicDir = fileURLToPath(config.publicDir)",
          "863:   const plugin = getViteMiddlewarePlugin(",
          "864:    logger,",
          "867:    securityHeaders,",
          "868:    publicDir,",
          "869:   )",
          "",
          "[Removed Lines]",
          "855: export const getAstroConfigSetup = (",
          "856:  enableStatic_SRI,",
          "857:  sriHashesModule,",
          "858:  securityHeaders,",
          "859: ) => {",
          "865:    enableStatic_SRI,",
          "866:    sriHashesModule,",
          "",
          "[Added Lines]",
          "851: export const getAstroConfigSetup = (sri, securityHeaders) => {",
          "857:    sri.enableStatic ?? true,",
          "858:    sri.hashesModule,",
          "",
          "---------------"
        ],
        "src/headers.mjs||src/headers.mjs": [
          "File: src/headers.mjs -> src/headers.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:  const plainHeaders = Object.fromEntries(headers.entries())",
          "117:  if (securityHeadersOpts.contentSecurityPolicy !== undefined) {",
          "119:  }",
          "121:  return new Headers(plainHeaders)",
          "",
          "[Removed Lines]",
          "118:   patchCspHeader(plainHeaders, pageHashes, securityHeadersOpts.contentSecurityPolicy)",
          "",
          "[Added Lines]",
          "118:   patchCspHeader(",
          "119:    plainHeaders,",
          "120:    pageHashes,",
          "121:    securityHeadersOpts.contentSecurityPolicy,",
          "122:   )",
          "",
          "---------------"
        ],
        "src/main.d.ts||src/main.d.ts": [
          "File: src/main.d.ts -> src/main.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:  cspDirectives?: CSPDirectives",
          "57: }",
          "",
          "[Removed Lines]",
          "59: export type SecurityHeadersOptions = {",
          "67:  contentSecurityPolicy?: CSPOptions | undefined",
          "68: }",
          "70: export type ShieldOptions = {",
          "77:  enableStatic_SRI?: boolean | undefined",
          "",
          "[Added Lines]",
          "59: export type SRIOptions = {",
          "66:  enableStatic?: boolean",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "87:  enableMiddleware_SRI?: boolean | undefined",
          "",
          "[Added Lines]",
          "76:  enableMiddleware?: boolean",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "96:  sriHashesModule?: string | undefined",
          "",
          "[Added Lines]",
          "85:  hashesModule?: string | undefined",
          "86: }",
          "88: export type SecurityHeadersOptions = {",
          "96:  contentSecurityPolicy?: CSPOptions | undefined",
          "97: }",
          "99: export type ShieldOptions = {",
          "103:  sri?: SRIOptions | undefined",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:  securityHeaders?: SecurityHeadersOptions | undefined",
          "106: }",
          "107: export type StrictShieldOptions = ShieldOptions & {",
          "108:  distDir: string",
          "110: }",
          "",
          "[Removed Lines]",
          "109:  enableMiddleware_SRI: boolean",
          "",
          "[Added Lines]",
          "115:  enableStatic_SRI?: boolean | undefined",
          "118:  enableMiddleware_SRI?: boolean | undefined",
          "121:  sriHashesModule?: string | undefined",
          "125:  sri: SRIOptions & { enableStatic: boolean; enableMiddleware: boolean }",
          "",
          "---------------"
        ],
        "src/main.mjs||src/main.mjs": [
          "File: src/main.mjs -> src/main.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: export const shield = ({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: const getAstroBuildDone =",
          "23:  sri =>",
          "25:  async ({ dir, logger }) =>",
          "26:   await processStaticFiles(logger, {",
          "27:    distDir: fileURLToPath(dir),",
          "28:    sri,",
          "29:   })",
          "32: const logWarn = msg =>",
          "33:  console.warn(`\\nWARNING (@kindspells/astro-shield):\\n\\t${msg}\\n`)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  enableStatic_SRI,",
          "25:  sriHashesModule,",
          "26:  securityHeaders,",
          "27: }) => {",
          "31:   )",
          "32:  }",
          "48:  return /** @satisfies {AstroIntegration} */ {",
          "49:   name: '@kindspells/astro-shield',",
          "50:   hooks: {",
          "51:    ...((enableStatic_SRI ?? true) === true",
          "52:     ? {",
          "56:      }",
          "57:     : undefined),",
          "58:    ...(enableMiddleware_SRI === true",
          "59:     ? {",
          "65:      }",
          "66:     : undefined),",
          "67:   },",
          "",
          "[Removed Lines]",
          "28:  if (sriHashesModule && enableStatic_SRI === false) {",
          "29:   console.warn(",
          "30:    '\\nWARNING (@kindspells/astro-shield):\\n\\t`sriHashesModule` is ignored when `enableStatic_SRI` is `false`\\n',",
          "38:  const getAstroBuildDone =",
          "39:   enableMiddleware_SRI =>",
          "41:   async ({ dir, logger }) =>",
          "42:    await processStaticFiles(logger, {",
          "43:     distDir: fileURLToPath(dir),",
          "44:     sriHashesModule,",
          "45:     enableMiddleware_SRI,",
          "46:    })",
          "53:       'astro:build:done': getAstroBuildDone(",
          "54:        enableMiddleware_SRI ?? false,",
          "55:       ),",
          "60:       'astro:config:setup': getAstroConfigSetup(",
          "61:        enableStatic_SRI ?? true,",
          "62:        sriHashesModule,",
          "63:        securityHeaders,",
          "64:       ),",
          "",
          "[Added Lines]",
          "46:  sri,",
          "49:  if (enableMiddleware_SRI !== undefined) {",
          "50:   logWarn(",
          "51:    '`enableMiddleware_SRI` is deprecated, use `sri.enableMiddleware` instead',",
          "54:  if (enableStatic_SRI !== undefined) {",
          "55:   logWarn('`enableStatic_SRI` is deprecated, use `sri.enableStatic` instead')",
          "56:  }",
          "57:  if (sriHashesModule !== undefined) {",
          "58:   logWarn('`sriHashesModule` is deprecated, use `sri.hashesModule` instead')",
          "59:  }",
          "62:  const _sri = /** @satisfies {Required<SRIOptions>} */ {",
          "63:   enableMiddleware: sri?.enableMiddleware ?? enableMiddleware_SRI ?? false,",
          "64:   enableStatic: sri?.enableStatic ?? enableStatic_SRI ?? true,",
          "65:   hashesModule: sri?.hashesModule ?? sriHashesModule,",
          "66:  }",
          "68:  if (_sri.hashesModule && _sri.enableStatic === false) {",
          "69:   logWarn('`sriHashesModule` is ignored when `enableStatic_SRI` is `false`')",
          "70:  }",
          "77:       'astro:build:done': getAstroBuildDone(_sri),",
          "82:       'astro:config:setup': getAstroConfigSetup(_sri, securityHeaders),",
          "",
          "---------------"
        ],
        "tests/core.test.mts||tests/core.test.mts": [
          "File: tests/core.test.mts -> tests/core.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     <title>My Test Page</title>",
          "363:    </head>",
          "364:    <body>",
          "366:    </body>",
          "367:   </html>`",
          "",
          "[Removed Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-OZvIBS4qHnaPlGAdVjMHjYLiBKWYKSAkj/gp8Mv8y7s=\"></script>",
          "",
          "[Added Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-KrxzzNH5AjdyG84oIMGj043N5e4ZnvFjIC7HKOVJMv4=\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:   expect(h.extScriptHashes.size).toBe(1)",
          "380:   expect(",
          "381:    h.extScriptHashes.has(",
          "383:    ),",
          "384:   ).toBe(true)",
          "385:   expect(h.inlineScriptHashes.size).toBe(0)",
          "",
          "[Removed Lines]",
          "382:     'sha256-OZvIBS4qHnaPlGAdVjMHjYLiBKWYKSAkj/gp8Mv8y7s=',",
          "",
          "[Added Lines]",
          "382:     'sha256-KrxzzNH5AjdyG84oIMGj043N5e4ZnvFjIC7HKOVJMv4=',",
          "",
          "---------------"
        ],
        "tests/headers.test.mts||tests/headers.test.mts": [
          "File: tests/headers.test.mts -> tests/headers.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:    scripts: new Set<string>(['abc1', 'xyz2']),",
          "133:    styles: new Set<string>(['dbc1', 'xyz3', 'abc2']),",
          "134:   }",
          "137:   const patchedHeaders = patchHeaders(headers, pageHashes, settings)",
          "138:   expect(patchedHeaders.has('content-security-policy')).toBe(false)",
          "",
          "[Removed Lines]",
          "135:   const settings: SecurityHeadersOptions = { /* contentSecurityPolicy: {} */ }",
          "",
          "[Added Lines]",
          "135:   const settings: SecurityHeadersOptions = {",
          "137:   }",
          "",
          "---------------"
        ],
        "vitest.config.unit.mts||vitest.config.unit.mts": [
          "File: vitest.config.unit.mts -> vitest.config.unit.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:    ],",
          "21:    thresholds: {",
          "22:     statements: 72.0,",
          "24:     functions: 80.0,",
          "25:     lines: 72.0,",
          "26:    },",
          "",
          "[Removed Lines]",
          "23:     branches: 77.0,",
          "",
          "[Added Lines]",
          "23:     branches: 76.0,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccba042ec45639f3574b4bb37c3bc30bad4cde6c",
      "candidate_info": {
        "commit_hash": "ccba042ec45639f3574b4bb37c3bc30bad4cde6c",
        "repo": "KindSpells/astro-shield",
        "commit_url": "https://github.com/KindSpells/astro-shield/commit/ccba042ec45639f3574b4bb37c3bc30bad4cde6c",
        "files": [
          "src/core.mjs",
          "src/fs.mjs",
          "tests/core.test.mts"
        ],
        "message": "feat: guard against inline res for static pass\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
        "before_after_code_files": [
          "src/core.mjs||src/core.mjs",
          "src/fs.mjs||src/fs.mjs",
          "tests/core.test.mts||tests/core.test.mts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/kindspells/astro-shield/pull/45"
        ],
        "olp_code_files": {
          "patch": [
            "src/core.mjs||src/core.mjs",
            "tests/core.test.mts||tests/core.test.mts"
          ],
          "candidate": [
            "src/core.mjs||src/core.mjs",
            "tests/core.test.mts||tests/core.test.mts"
          ]
        }
      },
      "candidate_diff": {
        "src/core.mjs||src/core.mjs": [
          "File: src/core.mjs -> src/core.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:  relativeFilepath,",
          "124:  content,",
          "125:  h,",
          "126: ) => {",
          "127:  const processors = getRegexProcessors()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:  allowInlineScripts = 'all',",
          "129:  allowInlineStyles = 'all',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:    }",
          "204:    if (hasContent && !sriHash) {",
          "208:    }",
          "210:    if (sriHash) {",
          "",
          "[Removed Lines]",
          "205:     sriHash = generateSRIHash(content)",
          "206:     h[`inline${t}Hashes`].add(sriHash)",
          "207:     pageHashes[t2].add(sriHash)",
          "",
          "[Added Lines]",
          "210:     if (",
          "211:      !(allowInlineScripts === false && t === 'Script') &&",
          "212:      !(allowInlineStyles === false && t === 'Style')",
          "213:     ) {",
          "214:      sriHash = generateSRIHash(content)",
          "215:      h[`inline${t}Hashes`].add(sriHash)",
          "216:      pageHashes[t2].add(sriHash)",
          "217:     } else {",
          "218:      logger.warn(",
          "219:       `Skipping SRI hash generation for inline ${t.toLowerCase()} \"${relativeFilepath}\" (inline ${t2} are disabled)`,",
          "220:      )",
          "221:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "360:  const content = await readFile(filePath, 'utf8')",
          "361:  const updatedContent = await updateStaticPageSriHashes(",
          "362:   logger,",
          "",
          "[Removed Lines]",
          "359: const processHTMLFile = async (logger, filePath, distDir, h) => {",
          "",
          "[Added Lines]",
          "374: const processHTMLFile = async (logger, filePath, distDir, h, sri) => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "364:   relative(distDir, filePath),",
          "365:   content,",
          "366:   h,",
          "367:  )",
          "369:  if (updatedContent !== content) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382:   sri?.allowInlineScripts ?? 'all',",
          "383:   sri?.allowInlineStyles ?? 'all',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "627:   h,",
          "628:   processHTMLFile,",
          "629:   file => extname(file) === '.html',",
          "630:  )",
          "632:  await scanForNestedResources(logger, distDir, h)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "647:   sri,",
          "",
          "---------------"
        ],
        "src/fs.mjs||src/fs.mjs": [
          "File: src/fs.mjs -> src/fs.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:  h,",
          "44:  processFile,",
          "45:  filenameCondition,",
          "46: ) => {",
          "47:  for (const file of await readdir(currentPath)) {",
          "48:   const filePath = resolve(currentPath, file)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:  sri,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     h,",
          "57:     processFile,",
          "58:     filenameCondition,",
          "59:    )",
          "60:   } else if (stats.isFile() && filenameCondition(file)) {",
          "62:   }",
          "63:  }",
          "64: }",
          "",
          "[Removed Lines]",
          "61:    await processFile(logger, filePath, rootPath, h)",
          "",
          "[Added Lines]",
          "68:     sri,",
          "71:    await processFile(logger, filePath, rootPath, h, sri)",
          "",
          "---------------"
        ],
        "tests/core.test.mts||tests/core.test.mts": [
          "File: tests/core.test.mts -> tests/core.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     <title>My Test Page</title>",
          "363:    </head>",
          "364:    <body>",
          "366:    </body>",
          "367:   </html>`",
          "",
          "[Removed Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-n5QiD5rG5p3P6N6SMn4S3Oc0MRSrqJdbCxTiOQHNdiU=\"></script>",
          "",
          "[Added Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-s3wSlNdTTOw87Nt6ZwYwxtjXOACkAFp+bNCiIBHLfus=\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:   expect(h.extScriptHashes.size).toBe(1)",
          "380:   expect(",
          "381:    h.extScriptHashes.has(",
          "383:    ),",
          "384:   ).toBe(true)",
          "385:   expect(h.inlineScriptHashes.size).toBe(0)",
          "",
          "[Removed Lines]",
          "382:     'sha256-n5QiD5rG5p3P6N6SMn4S3Oc0MRSrqJdbCxTiOQHNdiU=',",
          "",
          "[Added Lines]",
          "382:     'sha256-s3wSlNdTTOw87Nt6ZwYwxtjXOACkAFp+bNCiIBHLfus=',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad3abf5577bae9be420b7ddf376337a5b8817869",
      "candidate_info": {
        "commit_hash": "ad3abf5577bae9be420b7ddf376337a5b8817869",
        "repo": "KindSpells/astro-shield",
        "commit_url": "https://github.com/KindSpells/astro-shield/commit/ad3abf5577bae9be420b7ddf376337a5b8817869",
        "files": [
          "src/core.mjs",
          "src/main.d.ts",
          "src/main.mjs",
          "tests/core.test.mts"
        ],
        "message": "refactor: introduce new sri options\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
        "before_after_code_files": [
          "src/core.mjs||src/core.mjs",
          "src/main.d.ts||src/main.d.ts",
          "src/main.mjs||src/main.mjs",
          "tests/core.test.mts||tests/core.test.mts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core.mjs||src/core.mjs",
            "src/main.mjs||src/main.mjs",
            "tests/core.test.mts||tests/core.test.mts"
          ],
          "candidate": [
            "src/core.mjs||src/core.mjs",
            "src/main.mjs||src/main.mjs",
            "tests/core.test.mts||tests/core.test.mts"
          ]
        }
      },
      "candidate_diff": {
        "src/core.mjs||src/core.mjs": [
          "File: src/core.mjs -> src/core.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "710: const loadVirtualMiddlewareModule = async (",
          "711:  logger,",
          "714:  securityHeadersOptions,",
          "715:  publicDir,",
          "716: ) => {",
          "",
          "[Removed Lines]",
          "712:  enableStatic_SRI,",
          "713:  sriHashesModule,",
          "",
          "[Added Lines]",
          "711:  sri,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "718:  let staticHashesModuleLoader = ''",
          "720:  if (",
          "724:  ) {",
          "725:   const h = /** @satisfies {HashesCollection} */ {",
          "726:    inlineScriptHashes: new Set(),",
          "",
          "[Removed Lines]",
          "721:   enableStatic_SRI &&",
          "722:   sriHashesModule &&",
          "723:   !(await doesFileExist(sriHashesModule))",
          "",
          "[Added Lines]",
          "719:   sri.enableStatic &&",
          "720:   sri.hashesModule &&",
          "721:   !(await doesFileExist(sri.hashesModule))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "740:   await generateSRIHashesModule(",
          "741:    logger,",
          "742:    h,",
          "744:    false, // So we don't get redundant warnings",
          "745:   )",
          "746:  }",
          "748:  if (",
          "752:  ) {",
          "754:   staticHashesModuleLoader = `",
          "755: try {",
          "756:  if (perResourceSriHashes) {",
          "",
          "[Removed Lines]",
          "743:    sriHashesModule,",
          "749:   enableStatic_SRI &&",
          "750:   sriHashesModule &&",
          "751:   (await doesFileExist(sriHashesModule))",
          "753:   extraImports = `import { perResourceSriHashes } from '${sriHashesModule}'`",
          "",
          "[Added Lines]",
          "741:    sri.hashesModule,",
          "747:   sri.enableStatic &&",
          "748:   sri.hashesModule &&",
          "749:   (await doesFileExist(sri.hashesModule))",
          "751:   extraImports = `import { perResourceSriHashes } from '${sri.hashesModule}'`",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "769:  console.error('Failed to load static hashes module:', err)",
          "770: }",
          "771: `",
          "775:   logger.warn(",
          "777:   )",
          "778:  }",
          "",
          "[Removed Lines]",
          "772:  } else if (enableStatic_SRI && sriHashesModule) {",
          "776:    `The SRI hashes module \"${sriHashesModule}\" did not exist at build time. You may have to run the build step again`,",
          "",
          "[Added Lines]",
          "770:  } else if (sri.enableStatic && sri.hashesModule) {",
          "774:    `The SRI hashes module \"${sri.hashesModule}\" did not exist at build time. You may have to run the build step again`,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "821:  return {",
          "822:   name: 'vite-plugin-astro-shield',",
          "823:   resolveId(id) {",
          "",
          "[Removed Lines]",
          "814: const getViteMiddlewarePlugin = (",
          "815:  logger,",
          "816:  enableStatic_SRI,",
          "817:  sriHashesModule,",
          "818:  securityHeaders,",
          "819:  publicDir,",
          "820: ) => {",
          "",
          "[Added Lines]",
          "811: const getViteMiddlewarePlugin = (logger, sri, securityHeaders, publicDir) => {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "831:     case resolvedMiddlewareVirtualModuleId:",
          "832:      return await loadVirtualMiddlewareModule(",
          "833:       logger,",
          "836:       securityHeaders,",
          "837:       publicDir,",
          "838:      )",
          "",
          "[Removed Lines]",
          "834:       enableStatic_SRI,",
          "835:       sriHashesModule,",
          "",
          "[Added Lines]",
          "825:       sri,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "854:   const publicDir = fileURLToPath(config.publicDir)",
          "855:   const plugin = getViteMiddlewarePlugin(",
          "856:    logger,",
          "859:    securityHeaders,",
          "860:    publicDir,",
          "861:   )",
          "",
          "[Removed Lines]",
          "857:    sri.enableStatic ?? true,",
          "858:    sri.hashesModule,",
          "",
          "[Added Lines]",
          "847:    sri,",
          "",
          "---------------"
        ],
        "src/main.d.ts||src/main.d.ts": [
          "File: src/main.d.ts -> src/main.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:  hashesModule?: string | undefined",
          "86: }",
          "88: export type SecurityHeadersOptions = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:  allowInlineStyles?: 'all' | 'static' | false",
          "107:  allowInlineScripts?: 'all' | 'static' | false",
          "113:  scriptsAllowListUrls?: string[]",
          "119:  stylesAllowListUrls?: string[]",
          "",
          "---------------"
        ],
        "src/main.mjs||src/main.mjs": [
          "File: src/main.mjs -> src/main.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   enableMiddleware: sri?.enableMiddleware ?? enableMiddleware_SRI ?? false,",
          "64:   enableStatic: sri?.enableStatic ?? enableStatic_SRI ?? true,",
          "65:   hashesModule: sri?.hashesModule ?? sriHashesModule,",
          "66:  }",
          "68:  if (_sri.hashesModule && _sri.enableStatic === false) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:   allowInlineScripts: sri?.allowInlineScripts ?? 'all',",
          "68:   allowInlineStyles: sri?.allowInlineStyles ?? 'all',",
          "70:   scriptsAllowListUrls: sri?.scriptsAllowListUrls ?? [],",
          "71:   stylesAllowListUrls: sri?.stylesAllowListUrls ?? [],",
          "",
          "---------------"
        ],
        "tests/core.test.mts||tests/core.test.mts": [
          "File: tests/core.test.mts -> tests/core.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     <title>My Test Page</title>",
          "363:    </head>",
          "364:    <body>",
          "366:    </body>",
          "367:   </html>`",
          "",
          "[Removed Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-KrxzzNH5AjdyG84oIMGj043N5e4ZnvFjIC7HKOVJMv4=\"></script>",
          "",
          "[Added Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-n5QiD5rG5p3P6N6SMn4S3Oc0MRSrqJdbCxTiOQHNdiU=\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:   expect(h.extScriptHashes.size).toBe(1)",
          "380:   expect(",
          "381:    h.extScriptHashes.has(",
          "383:    ),",
          "384:   ).toBe(true)",
          "385:   expect(h.inlineScriptHashes.size).toBe(0)",
          "",
          "[Removed Lines]",
          "382:     'sha256-KrxzzNH5AjdyG84oIMGj043N5e4ZnvFjIC7HKOVJMv4=',",
          "",
          "[Added Lines]",
          "382:     'sha256-n5QiD5rG5p3P6N6SMn4S3Oc0MRSrqJdbCxTiOQHNdiU=',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a1bc636bdc13abd290a629ac97516688e2c18b4",
      "candidate_info": {
        "commit_hash": "7a1bc636bdc13abd290a629ac97516688e2c18b4",
        "repo": "KindSpells/astro-shield",
        "commit_url": "https://github.com/KindSpells/astro-shield/commit/7a1bc636bdc13abd290a629ac97516688e2c18b4",
        "files": [
          "e2e/e2e.test.mts",
          "e2e/fixtures/hybrid3/astro.config.mjs",
          "e2e/fixtures/hybrid3/package.json",
          "e2e/fixtures/hybrid3/pnpm-lock.yaml",
          "e2e/fixtures/hybrid3/public/code.js",
          "e2e/fixtures/hybrid3/src/env.d.ts",
          "e2e/fixtures/hybrid3/src/pages/index.astro",
          "e2e/fixtures/hybrid3/src/pages/static.astro",
          "e2e/fixtures/hybrid3/src/styles/main.css",
          "e2e/fixtures/hybrid3/src/styles/normalize.css",
          "package.json",
          "src/core.mjs",
          "src/headers.mjs",
          "src/main.d.ts",
          "src/main.mjs",
          "tests/core.test.mts",
          "tests/headers.test.mts",
          "vitest.config.e2e.mts"
        ],
        "message": "feat: enable middleware csp headers\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
        "before_after_code_files": [
          "e2e/e2e.test.mts||e2e/e2e.test.mts",
          "e2e/fixtures/hybrid3/astro.config.mjs||e2e/fixtures/hybrid3/astro.config.mjs",
          "e2e/fixtures/hybrid3/public/code.js||e2e/fixtures/hybrid3/public/code.js",
          "e2e/fixtures/hybrid3/src/env.d.ts||e2e/fixtures/hybrid3/src/env.d.ts",
          "e2e/fixtures/hybrid3/src/pages/index.astro||e2e/fixtures/hybrid3/src/pages/index.astro",
          "e2e/fixtures/hybrid3/src/pages/static.astro||e2e/fixtures/hybrid3/src/pages/static.astro",
          "e2e/fixtures/hybrid3/src/styles/main.css||e2e/fixtures/hybrid3/src/styles/main.css",
          "e2e/fixtures/hybrid3/src/styles/normalize.css||e2e/fixtures/hybrid3/src/styles/normalize.css",
          "src/core.mjs||src/core.mjs",
          "src/headers.mjs||src/headers.mjs",
          "src/main.d.ts||src/main.d.ts",
          "src/main.mjs||src/main.mjs",
          "tests/core.test.mts||tests/core.test.mts",
          "tests/headers.test.mts||tests/headers.test.mts",
          "vitest.config.e2e.mts||vitest.config.e2e.mts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core.mjs||src/core.mjs",
            "src/headers.mjs||src/headers.mjs",
            "src/main.mjs||src/main.mjs",
            "tests/core.test.mts||tests/core.test.mts",
            "tests/headers.test.mts||tests/headers.test.mts"
          ],
          "candidate": [
            "src/core.mjs||src/core.mjs",
            "src/headers.mjs||src/headers.mjs",
            "src/main.mjs||src/main.mjs",
            "tests/core.test.mts||tests/core.test.mts",
            "tests/headers.test.mts||tests/headers.test.mts"
          ]
        }
      },
      "candidate_diff": {
        "e2e/e2e.test.mts||e2e/e2e.test.mts": [
          "File: e2e/e2e.test.mts -> e2e/e2e.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:  it('patches inline resources for dynamically generated pages', async () => {",
          "320:   await checkHtmlIsPatched('/')",
          "321:  })",
          "322: })",
          "324: describe('middleware (hybrid)', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:  it('does not send csp headers when the feature is disabled', async () => {",
          "324:   const response = await fetch(`${baseUrl}/`)",
          "325:   expect(response.headers.has('content-security-policy')).toBe(false)",
          "326:  })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "384:    '/code.js': 'sha256-X7QGGDHgf6XMoabXvV9pW7gl3ALyZhZlgKq1s3pwmME=',",
          "385:   })",
          "386:  })",
          "387: })",
          "389: describe('middleware (hybrid 2)', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393:  it('does not send csp headers when the feature is disabled', async () => {",
          "394:   const response = await fetch(`${baseUrl}/`)",
          "395:   expect(response.headers.has('content-security-policy')).toBe(false)",
          "396:  })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "453:    '/code.js': 'sha256-X7QGGDHgf6XMoabXvV9pW7gl3ALyZhZlgKq1s3pwmME=',",
          "454:   })",
          "455:  })",
          "456: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "467:  it('does not send csp headers when the feature is disabled', async () => {",
          "468:   const response = await fetch(`${baseUrl}/`)",
          "469:   expect(response.headers.has('content-security-policy')).toBe(false)",
          "470:  })",
          "471: })",
          "473: describe('middleware (hybrid 3)', () => {",
          "474:  const hybridDir = resolve(fixturesDir, 'hybrid3')",
          "475:  const execOpts = { cwd: hybridDir }",
          "477:  let baseUrl: string",
          "478:  let server: PreviewServer | undefined",
          "479:  let port: number",
          "481:  beforeAll(async () => {",
          "482:   await execFile('pnpm', ['install'], execOpts)",
          "483:   await execFile('pnpm', ['run', 'clean'], execOpts)",
          "484:   const { stdout: buildStdout } = await execFile(",
          "485:    'pnpm',",
          "486:    ['run', 'build'],",
          "487:    execOpts,",
          "488:   )",
          "489:   expect(buildStdout).toMatch(/run the build step again/)",
          "490:   const { stdout: buildStdout2 } = await execFile(",
          "491:    'pnpm',",
          "492:    ['run', 'build'],",
          "493:    execOpts,",
          "494:   )",
          "495:   expect(buildStdout2).not.toMatch(/run the build step again/)",
          "496:  })",
          "498:  beforeEach(async () => {",
          "499:   port = 9999 + Math.floor(Math.random() * 55536)",
          "500:   baseUrl = `http://localhost:${port}`",
          "502:   await cleanServer()",
          "503:   server = await preview({",
          "504:    root: hybridDir,",
          "505:    server: { port },",
          "506:    logLevel: 'debug',",
          "507:   })",
          "508:  })",
          "510:  const cleanServer = async () => {",
          "511:   if (server) {",
          "512:    if (!server.closed()) {",
          "513:     await server.stop()",
          "514:    }",
          "515:    server = undefined",
          "516:   }",
          "517:  }",
          "519:  afterEach(cleanServer)",
          "520:  afterAll(cleanServer) // Just in case",
          "522:  it('sends csp headers when the feature is enabled', async () => {",
          "523:   const response = await fetch(`${baseUrl}/`)",
          "524:   const cspHeader = response.headers.get('content-security-policy')",
          "526:   assert(cspHeader !== null)",
          "527:   assert(cspHeader)",
          "529:   expect(cspHeader).toBe(",
          "530:    \"default-src 'none'; frame-ancestors 'none'; script-src 'self' 'sha256-X7QGGDHgf6XMoabXvV9pW7gl3ALyZhZlgKq1s3pwmME='; style-src 'self' 'sha256-9U7mv8FibD/D9IbGpXc86pz37l6/w4PCLpFIZuPrzh8=' 'sha256-ZlgyI5Bx/aeAyk/wSIypqeIM5PBhz9IiAek9HIiAjaI='\",",
          "531:   )",
          "532:  })",
          "",
          "---------------"
        ],
        "e2e/fixtures/hybrid3/astro.config.mjs||e2e/fixtures/hybrid3/astro.config.mjs": [
          "File: e2e/fixtures/hybrid3/astro.config.mjs -> e2e/fixtures/hybrid3/astro.config.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import { resolve } from 'node:path'",
          "8: import { shield } from '@kindspells/astro-shield'",
          "9: import node from '@astrojs/node'",
          "10: import { defineConfig } from 'astro/config'",
          "17: const rootDir = new URL('.', import.meta.url).pathname",
          "18: const sriHashesModule = resolve(rootDir, 'src', 'generated', 'sri.mjs')",
          "21: export default defineConfig({",
          "22:  output: 'hybrid',",
          "23:  trailingSlash: 'always',",
          "24:  adapter: node({ mode: 'standalone' }),",
          "25:  integrations: [",
          "26:   shield({",
          "27:    enableStatic_SRI: true,",
          "28:    enableMiddleware_SRI: true,",
          "29:    sriHashesModule,",
          "30:    securityHeaders: {",
          "31:     contentSecurityPolicy: {",
          "32:      cspDirectives: {",
          "33:       'default-src': \"'none'\",",
          "34:       'frame-ancestors': \"'none'\",",
          "35:      },",
          "36:     },",
          "37:    },",
          "38:   }),",
          "39:  ],",
          "40:  vite: {",
          "41:   build: { assetsInlineLimit: 1024 },",
          "42:  },",
          "43: })",
          "",
          "---------------"
        ],
        "e2e/fixtures/hybrid3/public/code.js||e2e/fixtures/hybrid3/public/code.js": [
          "File: e2e/fixtures/hybrid3/public/code.js -> e2e/fixtures/hybrid3/public/code.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: alert('Hello!')",
          "",
          "---------------"
        ],
        "e2e/fixtures/hybrid3/src/env.d.ts||e2e/fixtures/hybrid3/src/env.d.ts": [
          "File: e2e/fixtures/hybrid3/src/env.d.ts -> e2e/fixtures/hybrid3/src/env.d.ts"
        ],
        "e2e/fixtures/hybrid3/src/pages/index.astro||e2e/fixtures/hybrid3/src/pages/index.astro": [
          "File: e2e/fixtures/hybrid3/src/pages/index.astro -> e2e/fixtures/hybrid3/src/pages/index.astro",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ---",
          "8: const myConst = 42",
          "9: export const prerender = false",
          "10: import '../styles/main.css'",
          "11: ---",
          "12: <!DOCTYPE html><html lang=\"en\">",
          "13:  <head>",
          "14:   <meta charset=\"utf-8\" />",
          "15:   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
          "16:   <title>My Static Test Site</title>",
          "17:   <style>h1 { color: red; }</style>",
          "18:  </head>",
          "19:  <body>",
          "20:   <script is:inline src=\"/code.js\"></script>",
          "21:   <h1>My const is: { myConst }</h1>",
          "22:   <p>In this document we'll try to load all our CSS rules</p>",
          "23:  </body>",
          "24: </html>",
          "",
          "---------------"
        ],
        "e2e/fixtures/hybrid3/src/pages/static.astro||e2e/fixtures/hybrid3/src/pages/static.astro": [
          "File: e2e/fixtures/hybrid3/src/pages/static.astro -> e2e/fixtures/hybrid3/src/pages/static.astro",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ---",
          "8: const myConst = 42",
          "9: export const prerender = true",
          "10: import '../styles/main.css'",
          "11: ---",
          "12: <!DOCTYPE html><html lang=\"en\">",
          "13:  <head>",
          "14:   <meta charset=\"utf-8\" />",
          "15:   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
          "16:   <title>My Static Test Site</title>",
          "17:   <style>h1 { color: red; }</style>",
          "18:  </head>",
          "19:  <body>",
          "20:   <script is:inline src=\"/code.js\"></script>",
          "21:   <h1>My const is: { myConst }</h1>",
          "22:   <p>In this document we'll try to load all our CSS rules</p>",
          "23:  </body>",
          "24: </html>",
          "",
          "---------------"
        ],
        "e2e/fixtures/hybrid3/src/styles/main.css||e2e/fixtures/hybrid3/src/styles/main.css": [
          "File: e2e/fixtures/hybrid3/src/styles/main.css -> e2e/fixtures/hybrid3/src/styles/main.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: @import './normalize.css';",
          "12: :where(html) {",
          "13:  --ease-3: cubic-bezier(.25, 0, .3, 1);",
          "14:  --ease-elastic-3: var(--ease-elastic-out-3);",
          "15:   --ease-elastic-4: var(--ease-elastic-out-4);",
          "16:  --ease-out-5: cubic-bezier(0, 0, 0, 1);",
          "17: }",
          "19: :root {",
          "20:  color-scheme: light;",
          "21:  --bg-color: rgb(250, 250, 250);",
          "22:  --bg-color-2: rgb(34, 39, 42);",
          "23:  --text-color: rgb(34, 39, 42);",
          "24:  --text-color-2: rgb(167, 167, 168);",
          "25:  --accent-color: rgb(203, 42, 66);",
          "26:  --accent-color-2: rgb(41, 188, 137);",
          "28:  --footer-bg-color: var(--bg-color-2);",
          "29:  --footer-links: var(--text-color);",
          "30: }",
          "32: :root.dark {",
          "33:  color-scheme: dark;",
          "34:  --bg-color: rgb(34, 39, 42);",
          "35:  --bg-color-2: rgb(230, 230, 230);",
          "36:  --text-color: rgb(230, 230, 230);",
          "37:  --text-color-2: rgb(34, 39, 42);",
          "38:  --accent-color: rgb(41, 188, 137);",
          "39:  --accent-color-2: rgb(249, 180, 19);",
          "41:  --footer-bg-color: var(--bg-color-2);",
          "42:  --footer-links: var(--text-color);",
          "43: }",
          "45: html {",
          "46:  height: 100%;",
          "47: }",
          "49: body {",
          "50:  color: var(--text-color);",
          "51:  background-color: var(--bg-color);",
          "52:   display: flex;",
          "53:   flex-flow: column;",
          "54:   height: 100%;",
          "55: }",
          "60: main {",
          "61:  max-width: 720px;",
          "62:  min-width: 260px;",
          "63:  width: calc(75% + 48px);",
          "64:  margin: 0 auto;",
          "65:  padding: 0;",
          "66:  display: flex;",
          "67:  flex: 1;",
          "68: }",
          "70: #splash {",
          "71:  display: flex;",
          "72:  flex: 1;",
          "73:  align-items: center;",
          "74:  justify-content: center;",
          "75: }",
          "77: #hero p {",
          "78:  text-align: center;",
          "79:  margin: 16px auto 24px auto;",
          "80: }",
          "82: h1 {",
          "83:  font-size: 2.5rem;",
          "84:  font-weight: 800;",
          "85: }",
          "87: h2 {",
          "88:  font-size: 1.5rem;",
          "89:  font-weight: 700;",
          "90: }",
          "92: #hero h1 {",
          "93:  text-align: center",
          "94: }",
          "96: #document-block {",
          "97:  margin-bottom: 32px;",
          "98: }",
          "100: #document-block p, #document-block ul {",
          "101:  margin-bottom: 12px;",
          "102: }",
          "104: #document-block ul li {",
          "105:  list-style: inside square;",
          "106: }",
          "",
          "---------------"
        ],
        "e2e/fixtures/hybrid3/src/styles/normalize.css||e2e/fixtures/hybrid3/src/styles/normalize.css": [
          "File: e2e/fixtures/hybrid3/src/styles/normalize.css -> e2e/fixtures/hybrid3/src/styles/normalize.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: Document",
          "8: ========",
          "12: Use a better box model (opinionated).",
          "16: ::before,",
          "17: ::after {",
          "18:  box-sizing: border-box;",
          "19: }",
          "21: html {",
          "23:  font-family:",
          "24:   system-ui,",
          "25:   'Segoe UI',",
          "26:   Roboto,",
          "27:   Helvetica,",
          "28:   Arial,",
          "29:   sans-serif,",
          "30:   'Apple Color Emoji',",
          "31:   'Segoe UI Emoji';",
          "37: }",
          "40: Sections",
          "41: ========",
          "44: body {",
          "46: }",
          "49: Grouping content",
          "50: ================",
          "54: 1. Add the correct height in Firefox.",
          "55: 2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)",
          "58: hr {",
          "61: }",
          "64: Text-level semantics",
          "65: ====================",
          "69: Add the correct text decoration in Chrome, Edge, and Safari.",
          "72: abbr[title] {",
          "73:  text-decoration: underline dotted;",
          "74: }",
          "77: Add the correct font weight in Edge and Safari.",
          "80: b,",
          "81: strong {",
          "82:  font-weight: bolder;",
          "83: }",
          "86: 1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)",
          "87: 2. Correct the odd 'em' font sizing in all browsers.",
          "90: code,",
          "91: kbd,",
          "92: samp,",
          "93: pre {",
          "94:  font-family:",
          "95:   ui-monospace,",
          "96:   SFMono-Regular,",
          "97:   Consolas,",
          "98:   'Liberation Mono',",
          "99:   Menlo,",
          "102: }",
          "105: Add the correct font size in all browsers.",
          "108: small {",
          "109:  font-size: 80%;",
          "110: }",
          "113: Prevent 'sub' and 'sup' elements from affecting the line height in all browsers.",
          "116: sub,",
          "117: sup {",
          "118:  font-size: 75%;",
          "119:  line-height: 0;",
          "120:  position: relative;",
          "121:  vertical-align: baseline;",
          "122: }",
          "124: sub {",
          "125:  bottom: -0.25em;",
          "126: }",
          "128: sup {",
          "129:  top: -0.5em;",
          "130: }",
          "133: Tabular data",
          "134: ============",
          "138: 1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)",
          "139: 2. Correct table border color inheritance in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)",
          "142: table {",
          "145: }",
          "148: Forms",
          "149: =====",
          "153: 1. Change the font styles in all browsers.",
          "154: 2. Remove the margin in Firefox and Safari.",
          "157: button,",
          "158: input,",
          "159: optgroup,",
          "160: select,",
          "161: textarea {",
          "166: }",
          "169: Remove the inheritance of text transform in Edge and Firefox.",
          "172: button,",
          "173: select {",
          "174:  text-transform: none;",
          "175: }",
          "178: Correct the inability to style clickable types in iOS and Safari.",
          "181: button,",
          "182: [type='button'],",
          "183: [type='reset'],",
          "184: [type='submit'] {",
          "185:  -webkit-appearance: button;",
          "186: }",
          "189: Remove the inner border and padding in Firefox.",
          "192: ::-moz-focus-inner {",
          "193:  border-style: none;",
          "194:  padding: 0;",
          "195: }",
          "198: Restore the focus styles unset by the previous rule.",
          "201: :-moz-focusring {",
          "202:  outline: 1px dotted ButtonText;",
          "203: }",
          "206: Remove the additional ':invalid' styles in Firefox.",
          "207: See: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737",
          "210: :-moz-ui-invalid {",
          "211:  box-shadow: none;",
          "212: }",
          "215: Remove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.",
          "218: legend {",
          "219:  padding: 0;",
          "220: }",
          "223: Add the correct vertical alignment in Chrome and Firefox.",
          "226: progress {",
          "227:  vertical-align: baseline;",
          "228: }",
          "231: Correct the cursor style of increment and decrement buttons in Safari.",
          "234: ::-webkit-inner-spin-button,",
          "235: ::-webkit-outer-spin-button {",
          "236:  height: auto;",
          "237: }",
          "240: 1. Correct the odd appearance in Chrome and Safari.",
          "241: 2. Correct the outline style in Safari.",
          "244: [type='search'] {",
          "247: }",
          "250: Remove the inner padding in Chrome and Safari on macOS.",
          "253: ::-webkit-search-decoration {",
          "254:  -webkit-appearance: none;",
          "255: }",
          "258: 1. Correct the inability to style clickable types in iOS and Safari.",
          "259: 2. Change font properties to 'inherit' in Safari.",
          "262: ::-webkit-file-upload-button {",
          "265: }",
          "268: Interactive",
          "269: ===========",
          "273: Add the correct display in Chrome and Safari.",
          "276: summary {",
          "277:  display: list-item;",
          "278: }",
          "282: Extra Recommendations from https://mattbrictson.com/blog/css-normalize-and-reset",
          "283: ================================================================================",
          "285: :root { line-height: 1.5; }",
          "286: h1, h2, h3, h4, h5, figure, p, ol, ul {",
          "287:   margin: 0;",
          "288: }",
          "289: ol, ul {",
          "290:   list-style: none;",
          "291:   padding-inline: 0;",
          "292: }",
          "293: h1, h2, h3, h4, h5 {",
          "294:   font-size: inherit;",
          "295:   font-weight: inherit;",
          "296: }",
          "297: img {",
          "298:   display: block;",
          "299:   max-inline-size: 100%;",
          "300: }",
          "",
          "---------------"
        ],
        "src/core.mjs||src/core.mjs": [
          "File: src/core.mjs -> src/core.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import { createHash } from 'node:crypto'",
          "10: import { fileURLToPath } from 'node:url'",
          "12: import { doesFileExist, scanDirectory } from './fs.mjs'",
          "",
          "[Removed Lines]",
          "8: import { readFile, writeFile } from 'node:fs/promises'",
          "9: import { extname, resolve, relative } from 'node:path'",
          "",
          "[Added Lines]",
          "8: import { mkdir, readFile, writeFile } from 'node:fs/promises'",
          "9: import { dirname, extname, resolve, relative } from 'node:path'",
          "13: import { patchHeaders } from './headers.mjs'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "596:    .map(([k, v]) => `\\t\\t'${k}': '${v}',\\n`)",
          "597:    .join('')}\\t}),\\n}\\n`",
          "599:   await writeFile(sriHashesModule, hashesFileContent)",
          "600:  }",
          "601: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "601:   await mkdir(dirname(sriHashesModule), { recursive: true })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "667:  }",
          "668: }",
          "670: const middlewareVirtualModuleId = 'virtual:@kindspells/astro-shield/middleware'",
          "671: const resolvedMiddlewareVirtualModuleId = `\\0${middlewareVirtualModuleId}`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "680: export const getCSPMiddlewareHandler = (globalHashes, securityHeadersOpts) => {",
          "682:  return async (_ctx, next) => {",
          "683:   const response = await next()",
          "684:   const content = await response.text()",
          "686:   const { updatedContent, pageHashes } = await updateDynamicPageSriHashes(",
          "687:    console,",
          "688:    content,",
          "689:    globalHashes,",
          "690:   )",
          "692:   const patchedResponse = new Response(updatedContent, {",
          "693:    status: response.status,",
          "694:    statusText: response.statusText,",
          "695:    headers: patchHeaders(response.headers, pageHashes, securityHeadersOpts),",
          "696:   })",
          "697:   return patchedResponse",
          "698:  }",
          "699: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "681:  logger,",
          "682:  enableStatic_SRI,",
          "683:  sriHashesModule,",
          "684:  publicDir,",
          "685: ) => {",
          "686:  let extraImports = ''",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "716:  securityHeadersOptions,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "749:  return `",
          "750: import { defineMiddleware } from 'astro/middleware'",
          "751: import { getGlobalHashes } from '@kindspells/astro-shield/state'",
          "753: ${extraImports}",
          "755: export const onRequest = await (async () => {",
          "",
          "[Removed Lines]",
          "752: import { getMiddlewareHandler } from '@kindspells/astro-shield/core'",
          "",
          "[Added Lines]",
          "785: import { ${",
          "786:   securityHeadersOptions !== undefined",
          "787:    ? 'getCSPMiddlewareHandler'",
          "788:    : 'getMiddlewareHandler'",
          "789:  } } from '@kindspells/astro-shield/core'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "758:  ${staticHashesModuleLoader}",
          "761: })()",
          "762: `",
          "763: }",
          "",
          "[Removed Lines]",
          "760:  return defineMiddleware(getMiddlewareHandler(globalHashes))",
          "",
          "[Added Lines]",
          "797:  return defineMiddleware(${",
          "798:   securityHeadersOptions !== undefined",
          "799:    ? `getCSPMiddlewareHandler(globalHashes, ${JSON.stringify(",
          "800:      securityHeadersOptions,",
          "801:     )})`",
          "802:    : 'getMiddlewareHandler(globalHashes)'",
          "803:  })",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "773:  logger,",
          "774:  enableStatic_SRI,",
          "775:  sriHashesModule,",
          "776:  publicDir,",
          "777: ) => {",
          "778:  return {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820:  securityHeaders,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "790:       logger,",
          "791:       enableStatic_SRI,",
          "792:       sriHashesModule,",
          "793:       publicDir,",
          "794:      )",
          "795:     default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "838:       securityHeaders,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "810:  return async ({ logger, addMiddleware, config, updateConfig }) => {",
          "811:   const publicDir = fileURLToPath(config.publicDir)",
          "",
          "[Removed Lines]",
          "808: export const getAstroConfigSetup = (enableStatic_SRI, sriHashesModule) => {",
          "",
          "[Added Lines]",
          "855: export const getAstroConfigSetup = (",
          "856:  enableStatic_SRI,",
          "857:  sriHashesModule,",
          "858:  securityHeaders,",
          "859: ) => {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "813:    logger,",
          "814:    enableStatic_SRI,",
          "815:    sriHashesModule,",
          "816:    publicDir,",
          "817:   )",
          "818:   updateConfig({ vite: { plugins: [plugin] } })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867:    securityHeaders,",
          "",
          "---------------"
        ],
        "src/headers.mjs||src/headers.mjs": [
          "File: src/headers.mjs -> src/headers.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: export const serialiseHashes = hashes =>",
          "13:  Array.from(hashes)",
          "14:   .sort()",
          "15:   .map(h => `'${h}'`)",
          "16:   .join(' ')",
          "22: export const safeSerialiseHashes = hashes =>",
          "23:  Array.from(hashes)",
          "24:   .sort()",
          "25:   .map(h => (h.match(/^'[^']+'$/i) ? h : `'${h}'`))",
          "26:   .join(' ')",
          "32: export const serialiseCspDirectives = directives =>",
          "33:  Object.entries(directives)",
          "34:   .sort()",
          "35:   .map(([k, v]) => `${k} ${v}`)",
          "36:   .join('; ')",
          "44: export const setSrcDirective = (directives, srcType, hashes) => {",
          "45:  const baseSrcDirective = directives[srcType]",
          "46:  if (baseSrcDirective) {",
          "47:   const srcDirective = new Set(",
          "48:    baseSrcDirective.split(/\\s+/).filter(v => v !== \"'self'\"),",
          "49:   )",
          "50:   for (const hash of hashes) {",
          "51:    srcDirective.add(`'${hash}'`)",
          "52:   }",
          "53:   directives[srcType] = `'self' ${safeSerialiseHashes(srcDirective)}`",
          "54:  } else {",
          "55:   directives[srcType] = `'self' ${serialiseHashes(hashes)}`",
          "56:  }",
          "57: }",
          "63: export const parseCspDirectives = cspHeader => {",
          "64:  return cspHeader",
          "65:   ? Object.fromEntries(",
          "66:     cspHeader",
          "67:      .split(/;\\s*/i)",
          "68:      .filter(v => !!v)",
          "69:      .map(directive => {",
          "71:       const parts = directive.replace(/\\s+/, '||||||').split('||||||')",
          "72:       return /** @type {[CSPDirectiveNames, string]} */ ([",
          "73:        parts[0],",
          "74:        parts[1] ?? '',",
          "75:       ])",
          "76:      }) ?? [],",
          "77:    )",
          "78:   : {}",
          "79: }",
          "87: export const patchHeaders = (headers, pageHashes, securityHeadersOpts) => {",
          "88:  const directives = headers.has('content-security-policy')",
          "89:   ? {",
          "90:     ...securityHeadersOpts.contentSecurityPolicy?.cspDirectives,",
          "91:     ...parseCspDirectives(",
          "93:     ),",
          "94:    }",
          "95:   : securityHeadersOpts.contentSecurityPolicy?.cspDirectives ??",
          "98:  const plainHeaders = Object.fromEntries(headers.entries())",
          "100:  if (pageHashes.scripts.size > 0) {",
          "101:   setSrcDirective(directives, 'script-src', pageHashes.scripts)",
          "102:  }",
          "103:  if (pageHashes.styles.size > 0) {",
          "104:   setSrcDirective(directives, 'style-src', pageHashes.styles)",
          "105:  }",
          "106:  if (Object.keys(directives).length > 0) {",
          "107:   plainHeaders['content-security-policy'] = serialiseCspDirectives(directives)",
          "108:  }",
          "110:  return new Headers(plainHeaders)",
          "111: }",
          "",
          "---------------"
        ],
        "src/main.d.ts||src/main.d.ts": [
          "File: src/main.d.ts -> src/main.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: export type ShieldOptions = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: export type CSPDirectiveNames =",
          "14:  | 'base-uri'",
          "15:  | 'child-src'",
          "16:  | 'connect-src'",
          "17:  | 'default-src'",
          "18:  | 'font-src'",
          "19:  | 'form-action'",
          "20:  | 'frame-ancestors'",
          "21:  | 'frame-src'",
          "22:  | 'img-src'",
          "23:  | 'manifest-src'",
          "24:  | 'media-src'",
          "25:  | 'object-src'",
          "26:  | 'plugin-types'",
          "27:  | 'prefetch-src'",
          "28:  | 'require-trusted-types-for'",
          "29:  | 'sandbox'",
          "30:  | 'script-src'",
          "31:  | 'style-src'",
          "32:  | 'worker-src'",
          "34: export type CSPDirectives = { [k in CSPDirectiveNames]?: string }",
          "36: export type CSPOptions = {",
          "51:  cspDirectives?: CSPDirectives",
          "52: }",
          "54: export type SecurityHeadersOptions = {",
          "62:  contentSecurityPolicy?: CSPOptions | undefined",
          "63: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:  sriHashesModule?: string | undefined",
          "38: }",
          "39: export type StrictShieldOptions = ShieldOptions & {",
          "40:  distDir: string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:  securityHeaders?: SecurityHeadersOptions | undefined",
          "",
          "---------------"
        ],
        "src/main.mjs||src/main.mjs": [
          "File: src/main.mjs -> src/main.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  enableMiddleware_SRI,",
          "24:  enableStatic_SRI,",
          "25:  sriHashesModule,",
          "26: }) => {",
          "27:  if (sriHashesModule && enableStatic_SRI === false) {",
          "29:  }",
          "",
          "[Removed Lines]",
          "28:   console.warn('`sriHashesModule` is ignored when `enableStatic_SRI` is `false`')",
          "",
          "[Added Lines]",
          "26:  securityHeaders,",
          "29:   console.warn(",
          "30:    '\\nWARNING (@kindspells/astro-shield):\\n\\t`sriHashesModule` is ignored when `enableStatic_SRI` is `false`\\n',",
          "31:   )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:       'astro:build:done': getAstroBuildDone(",
          "51:        enableMiddleware_SRI ?? false,",
          "52:       ),",
          "54:     : undefined),",
          "55:    ...(enableMiddleware_SRI === true",
          "56:     ? {",
          "57:       'astro:config:setup': getAstroConfigSetup(",
          "58:        enableStatic_SRI ?? true,",
          "59:        sriHashesModule,",
          "60:       ),",
          "62:     : undefined),",
          "63:   },",
          "64:  }",
          "",
          "[Removed Lines]",
          "53:       }",
          "61:       }",
          "",
          "[Added Lines]",
          "56:      }",
          "63:        securityHeaders,",
          "65:      }",
          "",
          "---------------"
        ],
        "tests/core.test.mts||tests/core.test.mts": [
          "File: tests/core.test.mts -> tests/core.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     <title>My Test Page</title>",
          "363:    </head>",
          "364:    <body>",
          "366:    </body>",
          "367:   </html>`",
          "",
          "[Removed Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-WhG6Trd5t8QaGbDyEAhrFAoxN3pggUpS1ExaKIOrebk=\"></script>",
          "",
          "[Added Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-OZvIBS4qHnaPlGAdVjMHjYLiBKWYKSAkj/gp8Mv8y7s=\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:   expect(h.extScriptHashes.size).toBe(1)",
          "380:   expect(",
          "381:    h.extScriptHashes.has(",
          "383:    ),",
          "384:   ).toBe(true)",
          "385:   expect(h.inlineScriptHashes.size).toBe(0)",
          "",
          "[Removed Lines]",
          "382:     'sha256-WhG6Trd5t8QaGbDyEAhrFAoxN3pggUpS1ExaKIOrebk=',",
          "",
          "[Added Lines]",
          "382:     'sha256-OZvIBS4qHnaPlGAdVjMHjYLiBKWYKSAkj/gp8Mv8y7s=',",
          "",
          "---------------"
        ],
        "tests/headers.test.mts||tests/headers.test.mts": [
          "File: tests/headers.test.mts -> tests/headers.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import { describe, expect, it } from 'vitest'",
          "9: import {",
          "10:  parseCspDirectives,",
          "11:  patchHeaders,",
          "12:  safeSerialiseHashes,",
          "13:  serialiseCspDirectives,",
          "14:  serialiseHashes,",
          "15:  setSrcDirective,",
          "16: } from '#as/headers.mjs'",
          "17: import type { CSPDirectives, SecurityHeadersOptions } from '#as/main.d.ts'",
          "19: describe('serialiseHashes', () => {",
          "20:  it('returns an empty string for an empty set', () => {",
          "21:   expect(serialiseHashes(new Set())).toBe('')",
          "22:  })",
          "24:  it('returns a string with sorted hashes', () => {",
          "25:   const hashes = new Set(['d', 'c', 'a', 'b'])",
          "26:   expect(serialiseHashes(hashes)).toBe(\"'a' 'b' 'c' 'd'\")",
          "27:  })",
          "29:  it('does not try to escape or remove quotes', () => {",
          "30:   const hashes_1 = new Set([\"'a'\", \"'b'\", \"'c'\", \"'d'\"])",
          "31:   const hashes_2 = new Set(['\"a\"', '\"b\"', '\"c\"', '\"d\"'])",
          "33:   expect(serialiseHashes(hashes_1)).toBe(\"''a'' ''b'' ''c'' ''d''\")",
          "34:   expect(serialiseHashes(hashes_2)).toBe(`'\"a\"' '\"b\"' '\"c\"' '\"d\"'`)",
          "35:  })",
          "36: })",
          "38: describe('safeSerialiseHashes', () => {",
          "39:  it('returns an empty string for an empty set', () => {",
          "40:   expect(safeSerialiseHashes(new Set())).toBe('')",
          "41:  })",
          "43:  it('returns a string with sorted hashes', () => {",
          "44:   const hashes = new Set(['d', 'c', 'a', 'b'])",
          "45:   expect(safeSerialiseHashes(hashes)).toBe(\"'a' 'b' 'c' 'd'\")",
          "46:  })",
          "48:  it('avoids duplicated single quotes', () => {",
          "49:   const hashes = new Set([\"'a'\", \"'b'\", \"'c'\", \"'d'\"])",
          "50:   expect(safeSerialiseHashes(hashes)).toBe(\"'a' 'b' 'c' 'd'\")",
          "51:  })",
          "52: })",
          "54: describe('serialiseCspDirectives', () => {",
          "55:  it('returns an empty string for an empty object', () => {",
          "56:   expect(serialiseCspDirectives({})).toBe('')",
          "57:  })",
          "59:  it('returns a string with sorted directives', () => {",
          "60:   const directives = {",
          "61:    'child-src': 'a',",
          "62:    'connect-src': 'b',",
          "63:    'default-src': 'c',",
          "64:    'font-src': 'd',",
          "65:   }",
          "67:   expect(serialiseCspDirectives(directives)).toBe(",
          "68:    'child-src a; connect-src b; default-src c; font-src d',",
          "69:   )",
          "70:  })",
          "71: })",
          "73: describe('setSrcDirective', () => {",
          "74:  it('sets the directive if it does not exist', () => {",
          "75:   const directives: CSPDirectives = {}",
          "77:   setSrcDirective(directives, 'script-src', new Set(['dbc1', 'xyz3', 'abc2']))",
          "79:   expect(directives['script-src']).to.not.toBeUndefined()",
          "80:   expect(directives['script-src']).toBe(\"'self' 'abc2' 'dbc1' 'xyz3'\")",
          "81:  })",
          "83:  it('merges the directive if it exists', () => {",
          "84:   const directives: CSPDirectives = {",
          "85:    'script-src': \"'self' 'abc1' 'xyz2'\",",
          "86:   }",
          "88:   setSrcDirective(",
          "89:    directives,",
          "90:    'script-src',",
          "91:    new Set(['dbc1', 'xyz3', 'abc2', 'abc1']),",
          "92:   )",
          "94:   expect(directives['script-src']).toBe(",
          "95:    \"'self' 'abc1' 'abc2' 'dbc1' 'xyz2' 'xyz3'\",",
          "96:   )",
          "97:  })",
          "98: })",
          "100: describe('parseCspDirectives', () => {",
          "101:  it('returns an empty object for an empty string', () => {",
          "102:   expect(parseCspDirectives('')).toEqual({})",
          "103:  })",
          "105:  it('returns an object with parsed directives', () => {",
          "106:   const directives = parseCspDirectives(",
          "107:    'child-src a1 a2; connect-src b; default-src c1 c2 c3; font-src d',",
          "108:   )",
          "110:   expect(directives).toEqual({",
          "111:    'child-src': 'a1 a2',",
          "112:    'connect-src': 'b',",
          "113:    'default-src': 'c1 c2 c3',",
          "114:    'font-src': 'd',",
          "115:   })",
          "116:  })",
          "117: })",
          "119: describe('patchHeaders', () => {",
          "120:  it('does not set csp header if no hashes nor settings are provided', () => {",
          "121:   const headers = new Headers()",
          "122:   const pageHashes = { scripts: new Set<string>(), styles: new Set<string>() }",
          "123:   const settings = {}",
          "125:   const patchedHeaders = patchHeaders(headers, pageHashes, settings)",
          "126:   expect(patchedHeaders.has('content-security-policy')).toBe(false)",
          "127:  })",
          "129:  it('sets csp header based on settings', () => {",
          "130:   const headers = new Headers()",
          "131:   const pageHashes = { scripts: new Set<string>(), styles: new Set<string>() }",
          "132:   const settings: SecurityHeadersOptions = {",
          "133:    contentSecurityPolicy: {",
          "134:     cspDirectives: {",
          "135:      'form-action': \"'self'\",",
          "136:      'frame-ancestors': \"'none'\",",
          "137:     },",
          "138:    },",
          "139:   }",
          "141:   const patchedHeaders = patchHeaders(headers, pageHashes, settings)",
          "142:   expect(patchedHeaders.get('content-security-policy')).toBe(",
          "143:    \"form-action 'self'; frame-ancestors 'none'\",",
          "144:   )",
          "145:  })",
          "147:  it('sets csp header based on hashes', () => {",
          "148:   const headers = new Headers()",
          "149:   const pageHashes = {",
          "150:    scripts: new Set<string>(['abc1', 'xyz2']),",
          "151:    styles: new Set<string>(['dbc1', 'xyz3', 'abc2']),",
          "152:   }",
          "153:   const settings: SecurityHeadersOptions = {}",
          "155:   const patchedHeaders = patchHeaders(headers, pageHashes, settings)",
          "156:   expect(patchedHeaders.get('content-security-policy')).toBe(",
          "157:    \"script-src 'self' 'abc1' 'xyz2'; style-src 'self' 'abc2' 'dbc1' 'xyz3'\",",
          "158:   )",
          "159:  })",
          "161:  it('merges existing csp header with dynamically provided hashes & config', () => {",
          "162:   const headers = new Headers({",
          "163:    'content-security-policy':",
          "164:     \"base-uri 'none'; require-trusted-types-for 'script'\",",
          "165:   })",
          "166:   const pageHashes = {",
          "167:    scripts: new Set<string>(['abc1', 'xyz2']),",
          "168:    styles: new Set<string>(['dbc1', 'xyz3', 'abc2']),",
          "169:   }",
          "170:   const settings: SecurityHeadersOptions = {",
          "171:    contentSecurityPolicy: {",
          "172:     cspDirectives: {",
          "173:      'form-action': \"'self'\",",
          "174:      'frame-ancestors': \"'none'\",",
          "175:     },",
          "176:    },",
          "177:   }",
          "179:   const patchedHeaders = patchHeaders(headers, pageHashes, settings)",
          "180:   expect(patchedHeaders.get('content-security-policy')).toBe(",
          "181:    \"base-uri 'none'; form-action 'self'; frame-ancestors 'none'; require-trusted-types-for 'script'; script-src 'self' 'abc1' 'xyz2'; style-src 'self' 'abc2' 'dbc1' 'xyz3'\",",
          "182:   )",
          "183:  })",
          "184: })",
          "",
          "---------------"
        ],
        "vitest.config.e2e.mts||vitest.config.e2e.mts": [
          "File: vitest.config.e2e.mts -> vitest.config.e2e.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: export default defineConfig({",
          "10:  test: {",
          "29:   include: ['e2e/**/*.test.mts'],",
          "30:  },",
          "31: })",
          "",
          "[Removed Lines]",
          "11:   coverage: {",
          "12:    provider: 'v8',",
          "13:    include: ['src/*.mjs'],",
          "14:    exclude: [",
          "15:     'tests/**/*',",
          "16:     'e2e/**/*',",
          "17:     'coverage/**/*',",
          "18:     'coverage-e2e/**/*',",
          "19:     'coverage-unit/**/*',",
          "20:    ],",
          "21:    thresholds: {",
          "22:     statements: 20.0,",
          "23:     branches: 50.0,",
          "24:     functions: 10.0,",
          "25:     lines: 20.0,",
          "26:    },",
          "27:    reportsDirectory: 'coverage-e2e',",
          "28:   },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f73ba8530e2568c9fd4060954a0ce1b37ae19a2",
      "candidate_info": {
        "commit_hash": "4f73ba8530e2568c9fd4060954a0ce1b37ae19a2",
        "repo": "KindSpells/astro-shield",
        "commit_url": "https://github.com/KindSpells/astro-shield/commit/4f73ba8530e2568c9fd4060954a0ce1b37ae19a2",
        "files": [
          "src/core.mjs",
          "tests/core.test.mts"
        ],
        "message": "feat: guard against inline res for ssr pass\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
        "before_after_code_files": [
          "src/core.mjs||src/core.mjs",
          "tests/core.test.mts||tests/core.test.mts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core.mjs||src/core.mjs",
            "tests/core.test.mts||tests/core.test.mts"
          ],
          "candidate": [
            "src/core.mjs||src/core.mjs",
            "tests/core.test.mts||tests/core.test.mts"
          ]
        }
      },
      "candidate_diff": {
        "src/core.mjs||src/core.mjs": [
          "File: src/core.mjs -> src/core.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "241: export const updateDynamicPageSriHashes = async (",
          "242:  logger,",
          "243:  content,",
          "244:  globalHashes,",
          "245: ) => {",
          "246:  const processors = getRegexProcessors()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:  sri",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:   styles: new Set(),",
          "254:  })",
          "258:   while ((match = regex.exec(content)) !== null) {",
          "259:    const attrs = match.groups?.attrs ?? ''",
          "",
          "[Removed Lines]",
          "256:  for (const { attrsRegex, hasContent, regex, replacer, t2 } of processors) {",
          "",
          "[Added Lines]",
          "257:  for (const { attrsRegex, hasContent, regex, replacer, t, t2 } of processors) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:    }",
          "347:    if (hasContent && !sriHash) {",
          "350:    }",
          "352:    if (sriHash) {",
          "",
          "[Removed Lines]",
          "348:     sriHash = generateSRIHash(content)",
          "349:     pageHashes[t2].add(sriHash)",
          "",
          "[Added Lines]",
          "350:     if (",
          "351:      ((sri?.allowInlineScripts ?? 'all') === 'all' && t === 'Script') ||",
          "352:      ((sri?.allowInlineStyles ?? 'all') === 'all' && t === 'Style')",
          "353:     ) {",
          "354:      sriHash = generateSRIHash(content)",
          "355:      pageHashes[t2].add(sriHash)",
          "356:     } else {",
          "357:      logger.warn(",
          "358:       `Skipping SRI hash generation for inline ${t.toLowerCase()} (inline ${t2} are disabled)`,",
          "359:      )",
          "360:     }",
          "",
          "---------------"
        ],
        "tests/core.test.mts||tests/core.test.mts": [
          "File: tests/core.test.mts -> tests/core.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     <title>My Test Page</title>",
          "363:    </head>",
          "364:    <body>",
          "366:    </body>",
          "367:   </html>`",
          "",
          "[Removed Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-s3wSlNdTTOw87Nt6ZwYwxtjXOACkAFp+bNCiIBHLfus=\"></script>",
          "",
          "[Added Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-vSvqa4zN5DZN/gOtz1s6Xuw0MUYNKQXvUPL8pXWgHGo=\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:   expect(h.extScriptHashes.size).toBe(1)",
          "380:   expect(",
          "381:    h.extScriptHashes.has(",
          "383:    ),",
          "384:   ).toBe(true)",
          "385:   expect(h.inlineScriptHashes.size).toBe(0)",
          "",
          "[Removed Lines]",
          "382:     'sha256-s3wSlNdTTOw87Nt6ZwYwxtjXOACkAFp+bNCiIBHLfus=',",
          "",
          "[Added Lines]",
          "382:     'sha256-vSvqa4zN5DZN/gOtz1s6Xuw0MUYNKQXvUPL8pXWgHGo=',",
          "",
          "---------------"
        ]
      }
    }
  ]
}