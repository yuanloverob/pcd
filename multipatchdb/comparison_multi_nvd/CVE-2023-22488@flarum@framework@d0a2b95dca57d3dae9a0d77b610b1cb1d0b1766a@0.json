{
  "cve_id": "CVE-2023-22488",
  "cve_desc": "Flarum is a forum software for building communities. Using the notifications feature, one can read restricted/private content and bypass access checks that would be in place for such content. The notification-sending component does not check that the subject of the notification can be seen by the receiver, and proceeds to send notifications through their different channels. The alerts do not leak data despite this as they are listed based on a visibility check, however, emails are still sent out. This means that, for extensions which restrict access to posts, any actor can bypass the restriction by subscribing to the discussion if the Subscriptions extension is enabled. The attack allows the leaking of some posts in the forum database, including posts awaiting approval, posts in tags the user has no access to if they could subscribe to a discussion before it becomes private, and posts restricted by third-party extensions. All Flarum versions prior to v1.6.3 are affected. The vulnerability has been fixed and published as flarum/core v1.6.3. All communities running Flarum should upgrade as soon as possible to v1.6.3. As a workaround, disable the Flarum Subscriptions extension or disable email notifications altogether. There are no other supported workarounds for this issue for Flarum versions below 1.6.3.",
  "repo": "flarum/framework",
  "patch_hash": "d0a2b95dca57d3dae9a0d77b610b1cb1d0b1766a",
  "patch_info": {
    "commit_hash": "d0a2b95dca57d3dae9a0d77b610b1cb1d0b1766a",
    "repo": "flarum/framework",
    "commit_url": "https://github.com/flarum/framework/commit/d0a2b95dca57d3dae9a0d77b610b1cb1d0b1766a",
    "files": [
      "framework/core/src/Notification/NotificationSyncer.php",
      "framework/core/tests/integration/notification/NotificationSyncerTest.php"
    ],
    "message": "Merge pull request from GHSA-8gcg-vwmw-rxj4\n\n* fix: notifications grant access to private data of posts\n\n* chore: fix tests\n\n* test: start with tests about notification subject visibility\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\n\n* fix: check subject access before sending notification to user\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\nCo-authored-by: Dani\u00ebl Klabbers <daniel@klabbers.email>",
    "before_after_code_files": [
      "framework/core/src/Notification/NotificationSyncer.php||framework/core/src/Notification/NotificationSyncer.php",
      "framework/core/tests/integration/notification/NotificationSyncerTest.php||framework/core/tests/integration/notification/NotificationSyncerTest.php"
    ]
  },
  "patch_diff": {
    "framework/core/src/Notification/NotificationSyncer.php||framework/core/src/Notification/NotificationSyncer.php": [
      "File: framework/core/src/Notification/NotificationSyncer.php -> framework/core/src/Notification/NotificationSyncer.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: namespace Flarum\\Notification;",
      "12: use Flarum\\Notification\\Blueprint\\BlueprintInterface;",
      "13: use Flarum\\Notification\\Driver\\NotificationDriverInterface;",
      "14: use Flarum\\User\\User;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: use Flarum\\Database\\AbstractModel;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:                 continue;",
      "75:             }",
      "77:             $existing = $toDelete->first(function ($notification) use ($user) {",
      "78:                 return $notification->user_id === $user->id;",
      "79:             });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80:             if (! $this->userCanSeeSubject($user, $blueprint->getSubject())) {",
      "81:                 continue;",
      "82:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "161:         Notification::whereIn('id', $ids)->update(['is_deleted' => $isDeleted]);",
      "162:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "174:     protected function userCanSeeSubject(User $user, ?AbstractModel $subject): bool",
      "175:     {",
      "176:         if ($subject && method_exists($subject, 'registerVisibilityScoper')) {",
      "177:             return (bool) $subject->newQuery()->whereVisibleTo($user)->find($subject->id);",
      "178:         }",
      "180:         return true;",
      "181:     }",
      "",
      "---------------"
    ],
    "framework/core/tests/integration/notification/NotificationSyncerTest.php||framework/core/tests/integration/notification/NotificationSyncerTest.php": [
      "File: framework/core/tests/integration/notification/NotificationSyncerTest.php -> framework/core/tests/integration/notification/NotificationSyncerTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "10: namespace Flarum\\Tests\\integration\\notification;",
      "12: use Carbon\\Carbon;",
      "13: use Flarum\\Api\\Serializer\\BasicDiscussionSerializer;",
      "14: use Flarum\\Api\\Serializer\\BasicPostSerializer;",
      "15: use Flarum\\Database\\AbstractModel;",
      "16: use Flarum\\Discussion\\Discussion;",
      "17: use Flarum\\Extend;",
      "18: use Flarum\\Notification\\Blueprint\\BlueprintInterface;",
      "19: use Flarum\\Notification\\Notification;",
      "20: use Flarum\\Notification\\NotificationSyncer;",
      "21: use Flarum\\Post\\Post;",
      "22: use Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;",
      "23: use Flarum\\Testing\\integration\\TestCase;",
      "24: use Flarum\\User\\User;",
      "26: class NotificationSyncerTest extends TestCase",
      "27: {",
      "28:     use RetrievesAuthorizedUsers;",
      "30:     protected function setUp(): void",
      "31:     {",
      "32:         parent::setUp();",
      "34:         $this->prepareDatabase([",
      "35:             'users' => [",
      "36:                 $this->normalUser(),",
      "37:                 ['id' => 3, 'username' => 'Receiver', 'email' => 'receiver@machine.local', 'is_email_confirmed' => 1],",
      "38:             ],",
      "39:             'discussions' => [",
      "40:                 ['id' => 1, 'title' => 'Public discussion', 'created_at' => Carbon::parse('2021-11-01 13:00:00')->toDateTimeString(), 'user_id' => 2, 'first_post_id' => 1, 'comment_count' => 2, 'is_private' => 0, 'last_post_number' => 2],",
      "42:                 ['id' => 2, 'title' => 'Private discussion', 'created_at' => Carbon::parse('2021-11-01 13:00:00')->toDateTimeString(), 'user_id' => 2, 'first_post_id' => 3, 'comment_count' => 2, 'is_private' => 1, 'last_post_number' => 2],",
      "43:             ],",
      "44:             'posts' => [",
      "45:                 ['id' => 1, 'discussion_id' => 1, 'number' => 1, 'created_at' => Carbon::parse('2021-11-01 13:00:00')->toDateTimeString(), 'user_id' => 2, 'type' => 'comment', 'content' => '<t></t>', 'is_private' => 0],",
      "46:                 ['id' => 2, 'discussion_id' => 1, 'number' => 2, 'created_at' => Carbon::parse('2021-11-01 13:00:03')->toDateTimeString(), 'user_id' => 2, 'type' => 'comment', 'content' => '<t></t>', 'is_private' => 1],",
      "48:                 ['id' => 3, 'discussion_id' => 2, 'number' => 1, 'created_at' => Carbon::parse('2021-11-01 13:00:00')->toDateTimeString(), 'user_id' => 2, 'type' => 'comment', 'content' => '<t></t>', 'is_private' => 0],",
      "49:             ],",
      "50:         ]);",
      "51:     }",
      "58:     public function can_receive_notification_for_visible_subjects(string $subjectClass, int $subjectId, string $serializer)",
      "59:     {",
      "60:         $this->expect_notification_count_from_sending_notification_type_with_subject(",
      "61:             2,",
      "62:             $subjectClass,",
      "63:             $subjectId,",
      "64:             $serializer",
      "65:         );",
      "66:     }",
      "73:     public function cannot_receive_notification_for_restricted_subjects(string $subjectClass, int $subjectId, string $serializer)",
      "74:     {",
      "75:         $this->expect_notification_count_from_sending_notification_type_with_subject(",
      "76:             0,",
      "77:             $subjectClass,",
      "78:             $subjectId,",
      "79:             $serializer",
      "80:         );",
      "81:     }",
      "86:     protected function expect_notification_count_from_sending_notification_type_with_subject(int $count, string $subjectClass, int $subjectId, string $serializer)",
      "87:     {",
      "88:         CustomNotificationType::$subjectModel = $subjectClass;",
      "90:         $this->extend(",
      "91:             (new Extend\\Notification())",
      "92:                 ->type(CustomNotificationType::class, $serializer, ['alert'])",
      "93:         );",
      "96:         $syncer = $this->app()->getContainer()->make(NotificationSyncer::class);",
      "98:         $subject = $subjectClass::query()->find($subjectId);",
      "100:         $syncer->sync(",
      "101:             $blueprint = new CustomNotificationType($subject),",
      "102:             User::query()",
      "103:                 ->whereIn('id', [1, 3])",
      "104:                 ->get()",
      "105:                 ->all()",
      "106:         );",
      "108:         $this->assertEquals(",
      "109:             $count,",
      "110:             Notification::query()",
      "111:                 ->matchingBlueprint($blueprint)",
      "112:                 ->whereSubject($subject)",
      "113:                 ->count()",
      "114:         );",
      "115:     }",
      "117:     protected function visibleSubjectsProvider()",
      "118:     {",
      "119:         return [",
      "120:             [Post::class, 1, BasicPostSerializer::class],",
      "121:             [Discussion::class, 1, BasicDiscussionSerializer::class],",
      "122:         ];",
      "123:     }",
      "125:     protected function invisibleSubjectsProvider()",
      "126:     {",
      "127:         return [",
      "128:             [Post::class, 2, BasicPostSerializer::class],",
      "129:             [Discussion::class, 2, BasicDiscussionSerializer::class],",
      "130:             [Post::class, 3, BasicPostSerializer::class],",
      "131:         ];",
      "132:     }",
      "133: }",
      "135: class CustomNotificationType implements BlueprintInterface",
      "136: {",
      "137:     protected $subject;",
      "138:     public static $subjectModel;",
      "140:     public function __construct($subject)",
      "141:     {",
      "142:         $this->subject = $subject;",
      "143:     }",
      "145:     public function getFromUser()",
      "146:     {",
      "147:         return null;",
      "148:     }",
      "150:     public function getSubject()",
      "151:     {",
      "152:         return $this->subject;",
      "153:     }",
      "155:     public function getData()",
      "156:     {",
      "157:         return [];",
      "158:     }",
      "160:     public static function getType()",
      "161:     {",
      "162:         return 'customNotificationType';",
      "163:     }",
      "165:     public static function getSubjectModel()",
      "166:     {",
      "167:         return self::$subjectModel;",
      "168:     }",
      "169: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a131e87911b6c0499c2f0472d985164f5ff0c3c4",
      "candidate_info": {
        "commit_hash": "a131e87911b6c0499c2f0472d985164f5ff0c3c4",
        "repo": "flarum/framework",
        "commit_url": "https://github.com/flarum/framework/commit/a131e87911b6c0499c2f0472d985164f5ff0c3c4",
        "files": [
          "framework/core/src/Notification/NotificationSyncer.php",
          "framework/core/tests/integration/notification/NotificationSyncerTest.php"
        ],
        "message": "Merge pull request from GHSA-8gcg-vwmw-rxj4\n\n* fix: notifications grant access to private data of posts\n\n* chore: fix tests\n\n* test: start with tests about notification subject visibility\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\n\n* fix: check subject access before sending notification to user\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\nCo-authored-by: Dani\u00ebl Klabbers <daniel@klabbers.email>",
        "before_after_code_files": [
          "framework/core/src/Notification/NotificationSyncer.php||framework/core/src/Notification/NotificationSyncer.php",
          "framework/core/tests/integration/notification/NotificationSyncerTest.php||framework/core/tests/integration/notification/NotificationSyncerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "framework/core/src/Notification/NotificationSyncer.php||framework/core/src/Notification/NotificationSyncer.php",
            "framework/core/tests/integration/notification/NotificationSyncerTest.php||framework/core/tests/integration/notification/NotificationSyncerTest.php"
          ],
          "candidate": [
            "framework/core/src/Notification/NotificationSyncer.php||framework/core/src/Notification/NotificationSyncer.php",
            "framework/core/tests/integration/notification/NotificationSyncerTest.php||framework/core/tests/integration/notification/NotificationSyncerTest.php"
          ]
        }
      },
      "candidate_diff": {
        "framework/core/src/Notification/NotificationSyncer.php||framework/core/src/Notification/NotificationSyncer.php": [
          "File: framework/core/src/Notification/NotificationSyncer.php -> framework/core/src/Notification/NotificationSyncer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: namespace Flarum\\Notification;",
          "12: use Flarum\\Notification\\Blueprint\\BlueprintInterface;",
          "13: use Flarum\\Notification\\Driver\\NotificationDriverInterface;",
          "14: use Flarum\\User\\User;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: use Flarum\\Database\\AbstractModel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:                 continue;",
          "75:             }",
          "77:             $existing = $toDelete->first(function ($notification) use ($user) {",
          "78:                 return $notification->user_id === $user->id;",
          "79:             });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:             if (! $this->userCanSeeSubject($user, $blueprint->getSubject())) {",
          "81:                 continue;",
          "82:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:         Notification::whereIn('id', $ids)->update(['is_deleted' => $isDeleted]);",
          "162:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:     protected function userCanSeeSubject(User $user, ?AbstractModel $subject): bool",
          "175:     {",
          "176:         if ($subject && method_exists($subject, 'registerVisibilityScoper')) {",
          "177:             return (bool) $subject->newQuery()->whereVisibleTo($user)->find($subject->id);",
          "178:         }",
          "180:         return true;",
          "181:     }",
          "",
          "---------------"
        ],
        "framework/core/tests/integration/notification/NotificationSyncerTest.php||framework/core/tests/integration/notification/NotificationSyncerTest.php": [
          "File: framework/core/tests/integration/notification/NotificationSyncerTest.php -> framework/core/tests/integration/notification/NotificationSyncerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "10: namespace Flarum\\Tests\\integration\\notification;",
          "12: use Carbon\\Carbon;",
          "13: use Flarum\\Api\\Serializer\\BasicDiscussionSerializer;",
          "14: use Flarum\\Api\\Serializer\\BasicPostSerializer;",
          "15: use Flarum\\Database\\AbstractModel;",
          "16: use Flarum\\Discussion\\Discussion;",
          "17: use Flarum\\Extend;",
          "18: use Flarum\\Notification\\Blueprint\\BlueprintInterface;",
          "19: use Flarum\\Notification\\Notification;",
          "20: use Flarum\\Notification\\NotificationSyncer;",
          "21: use Flarum\\Post\\Post;",
          "22: use Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;",
          "23: use Flarum\\Testing\\integration\\TestCase;",
          "24: use Flarum\\User\\User;",
          "26: class NotificationSyncerTest extends TestCase",
          "27: {",
          "28:     use RetrievesAuthorizedUsers;",
          "30:     protected function setUp(): void",
          "31:     {",
          "32:         parent::setUp();",
          "34:         $this->prepareDatabase([",
          "35:             'users' => [",
          "36:                 $this->normalUser(),",
          "37:                 ['id' => 3, 'username' => 'Receiver', 'email' => 'receiver@machine.local', 'is_email_confirmed' => 1],",
          "38:             ],",
          "39:             'discussions' => [",
          "40:                 ['id' => 1, 'title' => 'Public discussion', 'created_at' => Carbon::parse('2021-11-01 13:00:00')->toDateTimeString(), 'user_id' => 2, 'first_post_id' => 1, 'comment_count' => 2, 'is_private' => 0, 'last_post_number' => 2],",
          "42:                 ['id' => 2, 'title' => 'Private discussion', 'created_at' => Carbon::parse('2021-11-01 13:00:00')->toDateTimeString(), 'user_id' => 2, 'first_post_id' => 3, 'comment_count' => 2, 'is_private' => 1, 'last_post_number' => 2],",
          "43:             ],",
          "44:             'posts' => [",
          "45:                 ['id' => 1, 'discussion_id' => 1, 'number' => 1, 'created_at' => Carbon::parse('2021-11-01 13:00:00')->toDateTimeString(), 'user_id' => 2, 'type' => 'comment', 'content' => '<t></t>', 'is_private' => 0],",
          "46:                 ['id' => 2, 'discussion_id' => 1, 'number' => 2, 'created_at' => Carbon::parse('2021-11-01 13:00:03')->toDateTimeString(), 'user_id' => 2, 'type' => 'comment', 'content' => '<t></t>', 'is_private' => 1],",
          "48:                 ['id' => 3, 'discussion_id' => 2, 'number' => 1, 'created_at' => Carbon::parse('2021-11-01 13:00:00')->toDateTimeString(), 'user_id' => 2, 'type' => 'comment', 'content' => '<t></t>', 'is_private' => 0],",
          "49:             ],",
          "50:         ]);",
          "51:     }",
          "58:     public function can_receive_notification_for_visible_subjects(string $subjectClass, int $subjectId, string $serializer)",
          "59:     {",
          "60:         $this->expect_notification_count_from_sending_notification_type_with_subject(",
          "61:             2,",
          "62:             $subjectClass,",
          "63:             $subjectId,",
          "64:             $serializer",
          "65:         );",
          "66:     }",
          "73:     public function cannot_receive_notification_for_restricted_subjects(string $subjectClass, int $subjectId, string $serializer)",
          "74:     {",
          "75:         $this->expect_notification_count_from_sending_notification_type_with_subject(",
          "76:             0,",
          "77:             $subjectClass,",
          "78:             $subjectId,",
          "79:             $serializer",
          "80:         );",
          "81:     }",
          "86:     protected function expect_notification_count_from_sending_notification_type_with_subject(int $count, string $subjectClass, int $subjectId, string $serializer)",
          "87:     {",
          "88:         CustomNotificationType::$subjectModel = $subjectClass;",
          "90:         $this->extend(",
          "91:             (new Extend\\Notification())",
          "92:                 ->type(CustomNotificationType::class, $serializer, ['alert'])",
          "93:         );",
          "96:         $syncer = $this->app()->getContainer()->make(NotificationSyncer::class);",
          "98:         $subject = $subjectClass::query()->find($subjectId);",
          "100:         $syncer->sync(",
          "101:             $blueprint = new CustomNotificationType($subject),",
          "102:             User::query()",
          "103:                 ->whereIn('id', [1, 3])",
          "104:                 ->get()",
          "105:                 ->all()",
          "106:         );",
          "108:         $this->assertEquals(",
          "109:             $count,",
          "110:             Notification::query()",
          "111:                 ->matchingBlueprint($blueprint)",
          "112:                 ->whereSubject($subject)",
          "113:                 ->count()",
          "114:         );",
          "115:     }",
          "117:     protected function visibleSubjectsProvider()",
          "118:     {",
          "119:         return [",
          "120:             [Post::class, 1, BasicPostSerializer::class],",
          "121:             [Discussion::class, 1, BasicDiscussionSerializer::class],",
          "122:         ];",
          "123:     }",
          "125:     protected function invisibleSubjectsProvider()",
          "126:     {",
          "127:         return [",
          "128:             [Post::class, 2, BasicPostSerializer::class],",
          "129:             [Discussion::class, 2, BasicDiscussionSerializer::class],",
          "130:             [Post::class, 3, BasicPostSerializer::class],",
          "131:         ];",
          "132:     }",
          "133: }",
          "135: class CustomNotificationType implements BlueprintInterface",
          "136: {",
          "137:     protected $subject;",
          "138:     public static $subjectModel;",
          "140:     public function __construct($subject)",
          "141:     {",
          "142:         $this->subject = $subject;",
          "143:     }",
          "145:     public function getFromUser()",
          "146:     {",
          "147:         return null;",
          "148:     }",
          "150:     public function getSubject()",
          "151:     {",
          "152:         return $this->subject;",
          "153:     }",
          "155:     public function getData()",
          "156:     {",
          "157:         return [];",
          "158:     }",
          "160:     public static function getType()",
          "161:     {",
          "162:         return 'customNotificationType';",
          "163:     }",
          "165:     public static function getSubjectModel()",
          "166:     {",
          "167:         return self::$subjectModel;",
          "168:     }",
          "169: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}