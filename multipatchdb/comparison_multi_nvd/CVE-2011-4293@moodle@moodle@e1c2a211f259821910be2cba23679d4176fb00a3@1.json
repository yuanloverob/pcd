{
  "cve_id": "CVE-2011-4293",
  "cve_desc": "The theme implementation in Moodle 2.0.x before 2.0.4 and 2.1.x before 2.1.1 triggers duplicate caching of Cascading Style Sheets (CSS) and JavaScript content, which allows remote attackers to bypass intended access restrictions and write to an operating-system temporary directory via unspecified vectors.",
  "repo": "moodle/moodle",
  "patch_hash": "e1c2a211f259821910be2cba23679d4176fb00a3",
  "patch_info": {
    "commit_hash": "e1c2a211f259821910be2cba23679d4176fb00a3",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/e1c2a211f259821910be2cba23679d4176fb00a3",
    "files": [
      "theme/javascript.php",
      "theme/styles.php"
    ],
    "message": "MDL-28147 do not double cache theme css/js",
    "before_after_code_files": [
      "theme/javascript.php||theme/javascript.php",
      "theme/styles.php||theme/styles.php"
    ]
  },
  "patch_diff": {
    "theme/javascript.php||theme/javascript.php": [
      "File: theme/javascript.php -> theme/javascript.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "118: }",
      "120: function minify($files) {",
      "123:     if (0 === stripos(PHP_OS, 'win')) {",
      "124:         Minify::setDocRoot(); // IIS may need help",
      "125:     }",
      "128:     $options = array(",
      "129:         'bubbleCssImports' => false,",
      "",
      "[Removed Lines]",
      "121:     global $CFG;",
      "126:     Minify::setCache('', true);",
      "",
      "[Added Lines]",
      "125:     Minify::setCache(null, false);",
      "",
      "---------------"
    ],
    "theme/styles.php||theme/styles.php": [
      "File: theme/styles.php -> theme/styles.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "160:     if (0 === stripos(PHP_OS, 'win')) {",
      "161:         Minify::setDocRoot(); // IIS may need help",
      "162:     }",
      "165:     $options = array(",
      "166:         'bubbleCssImports' => false,",
      "",
      "[Removed Lines]",
      "163:     Minify::setCache('', true);",
      "",
      "[Added Lines]",
      "164:     Minify::setCache(null, false);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ccc0fff941a903a135c9bf17a88d5f3436b7c67a",
      "candidate_info": {
        "commit_hash": "ccc0fff941a903a135c9bf17a88d5f3436b7c67a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ccc0fff941a903a135c9bf17a88d5f3436b7c67a",
        "files": [
          "theme/image.php",
          "theme/javascript.php",
          "theme/styles.php",
          "theme/yui_combo.php"
        ],
        "message": "MDL-28709: Performance: Send cache/contenttype headers with 304 responses",
        "before_after_code_files": [
          "theme/image.php||theme/image.php",
          "theme/javascript.php||theme/javascript.php",
          "theme/styles.php||theme/styles.php",
          "theme/yui_combo.php||theme/yui_combo.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "theme/javascript.php||theme/javascript.php",
            "theme/styles.php||theme/styles.php"
          ],
          "candidate": [
            "theme/javascript.php||theme/javascript.php",
            "theme/styles.php||theme/styles.php"
          ]
        }
      },
      "candidate_diff": {
        "theme/image.php||theme/image.php": [
          "File: theme/image.php -> theme/image.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     $cacheimage = false;",
          "57:     if (file_exists(\"$candidatelocation/$image.gif\")) {",
          "58:         $cacheimage = \"$candidatelocation/$image.gif\";",
          "59:     } else if (file_exists(\"$candidatelocation/$image.png\")) {",
          "60:         $cacheimage = \"$candidatelocation/$image.png\";",
          "61:     } else if (file_exists(\"$candidatelocation/$image.jpg\")) {",
          "62:         $cacheimage = \"$candidatelocation/$image.jpg\";",
          "63:     } else if (file_exists(\"$candidatelocation/$image.jpeg\")) {",
          "64:         $cacheimage = \"$candidatelocation/$image.jpeg\";",
          "65:     } else if (file_exists(\"$candidatelocation/$image.ico\")) {",
          "66:         $cacheimage = \"$candidatelocation/$image.ico\";",
          "67:     }",
          "68:     if ($cacheimage) {",
          "69:         if (!empty($_SERVER['HTTP_IF_NONE_MATCH'])) {",
          "72:             header('HTTP/1.1 304 Not Modified');",
          "73:             die;",
          "74:         }",
          "75:         send_cached_image($cacheimage, $rev);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:         $ext = 'gif';",
          "62:         $ext = 'png';",
          "65:         $ext = 'jpg';",
          "68:         $ext = 'jpeg';",
          "71:         $ext = 'ico';",
          "79:             $lifetime = 60*60*24*30; // 30 days",
          "80:             $mimetype = get_contenttype_from_ext($ext);",
          "81:             header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "82:             header('Cache-Control: max-age='.$lifetime);",
          "83:             header('Content-Type: '.$mimetype);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:     $pathinfo = pathinfo($imagepath);",
          "126:     $imagename = $pathinfo['filename'].'.'.$pathinfo['extension'];",
          "137:     header('Etag: '.md5(\"$rev/$imagepath\"));",
          "138:     header('Content-Disposition: inline; filename=\"'.$imagename.'\"');",
          "",
          "[Removed Lines]",
          "128:     switch($pathinfo['extension']) {",
          "129:         case 'gif'  : $mimetype = 'image/gif'; break;",
          "130:         case 'png'  : $mimetype = 'image/png'; break;",
          "131:         case 'jpg'  : $mimetype = 'image/jpeg'; break;",
          "132:         case 'jpeg' : $mimetype = 'image/jpeg'; break;",
          "133:         case 'ico'  : $mimetype = 'image/vnd.microsoft.icon'; break;",
          "134:         default: $mimetype = 'document/unknown';",
          "135:     }",
          "",
          "[Added Lines]",
          "139:     $mimetype = get_contenttype_from_ext($pathinfo['extension']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:     $pathinfo = pathinfo($imagepath);",
          "155:     $imagename = $pathinfo['filename'].'.'.$pathinfo['extension'];",
          "166:     header('Content-Disposition: inline; filename=\"'.$imagename.'\"');",
          "167:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', time()) .' GMT');",
          "",
          "[Removed Lines]",
          "157:     switch($pathinfo['extension']) {",
          "158:         case 'gif'  : $mimetype = 'image/gif'; break;",
          "159:         case 'png'  : $mimetype = 'image/png'; break;",
          "160:         case 'jpg'  : $mimetype = 'image/jpeg'; break;",
          "161:         case 'jpeg' : $mimetype = 'image/jpeg'; break;",
          "162:         case 'ico'  : $mimetype = 'image/vnd.microsoft.icon'; break;",
          "163:         default: $mimetype = 'document/unknown';",
          "164:     }",
          "",
          "[Added Lines]",
          "161:     $mimetype = get_contenttype_from_ext($pathinfo['extension']);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178: function image_not_found() {",
          "179:     header('HTTP/1.0 404 not found');",
          "180:     die('Image was not found, sorry.');",
          "",
          "[Removed Lines]",
          "181: }",
          "",
          "[Added Lines]",
          "180: function get_contenttype_from_ext($ext) {",
          "181:     switch ($ext) {",
          "182:         case 'gif':",
          "183:             return 'image/gif';",
          "184:         case 'png':",
          "185:             return 'image/png';",
          "186:         case 'jpg':",
          "187:         case 'jpeg':",
          "188:             return 'image/jpeg';",
          "189:         case 'ico':",
          "190:             return 'image/vnd.microsoft.icon';",
          "191:     }",
          "192:     return 'document/unknown';",
          "193: }",
          "",
          "---------------"
        ],
        "theme/javascript.php||theme/javascript.php": [
          "File: theme/javascript.php -> theme/javascript.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         header('HTTP/1.1 304 Not Modified');",
          "56:         die;",
          "57:     }",
          "58:     send_cached_js($candidate, $rev);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:         $lifetime = 60*60*24*30; // 30 days",
          "57:         header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "58:         header('Cache-Control: max-age='.$lifetime);",
          "59:         header('Content-Type: application/javascript; charset=utf-8');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: function send_cached_js($jspath) {",
          "93:     header('Content-Disposition: inline; filename=\"javascript.php\"');",
          "94:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', filemtime($jspath)) .' GMT');",
          "95:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "96:     header('Pragma: ');",
          "97:     header('Accept-Ranges: none');",
          "98:     header('Content-Type: application/javascript; charset=utf-8');",
          "99:     if (!min_enable_zlib_compression()) {",
          "",
          "[Removed Lines]",
          "91:     $lifetime = 60*60*24*20;",
          "",
          "[Added Lines]",
          "95:     $lifetime = 60*60*24*30; // 30 days",
          "101:     header('Cache-Control: max-age='.$lifetime);",
          "",
          "---------------"
        ],
        "theme/styles.php||theme/styles.php": [
          "File: theme/styles.php -> theme/styles.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         header('HTTP/1.1 304 Not Modified');",
          "60:         die;",
          "61:     }",
          "62:     send_cached_css($candidatesheet, $rev);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:         $lifetime = 60*60*24*30; // 30 days",
          "61:         header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "62:         header('Cache-Control: max-age='.$lifetime);",
          "63:         header('Content-Type: text/css; charset=utf-8');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116: }",
          "118: function send_ie_css($themename, $rev) {",
          "121:     $css = <<<EOF",
          "",
          "[Removed Lines]",
          "119:     $lifetime = 60*60*24*3;",
          "",
          "[Added Lines]",
          "123:     $lifetime = 60*60*24*30; // 30 days",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', time()) .' GMT');",
          "132:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "133:     header('Pragma: ');",
          "134:     header('Accept-Ranges: none');",
          "135:     header('Content-Type: text/css; charset=utf-8');",
          "136:     header('Content-Length: '.strlen($css));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:     header('Cache-Control: max-age='.$lifetime);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140: }",
          "142: function send_cached_css($csspath, $rev) {",
          "145:     header('Content-Disposition: inline; filename=\"styles.php\"');",
          "146:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', filemtime($csspath)) .' GMT');",
          "147:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "148:     header('Pragma: ');",
          "149:     header('Accept-Ranges: none');",
          "150:     header('Content-Type: text/css; charset=utf-8');",
          "151:     if (!min_enable_zlib_compression()) {",
          "",
          "[Removed Lines]",
          "143:     $lifetime = 60*60*24*20;",
          "",
          "[Added Lines]",
          "148:     $lifetime = 60*60*24*30; // 30 days",
          "154:     header('Cache-Control: max-age='.$lifetime);",
          "",
          "---------------"
        ],
        "theme/yui_combo.php||theme/yui_combo.php": [
          "File: theme/yui_combo.php -> theme/yui_combo.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     combo_not_found();",
          "46: }",
          "48: $parts = explode('&', $parts);",
          "49: $cache = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: if (!empty($_SERVER['HTTP_IF_NONE_MATCH']) || !empty($_SERVER['HTTP_IF_MODIFIED_SINCE'])) {",
          "52:     header('HTTP/1.1 304 Not Modified');",
          "53:     $lifetime = 60*60*24*30; // 30 days",
          "54:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "55:     header('Cache-Control: max-age='.$lifetime);",
          "56:     header('Content-Type: '.$mimetype);",
          "57:     die;",
          "58: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126: function combo_send_cached($content, $mimetype) {",
          "129:     header('Content-Disposition: inline; filename=\"combo\"');",
          "130:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', time()) .' GMT');",
          "131:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "132:     header('Pragma: ');",
          "134:     header('Accept-Ranges: none');",
          "135:     header('Content-Type: '.$mimetype);",
          "136:     if (!min_enable_zlib_compression()) {",
          "",
          "[Removed Lines]",
          "127:     $lifetime = 60*60*24*300; // 300 days === forever",
          "133:     header('Cache-Control: max-age=315360000');",
          "",
          "[Added Lines]",
          "139:     $lifetime = 60*60*24*30; // 30 days",
          "145:     header('Cache-Control: max-age='.$lifetime);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1f582d99c50e8d5622329c76716ab46a54109ef",
      "candidate_info": {
        "commit_hash": "d1f582d99c50e8d5622329c76716ab46a54109ef",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/d1f582d99c50e8d5622329c76716ab46a54109ef",
        "files": [
          "lib/csslib.php",
          "lib/javascript.php",
          "theme/javascript.php"
        ],
        "message": "MDL-31079 detect js and css minimisation failures",
        "before_after_code_files": [
          "lib/csslib.php||lib/csslib.php",
          "lib/javascript.php||lib/javascript.php",
          "theme/javascript.php||theme/javascript.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "theme/javascript.php||theme/javascript.php"
          ],
          "candidate": [
            "theme/javascript.php||theme/javascript.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/csslib.php||lib/csslib.php": [
          "File: lib/csslib.php -> lib/csslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "198: function css_minify_css($files) {",
          "199:     global $CFG;",
          "201:     set_include_path($CFG->libdir . '/minify/lib' . PATH_SEPARATOR . get_include_path());",
          "202:     require_once('Minify.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:     if (empty($files)) {",
          "202:         return '';",
          "203:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:         'quiet' => true",
          "222:     );",
          "225: }",
          "",
          "[Removed Lines]",
          "223:     $result = Minify::serve('Files', $options);",
          "224:     return $result['content'];",
          "",
          "[Added Lines]",
          "228:     $error = 'unknown';",
          "229:     try {",
          "230:         $result = Minify::serve('Files', $options);",
          "231:         if ($result['success']) {",
          "232:             return $result['content'];",
          "233:         }",
          "234:     } catch (Exception $e) {",
          "235:         $error = $e->getMessage();",
          "236:         $error = str_replace(\"\\r\", ' ', $error);",
          "237:         $error = str_replace(\"\\n\", ' ', $error);",
          "238:     }",
          "241:     $css = <<<EOD",
          "247: EOD;",
          "248:     foreach ($files as $cssfile) {",
          "249:         $css .= file_get_contents($cssfile).\"\\n\";",
          "250:     }",
          "251:     return $css;",
          "",
          "---------------"
        ],
        "lib/javascript.php||lib/javascript.php": [
          "File: lib/javascript.php -> lib/javascript.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         'files' => $files",
          "86:     );",
          "90: }",
          "",
          "[Removed Lines]",
          "88:     Minify::serve('Files', $options);",
          "89:     die();",
          "",
          "[Added Lines]",
          "88:     try {",
          "89:         Minify::serve('Files', $options);",
          "90:         die();",
          "91:     } catch (Exception $e) {",
          "92:         $error = $e->getMessage();",
          "93:         $error = str_replace(\"\\r\", ' ', $error);",
          "94:         $error = str_replace(\"\\n\", ' ', $error);",
          "95:     }",
          "98:     $js = <<<EOD",
          "99: try {console.log('Error: Minimisation of javascript failed!');} catch (e) {}",
          "106: EOD;",
          "107:     echo $js;",
          "108:     foreach ($files as $jsfile) {",
          "109:         echo file_get_contents($jsfile).\"\\n\";",
          "110:     }",
          "",
          "---------------"
        ],
        "theme/javascript.php||theme/javascript.php": [
          "File: theme/javascript.php -> theme/javascript.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: }",
          "132: function minify($files) {",
          "133:     if (0 === stripos(PHP_OS, 'win')) {",
          "134:         Minify::setDocRoot(); // IIS may need help",
          "135:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:     if (empty($files)) {",
          "134:         return '';",
          "135:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:         'quiet' => true",
          "151:     );",
          "155: }",
          "",
          "[Removed Lines]",
          "153:     $result = Minify::serve('Files', $options);",
          "154:     return $result['content'];",
          "",
          "[Added Lines]",
          "157:     $error = 'unknown';",
          "158:     try {",
          "159:         $result = Minify::serve('Files', $options);",
          "160:         if ($result['success']) {",
          "161:             return $result['content'];",
          "162:         }",
          "163:     } catch (Exception $e) {",
          "164:         $error = $e->getMessage();",
          "165:         $error = str_replace(\"\\r\", ' ', $error);",
          "166:         $error = str_replace(\"\\n\", ' ', $error);",
          "167:     }",
          "170:     $js = <<<EOD",
          "171: try {console.log('Error: Minimisation of theme javascript failed!');} catch (e) {}",
          "178: EOD;",
          "179:     foreach ($files as $jsfile) {",
          "180:         $js .= file_get_contents($jsfile).\"\\n\";",
          "181:     }",
          "182:     return $js;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e641c7437cc85048eda4304f16cb72b54cc1985",
      "candidate_info": {
        "commit_hash": "0e641c7437cc85048eda4304f16cb72b54cc1985",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0e641c7437cc85048eda4304f16cb72b54cc1985",
        "files": [
          "lib/csslib.php",
          "lib/simpletest/testcsslib.php",
          "theme/styles.php",
          "theme/styles_debug.php"
        ],
        "message": "MDL-29941 csslib: A CSS optimiser has been added to process our mountain of CSS",
        "before_after_code_files": [
          "lib/csslib.php||lib/csslib.php",
          "lib/simpletest/testcsslib.php||lib/simpletest/testcsslib.php",
          "theme/styles.php||theme/styles.php",
          "theme/styles_debug.php||theme/styles_debug.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "theme/styles.php||theme/styles.php"
          ],
          "candidate": [
            "theme/styles.php||theme/styles.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/csslib.php||lib/csslib.php": [
          "File: lib/csslib.php -> lib/csslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "32: function css_store_css(theme_config $theme, $csspath, array $cssfiles) {",
          "33:     $css = '';",
          "34:     foreach ($cssfiles as $file) {",
          "35:         $css .= \"\\n\".file_get_contents($file);",
          "36:     }",
          "37:     $css = $theme->post_process($css);",
          "39:     $optimiser = new css_optimiser;",
          "40:     $css = $optimiser->process($css);",
          "42:     check_dir_exists(dirname($csspath));",
          "43:     $fp = fopen($csspath, 'w');",
          "44:     fwrite($fp, $css);",
          "45:     fclose($fp);",
          "46:     return true;",
          "47: }",
          "55: function css_send_ie_css($themename, $rev) {",
          "56:     $lifetime = 60*60*24*30; // 30 days",
          "58:     $css = \"/** Unfortunately IE6/7 does not support more than 4096 selectors in one CSS file, which means we have to use some ugly hacks :-( **/\";",
          "59:     $css = \"@import url(styles.php?theme=$themename&rev=$rev&type=plugins);\";",
          "60:     $css = \"@import url(styles.php?theme=$themename&rev=$rev&type=parents);\";",
          "61:     $css = \"@import url(styles.php?theme=$themename&rev=$rev&type=theme);\";",
          "63:     header('Etag: '.md5($rev));",
          "64:     header('Content-Disposition: inline; filename=\"styles.php\"');",
          "65:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', time()) .' GMT');",
          "66:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "67:     header('Pragma: ');",
          "68:     header('Cache-Control: max-age='.$lifetime);",
          "69:     header('Accept-Ranges: none');",
          "70:     header('Content-Type: text/css; charset=utf-8');",
          "71:     header('Content-Length: '.strlen($css));",
          "73:     echo $css;",
          "74:     die;",
          "75: }",
          "83: function css_send_cached_css($csspath, $rev) {",
          "84:     $lifetime = 60*60*24*30; // 30 days",
          "86:     header('Content-Disposition: inline; filename=\"styles.php\"');",
          "87:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', filemtime($csspath)) .' GMT');",
          "88:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "89:     header('Pragma: ');",
          "90:     header('Cache-Control: max-age='.$lifetime);",
          "91:     header('Accept-Ranges: none');",
          "92:     header('Content-Type: text/css; charset=utf-8');",
          "93:     if (!min_enable_zlib_compression()) {",
          "94:         header('Content-Length: '.filesize($csspath));",
          "95:     }",
          "97:     readfile($csspath);",
          "98:     die;",
          "99: }",
          "106: function css_send_uncached_css($css) {",
          "108:     header('Content-Disposition: inline; filename=\"styles_debug.php\"');",
          "109:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', time()) .' GMT');",
          "110:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + THEME_DESIGNER_CACHE_LIFETIME) .' GMT');",
          "111:     header('Pragma: ');",
          "112:     header('Accept-Ranges: none');",
          "113:     header('Content-Type: text/css; charset=utf-8');",
          "115:     if (is_array($css)) {",
          "116:         $css = implode(\"\\n\\n\", $css);",
          "117:     }",
          "118:     $css = str_replace(\"\\n\", \"\\r\\n\", $css);",
          "119:     $optimiser = new css_optimiser;",
          "120:     echo $optimiser->process($css);",
          "122:     die;",
          "123: }",
          "128: function css_send_css_not_found() {",
          "129:     header('HTTP/1.0 404 not found');",
          "130:     die('CSS was not found, sorry.');",
          "131: }",
          "141: class css_optimiser {",
          "146:     const PROCESSING_START = 0;",
          "147:     const PROCESSING_SELECTORS = 0;",
          "148:     const PROCESSING_STYLES = 1;",
          "149:     const PROCESSING_COMMENT = 2;",
          "150:     const PROCESSING_ATRULE = 3;",
          "157:     protected $rawstrlen = 0;",
          "158:     protected $commentsincss = 0;",
          "159:     protected $rawrules = 0;",
          "160:     protected $rawselectors = 0;",
          "161:     protected $optimisedstrlen = 0;",
          "162:     protected $optimisedrules = 0;",
          "163:     protected $optimisedselectors = 0;",
          "164:     protected $timestart = 0;",
          "165:     protected $timecomplete = 0;",
          "174:     public function process($css) {",
          "175:         global $CFG;",
          "177:         $this->reset_stats();",
          "178:         $this->timestart = microtime(true);",
          "179:         $this->rawstrlen = strlen($css);",
          "184:         $css = preg_replace('#\\r?\\n#', ' ', $css);",
          "188:         $css = preg_replace('#/\\*(.*?)\\*/#m', '', $css, -1, $this->commentsincss);",
          "190:         $medias = array(",
          "191:             'all' => new css_media()",
          "192:         );",
          "193:         $imports = array();",
          "194:         $charset = false;",
          "196:         $currentprocess = self::PROCESSING_START;",
          "197:         $currentstyle = css_rule::init();",
          "198:         $currentselector = css_selector::init();",
          "199:         $inquotes = false;      // ' or \"",
          "200:         $inbraces = false;      // {",
          "201:         $inbrackets = false;    // [",
          "202:         $inparenthesis = false; // (",
          "203:         $currentmedia = $medias['all'];",
          "204:         $currentatrule = null;",
          "205:         $suspectatrule = false;",
          "207:         $buffer = '';",
          "208:         $char = null;",
          "212:         for ($i = 0; $i < $this->rawstrlen; $i++) {",
          "213:             $lastchar = $char;",
          "214:             $char = substr($css, $i, 1);",
          "215:             if ($char == '@' && $buffer == '') {",
          "216:                 $suspectatrule = true;",
          "217:             }",
          "218:             switch ($currentprocess) {",
          "220:                 case self::PROCESSING_ATRULE:",
          "221:                     switch ($char) {",
          "222:                         case ';':",
          "223:                             if (!$inbraces) {",
          "224:                                 $buffer .= $char;",
          "225:                                 if ($currentatrule == 'import') {",
          "226:                                     $imports[] = $buffer;",
          "227:                                     $currentprocess = self::PROCESSING_SELECTORS;",
          "228:                                 } else if ($currentatrule == 'charset') {",
          "229:                                     $charset = $buffer;",
          "230:                                     $currentprocess = self::PROCESSING_SELECTORS;",
          "231:                                 }",
          "232:                             }",
          "233:                             $buffer = '';",
          "234:                             $currentatrule = false;",
          "235:                             continue 3;",
          "236:                         case '{':",
          "237:                             if ($currentatrule == 'media' && preg_match('#\\s*@media\\s*([a-zA-Z0-9]+(\\s*,\\s*[a-zA-Z0-9]+)*)#', $buffer, $matches)) {",
          "238:                                 $mediatypes = str_replace(' ', '', $matches[1]);",
          "239:                                 if (!array_key_exists($mediatypes, $medias)) {",
          "240:                                     $medias[$mediatypes] = new css_media($mediatypes);",
          "241:                                 }",
          "242:                                 $currentmedia = $medias[$mediatypes];",
          "243:                                 $currentprocess = self::PROCESSING_SELECTORS;",
          "244:                                 $buffer = '';",
          "245:                             }",
          "246:                             continue 3;",
          "247:                     }",
          "248:                     break;",
          "250:                 case self::PROCESSING_START:",
          "251:                 case self::PROCESSING_SELECTORS:",
          "252:                     switch ($char) {",
          "253:                         case '[':",
          "254:                             $inbrackets ++;",
          "255:                             $buffer .= $char;",
          "256:                             continue 3;",
          "257:                         case ']':",
          "258:                             $inbrackets --;",
          "259:                             $buffer .= $char;",
          "260:                             continue 3;",
          "261:                         case ' ':",
          "262:                             if ($inbrackets) {",
          "263:                                 continue 3;",
          "264:                             }",
          "265:                             if (!empty($buffer)) {",
          "266:                                 if ($suspectatrule && preg_match('#@(media|import|charset)\\s*#', $buffer, $matches)) {",
          "267:                                     $currentatrule = $matches[1];",
          "268:                                     $currentprocess = self::PROCESSING_ATRULE;",
          "269:                                     $buffer .= $char;",
          "270:                                 } else {",
          "271:                                     $currentselector->add($buffer);",
          "272:                                     $buffer = '';",
          "273:                                 }",
          "274:                             }",
          "275:                             $suspectatrule = false;",
          "276:                             continue 3;",
          "277:                         case '{':",
          "278:                             if ($inbrackets) {",
          "279:                                 continue 3;",
          "280:                             }",
          "282:                             $currentselector->add($buffer);",
          "283:                             $currentstyle->add_selector($currentselector);",
          "284:                             $currentselector = css_selector::init();",
          "285:                             $currentprocess = self::PROCESSING_STYLES;",
          "287:                             $buffer = '';",
          "288:                             continue 3;",
          "289:                         case '}':",
          "290:                             if ($inbrackets) {",
          "291:                                 continue 3;",
          "292:                             }",
          "293:                             if ($currentatrule == 'media') {",
          "294:                                 $currentmedia = $medias['all'];",
          "295:                                 $currentatrule = false;",
          "296:                                 $buffer = '';",
          "297:                             }",
          "298:                             continue 3;",
          "299:                         case ',':",
          "300:                             if ($inbrackets) {",
          "301:                                 continue 3;",
          "302:                             }",
          "303:                             $currentselector->add($buffer);",
          "304:                             $currentstyle->add_selector($currentselector);",
          "305:                             $currentselector = css_selector::init();",
          "306:                             $buffer = '';",
          "307:                             continue 3;",
          "308:                     }",
          "309:                     break;",
          "311:                 case self::PROCESSING_STYLES:",
          "312:                     if ($char == '\"' || $char == \"'\") {",
          "313:                         if ($inquotes === false) {",
          "314:                             $inquotes = $char;",
          "315:                         }",
          "316:                         if ($inquotes === $char && $lastchar !== '\\\\') {",
          "317:                             $inquotes = false;",
          "318:                         }",
          "319:                     }",
          "320:                     if ($inquotes) {",
          "321:                         $buffer .= $char;",
          "322:                         continue 2;",
          "323:                     }",
          "324:                     switch ($char) {",
          "325:                         case ';':",
          "326:                             $currentstyle->add_style($buffer);",
          "327:                             $buffer = '';",
          "328:                             $inquotes = false;",
          "329:                             continue 3;",
          "330:                         case '}':",
          "331:                             $currentstyle->add_style($buffer);",
          "332:                             $this->rawselectors += $currentstyle->get_selector_count();",
          "334:                             $currentmedia->add_rule($currentstyle);",
          "336:                             $currentstyle = css_rule::init();",
          "337:                             $currentprocess = self::PROCESSING_SELECTORS;",
          "338:                             $this->rawrules++;",
          "339:                             $buffer = '';",
          "340:                             $inquotes = false;",
          "341:                             continue 3;",
          "342:                     }",
          "343:                     break;",
          "344:             }",
          "345:             $buffer .= $char;",
          "346:         }",
          "348:         $css = '';",
          "349:         if (!empty($charset)) {",
          "350:             $imports[] = $charset;",
          "351:         }",
          "352:         if (!empty($imports)) {",
          "353:             $css .= implode(\"\\n\", $imports);",
          "354:             $css .= \"\\n\\n\";",
          "355:         }",
          "356:         foreach ($medias as $media) {",
          "357:             $media->organise_rules_by_selectors();",
          "358:             $this->optimisedrules += $media->count_rules();",
          "359:             $this->optimisedselectors +=  $media->count_selectors();",
          "360:             $css .= $media->out();",
          "361:         }",
          "362:         $this->optimisedstrlen = strlen($css);",
          "364:         $this->timecomplete = microtime(true);",
          "365:         if (!empty($CFG->includecssstats)) {",
          "366:             $css = $this->get_stats().$css;",
          "367:         }",
          "368:         return trim($css);",
          "369:     }",
          "376:     public function get_stats() {",
          "378:         $strlenimprovement = round(($this->optimisedstrlen / $this->rawstrlen) * 100, 1);",
          "379:         $ruleimprovement = round(($this->optimisedrules / $this->rawrules) * 100, 1);",
          "380:         $selectorimprovement = round(($this->optimisedselectors / $this->rawselectors) * 100, 1);",
          "381:         $timetaken = round($this->timecomplete - $this->timestart, 4);",
          "383:         $computedcss  = \"/****************************************\\n\";",
          "384:         $computedcss .= \" *------- CSS Optimisation stats --------\\n\";",
          "385:         $computedcss .= \" *  \".date('r').\"\\n\";",
          "386:         $computedcss .= \" *  {$this->commentsincss}  \\t comments removed\\n\";",
          "387:         $computedcss .= \" *  Optimization took $timetaken seconds\\n\";",
          "388:         $computedcss .= \" *--------------- before ----------------\\n\";",
          "389:         $computedcss .= \" *  {$this->rawstrlen}  \\t chars read in\\n\";",
          "390:         $computedcss .= \" *  {$this->rawrules}  \\t rules read in\\n\";",
          "391:         $computedcss .= \" *  {$this->rawselectors}  \\t total selectors\\n\";",
          "392:         $computedcss .= \" *---------------- after ----------------\\n\";",
          "393:         $computedcss .= \" *  {$this->optimisedstrlen}  \\t chars once optimized\\n\";",
          "394:         $computedcss .= \" *  {$this->optimisedrules}  \\t optimized rules\\n\";",
          "395:         $computedcss .= \" *  {$this->optimisedselectors}  \\t total selectors once optimized\\n\";",
          "396:         $computedcss .= \" *---------------- stats ----------------\\n\";",
          "397:         $computedcss .= \" *  {$strlenimprovement}%  \\t improvement in chars\\n\";",
          "398:         $computedcss .= \" *  {$ruleimprovement}%  \\t improvement in rules\\n\";",
          "399:         $computedcss .= \" *  {$selectorimprovement}%  \\t improvement in selectors\\n\";",
          "400:         $computedcss .= \" ****************************************/\\n\\n\";",
          "402:         return $computedcss;",
          "403:     }",
          "408:     public function reset_stats() {",
          "409:         $this->commentsincss = 0;",
          "410:         $this->optimisedrules = 0;",
          "411:         $this->optimisedselectors = 0;",
          "412:         $this->optimisedstrlen = 0;",
          "413:         $this->rawrules = 0;",
          "414:         $this->rawselectors = 0;",
          "415:         $this->rawstrlen = 0;",
          "416:         $this->timecomplete = 0;",
          "417:         $this->timestart = 0;",
          "418:     }",
          "429:     public static $htmlcolours = array(",
          "430:         'aliceblue' => '#F0F8FF',",
          "431:         'antiquewhite' => '#FAEBD7',",
          "432:         'aqua' => '#00FFFF',",
          "433:         'aquamarine' => '#7FFFD4',",
          "434:         'azure' => '#F0FFFF',",
          "435:         'beige' => '#F5F5DC',",
          "436:         'bisque' => '#FFE4C4',",
          "437:         'black' => '#000000',",
          "438:         'blanchedalmond' => '#FFEBCD',",
          "439:         'blue' => '#0000FF',",
          "440:         'blueviolet' => '#8A2BE2',",
          "441:         'brown' => '#A52A2A',",
          "442:         'burlywood' => '#DEB887',",
          "443:         'cadetblue' => '#5F9EA0',",
          "444:         'chartreuse' => '#7FFF00',",
          "445:         'chocolate' => '#D2691E',",
          "446:         'coral' => '#FF7F50',",
          "447:         'cornflowerblue' => '#6495ED',",
          "448:         'cornsilk' => '#FFF8DC',",
          "449:         'crimson' => '#DC143C',",
          "450:         'cyan' => '#00FFFF',",
          "451:         'darkblue' => '#00008B',",
          "452:         'darkcyan' => '#008B8B',",
          "453:         'darkgoldenrod' => '#B8860B',",
          "454:         'darkgray' => '#A9A9A9',",
          "455:         'darkgrey' => '#A9A9A9',",
          "456:         'darkgreen' => '#006400',",
          "457:         'darkKhaki' => '#BDB76B',",
          "458:         'darkmagenta' => '#8B008B',",
          "459:         'darkolivegreen' => '#556B2F',",
          "460:         'arkorange' => '#FF8C00',",
          "461:         'darkorchid' => '#9932CC',",
          "462:         'darkred' => '#8B0000',",
          "463:         'darksalmon' => '#E9967A',",
          "464:         'darkseagreen' => '#8FBC8F',",
          "465:         'darkslateblue' => '#483D8B',",
          "466:         'darkslategray' => '#2F4F4F',",
          "467:         'darkslategrey' => '#2F4F4F',",
          "468:         'darkturquoise' => '#00CED1',",
          "469:         'darkviolet' => '#9400D3',",
          "470:         'deeppink' => '#FF1493',",
          "471:         'deepskyblue' => '#00BFFF',",
          "472:         'dimgray' => '#696969',",
          "473:         'dimgrey' => '#696969',",
          "474:         'dodgerblue' => '#1E90FF',",
          "475:         'firebrick' => '#B22222',",
          "476:         'floralwhite' => '#FFFAF0',",
          "477:         'forestgreen' => '#228B22',",
          "478:         'fuchsia' => '#FF00FF',",
          "479:         'gainsboro' => '#DCDCDC',",
          "480:         'ghostwhite' => '#F8F8FF',",
          "481:         'gold' => '#FFD700',",
          "482:         'goldenrod' => '#DAA520',",
          "483:         'gray' => '#808080',",
          "484:         'grey' => '#808080',",
          "485:         'green' => '#008000',",
          "486:         'greenyellow' => '#ADFF2F',",
          "487:         'honeydew' => '#F0FFF0',",
          "488:         'hotpink' => '#FF69B4',",
          "489:         'indianred ' => '#CD5C5C',",
          "490:         'indigo ' => '#4B0082',",
          "491:         'ivory' => '#FFFFF0',",
          "492:         'khaki' => '#F0E68C',",
          "493:         'lavender' => '#E6E6FA',",
          "494:         'lavenderblush' => '#FFF0F5',",
          "495:         'lawngreen' => '#7CFC00',",
          "496:         'lemonchiffon' => '#FFFACD',",
          "497:         'lightblue' => '#ADD8E6',",
          "498:         'lightcoral' => '#F08080',",
          "499:         'lightcyan' => '#E0FFFF',",
          "500:         'lightgoldenrodyellow' => '#FAFAD2',",
          "501:         'lightgray' => '#D3D3D3',",
          "502:         'lightgrey' => '#D3D3D3',",
          "503:         'lightgreen' => '#90EE90',",
          "504:         'lightpink' => '#FFB6C1',",
          "505:         'lightsalmon' => '#FFA07A',",
          "506:         'lightseagreen' => '#20B2AA',",
          "507:         'lightskyblue' => '#87CEFA',",
          "508:         'lightslategray' => '#778899',",
          "509:         'lightslategrey' => '#778899',",
          "510:         'lightsteelblue' => '#B0C4DE',",
          "511:         'lightyellow' => '#FFFFE0',",
          "512:         'lime' => '#00FF00',",
          "513:         'limegreen' => '#32CD32',",
          "514:         'linen' => '#FAF0E6',",
          "515:         'magenta' => '#FF00FF',",
          "516:         'maroon' => '#800000',",
          "517:         'mediumaquamarine' => '#66CDAA',",
          "518:         'mediumblue' => '#0000CD',",
          "519:         'mediumorchid' => '#BA55D3',",
          "520:         'mediumpurple' => '#9370D8',",
          "521:         'mediumseagreen' => '#3CB371',",
          "522:         'mediumslateblue' => '#7B68EE',",
          "523:         'mediumspringgreen' => '#00FA9A',",
          "524:         'mediumturquoise' => '#48D1CC',",
          "525:         'mediumvioletred' => '#C71585',",
          "526:         'midnightblue' => '#191970',",
          "527:         'mintcream' => '#F5FFFA',",
          "528:         'mistyrose' => '#FFE4E1',",
          "529:         'moccasin' => '#FFE4B5',",
          "530:         'navajowhite' => '#FFDEAD',",
          "531:         'navy' => '#000080',",
          "532:         'oldlace' => '#FDF5E6',",
          "533:         'olive' => '#808000',",
          "534:         'olivedrab' => '#6B8E23',",
          "535:         'orange' => '#FFA500',",
          "536:         'orangered' => '#FF4500',",
          "537:         'orchid' => '#DA70D6',",
          "538:         'palegoldenrod' => '#EEE8AA',",
          "539:         'palegreen' => '#98FB98',",
          "540:         'paleturquoise' => '#AFEEEE',",
          "541:         'palevioletred' => '#D87093',",
          "542:         'papayawhip' => '#FFEFD5',",
          "543:         'peachpuff' => '#FFDAB9',",
          "544:         'peru' => '#CD853F',",
          "545:         'pink' => '#FFC0CB',",
          "546:         'plum' => '#DDA0DD',",
          "547:         'powderblue' => '#B0E0E6',",
          "548:         'purple' => '#800080',",
          "549:         'red' => '#FF0000',",
          "550:         'rosybrown' => '#BC8F8F',",
          "551:         'royalblue' => '#4169E1',",
          "552:         'saddlebrown' => '#8B4513',",
          "553:         'salmon' => '#FA8072',",
          "554:         'sandybrown' => '#F4A460',",
          "555:         'seagreen' => '#2E8B57',",
          "556:         'seashell' => '#FFF5EE',",
          "557:         'sienna' => '#A0522D',",
          "558:         'silver' => '#C0C0C0',",
          "559:         'skyblue' => '#87CEEB',",
          "560:         'slateblue' => '#6A5ACD',",
          "561:         'slategray' => '#708090',",
          "562:         'slategrey' => '#708090',",
          "563:         'snow' => '#FFFAFA',",
          "564:         'springgreen' => '#00FF7F',",
          "565:         'steelblue' => '#4682B4',",
          "566:         'tan' => '#D2B48C',",
          "567:         'teal' => '#008080',",
          "568:         'thistle' => '#D8BFD8',",
          "569:         'tomato' => '#FF6347',",
          "570:         'turquoise' => '#40E0D0',",
          "571:         'violet' => '#EE82EE',",
          "572:         'wheat' => '#F5DEB3',",
          "573:         'white' => '#FFFFFF',",
          "574:         'whitesmoke' => '#F5F5F5',",
          "575:         'yellow' => '#FFFF00',",
          "576:         'yellowgreen' => '#9ACD32'",
          "577:     );",
          "578: }",
          "590: class css_selector {",
          "596:     protected $selectors = array();",
          "602:     protected $count = 0;",
          "608:     public static function init() {",
          "609:         return new css_selector();",
          "610:     }",
          "615:     protected function __construct() {}",
          "621:     public function add($selector) {",
          "622:         $selector = trim($selector);",
          "623:         $count = 0;",
          "624:         $count += preg_match_all('/(\\.|#)/', $selector, $matchesarray);",
          "625:         if (strpos($selector, '.') !== 0 && strpos($selector, '#') !== 0) {",
          "626:             $count ++;",
          "627:         }",
          "628:         $this->count = $count;",
          "629:         $this->selectors[] = $selector;",
          "630:     }",
          "635:     public function get_selector_count() {",
          "636:         return $this->count;",
          "637:     }",
          "643:     public function out() {",
          "644:         return trim(join(' ', $this->selectors));",
          "645:     }",
          "646: }",
          "655: class css_rule {",
          "661:     protected $selectors = array();",
          "667:     protected $styles = array();",
          "673:     public static function init() {",
          "674:         return new css_rule();",
          "675:     }",
          "684:     protected function __construct($selector = null, array $styles = array()) {",
          "685:         if ($selector != null) {",
          "686:             if (is_array($selector)) {",
          "687:                 $this->selectors = $selector;",
          "688:             } else {",
          "689:                 $this->selectors = array($selector);",
          "690:             }",
          "691:             $this->add_styles($styles);",
          "692:         }",
          "693:     }",
          "700:     public function add_selector(css_selector $selector) {",
          "701:         $this->selectors[] = $selector;",
          "702:     }",
          "709:     public function add_style($style) {",
          "710:         if (is_string($style)) {",
          "711:             $style = trim($style);",
          "712:             if (empty($style)) {",
          "713:                 return;",
          "714:             }",
          "715:             $bits = explode(':', $style, 2);",
          "716:             if (count($bits) == 2) {",
          "717:                 list($name, $value) = array_map('trim', $bits);",
          "718:             }",
          "719:             if (isset($name) && isset($value) && $name !== '' && $value !== '') {",
          "720:                 $style = css_style::init($name, $value);",
          "721:             }",
          "722:         }",
          "723:         if ($style instanceof css_style) {",
          "724:             $name = $style->get_name();",
          "725:             if (array_key_exists($name, $this->styles)) {",
          "726:                 $this->styles[$name]->set_value($style->get_value());",
          "727:             } else {",
          "728:                 $this->styles[$name] = $style;",
          "729:             }",
          "730:         }",
          "731:     }",
          "738:     public function add_styles(array $styles) {",
          "739:         foreach ($styles as $style) {",
          "740:             $this->add_style($style);",
          "741:         }",
          "742:     }",
          "750:     protected function get_style_sting() {",
          "751:         $bits = array();",
          "752:         foreach ($this->styles as $style) {",
          "753:             $bits[] = $style->out();",
          "754:         }",
          "755:         return join('', $bits);",
          "756:     }",
          "764:     protected function get_selector_string() {",
          "765:         $selectors = array();",
          "766:         foreach ($this->selectors as $selector) {",
          "767:             $selectors[] = $selector->out();",
          "768:         }",
          "769:         return join(\",\\n\", $selectors);",
          "770:     }",
          "776:     public function get_selectors() {",
          "777:         return $this->selectors;",
          "778:     }",
          "784:     public function get_styles() {",
          "785:         return $this->styles;",
          "786:     }",
          "792:     public function out() {",
          "793:         $css = $this->get_selector_string();",
          "794:         $css .= '{';",
          "795:         $css .= $this->get_style_sting();",
          "796:         $css .= '}';",
          "797:         return $css;",
          "798:     }",
          "806:     public function split_by_selector() {",
          "807:         $return = array();",
          "808:         foreach ($this->selectors as $selector) {",
          "809:             $return[] = new css_rule($selector, $this->styles);",
          "810:         }",
          "811:         return $return;",
          "812:     }",
          "820:     public function split_by_style() {",
          "821:         $return = array();",
          "822:         foreach ($this->styles as $style) {",
          "823:             $return[] = new css_rule($this->selectors, array($style));",
          "824:         }",
          "825:         return $return;",
          "826:     }",
          "832:     public function get_style_hash() {",
          "833:         $styles = $this->get_style_sting();",
          "834:         return md5($styles);",
          "835:     }",
          "841:     public function get_selector_hash() {",
          "842:         $selector = $this->get_selector_string();",
          "843:         return md5($selector);",
          "844:     }",
          "850:     public function get_selector_count() {",
          "851:         $count = 0;",
          "852:         foreach ($this->selectors as $selector) {",
          "853:             $count += $selector->get_selector_count();",
          "854:         }",
          "855:         return $count;",
          "856:     }",
          "857: }",
          "866: class css_media {",
          "872:     protected $types = array();",
          "878:     protected $rules = array();",
          "885:     public function __construct($for = 'all') {",
          "886:         $types = explode(',', $for);",
          "887:         $this->types = array_map('trim', $types);",
          "888:     }",
          "895:     public function add_rule(css_rule $newrule) {",
          "896:         foreach ($newrule->split_by_selector() as $rule) {",
          "897:             $hash = $rule->get_selector_hash();",
          "898:             if (!array_key_exists($hash, $this->rules)) {",
          "899:                 $this->rules[$hash] = $rule;",
          "900:             } else {",
          "901:                 $this->rules[$hash]->add_styles($rule->get_styles());",
          "902:             }",
          "903:         }",
          "904:     }",
          "911:     public function get_rules() {",
          "912:         return $this->rules;",
          "913:     }",
          "921:     public function organise_rules_by_selectors() {",
          "922:         $optimised = array();",
          "923:         $beforecount = count($this->rules);",
          "924:         foreach ($this->rules as $rule) {",
          "925:             $hash = $rule->get_style_hash();",
          "926:             if (!array_key_exists($hash, $optimised)) {",
          "927:                 $optimised[$hash] = clone($rule);",
          "928:             } else {",
          "929:                 foreach ($rule->get_selectors() as $selector) {",
          "930:                     $optimised[$hash]->add_selector($selector);",
          "931:                 }",
          "932:             }",
          "933:         }",
          "934:         $this->rules = $optimised;",
          "935:         $aftercount = count($this->rules);",
          "936:         return ($beforecount < $aftercount);",
          "937:     }",
          "944:     public function count_rules() {",
          "945:         return count($this->rules);",
          "946:     }",
          "953:     public function count_selectors() {",
          "954:         $count = 0;",
          "955:         foreach ($this->rules as $rule) {",
          "956:             $count += $rule->get_selector_count();",
          "957:         }",
          "958:         return $count;",
          "959:     }",
          "966:     public function out() {",
          "967:         $output = '';",
          "968:         $types = join(',', $this->types);",
          "969:         if ($types !== 'all') {",
          "970:             $output .= \"\\n\\n/***** New media declaration *****/\\n\";",
          "971:             $output .= \"@media {$types} {\\n\";",
          "972:         }",
          "973:         foreach ($this->rules as $rule) {",
          "974:             $output .= $rule->out().\"\\n\";",
          "975:         }",
          "976:         if ($types !== 'all') {",
          "977:             $output .= '}';",
          "978:             $output .= \"\\n/***** Media declaration end for $types *****/\";",
          "979:         }",
          "980:         return $output;",
          "981:     }",
          "988:     public function get_types() {",
          "989:         return $this->types;",
          "990:     }",
          "991: }",
          "1000: abstract class css_style {",
          "1006:     protected $name;",
          "1012:     protected $value;",
          "1018:     protected $important = false;",
          "1030:     public static function init($name, $value) {",
          "1031:         $specificclass = 'css_style_'.preg_replace('#[^a-zA-Z0-9]+#', '', $name);",
          "1032:         if (class_exists($specificclass)) {",
          "1033:             return $specificclass::init($value);",
          "1034:         }",
          "1035:         return new css_style_generic($name, $value);",
          "1036:     }",
          "1044:     protected function __construct($name, $value) {",
          "1045:         $this->name = $name;",
          "1046:         $this->set_value($value);",
          "1047:     }",
          "1054:     final public function set_value($value) {",
          "1055:         $value = trim($value);",
          "1056:         $important = preg_match('#(\\!important\\s*;?\\s*)$#', $value, $matches);",
          "1057:         if ($important) {",
          "1058:             $value = substr($value, 0, -(strlen($matches[1])));",
          "1059:         }",
          "1060:         if (!$this->important || $important) {",
          "1061:             $this->value = $this->clean_value($value);",
          "1062:             $this->important = $important;",
          "1063:         }",
          "1064:     }",
          "1071:     public function get_name() {",
          "1072:         return $this->name;",
          "1073:     }",
          "1080:     public function get_value() {",
          "1081:         $value = $this->value;",
          "1082:         if ($this->important) {",
          "1083:             $value .= ' !important';",
          "1084:         }",
          "1085:         return $value;",
          "1086:     }",
          "1094:     public function out($value = null) {",
          "1095:         if ($value === null) {",
          "1096:             $value = $this->get_value();",
          "1097:         } else if ($this->important && strpos($value, '!important') === false) {",
          "1098:             $value .= ' !important';",
          "1099:         }",
          "1100:         return \"{$this->name}:{$value};\";",
          "1101:     }",
          "1110:     protected function clean_value($value) {",
          "1111:         return $value;",
          "1112:     }",
          "1113: }",
          "1122: class css_style_generic extends css_style {",
          "1129:     protected function clean_value($value) {",
          "1130:         if (trim($value) == '0px') {",
          "1131:             $value = 0;",
          "1132:         } else if (preg_match('/^#([a-fA-F0-9]{3,6})/', $value, $matches)) {",
          "1133:             $value = '#'.strtoupper($matches[1]);",
          "1134:         }",
          "1135:         return $value;",
          "1136:     }",
          "1137: }",
          "1146: class css_style_color extends css_style {",
          "1153:     public static function init($value) {",
          "1154:         return new css_style_color('color', $value);",
          "1155:     }",
          "1165:     protected function clean_value($value) {",
          "1166:         $value = trim($value);",
          "1167:         if (preg_match('/#([a-fA-F0-9]{6})/', $value, $matches)) {",
          "1168:             $value = '#'.strtoupper($matches[1]);",
          "1169:         } else if (preg_match('/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/', $value, $matches)) {",
          "1170:             $value = $matches[1] . $matches[1] . $matches[2] . $matches[2] . $matches[3] . $matches[3];",
          "1171:             $value = '#'.strtoupper($value);",
          "1172:         } else if (array_key_exists(strtolower($value), css_optimiser::$htmlcolours)) {",
          "1173:             $value = css_optimiser::$htmlcolours[strtolower($value)];",
          "1174:         }",
          "1175:         return $value;",
          "1176:     }",
          "1189:     public function out($overridevalue = null) {",
          "1190:         if (preg_match('/#([a-fA-F0-9])\\1([a-fA-F0-9])\\2([a-fA-F0-9])\\3/', $this->value, $matches)) {",
          "1191:             $overridevalue = '#'.$matches[1].$matches[2].$matches[3];",
          "1192:         }",
          "1193:         return parent::out($overridevalue);",
          "1194:     }",
          "1195: }",
          "1206: class css_style_backgroundcolor extends css_style_color {",
          "1213:     public static function init($value) {",
          "1214:         return new css_style_backgroundcolor('background-color', $value);",
          "1215:     }",
          "1216: }",
          "1225: class css_style_bordercolor extends css_style_color {",
          "1234:     public static function init($value) {",
          "1235:         return new css_style_bordercolor('border-color', $value);",
          "1236:     }",
          "1237: }",
          "1246: class css_style_border extends css_style {",
          "1253:     public static function init($value) {",
          "1254:         return new css_style_border('border', $value);",
          "1255:     }",
          "1256: }",
          "",
          "---------------"
        ],
        "lib/simpletest/testcsslib.php||lib/simpletest/testcsslib.php": [
          "File: lib/simpletest/testcsslib.php -> lib/simpletest/testcsslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: if (!defined('MOODLE_INTERNAL')) {",
          "26:     die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page",
          "27: }",
          "28: require_once($CFG->libdir . '/csslib.php');",
          "30: class css_optimiser_test extends UnitTestCase {",
          "32:     public function setUp() {",
          "33:         global $CFG;",
          "34:         parent::setUp();",
          "35:         $CFG->includecssstats = false;",
          "36:     }",
          "38:     public function test_process() {",
          "39:         $optimiser = new css_optimiser;",
          "41:         $this->check_simple_comparisons($optimiser);",
          "42:         $this->check_invalid_css_handling($optimiser);",
          "43:         $this->check_optimisation($optimiser);",
          "44:         $this->check_logic_maintained($optimiser);",
          "45:         $this->check_bulk_processing($optimiser);",
          "46:     }",
          "48:     protected function check_simple_comparisons(css_optimiser $optimiser) {",
          "49:         $css = '.css{}';",
          "50:         $this->assertEqual($css, $optimiser->process($css));",
          "52:         $css = '.css{color:#123456;}';",
          "53:         $this->assertEqual($css, $optimiser->process($css));",
          "55:         $css = '#some{color:#123456;}';",
          "56:         $this->assertEqual($css, $optimiser->process($css));",
          "58:         $css = 'div{color:#123456;}';",
          "59:         $this->assertEqual($css, $optimiser->process($css));",
          "61:         $css = 'div.css{color:#123456;}';",
          "62:         $this->assertEqual($css, $optimiser->process($css));",
          "64:         $css = 'div#some{color:#123456;}';",
          "65:         $this->assertEqual($css, $optimiser->process($css));",
          "67:         $css = 'div[type=blah]{color:#123456;}';",
          "68:         $this->assertEqual($css, $optimiser->process($css));",
          "70:         $css = 'div.css[type=blah]{color:#123456;}';",
          "71:         $this->assertEqual($css, $optimiser->process($css));",
          "73:         $css = 'div#some[type=blah]{color:#123456;}';",
          "74:         $this->assertEqual($css, $optimiser->process($css));",
          "76:         $css = '#some.css[type=blah]{color:#123456;}';",
          "77:         $this->assertEqual($css, $optimiser->process($css));",
          "79:         $css = '#some .css[type=blah]{color:#123456;}';",
          "80:         $this->assertEqual($css, $optimiser->process($css));",
          "82:         $cssin  = '.css {width:0}';",
          "83:         $cssout = '.css{width:0;}';",
          "84:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "86:         $cssin  = '.css {width:0px}';",
          "87:         $cssout = '.css{width:0;}';",
          "88:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "90:         $cssin  = '.css {width:100px}';",
          "91:         $cssout = '.css{width:100px;}';",
          "92:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "94:     }",
          "96:     protected function check_invalid_css_handling(css_optimiser $optimiser) {",
          "98:         $cssin = array(",
          "99:             '.one{}',",
          "100:             '.one {:}',",
          "101:             '.one {;}',",
          "102:             '.one {;;;;;}',",
          "103:             '.one {:;}',",
          "104:             '.one {:;:;:;:::;;;}',",
          "105:             '.one {!important}',",
          "106:             '.one {:!important}',",
          "107:             '.one {:!important;}',",
          "108:             '.one {;!important}'",
          "109:         );",
          "110:         $cssout = '.one{}';",
          "111:         foreach ($cssin as $css) {",
          "112:             $this->assertEqual($cssout, $optimiser->process($css));",
          "113:         }",
          "115:         $cssin = array(",
          "116:             '.one{background-color:red;}',",
          "117:             '.one {background-color:red;} .one {background-color:}',",
          "118:             '.one {background-color:red;} .one {background-color;}',",
          "119:             '.one {background-color:red;} .one {background-color}',",
          "120:             '.one {background-color:red;} .one {background-color:;}',",
          "121:             '.one {background-color:red;} .one {:blue;}',",
          "122:             '.one {background-color:red;} .one {:#00F}',",
          "123:         );",
          "124:         $cssout = '.one{background-color:#F00;}';",
          "125:         foreach ($cssin as $css) {",
          "126:             $this->assertEqual($cssout, $optimiser->process($css));",
          "127:         }",
          "129:         $cssin = '..one {background-color:color:red}';",
          "130:         $cssout = '..one{background-color:color:red;}';",
          "131:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "133:         $cssin = '#.one {background-color:color:red}';",
          "134:         $cssout = '#.one{background-color:color:red;}';",
          "135:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "137:         $cssin = '##one {background-color:color:red}';",
          "138:         $cssout = '##one{background-color:color:red;}';",
          "139:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "141:         $cssin = '.one {background-color:color:red}';",
          "142:         $cssout = '.one{background-color:color:red;}';",
          "143:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "145:         $cssin = '.one {background-color:red;color;border-color:blue}';",
          "146:         $cssout = '.one{background-color:#F00;border-color:#00F;}';",
          "147:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "149:         $cssin  = '{background-color:#123456;color:red;}{color:green;}';",
          "150:         $cssout = \"{background-color:#123456;color:#008000;}\";",
          "151:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "153:         $cssin  = '.one {color:red;} {color:green;} .one {background-color:blue;}';",
          "154:         $cssout = \".one{color:#F00;background-color:#00F;}\\n{color:#008000;}\";",
          "155:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "156:     }",
          "158:     public function check_optimisation(css_optimiser $optimiser) {",
          "159:         $cssin = '.one {border:1px solid red;}';",
          "160:         $cssout = '.one{border:1px solid red;}';",
          "161:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "163:         $cssin = '.one, .two {border:1px solid red;}';",
          "164:         $cssout = \".one,\\n.two{border:1px solid red;}\";",
          "165:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "167:         $cssin = '.one {border:1px solid red;} .two {border:1px solid red;}';",
          "168:         $cssout = \".one,\\n.two{border:1px solid red;}\";",
          "169:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "171:         $cssin = '.one {border:1px solid red;width:20px;} .two {border:1px solid red;height:20px;}';",
          "172:         $cssout = \".one{border:1px solid red;width:20px;}\\n.two{border:1px solid red;height:20px;}\";",
          "173:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "175:         $cssin = '.one {color:red;} .two {color:#F00;}';",
          "176:         $cssout = \".one,\\n.two{color:#F00;}\";",
          "177:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "178:     }",
          "180:     protected function check_logic_maintained(css_optimiser $optimiser) {",
          "182:         $cssin = '.one {color:#123;color:#321;}';",
          "183:         $cssout = '.one{color:#321;}';",
          "184:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "186:         $cssin = '.one {color:#123; color : #321 ;}';",
          "187:         $cssout = '.one{color:#321;}';",
          "188:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "190:         $cssin = '.one {color:#123;} .one {color:#321;}';",
          "191:         $cssout = '.one{color:#321;}';",
          "192:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "194:         $cssin = '.one {color:#123 !important;color:#321;}';",
          "195:         $cssout = '.one{color:#123 !important;}';",
          "196:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "198:         $cssin = '.one {color:#123 !important;} .one {color:#321;}';",
          "199:         $cssout = '.one{color:#123 !important;}';",
          "200:         $this->assertEqual($cssout, $optimiser->process($cssin));",
          "202:     }",
          "204:     protected function check_bulk_processing(css_optimiser $optimiser) {",
          "205:         $cssin = <<<CSS",
          "206: .test .one {",
          "207:     margin:5px;",
          "208:     border:0;",
          "209: }",
          "210: .test .one {",
          "211:     margin: 10px;",
          "212:     color: red;",
          "213: }",
          "215: .test.one {",
          "216:     margin: 15px;",
          "217: }",
          "219: #test .one {margin:  20px;}",
          "220: #test #one {margin:  25px;}.test #one {margin:  30px;}",
          "221:   .test    .one      {     background-color: #123;     }",
          "222: .test.one{border:1px solid blue}.test.one{border-color:green;}",
          "223: CSS;",
          "224:         $cssout = $optimiser->process($cssin);",
          "226:         $this->assertTrue(preg_match('#\\.test\\s\\.one\\{[^\\}]*margin:10px;#', $cssout));",
          "227:         $this->assertTrue(preg_match('#\\.test\\s\\.one\\{[^\\}]*background\\-color:\\#123;#', $cssout));",
          "229:         $this->assertTrue(preg_match('#\\.test\\.one\\{[^\\}]*margin:15px;#', $cssout));",
          "230:         $this->assertTrue(preg_match('#\\.test\\.one\\{[^\\}]*border:1px solid blue;#', $cssout));",
          "232:         $this->assertTrue(preg_match('#\\#test \\.one\\{[^\\}]*margin:20px;#', $cssout));",
          "233:         $this->assertTrue(preg_match('#\\#test \\#one\\{[^\\}]*margin:25px;#', $cssout));",
          "234:         $this->assertTrue(preg_match('#\\.test \\#one\\{[^\\}]*margin:30px;#', $cssout));",
          "235:     }",
          "236: }",
          "",
          "---------------"
        ],
        "theme/styles.php||theme/styles.php": [
          "File: theme/styles.php -> theme/styles.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: define('ABORT_AFTER_CONFIG', true);",
          "33: require('../config.php'); // this stops immediately at the beginning of lib/setup.php",
          "35: $themename = min_optional_param('theme', 'standard', 'SAFEDIR');",
          "36: $type      = min_optional_param('type', 'all', 'SAFEDIR');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: require_once($CFG->dirroot.'/lib/csslib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: }",
          "53: if ($type === 'ie') {",
          "55: }",
          "57: $candidatesheet = \"$CFG->cachedir/theme/$themename/css/$type.css\";",
          "",
          "[Removed Lines]",
          "54:     send_ie_css($themename, $rev);",
          "",
          "[Added Lines]",
          "55:     css_send_ie_css($themename, $rev);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:         header('Content-Type: text/css; charset=utf-8');",
          "68:         die;",
          "69:     }",
          "71: }",
          "",
          "[Removed Lines]",
          "70:     send_cached_css($candidatesheet, $rev);",
          "",
          "[Added Lines]",
          "71:     css_send_cached_css($candidatesheet, $rev);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78: define('NO_UPGRADE_CHECK', true);  // Ignore upgrade check",
          "80: require(\"$CFG->dirroot/lib/setup.php\");",
          "85: $theme = theme_config::load($themename);",
          "87: if ($type === 'editor') {",
          "88:     $files = $theme->editor_css_files();",
          "90: } else {",
          "91:     $css = $theme->css_files();",
          "92:     $allfiles = array();",
          "",
          "[Removed Lines]",
          "82: set_include_path($CFG->libdir . '/minify/lib' . PATH_SEPARATOR . get_include_path());",
          "83: require_once('Minify.php');",
          "89:     store_css($theme, $candidatesheet, $files);",
          "",
          "[Added Lines]",
          "87:     css_store_css($theme, $candidatesheet, $cssfiles);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "102:             }",
          "103:         }",
          "104:         $cssfile = \"$CFG->cachedir/theme/$themename/css/$key.css\";",
          "106:         $allfiles = array_merge($allfiles, $cssfiles);",
          "107:     }",
          "108:     $cssfile = \"$CFG->cachedir/theme/$themename/css/all.css\";",
          "194: }",
          "",
          "[Removed Lines]",
          "105:         store_css($theme, $cssfile, $cssfiles);",
          "109:     store_css($theme, $cssfile, $allfiles);",
          "110: }",
          "111: send_cached_css($candidatesheet, $rev);",
          "118: function store_css(theme_config $theme, $csspath, $cssfiles) {",
          "119:     $css = $theme->post_process(minify($cssfiles));",
          "122:     clearstatcache();",
          "123:     check_dir_exists(dirname($csspath));",
          "124:     $fp = fopen($csspath, 'w');",
          "125:     fwrite($fp, $css);",
          "126:     fclose($fp);",
          "127: }",
          "129: function send_ie_css($themename, $rev) {",
          "130:     $lifetime = 60*60*24*30; // 30 days",
          "132:     $css = <<<EOF",
          "134: @import url(styles.php?theme=$themename&rev=$rev&type=plugins);",
          "135: @import url(styles.php?theme=$themename&rev=$rev&type=parents);",
          "136: @import url(styles.php?theme=$themename&rev=$rev&type=theme);",
          "138: EOF;",
          "140:     header('Etag: '.md5($rev));",
          "141:     header('Content-Disposition: inline; filename=\"styles.php\"');",
          "142:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', time()) .' GMT');",
          "143:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "144:     header('Pragma: ');",
          "145:     header('Cache-Control: max-age='.$lifetime);",
          "146:     header('Accept-Ranges: none');",
          "147:     header('Content-Type: text/css; charset=utf-8');",
          "148:     header('Content-Length: '.strlen($css));",
          "150:     echo $css;",
          "151:     die;",
          "152: }",
          "154: function send_cached_css($csspath, $rev) {",
          "155:     $lifetime = 60*60*24*30; // 30 days",
          "157:     header('Content-Disposition: inline; filename=\"styles.php\"');",
          "158:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', filemtime($csspath)) .' GMT');",
          "159:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "160:     header('Pragma: ');",
          "161:     header('Cache-Control: max-age='.$lifetime);",
          "162:     header('Accept-Ranges: none');",
          "163:     header('Content-Type: text/css; charset=utf-8');",
          "164:     if (!min_enable_zlib_compression()) {",
          "165:         header('Content-Length: '.filesize($csspath));",
          "166:     }",
          "168:     readfile($csspath);",
          "169:     die;",
          "170: }",
          "172: function minify($files) {",
          "173:     if (0 === stripos(PHP_OS, 'win')) {",
          "174:         Minify::setDocRoot(); // IIS may need help",
          "175:     }",
          "177:     Minify::setCache(null, false);",
          "179:     $options = array(",
          "180:         'bubbleCssImports' => false,",
          "182:         'encodeOutput' => false,",
          "184:         'maxAge' => (60*60*24*20),",
          "186:         'files' => $files,",
          "188:         'rewriteCssUris' => false,",
          "190:         'quiet' => true",
          "191:     );",
          "192:     $result = Minify::serve('Files', $options);",
          "193:     return $result['content'];",
          "",
          "[Added Lines]",
          "103:         css_store_css($theme, $cssfile, $cssfiles);",
          "107:     css_store_css($theme, $cssfile, $allfiles);",
          "109: css_send_cached_css($candidatesheet, $rev);",
          "",
          "---------------"
        ],
        "theme/styles_debug.php||theme/styles_debug.php": [
          "File: theme/styles_debug.php -> theme/styles_debug.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: define('ABORT_AFTER_CONFIG', true);",
          "28: require('../config.php'); // this stops immediately at the beginning of lib/setup.php",
          "30: $themename = min_optional_param('theme', 'standard', 'SAFEDIR');",
          "31: $type      = min_optional_param('type', '', 'SAFEDIR');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: require_once($CFG->dirroot.'/lib/csslib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: } else if (!empty($CFG->themedir) and file_exists(\"$CFG->themedir/$themename/config.php\")) {",
          "43: } else {",
          "45: }",
          "",
          "[Removed Lines]",
          "44:     css_not_found();",
          "",
          "[Added Lines]",
          "45:     css_send_css_not_found();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49: $candidatesheet = \"$CFG->cachedir/theme/$themename/designer.ser\";",
          "51: if (!file_exists($candidatesheet)) {",
          "53: }",
          "55: if (!$css = file_get_contents($candidatesheet)) {",
          "57: }",
          "59: $css = unserialize($css);",
          "61: if ($type === 'editor') {",
          "62:     if (isset($css['editor'])) {",
          "64:     }",
          "65: } else if ($type === 'ie') {",
          "67:     if ($subtype === 'plugins') {",
          "72:     } else if ($subtype === 'parents') {",
          "73:         $sendcss = array();",
          "",
          "[Removed Lines]",
          "52:     css_not_found();",
          "56:     css_not_found();",
          "63:         send_uncached_css(implode(\"\\n\\n\", $css['editor']));",
          "68:         $sendcss = implode(\"\\n\\n\", $css['plugins']);",
          "69:         $sendcss = str_replace(\"\\n\", \"\\r\\n\", $sendcss);",
          "70:         send_uncached_css($sendcss);",
          "",
          "[Added Lines]",
          "53:     css_send_css_not_found();",
          "57:     css_send_css_not_found();",
          "64:         css_send_uncached_css($css['editor']);",
          "69:         css_send_uncached_css($css['plugins']);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:                 $sendcss[] = $css;",
          "88:             }",
          "89:         }",
          "94:     } else if ($subtype === 'theme') {",
          "98:     }",
          "100: } else if ($type === 'plugin') {",
          "101:     if (isset($css['plugins'][$subtype])) {",
          "103:     }",
          "105: } else if ($type === 'parent') {",
          "106:     if (isset($css['parents'][$subtype][$sheet])) {",
          "108:     }",
          "110: } else if ($type === 'theme') {",
          "111:     if (isset($css['theme'][$sheet])) {",
          "113:     }",
          "114: }",
          "",
          "[Removed Lines]",
          "90:         $sendcss = implode(\"\\n\\n\", $sendcss);",
          "91:         $sendcss = str_replace(\"\\n\", \"\\r\\n\", $sendcss);",
          "92:         send_uncached_css($sendcss);",
          "95:         $sendcss = implode(\"\\n\\n\", $css['theme']);",
          "96:         $sendcss = str_replace(\"\\n\", \"\\r\\n\", $sendcss);",
          "97:         send_uncached_css($sendcss);",
          "102:         send_uncached_css($css['plugins'][$subtype]);",
          "107:         send_uncached_css($css['parents'][$subtype][$sheet]);",
          "112:         send_uncached_css($css['theme'][$sheet]);",
          "115: css_not_found();",
          "122: function send_uncached_css($css) {",
          "123:     header('Content-Disposition: inline; filename=\"styles_debug.php\"');",
          "124:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', time()) .' GMT');",
          "125:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + THEME_DESIGNER_CACHE_LIFETIME) .' GMT');",
          "126:     header('Pragma: ');",
          "127:     header('Accept-Ranges: none');",
          "128:     header('Content-Type: text/css; charset=utf-8');",
          "131:     echo($css);",
          "132:     die;",
          "133: }",
          "135: function css_not_found() {",
          "136:     header('HTTP/1.0 404 not found');",
          "137:     die('CSS was not found, sorry.');",
          "138: }",
          "",
          "[Added Lines]",
          "89:         css_send_uncached_css($sendcss);",
          "91:         css_send_uncached_css($css['theme']);",
          "96:         css_send_uncached_css($css['plugins'][$subtype]);",
          "101:         css_send_uncached_css($css['parents'][$subtype][$sheet]);",
          "106:         css_send_uncached_css($css['theme'][$sheet]);",
          "109: css_send_css_not_found();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ab297434182069f36c4f3b8e449a88d2e2cace4",
      "candidate_info": {
        "commit_hash": "8ab297434182069f36c4f3b8e449a88d2e2cace4",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/8ab297434182069f36c4f3b8e449a88d2e2cace4",
        "files": [
          "lib/javascript.php",
          "lib/jslib.php",
          "lib/outputrequirementslib.php",
          "theme/javascript.php"
        ],
        "message": "MDL-32683 improve and standardise JS serving",
        "before_after_code_files": [
          "lib/javascript.php||lib/javascript.php",
          "lib/jslib.php||lib/jslib.php",
          "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
          "theme/javascript.php||theme/javascript.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "theme/javascript.php||theme/javascript.php"
          ],
          "candidate": [
            "theme/javascript.php||theme/javascript.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/javascript.php||lib/javascript.php": [
          "File: lib/javascript.php -> lib/javascript.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: define('ABORT_AFTER_CONFIG', true);",
          "33: require('../config.php'); // this stops immediately at the beginning of lib/setup.php",
          "45: $jsfiles = array();",
          "",
          "[Removed Lines]",
          "35: ini_set('zlib.output_compression', 'Off');",
          "38: set_include_path($CFG->libdir . '/minify/lib' . PATH_SEPARATOR . get_include_path());",
          "39: require_once('Minify.php');",
          "41: $file = min_optional_param('file', '', 'RAW');",
          "42: $rev  = min_optional_param('rev', 0, 'INT');",
          "",
          "[Added Lines]",
          "32: require_once(\"$CFG->dirroot/lib/jslib.php\");",
          "34: if ($slashargument = min_get_slash_argument()) {",
          "35:     $slashargument = ltrim($slashargument, '/');",
          "36:     if (substr_count($slashargument, '/') < 1) {",
          "37:         image_not_found();",
          "38:     }",
          "40:     list($rev, $file) = explode('/', $slashargument, 2);",
          "41:     $rev  = min_clean_param($rev, 'INT');",
          "42:     $file = '/'.min_clean_param($file, 'SAFEPATH');",
          "44: } else {",
          "45:     $rev  = min_optional_param('rev', 0, 'INT');",
          "46:     $file = min_optional_param('file', '', 'RAW');",
          "47: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     die();",
          "71: }",
          "82:     }",
          "118:     }",
          "119: }",
          "",
          "[Removed Lines]",
          "73: minify($jsfiles);",
          "75: function minify($files) {",
          "76:     global $CFG;",
          "78:     $cachedir = $CFG->cachedir.'/js';",
          "80:     if (!file_exists($cachedir)) {",
          "81:         @mkdir($cachedir, $CFG->directorypermissions, true);",
          "84:     if (0 === stripos(PHP_OS, 'win')) {",
          "85:         Minify::setDocRoot(); // IIS may need help",
          "86:     }",
          "87:     Minify::setCache($cachedir, true);",
          "89:     $options = array(",
          "91:         'maxAge' => (60*60*24*20),",
          "93:         'files' => $files",
          "94:     );",
          "96:     try {",
          "97:         Minify::serve('Files', $options);",
          "98:         die();",
          "99:     } catch (Exception $e) {",
          "100:         $error = $e->getMessage();",
          "101:         $error = str_replace(\"\\r\", ' ', $error);",
          "102:         $error = str_replace(\"\\n\", ' ', $error);",
          "103:     }",
          "106:     $js = <<<EOD",
          "107: try {console.log('Error: Minimisation of javascript failed!');} catch (e) {}",
          "114: EOD;",
          "115:     echo $js;",
          "116:     foreach ($files as $jsfile) {",
          "117:         echo file_get_contents($jsfile).\"\\n\";",
          "",
          "[Added Lines]",
          "78: $etag = sha1($rev.implode(',', $jsfiles));",
          "79: $candidate = $CFG->cachedir.'/js/'.$etag;",
          "81: if ($rev > -1) {",
          "82:     if (file_exists($candidate)) {",
          "83:         if (!empty($_SERVER['HTTP_IF_NONE_MATCH']) || !empty($_SERVER['HTTP_IF_MODIFIED_SINCE'])) {",
          "86:             js_send_unmodified(filemtime($candidate), $etag);",
          "87:         }",
          "88:         js_send_cached($candidate, $etag);",
          "90:     } else {",
          "91:         if (!file_exists(dirname($candidate))) {",
          "92:             @mkdir(dirname($candidate), $CFG->directorypermissions, true);",
          "93:         }",
          "94:         $fp = fopen($candidate, 'w');",
          "95:         fwrite($fp, js_minify($jsfiles));",
          "96:         fclose($fp);",
          "97:         js_send_cached($candidate, $etag);",
          "100: } else {",
          "101:     $content = '';",
          "102:     foreach ($jsfiles as $jsfile) {",
          "103:         $content .= file_get_contents($jsfile).\"\\n\";",
          "105:     js_send_uncached($candidate, $etag);",
          "",
          "---------------"
        ],
        "lib/jslib.php||lib/jslib.php": [
          "File: lib/jslib.php -> lib/jslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "34: function js_send_cached($jspath, $etag, $filename = 'javascript.php') {",
          "35:     require(__DIR__ . '/xsendfilelib.php');",
          "37:     $lifetime = 60*60*24*60; // 60 days only - the revision may get incremented quite often",
          "39:     header('Etag: '.$etag);",
          "40:     header('Content-Disposition: inline; filename=\"'.$filename.'\"');",
          "41:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', filemtime($jspath)) .' GMT');",
          "42:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "43:     header('Pragma: ');",
          "44:     header('Cache-Control: public, max-age='.$lifetime);",
          "45:     header('Accept-Ranges: none');",
          "46:     header('Content-Type: application/javascript; charset=utf-8');",
          "48:     if (xsendfile($jspath)) {",
          "49:         die;",
          "50:     }",
          "52:     if (!min_enable_zlib_compression()) {",
          "53:         header('Content-Length: '.filesize($jspath));",
          "54:     }",
          "56:     readfile($jspath);",
          "57:     die;",
          "58: }",
          "65: function js_send_uncached($js, $filename = 'javascript.php') {",
          "66:     header('Content-Disposition: inline; filename=\"'.$filename.'\"');",
          "67:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', time()) .' GMT');",
          "68:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + 2) .' GMT');",
          "69:     header('Pragma: ');",
          "70:     header('Accept-Ranges: none');",
          "71:     header('Content-Type: application/javascript; charset=utf-8');",
          "72:     header('Content-Length: '.strlen($js));",
          "74:     echo $js;",
          "75:     die;",
          "76: }",
          "83: function js_send_unmodified($lastmodified, $etag) {",
          "84:     $lifetime = 60*60*24*60; // 60 days only - the revision may get incremented quite often",
          "85:     header('HTTP/1.1 304 Not Modified');",
          "86:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "87:     header('Cache-Control: public, max-age='.$lifetime);",
          "88:     header('Content-Type: application/javascript; charset=utf-8');",
          "89:     header('Etag: '.$etag);",
          "90:     if ($lastmodified) {",
          "91:         header('Last-Modified: '. gmdate('D, d M Y H:i:s', $lastmodified) .' GMT');",
          "92:     }",
          "93:     die;",
          "94: }",
          "101: function js_minify($files) {",
          "103:     set_include_path(__DIR__ . '/minify/lib' . PATH_SEPARATOR . get_include_path());",
          "104:     require_once('Minify.php');",
          "106:     if (empty($files)) {",
          "107:         return '';",
          "108:     }",
          "110:     if (0 === stripos(PHP_OS, 'win')) {",
          "111:         Minify::setDocRoot(); // IIS may need help",
          "112:     }",
          "114:     Minify::setCache(null, false);",
          "116:     $options = array(",
          "117:         'bubbleCssImports' => false,",
          "119:         'encodeOutput' => false,",
          "121:         'maxAge' => 1800,",
          "123:         'files' => $files,",
          "125:         'rewriteCssUris' => false,",
          "127:         'quiet' => true",
          "128:     );",
          "130:     $error = 'unknown';",
          "131:     try {",
          "132:         $result = Minify::serve('Files', $options);",
          "133:         if ($result['success']) {",
          "134:             return $result['content'];",
          "135:         }",
          "136:     } catch (Exception $e) {",
          "137:         $error = $e->getMessage();",
          "138:         $error = str_replace(\"\\r\", ' ', $error);",
          "139:         $error = str_replace(\"\\n\", ' ', $error);",
          "140:     }",
          "143:     $js = <<<EOD",
          "144: try {console.log('Error: Minimisation of javascript failed!');} catch (e) {}",
          "151: EOD;",
          "152:     foreach ($files as $jsfile) {",
          "153:         $js .= file_get_contents($jsfile).\"\\n\";",
          "154:     }",
          "155:     return $js;",
          "156: }",
          "",
          "---------------"
        ],
        "lib/outputrequirementslib.php||lib/outputrequirementslib.php": [
          "File: lib/outputrequirementslib.php -> lib/outputrequirementslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:                     throw new coding_exception('Attempt to require a JavaScript file that does not exist.', $url);",
          "405:                 }",
          "406:             }",
          "409:             } else {",
          "410:                 return new moodle_url($CFG->httpswwwroot.$url);",
          "411:             }",
          "",
          "[Removed Lines]",
          "407:             if (!empty($CFG->cachejs) and !empty($CFG->jsrev) and strpos($url, '/lib/editor/') !== 0 and substr($url, -3) === '.js') {",
          "408:                 return new moodle_url($CFG->httpswwwroot.'/lib/javascript.php', array('file'=>$url, 'rev'=>$CFG->jsrev));",
          "",
          "[Added Lines]",
          "407:             if (!empty($CFG->cachejs) and !empty($CFG->jsrev) and $CFG->jsrev > 0 and strpos($url, '/lib/editor/') !== 0 and substr($url, -3) === '.js') {",
          "408:                 if (empty($CFG->slasharguments)) {",
          "409:                     return new moodle_url($CFG->httpswwwroot.'/lib/javascript.php', array('rev'=>$CFG->jsrev, 'file'=>$url));",
          "410:                 } else {",
          "411:                     $returnurl = new moodle_url($CFG->httpswwwroot.'/lib/javascript.php');",
          "412:                     $returnurl->set_slashargument('/'.$CFG->jsrev.$url);",
          "413:                     return $returnurl;",
          "414:                 }",
          "",
          "---------------"
        ],
        "theme/javascript.php||theme/javascript.php": [
          "File: theme/javascript.php -> theme/javascript.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: define('ABORT_AFTER_CONFIG', true);",
          "33: require('../config.php'); // this stops immediately at the beginning of lib/setup.php",
          "35: if ($slashargument = min_get_slash_argument()) {",
          "36:     $slashargument = ltrim($slashargument, '/');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: require_once(\"$CFG->dirroot/lib/jslib.php\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     if (!empty($_SERVER['HTTP_IF_NONE_MATCH']) || !empty($_SERVER['HTTP_IF_MODIFIED_SINCE'])) {",
          "80:     }",
          "82: }",
          "",
          "[Removed Lines]",
          "73:         $lifetime = 60*60*24*60; // 60 days only - the revision may get incremented quite often",
          "74:         header('HTTP/1.1 304 Not Modified');",
          "75:         header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "76:         header('Cache-Control: public, max-age='.$lifetime);",
          "77:         header('Content-Type: application/javascript; charset=utf-8');",
          "78:         header('Etag: '.$etag);",
          "79:         die;",
          "81:     send_cached_js($candidate, $etag);",
          "",
          "[Added Lines]",
          "73:         js_send_unmodified(filemtime($candidate), $etag);",
          "75:     js_send_cached($candidate, $etag);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89: define('NO_UPGRADE_CHECK', true);  // Ignore upgrade check",
          "91: require(\"$CFG->dirroot/lib/setup.php\");",
          "96: $theme = theme_config::load($themename);",
          "",
          "[Removed Lines]",
          "93: set_include_path($CFG->libdir . '/minify/lib' . PATH_SEPARATOR . get_include_path());",
          "94: require_once('Minify.php');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:     clearstatcache();",
          "105:     check_dir_exists(dirname($candidate));",
          "106:     $fp = fopen($candidate, 'w');",
          "108:     fclose($fp);",
          "210: }",
          "",
          "[Removed Lines]",
          "107:     fwrite($fp, minify($theme->javascript_files($type)));",
          "109:     send_cached_js($candidate, $etag);",
          "110: } else {",
          "111:     send_uncached_js($theme->javascript_content($type));",
          "112: }",
          "119: function send_cached_js($jspath, $etag) {",
          "120:     global $CFG;",
          "121:     require(\"$CFG->dirroot/lib/xsendfilelib.php\");",
          "123:     $lifetime = 60*60*24*60; // 60 days only - the revision may get incremented quite often",
          "125:     header('Etag: '.$etag);",
          "126:     header('Content-Disposition: inline; filename=\"javascript.php\"');",
          "127:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', filemtime($jspath)) .' GMT');",
          "128:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + $lifetime) .' GMT');",
          "129:     header('Pragma: ');",
          "130:     header('Cache-Control: public, max-age='.$lifetime);",
          "131:     header('Accept-Ranges: none');",
          "132:     header('Content-Type: application/javascript; charset=utf-8');",
          "134:     if (xsendfile($jspath)) {",
          "135:         die;",
          "136:     }",
          "138:     if (!min_enable_zlib_compression()) {",
          "139:         header('Content-Length: '.filesize($jspath));",
          "140:     }",
          "142:     readfile($jspath);",
          "143:     die;",
          "144: }",
          "146: function send_uncached_js($js) {",
          "147:     header('Content-Disposition: inline; filename=\"javascript.php\"');",
          "148:     header('Last-Modified: '. gmdate('D, d M Y H:i:s', time()) .' GMT');",
          "149:     header('Expires: '. gmdate('D, d M Y H:i:s', time() + 2) .' GMT');",
          "150:     header('Pragma: ');",
          "151:     header('Accept-Ranges: none');",
          "152:     header('Content-Type: application/javascript; charset=utf-8');",
          "153:     header('Content-Length: '.strlen($js));",
          "155:     echo $js;",
          "156:     die;",
          "157: }",
          "159: function minify($files) {",
          "160:     if (empty($files)) {",
          "161:         return '';",
          "162:     }",
          "164:     if (0 === stripos(PHP_OS, 'win')) {",
          "165:         Minify::setDocRoot(); // IIS may need help",
          "166:     }",
          "168:     Minify::setCache(null, false);",
          "170:     $options = array(",
          "171:         'bubbleCssImports' => false,",
          "173:         'encodeOutput' => false,",
          "175:         'maxAge' => 1800,",
          "177:         'files' => $files,",
          "179:         'rewriteCssUris' => false,",
          "181:         'quiet' => true",
          "182:     );",
          "184:     $error = 'unknown';",
          "185:     try {",
          "186:         $result = Minify::serve('Files', $options);",
          "187:         if ($result['success']) {",
          "188:             return $result['content'];",
          "189:         }",
          "190:     } catch (Exception $e) {",
          "191:         $error = $e->getMessage();",
          "192:         $error = str_replace(\"\\r\", ' ', $error);",
          "193:         $error = str_replace(\"\\n\", ' ', $error);",
          "194:     }",
          "197:     $js = <<<EOD",
          "198: try {console.log('Error: Minimisation of theme javascript failed!');} catch (e) {}",
          "205: EOD;",
          "206:     foreach ($files as $jsfile) {",
          "207:         $js .= file_get_contents($jsfile).\"\\n\";",
          "208:     }",
          "209:     return $js;",
          "",
          "[Added Lines]",
          "98:     fwrite($fp, js_minify($theme->javascript_files($type)));",
          "100:     js_send_cached($candidate, $etag);",
          "102: } else {",
          "103:     js_send_uncached($theme->javascript_content($type));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a380fbb53429713b3c422a3146456dc97205329",
      "candidate_info": {
        "commit_hash": "9a380fbb53429713b3c422a3146456dc97205329",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/9a380fbb53429713b3c422a3146456dc97205329",
        "files": [
          "theme/javascript.php",
          "theme/styles.php"
        ],
        "message": "MDL-28147 do not double cache theme css/js",
        "before_after_code_files": [
          "theme/javascript.php||theme/javascript.php",
          "theme/styles.php||theme/styles.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "theme/javascript.php||theme/javascript.php",
            "theme/styles.php||theme/styles.php"
          ],
          "candidate": [
            "theme/javascript.php||theme/javascript.php",
            "theme/styles.php||theme/styles.php"
          ]
        }
      },
      "candidate_diff": {
        "theme/javascript.php||theme/javascript.php": [
          "File: theme/javascript.php -> theme/javascript.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: }",
          "120: function minify($files) {",
          "123:     if (0 === stripos(PHP_OS, 'win')) {",
          "124:         Minify::setDocRoot(); // IIS may need help",
          "125:     }",
          "128:     $options = array(",
          "129:         'bubbleCssImports' => false,",
          "",
          "[Removed Lines]",
          "121:     global $CFG;",
          "126:     Minify::setCache('', true);",
          "",
          "[Added Lines]",
          "125:     Minify::setCache(null, false);",
          "",
          "---------------"
        ],
        "theme/styles.php||theme/styles.php": [
          "File: theme/styles.php -> theme/styles.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:     if (0 === stripos(PHP_OS, 'win')) {",
          "161:         Minify::setDocRoot(); // IIS may need help",
          "162:     }",
          "165:     $options = array(",
          "166:         'bubbleCssImports' => false,",
          "",
          "[Removed Lines]",
          "163:     Minify::setCache('', true);",
          "",
          "[Added Lines]",
          "164:     Minify::setCache(null, false);",
          "",
          "---------------"
        ]
      }
    }
  ]
}