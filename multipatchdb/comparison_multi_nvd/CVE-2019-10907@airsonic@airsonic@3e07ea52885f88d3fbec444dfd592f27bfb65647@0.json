{
  "cve_id": "CVE-2019-10907",
  "cve_desc": "Airsonic 10.2.1 uses Spring's default remember-me mechanism based on MD5, with a fixed key of airsonic in GlobalSecurityConfig.java. An attacker able to capture cookies might be able to trivially bruteforce offline the passwords of associated users.",
  "repo": "airsonic/airsonic",
  "patch_hash": "3e07ea52885f88d3fbec444dfd592f27bfb65647",
  "patch_info": {
    "commit_hash": "3e07ea52885f88d3fbec444dfd592f27bfb65647",
    "repo": "airsonic/airsonic",
    "commit_url": "https://github.com/airsonic/airsonic/commit/3e07ea52885f88d3fbec444dfd592f27bfb65647",
    "files": [
      "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java"
    ],
    "message": "Use a random key to \"encrypt\" the remember-me cookie's value\n\nSince Spring's default remember-me technique is\nterrible security-wise (`user:timstamp:md5(use:timestamp:password:key)`),\nwe should at least use a random key, instead of a fixed one,\notherwise, and attacker able to capture the cookies\nmight be able to trivially bruteforce offline\nthe password of the associated user.",
    "before_after_code_files": [
      "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java||airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java"
    ]
  },
  "patch_diff": {
    "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java||airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java": [
      "File: airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java -> airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter;",
      "23: import org.springframework.security.web.util.matcher.AntPathRequestMatcher;",
      "25: @Configuration",
      "26: @Order(SecurityProperties.ACCESS_OVERRIDE_ORDER)",
      "27: @EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: import java.security.SecureRandom;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32:     static final String FAILURE_URL = \"/login?error=1\";",
      "34:     @Autowired",
      "35:     private SecurityService securityService;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36:     private static final String key;",
      "38:     static {",
      "39:       byte[] array = new byte[32];",
      "40:       new SecureRandom().nextBytes(array);",
      "41:       key = new String(array);",
      "42:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163:                     .and().logout().logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\", \"GET\")).logoutSuccessUrl(",
      "164:                     \"/login?logout\")",
      "166:         }",
      "168:     }",
      "",
      "[Removed Lines]",
      "165:                     .and().rememberMe().key(\"airsonic\");",
      "169: }",
      "",
      "[Added Lines]",
      "175:                     .and().rememberMe().key(key);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8a90d9f77ba074fbb3939617c61772a0f166c7ad",
      "candidate_info": {
        "commit_hash": "8a90d9f77ba074fbb3939617c61772a0f166c7ad",
        "repo": "airsonic/airsonic",
        "commit_url": "https://github.com/airsonic/airsonic/commit/8a90d9f77ba074fbb3939617c61772a0f166c7ad",
        "files": [
          "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java",
          "airsonic-main/src/main/java/org/airsonic/player/service/SettingsService.java"
        ],
        "message": "Add system properties for persisting the 'remember me' key\n\nThis adds the 'airsonic.rememberMeKey' system property (can be set from\ncommand-line with `-Dairsonic.rememberMeKey=<value>`) as well as a\n'RememberMeKey' setting in airsonic.properties, so that the key used for\ngenerating 'remember me' tokens can be persisted across server restarts.\n\nIt also adds a default, insecure key in case we are running in\ndevelopment mode with the 'airsonic.development' property set.",
        "before_after_code_files": [
          "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java||airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java",
          "airsonic-main/src/main/java/org/airsonic/player/service/SettingsService.java||airsonic-main/src/main/java/org/airsonic/player/service/SettingsService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java||airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java"
          ],
          "candidate": [
            "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java||airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java"
          ]
        }
      },
      "candidate_diff": {
        "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java||airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java": [
          "File: airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java -> airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     static final String FAILURE_URL = \"/login?error=1\";",
          "36:     @Autowired",
          "37:     private SecurityService securityService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     static final String DEVELOPMENT_REMEMBER_ME_KEY = \"airsonic\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:             restAuthenticationFilter.setEventPublisher(eventPublisher);",
          "126:             http = http.addFilterBefore(restAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);",
          "128:             http",
          "129:                     .csrf()",
          "130:                     .requireCsrfProtectionMatcher(csrfSecurityRequestMatcher)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:             String rememberMeKey = settingsService.getRememberMeKey();",
          "142:             boolean development = settingsService.isDevelopmentMode();",
          "143:             if (StringUtils.isBlank(rememberMeKey) && !development) {",
          "145:                 logger.debug(\"Generating a new ephemeral 'remember me' key in a secure way.\");",
          "146:                 rememberMeKey = generateRememberMeKey();",
          "147:             } else if (StringUtils.isBlank(rememberMeKey) && development) {",
          "149:                 logger.warn(\"Using a fixed 'remember me' key because we're in development mode, this is INSECURE.\");",
          "150:                 rememberMeKey = DEVELOPMENT_REMEMBER_ME_KEY;",
          "151:             } else {",
          "153:                 logger.info(\"Using a fixed 'remember me' key from system properties, this is insecure.\");",
          "154:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:                     .and().logout().logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\", \"GET\")).logoutSuccessUrl(",
          "171:                     \"/login?logout\")",
          "173:         }",
          "175:     }",
          "",
          "[Removed Lines]",
          "172:                     .and().rememberMe().key(generateRememberMeKey());",
          "",
          "[Added Lines]",
          "200:                     .and().rememberMe().key(rememberMeKey);",
          "",
          "---------------"
        ],
        "airsonic-main/src/main/java/org/airsonic/player/service/SettingsService.java||airsonic-main/src/main/java/org/airsonic/player/service/SettingsService.java": [
          "File: airsonic-main/src/main/java/org/airsonic/player/service/SettingsService.java -> airsonic-main/src/main/java/org/airsonic/player/service/SettingsService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     private static final String KEY_SONOS_SERVICE_NAME = \"SonosServiceName\";",
          "108:     private static final String KEY_SONOS_SERVICE_ID = \"SonosServiceId\";",
          "109:     private static final String KEY_JWT_KEY = \"JWTKey\";",
          "111:     private static final String KEY_SMTP_SERVER = \"SmtpServer\";",
          "112:     private static final String KEY_SMTP_ENCRYPTION = \"SmtpEncryption\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     private static final String KEY_REMEMBER_ME_KEY = \"RememberMeKey\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "794:         setString(KEY_MEDIA_LIBRARY_STATISTICS, statistics.format());",
          "795:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "803:     public boolean isDevelopmentMode() {",
          "804:         return System.getProperty(\"airsonic.development\") != null;",
          "805:     }",
          "812:     public String getRememberMeKey() {",
          "813:         String key = null;",
          "814:         if (StringUtils.isBlank(key)) key = getString(KEY_REMEMBER_ME_KEY, null);",
          "815:         if (StringUtils.isBlank(key)) key = System.getProperty(\"airsonic.rememberMeKey\");",
          "816:         return key;",
          "817:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "268dc6e13dd1d84f309db3a4bd7d0d864c4b5bf1",
      "candidate_info": {
        "commit_hash": "268dc6e13dd1d84f309db3a4bd7d0d864c4b5bf1",
        "repo": "airsonic/airsonic",
        "commit_url": "https://github.com/airsonic/airsonic/commit/268dc6e13dd1d84f309db3a4bd7d0d864c4b5bf1",
        "files": [
          "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java"
        ],
        "message": "Factorise the key generation into a static method",
        "before_after_code_files": [
          "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java||airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java||airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java"
          ],
          "candidate": [
            "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java||airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java"
          ]
        }
      },
      "candidate_diff": {
        "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java||airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java": [
          "File: airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java -> airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     static final String FAILURE_URL = \"/login?error=1\";",
          "44:     @Autowired",
          "45:     private SecurityService securityService;",
          "",
          "[Removed Lines]",
          "36:     private static final String key;",
          "38:     static {",
          "39:       byte[] array = new byte[32];",
          "40:       new SecureRandom().nextBytes(array);",
          "41:       key = new String(array);",
          "42:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:         auth.authenticationProvider(new JWTAuthenticationProvider(jwtKey));",
          "80:     }",
          "83:     @Configuration",
          "84:     @Order(1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     private static String generateRememberMeKey() {",
          "75:       byte[] array = new byte[32];",
          "76:       new SecureRandom().nextBytes(array);",
          "77:       return new String(array);",
          "78:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:                     .and().logout().logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\", \"GET\")).logoutSuccessUrl(",
          "174:                     \"/login?logout\")",
          "176:         }",
          "178:     }",
          "",
          "[Removed Lines]",
          "175:                     .and().rememberMe().key(key);",
          "",
          "[Added Lines]",
          "172:                     .and().rememberMe().key(generateRememberMeKey());",
          "",
          "---------------"
        ]
      }
    }
  ]
}