{
  "cve_id": "CVE-2021-26707",
  "cve_desc": "The merge-deep library before 3.0.3 for Node.js can be tricked into overwriting properties of Object.prototype or adding new properties to it. These properties are then inherited by every object in the program, thus facilitating prototype-pollution attacks against applications using this library.",
  "repo": "jonschlinkert/merge-deep",
  "patch_hash": "11e5dd56de8a6aed0b1ed022089dbce6968d82a5",
  "patch_info": {
    "commit_hash": "11e5dd56de8a6aed0b1ed022089dbce6968d82a5",
    "repo": "jonschlinkert/merge-deep",
    "commit_url": "https://github.com/jonschlinkert/merge-deep/commit/11e5dd56de8a6aed0b1ed022089dbce6968d82a5",
    "files": [
      ".travis.yml",
      "index.js"
    ],
    "message": "add isValidKey function to ensure only valid keys are merged",
    "before_after_code_files": [
      "index.js||index.js"
    ]
  },
  "patch_diff": {
    "index.js||index.js": [
      "File: index.js -> index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: function merge(target, obj) {",
      "34:   for (var key in obj) {",
      "36:       continue;",
      "37:     }",
      "",
      "[Removed Lines]",
      "35:     if (key === '__proto__' || !hasOwn(obj, key)) {",
      "",
      "[Added Lines]",
      "35:     if (!isValidKey(key) || !hasOwn(obj, key)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57: function isObject(val) {",
      "58:   return typeOf(val) === 'object' || typeOf(val) === 'function';",
      "59: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61: function isValidKey(key) {",
      "62:   return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';",
      "63: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c39b16134a6a9704be2e661b49b92e8561f10d90",
      "candidate_info": {
        "commit_hash": "c39b16134a6a9704be2e661b49b92e8561f10d90",
        "repo": "jonschlinkert/merge-deep",
        "commit_url": "https://github.com/jonschlinkert/merge-deep/commit/c39b16134a6a9704be2e661b49b92e8561f10d90",
        "files": [
          "test.js"
        ],
        "message": "add test to ensure constructor is not cloned",
        "before_after_code_files": [
          "test.js||test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jonschlinkert/merge-deep/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test.js||test.js": [
          "File: test.js -> test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     var actual = merge(fixture);",
          "135:     assert.deepEqual(actual, fixture);",
          "136:   });",
          "137: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:   it('should not clone invalid keys', function() {",
          "139:     var obj1 = { a: { b: 1 } };",
          "140:     var obj2 = JSON.parse('{ \"a\": { \"c\": 2 }, \"constructor\": { \"keys\": 42 } }');",
          "142:     var actual = merge({}, obj1, obj2);",
          "143:     assert.deepEqual(actual, { a: { b: 1, c: 2 } });",
          "144:     assert.notDeepEqual(actual.a, obj1.a);",
          "145:     assert.notDeepEqual(actual.a, obj2.a);",
          "146:     assert.notEqual(actual.keys, 42);",
          "147:     assert.notEqual(actual.constructor.keys, 42);",
          "148:   });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "393e2cbaeacf54e77a307c3620a00f0ac057b8d5",
      "candidate_info": {
        "commit_hash": "393e2cbaeacf54e77a307c3620a00f0ac057b8d5",
        "repo": "jonschlinkert/merge-deep",
        "commit_url": "https://github.com/jonschlinkert/merge-deep/commit/393e2cbaeacf54e77a307c3620a00f0ac057b8d5",
        "files": [
          "test.js"
        ],
        "message": "adding a test to ensure using merge-deep for inheritance still works",
        "before_after_code_files": [
          "test.js||test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jonschlinkert/merge-deep/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test.js||test.js": [
          "File: test.js -> test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:     assert.notEqual(actual.keys, 42);",
          "147:     assert.notEqual(actual.constructor.keys, 42);",
          "148:   });",
          "149: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:   it('should allow being used for custom constructors', function() {",
          "152:     function Shape() {",
          "153:       this.type = '';",
          "154:     }",
          "156:     function Position(x, y) {",
          "157:       this.x = x || 0;",
          "158:       this.y = y || 0;",
          "159:     }",
          "161:     Position.prototype.stringify = function() {",
          "162:       return '(' + this.x + ', ' + this.y + ')';",
          "163:     };",
          "165:     function Moveable(x, y) {",
          "166:       Position.call(this, x, y);",
          "167:     }",
          "170:     Moveable.prototype = Object.create(Position.prototype);",
          "171:     Moveable.prototype.constructor = Moveable;",
          "172:     Moveable.prototype = merge(Moveable.prototype, Position.prototype);",
          "174:     Moveable.prototype.move = function(x, y) {",
          "175:       this.x += x;",
          "176:       this.y += y;",
          "177:     };",
          "179:     Moveable.prototype.position = function() {",
          "180:       return this.stringify();",
          "181:     };",
          "183:     function Rectangle() {",
          "184:       Shape.call(this);",
          "185:       Moveable.call(this);",
          "186:       this.type = 'rectangle';",
          "187:     }",
          "190:     Rectangle.prototype = Object.create(Shape.prototype);",
          "191:     Rectangle.prototype.constructor = Rectangle;",
          "194:     Rectangle.prototype = merge(Rectangle.prototype, Moveable.prototype);",
          "196:     var rectangle = new Rectangle();",
          "197:     assert.equal(rectangle.position(), '(0, 0)');",
          "198:     rectangle.move(10, 20);",
          "199:     assert.equal(rectangle.position(), '(10, 20)');",
          "200:   });",
          "",
          "---------------"
        ]
      }
    }
  ]
}