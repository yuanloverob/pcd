{
  "cve_id": "CVE-2020-15129",
  "cve_desc": "In Traefik before versions 1.7.26, 2.2.8, and 2.3.0-rc3, there exists a potential open redirect vulnerability in Traefik's handling of the \"X-Forwarded-Prefix\" header. The Traefik API dashboard component doesn't validate that the value of the header \"X-Forwarded-Prefix\" is a site relative path and will redirect to any header provided URI. Successful exploitation of an open redirect can be used to entice victims to disclose sensitive information. Active Exploitation of this issue is unlikely as it would require active header injection, however the Traefik team addressed this issue nonetheless to prevent abuse in e.g. cache poisoning scenarios.",
  "repo": "containous/traefik",
  "patch_hash": "e63db782c11c7b8bfce30be4c902e7ef8f9f33d2",
  "patch_info": {
    "commit_hash": "e63db782c11c7b8bfce30be4c902e7ef8f9f33d2",
    "repo": "containous/traefik",
    "commit_url": "https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2",
    "files": [
      "pkg/api/dashboard.go",
      "pkg/api/dashboard_test.go"
    ],
    "message": "fix: clean X-Forwarded-Prefix header for the dashboard.",
    "before_after_code_files": [
      "pkg/api/dashboard.go||pkg/api/dashboard.go",
      "pkg/api/dashboard_test.go||pkg/api/dashboard_test.go"
    ]
  },
  "patch_diff": {
    "pkg/api/dashboard.go||pkg/api/dashboard.go": [
      "File: pkg/api/dashboard.go -> pkg/api/dashboard.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"net/http\"",
      "6:  \"github.com/containous/traefik/v2/pkg/log\"",
      "7:  assetfs \"github.com/elazarl/go-bindata-assetfs\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:  \"net/url\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "24:  router.Methods(http.MethodGet).",
      "25:   Path(\"/\").",
      "28:   })",
      "30:  router.Methods(http.MethodGet).",
      "31:   PathPrefix(\"/dashboard/\").",
      "32:   Handler(http.StripPrefix(\"/dashboard/\", http.FileServer(g.Assets)))",
      "33: }",
      "",
      "[Removed Lines]",
      "26:   HandlerFunc(func(response http.ResponseWriter, request *http.Request) {",
      "27:    http.Redirect(response, request, request.Header.Get(\"X-Forwarded-Prefix\")+\"/dashboard/\", http.StatusFound)",
      "",
      "[Added Lines]",
      "27:   HandlerFunc(func(resp http.ResponseWriter, req *http.Request) {",
      "28:    http.Redirect(resp, req, safePrefix(req)+\"/dashboard/\", http.StatusFound)",
      "36: func safePrefix(req *http.Request) string {",
      "37:  prefix := req.Header.Get(\"X-Forwarded-Prefix\")",
      "38:  if prefix == \"\" {",
      "39:   return \"\"",
      "40:  }",
      "42:  parse, err := url.Parse(prefix)",
      "43:  if err != nil {",
      "44:   return \"\"",
      "45:  }",
      "47:  if parse.Host != \"\" {",
      "48:   return \"\"",
      "49:  }",
      "51:  return parse.Path",
      "52: }",
      "",
      "---------------"
    ],
    "pkg/api/dashboard_test.go||pkg/api/dashboard_test.go": [
      "File: pkg/api/dashboard_test.go -> pkg/api/dashboard_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package api",
      "3: import (",
      "4:  \"net/http\"",
      "5:  \"testing\"",
      "7:  \"github.com/stretchr/testify/assert\"",
      "8:  \"github.com/stretchr/testify/require\"",
      "9: )",
      "11: func Test_safePrefix(t *testing.T) {",
      "12:  testCases := []struct {",
      "13:   desc     string",
      "14:   value    string",
      "15:   expected string",
      "16:  }{",
      "17:   {",
      "18:    desc:     \"host\",",
      "19:    value:    \"https://example.com\",",
      "20:    expected: \"\",",
      "21:   },",
      "22:   {",
      "23:    desc:     \"host with path\",",
      "24:    value:    \"https://example.com/foo/bar?test\",",
      "25:    expected: \"\",",
      "26:   },",
      "27:   {",
      "28:    desc:     \"path\",",
      "29:    value:    \"/foo/bar\",",
      "30:    expected: \"/foo/bar\",",
      "31:   },",
      "32:   {",
      "33:    desc:     \"path without leading slash\",",
      "34:    value:    \"foo/bar\",",
      "35:    expected: \"foo/bar\",",
      "36:   },",
      "37:  }",
      "39:  for _, test := range testCases {",
      "40:   test := test",
      "41:   t.Run(test.desc, func(t *testing.T) {",
      "42:    t.Parallel()",
      "44:    req, err := http.NewRequest(http.MethodGet, \"http://localhost\", nil)",
      "45:    require.NoError(t, err)",
      "47:    req.Header.Set(\"X-Forwarded-Prefix\", test.value)",
      "49:    prefix := safePrefix(req)",
      "51:    assert.Equal(t, test.expected, prefix)",
      "52:   })",
      "53:  }",
      "54: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cfa04c300c5db95ae8a52c31a9d973b6dd9c2254",
      "candidate_info": {
        "commit_hash": "cfa04c300c5db95ae8a52c31a9d973b6dd9c2254",
        "repo": "containous/traefik",
        "commit_url": "https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254",
        "files": [
          "api/dashboard.go",
          "api/dashboard_test.go"
        ],
        "message": "fix: clean X-Forwarded-Prefix header for the dashboard.",
        "before_after_code_files": [
          "api/dashboard.go||api/dashboard.go",
          "api/dashboard_test.go||api/dashboard_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "api/dashboard.go||api/dashboard.go": [
          "File: api/dashboard.go -> api/dashboard.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"net/http\"",
          "6:  \"github.com/containous/mux\"",
          "7:  \"github.com/containous/traefik/log\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:  \"net/url\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  router.Methods(http.MethodGet).",
          "25:   Path(\"/\").",
          "28:   })",
          "30:  router.Methods(http.MethodGet).",
          "31:   Path(\"/dashboard/status\").",
          "34:   })",
          "36:  router.Methods(http.MethodGet).",
          "37:   PathPrefix(\"/dashboard/\").",
          "38:   Handler(http.StripPrefix(\"/dashboard/\", http.FileServer(g.Assets)))",
          "39: }",
          "",
          "[Removed Lines]",
          "26:   HandlerFunc(func(response http.ResponseWriter, request *http.Request) {",
          "27:    http.Redirect(response, request, request.Header.Get(\"X-Forwarded-Prefix\")+\"/dashboard/\", 302)",
          "32:   HandlerFunc(func(response http.ResponseWriter, request *http.Request) {",
          "33:    http.Redirect(response, request, \"/dashboard/\", 302)",
          "",
          "[Added Lines]",
          "27:   HandlerFunc(func(resp http.ResponseWriter, req *http.Request) {",
          "28:    http.Redirect(resp, req, safePrefix(req)+\"/dashboard/\", 302)",
          "33:   HandlerFunc(func(resp http.ResponseWriter, req *http.Request) {",
          "34:    http.Redirect(resp, req, \"/dashboard/\", 302)",
          "42: func safePrefix(req *http.Request) string {",
          "43:  prefix := req.Header.Get(\"X-Forwarded-Prefix\")",
          "44:  if prefix == \"\" {",
          "45:   return \"\"",
          "46:  }",
          "48:  parse, err := url.Parse(prefix)",
          "49:  if err != nil {",
          "50:   return \"\"",
          "51:  }",
          "53:  if parse.Host != \"\" {",
          "54:   return \"\"",
          "55:  }",
          "57:  return parse.Path",
          "58: }",
          "",
          "---------------"
        ],
        "api/dashboard_test.go||api/dashboard_test.go": [
          "File: api/dashboard_test.go -> api/dashboard_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package api",
          "3: import (",
          "4:  \"net/http\"",
          "5:  \"testing\"",
          "7:  \"github.com/stretchr/testify/assert\"",
          "8:  \"github.com/stretchr/testify/require\"",
          "9: )",
          "11: func Test_safePrefix(t *testing.T) {",
          "12:  testCases := []struct {",
          "13:   desc     string",
          "14:   value    string",
          "15:   expected string",
          "16:  }{",
          "17:   {",
          "18:    desc:     \"host\",",
          "19:    value:    \"https://example.com\",",
          "20:    expected: \"\",",
          "21:   },",
          "22:   {",
          "23:    desc:     \"host with path\",",
          "24:    value:    \"https://example.com/foo/bar?test\",",
          "25:    expected: \"\",",
          "26:   },",
          "27:   {",
          "28:    desc:     \"path\",",
          "29:    value:    \"/foo/bar\",",
          "30:    expected: \"/foo/bar\",",
          "31:   },",
          "32:   {",
          "33:    desc:     \"path without leading slash\",",
          "34:    value:    \"foo/bar\",",
          "35:    expected: \"foo/bar\",",
          "36:   },",
          "37:  }",
          "39:  for _, test := range testCases {",
          "40:   test := test",
          "41:   t.Run(test.desc, func(t *testing.T) {",
          "42:    t.Parallel()",
          "44:    req, err := http.NewRequest(http.MethodGet, \"http://localhost\", nil)",
          "45:    require.NoError(t, err)",
          "47:    req.Header.Set(\"X-Forwarded-Prefix\", test.value)",
          "49:    prefix := safePrefix(req)",
          "51:    assert.Equal(t, test.expected, prefix)",
          "52:   })",
          "53:  }",
          "54: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}