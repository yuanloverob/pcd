{
  "cve_id": "CVE-2021-43138",
  "cve_desc": "In Async before 2.6.4 and 3.x before 3.2.2, a malicious user can obtain privileges via the mapValues() method, aka lib/internal/iterator.js createObjectIterator prototype pollution.",
  "repo": "caolan/async",
  "patch_hash": "e1ecdbf79264f9ab488c7799f4c76996d5dca66d",
  "patch_info": {
    "commit_hash": "e1ecdbf79264f9ab488c7799f4c76996d5dca66d",
    "repo": "caolan/async",
    "commit_url": "https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d",
    "files": [
      "lib/internal/iterator.js",
      "test/mapValues.js"
    ],
    "message": "Fix prototype pollution vulnerability",
    "before_after_code_files": [
      "lib/internal/iterator.js||lib/internal/iterator.js",
      "test/mapValues.js||test/mapValues.js"
    ]
  },
  "patch_diff": {
    "lib/internal/iterator.js||lib/internal/iterator.js": [
      "File: lib/internal/iterator.js -> lib/internal/iterator.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:     var len = okeys.length;",
      "27:     return function next() {",
      "28:         var key = okeys[++i];",
      "29:         return i < len ? {value: obj[key], key} : null;",
      "30:     };",
      "31: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29:         if (key === '__proto__') {",
      "30:             return next();",
      "31:         }",
      "",
      "---------------"
    ],
    "test/mapValues.js||test/mapValues.js": [
      "File: test/mapValues.js -> test/mapValues.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:                 done();",
      "61:             }, 50);",
      "62:         });",
      "63:     });",
      "65:     context('mapValues', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64:         it('prototype pollution', (done) => {",
      "65:             var input = JSON.parse('{\"a\": 1, \"b\": 2, \"__proto__\": { \"exploit\": true }}');",
      "67:             async.mapValues(input, (val, key, next) => {",
      "68:                 next(null, val)",
      "69:             }, (err, result) => {",
      "70:                 expect(result.exploit).to.equal(undefined)",
      "71:                 done(err);",
      "72:             })",
      "73:         })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8f7f90342a6571ba1c197d747ebed30c368096d2",
      "candidate_info": {
        "commit_hash": "8f7f90342a6571ba1c197d747ebed30c368096d2",
        "repo": "caolan/async",
        "commit_url": "https://github.com/caolan/async/commit/8f7f90342a6571ba1c197d747ebed30c368096d2",
        "files": [
          "lib/internal/iterator.js",
          "mocha_test/mapValues.js"
        ],
        "message": "Fix prototype pollution vulnerability (#1828)\n\n(cherry picked from commit e1ecdbf79264f9ab488c7799f4c76996d5dca66d)\n\nConflicts:\n  lib/internal/iterator.js\n  test/mapValues.js\n\nNOTE(mriedem): The conflicts are due to:\n\n- e4751178540a3c6e64598b93977481ec599704d2 for iterator.js;\n  resolution was trivial\n- bd86f42a7d71552d9a502b50235ffc090a1b4a98 for mapValues.js;\n  resolution was just copying the test change into the old\n  test file before it was moved\n\nThis is a 2.x series backport for\nhttps://nvd.nist.gov/vuln/detail/CVE-2021-43138.\n\nCo-authored-by: Alexander Early <alexander.early@gmail.com>",
        "before_after_code_files": [
          "lib/internal/iterator.js||lib/internal/iterator.js",
          "mocha_test/mapValues.js||mocha_test/mapValues.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "lib/internal/iterator.js||lib/internal/iterator.js"
          ],
          "candidate": [
            "lib/internal/iterator.js||lib/internal/iterator.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/internal/iterator.js||lib/internal/iterator.js": [
          "File: lib/internal/iterator.js -> lib/internal/iterator.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     var len = okeys.length;",
          "28:     return function next() {",
          "29:         var key = okeys[++i];",
          "30:         return i < len ? {value: obj[key], key: key} : null;",
          "31:     };",
          "32: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:         if (key === '__proto__') {",
          "31:             return next();",
          "32:         }",
          "",
          "---------------"
        ],
        "mocha_test/mapValues.js||mocha_test/mapValues.js": [
          "File: mocha_test/mapValues.js -> mocha_test/mapValues.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:                 done();",
          "40:             });",
          "41:         });",
          "42:     });",
          "44:     context('mapValues', function () {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:         it('prototype pollution', (done) => {",
          "44:             var input = JSON.parse('{\"a\": 1, \"b\": 2, \"__proto__\": { \"exploit\": true }}');",
          "46:             async.mapValues(input, (val, key, next) => {",
          "47:                 next(null, val)",
          "48:             }, (err, result) => {",
          "49:                 expect(result.exploit).to.equal(undefined)",
          "50:                 done(err);",
          "51:             })",
          "52:         })",
          "",
          "---------------"
        ]
      }
    }
  ]
}