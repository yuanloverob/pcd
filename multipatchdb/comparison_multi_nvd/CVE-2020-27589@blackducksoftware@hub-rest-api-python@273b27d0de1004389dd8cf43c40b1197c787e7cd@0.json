{
  "cve_id": "CVE-2020-27589",
  "cve_desc": "Synopsys hub-rest-api-python (aka blackduck on PyPI) version 0.0.25 - 0.0.52 does not validate SSL certificates in certain cases.",
  "repo": "blackducksoftware/hub-rest-api-python",
  "patch_hash": "273b27d0de1004389dd8cf43c40b1197c787e7cd",
  "patch_info": {
    "commit_hash": "273b27d0de1004389dd8cf43c40b1197c787e7cd",
    "repo": "blackducksoftware/hub-rest-api-python",
    "commit_url": "https://github.com/blackducksoftware/hub-rest-api-python/commit/273b27d0de1004389dd8cf43c40b1197c787e7cd",
    "files": [
      "blackduck/HubRestApi.py",
      "blackduck/__version__.py"
    ],
    "message": "fixed use of hard-coded values for the verify parameter being supplied to the requests module calls",
    "before_after_code_files": [
      "blackduck/HubRestApi.py||blackduck/HubRestApi.py",
      "blackduck/__version__.py||blackduck/__version__.py"
    ]
  },
  "patch_diff": {
    "blackduck/HubRestApi.py||blackduck/HubRestApi.py": [
      "File: blackduck/HubRestApi.py -> blackduck/HubRestApi.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1307:         if filename.endswith('.json') or filename.endswith('.jsonld'):",
      "1308:             headers['Content-Type'] = 'application/ld+json'",
      "1309:             with open(filename,\"r\") as f:",
      "1311:         elif filename.endswith('.bdio'):",
      "1312:             headers['Content-Type'] = 'application/vnd.blackducksoftware.bdio+zip'",
      "1313:             with open(filename,\"rb\") as f:",
      "1315:         else:",
      "1316:             raise Exception(\"Unkown file type\")",
      "1317:         return response",
      "",
      "[Removed Lines]",
      "1310:                 response = requests.post(url, headers=headers, data=f, verify=False)",
      "1314:                 response = requests.post(url, headers=headers, data=f, verify=False)",
      "",
      "[Added Lines]",
      "1310:                 response = requests.post(url, headers=headers, data=f, verify=not self.config['insecure'])",
      "1314:                 response = requests.post(url, headers=headers, data=f, verify=not self.config['insecure'])",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1338:                     if not os.path.exists(project_name):",
      "1339:                         os.mkdir(project_name)",
      "1340:                     pathname = os.path.join(project_name, filename)",
      "1342:                 with open(pathname, \"wb\") as f:",
      "1343:                     for data in responce.iter_content():",
      "1344:                         f.write(data)",
      "",
      "[Removed Lines]",
      "1341:                 responce = requests.get(url, headers=self.get_headers(), stream=True, verify=False)",
      "",
      "[Added Lines]",
      "1341:                 responce = requests.get(url, headers=self.get_headers(), stream=True, verify=not self.config['insecure'])",
      "",
      "---------------"
    ],
    "blackduck/__version__.py||blackduck/__version__.py": [
      "File: blackduck/__version__.py -> blackduck/__version__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: __version__ = '.'.join(map(str, VERSION))",
      "",
      "[Removed Lines]",
      "1: VERSION = (0, 0, 52)",
      "",
      "[Added Lines]",
      "1: VERSION = (0, 0, 53)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e556a48fe5a3e6b4aefe520e2317f96ff0bd0b2f",
      "candidate_info": {
        "commit_hash": "e556a48fe5a3e6b4aefe520e2317f96ff0bd0b2f",
        "repo": "blackducksoftware/hub-rest-api-python",
        "commit_url": "https://github.com/blackducksoftware/hub-rest-api-python/commit/e556a48fe5a3e6b4aefe520e2317f96ff0bd0b2f",
        "files": [
          "blackduck/__version__.py"
        ],
        "message": "update version tag",
        "before_after_code_files": [
          "blackduck/__version__.py||blackduck/__version__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "blackduck/__version__.py||blackduck/__version__.py"
          ],
          "candidate": [
            "blackduck/__version__.py||blackduck/__version__.py"
          ]
        }
      },
      "candidate_diff": {
        "blackduck/__version__.py||blackduck/__version__.py": [
          "File: blackduck/__version__.py -> blackduck/__version__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: __version__ = '.'.join(map(str, VERSION))",
          "",
          "[Removed Lines]",
          "1: VERSION = (1, 0, 2)",
          "",
          "[Added Lines]",
          "1: VERSION = (1, 0, 3)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4b2d274022118aaffbdba626af8392e8e24241c",
      "candidate_info": {
        "commit_hash": "b4b2d274022118aaffbdba626af8392e8e24241c",
        "repo": "blackducksoftware/hub-rest-api-python",
        "commit_url": "https://github.com/blackducksoftware/hub-rest-api-python/commit/b4b2d274022118aaffbdba626af8392e8e24241c",
        "files": [
          "blackduck/__version__.py"
        ],
        "message": "Update version",
        "before_after_code_files": [
          "blackduck/__version__.py||blackduck/__version__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "blackduck/__version__.py||blackduck/__version__.py"
          ],
          "candidate": [
            "blackduck/__version__.py||blackduck/__version__.py"
          ]
        }
      },
      "candidate_diff": {
        "blackduck/__version__.py||blackduck/__version__.py": [
          "File: blackduck/__version__.py -> blackduck/__version__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: __version__ = '.'.join(map(str, VERSION))",
          "",
          "[Removed Lines]",
          "1: VERSION = (1, 0, 2)",
          "",
          "[Added Lines]",
          "1: VERSION = (1, 0, 3)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa1387295c1165805ae3f7d61e7d4d8fc9238a32",
      "candidate_info": {
        "commit_hash": "fa1387295c1165805ae3f7d61e7d4d8fc9238a32",
        "repo": "blackducksoftware/hub-rest-api-python",
        "commit_url": "https://github.com/blackducksoftware/hub-rest-api-python/commit/fa1387295c1165805ae3f7d61e7d4d8fc9238a32",
        "files": [
          "blackduck/Reporting.py",
          "blackduck/__version__.py",
          "examples/generate_csv_reports_for_project_version.py"
        ],
        "message": "update generate reports (#182)\n\nUpdate to reflect new reports that can be included",
        "before_after_code_files": [
          "blackduck/Reporting.py||blackduck/Reporting.py",
          "blackduck/__version__.py||blackduck/__version__.py",
          "examples/generate_csv_reports_for_project_version.py||examples/generate_csv_reports_for_project_version.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "blackduck/__version__.py||blackduck/__version__.py"
          ],
          "candidate": [
            "blackduck/__version__.py||blackduck/__version__.py"
          ]
        }
      },
      "candidate_diff": {
        "blackduck/Reporting.py||blackduck/Reporting.py": [
          "File: blackduck/Reporting.py -> blackduck/Reporting.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: logger = logging.getLogger(__name__)",
          "12: valid_report_formats = [\"CSV\", \"JSON\"]",
          "13: def create_version_reports(self, version, report_list, format=\"CSV\"):",
          "14:     assert all(list(map(lambda k: k in valid_categories, report_list))), \"One or more selected report categories in {} are not valid ({})\".format(",
          "",
          "[Removed Lines]",
          "11: valid_categories = ['VERSION','CODE_LOCATIONS','COMPONENTS','SECURITY','FILES', 'ATTACHMENTS', 'CRYPTO_ALGORITHMS', 'PROJECT_VERSION_CUSTOM_FIELDS', 'BOM_COMPONENT_CUSTOM_FIELDS', 'LICENSE_TERM_FULFILLMENT', 'UPGRADE_GUIDANCE']",
          "",
          "[Added Lines]",
          "11: valid_categories = ['VERSION','CODE_LOCATIONS','COMPONENTS','SECURITY','FILES', 'ATTACHMENTS', 'CRYPTO_ALGORITHMS', 'PROJECT_VERSION_CUSTOM_FIELDS', 'BOM_COMPONENT_CUSTOM_FIELDS', 'LICENSE_TERM_FULFILLMENT', 'UPGRADE_GUIDANCE', 'VULNERABILITY_MATCH']",
          "",
          "---------------"
        ],
        "blackduck/__version__.py||blackduck/__version__.py": [
          "File: blackduck/__version__.py -> blackduck/__version__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: __version__ = '.'.join(map(str, VERSION))",
          "",
          "[Removed Lines]",
          "1: VERSION = (1, 0, 3)",
          "",
          "[Added Lines]",
          "1: VERSION = (1, 0, 4)",
          "",
          "---------------"
        ],
        "examples/generate_csv_reports_for_project_version.py||examples/generate_csv_reports_for_project_version.py": [
          "File: examples/generate_csv_reports_for_project_version.py -> examples/generate_csv_reports_for_project_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import argparse",
          "12: import json",
          "13: import time",
          "15: parser = argparse.ArgumentParser(\"A program to create reports for a given project-version\")",
          "16: parser.add_argument(\"project_name\")",
          "17: parser.add_argument(\"version_name\")",
          "18: parser.add_argument(\"-z\", \"--zip_file_name\", default=\"reports.zip\")",
          "19: parser.add_argument(\"-r\", \"--reports\",",
          "22: parser.add_argument('--format', default='CSV', choices=[\"CSV\"], help=\"Report format - only CSV available for now\")",
          "23: parser.add_argument('-t', '--tries', default=4, type=int, help=\"How many times to retry downloading the report, i.e. wait for the report to be generated\")",
          "24: parser.add_argument('-s', '--sleep_time', default=5, type=int, help=\"The amount of time to sleep in-between (re-)tries to download the report\")",
          "",
          "[Removed Lines]",
          "20:  default=\"version,scans,components,vulnerabilities,source\",",
          "21:  help=\"Comma separated list (no spaces) of the reports to generate - version, scans, components, vulnerabilities, source, and cryptography reports (default: all, except cryptography\")",
          "",
          "[Added Lines]",
          "13: import logging",
          "16: logging.basicConfig(",
          "17:     level=logging.DEBUG,",
          "18:     format=\"[%(asctime)s] {%(module)s:%(lineno)d} %(levelname)s - %(message)s\"",
          "19: )",
          "21: version_name_map = {",
          "22:  'version': 'VERSION',",
          "23:  'scans': 'CODE_LOCATIONS',",
          "24:  'components': 'COMPONENTS',",
          "25:  'vulnerabilities': 'SECURITY',",
          "26:  'source':'FILES',",
          "27:  'cryptography': 'CRYPTO_ALGORITHMS',",
          "28:  'license_terms': 'LICENSE_TERM_FULFILLMENT',",
          "29:  'component_additional_fields': 'BOM_COMPONENT_CUSTOM_FIELDS',",
          "30:  'project_version_additional_fields': 'PROJECT_VERSION_CUSTOM_FIELDS',",
          "31:  'vulnerability_matches': 'VULNERABILITY_MATCH'",
          "32: }",
          "34: all_reports = list(version_name_map.keys())",
          "41:  default=\",\".join(all_reports),",
          "42:  help=f\"Comma separated list (no spaces) of the reports to generate - {list(version_name_map.keys())}. Default is all reports.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: hub = HubInstance()",
          "38: class FailedReportDownload(Exception):",
          "39:  pass",
          "",
          "[Removed Lines]",
          "30: version_name_map = {",
          "31:  'version': 'VERSION',",
          "32:  'scans': 'CODE_LOCATIONS',",
          "33:  'components': 'COMPONENTS',",
          "34:  'vulnerabilities': 'SECURITY',",
          "35:  'source':'FILES'",
          "36: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "626eb30471dbe85894307af3308341373dde513c",
      "candidate_info": {
        "commit_hash": "626eb30471dbe85894307af3308341373dde513c",
        "repo": "blackducksoftware/hub-rest-api-python",
        "commit_url": "https://github.com/blackducksoftware/hub-rest-api-python/commit/626eb30471dbe85894307af3308341373dde513c",
        "files": [
          "blackduck/__version__.py"
        ],
        "message": "setting version to 0.0.55",
        "before_after_code_files": [
          "blackduck/__version__.py||blackduck/__version__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "blackduck/__version__.py||blackduck/__version__.py"
          ],
          "candidate": [
            "blackduck/__version__.py||blackduck/__version__.py"
          ]
        }
      },
      "candidate_diff": {
        "blackduck/__version__.py||blackduck/__version__.py": [
          "File: blackduck/__version__.py -> blackduck/__version__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: __version__ = '.'.join(map(str, VERSION))",
          "",
          "[Removed Lines]",
          "1: VERSION = (0, 0, 54)",
          "",
          "[Added Lines]",
          "1: VERSION = (0, 0, 55)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e26f602fff730ea0a833f4492e7407ca686de576",
      "candidate_info": {
        "commit_hash": "e26f602fff730ea0a833f4492e7407ca686de576",
        "repo": "blackducksoftware/hub-rest-api-python",
        "commit_url": "https://github.com/blackducksoftware/hub-rest-api-python/commit/e26f602fff730ea0a833f4492e7407ca686de576",
        "files": [
          "blackduck/__version__.py"
        ],
        "message": "pushing v0.0.56 to PyPi with fix for downloading bdio files",
        "before_after_code_files": [
          "blackduck/__version__.py||blackduck/__version__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "blackduck/__version__.py||blackduck/__version__.py"
          ],
          "candidate": [
            "blackduck/__version__.py||blackduck/__version__.py"
          ]
        }
      },
      "candidate_diff": {
        "blackduck/__version__.py||blackduck/__version__.py": [
          "File: blackduck/__version__.py -> blackduck/__version__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: __version__ = '.'.join(map(str, VERSION))",
          "",
          "[Removed Lines]",
          "1: VERSION = (0, 0, 55)",
          "",
          "[Added Lines]",
          "1: VERSION = (0, 0, 56)",
          "",
          "---------------"
        ]
      }
    }
  ]
}