{
  "cve_id": "CVE-2023-45813",
  "cve_desc": "Torbot is an open source tor network intelligence tool. In affected versions the `torbot.modules.validators.validate_link function` uses the python-validators URL validation regex. This particular regular expression has an exponential complexity which allows an attacker to cause an application crash using a well-crafted argument. An attacker can use a well-crafted URL argument to exploit the vulnerability in the regular expression and cause a Denial of Service on the system. The validators file has been removed in version 4.0.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "DedSecInside/TorBot",
  "patch_hash": "ef6e06bc7785355b1701d5524eb4550441086ac4",
  "patch_info": {
    "commit_hash": "ef6e06bc7785355b1701d5524eb4550441086ac4",
    "repo": "DedSecInside/TorBot",
    "commit_url": "https://github.com/DedSecInside/TorBot/commit/ef6e06bc7785355b1701d5524eb4550441086ac4",
    "files": [
      "torbot/modules/validators.py"
    ],
    "message": "remove unused validators file",
    "before_after_code_files": [
      "torbot/modules/validators.py||torbot/modules/validators.py"
    ]
  },
  "patch_diff": {
    "torbot/modules/validators.py||torbot/modules/validators.py": [
      "File: torbot/modules/validators.py -> torbot/modules/validators.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f702d5b61c07df89e06a97ca868ea18bb84089dd",
      "candidate_info": {
        "commit_hash": "f702d5b61c07df89e06a97ca868ea18bb84089dd",
        "repo": "DedSecInside/TorBot",
        "commit_url": "https://github.com/DedSecInside/TorBot/commit/f702d5b61c07df89e06a97ca868ea18bb84089dd",
        "files": [
          "torbot/main.py",
          "torbot/modules/linktree.py"
        ],
        "message": "fix tree printing",
        "before_after_code_files": [
          "torbot/main.py||torbot/main.py",
          "torbot/modules/linktree.py||torbot/modules/linktree.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/DedSecInside/TorBot/pull/307"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "torbot/main.py||torbot/main.py": [
          "File: torbot/main.py -> torbot/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     if args.visualize == 'table' or not args.visualize:",
          "99:         tree.showTable()",
          "100:     elif args.visualize == 'tree':",
          "102:     elif args.visualize == 'json':",
          "103:         tree.showJSON()",
          "",
          "[Removed Lines]",
          "101:         tree.show()",
          "",
          "[Added Lines]",
          "101:         print(tree)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:                 data = tomllib.load(f)",
          "134:                 version = data['tool']['poetry']['version']",
          "135:         except Exception as e:",
          "138:         run(arg_parser, version)",
          "139:     except KeyboardInterrupt:",
          "",
          "[Removed Lines]",
          "136:             raise Exception(\"unable to find version from pyprojec.toml.\\n\", e)",
          "",
          "[Added Lines]",
          "136:             raise Exception(\"unable to find version from pyproject.toml.\\n\", e)",
          "",
          "---------------"
        ],
        "torbot/modules/linktree.py||torbot/modules/linktree.py": [
          "File: torbot/modules/linktree.py -> torbot/modules/linktree.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:         Saves the tree to the current working directory under the given file name.",
          "84:         \"\"\"",
          "85:         file_name = self._get_tree_file_name()",
          "88:     def saveJSON(self) -> None:",
          "89:         \"\"\"",
          "90:         Saves the tree to the current working directory under the given file name in JSON.",
          "91:         \"\"\"",
          "92:         json_data = self.to_json()",
          "94:             f.write(json_data)",
          "96:     def showJSON(self) -> None:",
          "",
          "[Removed Lines]",
          "86:         self.save2file(file_name)",
          "93:         with open(self._get_tree_file_name(), 'w+') as f:",
          "",
          "[Added Lines]",
          "86:         self.save2file(f'{file_name}.txt')",
          "93:         file_name = self._get_tree_file_name()",
          "94:         with open(f'{file_name}.json', 'w+') as f:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171: def parse_phone_numbers(soup: BeautifulSoup) -> list[str]:",
          "172:     \"\"\"",
          "173:     Finds all anchor tags and parses the href attribute.",
          "174:     \"\"\"",
          "175:     tags = soup.find_all('a')",
          "176:     numbers = set()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     example attribute: `tel:+45651112331` or possiby the href attribute itself.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5cfcde398d0d0a143096e6301053955d01b9ac70",
      "candidate_info": {
        "commit_hash": "5cfcde398d0d0a143096e6301053955d01b9ac70",
        "repo": "DedSecInside/TorBot",
        "commit_url": "https://github.com/DedSecInside/TorBot/commit/5cfcde398d0d0a143096e6301053955d01b9ac70",
        "files": [
          ".env",
          "poetry.lock",
          "pyproject.toml",
          "requirements.txt",
          "torbot/main.py",
          "torbot/modules/api.py",
          "torbot/modules/config.py",
          "torbot/modules/info.py",
          "torbot/modules/linktree.py",
          "torbot/modules/tests/test_pagereader.py"
        ],
        "message": "more major changes",
        "before_after_code_files": [
          "poetry.lock||poetry.lock",
          "torbot/main.py||torbot/main.py",
          "torbot/modules/api.py||torbot/modules/api.py",
          "torbot/modules/config.py||torbot/modules/config.py",
          "torbot/modules/info.py||torbot/modules/info.py",
          "torbot/modules/linktree.py||torbot/modules/linktree.py",
          "torbot/modules/tests/test_pagereader.py||torbot/modules/tests/test_pagereader.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/DedSecInside/TorBot/pull/307"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:     {file = \"pywin32_ctypes-0.2.2-py3-none-any.whl\", hash = \"sha256:bf490a1a709baf35d688fe0ecf980ed4de11d2b3e37b51e5442587a75d9957e7\"},",
          "414: ]",
          "437: [[package]]",
          "438: name = \"scikit-learn\"",
          "439: version = \"1.3.0\"",
          "",
          "[Removed Lines]",
          "416: [[package]]",
          "417: name = \"requests\"",
          "418: version = \"2.31.0\"",
          "419: description = \"Python HTTP for Humans.\"",
          "420: optional = false",
          "421: python-versions = \">=3.7\"",
          "422: files = [",
          "423:     {file = \"requests-2.31.0-py3-none-any.whl\", hash = \"sha256:58cd2187c01e70e6e26505bca751777aa9f2ee0b7f4300988b709f44e013003f\"},",
          "424:     {file = \"requests-2.31.0.tar.gz\", hash = \"sha256:942c5a758f98d790eaed1a29cb6eefc7ffb0d1cf7af05c3d2791656dbd6ad1e1\"},",
          "425: ]",
          "427: [package.dependencies]",
          "428: certifi = \">=2017.4.17\"",
          "429: charset-normalizer = \">=2,<4\"",
          "430: idna = \">=2.5,<4\"",
          "431: urllib3 = \">=1.21.1,<3\"",
          "433: [package.extras]",
          "434: socks = [\"PySocks (>=1.5.6,!=1.5.7)\"]",
          "435: use-chardet-on-py3 = [\"chardet (>=3.0.2,<6)\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "714: [metadata]",
          "715: lock-version = \"2.0\"",
          "716: python-versions = \">=3.9,<=3.11.4\"",
          "",
          "[Removed Lines]",
          "717: content-hash = \"7b3ae36389472ec97dd5aacc437381b5c7f13f3d08e4ab738ef699b46c85a17a\"",
          "",
          "[Added Lines]",
          "696: content-hash = \"fa048130f884a71b33d42a8dd2940a2c17365309afe56ae1c6abc2dfc6ee5a40\"",
          "",
          "---------------"
        ],
        "torbot/main.py||torbot/main.py": [
          "File: torbot/main.py -> torbot/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import sys",
          "7: import logging",
          "8: import tomllib",
          "10: from modules.api import get_ip",
          "11: from modules.color import color",
          "12: from modules.updater import check_version",
          "13: from modules.info import execute_all",
          "14: from modules.linktree import LinkTree",
          "19:     \"\"\"",
          "20:     https://check.torproject.org/ tells you if you are using tor and it",
          "21:     displays your IP address which we scape and display",
          "22:     \"\"\"",
          "24:     print(resp[\"header\"])",
          "25:     print(color(resp[\"body\"], \"yellow\"))",
          "",
          "[Removed Lines]",
          "15: from modules.config import project_root_directory",
          "18: def print_tor_ip_address() -> None:",
          "23:     resp = get_ip()",
          "",
          "[Added Lines]",
          "9: import httpx",
          "16: from modules.config import project_root_directory, socks5_host, socks5_port",
          "19: def print_tor_ip_address(client: httpx.Client) -> None:",
          "24:     resp = get_ip(client)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         check_version()",
          "78:         sys.exit()",
          "105:     print(\"\\n\\n\")",
          "",
          "[Removed Lines]",
          "80:     # print header and IP address if not set to quiet",
          "81:     if not args.quiet:",
          "82:         print_header(version)",
          "83:         print_tor_ip_address()",
          "85:     if args.info:",
          "86:         execute_all(args.url)",
          "88:     tree = LinkTree(url=args.url, depth=args.depth)",
          "89:     tree.load()",
          "91:     # save data if desired",
          "92:     if args.save == 'tree':",
          "93:         tree.save()",
          "94:     elif args.save == 'json':",
          "95:         tree.saveJSON()",
          "97:     # always print something, table is the default",
          "98:     if args.visualize == 'table' or not args.visualize:",
          "99:         tree.showTable()",
          "100:     elif args.visualize == 'tree':",
          "101:         print(tree)",
          "102:     elif args.visualize == 'json':",
          "103:         tree.showJSON()",
          "",
          "[Added Lines]",
          "82:     socks5_proxy = f'socks5://{socks5_host}:{socks5_port}'",
          "83:     with httpx.Client(timeout=60, proxies=socks5_proxy) as client:",
          "84:         # print header and IP address if not set to quiet",
          "85:         if not args.quiet:",
          "86:             print_header(version)",
          "87:             print_tor_ip_address(client)",
          "89:         if args.info:",
          "90:             execute_all(client, args.url)",
          "92:         tree = LinkTree(url=args.url, depth=args.depth, client=client)",
          "93:         tree.load()",
          "95:         # save data if desired",
          "96:         if args.save == 'tree':",
          "97:             tree.save()",
          "98:         elif args.save == 'json':",
          "99:             tree.saveJSON()",
          "101:         # always print something, table is the default",
          "102:         if args.visualize == 'table' or not args.visualize:",
          "103:             tree.showTable()",
          "104:         elif args.visualize == 'tree':",
          "105:             print(tree)",
          "106:         elif args.visualize == 'json':",
          "107:             tree.showJSON()",
          "",
          "---------------"
        ],
        "torbot/modules/api.py||torbot/modules/api.py": [
          "File: torbot/modules/api.py -> torbot/modules/api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: logging.getLogger(\"httpx\").setLevel(logging.WARNING)",
          "16:     \"\"\"",
          "17:     Returns the IP address of the current Tor client the service is using.",
          "18:     \"\"\"",
          "20:     soup = BeautifulSoup(resp.text, 'html.parser')",
          "22:     # Get the content of check tor project, this contains the header and body",
          "",
          "[Removed Lines]",
          "15: def get_ip() -> dict:",
          "19:     resp = httpx.get(\"https://check.torproject.org/\", proxies='socks5://127.0.0.1:9050')",
          "",
          "[Added Lines]",
          "15: def get_ip(client: httpx.Client) -> dict:",
          "19:     resp = client.get(\"https://check.torproject.org/\")",
          "",
          "---------------"
        ],
        "torbot/modules/config.py||torbot/modules/config.py": [
          "File: torbot/modules/config.py -> torbot/modules/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: dotenv_path = os.path.join(project_root_directory, '.env')",
          "19: load_dotenv(dotenv_path=dotenv_path, verbose=True)",
          "21: def get_data_directory():",
          "22:     data_directory = os.getenv('TORBOT_DATA_DIR')",
          "23:     # if a path is not set, write data to the config directory",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: socks5_host = os.getenv('SOCKS5_HOST')",
          "22: socks5_port = os.getenv('SOCKS5_PORT')",
          "",
          "---------------"
        ],
        "torbot/modules/info.py||torbot/modules/info.py": [
          "File: torbot/modules/info.py -> torbot/modules/info.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from urllib.parse import urlsplit",
          "9: from bs4 import BeautifulSoup",
          "10: from termcolor import cprint",
          "14: keys = set()  # high entropy strings, prolly secret keys",
          "",
          "[Removed Lines]",
          "11: from requests.exceptions import HTTPError",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: ]",
          "36:     \"\"\"Initialise datasets and functions to retrieve data, and execute",
          "37:     each for a given link.",
          "",
          "[Removed Lines]",
          "35: def execute_all(link, *, display_status=False):",
          "",
          "[Added Lines]",
          "34: def execute_all(client: httpx.Client, link: str, *, display_status: bool = False) -> None:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:             attempts to terminal.",
          "43:     \"\"\"",
          "46:     soup = BeautifulSoup(resp.text, 'html.parser')",
          "47:     validation_functions = [",
          "48:         get_robots_txt, get_dot_git, get_dot_svn, get_dot_git, get_intel, get_dot_htaccess, get_bitcoin_address",
          "49:     ]",
          "50:     for validate_func in validation_functions:",
          "51:         try:",
          "54:             cprint('Error', 'red')",
          "56:     display_webpage_description(soup)",
          "",
          "[Removed Lines]",
          "45:     resp = httpx.get(link, proxies='socks5://127.0.0.1:9050')",
          "52:             validate_func(link, resp)",
          "53:         except (ConnectionError, HTTPError):",
          "",
          "[Added Lines]",
          "44:     resp = client.get(link)",
          "51:             validate_func(client, link, resp)",
          "52:         except:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:         print('*', key, ':', val)",
          "75:     \"\"\" Check link for Robot.txt, and if found, add link to robots dataset.",
          "77:     Args:",
          "",
          "[Removed Lines]",
          "74: def get_robots_txt(target, response):",
          "",
          "[Added Lines]",
          "73: def get_robots_txt(client: httpx.Client, target: str, response: str) -> None:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "81:     cprint(\"[*]Checking for Robots.txt\", 'yellow')",
          "82:     url = target",
          "83:     target = \"{0.scheme}://{0.netloc}/\".format(urlsplit(url))",
          "85:     print(target + \"robots.txt\")",
          "86:     matches = re.findall(r'Allow: (.*)|Disallow: (.*)', response)",
          "87:     for match in matches:",
          "",
          "[Removed Lines]",
          "84:     httpx.get(target + \"robots.txt\", proxies='socks5://127.0.0.1:9050')",
          "",
          "[Added Lines]",
          "83:     client.get(target + \"robots.txt\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "93:         print(robots)",
          "97:     \"\"\" Check link for intel, and if found, add link to intel dataset,",
          "98:     including but not limited to website accounts and AWS buckets.",
          "",
          "[Removed Lines]",
          "96: def get_intel(link, response):",
          "",
          "[Added Lines]",
          "95: def get_intel(client: httpx.Client, url: str, response: str) -> None:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "109:         intel.add(match)",
          "113:     \"\"\" Check link for .git folders exposed on public domain.",
          "115:     Args:",
          "",
          "[Removed Lines]",
          "112: def get_dot_git(target, response):",
          "",
          "[Added Lines]",
          "111: def get_dot_git(client: httpx.Client, target: str, response: str) -> None:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "119:     cprint(\"[*]Checking for .git folder\", 'yellow')",
          "120:     url = target",
          "121:     target = \"{0.scheme}://{0.netloc}/\".format(urlsplit(url))",
          "123:     if not resp.text.__contains__(\"404\"):",
          "124:         cprint(\"Alert!\", 'red')",
          "125:         cprint(\".git folder exposed publicly\", 'red')",
          "",
          "[Removed Lines]",
          "122:     resp = httpx.get(target + \"/.git/config\", proxies='socks5://127.0.0.1:9050')",
          "",
          "[Added Lines]",
          "121:     resp = client.get(target + \"/.git/config\")",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "127:         cprint(\"NO .git folder found\", 'blue')",
          "131:     \"\"\" Check link for Bitcoin addresses, and if found, print.",
          "133:     Args:",
          "",
          "[Removed Lines]",
          "130: def get_bitcoin_address(target, response):",
          "",
          "[Added Lines]",
          "129: def get_bitcoin_address(client: httpx.Client, target: str, response: str) -> None:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "140:         print(\"BTC: \", bitcoin)",
          "144:     \"\"\" Check link for .svn folders exposed on public domain=.",
          "146:     Args:",
          "",
          "[Removed Lines]",
          "143: def get_dot_svn(target, response):",
          "",
          "[Added Lines]",
          "142: def get_dot_svn(client: httpx.Client, target: str, response: str) -> None:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "158:         cprint(\"NO .SVN folder found\", 'blue')",
          "162:     \"\"\" Check link for .htaccess files on public domain.",
          "164:     Args:",
          "",
          "[Removed Lines]",
          "161: def get_dot_htaccess(target, response):",
          "",
          "[Added Lines]",
          "160: def get_dot_htaccess(client: httpx.Client, target: str, response: str) -> None:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "179:         cprint(resp, 'blue')",
          "183:     \"\"\"Print all meta tags found in page.",
          "185:     Args:",
          "",
          "[Removed Lines]",
          "182: def display_webpage_description(soup):",
          "",
          "[Added Lines]",
          "181: def display_webpage_description(soup: BeautifulSoup) -> None:",
          "",
          "---------------"
        ],
        "torbot/modules/linktree.py||torbot/modules/linktree.py": [
          "File: torbot/modules/linktree.py -> torbot/modules/linktree.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: class LinkTree(Tree):",
          "36:         super().__init__()",
          "37:         self._url = url",
          "38:         self._depth = depth",
          "40:     def load(self) -> None:",
          "41:         self._append_node(id=self._url, parent_id=None)",
          "",
          "[Removed Lines]",
          "35:     def __init__(self, url: str, depth: int) -> None:",
          "",
          "[Added Lines]",
          "35:     def __init__(self, url: str, depth: int, client: httpx.Client) -> None:",
          "39:         self._client = client",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:         Creates a node for a tree using the given ID which corresponds to a URL.",
          "47:         If the parent_id is None, this will be considered a root node.",
          "48:         \"\"\"",
          "50:         soup = BeautifulSoup(resp.text, 'html.parser')",
          "51:         title = soup.title.text.strip() if soup.title is not None else parse_hostname(id)",
          "52:         try:",
          "",
          "[Removed Lines]",
          "49:         resp = httpx.get(id, timeout=60, proxies='socks5://127.0.0.1:9050')",
          "",
          "[Added Lines]",
          "50:         resp = self._client.get(id)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:         \"\"\"",
          "65:         if depth > 0:",
          "66:             depth -= 1",
          "68:             children = parse_links(resp.text)",
          "69:             for child in children:",
          "70:                 self._append_node(id=child, parent_id=url)",
          "",
          "[Removed Lines]",
          "67:             resp = httpx.get(url, timeout=60, proxies='socks5://127.0.0.1:9050')",
          "",
          "[Added Lines]",
          "68:             resp = self._client.get(url)",
          "",
          "---------------"
        ],
        "torbot/modules/tests/test_pagereader.py||torbot/modules/tests/test_pagereader.py": [
          "File: torbot/modules/tests/test_pagereader.py -> torbot/modules/tests/test_pagereader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}