{
  "cve_id": "CVE-2022-24818",
  "cve_desc": "GeoTools is an open source Java library that provides tools for geospatial data. The GeoTools library has a number of data sources that can perform unchecked JNDI lookups, which in turn can be used to perform class deserialization and result in arbitrary code execution. Similar to the Log4J case, the vulnerability can be triggered if the JNDI names are user-provided, but requires admin-level login to be triggered. The lookups are now restricted in GeoTools 26.4, GeoTools 25.6, and GeoTools 24.6. Users unable to upgrade should ensure that any downstream application should not allow usage of remotely provided JNDI strings.",
  "repo": "geotools/geotools",
  "patch_hash": "4f70fa3234391dd0cda883a20ab0ec75688cba49",
  "patch_info": {
    "commit_hash": "4f70fa3234391dd0cda883a20ab0ec75688cba49",
    "repo": "geotools/geotools",
    "commit_url": "https://github.com/geotools/geotools/commit/4f70fa3234391dd0cda883a20ab0ec75688cba49",
    "files": [
      "docs/user/library/metadata/geotools.rst",
      "docs/user/welcome/upgrade.rst",
      "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
      "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
      "modules/library/metadata/pom.xml",
      "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
      "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
      "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
      "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
      "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
      "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
      "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
    ],
    "message": "[GEOT-7115] Streamline JNDI lookups",
    "before_after_code_files": [
      "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
      "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
      "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
      "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
      "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
      "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
      "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
      "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
      "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
    ]
  },
  "patch_diff": {
    "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java": [
      "File: modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java -> modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:     public DataSource createNewDataSource(Map<String, ?> params) throws IOException {",
      "65:         String refName = (String) JNDI_REFNAME.lookUp(params);",
      "66:         try {",
      "68:         } catch (Exception e) {",
      "69:             throw new DataSourceException(\"Could not find the specified data source in JNDI\", e);",
      "70:         }",
      "",
      "[Removed Lines]",
      "67:             return (DataSource) GeoTools.getInitialContext().lookup(refName);",
      "",
      "[Added Lines]",
      "67:             return (DataSource) GeoTools.jndiLookup(refName);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:     @Override",
      "85:     public boolean isAvailable() {",
      "92:     }",
      "93: }",
      "",
      "[Removed Lines]",
      "86:         try {",
      "87:             GeoTools.getInitialContext();",
      "88:             return true;",
      "89:         } catch (Exception e) {",
      "90:             return false;",
      "91:         }",
      "",
      "[Added Lines]",
      "86:         return GeoTools.isJNDIAvailable();",
      "",
      "---------------"
    ],
    "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java": [
      "File: modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java -> modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import java.util.Map;",
      "22: import java.util.logging.Level;",
      "23: import java.util.logging.Logger;",
      "25: import javax.naming.NamingException;",
      "26: import javax.sql.DataSource;",
      "27: import org.geotools.data.DataStore;",
      "",
      "[Removed Lines]",
      "24: import javax.naming.Context;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "90:         String jndiName = (String) JNDI_REFNAME.lookUp(params);",
      "91:         if (jndiName == null) throw new IOException(\"Missing \" + JNDI_REFNAME.description);",
      "94:         DataSource ds = null;",
      "96:         try {",
      "104:         } catch (NamingException e1) {",
      "107:             try {",
      "108:                 if (jndiName.startsWith(J2EERootContext) == false) {",
      "111:                     Logger.getLogger(this.getClass().getName())",
      "112:                             .log(",
      "",
      "[Removed Lines]",
      "93:         Context ctx = null;",
      "97:             ctx = GeoTools.getInitialContext();",
      "98:         } catch (NamingException e) {",
      "99:             throw new RuntimeException(e);",
      "100:         }",
      "102:         try {",
      "103:             ds = (DataSource) ctx.lookup(jndiName);",
      "109:                     ds = (DataSource) ctx.lookup(J2EERootContext + jndiName);",
      "",
      "[Added Lines]",
      "95:             ds = (DataSource) GeoTools.jndiLookup(jndiName);",
      "101:                     ds = (DataSource) GeoTools.jndiLookup(J2EERootContext + jndiName);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "136:     @Override",
      "137:     public boolean isAvailable() {",
      "144:     }",
      "",
      "[Removed Lines]",
      "138:         try {",
      "139:             GeoTools.getInitialContext();",
      "140:             return true;",
      "141:         } catch (NamingException e) {",
      "142:             return false;",
      "143:         }",
      "",
      "[Added Lines]",
      "130:         return GeoTools.isJNDIAvailable();",
      "",
      "---------------"
    ],
    "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java": [
      "File: modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java -> modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.lang.reflect.InvocationTargetException;",
      "26: import java.lang.reflect.Modifier;",
      "27: import java.net.MalformedURLException;",
      "28: import java.net.URL;",
      "29: import java.security.AccessController;",
      "30: import java.security.PrivilegedAction;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import java.net.URI;",
      "29: import java.net.URISyntaxException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38: import java.util.Properties;",
      "39: import java.util.Set;",
      "40: import java.util.StringTokenizer;",
      "41: import java.util.jar.Manifest;",
      "42: import java.util.logging.Level;",
      "43: import java.util.logging.Logger;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43: import java.util.function.Predicate;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "301:         BINDINGS = Collections.unmodifiableMap(bindings);",
      "302:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "312:     public static final Predicate<String> DEFAULT_JNDI_VALIDATOR =",
      "313:             name -> {",
      "314:                 Logger LOGGER = Logging.getLogger(GeoTools.class);",
      "315:                 try {",
      "316:                     URI uri = new URI(name);",
      "317:                     boolean result = uri.getScheme() == null || uri.getScheme().equals(\"java\");",
      "318:                     if (!result)",
      "319:                         LOGGER.warning(",
      "320:                                 \"JNDI lookup allowed only on java scheme, or no scheme. Found instead: \"",
      "321:                                         + name);",
      "322:                     return result;",
      "323:                 } catch (URISyntaxException e) {",
      "324:                     LOGGER.log(Level.WARNING, \"Invalid JNDI name provided\", e);",
      "325:                     return false;",
      "326:                 }",
      "327:             };",
      "329:     private static Predicate<String> jndiValidator = DEFAULT_JNDI_VALIDATOR;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "743:         synchronized (GeoTools.class) {",
      "745:         }",
      "746:         fireConfigurationChanged();",
      "747:     }",
      "",
      "[Removed Lines]",
      "742:     public static void init(final InitialContext applicationContext) {",
      "744:             context = applicationContext;",
      "",
      "[Added Lines]",
      "769:     public static void init(final InitialContext initialContext) {",
      "771:             context = initialContext;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "934:         }",
      "935:         return defaultValue;",
      "936:     }",
      "947:     @Deprecated",
      "952:     }",
      "961:         if (context == null) {",
      "962:             try {",
      "963:                 context = new InitialContext();",
      "",
      "[Removed Lines]",
      "948:     public static synchronized InitialContext getInitialContext(final Hints hints)",
      "949:             throws NamingException {",
      "951:         return getInitialContext();",
      "960:     public static synchronized InitialContext getInitialContext() throws NamingException {",
      "",
      "[Added Lines]",
      "974:     public static synchronized InitialContext getInitialContext() throws NamingException {",
      "975:         Logging.getLogger(GeoTools.class)",
      "976:                 .severe(",
      "977:                         \"Please don't use GeoTools.getInitialContext(), perform lookups using GeoTools.jndiLookup(s) instead.\");",
      "978:         return getJNDIContext();",
      "981:     private static synchronized InitialContext getJNDIContext() throws NamingException {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "968:         return context;",
      "969:     }",
      "971:     private static NamingException handleException(Exception e) {",
      "972:         final Logger LOGGER = Logging.getLogger(GeoTools.class);",
      "973:         final String propFileName = \"jndi.properties\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "996:     public static boolean isJNDIAvailable() {",
      "997:         try {",
      "999:             return getJNDIContext() != null;",
      "1000:         } catch (NamingException e) {",
      "1001:             return false;",
      "1002:         }",
      "1003:     }",
      "1013:     public static void setJNDINameValidator(Predicate<String> validator) {",
      "1014:         jndiValidator = validator;",
      "1015:     }",
      "1026:     public static Object jndiLookup(String name) throws NamingException {",
      "1027:         if (!jndiValidator.test(name)) return null;",
      "1028:         return getJNDIContext().lookup(name);",
      "1029:     }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1068:     public static String fixName(final String name) {",
      "1069:         return fixName(null, name, null);",
      "1070:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1131:     @Deprecated",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1083:     public static String fixName(final Context context, final String name) {",
      "1084:         return (context != null) ? fixName(context, name, null) : name;",
      "1085:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1150:     @Deprecated",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1092:     private static String fixName(Context context, final String name, final Hints hints) {",
      "1093:         String fixed = null;",
      "1094:         if (name != null) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1164:     @Deprecated",
      "",
      "---------------"
    ],
    "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java": [
      "File: modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java -> modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:     private FactoryRegistry getRegistry(",
      "72:             final boolean creator,",
      "73:             final Factory factory1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:     @SuppressWarnings(\"PMD.UnusedPrivateMethod\") // PMD getting confused here?",
      "",
      "---------------"
    ],
    "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java": [
      "File: modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java -> modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: import java.util.Map;",
      "30: import java.util.jar.Manifest;",
      "31: import javax.media.jai.JAI;",
      "32: import org.apache.commons.logging.LogFactory;",
      "33: import org.geotools.util.NullEntityResolver;",
      "34: import org.geotools.util.PreventLocalEntityResolver;",
      "35: import org.geotools.util.Version;",
      "36: import org.junit.Test;",
      "37: import org.opengis.filter.Filter;",
      "38: import org.xml.sax.EntityResolver;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: import javax.naming.InitialContext;",
      "33: import javax.naming.NamingException;",
      "38: import org.junit.Before;",
      "40: import org.mockito.Mockito;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48: public final class GeoToolsTest {",
      "50:     @Test",
      "51:     public void testAssertionEnabled() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     @Before",
      "55:     public void clearJNDI() throws NamingException {",
      "56:         GeoTools.clearInitialContext();",
      "57:         GeoTools.setJNDINameValidator(GeoTools.DEFAULT_JNDI_VALIDATOR);",
      "58:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "196:     @Test",
      "197:     public void testFixName() {",
      "198:         assertNull(GeoTools.fixName(null));",
      "199:         assertEquals(\"simpleName\", GeoTools.fixName(\"simpleName\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "208:     @SuppressWarnings(\"deprecation\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "262:             Hints.scanSystemProperties();",
      "263:         }",
      "264:     }",
      "265: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "278:     @Test",
      "279:     public void testLookupValidation() throws Exception {",
      "281:         InitialContext ctx = Mockito.mock(InitialContext.class);",
      "282:         Object test1 = new Object();",
      "283:         String name1 = \"java://test1\";",
      "284:         Mockito.when(ctx.lookup(name1)).thenReturn(test1);",
      "285:         Object test2 = new Object();",
      "286:         String name2 = \"ftp://test2\";",
      "287:         Mockito.when(ctx.lookup(name2)).thenReturn(test2);",
      "288:         Object test3 = new Object();",
      "289:         String name3 = \"http://test3\";",
      "290:         Mockito.when(ctx.lookup(name3)).thenReturn(test3);",
      "291:         Object test4 = new Object();",
      "292:         String name4 = \"java://test4{}\"; // invalid URI",
      "293:         Mockito.when(ctx.lookup(name4)).thenReturn(test4);",
      "296:         GeoTools.init(ctx);",
      "297:         assertSame(test1, GeoTools.jndiLookup(name1));",
      "298:         assertNull(GeoTools.jndiLookup(name2));",
      "299:         assertNull(GeoTools.jndiLookup(name3));",
      "300:         assertNull(GeoTools.jndiLookup(name4));",
      "303:         GeoTools.setJNDINameValidator(name -> true);",
      "304:         assertSame(test1, GeoTools.jndiLookup(name1));",
      "305:         assertSame(test2, GeoTools.jndiLookup(name2));",
      "306:         assertSame(test3, GeoTools.jndiLookup(name3));",
      "307:         assertSame(test4, GeoTools.jndiLookup(name4));",
      "308:     }",
      "",
      "---------------"
    ],
    "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java": [
      "File: modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java -> modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: import java.sql.SQLException;",
      "21: import java.util.logging.Level;",
      "22: import java.util.logging.Logger;",
      "24: import javax.sql.DataSource;",
      "25: import org.geotools.metadata.iso.citation.Citations;",
      "26: import org.geotools.util.SimpleInternationalString;",
      "",
      "[Removed Lines]",
      "23: import javax.naming.InitialContext;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73:             return (DataSource) hint;",
      "74:         } else if (hint instanceof String) {",
      "75:             String name = (String) hint;",
      "77:             try {",
      "81:             } catch (Exception e) {",
      "82:                 throw new FactoryException(\"EPSG_DATA_SOURCE '\" + name + \"' not found:\" + e, e);",
      "83:             }",
      "",
      "[Removed Lines]",
      "76:             InitialContext context;",
      "78:                 context = GeoTools.getInitialContext();",
      "80:                 return (DataSource) context.lookup(name);",
      "",
      "[Added Lines]",
      "76:                 return (DataSource) GeoTools.jndiLookup(name);",
      "",
      "---------------"
    ],
    "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java": [
      "File: modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java -> modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "303:             if (hint instanceof String) {",
      "304:                 String name = (String) hint;",
      "305:                 try {",
      "307:                 } catch (NamingException e) {",
      "308:                     throw new FactoryException(\"A EPSG_DATA_SOURCE hint is required:\" + e);",
      "309:                 }",
      "",
      "[Removed Lines]",
      "306:                     dataSource = (DataSource) GeoTools.getInitialContext().lookup(name);",
      "",
      "[Added Lines]",
      "306:                     dataSource = (DataSource) GeoTools.jndiLookup(name);",
      "",
      "---------------"
    ],
    "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java": [
      "File: modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java -> modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import java.util.jar.Attributes.Name;",
      "23: import java.util.logging.Level;",
      "24: import java.util.logging.LogRecord;",
      "26: import javax.naming.NamingException;",
      "28: import javax.sql.DataSource;",
      "29: import org.geotools.metadata.i18n.ErrorKeys;",
      "30: import org.geotools.metadata.i18n.Errors;",
      "",
      "[Removed Lines]",
      "25: import javax.naming.InitialContext;",
      "27: import javax.naming.NoInitialContextException;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "92:     public static final String DATASOURCE_NAME = \"java:comp/env/jdbc/EPSG\";",
      "104:     protected static final int PRIORITY = MAXIMUM_PRIORITY - 10;",
      "107:     private final ReferencingFactoryContainer factories;",
      "",
      "[Removed Lines]",
      "101:     private static final boolean ALLOW_REGISTRATION = false;",
      "114:     private transient InitialContext registerInto;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "303:     protected DataSource createDataSource() throws SQLException {",
      "305:         DataSource source = null;",
      "306:         try {",
      "314:         }",
      "315:         return source;",
      "",
      "[Removed Lines]",
      "304:         InitialContext context = null;",
      "307:             context = GeoTools.getInitialContext();",
      "308:             source = (DataSource) context.lookup(datasourceName);",
      "309:         } catch (IllegalArgumentException | NoInitialContextException exception) {",
      "311:         } catch (NamingException exception) {",
      "312:             registerInto = context;",
      "",
      "[Added Lines]",
      "288:             source = (DataSource) GeoTools.jndiLookup(datasourceName);",
      "289:         } catch (IllegalArgumentException | NamingException exception) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "391:         if (source == null) {",
      "392:             throw new FactoryNotFoundException(Errors.format(ErrorKeys.NO_DATA_SOURCE));",
      "393:         }",
      "",
      "[Removed Lines]",
      "383:         DataSource source;",
      "384:         final InitialContext context;",
      "385:         try {",
      "386:             source = createDataSource();",
      "387:             context = registerInto;",
      "388:         } finally {",
      "389:             registerInto = null;",
      "390:         }",
      "",
      "[Added Lines]",
      "360:         DataSource source = createDataSource();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "398:         } finally {",
      "399:             datasource = null;",
      "400:         }",
      "422:         this.datasource = source; // Stores the data source only after success.",
      "423:         return factory;",
      "424:     }",
      "",
      "[Removed Lines]",
      "405:         LogRecord record;",
      "406:         if (ALLOW_REGISTRATION && context != null) {",
      "407:             try {",
      "408:                 context.bind(datasourceName, source);",
      "409:                 record =",
      "410:                         Loggings.format(",
      "411:                                 Level.FINE,",
      "412:                                 LoggingKeys.CREATED_DATASOURCE_ENTRY_$1,",
      "413:                                 datasourceName);",
      "414:             } catch (NamingException exception) {",
      "415:                 record =",
      "416:                         Loggings.format(",
      "417:                                 Level.WARNING, LoggingKeys.CANT_BIND_DATASOURCE_$1, datasourceName);",
      "418:                 record.setThrown(exception);",
      "419:             }",
      "420:             log(record);",
      "421:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java": [
      "File: modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java -> modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "117:         String jndi = first(db, \"jndi\").map(this::nodeValue).orElse(null);",
      "118:         if (jndi != null) {",
      "119:             try {",
      "121:             } catch (NamingException e) {",
      "122:                 throw new IllegalArgumentException(\"Error performing JNDI lookup for: \" + jndi, e);",
      "123:             }",
      "",
      "[Removed Lines]",
      "120:                 dataSource = (DataSource) GeoTools.getInitialContext().lookup(jndi);",
      "",
      "[Added Lines]",
      "120:                 dataSource = (DataSource) GeoTools.jndiLookup(jndi);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1c99387c5dc8fb10b1437efeff409a6c667d156f",
      "candidate_info": {
        "commit_hash": "1c99387c5dc8fb10b1437efeff409a6c667d156f",
        "repo": "geotools/geotools",
        "commit_url": "https://github.com/geotools/geotools/commit/1c99387c5dc8fb10b1437efeff409a6c667d156f",
        "files": [
          "docs/user/library/metadata/geotools.rst",
          "docs/user/welcome/upgrade.rst",
          "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
          "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
          "modules/library/metadata/pom.xml",
          "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
          "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
          "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
          "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
        ],
        "message": "[GEOT-7115] Streamline JNDI lookups",
        "before_after_code_files": [
          "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
          "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
          "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
          "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
          "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
          "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
            "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
            "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
            "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
            "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
            "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
          ],
          "candidate": [
            "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
            "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
            "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
            "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
            "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
            "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
          ]
        }
      },
      "candidate_diff": {
        "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java": [
          "File: modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java -> modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     public DataSource createNewDataSource(Map<String, ?> params) throws IOException {",
          "65:         String refName = (String) JNDI_REFNAME.lookUp(params);",
          "66:         try {",
          "68:         } catch (Exception e) {",
          "69:             throw new DataSourceException(\"Could not find the specified data source in JNDI\", e);",
          "70:         }",
          "",
          "[Removed Lines]",
          "67:             return (DataSource) GeoTools.getInitialContext().lookup(refName);",
          "",
          "[Added Lines]",
          "67:             return (DataSource) GeoTools.jndiLookup(refName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     @Override",
          "85:     public boolean isAvailable() {",
          "92:     }",
          "93: }",
          "",
          "[Removed Lines]",
          "86:         try {",
          "87:             GeoTools.getInitialContext();",
          "88:             return true;",
          "89:         } catch (Exception e) {",
          "90:             return false;",
          "91:         }",
          "",
          "[Added Lines]",
          "86:         return GeoTools.isJNDIAvailable();",
          "",
          "---------------"
        ],
        "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java": [
          "File: modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java -> modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Map;",
          "22: import java.util.logging.Level;",
          "23: import java.util.logging.Logger;",
          "25: import javax.naming.NamingException;",
          "26: import javax.sql.DataSource;",
          "27: import org.geotools.data.DataStore;",
          "",
          "[Removed Lines]",
          "24: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         String jndiName = (String) JNDI_REFNAME.lookUp(params);",
          "89:         if (jndiName == null) throw new IOException(\"Missing \" + JNDI_REFNAME.description);",
          "92:         DataSource ds = null;",
          "94:         try {",
          "102:         } catch (NamingException e1) {",
          "105:             try {",
          "106:                 if (jndiName.startsWith(J2EERootContext) == false) {",
          "109:                     Logger.getLogger(this.getClass().getName())",
          "110:                             .log(",
          "",
          "[Removed Lines]",
          "91:         Context ctx = null;",
          "95:             ctx = GeoTools.getInitialContext();",
          "96:         } catch (NamingException e) {",
          "97:             throw new RuntimeException(e);",
          "98:         }",
          "100:         try {",
          "101:             ds = (DataSource) ctx.lookup(jndiName);",
          "107:                     ds = (DataSource) ctx.lookup(J2EERootContext + jndiName);",
          "",
          "[Added Lines]",
          "93:             ds = (DataSource) GeoTools.jndiLookup(jndiName);",
          "99:                     ds = (DataSource) GeoTools.jndiLookup(J2EERootContext + jndiName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:     @Override",
          "135:     public boolean isAvailable() {",
          "142:     }",
          "",
          "[Removed Lines]",
          "136:         try {",
          "137:             GeoTools.getInitialContext();",
          "138:             return true;",
          "139:         } catch (NamingException e) {",
          "140:             return false;",
          "141:         }",
          "",
          "[Added Lines]",
          "128:         return GeoTools.isJNDIAvailable();",
          "",
          "---------------"
        ],
        "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java": [
          "File: modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java -> modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.lang.reflect.InvocationTargetException;",
          "26: import java.lang.reflect.Modifier;",
          "27: import java.net.MalformedURLException;",
          "28: import java.net.URL;",
          "29: import java.security.AccessController;",
          "30: import java.security.PrivilegedAction;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import java.net.URI;",
          "29: import java.net.URISyntaxException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: import java.util.Properties;",
          "39: import java.util.Set;",
          "40: import java.util.StringTokenizer;",
          "41: import java.util.jar.Manifest;",
          "42: import java.util.logging.Level;",
          "43: import java.util.logging.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import java.util.function.Predicate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:         BINDINGS = Collections.unmodifiableMap(bindings);",
          "302:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:     public static final Predicate<String> DEFAULT_JNDI_VALIDATOR =",
          "313:             name -> {",
          "314:                 Logger LOGGER = Logging.getLogger(GeoTools.class);",
          "315:                 try {",
          "316:                     URI uri = new URI(name);",
          "317:                     boolean result = uri.getScheme() == null || uri.getScheme().equals(\"java\");",
          "318:                     if (!result)",
          "319:                         LOGGER.warning(",
          "320:                                 \"JNDI lookup allowed only on java scheme, or no scheme. Found instead: \"",
          "321:                                         + name);",
          "322:                     return result;",
          "323:                 } catch (URISyntaxException e) {",
          "324:                     LOGGER.log(Level.WARNING, \"Invalid JNDI name provided\", e);",
          "325:                     return false;",
          "326:                 }",
          "327:             };",
          "329:     private static Predicate<String> jndiValidator = DEFAULT_JNDI_VALIDATOR;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "775:         synchronized (GeoTools.class) {",
          "777:         }",
          "778:         fireConfigurationChanged();",
          "779:     }",
          "",
          "[Removed Lines]",
          "774:     public static void init(final InitialContext applicationContext) {",
          "776:             context = applicationContext;",
          "",
          "[Added Lines]",
          "801:     public static void init(final InitialContext initialContext) {",
          "803:             context = initialContext;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "967:         }",
          "968:         return defaultValue;",
          "969:     }",
          "980:     @Deprecated",
          "985:     }",
          "994:         if (context == null) {",
          "995:             try {",
          "996:                 context = new InitialContext();",
          "",
          "[Removed Lines]",
          "981:     public static synchronized InitialContext getInitialContext(final Hints hints)",
          "982:             throws NamingException {",
          "984:         return getInitialContext();",
          "993:     public static synchronized InitialContext getInitialContext() throws NamingException {",
          "",
          "[Added Lines]",
          "1007:     public static synchronized InitialContext getInitialContext() throws NamingException {",
          "1008:         Logging.getLogger(GeoTools.class)",
          "1009:                 .severe(",
          "1010:                         \"Please don't use GeoTools.getInitialContext(), perform lookups using GeoTools.jndiLookup(s) instead.\");",
          "1011:         return getJNDIContext();",
          "1014:     private static synchronized InitialContext getJNDIContext() throws NamingException {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1001:         return context;",
          "1002:     }",
          "1004:     private static NamingException handleException(Exception e) {",
          "1005:         final Logger LOGGER = Logging.getLogger(GeoTools.class);",
          "1006:         final String propFileName = \"jndi.properties\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1029:     public static boolean isJNDIAvailable() {",
          "1030:         try {",
          "1032:             return getJNDIContext() != null;",
          "1033:         } catch (NamingException e) {",
          "1034:             return false;",
          "1035:         }",
          "1036:     }",
          "1046:     public static void setJNDINameValidator(Predicate<String> validator) {",
          "1047:         jndiValidator = validator;",
          "1048:     }",
          "1059:     public static Object jndiLookup(String name) throws NamingException {",
          "1060:         if (!jndiValidator.test(name)) return null;",
          "1061:         return getJNDIContext().lookup(name);",
          "1062:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1101:     public static String fixName(final String name) {",
          "1102:         return fixName(null, name, null);",
          "1103:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1164:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1116:     public static String fixName(final Context context, final String name) {",
          "1117:         return (context != null) ? fixName(context, name, null) : name;",
          "1118:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1183:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1125:     private static String fixName(Context context, final String name, final Hints hints) {",
          "1126:         String fixed = null;",
          "1127:         if (name != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1197:     @Deprecated",
          "",
          "---------------"
        ],
        "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java": [
          "File: modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java -> modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     private FactoryRegistry getRegistry(",
          "72:             final boolean creator,",
          "73:             final Factory factory1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     @SuppressWarnings(\"PMD.UnusedPrivateMethod\") // PMD getting confused here?",
          "",
          "---------------"
        ],
        "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java": [
          "File: modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java -> modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import java.util.Map;",
          "30: import java.util.jar.Manifest;",
          "31: import javax.media.jai.JAI;",
          "32: import org.apache.commons.logging.LogFactory;",
          "33: import org.geotools.util.NullEntityResolver;",
          "34: import org.geotools.util.PreventLocalEntityResolver;",
          "35: import org.geotools.util.Version;",
          "36: import org.junit.Test;",
          "37: import org.opengis.filter.Filter;",
          "38: import org.xml.sax.EntityResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import javax.naming.InitialContext;",
          "33: import javax.naming.NamingException;",
          "38: import org.junit.Before;",
          "40: import org.mockito.Mockito;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: public final class GeoToolsTest {",
          "50:     @Test",
          "51:     public void testAssertionEnabled() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     @Before",
          "55:     public void clearJNDI() throws NamingException {",
          "56:         GeoTools.clearInitialContext();",
          "57:         GeoTools.setJNDINameValidator(GeoTools.DEFAULT_JNDI_VALIDATOR);",
          "58:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:     @Test",
          "196:     public void testFixName() {",
          "197:         assertNull(GeoTools.fixName(null));",
          "198:         assertEquals(\"simpleName\", GeoTools.fixName(\"simpleName\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:     @SuppressWarnings(\"deprecation\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "261:             Hints.scanSystemProperties();",
          "262:         }",
          "263:     }",
          "264: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:     @Test",
          "278:     public void testLookupValidation() throws Exception {",
          "280:         InitialContext ctx = Mockito.mock(InitialContext.class);",
          "281:         Object test1 = new Object();",
          "282:         String name1 = \"java://test1\";",
          "283:         Mockito.when(ctx.lookup(name1)).thenReturn(test1);",
          "284:         Object test2 = new Object();",
          "285:         String name2 = \"ftp://test2\";",
          "286:         Mockito.when(ctx.lookup(name2)).thenReturn(test2);",
          "287:         Object test3 = new Object();",
          "288:         String name3 = \"http://test3\";",
          "289:         Mockito.when(ctx.lookup(name3)).thenReturn(test3);",
          "290:         Object test4 = new Object();",
          "291:         String name4 = \"java://test4{}\"; // invalid URI",
          "292:         Mockito.when(ctx.lookup(name4)).thenReturn(test4);",
          "295:         GeoTools.init(ctx);",
          "296:         assertSame(test1, GeoTools.jndiLookup(name1));",
          "297:         assertNull(GeoTools.jndiLookup(name2));",
          "298:         assertNull(GeoTools.jndiLookup(name3));",
          "299:         assertNull(GeoTools.jndiLookup(name4));",
          "302:         GeoTools.setJNDINameValidator(name -> true);",
          "303:         assertSame(test1, GeoTools.jndiLookup(name1));",
          "304:         assertSame(test2, GeoTools.jndiLookup(name2));",
          "305:         assertSame(test3, GeoTools.jndiLookup(name3));",
          "306:         assertSame(test4, GeoTools.jndiLookup(name4));",
          "307:     }",
          "",
          "---------------"
        ],
        "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java": [
          "File: modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java -> modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.sql.SQLException;",
          "21: import java.util.logging.Level;",
          "22: import java.util.logging.Logger;",
          "24: import javax.sql.DataSource;",
          "25: import org.geotools.metadata.iso.citation.Citations;",
          "26: import org.geotools.util.SimpleInternationalString;",
          "",
          "[Removed Lines]",
          "23: import javax.naming.InitialContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:             return (DataSource) hint;",
          "74:         } else if (hint instanceof String) {",
          "75:             String name = (String) hint;",
          "77:             try {",
          "81:             } catch (Exception e) {",
          "82:                 throw new FactoryException(\"EPSG_DATA_SOURCE '\" + name + \"' not found:\" + e, e);",
          "83:             }",
          "",
          "[Removed Lines]",
          "76:             InitialContext context;",
          "78:                 context = GeoTools.getInitialContext();",
          "80:                 return (DataSource) context.lookup(name);",
          "",
          "[Added Lines]",
          "76:                 return (DataSource) GeoTools.jndiLookup(name);",
          "",
          "---------------"
        ],
        "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java": [
          "File: modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java -> modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:             if (hint instanceof String) {",
          "304:                 String name = (String) hint;",
          "305:                 try {",
          "307:                 } catch (NamingException e) {",
          "308:                     throw new FactoryException(\"A EPSG_DATA_SOURCE hint is required:\" + e);",
          "309:                 }",
          "",
          "[Removed Lines]",
          "306:                     dataSource = (DataSource) GeoTools.getInitialContext().lookup(name);",
          "",
          "[Added Lines]",
          "306:                     dataSource = (DataSource) GeoTools.jndiLookup(name);",
          "",
          "---------------"
        ],
        "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java": [
          "File: modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java -> modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.jar.Attributes.Name;",
          "23: import java.util.logging.Level;",
          "24: import java.util.logging.LogRecord;",
          "26: import javax.naming.NamingException;",
          "28: import javax.sql.DataSource;",
          "29: import org.geotools.metadata.i18n.ErrorKeys;",
          "30: import org.geotools.metadata.i18n.Errors;",
          "",
          "[Removed Lines]",
          "25: import javax.naming.InitialContext;",
          "27: import javax.naming.NoInitialContextException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     public static final String DATASOURCE_NAME = \"java:comp/env/jdbc/EPSG\";",
          "104:     protected static final int PRIORITY = MAXIMUM_PRIORITY - 10;",
          "107:     private final ReferencingFactoryContainer factories;",
          "",
          "[Removed Lines]",
          "101:     private static final boolean ALLOW_REGISTRATION = false;",
          "114:     private transient InitialContext registerInto;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:     protected DataSource createDataSource() throws SQLException {",
          "305:         DataSource source = null;",
          "306:         try {",
          "314:         }",
          "315:         return source;",
          "",
          "[Removed Lines]",
          "304:         InitialContext context = null;",
          "307:             context = GeoTools.getInitialContext();",
          "308:             source = (DataSource) context.lookup(datasourceName);",
          "309:         } catch (IllegalArgumentException | NoInitialContextException exception) {",
          "311:         } catch (NamingException exception) {",
          "312:             registerInto = context;",
          "",
          "[Added Lines]",
          "288:             source = (DataSource) GeoTools.jndiLookup(datasourceName);",
          "289:         } catch (IllegalArgumentException | NamingException exception) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "391:         if (source == null) {",
          "392:             throw new FactoryNotFoundException(Errors.format(ErrorKeys.NO_DATA_SOURCE));",
          "393:         }",
          "",
          "[Removed Lines]",
          "383:         DataSource source;",
          "384:         final InitialContext context;",
          "385:         try {",
          "386:             source = createDataSource();",
          "387:             context = registerInto;",
          "388:         } finally {",
          "389:             registerInto = null;",
          "390:         }",
          "",
          "[Added Lines]",
          "360:         DataSource source = createDataSource();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "398:         } finally {",
          "399:             datasource = null;",
          "400:         }",
          "422:         this.datasource = source; // Stores the data source only after success.",
          "423:         return factory;",
          "424:     }",
          "",
          "[Removed Lines]",
          "405:         LogRecord record;",
          "406:         if (ALLOW_REGISTRATION && context != null) {",
          "407:             try {",
          "408:                 context.bind(datasourceName, source);",
          "409:                 record =",
          "410:                         Loggings.format(",
          "411:                                 Level.FINE,",
          "412:                                 LoggingKeys.CREATED_DATASOURCE_ENTRY_$1,",
          "413:                                 datasourceName);",
          "414:             } catch (NamingException exception) {",
          "415:                 record =",
          "416:                         Loggings.format(",
          "417:                                 Level.WARNING, LoggingKeys.CANT_BIND_DATASOURCE_$1, datasourceName);",
          "418:                 record.setThrown(exception);",
          "419:             }",
          "420:             log(record);",
          "421:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java": [
          "File: modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java -> modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         String jndi = first(db, \"jndi\").map(this::nodeValue).orElse(null);",
          "118:         if (jndi != null) {",
          "119:             try {",
          "121:             } catch (NamingException e) {",
          "122:                 throw new IllegalArgumentException(\"Error performing JNDI lookup for: \" + jndi, e);",
          "123:             }",
          "",
          "[Removed Lines]",
          "120:                 dataSource = (DataSource) GeoTools.getInitialContext().lookup(jndi);",
          "",
          "[Added Lines]",
          "120:                 dataSource = (DataSource) GeoTools.jndiLookup(jndi);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbf32a90829ea09cf2c8d692f3bc7b9e7ab6ee9a",
      "candidate_info": {
        "commit_hash": "bbf32a90829ea09cf2c8d692f3bc7b9e7ab6ee9a",
        "repo": "geotools/geotools",
        "commit_url": "https://github.com/geotools/geotools/commit/bbf32a90829ea09cf2c8d692f3bc7b9e7ab6ee9a",
        "files": [
          "docs/user/library/metadata/geotools.rst",
          "docs/user/welcome/upgrade.rst",
          "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
          "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
          "modules/library/metadata/pom.xml",
          "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
          "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
          "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
          "modules/unsupported/arcsde/datastore/src/main/java/org/geotools/arcsde/data/ArcSDEJNDIDataStoreFactory.java",
          "modules/unsupported/arcsde/datastore/src/test/java/org/geotools/arcsde/ArcSDEJNDIDataStoreFactoryTest.java",
          "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
        ],
        "message": "[GEOT-7115] Streamline JNDI lookups",
        "before_after_code_files": [
          "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
          "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
          "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
          "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
          "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
          "modules/unsupported/arcsde/datastore/src/main/java/org/geotools/arcsde/data/ArcSDEJNDIDataStoreFactory.java||modules/unsupported/arcsde/datastore/src/main/java/org/geotools/arcsde/data/ArcSDEJNDIDataStoreFactory.java",
          "modules/unsupported/arcsde/datastore/src/test/java/org/geotools/arcsde/ArcSDEJNDIDataStoreFactoryTest.java||modules/unsupported/arcsde/datastore/src/test/java/org/geotools/arcsde/ArcSDEJNDIDataStoreFactoryTest.java",
          "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
            "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
            "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
            "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
            "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
            "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
          ],
          "candidate": [
            "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
            "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
            "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
            "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
            "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
            "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
          ]
        }
      },
      "candidate_diff": {
        "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java": [
          "File: modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java -> modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     public DataSource createNewDataSource(Map params) throws IOException {",
          "62:         String refName = (String) JNDI_REFNAME.lookUp(params);",
          "63:         try {",
          "66:         } catch (Exception e) {",
          "67:             throw new DataSourceException(\"Could not find the specified data source in JNDI\", e);",
          "68:         }",
          "",
          "[Removed Lines]",
          "64:             return (DataSource)",
          "65:                     GeoTools.getInitialContext(GeoTools.getDefaultHints()).lookup(refName);",
          "",
          "[Added Lines]",
          "64:             return (DataSource) GeoTools.jndiLookup(refName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     public boolean isAvailable() {",
          "87:     }",
          "88: }",
          "",
          "[Removed Lines]",
          "81:         try {",
          "82:             GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "83:             return true;",
          "84:         } catch (Exception e) {",
          "85:             return false;",
          "86:         }",
          "",
          "[Added Lines]",
          "80:         return GeoTools.isJNDIAvailable();",
          "",
          "---------------"
        ],
        "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java": [
          "File: modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java -> modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Map;",
          "22: import java.util.logging.Level;",
          "23: import java.util.logging.Logger;",
          "25: import javax.naming.NamingException;",
          "26: import javax.sql.DataSource;",
          "27: import org.geotools.data.DataStore;",
          "",
          "[Removed Lines]",
          "24: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:         String jndiName = (String) JNDI_REFNAME.lookUp(params);",
          "87:         if (jndiName == null) throw new IOException(\"Missing \" + JNDI_REFNAME.description);",
          "90:         DataSource ds = null;",
          "92:         try {",
          "100:         } catch (NamingException e1) {",
          "103:             try {",
          "104:                 if (jndiName.startsWith(J2EERootContext) == false) {",
          "107:                     Logger.getLogger(this.getClass().getName())",
          "108:                             .log(",
          "",
          "[Removed Lines]",
          "89:         Context ctx = null;",
          "93:             ctx = GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "94:         } catch (NamingException e) {",
          "95:             throw new RuntimeException(e);",
          "96:         }",
          "98:         try {",
          "99:             ds = (DataSource) ctx.lookup(jndiName);",
          "105:                     ds = (DataSource) ctx.lookup(J2EERootContext + jndiName);",
          "",
          "[Added Lines]",
          "91:             ds = (DataSource) GeoTools.jndiLookup(jndiName);",
          "97:                     ds = (DataSource) GeoTools.jndiLookup(J2EERootContext + jndiName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:     public boolean isAvailable() {",
          "139:     }",
          "",
          "[Removed Lines]",
          "133:         try {",
          "134:             GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "135:             return true;",
          "136:         } catch (NamingException e) {",
          "137:             return false;",
          "138:         }",
          "",
          "[Added Lines]",
          "125:         return GeoTools.isJNDIAvailable();",
          "",
          "---------------"
        ],
        "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java": [
          "File: modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java -> modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.lang.reflect.InvocationTargetException;",
          "26: import java.lang.reflect.Modifier;",
          "27: import java.net.MalformedURLException;",
          "28: import java.net.URL;",
          "29: import java.util.ArrayList;",
          "30: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import java.net.URI;",
          "29: import java.net.URISyntaxException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import java.util.Properties;",
          "36: import java.util.Set;",
          "37: import java.util.StringTokenizer;",
          "38: import java.util.jar.Manifest;",
          "39: import java.util.logging.Level;",
          "40: import java.util.logging.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import java.util.function.Predicate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "271:         BINDINGS = Collections.unmodifiableMap(bindings);",
          "272:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:     public static final Predicate<String> DEFAULT_JNDI_VALIDATOR =",
          "283:             name -> {",
          "284:                 Logger LOGGER = Logging.getLogger(GeoTools.class);",
          "285:                 try {",
          "286:                     URI uri = new URI(name);",
          "287:                     boolean result = uri.getScheme() == null || uri.getScheme().equals(\"java\");",
          "288:                     if (!result)",
          "289:                         LOGGER.warning(",
          "290:                                 \"JNDI lookup allowed only on java scheme, or no scheme. Found instead: \"",
          "291:                                         + name);",
          "292:                     return result;",
          "293:                 } catch (URISyntaxException e) {",
          "294:                     LOGGER.log(Level.WARNING, \"Invalid JNDI name provided\", e);",
          "295:                     return false;",
          "296:                 }",
          "297:             };",
          "299:     private static Predicate<String> jndiValidator = DEFAULT_JNDI_VALIDATOR;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "713:         synchronized (GeoTools.class) {",
          "715:         }",
          "716:         fireConfigurationChanged();",
          "717:     }",
          "",
          "[Removed Lines]",
          "712:     public static void init(final InitialContext applicationContext) {",
          "714:             context = applicationContext;",
          "",
          "[Added Lines]",
          "739:     public static void init(final InitialContext initialContext) {",
          "741:             context = initialContext;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "904:         }",
          "905:         return defaultValue;",
          "906:     }",
          "918:         if (context == null) {",
          "919:             context = new InitialContext();",
          "920:         }",
          "921:         return context;",
          "922:     }",
          "",
          "[Removed Lines]",
          "916:     public static synchronized InitialContext getInitialContext(final Hints hints)",
          "917:             throws NamingException {",
          "",
          "[Added Lines]",
          "943:     @Deprecated",
          "944:     public static synchronized InitialContext getInitialContext() throws NamingException {",
          "945:         Logging.getLogger(GeoTools.class)",
          "946:                 .severe(",
          "947:                         \"Please don't use GeoTools.getInitialContext(), perform lookups using GeoTools.jndiLookup(s) instead.\");",
          "948:         return getJNDIContext();",
          "949:     }",
          "951:     private static synchronized InitialContext getJNDIContext() throws NamingException {",
          "962:     public static boolean isJNDIAvailable() {",
          "963:         try {",
          "965:             return getJNDIContext() != null;",
          "966:         } catch (NamingException e) {",
          "967:             return false;",
          "968:         }",
          "969:     }",
          "979:     public static void setJNDINameValidator(Predicate<String> validator) {",
          "980:         jndiValidator = validator;",
          "981:     }",
          "992:     public static Object jndiLookup(String name) throws NamingException {",
          "993:         if (!jndiValidator.test(name)) return null;",
          "994:         return getJNDIContext().lookup(name);",
          "995:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "948:     public static String fixName(final String name) {",
          "949:         return fixName(null, name, null);",
          "950:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1024:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "963:     public static String fixName(final Context context, final String name) {",
          "964:         return (context != null) ? fixName(context, name, null) : name;",
          "965:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1043:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "972:     private static String fixName(Context context, final String name, final Hints hints) {",
          "973:         String fixed = null;",
          "974:         if (name != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1057:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "980:                 } else",
          "981:                     try {",
          "982:                         if (context == null) {",
          "984:                         }",
          "985:                         fixed = context.composeName(fixed, part);",
          "986:                     } catch (NamingException e) {",
          "",
          "[Removed Lines]",
          "983:                             context = getInitialContext(hints);",
          "",
          "[Added Lines]",
          "1069:                             context = getInitialContext();",
          "",
          "---------------"
        ],
        "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java": [
          "File: modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java -> modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     private FactoryRegistry getRegistry(",
          "66:             final boolean creator,",
          "67:             final Factory factory1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     @SuppressWarnings(\"PMD.UnusedPrivateMethod\") // PMD getting confused here?",
          "",
          "---------------"
        ],
        "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java": [
          "File: modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java -> modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.util.jar.Attributes;",
          "26: import java.util.jar.Manifest;",
          "27: import javax.media.jai.JAI;",
          "28: import org.apache.commons.logging.LogFactory;",
          "29: import org.geotools.util.NullEntityResolver;",
          "30: import org.geotools.util.PreventLocalEntityResolver;",
          "31: import org.geotools.util.Version;",
          "32: import org.junit.*;",
          "33: import org.opengis.filter.Filter;",
          "34: import org.xml.sax.EntityResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import javax.naming.InitialContext;",
          "29: import javax.naming.NamingException;",
          "35: import org.junit.Before;",
          "36: import org.junit.Test;",
          "37: import org.mockito.Mockito;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: public final class GeoToolsTest {",
          "46:     @Test",
          "47:     public void testAssertionEnabled() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     @Before",
          "52:     public void clearJNDI() throws NamingException {",
          "53:         GeoTools.clearInitialContext();",
          "54:         GeoTools.setJNDINameValidator(GeoTools.DEFAULT_JNDI_VALIDATOR);",
          "55:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:     @Test",
          "194:     public void testFixName() {",
          "195:         assertNull(GeoTools.fixName(null));",
          "196:         assertEquals(\"simpleName\", GeoTools.fixName(\"simpleName\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:     @SuppressWarnings(\"deprecation\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "260:             Hints.scanSystemProperties();",
          "261:         }",
          "262:     }",
          "263: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:     @Test",
          "278:     public void testLookupValidation() throws Exception {",
          "280:         InitialContext ctx = Mockito.mock(InitialContext.class);",
          "281:         Object test1 = new Object();",
          "282:         String name1 = \"java://test1\";",
          "283:         Mockito.when(ctx.lookup(name1)).thenReturn(test1);",
          "284:         Object test2 = new Object();",
          "285:         String name2 = \"ftp://test2\";",
          "286:         Mockito.when(ctx.lookup(name2)).thenReturn(test2);",
          "287:         Object test3 = new Object();",
          "288:         String name3 = \"http://test3\";",
          "289:         Mockito.when(ctx.lookup(name3)).thenReturn(test3);",
          "290:         Object test4 = new Object();",
          "291:         String name4 = \"java://test4{}\"; // invalid URI",
          "292:         Mockito.when(ctx.lookup(name4)).thenReturn(test4);",
          "295:         GeoTools.init(ctx);",
          "296:         assertSame(test1, GeoTools.jndiLookup(name1));",
          "297:         assertNull(GeoTools.jndiLookup(name2));",
          "298:         assertNull(GeoTools.jndiLookup(name3));",
          "299:         assertNull(GeoTools.jndiLookup(name4));",
          "302:         GeoTools.setJNDINameValidator(name -> true);",
          "303:         assertSame(test1, GeoTools.jndiLookup(name1));",
          "304:         assertSame(test2, GeoTools.jndiLookup(name2));",
          "305:         assertSame(test3, GeoTools.jndiLookup(name3));",
          "306:         assertSame(test4, GeoTools.jndiLookup(name4));",
          "307:     }",
          "",
          "---------------"
        ],
        "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java": [
          "File: modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java -> modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.sql.SQLException;",
          "21: import java.util.logging.Level;",
          "22: import java.util.logging.Logger;",
          "24: import javax.sql.DataSource;",
          "25: import org.geotools.metadata.iso.citation.Citations;",
          "26: import org.geotools.util.SimpleInternationalString;",
          "",
          "[Removed Lines]",
          "23: import javax.naming.InitialContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:             return (DataSource) hint;",
          "74:         } else if (hint instanceof String) {",
          "75:             String name = (String) hint;",
          "77:             try {",
          "81:             } catch (Exception e) {",
          "82:                 throw new FactoryException(\"EPSG_DATA_SOURCE '\" + name + \"' not found:\" + e, e);",
          "83:             }",
          "",
          "[Removed Lines]",
          "76:             InitialContext context;",
          "78:                 context = GeoTools.getInitialContext(hints);",
          "80:                 return (DataSource) context.lookup(name);",
          "",
          "[Added Lines]",
          "76:                 return (DataSource) GeoTools.jndiLookup(name);",
          "",
          "---------------"
        ],
        "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java": [
          "File: modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java -> modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:             if (hint instanceof String) {",
          "290:                 String name = (String) hint;",
          "291:                 try {",
          "293:                 } catch (NamingException e) {",
          "294:                     throw new FactoryException(\"A EPSG_DATA_SOURCE hint is required:\" + e);",
          "295:                 }",
          "",
          "[Removed Lines]",
          "292:                     dataSource = (DataSource) GeoTools.getInitialContext(userHints).lookup(name);",
          "",
          "[Added Lines]",
          "292:                     dataSource = (DataSource) GeoTools.jndiLookup(name);",
          "",
          "---------------"
        ],
        "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java": [
          "File: modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java -> modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.jar.Attributes.Name;",
          "23: import java.util.logging.Level;",
          "24: import java.util.logging.LogRecord;",
          "26: import javax.naming.NamingException;",
          "28: import javax.sql.DataSource;",
          "29: import org.geotools.metadata.i18n.ErrorKeys;",
          "30: import org.geotools.metadata.i18n.Errors;",
          "",
          "[Removed Lines]",
          "25: import javax.naming.InitialContext;",
          "27: import javax.naming.NoInitialContextException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     public static final String DATASOURCE_NAME = \"java:comp/env/jdbc/EPSG\";",
          "104:     protected static final int PRIORITY = MAXIMUM_PRIORITY - 10;",
          "107:     private final ReferencingFactoryContainer factories;",
          "",
          "[Removed Lines]",
          "101:     private static final boolean ALLOW_REGISTRATION = false;",
          "114:     private transient InitialContext registerInto;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:     protected DataSource createDataSource() throws SQLException {",
          "305:         DataSource source = null;",
          "306:         try {",
          "316:         }",
          "317:         return source;",
          "",
          "[Removed Lines]",
          "304:         InitialContext context = null;",
          "307:             context = GeoTools.getInitialContext(new Hints(hints));",
          "308:             source = (DataSource) context.lookup(datasourceName);",
          "309:         } catch (IllegalArgumentException exception) {",
          "311:         } catch (NoInitialContextException exception) {",
          "313:         } catch (NamingException exception) {",
          "314:             registerInto = context;",
          "",
          "[Added Lines]",
          "288:             source = (DataSource) GeoTools.jndiLookup(datasourceName);",
          "289:         } catch (IllegalArgumentException | NamingException exception) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "389:         if (source == null) {",
          "390:             throw new FactoryNotFoundException(Errors.format(ErrorKeys.NO_DATA_SOURCE));",
          "391:         }",
          "",
          "[Removed Lines]",
          "381:         DataSource source;",
          "382:         final InitialContext context;",
          "383:         try {",
          "384:             source = createDataSource();",
          "385:             context = registerInto;",
          "386:         } finally {",
          "387:             registerInto = null;",
          "388:         }",
          "",
          "[Added Lines]",
          "356:         DataSource source = createDataSource();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "396:         } finally {",
          "397:             datasource = null;",
          "398:         }",
          "420:         this.datasource = source; // Stores the data source only after success.",
          "421:         return factory;",
          "422:     }",
          "",
          "[Removed Lines]",
          "403:         LogRecord record;",
          "404:         if (ALLOW_REGISTRATION && context != null) {",
          "405:             try {",
          "406:                 context.bind(datasourceName, source);",
          "407:                 record =",
          "408:                         Loggings.format(",
          "409:                                 Level.FINE,",
          "410:                                 LoggingKeys.CREATED_DATASOURCE_ENTRY_$1,",
          "411:                                 datasourceName);",
          "412:             } catch (NamingException exception) {",
          "413:                 record =",
          "414:                         Loggings.format(",
          "415:                                 Level.WARNING, LoggingKeys.CANT_BIND_DATASOURCE_$1, datasourceName);",
          "416:                 record.setThrown(exception);",
          "417:             }",
          "418:             log(record);",
          "419:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/unsupported/arcsde/datastore/src/main/java/org/geotools/arcsde/data/ArcSDEJNDIDataStoreFactory.java||modules/unsupported/arcsde/datastore/src/main/java/org/geotools/arcsde/data/ArcSDEJNDIDataStoreFactory.java": [
          "File: modules/unsupported/arcsde/datastore/src/main/java/org/geotools/arcsde/data/ArcSDEJNDIDataStoreFactory.java -> modules/unsupported/arcsde/datastore/src/main/java/org/geotools/arcsde/data/ArcSDEJNDIDataStoreFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.util.HashMap;",
          "27: import java.util.Map;",
          "28: import java.util.logging.Logger;",
          "30: import javax.naming.NamingException;",
          "31: import org.geotools.arcsde.jndi.ArcSDEConnectionFactory;",
          "32: import org.geotools.arcsde.session.ArcSDEConnectionConfig;",
          "",
          "[Removed Lines]",
          "29: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:             throw new IOException(\"Missing \" + JNDI_REFNAME.description);",
          "176:         }",
          "186:         Object lookup = null;",
          "187:         try {",
          "189:         } catch (NamingException e1) {",
          "192:             try {",
          "193:                 if (jndiName.startsWith(J2EE_ROOT_CONTEXT) == false) {",
          "196:                     LOGGER.warning(",
          "197:                             \"Using \"",
          "",
          "[Removed Lines]",
          "178:         final Context ctx;",
          "180:         try {",
          "181:             ctx = GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "182:         } catch (NamingException e) {",
          "183:             throw new RuntimeException(e);",
          "184:         }",
          "188:             lookup = ctx.lookup(jndiName);",
          "194:                     lookup = ctx.lookup(J2EE_ROOT_CONTEXT + jndiName);",
          "",
          "[Added Lines]",
          "179:             lookup = GeoTools.jndiLookup(jndiName);",
          "185:                     lookup = GeoTools.jndiLookup(J2EE_ROOT_CONTEXT + jndiName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:     public boolean isAvailable() {",
          "288:     }",
          "",
          "[Removed Lines]",
          "282:         try {",
          "283:             GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "284:         } catch (NamingException e) {",
          "285:             return false;",
          "286:         }",
          "287:         return delegateFactory.isAvailable();",
          "",
          "[Added Lines]",
          "273:         return GeoTools.isJNDIAvailable();",
          "",
          "---------------"
        ],
        "modules/unsupported/arcsde/datastore/src/test/java/org/geotools/arcsde/ArcSDEJNDIDataStoreFactoryTest.java||modules/unsupported/arcsde/datastore/src/test/java/org/geotools/arcsde/ArcSDEJNDIDataStoreFactoryTest.java": [
          "File: modules/unsupported/arcsde/datastore/src/test/java/org/geotools/arcsde/ArcSDEJNDIDataStoreFactoryTest.java -> modules/unsupported/arcsde/datastore/src/test/java/org/geotools/arcsde/ArcSDEJNDIDataStoreFactoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.util.Iterator;",
          "26: import java.util.Map;",
          "27: import java.util.logging.Logger;",
          "29: import javax.naming.InitialContext;",
          "30: import javax.naming.NamingException;",
          "31: import org.geotools.arcsde.data.ArcSDEDataStore;",
          "",
          "[Removed Lines]",
          "28: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     public static void cleanupAfterClass() throws Exception {",
          "86:         System.clearProperty(IC_FACTORY_PROPERTY);",
          "",
          "[Removed Lines]",
          "82:         Context ctx = GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "83:         ctx.close();",
          "",
          "[Added Lines]",
          "81:         GeoTools.clearInitialContext();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:         Map<String, Serializable> config = testData.getConProps();",
          "128:         try {",
          "130:             initialContext.bind(jndiRef, config);",
          "131:             assertNotNull(initialContext.lookup(jndiRef));",
          "132:         } catch (NamingException e) {",
          "",
          "[Removed Lines]",
          "129:             InitialContext initialContext = GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "",
          "[Added Lines]",
          "127:             InitialContext initialContext = new InitialContext();",
          "128:             GeoTools.init(initialContext);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "156:         ISessionPool pool = testData.getConnectionPool();",
          "157:         try {",
          "159:             initialContext.bind(jndiRef, pool);",
          "160:             assertNotNull(initialContext.lookup(jndiRef));",
          "161:         } catch (NamingException e) {",
          "",
          "[Removed Lines]",
          "158:             InitialContext initialContext = GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "",
          "[Added Lines]",
          "157:             InitialContext initialContext = new InitialContext();",
          "158:             GeoTools.init(initialContext);",
          "",
          "---------------"
        ],
        "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java": [
          "File: modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java -> modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         String jndi = first(db, \"jndi\").map(this::nodeValue).orElse(null);",
          "118:         if (jndi != null) {",
          "119:             try {",
          "123:             } catch (NamingException e) {",
          "124:                 throw new IllegalArgumentException(\"Error performing JNDI lookup for: \" + jndi, e);",
          "125:             }",
          "",
          "[Removed Lines]",
          "120:                 dataSource =",
          "121:                         (DataSource)",
          "122:                                 GeoTools.getInitialContext(GeoTools.getDefaultHints()).lookup(jndi);",
          "",
          "[Added Lines]",
          "120:                 dataSource = (DataSource) GeoTools.jndiLookup(jndi);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1e94eb28debc0396db46528207b5eeb6b7cd02f",
      "candidate_info": {
        "commit_hash": "a1e94eb28debc0396db46528207b5eeb6b7cd02f",
        "repo": "geotools/geotools",
        "commit_url": "https://github.com/geotools/geotools/commit/a1e94eb28debc0396db46528207b5eeb6b7cd02f",
        "files": [
          "docs/user/library/metadata/geotools.rst",
          "docs/user/welcome/upgrade.rst",
          "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
          "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
          "modules/library/metadata/pom.xml",
          "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
          "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
          "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
          "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
        ],
        "message": "[GEOT-7115] Streamline JNDI lookups",
        "before_after_code_files": [
          "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
          "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
          "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
          "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
          "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
          "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
          "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
            "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
            "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
            "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
            "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
            "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
          ],
          "candidate": [
            "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
            "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
            "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
            "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
            "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
            "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
            "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java"
          ]
        }
      },
      "candidate_diff": {
        "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java||modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java": [
          "File: modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java -> modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     public DataSource createNewDataSource(Map<String, ?> params) throws IOException {",
          "62:         String refName = (String) JNDI_REFNAME.lookUp(params);",
          "63:         try {",
          "66:         } catch (Exception e) {",
          "67:             throw new DataSourceException(\"Could not find the specified data source in JNDI\", e);",
          "68:         }",
          "",
          "[Removed Lines]",
          "64:             return (DataSource)",
          "65:                     GeoTools.getInitialContext(GeoTools.getDefaultHints()).lookup(refName);",
          "",
          "[Added Lines]",
          "64:             return (DataSource) GeoTools.jndiLookup(refName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     public boolean isAvailable() {",
          "87:     }",
          "88: }",
          "",
          "[Removed Lines]",
          "81:         try {",
          "82:             GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "83:             return true;",
          "84:         } catch (Exception e) {",
          "85:             return false;",
          "86:         }",
          "",
          "[Added Lines]",
          "80:         return GeoTools.isJNDIAvailable();",
          "",
          "---------------"
        ],
        "modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java||modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java": [
          "File: modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java -> modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCJNDIDataStoreFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Map;",
          "22: import java.util.logging.Level;",
          "23: import java.util.logging.Logger;",
          "25: import javax.naming.NamingException;",
          "26: import javax.sql.DataSource;",
          "27: import org.geotools.data.DataStore;",
          "",
          "[Removed Lines]",
          "24: import javax.naming.Context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:         String jndiName = (String) JNDI_REFNAME.lookUp(params);",
          "90:         if (jndiName == null) throw new IOException(\"Missing \" + JNDI_REFNAME.description);",
          "93:         DataSource ds = null;",
          "95:         try {",
          "103:         } catch (NamingException e1) {",
          "106:             try {",
          "107:                 if (jndiName.startsWith(J2EERootContext) == false) {",
          "110:                     Logger.getLogger(this.getClass().getName())",
          "111:                             .log(",
          "",
          "[Removed Lines]",
          "92:         Context ctx = null;",
          "96:             ctx = GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "97:         } catch (NamingException e) {",
          "98:             throw new RuntimeException(e);",
          "99:         }",
          "101:         try {",
          "102:             ds = (DataSource) ctx.lookup(jndiName);",
          "108:                     ds = (DataSource) ctx.lookup(J2EERootContext + jndiName);",
          "",
          "[Added Lines]",
          "94:             ds = (DataSource) GeoTools.jndiLookup(jndiName);",
          "100:                     ds = (DataSource) GeoTools.jndiLookup(J2EERootContext + jndiName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:     public boolean isAvailable() {",
          "142:     }",
          "",
          "[Removed Lines]",
          "136:         try {",
          "137:             GeoTools.getInitialContext(GeoTools.getDefaultHints());",
          "138:             return true;",
          "139:         } catch (NamingException e) {",
          "140:             return false;",
          "141:         }",
          "",
          "[Added Lines]",
          "128:         return GeoTools.isJNDIAvailable();",
          "",
          "---------------"
        ],
        "modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java||modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java": [
          "File: modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java -> modules/library/metadata/src/main/java/org/geotools/util/factory/GeoTools.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.lang.reflect.InvocationTargetException;",
          "26: import java.lang.reflect.Modifier;",
          "27: import java.net.MalformedURLException;",
          "28: import java.net.URL;",
          "29: import java.util.ArrayList;",
          "30: import java.util.Collections;",
          "31: import java.util.HashMap;",
          "32: import java.util.HashSet;",
          "33: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import java.net.URI;",
          "29: import java.net.URISyntaxException;",
          "31: import java.security.AccessController;",
          "32: import java.security.PrivilegedAction;",
          "35: import java.util.Enumeration;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import java.util.Properties;",
          "36: import java.util.Set;",
          "37: import java.util.StringTokenizer;",
          "38: import java.util.jar.Manifest;",
          "39: import java.util.logging.Level;",
          "40: import java.util.logging.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import java.util.function.Predicate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:         BINDINGS = Collections.unmodifiableMap(bindings);",
          "298:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:     public static final Predicate<String> DEFAULT_JNDI_VALIDATOR =",
          "312:             name -> {",
          "313:                 Logger LOGGER = Logging.getLogger(GeoTools.class);",
          "314:                 try {",
          "315:                     URI uri = new URI(name);",
          "316:                     boolean result = uri.getScheme() == null || uri.getScheme().equals(\"java\");",
          "317:                     if (!result)",
          "318:                         LOGGER.warning(",
          "319:                                 \"JNDI lookup allowed only on java scheme, or no scheme. Found instead: \"",
          "320:                                         + name);",
          "321:                     return result;",
          "322:                 } catch (URISyntaxException e) {",
          "323:                     LOGGER.log(Level.WARNING, \"Invalid JNDI name provided\", e);",
          "324:                     return false;",
          "325:                 }",
          "326:             };",
          "328:     private static Predicate<String> jndiValidator = DEFAULT_JNDI_VALIDATOR;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "739:         synchronized (GeoTools.class) {",
          "741:         }",
          "742:         fireConfigurationChanged();",
          "743:     }",
          "",
          "[Removed Lines]",
          "738:     public static void init(final InitialContext applicationContext) {",
          "740:             context = applicationContext;",
          "",
          "[Added Lines]",
          "768:     public static void init(final InitialContext initialContext) {",
          "770:             context = initialContext;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "930:         }",
          "931:         return defaultValue;",
          "932:     }",
          "944:         if (context == null) {",
          "945:             context = new InitialContext();",
          "946:         }",
          "947:         return context;",
          "948:     }",
          "",
          "[Removed Lines]",
          "942:     public static synchronized InitialContext getInitialContext(final Hints hints)",
          "943:             throws NamingException {",
          "",
          "[Added Lines]",
          "972:     @Deprecated",
          "973:     public static synchronized InitialContext getInitialContext() throws NamingException {",
          "974:         Logging.getLogger(GeoTools.class)",
          "975:                 .severe(",
          "976:                         \"Please don't use GeoTools.getInitialContext(), perform lookups using GeoTools.jndiLookup(s) instead.\");",
          "977:         return getJNDIContext();",
          "978:     }",
          "980:     private static synchronized InitialContext getJNDIContext() throws NamingException {",
          "991:     public static boolean isJNDIAvailable() {",
          "992:         try {",
          "994:             return getJNDIContext() != null;",
          "995:         } catch (NamingException e) {",
          "996:             return false;",
          "997:         }",
          "998:     }",
          "1008:     public static void setJNDINameValidator(Predicate<String> validator) {",
          "1009:         jndiValidator = validator;",
          "1010:     }",
          "1021:     public static Object jndiLookup(String name) throws NamingException {",
          "1022:         if (!jndiValidator.test(name)) return null;",
          "1023:         return getJNDIContext().lookup(name);",
          "1024:     }",
          "1026:     private static NamingException handleException(Exception e) {",
          "1027:         final Logger LOGGER = Logging.getLogger(GeoTools.class);",
          "1028:         final String propFileName = \"jndi.properties\";",
          "1030:         if (LOGGER.isLoggable(Level.WARNING)) {",
          "1032:             StringBuilder sb = new StringBuilder();",
          "1033:             sb.append(\"Error while retriving Initial Context.\\n\\n\")",
          "1034:                     .append(\"Exception: \")",
          "1035:                     .append(e.getMessage())",
          "1036:                     .append(\"\\n\");",
          "1038:             Object contextFactory = System.getProperty(Context.INITIAL_CONTEXT_FACTORY);",
          "1039:             sb.append(\"Factory could be taken from System property: \")",
          "1040:                     .append(Context.INITIAL_CONTEXT_FACTORY)",
          "1041:                     .append(\"=\")",
          "1042:                     .append(contextFactory == null ? \"\" : (String) contextFactory)",
          "1043:                     .append(\"\\n\");",
          "1045:             Enumeration<URL> urls =",
          "1046:                     AccessController.doPrivileged(",
          "1047:                             new PrivilegedAction<Enumeration<URL>>() {",
          "1048:                                 @Override",
          "1049:                                 public Enumeration<URL> run() {",
          "1050:                                     try {",
          "1051:                                         return ClassLoader.getSystemResources(propFileName);",
          "1052:                                     } catch (IOException e) {",
          "1053:                                         return null;",
          "1054:                                     }",
          "1055:                                 }",
          "1056:                             });",
          "1057:             if (urls != null) {",
          "1058:                 sb.append(\"Or from these property files:\\n\");",
          "1059:                 while (urls.hasMoreElements()) {",
          "1060:                     sb.append(urls.nextElement().getPath()).append(\"\\n\");",
          "1061:                 }",
          "1062:                 sb.append(\"\\n\");",
          "1063:             }",
          "1065:             String javaHome =",
          "1066:                     AccessController.doPrivileged(",
          "1067:                             new PrivilegedAction<String>() {",
          "1068:                                 @Override",
          "1069:                                 public String run() {",
          "1070:                                     try {",
          "1071:                                         String javahome = System.getProperty(\"java.home\");",
          "1072:                                         if (javahome == null) {",
          "1073:                                             return null;",
          "1074:                                         }",
          "1075:                                         String pathname =",
          "1076:                                                 javahome",
          "1077:                                                         + java.io.File.separator",
          "1078:                                                         + \"lib\"",
          "1079:                                                         + java.io.File.separator",
          "1080:                                                         + propFileName;",
          "1081:                                         return pathname;",
          "1082:                                     } catch (Exception e) {",
          "1083:                                         return null;",
          "1084:                                     }",
          "1085:                                 }",
          "1086:                             });",
          "1087:             if (javaHome != null) {",
          "1088:                 sb.append(\"Or from a file specified by system property java.home:\\n\")",
          "1089:                         .append(javaHome)",
          "1090:                         .append(\"\\n\");",
          "1091:             }",
          "1092:             LOGGER.log(Level.WARNING, sb.toString());",
          "1093:         }",
          "1094:         NamingException throwing = new NamingException(\"Couldn't get Initial context.\");",
          "1095:         throwing.setRootCause(e);",
          "1096:         return throwing;",
          "1097:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "974:     public static String fixName(final String name) {",
          "975:         return fixName(null, name, null);",
          "976:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1126:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "989:     public static String fixName(final Context context, final String name) {",
          "990:         return (context != null) ? fixName(context, name, null) : name;",
          "991:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1145:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "998:     private static String fixName(Context context, final String name, final Hints hints) {",
          "999:         String fixed = null;",
          "1000:         if (name != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1159:     @Deprecated",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1006:                 } else",
          "1007:                     try {",
          "1008:                         if (context == null) {",
          "1010:                         }",
          "1011:                         fixed = context.composeName(fixed, part);",
          "1012:                     } catch (NamingException e) {",
          "",
          "[Removed Lines]",
          "1009:                             context = getInitialContext(hints);",
          "",
          "[Added Lines]",
          "1171:                             context = getInitialContext();",
          "",
          "---------------"
        ],
        "modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java": [
          "File: modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java -> modules/library/metadata/src/test/java/org/geotools/util/factory/FactoryRegistryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     private FactoryRegistry getRegistry(",
          "72:             final boolean creator,",
          "73:             final Factory factory1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     @SuppressWarnings(\"PMD.UnusedPrivateMethod\") // PMD getting confused here?",
          "",
          "---------------"
        ],
        "modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java||modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java": [
          "File: modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java -> modules/library/metadata/src/test/java/org/geotools/util/factory/GeoToolsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import java.util.Map;",
          "30: import java.util.jar.Manifest;",
          "31: import javax.media.jai.JAI;",
          "32: import org.apache.commons.logging.LogFactory;",
          "33: import org.geotools.util.NullEntityResolver;",
          "34: import org.geotools.util.PreventLocalEntityResolver;",
          "35: import org.geotools.util.Version;",
          "36: import org.junit.Test;",
          "37: import org.opengis.filter.Filter;",
          "38: import org.xml.sax.EntityResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import javax.naming.InitialContext;",
          "33: import javax.naming.NamingException;",
          "38: import org.junit.Before;",
          "40: import org.mockito.Mockito;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: public final class GeoToolsTest {",
          "50:     @Test",
          "51:     public void testAssertionEnabled() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     @Before",
          "55:     public void clearJNDI() throws NamingException {",
          "56:         GeoTools.clearInitialContext();",
          "57:         GeoTools.setJNDINameValidator(GeoTools.DEFAULT_JNDI_VALIDATOR);",
          "58:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:     @Test",
          "197:     public void testFixName() {",
          "198:         assertNull(GeoTools.fixName(null));",
          "199:         assertEquals(\"simpleName\", GeoTools.fixName(\"simpleName\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:     @SuppressWarnings(\"deprecation\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "262:             Hints.scanSystemProperties();",
          "263:         }",
          "264:     }",
          "265: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:     @Test",
          "279:     public void testLookupValidation() throws Exception {",
          "281:         InitialContext ctx = Mockito.mock(InitialContext.class);",
          "282:         Object test1 = new Object();",
          "283:         String name1 = \"java://test1\";",
          "284:         Mockito.when(ctx.lookup(name1)).thenReturn(test1);",
          "285:         Object test2 = new Object();",
          "286:         String name2 = \"ftp://test2\";",
          "287:         Mockito.when(ctx.lookup(name2)).thenReturn(test2);",
          "288:         Object test3 = new Object();",
          "289:         String name3 = \"http://test3\";",
          "290:         Mockito.when(ctx.lookup(name3)).thenReturn(test3);",
          "291:         Object test4 = new Object();",
          "292:         String name4 = \"java://test4{}\"; // invalid URI",
          "293:         Mockito.when(ctx.lookup(name4)).thenReturn(test4);",
          "296:         GeoTools.init(ctx);",
          "297:         assertSame(test1, GeoTools.jndiLookup(name1));",
          "298:         assertNull(GeoTools.jndiLookup(name2));",
          "299:         assertNull(GeoTools.jndiLookup(name3));",
          "300:         assertNull(GeoTools.jndiLookup(name4));",
          "303:         GeoTools.setJNDINameValidator(name -> true);",
          "304:         assertSame(test1, GeoTools.jndiLookup(name1));",
          "305:         assertSame(test2, GeoTools.jndiLookup(name2));",
          "306:         assertSame(test3, GeoTools.jndiLookup(name3));",
          "307:         assertSame(test4, GeoTools.jndiLookup(name4));",
          "308:     }",
          "",
          "---------------"
        ],
        "modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java": [
          "File: modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java -> modules/library/referencing/src/main/java/org/geotools/referencing/factory/AbstractEpsgMediator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.sql.SQLException;",
          "21: import java.util.logging.Level;",
          "22: import java.util.logging.Logger;",
          "24: import javax.sql.DataSource;",
          "25: import org.geotools.metadata.iso.citation.Citations;",
          "26: import org.geotools.util.SimpleInternationalString;",
          "",
          "[Removed Lines]",
          "23: import javax.naming.InitialContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:             return (DataSource) hint;",
          "74:         } else if (hint instanceof String) {",
          "75:             String name = (String) hint;",
          "77:             try {",
          "81:             } catch (Exception e) {",
          "82:                 throw new FactoryException(\"EPSG_DATA_SOURCE '\" + name + \"' not found:\" + e, e);",
          "83:             }",
          "",
          "[Removed Lines]",
          "76:             InitialContext context;",
          "78:                 context = GeoTools.getInitialContext(hints);",
          "80:                 return (DataSource) context.lookup(name);",
          "",
          "[Added Lines]",
          "76:                 return (DataSource) GeoTools.jndiLookup(name);",
          "",
          "---------------"
        ],
        "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java": [
          "File: modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java -> modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/AbstractEpsgFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:             if (hint instanceof String) {",
          "304:                 String name = (String) hint;",
          "305:                 try {",
          "307:                 } catch (NamingException e) {",
          "308:                     throw new FactoryException(\"A EPSG_DATA_SOURCE hint is required:\" + e);",
          "309:                 }",
          "",
          "[Removed Lines]",
          "306:                     dataSource = (DataSource) GeoTools.getInitialContext(userHints).lookup(name);",
          "",
          "[Added Lines]",
          "306:                     dataSource = (DataSource) GeoTools.jndiLookup(name);",
          "",
          "---------------"
        ],
        "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java||modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java": [
          "File: modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java -> modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.jar.Attributes.Name;",
          "23: import java.util.logging.Level;",
          "24: import java.util.logging.LogRecord;",
          "26: import javax.naming.NamingException;",
          "28: import javax.sql.DataSource;",
          "29: import org.geotools.metadata.i18n.ErrorKeys;",
          "30: import org.geotools.metadata.i18n.Errors;",
          "",
          "[Removed Lines]",
          "25: import javax.naming.InitialContext;",
          "27: import javax.naming.NoInitialContextException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     public static final String DATASOURCE_NAME = \"java:comp/env/jdbc/EPSG\";",
          "104:     protected static final int PRIORITY = MAXIMUM_PRIORITY - 10;",
          "107:     private final ReferencingFactoryContainer factories;",
          "",
          "[Removed Lines]",
          "101:     private static final boolean ALLOW_REGISTRATION = false;",
          "114:     private transient InitialContext registerInto;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:     protected DataSource createDataSource() throws SQLException {",
          "305:         DataSource source = null;",
          "306:         try {",
          "314:         }",
          "315:         return source;",
          "",
          "[Removed Lines]",
          "304:         InitialContext context = null;",
          "307:             context = GeoTools.getInitialContext(new Hints(hints));",
          "308:             source = (DataSource) context.lookup(datasourceName);",
          "309:         } catch (IllegalArgumentException | NoInitialContextException exception) {",
          "311:         } catch (NamingException exception) {",
          "312:             registerInto = context;",
          "",
          "[Added Lines]",
          "288:             source = (DataSource) GeoTools.jndiLookup(datasourceName);",
          "289:         } catch (IllegalArgumentException | NamingException exception) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "391:         if (source == null) {",
          "392:             throw new FactoryNotFoundException(Errors.format(ErrorKeys.NO_DATA_SOURCE));",
          "393:         }",
          "",
          "[Removed Lines]",
          "383:         DataSource source;",
          "384:         final InitialContext context;",
          "385:         try {",
          "386:             source = createDataSource();",
          "387:             context = registerInto;",
          "388:         } finally {",
          "389:             registerInto = null;",
          "390:         }",
          "",
          "[Added Lines]",
          "360:         DataSource source = createDataSource();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "398:         } finally {",
          "399:             datasource = null;",
          "400:         }",
          "422:         this.datasource = source; // Stores the data source only after success.",
          "423:         return factory;",
          "424:     }",
          "",
          "[Removed Lines]",
          "405:         LogRecord record;",
          "406:         if (ALLOW_REGISTRATION && context != null) {",
          "407:             try {",
          "408:                 context.bind(datasourceName, source);",
          "409:                 record =",
          "410:                         Loggings.format(",
          "411:                                 Level.FINE,",
          "412:                                 LoggingKeys.CREATED_DATASOURCE_ENTRY_$1,",
          "413:                                 datasourceName);",
          "414:             } catch (NamingException exception) {",
          "415:                 record =",
          "416:                         Loggings.format(",
          "417:                                 Level.WARNING, LoggingKeys.CANT_BIND_DATASOURCE_$1, datasourceName);",
          "418:                 record.setThrown(exception);",
          "419:             }",
          "420:             log(record);",
          "421:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java||modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java": [
          "File: modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java -> modules/unsupported/postgis-raster/src/main/java/org/geotools/gce/pgraster/PGRasterConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         String jndi = first(db, \"jndi\").map(this::nodeValue).orElse(null);",
          "118:         if (jndi != null) {",
          "119:             try {",
          "123:             } catch (NamingException e) {",
          "124:                 throw new IllegalArgumentException(\"Error performing JNDI lookup for: \" + jndi, e);",
          "125:             }",
          "",
          "[Removed Lines]",
          "120:                 dataSource =",
          "121:                         (DataSource)",
          "122:                                 GeoTools.getInitialContext(GeoTools.getDefaultHints()).lookup(jndi);",
          "",
          "[Added Lines]",
          "120:                 dataSource = (DataSource) GeoTools.jndiLookup(jndi);",
          "",
          "---------------"
        ]
      }
    }
  ]
}