{
  "cve_id": "CVE-2022-23526",
  "cve_desc": "Helm is a tool for managing Charts, pre-configured Kubernetes resources. Versions prior to 3.10.3 are subject to NULL Pointer Dereference in the_chartutil_ package that can cause a segmentation violation. The _chartutil_ package contains a parser that loads a JSON Schema validation file. For example, the Helm client when rendering a chart will validate its values with the schema file. The _chartutil_ package parses the schema file and loads it into structures Go can work with. Some schema files can cause array data structures to be created causing a memory violation. Applications that use the _chartutil_ package in the Helm SDK to parse a schema file can suffer a Denial of Service when that input causes a panic that cannot be recovered from. Helm is not a long running service so the panic will not affect future uses of the Helm client. This issue has been patched in 3.10.3. SDK users can validate schema files that are correctly formatted before passing them to the _chartutil_ functions.",
  "repo": "helm/helm",
  "patch_hash": "bafafa8bb1b571b61d7a9528da8d40c307dade3d",
  "patch_info": {
    "commit_hash": "bafafa8bb1b571b61d7a9528da8d40c307dade3d",
    "repo": "helm/helm",
    "commit_url": "https://github.com/helm/helm/commit/bafafa8bb1b571b61d7a9528da8d40c307dade3d",
    "files": [
      "pkg/chartutil/jsonschema.go",
      "pkg/chartutil/jsonschema_test.go",
      "pkg/chartutil/testdata/test-values-invalid.schema.json",
      "cmd/helm/root.go",
      "go.mod",
      "go.sum",
      "pkg/action/lint.go",
      "pkg/chartutil/create.go",
      "pkg/cli/environment.go",
      "pkg/cli/roundtripper.go",
      "pkg/engine/lookup_func.go",
      "pkg/kube/client.go",
      "pkg/kube/wait.go",
      "pkg/kube/wait_test.go",
      "pkg/plugin/installer/http_installer.go",
      "pkg/plugin/installer/local_installer.go",
      "pkg/plugin/installer/local_installer_test.go",
      "scripts/get-helm-3"
    ],
    "message": "Merge pull request from GHSA-67fx-wx78-jx33\n\nUpdate schema validation handling",
    "before_after_code_files": [
      "pkg/chartutil/jsonschema.go||pkg/chartutil/jsonschema.go",
      "pkg/chartutil/jsonschema_test.go||pkg/chartutil/jsonschema_test.go"
    ]
  },
  "patch_diff": {
    "pkg/chartutil/jsonschema.go||pkg/chartutil/jsonschema.go": [
      "File: pkg/chartutil/jsonschema.go -> pkg/chartutil/jsonschema.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "55: }",
      "59:  valuesData, err := yaml.Marshal(values)",
      "60:  if err != nil {",
      "61:   return err",
      "",
      "[Removed Lines]",
      "58: func ValidateAgainstSingleSchema(values Values, schemaJSON []byte) error {",
      "",
      "[Added Lines]",
      "58: func ValidateAgainstSingleSchema(values Values, schemaJSON []byte) (reterr error) {",
      "59:  defer func() {",
      "60:   if r := recover(); r != nil {",
      "61:    reterr = fmt.Errorf(\"unable to validate schema: %s\", r)",
      "62:   }",
      "63:  }()",
      "",
      "---------------"
    ],
    "pkg/chartutil/jsonschema_test.go||pkg/chartutil/jsonschema_test.go": [
      "File: pkg/chartutil/jsonschema_test.go -> pkg/chartutil/jsonschema_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:  }",
      "39: }",
      "41: func TestValidateAgainstSingleSchemaNegative(t *testing.T) {",
      "42:  values, err := ReadValuesFile(\"./testdata/test-values-negative.yaml\")",
      "43:  if err != nil {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "41: func TestValidateAgainstInvalidSingleSchema(t *testing.T) {",
      "42:  values, err := ReadValuesFile(\"./testdata/test-values.yaml\")",
      "43:  if err != nil {",
      "44:   t.Fatalf(\"Error reading YAML file: %s\", err)",
      "45:  }",
      "46:  schema, err := ioutil.ReadFile(\"./testdata/test-values-invalid.schema.json\")",
      "47:  if err != nil {",
      "48:   t.Fatalf(\"Error reading YAML file: %s\", err)",
      "49:  }",
      "51:  var errString string",
      "52:  if err := ValidateAgainstSingleSchema(values, schema); err == nil {",
      "53:   t.Fatalf(\"Expected an error, but got nil\")",
      "54:  } else {",
      "55:   errString = err.Error()",
      "56:  }",
      "58:  expectedErrString := \"unable to validate schema: runtime error: invalid \" +",
      "59:   \"memory address or nil pointer dereference\"",
      "60:  if errString != expectedErrString {",
      "61:   t.Errorf(\"Error string :\\n`%s`\\ndoes not match expected\\n`%s`\", errString, expectedErrString)",
      "62:  }",
      "63: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f4b93226c6066e009a5162d0b08debbf3d82a67f",
      "candidate_info": {
        "commit_hash": "f4b93226c6066e009a5162d0b08debbf3d82a67f",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/f4b93226c6066e009a5162d0b08debbf3d82a67f",
        "files": [
          "pkg/chartutil/jsonschema.go",
          "pkg/chartutil/jsonschema_test.go",
          "pkg/chartutil/testdata/test-values-invalid.schema.json"
        ],
        "message": "Update schema validation handling\n\nSigned-off-by: Martin Hickey <martin.hickey@ie.ibm.com>\n(cherry picked from commit 775af2a0ceadef1bc8f627cdb70fadb3c69b8d86)",
        "before_after_code_files": [
          "pkg/chartutil/jsonschema.go||pkg/chartutil/jsonschema.go",
          "pkg/chartutil/jsonschema_test.go||pkg/chartutil/jsonschema_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/chartutil/jsonschema.go||pkg/chartutil/jsonschema.go",
            "pkg/chartutil/jsonschema_test.go||pkg/chartutil/jsonschema_test.go"
          ],
          "candidate": [
            "pkg/chartutil/jsonschema.go||pkg/chartutil/jsonschema.go",
            "pkg/chartutil/jsonschema_test.go||pkg/chartutil/jsonschema_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/chartutil/jsonschema.go||pkg/chartutil/jsonschema.go": [
          "File: pkg/chartutil/jsonschema.go -> pkg/chartutil/jsonschema.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: }",
          "59:  valuesData, err := yaml.Marshal(values)",
          "60:  if err != nil {",
          "61:   return err",
          "",
          "[Removed Lines]",
          "58: func ValidateAgainstSingleSchema(values Values, schemaJSON []byte) error {",
          "",
          "[Added Lines]",
          "58: func ValidateAgainstSingleSchema(values Values, schemaJSON []byte) (reterr error) {",
          "59:  defer func() {",
          "60:   if r := recover(); r != nil {",
          "61:    reterr = fmt.Errorf(\"unable to validate schema: %s\", r)",
          "62:   }",
          "63:  }()",
          "",
          "---------------"
        ],
        "pkg/chartutil/jsonschema_test.go||pkg/chartutil/jsonschema_test.go": [
          "File: pkg/chartutil/jsonschema_test.go -> pkg/chartutil/jsonschema_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:  }",
          "39: }",
          "41: func TestValidateAgainstSingleSchemaNegative(t *testing.T) {",
          "42:  values, err := ReadValuesFile(\"./testdata/test-values-negative.yaml\")",
          "43:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: func TestValidateAgainstInvalidSingleSchema(t *testing.T) {",
          "42:  values, err := ReadValuesFile(\"./testdata/test-values.yaml\")",
          "43:  if err != nil {",
          "44:   t.Fatalf(\"Error reading YAML file: %s\", err)",
          "45:  }",
          "46:  schema, err := ioutil.ReadFile(\"./testdata/test-values-invalid.schema.json\")",
          "47:  if err != nil {",
          "48:   t.Fatalf(\"Error reading YAML file: %s\", err)",
          "49:  }",
          "51:  var errString string",
          "52:  if err := ValidateAgainstSingleSchema(values, schema); err == nil {",
          "53:   t.Fatalf(\"Expected an error, but got nil\")",
          "54:  } else {",
          "55:   errString = err.Error()",
          "56:  }",
          "58:  expectedErrString := \"unable to validate schema: runtime error: invalid \" +",
          "59:   \"memory address or nil pointer dereference\"",
          "60:  if errString != expectedErrString {",
          "61:   t.Errorf(\"Error string :\\n`%s`\\ndoes not match expected\\n`%s`\", errString, expectedErrString)",
          "62:  }",
          "63: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}