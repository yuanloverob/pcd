{
  "cve_id": "CVE-2024-23829",
  "cve_desc": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Security-sensitive parts of the Python HTTP parser retained minor differences in allowable character sets, that must trigger error handling to robustly match frame boundaries of proxies in order to protect against injection of additional requests. Additionally, validation could trigger exceptions that were not handled consistently with processing of other malformed input.  Being more lenient than internet standards require could, depending on deployment environment, assist in request smuggling. The unhandled exception could cause excessive resource consumption on the application server and/or its logging facilities. This vulnerability exists due to an incomplete fix for CVE-2023-47627. Version 3.9.2 fixes this vulnerability.",
  "repo": "aio-libs/aiohttp",
  "patch_hash": "33ccdfb0a12690af5bb49bda2319ec0907fa7827",
  "patch_info": {
    "commit_hash": "33ccdfb0a12690af5bb49bda2319ec0907fa7827",
    "repo": "aio-libs/aiohttp",
    "commit_url": "https://github.com/aio-libs/aiohttp/commit/33ccdfb0a12690af5bb49bda2319ec0907fa7827",
    "files": [
      "CHANGES/8074.bugfix.rst",
      "CONTRIBUTORS.txt",
      "aiohttp/http_parser.py",
      "tests/test_http_parser.py"
    ],
    "message": "Improve validation in HTTP parser (#8074)\n\nCo-authored-by: Paul J. Dorn <pajod@users.noreply.github.com>\nCo-authored-by: Sviatoslav Sydorenko (\u0421\u0432\u044f\u0442\u043e\u0441\u043b\u0430\u0432 \u0421\u0438\u0434\u043e\u0440\u0435\u043d\u043a\u043e) <sviat@redhat.com>",
    "before_after_code_files": [
      "aiohttp/http_parser.py||aiohttp/http_parser.py",
      "tests/test_http_parser.py||tests/test_http_parser.py"
    ]
  },
  "patch_diff": {
    "aiohttp/http_parser.py||aiohttp/http_parser.py": [
      "File: aiohttp/http_parser.py -> aiohttp/http_parser.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "69: #     tchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" /",
      "70: #             \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA",
      "71: #     token = 1*tchar",
      "80: class RawRequestMessage(NamedTuple):",
      "",
      "[Removed Lines]",
      "72: METHRE: Final[Pattern[str]] = re.compile(r\"[!#$%&'*+\\-.^_`|~0-9A-Za-z]+\")",
      "73: VERSRE: Final[Pattern[str]] = re.compile(r\"HTTP/(\\d).(\\d)\")",
      "74: HDRRE: Final[Pattern[bytes]] = re.compile(",
      "75:     rb\"[\\x00-\\x1F\\x7F-\\xFF()<>@,;:\\[\\]={} \\t\\\"\\\\]\"",
      "76: )",
      "77: HEXDIGIT = re.compile(rb\"[0-9a-fA-F]+\")",
      "",
      "[Added Lines]",
      "72: _TCHAR_SPECIALS: Final[str] = re.escape(\"!#$%&'*+-.^_`|~\")",
      "73: TOKENRE: Final[Pattern[str]] = re.compile(f\"[0-9A-Za-z{_TCHAR_SPECIALS}]+\")",
      "74: VERSRE: Final[Pattern[str]] = re.compile(r\"HTTP/(\\d)\\.(\\d)\", re.ASCII)",
      "75: DIGITS: Final[Pattern[str]] = re.compile(r\"\\d+\", re.ASCII)",
      "76: HEXDIGITS: Final[Pattern[bytes]] = re.compile(rb\"[0-9a-fA-F]+\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "133:         self, lines: List[bytes]",
      "134:     ) -> Tuple[\"CIMultiDictProxy[str]\", RawHeaders]:",
      "135:         headers: CIMultiDict[str] = CIMultiDict()",
      "136:         raw_headers = []",
      "138:         lines_idx = 1",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "135:         # note: \"raw\" does not mean inclusion of OWS before/after the field value",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "146:             except ValueError:",
      "147:                 raise InvalidHeader(line) from None",
      "149:             # https://www.rfc-editor.org/rfc/rfc9112.html#section-5.1-2",
      "150:             if {bname[0], bname[-1]} & {32, 9}:  # {\" \", \"\\t\"}",
      "151:                 raise InvalidHeader(line)",
      "153:             bvalue = bvalue.lstrip(b\" \\t\")",
      "156:             if len(bname) > self.max_field_size:",
      "157:                 raise LineTooLong(",
      "158:                     \"request header name {}\".format(",
      "",
      "[Removed Lines]",
      "154:             if HDRRE.search(bname):",
      "155:                 raise InvalidHeader(bname)",
      "",
      "[Added Lines]",
      "149:             if len(bname) == 0:",
      "150:                 raise InvalidHeader(bname)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "161:                     str(self.max_field_size),",
      "162:                     str(len(bname)),",
      "163:                 )",
      "165:             header_length = len(bvalue)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "165:             name = bname.decode(\"utf-8\", \"surrogateescape\")",
      "166:             if not TOKENRE.fullmatch(name):",
      "167:                 raise InvalidHeader(bname)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "207:                     )",
      "209:             bvalue = bvalue.strip(b\" \\t\")",
      "211:             value = bvalue.decode(\"utf-8\", \"surrogateescape\")",
      "213:             # https://www.rfc-editor.org/rfc/rfc9110.html#section-5.5-5",
      "",
      "[Removed Lines]",
      "210:             name = bname.decode(\"utf-8\", \"surrogateescape\")",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "332:                             # Shouldn't allow +/- or other number formats.",
      "333:                             # https://www.rfc-editor.org/rfc/rfc9110#section-8.6-2",
      "335:                                 raise InvalidHeader(CONTENT_LENGTH)",
      "337:                             return int(length_hdr)",
      "",
      "[Removed Lines]",
      "334:                             if not length_hdr.strip(\" \\t\").isdecimal():",
      "",
      "[Added Lines]",
      "337:                             # msg.headers is already stripped of leading/trailing wsp",
      "338:                             if not DIGITS.fullmatch(length_hdr):",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "559:             )",
      "561:         # method",
      "563:             raise BadStatusLine(method)",
      "565:         # version",
      "",
      "[Removed Lines]",
      "562:         if not METHRE.fullmatch(method):",
      "",
      "[Added Lines]",
      "566:         if not TOKENRE.fullmatch(method):",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "676:             raise BadStatusLine(line)",
      "677:         version_o = HttpVersion(int(match.group(1)), int(match.group(2)))",
      "681:             raise BadStatusLine(line)",
      "682:         status_i = int(status)",
      "",
      "[Removed Lines]",
      "679:         # The status code is a three-digit number",
      "680:         if len(status) != 3 or not status.isdecimal():",
      "",
      "[Added Lines]",
      "683:         # The status code is a three-digit ASCII number, no padding",
      "684:         if len(status) != 3 or not DIGITS.fullmatch(status):",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "818:                         if self._lax:  # Allow whitespace in lax mode.",
      "819:                             size_b = size_b.strip()",
      "822:                             exc = TransferEncodingError(",
      "823:                                 chunk[:pos].decode(\"ascii\", \"surrogateescape\")",
      "824:                             )",
      "",
      "[Removed Lines]",
      "821:                         if not re.fullmatch(HEXDIGIT, size_b):",
      "",
      "[Added Lines]",
      "825:                         if not re.fullmatch(HEXDIGITS, size_b):",
      "",
      "---------------"
    ],
    "tests/test_http_parser.py||tests/test_http_parser.py": [
      "File: tests/test_http_parser.py -> tests/test_http_parser.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import asyncio",
      "5: import re",
      "7: from unittest import mock",
      "8: from urllib.parse import quote",
      "",
      "[Removed Lines]",
      "6: from typing import Any, List",
      "",
      "[Added Lines]",
      "6: from contextlib import nullcontext",
      "7: from typing import Any, Dict, List",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         parser.feed_data(text)",
      "171: @pytest.mark.parametrize(",
      "172:     \"hdr\",",
      "173:     (",
      "174:         \"Content-Length: -5\",  # https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length",
      "175:         \"Content-Length: +256\",",
      "176:         \"Foo: abc\\rdef\",  # https://www.rfc-editor.org/rfc/rfc9110.html#section-5.5-5",
      "177:         \"Bar: abc\\ndef\",",
      "178:         \"Baz: abc\\x00def\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172: @pytest.mark.parametrize(",
      "173:     \"rfc9110_5_6_2_token_delim\",",
      "174:     r'\"(),/:;<=>?@[\\]{}',",
      "175: )",
      "176: def test_bad_header_name(parser: Any, rfc9110_5_6_2_token_delim: str) -> None:",
      "177:     text = f\"POST / HTTP/1.1\\r\\nhead{rfc9110_5_6_2_token_delim}er: val\\r\\n\\r\\n\".encode()",
      "178:     expectation = pytest.raises(http_exceptions.BadHttpMessage)",
      "179:     if rfc9110_5_6_2_token_delim == \":\":",
      "180:         # Inserting colon into header just splits name/value earlier.",
      "181:         expectation = nullcontext()",
      "182:     with expectation:",
      "183:         parser.feed_data(text)",
      "191:         \"Content-Length: \\N{superscript one}\",",
      "192:         \"Content-Length: \\N{mathematical double-struck digit one}\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "265:         parser.feed_data(text)",
      "268: def test_parse(parser: Any) -> None:",
      "269:     text = b\"GET /test HTTP/1.1\\r\\n\\r\\n\"",
      "270:     messages, upgrade, tail = parser.feed_data(text)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "285: def test_parse_unusual_request_line(parser: Any) -> None:",
      "286:     if not isinstance(response, HttpResponseParserPy):",
      "287:         pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
      "288:     text = b\"#smol //a HTTP/1.3\\r\\n\\r\\n\"",
      "289:     messages, upgrade, tail = parser.feed_data(text)",
      "290:     assert len(messages) == 1",
      "291:     msg, _ = messages[0]",
      "292:     assert msg.compression is None",
      "293:     assert not msg.upgrade",
      "294:     assert msg.method == \"#smol\"",
      "295:     assert msg.path == \"//a\"",
      "296:     assert msg.version == (1, 3)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "567:         parser.feed_data(text)",
      "570: def test_invalid_header(parser: Any) -> None:",
      "571:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"test line\\r\\n\\r\\n\"",
      "572:     with pytest.raises(http_exceptions.BadHttpMessage):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "601: _pad: Dict[bytes, str] = {",
      "602:     b\"\": \"empty\",",
      "603:     # not a typo. Python likes triple zero",
      "604:     b\"\\000\": \"NUL\",",
      "605:     b\" \": \"SP\",",
      "606:     b\"  \": \"SPSP\",",
      "607:     # not a typo: both 0xa0 and 0x0a in case of 8-bit fun",
      "608:     b\"\\n\": \"LF\",",
      "609:     b\"\\xa0\": \"NBSP\",",
      "610:     b\"\\t \": \"TABSP\",",
      "611: }",
      "614: @pytest.mark.parametrize(\"hdr\", [b\"\", b\"foo\"], ids=[\"name-empty\", \"with-name\"])",
      "615: @pytest.mark.parametrize(\"pad2\", _pad.keys(), ids=[\"post-\" + n for n in _pad.values()])",
      "616: @pytest.mark.parametrize(\"pad1\", _pad.keys(), ids=[\"pre-\" + n for n in _pad.values()])",
      "617: def test_invalid_header_spacing(",
      "618:     parser: Any, pad1: bytes, pad2: bytes, hdr: bytes",
      "619: ) -> None:",
      "620:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"%s%s%s: value\\r\\n\\r\\n\" % (pad1, hdr, pad2)",
      "621:     expectation = pytest.raises(http_exceptions.BadHttpMessage)",
      "622:     if pad1 == pad2 == b\"\" and hdr != b\"\":",
      "623:         # one entry in param matrix is correct: non-empty name, not padded",
      "624:         expectation = nullcontext()",
      "625:     if pad1 == pad2 == hdr == b\"\":",
      "626:         if not isinstance(response, HttpResponseParserPy):",
      "627:             pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
      "628:     with expectation:",
      "629:         parser.feed_data(text)",
      "632: def test_empty_header_name(parser: Any) -> None:",
      "633:     if not isinstance(response, HttpResponseParserPy):",
      "634:         pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
      "635:     text = b\"GET /test HTTP/1.1\\r\\n\" b\":test\\r\\n\\r\\n\"",
      "636:     with pytest.raises(http_exceptions.BadHttpMessage):",
      "637:         parser.feed_data(text)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "689:     assert r\"\\n\" not in exc_info.value.message",
      "692: def test_http_request_bad_status_line_whitespace(parser: Any) -> None:",
      "693:     text = b\"GET\\n/path\\fHTTP/1.1\\r\\n\\r\\n\"",
      "694:     with pytest.raises(http_exceptions.BadStatusLine):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "762: _num: Dict[bytes, str] = {",
      "763:     # dangerous: accepted by Python int()",
      "764:     # unicodedata.category(\"\\U0001D7D9\") == 'Nd'",
      "765:     \"\\N{mathematical double-struck digit one}\".encode(): \"utf8digit\",",
      "766:     # only added for interop tests, refused by Python int()",
      "767:     # unicodedata.category(\"\\U000000B9\") == 'No'",
      "768:     \"\\N{superscript one}\".encode(): \"utf8number\",",
      "769:     \"\\N{superscript one}\".encode(\"latin-1\"): \"latin1number\",",
      "770: }",
      "773: @pytest.mark.parametrize(\"nonascii_digit\", _num.keys(), ids=_num.values())",
      "774: def test_http_request_bad_status_line_number(",
      "775:     parser: Any, nonascii_digit: bytes",
      "776: ) -> None:",
      "777:     text = b\"GET /digit HTTP/1.\" + nonascii_digit + b\"\\r\\n\\r\\n\"",
      "778:     with pytest.raises(http_exceptions.BadStatusLine):",
      "779:         parser.feed_data(text)",
      "782: def test_http_request_bad_status_line_separator(parser: Any) -> None:",
      "783:     # single code point, old, multibyte NFKC, multibyte NFKD",
      "784:     utf8sep = \"\\N{arabic ligature sallallahou alayhe wasallam}\".encode()",
      "785:     text = b\"GET /ligature HTTP/1\" + utf8sep + b\"1\\r\\n\\r\\n\"",
      "786:     with pytest.raises(http_exceptions.BadStatusLine):",
      "787:         parser.feed_data(text)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "710:     assert tail == b\"some raw data\"",
      "713: def test_http_request_parser_utf8(parser: Any) -> None:",
      "714:     text = \"GET /path HTTP/1.1\\r\\nx-test:\u0442\u0435\u0441\u0442\\r\\n\\r\\n\".encode()",
      "715:     messages, upgrade, tail = parser.feed_data(text)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "811: def test_http_request_parser_utf8_request_line(parser: Any) -> None:",
      "812:     if not isinstance(response, HttpResponseParserPy):",
      "813:         pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
      "814:     messages, upgrade, tail = parser.feed_data(",
      "815:         # note the truncated unicode sequence",
      "816:         b\"GET /P\\xc3\\xbcnktchen\\xa0\\xef\\xb7 HTTP/1.1\\r\\n\" +",
      "817:         # for easier grep: ASCII 0xA0 more commonly known as non-breaking space",
      "818:         # note the leading and trailing spaces",
      "819:         \"sTeP:  \\N{latin small letter sharp s}nek\\t\\N{no-break space}  \"",
      "820:         \"\\r\\n\\r\\n\".encode()",
      "821:     )",
      "822:     msg = messages[0][0]",
      "824:     assert msg.method == \"GET\"",
      "825:     assert msg.path == \"/P\u00fcnktchen\\udca0\\udcef\\udcb7\"",
      "826:     assert msg.version == (1, 1)",
      "827:     assert msg.headers == CIMultiDict([(\"STEP\", \"\u00dfnek\\t\\xa0\")])",
      "828:     assert msg.raw_headers == ((b\"sTeP\", \"\u00dfnek\\t\\xa0\".encode()),)",
      "829:     assert not msg.should_close",
      "830:     assert msg.compression is None",
      "831:     assert not msg.upgrade",
      "832:     assert not msg.chunked",
      "833:     assert msg.url.path == URL(\"/P%C3%BCnktchen\\udca0\\udcef\\udcb7\").path",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "759:     assert not msg.chunked",
      "763:     with pytest.raises(http_exceptions.BadStatusLine):",
      "767: def test_http_request_parser_bad_version(parser: Any) -> None:",
      "",
      "[Removed Lines]",
      "762: def test_http_request_parser_bad_method(parser: Any) -> None:",
      "764:         parser.feed_data(b'G=\":<>(e),[T];?\" /get HTTP/1.1\\r\\n\\r\\n')",
      "",
      "[Added Lines]",
      "885: @pytest.mark.parametrize(",
      "886:     \"rfc9110_5_6_2_token_delim\",",
      "887:     [bytes([i]) for i in rb'\"(),/:;<=>?@[\\]{}'],",
      "888: )",
      "889: def test_http_request_parser_bad_method(",
      "890:     parser: Any, rfc9110_5_6_2_token_delim: bytes",
      "891: ) -> None:",
      "893:         parser.feed_data(rfc9110_5_6_2_token_delim + b'ET\" /get HTTP/1.1\\r\\n\\r\\n')",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "979:         response.feed_data(b\"HTTP/1.1 ttt test\\r\\n\\r\\n\")",
      "982: def test_http_request_chunked_payload(parser: Any) -> None:",
      "983:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"transfer-encoding: chunked\\r\\n\\r\\n\"",
      "984:     msg, payload = parser.feed_data(text)[0][0]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1111: @pytest.mark.parametrize(\"nonascii_digit\", _num.keys(), ids=_num.values())",
      "1112: def test_http_response_parser_code_not_ascii(",
      "1113:     response: Any, nonascii_digit: bytes",
      "1114: ) -> None:",
      "1115:     with pytest.raises(http_exceptions.BadStatusLine):",
      "1116:         response.feed_data(b\"HTTP/1.1 20\" + nonascii_digit + b\" test\\r\\n\\r\\n\")",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d33bc21414e283c9e6fe7f6caf69e2ed60d66c82",
      "candidate_info": {
        "commit_hash": "d33bc21414e283c9e6fe7f6caf69e2ed60d66c82",
        "repo": "aio-libs/aiohttp",
        "commit_url": "https://github.com/aio-libs/aiohttp/commit/d33bc21414e283c9e6fe7f6caf69e2ed60d66c82",
        "files": [
          "CHANGES/8074.bugfix.rst",
          "CONTRIBUTORS.txt",
          "aiohttp/http_parser.py",
          "tests/test_http_parser.py"
        ],
        "message": "Improve validation in HTTP parser (#8074) (#8078)\n\nCo-authored-by: Paul J. Dorn <pajod@users.noreply.github.com>\nCo-authored-by: Sviatoslav Sydorenko (\u0421\u0432\u044f\u0442\u043e\u0441\u043b\u0430\u0432 \u0421\u0438\u0434\u043e\u0440\u0435\u043d\u043a\u043e)\n<sviat@redhat.com>\n(cherry picked from commit 33ccdfb0a12690af5bb49bda2319ec0907fa7827)",
        "before_after_code_files": [
          "aiohttp/http_parser.py||aiohttp/http_parser.py",
          "tests/test_http_parser.py||tests/test_http_parser.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "aiohttp/http_parser.py||aiohttp/http_parser.py",
            "tests/test_http_parser.py||tests/test_http_parser.py"
          ],
          "candidate": [
            "aiohttp/http_parser.py||aiohttp/http_parser.py",
            "tests/test_http_parser.py||tests/test_http_parser.py"
          ]
        }
      },
      "candidate_diff": {
        "aiohttp/http_parser.py||aiohttp/http_parser.py": [
          "File: aiohttp/http_parser.py -> aiohttp/http_parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #     tchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" /",
          "70: #             \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA",
          "71: #     token = 1*tchar",
          "80: class RawRequestMessage(NamedTuple):",
          "",
          "[Removed Lines]",
          "72: METHRE: Final[Pattern[str]] = re.compile(r\"[!#$%&'*+\\-.^_`|~0-9A-Za-z]+\")",
          "73: VERSRE: Final[Pattern[str]] = re.compile(r\"HTTP/(\\d).(\\d)\")",
          "74: HDRRE: Final[Pattern[bytes]] = re.compile(",
          "75:     rb\"[\\x00-\\x1F\\x7F-\\xFF()<>@,;:\\[\\]={} \\t\\\"\\\\]\"",
          "76: )",
          "77: HEXDIGIT = re.compile(rb\"[0-9a-fA-F]+\")",
          "",
          "[Added Lines]",
          "72: _TCHAR_SPECIALS: Final[str] = re.escape(\"!#$%&'*+-.^_`|~\")",
          "73: TOKENRE: Final[Pattern[str]] = re.compile(f\"[0-9A-Za-z{_TCHAR_SPECIALS}]+\")",
          "74: VERSRE: Final[Pattern[str]] = re.compile(r\"HTTP/(\\d)\\.(\\d)\", re.ASCII)",
          "75: DIGITS: Final[Pattern[str]] = re.compile(r\"\\d+\", re.ASCII)",
          "76: HEXDIGITS: Final[Pattern[bytes]] = re.compile(rb\"[0-9a-fA-F]+\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:         self, lines: List[bytes]",
          "137:     ) -> Tuple[\"CIMultiDictProxy[str]\", RawHeaders]:",
          "138:         headers: CIMultiDict[str] = CIMultiDict()",
          "139:         raw_headers = []",
          "141:         lines_idx = 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:         # note: \"raw\" does not mean inclusion of OWS before/after the field value",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:             except ValueError:",
          "150:                 raise InvalidHeader(line) from None",
          "152:             # https://www.rfc-editor.org/rfc/rfc9112.html#section-5.1-2",
          "153:             if {bname[0], bname[-1]} & {32, 9}:  # {\" \", \"\\t\"}",
          "154:                 raise InvalidHeader(line)",
          "156:             bvalue = bvalue.lstrip(b\" \\t\")",
          "159:             if len(bname) > self.max_field_size:",
          "160:                 raise LineTooLong(",
          "161:                     \"request header name {}\".format(",
          "",
          "[Removed Lines]",
          "157:             if HDRRE.search(bname):",
          "158:                 raise InvalidHeader(bname)",
          "",
          "[Added Lines]",
          "152:             if len(bname) == 0:",
          "153:                 raise InvalidHeader(bname)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:                     str(self.max_field_size),",
          "165:                     str(len(bname)),",
          "166:                 )",
          "168:             header_length = len(bvalue)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:             name = bname.decode(\"utf-8\", \"surrogateescape\")",
          "169:             if not TOKENRE.fullmatch(name):",
          "170:                 raise InvalidHeader(bname)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "210:                     )",
          "212:             bvalue = bvalue.strip(b\" \\t\")",
          "214:             value = bvalue.decode(\"utf-8\", \"surrogateescape\")",
          "216:             # https://www.rfc-editor.org/rfc/rfc9110.html#section-5.5-5",
          "",
          "[Removed Lines]",
          "213:             name = bname.decode(\"utf-8\", \"surrogateescape\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "339:                             # Shouldn't allow +/- or other number formats.",
          "340:                             # https://www.rfc-editor.org/rfc/rfc9110#section-8.6-2",
          "342:                                 raise InvalidHeader(CONTENT_LENGTH)",
          "344:                             return int(length_hdr)",
          "",
          "[Removed Lines]",
          "341:                             if not length_hdr.strip(\" \\t\").isdecimal():",
          "",
          "[Added Lines]",
          "344:                             # msg.headers is already stripped of leading/trailing wsp",
          "345:                             if not DIGITS.fullmatch(length_hdr):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "566:             )",
          "568:         # method",
          "570:             raise BadStatusLine(method)",
          "572:         # version",
          "",
          "[Removed Lines]",
          "569:         if not METHRE.fullmatch(method):",
          "",
          "[Added Lines]",
          "573:         if not TOKENRE.fullmatch(method):",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "683:             raise BadStatusLine(line)",
          "684:         version_o = HttpVersion(int(match.group(1)), int(match.group(2)))",
          "688:             raise BadStatusLine(line)",
          "689:         status_i = int(status)",
          "",
          "[Removed Lines]",
          "686:         # The status code is a three-digit number",
          "687:         if len(status) != 3 or not status.isdecimal():",
          "",
          "[Added Lines]",
          "690:         # The status code is a three-digit ASCII number, no padding",
          "691:         if len(status) != 3 or not DIGITS.fullmatch(status):",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "826:                         if self._lax:  # Allow whitespace in lax mode.",
          "827:                             size_b = size_b.strip()",
          "830:                             exc = TransferEncodingError(",
          "831:                                 chunk[:pos].decode(\"ascii\", \"surrogateescape\")",
          "832:                             )",
          "",
          "[Removed Lines]",
          "829:                         if not re.fullmatch(HEXDIGIT, size_b):",
          "",
          "[Added Lines]",
          "833:                         if not re.fullmatch(HEXDIGITS, size_b):",
          "",
          "---------------"
        ],
        "tests/test_http_parser.py||tests/test_http_parser.py": [
          "File: tests/test_http_parser.py -> tests/test_http_parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import asyncio",
          "4: import re",
          "6: from unittest import mock",
          "7: from urllib.parse import quote",
          "",
          "[Removed Lines]",
          "5: from typing import Any, List",
          "",
          "[Added Lines]",
          "5: from contextlib import nullcontext",
          "6: from typing import Any, Dict, List",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:         parser.feed_data(text)",
          "172: @pytest.mark.parametrize(",
          "173:     \"hdr\",",
          "174:     (",
          "175:         \"Content-Length: -5\",  # https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length",
          "176:         \"Content-Length: +256\",",
          "177:         \"Foo: abc\\rdef\",  # https://www.rfc-editor.org/rfc/rfc9110.html#section-5.5-5",
          "178:         \"Bar: abc\\ndef\",",
          "179:         \"Baz: abc\\x00def\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: @pytest.mark.parametrize(",
          "174:     \"rfc9110_5_6_2_token_delim\",",
          "175:     r'\"(),/:;<=>?@[\\]{}',",
          "176: )",
          "177: def test_bad_header_name(parser: Any, rfc9110_5_6_2_token_delim: str) -> None:",
          "178:     text = f\"POST / HTTP/1.1\\r\\nhead{rfc9110_5_6_2_token_delim}er: val\\r\\n\\r\\n\".encode()",
          "179:     expectation = pytest.raises(http_exceptions.BadHttpMessage)",
          "180:     if rfc9110_5_6_2_token_delim == \":\":",
          "181:         # Inserting colon into header just splits name/value earlier.",
          "182:         expectation = nullcontext()",
          "183:     with expectation:",
          "184:         parser.feed_data(text)",
          "192:         \"Content-Length: \\N{superscript one}\",",
          "193:         \"Content-Length: \\N{mathematical double-struck digit one}\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "266:         parser.feed_data(text)",
          "269: def test_parse(parser) -> None:",
          "270:     text = b\"GET /test HTTP/1.1\\r\\n\\r\\n\"",
          "271:     messages, upgrade, tail = parser.feed_data(text)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286: def test_parse_unusual_request_line(parser) -> None:",
          "287:     if not isinstance(response, HttpResponseParserPy):",
          "288:         pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
          "289:     text = b\"#smol //a HTTP/1.3\\r\\n\\r\\n\"",
          "290:     messages, upgrade, tail = parser.feed_data(text)",
          "291:     assert len(messages) == 1",
          "292:     msg, _ = messages[0]",
          "293:     assert msg.compression is None",
          "294:     assert not msg.upgrade",
          "295:     assert msg.method == \"#smol\"",
          "296:     assert msg.path == \"//a\"",
          "297:     assert msg.version == (1, 3)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "568:         parser.feed_data(text)",
          "571: def test_invalid_header(parser) -> None:",
          "572:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"test line\\r\\n\\r\\n\"",
          "573:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602: _pad: Dict[bytes, str] = {",
          "603:     b\"\": \"empty\",",
          "604:     # not a typo. Python likes triple zero",
          "605:     b\"\\000\": \"NUL\",",
          "606:     b\" \": \"SP\",",
          "607:     b\"  \": \"SPSP\",",
          "608:     # not a typo: both 0xa0 and 0x0a in case of 8-bit fun",
          "609:     b\"\\n\": \"LF\",",
          "610:     b\"\\xa0\": \"NBSP\",",
          "611:     b\"\\t \": \"TABSP\",",
          "612: }",
          "615: @pytest.mark.parametrize(\"hdr\", [b\"\", b\"foo\"], ids=[\"name-empty\", \"with-name\"])",
          "616: @pytest.mark.parametrize(\"pad2\", _pad.keys(), ids=[\"post-\" + n for n in _pad.values()])",
          "617: @pytest.mark.parametrize(\"pad1\", _pad.keys(), ids=[\"pre-\" + n for n in _pad.values()])",
          "618: def test_invalid_header_spacing(parser, pad1: bytes, pad2: bytes, hdr: bytes) -> None:",
          "619:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"%s%s%s: value\\r\\n\\r\\n\" % (pad1, hdr, pad2)",
          "620:     expectation = pytest.raises(http_exceptions.BadHttpMessage)",
          "621:     if pad1 == pad2 == b\"\" and hdr != b\"\":",
          "622:         # one entry in param matrix is correct: non-empty name, not padded",
          "623:         expectation = nullcontext()",
          "624:     if pad1 == pad2 == hdr == b\"\":",
          "625:         if not isinstance(response, HttpResponseParserPy):",
          "626:             pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
          "627:     with expectation:",
          "628:         parser.feed_data(text)",
          "631: def test_empty_header_name(parser) -> None:",
          "632:     if not isinstance(response, HttpResponseParserPy):",
          "633:         pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
          "634:     text = b\"GET /test HTTP/1.1\\r\\n\" b\":test\\r\\n\\r\\n\"",
          "635:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "636:         parser.feed_data(text)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "690:     assert r\"\\n\" not in exc_info.value.message",
          "693: def test_http_request_bad_status_line_whitespace(parser: Any) -> None:",
          "694:     text = b\"GET\\n/path\\fHTTP/1.1\\r\\n\\r\\n\"",
          "695:     with pytest.raises(http_exceptions.BadStatusLine):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761: _num: Dict[bytes, str] = {",
          "762:     # dangerous: accepted by Python int()",
          "763:     # unicodedata.category(\"\\U0001D7D9\") == 'Nd'",
          "764:     \"\\N{mathematical double-struck digit one}\".encode(): \"utf8digit\",",
          "765:     # only added for interop tests, refused by Python int()",
          "766:     # unicodedata.category(\"\\U000000B9\") == 'No'",
          "767:     \"\\N{superscript one}\".encode(): \"utf8number\",",
          "768:     \"\\N{superscript one}\".encode(\"latin-1\"): \"latin1number\",",
          "769: }",
          "772: @pytest.mark.parametrize(\"nonascii_digit\", _num.keys(), ids=_num.values())",
          "773: def test_http_request_bad_status_line_number(",
          "774:     parser: Any, nonascii_digit: bytes",
          "775: ) -> None:",
          "776:     text = b\"GET /digit HTTP/1.\" + nonascii_digit + b\"\\r\\n\\r\\n\"",
          "777:     with pytest.raises(http_exceptions.BadStatusLine):",
          "778:         parser.feed_data(text)",
          "781: def test_http_request_bad_status_line_separator(parser: Any) -> None:",
          "782:     # single code point, old, multibyte NFKC, multibyte NFKD",
          "783:     utf8sep = \"\\N{arabic ligature sallallahou alayhe wasallam}\".encode()",
          "784:     text = b\"GET /ligature HTTP/1\" + utf8sep + b\"1\\r\\n\\r\\n\"",
          "785:     with pytest.raises(http_exceptions.BadStatusLine):",
          "786:         parser.feed_data(text)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "711:     assert tail == b\"some raw data\"",
          "714: def test_http_request_parser_utf8(parser) -> None:",
          "715:     text = \"GET /path HTTP/1.1\\r\\nx-test:\u0442\u0435\u0441\u0442\\r\\n\\r\\n\".encode()",
          "716:     messages, upgrade, tail = parser.feed_data(text)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "810: def test_http_request_parser_utf8_request_line(parser) -> None:",
          "811:     if not isinstance(response, HttpResponseParserPy):",
          "812:         pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
          "813:     messages, upgrade, tail = parser.feed_data(",
          "814:         # note the truncated unicode sequence",
          "815:         b\"GET /P\\xc3\\xbcnktchen\\xa0\\xef\\xb7 HTTP/1.1\\r\\n\" +",
          "816:         # for easier grep: ASCII 0xA0 more commonly known as non-breaking space",
          "817:         # note the leading and trailing spaces",
          "818:         \"sTeP:  \\N{latin small letter sharp s}nek\\t\\N{no-break space}  \"",
          "819:         \"\\r\\n\\r\\n\".encode()",
          "820:     )",
          "821:     msg = messages[0][0]",
          "823:     assert msg.method == \"GET\"",
          "824:     assert msg.path == \"/P\u00fcnktchen\\udca0\\udcef\\udcb7\"",
          "825:     assert msg.version == (1, 1)",
          "826:     assert msg.headers == CIMultiDict([(\"STEP\", \"\u00dfnek\\t\\xa0\")])",
          "827:     assert msg.raw_headers == ((b\"sTeP\", \"\u00dfnek\\t\\xa0\".encode()),)",
          "828:     assert not msg.should_close",
          "829:     assert msg.compression is None",
          "830:     assert not msg.upgrade",
          "831:     assert not msg.chunked",
          "832:     assert msg.url.path == URL(\"/P%C3%BCnktchen\\udca0\\udcef\\udcb7\").path",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "760:     assert not msg.chunked",
          "764:     with pytest.raises(http_exceptions.BadStatusLine):",
          "768: def test_http_request_parser_bad_version(parser) -> None:",
          "",
          "[Removed Lines]",
          "763: def test_http_request_parser_bad_method(parser) -> None:",
          "765:         parser.feed_data(b'G=\":<>(e),[T];?\" /get HTTP/1.1\\r\\n\\r\\n')",
          "",
          "[Added Lines]",
          "884: @pytest.mark.parametrize(",
          "885:     \"rfc9110_5_6_2_token_delim\",",
          "886:     [bytes([i]) for i in rb'\"(),/:;<=>?@[\\]{}'],",
          "887: )",
          "888: def test_http_request_parser_bad_method(",
          "889:     parser, rfc9110_5_6_2_token_delim: bytes",
          "890: ) -> None:",
          "892:         parser.feed_data(rfc9110_5_6_2_token_delim + b'ET\" /get HTTP/1.1\\r\\n\\r\\n')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "974:         response.feed_data(b\"HTTP/1.1 ttt test\\r\\n\\r\\n\")",
          "977: def test_http_request_chunked_payload(parser) -> None:",
          "978:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"transfer-encoding: chunked\\r\\n\\r\\n\"",
          "979:     msg, payload = parser.feed_data(text)[0][0]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104: @pytest.mark.parametrize(\"nonascii_digit\", _num.keys(), ids=_num.values())",
          "1105: def test_http_response_parser_code_not_ascii(response, nonascii_digit: bytes) -> None:",
          "1106:     with pytest.raises(http_exceptions.BadStatusLine):",
          "1107:         response.feed_data(b\"HTTP/1.1 20\" + nonascii_digit + b\" test\\r\\n\\r\\n\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a67fb1066f5b8dced690f64bd09f689c032126a6",
      "candidate_info": {
        "commit_hash": "a67fb1066f5b8dced690f64bd09f689c032126a6",
        "repo": "aio-libs/aiohttp",
        "commit_url": "https://github.com/aio-libs/aiohttp/commit/a67fb1066f5b8dced690f64bd09f689c032126a6",
        "files": [
          "CHANGES/8074.bugfix.rst",
          "CONTRIBUTORS.txt",
          "aiohttp/http_parser.py",
          "tests/test_http_parser.py"
        ],
        "message": "Improve validation in HTTP parser (#8074) (#8077)\n\nCo-authored-by: Paul J. Dorn <pajod@users.noreply.github.com>\nCo-authored-by: Sviatoslav Sydorenko (\u0421\u0432\u044f\u0442\u043e\u0441\u043b\u0430\u0432 \u0421\u0438\u0434\u043e\u0440\u0435\u043d\u043a\u043e)\n<sviat@redhat.com>\n(cherry picked from commit 33ccdfb0a12690af5bb49bda2319ec0907fa7827)",
        "before_after_code_files": [
          "aiohttp/http_parser.py||aiohttp/http_parser.py",
          "tests/test_http_parser.py||tests/test_http_parser.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "aiohttp/http_parser.py||aiohttp/http_parser.py",
            "tests/test_http_parser.py||tests/test_http_parser.py"
          ],
          "candidate": [
            "aiohttp/http_parser.py||aiohttp/http_parser.py",
            "tests/test_http_parser.py||tests/test_http_parser.py"
          ]
        }
      },
      "candidate_diff": {
        "aiohttp/http_parser.py||aiohttp/http_parser.py": [
          "File: aiohttp/http_parser.py -> aiohttp/http_parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #     tchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" /",
          "70: #             \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA",
          "71: #     token = 1*tchar",
          "80: class RawRequestMessage(NamedTuple):",
          "",
          "[Removed Lines]",
          "72: METHRE: Final[Pattern[str]] = re.compile(r\"[!#$%&'*+\\-.^_`|~0-9A-Za-z]+\")",
          "73: VERSRE: Final[Pattern[str]] = re.compile(r\"HTTP/(\\d).(\\d)\")",
          "74: HDRRE: Final[Pattern[bytes]] = re.compile(",
          "75:     rb\"[\\x00-\\x1F\\x7F-\\xFF()<>@,;:\\[\\]={} \\t\\\"\\\\]\"",
          "76: )",
          "77: HEXDIGIT = re.compile(rb\"[0-9a-fA-F]+\")",
          "",
          "[Added Lines]",
          "72: _TCHAR_SPECIALS: Final[str] = re.escape(\"!#$%&'*+-.^_`|~\")",
          "73: TOKENRE: Final[Pattern[str]] = re.compile(f\"[0-9A-Za-z{_TCHAR_SPECIALS}]+\")",
          "74: VERSRE: Final[Pattern[str]] = re.compile(r\"HTTP/(\\d)\\.(\\d)\", re.ASCII)",
          "75: DIGITS: Final[Pattern[str]] = re.compile(r\"\\d+\", re.ASCII)",
          "76: HEXDIGITS: Final[Pattern[bytes]] = re.compile(rb\"[0-9a-fA-F]+\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:         self, lines: List[bytes]",
          "137:     ) -> Tuple[\"CIMultiDictProxy[str]\", RawHeaders]:",
          "138:         headers: CIMultiDict[str] = CIMultiDict()",
          "139:         raw_headers = []",
          "141:         lines_idx = 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:         # note: \"raw\" does not mean inclusion of OWS before/after the field value",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:             except ValueError:",
          "150:                 raise InvalidHeader(line) from None",
          "152:             # https://www.rfc-editor.org/rfc/rfc9112.html#section-5.1-2",
          "153:             if {bname[0], bname[-1]} & {32, 9}:  # {\" \", \"\\t\"}",
          "154:                 raise InvalidHeader(line)",
          "156:             bvalue = bvalue.lstrip(b\" \\t\")",
          "159:             if len(bname) > self.max_field_size:",
          "160:                 raise LineTooLong(",
          "161:                     \"request header name {}\".format(",
          "",
          "[Removed Lines]",
          "157:             if HDRRE.search(bname):",
          "158:                 raise InvalidHeader(bname)",
          "",
          "[Added Lines]",
          "152:             if len(bname) == 0:",
          "153:                 raise InvalidHeader(bname)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:                     str(self.max_field_size),",
          "165:                     str(len(bname)),",
          "166:                 )",
          "168:             header_length = len(bvalue)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:             name = bname.decode(\"utf-8\", \"surrogateescape\")",
          "169:             if not TOKENRE.fullmatch(name):",
          "170:                 raise InvalidHeader(bname)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "210:                     )",
          "212:             bvalue = bvalue.strip(b\" \\t\")",
          "214:             value = bvalue.decode(\"utf-8\", \"surrogateescape\")",
          "216:             # https://www.rfc-editor.org/rfc/rfc9110.html#section-5.5-5",
          "",
          "[Removed Lines]",
          "213:             name = bname.decode(\"utf-8\", \"surrogateescape\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "339:                             # Shouldn't allow +/- or other number formats.",
          "340:                             # https://www.rfc-editor.org/rfc/rfc9110#section-8.6-2",
          "342:                                 raise InvalidHeader(CONTENT_LENGTH)",
          "344:                             return int(length_hdr)",
          "",
          "[Removed Lines]",
          "341:                             if not length_hdr.strip(\" \\t\").isdecimal():",
          "",
          "[Added Lines]",
          "344:                             # msg.headers is already stripped of leading/trailing wsp",
          "345:                             if not DIGITS.fullmatch(length_hdr):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "566:             )",
          "568:         # method",
          "570:             raise BadStatusLine(method)",
          "572:         # version",
          "",
          "[Removed Lines]",
          "569:         if not METHRE.fullmatch(method):",
          "",
          "[Added Lines]",
          "573:         if not TOKENRE.fullmatch(method):",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "683:             raise BadStatusLine(line)",
          "684:         version_o = HttpVersion(int(match.group(1)), int(match.group(2)))",
          "688:             raise BadStatusLine(line)",
          "689:         status_i = int(status)",
          "",
          "[Removed Lines]",
          "686:         # The status code is a three-digit number",
          "687:         if len(status) != 3 or not status.isdecimal():",
          "",
          "[Added Lines]",
          "690:         # The status code is a three-digit ASCII number, no padding",
          "691:         if len(status) != 3 or not DIGITS.fullmatch(status):",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "826:                         if self._lax:  # Allow whitespace in lax mode.",
          "827:                             size_b = size_b.strip()",
          "830:                             exc = TransferEncodingError(",
          "831:                                 chunk[:pos].decode(\"ascii\", \"surrogateescape\")",
          "832:                             )",
          "",
          "[Removed Lines]",
          "829:                         if not re.fullmatch(HEXDIGIT, size_b):",
          "",
          "[Added Lines]",
          "833:                         if not re.fullmatch(HEXDIGITS, size_b):",
          "",
          "---------------"
        ],
        "tests/test_http_parser.py||tests/test_http_parser.py": [
          "File: tests/test_http_parser.py -> tests/test_http_parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import asyncio",
          "4: import re",
          "6: from unittest import mock",
          "7: from urllib.parse import quote",
          "",
          "[Removed Lines]",
          "5: from typing import Any, List",
          "",
          "[Added Lines]",
          "5: from contextlib import nullcontext",
          "6: from typing import Any, Dict, List",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:         parser.feed_data(text)",
          "172: @pytest.mark.parametrize(",
          "173:     \"hdr\",",
          "174:     (",
          "175:         \"Content-Length: -5\",  # https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length",
          "176:         \"Content-Length: +256\",",
          "177:         \"Foo: abc\\rdef\",  # https://www.rfc-editor.org/rfc/rfc9110.html#section-5.5-5",
          "178:         \"Bar: abc\\ndef\",",
          "179:         \"Baz: abc\\x00def\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: @pytest.mark.parametrize(",
          "174:     \"rfc9110_5_6_2_token_delim\",",
          "175:     r'\"(),/:;<=>?@[\\]{}',",
          "176: )",
          "177: def test_bad_header_name(parser: Any, rfc9110_5_6_2_token_delim: str) -> None:",
          "178:     text = f\"POST / HTTP/1.1\\r\\nhead{rfc9110_5_6_2_token_delim}er: val\\r\\n\\r\\n\".encode()",
          "179:     expectation = pytest.raises(http_exceptions.BadHttpMessage)",
          "180:     if rfc9110_5_6_2_token_delim == \":\":",
          "181:         # Inserting colon into header just splits name/value earlier.",
          "182:         expectation = nullcontext()",
          "183:     with expectation:",
          "184:         parser.feed_data(text)",
          "192:         \"Content-Length: \\N{superscript one}\",",
          "193:         \"Content-Length: \\N{mathematical double-struck digit one}\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "266:         parser.feed_data(text)",
          "269: def test_parse(parser) -> None:",
          "270:     text = b\"GET /test HTTP/1.1\\r\\n\\r\\n\"",
          "271:     messages, upgrade, tail = parser.feed_data(text)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286: def test_parse_unusual_request_line(parser) -> None:",
          "287:     if not isinstance(response, HttpResponseParserPy):",
          "288:         pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
          "289:     text = b\"#smol //a HTTP/1.3\\r\\n\\r\\n\"",
          "290:     messages, upgrade, tail = parser.feed_data(text)",
          "291:     assert len(messages) == 1",
          "292:     msg, _ = messages[0]",
          "293:     assert msg.compression is None",
          "294:     assert not msg.upgrade",
          "295:     assert msg.method == \"#smol\"",
          "296:     assert msg.path == \"//a\"",
          "297:     assert msg.version == (1, 3)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "568:         parser.feed_data(text)",
          "571: def test_invalid_header(parser) -> None:",
          "572:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"test line\\r\\n\\r\\n\"",
          "573:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602: _pad: Dict[bytes, str] = {",
          "603:     b\"\": \"empty\",",
          "604:     # not a typo. Python likes triple zero",
          "605:     b\"\\000\": \"NUL\",",
          "606:     b\" \": \"SP\",",
          "607:     b\"  \": \"SPSP\",",
          "608:     # not a typo: both 0xa0 and 0x0a in case of 8-bit fun",
          "609:     b\"\\n\": \"LF\",",
          "610:     b\"\\xa0\": \"NBSP\",",
          "611:     b\"\\t \": \"TABSP\",",
          "612: }",
          "615: @pytest.mark.parametrize(\"hdr\", [b\"\", b\"foo\"], ids=[\"name-empty\", \"with-name\"])",
          "616: @pytest.mark.parametrize(\"pad2\", _pad.keys(), ids=[\"post-\" + n for n in _pad.values()])",
          "617: @pytest.mark.parametrize(\"pad1\", _pad.keys(), ids=[\"pre-\" + n for n in _pad.values()])",
          "618: def test_invalid_header_spacing(parser, pad1: bytes, pad2: bytes, hdr: bytes) -> None:",
          "619:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"%s%s%s: value\\r\\n\\r\\n\" % (pad1, hdr, pad2)",
          "620:     expectation = pytest.raises(http_exceptions.BadHttpMessage)",
          "621:     if pad1 == pad2 == b\"\" and hdr != b\"\":",
          "622:         # one entry in param matrix is correct: non-empty name, not padded",
          "623:         expectation = nullcontext()",
          "624:     if pad1 == pad2 == hdr == b\"\":",
          "625:         if not isinstance(response, HttpResponseParserPy):",
          "626:             pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
          "627:     with expectation:",
          "628:         parser.feed_data(text)",
          "631: def test_empty_header_name(parser) -> None:",
          "632:     if not isinstance(response, HttpResponseParserPy):",
          "633:         pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
          "634:     text = b\"GET /test HTTP/1.1\\r\\n\" b\":test\\r\\n\\r\\n\"",
          "635:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "636:         parser.feed_data(text)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "690:     assert r\"\\n\" not in exc_info.value.message",
          "693: def test_http_request_bad_status_line_whitespace(parser: Any) -> None:",
          "694:     text = b\"GET\\n/path\\fHTTP/1.1\\r\\n\\r\\n\"",
          "695:     with pytest.raises(http_exceptions.BadStatusLine):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761: _num: Dict[bytes, str] = {",
          "762:     # dangerous: accepted by Python int()",
          "763:     # unicodedata.category(\"\\U0001D7D9\") == 'Nd'",
          "764:     \"\\N{mathematical double-struck digit one}\".encode(): \"utf8digit\",",
          "765:     # only added for interop tests, refused by Python int()",
          "766:     # unicodedata.category(\"\\U000000B9\") == 'No'",
          "767:     \"\\N{superscript one}\".encode(): \"utf8number\",",
          "768:     \"\\N{superscript one}\".encode(\"latin-1\"): \"latin1number\",",
          "769: }",
          "772: @pytest.mark.parametrize(\"nonascii_digit\", _num.keys(), ids=_num.values())",
          "773: def test_http_request_bad_status_line_number(",
          "774:     parser: Any, nonascii_digit: bytes",
          "775: ) -> None:",
          "776:     text = b\"GET /digit HTTP/1.\" + nonascii_digit + b\"\\r\\n\\r\\n\"",
          "777:     with pytest.raises(http_exceptions.BadStatusLine):",
          "778:         parser.feed_data(text)",
          "781: def test_http_request_bad_status_line_separator(parser: Any) -> None:",
          "782:     # single code point, old, multibyte NFKC, multibyte NFKD",
          "783:     utf8sep = \"\\N{arabic ligature sallallahou alayhe wasallam}\".encode()",
          "784:     text = b\"GET /ligature HTTP/1\" + utf8sep + b\"1\\r\\n\\r\\n\"",
          "785:     with pytest.raises(http_exceptions.BadStatusLine):",
          "786:         parser.feed_data(text)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "711:     assert tail == b\"some raw data\"",
          "714: def test_http_request_parser_utf8(parser) -> None:",
          "715:     text = \"GET /path HTTP/1.1\\r\\nx-test:\u0442\u0435\u0441\u0442\\r\\n\\r\\n\".encode()",
          "716:     messages, upgrade, tail = parser.feed_data(text)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "810: def test_http_request_parser_utf8_request_line(parser) -> None:",
          "811:     if not isinstance(response, HttpResponseParserPy):",
          "812:         pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
          "813:     messages, upgrade, tail = parser.feed_data(",
          "814:         # note the truncated unicode sequence",
          "815:         b\"GET /P\\xc3\\xbcnktchen\\xa0\\xef\\xb7 HTTP/1.1\\r\\n\" +",
          "816:         # for easier grep: ASCII 0xA0 more commonly known as non-breaking space",
          "817:         # note the leading and trailing spaces",
          "818:         \"sTeP:  \\N{latin small letter sharp s}nek\\t\\N{no-break space}  \"",
          "819:         \"\\r\\n\\r\\n\".encode()",
          "820:     )",
          "821:     msg = messages[0][0]",
          "823:     assert msg.method == \"GET\"",
          "824:     assert msg.path == \"/P\u00fcnktchen\\udca0\\udcef\\udcb7\"",
          "825:     assert msg.version == (1, 1)",
          "826:     assert msg.headers == CIMultiDict([(\"STEP\", \"\u00dfnek\\t\\xa0\")])",
          "827:     assert msg.raw_headers == ((b\"sTeP\", \"\u00dfnek\\t\\xa0\".encode()),)",
          "828:     assert not msg.should_close",
          "829:     assert msg.compression is None",
          "830:     assert not msg.upgrade",
          "831:     assert not msg.chunked",
          "832:     assert msg.url.path == URL(\"/P%C3%BCnktchen\\udca0\\udcef\\udcb7\").path",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "760:     assert not msg.chunked",
          "764:     with pytest.raises(http_exceptions.BadStatusLine):",
          "768: def test_http_request_parser_bad_version(parser) -> None:",
          "",
          "[Removed Lines]",
          "763: def test_http_request_parser_bad_method(parser) -> None:",
          "765:         parser.feed_data(b'G=\":<>(e),[T];?\" /get HTTP/1.1\\r\\n\\r\\n')",
          "",
          "[Added Lines]",
          "884: @pytest.mark.parametrize(",
          "885:     \"rfc9110_5_6_2_token_delim\",",
          "886:     [bytes([i]) for i in rb'\"(),/:;<=>?@[\\]{}'],",
          "887: )",
          "888: def test_http_request_parser_bad_method(",
          "889:     parser, rfc9110_5_6_2_token_delim: bytes",
          "890: ) -> None:",
          "892:         parser.feed_data(rfc9110_5_6_2_token_delim + b'ET\" /get HTTP/1.1\\r\\n\\r\\n')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "974:         response.feed_data(b\"HTTP/1.1 ttt test\\r\\n\\r\\n\")",
          "977: def test_http_request_chunked_payload(parser) -> None:",
          "978:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"transfer-encoding: chunked\\r\\n\\r\\n\"",
          "979:     msg, payload = parser.feed_data(text)[0][0]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104: @pytest.mark.parametrize(\"nonascii_digit\", _num.keys(), ids=_num.values())",
          "1105: def test_http_response_parser_code_not_ascii(response, nonascii_digit: bytes) -> None:",
          "1106:     with pytest.raises(http_exceptions.BadStatusLine):",
          "1107:         response.feed_data(b\"HTTP/1.1 20\" + nonascii_digit + b\" test\\r\\n\\r\\n\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0016004f0e5b861d35afc56a9a59040769af3122",
      "candidate_info": {
        "commit_hash": "0016004f0e5b861d35afc56a9a59040769af3122",
        "repo": "aio-libs/aiohttp",
        "commit_url": "https://github.com/aio-libs/aiohttp/commit/0016004f0e5b861d35afc56a9a59040769af3122",
        "files": [
          "CHANGES/8088.contrib.rst",
          "tests/test_http_parser.py"
        ],
        "message": "Add tests, accidentally dropped before (#8088)",
        "before_after_code_files": [
          "tests/test_http_parser.py||tests/test_http_parser.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/test_http_parser.py||tests/test_http_parser.py"
          ],
          "candidate": [
            "tests/test_http_parser.py||tests/test_http_parser.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/test_http_parser.py||tests/test_http_parser.py": [
          "File: tests/test_http_parser.py -> tests/test_http_parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:         parser.feed_data(text)",
          "285: def test_parse_unusual_request_line(parser: Any) -> None:",
          "288:     text = b\"#smol //a HTTP/1.3\\r\\n\\r\\n\"",
          "289:     messages, upgrade, tail = parser.feed_data(text)",
          "290:     assert len(messages) == 1",
          "",
          "[Removed Lines]",
          "286:     if not isinstance(response, HttpResponseParserPy):",
          "287:         pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
          "",
          "[Added Lines]",
          "285: @pytest.fixture",
          "286: def xfail_c_parser_status(request) -> None:",
          "287:     if isinstance(request.getfixturevalue(\"parser\"), HttpRequestParserPy):",
          "288:         return",
          "289:     request.node.add_marker(",
          "290:         pytest.mark.xfail(",
          "291:             reason=\"Regression test for Py parser. May match C behaviour later.\",",
          "292:             raises=http_exceptions.BadStatusLine,",
          "293:         )",
          "294:     )",
          "297: @pytest.mark.usefixtures(\"xfail_c_parser_status\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "611: }",
          "614: @pytest.mark.parametrize(\"hdr\", [b\"\", b\"foo\"], ids=[\"name-empty\", \"with-name\"])",
          "615: @pytest.mark.parametrize(\"pad2\", _pad.keys(), ids=[\"post-\" + n for n in _pad.values()])",
          "616: @pytest.mark.parametrize(\"pad1\", _pad.keys(), ids=[\"pre-\" + n for n in _pad.values()])",
          "617: def test_invalid_header_spacing(",
          "618:     parser: Any, pad1: bytes, pad2: bytes, hdr: bytes",
          "619: ) -> None:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "625: @pytest.fixture",
          "626: def xfail_c_parser_empty_header(request) -> None:",
          "627:     if not all(",
          "628:         (request.getfixturevalue(name) == b\"\") for name in (\"pad1\", \"pad2\", \"hdr\")",
          "629:     ):",
          "630:         return",
          "631:     if isinstance(request.getfixturevalue(\"parser\"), HttpRequestParserPy):",
          "632:         return",
          "633:     request.node.add_marker(",
          "634:         pytest.mark.xfail(",
          "635:             reason=\"Regression test for Py parser. May match C behaviour later.\",",
          "636:         )",
          "637:     )",
          "643: @pytest.mark.usefixtures(\"xfail_c_parser_empty_header\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "622:     if pad1 == pad2 == b\"\" and hdr != b\"\":",
          "623:         # one entry in param matrix is correct: non-empty name, not padded",
          "624:         expectation = nullcontext()",
          "628:     with expectation:",
          "629:         parser.feed_data(text)",
          "632: def test_empty_header_name(parser: Any) -> None:",
          "634:         pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
          "635:     text = b\"GET /test HTTP/1.1\\r\\n\" b\":test\\r\\n\\r\\n\"",
          "636:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "",
          "[Removed Lines]",
          "625:     if pad1 == pad2 == hdr == b\"\":",
          "626:         if not isinstance(response, HttpResponseParserPy):",
          "627:             pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
          "633:     if not isinstance(response, HttpResponseParserPy):",
          "",
          "[Added Lines]",
          "657:     if not isinstance(parser, HttpRequestParserPy):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "808:     assert tail == b\"some raw data\"",
          "811: def test_http_request_parser_utf8_request_line(parser: Any) -> None:",
          "814:     messages, upgrade, tail = parser.feed_data(",
          "815:         # note the truncated unicode sequence",
          "816:         b\"GET /P\\xc3\\xbcnktchen\\xa0\\xef\\xb7 HTTP/1.1\\r\\n\" +",
          "",
          "[Removed Lines]",
          "812:     if not isinstance(response, HttpResponseParserPy):",
          "813:         pytest.xfail(\"Regression test for Py parser. May match C behaviour later.\")",
          "",
          "[Added Lines]",
          "835: @pytest.fixture",
          "836: def xfail_c_parser_url(request) -> None:",
          "837:     if isinstance(request.getfixturevalue(\"parser\"), HttpRequestParserPy):",
          "838:         return",
          "839:     request.node.add_marker(",
          "840:         pytest.mark.xfail(",
          "841:             reason=\"Regression test for Py parser. May match C behaviour later.\",",
          "842:             raises=http_exceptions.InvalidURLError,",
          "843:         )",
          "844:     )",
          "847: @pytest.mark.usefixtures(\"xfail_c_parser_url\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "830:     assert msg.compression is None",
          "831:     assert not msg.upgrade",
          "832:     assert not msg.chunked",
          "836: def test_http_request_parser_utf8(parser: Any) -> None:",
          "",
          "[Removed Lines]",
          "833:     assert msg.url.path == URL(\"/P%C3%BCnktchen\\udca0\\udcef\\udcb7\").path",
          "",
          "[Added Lines]",
          "868:     # python HTTP parser depends on Cython and CPython URL to match",
          "869:     # .. but yarl.URL(\"/abs\") is not equal to URL.build(path=\"/abs\"), see #6409",
          "870:     assert msg.url == URL.build(path=\"/P\u00fcnktchen\\udca0\\udcef\\udcb7\", encoded=True)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb5be1bb10f312e6bf942ce5f6b5afdd50090a69",
      "candidate_info": {
        "commit_hash": "bb5be1bb10f312e6bf942ce5f6b5afdd50090a69",
        "repo": "aio-libs/aiohttp",
        "commit_url": "https://github.com/aio-libs/aiohttp/commit/bb5be1bb10f312e6bf942ce5f6b5afdd50090a69",
        "files": [
          "aiohttp/helpers.py",
          "aiohttp/http_exceptions.py",
          "aiohttp/multipart.py",
          "requirements/lint.in",
          "requirements/lint.txt",
          "tests/test_flowcontrol_streams.py",
          "tests/test_formdata.py",
          "tests/test_helpers.py",
          "tests/test_http_exceptions.py",
          "tests/test_http_parser.py",
          "tests/test_http_writer.py",
          "tests/test_multipart.py",
          "tests/test_proxy.py",
          "tests/test_proxy_functional.py"
        ],
        "message": "Test typing round 3 (#8701)",
        "before_after_code_files": [
          "aiohttp/helpers.py||aiohttp/helpers.py",
          "aiohttp/http_exceptions.py||aiohttp/http_exceptions.py",
          "aiohttp/multipart.py||aiohttp/multipart.py",
          "requirements/lint.in||requirements/lint.in",
          "tests/test_flowcontrol_streams.py||tests/test_flowcontrol_streams.py",
          "tests/test_formdata.py||tests/test_formdata.py",
          "tests/test_helpers.py||tests/test_helpers.py",
          "tests/test_http_exceptions.py||tests/test_http_exceptions.py",
          "tests/test_http_parser.py||tests/test_http_parser.py",
          "tests/test_http_writer.py||tests/test_http_writer.py",
          "tests/test_multipart.py||tests/test_multipart.py",
          "tests/test_proxy.py||tests/test_proxy.py",
          "tests/test_proxy_functional.py||tests/test_proxy_functional.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/test_http_parser.py||tests/test_http_parser.py"
          ],
          "candidate": [
            "tests/test_http_parser.py||tests/test_http_parser.py"
          ]
        }
      },
      "candidate_diff": {
        "aiohttp/helpers.py||aiohttp/helpers.py": [
          "File: aiohttp/helpers.py -> aiohttp/helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "644:     def close(self) -> None:",
          "645:         self._callbacks.clear()",
          "648:         timeout = self._timeout",
          "649:         if timeout is not None and timeout > 0:",
          "650:             when = self._loop.time() + timeout",
          "",
          "[Removed Lines]",
          "647:     def start(self) -> Optional[asyncio.Handle]:",
          "",
          "[Added Lines]",
          "647:     def start(self) -> Optional[asyncio.TimerHandle]:",
          "",
          "---------------"
        ],
        "aiohttp/http_exceptions.py||aiohttp/http_exceptions.py": [
          "File: aiohttp/http_exceptions.py -> aiohttp/http_exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: class BadStatusLine(BadHttpMessage):",
          "94:     def __init__(self, line: str = \"\", error: Optional[str] = None) -> None:",
          "97:         super().__init__(error or f\"Bad status line {line!r}\")",
          "98:         self.args = (line,)",
          "99:         self.line = line",
          "",
          "[Removed Lines]",
          "95:         if not isinstance(line, str):",
          "96:             line = repr(line)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "aiohttp/multipart.py||aiohttp/multipart.py": [
          "File: aiohttp/multipart.py -> aiohttp/multipart.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import binascii",
          "3: import json",
          "4: import re",
          "5: import uuid",
          "6: import warnings",
          "7: import zlib",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import sys",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: )",
          "49: from .streams import StreamReader",
          "51: __all__ = (",
          "52:     \"MultipartReader\",",
          "53:     \"MultipartWriter\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: if sys.version_info >= (3, 11):",
          "53:     from typing import Self",
          "54: else:",
          "55:     from typing import TypeVar",
          "57:     Self = TypeVar(\"Self\", bound=\"BodyPartReader\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280:         self._content_eof = 0",
          "281:         self._cache: Dict[str, Any] = {}",
          "286:     async def __anext__(self) -> bytes:",
          "287:         part = await self.next()",
          "",
          "[Removed Lines]",
          "283:     def __aiter__(self) -> AsyncIterator[\"BodyPartReader\"]:",
          "284:         return self  # type: ignore[return-value]",
          "",
          "[Added Lines]",
          "291:     def __aiter__(self) -> Self:",
          "292:         return self",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "581:     response_wrapper_cls = MultipartResponseWrapper",
          "582:     #: Multipart reader class, used to handle multipart/* body parts.",
          "583:     #: None points to type(self)",
          "585:     #: Body part reader class for non multipart/* content types.",
          "586:     part_reader_cls = BodyPartReader",
          "",
          "[Removed Lines]",
          "584:     multipart_reader_cls = None",
          "",
          "[Added Lines]",
          "592:     multipart_reader_cls: Optional[Type[\"MultipartReader\"]] = None",
          "",
          "---------------"
        ],
        "requirements/lint.in||requirements/lint.in": [
          "File: requirements/lint.in -> requirements/lint.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: freezegun",
          "4: mypy; implementation_name == \"cpython\"",
          "5: pre-commit",
          "6: pytest",
          "7: pytest-mock",
          "8: python-on-whales",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: proxy.py",
          "",
          "---------------"
        ],
        "tests/test_flowcontrol_streams.py||tests/test_flowcontrol_streams.py": [
          "File: tests/test_flowcontrol_streams.py -> tests/test_flowcontrol_streams.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from unittest import mock",
          "5: import pytest",
          "7: from aiohttp import streams",
          "10: @pytest.fixture",
          "15: @pytest.fixture",
          "22: @pytest.fixture",
          "29: class TestFlowControlStreamReader:",
          "31:         stream.feed_data(b\"da\")",
          "32:         res = await stream.read(1)",
          "33:         assert res == b\"d\"",
          "37:         stream.feed_data(b\"test\")",
          "38:         stream._protocol._reading_paused = True",
          "40:         res = await stream.read(1)",
          "41:         assert res == b\"t\"",
          "45:         stream.feed_data(b\"d\\n\")",
          "46:         res = await stream.readline()",
          "47:         assert res == b\"d\\n\"",
          "51:         stream._protocol._reading_paused = True",
          "52:         stream.feed_data(b\"d\\n\")",
          "53:         res = await stream.readline()",
          "54:         assert res == b\"d\\n\"",
          "58:         stream.feed_data(b\"data\")",
          "59:         res = await stream.readany()",
          "60:         assert res == b\"data\"",
          "64:         stream._protocol._reading_paused = True",
          "65:         stream.feed_data(b\"data\")",
          "66:         res = await stream.readany()",
          "67:         assert res == b\"data\"",
          "71:         stream.feed_data(b\"data\")",
          "72:         res, end_of_http_chunk = await stream.readchunk()",
          "73:         assert res == b\"data\"",
          "74:         assert not end_of_http_chunk",
          "78:         stream._protocol._reading_paused = True",
          "79:         stream.feed_data(b\"data\")",
          "80:         res, end_of_http_chunk = await stream.readchunk()",
          "81:         assert res == b\"data\"",
          "82:         assert not end_of_http_chunk",
          "86:         stream.feed_data(b\"data\")",
          "87:         res = await stream.readexactly(3)",
          "88:         assert res == b\"dat\"",
          "92:         stream._protocol._reading_paused = False",
          "93:         stream.feed_data(b\"datadata\")",
          "97:         stream._protocol._reading_paused = True",
          "98:         stream.feed_data(b\"data1\")",
          "99:         stream.feed_data(b\"data2\")",
          "100:         stream.feed_data(b\"data3\")",
          "101:         res = await stream.read(5)",
          "102:         assert res == b\"data1\"",
          "105:         res = stream.read_nowait(5)",
          "106:         assert res == b\"data2\"",
          "109:         res = stream.read_nowait(5)",
          "110:         assert res == b\"data3\"",
          "113:         stream._protocol._reading_paused = False",
          "114:         res = stream.read_nowait(5)",
          "115:         assert res == b\"\"",
          "119: class TestFlowControlDataQueue:",
          "121:         buffer._protocol._reading_paused = False",
          "122:         buffer.feed_data(\"x\" * 100)",
          "127:         buffer.feed_data(\"x\" * 100)",
          "129:         buffer._protocol._reading_paused = True",
          "130:         await buffer.read()",
          "",
          "[Removed Lines]",
          "1: # type: ignore",
          "2: from typing import Any",
          "11: def protocol():",
          "12:     return mock.Mock(_reading_paused=False)",
          "16: def stream(loop: Any, protocol: Any):",
          "17:     out = streams.StreamReader(protocol, limit=1, loop=loop)",
          "18:     out._allow_pause = True",
          "19:     return out",
          "23: def buffer(loop: Any, protocol: Any):",
          "24:     out = streams.FlowControlDataQueue(protocol, limit=1, loop=loop)",
          "25:     out._allow_pause = True",
          "26:     return out",
          "30:     async def test_read(self, stream: Any) -> None:",
          "34:         assert not stream._protocol.resume_reading.called",
          "36:     async def test_read_resume_paused(self, stream: Any) -> None:",
          "42:         assert stream._protocol.pause_reading.called",
          "44:     async def test_readline(self, stream: Any) -> None:",
          "48:         assert not stream._protocol.resume_reading.called",
          "50:     async def test_readline_resume_paused(self, stream: Any) -> None:",
          "55:         assert stream._protocol.resume_reading.called",
          "57:     async def test_readany(self, stream: Any) -> None:",
          "61:         assert not stream._protocol.resume_reading.called",
          "63:     async def test_readany_resume_paused(self, stream: Any) -> None:",
          "68:         assert stream._protocol.resume_reading.called",
          "70:     async def test_readchunk(self, stream: Any) -> None:",
          "75:         assert not stream._protocol.resume_reading.called",
          "77:     async def test_readchunk_resume_paused(self, stream: Any) -> None:",
          "83:         assert stream._protocol.resume_reading.called",
          "85:     async def test_readexactly(self, stream: Any) -> None:",
          "89:         assert not stream._protocol.resume_reading.called",
          "91:     async def test_feed_data(self, stream: Any) -> None:",
          "94:         assert stream._protocol.pause_reading.called",
          "96:     async def test_read_nowait(self, stream: Any) -> None:",
          "103:         assert stream._protocol.resume_reading.call_count == 0",
          "107:         assert stream._protocol.resume_reading.call_count == 0",
          "111:         assert stream._protocol.resume_reading.call_count == 1",
          "116:         assert stream._protocol.resume_reading.call_count == 1",
          "120:     def test_feed_pause(self, buffer: Any) -> None:",
          "124:         assert buffer._protocol.pause_reading.called",
          "126:     async def test_resume_on_read(self, buffer: Any) -> None:",
          "131:         assert buffer._protocol.resume_reading.called",
          "",
          "[Added Lines]",
          "1: import asyncio",
          "7: from aiohttp.base_protocol import BaseProtocol",
          "11: def protocol() -> BaseProtocol:",
          "12:     return mock.create_autospec(BaseProtocol, spec_set=True, instance=True, _reading_paused=False)  # type: ignore[no-any-return]",
          "16: def stream(",
          "17:     loop: asyncio.AbstractEventLoop, protocol: BaseProtocol",
          "18: ) -> streams.StreamReader:",
          "19:     return streams.StreamReader(protocol, limit=1, loop=loop)",
          "23: def buffer(",
          "24:     loop: asyncio.AbstractEventLoop, protocol: BaseProtocol",
          "25: ) -> streams.FlowControlDataQueue[str]:",
          "26:     return streams.FlowControlDataQueue[str](protocol, limit=1, loop=loop)",
          "30:     async def test_read(self, stream: streams.StreamReader) -> None:",
          "34:         assert not stream._protocol.resume_reading.called  # type: ignore[attr-defined]",
          "36:     async def test_read_resume_paused(self, stream: streams.StreamReader) -> None:",
          "42:         assert stream._protocol.pause_reading.called  # type: ignore[attr-defined]",
          "44:     async def test_readline(self, stream: streams.StreamReader) -> None:",
          "48:         assert not stream._protocol.resume_reading.called  # type: ignore[attr-defined]",
          "50:     async def test_readline_resume_paused(self, stream: streams.StreamReader) -> None:",
          "55:         assert stream._protocol.resume_reading.called  # type: ignore[attr-defined]",
          "57:     async def test_readany(self, stream: streams.StreamReader) -> None:",
          "61:         assert not stream._protocol.resume_reading.called  # type: ignore[attr-defined]",
          "63:     async def test_readany_resume_paused(self, stream: streams.StreamReader) -> None:",
          "68:         assert stream._protocol.resume_reading.called  # type: ignore[attr-defined]",
          "70:     async def test_readchunk(self, stream: streams.StreamReader) -> None:",
          "75:         assert not stream._protocol.resume_reading.called  # type: ignore[attr-defined]",
          "77:     async def test_readchunk_resume_paused(self, stream: streams.StreamReader) -> None:",
          "83:         assert stream._protocol.resume_reading.called  # type: ignore[attr-defined]",
          "85:     async def test_readexactly(self, stream: streams.StreamReader) -> None:",
          "89:         assert not stream._protocol.resume_reading.called  # type: ignore[attr-defined]",
          "91:     async def test_feed_data(self, stream: streams.StreamReader) -> None:",
          "94:         assert stream._protocol.pause_reading.called  # type: ignore[attr-defined]",
          "96:     async def test_read_nowait(self, stream: streams.StreamReader) -> None:",
          "103:         assert stream._protocol.resume_reading.call_count == 0  # type: ignore[attr-defined]",
          "107:         assert stream._protocol.resume_reading.call_count == 0  # type: ignore[attr-defined]",
          "111:         assert stream._protocol.resume_reading.call_count == 1  # type: ignore[attr-defined]",
          "116:         assert stream._protocol.resume_reading.call_count == 1  # type: ignore[attr-defined]",
          "120:     def test_feed_pause(self, buffer: streams.FlowControlDataQueue[str]) -> None:",
          "124:         assert buffer._protocol.pause_reading.called  # type: ignore[attr-defined]",
          "126:     async def test_resume_on_read(",
          "127:         self, buffer: streams.FlowControlDataQueue[str]",
          "128:     ) -> None:",
          "133:         assert buffer._protocol.resume_reading.called  # type: ignore[attr-defined]",
          "",
          "---------------"
        ],
        "tests/test_formdata.py||tests/test_formdata.py": [
          "File: tests/test_formdata.py -> tests/test_formdata.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from unittest import mock",
          "5: import pytest",
          "7: from aiohttp import FormData, web",
          "10: @pytest.fixture",
          "12:     return bytearray()",
          "15: @pytest.fixture",
          "20:         buf.extend(chunk)",
          "22:     writer.write.side_effect = write",
          "27:     form = FormData()",
          "28:     assert not form.is_multipart",
          "",
          "[Removed Lines]",
          "1: # type: ignore",
          "2: from typing import Any",
          "11: def buf():",
          "16: def writer(buf: Any):",
          "17:     writer = mock.Mock()",
          "19:     async def write(chunk):",
          "23:     return writer",
          "26: def test_formdata_multipart(buf: Any, writer: Any) -> None:",
          "",
          "[Added Lines]",
          "6: from aiohttp.http_writer import StreamWriter",
          "7: from aiohttp.pytest_plugin import AiohttpClient",
          "11: def buf() -> bytearray:",
          "16: def writer(buf: bytearray) -> StreamWriter:",
          "17:     writer = mock.create_autospec(StreamWriter, spec_set=True)",
          "19:     async def write(chunk: bytes) -> None:",
          "23:     return writer  # type: ignore[no-any-return]",
          "26: def test_formdata_multipart(buf: bytearray) -> None:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     invalid_vals = [0, 0.1, {}, [], b\"foo\"]",
          "54:     for invalid_val in invalid_vals:",
          "55:         with pytest.raises(TypeError):",
          "59: def test_invalid_formdata_filename() -> None:",
          "",
          "[Removed Lines]",
          "56:             form.add_field(\"foo\", \"bar\", content_type=invalid_val)",
          "",
          "[Added Lines]",
          "56:             form.add_field(\"foo\", \"bar\", content_type=invalid_val)  # type: ignore[arg-type]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     invalid_vals = [0, 0.1, {}, [], b\"foo\"]",
          "62:     for invalid_val in invalid_vals:",
          "63:         with pytest.raises(TypeError):",
          "76:     form = FormData(charset=\"ascii\")",
          "77:     form.add_field(\"email 1\", \"xxx@x.co\", content_type=\"multipart/form-data\")",
          "78:     payload = form()",
          "",
          "[Removed Lines]",
          "64:             form.add_field(\"foo\", \"bar\", filename=invalid_val)",
          "67: def test_invalid_formdata_content_transfer_encoding() -> None:",
          "68:     form = FormData()",
          "69:     invalid_vals = [0, 0.1, {}, [], b\"foo\"]",
          "70:     for invalid_val in invalid_vals:",
          "71:         with pytest.raises(TypeError):",
          "72:             form.add_field(\"foo\", \"bar\", content_transfer_encoding=invalid_val)",
          "75: async def test_formdata_field_name_is_quoted(buf: Any, writer: Any) -> None:",
          "",
          "[Added Lines]",
          "64:             form.add_field(\"foo\", \"bar\", filename=invalid_val)  # type: ignore[arg-type]",
          "67: async def test_formdata_field_name_is_quoted(",
          "68:     buf: bytearray, writer: StreamWriter",
          "69: ) -> None:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:     assert b'name=\"email\\\\ 1\"' in buf",
          "84:     form = FormData(quote_fields=False, charset=\"ascii\")",
          "85:     form.add_field(\"email 1\", \"xxx@x.co\", content_type=\"multipart/form-data\")",
          "86:     payload = form()",
          "",
          "[Removed Lines]",
          "83: async def test_formdata_field_name_is_not_quoted(buf: Any, writer: Any) -> None:",
          "",
          "[Added Lines]",
          "77: async def test_formdata_field_name_is_not_quoted(",
          "78:     buf: bytearray, writer: StreamWriter",
          "79: ) -> None:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "88:     assert b'name=\"email 1\"' in buf",
          "93:         return web.Response()",
          "95:     app = web.Application()",
          "",
          "[Removed Lines]",
          "91: async def test_mark_formdata_as_processed(aiohttp_client: Any) -> None:",
          "92:     async def handler(request):",
          "",
          "[Added Lines]",
          "87: async def test_mark_formdata_as_processed(aiohttp_client: AiohttpClient) -> None:",
          "88:     async def handler(request: web.Request) -> web.Response:",
          "",
          "---------------"
        ],
        "tests/test_helpers.py||tests/test_helpers.py": [
          "File: tests/test_helpers.py -> tests/test_helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import asyncio",
          "3: import base64",
          "4: import datetime",
          "",
          "[Removed Lines]",
          "1: # type: ignore",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: import weakref",
          "9: from math import ceil, modf",
          "10: from pathlib import Path",
          "11: from unittest import mock",
          "14: import pytest",
          "17: from yarl import URL",
          "20: from aiohttp.helpers import (",
          "21:     is_expected_content_type,",
          "22:     method_must_be_empty_body,",
          "",
          "[Removed Lines]",
          "12: from urllib.request import getproxies_environment",
          "15: from multidict import CIMultiDict, MultiDict",
          "16: from re_assert import Matches",
          "19: from aiohttp import helpers",
          "",
          "[Added Lines]",
          "10: from typing import Any, Dict, Iterator, Optional, Type, Union",
          "12: from urllib.request import getproxies_environment  # type: ignore[attr-defined]",
          "15: from multidict import CIMultiDict, MultiDict, MultiDictProxy",
          "18: from aiohttp import helpers, web",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34: @pytest.mark.parametrize(",
          "35:     \"mimetype, expected\",",
          "36:     [",
          "40:         (",
          "41:             \"application/json;  charset=utf-8\",",
          "42:             helpers.MimeType(",
          "44:             ),",
          "45:         ),",
          "46:         (",
          "47:             \"\"\"application/json; charset=utf-8;\"\"\",",
          "48:             helpers.MimeType(",
          "50:             ),",
          "51:         ),",
          "52:         (",
          "53:             'ApPlIcAtIoN/JSON;ChaRseT=\"UTF-8\"',",
          "54:             helpers.MimeType(",
          "56:             ),",
          "57:         ),",
          "58:         (",
          "59:             \"application/rss+xml\",",
          "61:         ),",
          "62:         (",
          "63:             \"text/plain;base64\",",
          "65:         ),",
          "66:     ],",
          "67: )",
          "69:     result = helpers.parse_mimetype(mimetype)",
          "71:     assert isinstance(result, helpers.MimeType)",
          "",
          "[Removed Lines]",
          "37:         (\"\", helpers.MimeType(\"\", \"\", \"\", MultiDict())),",
          "38:         (\"*\", helpers.MimeType(\"*\", \"*\", \"\", MultiDict())),",
          "39:         (\"application/json\", helpers.MimeType(\"application\", \"json\", \"\", MultiDict())),",
          "43:                 \"application\", \"json\", \"\", MultiDict({\"charset\": \"utf-8\"})",
          "49:                 \"application\", \"json\", \"\", MultiDict({\"charset\": \"utf-8\"})",
          "55:                 \"application\", \"json\", \"\", MultiDict({\"charset\": \"UTF-8\"})",
          "60:             helpers.MimeType(\"application\", \"rss\", \"xml\", MultiDict()),",
          "64:             helpers.MimeType(\"text\", \"plain\", \"\", MultiDict({\"base64\": \"\"})),",
          "68: def test_parse_mimetype(mimetype, expected) -> None:",
          "",
          "[Added Lines]",
          "36:         (\"\", helpers.MimeType(\"\", \"\", \"\", MultiDictProxy(MultiDict()))),",
          "37:         (\"*\", helpers.MimeType(\"*\", \"*\", \"\", MultiDictProxy(MultiDict()))),",
          "38:         (",
          "39:             \"application/json\",",
          "40:             helpers.MimeType(\"application\", \"json\", \"\", MultiDictProxy(MultiDict())),",
          "41:         ),",
          "45:                 \"application\",",
          "46:                 \"json\",",
          "47:                 \"\",",
          "48:                 MultiDictProxy(MultiDict({\"charset\": \"utf-8\"})),",
          "54:                 \"application\",",
          "55:                 \"json\",",
          "56:                 \"\",",
          "57:                 MultiDictProxy(MultiDict({\"charset\": \"utf-8\"})),",
          "63:                 \"application\",",
          "64:                 \"json\",",
          "65:                 \"\",",
          "66:                 MultiDictProxy(MultiDict({\"charset\": \"UTF-8\"})),",
          "71:             helpers.MimeType(\"application\", \"rss\", \"xml\", MultiDictProxy(MultiDict())),",
          "75:             helpers.MimeType(",
          "76:                 \"text\", \"plain\", \"\", MultiDictProxy(MultiDict({\"base64\": \"\"}))",
          "77:             ),",
          "81: def test_parse_mimetype(mimetype: str, expected: helpers.MimeType) -> None:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75: # ------------------- guess_filename ----------------------------------",
          "79:     file_path = tmp_path / \"test_guess_filename\"",
          "80:     with file_path.open(\"w+b\") as fp:",
          "81:         assert helpers.guess_filename(fp, \"no-throw\") is not None",
          "85:     file_path = tmp_path / \"test_guess_filename\"",
          "86:     assert helpers.guess_filename(file_path, \"no-throw\") is not None",
          "",
          "[Removed Lines]",
          "78: def test_guess_filename_with_file_object(tmp_path) -> None:",
          "84: def test_guess_filename_with_path(tmp_path) -> None:",
          "",
          "[Added Lines]",
          "91: def test_guess_filename_with_file_object(tmp_path: Path) -> None:",
          "97: def test_guess_filename_with_path(tmp_path: Path) -> None:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "96: def test_basic_auth1() -> None:",
          "97:     # missing password here",
          "98:     with pytest.raises(ValueError):",
          "102: def test_basic_auth2() -> None:",
          "103:     with pytest.raises(ValueError):",
          "107: def test_basic_with_auth_colon_in_login() -> None:",
          "",
          "[Removed Lines]",
          "99:         helpers.BasicAuth(None)",
          "104:         helpers.BasicAuth(\"nkim\", None)",
          "",
          "[Added Lines]",
          "112:         helpers.BasicAuth(None)  # type: ignore[arg-type]",
          "117:         helpers.BasicAuth(\"nkim\", None)  # type: ignore[arg-type]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "129:         \"basic bmtpbTpwd2Q=\",",
          "130:     ),",
          "131: )",
          "133:     auth = helpers.BasicAuth.decode(header)",
          "134:     assert auth.login == \"nkim\"",
          "135:     assert auth.password == \"pwd\"",
          "",
          "[Removed Lines]",
          "132: def test_basic_auth_decode(header) -> None:",
          "",
          "[Added Lines]",
          "145: def test_basic_auth_decode(header: str) -> None:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "153: @pytest.mark.parametrize(\"header\", (\"Basic ???\", \"Basic   \"))",
          "155:     with pytest.raises(ValueError, match=\"Invalid base64 encoding.\"):",
          "156:         helpers.BasicAuth.decode(header)",
          "",
          "[Removed Lines]",
          "154: def test_basic_auth_decode_illegal_chars_base64(header) -> None:",
          "",
          "[Added Lines]",
          "167: def test_basic_auth_decode_illegal_chars_base64(header: str) -> None:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "180:         ),",
          "181:     ),",
          "182: )",
          "184:     header = f\"Basic {base64.b64encode(credentials.encode()).decode()}\"",
          "185:     assert helpers.BasicAuth.decode(header) == expected_auth",
          "",
          "[Removed Lines]",
          "183: def test_basic_auth_decode_blank_username(credentials, expected_auth) -> None:",
          "",
          "[Added Lines]",
          "196: def test_basic_auth_decode_blank_username(",
          "197:     credentials: str, expected_auth: helpers.BasicAuth",
          "198: ) -> None:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "188: def test_basic_auth_from_url() -> None:",
          "189:     url = URL(\"http://user:pass@example.com\")",
          "190:     auth = helpers.BasicAuth.from_url(url)",
          "191:     assert auth.login == \"user\"",
          "192:     assert auth.password == \"pass\"",
          "195: def test_basic_auth_from_not_url() -> None:",
          "196:     with pytest.raises(TypeError):",
          "200: class ReifyMixin:",
          "203:     def test_reify(self) -> None:",
          "204:         class A:",
          "210:                 return 1",
          "212:         a = A()",
          "",
          "[Removed Lines]",
          "197:         helpers.BasicAuth.from_url(\"http://user:pass@example.com\")",
          "201:     reify = NotImplemented",
          "205:             def __init__(self):",
          "206:                 self._cache = {}",
          "208:             @self.reify",
          "209:             def prop(self):",
          "",
          "[Added Lines]",
          "206:     assert auth is not None",
          "213:         helpers.BasicAuth.from_url(\"http://user:pass@example.com\")  # type: ignore[arg-type]",
          "217:     reify: Type[\"helpers.reify[Any]\"]",
          "221:             def __init__(self) -> None:",
          "222:                 self._cache: Dict[str, str] = {}",
          "224:             @self.reify  # type: ignore[misc]",
          "225:             def prop(self) -> int:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "215:     def test_reify_class(self) -> None:",
          "216:         class A:",
          "222:                 \"\"\"Docstring.\"\"\"",
          "223:                 return 1",
          "228:     def test_reify_assignment(self) -> None:",
          "229:         class A:",
          "235:                 return 1",
          "237:         a = A()",
          "",
          "[Removed Lines]",
          "217:             def __init__(self):",
          "218:                 self._cache = {}",
          "220:             @self.reify",
          "221:             def prop(self):",
          "225:         assert isinstance(A.prop, self.reify)",
          "226:         assert \"Docstring.\" == A.prop.__doc__",
          "230:             def __init__(self):",
          "231:                 self._cache = {}",
          "233:             @self.reify",
          "234:             def prop(self):",
          "",
          "[Added Lines]",
          "233:             def __init__(self) -> None:",
          "234:                 self._cache: Dict[str, str] = {}",
          "236:             @self.reify  # type: ignore[misc]",
          "237:             def prop(self) -> int:",
          "241:         assert isinstance(A.prop, self.reify)  # type: ignore[arg-type]",
          "242:         assert \"Docstring.\" == A.prop.__doc__  # type: ignore[arg-type]",
          "246:             def __init__(self) -> None:",
          "247:                 self._cache: Dict[str, str] = {}",
          "249:             @self.reify  # type: ignore[misc]",
          "250:             def prop(self) -> int:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "247: if not helpers.NO_EXTENSIONS and not IS_PYPY and hasattr(helpers, \"reify_c\"):",
          "249:     class TestCReify(ReifyMixin):",
          "253: # ----------------------------------- is_ip_address() ----------------------",
          "",
          "[Removed Lines]",
          "250:         reify = helpers.reify_c",
          "",
          "[Added Lines]",
          "266:         reify = helpers.reify_c  # type: ignore[attr-defined,assignment]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "331: def test_is_ip_address_invalid_type() -> None:",
          "332:     with pytest.raises(TypeError):",
          "335:     with pytest.raises(TypeError):",
          "339: # ----------------------------------- TimeoutHandle -------------------",
          "343:     handle = helpers.TimeoutHandle(loop, 10.2)",
          "344:     cb = mock.Mock()",
          "345:     handle.register(cb)",
          "",
          "[Removed Lines]",
          "333:         helpers.is_ip_address(123)",
          "336:         helpers.is_ip_address(object())",
          "342: def test_timeout_handle(loop) -> None:",
          "",
          "[Added Lines]",
          "349:         helpers.is_ip_address(123)  # type: ignore[arg-type]",
          "352:         helpers.is_ip_address(object())  # type: ignore[arg-type]",
          "358: def test_timeout_handle(loop: asyncio.AbstractEventLoop) -> None:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "348:     assert not handle._callbacks",
          "352:     timeout = 0.1",
          "353:     timer = loop.time() + timeout",
          "355:     handle = helpers.TimeoutHandle(loop, timeout)",
          "357:     handle.close()",
          "359:     assert isinstance(when, float)",
          "360:     assert when - timer == pytest.approx(0, abs=0.001)",
          "364:     timeout = 0.1",
          "365:     timer = loop.time() + timeout",
          "367:     handle = helpers.TimeoutHandle(loop, timeout, 0.01)",
          "369:     handle.close()",
          "371:     assert isinstance(when, int)",
          "372:     assert when == ceil(timer)",
          "376:     handle = helpers.TimeoutHandle(loop, 10.2)",
          "377:     cb = mock.Mock()",
          "378:     handle.register(cb)",
          "",
          "[Removed Lines]",
          "351: def test_when_timeout_smaller_second(loop) -> None:",
          "356:     when = handle.start()._when",
          "363: def test_when_timeout_smaller_second_with_low_threshold(loop) -> None:",
          "368:     when = handle.start()._when",
          "375: def test_timeout_handle_cb_exc(loop) -> None:",
          "",
          "[Added Lines]",
          "367: def test_when_timeout_smaller_second(loop: asyncio.AbstractEventLoop) -> None:",
          "372:     assert handle is not None",
          "373:     start_handle = handle.start()",
          "374:     assert start_handle is not None",
          "375:     when = start_handle.when()",
          "382: def test_when_timeout_smaller_second_with_low_threshold(",
          "383:     loop: asyncio.AbstractEventLoop,",
          "384: ) -> None:",
          "389:     assert handle is not None",
          "390:     start_handle = handle.start()",
          "391:     assert start_handle is not None",
          "392:     when = start_handle.when()",
          "399: def test_timeout_handle_cb_exc(loop: asyncio.AbstractEventLoop) -> None:",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "396:         assert not m_asyncio.current_task.return_value.cancel.called",
          "400:     with pytest.raises(RuntimeError):",
          "401:         with helpers.TimerContext(loop):",
          "402:             pass",
          "406:     cb = mock.Mock()",
          "407:     helpers.weakref_handle(cb, \"test\", 0.01, loop)",
          "408:     await asyncio.sleep(0.1)",
          "409:     assert cb.test.called",
          "413:     cb = mock.Mock()",
          "414:     loop = mock.Mock()",
          "415:     loop.time.return_value = 10",
          "",
          "[Removed Lines]",
          "399: def test_timer_context_no_task(loop) -> None:",
          "405: async def test_weakref_handle(loop) -> None:",
          "412: async def test_weakref_handle_with_small_threshold(loop) -> None:",
          "",
          "[Added Lines]",
          "423: def test_timer_context_no_task(loop: asyncio.AbstractEventLoop) -> None:",
          "429: async def test_weakref_handle(loop: asyncio.AbstractEventLoop) -> None:",
          "436: async def test_weakref_handle_with_small_threshold(",
          "437:     loop: asyncio.AbstractEventLoop,",
          "438: ) -> None:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "419:     )",
          "423:     cb = mock.Mock()",
          "424:     helpers.weakref_handle(cb, \"test\", 0.01, loop)",
          "425:     del cb",
          "",
          "[Removed Lines]",
          "422: async def test_weakref_handle_weak(loop) -> None:",
          "",
          "[Added Lines]",
          "448: async def test_weakref_handle_weak(loop: asyncio.AbstractEventLoop) -> None:",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "438:     loop.call_at.assert_called_with(21.0, cb)",
          "442:     async with helpers.ceil_timeout(7.5) as cm:",
          "443:         if sys.version_info >= (3, 11):",
          "445:         else:",
          "446:             frac, integer = modf(cm.deadline)",
          "447:         assert frac == 0",
          "451:     async with helpers.ceil_timeout(1.1) as cm:",
          "452:         if sys.version_info >= (3, 11):",
          "454:         else:",
          "455:             frac, integer = modf(cm.deadline)",
          "456:         # a chance for exact integer with zero fraction is negligible",
          "457:         assert frac != 0",
          "",
          "[Removed Lines]",
          "441: async def test_ceil_timeout_round(loop) -> None:",
          "444:             frac, integer = modf(cm.when())",
          "450: async def test_ceil_timeout_small(loop) -> None:",
          "453:             frac, integer = modf(cm.when())",
          "",
          "[Added Lines]",
          "467: async def test_ceil_timeout_round(loop: asyncio.AbstractEventLoop) -> None:",
          "470:             w = cm.when()",
          "471:             assert w is not None",
          "472:             frac, integer = modf(w)",
          "474:             assert cm.deadline is not None",
          "479: async def test_ceil_timeout_small(loop: asyncio.AbstractEventLoop) -> None:",
          "482:             w = cm.when()",
          "483:             assert w is not None",
          "484:             frac, integer = modf(w)",
          "486:             assert cm.deadline is not None",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "472:     assert not loop.call_at.called",
          "476:     async with helpers.ceil_timeout(None) as cm:",
          "477:         if sys.version_info >= (3, 11):",
          "478:             assert cm.when() is None",
          "",
          "[Removed Lines]",
          "475: async def test_ceil_timeout_none(loop) -> None:",
          "",
          "[Added Lines]",
          "507: async def test_ceil_timeout_none(loop: asyncio.AbstractEventLoop) -> None:",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "480:             assert cm.deadline is None",
          "484:     async with helpers.ceil_timeout(1.5, ceil_threshold=1) as cm:",
          "485:         if sys.version_info >= (3, 11):",
          "487:         else:",
          "488:             frac, integer = modf(cm.deadline)",
          "489:         assert frac == 0",
          "",
          "[Removed Lines]",
          "483: async def test_ceil_timeout_small_with_overriden_threshold(loop) -> None:",
          "486:             frac, integer = modf(cm.when())",
          "",
          "[Added Lines]",
          "515: async def test_ceil_timeout_small_with_overriden_threshold(",
          "516:     loop: asyncio.AbstractEventLoop,",
          "517: ) -> None:",
          "520:             w = cm.when()",
          "521:             assert w is not None",
          "522:             frac, integer = modf(w)",
          "524:             assert cm.deadline is not None",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "511:         ),",
          "512:     ],",
          "513: )",
          "515:     result = helpers.content_disposition_header(",
          "516:         \"attachment\", quote_fields=quote_fields, _charset=_charset, params=params",
          "517:     )",
          "",
          "[Removed Lines]",
          "514: def test_content_disposition(params, quote_fields, _charset, expected) -> None:",
          "",
          "[Added Lines]",
          "551: def test_content_disposition(",
          "552:     params: Dict[str, str], quote_fields: bool, _charset: str, expected: str",
          "553: ) -> None:",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "555:     ids=(\"http\", \"https\", \"ws\", \"wss\"),",
          "556: )",
          "557: @pytest.mark.usefixtures(\"proxy_env_vars\")",
          "559:     url = URL(url_input)",
          "560:     ret = helpers.proxies_from_env()",
          "561:     assert ret.keys() == {expected_scheme}",
          "",
          "[Removed Lines]",
          "558: def test_proxies_from_env(url_input, expected_scheme) -> None:",
          "",
          "[Added Lines]",
          "597: def test_proxies_from_env(url_input: str, expected_scheme: str) -> None:",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "577:     ids=(\"https\", \"wss\"),",
          "578: )",
          "579: @pytest.mark.usefixtures(\"proxy_env_vars\")",
          "581:     url = URL(url_input)",
          "582:     assert helpers.proxies_from_env() == {}",
          "583:     assert len(caplog.records) == 1",
          "",
          "[Removed Lines]",
          "580: def test_proxies_from_env_skipped(caplog, url_input, expected_scheme) -> None:",
          "",
          "[Added Lines]",
          "619: def test_proxies_from_env_skipped(",
          "620:     caplog: pytest.LogCaptureFixture, url_input: str, expected_scheme: str",
          "621: ) -> None:",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "600:     ids=(\"http\",),",
          "601: )",
          "602: @pytest.mark.usefixtures(\"proxy_env_vars\")",
          "604:     url = URL(\"http://user:pass@aiohttp.io/path\")",
          "605:     ret = helpers.proxies_from_env()",
          "606:     assert ret.keys() == {expected_scheme}",
          "607:     assert ret[expected_scheme].proxy == url.with_user(None)",
          "608:     proxy_auth = ret[expected_scheme].proxy_auth",
          "609:     assert proxy_auth.login == \"user\"",
          "610:     assert proxy_auth.password == \"pass\"",
          "611:     assert proxy_auth.encoding == \"latin1\"",
          "",
          "[Removed Lines]",
          "603: def test_proxies_from_env_http_with_auth(url_input, expected_scheme) -> None:",
          "",
          "[Added Lines]",
          "644: def test_proxies_from_env_http_with_auth(url_input: str, expected_scheme: str) -> None:",
          "650:     assert proxy_auth is not None",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "617: @pytest.fixture",
          "619:     for schema in getproxies_environment().keys():",
          "620:         monkeypatch.delenv(f\"{schema}_proxy\", False)",
          "",
          "[Removed Lines]",
          "618: def proxy_env_vars(monkeypatch, request):",
          "",
          "[Added Lines]",
          "660: def proxy_env_vars(",
          "661:     monkeypatch: pytest.MonkeyPatch, request: pytest.FixtureRequest",
          "662: ) -> object:",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "670:     ),",
          "671: )",
          "672: @pytest.mark.usefixtures(\"proxy_env_vars\")",
          "674:     url = URL(url_input)",
          "675:     with pytest.raises(LookupError, match=expected_err_msg):",
          "676:         helpers.get_env_proxy_for_url(url)",
          "",
          "[Removed Lines]",
          "673: def test_get_env_proxy_for_url_negative(url_input, expected_err_msg) -> None:",
          "",
          "[Added Lines]",
          "717: def test_get_env_proxy_for_url_negative(url_input: str, expected_err_msg: str) -> None:",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "693:         \"url_scheme_match_http_proxy_list_multiple\",",
          "694:     ),",
          "695: )",
          "697:     url = URL(url_input)",
          "698:     proxy, proxy_auth = helpers.get_env_proxy_for_url(url)",
          "699:     proxy_list = proxy_env_vars[url.scheme + \"_proxy\"]",
          "",
          "[Removed Lines]",
          "696: def test_get_env_proxy_for_url(proxy_env_vars, url_input) -> None:",
          "",
          "[Added Lines]",
          "740: def test_get_env_proxy_for_url(proxy_env_vars: Dict[str, str], url_input: str) -> None:",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "704: # ------------- set_result / set_exception ----------------------",
          "708:     fut = loop.create_future()",
          "709:     helpers.set_result(fut, 123)",
          "710:     assert 123 == await fut",
          "714:     fut = loop.create_future()",
          "715:     fut.cancel()",
          "716:     helpers.set_result(fut, 123)",
          "",
          "[Removed Lines]",
          "707: async def test_set_result(loop) -> None:",
          "713: async def test_set_result_cancelled(loop) -> None:",
          "",
          "[Added Lines]",
          "751: async def test_set_result(loop: asyncio.AbstractEventLoop) -> None:",
          "757: async def test_set_result_cancelled(loop: asyncio.AbstractEventLoop) -> None:",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "719:         await fut",
          "723:     fut = loop.create_future()",
          "724:     helpers.set_exception(fut, RuntimeError())",
          "725:     with pytest.raises(RuntimeError):",
          "726:         await fut",
          "730:     fut = loop.create_future()",
          "731:     fut.cancel()",
          "732:     helpers.set_exception(fut, RuntimeError())",
          "",
          "[Removed Lines]",
          "722: async def test_set_exception(loop) -> None:",
          "729: async def test_set_exception_cancelled(loop) -> None:",
          "",
          "[Added Lines]",
          "766: async def test_set_exception(loop: asyncio.AbstractEventLoop) -> None:",
          "773: async def test_set_exception_cancelled(loop: asyncio.AbstractEventLoop) -> None:",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "738: # ----------- ChainMapProxy --------------------------",
          "741: class TestChainMapProxy:",
          "742:     def test_inheritance(self) -> None:",
          "743:         with pytest.raises(TypeError):",
          "746:                 pass",
          "748:     def test_getitem(self) -> None:",
          "751:         cp = helpers.ChainMapProxy([d1, d2])",
          "752:         assert cp[\"a\"] == 2",
          "753:         assert cp[\"b\"] == 3",
          "755:     def test_getitem_not_found(self) -> None:",
          "757:         cp = helpers.ChainMapProxy([d])",
          "758:         with pytest.raises(KeyError):",
          "759:             cp[\"b\"]",
          "761:     def test_get(self) -> None:",
          "764:         cp = helpers.ChainMapProxy([d1, d2])",
          "765:         assert cp.get(\"a\") == 2",
          "767:     def test_get_default(self) -> None:",
          "770:         cp = helpers.ChainMapProxy([d1, d2])",
          "771:         assert cp.get(\"c\", 4) == 4",
          "773:     def test_get_non_default(self) -> None:",
          "776:         cp = helpers.ChainMapProxy([d1, d2])",
          "777:         assert cp.get(\"a\", 4) == 2",
          "779:     def test_len(self) -> None:",
          "782:         cp = helpers.ChainMapProxy([d1, d2])",
          "783:         assert len(cp) == 2",
          "785:     def test_iter(self) -> None:",
          "788:         cp = helpers.ChainMapProxy([d1, d2])",
          "789:         assert set(cp) == {\"a\", \"b\"}",
          "791:     def test_contains(self) -> None:",
          "794:         cp = helpers.ChainMapProxy([d1, d2])",
          "795:         assert \"a\" in cp",
          "796:         assert \"b\" in cp",
          "",
          "[Removed Lines]",
          "745:             class A(helpers.ChainMapProxy):",
          "749:         d1 = {\"a\": 2, \"b\": 3}",
          "750:         d2 = {\"a\": 1}",
          "756:         d = {\"a\": 1}",
          "762:         d1 = {\"a\": 2, \"b\": 3}",
          "763:         d2 = {\"a\": 1}",
          "768:         d1 = {\"a\": 2, \"b\": 3}",
          "769:         d2 = {\"a\": 1}",
          "774:         d1 = {\"a\": 2, \"b\": 3}",
          "775:         d2 = {\"a\": 1}",
          "780:         d1 = {\"a\": 2, \"b\": 3}",
          "781:         d2 = {\"a\": 1}",
          "786:         d1 = {\"a\": 2, \"b\": 3}",
          "787:         d2 = {\"a\": 1}",
          "792:         d1 = {\"a\": 2, \"b\": 3}",
          "793:         d2 = {\"a\": 1}",
          "",
          "[Added Lines]",
          "784: AppKeyDict = Dict[Union[str, web.AppKey[object]], object]",
          "791:             class A(helpers.ChainMapProxy):  # type: ignore[misc]",
          "795:         d1: AppKeyDict = {\"a\": 2, \"b\": 3}",
          "796:         d2: AppKeyDict = {\"a\": 1}",
          "802:         d: AppKeyDict = {\"a\": 1}",
          "808:         d1: AppKeyDict = {\"a\": 2, \"b\": 3}",
          "809:         d2: AppKeyDict = {\"a\": 1}",
          "814:         d1: AppKeyDict = {\"a\": 2, \"b\": 3}",
          "815:         d2: AppKeyDict = {\"a\": 1}",
          "820:         d1: AppKeyDict = {\"a\": 2, \"b\": 3}",
          "821:         d2: AppKeyDict = {\"a\": 1}",
          "826:         d1: AppKeyDict = {\"a\": 2, \"b\": 3}",
          "827:         d2: AppKeyDict = {\"a\": 1}",
          "832:         d1: AppKeyDict = {\"a\": 2, \"b\": 3}",
          "833:         d2: AppKeyDict = {\"a\": 1}",
          "838:         d1: AppKeyDict = {\"a\": 2, \"b\": 3}",
          "839:         d2: AppKeyDict = {\"a\": 1}",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "802:         assert not helpers.ChainMapProxy([])",
          "804:     def test_repr(self) -> None:",
          "807:         cp = helpers.ChainMapProxy([d1, d2])",
          "808:         expected = f\"ChainMapProxy({d1!r}, {d2!r})\"",
          "809:         assert expected == repr(cp)",
          "813:     expected_ct = \"application/json\"",
          "814:     response_ct = \"application/json\"",
          "815:     assert is_expected_content_type(",
          "",
          "[Removed Lines]",
          "805:         d1 = {\"a\": 2, \"b\": 3}",
          "806:         d2 = {\"a\": 1}",
          "812: def test_is_expected_content_type_json_match_exact():",
          "",
          "[Added Lines]",
          "851:         d1: AppKeyDict = {\"a\": 2, \"b\": 3}",
          "852:         d2: AppKeyDict = {\"a\": 1}",
          "858: def test_is_expected_content_type_json_match_exact() -> None:",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "817:     )",
          "821:     expected_ct = \"application/json\"",
          "822:     response_ct = \"application/alto-costmap+json\"  # mime-type from rfc7285",
          "823:     assert is_expected_content_type(",
          "",
          "[Removed Lines]",
          "820: def test_is_expected_content_type_json_match_partially():",
          "",
          "[Added Lines]",
          "866: def test_is_expected_content_type_json_match_partially() -> None:",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "825:     )",
          "829:     expected_ct = \"application/json\"",
          "830:     response_ct = \"model/gltf+json\"  # rfc 6839",
          "831:     assert is_expected_content_type(",
          "",
          "[Removed Lines]",
          "828: def test_is_expected_content_type_non_application_json_suffix():",
          "",
          "[Added Lines]",
          "874: def test_is_expected_content_type_non_application_json_suffix() -> None:",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "833:     )",
          "837:     expected_ct = \"application/json\"",
          "838:     response_ct = \"x-foo/bar+json\"  # rfc 6839",
          "839:     assert is_expected_content_type(",
          "",
          "[Removed Lines]",
          "836: def test_is_expected_content_type_non_application_json_private_suffix():",
          "",
          "[Added Lines]",
          "882: def test_is_expected_content_type_non_application_json_private_suffix() -> None:",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "841:     )",
          "845:     \"\"\"Per RFC 2045, media type matching is case insensitive.\"\"\"",
          "846:     expected_ct = \"application/json\"",
          "847:     response_ct = \"Application/JSON\"",
          "",
          "[Removed Lines]",
          "844: def test_is_expected_content_type_json_non_lowercase():",
          "",
          "[Added Lines]",
          "890: def test_is_expected_content_type_json_non_lowercase() -> None:",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "850:     )",
          "854:     expected_ct = \"application/json\"",
          "855:     response_ct = \"application/json-seq\"",
          "856:     assert not is_expected_content_type(",
          "",
          "[Removed Lines]",
          "853: def test_is_expected_content_type_json_trailing_chars():",
          "",
          "[Added Lines]",
          "899: def test_is_expected_content_type_json_trailing_chars() -> None:",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "858:     )",
          "862:     expected_ct = \"text/javascript\"",
          "863:     response_ct = \"text/javascript\"",
          "864:     assert is_expected_content_type(",
          "",
          "[Removed Lines]",
          "861: def test_is_expected_content_type_non_json_match_exact():",
          "",
          "[Added Lines]",
          "907: def test_is_expected_content_type_non_json_match_exact() -> None:",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "866:     )",
          "870:     expected_ct = \"application/json\"",
          "871:     response_ct = \"text/plain\"",
          "872:     assert not is_expected_content_type(",
          "",
          "[Removed Lines]",
          "869: def test_is_expected_content_type_non_json_not_match():",
          "",
          "[Added Lines]",
          "915: def test_is_expected_content_type_non_json_not_match() -> None:",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "880:     pass",
          "884:     sut = CookieImplementation()",
          "886:     assert sut.cookies == {}",
          "",
          "[Removed Lines]",
          "883: def test_cookies_mixin():",
          "",
          "[Added Lines]",
          "929: def test_cookies_mixin() -> None:",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "900:     sut.del_cookie(\"name\")",
          "901:     expected = (",
          "903:         \"expires=Thu, 01 Jan 1970 00:00:00 GMT; Max-Age=0; Path=/\"",
          "904:     )",
          "907:     sut.set_cookie(\"name\", \"value\", domain=\"local.host\")",
          "908:     expected = \"Set-Cookie: name=value; Domain=local.host; Path=/\"",
          "909:     assert str(sut.cookies) == expected",
          "913:     sut = CookieImplementation()",
          "915:     assert sut.cookies == {}",
          "",
          "[Removed Lines]",
          "902:         'Set-Cookie: name=(\"\")?; '",
          "905:     assert Matches(expected) == str(sut.cookies)",
          "912: def test_cookies_mixin_path():",
          "",
          "[Added Lines]",
          "948:         'Set-Cookie: name=\"\"; '",
          "951:     assert str(sut.cookies) == expected",
          "958: def test_cookies_mixin_path() -> None:",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "943:     )",
          "947:     sut = CookieImplementation()",
          "949:     assert sut.cookies == {}",
          "",
          "[Removed Lines]",
          "946: def test_sutonse_cookie__issue_del_cookie():",
          "",
          "[Added Lines]",
          "992: def test_sutonse_cookie__issue_del_cookie() -> None:",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "952:     sut.del_cookie(\"name\")",
          "953:     expected = (",
          "955:         \"expires=Thu, 01 Jan 1970 00:00:00 GMT; Max-Age=0; Path=/\"",
          "956:     )",
          "961:     sut = CookieImplementation()",
          "963:     sut.del_cookie(\"name\")",
          "",
          "[Removed Lines]",
          "954:         'Set-Cookie: name=(\"\")?; '",
          "957:     assert Matches(expected) == str(sut.cookies)",
          "960: def test_cookie_set_after_del():",
          "",
          "[Added Lines]",
          "1000:         'Set-Cookie: name=\"\"; '",
          "1003:     assert str(sut.cookies) == expected",
          "1006: def test_cookie_set_after_del() -> None:",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "967:     assert str(sut.cookies) == expected",
          "971:     cookies_mixin = CookieImplementation()",
          "972:     cookies_mixin.set_cookie(\"name\", \"value\")",
          "975:     helpers.populate_with_cookies(headers, cookies_mixin.cookies)",
          "976:     assert headers == CIMultiDict({\"Set-Cookie\": \"name=value; Path=/\"})",
          "",
          "[Removed Lines]",
          "970: def test_populate_with_cookies():",
          "973:     headers = CIMultiDict()",
          "",
          "[Added Lines]",
          "1016: def test_populate_with_cookies() -> None:",
          "1019:     headers = CIMultiDict[str]()",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "997:         ),",
          "998:     ],",
          "999: )",
          "1001:     assert parse_http_date(value) == expected",
          "",
          "[Removed Lines]",
          "1000: def test_parse_http_date(value, expected):",
          "",
          "[Added Lines]",
          "1046: def test_parse_http_date(value: str, expected: Optional[datetime.datetime]) -> None:",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1012:     indirect=(\"netrc_contents\",),",
          "1013: )",
          "1014: @pytest.mark.usefixtures(\"netrc_contents\")",
          "1016:     \"\"\"Test that reading netrc files from env works as expected\"\"\"",
          "1017:     netrc_obj = helpers.netrc_from_env()",
          "1021: @pytest.fixture",
          "1023:     protected_dir = tmp_path / \"protected\"",
          "1024:     protected_dir.mkdir()",
          "1025:     try:",
          "",
          "[Removed Lines]",
          "1015: def test_netrc_from_env(expected_username: str):",
          "1018:     assert netrc_obj.authenticators(\"example.com\")[0] == expected_username",
          "1022: def protected_dir(tmp_path: Path):",
          "",
          "[Added Lines]",
          "1061: def test_netrc_from_env(expected_username: str) -> None:",
          "1064:     assert netrc_obj is not None",
          "1065:     auth = netrc_obj.authenticators(\"example.com\")",
          "1066:     assert auth is not None",
          "1067:     assert auth[0] == expected_username",
          "1071: def protected_dir(tmp_path: Path) -> Iterator[Path]:",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1032: def test_netrc_from_home_does_not_raise_if_access_denied(",
          "1033:     protected_dir: Path, monkeypatch: pytest.MonkeyPatch",
          "1035:     monkeypatch.setattr(Path, \"home\", lambda: protected_dir)",
          "1036:     monkeypatch.delenv(\"NETRC\", raising=False)",
          "",
          "[Removed Lines]",
          "1034: ):",
          "",
          "[Added Lines]",
          "1083: ) -> None:",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1059: @pytest.mark.usefixtures(\"netrc_contents\")",
          "1060: def test_basicauth_present_in_netrc(",
          "1061:     expected_auth: helpers.BasicAuth,",
          "1063:     \"\"\"Test that netrc file contents are properly parsed into BasicAuth tuples\"\"\"",
          "1064:     netrc_obj = helpers.netrc_from_env()",
          "",
          "[Removed Lines]",
          "1062: ):",
          "",
          "[Added Lines]",
          "1111: ) -> None:",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1074:     indirect=(\"netrc_contents\",),",
          "1075: )",
          "1076: @pytest.mark.usefixtures(\"netrc_contents\")",
          "1078:     \"\"\"Test that an error is raised if netrc doesn't have an entry for our host\"\"\"",
          "1079:     netrc_obj = helpers.netrc_from_env()",
          "",
          "[Removed Lines]",
          "1077: def test_read_basicauth_from_empty_netrc():",
          "",
          "[Added Lines]",
          "1126: def test_read_basicauth_from_empty_netrc() -> None:",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1084:         helpers.basicauth_from_netrc(netrc_obj, \"example.com\")",
          "1088:     \"\"\"Test that HEAD is the only method that unequivocally must have an empty body.\"\"\"",
          "1089:     assert method_must_be_empty_body(\"HEAD\") is True",
          "1090:     # CONNECT is only empty on a successful response",
          "1091:     assert method_must_be_empty_body(\"CONNECT\") is False",
          "1095:     \"\"\"Test should_remove_content_length is always a subset of must_be_empty_body.\"\"\"",
          "1096:     assert should_remove_content_length(\"GET\", 101) is True",
          "1097:     assert must_be_empty_body(\"GET\", 101) is True",
          "",
          "[Removed Lines]",
          "1087: def test_method_must_be_empty_body():",
          "1094: def test_should_remove_content_length_is_subset_of_must_be_empty_body():",
          "",
          "[Added Lines]",
          "1136: def test_method_must_be_empty_body() -> None:",
          "1143: def test_should_remove_content_length_is_subset_of_must_be_empty_body() -> None:",
          "",
          "---------------"
        ],
        "tests/test_http_exceptions.py||tests/test_http_exceptions.py": [
          "File: tests/test_http_exceptions.py -> tests/test_http_exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # Tests for http_exceptions.py",
          "4: import pickle",
          "6: from aiohttp import http_exceptions",
          "9: class TestHttpProcessingError:",
          "10:     def test_ctor(self) -> None:",
          "11:         err = http_exceptions.HttpProcessingError(",
          "13:         )",
          "14:         assert err.code == 500",
          "15:         assert err.message == \"Internal error\"",
          "18:     def test_pickle(self) -> None:",
          "19:         err = http_exceptions.HttpProcessingError(",
          "21:         )",
          "23:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):",
          "24:             pickled = pickle.dumps(err, proto)",
          "25:             err2 = pickle.loads(pickled)",
          "26:             assert err2.code == 500",
          "27:             assert err2.message == \"Internal error\"",
          "29:             assert err2.foo == \"bar\"",
          "31:     def test_str(self) -> None:",
          "32:         err = http_exceptions.HttpProcessingError(",
          "34:         )",
          "35:         assert str(err) == \"500, message:\\n  Internal error\"",
          "37:     def test_repr(self) -> None:",
          "38:         err = http_exceptions.HttpProcessingError(",
          "40:         )",
          "41:         assert repr(err) == (\"<HttpProcessingError: 500, message='Internal error'>\")",
          "44: class TestBadHttpMessage:",
          "45:     def test_ctor(self) -> None:",
          "47:         assert err.code == 400",
          "48:         assert err.message == \"Bad HTTP message\"",
          "51:     def test_pickle(self) -> None:",
          "54:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):",
          "55:             pickled = pickle.dumps(err, proto)",
          "56:             err2 = pickle.loads(pickled)",
          "",
          "[Removed Lines]",
          "1: # type: ignore",
          "12:             code=500, message=\"Internal error\", headers={}",
          "16:         assert err.headers == {}",
          "20:             code=500, message=\"Internal error\", headers={}",
          "22:         err.foo = \"bar\"",
          "28:             assert err2.headers == {}",
          "33:             code=500, message=\"Internal error\", headers={}",
          "39:             code=500, message=\"Internal error\", headers={}",
          "46:         err = http_exceptions.BadHttpMessage(\"Bad HTTP message\", headers={})",
          "49:         assert err.headers == {}",
          "52:         err = http_exceptions.BadHttpMessage(message=\"Bad HTTP message\", headers={})",
          "53:         err.foo = \"bar\"",
          "",
          "[Added Lines]",
          "5: from multidict import CIMultiDict",
          "13:             code=500, message=\"Internal error\", headers=CIMultiDict()",
          "17:         assert err.headers == CIMultiDict()",
          "21:             code=500, message=\"Internal error\", headers=CIMultiDict()",
          "23:         err.foo = \"bar\"  # type: ignore[attr-defined]",
          "29:             assert err2.headers == CIMultiDict()",
          "34:             code=500, message=\"Internal error\", headers=CIMultiDict()",
          "40:             code=500, message=\"Internal error\", headers=CIMultiDict()",
          "47:         err = http_exceptions.BadHttpMessage(\"Bad HTTP message\", headers=CIMultiDict())",
          "50:         assert err.headers == CIMultiDict()",
          "53:         err = http_exceptions.BadHttpMessage(",
          "54:             message=\"Bad HTTP message\", headers=CIMultiDict()",
          "55:         )",
          "56:         err.foo = \"bar\"  # type: ignore[attr-defined]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:             assert err2.foo == \"bar\"",
          "62:     def test_str(self) -> None:",
          "64:         assert str(err) == \"400, message:\\n  Bad HTTP message\"",
          "66:     def test_repr(self) -> None:",
          "68:         assert repr(err) == \"<BadHttpMessage: 400, message='Bad HTTP message'>\"",
          "",
          "[Removed Lines]",
          "63:         err = http_exceptions.BadHttpMessage(message=\"Bad HTTP message\", headers={})",
          "67:         err = http_exceptions.BadHttpMessage(message=\"Bad HTTP message\", headers={})",
          "",
          "[Added Lines]",
          "66:         err = http_exceptions.BadHttpMessage(",
          "67:             message=\"Bad HTTP message\", headers=CIMultiDict()",
          "68:         )",
          "72:         err = http_exceptions.BadHttpMessage(",
          "73:             message=\"Bad HTTP message\", headers=CIMultiDict()",
          "74:         )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:     def test_pickle(self) -> None:",
          "79:         err = http_exceptions.LineTooLong(line=\"spam\", limit=\"10\", actual_size=\"12\")",
          "81:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):",
          "82:             pickled = pickle.dumps(err, proto)",
          "83:             err2 = pickle.loads(pickled)",
          "",
          "[Removed Lines]",
          "80:         err.foo = \"bar\"",
          "",
          "[Added Lines]",
          "87:         err.foo = \"bar\"  # type: ignore[attr-defined]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:     def test_pickle(self) -> None:",
          "110:         err = http_exceptions.InvalidHeader(hdr=\"X-Spam\")",
          "112:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):",
          "113:             pickled = pickle.dumps(err, proto)",
          "114:             err2 = pickle.loads(pickled)",
          "",
          "[Removed Lines]",
          "111:         err.foo = \"bar\"",
          "",
          "[Added Lines]",
          "118:         err.foo = \"bar\"  # type: ignore[attr-defined]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:         assert str(err) == \"400, message:\\n  Bad status line 'Test'\"",
          "136:     def test_ctor2(self) -> None:",
          "141:     def test_pickle(self) -> None:",
          "142:         err = http_exceptions.BadStatusLine(\"Test\")",
          "144:         for proto in range(pickle.HIGHEST_PROTOCOL + 1):",
          "145:             pickled = pickle.dumps(err, proto)",
          "146:             err2 = pickle.loads(pickled)",
          "",
          "[Removed Lines]",
          "137:         err = http_exceptions.BadStatusLine(b\"\")",
          "138:         assert err.line == \"b''\"",
          "139:         assert str(err) == \"400, message:\\n  Bad status line \\\"b''\\\"\"",
          "143:         err.foo = \"bar\"",
          "",
          "[Added Lines]",
          "144:         err = http_exceptions.BadStatusLine(\"\")",
          "145:         assert err.line == \"\"",
          "146:         assert str(err) == \"400, message:\\n  Bad status line ''\"",
          "150:         err.foo = \"bar\"  # type: ignore[attr-defined]",
          "",
          "---------------"
        ],
        "tests/test_http_parser.py||tests/test_http_parser.py": [
          "File: tests/test_http_parser.py -> tests/test_http_parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # Tests for aiohttp/protocol.py",
          "4: import asyncio",
          "5: import re",
          "8: from unittest import mock",
          "9: from urllib.parse import quote",
          "",
          "[Removed Lines]",
          "1: # type: ignore",
          "6: from contextlib import nullcontext",
          "7: from typing import Any, Dict, List",
          "",
          "[Added Lines]",
          "5: from typing import Any, Dict, Iterable, List, Type",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: import aiohttp",
          "16: from aiohttp import http_exceptions, streams",
          "17: from aiohttp.http_parser import (",
          "19:     DeflateBuffer,",
          "20:     HttpPayloadParser,",
          "21:     HttpRequestParserPy,",
          "22:     HttpResponseParserPy,",
          "24: )",
          "26: try:",
          "27:     try:",
          "",
          "[Removed Lines]",
          "18:     NO_EXTENSIONS,",
          "23:     HttpVersion,",
          "",
          "[Added Lines]",
          "15: from aiohttp.base_protocol import BaseProtocol",
          "16: from aiohttp.helpers import NO_EXTENSIONS",
          "19:     HttpParser,",
          "21:     HttpRequestParser,",
          "23:     HttpResponseParser,",
          "26: from aiohttp.http_writer import HttpVersion",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31: except ImportError:",
          "32:     brotli = None",
          "37: try:",
          "38:     from aiohttp.http_parser import HttpRequestParserC, HttpResponseParserC",
          "",
          "[Removed Lines]",
          "34: REQUEST_PARSERS: Any = [HttpRequestParserPy]",
          "35: RESPONSE_PARSERS: Any = [HttpResponseParserPy]",
          "",
          "[Added Lines]",
          "36: REQUEST_PARSERS = [HttpRequestParserPy]",
          "37: RESPONSE_PARSERS = [HttpResponseParserPy]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "46: @pytest.fixture",
          "52:     return [",
          "53:         \"py-parser\" if parser.__module__ == \"aiohttp.http_parser\" else \"c-parser\"",
          "54:         for parser in parsers",
          "",
          "[Removed Lines]",
          "47: def protocol():",
          "48:     return mock.Mock()",
          "51: def _gen_ids(parsers: List[Any]) -> List[str]:",
          "",
          "[Added Lines]",
          "49: def protocol() -> Any:",
          "50:     return mock.create_autospec(BaseProtocol, spec_set=True, instance=True)",
          "53: def _gen_ids(parsers: Iterable[Type[HttpParser[Any]]]) -> List[str]:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "58: @pytest.fixture(params=REQUEST_PARSERS, ids=_gen_ids(REQUEST_PARSERS))",
          "60:     # Parser implementations",
          "62:         protocol,",
          "63:         loop,",
          "64:         2**16,",
          "",
          "[Removed Lines]",
          "59: def parser(loop: Any, protocol: Any, request: Any):",
          "61:     return request.param(",
          "",
          "[Added Lines]",
          "61: def parser(",
          "62:     loop: asyncio.AbstractEventLoop,",
          "63:     protocol: BaseProtocol,",
          "64:     request: pytest.FixtureRequest,",
          "65: ) -> HttpRequestParser:",
          "67:     return request.param(  # type: ignore[no-any-return]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "70: @pytest.fixture(params=REQUEST_PARSERS, ids=_gen_ids(REQUEST_PARSERS))",
          "72:     # Request Parser class",
          "76: @pytest.fixture(params=RESPONSE_PARSERS, ids=_gen_ids(RESPONSE_PARSERS))",
          "78:     # Parser implementations",
          "80:         protocol,",
          "81:         loop,",
          "82:         2**16,",
          "",
          "[Removed Lines]",
          "71: def request_cls(request: Any):",
          "73:     return request.param",
          "77: def response(loop: Any, protocol: Any, request: Any):",
          "79:     return request.param(",
          "",
          "[Added Lines]",
          "77: def request_cls(request: pytest.FixtureRequest) -> Type[HttpRequestParser]:",
          "79:     return request.param  # type: ignore[no-any-return]",
          "83: def response(",
          "84:     loop: asyncio.AbstractEventLoop,",
          "85:     protocol: BaseProtocol,",
          "86:     request: pytest.FixtureRequest,",
          "87: ) -> HttpResponseParser:",
          "89:     return request.param(  # type: ignore[no-any-return]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "88: @pytest.fixture(params=RESPONSE_PARSERS, ids=_gen_ids(RESPONSE_PARSERS))",
          "90:     # Parser implementations",
          "99: @pytest.mark.skipif(NO_EXTENSIONS, reason=\"Extensions available but not imported\")",
          "101:     assert \"HttpRequestParserC\" in dir(aiohttp.http_parser)",
          "102:     assert \"HttpResponseParserC\" in dir(aiohttp.http_parser)",
          "103:     assert \"RawRequestMessageC\" in dir(aiohttp.http_parser)",
          "104:     assert \"RawResponseMessageC\" in dir(aiohttp.http_parser)",
          "108:     text = b\"\"\"GET /test HTTP/1.1\\r",
          "109: test: a line\\r",
          "110: test2: data\\r",
          "",
          "[Removed Lines]",
          "89: def response_cls(request: Any):",
          "91:     return request.param",
          "94: @pytest.fixture",
          "95: def stream():",
          "96:     return mock.Mock()",
          "100: def test_c_parser_loaded():",
          "107: def test_parse_headers(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "99: def response_cls(request: pytest.FixtureRequest) -> Type[HttpResponseParser]:",
          "101:     return request.param  # type: ignore[no-any-return]",
          "105: def test_c_parser_loaded() -> None:",
          "112: def test_parse_headers(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "121:     assert not msg.upgrade",
          "125:     text = b\"\"\"GET /test HTTP/1.1\\r",
          "126: test: line\\r",
          "127:  Content-Length: 48\\r",
          "",
          "[Removed Lines]",
          "124: def test_reject_obsolete_line_folding(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "129: def test_reject_obsolete_line_folding(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "135: @pytest.mark.skipif(NO_EXTENSIONS, reason=\"Only tests C parser.\")",
          "137:     parser = HttpRequestParserC(",
          "138:         protocol,",
          "139:         loop,",
          "",
          "[Removed Lines]",
          "136: def test_invalid_character(loop: Any, protocol: Any, request: Any) -> None:",
          "",
          "[Added Lines]",
          "141: def test_invalid_character(",
          "142:     loop: asyncio.AbstractEventLoop,",
          "143:     protocol: BaseProtocol,",
          "144:     request: pytest.FixtureRequest,",
          "145: ) -> None:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "155: @pytest.mark.skipif(NO_EXTENSIONS, reason=\"Only tests C parser.\")",
          "157:     parser = HttpRequestParserC(",
          "158:         protocol,",
          "159:         loop,",
          "",
          "[Removed Lines]",
          "156: def test_invalid_linebreak(loop: Any, protocol: Any, request: Any) -> None:",
          "",
          "[Added Lines]",
          "165: def test_invalid_linebreak(",
          "166:     loop: asyncio.AbstractEventLoop,",
          "167:     protocol: BaseProtocol,",
          "168:     request: pytest.FixtureRequest,",
          "169: ) -> None:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "172:         parser.feed_data(text)",
          "176:     text = b\"\"\"POST / HTTP/1.1\\r\\nHost: localhost:8080\\r\\nX-Abc: \\rxTransfer-Encoding: chunked\\r\\n\\r\\n\"\"\"",
          "177:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "178:         parser.feed_data(text)",
          "",
          "[Removed Lines]",
          "175: def test_cve_2023_37276(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "188: def test_cve_2023_37276(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "182:     \"rfc9110_5_6_2_token_delim\",",
          "183:     r'\"(),/:;<=>?@[\\]{}',",
          "184: )",
          "186:     text = f\"POST / HTTP/1.1\\r\\nhead{rfc9110_5_6_2_token_delim}er: val\\r\\n\\r\\n\".encode()",
          "188:     if rfc9110_5_6_2_token_delim == \":\":",
          "189:         # Inserting colon into header just splits name/value earlier.",
          "192:         parser.feed_data(text)",
          "",
          "[Removed Lines]",
          "185: def test_bad_header_name(parser: Any, rfc9110_5_6_2_token_delim: str) -> None:",
          "187:     expectation = pytest.raises(http_exceptions.BadHttpMessage)",
          "190:         expectation = nullcontext()",
          "191:     with expectation:",
          "",
          "[Added Lines]",
          "198: def test_bad_header_name(",
          "199:     parser: HttpRequestParser, rfc9110_5_6_2_token_delim: str",
          "200: ) -> None:",
          "204:         parser.feed_data(text)",
          "205:         return",
          "207:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "207:         \"\\xffoo: bar\",",
          "208:     ),",
          "209: )",
          "211:     text = f\"POST / HTTP/1.1\\r\\n{hdr}\\r\\n\\r\\n\".encode()",
          "212:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "213:         parser.feed_data(text)",
          "217:     parser = HttpRequestParserPy(",
          "218:         protocol,",
          "219:         loop,",
          "",
          "[Removed Lines]",
          "210: def test_bad_headers(parser: Any, hdr: str) -> None:",
          "216: def test_unpaired_surrogate_in_header_py(loop: Any, protocol: Any) -> None:",
          "",
          "[Added Lines]",
          "226: def test_bad_headers(parser: HttpRequestParser, hdr: str) -> None:",
          "232: def test_unpaired_surrogate_in_header_py(",
          "233:     loop: asyncio.AbstractEventLoop, protocol: BaseProtocol",
          "234: ) -> None:",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "230:     assert message is not None",
          "234:     text = (",
          "235:         b\"GET / HTTP/1.1\\r\\nHost: a\\r\\nContent-Length: 5\\r\\nTransfer-Encoding: a\\r\\n\\r\\n\"",
          "236:         + b\"apple\\r\\n\"",
          "",
          "[Removed Lines]",
          "233: def test_content_length_transfer_encoding(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "251: def test_content_length_transfer_encoding(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "239:         parser.feed_data(text)",
          "243:     \"\"\"Test that invalid chunked encoding doesn't allow content-length to be used.\"\"\"",
          "244:     parser = HttpRequestParserPy(",
          "245:         protocol,",
          "",
          "[Removed Lines]",
          "242: def test_bad_chunked_py(loop: Any, protocol: Any) -> None:",
          "",
          "[Added Lines]",
          "260: def test_bad_chunked_py(",
          "261:     loop: asyncio.AbstractEventLoop, protocol: BaseProtocol",
          "262: ) -> None:",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "260:     \"HttpRequestParserC\" not in dir(aiohttp.http_parser),",
          "261:     reason=\"C based HTTP parser not available\",",
          "262: )",
          "264:     \"\"\"C parser behaves differently. Maybe we should align them later.\"\"\"",
          "265:     parser = HttpRequestParserC(",
          "266:         protocol,",
          "",
          "[Removed Lines]",
          "263: def test_bad_chunked_c(loop: Any, protocol: Any) -> None:",
          "",
          "[Added Lines]",
          "283: def test_bad_chunked_c(loop: asyncio.AbstractEventLoop, protocol: BaseProtocol) -> None:",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "277:         parser.feed_data(text)",
          "281:     text = b\"GET / HTTP/1.1\\r\\n\\tContent-Length: 1\\r\\n\\r\\nX\"",
          "282:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "283:         parser.feed_data(text)",
          "287:     invalid_unicode_byte = b\"\\xd9\"",
          "288:     header_name = b\"Test\" + invalid_unicode_byte + b\"Header\" + b\"A\" * 8192",
          "289:     text = b\"GET /test HTTP/1.1\\r\\n\" + header_name + b\": test\\r\\n\" + b\"\\r\\n\" + b\"\\r\\n\"",
          "",
          "[Removed Lines]",
          "280: def test_whitespace_before_header(parser: Any) -> None:",
          "286: def test_parse_headers_longline(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "300: def test_whitespace_before_header(parser: HttpRequestParser) -> None:",
          "306: def test_parse_headers_longline(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "295: @pytest.fixture",
          "297:     if isinstance(request.getfixturevalue(\"parser\"), HttpRequestParserPy):",
          "298:         return",
          "299:     request.node.add_marker(",
          "",
          "[Removed Lines]",
          "296: def xfail_c_parser_status(request) -> None:",
          "",
          "[Added Lines]",
          "316: def xfail_c_parser_status(request: pytest.FixtureRequest) -> None:",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "307: @pytest.mark.usefixtures(\"xfail_c_parser_status\")",
          "309:     text = b\"#smol //a HTTP/1.3\\r\\n\\r\\n\"",
          "310:     messages, upgrade, tail = parser.feed_data(text)",
          "311:     assert len(messages) == 1",
          "",
          "[Removed Lines]",
          "308: def test_parse_unusual_request_line(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "328: def test_parse_unusual_request_line(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "317:     assert msg.version == (1, 3)",
          "321:     text = b\"GET /test HTTP/1.1\\r\\n\\r\\n\"",
          "322:     messages, upgrade, tail = parser.feed_data(text)",
          "323:     assert len(messages) == 1",
          "",
          "[Removed Lines]",
          "320: def test_parse(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "340: def test_parse(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "329:     assert msg.version == (1, 1)",
          "333:     text = b\"GET /test HTTP/1.1\\r\\nContent-Length: 4\\r\\n\\r\\nbody\"",
          "334:     messages, upgrade, tail = parser.feed_data(text)",
          "335:     assert len(messages) == 1",
          "",
          "[Removed Lines]",
          "332: async def test_parse_body(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "352: async def test_parse_body(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "338:     assert body == b\"body\"",
          "342:     text = b\"\\r\\nGET /test HTTP/1.1\\r\\nContent-Length: 4\\r\\n\\r\\nbody\"",
          "343:     messages, upgrade, tail = parser.feed_data(text)",
          "344:     assert len(messages) == 1",
          "",
          "[Removed Lines]",
          "341: async def test_parse_body_with_CRLF(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "361: async def test_parse_body_with_CRLF(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "347:     assert body == b\"body\"",
          "351:     text = b\"GET /test HTTP/1.1\\r\\n\"",
          "352:     messages, upgrade, tail = parser.feed_data(text)",
          "353:     assert len(messages) == 0",
          "",
          "[Removed Lines]",
          "350: def test_parse_delayed(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "370: def test_parse_delayed(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "359:     assert msg.method == \"GET\"",
          "363:     text1 = b\"GET /test HTTP/1.1\\r\\n\"",
          "364:     text2 = b\"test: line\"",
          "365:     text3 = b\" continue\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "362: def test_headers_multi_feed(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "382: def test_headers_multi_feed(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "381:     assert not msg.upgrade",
          "385:     text1 = b\"GET /test HTTP/1.1\\r\\n\"",
          "386:     text2 = b\"t\"",
          "387:     text3 = b\"es\"",
          "",
          "[Removed Lines]",
          "384: def test_headers_split_field(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "404: def test_headers_split_field(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "402:     assert not msg.upgrade",
          "406:     text = (",
          "407:         b\"GET /test HTTP/1.1\\r\\n\"",
          "408:         b\"Set-Cookie: c1=cookie1\\r\\n\"",
          "",
          "[Removed Lines]",
          "405: def test_parse_headers_multi(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "425: def test_parse_headers_multi(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "425:     assert msg.compression is None",
          "429:     text = b\"GET /test HTTP/1.0\\r\\n\\r\\n\"",
          "430:     messages, upgrade, tail = parser.feed_data(text)",
          "431:     msg = messages[0][0]",
          "432:     assert msg.should_close",
          "436:     text = b\"GET /test HTTP/1.1\\r\\n\\r\\n\"",
          "437:     messages, upgrade, tail = parser.feed_data(text)",
          "438:     msg = messages[0][0]",
          "439:     assert not msg.should_close",
          "443:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"connection: close\\r\\n\\r\\n\"",
          "444:     messages, upgrade, tail = parser.feed_data(text)",
          "445:     msg = messages[0][0]",
          "446:     assert msg.should_close",
          "450:     text = b\"GET /test HTTP/1.0\\r\\n\" b\"connection: close\\r\\n\\r\\n\"",
          "451:     messages, upgrade, tail = parser.feed_data(text)",
          "452:     msg = messages[0][0]",
          "453:     assert msg.should_close",
          "457:     text = b\"GET /test HTTP/1.0\\r\\n\" b\"connection: keep-alive\\r\\n\\r\\n\"",
          "458:     messages, upgrade, tail = parser.feed_data(text)",
          "459:     msg = messages[0][0]",
          "460:     assert not msg.should_close",
          "464:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"connection: keep-alive\\r\\n\\r\\n\"",
          "465:     messages, upgrade, tail = parser.feed_data(text)",
          "466:     msg = messages[0][0]",
          "467:     assert not msg.should_close",
          "471:     text = b\"GET /test HTTP/1.0\\r\\n\" b\"connection: test\\r\\n\\r\\n\"",
          "472:     messages, upgrade, tail = parser.feed_data(text)",
          "473:     msg = messages[0][0]",
          "474:     assert msg.should_close",
          "478:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"connection: test\\r\\n\\r\\n\"",
          "479:     messages, upgrade, tail = parser.feed_data(text)",
          "480:     msg = messages[0][0]",
          "481:     assert not msg.should_close",
          "485:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"transfer-encoding: chunked\\r\\n\\r\\n\"",
          "486:     messages, upgrade, tail = parser.feed_data(text)",
          "487:     msg, payload = messages[0]",
          "",
          "[Removed Lines]",
          "428: def test_conn_default_1_0(parser: Any) -> None:",
          "435: def test_conn_default_1_1(parser: Any) -> None:",
          "442: def test_conn_close(parser: Any) -> None:",
          "449: def test_conn_close_1_0(parser: Any) -> None:",
          "456: def test_conn_keep_alive_1_0(parser: Any) -> None:",
          "463: def test_conn_keep_alive_1_1(parser: Any) -> None:",
          "470: def test_conn_other_1_0(parser: Any) -> None:",
          "477: def test_conn_other_1_1(parser: Any) -> None:",
          "484: def test_request_chunked(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "448: def test_conn_default_1_0(parser: HttpRequestParser) -> None:",
          "455: def test_conn_default_1_1(parser: HttpRequestParser) -> None:",
          "462: def test_conn_close(parser: HttpRequestParser) -> None:",
          "469: def test_conn_close_1_0(parser: HttpRequestParser) -> None:",
          "476: def test_conn_keep_alive_1_0(parser: HttpRequestParser) -> None:",
          "483: def test_conn_keep_alive_1_1(parser: HttpRequestParser) -> None:",
          "490: def test_conn_other_1_0(parser: HttpRequestParser) -> None:",
          "497: def test_conn_other_1_1(parser: HttpRequestParser) -> None:",
          "504: def test_request_chunked(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "490:     assert isinstance(payload, streams.StreamReader)",
          "494:     text = (",
          "495:         b\"GET /test HTTP/1.1\\r\\n\"",
          "496:         b\"content-length: 1234\\r\\n\"",
          "",
          "[Removed Lines]",
          "493: def test_request_te_chunked_with_content_length(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "513: def test_request_te_chunked_with_content_length(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "503:         parser.feed_data(text)",
          "507:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"transfer-encoding: chunked123\\r\\n\\r\\n\"",
          "508:     with pytest.raises(",
          "509:         http_exceptions.BadHttpMessage,",
          "",
          "[Removed Lines]",
          "506: def test_request_te_chunked123(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "526: def test_request_te_chunked123(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "512:         parser.feed_data(text)",
          "516:     text = (",
          "517:         b\"GET /test HTTP/1.1\\r\\n\"",
          "518:         b\"connection: upgrade\\r\\n\"",
          "",
          "[Removed Lines]",
          "515: def test_conn_upgrade(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "535: def test_conn_upgrade(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "525:     assert upgrade",
          "529:     \"\"\"Test not upgraded if missing Upgrade header.\"\"\"",
          "530:     text = b\"GET /test HTTP/1.1\\r\\nconnection: upgrade\\r\\n\\r\\n\"",
          "531:     messages, upgrade, tail = parser.feed_data(text)",
          "",
          "[Removed Lines]",
          "528: def test_bad_upgrade(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "548: def test_bad_upgrade(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "534:     assert not upgrade",
          "538:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"content-encoding: \\r\\n\\r\\n\"",
          "539:     messages, upgrade, tail = parser.feed_data(text)",
          "540:     msg = messages[0][0]",
          "541:     assert msg.compression is None",
          "545:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"content-encoding: deflate\\r\\n\\r\\n\"",
          "546:     messages, upgrade, tail = parser.feed_data(text)",
          "547:     msg = messages[0][0]",
          "548:     assert msg.compression == \"deflate\"",
          "552:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"content-encoding: gzip\\r\\n\\r\\n\"",
          "553:     messages, upgrade, tail = parser.feed_data(text)",
          "554:     msg = messages[0][0]",
          "",
          "[Removed Lines]",
          "537: def test_compression_empty(parser: Any) -> None:",
          "544: def test_compression_deflate(parser: Any) -> None:",
          "551: def test_compression_gzip(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "557: def test_compression_empty(parser: HttpRequestParser) -> None:",
          "564: def test_compression_deflate(parser: HttpRequestParser) -> None:",
          "571: def test_compression_gzip(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "558: @pytest.mark.skipif(brotli is None, reason=\"brotli is not installed\")",
          "560:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"content-encoding: br\\r\\n\\r\\n\"",
          "561:     messages, upgrade, tail = parser.feed_data(text)",
          "562:     msg = messages[0][0]",
          "563:     assert msg.compression == \"br\"",
          "567:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"content-encoding: compress\\r\\n\\r\\n\"",
          "568:     messages, upgrade, tail = parser.feed_data(text)",
          "569:     msg = messages[0][0]",
          "570:     assert msg.compression is None",
          "574:     text = b\"CONNECT www.google.com HTTP/1.1\\r\\n\" b\"content-length: 0\\r\\n\\r\\n\"",
          "575:     messages, upgrade, tail = parser.feed_data(text)",
          "576:     msg, payload = messages[0]",
          "",
          "[Removed Lines]",
          "559: def test_compression_brotli(parser: Any) -> None:",
          "566: def test_compression_unknown(parser: Any) -> None:",
          "573: def test_url_connect(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "579: def test_compression_brotli(parser: HttpRequestParser) -> None:",
          "586: def test_compression_unknown(parser: HttpRequestParser) -> None:",
          "593: def test_url_connect(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "578:     assert msg.url == URL.build(authority=\"www.google.com\")",
          "582:     text = b\"CONNECT www.google.com HTTP/1.1\\r\\n\" b\"content-length: 0\\r\\n\\r\\n\"",
          "583:     messages, upgrade, tail = parser.feed_data(text)",
          "584:     msg, payload = messages[0]",
          "",
          "[Removed Lines]",
          "581: def test_headers_connect(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "601: def test_headers_connect(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "586:     assert isinstance(payload, streams.StreamReader)",
          "590:     text = (",
          "591:         b\"GET https://www.google.com/path/to.html HTTP/1.1\\r\\n\"",
          "592:         b\"content-length: 0\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "589: def test_url_absolute(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "609: def test_url_absolute(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "598:     assert msg.url == URL(\"https://www.google.com/path/to.html\")",
          "602:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"SEC-WEBSOCKET-KEY1: line\\r\\n\\r\\n\"",
          "604:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "605:         parser.feed_data(text)",
          "609:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"content-length: line\\r\\n\\r\\n\"",
          "611:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "612:         parser.feed_data(text)",
          "616:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"content-length: -1\\r\\n\\r\\n\"",
          "618:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "",
          "[Removed Lines]",
          "601: def test_headers_old_websocket_key1(parser: Any) -> None:",
          "608: def test_headers_content_length_err_1(parser: Any) -> None:",
          "615: def test_headers_content_length_err_2(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "621: def test_headers_old_websocket_key1(parser: HttpRequestParser) -> None:",
          "628: def test_headers_content_length_err_1(parser: HttpRequestParser) -> None:",
          "635: def test_headers_content_length_err_2(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "636: @pytest.mark.parametrize(\"pad2\", _pad.keys(), ids=[\"post-\" + n for n in _pad.values()])",
          "637: @pytest.mark.parametrize(\"pad1\", _pad.keys(), ids=[\"pre-\" + n for n in _pad.values()])",
          "638: def test_invalid_header_spacing(",
          "640: ) -> None:",
          "641:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"%s%s%s: value\\r\\n\\r\\n\" % (pad1, hdr, pad2)",
          "643:     if pad1 == pad2 == b\"\" and hdr != b\"\":",
          "644:         # one entry in param matrix is correct: non-empty name, not padded",
          "647:         parser.feed_data(text)",
          "651:     text = b\"GET /test HTTP/1.1\\r\\n\" b\":test\\r\\n\\r\\n\"",
          "652:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "653:         parser.feed_data(text)",
          "657:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"test line\\r\\n\\r\\n\"",
          "658:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "659:         parser.feed_data(text)",
          "663:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"test[]: line\\r\\n\\r\\n\"",
          "665:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "",
          "[Removed Lines]",
          "639:     parser: Any, pad1: bytes, pad2: bytes, hdr: bytes",
          "642:     expectation = pytest.raises(http_exceptions.BadHttpMessage)",
          "645:         expectation = nullcontext()",
          "646:     with expectation:",
          "650: def test_empty_header_name(parser: Any) -> None:",
          "656: def test_invalid_header(parser: Any) -> None:",
          "662: def test_invalid_name(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "659:     parser: HttpRequestParser, pad1: bytes, pad2: bytes, hdr: bytes",
          "664:         parser.feed_data(text)",
          "665:         return",
          "667:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "671: def test_empty_header_name(parser: HttpRequestParser) -> None:",
          "677: def test_invalid_header(parser: HttpRequestParser) -> None:",
          "683: def test_invalid_name(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "669: @pytest.mark.parametrize(\"size\", [40960, 8191])",
          "671:     name = b\"t\" * size",
          "672:     text = b\"GET /test HTTP/1.1\\r\\n\" + name + b\":data\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "670: def test_max_header_field_size(parser: Any, size: Any) -> None:",
          "",
          "[Added Lines]",
          "691: def test_max_header_field_size(parser: HttpRequestParser, size: int) -> None:",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "676:         parser.feed_data(text)",
          "680:     name = b\"t\" * 8190",
          "681:     text = b\"GET /test HTTP/1.1\\r\\n\" + name + b\":data\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "679: def test_max_header_field_size_under_limit(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "700: def test_max_header_field_size_under_limit(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "697: @pytest.mark.parametrize(\"size\", [40960, 8191])",
          "699:     name = b\"t\" * size",
          "700:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"data:\" + name + b\"\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "698: def test_max_header_value_size(parser: Any, size: Any) -> None:",
          "",
          "[Added Lines]",
          "719: def test_max_header_value_size(parser: HttpRequestParser, size: int) -> None:",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "704:         parser.feed_data(text)",
          "708:     value = b\"A\" * 8190",
          "709:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"data:\" + value + b\"\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "707: def test_max_header_value_size_under_limit(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "728: def test_max_header_value_size_under_limit(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "725: @pytest.mark.parametrize(\"size\", [40965, 8191])",
          "727:     name = b\"T\" * (size - 5)",
          "728:     text = b\"HTTP/1.1 200 Ok\\r\\ndata: test\\r\\n \" + name + b\"\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "726: def test_max_header_value_size_continuation(response: Any, size: Any) -> None:",
          "",
          "[Added Lines]",
          "747: def test_max_header_value_size_continuation(",
          "748:     response: HttpResponseParser, size: int",
          "749: ) -> None:",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "732:         response.feed_data(text)",
          "736:     value = b\"A\" * 8185",
          "737:     text = b\"HTTP/1.1 200 Ok\\r\\ndata: test\\r\\n \" + value + b\"\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "735: def test_max_header_value_size_continuation_under_limit(response: Any) -> None:",
          "",
          "[Added Lines]",
          "758: def test_max_header_value_size_continuation_under_limit(",
          "759:     response: HttpResponseParser,",
          "760: ) -> None:",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "749:     assert not msg.chunked",
          "753:     text = b\"GET /path HTTP/1.1\\r\\n\\r\\n\"",
          "754:     messages, upgrade, tail = parser.feed_data(text)",
          "755:     msg = messages[0][0]",
          "",
          "[Removed Lines]",
          "752: def test_http_request_parser(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "777: def test_http_request_parser(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "766:     assert msg.url == URL(\"/path\")",
          "770:     text = b\"getpath \\r\\n\\r\\n\"",
          "771:     with pytest.raises(http_exceptions.BadStatusLine) as exc_info:",
          "772:         parser.feed_data(text)",
          "",
          "[Removed Lines]",
          "769: def test_http_request_bad_status_line(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "794: def test_http_request_bad_status_line(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "788: @pytest.mark.parametrize(\"nonascii_digit\", _num.keys(), ids=_num.values())",
          "789: def test_http_request_bad_status_line_number(",
          "791: ) -> None:",
          "792:     text = b\"GET /digit HTTP/1.\" + nonascii_digit + b\"\\r\\n\\r\\n\"",
          "793:     with pytest.raises(http_exceptions.BadStatusLine):",
          "794:         parser.feed_data(text)",
          "798:     # single code point, old, multibyte NFKC, multibyte NFKD",
          "799:     utf8sep = \"\\N{arabic ligature sallallahou alayhe wasallam}\".encode()",
          "800:     text = b\"GET /ligature HTTP/1\" + utf8sep + b\"1\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "790:     parser: Any, nonascii_digit: bytes",
          "797: def test_http_request_bad_status_line_separator(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "815:     parser: HttpRequestParser, nonascii_digit: bytes",
          "822: def test_http_request_bad_status_line_separator(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "802:         parser.feed_data(text)",
          "806:     text = b\"GET\\n/path\\fHTTP/1.1\\r\\n\\r\\n\"",
          "807:     with pytest.raises(http_exceptions.BadStatusLine):",
          "808:         parser.feed_data(text)",
          "812:     text = (",
          "813:         b\"GET /test HTTP/1.1\\r\\n\"",
          "814:         b\"connection: upgrade\\r\\n\"",
          "",
          "[Removed Lines]",
          "805: def test_http_request_bad_status_line_whitespace(parser: Any) -> None:",
          "811: def test_http_request_upgrade(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "830: def test_http_request_bad_status_line_whitespace(parser: HttpRequestParser) -> None:",
          "836: def test_http_request_upgrade(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "823:     assert tail == b\"some raw data\"",
          "827:     text = (",
          "828:         b\"POST / HTTP/1.1\\r\\n\"",
          "829:         b\"Connection: Upgrade\\r\\n\"",
          "",
          "[Removed Lines]",
          "826: async def test_http_request_upgrade_unknown(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "851: async def test_http_request_upgrade_unknown(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "846: @pytest.fixture",
          "848:     if isinstance(request.getfixturevalue(\"parser\"), HttpRequestParserPy):",
          "849:         return",
          "850:     request.node.add_marker(",
          "",
          "[Removed Lines]",
          "847: def xfail_c_parser_url(request) -> None:",
          "",
          "[Added Lines]",
          "872: def xfail_c_parser_url(request: pytest.FixtureRequest) -> None:",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "858: @pytest.mark.usefixtures(\"xfail_c_parser_url\")",
          "860:     messages, upgrade, tail = parser.feed_data(",
          "861:         # note the truncated unicode sequence",
          "862:         b\"GET /P\\xc3\\xbcnktchen\\xa0\\xef\\xb7 HTTP/1.1\\r\\n\" +",
          "",
          "[Removed Lines]",
          "859: def test_http_request_parser_utf8_request_line(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "884: def test_http_request_parser_utf8_request_line(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "881:     assert msg.url == URL.build(path=\"/P\u00fcnktchen\\udca0\\udcef\\udcb7\", encoded=True)",
          "885:     text = \"GET /path HTTP/1.1\\r\\nx-test:\u0442\u0435\u0441\u0442\\r\\n\\r\\n\".encode()",
          "886:     messages, upgrade, tail = parser.feed_data(text)",
          "887:     msg = messages[0][0]",
          "",
          "[Removed Lines]",
          "884: def test_http_request_parser_utf8(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "909: def test_http_request_parser_utf8(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "898:     assert msg.url == URL(\"/path\")",
          "902:     text = \"GET /path HTTP/1.1\\r\\nx-test:\u0442\u0435\u0441\u0442\\r\\n\\r\\n\".encode(\"cp1251\")",
          "903:     msg = parser.feed_data(text)[0][0][0]",
          "",
          "[Removed Lines]",
          "901: def test_http_request_parser_non_utf8(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "926: def test_http_request_parser_non_utf8(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "916:     assert msg.url == URL(\"/path\")",
          "920:     text = b\"GET //path HTTP/1.1\\r\\n\\r\\n\"",
          "921:     msg = parser.feed_data(text)[0][0][0]",
          "",
          "[Removed Lines]",
          "919: def test_http_request_parser_two_slashes(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "944: def test_http_request_parser_two_slashes(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "935:     [bytes([i]) for i in rb'\"(),/:;<=>?@[\\]{}'],",
          "936: )",
          "937: def test_http_request_parser_bad_method(",
          "939: ) -> None:",
          "940:     with pytest.raises(http_exceptions.BadStatusLine):",
          "941:         parser.feed_data(rfc9110_5_6_2_token_delim + b'ET\" /get HTTP/1.1\\r\\n\\r\\n')",
          "945:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "946:         parser.feed_data(b\"GET //get HT/11\\r\\n\\r\\n\")",
          "950:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "951:         parser.feed_data(b\"GET /test HTTP/1.32\\r\\n\\r\\n\")",
          "955:     with pytest.raises(http_exceptions.InvalidURLError):",
          "956:         parser.feed_data(b\"GET ! HTTP/1.1\\r\\n\\r\\n\")",
          "960:     with pytest.raises(http_exceptions.InvalidURLError):",
          "961:         parser.feed_data(b\"GET \\xff HTTP/1.1\\r\\n\\r\\n\")",
          "964: @pytest.mark.parametrize(\"size\", [40965, 8191])",
          "966:     path = b\"t\" * (size - 5)",
          "967:     match = f\"400, message:\\n  Got more than 8190 bytes \\\\({size}\\\\) when reading\"",
          "968:     with pytest.raises(http_exceptions.LineTooLong, match=match):",
          "969:         parser.feed_data(b\"GET /path\" + path + b\" HTTP/1.1\\r\\n\\r\\n\")",
          "973:     path = b\"t\" * (8190 - 5)",
          "974:     messages, upgraded, tail = parser.feed_data(",
          "975:         b\"GET /path\" + path + b\" HTTP/1.1\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "938:     parser: Any, rfc9110_5_6_2_token_delim: bytes",
          "944: def test_http_request_parser_bad_version(parser: Any) -> None:",
          "949: def test_http_request_parser_bad_version_number(parser: Any) -> None:",
          "954: def test_http_request_parser_bad_ascii_uri(parser: Any) -> None:",
          "959: def test_http_request_parser_bad_nonascii_uri(parser: Any) -> None:",
          "965: def test_http_request_max_status_line(parser: Any, size: Any) -> None:",
          "972: def test_http_request_max_status_line_under_limit(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "963:     parser: HttpRequestParser, rfc9110_5_6_2_token_delim: bytes",
          "969: def test_http_request_parser_bad_version(parser: HttpRequestParser) -> None:",
          "974: def test_http_request_parser_bad_version_number(parser: HttpRequestParser) -> None:",
          "979: def test_http_request_parser_bad_ascii_uri(parser: HttpRequestParser) -> None:",
          "984: def test_http_request_parser_bad_nonascii_uri(parser: HttpRequestParser) -> None:",
          "990: def test_http_request_max_status_line(parser: HttpRequestParser, size: int) -> None:",
          "997: def test_http_request_max_status_line_under_limit(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "988:     assert msg.url == URL(\"/path\" + path.decode())",
          "992:     text = \"HTTP/1.1 200 Ok\\r\\nx-test:\u0442\u0435\u0441\u0442\\r\\n\\r\\n\".encode()",
          "994:     messages, upgraded, tail = response.feed_data(text)",
          "",
          "[Removed Lines]",
          "991: def test_http_response_parser_utf8(response: Any) -> None:",
          "",
          "[Added Lines]",
          "1016: def test_http_response_parser_utf8(response: HttpResponseParser) -> None:",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1004:     assert not tail",
          "1008:     text = \"HTTP/1.1 200 \\r\\nx-test:\u0442\u0435\u0441\u0442\\r\\n\\r\\n\".encode()",
          "1010:     messages, upgraded, tail = response.feed_data(text)",
          "",
          "[Removed Lines]",
          "1007: def test_http_response_parser_utf8_without_reason(response: Any) -> None:",
          "",
          "[Added Lines]",
          "1032: def test_http_response_parser_utf8_without_reason(response: HttpResponseParser) -> None:",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1020:     assert not tail",
          "1024:     text = b\"HTTP/1.1 200 Ok\\r\\ntest: line\\r\\n continue\\r\\n\\r\\n\"",
          "1026:     messages, upgraded, tail = response.feed_data(text)",
          "",
          "[Removed Lines]",
          "1023: def test_http_response_parser_obs_line_folding(response: Any) -> None:",
          "",
          "[Added Lines]",
          "1048: def test_http_response_parser_obs_line_folding(response: HttpResponseParser) -> None:",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1039: @pytest.mark.dev_mode",
          "1041:     text = b\"HTTP/1.1 200 Ok\\r\\ntest: line\\r\\n continue\\r\\n\\r\\n\"",
          "1043:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "",
          "[Removed Lines]",
          "1040: def test_http_response_parser_strict_obs_line_folding(response: Any) -> None:",
          "",
          "[Added Lines]",
          "1065: def test_http_response_parser_strict_obs_line_folding(",
          "1066:     response: HttpResponseParser,",
          "1067: ) -> None:",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1047: @pytest.mark.parametrize(\"size\", [40962, 8191])",
          "1048: def test_http_response_parser_bad_status_line_too_long(",
          "1050: ) -> None:",
          "1051:     reason = b\"t\" * (size - 2)",
          "1052:     match = f\"400, message:\\n  Got more than 8190 bytes \\\\({size}\\\\) when reading\"",
          "",
          "[Removed Lines]",
          "1049:     response: Any, size: Any",
          "",
          "[Added Lines]",
          "1076:     response: HttpResponseParser, size: int",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1054:         response.feed_data(b\"HTTP/1.1 200 Ok\" + reason + b\"\\r\\n\\r\\n\")",
          "1058:     reason = b\"O\" * 8190",
          "1059:     messages, upgraded, tail = response.feed_data(",
          "1060:         b\"HTTP/1.1 200 \" + reason + b\"\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "1057: def test_http_response_parser_status_line_under_limit(response: Any) -> None:",
          "",
          "[Added Lines]",
          "1084: def test_http_response_parser_status_line_under_limit(",
          "1085:     response: HttpResponseParser,",
          "1086: ) -> None:",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1065:     assert msg.reason == reason.decode()",
          "1069:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "1070:         response.feed_data(b\"HT/11 200 Ok\\r\\n\\r\\n\")",
          "1074:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "1075:         response.feed_data(b\"HTTP/12.3 200 Ok\\r\\n\\r\\n\")",
          "1079:     msg = response.feed_data(b\"HTTP/1.1 200\\r\\n\\r\\n\")[0][0][0]",
          "1081:     assert msg.version == (1, 1)",
          "",
          "[Removed Lines]",
          "1068: def test_http_response_parser_bad_version(response: Any) -> None:",
          "1073: def test_http_response_parser_bad_version_number(response: Any) -> None:",
          "1078: def test_http_response_parser_no_reason(response: Any) -> None:",
          "",
          "[Added Lines]",
          "1097: def test_http_response_parser_bad_version(response: HttpResponseParser) -> None:",
          "1102: def test_http_response_parser_bad_version_number(response: HttpResponseParser) -> None:",
          "1107: def test_http_response_parser_no_reason(response: HttpResponseParser) -> None:",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1083:     assert msg.reason == \"\"",
          "1087:     messages, upgrade, tail = response.feed_data(",
          "1088:         b\"HTTP/1.1 200 test\\r\\nFoo: abc\\x01def\\r\\n\\r\\n\"",
          "1089:     )",
          "",
          "[Removed Lines]",
          "1086: def test_http_response_parser_lenient_headers(response: Any) -> None:",
          "",
          "[Added Lines]",
          "1115: def test_http_response_parser_lenient_headers(response: HttpResponseParser) -> None:",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1095: @pytest.mark.dev_mode",
          "1097:     if isinstance(response, HttpResponseParserPy):",
          "1098:         pytest.xfail(\"Py parser is lenient. May update py-parser later.\")",
          "1099:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "1100:         response.feed_data(b\"HTTP/1.1 200 test\\r\\nFoo: abc\\x01def\\r\\n\\r\\n\")",
          "1104:     \"\"\"Still a lot of dodgy servers sending bad requests like this.\"\"\"",
          "1105:     messages, upgrade, tail = response.feed_data(",
          "1106:         b\"HTTP/1.0 200 OK\\nFoo: abc\\nBar: def\\n\\nBODY\\n\"",
          "",
          "[Removed Lines]",
          "1096: def test_http_response_parser_strict_headers(response: Any) -> None:",
          "1103: def test_http_response_parser_bad_crlf(response: Any) -> None:",
          "",
          "[Added Lines]",
          "1125: def test_http_response_parser_strict_headers(response: HttpResponseParser) -> None:",
          "1132: def test_http_response_parser_bad_crlf(response: HttpResponseParser) -> None:",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1111:     assert msg.headers[\"Bar\"] == \"def\"",
          "1115:     text = (",
          "1116:         b\"HTTP/1.1 200 OK\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n5 \\r\\nabcde\\r\\n0\\r\\n\\r\\n\"",
          "1117:     )",
          "",
          "[Removed Lines]",
          "1114: async def test_http_response_parser_bad_chunked_lax(response: Any) -> None:",
          "",
          "[Added Lines]",
          "1143: async def test_http_response_parser_bad_chunked_lax(",
          "1144:     response: HttpResponseParser,",
          "1145: ) -> None:",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1123: @pytest.mark.dev_mode",
          "1124: async def test_http_response_parser_bad_chunked_strict_py(",
          "1126: ) -> None:",
          "1127:     response = HttpResponseParserPy(",
          "1128:         protocol,",
          "",
          "[Removed Lines]",
          "1125:     loop: Any, protocol: Any",
          "",
          "[Added Lines]",
          "1156:     loop: asyncio.AbstractEventLoop, protocol: BaseProtocol",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1144:     reason=\"C based HTTP parser not available\",",
          "1145: )",
          "1146: async def test_http_response_parser_bad_chunked_strict_c(",
          "1148: ) -> None:",
          "1149:     response = HttpResponseParserC(",
          "1150:         protocol,",
          "",
          "[Removed Lines]",
          "1147:     loop: Any, protocol: Any",
          "",
          "[Added Lines]",
          "1178:     loop: asyncio.AbstractEventLoop, protocol: BaseProtocol",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1160:         response.feed_data(text)",
          "1164:     with pytest.raises(http_exceptions.BadHttpMessage):",
          "1165:         response.feed_data(b\"HTT/1\\r\\n\\r\\n\")",
          "1169:     with pytest.raises(http_exceptions.BadStatusLine):",
          "1170:         response.feed_data(b\"HTTP/1.1 99 test\\r\\n\\r\\n\")",
          "1174:     with pytest.raises(http_exceptions.BadStatusLine):",
          "1175:         response.feed_data(b\"HTTP/1.1 9999 test\\r\\n\\r\\n\")",
          "1179:     with pytest.raises(http_exceptions.BadStatusLine):",
          "1180:         response.feed_data(b\"HTTP/1.1 ttt test\\r\\n\\r\\n\")",
          "1183: @pytest.mark.parametrize(\"nonascii_digit\", _num.keys(), ids=_num.values())",
          "1184: def test_http_response_parser_code_not_ascii(",
          "1186: ) -> None:",
          "1187:     with pytest.raises(http_exceptions.BadStatusLine):",
          "1188:         response.feed_data(b\"HTTP/1.1 20\" + nonascii_digit + b\" test\\r\\n\\r\\n\")",
          "1192:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"transfer-encoding: chunked\\r\\n\\r\\n\"",
          "1193:     msg, payload = parser.feed_data(text)[0][0]",
          "",
          "[Removed Lines]",
          "1163: def test_http_response_parser_bad(response: Any) -> None:",
          "1168: def test_http_response_parser_code_under_100(response: Any) -> None:",
          "1173: def test_http_response_parser_code_above_999(response: Any) -> None:",
          "1178: def test_http_response_parser_code_not_int(response: Any) -> None:",
          "1185:     response: Any, nonascii_digit: bytes",
          "1191: def test_http_request_chunked_payload(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "1194: def test_http_response_parser_bad(response: HttpResponseParser) -> None:",
          "1199: def test_http_response_parser_code_under_100(response: HttpResponseParser) -> None:",
          "1204: def test_http_response_parser_code_above_999(response: HttpResponseParser) -> None:",
          "1209: def test_http_response_parser_code_not_int(response: HttpResponseParser) -> None:",
          "1216:     response: HttpResponseParser, nonascii_digit: bytes",
          "1222: def test_http_request_chunked_payload(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1203:     assert payload.is_eof()",
          "1207:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"transfer-encoding: chunked\\r\\n\\r\\n\"",
          "1208:     msg, payload = parser.feed_data(text)[0][0]",
          "",
          "[Removed Lines]",
          "1206: def test_http_request_chunked_payload_and_next_message(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "1237: def test_http_request_chunked_payload_and_next_message(",
          "1238:     parser: HttpRequestParser,",
          "1239: ) -> None:",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1225:     assert not payload2.is_eof()",
          "1229:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"transfer-encoding: chunked\\r\\n\\r\\n\"",
          "1230:     msg, payload = parser.feed_data(text)[0][0]",
          "",
          "[Removed Lines]",
          "1228: def test_http_request_chunked_payload_chunks(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "1261: def test_http_request_chunked_payload_chunks(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1247:     assert payload.is_eof()",
          "1251:     text = b\"GET /test HTTP/1.1\\r\\n\" b\"transfer-encoding: chunked\\r\\n\\r\\n\"",
          "1252:     msg, payload = parser.feed_data(text)[0][0]",
          "",
          "[Removed Lines]",
          "1250: def test_parse_chunked_payload_chunk_extension(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "1283: def test_parse_chunked_payload_chunk_extension(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "1258:     assert payload.is_eof()",
          "1262:     parser = request_cls(protocol, loop, limit=2**16)",
          "1263:     text = b\"POST /test HTTP/1.1\\r\\n\\r\\n\"",
          "1264:     msg, payload = parser.feed_data(text)[0][0]",
          "",
          "[Removed Lines]",
          "1261: def test_parse_no_length_or_te_on_post(loop: Any, protocol: Any, request_cls: Any):",
          "",
          "[Added Lines]",
          "1294: def test_parse_no_length_or_te_on_post(",
          "1295:     loop: asyncio.AbstractEventLoop,",
          "1296:     protocol: BaseProtocol,",
          "1297:     request_cls: Type[HttpRequestParser],",
          "1298: ) -> None:",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "1269: def test_parse_payload_response_without_body(",
          "1271: ) -> None:",
          "1272:     parser = response_cls(protocol, loop, 2**16, response_with_body=False)",
          "1273:     text = b\"HTTP/1.1 200 Ok\\r\\n\" b\"content-length: 10\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "1270:     loop: Any, protocol: Any, response_cls: Any",
          "",
          "[Added Lines]",
          "1307:     loop: asyncio.AbstractEventLoop,",
          "1308:     protocol: BaseProtocol,",
          "1309:     response_cls: Type[HttpResponseParser],",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "1276:     assert payload.is_eof()",
          "1280:     text = b\"HTTP/1.1 200 Ok\\r\\n\" b\"content-length: 4\\r\\n\\r\\n\"",
          "1281:     msg, payload = response.feed_data(text)[0][0]",
          "1282:     assert not payload.is_eof()",
          "",
          "[Removed Lines]",
          "1279: def test_parse_length_payload(response: Any) -> None:",
          "",
          "[Added Lines]",
          "1318: def test_parse_length_payload(response: HttpResponseParser) -> None:",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "1289:     assert b\"data\" == b\"\".join(d for d in payload._buffer)",
          "1293:     text = b\"PUT / HTTP/1.1\\r\\n\\r\\n\"",
          "1294:     msg, payload = parser.feed_data(text)[0][0]",
          "1295:     assert payload.is_eof()",
          "1299:     text = b\"HTTP/1.1 200 OK\\r\\ncontent-length: 5\\r\\n\\r\\nfirst\"",
          "1300:     msg, payload = response.feed_data(text)[0][0]",
          "1301:     assert msg.version == HttpVersion(major=1, minor=1)",
          "",
          "[Removed Lines]",
          "1292: def test_parse_no_length_payload(parser: Any) -> None:",
          "1298: def test_parse_content_length_payload_multiple(response: Any) -> None:",
          "",
          "[Added Lines]",
          "1331: def test_parse_no_length_payload(parser: HttpRequestParser) -> None:",
          "1337: def test_parse_content_length_payload_multiple(response: HttpResponseParser) -> None:",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "1333:     assert b\"second\" == b\"\".join(d for d in payload._buffer)",
          "1337:     text = b\"HTTP/1.1 200 OK\\r\\ncontent-length: 5\\r\\n\\r\\nfirst\"",
          "1338:     msg, payload = response.feed_data(text)[0][0]",
          "1339:     assert msg.version == HttpVersion(major=1, minor=1)",
          "",
          "[Removed Lines]",
          "1336: def test_parse_content_length_than_chunked_payload(response: Any) -> None:",
          "",
          "[Added Lines]",
          "1375: def test_parse_content_length_than_chunked_payload(",
          "1376:     response: HttpResponseParser,",
          "1377: ) -> None:",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "1378: @pytest.mark.parametrize(\"code\", (204, 304, 101, 102))",
          "1379: def test_parse_chunked_payload_empty_body_than_another_chunked(",
          "1381: ) -> None:",
          "1382:     head = f\"HTTP/1.1 {code} OK\\r\\n\".encode()",
          "1383:     text = head + b\"transfer-encoding: chunked\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "1380:     response: Any, code: int",
          "",
          "[Added Lines]",
          "1421:     response: HttpResponseParser, code: int",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "1420:     assert b\"second\" == b\"\".join(d for d in payload._buffer)",
          "1424:     messages, upgrade, tail = parser.feed_data(b\"GET /te\")",
          "1425:     assert len(messages) == 0",
          "1426:     messages, upgrade, tail = parser.feed_data(b\"st HTTP/1.1\\r\\n\\r\\n\")",
          "",
          "[Removed Lines]",
          "1423: def test_partial_url(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "1464: def test_partial_url(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "1446:     ],",
          "1447: )",
          "1448: def test_parse_uri_percent_encoded(",
          "1450: ) -> None:",
          "1451:     text = (f\"GET {uri} HTTP/1.1\\r\\n\\r\\n\").encode()",
          "1452:     messages, upgrade, tail = parser.feed_data(text)",
          "",
          "[Removed Lines]",
          "1449:     parser: Any, uri: Any, path: Any, query: Any, fragment: Any",
          "",
          "[Added Lines]",
          "1490:     parser: HttpRequestParser, uri: str, path: str, query: Dict[str, str], fragment: str",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "1459:     assert msg.url.fragment == fragment",
          "1463:     if not isinstance(parser, HttpRequestParserPy):",
          "1464:         pytest.xfail(\"Not valid HTTP. Maybe update py-parser to reject later.\")",
          "1465:     text = (\"GET /\u043f\u0443\u0442\u044c?\u043a\u043b\u044e\u0447=\u0437\u043d\u0430\u0447#\u0444\u0440\u0430\u0433 HTTP/1.1\\r\\n\\r\\n\").encode()",
          "",
          "[Removed Lines]",
          "1462: def test_parse_uri_utf8(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "1503: def test_parse_uri_utf8(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "1472:     assert msg.url.fragment == \"\u0444\u0440\u0430\u0433\"",
          "1476:     text = (",
          "1477:         \"GET %s HTTP/1.1\\r\\n\\r\\n\" % quote(\"/\u043f\u0443\u0442\u044c?\u043a\u043b\u044e\u0447=\u0437\u043d\u0430\u0447#\u0444\u0440\u0430\u0433\", safe=\"/?=#\")",
          "1478:     ).encode()",
          "",
          "[Removed Lines]",
          "1475: def test_parse_uri_utf8_percent_encoded(parser: Any) -> None:",
          "",
          "[Added Lines]",
          "1516: def test_parse_uri_utf8_percent_encoded(parser: HttpRequestParser) -> None:",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "1490:     \"HttpRequestParserC\" not in dir(aiohttp.http_parser),",
          "1491:     reason=\"C based HTTP parser not available\",",
          "1492: )",
          "1494:     payload = b\"GET1 /test HTTP/1.1\\r\\n\\r\\n\"",
          "1495:     parser = HttpRequestParserC(",
          "1496:         protocol,",
          "",
          "[Removed Lines]",
          "1493: def test_parse_bad_method_for_c_parser_raises(loop: Any, protocol: Any) -> None:",
          "",
          "[Added Lines]",
          "1534: def test_parse_bad_method_for_c_parser_raises(",
          "1535:     loop: asyncio.AbstractEventLoop, protocol: BaseProtocol",
          "1536: ) -> None:",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "1507: class TestParsePayload:",
          "1510:         p = HttpPayloadParser(out)",
          "1511:         p.feed_data(b\"data\")",
          "1512:         p.feed_eof()",
          "",
          "[Removed Lines]",
          "1508:     async def test_parse_eof_payload(self, stream: Any) -> None:",
          "1509:         out = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1551:     async def test_parse_eof_payload(self, protocol: BaseProtocol) -> None:",
          "1552:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "1514:         assert out.is_eof()",
          "1515:         assert [(bytearray(b\"data\"))] == list(out._buffer)",
          "1520:         p = HttpPayloadParser(out, length=4)",
          "1521:         p.feed_data(b\"da\")",
          "",
          "[Removed Lines]",
          "1517:     async def test_parse_length_payload_eof(self, stream: Any) -> None:",
          "1518:         out = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1560:     async def test_parse_length_payload_eof(self, protocol: BaseProtocol) -> None:",
          "1561:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "1523:         with pytest.raises(http_exceptions.ContentLengthError):",
          "1524:             p.feed_eof()",
          "1528:         p = HttpPayloadParser(out, chunked=True)",
          "1529:         with pytest.raises(http_exceptions.TransferEncodingError):",
          "1530:             p.feed_data(b\"blah\\r\\n\")",
          "1531:         assert isinstance(out.exception(), http_exceptions.TransferEncodingError)",
          "1535:         p = HttpPayloadParser(out, chunked=True)",
          "1536:         p.feed_data(b\"4\\r\\nasdf\\r\\n0\\r\\n\")",
          "1537:         p.feed_data(b\"\\r\\n\")",
          "",
          "[Removed Lines]",
          "1526:     async def test_parse_chunked_payload_size_error(self, stream: Any) -> None:",
          "1527:         out = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "1533:     async def test_parse_chunked_payload_split_end(self, protocol: Any) -> None:",
          "1534:         out = aiohttp.StreamReader(protocol, 2**16, loop=None)",
          "",
          "[Added Lines]",
          "1569:     async def test_parse_chunked_payload_size_error(",
          "1570:         self, protocol: BaseProtocol",
          "1571:     ) -> None:",
          "1572:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "1578:     async def test_parse_chunked_payload_split_end(",
          "1579:         self, protocol: BaseProtocol",
          "1580:     ) -> None:",
          "1581:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "1539:         assert out.is_eof()",
          "1540:         assert b\"asdf\" == b\"\".join(out._buffer)",
          "1544:         p = HttpPayloadParser(out, chunked=True)",
          "1545:         p.feed_data(b\"4\\r\\nasdf\\r\\n0\\r\\n\\r\")",
          "1546:         p.feed_data(b\"\\n\")",
          "",
          "[Removed Lines]",
          "1542:     async def test_parse_chunked_payload_split_end2(self, protocol: Any) -> None:",
          "1543:         out = aiohttp.StreamReader(protocol, 2**16, loop=None)",
          "",
          "[Added Lines]",
          "1589:     async def test_parse_chunked_payload_split_end2(",
          "1590:         self, protocol: BaseProtocol",
          "1591:     ) -> None:",
          "1592:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "1549:         assert b\"asdf\" == b\"\".join(out._buffer)",
          "1551:     async def test_parse_chunked_payload_split_end_trailers(",
          "1553:     ) -> None:",
          "1555:         p = HttpPayloadParser(out, chunked=True)",
          "1556:         p.feed_data(b\"4\\r\\nasdf\\r\\n0\\r\\n\")",
          "1557:         p.feed_data(b\"Content-MD5: 912ec803b2ce49e4a541068d495ab570\\r\\n\")",
          "",
          "[Removed Lines]",
          "1552:         self, protocol: Any",
          "1554:         out = aiohttp.StreamReader(protocol, 2**16, loop=None)",
          "",
          "[Added Lines]",
          "1601:         self, protocol: BaseProtocol",
          "1603:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "1561:         assert b\"asdf\" == b\"\".join(out._buffer)",
          "1563:     async def test_parse_chunked_payload_split_end_trailers2(",
          "1565:     ) -> None:",
          "1567:         p = HttpPayloadParser(out, chunked=True)",
          "1568:         p.feed_data(b\"4\\r\\nasdf\\r\\n0\\r\\n\")",
          "1569:         p.feed_data(b\"Content-MD5: 912ec803b2ce49e4a541068d495ab570\\r\\n\\r\")",
          "",
          "[Removed Lines]",
          "1564:         self, protocol: Any",
          "1566:         out = aiohttp.StreamReader(protocol, 2**16, loop=None)",
          "",
          "[Added Lines]",
          "1613:         self, protocol: BaseProtocol",
          "1615:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "1573:         assert b\"asdf\" == b\"\".join(out._buffer)",
          "1575:     async def test_parse_chunked_payload_split_end_trailers3(",
          "1577:     ) -> None:",
          "1579:         p = HttpPayloadParser(out, chunked=True)",
          "1580:         p.feed_data(b\"4\\r\\nasdf\\r\\n0\\r\\nContent-MD5: \")",
          "1581:         p.feed_data(b\"912ec803b2ce49e4a541068d495ab570\\r\\n\\r\\n\")",
          "",
          "[Removed Lines]",
          "1576:         self, protocol: Any",
          "1578:         out = aiohttp.StreamReader(protocol, 2**16, loop=None)",
          "",
          "[Added Lines]",
          "1625:         self, protocol: BaseProtocol",
          "1627:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "1584:         assert b\"asdf\" == b\"\".join(out._buffer)",
          "1586:     async def test_parse_chunked_payload_split_end_trailers4(",
          "1588:     ) -> None:",
          "1590:         p = HttpPayloadParser(out, chunked=True)",
          "1591:         p.feed_data(b\"4\\r\\nasdf\\r\\n0\\r\\n\" b\"C\")",
          "1592:         p.feed_data(b\"ontent-MD5: 912ec803b2ce49e4a541068d495ab570\\r\\n\\r\\n\")",
          "",
          "[Removed Lines]",
          "1587:         self, protocol: Any",
          "1589:         out = aiohttp.StreamReader(protocol, 2**16, loop=None)",
          "",
          "[Added Lines]",
          "1636:         self, protocol: BaseProtocol",
          "1638:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "1594:         assert out.is_eof()",
          "1595:         assert b\"asdf\" == b\"\".join(out._buffer)",
          "1599:         p = HttpPayloadParser(out, length=2)",
          "1600:         eof, tail = p.feed_data(b\"1245\")",
          "1601:         assert eof",
          "",
          "[Removed Lines]",
          "1597:     async def test_http_payload_parser_length(self, stream: Any) -> None:",
          "1598:         out = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1646:     async def test_http_payload_parser_length(self, protocol: BaseProtocol) -> None:",
          "1647:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "1603:         assert b\"12\" == out._buffer[0]",
          "1604:         assert b\"45\" == tail",
          "1607:         # c=compressobj(wbits=15); b''.join([c.compress(b'data'), c.flush()])",
          "1608:         COMPRESSED = b\"x\\x9cKI,I\\x04\\x00\\x04\\x00\\x01\\x9b\"",
          "1610:         length = len(COMPRESSED)",
          "1612:         p = HttpPayloadParser(out, length=length, compression=\"deflate\")",
          "1613:         p.feed_data(COMPRESSED)",
          "1614:         assert b\"data\" == out._buffer[0]",
          "1615:         assert out.is_eof()",
          "1618:         \"\"\"Tests incorrectly formed data (no zlib headers).\"\"\"",
          "1619:         # c=compressobj(wbits=-15); b''.join([c.compress(b'data'), c.flush()])",
          "1620:         COMPRESSED = b\"KI,I\\x04\\x00\"",
          "1622:         length = len(COMPRESSED)",
          "1624:         p = HttpPayloadParser(out, length=length, compression=\"deflate\")",
          "1625:         p.feed_data(COMPRESSED)",
          "1626:         assert b\"data\" == out._buffer[0]",
          "1627:         assert out.is_eof()",
          "1630:         # c=compressobj(wbits=9); b''.join([c.compress(b'data'), c.flush()])",
          "1631:         COMPRESSED = b\"\\x18\\x95KI,I\\x04\\x00\\x04\\x00\\x01\\x9b\"",
          "1633:         length = len(COMPRESSED)",
          "1635:         p = HttpPayloadParser(out, length=length, compression=\"deflate\")",
          "1636:         p.feed_data(COMPRESSED)",
          "1638:         assert b\"data\" == out._buffer[0]",
          "1639:         assert out.is_eof()",
          "1643:         p = HttpPayloadParser(out, compression=\"deflate\")",
          "1644:         # Feeding one correct byte should be enough to choose exact",
          "1645:         # deflate decompressor",
          "",
          "[Removed Lines]",
          "1606:     async def test_http_payload_parser_deflate(self, stream: Any) -> None:",
          "1611:         out = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "1617:     async def test_http_payload_parser_deflate_no_hdrs(self, stream: Any) -> None:",
          "1623:         out = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "1629:     async def test_http_payload_parser_deflate_light(self, stream: Any) -> None:",
          "1634:         out = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "1641:     async def test_http_payload_parser_deflate_split(self, stream: Any) -> None:",
          "1642:         out = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1655:     async def test_http_payload_parser_deflate(self, protocol: BaseProtocol) -> None:",
          "1660:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "1666:     async def test_http_payload_parser_deflate_no_hdrs(",
          "1667:         self, protocol: BaseProtocol",
          "1668:     ) -> None:",
          "1674:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "1680:     async def test_http_payload_parser_deflate_light(",
          "1681:         self, protocol: BaseProtocol",
          "1682:     ) -> None:",
          "1687:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "1694:     async def test_http_payload_parser_deflate_split(",
          "1695:         self, protocol: BaseProtocol",
          "1696:     ) -> None:",
          "1697:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "1648:         p.feed_eof()",
          "1649:         assert b\"data\" == out._buffer[0]",
          "1653:         p = HttpPayloadParser(out, compression=\"deflate\")",
          "1654:         # Feeding one wrong byte should be enough to choose exact",
          "1655:         # deflate decompressor",
          "",
          "[Removed Lines]",
          "1651:     async def test_http_payload_parser_deflate_split_err(self, stream: Any) -> None:",
          "1652:         out = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1706:     async def test_http_payload_parser_deflate_split_err(",
          "1707:         self, protocol: BaseProtocol",
          "1708:     ) -> None:",
          "1709:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "1658:         p.feed_eof()",
          "1659:         assert b\"data\" == out._buffer[0]",
          "1663:         p = HttpPayloadParser(out, length=0)",
          "1664:         assert p.done",
          "1665:         assert out.is_eof()",
          "1667:     @pytest.mark.skipif(brotli is None, reason=\"brotli is not installed\")",
          "1669:         compressed = brotli.compress(b\"brotli data\")",
          "1671:         p = HttpPayloadParser(out, length=len(compressed), compression=\"br\")",
          "1672:         p.feed_data(compressed)",
          "1673:         assert b\"brotli data\" == out._buffer[0]",
          "",
          "[Removed Lines]",
          "1661:     async def test_http_payload_parser_length_zero(self, stream: Any) -> None:",
          "1662:         out = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "1668:     async def test_http_payload_brotli(self, stream: Any) -> None:",
          "1670:         out = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1718:     async def test_http_payload_parser_length_zero(",
          "1719:         self, protocol: BaseProtocol",
          "1720:     ) -> None:",
          "1721:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "1727:     async def test_http_payload_brotli(self, protocol: BaseProtocol) -> None:",
          "1729:         out = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "1677: class TestDeflateBuffer:",
          "1680:         dbuf = DeflateBuffer(buf, \"deflate\")",
          "1682:         dbuf.decompressor = mock.Mock()",
          "",
          "[Removed Lines]",
          "1678:     async def test_feed_data(self, stream: Any) -> None:",
          "1679:         buf = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1737:     async def test_feed_data(self, protocol: BaseProtocol) -> None:",
          "1738:         buf = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "1686:         dbuf.feed_data(b\"xxxx\")",
          "1687:         assert [b\"line\"] == list(buf._buffer)",
          "1691:         dbuf = DeflateBuffer(buf, \"deflate\")",
          "1693:         exc = ValueError()",
          "",
          "[Removed Lines]",
          "1689:     async def test_feed_data_err(self, stream: Any) -> None:",
          "1690:         buf = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1748:     async def test_feed_data_err(self, protocol: BaseProtocol) -> None:",
          "1749:         buf = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "1699:             # Should start with b'x', otherwise code switch mocked decoder.",
          "1700:             dbuf.feed_data(b\"xsomedata\")",
          "1704:         dbuf = DeflateBuffer(buf, \"deflate\")",
          "1706:         dbuf.decompressor = mock.Mock()",
          "",
          "[Removed Lines]",
          "1702:     async def test_feed_eof(self, stream: Any) -> None:",
          "1703:         buf = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1761:     async def test_feed_eof(self, protocol: BaseProtocol) -> None:",
          "1762:         buf = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "1710:         assert [b\"line\"] == list(buf._buffer)",
          "1711:         assert buf._eof",
          "1715:         dbuf = DeflateBuffer(buf, \"deflate\")",
          "1717:         dbuf.decompressor = mock.Mock()",
          "",
          "[Removed Lines]",
          "1713:     async def test_feed_eof_err_deflate(self, stream: Any) -> None:",
          "1714:         buf = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1772:     async def test_feed_eof_err_deflate(self, protocol: BaseProtocol) -> None:",
          "1773:         buf = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "1721:         with pytest.raises(http_exceptions.ContentEncodingError):",
          "1722:             dbuf.feed_eof()",
          "1726:         dbuf = DeflateBuffer(buf, \"gzip\")",
          "1728:         dbuf.decompressor = mock.Mock()",
          "",
          "[Removed Lines]",
          "1724:     async def test_feed_eof_no_err_gzip(self, stream: Any) -> None:",
          "1725:         buf = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1783:     async def test_feed_eof_no_err_gzip(self, protocol: BaseProtocol) -> None:",
          "1784:         buf = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "1732:         dbuf.feed_eof()",
          "1733:         assert [b\"line\"] == list(buf._buffer)",
          "1737:         dbuf = DeflateBuffer(buf, \"br\")",
          "1739:         dbuf.decompressor = mock.Mock()",
          "",
          "[Removed Lines]",
          "1735:     async def test_feed_eof_no_err_brotli(self, stream: Any) -> None:",
          "1736:         buf = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1794:     async def test_feed_eof_no_err_brotli(self, protocol: BaseProtocol) -> None:",
          "1795:         buf = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "1743:         dbuf.feed_eof()",
          "1744:         assert [b\"line\"] == list(buf._buffer)",
          "1748:         dbuf = DeflateBuffer(buf, \"deflate\")",
          "1749:         dbuf.feed_eof()",
          "",
          "[Removed Lines]",
          "1746:     async def test_empty_body(self, stream: Any) -> None:",
          "1747:         buf = aiohttp.FlowControlDataQueue(stream, 2**16, loop=asyncio.get_event_loop())",
          "",
          "[Added Lines]",
          "1805:     async def test_empty_body(self, protocol: BaseProtocol) -> None:",
          "1806:         buf = aiohttp.StreamReader(protocol, 2**16, loop=asyncio.get_running_loop())",
          "",
          "---------------"
        ],
        "tests/test_http_writer.py||tests/test_http_writer.py": [
          "File: tests/test_http_writer.py -> tests/test_http_writer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # Tests for aiohttp/http_writer.py",
          "3: import array",
          "4: from typing import Any",
          "5: from unittest import mock",
          "",
          "[Removed Lines]",
          "1: # type: ignore",
          "",
          "[Added Lines]",
          "3: import asyncio",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: from multidict import CIMultiDict",
          "10: from aiohttp import http",
          "11: from aiohttp.test_utils import make_mocked_coro",
          "14: @pytest.fixture",
          "16:     return bytearray()",
          "19: @pytest.fixture",
          "24:         buf.extend(chunk)",
          "26:     transport.write.side_effect = write",
          "",
          "[Removed Lines]",
          "15: def buf():",
          "20: def transport(buf: Any):",
          "21:     transport = mock.Mock()",
          "23:     def write(chunk):",
          "",
          "[Added Lines]",
          "11: from aiohttp.base_protocol import BaseProtocol",
          "16: def buf() -> bytearray:",
          "21: def transport(buf: bytearray) -> Any:",
          "22:     transport = mock.create_autospec(asyncio.Transport, spec_set=True, instance=True)",
          "24:     def write(chunk: bytes) -> None:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31: @pytest.fixture",
          "39:     writer = http.StreamWriter(protocol, loop)",
          "40:     assert writer.protocol == protocol",
          "41:     assert writer.transport == transport",
          "46:     msg = http.StreamWriter(protocol, loop)",
          "48:     await msg.write(b\"data1\")",
          "49:     await msg.write(b\"data2\")",
          "50:     await msg.write_eof()",
          "53:     assert b\"data1data2\" == content.split(b\"\\r\\n\\r\\n\", 1)[-1]",
          "56: async def test_write_payload_chunked(",
          "58: ) -> None:",
          "59:     msg = http.StreamWriter(protocol, loop)",
          "60:     msg.enable_chunking()",
          "",
          "[Removed Lines]",
          "32: def protocol(loop: Any, transport: Any):",
          "33:     protocol = mock.Mock(transport=transport)",
          "34:     protocol._drain_helper = make_mocked_coro()",
          "35:     return protocol",
          "38: def test_payloadwriter_properties(transport: Any, protocol: Any, loop: Any) -> None:",
          "44: async def test_write_payload_eof(transport: Any, protocol: Any, loop: Any) -> None:",
          "45:     write = transport.write = mock.Mock()",
          "52:     content = b\"\".join([c[1][0] for c in list(write.mock_calls)])",
          "57:     buf: Any, protocol: Any, transport: Any, loop: Any",
          "",
          "[Added Lines]",
          "33: def protocol(loop: asyncio.AbstractEventLoop, transport: asyncio.Transport) -> Any:",
          "34:     return mock.create_autospec(",
          "35:         BaseProtocol, spec_set=True, instance=True, transport=transport",
          "36:     )",
          "39: def test_payloadwriter_properties(",
          "40:     transport: asyncio.Transport,",
          "41:     protocol: BaseProtocol,",
          "42:     loop: asyncio.AbstractEventLoop,",
          "43: ) -> None:",
          "49: async def test_write_payload_eof(",
          "50:     transport: asyncio.Transport,",
          "51:     protocol: BaseProtocol,",
          "52:     loop: asyncio.AbstractEventLoop,",
          "53: ) -> None:",
          "60:     content = b\"\".join([c[1][0] for c in list(transport.write.mock_calls)])  # type: ignore[attr-defined]",
          "65:     buf: bytearray,",
          "66:     protocol: BaseProtocol,",
          "67:     transport: asyncio.Transport,",
          "68:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "67: async def test_write_payload_chunked_multiple(",
          "69: ) -> None:",
          "70:     msg = http.StreamWriter(protocol, loop)",
          "71:     msg.enable_chunking()",
          "",
          "[Removed Lines]",
          "68:     buf: Any, protocol: Any, transport: Any, loop: Any",
          "",
          "[Added Lines]",
          "79:     buf: bytearray,",
          "80:     protocol: BaseProtocol,",
          "81:     transport: asyncio.Transport,",
          "82:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "76:     assert b\"5\\r\\ndata1\\r\\n5\\r\\ndata2\\r\\n0\\r\\n\\r\\n\" == buf",
          "82:     msg = http.StreamWriter(protocol, loop)",
          "83:     msg.length = 2",
          "84:     await msg.write(b\"d\")",
          "85:     await msg.write(b\"ata\")",
          "86:     await msg.write_eof()",
          "89:     assert b\"da\" == content.split(b\"\\r\\n\\r\\n\", 1)[-1]",
          "92: async def test_write_payload_chunked_filter(",
          "94: ) -> None:",
          "97:     msg = http.StreamWriter(protocol, loop)",
          "98:     msg.enable_chunking()",
          "99:     await msg.write(b\"da\")",
          "100:     await msg.write(b\"ta\")",
          "101:     await msg.write_eof()",
          "104:     assert content.endswith(b\"2\\r\\nda\\r\\n2\\r\\nta\\r\\n0\\r\\n\\r\\n\")",
          "107: async def test_write_payload_chunked_filter_mutiple_chunks(",
          "109: ) -> None:",
          "111:     msg = http.StreamWriter(protocol, loop)",
          "112:     msg.enable_chunking()",
          "113:     await msg.write(b\"da\")",
          "",
          "[Removed Lines]",
          "79: async def test_write_payload_length(protocol: Any, transport: Any, loop: Any) -> None:",
          "80:     write = transport.write = mock.Mock()",
          "88:     content = b\"\".join([c[1][0] for c in list(write.mock_calls)])",
          "93:     protocol: Any, transport: Any, loop: Any",
          "95:     write = transport.write = mock.Mock()",
          "103:     content = b\"\".join([c[1][0] for c in list(write.mock_calls)])",
          "108:     protocol: Any, transport: Any, loop: Any",
          "110:     write = transport.write = mock.Mock()",
          "",
          "[Added Lines]",
          "93: async def test_write_payload_length(",
          "94:     protocol: BaseProtocol,",
          "95:     transport: asyncio.Transport,",
          "96:     loop: asyncio.AbstractEventLoop,",
          "97: ) -> None:",
          "104:     content = b\"\".join([c[1][0] for c in list(transport.write.mock_calls)])  # type: ignore[attr-defined]",
          "109:     protocol: BaseProtocol,",
          "110:     transport: asyncio.Transport,",
          "111:     loop: asyncio.AbstractEventLoop,",
          "119:     content = b\"\".join([c[1][0] for c in list(transport.write.mock_calls)])  # type: ignore[attr-defined]",
          "124:     protocol: BaseProtocol,",
          "125:     transport: asyncio.Transport,",
          "126:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "116:     await msg.write(b\"at\")",
          "117:     await msg.write(b\"a2\")",
          "118:     await msg.write_eof()",
          "120:     assert content.endswith(",
          "121:         b\"2\\r\\nda\\r\\n2\\r\\nta\\r\\n2\\r\\n1d\\r\\n2\\r\\nat\\r\\n\" b\"2\\r\\na2\\r\\n0\\r\\n\\r\\n\"",
          "122:     )",
          "125: async def test_write_payload_deflate_compression(",
          "127: ) -> None:",
          "128:     COMPRESSED = b\"x\\x9cKI,I\\x04\\x00\\x04\\x00\\x01\\x9b\"",
          "130:     msg = http.StreamWriter(protocol, loop)",
          "131:     msg.enable_compression(\"deflate\")",
          "132:     await msg.write(b\"data\")",
          "133:     await msg.write_eof()",
          "136:     assert all(chunks)",
          "137:     content = b\"\".join(chunks)",
          "138:     assert COMPRESSED == content.split(b\"\\r\\n\\r\\n\", 1)[-1]",
          "141: async def test_write_payload_deflate_and_chunked(",
          "143: ) -> None:",
          "144:     msg = http.StreamWriter(protocol, loop)",
          "145:     msg.enable_compression(\"deflate\")",
          "",
          "[Removed Lines]",
          "119:     content = b\"\".join([c[1][0] for c in list(write.mock_calls)])",
          "126:     protocol: Any, transport: Any, loop: Any",
          "129:     write = transport.write = mock.Mock()",
          "135:     chunks = [c[1][0] for c in list(write.mock_calls)]",
          "142:     buf: Any, protocol: Any, transport: Any, loop: Any",
          "",
          "[Added Lines]",
          "136:     content = b\"\".join([c[1][0] for c in list(transport.write.mock_calls)])  # type: ignore[attr-defined]",
          "143:     protocol: BaseProtocol,",
          "144:     transport: asyncio.Transport,",
          "145:     loop: asyncio.AbstractEventLoop,",
          "153:     chunks = [c[1][0] for c in list(transport.write.mock_calls)]  # type: ignore[attr-defined]",
          "160:     buf: bytearray,",
          "161:     protocol: BaseProtocol,",
          "162:     transport: asyncio.Transport,",
          "163:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "156: async def test_write_payload_bytes_memoryview(",
          "158: ) -> None:",
          "159:     msg = http.StreamWriter(protocol, loop)",
          "",
          "[Removed Lines]",
          "157:     buf: Any, protocol: Any, transport: Any, loop: Any",
          "",
          "[Added Lines]",
          "178:     buf: bytearray,",
          "179:     protocol: BaseProtocol,",
          "180:     transport: asyncio.Transport,",
          "181:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "170: async def test_write_payload_short_ints_memoryview(",
          "172: ) -> None:",
          "173:     msg = http.StreamWriter(protocol, loop)",
          "174:     msg.enable_chunking()",
          "",
          "[Removed Lines]",
          "171:     buf: Any, protocol: Any, transport: Any, loop: Any",
          "",
          "[Added Lines]",
          "195:     buf: bytearray,",
          "196:     protocol: BaseProtocol,",
          "197:     transport: asyncio.Transport,",
          "198:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "188: async def test_write_payload_2d_shape_memoryview(",
          "190: ) -> None:",
          "191:     msg = http.StreamWriter(protocol, loop)",
          "192:     msg.enable_chunking()",
          "",
          "[Removed Lines]",
          "189:     buf: Any, protocol: Any, transport: Any, loop: Any",
          "",
          "[Added Lines]",
          "216:     buf: bytearray,",
          "217:     protocol: BaseProtocol,",
          "218:     transport: asyncio.Transport,",
          "219:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "204: async def test_write_payload_slicing_long_memoryview(",
          "206: ) -> None:",
          "207:     msg = http.StreamWriter(protocol, loop)",
          "208:     msg.length = 4",
          "",
          "[Removed Lines]",
          "205:     buf: Any, protocol: Any, transport: Any, loop: Any",
          "",
          "[Added Lines]",
          "235:     buf: bytearray,",
          "236:     protocol: BaseProtocol,",
          "237:     transport: asyncio.Transport,",
          "238:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "217:     assert thing == buf",
          "221:     msg = http.StreamWriter(protocol, loop)",
          "232:     on_chunk_sent = make_mocked_coro()",
          "233:     msg = http.StreamWriter(protocol, loop, on_chunk_sent=on_chunk_sent)",
          "234:     chunk = b\"1\"",
          "",
          "[Removed Lines]",
          "220: async def test_write_drain(protocol: Any, transport: Any, loop: Any) -> None:",
          "222:     msg.drain = make_mocked_coro()",
          "223:     await msg.write(b\"1\" * (64 * 1024 * 2), drain=False)",
          "224:     assert not msg.drain.called",
          "226:     await msg.write(b\"1\", drain=True)",
          "227:     assert msg.drain.called",
          "228:     assert msg.buffer_size == 0",
          "231: async def test_write_calls_callback(protocol: Any, transport: Any, loop: Any) -> None:",
          "",
          "[Added Lines]",
          "253: async def test_write_drain(",
          "254:     protocol: BaseProtocol,",
          "255:     transport: asyncio.Transport,",
          "256:     loop: asyncio.AbstractEventLoop,",
          "257: ) -> None:",
          "259:     with mock.patch.object(msg, \"drain\", autospec=True, spec_set=True) as m:",
          "260:         await msg.write(b\"1\" * (64 * 1024 * 2), drain=False)",
          "261:         assert not m.called",
          "263:         await msg.write(b\"1\", drain=True)",
          "264:         assert m.called",
          "265:         assert msg.buffer_size == 0",
          "268: async def test_write_calls_callback(",
          "269:     protocol: BaseProtocol,",
          "270:     transport: asyncio.Transport,",
          "271:     loop: asyncio.AbstractEventLoop,",
          "272: ) -> None:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "240: async def test_write_eof_calls_callback(",
          "242: ) -> None:",
          "243:     on_chunk_sent = make_mocked_coro()",
          "244:     msg = http.StreamWriter(protocol, loop, on_chunk_sent=on_chunk_sent)",
          "",
          "[Removed Lines]",
          "241:     protocol: Any, transport: Any, loop: Any",
          "",
          "[Added Lines]",
          "282:     protocol: BaseProtocol,",
          "283:     transport: asyncio.Transport,",
          "284:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "251: async def test_write_to_closing_transport(",
          "253: ) -> None:",
          "254:     msg = http.StreamWriter(protocol, loop)",
          "256:     await msg.write(b\"Before closing\")",
          "259:     with pytest.raises(ConnectionResetError):",
          "260:         await msg.write(b\"After closing\")",
          "263: async def test_write_to_closed_transport(",
          "265: ) -> None:",
          "266:     \"\"\"Test that writing to a closed transport raises ConnectionResetError.",
          "",
          "[Removed Lines]",
          "252:     protocol: Any, transport: Any, loop: Any",
          "257:     transport.is_closing.return_value = True",
          "264:     protocol: Any, transport: Any, loop: Any",
          "",
          "[Added Lines]",
          "295:     protocol: BaseProtocol,",
          "296:     transport: asyncio.Transport,",
          "297:     loop: asyncio.AbstractEventLoop,",
          "302:     transport.is_closing.return_value = True  # type: ignore[attr-defined]",
          "309:     protocol: BaseProtocol,",
          "310:     transport: asyncio.Transport,",
          "311:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "277:         await msg.write(b\"After transport closed\")",
          "281:     msg = http.StreamWriter(protocol, loop)",
          "282:     await msg.drain()",
          "287:     msg = http.StreamWriter(protocol, loop)",
          "288:     msg._protocol.transport = None",
          "289:     await msg.drain()",
          "293: async def test_write_headers_prevents_injection(",
          "295: ) -> None:",
          "296:     msg = http.StreamWriter(protocol, loop)",
          "297:     status_line = \"HTTP/1.1 200 OK\"",
          "",
          "[Removed Lines]",
          "280: async def test_drain(protocol: Any, transport: Any, loop: Any) -> None:",
          "283:     assert protocol._drain_helper.called",
          "286: async def test_drain_no_transport(protocol: Any, transport: Any, loop: Any) -> None:",
          "290:     assert not protocol._drain_helper.called",
          "294:     protocol: Any, transport: Any, loop: Any",
          "",
          "[Added Lines]",
          "327: async def test_drain(",
          "328:     protocol: BaseProtocol,",
          "329:     transport: asyncio.Transport,",
          "330:     loop: asyncio.AbstractEventLoop,",
          "331: ) -> None:",
          "334:     assert protocol._drain_helper.called  # type: ignore[attr-defined]",
          "337: async def test_drain_no_transport(",
          "338:     protocol: BaseProtocol,",
          "339:     transport: asyncio.Transport,",
          "340:     loop: asyncio.AbstractEventLoop,",
          "341: ) -> None:",
          "345:     assert not protocol._drain_helper.called  # type: ignore[attr-defined]",
          "349:     protocol: BaseProtocol,",
          "350:     transport: asyncio.Transport,",
          "351:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------"
        ],
        "tests/test_multipart.py||tests/test_multipart.py": [
          "File: tests/test_multipart.py -> tests/test_multipart.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import asyncio",
          "3: import io",
          "4: import json",
          "5: import pathlib",
          "6: import sys",
          "7: import zlib",
          "9: from unittest import mock",
          "11: import pytest",
          "13: import aiohttp",
          "14: from aiohttp import payload",
          "",
          "[Removed Lines]",
          "1: # type: ignore",
          "8: from typing import Any, Optional",
          "",
          "[Added Lines]",
          "7: from types import TracebackType",
          "8: from typing import Dict, Optional, Tuple, Type",
          "12: from multidict import CIMultiDict, CIMultiDictProxy",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:     CONTENT_TYPE,",
          "20: )",
          "21: from aiohttp.helpers import parse_mimetype",
          "23: from aiohttp.streams import StreamReader",
          "26: BOUNDARY: bytes = b\"--:\"",
          "29: @pytest.fixture",
          "31:     return bytearray()",
          "34: @pytest.fixture",
          "36:     writer = mock.Mock()",
          "39:         buf.extend(chunk)",
          "41:     writer.write.side_effect = write",
          "",
          "[Removed Lines]",
          "22: from aiohttp.multipart import MultipartResponseWrapper",
          "24: from aiohttp.test_utils import make_mocked_coro",
          "30: def buf():",
          "35: def stream(buf: Any):",
          "38:     async def write(chunk):",
          "",
          "[Added Lines]",
          "23: from aiohttp.multipart import BodyPartReader, MultipartReader, MultipartResponseWrapper",
          "26: if sys.version_info >= (3, 11):",
          "27:     from typing import Self",
          "28: else:",
          "29:     from typing import TypeVar",
          "31:     Self = TypeVar(\"Self\", bound=\"Stream\")",
          "37: def buf() -> bytearray:",
          "42: def stream(buf: bytearray) -> mock.Mock:",
          "45:     async def write(chunk: bytes) -> None:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45: @pytest.fixture",
          "47:     return aiohttp.MultipartWriter(boundary=\":\")",
          "63:         self.content = io.BytesIO(content)",
          "66:         return self.content.read(size)",
          "69:         return self.content.tell() == len(self.content.getbuffer())",
          "72:         return self.content.readline()",
          "75:         self.content = io.BytesIO(data + self.content.read())",
          "78:         return self",
          "81:         self.content.close()",
          "84: class StreamWithShortenRead(Stream):",
          "86:         self._first = True",
          "87:         super().__init__(content)",
          "90:         if size is not None and self._first:",
          "91:             self._first = False",
          "92:             size = size // 2",
          "",
          "[Removed Lines]",
          "46: def writer():",
          "50: class Response:",
          "51:     headers: Any",
          "52:     content: Any",
          "54:     def __init__(self, headers: Any, content: Any) -> None:",
          "55:         self.headers = headers",
          "56:         self.content = content",
          "59: class Stream:",
          "60:     content: Any",
          "62:     def __init__(self, content: Any) -> None:",
          "65:     async def read(self, size: Optional[Any] = None):",
          "68:     def at_eof(self):",
          "71:     async def readline(self):",
          "74:     def unread_data(self, data: Any) -> None:",
          "77:     def __enter__(self):",
          "80:     def __exit__(self, exc_type, exc_value, traceback):",
          "85:     def __init__(self, content: Any) -> None:",
          "89:     async def read(self, size: Optional[Any] = None):",
          "",
          "[Added Lines]",
          "53: def writer() -> aiohttp.MultipartWriter:",
          "57: class Stream(StreamReader):",
          "58:     def __init__(self, content: bytes) -> None:",
          "61:     async def read(self, size: Optional[int] = None) -> bytes:",
          "64:     def at_eof(self) -> bool:",
          "67:     async def readline(self) -> bytes:",
          "70:     def unread_data(self, data: bytes) -> None:",
          "73:     def __enter__(self) -> Self:",
          "76:     def __exit__(",
          "77:         self,",
          "78:         exc_type: Optional[Type[BaseException]],",
          "79:         exc_value: Optional[BaseException],",
          "80:         traceback: Optional[TracebackType],",
          "81:     ) -> None:",
          "85: class Response:",
          "86:     def __init__(self, headers: CIMultiDictProxy[str], content: Stream) -> None:",
          "87:         self.headers = headers",
          "88:         self.content = content",
          "92:     def __init__(self, content: bytes) -> None:",
          "96:     async def read(self, size: Optional[int] = None) -> bytes:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96: class TestMultipartResponseWrapper:",
          "97:     def test_at_eof(self) -> None:",
          "99:         wrapper.at_eof()",
          "102:     async def test_next(self) -> None:",
          "106:         await wrapper.next()",
          "109:     async def test_release(self) -> None:",
          "111:         await wrapper.release()",
          "114:     async def test_release_when_stream_at_eof(self) -> None:",
          "118:         await wrapper.next()",
          "123: class TestPartReader:",
          "124:     async def test_next(self) -> None:",
          "125:         with Stream(b\"Hello, world!\\r\\n--:\") as stream:",
          "127:             result = await obj.next()",
          "128:             assert b\"Hello, world!\" == result",
          "129:             assert obj.at_eof()",
          "131:     async def test_next_next(self) -> None:",
          "132:         with Stream(b\"Hello, world!\\r\\n--:\") as stream:",
          "134:             result = await obj.next()",
          "135:             assert b\"Hello, world!\" == result",
          "136:             assert obj.at_eof()",
          "",
          "[Removed Lines]",
          "98:         wrapper = MultipartResponseWrapper(mock.Mock(), mock.Mock())",
          "100:         assert wrapper.resp.content.at_eof.called",
          "103:         wrapper = MultipartResponseWrapper(mock.Mock(), mock.Mock())",
          "104:         wrapper.stream.next = make_mocked_coro(b\"\")",
          "105:         wrapper.stream.at_eof.return_value = False",
          "107:         assert wrapper.stream.next.called",
          "110:         wrapper = MultipartResponseWrapper(mock.Mock(), mock.Mock())",
          "112:         assert wrapper.resp.release.called",
          "115:         wrapper = MultipartResponseWrapper(mock.Mock(), mock.Mock())",
          "116:         wrapper.stream.next = make_mocked_coro(b\"\")",
          "117:         wrapper.stream.at_eof.return_value = True",
          "119:         assert wrapper.stream.next.called",
          "120:         assert wrapper.resp.release.called",
          "126:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "133:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "",
          "[Added Lines]",
          "105:         m_resp = mock.create_autospec(aiohttp.ClientResponse, spec_set=True)",
          "106:         m_stream = mock.create_autospec(MultipartReader, spec_set=True)",
          "107:         wrapper = MultipartResponseWrapper(m_resp, m_stream)",
          "109:         assert m_resp.content.at_eof.called",
          "112:         m_resp = mock.create_autospec(aiohttp.ClientResponse, spec_set=True)",
          "113:         m_stream = mock.create_autospec(MultipartReader, spec_set=True)",
          "114:         wrapper = MultipartResponseWrapper(m_resp, m_stream)",
          "115:         m_stream.next.return_value = b\"\"",
          "116:         m_stream.at_eof.return_value = False",
          "118:         assert m_stream.next.called",
          "121:         m_resp = mock.create_autospec(aiohttp.ClientResponse, spec_set=True)",
          "122:         m_stream = mock.create_autospec(MultipartReader, spec_set=True)",
          "123:         wrapper = MultipartResponseWrapper(m_resp, m_stream)",
          "125:         assert m_resp.release.called",
          "128:         m_resp = mock.create_autospec(aiohttp.ClientResponse, spec_set=True)",
          "129:         m_stream = mock.create_autospec(MultipartReader, spec_set=True)",
          "130:         wrapper = MultipartResponseWrapper(m_resp, m_stream)",
          "131:         m_stream.next.return_value = b\"\"",
          "132:         m_stream.at_eof.return_value = True",
          "134:         assert m_stream.next.called",
          "135:         assert m_resp.release.called",
          "141:             d = CIMultiDictProxy[str](CIMultiDict())",
          "142:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "149:             d = CIMultiDictProxy[str](CIMultiDict())",
          "150:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:     async def test_read(self) -> None:",
          "141:         with Stream(b\"Hello, world!\\r\\n--:\") as stream:",
          "143:             result = await obj.read()",
          "144:             assert b\"Hello, world!\" == result",
          "145:             assert obj.at_eof()",
          "147:     async def test_read_chunk_at_eof(self) -> None:",
          "148:         with Stream(b\"--:\") as stream:",
          "150:             obj._at_eof = True",
          "151:             result = await obj.read_chunk()",
          "152:         assert b\"\" == result",
          "154:     async def test_read_chunk_without_content_length(self) -> None:",
          "155:         with Stream(b\"Hello, world!\\r\\n--:\") as stream:",
          "157:             c1 = await obj.read_chunk(8)",
          "158:             c2 = await obj.read_chunk(8)",
          "159:             c3 = await obj.read_chunk(8)",
          "",
          "[Removed Lines]",
          "142:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "149:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "156:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "",
          "[Added Lines]",
          "159:             d = CIMultiDictProxy[str](CIMultiDict())",
          "160:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "167:             d = CIMultiDictProxy[str](CIMultiDict())",
          "168:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "175:             d = CIMultiDictProxy[str](CIMultiDict())",
          "176:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:     async def test_read_incomplete_chunk(self) -> None:",
          "164:         with Stream(b\"\") as stream:",
          "167:                 return data",
          "169:             with mock.patch.object(",
          "",
          "[Removed Lines]",
          "166:             def prepare(data):",
          "",
          "[Added Lines]",
          "186:             def prepare(data: bytes) -> bytes:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "176:                     prepare(b\"\"),",
          "177:                 ],",
          "178:             ):",
          "180:                 c1 = await obj.read_chunk(8)",
          "181:                 assert c1 == b\"Hello, \"",
          "182:                 c2 = await obj.read_chunk(8)",
          "",
          "[Removed Lines]",
          "179:                 obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "",
          "[Added Lines]",
          "199:                 d = CIMultiDictProxy[str](CIMultiDict())",
          "200:                 obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "187:     async def test_read_all_at_once(self) -> None:",
          "188:         with Stream(b\"Hello, World!\\r\\n--:--\\r\\n\") as stream:",
          "190:             result = await obj.read_chunk()",
          "191:             assert b\"Hello, World!\" == result",
          "192:             result = await obj.read_chunk()",
          "",
          "[Removed Lines]",
          "189:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "",
          "[Added Lines]",
          "210:             d = CIMultiDictProxy[str](CIMultiDict())",
          "211:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "196:     async def test_read_incomplete_body_chunked(self) -> None:",
          "197:         with Stream(b\"Hello, World!\\r\\n-\") as stream:",
          "199:             result = b\"\"",
          "200:             with pytest.raises(AssertionError):",
          "201:                 for _ in range(4):",
          "",
          "[Removed Lines]",
          "198:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "",
          "[Added Lines]",
          "220:             d = CIMultiDictProxy[str](CIMultiDict())",
          "221:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "205:     async def test_read_boundary_with_incomplete_chunk(self) -> None:",
          "206:         with Stream(b\"\") as stream:",
          "209:                 return data",
          "211:             with mock.patch.object(",
          "",
          "[Removed Lines]",
          "208:             def prepare(data):",
          "",
          "[Added Lines]",
          "231:             def prepare(data: bytes) -> bytes:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "218:                     prepare(b\"\"),",
          "219:                 ],",
          "220:             ):",
          "222:                 c1 = await obj.read_chunk(12)",
          "223:                 assert c1 == b\"Hello, World\"",
          "224:                 c2 = await obj.read_chunk(8)",
          "",
          "[Removed Lines]",
          "221:                 obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "",
          "[Added Lines]",
          "244:                 d = CIMultiDictProxy[str](CIMultiDict())",
          "245:                 obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "229:     async def test_multi_read_chunk(self) -> None:",
          "230:         with Stream(b\"Hello,\\r\\n--:\\r\\n\\r\\nworld!\\r\\n--:--\") as stream:",
          "232:             result = await obj.read_chunk(8)",
          "233:             assert b\"Hello,\" == result",
          "234:             result = await obj.read_chunk(8)",
          "",
          "[Removed Lines]",
          "231:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "",
          "[Added Lines]",
          "255:             d = CIMultiDictProxy[str](CIMultiDict())",
          "256:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "238:     async def test_read_chunk_properly_counts_read_bytes(self) -> None:",
          "239:         expected = b\".\" * 10",
          "240:         size = len(expected)",
          "241:         with StreamWithShortenRead(expected + b\"\\r\\n--:--\") as stream:",
          "243:             result = bytearray()",
          "244:             while True:",
          "245:                 chunk = await obj.read_chunk()",
          "",
          "[Removed Lines]",
          "242:             obj = aiohttp.BodyPartReader(BOUNDARY, {\"CONTENT-LENGTH\": size}, stream)",
          "",
          "[Added Lines]",
          "266:         h = CIMultiDictProxy(CIMultiDict({\"CONTENT-LENGTH\": str(size)}))",
          "268:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "253:     async def test_read_does_not_read_boundary(self) -> None:",
          "254:         with Stream(b\"Hello, world!\\r\\n--:\") as stream:",
          "256:             result = await obj.read()",
          "257:             assert b\"Hello, world!\" == result",
          "258:             assert b\"--:\" == (await stream.read())",
          "260:     async def test_multiread(self) -> None:",
          "261:         with Stream(b\"Hello,\\r\\n--:\\r\\n\\r\\nworld!\\r\\n--:--\") as stream:",
          "263:             result = await obj.read()",
          "264:             assert b\"Hello,\" == result",
          "265:             result = await obj.read()",
          "",
          "[Removed Lines]",
          "255:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "262:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "",
          "[Added Lines]",
          "281:             d = CIMultiDictProxy[str](CIMultiDict())",
          "282:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "289:             d = CIMultiDictProxy[str](CIMultiDict())",
          "290:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "269:     async def test_read_multiline(self) -> None:",
          "270:         with Stream(b\"Hello\\n,\\r\\nworld!\\r\\n--:--\") as stream:",
          "272:             result = await obj.read()",
          "273:             assert b\"Hello\\n,\\r\\nworld!\" == result",
          "274:             result = await obj.read()",
          "",
          "[Removed Lines]",
          "271:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "",
          "[Added Lines]",
          "299:             d = CIMultiDictProxy[str](CIMultiDict())",
          "300:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "276:             assert obj.at_eof()",
          "278:     async def test_read_respects_content_length(self) -> None:",
          "279:         with Stream(b\".\" * 100500 + b\"\\r\\n--:--\") as stream:",
          "281:             result = await obj.read()",
          "282:             assert b\".\" * 100500 == result",
          "283:             assert obj.at_eof()",
          "285:     async def test_read_with_content_encoding_gzip(self) -> None:",
          "286:         with Stream(",
          "287:             b\"\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x0b\\xc9\\xccMU\"",
          "288:             b\"(\\xc9W\\x08J\\xcdI\\xacP\\x04\\x00$\\xfb\\x9eV\\x0e\\x00\\x00\\x00\"",
          "289:             b\"\\r\\n--:--\"",
          "290:         ) as stream:",
          "292:             result = await obj.read(decode=True)",
          "293:         assert b\"Time to Relax!\" == result",
          "295:     async def test_read_with_content_encoding_deflate(self) -> None:",
          "296:         with Stream(b\"\\x0b\\xc9\\xccMU(\\xc9W\\x08J\\xcdI\\xacP\\x04\\x00\\r\\n--:--\") as stream:",
          "300:             result = await obj.read(decode=True)",
          "301:         assert b\"Time to Relax!\" == result",
          "",
          "[Removed Lines]",
          "280:             obj = aiohttp.BodyPartReader(BOUNDARY, {\"CONTENT-LENGTH\": 100500}, stream)",
          "291:             obj = aiohttp.BodyPartReader(BOUNDARY, {CONTENT_ENCODING: \"gzip\"}, stream)",
          "297:             obj = aiohttp.BodyPartReader(",
          "298:                 BOUNDARY, {CONTENT_ENCODING: \"deflate\"}, stream",
          "299:             )",
          "",
          "[Added Lines]",
          "308:         h = CIMultiDictProxy(CIMultiDict({\"CONTENT-LENGTH\": \"100500\"}))",
          "310:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "316:         h = CIMultiDictProxy(CIMultiDict({CONTENT_ENCODING: \"gzip\"}))",
          "322:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "327:         h = CIMultiDictProxy(CIMultiDict({CONTENT_ENCODING: \"deflate\"}))",
          "329:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "306:             b\"(\\xc9W\\x08J\\xcdI\\xacP\\x04\\x00$\\xfb\\x9eV\\x0e\\x00\\x00\\x00\"",
          "307:             b\"\\r\\n\"",
          "308:         )",
          "309:         with Stream(thing + b\"--:--\") as stream:",
          "313:             result = await obj.read(decode=True)",
          "314:         assert thing[:-2] == result",
          "316:     async def test_read_with_content_encoding_unknown(self) -> None:",
          "317:         with Stream(b\"\\x0e4Time to Relax!\\r\\n--:--\") as stream:",
          "319:             with pytest.raises(RuntimeError):",
          "320:                 await obj.read(decode=True)",
          "322:     async def test_read_with_content_transfer_encoding_base64(self) -> None:",
          "323:         with Stream(b\"VGltZSB0byBSZWxheCE=\\r\\n--:--\") as stream:",
          "327:             result = await obj.read(decode=True)",
          "328:         assert b\"Time to Relax!\" == result",
          "330:     async def test_decode_with_content_transfer_encoding_base64(self) -> None:",
          "331:         with Stream(b\"VG\\r\\r\\nltZSB0byBSZ\\r\\nWxheCE=\\r\\n--:--\") as stream:",
          "335:             result = b\"\"",
          "336:             while not obj.at_eof():",
          "337:                 chunk = await obj.read_chunk(size=6)",
          "",
          "[Removed Lines]",
          "310:             obj = aiohttp.BodyPartReader(",
          "311:                 BOUNDARY, {CONTENT_ENCODING: \"identity\"}, stream",
          "312:             )",
          "318:             obj = aiohttp.BodyPartReader(BOUNDARY, {CONTENT_ENCODING: \"snappy\"}, stream)",
          "324:             obj = aiohttp.BodyPartReader(",
          "325:                 BOUNDARY, {CONTENT_TRANSFER_ENCODING: \"base64\"}, stream",
          "326:             )",
          "332:             obj = aiohttp.BodyPartReader(",
          "333:                 BOUNDARY, {CONTENT_TRANSFER_ENCODING: \"base64\"}, stream",
          "334:             )",
          "",
          "[Added Lines]",
          "339:         h = CIMultiDictProxy(CIMultiDict({CONTENT_ENCODING: \"identity\"}))",
          "341:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "346:         h = CIMultiDictProxy(CIMultiDict({CONTENT_ENCODING: \"snappy\"}))",
          "348:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "353:         h = CIMultiDictProxy(CIMultiDict({CONTENT_TRANSFER_ENCODING: \"base64\"}))",
          "355:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "360:         h = CIMultiDictProxy(CIMultiDict({CONTENT_TRANSFER_ENCODING: \"base64\"}))",
          "362:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "339:         assert b\"Time to Relax!\" == result",
          "341:     async def test_read_with_content_transfer_encoding_quoted_printable(self) -> None:",
          "342:         with Stream(",
          "343:             b\"=D0=9F=D1=80=D0=B8=D0=B2=D0=B5=D1=82,\" b\" =D0=BC=D0=B8=D1=80!\\r\\n--:--\"",
          "344:         ) as stream:",
          "348:             result = await obj.read(decode=True)",
          "349:         expected = (",
          "350:             b\"\\xd0\\x9f\\xd1\\x80\\xd0\\xb8\\xd0\\xb2\\xd0\\xb5\\xd1\\x82,\"",
          "",
          "[Removed Lines]",
          "345:             obj = aiohttp.BodyPartReader(",
          "346:                 BOUNDARY, {CONTENT_TRANSFER_ENCODING: \"quoted-printable\"}, stream",
          "347:             )",
          "",
          "[Added Lines]",
          "370:         h = CIMultiDictProxy(",
          "371:             CIMultiDict({CONTENT_TRANSFER_ENCODING: \"quoted-printable\"})",
          "372:         )",
          "376:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "355:     @pytest.mark.parametrize(\"encoding\", (\"binary\", \"8bit\", \"7bit\"))",
          "356:     async def test_read_with_content_transfer_encoding_binary(",
          "358:     ) -> None:",
          "359:         data = (",
          "360:             b\"\\xd0\\x9f\\xd1\\x80\\xd0\\xb8\\xd0\\xb2\\xd0\\xb5\\xd1\\x82,\"",
          "361:             b\" \\xd0\\xbc\\xd0\\xb8\\xd1\\x80!\"",
          "362:         )",
          "363:         with Stream(data + b\"\\r\\n--:--\") as stream:",
          "367:             result = await obj.read(decode=True)",
          "368:         assert data == result",
          "370:     async def test_read_with_content_transfer_encoding_unknown(self) -> None:",
          "371:         with Stream(b\"\\x0e4Time to Relax!\\r\\n--:--\") as stream:",
          "375:             with pytest.raises(RuntimeError):",
          "376:                 await obj.read(decode=True)",
          "378:     async def test_read_text(self) -> None:",
          "379:         with Stream(b\"Hello, world!\\r\\n--:--\") as stream:",
          "381:             result = await obj.text()",
          "382:         assert \"Hello, world!\" == result",
          "384:     async def test_read_text_default_encoding(self) -> None:",
          "385:         with Stream(\"\u041f\u0440\u0438\u0432\u0435\u0442, \u041c\u0438\u0440!\\r\\n--:--\".encode()) as stream:",
          "387:             result = await obj.text()",
          "388:         assert \"\u041f\u0440\u0438\u0432\u0435\u0442, \u041c\u0438\u0440!\" == result",
          "390:     async def test_read_text_encoding(self) -> None:",
          "391:         with Stream(\"\u041f\u0440\u0438\u0432\u0435\u0442, \u041c\u0438\u0440!\\r\\n--:--\".encode(\"cp1251\")) as stream:",
          "393:             result = await obj.text(encoding=\"cp1251\")",
          "394:         assert \"\u041f\u0440\u0438\u0432\u0435\u0442, \u041c\u0438\u0440!\" == result",
          "396:     async def test_read_text_guess_encoding(self) -> None:",
          "397:         with Stream(\"\u041f\u0440\u0438\u0432\u0435\u0442, \u041c\u0438\u0440!\\r\\n--:--\".encode(\"cp1251\")) as stream:",
          "401:             result = await obj.text()",
          "402:         assert \"\u041f\u0440\u0438\u0432\u0435\u0442, \u041c\u0438\u0440!\" == result",
          "404:     async def test_read_text_compressed(self) -> None:",
          "405:         with Stream(b\"\\x0b\\xc9\\xccMU(\\xc9W\\x08J\\xcdI\\xacP\\x04\\x00\\r\\n--:--\") as stream:",
          "411:             result = await obj.text()",
          "412:         assert \"Time to Relax!\" == result",
          "414:     async def test_read_text_while_closed(self) -> None:",
          "415:         with Stream(b\"\") as stream:",
          "417:             obj._at_eof = True",
          "418:             result = await obj.text()",
          "419:         assert \"\" == result",
          "421:     async def test_read_json(self) -> None:",
          "422:         with Stream(b'{\"test\": \"passed\"}\\r\\n--:--') as stream:",
          "426:             result = await obj.json()",
          "427:         assert {\"test\": \"passed\"} == result",
          "429:     async def test_read_json_encoding(self) -> None:",
          "430:         with Stream('{\"\u0442\u0435\u0441\u0442\": \"\u043f\u0430\u0441\u0441\u0435\u0434\"}\\r\\n--:--'.encode(\"cp1251\")) as stream:",
          "434:             result = await obj.json(encoding=\"cp1251\")",
          "435:         assert {\"\u0442\u0435\u0441\u0442\": \"\u043f\u0430\u0441\u0441\u0435\u0434\"} == result",
          "437:     async def test_read_json_guess_encoding(self) -> None:",
          "438:         with Stream('{\"\u0442\u0435\u0441\u0442\": \"\u043f\u0430\u0441\u0441\u0435\u0434\"}\\r\\n--:--'.encode(\"cp1251\")) as stream:",
          "442:             result = await obj.json()",
          "443:         assert {\"\u0442\u0435\u0441\u0442\": \"\u043f\u0430\u0441\u0441\u0435\u0434\"} == result",
          "445:     async def test_read_json_compressed(self) -> None:",
          "446:         with Stream(b\"\\xabV*I-.Q\\xb2RP*H,.NMQ\\xaa\\x05\\x00\\r\\n--:--\") as stream:",
          "452:             result = await obj.json()",
          "453:         assert {\"test\": \"passed\"} == result",
          "455:     async def test_read_json_while_closed(self) -> None:",
          "456:         with Stream(b\"\") as stream:",
          "460:             obj._at_eof = True",
          "461:             result = await obj.json()",
          "462:         assert result is None",
          "464:     async def test_read_form(self) -> None:",
          "465:         with Stream(b\"foo=bar&foo=baz&boo=\\r\\n--:--\") as stream:",
          "469:             result = await obj.form()",
          "470:         assert [(\"foo\", \"bar\"), (\"foo\", \"baz\"), (\"boo\", \"\")] == result",
          "472:     async def test_read_form_invalid_utf8(self) -> None:",
          "473:         with Stream(b\"\\xff\\r\\n--:--\") as stream:",
          "477:             with pytest.raises(",
          "478:                 ValueError, match=\"data cannot be decoded with utf-8 encoding\"",
          "479:             ):",
          "480:                 await obj.form()",
          "482:     async def test_read_form_encoding(self) -> None:",
          "483:         with Stream(\"foo=bar&foo=baz&boo=\\r\\n--:--\".encode(\"cp1251\")) as stream:",
          "487:             result = await obj.form(encoding=\"cp1251\")",
          "488:         assert [(\"foo\", \"bar\"), (\"foo\", \"baz\"), (\"boo\", \"\")] == result",
          "490:     async def test_read_form_guess_encoding(self) -> None:",
          "496:             )",
          "497:             result = await obj.form()",
          "498:         assert [(\"foo\", \"bar\"), (\"foo\", \"baz\"), (\"boo\", \"\")] == result",
          "500:     async def test_read_form_while_closed(self) -> None:",
          "501:         with Stream(b\"\") as stream:",
          "507:             obj._at_eof = True",
          "508:             result = await obj.form()",
          "509:         assert not result",
          "511:     async def test_readline(self) -> None:",
          "512:         with Stream(b\"Hello\\n,\\r\\nworld!\\r\\n--:--\") as stream:",
          "514:             result = await obj.readline()",
          "515:             assert b\"Hello\\n\" == result",
          "516:             result = await obj.readline()",
          "",
          "[Removed Lines]",
          "357:         self, encoding: Any",
          "364:             obj = aiohttp.BodyPartReader(",
          "365:                 BOUNDARY, {CONTENT_TRANSFER_ENCODING: encoding}, stream",
          "366:             )",
          "372:             obj = aiohttp.BodyPartReader(",
          "373:                 BOUNDARY, {CONTENT_TRANSFER_ENCODING: \"unknown\"}, stream",
          "374:             )",
          "380:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "386:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "392:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "398:             obj = aiohttp.BodyPartReader(",
          "399:                 BOUNDARY, {CONTENT_TYPE: \"text/plain;charset=cp1251\"}, stream",
          "400:             )",
          "406:             obj = aiohttp.BodyPartReader(",
          "407:                 BOUNDARY,",
          "408:                 {CONTENT_ENCODING: \"deflate\", CONTENT_TYPE: \"text/plain\"},",
          "409:                 stream,",
          "410:             )",
          "416:             obj = aiohttp.BodyPartReader(BOUNDARY, {CONTENT_TYPE: \"text/plain\"}, stream)",
          "423:             obj = aiohttp.BodyPartReader(",
          "424:                 BOUNDARY, {CONTENT_TYPE: \"application/json\"}, stream",
          "425:             )",
          "431:             obj = aiohttp.BodyPartReader(",
          "432:                 BOUNDARY, {CONTENT_TYPE: \"application/json\"}, stream",
          "433:             )",
          "439:             obj = aiohttp.BodyPartReader(",
          "440:                 BOUNDARY, {CONTENT_TYPE: \"application/json; charset=cp1251\"}, stream",
          "441:             )",
          "447:             obj = aiohttp.BodyPartReader(",
          "448:                 BOUNDARY,",
          "449:                 {CONTENT_ENCODING: \"deflate\", CONTENT_TYPE: \"application/json\"},",
          "450:                 stream,",
          "451:             )",
          "457:             obj = aiohttp.BodyPartReader(",
          "458:                 BOUNDARY, {CONTENT_TYPE: \"application/json\"}, stream",
          "459:             )",
          "466:             obj = aiohttp.BodyPartReader(",
          "467:                 BOUNDARY, {CONTENT_TYPE: \"application/x-www-form-urlencoded\"}, stream",
          "468:             )",
          "474:             obj = aiohttp.BodyPartReader(",
          "475:                 BOUNDARY, {CONTENT_TYPE: \"application/x-www-form-urlencoded\"}, stream",
          "476:             )",
          "484:             obj = aiohttp.BodyPartReader(",
          "485:                 BOUNDARY, {CONTENT_TYPE: \"application/x-www-form-urlencoded\"}, stream",
          "486:             )",
          "491:         with Stream(b\"foo=bar&foo=baz&boo=\\r\\n--:--\") as stream:",
          "492:             obj = aiohttp.BodyPartReader(",
          "493:                 BOUNDARY,",
          "494:                 {CONTENT_TYPE: \"application/x-www-form-urlencoded; charset=utf-8\"},",
          "495:                 stream,",
          "502:             obj = aiohttp.BodyPartReader(",
          "503:                 BOUNDARY,",
          "504:                 {CONTENT_TYPE: \"application/x-www-form-urlencoded\"},",
          "505:                 stream,",
          "506:             )",
          "513:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "",
          "[Added Lines]",
          "386:         self, encoding: str",
          "392:         h = CIMultiDictProxy(CIMultiDict({CONTENT_TRANSFER_ENCODING: encoding}))",
          "394:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "399:         h = CIMultiDictProxy(CIMultiDict({CONTENT_TRANSFER_ENCODING: \"unknown\"}))",
          "401:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "407:             d = CIMultiDictProxy[str](CIMultiDict())",
          "408:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "414:             d = CIMultiDictProxy[str](CIMultiDict())",
          "415:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "421:             d = CIMultiDictProxy[str](CIMultiDict())",
          "422:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "427:         h = CIMultiDictProxy(CIMultiDict({CONTENT_TYPE: \"text/plain;charset=cp1251\"}))",
          "429:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "434:         h = CIMultiDictProxy(",
          "435:             CIMultiDict({CONTENT_ENCODING: \"deflate\", CONTENT_TYPE: \"text/plain\"})",
          "436:         )",
          "438:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "443:         h = CIMultiDictProxy(CIMultiDict({CONTENT_TYPE: \"text/plain\"}))",
          "445:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "451:         h = CIMultiDictProxy(CIMultiDict({CONTENT_TYPE: \"application/json\"}))",
          "453:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "458:         h = CIMultiDictProxy(CIMultiDict({CONTENT_TYPE: \"application/json\"}))",
          "460:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "465:         h = CIMultiDictProxy(",
          "466:             CIMultiDict({CONTENT_TYPE: \"application/json; charset=cp1251\"})",
          "467:         )",
          "469:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "474:         h = CIMultiDictProxy(",
          "475:             CIMultiDict({CONTENT_ENCODING: \"deflate\", CONTENT_TYPE: \"application/json\"})",
          "476:         )",
          "478:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "483:         h = CIMultiDictProxy(CIMultiDict({CONTENT_TYPE: \"application/json\"}))",
          "485:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "491:         h = CIMultiDictProxy(",
          "492:             CIMultiDict({CONTENT_TYPE: \"application/x-www-form-urlencoded\"})",
          "493:         )",
          "495:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "500:         h = CIMultiDictProxy(",
          "501:             CIMultiDict({CONTENT_TYPE: \"application/x-www-form-urlencoded\"})",
          "502:         )",
          "504:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "511:         h = CIMultiDictProxy(",
          "512:             CIMultiDict({CONTENT_TYPE: \"application/x-www-form-urlencoded\"})",
          "513:         )",
          "515:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "520:         h = CIMultiDictProxy(",
          "521:             CIMultiDict(",
          "522:                 {CONTENT_TYPE: \"application/x-www-form-urlencoded; charset=utf-8\"}",
          "524:         )",
          "525:         with Stream(b\"foo=bar&foo=baz&boo=\\r\\n--:--\") as stream:",
          "526:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "531:         h = CIMultiDictProxy(",
          "532:             CIMultiDict({CONTENT_TYPE: \"application/x-www-form-urlencoded\"})",
          "533:         )",
          "535:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "542:             d = CIMultiDictProxy[str](CIMultiDict())",
          "543:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "524:     async def test_release(self) -> None:",
          "525:         with Stream(b\"Hello,\\r\\n--:\\r\\n\\r\\nworld!\\r\\n--:--\") as stream:",
          "527:             await obj.release()",
          "528:             assert obj.at_eof()",
          "529:             assert b\"--:\\r\\n\\r\\nworld!\\r\\n--:--\" == stream.content.read()",
          "531:     async def test_release_respects_content_length(self) -> None:",
          "532:         with Stream(b\".\" * 100500 + b\"\\r\\n--:--\") as stream:",
          "536:             assert obj.at_eof()",
          "538:     async def test_release_release(self) -> None:",
          "539:         with Stream(b\"Hello,\\r\\n--:\\r\\n\\r\\nworld!\\r\\n--:--\") as stream:",
          "541:             await obj.release()",
          "542:             await obj.release()",
          "543:             assert b\"--:\\r\\n\\r\\nworld!\\r\\n--:--\" == stream.content.read()",
          "545:     async def test_filename(self) -> None:",
          "548:         )",
          "549:         assert \"foo.html\" == part.filename",
          "551:     async def test_reading_long_part(self) -> None:",
          "",
          "[Removed Lines]",
          "526:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "533:             obj = aiohttp.BodyPartReader(BOUNDARY, {\"CONTENT-LENGTH\": 100500}, stream)",
          "534:             result = await obj.release()",
          "535:             assert result is None",
          "540:             obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "546:         part = aiohttp.BodyPartReader(",
          "547:             BOUNDARY, {CONTENT_DISPOSITION: \"attachment; filename=foo.html\"}, None",
          "",
          "[Added Lines]",
          "556:             d = CIMultiDictProxy[str](CIMultiDict())",
          "557:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "563:         h = CIMultiDictProxy(CIMultiDict({\"CONTENT-LENGTH\": \"100500\"}))",
          "565:             obj = aiohttp.BodyPartReader(BOUNDARY, h, stream)",
          "566:             await obj.release()",
          "571:             d = CIMultiDictProxy[str](CIMultiDict())",
          "572:             obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "578:         h = CIMultiDictProxy(",
          "579:             CIMultiDict({CONTENT_DISPOSITION: \"attachment; filename=foo.html\"})",
          "581:         part = aiohttp.BodyPartReader(BOUNDARY, h, mock.Mock())",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "554:         stream = StreamReader(protocol, 2**16, loop=asyncio.get_event_loop())",
          "555:         stream.feed_data(b\"0\" * size + b\"\\r\\n--:--\")",
          "556:         stream.feed_eof()",
          "558:         data = await obj.read()",
          "559:         assert len(data) == size",
          "562: class TestMultipartReader:",
          "563:     def test_from_response(self) -> None:",
          "564:         with Stream(b\"--:\\r\\n\\r\\nhello\\r\\n--:--\") as stream:",
          "570:         assert isinstance(res, MultipartResponseWrapper)",
          "571:         assert isinstance(res.stream, aiohttp.MultipartReader)",
          "573:     def test_bad_boundary(self) -> None:",
          "574:         with Stream(b\"\") as stream:",
          "578:             with pytest.raises(ValueError):",
          "581:     def test_dispatch(self) -> None:",
          "582:         with Stream(b\"--:\\r\\n\\r\\necho\\r\\n--:--\") as stream:",
          "583:             reader = aiohttp.MultipartReader(",
          "584:                 {CONTENT_TYPE: 'multipart/related;boundary=\":\"'},",
          "585:                 stream,",
          "586:             )",
          "588:         assert isinstance(res, reader.part_reader_cls)",
          "590:     def test_dispatch_bodypart(self) -> None:",
          "591:         with Stream(b\"--:\\r\\n\\r\\necho\\r\\n--:--\") as stream:",
          "592:             reader = aiohttp.MultipartReader(",
          "593:                 {CONTENT_TYPE: 'multipart/related;boundary=\":\"'},",
          "594:                 stream,",
          "595:             )",
          "597:         assert isinstance(res, reader.part_reader_cls)",
          "599:     def test_dispatch_multipart(self) -> None:",
          "600:         with Stream(",
          "601:             b\"----:--\\r\\n\"",
          "602:             b\"\\r\\n\"",
          "",
          "[Removed Lines]",
          "557:         obj = aiohttp.BodyPartReader(BOUNDARY, {}, stream)",
          "565:             resp = Response(",
          "566:                 {CONTENT_TYPE: 'multipart/related;boundary=\":\"'},",
          "567:                 stream,",
          "568:             )",
          "569:             res = aiohttp.MultipartReader.from_response(resp)",
          "575:             resp = Response(",
          "576:                 {CONTENT_TYPE: \"multipart/related;boundary=\" + \"a\" * 80}, stream",
          "577:             )",
          "579:                 aiohttp.MultipartReader.from_response(resp)",
          "587:             res = reader._get_part_reader({CONTENT_TYPE: \"text/plain\"})",
          "596:             res = reader._get_part_reader({CONTENT_TYPE: \"text/plain\"})",
          "",
          "[Added Lines]",
          "590:         d = CIMultiDictProxy[str](CIMultiDict())",
          "591:         obj = aiohttp.BodyPartReader(BOUNDARY, d, stream)",
          "598:         h = CIMultiDictProxy(",
          "599:             CIMultiDict({CONTENT_TYPE: 'multipart/related;boundary=\":\"'})",
          "600:         )",
          "602:             resp = Response(h, stream)",
          "603:             res = aiohttp.MultipartReader.from_response(resp)  # type: ignore[arg-type]",
          "608:         h = CIMultiDictProxy(",
          "609:             CIMultiDict({CONTENT_TYPE: \"multipart/related;boundary=\" + \"a\" * 80})",
          "610:         )",
          "612:             resp = Response(h, stream)",
          "614:                 aiohttp.MultipartReader.from_response(resp)  # type: ignore[arg-type]",
          "617:         h = CIMultiDictProxy(CIMultiDict({CONTENT_TYPE: \"text/plain\"}))",
          "623:             res = reader._get_part_reader(h)",
          "627:         h = CIMultiDictProxy(CIMultiDict({CONTENT_TYPE: \"text/plain\"}))",
          "633:             res = reader._get_part_reader(h)",
          "637:         h = CIMultiDictProxy(",
          "638:             CIMultiDict({CONTENT_TYPE: \"multipart/related;boundary=--:--\"})",
          "639:         )",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "611:                 {CONTENT_TYPE: 'multipart/related;boundary=\":\"'},",
          "612:                 stream,",
          "613:             )",
          "617:         assert isinstance(res, reader.__class__)",
          "619:     def test_dispatch_custom_multipart_reader(self) -> None:",
          "620:         class CustomReader(aiohttp.MultipartReader):",
          "621:             pass",
          "623:         with Stream(",
          "624:             b\"----:--\\r\\n\"",
          "625:             b\"\\r\\n\"",
          "",
          "[Removed Lines]",
          "614:             res = reader._get_part_reader(",
          "615:                 {CONTENT_TYPE: \"multipart/related;boundary=--:--\"}",
          "616:             )",
          "",
          "[Added Lines]",
          "654:             res = reader._get_part_reader(h)",
          "661:         h = CIMultiDictProxy(",
          "662:             CIMultiDict({CONTENT_TYPE: \"multipart/related;boundary=--:--\"})",
          "663:         )",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "635:                 stream,",
          "636:             )",
          "637:             reader.multipart_reader_cls = CustomReader",
          "641:         assert isinstance(res, CustomReader)",
          "643:     async def test_emit_next(self) -> None:",
          "644:         with Stream(b\"--:\\r\\n\\r\\necho\\r\\n--:--\") as stream:",
          "649:             res = await reader.next()",
          "650:         assert isinstance(res, reader.part_reader_cls)",
          "",
          "[Removed Lines]",
          "638:             res = reader._get_part_reader(",
          "639:                 {CONTENT_TYPE: \"multipart/related;boundary=--:--\"}",
          "640:             )",
          "645:             reader = aiohttp.MultipartReader(",
          "646:                 {CONTENT_TYPE: 'multipart/related;boundary=\":\"'},",
          "647:                 stream,",
          "648:             )",
          "",
          "[Added Lines]",
          "679:             res = reader._get_part_reader(h)",
          "683:         h = CIMultiDictProxy(",
          "684:             CIMultiDict({CONTENT_TYPE: 'multipart/related;boundary=\":\"'})",
          "685:         )",
          "687:             reader = aiohttp.MultipartReader(h, stream)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "661:     @pytest.mark.skipif(sys.version_info < (3, 10), reason=\"Needs anext()\")",
          "662:     async def test_read_boundary_across_chunks(self) -> None:",
          "664:             def __init__(self) -> None:",
          "665:                 self.content = [",
          "666:                     b\"--foobar\\r\\n\\r\\n\",",
          "",
          "[Removed Lines]",
          "663:         class SplitBoundaryStream:",
          "",
          "[Added Lines]",
          "702:         class SplitBoundaryStream(StreamReader):",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "674:                     b\"oobar--\",",
          "675:                 ]",
          "678:                 chunk = self.content.pop(0)",
          "680:                 return chunk",
          "682:             def at_eof(self) -> bool:",
          "",
          "[Removed Lines]",
          "677:             async def read(self, size: Optional[Any] = None) -> bytes:",
          "679:                 assert len(chunk) <= size",
          "",
          "[Added Lines]",
          "716:             async def read(self, size: Optional[int] = None) -> bytes:",
          "718:                 assert size is not None and len(chunk) <= size",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "702:             {CONTENT_TYPE: 'multipart/related;boundary=\"foobar\"'}, stream",
          "703:         )",
          "704:         part = await anext(reader)",
          "705:         result = await part.read_chunk(10)",
          "706:         assert result == b\"Hello,\"",
          "707:         result = await part.read_chunk(10)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744:         assert isinstance(part, BodyPartReader)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "709:         assert part.at_eof()",
          "711:         part = await anext(reader)",
          "712:         result = await part.read_chunk(10)",
          "713:         assert result == b\"world!\"",
          "714:         result = await part.read_chunk(10)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752:         assert isinstance(part, BodyPartReader)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "773:             first = await reader.next()",
          "774:             assert isinstance(first, aiohttp.BodyPartReader)",
          "775:             second = await reader.next()",
          "776:             assert first.at_eof()",
          "777:             assert not second.at_eof()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "817:             assert second is not None",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "788:             second = await reader.next()",
          "789:             third = await reader.next()",
          "791:             assert first.at_eof()",
          "792:             assert second.at_eof()",
          "793:             assert second.at_eof()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "833:             assert first is not None",
          "834:             assert second is not None",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "813:                 part = await reader.next()",
          "814:                 if part is None:",
          "815:                     break",
          "816:                 while not part.at_eof():",
          "817:                     read_part += await part.read_chunk(3)",
          "818:                 body_parts.append(read_part)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "860:                 assert isinstance(part, BodyPartReader)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "839:                 part = await reader.next()",
          "840:                 if part is None:",
          "841:                     break",
          "842:                 while not part.at_eof():",
          "843:                     chunk = await part.read_chunk(5)",
          "844:                     assert chunk",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887:                 assert isinstance(part, BodyPartReader)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "867:             assert isinstance(first, aiohttp.BodyPartReader)",
          "868:             second = await reader.next()",
          "870:             assert first.at_eof()",
          "871:             assert not second.at_eof()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916:             assert isinstance(second, BodyPartReader)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "895:                 stream,",
          "896:             )",
          "897:             field1 = await reader.next()",
          "898:             assert field1.name == \"field1\"",
          "899:             assert field1.get_charset(\"default\") == \"ascii\"",
          "900:             field2 = await reader.next()",
          "901:             assert field2.name == \"field2\"",
          "902:             assert field2.get_charset(\"default\") == \"UTF-8\"",
          "903:             field3 = await reader.next()",
          "904:             assert field3.name == \"field3\"",
          "905:             assert field3.get_charset(\"default\") == \"ascii\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "945:             assert isinstance(field1, BodyPartReader)",
          "949:             assert isinstance(field2, BodyPartReader)",
          "953:             assert isinstance(field3, BodyPartReader)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "923:                 await reader.next()",
          "927:     assert writer.size == 7",
          "928:     assert writer.boundary == \":\"",
          "932:     with io.BytesIO(b\"foobarbaz\") as file_handle:",
          "933:         writer.append(file_handle)",
          "934:         await writer.write(stream)",
          "",
          "[Removed Lines]",
          "926: async def test_writer(writer: Any) -> None:",
          "931: async def test_writer_serialize_io_chunk(buf: Any, stream: Any, writer: Any) -> None:",
          "",
          "[Added Lines]",
          "976: async def test_writer(writer: aiohttp.MultipartWriter) -> None:",
          "981: async def test_writer_serialize_io_chunk(",
          "982:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "983: ) -> None:",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "938:     )",
          "942:     writer.append_json({\"\u043f\u0440\u0438\u0432\u0435\u0442\": \"\u043c\u0438\u0440\"})",
          "943:     await writer.write(stream)",
          "944:     assert (",
          "",
          "[Removed Lines]",
          "941: async def test_writer_serialize_json(buf: Any, stream: Any, writer: Any) -> None:",
          "",
          "[Added Lines]",
          "993: async def test_writer_serialize_json(",
          "994:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "995: ) -> None:",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "947:     )",
          "951:     data = [(\"foo\", \"bar\"), (\"foo\", \"baz\"), (\"boo\", \"zoo\")]",
          "952:     writer.append_form(data)",
          "953:     await writer.write(stream)",
          "",
          "[Removed Lines]",
          "950: async def test_writer_serialize_form(buf: Any, stream: Any, writer: Any) -> None:",
          "",
          "[Added Lines]",
          "1004: async def test_writer_serialize_form(",
          "1005:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "1006: ) -> None:",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "955:     assert b\"foo=bar&foo=baz&boo=zoo\" in buf",
          "959:     data = {\"hello\": \"\u043c\u0438\u0440\"}",
          "960:     writer.append_form(data)",
          "961:     await writer.write(stream)",
          "",
          "[Removed Lines]",
          "958: async def test_writer_serialize_form_dict(buf: Any, stream: Any, writer: Any) -> None:",
          "",
          "[Added Lines]",
          "1014: async def test_writer_serialize_form_dict(",
          "1015:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "1016: ) -> None:",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "963:     assert b\"hello=%D0%BC%D0%B8%D1%80\" in buf",
          "967:     writer.append(\"foo-bar-baz\")",
          "968:     writer.append_json({\"test\": \"passed\"})",
          "969:     writer.append_form({\"test\": \"passed\"})",
          "972:     sub_multipart = aiohttp.MultipartWriter(boundary=\"::\")",
          "973:     sub_multipart.append(\"nested content\")",
          "",
          "[Removed Lines]",
          "966: async def test_writer_write(buf: Any, stream: Any, writer: Any) -> None:",
          "970:     writer.append_form([(\"one\", 1), (\"two\", 2)])",
          "",
          "[Added Lines]",
          "1024: async def test_writer_write(",
          "1025:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "1026: ) -> None:",
          "1030:     writer.append_form([(\"one\", \"1\"), (\"two\", \"2\")])",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1009:     ) == bytes(buf)",
          "1013:     writer = aiohttp.MultipartWriter(boundary=\":\")",
          "1014:     writer.append(\"foo-bar-baz\")",
          "1015:     writer.append_json({\"test\": \"passed\"})",
          "1016:     writer.append_form({\"test\": \"passed\"})",
          "1018:     await writer.write(stream, close_boundary=False)",
          "1020:     assert (",
          "",
          "[Removed Lines]",
          "1012: async def test_writer_write_no_close_boundary(buf: Any, stream: Any) -> None:",
          "1017:     writer.append_form([(\"one\", 1), (\"two\", 2)])",
          "",
          "[Added Lines]",
          "1072: async def test_writer_write_no_close_boundary(buf: bytearray, stream: Stream) -> None:",
          "1077:     writer.append_form([(\"one\", \"1\"), (\"two\", \"2\")])",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1041:     ) == bytes(buf)",
          "1045:     await writer.write(stream)",
          "1046:     assert b\"--:--\\r\\n\" == bytes(buf)",
          "1049: async def test_writer_serialize_with_content_encoding_gzip(",
          "1051: ) -> None:",
          "1052:     writer.append(\"Time to Relax!\", {CONTENT_ENCODING: \"gzip\"})",
          "1053:     await writer.write(stream)",
          "",
          "[Removed Lines]",
          "1044: async def test_writer_write_no_parts(buf: Any, stream: Any, writer: Any) -> None:",
          "1050:     buf: Any, stream: Any, writer: Any",
          "",
          "[Added Lines]",
          "1104: async def test_writer_write_no_parts(",
          "1105:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "1106: ) -> None:",
          "1112:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1067: async def test_writer_serialize_with_content_encoding_deflate(",
          "1069: ) -> None:",
          "1070:     writer.append(\"Time to Relax!\", {CONTENT_ENCODING: \"deflate\"})",
          "1071:     await writer.write(stream)",
          "",
          "[Removed Lines]",
          "1068:     buf: Any, stream: Any, writer: Any",
          "",
          "[Added Lines]",
          "1130:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1083: async def test_writer_serialize_with_content_encoding_identity(",
          "1085: ) -> None:",
          "1086:     thing = b\"\\x0b\\xc9\\xccMU(\\xc9W\\x08J\\xcdI\\xacP\\x04\\x00\"",
          "1087:     writer.append(thing, {CONTENT_ENCODING: \"identity\"})",
          "",
          "[Removed Lines]",
          "1084:     buf: Any, stream: Any, writer: Any",
          "",
          "[Added Lines]",
          "1146:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1100: def test_writer_serialize_with_content_encoding_unknown(",
          "1102: ) -> None:",
          "1103:     with pytest.raises(RuntimeError):",
          "1104:         writer.append(\"Time to Relax!\", {CONTENT_ENCODING: \"snappy\"})",
          "1107: async def test_writer_with_content_transfer_encoding_base64(",
          "1109: ) -> None:",
          "1110:     writer.append(\"Time to Relax!\", {CONTENT_TRANSFER_ENCODING: \"base64\"})",
          "1111:     await writer.write(stream)",
          "",
          "[Removed Lines]",
          "1101:     buf: Any, stream: Any, writer: Any",
          "1108:     buf: Any, stream: Any, writer: Any",
          "",
          "[Added Lines]",
          "1163:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "1170:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1122: async def test_writer_content_transfer_encoding_quote_printable(",
          "1124: ) -> None:",
          "1125:     writer.append(\"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!\", {CONTENT_TRANSFER_ENCODING: \"quoted-printable\"})",
          "1126:     await writer.write(stream)",
          "",
          "[Removed Lines]",
          "1123:     buf: Any, stream: Any, writer: Any",
          "",
          "[Added Lines]",
          "1185:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1140: def test_writer_content_transfer_encoding_unknown(",
          "1142: ) -> None:",
          "1143:     with pytest.raises(RuntimeError):",
          "1144:         writer.append(\"Time to Relax!\", {CONTENT_TRANSFER_ENCODING: \"unknown\"})",
          "1147: class TestMultipartWriter:",
          "1149:         mimetype = parse_mimetype(writer.headers.get(CONTENT_TYPE))",
          "1151:         assert \"multipart\" == mimetype.type",
          "",
          "[Removed Lines]",
          "1141:     buf: Any, stream: Any, writer: Any",
          "1148:     def test_default_subtype(self, writer: Any) -> None:",
          "",
          "[Added Lines]",
          "1203:     buf: bytearray, stream: Stream, writer: aiohttp.MultipartWriter",
          "1210:     def test_default_subtype(self, writer: aiohttp.MultipartWriter) -> None:",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1169:         with pytest.raises(ValueError):",
          "1170:             aiohttp.MultipartWriter(boundary=\"X\" * 71)",
          "1173:         expected = {CONTENT_TYPE: 'multipart/mixed; boundary=\":\"'}",
          "1174:         assert expected == writer.headers",
          "1177:         writer.append(\"foo\")",
          "1178:         writer.append(\"bar\")",
          "1179:         writer.append(\"baz\")",
          "1180:         assert 3 == len(list(writer))",
          "1183:         assert 0 == len(writer)",
          "1184:         writer.append(\"hello, world!\")",
          "1185:         assert 1 == len(writer)",
          "1186:         assert isinstance(writer._parts[0][0], payload.Payload)",
          "1189:         writer.append(\"hello, world!\", {\"x-foo\": \"bar\"})",
          "1190:         assert 1 == len(writer)",
          "1191:         assert \"x-foo\" in writer._parts[0][0].headers",
          "1192:         assert writer._parts[0][0].headers[\"x-foo\"] == \"bar\"",
          "1195:         writer.append_json({\"foo\": \"bar\"})",
          "1196:         assert 1 == len(writer)",
          "1197:         part = writer._parts[0][0]",
          "1198:         assert part.headers[CONTENT_TYPE] == \"application/json\"",
          "1201:         part = payload.get_payload(\"test\", headers={CONTENT_TYPE: \"text/plain\"})",
          "1202:         writer.append(part, {CONTENT_TYPE: \"test/passed\"})",
          "1203:         assert 1 == len(writer)",
          "1204:         part = writer._parts[0][0]",
          "1205:         assert part.headers[CONTENT_TYPE] == \"test/passed\"",
          "1208:         writer.append_json({\"foo\": \"bar\"}, {CONTENT_TYPE: \"test/passed\"})",
          "1209:         assert 1 == len(writer)",
          "1210:         part = writer._parts[0][0]",
          "1211:         assert part.headers[CONTENT_TYPE] == \"test/passed\"",
          "1214:         writer.append_form({\"foo\": \"bar\"}, {CONTENT_TYPE: \"test/passed\"})",
          "1215:         assert 1 == len(writer)",
          "1216:         part = writer._parts[0][0]",
          "1217:         assert part.headers[CONTENT_TYPE] == \"test/passed\"",
          "1220:         subwriter = aiohttp.MultipartWriter(boundary=\":\")",
          "1221:         subwriter.append_json({\"foo\": \"bar\"})",
          "1222:         writer.append(subwriter, {CONTENT_TYPE: \"test/passed\"})",
          "",
          "[Removed Lines]",
          "1172:     def test_default_headers(self, writer: Any) -> None:",
          "1176:     def test_iter_parts(self, writer: Any) -> None:",
          "1182:     def test_append(self, writer: Any) -> None:",
          "1188:     def test_append_with_headers(self, writer: Any) -> None:",
          "1194:     def test_append_json(self, writer: Any) -> None:",
          "1200:     def test_append_part(self, writer: Any) -> None:",
          "1207:     def test_append_json_overrides_content_type(self, writer: Any) -> None:",
          "1213:     def test_append_form(self, writer: Any) -> None:",
          "1219:     def test_append_multipart(self, writer: Any) -> None:",
          "",
          "[Added Lines]",
          "1234:     def test_default_headers(self, writer: aiohttp.MultipartWriter) -> None:",
          "1238:     def test_iter_parts(self, writer: aiohttp.MultipartWriter) -> None:",
          "1244:     def test_append(self, writer: aiohttp.MultipartWriter) -> None:",
          "1250:     def test_append_with_headers(self, writer: aiohttp.MultipartWriter) -> None:",
          "1256:     def test_append_json(self, writer: aiohttp.MultipartWriter) -> None:",
          "1262:     def test_append_part(self, writer: aiohttp.MultipartWriter) -> None:",
          "1269:     def test_append_json_overrides_content_type(",
          "1270:         self, writer: aiohttp.MultipartWriter",
          "1271:     ) -> None:",
          "1277:     def test_append_form(self, writer: aiohttp.MultipartWriter) -> None:",
          "1283:     def test_append_multipart(self, writer: aiohttp.MultipartWriter) -> None:",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1224:         part = writer._parts[0][0]",
          "1225:         assert part.headers[CONTENT_TYPE] == \"test/passed\"",
          "1228:         writer = aiohttp.MultipartWriter(\"form-data\")",
          "1229:         part = writer.append(\"some-data\")",
          "1230:         part.set_content_disposition(\"form-data\", name=\"method\")",
          "1231:         assert 'name=\"method\"' in part.headers[CONTENT_DISPOSITION]",
          "1234:         writer = aiohttp.MultipartWriter(\"form-data\")",
          "1235:         writer.append_json(())",
          "1236:         part = payload.StringPayload(\"foo\")",
          "",
          "[Removed Lines]",
          "1227:     def test_set_content_disposition_after_append(self):",
          "1233:     def test_automatic_content_disposition(self):",
          "",
          "[Added Lines]",
          "1291:     def test_set_content_disposition_after_append(self) -> None:",
          "1297:     def test_automatic_content_disposition(self) -> None:",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1266:                 writer.append(None)",
          "1268:     async def test_write_preserves_content_disposition(",
          "1270:     ) -> None:",
          "1271:         with aiohttp.MultipartWriter(boundary=\":\") as writer:",
          "1272:             part = writer.append(b\"foo\", headers={CONTENT_TYPE: \"test/passed\"})",
          "",
          "[Removed Lines]",
          "1269:         self, buf: Any, stream: Any",
          "",
          "[Added Lines]",
          "1333:         self, buf: bytearray, stream: Stream",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1285:         assert message == b\"foo\\r\\n--:--\\r\\n\"",
          "1287:     async def test_preserve_content_disposition_header(",
          "1289:     ) -> None:",
          "1290:         # https://github.com/aio-libs/aiohttp/pull/3475#issuecomment-451072381",
          "1291:         with pathlib.Path(__file__).open(\"rb\") as fobj:",
          "",
          "[Removed Lines]",
          "1288:         self, buf: Any, stream: Any",
          "",
          "[Added Lines]",
          "1352:         self, buf: bytearray, stream: Stream",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1311:         )",
          "1313:     async def test_set_content_disposition_override(",
          "1315:     ) -> None:",
          "1316:         # https://github.com/aio-libs/aiohttp/pull/3475#issuecomment-451072381",
          "1317:         with pathlib.Path(__file__).open(\"rb\") as fobj:",
          "",
          "[Removed Lines]",
          "1314:         self, buf: Any, stream: Any",
          "",
          "[Added Lines]",
          "1378:         self, buf: bytearray, stream: Stream",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1337:         )",
          "1339:     async def test_reset_content_disposition_header(",
          "1341:     ) -> None:",
          "1342:         # https://github.com/aio-libs/aiohttp/pull/3475#issuecomment-451072381",
          "1343:         with pathlib.Path(__file__).open(\"rb\") as fobj:",
          "",
          "[Removed Lines]",
          "1340:         self, buf: Any, stream: Any",
          "",
          "[Added Lines]",
          "1404:         self, buf: bytearray, stream: Stream",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1366: async def test_async_for_reader() -> None:",
          "1368:     with Stream(",
          "1369:         b\"\\r\\n\".join(",
          "1370:             [",
          "",
          "[Removed Lines]",
          "1367:     data = [{\"test\": \"passed\"}, 42, b\"plain text\", b\"aiohttp\\n\", b\"no epilogue\"]",
          "",
          "[Added Lines]",
          "1431:     data: Tuple[Dict[str, str], int, bytes, bytes, bytes] = (",
          "1432:         {\"test\": \"passed\"},",
          "1433:         42,",
          "1434:         b\"plain text\",",
          "1435:         b\"aiohttp\\n\",",
          "1436:         b\"no epilogue\",",
          "1437:     )",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1412:         )",
          "1413:         idata = iter(data)",
          "1416:             async for part in reader:",
          "1417:                 if isinstance(part, aiohttp.BodyPartReader):",
          "1418:                     if part.headers[CONTENT_TYPE] == \"application/json\":",
          "",
          "[Removed Lines]",
          "1415:         async def check(reader):",
          "",
          "[Added Lines]",
          "1485:         async def check(reader: aiohttp.MultipartReader) -> None:",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1428: async def test_async_for_bodypart() -> None:",
          "1429:     with Stream(b\"foobarbaz\\r\\n--:--\") as stream:",
          "1431:         async for data in part:",
          "1432:             assert data == b\"foobarbaz\"",
          "",
          "[Removed Lines]",
          "1430:         part = aiohttp.BodyPartReader(boundary=b\"--:\", headers={}, content=stream)",
          "",
          "[Added Lines]",
          "1499:     h = CIMultiDictProxy[str](CIMultiDict())",
          "1501:         part = aiohttp.BodyPartReader(boundary=b\"--:\", headers=h, content=stream)",
          "",
          "---------------"
        ],
        "tests/test_proxy.py||tests/test_proxy.py": [
          "File: tests/test_proxy.py -> tests/test_proxy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import asyncio",
          "3: import gc",
          "4: import socket",
          "5: import ssl",
          "6: import unittest",
          "8: from unittest import mock",
          "10: from yarl import URL",
          "",
          "[Removed Lines]",
          "1: # type: ignore",
          "7: from typing import Any",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: class TestProxy(unittest.TestCase):",
          "21:         \"status\": 200,",
          "22:     }",
          "25:         \"return_value.send.return_value.start\": make_mocked_coro(mocked_response),",
          "26:     }",
          "",
          "[Removed Lines]",
          "19:     loop: Any",
          "20:     response_mock_attrs: Any = {",
          "23:     mocked_response: Any = mock.Mock(**response_mock_attrs)",
          "24:     clientrequest_mock_attrs: Any = {",
          "",
          "[Added Lines]",
          "17:     response_mock_attrs = {",
          "20:     mocked_response = mock.Mock(**response_mock_attrs)",
          "21:     clientrequest_mock_attrs = {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:         autospec=True,",
          "43:         spec_set=True,",
          "44:     )",
          "46:         req = ClientRequest(",
          "47:             \"GET\",",
          "48:             URL(\"http://www.python.org\"),",
          "",
          "[Removed Lines]",
          "45:     def test_connect(self, start_connection: Any, ClientRequestMock: Any) -> None:",
          "",
          "[Added Lines]",
          "42:     def test_connect(",
          "43:         self, start_connection: mock.Mock, ClientRequestMock: mock.Mock",
          "44:     ) -> None:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "52:         self.assertEqual(str(req.proxy), \"http://proxy.example.com\")",
          "54:         # mock all the things!",
          "56:             return aiohttp.TCPConnector()",
          "58:         connector = self.loop.run_until_complete(make_conn())",
          "68:                 }",
          "96:     @mock.patch(\"aiohttp.connector.ClientRequest\")",
          "97:     @mock.patch(",
          "",
          "[Removed Lines]",
          "55:         async def make_conn():",
          "59:         connector._resolve_host = make_mocked_coro(",
          "60:             [",
          "61:                 {",
          "62:                     \"hostname\": \"hostname\",",
          "63:                     \"host\": \"127.0.0.1\",",
          "64:                     \"port\": 80,",
          "65:                     \"family\": socket.AF_INET,",
          "66:                     \"proto\": 0,",
          "67:                     \"flags\": 0,",
          "69:             ]",
          "70:         )",
          "72:         proto = mock.Mock(",
          "74:                 \"transport.get_extra_info.return_value\": False,",
          "75:             }",
          "76:         )",
          "77:         self.loop.create_connection = make_mocked_coro((proto.transport, proto))",
          "78:         conn = self.loop.run_until_complete(",
          "79:             connector.connect(req, None, aiohttp.ClientTimeout())",
          "80:         )",
          "81:         self.assertEqual(req.url, URL(\"http://www.python.org\"))",
          "82:         self.assertIs(conn._protocol, proto)",
          "83:         self.assertIs(conn.transport, proto.transport)",
          "85:         ClientRequestMock.assert_called_with(",
          "86:             \"GET\",",
          "87:             URL(\"http://proxy.example.com\"),",
          "88:             auth=None,",
          "89:             headers={\"Host\": \"www.python.org\"},",
          "90:             loop=self.loop,",
          "91:             ssl=True,",
          "92:         )",
          "94:         conn.close()",
          "",
          "[Added Lines]",
          "54:         async def make_conn() -> aiohttp.TCPConnector:",
          "58:         r = {",
          "59:             \"hostname\": \"hostname\",",
          "60:             \"host\": \"127.0.0.1\",",
          "61:             \"port\": 80,",
          "62:             \"family\": socket.AF_INET,",
          "63:             \"proto\": 0,",
          "64:             \"flags\": 0,",
          "65:         }",
          "66:         with mock.patch.object(",
          "67:             connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "68:         ):",
          "69:             proto = mock.Mock(",
          "71:                     \"transport.get_extra_info.return_value\": False,",
          "73:             )",
          "74:             with mock.patch.object(",
          "75:                 self.loop,",
          "76:                 \"create_connection\",",
          "77:                 autospec=True,",
          "78:                 return_value=(proto.transport, proto),",
          "79:             ):",
          "80:                 conn = self.loop.run_until_complete(",
          "81:                     connector.connect(req, [], aiohttp.ClientTimeout())",
          "82:                 )",
          "83:                 self.assertEqual(req.url, URL(\"http://www.python.org\"))",
          "84:                 self.assertIs(conn._protocol, proto)",
          "85:                 self.assertIs(conn.transport, proto.transport)",
          "87:                 ClientRequestMock.assert_called_with(",
          "88:                     \"GET\",",
          "89:                     URL(\"http://proxy.example.com\"),",
          "90:                     auth=None,",
          "91:                     headers={\"Host\": \"www.python.org\"},",
          "92:                     loop=self.loop,",
          "93:                     ssl=True,",
          "94:                 )",
          "96:                 conn.close()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "99:         autospec=True,",
          "100:         spec_set=True,",
          "101:     )",
          "103:         req = ClientRequest(",
          "104:             \"GET\",",
          "105:             URL(\"http://www.python.org\"),",
          "",
          "[Removed Lines]",
          "102:     def test_proxy_headers(self, start_connection: Any, ClientRequestMock: Any) -> None:",
          "",
          "[Added Lines]",
          "104:     def test_proxy_headers(",
          "105:         self, start_connection: mock.Mock, ClientRequestMock: mock.Mock",
          "106:     ) -> None:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "110:         self.assertEqual(str(req.proxy), \"http://proxy.example.com\")",
          "112:         # mock all the things!",
          "114:             return aiohttp.TCPConnector()",
          "116:         connector = self.loop.run_until_complete(make_conn())",
          "126:                 }",
          "154:     @mock.patch(",
          "155:         \"aiohttp.connector.aiohappyeyeballs.start_connection\",",
          "156:         autospec=True,",
          "157:         spec_set=True,",
          "158:     )",
          "160:         with self.assertRaises(ValueError) as ctx:",
          "161:             ClientRequest(",
          "162:                 \"GET\",",
          "163:                 URL(\"http://python.org\"),",
          "164:                 proxy=URL(\"http://proxy.example.com\"),",
          "166:                 loop=mock.Mock(),",
          "167:             )",
          "168:         self.assertEqual(",
          "",
          "[Removed Lines]",
          "113:         async def make_conn():",
          "117:         connector._resolve_host = make_mocked_coro(",
          "118:             [",
          "119:                 {",
          "120:                     \"hostname\": \"hostname\",",
          "121:                     \"host\": \"127.0.0.1\",",
          "122:                     \"port\": 80,",
          "123:                     \"family\": socket.AF_INET,",
          "124:                     \"proto\": 0,",
          "125:                     \"flags\": 0,",
          "127:             ]",
          "128:         )",
          "130:         proto = mock.Mock(",
          "132:                 \"transport.get_extra_info.return_value\": False,",
          "133:             }",
          "134:         )",
          "135:         self.loop.create_connection = make_mocked_coro((proto.transport, proto))",
          "136:         conn = self.loop.run_until_complete(",
          "137:             connector.connect(req, None, aiohttp.ClientTimeout())",
          "138:         )",
          "139:         self.assertEqual(req.url, URL(\"http://www.python.org\"))",
          "140:         self.assertIs(conn._protocol, proto)",
          "141:         self.assertIs(conn.transport, proto.transport)",
          "143:         ClientRequestMock.assert_called_with(",
          "144:             \"GET\",",
          "145:             URL(\"http://proxy.example.com\"),",
          "146:             auth=None,",
          "147:             headers={\"Host\": \"www.python.org\", \"Foo\": \"Bar\"},",
          "148:             loop=self.loop,",
          "149:             ssl=True,",
          "150:         )",
          "152:         conn.close()",
          "159:     def test_proxy_auth(self, start_connection: Any) -> None:",
          "165:                 proxy_auth=(\"user\", \"pass\"),",
          "",
          "[Added Lines]",
          "117:         async def make_conn() -> aiohttp.TCPConnector:",
          "121:         r = {",
          "122:             \"hostname\": \"hostname\",",
          "123:             \"host\": \"127.0.0.1\",",
          "124:             \"port\": 80,",
          "125:             \"family\": socket.AF_INET,",
          "126:             \"proto\": 0,",
          "127:             \"flags\": 0,",
          "128:         }",
          "129:         with mock.patch.object(",
          "130:             connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "131:         ):",
          "132:             proto = mock.Mock(",
          "134:                     \"transport.get_extra_info.return_value\": False,",
          "136:             )",
          "137:             with mock.patch.object(",
          "138:                 self.loop,",
          "139:                 \"create_connection\",",
          "140:                 autospec=True,",
          "141:                 return_value=(proto.transport, proto),",
          "142:             ):",
          "143:                 conn = self.loop.run_until_complete(",
          "144:                     connector.connect(req, [], aiohttp.ClientTimeout())",
          "145:                 )",
          "146:                 self.assertEqual(req.url, URL(\"http://www.python.org\"))",
          "147:                 self.assertIs(conn._protocol, proto)",
          "148:                 self.assertIs(conn.transport, proto.transport)",
          "150:                 ClientRequestMock.assert_called_with(",
          "151:                     \"GET\",",
          "152:                     URL(\"http://proxy.example.com\"),",
          "153:                     auth=None,",
          "154:                     headers={\"Host\": \"www.python.org\", \"Foo\": \"Bar\"},",
          "155:                     loop=self.loop,",
          "156:                     ssl=True,",
          "157:                 )",
          "159:                 conn.close()",
          "166:     def test_proxy_auth(self, start_connection: mock.Mock) -> None:",
          "172:                 proxy_auth=(\"user\", \"pass\"),  # type: ignore[arg-type]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "175:         autospec=True,",
          "176:         spec_set=True,",
          "177:     )",
          "180:             return aiohttp.TCPConnector()",
          "197:             )",
          "201:     @mock.patch(",
          "202:         \"aiohttp.connector.aiohappyeyeballs.start_connection\",",
          "203:         autospec=True,",
          "204:         spec_set=True,",
          "205:     )",
          "208:             return aiohttp.TCPConnector()",
          "210:         connector = self.loop.run_until_complete(make_conn())",
          "238:     @mock.patch(\"aiohttp.connector.ClientRequest\")",
          "239:     @mock.patch(",
          "",
          "[Removed Lines]",
          "178:     def test_proxy_dns_error(self, start_connection: Any) -> None:",
          "179:         async def make_conn():",
          "182:         connector: aiohttp.TCPConnector = self.loop.run_until_complete(make_conn())",
          "183:         connector._resolve_host = make_mocked_coro(",
          "184:             raise_exception=OSError(\"dont take it serious\")",
          "185:         )",
          "187:         req = ClientRequest(",
          "188:             \"GET\",",
          "189:             URL(\"http://www.python.org\"),",
          "190:             proxy=URL(\"http://proxy.example.com\"),",
          "191:             loop=self.loop,",
          "192:         )",
          "193:         expected_headers = dict(req.headers)",
          "194:         with self.assertRaises(aiohttp.ClientConnectorError):",
          "195:             self.loop.run_until_complete(",
          "196:                 connector.connect(req, None, aiohttp.ClientTimeout())",
          "198:         self.assertEqual(req.url.path, \"/\")",
          "199:         self.assertEqual(dict(req.headers), expected_headers)",
          "206:     def test_proxy_connection_error(self, start_connection: Any) -> None:",
          "207:         async def make_conn():",
          "211:         connector._resolve_host = make_mocked_coro(",
          "212:             [",
          "213:                 {",
          "214:                     \"hostname\": \"www.python.org\",",
          "215:                     \"host\": \"127.0.0.1\",",
          "216:                     \"port\": 80,",
          "217:                     \"family\": socket.AF_INET,",
          "218:                     \"proto\": 0,",
          "219:                     \"flags\": socket.AI_NUMERICHOST,",
          "220:                 }",
          "221:             ]",
          "222:         )",
          "223:         connector._loop.create_connection = make_mocked_coro(",
          "224:             raise_exception=OSError(\"dont take it serious\")",
          "225:         )",
          "227:         req = ClientRequest(",
          "228:             \"GET\",",
          "229:             URL(\"http://www.python.org\"),",
          "230:             proxy=URL(\"http://proxy.example.com\"),",
          "231:             loop=self.loop,",
          "232:         )",
          "233:         with self.assertRaises(aiohttp.ClientProxyConnectionError):",
          "234:             self.loop.run_until_complete(",
          "235:                 connector.connect(req, None, aiohttp.ClientTimeout())",
          "236:             )",
          "",
          "[Added Lines]",
          "185:     def test_proxy_dns_error(self, start_connection: mock.Mock) -> None:",
          "186:         async def make_conn() -> aiohttp.TCPConnector:",
          "189:         connector = self.loop.run_until_complete(make_conn())",
          "190:         with mock.patch.object(",
          "191:             connector,",
          "192:             \"_resolve_host\",",
          "193:             autospec=True,",
          "194:             side_effect=OSError(\"dont take it serious\"),",
          "195:         ):",
          "196:             req = ClientRequest(",
          "197:                 \"GET\",",
          "198:                 URL(\"http://www.python.org\"),",
          "199:                 proxy=URL(\"http://proxy.example.com\"),",
          "200:                 loop=self.loop,",
          "202:             expected_headers = dict(req.headers)",
          "203:             with self.assertRaises(aiohttp.ClientConnectorError):",
          "204:                 self.loop.run_until_complete(",
          "205:                     connector.connect(req, [], aiohttp.ClientTimeout())",
          "206:                 )",
          "207:             self.assertEqual(req.url.path, \"/\")",
          "208:             self.assertEqual(dict(req.headers), expected_headers)",
          "215:     def test_proxy_connection_error(self, start_connection: mock.Mock) -> None:",
          "216:         async def make_conn() -> aiohttp.TCPConnector:",
          "220:         r = {",
          "221:             \"hostname\": \"www.python.org\",",
          "222:             \"host\": \"127.0.0.1\",",
          "223:             \"port\": 80,",
          "224:             \"family\": socket.AF_INET,",
          "225:             \"proto\": 0,",
          "226:             \"flags\": socket.AI_NUMERICHOST,",
          "227:         }",
          "228:         with mock.patch.object(",
          "229:             connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "230:         ):",
          "231:             with mock.patch.object(",
          "232:                 connector._loop,",
          "233:                 \"create_connection\",",
          "234:                 autospec=True,",
          "235:                 side_effect=OSError(\"dont take it serious\"),",
          "236:             ):",
          "237:                 req = ClientRequest(",
          "238:                     \"GET\",",
          "239:                     URL(\"http://www.python.org\"),",
          "240:                     proxy=URL(\"http://proxy.example.com\"),",
          "241:                     loop=self.loop,",
          "242:                 )",
          "243:                 with self.assertRaises(aiohttp.ClientProxyConnectionError):",
          "244:                     self.loop.run_until_complete(",
          "245:                         connector.connect(req, [], aiohttp.ClientTimeout())",
          "246:                     )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "242:         spec_set=True,",
          "243:     )",
          "244:     def test_proxy_server_hostname_default(",
          "246:     ) -> None:",
          "247:         proxy_req = ClientRequest(",
          "248:             \"GET\", URL(\"http://proxy.example.com\"), loop=self.loop",
          "",
          "[Removed Lines]",
          "245:         self, start_connection: Any, ClientRequestMock: Any",
          "",
          "[Added Lines]",
          "255:         self, start_connection: mock.Mock, ClientRequestMock: mock.Mock",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "253:             \"get\",",
          "254:             URL(\"http://proxy.example.com\"),",
          "255:             request_info=mock.Mock(),",
          "257:             continue100=None,",
          "258:             timer=TimerNoop(),",
          "259:             traces=[],",
          "260:             loop=self.loop,",
          "261:             session=mock.Mock(),",
          "262:         )",
          "273:                     \"hostname\": \"hostname\",",
          "274:                     \"host\": \"127.0.0.1\",",
          "275:                     \"port\": 80,",
          "",
          "[Removed Lines]",
          "256:             writer=None,",
          "263:         proxy_req.send = make_mocked_coro(proxy_resp)",
          "264:         proxy_resp.start = make_mocked_coro(mock.Mock(status=200))",
          "266:         async def make_conn():",
          "267:             return aiohttp.TCPConnector()",
          "269:         connector = self.loop.run_until_complete(make_conn())",
          "270:         connector._resolve_host = make_mocked_coro(",
          "271:             [",
          "272:                 {",
          "",
          "[Added Lines]",
          "266:             writer=None,  # type: ignore[arg-type]",
          "273:         with mock.patch.object(",
          "274:             proxy_req, \"send\", autospec=True, return_value=proxy_resp",
          "275:         ):",
          "276:             with mock.patch.object(proxy_resp, \"start\", autospec=True) as m:",
          "277:                 m.return_value.status = 200",
          "279:                 async def make_conn() -> aiohttp.TCPConnector:",
          "280:                     return aiohttp.TCPConnector()",
          "282:                 connector = self.loop.run_until_complete(make_conn())",
          "283:                 r = {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "277:                     \"proto\": 0,",
          "278:                     \"flags\": 0,",
          "279:                 }",
          "305:     @mock.patch(\"aiohttp.connector.ClientRequest\")",
          "306:     @mock.patch(",
          "",
          "[Removed Lines]",
          "280:             ]",
          "281:         )",
          "283:         tr, proto = mock.Mock(), mock.Mock()",
          "284:         self.loop.create_connection = make_mocked_coro((tr, proto))",
          "285:         self.loop.start_tls = make_mocked_coro(mock.Mock())",
          "287:         req = ClientRequest(",
          "288:             \"GET\",",
          "289:             URL(\"https://www.python.org\"),",
          "290:             proxy=URL(\"http://proxy.example.com\"),",
          "291:             loop=self.loop,",
          "292:         )",
          "293:         self.loop.run_until_complete(",
          "294:             connector._create_connection(req, None, aiohttp.ClientTimeout())",
          "295:         )",
          "297:         self.assertEqual(",
          "298:             self.loop.start_tls.call_args.kwargs[\"server_hostname\"], \"www.python.org\"",
          "299:         )",
          "301:         self.loop.run_until_complete(proxy_req.close())",
          "302:         proxy_resp.close()",
          "303:         self.loop.run_until_complete(req.close())",
          "",
          "[Added Lines]",
          "291:                 with mock.patch.object(",
          "292:                     connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "293:                 ):",
          "294:                     tr, proto = mock.Mock(), mock.Mock()",
          "295:                     with mock.patch.object(",
          "296:                         self.loop,",
          "297:                         \"create_connection\",",
          "298:                         autospec=True,",
          "299:                         return_value=(tr, proto),",
          "300:                     ):",
          "301:                         with mock.patch.object(",
          "302:                             self.loop,",
          "303:                             \"start_tls\",",
          "304:                             autospec=True,",
          "305:                             return_value=mock.Mock(),",
          "306:                         ) as tls_m:",
          "307:                             req = ClientRequest(",
          "308:                                 \"GET\",",
          "309:                                 URL(\"https://www.python.org\"),",
          "310:                                 proxy=URL(\"http://proxy.example.com\"),",
          "311:                                 loop=self.loop,",
          "312:                             )",
          "313:                             self.loop.run_until_complete(",
          "314:                                 connector._create_connection(",
          "315:                                     req, [], aiohttp.ClientTimeout()",
          "316:                                 )",
          "317:                             )",
          "319:                             self.assertEqual(",
          "320:                                 tls_m.call_args.kwargs[\"server_hostname\"],",
          "321:                                 \"www.python.org\",",
          "322:                             )",
          "324:                             self.loop.run_until_complete(proxy_req.close())",
          "325:                             proxy_resp.close()",
          "326:                             self.loop.run_until_complete(req.close())",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "309:         spec_set=True,",
          "310:     )",
          "311:     def test_proxy_server_hostname_override(",
          "313:     ) -> None:",
          "314:         proxy_req = ClientRequest(",
          "315:             \"GET\",",
          "",
          "[Removed Lines]",
          "312:         self, start_connection: Any, ClientRequestMock: Any",
          "",
          "[Added Lines]",
          "335:         self, start_connection: mock.Mock, ClientRequestMock: mock.Mock",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "322:             \"get\",",
          "323:             URL(\"http://proxy.example.com\"),",
          "324:             request_info=mock.Mock(),",
          "326:             continue100=None,",
          "327:             timer=TimerNoop(),",
          "328:             traces=[],",
          "329:             loop=self.loop,",
          "330:             session=mock.Mock(),",
          "331:         )",
          "342:                     \"hostname\": \"hostname\",",
          "343:                     \"host\": \"127.0.0.1\",",
          "344:                     \"port\": 80,",
          "",
          "[Removed Lines]",
          "325:             writer=None,",
          "332:         proxy_req.send = make_mocked_coro(proxy_resp)",
          "333:         proxy_resp.start = make_mocked_coro(mock.Mock(status=200))",
          "335:         async def make_conn():",
          "336:             return aiohttp.TCPConnector()",
          "338:         connector = self.loop.run_until_complete(make_conn())",
          "339:         connector._resolve_host = make_mocked_coro(",
          "340:             [",
          "341:                 {",
          "",
          "[Added Lines]",
          "348:             writer=None,  # type: ignore[arg-type]",
          "355:         with mock.patch.object(",
          "356:             proxy_req, \"send\", autospec=True, return_value=proxy_resp",
          "357:         ):",
          "358:             with mock.patch.object(proxy_resp, \"start\", autospec=True) as m:",
          "359:                 m.return_value.status = 200",
          "361:                 async def make_conn() -> aiohttp.TCPConnector:",
          "362:                     return aiohttp.TCPConnector()",
          "364:                 connector = self.loop.run_until_complete(make_conn())",
          "365:                 r = {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "346:                     \"proto\": 0,",
          "347:                     \"flags\": 0,",
          "348:                 }",
          "376:     @mock.patch(\"aiohttp.connector.ClientRequest\")",
          "377:     @mock.patch(",
          "",
          "[Removed Lines]",
          "349:             ]",
          "350:         )",
          "352:         tr, proto = mock.Mock(), mock.Mock()",
          "353:         self.loop.create_connection = make_mocked_coro((tr, proto))",
          "354:         self.loop.start_tls = make_mocked_coro(mock.Mock())",
          "356:         req = ClientRequest(",
          "357:             \"GET\",",
          "358:             URL(\"https://www.python.org\"),",
          "359:             proxy=URL(\"http://proxy.example.com\"),",
          "360:             server_hostname=\"server-hostname.example.com\",",
          "361:             loop=self.loop,",
          "362:         )",
          "363:         self.loop.run_until_complete(",
          "364:             connector._create_connection(req, None, aiohttp.ClientTimeout())",
          "365:         )",
          "367:         self.assertEqual(",
          "368:             self.loop.start_tls.call_args.kwargs[\"server_hostname\"],",
          "369:             \"server-hostname.example.com\",",
          "370:         )",
          "372:         self.loop.run_until_complete(proxy_req.close())",
          "373:         proxy_resp.close()",
          "374:         self.loop.run_until_complete(req.close())",
          "",
          "[Added Lines]",
          "373:                 with mock.patch.object(",
          "374:                     connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "375:                 ):",
          "376:                     tr, proto = mock.Mock(), mock.Mock()",
          "377:                     with mock.patch.object(",
          "378:                         self.loop,",
          "379:                         \"create_connection\",",
          "380:                         autospec=True,",
          "381:                         return_value=(tr, proto),",
          "382:                     ):",
          "383:                         with mock.patch.object(",
          "384:                             self.loop,",
          "385:                             \"start_tls\",",
          "386:                             autospec=True,",
          "387:                             return_value=mock.Mock(),",
          "388:                         ) as tls_m:",
          "389:                             req = ClientRequest(",
          "390:                                 \"GET\",",
          "391:                                 URL(\"https://www.python.org\"),",
          "392:                                 proxy=URL(\"http://proxy.example.com\"),",
          "393:                                 server_hostname=\"server-hostname.example.com\",",
          "394:                                 loop=self.loop,",
          "395:                             )",
          "396:                             self.loop.run_until_complete(",
          "397:                                 connector._create_connection(",
          "398:                                     req, [], aiohttp.ClientTimeout()",
          "399:                                 )",
          "400:                             )",
          "402:                             self.assertEqual(",
          "403:                                 tls_m.call_args.kwargs[\"server_hostname\"],",
          "404:                                 \"server-hostname.example.com\",",
          "405:                             )",
          "407:                             self.loop.run_until_complete(proxy_req.close())",
          "408:                             proxy_resp.close()",
          "409:                             self.loop.run_until_complete(req.close())",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "379:         autospec=True,",
          "380:         spec_set=True,",
          "381:     )",
          "383:         proxy_req = ClientRequest(",
          "384:             \"GET\", URL(\"http://proxy.example.com\"), loop=self.loop",
          "385:         )",
          "",
          "[Removed Lines]",
          "382:     def test_https_connect(self, start_connection: Any, ClientRequestMock: Any) -> None:",
          "",
          "[Added Lines]",
          "417:     def test_https_connect(",
          "418:         self, start_connection: mock.Mock, ClientRequestMock: mock.Mock",
          "419:     ) -> None:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "389:             \"get\",",
          "390:             URL(\"http://proxy.example.com\"),",
          "391:             request_info=mock.Mock(),",
          "393:             continue100=None,",
          "394:             timer=TimerNoop(),",
          "395:             traces=[],",
          "396:             loop=self.loop,",
          "397:             session=mock.Mock(),",
          "398:         )",
          "409:                     \"hostname\": \"hostname\",",
          "410:                     \"host\": \"127.0.0.1\",",
          "411:                     \"port\": 80,",
          "",
          "[Removed Lines]",
          "392:             writer=None,",
          "399:         proxy_req.send = make_mocked_coro(proxy_resp)",
          "400:         proxy_resp.start = make_mocked_coro(mock.Mock(status=200))",
          "402:         async def make_conn():",
          "403:             return aiohttp.TCPConnector()",
          "405:         connector = self.loop.run_until_complete(make_conn())",
          "406:         connector._resolve_host = make_mocked_coro(",
          "407:             [",
          "408:                 {",
          "",
          "[Added Lines]",
          "429:             writer=None,  # type: ignore[arg-type]",
          "436:         with mock.patch.object(",
          "437:             proxy_req, \"send\", autospec=True, return_value=proxy_resp",
          "438:         ):",
          "439:             with mock.patch.object(proxy_resp, \"start\", autospec=True) as m:",
          "440:                 m.return_value.status = 200",
          "442:                 async def make_conn() -> aiohttp.TCPConnector:",
          "443:                     return aiohttp.TCPConnector()",
          "445:                 connector = self.loop.run_until_complete(make_conn())",
          "446:                 r = {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "413:                     \"proto\": 0,",
          "414:                     \"flags\": 0,",
          "415:                 }",
          "441:     @mock.patch(\"aiohttp.connector.ClientRequest\")",
          "442:     @mock.patch(",
          "",
          "[Removed Lines]",
          "416:             ]",
          "417:         )",
          "419:         tr, proto = mock.Mock(), mock.Mock()",
          "420:         self.loop.create_connection = make_mocked_coro((tr, proto))",
          "421:         self.loop.start_tls = make_mocked_coro(mock.Mock())",
          "423:         req = ClientRequest(",
          "424:             \"GET\",",
          "425:             URL(\"https://www.python.org\"),",
          "426:             proxy=URL(\"http://proxy.example.com\"),",
          "427:             loop=self.loop,",
          "428:         )",
          "429:         self.loop.run_until_complete(",
          "430:             connector._create_connection(req, None, aiohttp.ClientTimeout())",
          "431:         )",
          "433:         self.assertEqual(req.url.path, \"/\")",
          "434:         self.assertEqual(proxy_req.method, \"CONNECT\")",
          "435:         self.assertEqual(proxy_req.url, URL(\"https://www.python.org\"))",
          "437:         self.loop.run_until_complete(proxy_req.close())",
          "438:         proxy_resp.close()",
          "439:         self.loop.run_until_complete(req.close())",
          "",
          "[Added Lines]",
          "454:                 with mock.patch.object(",
          "455:                     connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "456:                 ):",
          "457:                     tr, proto = mock.Mock(), mock.Mock()",
          "458:                     with mock.patch.object(",
          "459:                         self.loop,",
          "460:                         \"create_connection\",",
          "461:                         autospec=True,",
          "462:                         return_value=(tr, proto),",
          "463:                     ):",
          "464:                         with mock.patch.object(",
          "465:                             self.loop,",
          "466:                             \"start_tls\",",
          "467:                             autospec=True,",
          "468:                             return_value=mock.Mock(),",
          "469:                         ):",
          "470:                             req = ClientRequest(",
          "471:                                 \"GET\",",
          "472:                                 URL(\"https://www.python.org\"),",
          "473:                                 proxy=URL(\"http://proxy.example.com\"),",
          "474:                                 loop=self.loop,",
          "475:                             )",
          "476:                             self.loop.run_until_complete(",
          "477:                                 connector._create_connection(",
          "478:                                     req, [], aiohttp.ClientTimeout()",
          "479:                                 )",
          "480:                             )",
          "482:                             self.assertEqual(req.url.path, \"/\")",
          "483:                             self.assertEqual(proxy_req.method, \"CONNECT\")",
          "484:                             self.assertEqual(",
          "485:                                 proxy_req.url, URL(\"https://www.python.org\")",
          "486:                             )",
          "488:                             self.loop.run_until_complete(proxy_req.close())",
          "489:                             proxy_resp.close()",
          "490:                             self.loop.run_until_complete(req.close())",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "445:         spec_set=True,",
          "446:     )",
          "447:     def test_https_connect_certificate_error(",
          "449:     ) -> None:",
          "450:         proxy_req = ClientRequest(",
          "451:             \"GET\", URL(\"http://proxy.example.com\"), loop=self.loop",
          "",
          "[Removed Lines]",
          "448:         self, start_connection: Any, ClientRequestMock: Any",
          "",
          "[Added Lines]",
          "499:         self, start_connection: mock.Mock, ClientRequestMock: mock.Mock",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "456:             \"get\",",
          "457:             URL(\"http://proxy.example.com\"),",
          "458:             request_info=mock.Mock(),",
          "460:             continue100=None,",
          "461:             timer=TimerNoop(),",
          "462:             traces=[],",
          "463:             loop=self.loop,",
          "464:             session=mock.Mock(),",
          "465:         )",
          "476:                     \"hostname\": \"hostname\",",
          "477:                     \"host\": \"127.0.0.1\",",
          "478:                     \"port\": 80,",
          "",
          "[Removed Lines]",
          "459:             writer=None,",
          "466:         proxy_req.send = make_mocked_coro(proxy_resp)",
          "467:         proxy_resp.start = make_mocked_coro(mock.Mock(status=200))",
          "469:         async def make_conn():",
          "470:             return aiohttp.TCPConnector()",
          "472:         connector = self.loop.run_until_complete(make_conn())",
          "473:         connector._resolve_host = make_mocked_coro(",
          "474:             [",
          "475:                 {",
          "",
          "[Added Lines]",
          "510:             writer=None,  # type: ignore[arg-type]",
          "517:         with mock.patch.object(",
          "518:             proxy_req, \"send\", autospec=True, return_value=proxy_resp",
          "519:         ):",
          "520:             with mock.patch.object(proxy_resp, \"start\", autospec=True) as m:",
          "521:                 m.return_value.status = 200",
          "523:                 async def make_conn() -> aiohttp.TCPConnector:",
          "524:                     return aiohttp.TCPConnector()",
          "526:                 connector = self.loop.run_until_complete(make_conn())",
          "527:                 r = {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "480:                     \"proto\": 0,",
          "481:                     \"flags\": 0,",
          "482:                 }",
          "502:     @mock.patch(\"aiohttp.connector.ClientRequest\")",
          "503:     @mock.patch(",
          "",
          "[Removed Lines]",
          "483:             ]",
          "484:         )",
          "486:         # Called on connection to http://proxy.example.com",
          "487:         self.loop.create_connection = make_mocked_coro((mock.Mock(), mock.Mock()))",
          "488:         # Called on connection to https://www.python.org",
          "489:         self.loop.start_tls = make_mocked_coro(raise_exception=ssl.CertificateError)",
          "491:         req = ClientRequest(",
          "492:             \"GET\",",
          "493:             URL(\"https://www.python.org\"),",
          "494:             proxy=URL(\"http://proxy.example.com\"),",
          "495:             loop=self.loop,",
          "496:         )",
          "497:         with self.assertRaises(aiohttp.ClientConnectorCertificateError):",
          "498:             self.loop.run_until_complete(",
          "499:                 connector._create_connection(req, None, aiohttp.ClientTimeout())",
          "500:             )",
          "",
          "[Added Lines]",
          "535:                 with mock.patch.object(",
          "536:                     connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "537:                 ):",
          "538:                     tr, proto = mock.Mock(), mock.Mock()",
          "539:                     # Called on connection to http://proxy.example.com",
          "540:                     with mock.patch.object(",
          "541:                         self.loop,",
          "542:                         \"create_connection\",",
          "543:                         autospec=True,",
          "544:                         return_value=(tr, proto),",
          "545:                     ):",
          "546:                         # Called on connection to https://www.python.org",
          "547:                         with mock.patch.object(",
          "548:                             self.loop,",
          "549:                             \"start_tls\",",
          "550:                             autospec=True,",
          "551:                             side_effect=ssl.CertificateError,",
          "552:                         ):",
          "553:                             req = ClientRequest(",
          "554:                                 \"GET\",",
          "555:                                 URL(\"https://www.python.org\"),",
          "556:                                 proxy=URL(\"http://proxy.example.com\"),",
          "557:                                 loop=self.loop,",
          "558:                             )",
          "559:                             with self.assertRaises(",
          "560:                                 aiohttp.ClientConnectorCertificateError",
          "561:                             ):",
          "562:                                 self.loop.run_until_complete(",
          "563:                                     connector._create_connection(",
          "564:                                         req, [], aiohttp.ClientTimeout()",
          "565:                                     )",
          "566:                                 )",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "506:         spec_set=True,",
          "507:     )",
          "508:     def test_https_connect_ssl_error(",
          "510:     ) -> None:",
          "511:         proxy_req = ClientRequest(",
          "512:             \"GET\", URL(\"http://proxy.example.com\"), loop=self.loop",
          "",
          "[Removed Lines]",
          "509:         self, start_connection: Any, ClientRequestMock: Any",
          "",
          "[Added Lines]",
          "575:         self, start_connection: mock.Mock, ClientRequestMock: mock.Mock",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "517:             \"get\",",
          "518:             URL(\"http://proxy.example.com\"),",
          "519:             request_info=mock.Mock(),",
          "521:             continue100=None,",
          "522:             timer=TimerNoop(),",
          "523:             traces=[],",
          "524:             loop=self.loop,",
          "525:             session=mock.Mock(),",
          "526:         )",
          "537:                     \"hostname\": \"hostname\",",
          "538:                     \"host\": \"127.0.0.1\",",
          "539:                     \"port\": 80,",
          "",
          "[Removed Lines]",
          "520:             writer=None,",
          "527:         proxy_req.send = make_mocked_coro(proxy_resp)",
          "528:         proxy_resp.start = make_mocked_coro(mock.Mock(status=200))",
          "530:         async def make_conn():",
          "531:             return aiohttp.TCPConnector()",
          "533:         connector = self.loop.run_until_complete(make_conn())",
          "534:         connector._resolve_host = make_mocked_coro(",
          "535:             [",
          "536:                 {",
          "",
          "[Added Lines]",
          "586:             writer=None,  # type: ignore[arg-type]",
          "593:         with mock.patch.object(",
          "594:             proxy_req, \"send\", autospec=True, return_value=proxy_resp",
          "595:         ):",
          "596:             with mock.patch.object(proxy_resp, \"start\", autospec=True) as m:",
          "597:                 m.return_value.status = 200",
          "599:                 async def make_conn() -> aiohttp.TCPConnector:",
          "600:                     return aiohttp.TCPConnector()",
          "602:                 connector = self.loop.run_until_complete(make_conn())",
          "603:                 r = {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "541:                     \"proto\": 0,",
          "542:                     \"flags\": 0,",
          "543:                 }",
          "565:     @mock.patch(\"aiohttp.connector.ClientRequest\")",
          "566:     @mock.patch(",
          "",
          "[Removed Lines]",
          "544:             ]",
          "545:         )",
          "547:         # Called on connection to http://proxy.example.com",
          "548:         self.loop.create_connection = make_mocked_coro(",
          "549:             (mock.Mock(), mock.Mock()),",
          "550:         )",
          "551:         # Called on connection to https://www.python.org",
          "552:         self.loop.start_tls = make_mocked_coro(raise_exception=ssl.SSLError)",
          "554:         req = ClientRequest(",
          "555:             \"GET\",",
          "556:             URL(\"https://www.python.org\"),",
          "557:             proxy=URL(\"http://proxy.example.com\"),",
          "558:             loop=self.loop,",
          "559:         )",
          "560:         with self.assertRaises(aiohttp.ClientConnectorSSLError):",
          "561:             self.loop.run_until_complete(",
          "562:                 connector._create_connection(req, None, aiohttp.ClientTimeout())",
          "563:             )",
          "",
          "[Added Lines]",
          "611:                 with mock.patch.object(",
          "612:                     connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "613:                 ):",
          "614:                     tr, proto = mock.Mock(), mock.Mock()",
          "615:                     # Called on connection to http://proxy.example.com",
          "616:                     with mock.patch.object(",
          "617:                         self.loop,",
          "618:                         \"create_connection\",",
          "619:                         autospec=True,",
          "620:                         return_value=(tr, proto),",
          "621:                     ):",
          "622:                         # Called on connection to https://www.python.org",
          "623:                         with mock.patch.object(",
          "624:                             self.loop,",
          "625:                             \"start_tls\",",
          "626:                             autospec=True,",
          "627:                             side_effect=ssl.SSLError,",
          "628:                         ):",
          "629:                             req = ClientRequest(",
          "630:                                 \"GET\",",
          "631:                                 URL(\"https://www.python.org\"),",
          "632:                                 proxy=URL(\"http://proxy.example.com\"),",
          "633:                                 loop=self.loop,",
          "634:                             )",
          "635:                             with self.assertRaises(aiohttp.ClientConnectorSSLError):",
          "636:                                 self.loop.run_until_complete(",
          "637:                                     connector._create_connection(",
          "638:                                         req, [], aiohttp.ClientTimeout()",
          "639:                                     )",
          "640:                                 )",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "569:         spec_set=True,",
          "570:     )",
          "571:     def test_https_connect_http_proxy_error(",
          "573:     ) -> None:",
          "574:         proxy_req = ClientRequest(",
          "575:             \"GET\", URL(\"http://proxy.example.com\"), loop=self.loop",
          "",
          "[Removed Lines]",
          "572:         self, start_connection: Any, ClientRequestMock: Any",
          "",
          "[Added Lines]",
          "649:         self, start_connection: mock.Mock, ClientRequestMock: mock.Mock",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "580:             \"get\",",
          "581:             URL(\"http://proxy.example.com\"),",
          "582:             request_info=mock.Mock(),",
          "584:             continue100=None,",
          "585:             timer=TimerNoop(),",
          "586:             traces=[],",
          "587:             loop=self.loop,",
          "588:             session=mock.Mock(),",
          "589:         )",
          "600:                     \"hostname\": \"hostname\",",
          "601:                     \"host\": \"127.0.0.1\",",
          "602:                     \"port\": 80,",
          "",
          "[Removed Lines]",
          "583:             writer=None,",
          "590:         proxy_req.send = make_mocked_coro(proxy_resp)",
          "591:         proxy_resp.start = make_mocked_coro(mock.Mock(status=400, reason=\"bad request\"))",
          "593:         async def make_conn():",
          "594:             return aiohttp.TCPConnector()",
          "596:         connector = self.loop.run_until_complete(make_conn())",
          "597:         connector._resolve_host = make_mocked_coro(",
          "598:             [",
          "599:                 {",
          "",
          "[Added Lines]",
          "660:             writer=None,  # type: ignore[arg-type]",
          "667:         with mock.patch.object(",
          "668:             proxy_req, \"send\", autospec=True, return_value=proxy_resp",
          "669:         ):",
          "670:             with mock.patch.object(proxy_resp, \"start\", autospec=True) as m:",
          "671:                 m.return_value.status = 400",
          "672:                 m.return_value.reason = \"bad request\"",
          "674:                 async def make_conn() -> aiohttp.TCPConnector:",
          "675:                     return aiohttp.TCPConnector()",
          "677:                 connector = self.loop.run_until_complete(make_conn())",
          "678:                 r = {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "604:                     \"proto\": 0,",
          "605:                     \"flags\": 0,",
          "606:                 }",
          "631:     @mock.patch(\"aiohttp.connector.ClientRequest\")",
          "632:     @mock.patch(",
          "",
          "[Removed Lines]",
          "607:             ]",
          "608:         )",
          "610:         tr, proto = mock.Mock(), mock.Mock()",
          "611:         tr.get_extra_info.return_value = None",
          "612:         self.loop.create_connection = make_mocked_coro((tr, proto))",
          "614:         req = ClientRequest(",
          "615:             \"GET\",",
          "616:             URL(\"https://www.python.org\"),",
          "617:             proxy=URL(\"http://proxy.example.com\"),",
          "618:             loop=self.loop,",
          "619:         )",
          "620:         with self.assertRaisesRegex(",
          "621:             aiohttp.ClientHttpProxyError, \"400, message='bad request'\"",
          "622:         ):",
          "623:             self.loop.run_until_complete(",
          "624:                 connector._create_connection(req, None, aiohttp.ClientTimeout())",
          "625:             )",
          "627:         self.loop.run_until_complete(proxy_req.close())",
          "628:         proxy_resp.close()",
          "629:         self.loop.run_until_complete(req.close())",
          "",
          "[Added Lines]",
          "686:                 with mock.patch.object(",
          "687:                     connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "688:                 ):",
          "689:                     tr, proto = mock.Mock(), mock.Mock()",
          "690:                     tr.get_extra_info.return_value = None",
          "691:                     # Called on connection to http://proxy.example.com",
          "692:                     with mock.patch.object(",
          "693:                         self.loop,",
          "694:                         \"create_connection\",",
          "695:                         autospec=True,",
          "696:                         return_value=(tr, proto),",
          "697:                     ):",
          "698:                         req = ClientRequest(",
          "699:                             \"GET\",",
          "700:                             URL(\"https://www.python.org\"),",
          "701:                             proxy=URL(\"http://proxy.example.com\"),",
          "702:                             loop=self.loop,",
          "703:                         )",
          "704:                         with self.assertRaisesRegex(",
          "705:                             aiohttp.ClientHttpProxyError, \"400, message='bad request'\"",
          "706:                         ):",
          "707:                             self.loop.run_until_complete(",
          "708:                                 connector._create_connection(",
          "709:                                     req, [], aiohttp.ClientTimeout()",
          "710:                                 )",
          "711:                             )",
          "713:                         self.loop.run_until_complete(proxy_req.close())",
          "714:                         proxy_resp.close()",
          "715:                         self.loop.run_until_complete(req.close())",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "635:         spec_set=True,",
          "636:     )",
          "637:     def test_https_connect_resp_start_error(",
          "639:     ) -> None:",
          "640:         proxy_req = ClientRequest(",
          "641:             \"GET\", URL(\"http://proxy.example.com\"), loop=self.loop",
          "",
          "[Removed Lines]",
          "638:         self, start_connection: Any, ClientRequestMock: Any",
          "",
          "[Added Lines]",
          "724:         self, start_connection: mock.Mock, ClientRequestMock: mock.Mock",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "646:             \"get\",",
          "647:             URL(\"http://proxy.example.com\"),",
          "648:             request_info=mock.Mock(),",
          "650:             continue100=None,",
          "651:             timer=TimerNoop(),",
          "652:             traces=[],",
          "653:             loop=self.loop,",
          "654:             session=mock.Mock(),",
          "655:         )",
          "666:                     \"hostname\": \"hostname\",",
          "667:                     \"host\": \"127.0.0.1\",",
          "668:                     \"port\": 80,",
          "",
          "[Removed Lines]",
          "649:             writer=None,",
          "656:         proxy_req.send = make_mocked_coro(proxy_resp)",
          "657:         proxy_resp.start = make_mocked_coro(raise_exception=OSError(\"error message\"))",
          "659:         async def make_conn():",
          "660:             return aiohttp.TCPConnector()",
          "662:         connector = self.loop.run_until_complete(make_conn())",
          "663:         connector._resolve_host = make_mocked_coro(",
          "664:             [",
          "665:                 {",
          "",
          "[Added Lines]",
          "735:             writer=None,  # type: ignore[arg-type]",
          "742:         with mock.patch.object(",
          "743:             proxy_req, \"send\", autospec=True, return_value=proxy_resp",
          "744:         ):",
          "745:             with mock.patch.object(",
          "746:                 proxy_resp, \"start\", autospec=True, side_effect=OSError(\"error message\")",
          "747:             ):",
          "749:                 async def make_conn() -> aiohttp.TCPConnector:",
          "750:                     return aiohttp.TCPConnector()",
          "752:                 connector = self.loop.run_until_complete(make_conn())",
          "753:                 r = {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "670:                     \"proto\": 0,",
          "671:                     \"flags\": 0,",
          "672:                 }",
          "691:     @mock.patch(\"aiohttp.connector.ClientRequest\")",
          "692:     @mock.patch(",
          "",
          "[Removed Lines]",
          "673:             ]",
          "674:         )",
          "676:         tr, proto = mock.Mock(), mock.Mock()",
          "677:         tr.get_extra_info.return_value = None",
          "678:         self.loop.create_connection = make_mocked_coro((tr, proto))",
          "680:         req = ClientRequest(",
          "681:             \"GET\",",
          "682:             URL(\"https://www.python.org\"),",
          "683:             proxy=URL(\"http://proxy.example.com\"),",
          "684:             loop=self.loop,",
          "685:         )",
          "686:         with self.assertRaisesRegex(OSError, \"error message\"):",
          "687:             self.loop.run_until_complete(",
          "688:                 connector._create_connection(req, None, aiohttp.ClientTimeout())",
          "689:             )",
          "",
          "[Added Lines]",
          "761:                 with mock.patch.object(",
          "762:                     connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "763:                 ):",
          "764:                     tr, proto = mock.Mock(), mock.Mock()",
          "765:                     tr.get_extra_info.return_value = None",
          "766:                     # Called on connection to http://proxy.example.com",
          "767:                     with mock.patch.object(",
          "768:                         self.loop,",
          "769:                         \"create_connection\",",
          "770:                         autospec=True,",
          "771:                         return_value=(tr, proto),",
          "772:                     ):",
          "773:                         req = ClientRequest(",
          "774:                             \"GET\",",
          "775:                             URL(\"https://www.python.org\"),",
          "776:                             proxy=URL(\"http://proxy.example.com\"),",
          "777:                             loop=self.loop,",
          "778:                         )",
          "779:                         with self.assertRaisesRegex(OSError, \"error message\"):",
          "780:                             self.loop.run_until_complete(",
          "781:                                 connector._create_connection(",
          "782:                                     req, [], aiohttp.ClientTimeout()",
          "783:                                 )",
          "784:                             )",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "694:         autospec=True,",
          "695:         spec_set=True,",
          "696:     )",
          "698:         proxy_req = ClientRequest(",
          "699:             \"GET\", URL(\"http://proxy.example.com\"), loop=self.loop",
          "700:         )",
          "701:         ClientRequestMock.return_value = proxy_req",
          "704:             return aiohttp.TCPConnector()",
          "706:         connector = self.loop.run_until_complete(make_conn())",
          "735:     def test_proxy_auth_property(self) -> None:",
          "736:         req = aiohttp.ClientRequest(",
          "",
          "[Removed Lines]",
          "697:     def test_request_port(self, start_connection: Any, ClientRequestMock: Any) -> None:",
          "703:         async def make_conn():",
          "707:         connector._resolve_host = make_mocked_coro(",
          "708:             [",
          "709:                 {",
          "710:                     \"hostname\": \"hostname\",",
          "711:                     \"host\": \"127.0.0.1\",",
          "712:                     \"port\": 80,",
          "713:                     \"family\": socket.AF_INET,",
          "714:                     \"proto\": 0,",
          "715:                     \"flags\": 0,",
          "716:                 }",
          "717:             ]",
          "718:         )",
          "720:         tr, proto = mock.Mock(), mock.Mock()",
          "721:         tr.get_extra_info.return_value = None",
          "722:         self.loop.create_connection = make_mocked_coro((tr, proto))",
          "724:         req = ClientRequest(",
          "725:             \"GET\",",
          "726:             URL(\"http://localhost:1234/path\"),",
          "727:             proxy=URL(\"http://proxy.example.com\"),",
          "728:             loop=self.loop,",
          "729:         )",
          "730:         self.loop.run_until_complete(",
          "731:             connector._create_connection(req, None, aiohttp.ClientTimeout())",
          "732:         )",
          "733:         self.assertEqual(req.url, URL(\"http://localhost:1234/path\"))",
          "",
          "[Added Lines]",
          "792:     def test_request_port(",
          "793:         self, start_connection: mock.Mock, ClientRequestMock: mock.Mock",
          "794:     ) -> None:",
          "800:         async def make_conn() -> aiohttp.TCPConnector:",
          "804:         r = {",
          "805:             \"hostname\": \"hostname\",",
          "806:             \"host\": \"127.0.0.1\",",
          "807:             \"port\": 80,",
          "808:             \"family\": socket.AF_INET,",
          "809:             \"proto\": 0,",
          "810:             \"flags\": 0,",
          "811:         }",
          "812:         with mock.patch.object(",
          "813:             connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "814:         ):",
          "815:             tr, proto = mock.Mock(), mock.Mock()",
          "816:             tr.get_extra_info.return_value = None",
          "817:             # Called on connection to http://proxy.example.com",
          "818:             with mock.patch.object(",
          "819:                 self.loop, \"create_connection\", autospec=True, return_value=(tr, proto)",
          "820:             ):",
          "821:                 req = ClientRequest(",
          "822:                     \"GET\",",
          "823:                     URL(\"http://localhost:1234/path\"),",
          "824:                     proxy=URL(\"http://proxy.example.com\"),",
          "825:                     loop=self.loop,",
          "826:                 )",
          "827:                 self.loop.run_until_complete(",
          "828:                     connector._create_connection(req, [], aiohttp.ClientTimeout())",
          "829:                 )",
          "830:                 self.assertEqual(req.url, URL(\"http://localhost:1234/path\"))",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "758:         spec_set=True,",
          "759:     )",
          "760:     def test_https_connect_pass_ssl_context(",
          "762:     ) -> None:",
          "763:         proxy_req = ClientRequest(",
          "764:             \"GET\", URL(\"http://proxy.example.com\"), loop=self.loop",
          "",
          "[Removed Lines]",
          "761:         self, start_connection: Any, ClientRequestMock: Any",
          "",
          "[Added Lines]",
          "858:         self, start_connection: mock.Mock, ClientRequestMock: mock.Mock",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "769:             \"get\",",
          "770:             URL(\"http://proxy.example.com\"),",
          "771:             request_info=mock.Mock(),",
          "773:             continue100=None,",
          "774:             timer=TimerNoop(),",
          "775:             traces=[],",
          "776:             loop=self.loop,",
          "777:             session=mock.Mock(),",
          "778:         )",
          "789:                     \"hostname\": \"hostname\",",
          "790:                     \"host\": \"127.0.0.1\",",
          "791:                     \"port\": 80,",
          "",
          "[Removed Lines]",
          "772:             writer=None,",
          "779:         proxy_req.send = make_mocked_coro(proxy_resp)",
          "780:         proxy_resp.start = make_mocked_coro(mock.Mock(status=200))",
          "782:         async def make_conn():",
          "783:             return aiohttp.TCPConnector()",
          "785:         connector = self.loop.run_until_complete(make_conn())",
          "786:         connector._resolve_host = make_mocked_coro(",
          "787:             [",
          "788:                 {",
          "",
          "[Added Lines]",
          "869:             writer=None,  # type: ignore[arg-type]",
          "876:         with mock.patch.object(",
          "877:             proxy_req, \"send\", autospec=True, return_value=proxy_resp",
          "878:         ):",
          "879:             with mock.patch.object(proxy_resp, \"start\", autospec=True) as m:",
          "880:                 m.return_value.status = 200",
          "882:                 async def make_conn() -> aiohttp.TCPConnector:",
          "883:                     return aiohttp.TCPConnector()",
          "885:                 connector = self.loop.run_until_complete(make_conn())",
          "886:                 r = {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "793:                     \"proto\": 0,",
          "794:                     \"flags\": 0,",
          "795:                 }",
          "829:     @mock.patch(\"aiohttp.connector.ClientRequest\")",
          "830:     @mock.patch(",
          "",
          "[Removed Lines]",
          "796:             ]",
          "797:         )",
          "799:         tr, proto = mock.Mock(), mock.Mock()",
          "800:         self.loop.create_connection = make_mocked_coro((tr, proto))",
          "801:         self.loop.start_tls = make_mocked_coro(mock.Mock())",
          "803:         req = ClientRequest(",
          "804:             \"GET\",",
          "805:             URL(\"https://www.python.org\"),",
          "806:             proxy=URL(\"http://proxy.example.com\"),",
          "807:             loop=self.loop,",
          "808:         )",
          "809:         self.loop.run_until_complete(",
          "810:             connector._create_connection(req, None, aiohttp.ClientTimeout())",
          "811:         )",
          "813:         self.loop.start_tls.assert_called_with(",
          "814:             mock.ANY,",
          "815:             mock.ANY,",
          "816:             self.loop.run_until_complete(connector._make_or_get_ssl_context(True)),",
          "817:             server_hostname=\"www.python.org\",",
          "818:             ssl_handshake_timeout=mock.ANY,",
          "819:         )",
          "821:         self.assertEqual(req.url.path, \"/\")",
          "822:         self.assertEqual(proxy_req.method, \"CONNECT\")",
          "823:         self.assertEqual(proxy_req.url, URL(\"https://www.python.org\"))",
          "825:         self.loop.run_until_complete(proxy_req.close())",
          "826:         proxy_resp.close()",
          "827:         self.loop.run_until_complete(req.close())",
          "",
          "[Added Lines]",
          "894:                 with mock.patch.object(",
          "895:                     connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "896:                 ):",
          "897:                     tr, proto = mock.Mock(), mock.Mock()",
          "898:                     with mock.patch.object(",
          "899:                         self.loop,",
          "900:                         \"create_connection\",",
          "901:                         autospec=True,",
          "902:                         return_value=(tr, proto),",
          "903:                     ):",
          "904:                         with mock.patch.object(",
          "905:                             self.loop,",
          "906:                             \"start_tls\",",
          "907:                             autospec=True,",
          "908:                             return_value=mock.Mock(),",
          "909:                         ) as tls_m:",
          "910:                             req = ClientRequest(",
          "911:                                 \"GET\",",
          "912:                                 URL(\"https://www.python.org\"),",
          "913:                                 proxy=URL(\"http://proxy.example.com\"),",
          "914:                                 loop=self.loop,",
          "915:                             )",
          "916:                             self.loop.run_until_complete(",
          "917:                                 connector._create_connection(",
          "918:                                     req, [], aiohttp.ClientTimeout()",
          "919:                                 )",
          "920:                             )",
          "922:                             tls_m.assert_called_with(",
          "923:                                 mock.ANY,",
          "924:                                 mock.ANY,",
          "925:                                 self.loop.run_until_complete(",
          "926:                                     connector._make_or_get_ssl_context(True)",
          "927:                                 ),",
          "928:                                 server_hostname=\"www.python.org\",",
          "929:                                 ssl_handshake_timeout=mock.ANY,",
          "930:                             )",
          "932:                             self.assertEqual(req.url.path, \"/\")",
          "933:                             self.assertEqual(proxy_req.method, \"CONNECT\")",
          "934:                             self.assertEqual(",
          "935:                                 proxy_req.url, URL(\"https://www.python.org\")",
          "936:                             )",
          "938:                             self.loop.run_until_complete(proxy_req.close())",
          "939:                             proxy_resp.close()",
          "940:                             self.loop.run_until_complete(req.close())",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "832:         autospec=True,",
          "833:         spec_set=True,",
          "834:     )",
          "836:         proxy_req = ClientRequest(",
          "837:             \"GET\",",
          "838:             URL(\"http://proxy.example.com\"),",
          "",
          "[Removed Lines]",
          "835:     def test_https_auth(self, start_connection: Any, ClientRequestMock: Any) -> None:",
          "",
          "[Added Lines]",
          "948:     def test_https_auth(",
          "949:         self, start_connection: mock.Mock, ClientRequestMock: mock.Mock",
          "950:     ) -> None:",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "845:             \"get\",",
          "846:             URL(\"http://proxy.example.com\"),",
          "847:             request_info=mock.Mock(),",
          "849:             continue100=None,",
          "850:             timer=TimerNoop(),",
          "851:             traces=[],",
          "852:             loop=self.loop,",
          "853:             session=mock.Mock(),",
          "854:         )",
          "865:                     \"hostname\": \"hostname\",",
          "866:                     \"host\": \"127.0.0.1\",",
          "867:                     \"port\": 80,",
          "",
          "[Removed Lines]",
          "848:             writer=None,",
          "855:         proxy_req.send = make_mocked_coro(proxy_resp)",
          "856:         proxy_resp.start = make_mocked_coro(mock.Mock(status=200))",
          "858:         async def make_conn():",
          "859:             return aiohttp.TCPConnector()",
          "861:         connector = self.loop.run_until_complete(make_conn())",
          "862:         connector._resolve_host = make_mocked_coro(",
          "863:             [",
          "864:                 {",
          "",
          "[Added Lines]",
          "963:             writer=None,  # type: ignore[arg-type]",
          "970:         with mock.patch.object(",
          "971:             proxy_req, \"send\", autospec=True, return_value=proxy_resp",
          "972:         ):",
          "973:             with mock.patch.object(proxy_resp, \"start\", autospec=True) as m:",
          "974:                 m.return_value.status = 200",
          "976:                 async def make_conn() -> aiohttp.TCPConnector:",
          "977:                     return aiohttp.TCPConnector()",
          "979:                 connector = self.loop.run_until_complete(make_conn())",
          "980:                 r = {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "869:                     \"proto\": 0,",
          "870:                     \"flags\": 0,",
          "871:                 }",
          "",
          "[Removed Lines]",
          "872:             ]",
          "873:         )",
          "875:         tr, proto = mock.Mock(), mock.Mock()",
          "876:         self.loop.create_connection = make_mocked_coro((tr, proto))",
          "877:         self.loop.start_tls = make_mocked_coro(mock.Mock())",
          "879:         self.assertIn(\"AUTHORIZATION\", proxy_req.headers)",
          "880:         self.assertNotIn(\"PROXY-AUTHORIZATION\", proxy_req.headers)",
          "882:         req = ClientRequest(",
          "883:             \"GET\",",
          "884:             URL(\"https://www.python.org\"),",
          "885:             proxy=URL(\"http://proxy.example.com\"),",
          "886:             loop=self.loop,",
          "887:         )",
          "888:         self.assertNotIn(\"AUTHORIZATION\", req.headers)",
          "889:         self.assertNotIn(\"PROXY-AUTHORIZATION\", req.headers)",
          "890:         self.loop.run_until_complete(",
          "891:             connector._create_connection(req, None, aiohttp.ClientTimeout())",
          "892:         )",
          "894:         self.assertEqual(req.url.path, \"/\")",
          "895:         self.assertNotIn(\"AUTHORIZATION\", req.headers)",
          "896:         self.assertNotIn(\"PROXY-AUTHORIZATION\", req.headers)",
          "897:         self.assertNotIn(\"AUTHORIZATION\", proxy_req.headers)",
          "898:         self.assertIn(\"PROXY-AUTHORIZATION\", proxy_req.headers)",
          "900:         connector._resolve_host.assert_called_with(",
          "901:             \"proxy.example.com\", 80, traces=mock.ANY",
          "902:         )",
          "904:         self.loop.run_until_complete(proxy_req.close())",
          "905:         proxy_resp.close()",
          "906:         self.loop.run_until_complete(req.close())",
          "",
          "[Added Lines]",
          "988:                 with mock.patch.object(",
          "989:                     connector, \"_resolve_host\", autospec=True, return_value=[r]",
          "990:                 ) as host_m:",
          "991:                     tr, proto = mock.Mock(), mock.Mock()",
          "992:                     with mock.patch.object(",
          "993:                         self.loop,",
          "994:                         \"create_connection\",",
          "995:                         autospec=True,",
          "996:                         return_value=(tr, proto),",
          "997:                     ):",
          "998:                         with mock.patch.object(",
          "999:                             self.loop,",
          "1000:                             \"start_tls\",",
          "1001:                             autospec=True,",
          "1002:                             return_value=mock.Mock(),",
          "1003:                         ):",
          "1004:                             self.assertIn(\"AUTHORIZATION\", proxy_req.headers)",
          "1005:                             self.assertNotIn(\"PROXY-AUTHORIZATION\", proxy_req.headers)",
          "1007:                             req = ClientRequest(",
          "1008:                                 \"GET\",",
          "1009:                                 URL(\"https://www.python.org\"),",
          "1010:                                 proxy=URL(\"http://proxy.example.com\"),",
          "1011:                                 loop=self.loop,",
          "1012:                             )",
          "1013:                             self.assertNotIn(\"AUTHORIZATION\", req.headers)",
          "1014:                             self.assertNotIn(\"PROXY-AUTHORIZATION\", req.headers)",
          "1015:                             self.loop.run_until_complete(",
          "1016:                                 connector._create_connection(",
          "1017:                                     req, [], aiohttp.ClientTimeout()",
          "1018:                                 )",
          "1019:                             )",
          "1021:                             self.assertEqual(req.url.path, \"/\")",
          "1022:                             self.assertNotIn(\"AUTHORIZATION\", req.headers)",
          "1023:                             self.assertNotIn(\"PROXY-AUTHORIZATION\", req.headers)",
          "1024:                             self.assertNotIn(\"AUTHORIZATION\", proxy_req.headers)",
          "1025:                             self.assertIn(\"PROXY-AUTHORIZATION\", proxy_req.headers)",
          "1027:                             host_m.assert_called_with(",
          "1028:                                 \"proxy.example.com\", 80, traces=mock.ANY",
          "1029:                             )",
          "1031:                             self.loop.run_until_complete(proxy_req.close())",
          "1032:                             proxy_resp.close()",
          "1033:                             self.loop.run_until_complete(req.close())",
          "",
          "---------------"
        ],
        "tests/test_proxy_functional.py||tests/test_proxy_functional.py": [
          "File: tests/test_proxy_functional.py -> tests/test_proxy_functional.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import asyncio",
          "3: import os",
          "4: import pathlib",
          "5: import ssl",
          "6: import sys",
          "7: from re import match as match_regex",
          "9: from unittest import mock",
          "10: from uuid import uuid4",
          "12: import proxy",
          "13: import pytest",
          "14: from yarl import URL",
          "16: import aiohttp",
          "18: from aiohttp.client_exceptions import ClientConnectionError",
          "20: ASYNCIO_SUPPORTS_TLS_IN_TLS = sys.version_info >= (3, 11)",
          "23: @pytest.fixture",
          "25:     \"\"\"Return the URL of an instance of a running secure proxy.",
          "27:     This fixture also spawns that instance and tears it down after the test.",
          "",
          "[Removed Lines]",
          "1: # type: ignore",
          "8: from typing import Any",
          "17: from aiohttp import web",
          "24: def secure_proxy_url(tls_certificate_pem_path):",
          "",
          "[Added Lines]",
          "7: from typing import (",
          "8:     TYPE_CHECKING,",
          "9:     Awaitable,",
          "10:     Callable,",
          "11:     Dict,",
          "12:     Iterator,",
          "13:     Optional,",
          "14:     TypedDict,",
          "15:     Union,",
          "16: )",
          "22: from pytest_mock import MockerFixture",
          "26: from aiohttp import ClientResponse, web",
          "27: from aiohttp.client import _RequestOptions",
          "29: from aiohttp.pytest_plugin import AiohttpRawServer, AiohttpServer",
          "34: class _ResponseArgs(TypedDict):",
          "35:     status: int",
          "36:     headers: Optional[Dict[str, str]]",
          "37:     body: Optional[bytes]",
          "40: if sys.version_info >= (3, 11) and TYPE_CHECKING:",
          "41:     from typing import Unpack",
          "43:     async def get_request(",
          "44:         method: str = \"GET\",",
          "46:         url: Union[str, URL],",
          "47:         trust_env: bool = False,",
          "49:     ) -> ClientResponse: ...",
          "51: else:",
          "52:     from typing import Any",
          "54:     async def get_request(",
          "55:         method: str = \"GET\",",
          "57:         url: Union[str, URL],",
          "58:         trust_env: bool = False,",
          "60:     ) -> ClientResponse:",
          "61:         connector = aiohttp.TCPConnector(ssl=False)",
          "62:         async with aiohttp.ClientSession(",
          "63:             connector=connector, trust_env=trust_env",
          "64:         ) as client:",
          "65:             async with client.request(method, url, **kwargs) as resp:",
          "66:                 return resp",
          "70: def secure_proxy_url(tls_certificate_pem_path: str) -> Iterator[URL]:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:         \"--hostname\",",
          "36:         \"127.0.0.1\",  # network interface to listen to",
          "37:         \"--port\",",
          "39:         \"--cert-file\",",
          "40:         tls_certificate_pem_path,  # contains both key and cert",
          "41:         \"--key-file\",",
          "",
          "[Removed Lines]",
          "38:         0,  # ephemeral port, so that kernel allocates a free one",
          "",
          "[Added Lines]",
          "84:         \"0\",  # ephemeral port, so that kernel allocates a free one",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: @pytest.fixture",
          "55:     return str(uuid4())",
          "58: @pytest.fixture(params=(\"http\", \"https\"))",
          "63: @pytest.fixture",
          "64: async def web_server_endpoint_url(",
          "79:         return web.Response(text=web_server_endpoint_payload)",
          "81:     app = web.Application()",
          "82:     app.router.add_route(\"GET\", \"/\", handler)",
          "85:     return URL.build(",
          "86:         scheme=web_server_endpoint_type,",
          "",
          "[Removed Lines]",
          "54: def web_server_endpoint_payload():",
          "59: def web_server_endpoint_type(request):",
          "60:     return request.param",
          "65:     aiohttp_server,",
          "66:     ssl_ctx,",
          "67:     web_server_endpoint_payload,",
          "68:     web_server_endpoint_type,",
          "69: ):",
          "70:     server_kwargs = (",
          "71:         {",
          "72:             \"ssl\": ssl_ctx,",
          "73:         }",
          "74:         if web_server_endpoint_type == \"https\"",
          "75:         else {}",
          "76:     )",
          "78:     async def handler(*args, **kwargs):",
          "83:     server = await aiohttp_server(app, **server_kwargs)",
          "",
          "[Added Lines]",
          "100: def web_server_endpoint_payload() -> str:",
          "105: def web_server_endpoint_type(request: pytest.FixtureRequest) -> str:",
          "106:     return request.param  # type: ignore[no-any-return]",
          "111:     aiohttp_server: AiohttpServer,",
          "112:     ssl_ctx: ssl.SSLContext,",
          "113:     web_server_endpoint_payload: str,",
          "114:     web_server_endpoint_type: str,",
          "115: ) -> URL:",
          "116:     async def handler(request: web.Request) -> web.Response:",
          "121:     if web_server_endpoint_type == \"https\":",
          "122:         server = await aiohttp_server(app, ssl=ssl_ctx)",
          "123:     else:",
          "124:         server = await aiohttp_server(app)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101: async def test_secure_https_proxy_absolute_path(",
          "102:     client_ssl_ctx: ssl.SSLContext,",
          "103:     secure_proxy_url: URL,",
          "105:     web_server_endpoint_payload: str,",
          "106: ) -> None:",
          "107:     \"\"\"Ensure HTTP(S) sites are accessible through a secure proxy.\"\"\"",
          "",
          "[Removed Lines]",
          "104:     web_server_endpoint_url: str,",
          "",
          "[Added Lines]",
          "145:     web_server_endpoint_url: URL,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141:     \"\"\"",
          "142:     url = URL.build(scheme=web_server_endpoint_type, host=\"python.org\")",
          "144:     escaped_host_port = \":\".join((url.host.replace(\".\", r\"\\.\"), str(url.port)))",
          "145:     escaped_proxy_url = str(secure_proxy_url).replace(\".\", r\"\\.\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:     assert url.host is not None",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "194: @pytest.fixture",
          "196:     # Handle all proxy requests and imitate remote server response.",
          "198:     _patch_ssl_transport(monkeypatch)",
          "202:     proxy_mock = mock.Mock()",
          "205:         proxy_mock.request = request",
          "206:         proxy_mock.requests_list.append(request)",
          "208:         response = default_response.copy()",
          "209:         if isinstance(proxy_mock.return_value, dict):",
          "212:         headers = response[\"headers\"]",
          "213:         if not headers:",
          "",
          "[Removed Lines]",
          "195: def proxy_test_server(aiohttp_raw_server: Any, loop: Any, monkeypatch: Any):",
          "200:     default_response = dict(status=200, headers=None, body=None)",
          "204:     async def proxy_handler(request):",
          "210:             response.update(proxy_mock.return_value)",
          "",
          "[Added Lines]",
          "237: def proxy_test_server(",
          "238:     aiohttp_raw_server: AiohttpRawServer,",
          "239:     loop: asyncio.AbstractEventLoop,",
          "240:     monkeypatch: pytest.MonkeyPatch,",
          "241: ) -> Callable[[], Awaitable[mock.Mock]]:",
          "246:     default_response = _ResponseArgs(status=200, headers=None, body=None)",
          "250:     async def proxy_handler(request: web.Request) -> web.Response:",
          "256:             response.update(proxy_mock.return_value)  # type: ignore[typeddict-item]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "223:         await resp.write_eof()",
          "224:         return resp",
          "227:         proxy_mock.request = None",
          "228:         proxy_mock.auth = None",
          "229:         proxy_mock.requests_list = []",
          "233:         proxy_mock.server = server",
          "234:         proxy_mock.url = server.make_url(\"/\")",
          "",
          "[Removed Lines]",
          "226:     async def proxy_server():",
          "231:         server = await aiohttp_raw_server(proxy_handler)",
          "",
          "[Added Lines]",
          "272:     async def proxy_server() -> mock.Mock:",
          "277:         server = await aiohttp_raw_server(proxy_handler)  # type: ignore[arg-type]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "238:     return proxy_server",
          "254: async def test_proxy_http_absolute_path(",
          "256: ) -> None:",
          "257:     url = \"http://aiohttp.io/path?query=yes\"",
          "258:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "241: @pytest.fixture()",
          "242: def get_request(loop: Any):",
          "243:     async def _request(method=\"GET\", *, url, trust_env=False, **kwargs):",
          "244:         connector = aiohttp.TCPConnector(ssl=False)",
          "245:         async with aiohttp.ClientSession(",
          "246:             connector=connector, trust_env=trust_env",
          "247:         ) as client:",
          "248:             async with client.request(method, url, **kwargs) as resp:",
          "249:                 return resp",
          "251:     return _request",
          "255:     proxy_test_server: Any, get_request: Any",
          "",
          "[Added Lines]",
          "288:     proxy_test_server: Callable[[], Awaitable[mock.Mock]]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "265:     assert proxy.request.path_qs == \"/path?query=yes\"",
          "269:     url = \"http://aiohttp.io:2561/space sheep?q=can:fly\"",
          "270:     raw_url = \"/space%20sheep?q=can:fly\"",
          "271:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "268: async def test_proxy_http_raw_path(proxy_test_server: Any, get_request: Any) -> None:",
          "",
          "[Added Lines]",
          "301: async def test_proxy_http_raw_path(",
          "302:     proxy_test_server: Callable[[], Awaitable[mock.Mock]]",
          "303: ) -> None:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "279: async def test_proxy_http_idna_support(",
          "281: ) -> None:",
          "282:     url = \"http://\u00e9\u00e9.com/\"",
          "283:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "280:     proxy_test_server: Any, get_request: Any",
          "",
          "[Added Lines]",
          "315:     proxy_test_server: Callable[[], Awaitable[mock.Mock]]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "288:     assert proxy.request.path_qs == \"/\"",
          "292:     url = \"http://aiohttp.io/path\"",
          "293:     proxy_url = \"http://localhost:2242/\"",
          "",
          "[Removed Lines]",
          "291: async def test_proxy_http_connection_error(get_request: Any) -> None:",
          "",
          "[Added Lines]",
          "326: async def test_proxy_http_connection_error() -> None:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "299: async def test_proxy_http_bad_response(",
          "301: ) -> None:",
          "302:     url = \"http://aiohttp.io/path\"",
          "303:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "300:     proxy_test_server: Any, get_request: Any",
          "",
          "[Added Lines]",
          "335:     proxy_test_server: Callable[[], Awaitable[mock.Mock]]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "309:     assert resp.headers[\"Proxy-Agent\"] == \"TestProxy\"",
          "313:     url = \"http://aiohttp.io/path\"",
          "314:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "312: async def test_proxy_http_auth(proxy_test_server: Any, get_request: Any) -> None:",
          "",
          "[Added Lines]",
          "347: async def test_proxy_http_auth(",
          "348:     proxy_test_server: Callable[[], Awaitable[mock.Mock]]",
          "349: ) -> None:",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "335:     assert \"Proxy-Authorization\" in proxy.request.headers",
          "339:     url = \"http://aiohttp.io/path\"",
          "340:     auth = aiohttp.BasicAuth(\"\u044e\u0437\u0435\u0440\", \"\u043f\u0430\u0441\u0441\", \"utf-8\")",
          "341:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "338: async def test_proxy_http_auth_utf8(proxy_test_server: Any, get_request: Any) -> None:",
          "",
          "[Added Lines]",
          "375: async def test_proxy_http_auth_utf8(",
          "376:     proxy_test_server: Callable[[], Awaitable[mock.Mock]]",
          "377: ) -> None:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "349: async def test_proxy_http_auth_from_url(",
          "351: ) -> None:",
          "352:     url = \"http://aiohttp.io/path\"",
          "353:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "350:     proxy_test_server: Any, get_request: Any",
          "",
          "[Added Lines]",
          "389:     proxy_test_server: Callable[[], Awaitable[mock.Mock]]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "365:     assert \"Proxy-Authorization\" in proxy.request.headers",
          "369:     url = \"http://aiohttp.io/path\"",
          "371:     conn = aiohttp.TCPConnector()",
          "",
          "[Removed Lines]",
          "368: async def test_proxy_http_acquired_cleanup(proxy_test_server: Any, loop: Any) -> None:",
          "",
          "[Added Lines]",
          "407: async def test_proxy_http_acquired_cleanup(",
          "408:     proxy_test_server: Callable[[], Awaitable[mock.Mock]],",
          "409:     loop: asyncio.AbstractEventLoop,",
          "410: ) -> None:",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "386: @pytest.mark.skip(\"we need to reconsider how we test this\")",
          "387: async def test_proxy_http_acquired_cleanup_force(",
          "389: ) -> None:",
          "390:     url = \"http://aiohttp.io/path\"",
          "",
          "[Removed Lines]",
          "388:     proxy_test_server: Any, loop: Any",
          "",
          "[Added Lines]",
          "430:     proxy_test_server: Callable[[], Awaitable[mock.Mock]],",
          "431:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "396:     assert 0 == len(conn._acquired)",
          "399:         async with sess.get(url, proxy=proxy.url):",
          "400:             assert 1 == len(conn._acquired)",
          "",
          "[Removed Lines]",
          "398:     async def request():",
          "",
          "[Added Lines]",
          "441:     async def request() -> None:",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "409: @pytest.mark.skip(\"we need to reconsider how we test this\")",
          "411:     url = \"http://aiohttp.io/path\"",
          "412:     limit, multi_conn_num = 1, 5",
          "",
          "[Removed Lines]",
          "410: async def test_proxy_http_multi_conn_limit(proxy_test_server: Any, loop: Any) -> None:",
          "",
          "[Added Lines]",
          "453: async def test_proxy_http_multi_conn_limit(",
          "454:     proxy_test_server: Callable[[], Awaitable[mock.Mock]],",
          "455:     loop: asyncio.AbstractEventLoop,",
          "456: ) -> None:",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "418:     current_pid = None",
          "421:         # process requests only one by one",
          "422:         nonlocal current_pid",
          "",
          "[Removed Lines]",
          "420:     async def request(pid):",
          "",
          "[Added Lines]",
          "466:     async def request(pid: int) -> ClientResponse:",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "440: @pytest.mark.xfail",
          "442:     proxy = await proxy_test_server()",
          "443:     url = \"https://www.google.com.ua/search?q=aiohttp proxy\"",
          "",
          "[Removed Lines]",
          "441: async def xtest_proxy_https_connect(proxy_test_server: Any, get_request: Any) -> None:",
          "",
          "[Added Lines]",
          "487: async def test_proxy_https_connect(",
          "488:     proxy_test_server: Callable[[], Awaitable[mock.Mock]]",
          "489: ) -> None:",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "456: @pytest.mark.xfail",
          "459: ) -> None:",
          "460:     proxy = await proxy_test_server()",
          "461:     url = \"https://secure.aiohttp.io:2242/path\"",
          "",
          "[Removed Lines]",
          "457: async def xtest_proxy_https_connect_with_port(",
          "458:     proxy_test_server: Any, get_request: Any",
          "",
          "[Added Lines]",
          "505: async def test_proxy_https_connect_with_port(",
          "506:     proxy_test_server: Callable[[], Awaitable[mock.Mock]]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "474: @pytest.mark.xfail",
          "476:     sess = aiohttp.ClientSession()",
          "477:     proxy = await proxy_test_server()",
          "478:     proxy.return_value = {\"status\": 200, \"body\": b\"1\" * (2**20)}",
          "",
          "[Removed Lines]",
          "475: async def xtest_proxy_https_send_body(proxy_test_server: Any, loop: Any) -> None:",
          "",
          "[Added Lines]",
          "523: async def test_proxy_https_send_body(",
          "524:     proxy_test_server: Callable[[], Awaitable[mock.Mock]],",
          "525:     loop: asyncio.AbstractEventLoop,",
          "526: ) -> None:",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "488: @pytest.mark.xfail",
          "491: ) -> None:",
          "492:     url = \"https://\u00e9\u00e9.com/\"",
          "493:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "489: async def xtest_proxy_https_idna_support(",
          "490:     proxy_test_server: Any, get_request: Any",
          "",
          "[Added Lines]",
          "540: async def test_proxy_https_idna_support(",
          "541:     proxy_test_server: Callable[[], Awaitable[mock.Mock]]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "500:     assert connect.host == \"xn--9caa.com\"",
          "504:     url = \"https://secure.aiohttp.io/path\"",
          "505:     proxy_url = \"http://localhost:2242/\"",
          "",
          "[Removed Lines]",
          "503: async def test_proxy_https_connection_error(get_request: Any) -> None:",
          "",
          "[Added Lines]",
          "554: async def test_proxy_https_connection_error() -> None:",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "511: async def test_proxy_https_bad_response(",
          "513: ) -> None:",
          "514:     url = \"https://secure.aiohttp.io/path\"",
          "515:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "512:     proxy_test_server: Any, get_request: Any",
          "",
          "[Added Lines]",
          "563:     proxy_test_server: Callable[[], Awaitable[mock.Mock]]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "527: @pytest.mark.xfail",
          "529:     url = \"https://secure.aiohttp.io/path\"",
          "530:     auth = aiohttp.BasicAuth(\"user\", \"pass\")",
          "",
          "[Removed Lines]",
          "528: async def xtest_proxy_https_auth(proxy_test_server: Any, get_request: Any) -> None:",
          "",
          "[Added Lines]",
          "579: async def test_proxy_https_auth(",
          "580:     proxy_test_server: Callable[[], Awaitable[mock.Mock]]",
          "581: ) -> None:",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "569: @pytest.mark.xfail",
          "571:     url = \"https://secure.aiohttp.io/path\"",
          "573:     conn = aiohttp.TCPConnector()",
          "",
          "[Removed Lines]",
          "570: async def xtest_proxy_https_acquired_cleanup(proxy_test_server: Any, loop: Any) -> None:",
          "",
          "[Added Lines]",
          "623: async def test_proxy_https_acquired_cleanup(",
          "624:     proxy_test_server: Callable[[], Awaitable[mock.Mock]],",
          "625:     loop: asyncio.AbstractEventLoop,",
          "626: ) -> None:",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "577:     assert 0 == len(conn._acquired)",
          "580:         async with sess.get(url, proxy=proxy.url):",
          "581:             assert 1 == len(conn._acquired)",
          "",
          "[Removed Lines]",
          "579:     async def request():",
          "",
          "[Added Lines]",
          "635:     async def request() -> None:",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "590: @pytest.mark.xfail",
          "593: ) -> None:",
          "594:     url = \"https://secure.aiohttp.io/path\"",
          "",
          "[Removed Lines]",
          "591: async def xtest_proxy_https_acquired_cleanup_force(",
          "592:     proxy_test_server: Any, loop: Any",
          "",
          "[Added Lines]",
          "647: async def test_proxy_https_acquired_cleanup_force(",
          "648:     proxy_test_server: Callable[[], Awaitable[mock.Mock]],",
          "649:     loop: asyncio.AbstractEventLoop,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "600:     assert 0 == len(conn._acquired)",
          "603:         async with sess.get(url, proxy=proxy.url):",
          "604:             assert 1 == len(conn._acquired)",
          "",
          "[Removed Lines]",
          "602:     async def request():",
          "",
          "[Added Lines]",
          "659:     async def request() -> None:",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "613: @pytest.mark.xfail",
          "615:     url = \"https://secure.aiohttp.io/path\"",
          "616:     limit, multi_conn_num = 1, 5",
          "",
          "[Removed Lines]",
          "614: async def xtest_proxy_https_multi_conn_limit(proxy_test_server: Any, loop: Any):",
          "",
          "[Added Lines]",
          "671: async def test_proxy_https_multi_conn_limit(",
          "672:     proxy_test_server: Callable[[], Awaitable[mock.Mock]],",
          "673:     loop: asyncio.AbstractEventLoop,",
          "674: ) -> None:",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "622:     current_pid = None",
          "625:         # process requests only one by one",
          "626:         nonlocal current_pid",
          "",
          "[Removed Lines]",
          "624:     async def request(pid):",
          "",
          "[Added Lines]",
          "684:     async def request(pid: int) -> ClientResponse:",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "641:     await sess.close()",
          "645:     # Make ssl transport substitution to prevent ssl handshake.",
          "646:     def _make_ssl_transport_dummy(",
          "650:             rawsock,",
          "651:             protocol,",
          "652:             waiter,",
          "",
          "[Removed Lines]",
          "644: def _patch_ssl_transport(monkeypatch):",
          "647:         self, rawsock, protocol, sslcontext, waiter=None, **kwargs",
          "648:     ):",
          "649:         return self._make_socket_transport(",
          "",
          "[Added Lines]",
          "704: def _patch_ssl_transport(monkeypatch: pytest.MonkeyPatch) -> None:",
          "707:         self: asyncio.selector_events.BaseSelectorEventLoop,",
          "708:         rawsock: object,",
          "709:         protocol: object,",
          "710:         sslcontext: object,",
          "711:         waiter: object = None,",
          "713:     ) -> object:",
          "714:         return self._make_socket_transport(  # type: ignore[attr-defined]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "660:     )",
          "667:     # make real netrc file invisible in home dir",
          "668:     if self.name in [\"_netrc\", \".netrc\"] and self.parent == self.home():",
          "669:         return False",
          "",
          "[Removed Lines]",
          "663: original_is_file: Any = pathlib.Path.is_file",
          "666: def mock_is_file(self):",
          "",
          "[Added Lines]",
          "728: original_is_file = pathlib.Path.is_file",
          "731: def mock_is_file(self: pathlib.Path) -> bool:",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "674: async def test_proxy_from_env_http(",
          "676: ) -> None:",
          "677:     url = \"http://aiohttp.io/path\"",
          "678:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "675:     proxy_test_server: Any, get_request: Any, mocker: Any",
          "",
          "[Added Lines]",
          "740:     proxy_test_server: Callable[[], Awaitable[mock.Mock]], mocker: MockerFixture",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "691: async def test_proxy_from_env_http_with_auth(",
          "693: ) -> None:",
          "694:     url = \"http://aiohttp.io/path\"",
          "695:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "692:     proxy_test_server: Any, get_request: Any, mocker: Any",
          "",
          "[Added Lines]",
          "757:     proxy_test_server: Callable[[], Awaitable[mock.Mock]], mocker: MockerFixture",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "715: async def test_proxy_from_env_http_with_auth_from_netrc(",
          "717: ) -> None:",
          "718:     url = \"http://aiohttp.io/path\"",
          "719:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "716:     proxy_test_server: Any, get_request: Any, tmp_path: Any, mocker: Any",
          "",
          "[Added Lines]",
          "781:     proxy_test_server: Callable[[], Awaitable[mock.Mock]],",
          "782:     tmp_path: pathlib.Path,",
          "783:     mocker: MockerFixture,",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "741: async def test_proxy_from_env_http_without_auth_from_netrc(",
          "743: ) -> None:",
          "744:     url = \"http://aiohttp.io/path\"",
          "745:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "742:     proxy_test_server: Any, get_request: Any, tmp_path: Any, mocker: Any",
          "",
          "[Added Lines]",
          "809:     proxy_test_server: Callable[[], Awaitable[mock.Mock]],",
          "810:     tmp_path: pathlib.Path,",
          "811:     mocker: MockerFixture,",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "767: async def test_proxy_from_env_http_without_auth_from_wrong_netrc(",
          "769: ) -> None:",
          "770:     url = \"http://aiohttp.io/path\"",
          "771:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "768:     proxy_test_server: Any, get_request: Any, tmp_path: Any, mocker: Any",
          "",
          "[Added Lines]",
          "837:     proxy_test_server: Callable[[], Awaitable[mock.Mock]],",
          "838:     tmp_path: pathlib.Path,",
          "839:     mocker: MockerFixture,",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "791: @pytest.mark.xfail",
          "794: ) -> None:",
          "795:     url = \"https://aiohttp.io/path\"",
          "796:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "792: async def xtest_proxy_from_env_https(",
          "793:     proxy_test_server: Any, get_request: Any, mocker: Any",
          "",
          "[Added Lines]",
          "863: async def test_proxy_from_env_https(",
          "864:     proxy_test_server: Callable[[], Awaitable[mock.Mock]], mocker: MockerFixture",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "809: @pytest.mark.xfail",
          "812: ) -> None:",
          "813:     url = \"https://aiohttp.io/path\"",
          "814:     proxy = await proxy_test_server()",
          "",
          "[Removed Lines]",
          "810: async def xtest_proxy_from_env_https_with_auth(",
          "811:     proxy_test_server: Any, get_request: Any, mocker: Any",
          "",
          "[Added Lines]",
          "881: async def test_proxy_from_env_https_with_auth(",
          "882:     proxy_test_server: Callable[[], Awaitable[mock.Mock]], mocker: MockerFixture",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "846:             async with session.get(",
          "847:                 \"http://python.org\",",
          "848:                 proxy=\"http://proxy.example.com\",",
          "850:             ):",
          "851:                 pass",
          "",
          "[Removed Lines]",
          "849:                 proxy_auth=(\"user\", \"pass\"),",
          "",
          "[Added Lines]",
          "920:                 proxy_auth=(\"user\", \"pass\"),  # type: ignore[arg-type]",
          "",
          "---------------"
        ]
      }
    }
  ]
}