{
  "cve_id": "CVE-2022-31183",
  "cve_desc": "fs2 is a compositional, streaming I/O library for Scala. When establishing a server-mode `TLSSocket` using `fs2-io` on Node.js, the parameter `requestCert = true` is ignored, peer certificate verification is skipped, and the connection proceeds. The vulnerability is limited to: 1. `fs2-io` running on Node.js. The JVM TLS implementation is completely independent. 2. `TLSSocket`s in server-mode. Client-mode `TLSSocket`s are implemented via a different API. 3. mTLS as enabled via `requestCert = true` in `TLSParameters`. The default setting is `false` for server-mode `TLSSocket`s. It was introduced with the initial Node.js implementation of fs2-io in 3.1.0. A patch is released in v3.2.11. The requestCert = true parameter is respected and the peer certificate is verified. If verification fails, a SSLException is raised. If using an unpatched version on Node.js, do not use a server-mode TLSSocket with requestCert = true to establish a mTLS connection.",
  "repo": "typelevel/fs2",
  "patch_hash": "659824395826a314e0a4331535dbf1ef8bef8207",
  "patch_info": {
    "commit_hash": "659824395826a314e0a4331535dbf1ef8bef8207",
    "repo": "typelevel/fs2",
    "commit_url": "https://github.com/typelevel/fs2/commit/659824395826a314e0a4331535dbf1ef8bef8207",
    "files": [
      "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala",
      "io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala"
    ],
    "message": "First attempt at test for GHSA-2cpx-6pqp-wf35",
    "before_after_code_files": [
      "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala",
      "io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala"
    ]
  },
  "patch_diff": {
    "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala": [
      "File: io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala -> io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:       val msg = Chunk.array((\"Hello, world! \" * 20000).getBytes)",
      "108:       val setup = for {",
      "110:         addressAndConnections <- Network[IO].serverResource(Some(ip\"127.0.0.1\"))",
      "111:         (serverAddress, server) = addressAndConnections",
      "112:         client <- Network[IO]",
      "",
      "[Removed Lines]",
      "109:         tlsContext <- Resource.eval(testTlsContext)",
      "",
      "[Added Lines]",
      "109:         tlsContext <- Resource.eval(testTlsContext(true))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "180:         .intercept[SSLException]",
      "181:     }",
      "183:   }",
      "184: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "183:     test(\"mTLS client verification\".only) { // GHSA-2cpx-6pqp-wf35",
      "184:       val msg = Chunk.array((\"Hello, world! \" * 20000).getBytes)",
      "186:       val setup = for {",
      "187:         serverContext <- Resource.eval(testTlsContext(true))",
      "188:         clientContext <- Resource.eval(testTlsContext(false))",
      "189:         addressAndConnections <- Network[IO].serverResource(Some(ip\"127.0.0.1\"))",
      "190:         (serverAddress, server) = addressAndConnections",
      "191:         client <- Network[IO]",
      "192:           .client(serverAddress)",
      "193:           .flatMap(",
      "194:             clientContext",
      "195:               .clientBuilder(_)",
      "196:               .withParameters(",
      "197:                 TLSParameters(checkServerIdentity =",
      "198:                   Some((sn, _) => Either.cond(sn == \"localhost\", (), new RuntimeException()))",
      "199:                 )",
      "200:               )",
      "201:               .build",
      "202:           )",
      "203:       } yield server.flatMap(s =>",
      "204:         Stream.resource(",
      "205:           serverContext",
      "206:             .serverBuilder(s)",
      "207:             .withParameters(TLSParameters(requestCert = true.some)) // mTLS",
      "208:             .build",
      "209:         )",
      "210:       ) -> client",
      "212:       Stream",
      "213:         .resource(setup)",
      "214:         .flatMap { case (server, clientSocket) =>",
      "215:           val echoServer = server.map { socket =>",
      "216:             socket.reads.chunks.foreach(socket.write(_))",
      "217:           }.parJoinUnbounded",
      "219:           val client =",
      "220:             Stream.exec(clientSocket.write(msg)) ++",
      "221:               clientSocket.reads.take(msg.size.toLong)",
      "223:           client.concurrently(echoServer)",
      "224:         }",
      "225:         .compile",
      "226:         .to(Chunk)",
      "227:         .intercept[SSLException]",
      "228:     }",
      "",
      "---------------"
    ],
    "io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala": [
      "File: io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala -> io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: import scala.scalajs.js",
      "34: abstract class TLSSuite extends Fs2Suite {",
      "36:     .readAll(Path(\"io/shared/src/test/resources/keystore.json\"))",
      "37:     .through(text.utf8.decode)",
      "38:     .compile",
      "",
      "[Removed Lines]",
      "35:   def testTlsContext: IO[TLSContext[IO]] = Files[IO]",
      "",
      "[Added Lines]",
      "36:   def testTlsContext(privateKey: Boolean): IO[TLSContext[IO]] = Files[IO]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43:         SecureContext(",
      "44:           ca = List(certKey.cert.asRight).some,",
      "45:           cert = List(certKey.cert.asRight).some,",
      "47:         )",
      "48:       )",
      "49:     }",
      "",
      "[Removed Lines]",
      "46:           key = List(SecureContext.Key(certKey.key.asRight, \"password\".some)).some",
      "",
      "[Added Lines]",
      "47:           key =",
      "48:             if (privateKey) List(SecureContext.Key(certKey.key.asRight, \"password\".some)).some",
      "49:             else None",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "62e12caa349c0690bd0cdc309fd709a333007c29",
      "candidate_info": {
        "commit_hash": "62e12caa349c0690bd0cdc309fd709a333007c29",
        "repo": "typelevel/fs2",
        "commit_url": "https://github.com/typelevel/fs2/commit/62e12caa349c0690bd0cdc309fd709a333007c29",
        "files": [
          "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala"
        ],
        "message": "Re-enable all the tests",
        "before_after_code_files": [
          "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala"
          ],
          "candidate": [
            "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala"
          ]
        }
      },
      "candidate_diff": {
        "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala": [
          "File: io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala -> io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:         .intercept[SSLException]",
          "181:     }",
          "184:       val msg = Chunk.array((\"Hello, world! \" * 20000).getBytes)",
          "186:       val setup = for {",
          "",
          "[Removed Lines]",
          "183:     test(\"mTLS client verification\".only) { // GHSA-2cpx-6pqp-wf35",
          "",
          "[Added Lines]",
          "183:     test(\"mTLS client verification\") { // GHSA-2cpx-6pqp-wf35",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bfdc53d1039c61a4fb82cad50cbc0cb44aa1e3b",
      "candidate_info": {
        "commit_hash": "7bfdc53d1039c61a4fb82cad50cbc0cb44aa1e3b",
        "repo": "typelevel/fs2",
        "commit_url": "https://github.com/typelevel/fs2/commit/7bfdc53d1039c61a4fb82cad50cbc0cb44aa1e3b",
        "files": [
          "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala"
        ],
        "message": "Try to fixup existing tests",
        "before_after_code_files": [
          "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala"
          ],
          "candidate": [
            "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala"
          ]
        }
      },
      "candidate_diff": {
        "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala": [
          "File: io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala -> io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:         tlsContext <- Resource.eval(testTlsContext(true))",
          "111:         addressAndConnections <- Network[IO].serverResource(Some(ip\"127.0.0.1\"))",
          "112:         (serverAddress, server) = addressAndConnections",
          "114:           .client(serverAddress)",
          "115:           .flatMap(",
          "116:             tlsContext",
          "",
          "[Removed Lines]",
          "113:         client <- Network[IO]",
          "",
          "[Added Lines]",
          "113:         client = Network[IO]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:             socket.reads.chunks.foreach(socket.write(_))",
          "132:           }.parJoinUnbounded",
          "135:             Stream.exec(clientSocket.write(msg)) ++",
          "136:               clientSocket.reads.take(msg.size.toLong)",
          "138:           client.concurrently(echoServer)",
          "139:         }",
          "",
          "[Removed Lines]",
          "134:           val client =",
          "",
          "[Added Lines]",
          "134:           val client = Stream.resource(clientSocket).flatMap { clientSocket =>",
          "137:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:         tlsContext <- Resource.eval(Network[IO].tlsContext.system)",
          "150:         addressAndConnections <- Network[IO].serverResource(Some(ip\"127.0.0.1\"))",
          "151:         (serverAddress, server) = addressAndConnections",
          "153:           .client(serverAddress)",
          "154:           .flatMap(",
          "155:             tlsContext",
          "",
          "[Removed Lines]",
          "152:         client <- Network[IO]",
          "",
          "[Added Lines]",
          "153:         client = Network[IO]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:             socket.reads.chunks.foreach(socket.write(_))",
          "171:           }.parJoinUnbounded",
          "174:             Stream.exec(clientSocket.write(msg)) ++",
          "175:               clientSocket.reads.take(msg.size.toLong)",
          "177:           client.concurrently(echoServer)",
          "178:         }",
          "",
          "[Removed Lines]",
          "173:           val client =",
          "",
          "[Added Lines]",
          "174:           val client = Stream.resource(clientSocket).flatMap { clientSocket =>",
          "177:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "189:         clientContext <- Resource.eval(testTlsContext(false))",
          "190:         addressAndConnections <- Network[IO].serverResource(Some(ip\"127.0.0.1\"))",
          "191:         (serverAddress, server) = addressAndConnections",
          "193:           .client(serverAddress)",
          "194:           .flatMap(",
          "195:             clientContext",
          "",
          "[Removed Lines]",
          "192:         client <- Network[IO]",
          "",
          "[Added Lines]",
          "194:         client = Network[IO]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "217:             socket.reads.chunks.foreach(socket.write(_))",
          "218:           }.parJoinUnbounded",
          "221:             Stream.exec(clientSocket.write(msg)) ++",
          "222:               clientSocket.reads.take(msg.size.toLong)",
          "224:           client.concurrently(echoServer)",
          "225:         }",
          "",
          "[Removed Lines]",
          "220:           val client =",
          "",
          "[Added Lines]",
          "222:           val client = Stream.resource(clientSocket).flatMap { clientSocket =>",
          "225:           }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "229:     }",
          "231:     List(TLSv1, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`).foreach { protocol =>",
          "233:         val msg = Chunk.array((\"Hello, world! \" * 20000).getBytes)",
          "235:         val setup = for {",
          "",
          "[Removed Lines]",
          "232:       test(s\"$protocol - applicationProtocol and session\".only) {",
          "",
          "[Added Lines]",
          "235:       test(s\"$protocol - applicationProtocol and session\") {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d343312e84e0033d97e538e78495379393d55237",
      "candidate_info": {
        "commit_hash": "d343312e84e0033d97e538e78495379393d55237",
        "repo": "typelevel/fs2",
        "commit_url": "https://github.com/typelevel/fs2/commit/d343312e84e0033d97e538e78495379393d55237",
        "files": [
          "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala",
          "io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala"
        ],
        "message": "Test all protocol versions",
        "before_after_code_files": [
          "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala",
          "io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala",
            "io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala"
          ],
          "candidate": [
            "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala",
            "io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala"
          ]
        }
      },
      "candidate_diff": {
        "io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala": [
          "File: io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala -> io/js/src/test/scala/fs2/io/net/tls/TLSSocketSuite.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import com.comcast.ip4s._",
          "34: class TLSSocketSuite extends TLSSuite {",
          "35:   val size = 8192",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import SecureContext.SecureVersion._",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:             .assertEquals(httpOk)",
          "96:         }",
          "99:       List(TLSv1, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`).foreach { protocol =>",
          "100:         writesBeforeReading(protocol)",
          "101:         readsBeforeWriting(protocol)",
          "",
          "[Removed Lines]",
          "98:       import SecureContext.SecureVersion._",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:         .intercept[SSLException]",
          "228:     }",
          "247:                 )",
          "249:               .build",
          "250:           )",
          "267:             }",
          "275:           }",
          "282:     }",
          "283:   }",
          "284: }",
          "",
          "[Removed Lines]",
          "230:     test(\"applicationProtocol and session\".only) {",
          "231:       val msg = Chunk.array((\"Hello, world! \" * 20000).getBytes)",
          "233:       val setup = for {",
          "234:         tlsContext <- Resource.eval(testTlsContext(true))",
          "235:         addressAndConnections <- Network[IO].serverResource(Some(ip\"127.0.0.1\"))",
          "236:         (serverAddress, server) = addressAndConnections",
          "237:         client = Network[IO]",
          "238:           .client(serverAddress)",
          "239:           .flatMap(",
          "240:             tlsContext",
          "241:               .clientBuilder(_)",
          "242:               .withParameters(",
          "243:                 TLSParameters(",
          "244:                   checkServerIdentity =",
          "245:                     Some((sn, _) => Either.cond(sn == \"localhost\", (), new RuntimeException())),",
          "246:                   alpnProtocols = Some(List(\"h2\"))",
          "248:               )",
          "251:       } yield server.flatMap(s =>",
          "252:         Stream.resource(",
          "253:           tlsContext",
          "254:             .serverBuilder(s)",
          "255:             .withParameters(TLSParameters(alpnProtocols = Some(List(\"h2\"))))",
          "256:             .build",
          "257:         )",
          "258:       ) -> client",
          "260:       Stream",
          "261:         .resource(setup)",
          "262:         .flatMap { case (server, clientSocket) =>",
          "263:           val echoServer = server",
          "264:             .evalTap(s => s.applicationProtocol.assertEquals(\"h2\"))",
          "265:             .map { socket =>",
          "266:               socket.reads.chunks.foreach(socket.write(_)) ++ Stream.exec(socket.session.void)",
          "268:             .parJoinUnbounded",
          "270:           val client = Stream.resource(clientSocket).flatMap { clientSocket =>",
          "271:             Stream.exec(clientSocket.applicationProtocol.assertEquals(\"h2\")) ++",
          "272:               Stream.exec(clientSocket.session.void) ++",
          "273:               Stream.exec(clientSocket.write(msg)) ++",
          "274:               clientSocket.reads.take(msg.size.toLong)",
          "277:           client.concurrently(echoServer)",
          "278:         }",
          "279:         .compile",
          "280:         .to(Chunk)",
          "281:         .assertEquals(msg)",
          "",
          "[Added Lines]",
          "231:     List(TLSv1, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`).foreach { protocol =>",
          "232:       test(s\"$protocol - applicationProtocol and session\".only) {",
          "233:         val msg = Chunk.array((\"Hello, world! \" * 20000).getBytes)",
          "235:         val setup = for {",
          "236:           tlsContext <- Resource.eval(testTlsContext(true, Some(protocol)))",
          "237:           addressAndConnections <- Network[IO].serverResource(Some(ip\"127.0.0.1\"))",
          "238:           (serverAddress, server) = addressAndConnections",
          "239:           client = Network[IO]",
          "240:             .client(serverAddress)",
          "241:             .flatMap(",
          "242:               tlsContext",
          "243:                 .clientBuilder(_)",
          "244:                 .withParameters(",
          "245:                   TLSParameters(",
          "246:                     checkServerIdentity =",
          "247:                       Some((sn, _) => Either.cond(sn == \"localhost\", (), new RuntimeException())),",
          "248:                     alpnProtocols = Some(List(\"h2\"))",
          "249:                   )",
          "251:                 .build",
          "252:             )",
          "253:         } yield server.flatMap(s =>",
          "254:           Stream.resource(",
          "255:             tlsContext",
          "256:               .serverBuilder(s)",
          "257:               .withParameters(TLSParameters(alpnProtocols = Some(List(\"h2\"))))",
          "260:         ) -> client",
          "262:         Stream",
          "263:           .resource(setup)",
          "264:           .flatMap { case (server, clientSocket) =>",
          "265:             val echoServer = server",
          "266:               .evalTap(s => s.applicationProtocol.assertEquals(\"h2\"))",
          "267:               .map { socket =>",
          "268:                 socket.reads.chunks.foreach(socket.write(_)) ++ Stream.exec(socket.session.void)",
          "269:               }",
          "270:               .parJoinUnbounded",
          "272:             val client = Stream.resource(clientSocket).flatMap { clientSocket =>",
          "273:               Stream.exec(clientSocket.applicationProtocol.assertEquals(\"h2\")) ++",
          "274:                 Stream.exec(clientSocket.session.void) ++",
          "275:                 Stream.exec(clientSocket.write(msg)) ++",
          "276:                 clientSocket.reads.take(msg.size.toLong)",
          "279:             client.concurrently(echoServer)",
          "281:           .compile",
          "282:           .to(Chunk)",
          "283:           .assertEquals(msg)",
          "284:       }",
          "",
          "---------------"
        ],
        "io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala||io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala": [
          "File: io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala -> io/js/src/test/scala/fs2/io/net/tls/TLSSuite.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: abstract class TLSSuite extends Fs2Suite {",
          "37:     .readAll(Path(\"io/shared/src/test/resources/keystore.json\"))",
          "38:     .through(text.utf8.decode)",
          "39:     .compile",
          "",
          "[Removed Lines]",
          "36:   def testTlsContext(privateKey: Boolean): IO[TLSContext[IO]] = Files[IO]",
          "",
          "[Added Lines]",
          "36:   def testTlsContext(",
          "37:       privateKey: Boolean,",
          "38:       version: Option[SecureContext.SecureVersion] = None",
          "39:   ): IO[TLSContext[IO]] = Files[IO]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     .map { certKey =>",
          "43:       Network[IO].tlsContext.fromSecureContext(",
          "44:         SecureContext(",
          "45:           ca = List(certKey.cert.asRight).some,",
          "46:           cert = List(certKey.cert.asRight).some,",
          "47:           key =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:           minVersion = version,",
          "49:           maxVersion = version,",
          "",
          "---------------"
        ]
      }
    }
  ]
}