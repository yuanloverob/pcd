{
  "cve_id": "CVE-2023-26144",
  "cve_desc": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
  "repo": "graphql/graphql-js",
  "patch_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
  "patch_info": {
    "commit_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
    "repo": "graphql/graphql-js",
    "commit_url": "https://github.com/graphql/graphql-js/commit/f94b511386c7e47bd0380dcd56553dc063320226",
    "files": [
      "benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ],
    "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3958)\n\nCo-authored-by: AaronMoat <AaronMoat@users.noreply.github.com>\nCo-authored-by: Ivan Goncharov <ivan.goncharov.ua@gmail.com>\nResolves https://github.com/graphql/graphql-js/issues/3955 (at least",
    "before_after_code_files": [
      "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ]
  },
  "patch_diff": {
    "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
      "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { graphqlSync } from 'graphql/graphql.js';",
      "2: import { buildSchema } from 'graphql/utilities/buildASTSchema.js';",
      "4: const schema = buildSchema('type Query { hello: String! }');",
      "5: const source = `{ ${'hello '.repeat(250)}}`;",
      "7: export const benchmark = {",
      "8:   name: 'Many repeated fields',",
      "9:   count: 5,",
      "10:   measure() {",
      "11:     graphqlSync({ schema, source });",
      "12:   },",
      "13: };",
      "",
      "---------------"
    ],
    "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts": [
      "File: src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts -> src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "179:     ]);",
      "180:   });",
      "182:   it('mix of stream and no stream', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:   it('different stream directive extra argument', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "185:         name @stream(label: \"streamLabel\", initialCount: 1)",
      "186:         name @stream(label: \"streamLabel\", initialCount: 1, extraArg: true)",
      "187:       }",
      "188:     `).toDeepEqual([",
      "189:       {",
      "190:         message:",
      "191:           'Fields \"name\" conflict because they have differing stream directives. Use different aliases on the fields to fetch both if this was intentional.',",
      "192:         locations: [",
      "193:           { line: 3, column: 9 },",
      "194:           { line: 4, column: 9 },",
      "195:         ],",
      "196:       },",
      "197:     ]);",
      "198:   });",
      "",
      "---------------"
    ],
    "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
      "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   DirectiveNode,",
      "8:   FieldNode,",
      "9:   FragmentDefinitionNode,",
      "11:   SelectionSetNode,",
      "12: } from '../../language/ast.js';",
      "13: import { Kind } from '../../language/kinds.js';",
      "14: import { print } from '../../language/printer.js';",
      "",
      "[Removed Lines]",
      "10:   ObjectValueNode,",
      "",
      "[Added Lines]",
      "11:   ValueNode,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "592:     }",
      "596:       return [",
      "597:         [responseName, 'they have differing arguments'],",
      "598:         [node1],",
      "",
      "[Removed Lines]",
      "595:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
      "",
      "[Added Lines]",
      "595:     if (!sameArguments(node1, node2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "649:   }",
      "650: }",
      "665: }",
      "667: function getStreamDirective(",
      "",
      "[Removed Lines]",
      "652: function stringifyArguments(fieldNode: FieldNode | DirectiveNode): string {",
      "654:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
      "656:   const inputObjectWithArgs: ObjectValueNode = {",
      "657:     kind: Kind.OBJECT,",
      "658:     fields: args.map((argNode) => ({",
      "659:       kind: Kind.OBJECT_FIELD,",
      "660:       name: argNode.name,",
      "661:       value: argNode.value,",
      "662:     })),",
      "663:   };",
      "664:   return print(sortValueNode(inputObjectWithArgs));",
      "",
      "[Added Lines]",
      "652: function sameArguments(",
      "653:   node1: FieldNode | DirectiveNode,",
      "654:   node2: FieldNode | DirectiveNode,",
      "655: ): boolean {",
      "656:   const args1 = node1.arguments;",
      "657:   const args2 = node2.arguments;",
      "659:   if (args1 === undefined || args1.length === 0) {",
      "660:     return args2 === undefined || args2.length === 0;",
      "661:   }",
      "662:   if (args2 === undefined || args2.length === 0) {",
      "663:     return false;",
      "664:   }",
      "666:   if (args1.length !== args2.length) {",
      "667:     return false;",
      "668:   }",
      "670:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
      "671:   return args1.every((arg1) => {",
      "672:     const value1 = arg1.value;",
      "673:     const value2 = values2.get(arg1.name.value);",
      "674:     if (value2 === undefined) {",
      "675:       return false;",
      "676:     }",
      "678:     return stringifyValue(value1) === stringifyValue(value2);",
      "679:   });",
      "680: }",
      "682: function stringifyValue(value: ValueNode): string | null {",
      "683:   return print(sortValueNode(value));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "681:     return true;",
      "682:   } else if (stream1 && stream2) {",
      "685:   }",
      "687:   return false;",
      "",
      "[Removed Lines]",
      "684:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
      "",
      "[Added Lines]",
      "703:     return sameArguments(stream1, stream2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02ee34f28404fb88306ae77499162f5f4002bda8",
      "candidate_info": {
        "commit_hash": "02ee34f28404fb88306ae77499162f5f4002bda8",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/02ee34f28404fb88306ae77499162f5f4002bda8",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts",
          "src/execution/buildExecutionPlan.ts",
          "src/execution/execute.ts",
          "src/execution/types.ts"
        ],
        "message": "polish(incremental): rename terms to match spec (#4148)\n\nDeferredGroupedFieldSet => ExecutionGroup\nSubsequentResultRecord => DeliveryGroup\nExecuteExecutionGroups => CollectExecutionGroups",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts",
          "src/execution/buildFieldPlan.ts||src/execution/buildExecutionPlan.ts",
          "src/execution/execute.ts||src/execution/execute.ts",
          "src/execution/types.ts||src/execution/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import type {",
          "9:   DeferredFragmentRecord,",
          "11:   IncrementalDataRecord,",
          "12:   IncrementalDataRecordResult,",
          "14:   StreamItemRecord,",
          "15:   StreamRecord,",
          "21: } from './types.js';",
          "26: export class IncrementalGraph {",
          "29:   private _completedQueue: Array<IncrementalDataRecordResult>;",
          "30:   private _nextQueue: Array<",
          "",
          "[Removed Lines]",
          "10:   DeferredGroupedFieldSetRecord,",
          "13:   ReconcilableDeferredGroupedFieldSetResult,",
          "16:   SubsequentResultRecord,",
          "17: } from './types.js';",
          "18: import {",
          "19:   isDeferredFragmentRecord,",
          "20:   isDeferredGroupedFieldSetRecord,",
          "27:   private _rootNodes: Set<SubsequentResultRecord>;",
          "",
          "[Added Lines]",
          "10:   DeliveryGroup,",
          "13:   PendingExecutionGroup,",
          "16:   SuccessfulExecutionGroup,",
          "18: import { isDeferredFragmentRecord, isPendingExecutionGroup } from './types.js';",
          "24:   private _rootNodes: Set<DeliveryGroup>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   getNewRootNodes(",
          "41:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "44:     this._addIncrementalDataRecords(",
          "45:       incrementalDataRecords,",
          "46:       undefined,",
          "",
          "[Removed Lines]",
          "42:   ): ReadonlyArray<SubsequentResultRecord> {",
          "43:     const initialResultChildren = new Set<SubsequentResultRecord>();",
          "",
          "[Added Lines]",
          "39:   ): ReadonlyArray<DeliveryGroup> {",
          "40:     const initialResultChildren = new Set<DeliveryGroup>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:     return this._promoteNonEmptyToRoot(initialResultChildren);",
          "50:   }",
          "54:   ): void {",
          "59:       );",
          "61:     }",
          "64:     if (incrementalDataRecords !== undefined) {",
          "65:       this._addIncrementalDataRecords(",
          "66:         incrementalDataRecords,",
          "69:       );",
          "70:     }",
          "71:   }",
          "",
          "[Removed Lines]",
          "52:   addCompletedReconcilableDeferredGroupedFieldSet(",
          "53:     reconcilableResult: ReconcilableDeferredGroupedFieldSetResult,",
          "55:     for (const deferredFragmentRecord of reconcilableResult",
          "56:       .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "57:       deferredFragmentRecord.deferredGroupedFieldSetRecords.delete(",
          "58:         reconcilableResult.deferredGroupedFieldSetRecord,",
          "60:       deferredFragmentRecord.reconcilableResults.add(reconcilableResult);",
          "63:     const incrementalDataRecords = reconcilableResult.incrementalDataRecords;",
          "67:         reconcilableResult.deferredGroupedFieldSetRecord",
          "68:           .deferredFragmentRecords,",
          "",
          "[Added Lines]",
          "49:   addCompletedSuccessfulExecutionGroup(",
          "50:     successfulExecutionGroup: SuccessfulExecutionGroup,",
          "52:     for (const deferredFragmentRecord of successfulExecutionGroup",
          "53:       .pendingExecutionGroup.deferredFragmentRecords) {",
          "54:       deferredFragmentRecord.pendingExecutionGroups.delete(",
          "55:         successfulExecutionGroup.pendingExecutionGroup,",
          "56:       );",
          "57:       deferredFragmentRecord.successfulExecutionGroups.add(",
          "58:         successfulExecutionGroup,",
          "62:     const incrementalDataRecords =",
          "63:       successfulExecutionGroup.incrementalDataRecords;",
          "67:         successfulExecutionGroup.pendingExecutionGroup.deferredFragmentRecords,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:   completeDeferredFragment(deferredFragmentRecord: DeferredFragmentRecord):",
          "106:     | {",
          "109:       }",
          "110:     | undefined {",
          "111:     if (",
          "112:       !this._rootNodes.has(deferredFragmentRecord) ||",
          "114:     ) {",
          "115:       return;",
          "116:     }",
          "119:     );",
          "120:     this._removeRootNode(deferredFragmentRecord);",
          "126:         );",
          "127:       }",
          "128:     }",
          "129:     const newRootNodes = this._promoteNonEmptyToRoot(",
          "130:       deferredFragmentRecord.children,",
          "131:     );",
          "133:   }",
          "135:   removeDeferredFragment(",
          "",
          "[Removed Lines]",
          "107:         newRootNodes: ReadonlyArray<SubsequentResultRecord>;",
          "108:         reconcilableResults: ReadonlyArray<ReconcilableDeferredGroupedFieldSetResult>;",
          "113:       deferredFragmentRecord.deferredGroupedFieldSetRecords.size > 0",
          "117:     const reconcilableResults = Array.from(",
          "118:       deferredFragmentRecord.reconcilableResults,",
          "121:     for (const reconcilableResult of reconcilableResults) {",
          "122:       for (const otherDeferredFragmentRecord of reconcilableResult",
          "123:         .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "124:         otherDeferredFragmentRecord.reconcilableResults.delete(",
          "125:           reconcilableResult,",
          "132:     return { newRootNodes, reconcilableResults };",
          "",
          "[Added Lines]",
          "106:         newRootNodes: ReadonlyArray<DeliveryGroup>;",
          "107:         successfulExecutionGroups: ReadonlyArray<SuccessfulExecutionGroup>;",
          "112:       deferredFragmentRecord.pendingExecutionGroups.size > 0",
          "116:     const successfulExecutionGroups = Array.from(",
          "117:       deferredFragmentRecord.successfulExecutionGroups,",
          "120:     for (const successfulExecutionGroup of successfulExecutionGroups) {",
          "121:       for (const otherDeferredFragmentRecord of successfulExecutionGroup",
          "122:         .pendingExecutionGroup.deferredFragmentRecords) {",
          "123:         otherDeferredFragmentRecord.successfulExecutionGroups.delete(",
          "124:           successfulExecutionGroup,",
          "131:     return { newRootNodes, successfulExecutionGroups };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:     this._removeRootNode(streamRecord);",
          "147:   }",
          "153:   }",
          "155:   private _addIncrementalDataRecords(",
          "156:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "157:     parents: ReadonlyArray<DeferredFragmentRecord> | undefined,",
          "159:   ): void {",
          "160:     for (const incrementalDataRecord of incrementalDataRecords) {",
          "162:         for (const deferredFragmentRecord of incrementalDataRecord.deferredFragmentRecords) {",
          "163:           this._addDeferredFragment(",
          "164:             deferredFragmentRecord,",
          "165:             initialResultChildren,",
          "166:           );",
          "168:             incrementalDataRecord,",
          "169:           );",
          "170:         }",
          "171:         if (this._completesRootNode(incrementalDataRecord)) {",
          "173:         }",
          "174:       } else if (parents === undefined) {",
          "175:         invariant(initialResultChildren !== undefined);",
          "",
          "[Removed Lines]",
          "149:   private _removeRootNode(",
          "150:     subsequentResultRecord: SubsequentResultRecord,",
          "151:   ): void {",
          "152:     this._rootNodes.delete(subsequentResultRecord);",
          "158:     initialResultChildren?: Set<SubsequentResultRecord> | undefined,",
          "161:       if (isDeferredGroupedFieldSetRecord(incrementalDataRecord)) {",
          "167:           deferredFragmentRecord.deferredGroupedFieldSetRecords.add(",
          "172:           this._onDeferredGroupedFieldSet(incrementalDataRecord);",
          "",
          "[Added Lines]",
          "148:   private _removeRootNode(deliveryGroup: DeliveryGroup): void {",
          "149:     this._rootNodes.delete(deliveryGroup);",
          "155:     initialResultChildren?: Set<DeliveryGroup> | undefined,",
          "158:       if (isPendingExecutionGroup(incrementalDataRecord)) {",
          "164:           deferredFragmentRecord.pendingExecutionGroups.add(",
          "169:           this._onExecutionGroup(incrementalDataRecord);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "184:   }",
          "186:   private _promoteNonEmptyToRoot(",
          "190:     for (const node of maybeEmptyNewRootNodes) {",
          "191:       if (isDeferredFragmentRecord(node)) {",
          "196:             }",
          "197:           }",
          "198:           this._rootNodes.add(node);",
          "",
          "[Removed Lines]",
          "187:     maybeEmptyNewRootNodes: Set<SubsequentResultRecord>,",
          "188:   ): ReadonlyArray<SubsequentResultRecord> {",
          "189:     const newRootNodes: Array<SubsequentResultRecord> = [];",
          "192:         if (node.deferredGroupedFieldSetRecords.size > 0) {",
          "193:           for (const deferredGroupedFieldSetRecord of node.deferredGroupedFieldSetRecords) {",
          "194:             if (!this._completesRootNode(deferredGroupedFieldSetRecord)) {",
          "195:               this._onDeferredGroupedFieldSet(deferredGroupedFieldSetRecord);",
          "",
          "[Added Lines]",
          "184:     maybeEmptyNewRootNodes: Set<DeliveryGroup>,",
          "185:   ): ReadonlyArray<DeliveryGroup> {",
          "186:     const newRootNodes: Array<DeliveryGroup> = [];",
          "189:         if (node.pendingExecutionGroups.size > 0) {",
          "190:           for (const pendingExecutionGroup of node.pendingExecutionGroups) {",
          "191:             if (!this._completesRootNode(pendingExecutionGroup)) {",
          "192:               this._onExecutionGroup(pendingExecutionGroup);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214:   }",
          "216:   private _completesRootNode(",
          "218:   ): boolean {",
          "220:       (deferredFragmentRecord) => this._rootNodes.has(deferredFragmentRecord),",
          "221:     );",
          "222:   }",
          "224:   private _addDeferredFragment(",
          "225:     deferredFragmentRecord: DeferredFragmentRecord,",
          "227:   ): void {",
          "228:     if (this._rootNodes.has(deferredFragmentRecord)) {",
          "229:       return;",
          "",
          "[Removed Lines]",
          "217:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "219:     return deferredGroupedFieldSetRecord.deferredFragmentRecords.some(",
          "226:     initialResultChildren: Set<SubsequentResultRecord> | undefined,",
          "",
          "[Added Lines]",
          "214:     pendingExecutionGroup: PendingExecutionGroup,",
          "216:     return pendingExecutionGroup.deferredFragmentRecords.some(",
          "223:     initialResultChildren: Set<DeliveryGroup> | undefined,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "238:     this._addDeferredFragment(parent, initialResultChildren);",
          "239:   }",
          "243:   ): void {",
          "247:     }",
          "249:     if (isPromise(value)) {",
          "251:       value.then((resolved) => this._enqueue(resolved));",
          "",
          "[Removed Lines]",
          "241:   private _onDeferredGroupedFieldSet(",
          "242:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "244:     let deferredGroupedFieldSetResult = deferredGroupedFieldSetRecord.result;",
          "245:     if (!(deferredGroupedFieldSetResult instanceof BoxedPromiseOrValue)) {",
          "246:       deferredGroupedFieldSetResult = deferredGroupedFieldSetResult();",
          "248:     const value = deferredGroupedFieldSetResult.value;",
          "",
          "[Added Lines]",
          "238:   private _onExecutionGroup(",
          "239:     pendingExecutionGroup: PendingExecutionGroup,",
          "241:     let completedExecutionGroup = pendingExecutionGroup.result;",
          "242:     if (!(completedExecutionGroup instanceof BoxedPromiseOrValue)) {",
          "243:       completedExecutionGroup = completedExecutionGroup();",
          "245:     const value = completedExecutionGroup.value;",
          "",
          "---------------"
        ],
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import { IncrementalGraph } from './IncrementalGraph.js';",
          "8: import type {",
          "9:   CancellableStreamRecord,",
          "10:   CompletedResult,",
          "11:   DeferredFragmentRecord,",
          "13:   ExperimentalIncrementalExecutionResults,",
          "14:   IncrementalDataRecord,",
          "15:   IncrementalDataRecordResult,",
          "",
          "[Removed Lines]",
          "12:   DeferredGroupedFieldSetResult,",
          "",
          "[Added Lines]",
          "10:   CompletedExecutionGroup,",
          "13:   DeliveryGroup,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:   PendingResult,",
          "21:   StreamItemsResult,",
          "22:   SubsequentIncrementalExecutionResult,",
          "24: } from './types.js';",
          "25: import {",
          "26:   isCancellableStreamRecord,",
          "29: } from './types.js';",
          "31: export function buildIncrementalResponse(",
          "",
          "[Removed Lines]",
          "23:   SubsequentResultRecord,",
          "27:   isDeferredGroupedFieldSetResult,",
          "28:   isNonReconcilableDeferredGroupedFieldSetResult,",
          "",
          "[Added Lines]",
          "27:   isCompletedExecutionGroup,",
          "28:   isFailedExecutionGroup,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   }",
          "94:   private _toPendingResults(",
          "96:   ): Array<PendingResult> {",
          "97:     const pendingResults: Array<PendingResult> = [];",
          "98:     for (const node of newRootNodes) {",
          "",
          "[Removed Lines]",
          "95:     newRootNodes: ReadonlyArray<SubsequentResultRecord>,",
          "",
          "[Added Lines]",
          "95:     newRootNodes: ReadonlyArray<DeliveryGroup>,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "207:     completedIncrementalData: IncrementalDataRecordResult,",
          "208:     context: SubsequentIncrementalExecutionResultContext,",
          "209:   ): void {",
          "215:     } else {",
          "216:       this._handleCompletedStreamItems(completedIncrementalData, context);",
          "217:     }",
          "218:   }",
          "222:     context: SubsequentIncrementalExecutionResultContext,",
          "223:   ): void {",
          "231:         const id = deferredFragmentRecord.id;",
          "232:         if (",
          "233:           !this._incrementalGraph.removeDeferredFragment(deferredFragmentRecord)",
          "",
          "[Removed Lines]",
          "210:     if (isDeferredGroupedFieldSetResult(completedIncrementalData)) {",
          "211:       this._handleCompletedDeferredGroupedFieldSet(",
          "212:         completedIncrementalData,",
          "213:         context,",
          "214:       );",
          "220:   private _handleCompletedDeferredGroupedFieldSet(",
          "221:     deferredGroupedFieldSetResult: DeferredGroupedFieldSetResult,",
          "224:     if (",
          "225:       isNonReconcilableDeferredGroupedFieldSetResult(",
          "226:         deferredGroupedFieldSetResult,",
          "227:       )",
          "228:     ) {",
          "229:       for (const deferredFragmentRecord of deferredGroupedFieldSetResult",
          "230:         .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "",
          "[Added Lines]",
          "210:     if (isCompletedExecutionGroup(completedIncrementalData)) {",
          "211:       this._handleCompletedExecutionGroup(completedIncrementalData, context);",
          "217:   private _handleCompletedExecutionGroup(",
          "218:     completedExecutionGroup: CompletedExecutionGroup,",
          "221:     if (isFailedExecutionGroup(completedExecutionGroup)) {",
          "222:       for (const deferredFragmentRecord of completedExecutionGroup",
          "223:         .pendingExecutionGroup.deferredFragmentRecords) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "238:         invariant(id !== undefined);",
          "239:         context.completed.push({",
          "240:           id,",
          "242:         });",
          "243:       }",
          "244:       return;",
          "245:     }",
          "249:     );",
          "253:       const completion = this._incrementalGraph.completeDeferredFragment(",
          "254:         deferredFragmentRecord,",
          "255:       );",
          "",
          "[Removed Lines]",
          "241:           errors: deferredGroupedFieldSetResult.errors,",
          "247:     this._incrementalGraph.addCompletedReconcilableDeferredGroupedFieldSet(",
          "248:       deferredGroupedFieldSetResult,",
          "251:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult",
          "252:       .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "",
          "[Added Lines]",
          "234:           errors: completedExecutionGroup.errors,",
          "240:     this._incrementalGraph.addCompletedSuccessfulExecutionGroup(",
          "241:       completedExecutionGroup,",
          "244:     for (const deferredFragmentRecord of completedExecutionGroup",
          "245:       .pendingExecutionGroup.deferredFragmentRecords) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "259:       const id = deferredFragmentRecord.id;",
          "260:       invariant(id !== undefined);",
          "261:       const incremental = context.incremental;",
          "263:       context.pending.push(...this._toPendingResults(newRootNodes));",
          "265:         const { bestId, subPath } = this._getBestIdAndSubPath(",
          "266:           id,",
          "267:           deferredFragmentRecord,",
          "269:         );",
          "270:         const incrementalEntry: IncrementalDeferResult = {",
          "272:           id: bestId,",
          "273:         };",
          "274:         if (subPath !== undefined) {",
          "",
          "[Removed Lines]",
          "262:       const { newRootNodes, reconcilableResults } = completion;",
          "264:       for (const reconcilableResult of reconcilableResults) {",
          "268:           reconcilableResult,",
          "271:           ...reconcilableResult.result,",
          "",
          "[Added Lines]",
          "255:       const { newRootNodes, successfulExecutionGroups } = completion;",
          "257:       for (const successfulExecutionGroup of successfulExecutionGroups) {",
          "261:           successfulExecutionGroup,",
          "264:           ...successfulExecutionGroup.result,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "329:   private _getBestIdAndSubPath(",
          "330:     initialId: string,",
          "331:     initialDeferredFragmentRecord: DeferredFragmentRecord,",
          "333:   ): { bestId: string; subPath: ReadonlyArray<string | number> | undefined } {",
          "334:     let maxLength = pathToArray(initialDeferredFragmentRecord.path).length;",
          "335:     let bestId = initialId;",
          "339:       if (deferredFragmentRecord === initialDeferredFragmentRecord) {",
          "340:         continue;",
          "341:       }",
          "",
          "[Removed Lines]",
          "332:     deferredGroupedFieldSetResult: DeferredGroupedFieldSetResult,",
          "337:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult",
          "338:       .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "",
          "[Added Lines]",
          "325:     completedExecutionGroup: CompletedExecutionGroup,",
          "330:     for (const deferredFragmentRecord of completedExecutionGroup",
          "331:       .pendingExecutionGroup.deferredFragmentRecords) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "352:         bestId = id;",
          "353:       }",
          "354:     }",
          "356:     return {",
          "357:       bestId,",
          "358:       subPath: subPath.length > 0 ? subPath : undefined,",
          "",
          "[Removed Lines]",
          "355:     const subPath = deferredGroupedFieldSetResult.path.slice(maxLength);",
          "",
          "[Added Lines]",
          "348:     const subPath = completedExecutionGroup.path.slice(maxLength);",
          "",
          "---------------"
        ],
        "src/execution/buildFieldPlan.ts||src/execution/buildExecutionPlan.ts": [
          "File: src/execution/buildFieldPlan.ts -> src/execution/buildExecutionPlan.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: export type DeferUsageSet = ReadonlySet<DeferUsage>;",
          "13:   groupedFieldSet: GroupedFieldSet;",
          "14:   newGroupedFieldSets: Map<DeferUsageSet, GroupedFieldSet>;",
          "15: }",
          "18:   originalGroupedFieldSet: GroupedFieldSet,",
          "19:   parentDeferUsages: DeferUsageSet = new Set<DeferUsage>(),",
          "21:   const groupedFieldSet = new Map<string, FieldGroup>();",
          "22:   const newGroupedFieldSets = new Map<DeferUsageSet, Map<string, FieldGroup>>();",
          "23:   for (const [responseKey, fieldGroup] of originalGroupedFieldSet) {",
          "",
          "[Removed Lines]",
          "12: export interface FieldPlan {",
          "17: export function buildFieldPlan(",
          "20: ): FieldPlan {",
          "",
          "[Added Lines]",
          "12: export interface ExecutionPlan {",
          "17: export function buildExecutionPlan(",
          "20: ): ExecutionPlan {",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: import type { GraphQLSchema } from '../type/schema.js';",
          "49: import { assertValidSchema } from '../type/validate.js';",
          "53: import type {",
          "54:   DeferUsage,",
          "55:   FieldGroup,",
          "",
          "[Removed Lines]",
          "51: import type { DeferUsageSet, FieldPlan } from './buildFieldPlan.js';",
          "52: import { buildFieldPlan } from './buildFieldPlan.js';",
          "",
          "[Added Lines]",
          "51: import type { DeferUsageSet, ExecutionPlan } from './buildExecutionPlan.js';",
          "52: import { buildExecutionPlan } from './buildExecutionPlan.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: import { mapAsyncIterable } from './mapAsyncIterable.js';",
          "64: import type {",
          "65:   CancellableStreamRecord,",
          "68:   ExecutionResult,",
          "69:   ExperimentalIncrementalExecutionResults,",
          "70:   IncrementalDataRecord,",
          "71:   StreamItemRecord,",
          "72:   StreamItemResult,",
          "73:   StreamRecord,",
          "",
          "[Removed Lines]",
          "66:   DeferredGroupedFieldSetRecord,",
          "67:   DeferredGroupedFieldSetResult,",
          "",
          "[Added Lines]",
          "66:   CompletedExecutionGroup,",
          "70:   PendingExecutionGroup,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "296:         undefined,",
          "297:       );",
          "298:     } else {",
          "302:       const newDeferMap = addNewDeferredFragments(newDeferUsages, new Map());",
          "304:       graphqlWrappedResult = executeRootGroupedFieldSet(",
          "",
          "[Removed Lines]",
          "299:       const fieldPLan = buildFieldPlan(groupedFieldSet);",
          "300:       groupedFieldSet = fieldPLan.groupedFieldSet;",
          "301:       const newGroupedFieldSets = fieldPLan.newGroupedFieldSets;",
          "",
          "[Added Lines]",
          "299:       const executionPlan = buildExecutionPlan(groupedFieldSet);",
          "300:       groupedFieldSet = executionPlan.groupedFieldSet;",
          "301:       const newGroupedFieldSets = executionPlan.newGroupedFieldSets;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311:       );",
          "313:       if (newGroupedFieldSets.size > 0) {",
          "326:           graphqlWrappedResult,",
          "328:         );",
          "329:       }",
          "330:     }",
          "",
          "[Removed Lines]",
          "314:         const newDeferredGroupedFieldSetRecords =",
          "315:           executeDeferredGroupedFieldSets(",
          "316:             exeContext,",
          "317:             rootType,",
          "318:             rootValue,",
          "319:             undefined,",
          "320:             undefined,",
          "321:             newGroupedFieldSets,",
          "322:             newDeferMap,",
          "323:           );",
          "325:         graphqlWrappedResult = withNewDeferredGroupedFieldSets(",
          "327:           newDeferredGroupedFieldSetRecords,",
          "",
          "[Added Lines]",
          "314:         const newPendingExecutionGroups = collectExecutionGroups(",
          "315:           exeContext,",
          "316:           rootType,",
          "317:           rootValue,",
          "318:           undefined,",
          "319:           undefined,",
          "320:           newGroupedFieldSets,",
          "321:           newDeferMap,",
          "322:         );",
          "324:         graphqlWrappedResult = withNewExecutionGroups(",
          "326:           newPendingExecutionGroups,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "347:   }",
          "348: }",
          "351:   result: PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>>,",
          "353: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "354:   if (isPromise(result)) {",
          "355:     return result.then((resolved) => {",
          "357:       return resolved;",
          "358:     });",
          "359:   }",
          "362:   return result;",
          "363: }",
          "",
          "[Removed Lines]",
          "350: function withNewDeferredGroupedFieldSets(",
          "352:   newDeferredGroupedFieldSetRecords: ReadonlyArray<DeferredGroupedFieldSetRecord>,",
          "356:       addIncrementalDataRecords(resolved, newDeferredGroupedFieldSetRecords);",
          "361:   addIncrementalDataRecords(result, newDeferredGroupedFieldSetRecords);",
          "",
          "[Added Lines]",
          "349: function withNewExecutionGroups(",
          "351:   newPendingExecutionGroups: ReadonlyArray<PendingExecutionGroup>,",
          "355:       addIncrementalDataRecords(resolved, newPendingExecutionGroups);",
          "360:   addIncrementalDataRecords(result, newPendingExecutionGroups);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1738:       undefined,",
          "1739:     );",
          "1740:   }",
          "1742:     groupedFieldSet,",
          "1743:     incrementalContext?.deferUsageSet,",
          "1744:   );",
          "1748:   const newDeferMap = addNewDeferredFragments(",
          "1749:     newDeferUsages,",
          "1750:     new Map(deferMap),",
          "",
          "[Removed Lines]",
          "1741:   const subFieldPlan = buildSubFieldPlan(",
          "1746:   groupedFieldSet = subFieldPlan.groupedFieldSet;",
          "1747:   const newGroupedFieldSets = subFieldPlan.newGroupedFieldSets;",
          "",
          "[Added Lines]",
          "1740:   const subExecutionPlan = buildSubExecutionPlan(",
          "1745:   groupedFieldSet = subExecutionPlan.groupedFieldSet;",
          "1746:   const newGroupedFieldSets = subExecutionPlan.newGroupedFieldSets;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1762:   );",
          "1764:   if (newGroupedFieldSets.size > 0) {",
          "1766:       exeContext,",
          "1767:       returnType,",
          "1768:       result,",
          "",
          "[Removed Lines]",
          "1765:     const newDeferredGroupedFieldSetRecords = executeDeferredGroupedFieldSets(",
          "",
          "[Added Lines]",
          "1764:     const newPendingExecutionGroups = collectExecutionGroups(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1772:       newDeferMap,",
          "1773:     );",
          "1779:   }",
          "1780:   return subFields;",
          "1781: }",
          "1784:   originalGroupedFieldSet: GroupedFieldSet,",
          "1785:   deferUsageSet: DeferUsageSet | undefined,",
          "1792:   }",
          "1797: }",
          "",
          "[Removed Lines]",
          "1775:     return withNewDeferredGroupedFieldSets(",
          "1776:       subFields,",
          "1777:       newDeferredGroupedFieldSetRecords,",
          "1778:     );",
          "1783: function buildSubFieldPlan(",
          "1786: ): FieldPlan {",
          "1787:   let fieldPlan = (",
          "1788:     originalGroupedFieldSet as unknown as { _fieldPlan: FieldPlan }",
          "1789:   )._fieldPlan;",
          "1790:   if (fieldPlan !== undefined) {",
          "1791:     return fieldPlan;",
          "1793:   fieldPlan = buildFieldPlan(originalGroupedFieldSet, deferUsageSet);",
          "1794:   (originalGroupedFieldSet as unknown as { _fieldPlan: FieldPlan })._fieldPlan =",
          "1795:     fieldPlan;",
          "1796:   return fieldPlan;",
          "",
          "[Added Lines]",
          "1774:     return withNewExecutionGroups(subFields, newPendingExecutionGroups);",
          "1779: function buildSubExecutionPlan(",
          "1782: ): ExecutionPlan {",
          "1783:   let executionPlan = (",
          "1784:     originalGroupedFieldSet as unknown as { _executionPlan: ExecutionPlan }",
          "1785:   )._executionPlan;",
          "1786:   if (executionPlan !== undefined) {",
          "1787:     return executionPlan;",
          "1789:   executionPlan = buildExecutionPlan(originalGroupedFieldSet, deferUsageSet);",
          "1790:   (",
          "1791:     originalGroupedFieldSet as unknown as { _executionPlan: ExecutionPlan }",
          "1792:   )._executionPlan = executionPlan;",
          "1793:   return executionPlan;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2088:   return result;",
          "2089: }",
          "2092:   exeContext: ExecutionContext,",
          "2093:   parentType: GraphQLObjectType,",
          "2094:   sourceValue: unknown,",
          "",
          "[Removed Lines]",
          "2091: function executeDeferredGroupedFieldSets(",
          "",
          "[Added Lines]",
          "2088: function collectExecutionGroups(",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2096:   parentDeferUsages: DeferUsageSet | undefined,",
          "2097:   newGroupedFieldSets: Map<DeferUsageSet, GroupedFieldSet>,",
          "2098:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "2103:   for (const [deferUsageSet, groupedFieldSet] of newGroupedFieldSets) {",
          "2104:     const deferredFragmentRecords = getDeferredFragmentRecords(",
          "",
          "[Removed Lines]",
          "2099: ): ReadonlyArray<DeferredGroupedFieldSetRecord> {",
          "2100:   const newDeferredGroupedFieldSetRecords: Array<DeferredGroupedFieldSetRecord> =",
          "2101:     [];",
          "",
          "[Added Lines]",
          "2096: ): ReadonlyArray<PendingExecutionGroup> {",
          "2097:   const newPendingExecutionGroups: Array<PendingExecutionGroup> = [];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2106:       deferMap,",
          "2107:     );",
          "2110:       deferredFragmentRecords,",
          "2111:       result:",
          "2113:     };",
          "2115:     const executor = () =>",
          "2118:         exeContext,",
          "2119:         parentType,",
          "2120:         sourceValue,",
          "",
          "[Removed Lines]",
          "2109:     const deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord = {",
          "2112:         undefined as unknown as BoxedPromiseOrValue<DeferredGroupedFieldSetResult>,",
          "2116:       executeDeferredGroupedFieldSet(",
          "2117:         deferredGroupedFieldSetRecord,",
          "",
          "[Added Lines]",
          "2105:     const pendingExecutionGroup: PendingExecutionGroup = {",
          "2108:         undefined as unknown as BoxedPromiseOrValue<CompletedExecutionGroup>,",
          "2112:       executeExecutionGroup(",
          "2113:         pendingExecutionGroup,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2128:       );",
          "2130:     if (exeContext.enableEarlyExecution) {",
          "2132:         shouldDefer(parentDeferUsages, deferUsageSet)",
          "2133:           ? Promise.resolve().then(executor)",
          "2134:           : executor(),",
          "2135:       );",
          "2136:     } else {",
          "2139:     }",
          "2142:   }",
          "2145: }",
          "2147: function shouldDefer(",
          "",
          "[Removed Lines]",
          "2131:       deferredGroupedFieldSetRecord.result = new BoxedPromiseOrValue(",
          "2137:       deferredGroupedFieldSetRecord.result = () =>",
          "2138:         new BoxedPromiseOrValue(executor());",
          "2141:     newDeferredGroupedFieldSetRecords.push(deferredGroupedFieldSetRecord);",
          "2144:   return newDeferredGroupedFieldSetRecords;",
          "",
          "[Added Lines]",
          "2127:       pendingExecutionGroup.result = new BoxedPromiseOrValue(",
          "2133:       pendingExecutionGroup.result = () => new BoxedPromiseOrValue(executor());",
          "2136:     newPendingExecutionGroups.push(pendingExecutionGroup);",
          "2139:   return newPendingExecutionGroups;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2160:   );",
          "2161: }",
          "2165:   exeContext: ExecutionContext,",
          "2166:   parentType: GraphQLObjectType,",
          "2167:   sourceValue: unknown,",
          "",
          "[Removed Lines]",
          "2163: function executeDeferredGroupedFieldSet(",
          "2164:   deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "",
          "[Added Lines]",
          "2158: function executeExecutionGroup(",
          "2159:   pendingExecutionGroup: PendingExecutionGroup,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2169:   groupedFieldSet: GroupedFieldSet,",
          "2170:   incrementalContext: IncrementalContext,",
          "2171:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "2173:   let result;",
          "2174:   try {",
          "2175:     result = executeFields(",
          "",
          "[Removed Lines]",
          "2172: ): PromiseOrValue<DeferredGroupedFieldSetResult> {",
          "",
          "[Added Lines]",
          "2167: ): PromiseOrValue<CompletedExecutionGroup> {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2183:     );",
          "2184:   } catch (error) {",
          "2185:     return {",
          "2187:       path: pathToArray(path),",
          "2188:       errors: withError(incrementalContext.errors, error),",
          "2189:     };",
          "",
          "[Removed Lines]",
          "2186:       deferredGroupedFieldSetRecord,",
          "",
          "[Added Lines]",
          "2181:       pendingExecutionGroup,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2192:   if (isPromise(result)) {",
          "2193:     return result.then(",
          "2194:       (resolved) =>",
          "2196:           incrementalContext.errors,",
          "2198:           path,",
          "2199:           resolved,",
          "2200:         ),",
          "2201:       (error) => ({",
          "2203:         path: pathToArray(path),",
          "2204:         errors: withError(incrementalContext.errors, error),",
          "2205:       }),",
          "2206:     );",
          "2207:   }",
          "2210:     incrementalContext.errors,",
          "2212:     path,",
          "2213:     result,",
          "2214:   );",
          "2215: }",
          "2218:   errors: ReadonlyArray<GraphQLError> | undefined,",
          "2220:   path: Path | undefined,",
          "2221:   result: GraphQLWrappedResult<ObjMap<unknown>>,",
          "2223:   return {",
          "2225:     path: pathToArray(path),",
          "2226:     result:",
          "2227:       errors === undefined ? { data: result[0] } : { data: result[0], errors },",
          "",
          "[Removed Lines]",
          "2195:         buildDeferredGroupedFieldSetResult(",
          "2197:           deferredGroupedFieldSetRecord,",
          "2202:         deferredGroupedFieldSetRecord,",
          "2209:   return buildDeferredGroupedFieldSetResult(",
          "2211:     deferredGroupedFieldSetRecord,",
          "2217: function buildDeferredGroupedFieldSetResult(",
          "2219:   deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "2222: ): DeferredGroupedFieldSetResult {",
          "2224:     deferredGroupedFieldSetRecord,",
          "",
          "[Added Lines]",
          "2190:         buildCompletedExecutionGroup(",
          "2192:           pendingExecutionGroup,",
          "2197:         pendingExecutionGroup,",
          "2204:   return buildCompletedExecutionGroup(",
          "2206:     pendingExecutionGroup,",
          "2212: function buildCompletedExecutionGroup(",
          "2214:   pendingExecutionGroup: PendingExecutionGroup,",
          "2217: ): CompletedExecutionGroup {",
          "2219:     pendingExecutionGroup,",
          "",
          "---------------"
        ],
        "src/execution/types.ts||src/execution/types.ts": [
          "File: src/execution/types.ts -> src/execution/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   extensions?: TExtensions;",
          "89: }",
          "92:   errors?: ReadonlyArray<GraphQLError>;",
          "93:   data: TData;",
          "94: }",
          "",
          "[Removed Lines]",
          "91: interface BareDeferredGroupedFieldSetResult<TData = ObjMap<unknown>> {",
          "",
          "[Added Lines]",
          "91: interface ExecutionGroupResult<TData = ObjMap<unknown>> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: export interface IncrementalDeferResult<",
          "97:   TData = ObjMap<unknown>,",
          "98:   TExtensions = ObjMap<unknown>,",
          "100:   id: string;",
          "101:   subPath?: ReadonlyArray<string | number>;",
          "102:   extensions?: TExtensions;",
          "",
          "[Removed Lines]",
          "99: > extends BareDeferredGroupedFieldSetResult<TData> {",
          "",
          "[Added Lines]",
          "99: > extends ExecutionGroupResult<TData> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:   extensions?: TExtensions;",
          "114: }",
          "117:   errors?: ReadonlyArray<GraphQLError>;",
          "118:   items: TData;",
          "119: }",
          "",
          "[Removed Lines]",
          "116: interface BareStreamItemsResult<TData = ReadonlyArray<unknown>> {",
          "",
          "[Added Lines]",
          "116: interface StreamItemsRecordResult<TData = ReadonlyArray<unknown>> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121: export interface IncrementalStreamResult<",
          "122:   TData = ReadonlyArray<unknown>,",
          "123:   TExtensions = ObjMap<unknown>,",
          "125:   id: string;",
          "126:   subPath?: ReadonlyArray<string | number>;",
          "127:   extensions?: TExtensions;",
          "",
          "[Removed Lines]",
          "124: > extends BareStreamItemsResult<TData> {",
          "",
          "[Added Lines]",
          "124: > extends StreamItemsRecordResult<TData> {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:   errors?: ReadonlyArray<GraphQLError>;",
          "167: }",
          "170:   incrementalDataRecord: IncrementalDataRecord,",
          "172:   return 'deferredFragmentRecords' in incrementalDataRecord;",
          "173: }",
          "183: }",
          "187:   path: Array<string | number>;",
          "189:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "190:   errors?: never;",
          "191: }",
          "195:   path: Array<string | number>;",
          "196:   errors: ReadonlyArray<GraphQLError>;",
          "197:   result?: never;",
          "198: }",
          "204: }",
          "206: type ThunkIncrementalResult<T> =",
          "207:   | BoxedPromiseOrValue<T>",
          "208:   | (() => BoxedPromiseOrValue<T>);",
          "211:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "213: }",
          "218: export class DeferredFragmentRecord {",
          "",
          "[Removed Lines]",
          "169: export function isDeferredGroupedFieldSetRecord(",
          "171: ): incrementalDataRecord is DeferredGroupedFieldSetRecord {",
          "175: export type DeferredGroupedFieldSetResult =",
          "176:   | ReconcilableDeferredGroupedFieldSetResult",
          "177:   | NonReconcilableDeferredGroupedFieldSetResult;",
          "179: export function isDeferredGroupedFieldSetResult(",
          "180:   subsequentResult: DeferredGroupedFieldSetResult | StreamItemsResult,",
          "181: ): subsequentResult is DeferredGroupedFieldSetResult {",
          "182:   return 'deferredGroupedFieldSetRecord' in subsequentResult;",
          "185: export interface ReconcilableDeferredGroupedFieldSetResult {",
          "186:   deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord;",
          "188:   result: BareDeferredGroupedFieldSetResult;",
          "193: interface NonReconcilableDeferredGroupedFieldSetResult {",
          "194:   deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord;",
          "200: export function isNonReconcilableDeferredGroupedFieldSetResult(",
          "201:   deferredGroupedFieldSetResult: DeferredGroupedFieldSetResult,",
          "202: ): deferredGroupedFieldSetResult is NonReconcilableDeferredGroupedFieldSetResult {",
          "203:   return deferredGroupedFieldSetResult.errors !== undefined;",
          "210: export interface DeferredGroupedFieldSetRecord {",
          "212:   result: ThunkIncrementalResult<DeferredGroupedFieldSetResult>;",
          "215: export type SubsequentResultRecord = DeferredFragmentRecord | StreamRecord;",
          "",
          "[Added Lines]",
          "169: export function isPendingExecutionGroup(",
          "171: ): incrementalDataRecord is PendingExecutionGroup {",
          "175: export type CompletedExecutionGroup =",
          "176:   | SuccessfulExecutionGroup",
          "177:   | FailedExecutionGroup;",
          "179: export function isCompletedExecutionGroup(",
          "180:   subsequentResult: CompletedExecutionGroup | StreamItemsResult,",
          "181: ): subsequentResult is CompletedExecutionGroup {",
          "182:   return 'pendingExecutionGroup' in subsequentResult;",
          "185: export interface SuccessfulExecutionGroup {",
          "186:   pendingExecutionGroup: PendingExecutionGroup;",
          "188:   result: ExecutionGroupResult;",
          "193: interface FailedExecutionGroup {",
          "194:   pendingExecutionGroup: PendingExecutionGroup;",
          "200: export function isFailedExecutionGroup(",
          "201:   completedExecutionGroup: CompletedExecutionGroup,",
          "202: ): completedExecutionGroup is FailedExecutionGroup {",
          "203:   return completedExecutionGroup.errors !== undefined;",
          "210: export interface PendingExecutionGroup {",
          "212:   result: ThunkIncrementalResult<CompletedExecutionGroup>;",
          "215: export type DeliveryGroup = DeferredFragmentRecord | StreamRecord;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "220:   label: string | undefined;",
          "221:   id?: string | undefined;",
          "222:   parent: DeferredFragmentRecord | undefined;",
          "227:   constructor(",
          "228:     path: Path | undefined,",
          "",
          "[Removed Lines]",
          "223:   deferredGroupedFieldSetRecords: Set<DeferredGroupedFieldSetRecord>;",
          "224:   reconcilableResults: Set<ReconcilableDeferredGroupedFieldSetResult>;",
          "225:   children: Set<SubsequentResultRecord>;",
          "",
          "[Added Lines]",
          "223:   pendingExecutionGroups: Set<PendingExecutionGroup>;",
          "224:   successfulExecutionGroups: Set<SuccessfulExecutionGroup>;",
          "225:   children: Set<DeliveryGroup>;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "232:     this.path = path;",
          "233:     this.label = label;",
          "234:     this.parent = parent;",
          "237:     this.children = new Set();",
          "238:   }",
          "239: }",
          "241: export function isDeferredFragmentRecord(",
          "245: }",
          "247: export interface StreamItemResult {",
          "",
          "[Removed Lines]",
          "235:     this.deferredGroupedFieldSetRecords = new Set();",
          "236:     this.reconcilableResults = new Set();",
          "242:   subsequentResultRecord: SubsequentResultRecord,",
          "243: ): subsequentResultRecord is DeferredFragmentRecord {",
          "244:   return subsequentResultRecord instanceof DeferredFragmentRecord;",
          "",
          "[Added Lines]",
          "235:     this.pendingExecutionGroups = new Set();",
          "236:     this.successfulExecutionGroups = new Set();",
          "242:   deliveryGroup: DeliveryGroup,",
          "243: ): deliveryGroup is DeferredFragmentRecord {",
          "244:   return deliveryGroup instanceof DeferredFragmentRecord;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "262: export interface StreamItemsResult {",
          "263:   streamRecord: StreamRecord;",
          "265:   incrementalDataRecords?: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "267: }",
          "269: export interface CancellableStreamRecord extends StreamRecord {",
          "",
          "[Removed Lines]",
          "264:   result?: BareStreamItemsResult | undefined;",
          "266:   errors?: ReadonlyArray<GraphQLError> | undefined;",
          "",
          "[Added Lines]",
          "264:   errors?: ReadonlyArray<GraphQLError>;",
          "265:   result?: StreamItemsRecordResult;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "271: }",
          "273: export function isCancellableStreamRecord(",
          "277: }",
          "283: export type IncrementalDataRecordResult =",
          "285:   | StreamItemsResult;",
          "",
          "[Removed Lines]",
          "274:   subsequentResultRecord: SubsequentResultRecord,",
          "275: ): subsequentResultRecord is CancellableStreamRecord {",
          "276:   return 'earlyReturn' in subsequentResultRecord;",
          "279: export type IncrementalDataRecord =",
          "280:   | DeferredGroupedFieldSetRecord",
          "281:   | StreamRecord;",
          "284:   | DeferredGroupedFieldSetResult",
          "",
          "[Added Lines]",
          "274:   deliveryGroup: DeliveryGroup,",
          "275: ): deliveryGroup is CancellableStreamRecord {",
          "276:   return 'earlyReturn' in deliveryGroup;",
          "279: export type IncrementalDataRecord = PendingExecutionGroup | StreamRecord;",
          "282:   | CompletedExecutionGroup",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e29180c0bba5730867c9d0243645d754cd8697d",
      "candidate_info": {
        "commit_hash": "2e29180c0bba5730867c9d0243645d754cd8697d",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/2e29180c0bba5730867c9d0243645d754cd8697d",
        "files": [
          "src/execution/IncrementalPublisher.ts",
          "src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/stream-test.ts"
        ],
        "message": "fix: suppress records for deferred fragments that are completely empty (#3984)\n\ni.e. no fields and no enclosed deferred fragments\n\nThese fragments can be thought of to be completely skipped, because\nincluding them will just result in emitting metadata but no actual data.\nAlternatively, these fragments can be thought of as being inlined.\n\nThis could probably be considered a bug fix, in that Example F @\nhttps://github.com/graphql/defer-stream-wg/discussions/69 explicitly\nstates that these fragments should be skipped.",
        "before_after_code_files": [
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts",
          "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "666:       return;",
          "667:     }",
          "672:       this._introduce(subsequentResultRecord);",
          "673:     }",
          "674:   }",
          "",
          "[Removed Lines]",
          "669:     if (subsequentResultRecord._pending.size === 0) {",
          "670:       this._push(subsequentResultRecord);",
          "671:     } else {",
          "",
          "[Added Lines]",
          "669:     if (subsequentResultRecord._pending.size > 0) {",
          "671:     } else if (",
          "672:       subsequentResultRecord.deferredGroupedFieldSetRecords.size > 0 ||",
          "673:       subsequentResultRecord.children.size > 0",
          "674:     ) {",
          "675:       this._push(subsequentResultRecord);",
          "",
          "---------------"
        ],
        "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts": [
          "File: src/execution/__tests__/defer-test.ts -> src/execution/__tests__/defer-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:       }",
          "395:     `);",
          "396:     const result = await complete(document);",
          "403:         },",
          "410:       },",
          "412:   });",
          "413:   it('Can defer a fragment that is also not deferred, non-deferred fragment is first', async () => {",
          "414:     const document = parse(`",
          "",
          "[Removed Lines]",
          "397:     expectJSON(result).toDeepEqual([",
          "398:       {",
          "399:         data: {",
          "400:           hero: {",
          "401:             name: 'Luke',",
          "402:           },",
          "404:         pending: [{ id: '0', path: ['hero'], label: 'DeferTop' }],",
          "405:         hasNext: true,",
          "406:       },",
          "407:       {",
          "408:         completed: [{ id: '0' }],",
          "409:         hasNext: false,",
          "411:     ]);",
          "",
          "[Added Lines]",
          "397:     expectJSON(result).toDeepEqual({",
          "398:       data: {",
          "399:         hero: {",
          "400:           name: 'Luke',",
          "403:     });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:       }",
          "424:     `);",
          "425:     const result = await complete(document);",
          "432:         },",
          "439:       },",
          "441:   });",
          "443:   it('Can defer an inline fragment', async () => {",
          "",
          "[Removed Lines]",
          "426:     expectJSON(result).toDeepEqual([",
          "427:       {",
          "428:         data: {",
          "429:           hero: {",
          "430:             name: 'Luke',",
          "431:           },",
          "433:         pending: [{ id: '0', path: ['hero'], label: 'DeferTop' }],",
          "434:         hasNext: true,",
          "435:       },",
          "436:       {",
          "437:         completed: [{ id: '0' }],",
          "438:         hasNext: false,",
          "440:     ]);",
          "",
          "[Added Lines]",
          "418:     expectJSON(result).toDeepEqual({",
          "419:       data: {",
          "420:         hero: {",
          "421:           name: 'Luke',",
          "424:     });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "481:       }",
          "482:     `);",
          "483:     const result = await complete(document);",
          "495:       },",
          "497:   });",
          "499:   it('Can separately emit defer fragments with different labels with varying fields', async () => {",
          "",
          "[Removed Lines]",
          "484:     expectJSON(result).toDeepEqual([",
          "485:       {",
          "486:         data: {",
          "487:           hero: {},",
          "488:         },",
          "489:         pending: [{ id: '0', path: ['hero'] }],",
          "490:         hasNext: true,",
          "491:       },",
          "492:       {",
          "493:         completed: [{ id: '0' }],",
          "494:         hasNext: false,",
          "496:     ]);",
          "",
          "[Added Lines]",
          "468:     expectJSON(result).toDeepEqual({",
          "469:       data: {",
          "470:         hero: {},",
          "472:     });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "775:         data: { hero: { friends: [{}, {}, {}] } },",
          "776:         pending: [",
          "777:           { id: '0', path: ['hero', 'friends', 0] },",
          "789:         ],",
          "790:         hasNext: true,",
          "791:       },",
          "792:       {",
          "793:         incremental: [",
          "794:           { data: { id: '2', name: 'Han' }, id: '0' },",
          "811:         ],",
          "812:         hasNext: false,",
          "813:       },",
          "814:     ]);",
          "",
          "[Removed Lines]",
          "778:           { id: '1', path: ['hero', 'friends', 0] },",
          "779:           { id: '2', path: ['hero', 'friends', 0] },",
          "780:           { id: '3', path: ['hero', 'friends', 0] },",
          "781:           { id: '4', path: ['hero', 'friends', 1] },",
          "782:           { id: '5', path: ['hero', 'friends', 1] },",
          "783:           { id: '6', path: ['hero', 'friends', 1] },",
          "784:           { id: '7', path: ['hero', 'friends', 1] },",
          "785:           { id: '8', path: ['hero', 'friends', 2] },",
          "786:           { id: '9', path: ['hero', 'friends', 2] },",
          "787:           { id: '10', path: ['hero', 'friends', 2] },",
          "788:           { id: '11', path: ['hero', 'friends', 2] },",
          "795:           { data: { id: '3', name: 'Leia' }, id: '4' },",
          "796:           { data: { id: '4', name: 'C-3PO' }, id: '8' },",
          "797:         ],",
          "798:         completed: [",
          "799:           { id: '1' },",
          "800:           { id: '2' },",
          "801:           { id: '3' },",
          "802:           { id: '5' },",
          "803:           { id: '6' },",
          "804:           { id: '7' },",
          "805:           { id: '9' },",
          "806:           { id: '10' },",
          "807:           { id: '11' },",
          "808:           { id: '0' },",
          "809:           { id: '4' },",
          "810:           { id: '8' },",
          "",
          "[Added Lines]",
          "754:           { id: '1', path: ['hero', 'friends', 1] },",
          "755:           { id: '2', path: ['hero', 'friends', 2] },",
          "762:           { data: { id: '3', name: 'Leia' }, id: '1' },",
          "763:           { data: { id: '4', name: 'C-3PO' }, id: '2' },",
          "765:         completed: [{ id: '0' }, { id: '1' }, { id: '2' }],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1494:       }",
          "1495:     `);",
          "1496:     const result = await complete(document);",
          "1503:         },",
          "1510:       },",
          "1512:   });",
          "1514:   it('Deduplicates async iterable list fields', async () => {",
          "",
          "[Removed Lines]",
          "1497:     expectJSON(result).toDeepEqual([",
          "1498:       {",
          "1499:         data: {",
          "1500:           hero: {",
          "1501:             friends: [{ name: 'Han' }, { name: 'Leia' }, { name: 'C-3PO' }],",
          "1502:           },",
          "1504:         pending: [{ id: '0', path: ['hero'] }],",
          "1505:         hasNext: true,",
          "1506:       },",
          "1507:       {",
          "1508:         completed: [{ id: '0' }],",
          "1509:         hasNext: false,",
          "1511:     ]);",
          "",
          "[Added Lines]",
          "1451:     expectJSON(result).toDeepEqual({",
          "1452:       data: {",
          "1453:         hero: {",
          "1454:           friends: [{ name: 'Han' }, { name: 'Leia' }, { name: 'C-3PO' }],",
          "1457:     });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1534:         },",
          "1535:       },",
          "1536:     });",
          "1548:   });",
          "1550:   it('Deduplicates empty async iterable list fields', async () => {",
          "",
          "[Removed Lines]",
          "1537:     expectJSON(result).toDeepEqual([",
          "1538:       {",
          "1539:         data: { hero: { friends: [{ name: 'Han' }] } },",
          "1540:         pending: [{ id: '0', path: ['hero'] }],",
          "1541:         hasNext: true,",
          "1542:       },",
          "1543:       {",
          "1544:         completed: [{ id: '0' }],",
          "1545:         hasNext: false,",
          "1546:       },",
          "1547:     ]);",
          "",
          "[Added Lines]",
          "1483:     expectJSON(result).toDeepEqual({",
          "1484:       data: { hero: { friends: [{ name: 'Han' }] } },",
          "1485:     });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1571:         },",
          "1572:       },",
          "1573:     });",
          "1585:   });",
          "1587:   it('Does not deduplicate list fields with non-overlapping fields', async () => {",
          "",
          "[Removed Lines]",
          "1574:     expectJSON(result).toDeepEqual([",
          "1575:       {",
          "1576:         data: { hero: { friends: [] } },",
          "1577:         pending: [{ id: '0', path: ['hero'] }],",
          "1578:         hasNext: true,",
          "1579:       },",
          "1580:       {",
          "1581:         completed: [{ id: '0' }],",
          "1582:         hasNext: false,",
          "1583:       },",
          "1584:     ]);",
          "",
          "[Added Lines]",
          "1512:     expectJSON(result).toDeepEqual({",
          "1513:       data: { hero: { friends: [] } },",
          "1514:     });",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1655:         friends: () => [],",
          "1656:       },",
          "1657:     });",
          "1669:   });",
          "1671:   it('Deduplicates null object fields', async () => {",
          "",
          "[Removed Lines]",
          "1658:     expectJSON(result).toDeepEqual([",
          "1659:       {",
          "1660:         data: { hero: { friends: [] } },",
          "1661:         pending: [{ id: '0', path: ['hero'] }],",
          "1662:         hasNext: true,",
          "1663:       },",
          "1664:       {",
          "1665:         completed: [{ id: '0' }],",
          "1666:         hasNext: false,",
          "1667:       },",
          "1668:     ]);",
          "",
          "[Added Lines]",
          "1588:     expectJSON(result).toDeepEqual({",
          "1589:       data: { hero: { friends: [] } },",
          "1590:     });",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1689:         nestedObject: () => null,",
          "1690:       },",
          "1691:     });",
          "1703:   });",
          "1705:   it('Deduplicates promise object fields', async () => {",
          "",
          "[Removed Lines]",
          "1692:     expectJSON(result).toDeepEqual([",
          "1693:       {",
          "1694:         data: { hero: { nestedObject: null } },",
          "1695:         pending: [{ id: '0', path: ['hero'] }],",
          "1696:         hasNext: true,",
          "1697:       },",
          "1698:       {",
          "1699:         completed: [{ id: '0' }],",
          "1700:         hasNext: false,",
          "1701:       },",
          "1702:     ]);",
          "",
          "[Added Lines]",
          "1614:     expectJSON(result).toDeepEqual({",
          "1615:       data: { hero: { nestedObject: null } },",
          "1616:     });",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1722:         nestedObject: () => Promise.resolve({ name: 'foo' }),",
          "1723:       },",
          "1724:     });",
          "1736:   });",
          "1738:   it('Handles errors thrown in deferred fragments', async () => {",
          "",
          "[Removed Lines]",
          "1725:     expectJSON(result).toDeepEqual([",
          "1726:       {",
          "1727:         data: { hero: { nestedObject: { name: 'foo' } } },",
          "1728:         pending: [{ id: '0', path: ['hero'] }],",
          "1729:         hasNext: true,",
          "1730:       },",
          "1731:       {",
          "1732:         completed: [{ id: '0' }],",
          "1733:         hasNext: false,",
          "1734:       },",
          "1735:     ]);",
          "",
          "[Added Lines]",
          "1639:     expectJSON(result).toDeepEqual({",
          "1640:       data: { hero: { nestedObject: { name: 'foo' } } },",
          "1641:     });",
          "",
          "---------------"
        ],
        "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts": [
          "File: src/execution/__tests__/stream-test.ts -> src/execution/__tests__/stream-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1780:             nestedFriendList: [],",
          "1781:           },",
          "1782:         },",
          "1787:         hasNext: true,",
          "1788:       },",
          "1789:       {",
          "1790:         incremental: [",
          "1791:           {",
          "1792:             items: [{ id: '1', name: 'Luke' }],",
          "1794:           },",
          "1795:         ],",
          "1797:         hasNext: true,",
          "1798:       },",
          "1799:       {",
          "1800:         incremental: [",
          "1801:           {",
          "1802:             items: [{ id: '2', name: 'Han' }],",
          "1804:           },",
          "1805:         ],",
          "1806:         hasNext: true,",
          "1807:       },",
          "1808:       {",
          "1810:         hasNext: false,",
          "1811:       },",
          "1812:     ]);",
          "",
          "[Removed Lines]",
          "1783:         pending: [",
          "1784:           { id: '0', path: ['nestedObject'] },",
          "1785:           { id: '1', path: ['nestedObject', 'nestedFriendList'] },",
          "1786:         ],",
          "1793:             id: '1',",
          "1796:         completed: [{ id: '0' }],",
          "1803:             id: '1',",
          "1809:         completed: [{ id: '1' }],",
          "",
          "[Added Lines]",
          "1783:         pending: [{ id: '0', path: ['nestedObject', 'nestedFriendList'] }],",
          "1790:             id: '0',",
          "1799:             id: '0',",
          "1805:         completed: [{ id: '0' }],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab52e2f82ddb7000bb41977b4d73707da27e7f2d",
      "candidate_info": {
        "commit_hash": "ab52e2f82ddb7000bb41977b4d73707da27e7f2d",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/ab52e2f82ddb7000bb41977b4d73707da27e7f2d",
        "files": [
          "src/execution/types.ts"
        ],
        "message": "polish(incremental): remove outdated reference to subsequentResult",
        "before_after_code_files": [
          "src/execution/types.ts||src/execution/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/types.ts||src/execution/types.ts": [
          "File: src/execution/types.ts -> src/execution/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:   | FailedExecutionGroup;",
          "179: export function isCompletedExecutionGroup(",
          "183: }",
          "185: export interface SuccessfulExecutionGroup {",
          "",
          "[Removed Lines]",
          "180:   subsequentResult: CompletedExecutionGroup | StreamItemsResult,",
          "181: ): subsequentResult is CompletedExecutionGroup {",
          "182:   return 'pendingExecutionGroup' in subsequentResult;",
          "",
          "[Added Lines]",
          "180:   incrementalDataRecordResult: IncrementalDataRecordResult,",
          "181: ): incrementalDataRecordResult is CompletedExecutionGroup {",
          "182:   return 'pendingExecutionGroup' in incrementalDataRecordResult;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "868a2213796f6f7c4e8e35def6342f13bbe15d84",
      "candidate_info": {
        "commit_hash": "868a2213796f6f7c4e8e35def6342f13bbe15d84",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/868a2213796f6f7c4e8e35def6342f13bbe15d84",
        "files": [
          "src/execution/IncrementalGraph.ts"
        ],
        "message": "polish(incremental): improve readability with destructuring",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   addCompletedSuccessfulExecutionGroup(",
          "50:     successfulExecutionGroup: SuccessfulExecutionGroup,",
          "51:   ): void {",
          "60:     }",
          "64:     if (incrementalDataRecords !== undefined) {",
          "65:       this._addIncrementalDataRecords(",
          "66:         incrementalDataRecords,",
          "68:       );",
          "69:     }",
          "70:   }",
          "",
          "[Removed Lines]",
          "52:     for (const deferredFragmentRecord of successfulExecutionGroup",
          "53:       .pendingExecutionGroup.deferredFragmentRecords) {",
          "54:       deferredFragmentRecord.pendingExecutionGroups.delete(",
          "55:         successfulExecutionGroup.pendingExecutionGroup,",
          "56:       );",
          "57:       deferredFragmentRecord.successfulExecutionGroups.add(",
          "58:         successfulExecutionGroup,",
          "59:       );",
          "62:     const incrementalDataRecords =",
          "63:       successfulExecutionGroup.incrementalDataRecords;",
          "67:         successfulExecutionGroup.pendingExecutionGroup.deferredFragmentRecords,",
          "",
          "[Added Lines]",
          "52:     const { pendingExecutionGroup, incrementalDataRecords } =",
          "53:       successfulExecutionGroup;",
          "55:     const deferredFragmentRecords =",
          "56:       pendingExecutionGroup.deferredFragmentRecords;",
          "58:     for (const deferredFragmentRecord of deferredFragmentRecords) {",
          "59:       const { pendingExecutionGroups, successfulExecutionGroups } =",
          "60:         deferredFragmentRecord;",
          "61:       pendingExecutionGroups.delete(pendingExecutionGroup);",
          "62:       successfulExecutionGroups.add(successfulExecutionGroup);",
          "68:         deferredFragmentRecords,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13f84cdee13a765c8edaf0c92832e6cd21222e0e",
      "candidate_info": {
        "commit_hash": "13f84cdee13a765c8edaf0c92832e6cd21222e0e",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/13f84cdee13a765c8edaf0c92832e6cd21222e0e",
        "files": [
          "src/execution/execute.ts"
        ],
        "message": "polish: rename executeImpl to executeOperation (#4045)\n\ninline much of the original executeOperation\nleave out executeRootGroupedFieldSet, will help reduce the diff for\n#4026",
        "before_after_code_files": [
          "src/execution/execute.ts||src/execution/execute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     return { errors: exeContext };",
          "235:   }",
          "238: }",
          "241:   exeContext: ExecutionContext,",
          "242: ): PromiseOrValue<ExecutionResult | ExperimentalIncrementalExecutionResults> {",
          "255:   const initialResultRecord = new InitialResultRecord();",
          "256:   try {",
          "260:         (resolved) =>",
          "261:           incrementalPublisher.buildDataResponse(initialResultRecord, resolved),",
          "262:         (error) =>",
          "263:           incrementalPublisher.buildErrorResponse(initialResultRecord, error),",
          "264:       );",
          "265:     }",
          "267:   } catch (error) {",
          "269:   }",
          "270: }",
          "",
          "[Removed Lines]",
          "237:   return executeImpl(exeContext);",
          "240: function executeImpl(",
          "254:   const incrementalPublisher = exeContext.incrementalPublisher;",
          "257:     const data = executeOperation(exeContext, initialResultRecord);",
          "258:     if (isPromise(data)) {",
          "259:       return data.then(",
          "266:     return incrementalPublisher.buildDataResponse(initialResultRecord, data);",
          "268:     return incrementalPublisher.buildErrorResponse(initialResultRecord, error);",
          "",
          "[Added Lines]",
          "237:   return executeOperation(exeContext);",
          "255: function executeOperation(",
          "260:     const {",
          "261:       operation,",
          "262:       schema,",
          "263:       fragments,",
          "264:       variableValues,",
          "265:       rootValue,",
          "266:       incrementalPublisher,",
          "267:     } = exeContext;",
          "268:     const rootType = schema.getRootType(operation.operation);",
          "269:     if (rootType == null) {",
          "270:       throw new GraphQLError(",
          "271:         `Schema is not configured to execute ${operation.operation} operation.`,",
          "272:         { nodes: operation },",
          "273:       );",
          "274:     }",
          "276:     const { fields, newDeferUsages } = collectFields(",
          "277:       schema,",
          "278:       fragments,",
          "279:       variableValues,",
          "280:       rootType,",
          "281:       operation,",
          "282:     );",
          "283:     const { groupedFieldSet, newGroupedFieldSetDetailsMap } =",
          "284:       buildFieldPlan(fields);",
          "286:     const newDeferMap = addNewDeferredFragments(",
          "287:       incrementalPublisher,",
          "288:       newDeferUsages,",
          "289:       initialResultRecord,",
          "290:     );",
          "292:     const path = undefined;",
          "294:     const newDeferredGroupedFieldSetRecords = addNewDeferredGroupedFieldSets(",
          "295:       incrementalPublisher,",
          "296:       newGroupedFieldSetDetailsMap,",
          "297:       newDeferMap,",
          "298:       path,",
          "299:     );",
          "301:     const result = executeRootGroupedFieldSet(",
          "302:       exeContext,",
          "303:       operation.operation,",
          "304:       rootType,",
          "305:       rootValue,",
          "306:       groupedFieldSet,",
          "307:       initialResultRecord,",
          "308:       newDeferMap,",
          "309:     );",
          "311:     executeDeferredGroupedFieldSets(",
          "312:       exeContext,",
          "313:       rootType,",
          "314:       rootValue,",
          "315:       path,",
          "316:       newDeferredGroupedFieldSetRecords,",
          "317:       newDeferMap,",
          "318:     );",
          "320:     if (isPromise(result)) {",
          "321:       return result.then(",
          "328:     return incrementalPublisher.buildDataResponse(initialResultRecord, result);",
          "330:     return exeContext.incrementalPublisher.buildErrorResponse(",
          "331:       initialResultRecord,",
          "332:       error,",
          "333:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "384:   };",
          "385: }",
          "391:   exeContext: ExecutionContext,",
          "392:   initialResultRecord: InitialResultRecord,",
          "393: ): PromiseOrValue<ObjMap<unknown>> {",
          "437:     case OperationTypeNode.QUERY:",
          "439:         exeContext,",
          "440:         rootType,",
          "441:         rootValue,",
          "443:         groupedFieldSet,",
          "444:         initialResultRecord,",
          "445:         newDeferMap,",
          "446:       );",
          "448:     case OperationTypeNode.MUTATION:",
          "450:         exeContext,",
          "451:         rootType,",
          "452:         rootValue,",
          "454:         groupedFieldSet,",
          "455:         initialResultRecord,",
          "456:         newDeferMap,",
          "457:       );",
          "459:     case OperationTypeNode.SUBSCRIPTION:",
          "463:         exeContext,",
          "464:         rootType,",
          "465:         rootValue,",
          "467:         groupedFieldSet,",
          "468:         initialResultRecord,",
          "469:         newDeferMap,",
          "470:       );",
          "471:   }",
          "483: }",
          "",
          "[Removed Lines]",
          "390: function executeOperation(",
          "394:   const {",
          "395:     operation,",
          "396:     schema,",
          "397:     fragments,",
          "398:     variableValues,",
          "399:     rootValue,",
          "400:     incrementalPublisher,",
          "401:   } = exeContext;",
          "402:   const rootType = schema.getRootType(operation.operation);",
          "403:   if (rootType == null) {",
          "404:     throw new GraphQLError(",
          "405:       `Schema is not configured to execute ${operation.operation} operation.`,",
          "406:       { nodes: operation },",
          "407:     );",
          "408:   }",
          "410:   const { fields, newDeferUsages } = collectFields(",
          "411:     schema,",
          "412:     fragments,",
          "413:     variableValues,",
          "414:     rootType,",
          "415:     operation,",
          "416:   );",
          "417:   const { groupedFieldSet, newGroupedFieldSetDetailsMap } =",
          "418:     buildFieldPlan(fields);",
          "420:   const newDeferMap = addNewDeferredFragments(",
          "421:     incrementalPublisher,",
          "422:     newDeferUsages,",
          "423:     initialResultRecord,",
          "424:   );",
          "426:   const path = undefined;",
          "428:   const newDeferredGroupedFieldSetRecords = addNewDeferredGroupedFieldSets(",
          "429:     incrementalPublisher,",
          "430:     newGroupedFieldSetDetailsMap,",
          "431:     newDeferMap,",
          "432:     path,",
          "433:   );",
          "435:   let result;",
          "436:   switch (operation.operation) {",
          "438:       result = executeFields(",
          "442:         path,",
          "447:       break;",
          "449:       result = executeFieldsSerially(",
          "453:         path,",
          "458:       break;",
          "462:       result = executeFields(",
          "466:         path,",
          "473:   executeDeferredGroupedFieldSets(",
          "474:     exeContext,",
          "475:     rootType,",
          "476:     rootValue,",
          "477:     path,",
          "478:     newDeferredGroupedFieldSetRecords,",
          "479:     newDeferMap,",
          "480:   );",
          "482:   return result;",
          "",
          "[Added Lines]",
          "452: function executeRootGroupedFieldSet(",
          "454:   operation: OperationTypeNode,",
          "455:   rootType: GraphQLObjectType,",
          "456:   rootValue: unknown,",
          "457:   groupedFieldSet: GroupedFieldSet,",
          "459:   newDeferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "461:   switch (operation) {",
          "463:       return executeFields(",
          "467:         undefined,",
          "473:       return executeFieldsSerially(",
          "477:         undefined,",
          "485:       return executeFields(",
          "489:         undefined,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1725:   return mapAsyncIterable(",
          "1726:     resultOrStream,",
          "1727:     (payload: unknown) =>",
          "1729:         buildPerEventExecutionContext(exeContext, payload),",
          "",
          "[Removed Lines]",
          "1728:       executeImpl(",
          "",
          "[Added Lines]",
          "1740:       executeOperation(",
          "",
          "---------------"
        ]
      }
    }
  ]
}