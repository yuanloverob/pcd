{
  "cve_id": "CVE-2023-26144",
  "cve_desc": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
  "repo": "graphql/graphql-js",
  "patch_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
  "patch_info": {
    "commit_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
    "repo": "graphql/graphql-js",
    "commit_url": "https://github.com/graphql/graphql-js/commit/f94b511386c7e47bd0380dcd56553dc063320226",
    "files": [
      "benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ],
    "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3958)\n\nCo-authored-by: AaronMoat <AaronMoat@users.noreply.github.com>\nCo-authored-by: Ivan Goncharov <ivan.goncharov.ua@gmail.com>\nResolves https://github.com/graphql/graphql-js/issues/3955 (at least",
    "before_after_code_files": [
      "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ]
  },
  "patch_diff": {
    "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
      "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { graphqlSync } from 'graphql/graphql.js';",
      "2: import { buildSchema } from 'graphql/utilities/buildASTSchema.js';",
      "4: const schema = buildSchema('type Query { hello: String! }');",
      "5: const source = `{ ${'hello '.repeat(250)}}`;",
      "7: export const benchmark = {",
      "8:   name: 'Many repeated fields',",
      "9:   count: 5,",
      "10:   measure() {",
      "11:     graphqlSync({ schema, source });",
      "12:   },",
      "13: };",
      "",
      "---------------"
    ],
    "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts": [
      "File: src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts -> src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "179:     ]);",
      "180:   });",
      "182:   it('mix of stream and no stream', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:   it('different stream directive extra argument', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "185:         name @stream(label: \"streamLabel\", initialCount: 1)",
      "186:         name @stream(label: \"streamLabel\", initialCount: 1, extraArg: true)",
      "187:       }",
      "188:     `).toDeepEqual([",
      "189:       {",
      "190:         message:",
      "191:           'Fields \"name\" conflict because they have differing stream directives. Use different aliases on the fields to fetch both if this was intentional.',",
      "192:         locations: [",
      "193:           { line: 3, column: 9 },",
      "194:           { line: 4, column: 9 },",
      "195:         ],",
      "196:       },",
      "197:     ]);",
      "198:   });",
      "",
      "---------------"
    ],
    "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
      "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   DirectiveNode,",
      "8:   FieldNode,",
      "9:   FragmentDefinitionNode,",
      "11:   SelectionSetNode,",
      "12: } from '../../language/ast.js';",
      "13: import { Kind } from '../../language/kinds.js';",
      "14: import { print } from '../../language/printer.js';",
      "",
      "[Removed Lines]",
      "10:   ObjectValueNode,",
      "",
      "[Added Lines]",
      "11:   ValueNode,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "592:     }",
      "596:       return [",
      "597:         [responseName, 'they have differing arguments'],",
      "598:         [node1],",
      "",
      "[Removed Lines]",
      "595:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
      "",
      "[Added Lines]",
      "595:     if (!sameArguments(node1, node2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "649:   }",
      "650: }",
      "665: }",
      "667: function getStreamDirective(",
      "",
      "[Removed Lines]",
      "652: function stringifyArguments(fieldNode: FieldNode | DirectiveNode): string {",
      "654:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
      "656:   const inputObjectWithArgs: ObjectValueNode = {",
      "657:     kind: Kind.OBJECT,",
      "658:     fields: args.map((argNode) => ({",
      "659:       kind: Kind.OBJECT_FIELD,",
      "660:       name: argNode.name,",
      "661:       value: argNode.value,",
      "662:     })),",
      "663:   };",
      "664:   return print(sortValueNode(inputObjectWithArgs));",
      "",
      "[Added Lines]",
      "652: function sameArguments(",
      "653:   node1: FieldNode | DirectiveNode,",
      "654:   node2: FieldNode | DirectiveNode,",
      "655: ): boolean {",
      "656:   const args1 = node1.arguments;",
      "657:   const args2 = node2.arguments;",
      "659:   if (args1 === undefined || args1.length === 0) {",
      "660:     return args2 === undefined || args2.length === 0;",
      "661:   }",
      "662:   if (args2 === undefined || args2.length === 0) {",
      "663:     return false;",
      "664:   }",
      "666:   if (args1.length !== args2.length) {",
      "667:     return false;",
      "668:   }",
      "670:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
      "671:   return args1.every((arg1) => {",
      "672:     const value1 = arg1.value;",
      "673:     const value2 = values2.get(arg1.name.value);",
      "674:     if (value2 === undefined) {",
      "675:       return false;",
      "676:     }",
      "678:     return stringifyValue(value1) === stringifyValue(value2);",
      "679:   });",
      "680: }",
      "682: function stringifyValue(value: ValueNode): string | null {",
      "683:   return print(sortValueNode(value));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "681:     return true;",
      "682:   } else if (stream1 && stream2) {",
      "685:   }",
      "687:   return false;",
      "",
      "[Removed Lines]",
      "684:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
      "",
      "[Added Lines]",
      "703:     return sameArguments(stream1, stream2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "89f9223f11329b2944554e9bf5ed5280df4782ad",
      "candidate_info": {
        "commit_hash": "89f9223f11329b2944554e9bf5ed5280df4782ad",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/89f9223f11329b2944554e9bf5ed5280df4782ad",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/__tests__/stream-test.ts",
          "src/execution/execute.ts",
          "src/execution/types.ts"
        ],
        "message": "incremental: handle Stream as stream rather than linked list (#4098)\n\nThe incremental graph can handle a stream as a stream, rather than\ncreating a linked list where each incremental data record also includes\nthe next record in addition to any new defers and/or streams.\n\nEnables easily batching all available stream items within the same\nincremental entry.\n\nDepends on #4094",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts",
          "src/execution/execute.ts||src/execution/execute.ts",
          "src/execution/types.ts||src/execution/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { isPromise } from '../jsutils/isPromise.js';",
          "2: import { promiseWithResolvers } from '../jsutils/promiseWithResolvers.js';",
          "4: import type {",
          "5:   DeferredFragmentRecord,",
          "6:   DeferredGroupedFieldSetRecord,",
          "7:   IncrementalDataRecord,",
          "8:   IncrementalDataRecordResult,",
          "9:   ReconcilableDeferredGroupedFieldSetResult,",
          "11:   StreamRecord,",
          "12:   SubsequentResultRecord,",
          "13: } from './types.js';",
          "",
          "[Removed Lines]",
          "10:   StreamItemsRecord,",
          "",
          "[Added Lines]",
          "4: import type { GraphQLError } from '../error/GraphQLError.js';",
          "12:   StreamItemRecord,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: }",
          "29: function isStreamNode(",
          "33: }",
          "35: type SubsequentResultNode = DeferredFragmentNode | StreamRecord;",
          "",
          "[Removed Lines]",
          "30:   subsequentResultNode: SubsequentResultNode,",
          "31: ): subsequentResultNode is StreamRecord {",
          "32:   return 'path' in subsequentResultNode;",
          "",
          "[Added Lines]",
          "32:   record: SubsequentResultNode | IncrementalDataRecord,",
          "33: ): record is StreamRecord {",
          "34:   return 'streamItemQueue' in record;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:       if (isDeferredGroupedFieldSetRecord(incrementalDataRecord)) {",
          "68:         this._addDeferredGroupedFieldSetRecord(incrementalDataRecord);",
          "69:       } else {",
          "71:       }",
          "72:     }",
          "73:   }",
          "",
          "[Removed Lines]",
          "70:         this._addStreamItemsRecord(incrementalDataRecord);",
          "",
          "[Added Lines]",
          "72:         this._addStreamRecord(incrementalDataRecord);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:       if (isStreamNode(node)) {",
          "96:         this._pending.add(node);",
          "97:         newPending.push(node);",
          "98:       } else if (node.deferredGroupedFieldSetRecords.size > 0) {",
          "99:         for (const deferredGroupedFieldSetNode of node.deferredGroupedFieldSetRecords) {",
          "100:           this._newIncrementalDataRecords.add(deferredGroupedFieldSetNode);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:         this._newIncrementalDataRecords.add(node);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:     this._newPending.clear();",
          "112:     for (const incrementalDataRecord of this._newIncrementalDataRecords) {",
          "117:       } else {",
          "119:       }",
          "120:     }",
          "121:     this._newIncrementalDataRecords.clear();",
          "",
          "[Removed Lines]",
          "113:       const result = incrementalDataRecord.result.value;",
          "114:       if (isPromise(result)) {",
          "116:         result.then((resolved) => this._enqueue(resolved));",
          "118:         this._enqueue(result);",
          "",
          "[Added Lines]",
          "116:       if (isStreamNode(incrementalDataRecord)) {",
          "118:         this._onStreamItems(",
          "119:           incrementalDataRecord,",
          "120:           incrementalDataRecord.streamItemQueue,",
          "121:         );",
          "123:         const result = incrementalDataRecord.result.value;",
          "124:         if (isPromise(result)) {",
          "126:           result.then((resolved) => this._enqueue(resolved));",
          "127:         } else {",
          "128:           this._enqueue(result);",
          "129:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "246:     }",
          "247:   }",
          "255:   }",
          "257:   private _addDeferredFragmentNode(",
          "",
          "[Removed Lines]",
          "249:   private _addStreamItemsRecord(streamItemsRecord: StreamItemsRecord): void {",
          "250:     const streamRecord = streamItemsRecord.streamRecord;",
          "251:     if (!this._pending.has(streamRecord)) {",
          "252:       this._newPending.add(streamRecord);",
          "253:     }",
          "254:     this._newIncrementalDataRecords.add(streamItemsRecord);",
          "",
          "[Added Lines]",
          "260:   private _addStreamRecord(streamRecord: StreamRecord): void {",
          "261:     this._newPending.add(streamRecord);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "283:     return deferredFragmentNode;",
          "284:   }",
          "286:   private *_yieldCurrentCompletedIncrementalData(",
          "287:     first: IncrementalDataRecordResult,",
          "288:   ): Generator<IncrementalDataRecordResult> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:   private async _onStreamItems(",
          "294:     streamRecord: StreamRecord,",
          "295:     streamItemQueue: Array<StreamItemRecord>,",
          "296:   ): Promise<void> {",
          "297:     let items: Array<unknown> = [];",
          "298:     let errors: Array<GraphQLError> = [];",
          "299:     let incrementalDataRecords: Array<IncrementalDataRecord> = [];",
          "300:     let streamItemRecord: StreamItemRecord | undefined;",
          "301:     while ((streamItemRecord = streamItemQueue.shift()) !== undefined) {",
          "302:       let result = streamItemRecord.value;",
          "303:       if (isPromise(result)) {",
          "304:         if (items.length > 0) {",
          "305:           this._enqueue({",
          "306:             streamRecord,",
          "307:             result:",
          "311:                 : { items },",
          "312:             incrementalDataRecords,",
          "313:           });",
          "314:           items = [];",
          "315:           errors = [];",
          "316:           incrementalDataRecords = [];",
          "317:         }",
          "319:         result = await result;",
          "323:         await Promise.resolve();",
          "324:       }",
          "325:       if (result.item === undefined) {",
          "326:         if (items.length > 0) {",
          "327:           this._enqueue({",
          "328:             streamRecord,",
          "329:             result: errors.length > 0 ? { items, errors } : { items },",
          "330:             incrementalDataRecords,",
          "331:           });",
          "332:         }",
          "333:         this._enqueue(",
          "334:           result.errors === undefined",
          "335:             ? { streamRecord }",
          "336:             : {",
          "337:                 streamRecord,",
          "338:                 errors: result.errors,",
          "339:               },",
          "340:         );",
          "341:         return;",
          "342:       }",
          "343:       items.push(result.item);",
          "344:       if (result.errors !== undefined) {",
          "345:         errors.push(...result.errors);",
          "346:       }",
          "347:       if (result.incrementalDataRecords !== undefined) {",
          "348:         incrementalDataRecords.push(...result.incrementalDataRecords);",
          "349:       }",
          "350:     }",
          "351:   }",
          "",
          "---------------"
        ],
        "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts": [
          "File: src/execution/__tests__/stream-test.ts -> src/execution/__tests__/stream-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:         hasNext: true,",
          "147:       },",
          "148:       {",
          "153:         completed: [{ id: '0' }],",
          "154:         hasNext: false,",
          "155:       },",
          "",
          "[Removed Lines]",
          "149:         incremental: [",
          "150:           { items: ['banana'], id: '0' },",
          "151:           { items: ['coconut'], id: '0' },",
          "152:         ],",
          "",
          "[Added Lines]",
          "149:         incremental: [{ items: ['banana', 'coconut'], id: '0' }],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:         hasNext: true,",
          "170:       },",
          "171:       {",
          "177:         completed: [{ id: '0' }],",
          "178:         hasNext: false,",
          "179:       },",
          "",
          "[Removed Lines]",
          "172:         incremental: [",
          "173:           { items: ['apple'], id: '0' },",
          "174:           { items: ['banana'], id: '0' },",
          "175:           { items: ['coconut'], id: '0' },",
          "176:         ],",
          "",
          "[Added Lines]",
          "169:         incremental: [{ items: ['apple', 'banana', 'coconut'], id: '0' }],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:       {",
          "221:         incremental: [",
          "222:           {",
          "228:             id: '0',",
          "229:           },",
          "230:         ],",
          "",
          "[Removed Lines]",
          "223:             items: ['banana'],",
          "224:             id: '0',",
          "225:           },",
          "226:           {",
          "227:             items: ['coconut'],",
          "",
          "[Added Lines]",
          "216:             items: ['banana', 'coconut'],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "284:       {",
          "285:         incremental: [",
          "286:           {",
          "292:             id: '0',",
          "293:           },",
          "294:         ],",
          "",
          "[Removed Lines]",
          "287:             items: [['banana', 'banana', 'banana']],",
          "288:             id: '0',",
          "289:           },",
          "290:           {",
          "291:             items: [['coconut', 'coconut', 'coconut']],",
          "",
          "[Added Lines]",
          "276:             items: [",
          "277:               ['banana', 'banana', 'banana'],",
          "278:               ['coconut', 'coconut', 'coconut'],",
          "279:             ],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "366:       {",
          "367:         incremental: [",
          "368:           {",
          "378:             id: '0',",
          "379:           },",
          "380:         ],",
          "",
          "[Removed Lines]",
          "369:             items: [{ name: 'Luke', id: '1' }],",
          "370:             id: '0',",
          "371:           },",
          "372:           {",
          "373:             items: [{ name: 'Han', id: '2' }],",
          "374:             id: '0',",
          "375:           },",
          "376:           {",
          "377:             items: [{ name: 'Leia', id: '3' }],",
          "",
          "[Added Lines]",
          "357:             items: [",
          "358:               { name: 'Luke', id: '1' },",
          "359:               { name: 'Han', id: '2' },",
          "360:               { name: 'Leia', id: '3' },",
          "361:             ],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "507:       {",
          "508:         incremental: [",
          "509:           {",
          "511:             id: '0',",
          "512:             errors: [",
          "513:               {",
          "",
          "[Removed Lines]",
          "510:             items: [null],",
          "",
          "[Added Lines]",
          "494:             items: [null, { name: 'Leia', id: '3' }],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "517:               },",
          "518:             ],",
          "519:           },",
          "524:         ],",
          "525:         completed: [{ id: '0' }],",
          "526:         hasNext: false,",
          "",
          "[Removed Lines]",
          "520:           {",
          "521:             items: [{ name: 'Leia', id: '3' }],",
          "522:             id: '0',",
          "523:           },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "557:             items: [{ name: 'Luke', id: '1' }],",
          "558:             id: '0',",
          "559:           },",
          "560:           {",
          "561:             items: [{ name: 'Han', id: '2' }],",
          "562:             id: '0',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "540:         ],",
          "541:         hasNext: true,",
          "542:       },",
          "543:       {",
          "544:         incremental: [",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "910:       {",
          "911:         incremental: [",
          "912:           {",
          "914:             id: '0',",
          "915:             errors: [",
          "916:               {",
          "",
          "[Removed Lines]",
          "913:             items: [null],",
          "",
          "[Added Lines]",
          "898:             items: [null, { nonNullName: 'Han' }],",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "920:               },",
          "921:             ],",
          "922:           },",
          "927:         ],",
          "928:         completed: [{ id: '0' }],",
          "929:         hasNext: false,",
          "",
          "[Removed Lines]",
          "923:           {",
          "924:             items: [{ nonNullName: 'Han' }],",
          "925:             id: '0',",
          "926:           },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "956:       {",
          "957:         incremental: [",
          "958:           {",
          "960:             id: '0',",
          "961:             errors: [",
          "962:               {",
          "",
          "[Removed Lines]",
          "959:             items: [null],",
          "",
          "[Added Lines]",
          "940:             items: [null, { nonNullName: 'Han' }],",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "966:               },",
          "967:             ],",
          "968:           },",
          "973:         ],",
          "974:         completed: [{ id: '0' }],",
          "975:         hasNext: false,",
          "",
          "[Removed Lines]",
          "969:           {",
          "970:             items: [{ nonNullName: 'Han' }],",
          "971:             id: '0',",
          "972:           },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1086:       {",
          "1087:         incremental: [",
          "1088:           {",
          "1090:             id: '0',",
          "1091:             errors: [",
          "1092:               {",
          "",
          "[Removed Lines]",
          "1089:             items: [null],",
          "",
          "[Added Lines]",
          "1066:             items: [null, { nonNullName: 'Han' }],",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1096:               },",
          "1097:             ],",
          "1098:           },",
          "1103:         ],",
          "1104:         completed: [{ id: '0' }],",
          "1105:         hasNext: false,",
          "",
          "[Removed Lines]",
          "1099:           {",
          "1100:             items: [{ nonNullName: 'Han' }],",
          "1101:             id: '0',",
          "1102:           },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1400:       },",
          "1401:       {",
          "1402:         incremental: [",
          "1407:           {",
          "1408:             data: { scalarField: null },",
          "1409:             id: '0',",
          "",
          "[Removed Lines]",
          "1403:           {",
          "1404:             items: [{ name: 'Luke' }],",
          "1405:             id: '1',",
          "1406:           },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1415:               },",
          "1416:             ],",
          "1417:           },",
          "1418:         ],",
          "1419:         completed: [{ id: '0' }, { id: '1' }],",
          "1420:         hasNext: false,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1387:           {",
          "1388:             items: [{ name: 'Luke' }],",
          "1389:             id: '1',",
          "1390:           },",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1717:       {",
          "1718:         incremental: [",
          "1719:           {",
          "1725:             id: '0',",
          "1726:           },",
          "1727:         ],",
          "",
          "[Removed Lines]",
          "1720:             items: [{ id: '1', name: 'Luke' }],",
          "1721:             id: '0',",
          "1722:           },",
          "1723:           {",
          "1724:             items: [{ id: '2', name: 'Han' }],",
          "",
          "[Added Lines]",
          "1693:             items: [",
          "1694:               { id: '1', name: 'Luke' },",
          "1695:               { id: '2', name: 'Han' },",
          "1696:             ],",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1783:             id: '0',",
          "1784:           },",
          "1785:           {",
          "1791:             id: '1',",
          "1792:           },",
          "1793:         ],",
          "",
          "[Removed Lines]",
          "1786:             items: [{ name: 'Luke' }],",
          "1787:             id: '1',",
          "1788:           },",
          "1789:           {",
          "1790:             items: [{ name: 'Han' }],",
          "",
          "[Added Lines]",
          "1758:             items: [{ name: 'Luke' }, { name: 'Han' }],",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1858:       value: {",
          "1859:         pending: [{ id: '2', path: ['friendList', 1], label: 'DeferName' }],",
          "1860:         incremental: [",
          "1865:           {",
          "1866:             data: { name: 'Luke' },",
          "1867:             id: '0',",
          "1868:           },",
          "1869:         ],",
          "1870:         completed: [{ id: '0' }],",
          "1871:         hasNext: true,",
          "",
          "[Removed Lines]",
          "1861:           {",
          "1862:             items: [{ id: '2' }],",
          "1863:             id: '1',",
          "1864:           },",
          "",
          "[Added Lines]",
          "1833:           {",
          "1834:             items: [{ id: '2' }],",
          "1835:             id: '1',",
          "1836:           },",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1959:       value: {",
          "1960:         pending: [{ id: '2', path: ['friendList', 1], label: 'DeferName' }],",
          "1961:         incremental: [",
          "1966:           {",
          "1967:             data: { name: 'Luke' },",
          "1968:             id: '0',",
          "1969:           },",
          "1970:         ],",
          "1971:         completed: [{ id: '0' }],",
          "1972:         hasNext: true,",
          "",
          "[Removed Lines]",
          "1962:           {",
          "1963:             items: [{ id: '2' }],",
          "1964:             id: '1',",
          "1965:           },",
          "",
          "[Added Lines]",
          "1934:           {",
          "1935:             items: [{ id: '2' }],",
          "1936:             id: '1',",
          "1937:           },",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   ExecutionResult,",
          "70:   ExperimentalIncrementalExecutionResults,",
          "71:   IncrementalDataRecord,",
          "74:   StreamRecord,",
          "75: } from './types.js';",
          "77: import {",
          "78:   getArgumentValues,",
          "79:   getDirectiveValues,",
          "",
          "[Removed Lines]",
          "72:   StreamItemsRecord,",
          "73:   StreamItemsResult,",
          "76: import { isReconcilableStreamItemsResult } from './types.js';",
          "",
          "[Added Lines]",
          "72:   StreamItemRecord,",
          "73:   StreamItemResult,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1095:   while (true) {",
          "1096:     if (streamUsage && index >= streamUsage.initialCount) {",
          "1097:       const returnFn = asyncIterator.return;",
          "1098:       let streamRecord: StreamRecord | CancellableStreamRecord;",
          "1099:       if (returnFn === undefined) {",
          "1100:         streamRecord = {",
          "1101:           label: streamUsage.label,",
          "1102:           path,",
          "1104:       } else {",
          "1105:         streamRecord = {",
          "1106:           label: streamUsage.label,",
          "1107:           path,",
          "1108:           earlyReturn: returnFn.bind(asyncIterator),",
          "1109:         };",
          "1110:         if (exeContext.cancellableStreams === undefined) {",
          "",
          "[Removed Lines]",
          "1103:         } as StreamRecord;",
          "",
          "[Added Lines]",
          "1096:       const streamItemQueue = buildAsyncStreamItemQueue(",
          "1097:         index,",
          "1098:         path,",
          "1099:         asyncIterator,",
          "1100:         exeContext,",
          "1101:         streamUsage.fieldGroup,",
          "1102:         info,",
          "1103:         itemType,",
          "1104:       );",
          "1112:           streamItemQueue,",
          "1113:         };",
          "1118:           streamItemQueue,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1113:         exeContext.cancellableStreams.add(streamRecord);",
          "1114:       }",
          "1128:       break;",
          "1129:     }",
          "",
          "[Removed Lines]",
          "1116:       const firstStreamItems = firstAsyncStreamItems(",
          "1117:         streamRecord,",
          "1118:         path,",
          "1119:         index,",
          "1120:         asyncIterator,",
          "1121:         exeContext,",
          "1122:         streamUsage.fieldGroup,",
          "1123:         info,",
          "1124:         itemType,",
          "1125:       );",
          "1127:       addIncrementalDataRecords(graphqlWrappedResult, [firstStreamItems]);",
          "",
          "[Added Lines]",
          "1127:       addIncrementalDataRecords(graphqlWrappedResult, [streamRecord]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1267:     const item = iteration.value;",
          "1269:     if (streamUsage && index >= streamUsage.initialCount) {",
          "1271:         label: streamUsage.label,",
          "1272:         path,",
          "1273:       };",
          "1287:       break;",
          "1288:     }",
          "",
          "[Removed Lines]",
          "1270:       const streamRecord: StreamRecord = {",
          "1275:       const firstStreamItems = firstSyncStreamItems(",
          "1276:         streamRecord,",
          "1277:         item,",
          "1278:         index,",
          "1279:         iterator,",
          "1280:         exeContext,",
          "1281:         streamUsage.fieldGroup,",
          "1282:         info,",
          "1283:         itemType,",
          "1284:       );",
          "1286:       addIncrementalDataRecords(graphqlWrappedResult, [firstStreamItems]);",
          "",
          "[Added Lines]",
          "1270:       const syncStreamRecord: StreamRecord = {",
          "1273:         streamItemQueue: buildSyncStreamItemQueue(",
          "1274:           item,",
          "1275:           index,",
          "1276:           path,",
          "1277:           iterator,",
          "1278:           exeContext,",
          "1279:           streamUsage.fieldGroup,",
          "1280:           info,",
          "1281:           itemType,",
          "1282:         ),",
          "1285:       addIncrementalDataRecords(graphqlWrappedResult, [syncStreamRecord]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2217:   );",
          "2218: }",
          "2222:   initialItem: PromiseOrValue<unknown>,",
          "2223:   initialIndex: number,",
          "2224:   iterator: Iterator<unknown>,",
          "2225:   exeContext: ExecutionContext,",
          "2226:   fieldGroup: FieldGroup,",
          "2227:   info: GraphQLResolveInfo,",
          "2228:   itemType: GraphQLOutputType,",
          "2233:       Promise.resolve().then(() => {",
          "2240:             initialPath,",
          "2241:             initialItem,",
          "2242:             exeContext,",
          "",
          "[Removed Lines]",
          "2220: function firstSyncStreamItems(",
          "2221:   streamRecord: StreamRecord,",
          "2229: ): StreamItemsRecord {",
          "2230:   return {",
          "2231:     streamRecord,",
          "2232:     result: new BoxedPromiseOrValue(",
          "2234:         const path = streamRecord.path;",
          "2235:         const initialPath = addPath(path, initialIndex, undefined);",
          "2237:         let result = new BoxedPromiseOrValue(",
          "2238:           completeStreamItems(",
          "2239:             streamRecord,",
          "",
          "[Added Lines]",
          "2219: function buildSyncStreamItemQueue(",
          "2222:   streamPath: Path,",
          "2228: ): Array<StreamItemRecord> {",
          "2229:   const streamItemQueue: Array<StreamItemRecord> = [",
          "2230:     new BoxedPromiseOrValue(",
          "2232:         const initialPath = addPath(streamPath, initialIndex, undefined);",
          "2233:         const firstStreamItem = new BoxedPromiseOrValue(",
          "2234:           completeStreamItem(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2246:             itemType,",
          "2247:           ),",
          "2248:         );",
          "2252:         let iteration = iterator.next();",
          "2254:         while (!iteration.done) {",
          "2258:             break;",
          "2259:           }",
          "2268:               exeContext,",
          "2269:               { errors: undefined },",
          "2270:               fieldGroup,",
          "",
          "[Removed Lines]",
          "2249:         const firstStreamItems = { result };",
          "2250:         let currentStreamItems = firstStreamItems;",
          "2251:         let currentIndex = initialIndex;",
          "2253:         let erroredSynchronously = false;",
          "2255:           const value = result.value;",
          "2256:           if (!isPromise(value) && !isReconcilableStreamItemsResult(value)) {",
          "2257:             erroredSynchronously = true;",
          "2260:           const item = iteration.value;",
          "2261:           currentIndex++;",
          "2262:           const currentPath = addPath(path, currentIndex, undefined);",
          "2263:           result = new BoxedPromiseOrValue(",
          "2264:             completeStreamItems(",
          "2265:               streamRecord,",
          "2266:               currentPath,",
          "2267:               item,",
          "",
          "[Added Lines]",
          "2245:         let currentIndex = initialIndex + 1;",
          "2246:         let currentStreamItem = firstStreamItem;",
          "2250:           const result = currentStreamItem.value;",
          "2251:           if (!isPromise(result) && result.errors !== undefined) {",
          "2255:           const itemPath = addPath(streamPath, currentIndex, undefined);",
          "2257:           currentStreamItem = new BoxedPromiseOrValue(",
          "2258:             completeStreamItem(",
          "2259:               itemPath,",
          "2260:               iteration.value,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2272:               itemType,",
          "2273:             ),",
          "2274:           );",
          "2285:           iteration = iterator.next();",
          "2286:         }",
          "2300:       }),",
          "2301:     ),",
          "2332: }",
          "2337:   initialIndex: number,",
          "2338:   asyncIterator: AsyncIterator<unknown>,",
          "2339:   exeContext: ExecutionContext,",
          "2340:   fieldGroup: FieldGroup,",
          "2341:   info: GraphQLResolveInfo,",
          "2342:   itemType: GraphQLOutputType,",
          "2350:         initialIndex,",
          "2351:         asyncIterator,",
          "2352:         exeContext,",
          "",
          "[Removed Lines]",
          "2276:           const nextStreamItems: StreamItemsRecord = { streamRecord, result };",
          "2277:           currentStreamItems.result = new BoxedPromiseOrValue(",
          "2278:             prependNextStreamItems(",
          "2279:               currentStreamItems.result.value,",
          "2280:               nextStreamItems,",
          "2281:             ),",
          "2282:           );",
          "2283:           currentStreamItems = nextStreamItems;",
          "2290:         if (!erroredSynchronously) {",
          "2291:           currentStreamItems.result = new BoxedPromiseOrValue(",
          "2292:             prependNextStreamItems(currentStreamItems.result.value, {",
          "2293:               streamRecord,",
          "2294:               result: new BoxedPromiseOrValue({ streamRecord }),",
          "2295:             }),",
          "2296:           );",
          "2297:         }",
          "2299:         return firstStreamItems.result.value;",
          "2302:   };",
          "2303: }",
          "2305: function prependNextStreamItems(",
          "2306:   result: PromiseOrValue<StreamItemsResult>,",
          "2307:   nextStreamItems: StreamItemsRecord,",
          "2308: ): PromiseOrValue<StreamItemsResult> {",
          "2309:   if (isPromise(result)) {",
          "2310:     return result.then((resolved) =>",
          "2311:       prependNextResolvedStreamItems(resolved, nextStreamItems),",
          "2312:     );",
          "2313:   }",
          "2314:   return prependNextResolvedStreamItems(result, nextStreamItems);",
          "2315: }",
          "2317: function prependNextResolvedStreamItems(",
          "2318:   result: StreamItemsResult,",
          "2319:   nextStreamItems: StreamItemsRecord,",
          "2320: ): StreamItemsResult {",
          "2321:   if (!isReconcilableStreamItemsResult(result)) {",
          "2322:     return result;",
          "2323:   }",
          "2324:   const incrementalDataRecords = result.incrementalDataRecords;",
          "2325:   return {",
          "2326:     ...result,",
          "2327:     incrementalDataRecords:",
          "2328:       incrementalDataRecords === undefined",
          "2329:         ? [nextStreamItems]",
          "2330:         : [nextStreamItems, ...incrementalDataRecords],",
          "2331:   };",
          "2334: function firstAsyncStreamItems(",
          "2335:   streamRecord: StreamRecord,",
          "2336:   path: Path,",
          "2343: ): StreamItemsRecord {",
          "2344:   const firstStreamItems: StreamItemsRecord = {",
          "2345:     streamRecord,",
          "2346:     result: new BoxedPromiseOrValue(",
          "2347:       getNextAsyncStreamItemsResult(",
          "2348:         streamRecord,",
          "2349:         path,",
          "",
          "[Added Lines]",
          "2268:           streamItemQueue.push(currentStreamItem);",
          "2271:           currentIndex = initialIndex + 1;",
          "2274:         streamItemQueue.push(new BoxedPromiseOrValue({}));",
          "2276:         return firstStreamItem.value;",
          "2279:   ];",
          "2281:   return streamItemQueue;",
          "2284: function buildAsyncStreamItemQueue(",
          "2286:   streamPath: Path,",
          "2292: ): Array<StreamItemRecord> {",
          "2293:   const streamItemQueue: Array<StreamItemRecord> = [];",
          "2294:   streamItemQueue.push(",
          "2295:     new BoxedPromiseOrValue(",
          "2296:       getNextAsyncStreamItemResult(",
          "2297:         streamItemQueue,",
          "2298:         streamPath,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2355:         itemType,",
          "2356:       ),",
          "2357:     ),",
          "2360: }",
          "2365:   index: number,",
          "2366:   asyncIterator: AsyncIterator<unknown>,",
          "2367:   exeContext: ExecutionContext,",
          "2368:   fieldGroup: FieldGroup,",
          "2369:   info: GraphQLResolveInfo,",
          "2370:   itemType: GraphQLOutputType,",
          "2372:   let iteration;",
          "2373:   try {",
          "2374:     iteration = await asyncIterator.next();",
          "2375:   } catch (error) {",
          "2376:     return {",
          "2379:     };",
          "2380:   }",
          "2382:   if (iteration.done) {",
          "2384:   }",
          "2390:     itemPath,",
          "2391:     iteration.value,",
          "2392:     exeContext,",
          "",
          "[Removed Lines]",
          "2358:   };",
          "2359:   return firstStreamItems;",
          "2362: async function getNextAsyncStreamItemsResult(",
          "2363:   streamRecord: StreamRecord,",
          "2364:   path: Path,",
          "2371: ): Promise<StreamItemsResult> {",
          "2377:       streamRecord,",
          "2378:       errors: [locatedError(error, toNodes(fieldGroup), pathToArray(path))],",
          "2383:     return { streamRecord };",
          "2386:   const itemPath = addPath(path, index, undefined);",
          "2388:   const result = completeStreamItems(",
          "2389:     streamRecord,",
          "",
          "[Added Lines]",
          "2307:   );",
          "2308:   return streamItemQueue;",
          "2311: async function getNextAsyncStreamItemResult(",
          "2312:   streamItemQueue: Array<StreamItemRecord>,",
          "2313:   streamPath: Path,",
          "2320: ): Promise<StreamItemResult> {",
          "2326:       errors: [",
          "2327:         locatedError(error, toNodes(fieldGroup), pathToArray(streamPath)),",
          "2328:       ],",
          "2333:     return {};",
          "2336:   const itemPath = addPath(streamPath, index, undefined);",
          "2338:   const result = completeStreamItem(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2396:     itemType,",
          "2397:   );",
          "2405:         index,",
          "2406:         asyncIterator,",
          "2407:         exeContext,",
          "",
          "[Removed Lines]",
          "2399:   const nextStreamItems: StreamItemsRecord = {",
          "2400:     streamRecord,",
          "2401:     result: new BoxedPromiseOrValue(",
          "2402:       getNextAsyncStreamItemsResult(",
          "2403:         streamRecord,",
          "2404:         path,",
          "",
          "[Added Lines]",
          "2348:   streamItemQueue.push(",
          "2349:     new BoxedPromiseOrValue(",
          "2350:       getNextAsyncStreamItemResult(",
          "2351:         streamItemQueue,",
          "2352:         streamPath,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2410:         itemType,",
          "2411:       ),",
          "2412:     ),",
          "2416: }",
          "2420:   itemPath: Path,",
          "2421:   item: unknown,",
          "2422:   exeContext: ExecutionContext,",
          "",
          "[Removed Lines]",
          "2413:   };",
          "2415:   return prependNextStreamItems(result, nextStreamItems);",
          "2418: function completeStreamItems(",
          "2419:   streamRecord: StreamRecord,",
          "",
          "[Added Lines]",
          "2361:   );",
          "2363:   return result;",
          "2366: function completeStreamItem(",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2424:   fieldGroup: FieldGroup,",
          "2425:   info: GraphQLResolveInfo,",
          "2426:   itemType: GraphQLOutputType,",
          "2428:   if (isPromise(item)) {",
          "2429:     return completePromisedValue(",
          "2430:       exeContext,",
          "",
          "[Removed Lines]",
          "2427: ): PromiseOrValue<StreamItemsResult> {",
          "",
          "[Added Lines]",
          "2374: ): PromiseOrValue<StreamItemResult> {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2437:       new Map(),",
          "2438:     ).then(",
          "2439:       (resolvedItem) =>",
          "2445:       (error) => ({",
          "2447:         errors: withError(incrementalContext.errors, error),",
          "2448:       }),",
          "2449:     );",
          "",
          "[Removed Lines]",
          "2440:         buildStreamItemsResult(",
          "2441:           incrementalContext.errors,",
          "2442:           streamRecord,",
          "2443:           resolvedItem,",
          "2444:         ),",
          "2446:         streamRecord,",
          "",
          "[Added Lines]",
          "2387:         buildStreamItemResult(incrementalContext.errors, resolvedItem),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2475:     }",
          "2476:   } catch (error) {",
          "2477:     return {",
          "2479:       errors: withError(incrementalContext.errors, error),",
          "2480:     };",
          "2481:   }",
          "",
          "[Removed Lines]",
          "2478:       streamRecord,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2495:       })",
          "2496:       .then(",
          "2497:         (resolvedItem) =>",
          "2503:         (error) => ({",
          "2505:           errors: withError(incrementalContext.errors, error),",
          "2506:         }),",
          "2507:       );",
          "2508:   }",
          "2515: }",
          "2518:   errors: ReadonlyArray<GraphQLError> | undefined,",
          "2520:   result: GraphQLWrappedResult<unknown>,",
          "2522:   return {",
          "2531:     incrementalDataRecords: result[1],",
          "2532:   };",
          "2533: }",
          "",
          "[Removed Lines]",
          "2498:           buildStreamItemsResult(",
          "2499:             incrementalContext.errors,",
          "2500:             streamRecord,",
          "2501:             resolvedItem,",
          "2502:           ),",
          "2504:           streamRecord,",
          "2510:   return buildStreamItemsResult(",
          "2511:     incrementalContext.errors,",
          "2512:     streamRecord,",
          "2513:     result,",
          "2514:   );",
          "2517: function buildStreamItemsResult(",
          "2519:   streamRecord: StreamRecord,",
          "2521: ): StreamItemsResult {",
          "2523:     streamRecord,",
          "2524:     result:",
          "2525:       errors === undefined",
          "2526:         ? { items: [result[0]] }",
          "2527:         : {",
          "2528:             items: [result[0]],",
          "2529:             errors: [...errors],",
          "2530:           },",
          "",
          "[Added Lines]",
          "2439:           buildStreamItemResult(incrementalContext.errors, resolvedItem),",
          "2446:   return buildStreamItemResult(incrementalContext.errors, result);",
          "2449: function buildStreamItemResult(",
          "2452: ): StreamItemResult {",
          "2454:     item: result[0],",
          "2455:     errors,",
          "",
          "---------------"
        ],
        "src/execution/types.ts||src/execution/types.ts": [
          "File: src/execution/types.ts -> src/execution/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:   parent: DeferredFragmentRecord | undefined;",
          "218: }",
          "220: export interface StreamRecord {",
          "221:   path: Path;",
          "222:   label: string | undefined;",
          "223:   id?: string | undefined;",
          "224: }",
          "226: export interface CancellableStreamRecord extends StreamRecord {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: export interface StreamItemResult {",
          "221:   item?: unknown;",
          "222:   incrementalDataRecords?: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "223:   errors?: ReadonlyArray<GraphQLError> | undefined;",
          "224: }",
          "226: export type StreamItemRecord = BoxedPromiseOrValue<StreamItemResult>;",
          "232:   streamItemQueue: Array<StreamItemRecord>;",
          "233: }",
          "235: export interface StreamItemsResult {",
          "236:   streamRecord: StreamRecord;",
          "237:   result?: BareStreamItemsResult | undefined;",
          "238:   incrementalDataRecords?: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "239:   errors?: ReadonlyArray<GraphQLError> | undefined;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233:   return 'earlyReturn' in subsequentResultRecord;",
          "234: }",
          "272: export type IncrementalDataRecord =",
          "273:   | DeferredGroupedFieldSetRecord",
          "276: export type IncrementalDataRecordResult =",
          "277:   | DeferredGroupedFieldSetResult",
          "",
          "[Removed Lines]",
          "236: interface ReconcilableStreamItemsResult {",
          "237:   streamRecord: StreamRecord;",
          "238:   result: BareStreamItemsResult;",
          "239:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "240:   errors?: never;",
          "241: }",
          "243: export function isReconcilableStreamItemsResult(",
          "244:   streamItemsResult: StreamItemsResult,",
          "245: ): streamItemsResult is ReconcilableStreamItemsResult {",
          "246:   return streamItemsResult.result !== undefined;",
          "247: }",
          "249: interface TerminatingStreamItemsResult {",
          "250:   streamRecord: StreamRecord;",
          "251:   result?: never;",
          "252:   incrementalDataRecords?: never;",
          "253:   errors?: never;",
          "254: }",
          "256: interface NonReconcilableStreamItemsResult {",
          "257:   streamRecord: StreamRecord;",
          "258:   errors: ReadonlyArray<GraphQLError>;",
          "259:   result?: never;",
          "260: }",
          "262: export type StreamItemsResult =",
          "263:   | ReconcilableStreamItemsResult",
          "264:   | TerminatingStreamItemsResult",
          "265:   | NonReconcilableStreamItemsResult;",
          "267: export interface StreamItemsRecord {",
          "268:   streamRecord: StreamRecord;",
          "269:   result: BoxedPromiseOrValue<StreamItemsResult>;",
          "270: }",
          "274:   | StreamItemsRecord;",
          "",
          "[Added Lines]",
          "254:   | StreamRecord;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51f41eb446a19d82c67e229b92a7a2bb244551de",
      "candidate_info": {
        "commit_hash": "51f41eb446a19d82c67e229b92a7a2bb244551de",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/51f41eb446a19d82c67e229b92a7a2bb244551de",
        "files": [
          "src/execution/__tests__/defer-test.ts",
          "src/execution/buildFieldPlan.ts",
          "src/execution/collectFields.ts",
          "src/execution/execute.ts",
          "src/validation/rules/SingleFieldSubscriptionsRule.ts"
        ],
        "message": "incremental: allow nested defers at the same level (#4002)\n\nImplements Option A from\nhttps://github.com/graphql/defer-stream-wg/discussions/80",
        "before_after_code_files": [
          "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts",
          "src/execution/buildFieldPlan.ts||src/execution/buildFieldPlan.ts",
          "src/execution/collectFields.ts||src/execution/collectFields.ts",
          "src/execution/execute.ts||src/execution/execute.ts",
          "src/validation/rules/SingleFieldSubscriptionsRule.ts||src/validation/rules/SingleFieldSubscriptionsRule.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts": [
          "File: src/execution/__tests__/defer-test.ts -> src/execution/__tests__/defer-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:         data: {",
          "356:           hero: {},",
          "357:         },",
          "362:         hasNext: true,",
          "363:       },",
          "364:       {",
          "365:         incremental: [",
          "366:           {",
          "367:             data: {",
          "",
          "[Removed Lines]",
          "358:         pending: [",
          "359:           { id: '0', path: ['hero'], label: 'DeferTop' },",
          "360:           { id: '1', path: ['hero'], label: 'DeferNested' },",
          "361:         ],",
          "",
          "[Added Lines]",
          "358:         pending: [{ id: '0', path: ['hero'], label: 'DeferTop' }],",
          "362:         pending: [{ id: '1', path: ['hero'], label: 'DeferNested' }],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:             },",
          "370:             id: '0',",
          "371:           },",
          "372:           {",
          "373:             data: {",
          "374:               friends: [{ name: 'Han' }, { name: 'Leia' }, { name: 'C-3PO' }],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:         ],",
          "371:         completed: [{ id: '0' }],",
          "372:         hasNext: true,",
          "373:       },",
          "374:       {",
          "375:         incremental: [",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376:             id: '1',",
          "377:           },",
          "378:         ],",
          "380:         hasNext: false,",
          "381:       },",
          "382:     ]);",
          "",
          "[Removed Lines]",
          "379:         completed: [{ id: '0' }, { id: '1' }],",
          "",
          "[Added Lines]",
          "383:         completed: [{ id: '1' }],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "472:     });",
          "473:   });",
          "475:   it('Can separately emit defer fragments with different labels with varying fields', async () => {",
          "476:     const document = parse(`",
          "477:       query HeroNameQuery {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479:   it('Emits children of empty defer fragments', async () => {",
          "480:     const document = parse(`",
          "481:       query HeroNameQuery {",
          "482:         hero {",
          "483:           ... @defer {",
          "484:             ... @defer {",
          "485:               name",
          "486:             }",
          "487:           }",
          "488:         }",
          "489:       }",
          "490:     `);",
          "491:     const result = await complete(document);",
          "492:     expectJSON(result).toDeepEqual([",
          "493:       {",
          "494:         data: {",
          "495:           hero: {},",
          "496:         },",
          "497:         pending: [{ id: '0', path: ['hero'] }],",
          "498:         hasNext: true,",
          "499:       },",
          "500:       {",
          "501:         incremental: [{ data: { name: 'Luke' }, id: '0' }],",
          "502:         completed: [{ id: '0' }],",
          "503:         hasNext: false,",
          "504:       },",
          "505:     ]);",
          "506:   });",
          "",
          "---------------"
        ],
        "src/execution/buildFieldPlan.ts||src/execution/buildFieldPlan.ts": [
          "File: src/execution/buildFieldPlan.ts -> src/execution/buildFieldPlan.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: export interface FieldGroup {",
          "9:   fields: ReadonlyArray<FieldDetails>;",
          "10:   deferUsages?: DeferUsageSet | undefined;",
          "12: }",
          "14: export type GroupedFieldSet = Map<string, FieldGroup>;",
          "",
          "[Removed Lines]",
          "11:   knownDeferUsages?: DeferUsageSet | undefined;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: export function buildFieldPlan(",
          "22:   fields: Map<string, ReadonlyArray<FieldDetails>>,",
          "23:   parentDeferUsages: DeferUsageSet = new Set<DeferUsage>(),",
          "25: ): {",
          "26:   groupedFieldSet: GroupedFieldSet;",
          "27:   newGroupedFieldSetDetailsMap: Map<DeferUsageSet, NewGroupedFieldSetDetails>;",
          "29: } {",
          "33:   const groupedFieldSet = new Map<",
          "34:     string,",
          "35:     {",
          "36:       fields: Array<FieldDetails>;",
          "37:       deferUsages: DeferUsageSet;",
          "39:     }",
          "40:   >();",
          "",
          "[Removed Lines]",
          "24:   knownDeferUsages: DeferUsageSet = new Set<DeferUsage>(),",
          "28:   newDeferUsages: ReadonlyArray<DeferUsage>;",
          "30:   const newDeferUsages: Set<DeferUsage> = new Set<DeferUsage>();",
          "31:   const newKnownDeferUsages = new Set<DeferUsage>(knownDeferUsages);",
          "38:       knownDeferUsages: DeferUsageSet;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:         {",
          "48:           fields: Array<FieldDetails>;",
          "49:           deferUsages: DeferUsageSet;",
          "51:         }",
          "52:       >;",
          "53:       shouldInitiateDefer: boolean;",
          "",
          "[Removed Lines]",
          "50:           knownDeferUsages: DeferUsageSet;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72:         continue;",
          "73:       }",
          "74:       deferUsageSet.add(deferUsage);",
          "79:     }",
          "80:     if (inOriginalResult) {",
          "81:       deferUsageSet.clear();",
          "",
          "[Removed Lines]",
          "75:       if (!knownDeferUsages.has(deferUsage)) {",
          "76:         newDeferUsages.add(deferUsage);",
          "77:         newKnownDeferUsages.add(deferUsage);",
          "78:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "99:         fieldGroup = {",
          "100:           fields: [],",
          "101:           deferUsages: deferUsageSet,",
          "103:         };",
          "104:         groupedFieldSet.set(responseKey, fieldGroup);",
          "105:       }",
          "",
          "[Removed Lines]",
          "102:           knownDeferUsages: newKnownDeferUsages,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:       fieldGroup = {",
          "141:         fields: [],",
          "142:         deferUsages: deferUsageSet,",
          "144:       };",
          "145:       newGroupedFieldSet.set(responseKey, fieldGroup);",
          "146:     }",
          "",
          "[Removed Lines]",
          "143:         knownDeferUsages: newKnownDeferUsages,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "150:   return {",
          "151:     groupedFieldSet,",
          "152:     newGroupedFieldSetDetailsMap,",
          "154:   };",
          "155: }",
          "",
          "[Removed Lines]",
          "153:     newDeferUsages: Array.from(newDeferUsages),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/execution/collectFields.ts||src/execution/collectFields.ts": [
          "File: src/execution/collectFields.ts -> src/execution/collectFields.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   variableValues: { [variable: string]: unknown },",
          "61:   runtimeType: GraphQLObjectType,",
          "62:   operation: OperationDefinitionNode,",
          "64:   const groupedFieldSet = new AccumulatorMap<string, FieldDetails>();",
          "65:   const context: CollectFieldsContext = {",
          "66:     schema,",
          "67:     fragments,",
          "",
          "[Removed Lines]",
          "63: ): Map<string, ReadonlyArray<FieldDetails>> {",
          "",
          "[Added Lines]",
          "63: ): {",
          "64:   fields: Map<string, ReadonlyArray<FieldDetails>>;",
          "65:   newDeferUsages: ReadonlyArray<DeferUsage>;",
          "66: } {",
          "68:   const newDeferUsages: Array<DeferUsage> = [];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     visitedFragmentNames: new Set(),",
          "72:   };",
          "76: }",
          "",
          "[Removed Lines]",
          "74:   collectFieldsImpl(context, operation.selectionSet, groupedFieldSet);",
          "75:   return groupedFieldSet;",
          "",
          "[Added Lines]",
          "78:   collectFieldsImpl(",
          "79:     context,",
          "80:     operation.selectionSet,",
          "81:     groupedFieldSet,",
          "82:     newDeferUsages,",
          "83:   );",
          "84:   return { fields: groupedFieldSet, newDeferUsages };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:   operation: OperationDefinitionNode,",
          "94:   returnType: GraphQLObjectType,",
          "95:   fieldDetails: ReadonlyArray<FieldDetails>,",
          "97:   const context: CollectFieldsContext = {",
          "98:     schema,",
          "99:     fragments,",
          "",
          "[Removed Lines]",
          "96: ): Map<string, ReadonlyArray<FieldDetails>> {",
          "",
          "[Added Lines]",
          "105: ): {",
          "106:   fields: Map<string, ReadonlyArray<FieldDetails>>;",
          "107:   newDeferUsages: ReadonlyArray<DeferUsage>;",
          "108: } {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:     visitedFragmentNames: new Set(),",
          "104:   };",
          "105:   const subGroupedFieldSet = new AccumulatorMap<string, FieldDetails>();",
          "107:   for (const fieldDetail of fieldDetails) {",
          "108:     const node = fieldDetail.node;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:   const newDeferUsages: Array<DeferUsage> = [];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:         context,",
          "112:         node.selectionSet,",
          "113:         subGroupedFieldSet,",
          "114:         fieldDetail.deferUsage,",
          "115:       );",
          "116:     }",
          "117:   }",
          "120: }",
          "122: function collectFieldsImpl(",
          "123:   context: CollectFieldsContext,",
          "124:   selectionSet: SelectionSetNode,",
          "125:   groupedFieldSet: AccumulatorMap<string, FieldDetails>,",
          "127:   deferUsage?: DeferUsage,",
          "128: ): void {",
          "129:   const {",
          "",
          "[Removed Lines]",
          "119:   return subGroupedFieldSet;",
          "126:   parentDeferUsage?: DeferUsage,",
          "",
          "[Added Lines]",
          "127:         newDeferUsages,",
          "133:   return {",
          "134:     fields: subGroupedFieldSet,",
          "135:     newDeferUsages,",
          "136:   };",
          "143:   newDeferUsages: Array<DeferUsage>,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "143:         }",
          "144:         groupedFieldSet.add(getFieldEntryKey(selection), {",
          "145:           node: selection,",
          "147:         });",
          "148:         break;",
          "149:       }",
          "",
          "[Removed Lines]",
          "146:           deferUsage: deferUsage ?? parentDeferUsage,",
          "",
          "[Added Lines]",
          "163:           deferUsage,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "159:           operation,",
          "160:           variableValues,",
          "161:           selection,",
          "163:         );",
          "173:         break;",
          "174:       }",
          "",
          "[Removed Lines]",
          "162:           parentDeferUsage,",
          "165:         collectFieldsImpl(",
          "166:           context,",
          "167:           selection.selectionSet,",
          "168:           groupedFieldSet,",
          "169:           parentDeferUsage,",
          "170:           newDeferUsage ?? deferUsage,",
          "171:         );",
          "",
          "[Added Lines]",
          "179:           deferUsage,",
          "182:         if (!newDeferUsage) {",
          "183:           collectFieldsImpl(",
          "184:             context,",
          "185:             selection.selectionSet,",
          "186:             groupedFieldSet,",
          "187:             newDeferUsages,",
          "188:             deferUsage,",
          "189:           );",
          "190:         } else {",
          "191:           newDeferUsages.push(newDeferUsage);",
          "192:           collectFieldsImpl(",
          "193:             context,",
          "194:             selection.selectionSet,",
          "195:             groupedFieldSet,",
          "196:             newDeferUsages,",
          "197:             newDeferUsage,",
          "198:           );",
          "199:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "179:           operation,",
          "180:           variableValues,",
          "181:           selection,",
          "183:         );",
          "185:         if (",
          "",
          "[Removed Lines]",
          "182:           parentDeferUsage,",
          "",
          "[Added Lines]",
          "210:           deferUsage,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "199:         }",
          "200:         if (!newDeferUsage) {",
          "201:           visitedFragmentNames.add(fragName);",
          "202:         }",
          "211:         break;",
          "212:       }",
          "213:     }",
          "",
          "[Removed Lines]",
          "204:         collectFieldsImpl(",
          "205:           context,",
          "206:           fragment.selectionSet,",
          "207:           groupedFieldSet,",
          "208:           parentDeferUsage,",
          "209:           newDeferUsage ?? deferUsage,",
          "210:         );",
          "",
          "[Added Lines]",
          "230:           collectFieldsImpl(",
          "231:             context,",
          "232:             fragment.selectionSet,",
          "233:             groupedFieldSet,",
          "234:             newDeferUsages,",
          "235:             deferUsage,",
          "236:           );",
          "237:         } else {",
          "238:           newDeferUsages.push(newDeferUsage);",
          "239:           collectFieldsImpl(",
          "240:             context,",
          "241:             fragment.selectionSet,",
          "242:             groupedFieldSet,",
          "243:             newDeferUsages,",
          "244:             newDeferUsage,",
          "245:           );",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     returnType: GraphQLObjectType,",
          "92:     fieldGroup: FieldGroup,",
          "93:   ) => {",
          "95:       exeContext.schema,",
          "96:       exeContext.fragments,",
          "97:       exeContext.variableValues,",
          "",
          "[Removed Lines]",
          "94:     const subFields = collectSubfields(",
          "",
          "[Added Lines]",
          "94:     const { fields: subFields, newDeferUsages } = collectSubfields(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:       returnType,",
          "100:       fieldGroup.fields,",
          "101:     );",
          "107:   },",
          "108: );",
          "",
          "[Removed Lines]",
          "102:     return buildFieldPlan(",
          "103:       subFields,",
          "104:       fieldGroup.deferUsages,",
          "105:       fieldGroup.knownDeferUsages,",
          "106:     );",
          "",
          "[Added Lines]",
          "102:     return {",
          "103:       ...buildFieldPlan(subFields, fieldGroup.deferUsages),",
          "104:       newDeferUsages,",
          "105:     };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "408:     );",
          "409:   }",
          "412:     schema,",
          "413:     fragments,",
          "414:     variableValues,",
          "415:     rootType,",
          "416:     operation,",
          "417:   );",
          "419:     buildFieldPlan(fields);",
          "421:   const newDeferMap = addNewDeferredFragments(",
          "",
          "[Removed Lines]",
          "411:   const fields = collectFields(",
          "418:   const { groupedFieldSet, newGroupedFieldSetDetailsMap, newDeferUsages } =",
          "",
          "[Added Lines]",
          "410:   const { fields, newDeferUsages } = collectFields(",
          "417:   const { groupedFieldSet, newGroupedFieldSetDetailsMap } =",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1807:     );",
          "1808:   }",
          "1811:     schema,",
          "1812:     fragments,",
          "1813:     variableValues,",
          "",
          "[Removed Lines]",
          "1810:   const fields = collectFields(",
          "",
          "[Added Lines]",
          "1809:   const { fields } = collectFields(",
          "",
          "---------------"
        ],
        "src/validation/rules/SingleFieldSubscriptionsRule.ts||src/validation/rules/SingleFieldSubscriptionsRule.ts": [
          "File: src/validation/rules/SingleFieldSubscriptionsRule.ts -> src/validation/rules/SingleFieldSubscriptionsRule.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:               fragments[definition.name.value] = definition;",
          "50:             }",
          "51:           }",
          "53:             schema,",
          "54:             fragments,",
          "55:             variableValues,",
          "",
          "[Removed Lines]",
          "52:           const fields = collectFields(",
          "",
          "[Added Lines]",
          "52:           const { fields } = collectFields(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac553f82c8797ff841dd3bf474e2878003b86295",
      "candidate_info": {
        "commit_hash": "ac553f82c8797ff841dd3bf474e2878003b86295",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/ac553f82c8797ff841dd3bf474e2878003b86295",
        "files": [
          "src/utilities/__tests__/getIntrospectionQuery-test.ts",
          "src/utilities/getIntrospectionQuery.ts",
          "src/utilities/introspectionFromSchema.ts"
        ],
        "message": "Rename `inputObjectOneOf` to `oneOf` in `getIntrospectionQuery()` (#4125)",
        "before_after_code_files": [
          "src/utilities/__tests__/getIntrospectionQuery-test.ts||src/utilities/__tests__/getIntrospectionQuery-test.ts",
          "src/utilities/getIntrospectionQuery.ts||src/utilities/getIntrospectionQuery.ts",
          "src/utilities/introspectionFromSchema.ts||src/utilities/introspectionFromSchema.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/utilities/__tests__/getIntrospectionQuery-test.ts||src/utilities/__tests__/getIntrospectionQuery-test.ts": [
          "File: src/utilities/__tests__/getIntrospectionQuery-test.ts -> src/utilities/__tests__/getIntrospectionQuery-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   it('include \"isOneOf\" field on input objects', () => {",
          "121:     expectIntrospectionQuery().toNotMatch('isOneOf');",
          "126:   });",
          "128:   it('include deprecated input field and args', () => {",
          "",
          "[Removed Lines]",
          "123:     expectIntrospectionQuery({ inputObjectOneOf: true }).toMatch('isOneOf', 1);",
          "125:     expectIntrospectionQuery({ inputObjectOneOf: false }).toNotMatch('isOneOf');",
          "",
          "[Added Lines]",
          "123:     expectIntrospectionQuery({ oneOf: true }).toMatch('isOneOf', 1);",
          "125:     expectIntrospectionQuery({ oneOf: false }).toNotMatch('isOneOf');",
          "",
          "---------------"
        ],
        "src/utilities/getIntrospectionQuery.ts||src/utilities/getIntrospectionQuery.ts": [
          "File: src/utilities/getIntrospectionQuery.ts -> src/utilities/getIntrospectionQuery.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: }",
          "",
          "[Removed Lines]",
          "40:   inputObjectOneOf?: boolean;",
          "",
          "[Added Lines]",
          "40:   oneOf?: boolean;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     directiveIsRepeatable: false,",
          "52:     schemaDescription: false,",
          "53:     inputValueDeprecation: false,",
          "55:     ...options,",
          "56:   };",
          "",
          "[Removed Lines]",
          "54:     inputObjectOneOf: false,",
          "",
          "[Added Lines]",
          "54:     oneOf: false,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   function inputDeprecation(str: string) {",
          "70:     return optionsWithDefault.inputValueDeprecation ? str : '';",
          "71:   }",
          "74:   return `",
          "75:     query IntrospectionQuery {",
          "",
          "[Removed Lines]",
          "72:   const inputObjectOneOf = optionsWithDefault.inputObjectOneOf ? 'isOneOf' : '';",
          "",
          "[Added Lines]",
          "72:   const oneOf = optionsWithDefault.oneOf ? 'isOneOf' : '';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:       name",
          "99:       ${descriptions}",
          "100:       ${specifiedByUrl}",
          "102:       fields(includeDeprecated: true) {",
          "103:         name",
          "104:         ${descriptions}",
          "",
          "[Removed Lines]",
          "101:       ${inputObjectOneOf}",
          "",
          "[Added Lines]",
          "101:       ${oneOf}",
          "",
          "---------------"
        ],
        "src/utilities/introspectionFromSchema.ts||src/utilities/introspectionFromSchema.ts": [
          "File: src/utilities/introspectionFromSchema.ts -> src/utilities/introspectionFromSchema.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     directiveIsRepeatable: true,",
          "31:     schemaDescription: true,",
          "32:     inputValueDeprecation: true,",
          "34:     ...options,",
          "35:   };",
          "",
          "[Removed Lines]",
          "33:     inputObjectOneOf: true,",
          "",
          "[Added Lines]",
          "33:     oneOf: true,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86ea77c18ff98623939790285c9967662ac39c35",
      "candidate_info": {
        "commit_hash": "86ea77c18ff98623939790285c9967662ac39c35",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/86ea77c18ff98623939790285c9967662ac39c35",
        "files": [
          "src/execution/IncrementalPublisher.ts"
        ],
        "message": "refactor: move returnStreamIterators to method",
        "before_after_code_files": [
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:         await this._incrementalGraph.newCompletedResultAvailable;",
          "166:       }",
          "170:       });",
          "172:       return { value: undefined, done: true };",
          "173:     };",
          "189:     const _return = async (): Promise<",
          "190:       IteratorResult<SubsequentIncrementalExecutionResult, void>",
          "191:     > => {",
          "192:       isDone = true;",
          "194:       return { value: undefined, done: true };",
          "195:     };",
          "",
          "[Removed Lines]",
          "168:       await returnStreamIterators().catch(() => {",
          "175:     const returnStreamIterators = async (): Promise<void> => {",
          "176:       const cancellableStreams = this._context.cancellableStreams;",
          "177:       if (cancellableStreams === undefined) {",
          "178:         return;",
          "179:       }",
          "180:       const promises: Array<Promise<unknown>> = [];",
          "181:       for (const streamRecord of cancellableStreams) {",
          "182:         if (streamRecord.earlyReturn !== undefined) {",
          "183:           promises.push(streamRecord.earlyReturn());",
          "184:         }",
          "185:       }",
          "186:       await Promise.all(promises);",
          "187:     };",
          "193:       await returnStreamIterators();",
          "",
          "[Added Lines]",
          "168:       await this._returnStreamIterators().catch(() => {",
          "179:       await this._returnStreamIterators();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:       error?: unknown,",
          "199:     ): Promise<IteratorResult<SubsequentIncrementalExecutionResult, void>> => {",
          "200:       isDone = true;",
          "202:       return Promise.reject(error);",
          "203:     };",
          "",
          "[Removed Lines]",
          "201:       await returnStreamIterators();",
          "",
          "[Added Lines]",
          "187:       await this._returnStreamIterators();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362:       subPath: subPath.length > 0 ? subPath : undefined,",
          "363:     };",
          "364:   }",
          "365: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:   private async _returnStreamIterators(): Promise<void> {",
          "353:     const cancellableStreams = this._context.cancellableStreams;",
          "354:     if (cancellableStreams === undefined) {",
          "355:       return;",
          "356:     }",
          "357:     const promises: Array<Promise<unknown>> = [];",
          "358:     for (const streamRecord of cancellableStreams) {",
          "359:       if (streamRecord.earlyReturn !== undefined) {",
          "360:         promises.push(streamRecord.earlyReturn());",
          "361:       }",
          "362:     }",
          "363:     await Promise.all(promises);",
          "364:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e15c3ec4dc21d9fd1df34fe9798cadf3bf02c6ea",
      "candidate_info": {
        "commit_hash": "e15c3ec4dc21d9fd1df34fe9798cadf3bf02c6ea",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/e15c3ec4dc21d9fd1df34fe9798cadf3bf02c6ea",
        "files": [
          "src/execution/__tests__/defer-test.ts"
        ],
        "message": "Add test for consolidating grouped field sets properly into deferred fragments (#3997)\n\nGroup field sets should be properly consolidated when some of the fields\nin a sibling defer overlap with a child deferred fragment.\n\nThe child deferred fragment should not prompt creation of an additional incremental data record for that field, because the field would always be sent with the parent.",
        "before_after_code_files": [
          "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts": [
          "File: src/execution/__tests__/defer-test.ts -> src/execution/__tests__/defer-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1138:     ]);",
          "1139:   });",
          "1141:   it('Nulls cross defer boundaries, null first', async () => {",
          "1142:     const document = parse(`",
          "1143:       query {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1138:     ]);",
          "1139:   });",
          "1141:   it('Correctly bundles varying subfields into incremental data records unique by defer combination, ignoring fields in a fragment masked by a parent defer', async () => {",
          "1142:     const document = parse(`",
          "1143:       query HeroNameQuery {",
          "1144:         ... @defer {",
          "1145:           hero {",
          "1146:             id",
          "1147:           }",
          "1148:         }",
          "1149:         ... @defer {",
          "1150:           hero {",
          "1151:             name",
          "1152:             shouldBeWithNameDespiteAdditionalDefer: name",
          "1153:             ... @defer {",
          "1154:               shouldBeWithNameDespiteAdditionalDefer: name",
          "1155:             }",
          "1156:           }",
          "1157:         }",
          "1158:       }",
          "1159:     `);",
          "1160:     const result = await complete(document);",
          "1161:     expectJSON(result).toDeepEqual([",
          "1162:       {",
          "1163:         data: {},",
          "1164:         pending: [",
          "1165:           { id: '0', path: [] },",
          "1166:           { id: '1', path: [] },",
          "1167:         ],",
          "1168:         hasNext: true,",
          "1169:       },",
          "1170:       {",
          "1171:         incremental: [",
          "1172:           {",
          "1173:             data: { hero: {} },",
          "1174:             id: '0',",
          "1175:           },",
          "1176:           {",
          "1177:             data: { id: '1' },",
          "1178:             id: '0',",
          "1179:             subPath: ['hero'],",
          "1180:           },",
          "1181:           {",
          "1182:             data: {",
          "1183:               name: 'Luke',",
          "1184:               shouldBeWithNameDespiteAdditionalDefer: 'Luke',",
          "1185:             },",
          "1186:             id: '1',",
          "1187:             subPath: ['hero'],",
          "1188:           },",
          "1189:         ],",
          "1190:         completed: [{ id: '0' }, { id: '1' }],",
          "",
          "---------------"
        ]
      }
    }
  ]
}