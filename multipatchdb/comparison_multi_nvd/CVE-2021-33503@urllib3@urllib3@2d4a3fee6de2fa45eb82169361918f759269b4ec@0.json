{
  "cve_id": "CVE-2021-33503",
  "cve_desc": "An issue was discovered in urllib3 before 1.26.5. When provided with a URL containing many @ characters in the authority component, the authority regular expression exhibits catastrophic backtracking, causing a denial of service if a URL were passed as a parameter or redirected to via an HTTP redirect.",
  "repo": "urllib3/urllib3",
  "patch_hash": "2d4a3fee6de2fa45eb82169361918f759269b4ec",
  "patch_info": {
    "commit_hash": "2d4a3fee6de2fa45eb82169361918f759269b4ec",
    "repo": "urllib3/urllib3",
    "commit_url": "https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec",
    "files": [
      "src/urllib3/util/url.py",
      "test/test_util.py"
    ],
    "message": "Improve performance of sub-authority splitting in URL",
    "before_after_code_files": [
      "src/urllib3/util/url.py||src/urllib3/util/url.py",
      "test/test_util.py||test/test_util.py"
    ]
  },
  "patch_diff": {
    "src/urllib3/util/url.py||src/urllib3/util/url.py": [
      "File: src/urllib3/util/url.py -> src/urllib3/util/url.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "63: BRACELESS_IPV6_ADDRZ_RE = re.compile(\"^\" + IPV6_ADDRZ_PAT[2:-2] + \"$\")",
      "64: ZONE_ID_RE = re.compile(\"(\" + ZONE_ID_PAT + r\")\\]$\")",
      "67:     REG_NAME_PAT,",
      "68:     IPV4_PAT,",
      "69:     IPV6_ADDRZ_PAT,",
      "70: )",
      "73: UNRESERVED_CHARS = set(",
      "74:     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789._-~\"",
      "",
      "[Removed Lines]",
      "66: SUBAUTHORITY_PAT = (u\"^(?:(.*)@)?(%s|%s|%s)(?::([0-9]{0,5}))?$\") % (",
      "71: SUBAUTHORITY_RE = re.compile(SUBAUTHORITY_PAT, re.UNICODE | re.DOTALL)",
      "",
      "[Added Lines]",
      "66: _HOST_PORT_PAT = (\"^(%s|%s|%s)(?::([0-9]{0,5}))?$\") % (",
      "71: _HOST_PORT_RE = re.compile(_HOST_PORT_PAT, re.UNICODE | re.DOTALL)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "365:             scheme = scheme.lower()",
      "367:         if authority:",
      "369:             if auth and normalize_uri:",
      "370:                 auth = _encode_invalid_chars(auth, USERINFO_CHARS)",
      "371:             if port == \"\":",
      "",
      "[Removed Lines]",
      "368:             auth, host, port = SUBAUTHORITY_RE.match(authority).groups()",
      "",
      "[Added Lines]",
      "368:             auth, _, host_port = authority.rpartition(\"@\")",
      "369:             auth = auth or None",
      "370:             host, port = _HOST_PORT_RE.match(host_port).groups()",
      "",
      "---------------"
    ],
    "test/test_util.py||test/test_util.py": [
      "File: test/test_util.py -> test/test_util.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "438:                 fragment=\"hash\",",
      "439:             ),",
      "440:         ),",
      "441:     ]",
      "443:     @pytest.mark.parametrize(\"url, expected_url\", url_vulnerabilities)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "441:         # Tons of '@' causing backtracking",
      "442:         (\"https://\" + (\"@\" * 10000) + \"[\", False),",
      "443:         (",
      "444:             \"https://user:\" + (\"@\" * 10000) + \"example.com\",",
      "445:             Url(",
      "446:                 scheme=\"https\",",
      "447:                 auth=\"user:\" + (\"%40\" * 9999),",
      "448:                 host=\"example.com\",",
      "449:             ),",
      "450:         ),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e854354f575615a332c15f833d445b84648bc46e",
      "candidate_info": {
        "commit_hash": "e854354f575615a332c15f833d445b84648bc46e",
        "repo": "urllib3/urllib3",
        "commit_url": "https://github.com/urllib3/urllib3/commit/e854354f575615a332c15f833d445b84648bc46e",
        "files": [
          "src/urllib3/util/url.py",
          "test/test_util.py"
        ],
        "message": "Merge pull request from GHSA-q2q7-5pp4-w6pg",
        "before_after_code_files": [
          "src/urllib3/util/url.py||src/urllib3/util/url.py",
          "test/test_util.py||test/test_util.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/urllib3/util/url.py||src/urllib3/util/url.py",
            "test/test_util.py||test/test_util.py"
          ],
          "candidate": [
            "src/urllib3/util/url.py||src/urllib3/util/url.py",
            "test/test_util.py||test/test_util.py"
          ]
        }
      },
      "candidate_diff": {
        "src/urllib3/util/url.py||src/urllib3/util/url.py": [
          "File: src/urllib3/util/url.py -> src/urllib3/util/url.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: _BRACELESS_IPV6_ADDRZ_RE = re.compile(\"^\" + _IPV6_ADDRZ_PAT[2:-2] + \"$\")",
          "62: _ZONE_ID_RE = re.compile(\"(\" + _ZONE_ID_PAT + r\")\\]$\")",
          "65:     _REG_NAME_PAT,",
          "66:     _IPV4_PAT,",
          "67:     _IPV6_ADDRZ_PAT,",
          "68: )",
          "71: _UNRESERVED_CHARS = set(",
          "72:     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789._-~\"",
          "",
          "[Removed Lines]",
          "64: _SUBAUTHORITY_PAT = (\"^(?:(.*)@)?(%s|%s|%s)(?::([0-9]{0,5}))?$\") % (",
          "69: _SUBAUTHORITY_RE = re.compile(_SUBAUTHORITY_PAT, re.UNICODE | re.DOTALL)",
          "",
          "[Added Lines]",
          "64: _HOST_PORT_PAT = (\"^(%s|%s|%s)(?::([0-9]{0,5}))?$\") % (",
          "69: _HOST_PORT_RE = re.compile(_HOST_PORT_PAT, re.UNICODE | re.DOTALL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "390:             scheme = scheme.lower()",
          "392:         if authority:",
          "394:             if auth and normalize_uri:",
          "395:                 auth = _encode_invalid_chars(auth, _USERINFO_CHARS)",
          "396:             if port == \"\":",
          "",
          "[Removed Lines]",
          "393:             auth, host, port = _SUBAUTHORITY_RE.match(authority).groups()  # type: ignore",
          "",
          "[Added Lines]",
          "393:             auth, _, host_port = authority.rpartition(\"@\")",
          "394:             auth = auth or None",
          "395:             host, port = _HOST_PORT_RE.match(host_port).groups()  # type: ignore",
          "",
          "---------------"
        ],
        "test/test_util.py||test/test_util.py": [
          "File: test/test_util.py -> test/test_util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:                 fragment=\"hash\",",
          "424:             ),",
          "425:         ),",
          "426:     ]",
          "428:     @pytest.mark.parametrize(\"url, expected_url\", url_vulnerabilities)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:         # Tons of '@' causing backtracking",
          "427:         (\"https://\" + (\"@\" * 10000) + \"[\", False),",
          "428:         (",
          "429:             \"https://user:\" + (\"@\" * 10000) + \"example.com\",",
          "430:             Url(",
          "431:                 scheme=\"https\",",
          "432:                 auth=\"user:\" + (\"%40\" * 9999),",
          "433:                 host=\"example.com\",",
          "434:             ),",
          "435:         ),",
          "",
          "---------------"
        ]
      }
    }
  ]
}