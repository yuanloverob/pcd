{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "089daf6d35e126e0a83b71a17287961e91d6aa87",
      "candidate_info": {
        "commit_hash": "089daf6d35e126e0a83b71a17287961e91d6aa87",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/089daf6d35e126e0a83b71a17287961e91d6aa87",
        "files": [
          "Makefile.defs",
          "packaging/debian/changelog",
          "packaging/freebsd/Makefile",
          "packaging/netbsd/Makefile",
          "packaging/openbsd/Makefile",
          "packaging/redhat_fedora/opensips.spec",
          "packaging/solaris/base-pkginfo",
          "packaging/solaris/berkeley-pkginfo",
          "packaging/solaris/carrierroute-pkginfo",
          "packaging/solaris/identity-pkginfo",
          "packaging/solaris/ldap-pkginfo",
          "packaging/solaris/mmgeoip-pkginfo",
          "packaging/solaris/mysql-pkginfo",
          "packaging/solaris/perl-pkginfo",
          "packaging/solaris/pgsql-pkginfo",
          "packaging/solaris/pkginfo",
          "packaging/solaris/regex-pkginfo",
          "packaging/solaris/snmp-pkginfo",
          "packaging/solaris/tls-pkginfo",
          "packaging/solaris/xmlrpc-pkginfo"
        ],
        "message": "Bump version to 3.2.6",
        "before_after_code_files": [
          "Makefile.defs||Makefile.defs",
          "packaging/redhat_fedora/opensips.spec||packaging/redhat_fedora/opensips.spec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.defs||Makefile.defs": [
          "File: Makefile.defs -> Makefile.defs",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: #version number",
          "67: VERSION_MAJOR = 3",
          "68: VERSION_MINOR = 2",
          "70: VERSION_BUILD =",
          "72: ifneq (,$(VERSION_BUILD))",
          "",
          "[Removed Lines]",
          "69: VERSION_SUBMINOR = 5",
          "",
          "[Added Lines]",
          "69: VERSION_SUBMINOR = 6",
          "",
          "---------------"
        ],
        "packaging/redhat_fedora/opensips.spec||packaging/redhat_fedora/opensips.spec": [
          "File: packaging/redhat_fedora/opensips.spec -> packaging/redhat_fedora/opensips.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: Summary:  Very fast and configurable SIP server",
          "47: Name:     opensips",
          "49: Release:  1%{?dist}",
          "50: License:  GPLv2+",
          "51: Group:    System Environment/Daemons",
          "",
          "[Removed Lines]",
          "48: Version:  3.2.5",
          "",
          "[Added Lines]",
          "48: Version:  3.2.6",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ed3f00e8b2c8bb9ec6ac5ae91598aa8d0a7792c",
      "candidate_info": {
        "commit_hash": "7ed3f00e8b2c8bb9ec6ac5ae91598aa8d0a7792c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/7ed3f00e8b2c8bb9ec6ac5ae91598aa8d0a7792c",
        "files": [
          "modules/rtp_relay/rtp_relay_ctx.c"
        ],
        "message": "rtp_relay: reset late flag for new negotiations\n\n(cherry picked from commit 22fe3bef705e3de98b950065bb2a948789c8b3ae)",
        "before_after_code_files": [
          "modules/rtp_relay/rtp_relay_ctx.c||modules/rtp_relay/rtp_relay_ctx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/rtp_relay/rtp_relay_ctx.c||modules/rtp_relay/rtp_relay_ctx.c": [
          "File: modules/rtp_relay/rtp_relay_ctx.c -> modules/rtp_relay/rtp_relay_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "742:   } else {",
          "743:    rtp_sess_set_late(ctx->main);",
          "744:   }",
          "745:  }",
          "746:  RTP_RELAY_CTX_UNLOCK(ctx);",
          "747:  if (!ret)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "745:  } else if (body && msg->REQ_METHOD == METHOD_INVITE) {",
          "746:   rtp_sess_reset_late(ctx->main);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3de32c0618a22a6d05960da7dcf4b8927bba3a5",
      "candidate_info": {
        "commit_hash": "c3de32c0618a22a6d05960da7dcf4b8927bba3a5",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c3de32c0618a22a6d05960da7dcf4b8927bba3a5",
        "files": [
          "modules/dialog/dlg_handlers.c"
        ],
        "message": "[dialog] fix bad unref leading to dialog leaking\n\nWhen using the dlg_on_timeout to set a new timeout for the dialog, due to the timer related operations (re-inserting in the list), an extra ref cnt happens. If not unref'ed, the dialog will stay (as terminated) forever in memory.\n\nCloses #2788\n\n(cherry picked from commit 4062de45d0ccfe62bb4f9475f6320d2726349bab)",
        "before_after_code_files": [
          "modules/dialog/dlg_handlers.c||modules/dialog/dlg_handlers.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/dialog/dlg_handlers.c||modules/dialog/dlg_handlers.c": [
          "File: modules/dialog/dlg_handlers.c -> modules/dialog/dlg_handlers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2322:   run_dlg_script_route( dlg, dlg->rt_on_timeout);",
          "2324:   if (tl->timeout) {",
          "2328:    if (dialog_repl_cluster && dlg->flags&DLG_FLAG_VP_CHANGED)",
          "2329:     replicate_dialog_updated(dlg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2330:    unref_dlg(dlg, 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff646336e82ce1bdea56156c826520090c9786ad",
      "candidate_info": {
        "commit_hash": "ff646336e82ce1bdea56156c826520090c9786ad",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/ff646336e82ce1bdea56156c826520090c9786ad",
        "files": [
          "modules/b2b_entities/b2b_common.h",
          "modules/b2b_logic/b2b_logic.c",
          "modules/b2b_logic/logic.c"
        ],
        "message": "b2b_logic: prevent possible crashes when accessing $b2b_logic vars\n\nMake sure to always search in the hash for the current tuple instead of relying\non a pointer saved in the b2b context. There might be races between processing\nBYEs and deleting the tuple and running a b2b_logic reply route where we access\na $b2b_logic variable.\n\nThanks to David Escartin from Sonoc for reporting.",
        "before_after_code_files": [
          "modules/b2b_entities/b2b_common.h||modules/b2b_entities/b2b_common.h",
          "modules/b2b_logic/b2b_logic.c||modules/b2b_logic/b2b_logic.c",
          "modules/b2b_logic/logic.c||modules/b2b_logic/logic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2b_common.h||modules/b2b_entities/b2b_common.h": [
          "File: modules/b2b_entities/b2b_common.h -> modules/b2b_entities/b2b_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: struct b2b_context {",
          "33:  str b2bl_key;",
          "35: };",
          "37: #endif",
          "",
          "[Removed Lines]",
          "34:  void *data;",
          "",
          "[Added Lines]",
          "34:  unsigned int hash_index;",
          "35:  unsigned int local_index;",
          "36:  int init;",
          "",
          "---------------"
        ],
        "modules/b2b_logic/b2b_logic.c||modules/b2b_logic/b2b_logic.c": [
          "File: modules/b2b_logic/b2b_logic.c -> modules/b2b_logic/b2b_logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1507:  return NULL;",
          "1508: }",
          "1512: {",
          "1513:  b2bl_tuple_t *tuple;",
          "1517:  if (!tuple) {",
          "1531:     ctx->b2bl_key.s);",
          "1534:    return NULL;",
          "1535:   }",
          "1542:  }",
          "1544:  return tuple;",
          "1545: }",
          "1548: {",
          "1549:  b2bl_tuple_t *tuple;",
          "1550:  struct b2b_context *ctx;",
          "",
          "[Removed Lines]",
          "1511: b2bl_tuple_t *get_entities_ctx_tuple(struct b2b_context *ctx)",
          "1514:  unsigned int hash_index, local_index;",
          "1516:  tuple = ctx->data;",
          "1519:   if (b2bl_parse_key(&ctx->b2bl_key, &hash_index, &local_index) < 0) {",
          "1520:    LM_ERR(\"Failed to parse key [%.*s]\\n\", ctx->b2bl_key.len,",
          "1521:     ctx->b2bl_key.s);",
          "1522:    return NULL;",
          "1523:   }",
          "1525:   if (b2bl_htable[hash_index].locked_by != process_no)",
          "1526:    lock_get(&b2bl_htable[hash_index].lock);",
          "1528:   tuple = b2bl_search_tuple_safe(hash_index, local_index);",
          "1529:   if (!tuple) {",
          "1530:    LM_ERR(\"Tuple [%.*s] not found\\n\", ctx->b2bl_key.len,",
          "1532:    if (b2bl_htable[hash_index].locked_by != process_no)",
          "1533:     lock_release(&b2bl_htable[hash_index].lock);",
          "1538:   ctx->data = tuple;",
          "1540:   if (b2bl_htable[hash_index].locked_by != process_no)",
          "1541:    lock_release(&b2bl_htable[hash_index].lock);",
          "1547: b2bl_tuple_t *get_ctx_tuple(void)",
          "",
          "[Added Lines]",
          "1510: static b2bl_tuple_t *ctx_search_tuple(struct b2b_context *ctx, int *locked)",
          "1515:  if (b2bl_htable[ctx->hash_index].locked_by != process_no)",
          "1516:   lock_get(&b2bl_htable[ctx->hash_index].lock);",
          "1518:  tuple = b2bl_search_tuple_safe(ctx->hash_index, ctx->local_index);",
          "1520:   LM_ERR(\"Tuple [%u, %u] not found\\n\", ctx->hash_index, ctx->local_index);",
          "1521:   if (b2bl_htable[ctx->hash_index].locked_by != process_no)",
          "1522:    lock_release(&b2bl_htable[ctx->hash_index].lock);",
          "1523:   locked = 0;",
          "1524:   return NULL;",
          "1525:  }",
          "1527:  return tuple;",
          "1528: }",
          "1531: b2bl_tuple_t *get_entities_ctx_tuple(struct b2b_context *ctx, int *locked)",
          "1532: {",
          "1533:  b2bl_tuple_t *tuple;",
          "1535:  if (!ctx->init) {",
          "1537:   if (b2bl_parse_key(&ctx->b2bl_key,",
          "1538:    &ctx->hash_index, &ctx->local_index) < 0) {",
          "1539:    LM_ERR(\"Failed to parse key [%.*s]\\n\", ctx->b2bl_key.len,",
          "1544:   tuple = ctx_search_tuple(ctx, locked);",
          "1545:   if (tuple)",
          "1546:    ctx->init = 1;",
          "1547:  } else {",
          "1548:   tuple = ctx_search_tuple(ctx, locked);",
          "1554: b2bl_tuple_t *get_ctx_tuple(int *locked)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1560:    LM_DBG(\"b2b_logic key not set in b2b_entities context\\n\");",
          "1564:   }",
          "1567:   if (!tuple) {",
          "1568:    LM_ERR(\"Failed to get tuple [%.*s] from b2b context\\n\",",
          "1569:     ctx->b2bl_key.len, ctx->b2bl_key.s);",
          "",
          "[Removed Lines]",
          "1563:    return ctx->data;",
          "1566:   tuple = get_entities_ctx_tuple(ctx);",
          "",
          "[Added Lines]",
          "1570:    if (!ctx->init)",
          "1571:     return NULL;",
          "1572:    else",
          "1573:     return ctx_search_tuple(ctx, locked);",
          "1576:   tuple = get_entities_ctx_tuple(ctx, locked);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1581: int pv_get_b2bl_key(struct sip_msg *msg, pv_param_t *param, pv_value_t *res)",
          "1582: {",
          "1583:  b2bl_tuple_t *tuple;",
          "1586:  if (!tuple) {",
          "1587:   LM_DBG(\"Unable to get the tuple from the current context\\n\");",
          "1588:   return pv_get_null(msg, param, res);",
          "",
          "[Removed Lines]",
          "1585:  tuple = get_ctx_tuple();",
          "",
          "[Added Lines]",
          "1594:  int locked = 0;",
          "1596:  tuple = get_ctx_tuple(&locked);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1591:  res->flags = PV_VAL_STR;",
          "1592:  res->rs = *tuple->key;",
          "1594:  return 0;",
          "1595: }",
          "1597: int pv_get_scenario(struct sip_msg *msg, pv_param_t *param, pv_value_t *res)",
          "1598: {",
          "1599:  b2bl_tuple_t *tuple;",
          "1602:  if (!tuple) {",
          "1603:   LM_DBG(\"Unable to get the tuple from the current context\\n\");",
          "1604:   return pv_get_null(msg, param, res);",
          "",
          "[Removed Lines]",
          "1601:  tuple = get_ctx_tuple();",
          "",
          "[Added Lines]",
          "1605:  if (locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "1606:   lock_release(&b2bl_htable[tuple->hash_index].lock);",
          "1614:  int locked = 0;",
          "1616:  tuple = get_ctx_tuple(&locked);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1607:  res->flags = PV_VAL_STR;",
          "1608:  res->rs = *tuple->scenario_id;",
          "1610:  return 0;",
          "1611: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1625:  if (locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "1626:   lock_release(&b2bl_htable[tuple->hash_index].lock);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1668:  b2b_dlginfo_t dummy_dlginfo;",
          "1669:  str callid;",
          "1670:  int i;",
          "1673:  if (!tuple) {",
          "1674:   LM_ERR(\"Failed to get the tuple from the current context\\n\");",
          "1675:   return pv_get_null(msg, param, res);",
          "1676:  }",
          "1679:   lock_get(&b2bl_htable[tuple->hash_index].lock);",
          "1681:  curr_entities[0] = tuple->bridge_entities[0];",
          "",
          "[Removed Lines]",
          "1672:  tuple = get_ctx_tuple();",
          "1678:  if (b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "[Added Lines]",
          "1689:  int locked = 0;",
          "1691:  tuple = get_ctx_tuple(&locked);",
          "1697:  if (!locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1914:  return 0;",
          "1915: }",
          "1918: {",
          "1919:  struct b2b_context *ctx;",
          "",
          "[Removed Lines]",
          "1917: int get_ctx_vals(struct b2b_ctx_val ***vals, b2bl_tuple_t **tuple)",
          "",
          "[Added Lines]",
          "1936: int get_ctx_vals(struct b2b_ctx_val ***vals, b2bl_tuple_t **tuple, int *locked)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1926:   }",
          "1928:   if (!ctx->b2bl_key.s) {",
          "1930:     LM_DBG(\"tuple not created yet\\n\");",
          "1933:     return 0;",
          "1934:    } else {",
          "1936:    }",
          "1937:   } else {",
          "1939:    if (*tuple == NULL) {",
          "1940:     LM_ERR(\"Failed to get tuple [%.*s] from b2b context\\n\",",
          "1941:      ctx->b2bl_key.len, ctx->b2bl_key.s);",
          "",
          "[Removed Lines]",
          "1929:    if (!ctx->data) {",
          "",
          "[Added Lines]",
          "1948:    if (!ctx->init) {",
          "1955:     if (*tuple == NULL)",
          "1956:      return -1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1955: {",
          "1956:  struct b2b_ctx_val **vals;",
          "1957:  b2bl_tuple_t *tuple = NULL;",
          "1959:  if (!param || !param->pvn.u.isname.name.s.s) {",
          "1960:   LM_ERR(\"Bad parameters!\\n\");",
          "1961:   return -1;",
          "1962:  }",
          "1965:   LM_ERR(\"Failed to get context values list\\n\");",
          "1966:   return pv_get_null(msg, param, res);",
          "1967:  }",
          "1970:   lock_get(&b2bl_htable[tuple->hash_index].lock);",
          "1972:  if (fetch_ctx_value(*vals, &param->pvn.u.isname.name.s, &param->pvv) != 0) {",
          "",
          "[Removed Lines]",
          "1964:  if (get_ctx_vals(&vals, &tuple) < 0) {",
          "1969:  if (tuple && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "[Added Lines]",
          "1979:  int locked = 0;",
          "1986:  if (get_ctx_vals(&vals, &tuple, &locked) < 0) {",
          "1991:  if (tuple && !locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1987: {",
          "1988:  struct b2b_ctx_val **ctx_vals = NULL;",
          "1989:  b2bl_tuple_t *tuple = NULL;",
          "1991:  if (!param || !param->pvn.u.isname.name.s.s) {",
          "1992:   LM_ERR(\"Bad parameters!\\n\");",
          "1993:   return -1;",
          "1994:  }",
          "1997:   LM_ERR(\"Failed to get context values list\\n\");",
          "1998:   return -1;",
          "1999:  }",
          "2002:   lock_get(&b2bl_htable[tuple->hash_index].lock);",
          "2004:  if (val==NULL || val->flags&(PV_VAL_NONE|PV_VAL_NULL|PV_VAL_EMPTY)) {",
          "",
          "[Removed Lines]",
          "1996:  if (get_ctx_vals(&ctx_vals, &tuple) < 0) {",
          "2001:  if (tuple && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "[Added Lines]",
          "2012:  int locked = 0;",
          "2019:  if (get_ctx_vals(&ctx_vals, &tuple, &locked) < 0) {",
          "2024:  if (tuple && !locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "---------------"
        ],
        "modules/b2b_logic/logic.c||modules/b2b_logic/logic.c": [
          "File: modules/b2b_logic/logic.c -> modules/b2b_logic/logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3070:   LM_ERR(\"Failed to get b2b context\\n\");",
          "3071:   goto error;",
          "3072:  }",
          "3076:  if (params->init_timeout == 0)",
          "",
          "[Removed Lines]",
          "3073:  ctx->data = tuple;",
          "",
          "[Added Lines]",
          "3073:  ctx->init = 1;",
          "3074:  ctx->hash_index = hash_index;",
          "3075:  ctx->local_index = tuple->id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3412:   LM_ERR(\"Failed to get b2b context\\n\");",
          "3413:   goto error;",
          "3414:  }",
          "3417:  if (new_entities_no != MAX_BRIDGE_ENT-1) {",
          "3418:   LM_ERR(\"Two bridge entities required!\\n\");",
          "",
          "[Removed Lines]",
          "3415:  ctx->data = tuple;",
          "",
          "[Added Lines]",
          "3417:  ctx->init = 1;",
          "3418:  ctx->hash_index = hash_index;",
          "3419:  ctx->local_index = tuple->id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4549:   LM_ERR(\"Failed to get b2b context\\n\");",
          "4550:   goto error;",
          "4551:  }",
          "4554:  if(entity_no!=0 && entity_no!=1)",
          "4555:  {",
          "",
          "[Removed Lines]",
          "4552:  ctx->data = tuple;",
          "",
          "[Added Lines]",
          "4556:  ctx->init = 1;",
          "4557:  ctx->hash_index = hash_index;",
          "4558:  ctx->local_index = local_index;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d346f0b6927ceb8895ffd7a4f52f28e685c12f7",
      "candidate_info": {
        "commit_hash": "0d346f0b6927ceb8895ffd7a4f52f28e685c12f7",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/0d346f0b6927ceb8895ffd7a4f52f28e685c12f7",
        "files": [
          "modules/clusterer/clusterer.c",
          "modules/clusterer/clusterer.h",
          "modules/clusterer/clusterer_mod.c",
          "modules/clusterer/doc/clusterer_admin.xml",
          "modules/clusterer/sync.c",
          "modules/clusterer/sync.h"
        ],
        "message": "clusterer: prevent permanent sync in progress state\n\nIf the sync end marker packet is not received, nodes get stuck in a\npermanent \"sync in progress\" state. This commit introduces a timeout,\nconfigurable via the \"sync_timeout\" modparam, after which a node reverts\nto the not synced state, if no sync data packet is received.\n\n(cherry picked from commit 2e5bf28aa91d9cda8304bc19bbba770e83d7cb22)",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c",
          "modules/clusterer/clusterer.h||modules/clusterer/clusterer.h",
          "modules/clusterer/clusterer_mod.c||modules/clusterer/clusterer_mod.c",
          "modules/clusterer/sync.c||modules/clusterer/sync.c",
          "modules/clusterer/sync.h||modules/clusterer/sync.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: extern int node_timeout;",
          "55: extern int ping_timeout;",
          "56: extern int seed_fb_interval;",
          "59: {",
          "60:  cluster_info_t *cl;",
          "61:  struct local_cap *cap;",
          "",
          "[Removed Lines]",
          "58: void seed_fb_check_timer(utime_t ticks, void *param)",
          "",
          "[Added Lines]",
          "57: extern int sync_timeout;",
          "59: void sync_check_timer(utime_t ticks, void *param)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   for (cap = cl->capabilities; cap; cap = cap->next) {",
          "77:    lock_get(cl->lock);",
          "78:    if ((cap->flags & CAP_STATE_ENABLED) &&",
          "88:    }",
          "90:    lock_release(cl->lock);",
          "",
          "[Removed Lines]",
          "79:     !(cap->flags & CAP_STATE_OK) &&",
          "80:     !(cap->flags & CAP_SYNC_IN_PROGRESS) &&",
          "81:     (cl->current_node->flags & NODE_IS_SEED) &&",
          "82:     (TIME_DIFF(cap->sync_req_time, now) >= seed_fb_interval*1000000)) {",
          "83:     cap->flags |= CAP_STATE_OK;",
          "84:     cap->flags &= ~CAP_SYNC_PENDING;",
          "85:     LM_INFO(\"No donor found, falling back to synced state\\n\");",
          "87:     send_single_cap_update(cl, cap, 1);",
          "",
          "[Added Lines]",
          "81:     !(cap->flags & CAP_STATE_OK)) {",
          "82:     if ((cap->flags & CAP_SYNC_PENDING) &&",
          "83:      (cl->current_node->flags & NODE_IS_SEED) &&",
          "84:      (TIME_DIFF(cap->sync_req_time, now) >=",
          "85:      seed_fb_interval*1000000)) {",
          "87:      cap->flags |= CAP_STATE_OK;",
          "88:      cap->flags &= ~CAP_SYNC_PENDING;",
          "89:      LM_INFO(\"No donor found, falling back to synced state\\n\");",
          "91:      send_single_cap_update(cl, cap, 1);",
          "93:     } else if ((cap->flags & CAP_SYNC_IN_PROGRESS) &&",
          "94:      (get_ticks() - cap->last_sync_pkt >= sync_timeout)) {",
          "96:      handle_sync_end(cl, cap, 0, 1);",
          "97:      LM_INFO(\"Sync timeout for capability [%.*s], reverting to \"",
          "98:       \"not synced state\\n\", cap->reg.name.len, cap->reg.name.s);",
          "99:     }",
          "",
          "---------------"
        ],
        "modules/clusterer/clusterer.h||modules/clusterer/clusterer.h": [
          "File: modules/clusterer/clusterer.h -> modules/clusterer/clusterer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #define DEFAULT_NODE_TIMEOUT 60",
          "39: #define DEFAULT_SEED_FB_INTERVAL 5",
          "41: #define UPDATE_MAX_PATH_LEN 25",
          "42: #define SMALL_MSG 300",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #define DEFAULT_SYNC_TIMEOUT 15",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:  struct buf_bin_pkt *pkt_q_back;",
          "103:  struct buf_bin_pkt *pkt_q_cutpos;",
          "104:  struct timeval sync_req_time;",
          "105:  unsigned int flags;",
          "106:  struct local_cap *next;",
          "107: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:  int last_sync_pkt;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144: extern str cl_internal_cap;",
          "145: extern str cl_extra_cap;",
          "149: void bin_rcv_cl_packets(bin_packet_t *packet, int packet_type,",
          "150:          struct receive_info *ri, void *att);",
          "",
          "[Removed Lines]",
          "147: void seed_fb_check_timer(utime_t ticks, void *param);",
          "",
          "[Added Lines]",
          "149: void sync_check_timer(utime_t ticks, void *param);",
          "",
          "---------------"
        ],
        "modules/clusterer/clusterer_mod.c||modules/clusterer/clusterer_mod.c": [
          "File: modules/clusterer/clusterer_mod.c -> modules/clusterer/clusterer_mod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: int node_timeout = DEFAULT_NODE_TIMEOUT;",
          "45: int ping_timeout = DEFAULT_PING_TIMEOUT;",
          "46: int seed_fb_interval = DEFAULT_SEED_FB_INTERVAL;",
          "47: int current_id = -1;",
          "48: int db_mode = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: int sync_timeout = DEFAULT_SYNC_TIMEOUT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:  {\"node_timeout\",  INT_PARAM, &node_timeout  },",
          "144:  {\"ping_timeout\",  INT_PARAM, &ping_timeout  },",
          "145:  {\"seed_fallback_interval\", INT_PARAM, &seed_fb_interval },",
          "146:  {\"id_col\",    STR_PARAM, &id_col.s   },",
          "147:  {\"cluster_id_col\",  STR_PARAM, &cluster_id_col.s },",
          "148:  {\"node_id_col\",   STR_PARAM, &node_id_col.s  },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:  {\"sync_timeout\",        INT_PARAM,  &sync_timeout  },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455:   }",
          "456:  }",
          "460:   LM_CRIT(\"Unable to register clusterer seed check timer\\n\");",
          "461:   goto error;",
          "462:  }",
          "",
          "[Removed Lines]",
          "458:  if (register_utimer(\"cl-seed-fb-check\", seed_fb_check_timer,",
          "459:   NULL, SEED_FB_CHECK_INTERVAL*1000, TIMER_FLAG_DELAY_ON_DELAY) < 0) {",
          "",
          "[Added Lines]",
          "460:  if (register_utimer(\"cl-sync-check\", sync_check_timer,",
          "461:   NULL, SYNC_CHECK_INTERVAL*1000, TIMER_FLAG_DELAY_ON_DELAY) < 0) {",
          "",
          "---------------"
        ],
        "modules/clusterer/sync.c||modules/clusterer/sync.c": [
          "File: modules/clusterer/sync.c -> modules/clusterer/sync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "418:  }",
          "419: }",
          "421: void handle_sync_packet(bin_packet_t *packet, int packet_type,",
          "422:         cluster_info_t *cluster, int source_id)",
          "423: {",
          "424:  str cap_name;",
          "425:  struct local_cap *cap;",
          "428:  int data_version;",
          "430:  if (get_bin_pkg_version(packet) != BIN_SYNC_VERSION) {",
          "",
          "[Removed Lines]",
          "426:  struct buf_bin_pkt *buf_pkt, *buf_tmp, *cutpos_next;",
          "427:  bin_packet_t *bin_pkt_list = NULL, *bin_pkt, *bin_tmp;",
          "",
          "[Added Lines]",
          "421: void handle_sync_end(cluster_info_t *cluster, struct local_cap *cap,",
          "422:  int source_id, int is_timeout)",
          "423: {",
          "424:  struct buf_bin_pkt *buf_pkt, *buf_tmp, *cutpos_next;",
          "425:  bin_packet_t *bin_pkt_list = NULL, *bin_pkt, *bin_tmp;",
          "428:  while (cap->pkt_q_front) {",
          "430:   cap->pkt_q_cutpos = cap->pkt_q_back;",
          "432:   for (bin_tmp = NULL, buf_pkt = cap->pkt_q_front;",
          "433:    buf_pkt != cap->pkt_q_cutpos->next;",
          "434:    bin_tmp = bin_pkt, buf_pkt = buf_pkt->next) {",
          "436:    bin_pkt = pkg_malloc(sizeof *bin_pkt);",
          "437:    if (!bin_pkt) {",
          "438:     LM_ERR(\"No more pkg mem\\n\");",
          "439:     lock_release(cluster->lock);",
          "440:     return;",
          "441:    }",
          "443:    bin_init_buffer(bin_pkt, buf_pkt->buf.s, buf_pkt->buf.len);",
          "444:    bin_pkt->src_id = buf_pkt->src_id;",
          "446:    if (bin_tmp)",
          "447:     bin_tmp->next = bin_pkt;",
          "448:    else",
          "449:     bin_pkt_list = bin_pkt;",
          "450:   }",
          "452:   lock_release(cluster->lock);",
          "455:   cap->reg.packet_cb(bin_pkt_list);",
          "457:   lock_get(cluster->lock);",
          "460:   buf_pkt = cap->pkt_q_front;",
          "461:   cutpos_next = cap->pkt_q_cutpos->next;",
          "462:   bin_pkt = bin_pkt_list;",
          "463:   while (buf_pkt != cutpos_next) {",
          "464:    buf_tmp = buf_pkt;",
          "465:    bin_tmp = bin_pkt;",
          "466:    buf_pkt = buf_pkt->next;",
          "467:    bin_pkt = bin_pkt->next;",
          "470:    shm_free(buf_tmp->buf.s);",
          "471:    pkg_free(bin_tmp);",
          "472:    shm_free(buf_tmp);",
          "473:   }",
          "474:   cap->pkt_q_front = cutpos_next;",
          "475:   if (!cap->pkt_q_front)",
          "476:    cap->pkt_q_back = NULL;",
          "477:  }",
          "480:  cap->flags &= ~CAP_SYNC_IN_PROGRESS;",
          "482:  if (!is_timeout) {",
          "483:   cap->flags |= CAP_STATE_OK;",
          "486:   cap->reg.event_cb(SYNC_DONE, source_id);",
          "489:   send_single_cap_update(cluster, cap, 1);",
          "490:  }",
          "491: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:   lock_get(cluster->lock);",
          "456:   cap->flags |= CAP_SYNC_IN_PROGRESS;",
          "457:   lock_release(cluster->lock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "527:   cap->last_sync_pkt = get_ticks();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "469:   lock_get(cluster->lock);",
          "533:   lock_release(cluster->lock);",
          "534:  }",
          "",
          "[Removed Lines]",
          "472:   while (cap->pkt_q_front) {",
          "474:    cap->pkt_q_cutpos = cap->pkt_q_back;",
          "476:    for (bin_tmp = NULL, buf_pkt = cap->pkt_q_front;",
          "477:     buf_pkt != cap->pkt_q_cutpos->next;",
          "478:     bin_tmp = bin_pkt, buf_pkt = buf_pkt->next) {",
          "480:     bin_pkt = pkg_malloc(sizeof *bin_pkt);",
          "481:     if (!bin_pkt) {",
          "482:      LM_ERR(\"No more pkg mem\\n\");",
          "483:      lock_release(cluster->lock);",
          "484:      return;",
          "485:     }",
          "487:     bin_init_buffer(bin_pkt, buf_pkt->buf.s, buf_pkt->buf.len);",
          "488:     bin_pkt->src_id = buf_pkt->src_id;",
          "490:     if (bin_tmp)",
          "491:      bin_tmp->next = bin_pkt;",
          "492:     else",
          "493:      bin_pkt_list = bin_pkt;",
          "494:    }",
          "496:    lock_release(cluster->lock);",
          "499:    cap->reg.packet_cb(bin_pkt_list);",
          "501:    lock_get(cluster->lock);",
          "504:    buf_pkt = cap->pkt_q_front;",
          "505:    cutpos_next = cap->pkt_q_cutpos->next;",
          "506:    bin_pkt = bin_pkt_list;",
          "507:    while (buf_pkt != cutpos_next) {",
          "508:     buf_tmp = buf_pkt;",
          "509:     bin_tmp = bin_pkt;",
          "510:     buf_pkt = buf_pkt->next;",
          "511:     bin_pkt = bin_pkt->next;",
          "514:     shm_free(buf_tmp->buf.s);",
          "515:     pkg_free(bin_tmp);",
          "516:     shm_free(buf_tmp);",
          "517:    }",
          "518:    cap->pkt_q_front = cutpos_next;",
          "519:    if (!cap->pkt_q_front)",
          "520:     cap->pkt_q_back = NULL;",
          "521:   }",
          "524:   cap->flags &= ~CAP_SYNC_IN_PROGRESS;",
          "525:   cap->flags |= CAP_STATE_OK;",
          "528:   cap->reg.event_cb(SYNC_DONE, source_id);",
          "531:   send_single_cap_update(cluster, cap, 1);",
          "",
          "[Added Lines]",
          "542:   handle_sync_end(cluster, cap, source_id, 0);",
          "",
          "---------------"
        ],
        "modules/clusterer/sync.h||modules/clusterer/sync.h": [
          "File: modules/clusterer/sync.h -> modules/clusterer/sync.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: int buffer_bin_pkt(bin_packet_t *packet, struct local_cap *cap, int src_id);",
          "47: int send_sync_req(str *capability, int cluster_id, int source_id);",
          "48: int ipc_dispatch_sync_reply(cluster_info_t *cluster, int node_id, str *cap_name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: void handle_sync_end(cluster_info_t *cluster, struct local_cap *cap,",
          "50:  int source_id, int is_timeout);",
          "",
          "---------------"
        ]
      }
    }
  ]
}