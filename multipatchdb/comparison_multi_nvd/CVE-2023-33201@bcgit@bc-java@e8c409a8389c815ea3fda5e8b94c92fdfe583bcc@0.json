{
  "cve_id": "CVE-2023-33201",
  "cve_desc": "Bouncy Castle For Java before 1.74 is affected by an LDAP injection vulnerability. The vulnerability only affects applications that use an LDAP CertStore from Bouncy Castle to validate X.509 certificates. During the certificate validation process, Bouncy Castle inserts the certificate's Subject Name into an LDAP search filter without any escaping, which leads to an LDAP injection vulnerability.",
  "repo": "bcgit/bc-java",
  "patch_hash": "e8c409a8389c815ea3fda5e8b94c92fdfe583bcc",
  "patch_info": {
    "commit_hash": "e8c409a8389c815ea3fda5e8b94c92fdfe583bcc",
    "repo": "bcgit/bc-java",
    "commit_url": "https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc",
    "files": [
      "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java"
    ],
    "message": "added filter encode to search",
    "before_after_code_files": [
      "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java||prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java"
    ]
  },
  "patch_diff": {
    "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java||prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java": [
      "File: prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java -> prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:         return crlSet;",
      "377:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "378:     private static String[] FILTER_ESCAPE_TABLE = new String['\\\\' + 1];",
      "381:     static {",
      "386:         for (char c = 0; c < FILTER_ESCAPE_TABLE.length; c++) {",
      "387:             FILTER_ESCAPE_TABLE[c] = String.valueOf(c);",
      "388:         }",
      "391:         FILTER_ESCAPE_TABLE['*'] = \"\\\\2a\";",
      "392:         FILTER_ESCAPE_TABLE['('] = \"\\\\28\";",
      "393:         FILTER_ESCAPE_TABLE[')'] = \"\\\\29\";",
      "394:         FILTER_ESCAPE_TABLE['\\\\'] = \"\\\\5c\";",
      "395:         FILTER_ESCAPE_TABLE[0] = \"\\\\00\";",
      "397:     }",
      "404:     private String filterEncode(String value)",
      "405:     {",
      "406:         if (value == null)",
      "407:         {",
      "408:             return null;",
      "409:         }",
      "412:         StringBuilder encodedValue = new StringBuilder(value.length() * 2);",
      "414:         int length = value.length();",
      "416:         for (int i = 0; i < length; i++) {",
      "418:             char c = value.charAt(i);",
      "420:             if (c < FILTER_ESCAPE_TABLE.length) {",
      "421:                 encodedValue.append(FILTER_ESCAPE_TABLE[c]);",
      "422:             }",
      "423:             else {",
      "425:                 encodedValue.append(c);",
      "426:             }",
      "427:         }",
      "429:         return encodedValue.toString();",
      "430:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "388:     private Set search(String attributeName, String attributeValue,",
      "389:                        String[] attrs) throws CertStoreException",
      "390:     {",
      "392:         if (attributeName == null)",
      "393:         {",
      "394:             filter = null;",
      "",
      "[Removed Lines]",
      "391:         String filter = attributeName + \"=\" + attributeValue;",
      "",
      "[Added Lines]",
      "444:         String filter = attributeName + \"=\" + filterEncode(attributeValue);",
      "445:         System.out.println(filter);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b00b58873643abc7e834f07e345e0165bb3a1786",
      "candidate_info": {
        "commit_hash": "b00b58873643abc7e834f07e345e0165bb3a1786",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/b00b58873643abc7e834f07e345e0165bb3a1786",
        "files": [
          "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java",
          "prov/src/test/java/org/bouncycastle/jce/provider/test/X509LDAPCertStoreTest.java"
        ],
        "message": "initial work on updating LDAP cert store test",
        "before_after_code_files": [
          "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java||prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java",
          "prov/src/test/java/org/bouncycastle/jce/provider/test/X509LDAPCertStoreTest.java||prov/src/test/java/org/bouncycastle/jce/provider/test/X509LDAPCertStoreTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java||prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java"
          ],
          "candidate": [
            "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java||prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java"
          ]
        }
      },
      "candidate_diff": {
        "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java||prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java": [
          "File: prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java -> prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.bouncycastle.jce.provider;",
          "7: import javax.naming.Context;",
          "8: import javax.naming.NamingEnumeration;",
          "9: import javax.naming.NamingException;",
          "11: import javax.security.auth.x500.X500Principal;",
          "",
          "[Removed Lines]",
          "3: import org.bouncycastle.asn1.ASN1InputStream;",
          "4: import org.bouncycastle.asn1.x509.CertificatePair;",
          "5: import org.bouncycastle.jce.X509LDAPCertStoreParameters;",
          "10: import javax.naming.directory.*;",
          "12: import java.io.ByteArrayInputStream;",
          "13: import java.io.IOException;",
          "14: import java.security.InvalidAlgorithmParameterException;",
          "15: import java.security.cert.*;",
          "16: import java.util.*;",
          "",
          "[Added Lines]",
          "3: import java.io.ByteArrayInputStream;",
          "4: import java.io.IOException;",
          "5: import java.security.InvalidAlgorithmParameterException;",
          "6: import java.security.cert.CRL;",
          "7: import java.security.cert.CRLSelector;",
          "8: import java.security.cert.CertSelector;",
          "9: import java.security.cert.CertStoreException;",
          "10: import java.security.cert.CertStoreParameters;",
          "11: import java.security.cert.CertStoreSpi;",
          "12: import java.security.cert.Certificate;",
          "13: import java.security.cert.CertificateFactory;",
          "14: import java.security.cert.X509CRLSelector;",
          "15: import java.security.cert.X509CertSelector;",
          "16: import java.util.ArrayList;",
          "17: import java.util.Collection;",
          "18: import java.util.HashSet;",
          "19: import java.util.Iterator;",
          "20: import java.util.List;",
          "21: import java.util.Properties;",
          "22: import java.util.Set;",
          "27: import javax.naming.directory.Attribute;",
          "28: import javax.naming.directory.DirContext;",
          "29: import javax.naming.directory.InitialDirContext;",
          "30: import javax.naming.directory.SearchControls;",
          "31: import javax.naming.directory.SearchResult;",
          "34: import org.bouncycastle.asn1.ASN1InputStream;",
          "35: import org.bouncycastle.asn1.x509.CertificatePair;",
          "36: import org.bouncycastle.jce.X509LDAPCertStoreParameters;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: public class X509LDAPCertStoreSpi",
          "31:     extends CertStoreSpi",
          "32: {",
          "37:     {",
          "41:         {",
          "45:         }",
          "48:     }",
          "",
          "[Removed Lines]",
          "33:     private X509LDAPCertStoreParameters params;",
          "35:     public X509LDAPCertStoreSpi(CertStoreParameters params)",
          "36:         throws InvalidAlgorithmParameterException",
          "38:         super(params);",
          "40:         if (!(params instanceof X509LDAPCertStoreParameters))",
          "42:             throw new InvalidAlgorithmParameterException(",
          "43:                 X509LDAPCertStoreSpi.class.getName() + \": parameter must be a \" + X509LDAPCertStoreParameters.class.getName() + \" object\\n\"",
          "44:                     + params.toString());",
          "47:         this.params = (X509LDAPCertStoreParameters)params;",
          "",
          "[Added Lines]",
          "52:     private static String[] FILTER_ESCAPE_TABLE = new String['\\\\' + 1];",
          "54:     static",
          "59:         for (char c = 0; c < FILTER_ESCAPE_TABLE.length; c++)",
          "61:             FILTER_ESCAPE_TABLE[c] = String.valueOf(c);",
          "65:         FILTER_ESCAPE_TABLE['*'] = \"\\\\2a\";",
          "66:         FILTER_ESCAPE_TABLE['('] = \"\\\\28\";",
          "67:         FILTER_ESCAPE_TABLE[')'] = \"\\\\29\";",
          "68:         FILTER_ESCAPE_TABLE['\\\\'] = \"\\\\5c\";",
          "69:         FILTER_ESCAPE_TABLE[0] = \"\\\\00\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:     private static final String URL_CONTEXT_PREFIX = \"com.sun.jndi.url\";",
          "71:     {",
          "72:         Properties props = new Properties();",
          "73:         props.setProperty(Context.INITIAL_CONTEXT_FACTORY, LDAP_PROVIDER);",
          "",
          "[Removed Lines]",
          "70:     private DirContext connectLDAP() throws NamingException",
          "",
          "[Added Lines]",
          "92:     private X509LDAPCertStoreParameters params;",
          "94:     public X509LDAPCertStoreSpi(CertStoreParameters params)",
          "95:         throws InvalidAlgorithmParameterException",
          "96:     {",
          "97:         super(params);",
          "99:         if (!(params instanceof X509LDAPCertStoreParameters))",
          "100:         {",
          "101:             throw new InvalidAlgorithmParameterException(",
          "102:                 X509LDAPCertStoreSpi.class.getName() + \": parameter must be a \" + X509LDAPCertStoreParameters.class.getName() + \" object\\n\"",
          "103:                     + params.toString());",
          "104:         }",
          "106:         this.params = (X509LDAPCertStoreParameters)params;",
          "107:     }",
          "109:     private DirContext connectLDAP()",
          "110:         throws NamingException",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:         {",
          "118:             temp = temp.substring(0, temp.length() - 1);",
          "119:         }",
          "121:     }",
          "123:     public Collection engineGetCertificates(CertSelector selector)",
          "",
          "[Removed Lines]",
          "120:         return temp;",
          "",
          "[Added Lines]",
          "160:         return filterEncode(temp);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175:                 {",
          "177:                 }",
          "179:                 {",
          "180:                     ByteArrayInputStream bIn = new ByteArrayInputStream(",
          "181:                         (byte[])it2.next());",
          "",
          "[Removed Lines]",
          "178:                 for (Iterator it2 = bytesList.iterator(); it2.hasNext();)",
          "",
          "[Added Lines]",
          "218:                 for (Iterator it2 = bytesList.iterator(); it2.hasNext(); )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "326:         if (xselector.getIssuerNames() != null)",
          "327:         {",
          "328:             for (Iterator it = xselector.getIssuerNames().iterator(); it",
          "330:             {",
          "331:                 Object o = it.next();",
          "332:                 String attrValue = null;",
          "",
          "[Removed Lines]",
          "329:                 .hasNext();)",
          "",
          "[Added Lines]",
          "369:                 .hasNext(); )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "376:         return crlSet;",
          "377:     }",
          "",
          "[Removed Lines]",
          "378:     private static String[] FILTER_ESCAPE_TABLE = new String['\\\\' + 1];",
          "381:     static",
          "382:     {",
          "387:         for (char c = 0; c < FILTER_ESCAPE_TABLE.length; c++)",
          "388:         {",
          "389:             FILTER_ESCAPE_TABLE[c] = String.valueOf(c);",
          "390:         }",
          "393:         FILTER_ESCAPE_TABLE['*'] = \"\\\\2a\";",
          "394:         FILTER_ESCAPE_TABLE['('] = \"\\\\28\";",
          "395:         FILTER_ESCAPE_TABLE[')'] = \"\\\\29\";",
          "396:         FILTER_ESCAPE_TABLE['\\\\'] = \"\\\\5c\";",
          "397:         FILTER_ESCAPE_TABLE[0] = \"\\\\00\";",
          "399:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "445:     private Set search(String attributeName, String attributeValue,",
          "447:     {",
          "450:         if (attributeName == null)",
          "451:         {",
          "",
          "[Removed Lines]",
          "446:                        String[] attrs) throws CertStoreException",
          "448:         String filter = attributeName + \"=\" + filterEncode(attributeValue);",
          "",
          "[Added Lines]",
          "465:                        String[] attrs)",
          "466:         throws CertStoreException",
          "468:         String filter = attributeName + \"=\" + attributeValue;",
          "",
          "---------------"
        ],
        "prov/src/test/java/org/bouncycastle/jce/provider/test/X509LDAPCertStoreTest.java||prov/src/test/java/org/bouncycastle/jce/provider/test/X509LDAPCertStoreTest.java": [
          "File: prov/src/test/java/org/bouncycastle/jce/provider/test/X509LDAPCertStoreTest.java -> prov/src/test/java/org/bouncycastle/jce/provider/test/X509LDAPCertStoreTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.bouncycastle.jce.provider.test;",
          "14: import java.security.Security;",
          "16: import java.security.cert.CertStore;",
          "21: import java.security.cert.X509CertSelector;",
          "22: import java.security.cert.X509Certificate;",
          "28: {",
          "212:     {",
          "215:     }",
          "218:     {",
          "341:         {",
          "363:         }",
          "373:         {",
          "375:         }",
          "386:         {",
          "414:         }",
          "424:         {",
          "426:         }",
          "466:     }",
          "467: }",
          "",
          "[Removed Lines]",
          "3: import org.bouncycastle.jce.PrincipalUtil;",
          "4: import org.bouncycastle.jce.X509LDAPCertStoreParameters;",
          "5: import org.bouncycastle.jce.X509Principal;",
          "6: import org.bouncycastle.jce.provider.BouncyCastleProvider;",
          "7: import org.bouncycastle.util.encoders.Base64;",
          "8: import org.bouncycastle.util.test.SimpleTest;",
          "9: import org.bouncycastle.x509.X509CRLStoreSelector;",
          "10: import org.bouncycastle.x509.X509CertStoreSelector;",
          "11: import org.bouncycastle.x509.X509Store;",
          "13: import java.io.ByteArrayInputStream;",
          "15: import java.security.cert.CRLException;",
          "17: import java.security.cert.CertificateEncodingException;",
          "18: import java.security.cert.CertificateFactory;",
          "19: import java.security.cert.X509CRL;",
          "20: import java.security.cert.X509CRLSelector;",
          "23: import java.util.Collection;",
          "24: import java.util.Collections;",
          "25: import java.util.Iterator;",
          "27: public class X509LDAPCertStoreTest extends SimpleTest",
          "29:     private static final byte cert1[] = Base64",
          "30:         .decode(\"MIIDyTCCAzKgAwIBAgIEL64+8zANBgkqhkiG9w0BAQUFADBVMQswCQYDVQQGEwJE\"",
          "31:             + \"RTEcMBoGA1UEChQTRGV1dHNjaGUgVGVsZWtvbSBBRzEoMAwGBwKCBgEKBxQTATEw\"",
          "32:             + \"GAYDVQQDFBFUVEMgVGVzdCBDQSAxMTpQTjAeFw0wMzAzMjUxNDM1MzFaFw0wNjAz\"",
          "33:             + \"MjUxNDM1MzFaMGIxCzAJBgNVBAYTAkRFMRswGQYDVQQKDBJHRlQgU29sdXRpb25z\"",
          "34:             + \"IEdtYkgxEjAQBgNVBAsMCUhZUEFSQ0hJVjEWMBQGA1UEAwwNRGllZ2UsIFNpbW9u\"",
          "35:             + \"ZTEKMAgGA1UEBRMBMTCBoDANBgkqhkiG9w0BAQEFAAOBjgAwgYoCgYEAiEYsFbs4\"",
          "36:             + \"FesQpMjBkzJB92c0p8tJ02nbCNA5l17VVbbrv6/twnQHW4kgA+9lZlXfzI8iunT1\"",
          "37:             + \"KuiwVupWObHgFaGPkelIN/qIbuwbQzh7T+IUKdKETE12Lc+xk9YvQ6mJVgosmwpr\"",
          "38:             + \"nMMjezymh8DjPhe7MC7/H3AotrHVNM3mEJcCBEAAAIGjggGWMIIBkjAfBgNVHSME\"",
          "39:             + \"GDAWgBTQc8wTeltcAM3iTE63fk/wTA+IJTAdBgNVHQ4EFgQUq6ChBvXPiqhMHLS3\"",
          "40:             + \"kiKpSeGWDz4wDgYDVR0PAQH/BAQDAgQwMB8GA1UdEQQYMBaBFHNpbW9uZS5kaWVn\"",
          "41:             + \"ZUBnZnQuY29tMIHoBgNVHR8EgeAwgd0wgdqgaqBohjVsZGFwOi8vcGtzbGRhcC50\"",
          "42:             + \"dHRjLmRlOjM4OS9jPWRlLG89RGV1dHNjaGUgVGVsZWtvbSBBR4YvaHR0cDovL3d3\"",
          "43:             + \"dy50dHRjLmRlL3RlbGVzZWMvc2VydmxldC9kb3dubG9hZF9jcmyibKRqMGgxCzAJ\"",
          "44:             + \"BgNVBAYTAkRFMRwwGgYDVQQKFBNEZXV0c2NoZSBUZWxla29tIEFHMTswDAYHAoIG\"",
          "45:             + \"AQoHFBMBMTArBgNVBAMUJFRlbGVTZWMgRGlyZWN0b3J5IFNlcnZpY2UgU2lnRyAx\"",
          "46:             + \"MDpQTjA0BggrBgEFBQcBAQQoMCYwJAYIKwYBBQUHMAGGGGh0dHA6Ly93d3cudHR0\"",
          "47:             + \"Yy5kZS9vY3NwcjANBgkqhkiG9w0BAQUFAAOBgQBCPudAtrP9Bx7GRhHQgYS6kaoN\"",
          "48:             + \"vYb/yDss86pyn0uiFuwT+mT1popcAfxPo2yxL0jqqlsDNFBC2hJob5rjihsKPmqV\"",
          "49:             + \"rSaW0VJu/zBihsX7hLKOVMf5gvUYMS5ulq/bp8jOj8a+5SmxVY+WWZVFghWjISse\"",
          "50:             + \"T3WABdTS9S3zjnQiyg==\");",
          "52:     private static final byte[] directCRL = Base64",
          "53:         .decode(\"MIIGXTCCBckCAQEwCgYGKyQDAwECBQAwdDELMAkGA1UEBhMCREUxHDAaBgNVBAoU\"",
          "54:             + \"E0RldXRzY2hlIFRlbGVrb20gQUcxFzAVBgNVBAsUDlQtVGVsZVNlYyBUZXN0MS4w\"",
          "55:             + \"DAYHAoIGAQoHFBMBMTAeBgNVBAMUF1QtVGVsZVNlYyBUZXN0IERJUiA4OlBOFw0w\"",
          "56:             + \"NjA4MDQwODQ1MTRaFw0wNjA4MDQxNDQ1MTRaMIIElTAVAgQvrj/pFw0wMzA3MjIw\"",
          "57:             + \"NTQxMjhaMBUCBC+uP+oXDTAzMDcyMjA1NDEyOFowFQIEL64/5xcNMDQwNDA1MTMx\"",
          "58:             + \"ODE3WjAVAgQvrj/oFw0wNDA0MDUxMzE4MTdaMBUCBC+uP+UXDTAzMDExMzExMTgx\"",
          "59:             + \"MVowFQIEL64/5hcNMDMwMTEzMTExODExWjAVAgQvrj/jFw0wMzAxMTMxMTI2NTZa\"",
          "60:             + \"MBUCBC+uP+QXDTAzMDExMzExMjY1NlowFQIEL64/4hcNMDQwNzEzMDc1ODM4WjAV\"",
          "61:             + \"AgQvrj/eFw0wMzAyMTcwNjMzMjVaMBUCBC+uP98XDTAzMDIxNzA2MzMyNVowFQIE\"",
          "62:             + \"L64/0xcNMDMwMjE3MDYzMzI1WjAVAgQvrj/dFw0wMzAxMTMxMTI4MTRaMBUCBC+u\"",
          "63:             + \"P9cXDTAzMDExMzExMjcwN1owFQIEL64/2BcNMDMwMTEzMTEyNzA3WjAVAgQvrj/V\"",
          "64:             + \"Fw0wMzA0MzAxMjI3NTNaMBUCBC+uP9YXDTAzMDQzMDEyMjc1M1owFQIEL64/xhcN\"",
          "65:             + \"MDMwMjEyMTM0NTQwWjAVAgQvrj/FFw0wMzAyMTIxMzQ1NDBaMBUCBC+uP8IXDTAz\"",
          "66:             + \"MDIxMjEzMDkxNlowFQIEL64/wRcNMDMwMjEyMTMwODQwWjAVAgQvrj++Fw0wMzAy\"",
          "67:             + \"MTcwNjM3MjVaMBUCBC+uP70XDTAzMDIxNzA2MzcyNVowFQIEL64/sBcNMDMwMjEy\"",
          "68:             + \"MTMwODU5WjAVAgQvrj+vFw0wMzAyMTcwNjM3MjVaMBUCBC+uP5MXDTAzMDQxMDA1\"",
          "69:             + \"MjYyOFowFQIEL64/khcNMDMwNDEwMDUyNjI4WjAVAgQvrj8/Fw0wMzAyMjYxMTA0\"",
          "70:             + \"NDRaMBUCBC+uPz4XDTAzMDIyNjExMDQ0NFowFQIEL64+zRcNMDMwNTIwMDUyNzM2\"",
          "71:             + \"WjAVAgQvrj7MFw0wMzA1MjAwNTI3MzZaMBUCBC+uPjwXDTAzMDYxNzEwMzQxNlow\"",
          "72:             + \"FQIEL64+OxcNMDMwNjE3MTAzNDE2WjAVAgQvrj46Fw0wMzA2MTcxMDM0MTZaMBUC\"",
          "73:             + \"BC+uPjkXDTAzMDYxNzEzMDEwMFowFQIEL64+OBcNMDMwNjE3MTMwMTAwWjAVAgQv\"",
          "74:             + \"rj43Fw0wMzA2MTcxMzAxMDBaMBUCBC+uPjYXDTAzMDYxNzEzMDEwMFowFQIEL64+\"",
          "75:             + \"MxcNMDMwNjE3MTAzNzQ5WjAVAgQvrj4xFw0wMzA2MTcxMDQyNThaMBUCBC+uPjAX\"",
          "76:             + \"DTAzMDYxNzEwNDI1OFowFQIEL649qRcNMDMxMDIyMTEzMjI0WjAVAgQvrjyyFw0w\"",
          "77:             + \"NTAzMTEwNjQ0MjRaMBUCBC+uPKsXDTA0MDQwMjA3NTQ1M1owFQIEL6466BcNMDUw\"",
          "78:             + \"MTI3MTIwMzI0WjAVAgQvrjq+Fw0wNTAyMTYwNzU3MTZaMBUCBC+uOqcXDTA1MDMx\"",
          "79:             + \"MDA1NTkzNVowFQIEL646PBcNMDUwNTExMTA0OTQ2WjAVAgQvrG3VFw0wNTExMTEx\"",
          "80:             + \"MDAzMjFaMBUCBC+uLmgXDTA2MDEyMzEwMjU1NVowFQIEL64mxxcNMDYwODAxMDk0\"",
          "81:             + \"ODQ0WqCBijCBhzALBgNVHRQEBAICEQwwHwYDVR0jBBgwFoAUA1vI26YMj3njkfCU\"",
          "82:             + \"IXbo244kLjkwVwYDVR0SBFAwToZMbGRhcDovL3Brc2xkYXAudHR0Yy5kZS9vdT1U\"",
          "83:             + \"LVRlbGVTZWMgVGVzdCBESVIgODpQTixvPURldXRzY2hlIFRlbGVrb20gQUcsYz1k\"",
          "84:             + \"ZTAKBgYrJAMDAQIFAAOBgQArj4eMlbAwuA2aS5O4UUUHQMKKdK/dtZi60+LJMiMY\"",
          "85:             + \"ojrMIf4+ZCkgm1Ca0Cd5T15MJxVHhh167Ehn/Hd48pdnAP6Dfz/6LeqkIHGWMHR+\"",
          "86:             + \"z6TXpwWB+P4BdUec1ztz04LypsznrHcLRa91ixg9TZCb1MrOG+InNhleRs1ImXk8\"",
          "87:             + \"MQ==\");",
          "89:     private static final String ldapURL1 = \"ldap://pksldap.tttc.de:389\";",
          "91:     private static final X509LDAPCertStoreParameters params1 = new X509LDAPCertStoreParameters.Builder(",
          "92:         ldapURL1, \"o=Deutsche Telekom AG, c=DE\").",
          "93:         setAACertificateSubjectAttributeName(\"ou cn\").",
          "94:         setAttributeAuthorityRevocationListIssuerAttributeName(\"cn\").",
          "95:         setAttributeCertificateAttributeSubjectAttributeName(\"cn\").",
          "96:         setAttributeCertificateRevocationListIssuerAttributeName(\"cn\").",
          "97:         setAttributeDescriptorCertificateSubjectAttributeName(\"ou cn\").",
          "98:         setAuthorityRevocationListIssuerAttributeName(\"cn\").",
          "99:         setCACertificateSubjectAttributeName(\"ou cn\").",
          "100:         setCertificateRevocationListIssuerAttributeName(\"cn\").",
          "101:         setCrossCertificateSubjectAttributeName(\"cn\").",
          "102:         setDeltaRevocationListIssuerAttributeName(\"cn\").",
          "103:         setSearchForSerialNumberIn(\"cn\")",
          "104:         .build();",
          "106:     private static final String ldapURL2 = \"ldap://directory.d-trust.de:389\";",
          "108:     private static final X509LDAPCertStoreParameters params2 = new X509LDAPCertStoreParameters.Builder(",
          "109:         ldapURL2, \"o=D-Trust GmbH, c=DE\").",
          "110:         setAACertificateSubjectAttributeName(\"cn o\").",
          "111:         setAttributeAuthorityRevocationListIssuerAttributeName(\"cn\").",
          "112:         setAttributeCertificateAttributeSubjectAttributeName(\"cn\").",
          "113:         setAttributeCertificateRevocationListIssuerAttributeName(\"cn\").",
          "114:         setAttributeDescriptorCertificateSubjectAttributeName(\"cn o\").",
          "115:         setAuthorityRevocationListIssuerAttributeName(\"cn\").",
          "116:         setCACertificateSubjectAttributeName(\"cn o\").",
          "117:         setCertificateRevocationListIssuerAttributeName(\"cn\").",
          "118:         setCrossCertificateSubjectAttributeName(\"cn o\").",
          "119:         setDeltaRevocationListIssuerAttributeName(\"cn\").",
          "120:         setSearchForSerialNumberIn(\"uid\")",
          "121:         .build();",
          "123:     private static final byte[] cert2 = Base64",
          "124:         .decode(\"MIIEADCCAuigAwIBAgIDAJ/QMA0GCSqGSIb3DQEBBQUAMD8xCzAJBgNVBAYTAkRF\"",
          "125:             + \"MRUwEwYDVQQKDAxELVRydXN0IEdtYkgxGTAXBgNVBAMMEEQtVFJVU1QgRGVtbyBD\"",
          "126:             + \"QTEwHhcNMDYwMzAyMTYxNTU3WhcNMDgwMzEyMTYxNTU3WjB+MQswCQYDVQQGEwJE\"",
          "127:             + \"RTEUMBIGA1UECgwLTXVzdGVyIEdtYkgxFzAVBgNVBAMMDk1heCBNdXN0ZXJtYW5u\"",
          "128:             + \"MRMwEQYDVQQEDApNdXN0ZXJtYW5uMQwwCgYDVQQqDANNYXgxHTAbBgNVBAUTFERU\"",
          "129:             + \"UldFMTQxMjk5NDU1MTgwMTIxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\"",
          "130:             + \"AQEAjLDFeviSZDEZgLzTdptU4biPgNV7SvLqsNholfqkyQm2r5WSghGZSjhKYIne\"",
          "131:             + \"qKmZ08W59a51bGqDEsifYR7Tw9JC/AhH19fyK01+1ZAXHalgVthaRtLw31lcoTVJ\"",
          "132:             + \"R7j9fvrnW0sMPVP4m5gePb3P5/pYHVmN1MjdPIm38us5aJOytOO5Li2IwQIG0t4M\"",
          "133:             + \"bEC6/1horBR5TgRl7ACamrdaPHOvO1QVweOqYU7uVxLgDTK4mSV6heyrisFMfkbj\"",
          "134:             + \"7jT/c44kXM7dtgNcmESINudu6bnqaB1CxOFTJ/Jzv81R5lf7pBX2LOG1Bu94Yw2x\"",
          "135:             + \"cHUVROs2UWY8kQrNUozsBHzQ0QIDAKq5o4HFMIHCMBMGA1UdIwQMMAqACEITKrPL\"",
          "136:             + \"WuYiMDMGCCsGAQUFBwEBBCcwJTAjBggrBgEFBQcwAYYXaHR0cDovL29jc3AuZC10\"",
          "137:             + \"cnVzdC5uZXQwEAYDVR0gBAkwBzAFBgMqAwQwEQYDVR0OBAoECEvE8bXFHkFLMA4G\"",
          "138:             + \"A1UdDwEB/wQEAwIGQDAPBgUrJAgDCAQGDARUZXN0MB8GA1UdEQQYMBaBFG0ubXVz\"",
          "139:             + \"dGVybWFubkB0ZXN0LmRlMA8GBSskCAMPBAYMBFRlc3QwDQYJKoZIhvcNAQEFBQAD\"",
          "140:             + \"ggEBADD/X+UZZN30nCBDzJ7MtmgwvMBVDAU6HkPlzfyn9pxIKFrq3uR9wcY2pedM\"",
          "141:             + \"yQQk0NpTDCIhAYIjAHysMue0ViQnW5qq8uUCFn0+fsgMqqTQNRmE4NIqUrnYO40g\"",
          "142:             + \"WjcepCEApkTqGf3RFaDMf9zpRvj9qUx18De+V0GC22uD2vPKpqRcvS2dSw6pHBW2\"",
          "143:             + \"NwEU+RgNhoPXrHt332PEYdwO0zOL7eSLBD9AmkpP2uDjpMQ02Lu9kXG6OOfanwfS\"",
          "144:             + \"jHioCvDXyl5pwSHwrHNWQRb5dLF12Fg41LMapDwR7awAKE9h6qHBonvCMBPMvqrr\"",
          "145:             + \"NktqQcoQkluR9MItONJI5XHADtU=\");",
          "147:     private static final String ldapURL3 = \"ldap://dir.signtrust.de:389\";",
          "149:     private static final X509LDAPCertStoreParameters params3 = new X509LDAPCertStoreParameters.Builder(",
          "150:         ldapURL3, \"o=Deutsche Post AG, c=de\").",
          "151:         setAACertificateSubjectAttributeName(\"ou\").",
          "152:         setAttributeAuthorityRevocationListIssuerAttributeName(\"cn\").",
          "153:         setAttributeCertificateAttributeSubjectAttributeName(\"cn\").",
          "154:         setAttributeCertificateRevocationListIssuerAttributeName(\"o\").",
          "155:         setAttributeDescriptorCertificateSubjectAttributeName(\"ou\").",
          "156:         setAuthorityRevocationListIssuerAttributeName(\"o\").",
          "157:         setCACertificateSubjectAttributeName(\"ou\").",
          "158:         setCertificateRevocationListIssuerAttributeName(\"o\").",
          "159:         setCrossCertificateSubjectAttributeName(\"o\").",
          "160:         setDeltaRevocationListIssuerAttributeName(\"o\").",
          "161:         setSearchForSerialNumberIn(\"serialNumber\")",
          "162:         .build();",
          "164:     private static final byte[] cert3 = Base64",
          "165:         .decode(\"MIICwDCCAimgAwIBAgIBKzANBgkqhkiG9w0BAQUFADA6MRAwDgYDVQQDEwdQQ0Ex\"",
          "166:             + \"OlBOMRkwFwYDVQQKExBEZXV0c2NoZSBQb3N0IEFHMQswCQYDVQQGEwJERTAeFw0w\"",
          "167:             + \"MDA0MTkyMjAwMDBaFw0wMzA0MTkyMjAwMDBaMIGOMRAwDgYDVQQEFAdN5G5jaGVy\"",
          "168:             + \"MQ4wDAYDVQQqEwVLbGF1czEWMBQGA1UEAxQNS2xhdXMgTeRuY2hlcjEVMBMGA1UE\"",
          "169:             + \"CRMMV2llc2Vuc3RyLiAzMQ4wDAYDVQQREwU2MzMyOTESMBAGA1UEBxMJRWdlbHNi\"",
          "170:             + \"YWNoMQswCQYDVQQGEwJERTEKMAgGA1UEBRMBMTCBnzANBgkqhkiG9w0BAQEFAAOB\"",
          "171:             + \"jQAwgYkCgYEAn7z6Ba9wpv/mNBIaricY/d0KpxGpqGAXdqKlvqkk/seJEoBLvmL7\"",
          "172:             + \"wZz88RPELQqzDhc4oXYohS2dh3NHus9FpSPMq0JzKAcE3ArrVDxwtXtlcwN2v7iS\"",
          "173:             + \"TcHurgLOb9C/r8JdsMHNgwHMkkdp96cJk/sioyP5sLPYmgWxg1JH0vMCAwEAAaOB\"",
          "174:             + \"gDB+MAwGA1UdEwEB/wQCMAAwDwYDVR0PAQH/BAUDAwfAADBKBgNVHSMEQzBBoTyk\"",
          "175:             + \"OjEQMA4GA1UEAxMHUENBMTpQTjEZMBcGA1UEChMQRGV1dHNjaGUgUG9zdCBBRzEL\"",
          "176:             + \"MAkGA1UEBhMCREWCAQEwEQYDVR0OBAoECEAeJ6R3USjxMA0GCSqGSIb3DQEBBQUA\"",
          "177:             + \"A4GBADMRtdiQJF2fg7IcedTjnAW+QGl/wNSKy7A4oaBQeahcruo+hzH+ZU+DsiSu\"",
          "178:             + \"TJZaf2X1eUUEPmV+5zZlopGa3HvFfgmIYIXBw9ZO3Qb/HWGsPNgW0yg5eXEGwNEt\"",
          "179:             + \"vV85BTMGuMjiuDw841IuAZaMKqOKnVXHmd2pLJz7Wv0MLJhw\");",
          "181:     private static final byte[] caCert3 = Base64",
          "182:         .decode(\"MIICUjCCAb6gAwIBAgIDD2ptMAoGBiskAwMBAgUAMG8xCzAJBgNVBAYTAkRFMT0w\"",
          "183:             + \"OwYDVQQKFDRSZWd1bGllcnVuZ3NiZWjIb3JkZSBmyHVyIFRlbGVrb21tdW5pa2F0\"",
          "184:             + \"aW9uIHVuZCBQb3N0MSEwDAYHAoIGAQoHFBMBMTARBgNVBAMUCjRSLUNBIDE6UE4w\"",
          "185:             + \"IhgPMjAwMDA0MTIwODIyMDNaGA8yMDA0MDQxMjA4MjIwM1owWzELMAkGA1UEBhMC\"",
          "186:             + \"REUxGTAXBgNVBAoUEERldXRzY2hlIFBvc3QgQUcxMTAMBgcCggYBCgcUEwExMCEG\"",
          "187:             + \"A1UEAxQaQ0EgREVSIERFVVRTQ0hFTiBQT1NUIDU6UE4wgZ8wDQYJKoZIhvcNAQEB\"",
          "188:             + \"BQADgY0AMIGJAoGBAIH3c+gig1KkY5ceR6n/AMq+xz7hi3f0PMdpwIe2v2w6Hu5k\"",
          "189:             + \"jipe++NvU3r6wakIY2royHl3gKWrExOisBico9aQmn8lMJnWZ7SUbB+WpRn0mAWN\"",
          "190:             + \"ZM9YT+/U5hRCffeeuLWClzrbScaWnAeaaI0G+N/QKnSSjrV/l64jogyADWCTAgMB\"",
          "191:             + \"AAGjEjAQMA4GA1UdDwEB/wQEAwIBBjAKBgYrJAMDAQIFAAOBgQAaV5WClEneXk9s\"",
          "192:             + \"LO8zTQAsf4KvDaLd1BFcFeYM7kLLRHKeWQ0MAd0xkuAMme5NVwWNpNZP74B4HX7Q\"",
          "193:             + \"/Q0h/wo/9LTgQaxw52lLs4Ml0HUyJbSFjoQ+sqgjg2fGNGw7aGkVNY5dQTAy8oSv\"",
          "194:             + \"iG8mxTsQ7Fxaush3cIB0qDDwXar/hg==\");",
          "196:     private static final byte[] crossCert3 = Base64",
          "197:         .decode(\"MIICVDCCAcCgAwIBAgIDDIOsMAoGBiskAwMBAgUAMG8xCzAJBgNVBAYTAkRFMT0w\"",
          "198:             + \"OwYDVQQKFDRSZWd1bGllcnVuZ3NiZWjIb3JkZSBmyHVyIFRlbGVrb21tdW5pa2F0\"",
          "199:             + \"aW9uIHVuZCBQb3N0MSEwDAYHAoIGAQoHFBMBMTARBgNVBAMUCjRSLUNBIDE6UE4w\"",
          "200:             + \"IhgPMjAwMDAzMjIwOTQzNTBaGA8yMDA0MDEyMTE2MDQ1M1owbzELMAkGA1UEBhMC\"",
          "201:             + \"REUxPTA7BgNVBAoUNFJlZ3VsaWVydW5nc2JlaMhvcmRlIGbIdXIgVGVsZWtvbW11\"",
          "202:             + \"bmlrYXRpb24gdW5kIFBvc3QxITAMBgcCggYBCgcUEwExMBEGA1UEAxQKNVItQ0Eg\"",
          "203:             + \"MTpQTjCBoTANBgkqhkiG9w0BAQEFAAOBjwAwgYsCgYEAih5BUycfBpqKhU8RDsaS\"",
          "204:             + \"vV5AtzWeXQRColL9CH3t0DKnhjKAlJ8iccFtJNv+d3bh8bb9sh0maRSo647xP7hs\"",
          "205:             + \"HTjKgTE4zM5BYNfXvST79OtcMgAzrnDiGjQIIWv8xbfV1MqxxdtZJygrwzRMb9jG\"",
          "206:             + \"CAGoJEymoyzAMNG7tSdBWnUCBQDAAAABMAoGBiskAwMBAgUAA4GBAIBWrl6aEy4d\"",
          "207:             + \"2d6U/924YK8Tv9oChmaKVhklkiTzcKv1N8dhLnLTibq4/stop03CY3rKU4X5aTfu\"",
          "208:             + \"0J77FIV1Poy9jLT5Tm1NBpi71m4uO3AUoSeyhJXGQGsYFjAc3URqkznbTL/nr9re\"",
          "209:             + \"IoBhf6u9cX+idnN6Uy1q+j/LOrcy3zgj\");",
          "211:     public void performTest() throws Exception",
          "213:         certStoretest();",
          "214:         x509StoreTest();",
          "217:     private void certStoretest() throws Exception",
          "219:         CertStore cs = CertStore.getInstance(\"X509LDAP\", params1, \"BC\");",
          "220:         X509CertSelector sl = new X509CertSelector();",
          "221:         CertificateFactory cf = CertificateFactory.getInstance(\"X.509\", \"BC\");",
          "222:         X509Certificate xcert = (X509Certificate)cf",
          "223:             .generateCertificate(new ByteArrayInputStream(cert1));",
          "224:         sl.setCertificate(xcert);",
          "225:         Collection coll = cs.getCertificates(sl);",
          "226:         if (coll.isEmpty() || !coll.iterator().next().equals(xcert))",
          "227:         {",
          "228:             fail(\"certificate could not be picked from LDAP directory.\");",
          "229:         }",
          "233:         sl.setCertificate(null);",
          "234:         sl.setSubject(getSubject(xcert).getEncoded());",
          "235:         coll = cs.getCertificates(sl);",
          "236:         if (coll.isEmpty() || !coll.iterator().next().equals(xcert))",
          "237:         {",
          "238:             fail(\"certificate could not be picked from LDAP directory.\");",
          "239:         }",
          "240:         X509CRLSelector sl2 = new X509CRLSelector();",
          "241:         X509CRL crl = (X509CRL)cf.generateCRL(new",
          "242:             ByteArrayInputStream(directCRL));",
          "243:         sl2.addIssuerName(getCRLIssuer(crl).getEncoded());",
          "244:         coll = cs.getCRLs(sl2);",
          "245:         if (!coll.iterator().hasNext())",
          "246:         {",
          "247:             fail(\"CRL could not be picked from LDAP directory.\");",
          "248:         }",
          "251:         cs = CertStore.getInstance(\"X509LDAP\", params2, \"BC\");",
          "252:         sl = new X509CertSelector();",
          "253:         xcert = (X509Certificate)cf",
          "254:             .generateCertificate(new ByteArrayInputStream(cert2));",
          "255:         sl.setCertificate(xcert);",
          "256:         coll = cs.getCertificates(sl);",
          "257:         if (coll.isEmpty() || !coll.iterator().next().equals(xcert))",
          "258:         {",
          "259:             fail(\"Certificate could not be picked from LDAP directory.\");",
          "260:         }",
          "264:         cs = CertStore.getInstance(\"X509LDAP\", params3, \"BC\");",
          "265:         sl = new X509CertSelector();",
          "266:         xcert = (X509Certificate)cf",
          "267:             .generateCertificate(new ByteArrayInputStream(cert3));",
          "268:         sl.setCertificate(xcert);",
          "269:         coll = cs.getCertificates(sl);",
          "270:         if (coll.isEmpty() || !coll.iterator().next().equals(xcert))",
          "271:         {",
          "272:             fail(\"Certificate could not be picked from LDAP directory.\");",
          "273:         }",
          "277:         xcert = (X509Certificate)cf",
          "278:             .generateCertificate(new ByteArrayInputStream(caCert3));",
          "279:         sl = new X509CertSelector();",
          "280:         sl.setSubject(getSubject(xcert).getEncoded());",
          "281:         coll = cs.getCertificates(sl);",
          "282:         boolean found = false;",
          "283:         if (coll.isEmpty())",
          "284:         {",
          "285:             fail(\"Certificate could not be picked from LDAP directory.\");",
          "286:         }",
          "288:         for (Iterator it = coll.iterator(); it.hasNext();)",
          "289:         {",
          "290:             if (it.next().equals(xcert))",
          "291:             {",
          "292:                 found = true;",
          "293:                 break;",
          "294:             }",
          "295:         }",
          "296:         if (!found)",
          "297:         {",
          "298:             fail(\"Certificate could not be picked from LDAP directory.\");",
          "299:         }",
          "303:         sl = new X509CertSelector();",
          "304:         xcert = (X509Certificate)cf",
          "305:             .generateCertificate(new ByteArrayInputStream(crossCert3));",
          "306:         sl = new X509CertSelector();",
          "307:         sl.setSubject(getSubject(xcert).getEncoded());",
          "308:         coll = cs.getCertificates(sl);",
          "309:         if (coll.isEmpty())",
          "310:         {",
          "311:             fail(\"Cross certificate pair could not be picked from LDAP directory.\");",
          "312:         }",
          "313:         found = false;",
          "314:         for (Iterator it = coll.iterator(); it.hasNext();)",
          "315:         {",
          "316:             if (it.next().equals(xcert))",
          "317:             {",
          "318:                 found = true;",
          "319:                 break;",
          "320:             }",
          "321:         }",
          "322:         if (!found)",
          "323:         {",
          "324:             fail(\"Cross certificate pair could not be picked from LDAP directory.\");",
          "325:         }",
          "328:     }",
          "330:     private void x509StoreTest() throws Exception",
          "331:     {",
          "332:         X509Store cs = X509Store.getInstance(\"CERTIFICATE/LDAP\", params1, \"BC\");",
          "334:         X509CertStoreSelector sl = new X509CertStoreSelector();",
          "335:         CertificateFactory cf = CertificateFactory.getInstance(\"X.509\", \"BC\");",
          "336:         X509Certificate xcert = (X509Certificate)cf",
          "337:             .generateCertificate(new ByteArrayInputStream(cert1));",
          "338:         sl.setCertificate(xcert);",
          "339:         Collection coll = cs.getMatches(sl);",
          "340:         if (coll.isEmpty() || !coll.iterator().next().equals(xcert))",
          "342:             fail(\"certificate could not be picked from LDAP directory.\");",
          "343:         }",
          "347:         sl.setCertificate(null);",
          "348:         sl.setSubject(getSubject(xcert).getEncoded());",
          "349:         coll = cs.getMatches(sl);",
          "350:         if (coll.isEmpty() || !coll.iterator().next().equals(xcert))",
          "351:         {",
          "352:             fail(\"certificate could not be picked from LDAP directory.\");",
          "353:         }",
          "354:         X509CRLStoreSelector sl2 = new X509CRLStoreSelector();",
          "355:         X509CRL crl = (X509CRL)cf.generateCRL(new",
          "356:             ByteArrayInputStream(directCRL));",
          "357:         sl2.setIssuers(Collections.singleton(crl.getIssuerX500Principal()));",
          "358:         cs = X509Store.getInstance(\"CRL/LDAP\", params1, \"BC\");",
          "359:         coll = cs.getMatches(sl2);",
          "360:         if (!coll.iterator().hasNext())",
          "361:         {",
          "362:             fail(\"CRL could not be picked from LDAP directory.\");",
          "366:         cs = X509Store.getInstance(\"CERTIFICATE/LDAP\", params2, \"BC\");",
          "367:         sl = new X509CertStoreSelector();",
          "368:         xcert = (X509Certificate)cf",
          "369:             .generateCertificate(new ByteArrayInputStream(cert2));",
          "370:         sl.setCertificate(xcert);",
          "371:         coll = cs.getMatches(sl);",
          "372:         if (coll.isEmpty() || !coll.iterator().next().equals(xcert))",
          "374:             fail(\"Certificate could not be picked from LDAP directory.\");",
          "379:         cs = X509Store.getInstance(\"CERTIFICATE/LDAP\", params3, \"BC\");",
          "380:         sl = new X509CertStoreSelector();",
          "381:         xcert = (X509Certificate)cf",
          "382:             .generateCertificate(new ByteArrayInputStream(cert3));",
          "383:         sl.setCertificate(xcert);",
          "384:         coll = cs.getMatches(sl);",
          "385:         if (coll.isEmpty() || !coll.iterator().next().equals(xcert))",
          "387:             fail(\"Certificate could not be picked from LDAP directory.\");",
          "388:         }",
          "392:         xcert = (X509Certificate)cf",
          "393:             .generateCertificate(new ByteArrayInputStream(caCert3));",
          "394:         sl = new X509CertStoreSelector();",
          "395:         sl.setSubject(getSubject(xcert).getEncoded());",
          "396:         coll = cs.getMatches(sl);",
          "397:         boolean found = false;",
          "398:         if (coll.isEmpty())",
          "399:         {",
          "400:             fail(\"Certificate could not be picked from LDAP directory.\");",
          "401:         }",
          "403:         for (Iterator it = coll.iterator(); it.hasNext();)",
          "404:         {",
          "405:             if (it.next().equals(xcert))",
          "406:             {",
          "407:                 found = true;",
          "408:                 break;",
          "409:             }",
          "410:         }",
          "411:         if (!found)",
          "412:         {",
          "413:             fail(\"Certificate could not be picked from LDAP directory.\");",
          "418:         sl = new X509CertStoreSelector();",
          "419:         xcert = (X509Certificate)cf",
          "420:             .generateCertificate(new ByteArrayInputStream(crossCert3));",
          "421:         sl.setSubject(getSubject(xcert).getEncoded());",
          "422:         coll = cs.getMatches(sl);",
          "423:         if (coll.isEmpty())",
          "425:             fail(\"Cross certificate pair could not be picked from LDAP directory.\");",
          "427:         found = false;",
          "428:         for (Iterator it = coll.iterator(); it.hasNext();)",
          "429:         {",
          "430:             if (it.next().equals(xcert))",
          "431:             {",
          "432:                 found = true;",
          "433:                 break;",
          "434:             }",
          "435:         }",
          "436:         if (!found)",
          "437:         {",
          "438:             fail(\"Cross certificate pair could not be picked from LDAP directory.\");",
          "439:         }",
          "443:     }",
          "445:     private X509Principal getSubject(X509Certificate cert)",
          "446:         throws CertificateEncodingException",
          "447:     {",
          "448:         return PrincipalUtil.getSubjectX509Principal(cert);",
          "449:     }",
          "451:     private X509Principal getCRLIssuer(X509CRL crl)",
          "452:         throws CRLException",
          "453:     {",
          "454:         return PrincipalUtil.getIssuerX509Principal(crl);",
          "455:     }",
          "457:     public String getName()",
          "458:     {",
          "459:         return \"LDAPCertStoreTest\";",
          "460:     }",
          "462:     public static void main(String[] args)",
          "463:     {",
          "464:         Security.addProvider(new BouncyCastleProvider());",
          "465:         runTest(new X509LDAPCertStoreTest());",
          "",
          "[Added Lines]",
          "3: import java.io.File;",
          "4: import java.io.FileInputStream;",
          "5: import java.net.InetAddress;",
          "6: import java.security.KeyPairGenerator;",
          "7: import java.security.KeyStore;",
          "9: import java.security.cert.CertPathBuilder;",
          "11: import java.security.cert.PKIXBuilderParameters;",
          "12: import java.security.cert.PKIXCertPathBuilderResult;",
          "15: import java.util.HashMap;",
          "17: import javax.net.ServerSocketFactory;",
          "18: import javax.net.SocketFactory;",
          "19: import javax.net.ssl.SSLSocketFactory;",
          "21: import com.unboundid.ldap.listener.InMemoryDirectoryServer;",
          "22: import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;",
          "23: import com.unboundid.ldap.listener.InMemoryListenerConfig;",
          "24: import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;",
          "25: import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;",
          "26: import com.unboundid.ldap.sdk.LDAPException;",
          "27: import com.unboundid.ldap.sdk.LDAPResult;",
          "28: import com.unboundid.ldap.sdk.ResultCode;",
          "29: import com.unboundid.ldap.sdk.schema.ObjectClassDefinition;",
          "30: import com.unboundid.ldap.sdk.schema.ObjectClassType;",
          "31: import com.unboundid.ldif.LDIFException;",
          "32: import junit.framework.TestCase;",
          "33: import org.bouncycastle.asn1.x500.X500Name;",
          "34: import org.bouncycastle.jce.X509LDAPCertStoreParameters;",
          "35: import org.bouncycastle.jce.exception.ExtCertPathBuilderException;",
          "36: import org.bouncycastle.jce.provider.BouncyCastleProvider;",
          "38: public class X509LDAPCertStoreTest",
          "39:     extends TestCase",
          "41:     public void setUp()",
          "43:         if (Security.getProvider(\"BC\") == null)",
          "44:         {",
          "45:             Security.addProvider(new BouncyCastleProvider());",
          "46:         }",
          "49:     public void testLdapFilter()",
          "50:         throws Exception",
          "52:         BcFilterCheck filterCheck = new BcFilterCheck();",
          "55:         InMemoryDirectoryServer ds = mockLdapServer(filterCheck);",
          "56:         ds.startListening();",
          "58:         KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"EC\", \"BC\");",
          "60:         kpg.initialize(256);",
          "63:         String subject = \"CN=chars[*()\\\\\\0]\";",
          "64:         X509Certificate cert = TestUtils.createSelfSignedCert(new X500Name(subject), \"SHA256withECDSA\", kpg.generateKeyPair());",
          "88:         testMemberOf(ds);",
          "91:         verifyCert(cert);",
          "94:         ds.shutDown(true);",
          "96:         assertTrue(filterCheck.isUsed());",
          "97:     }",
          "99:     private static InMemoryDirectoryServer mockLdapServer(BcFilterCheck filterCheck)",
          "100:         throws Exception",
          "101:     {",
          "102:         InMemoryDirectoryServerConfig serverConfig = new InMemoryDirectoryServerConfig(\"dc=test\");",
          "103:         serverConfig.setListenerConfigs(new InMemoryListenerConfig(",
          "104:             \"listen\",",
          "105:             InetAddress.getByName(\"0.0.0.0\"),",
          "106:             1389,",
          "107:             ServerSocketFactory.getDefault(),",
          "108:             SocketFactory.getDefault(),",
          "109:             (SSLSocketFactory)SSLSocketFactory.getDefault()));",
          "111:         serverConfig.addInMemoryOperationInterceptor(filterCheck);",
          "113:         return new InMemoryDirectoryServer(serverConfig);",
          "114:     }",
          "116:     public static void testMemberOf(InMemoryDirectoryServer ds)",
          "117:         throws Exception",
          "118:     {",
          "120:         addEntry(ds, \"dn: dc=test\", \"objectClass: top\", \"objectClass: domain\", \"dc: test\");",
          "122:         ObjectClassDefinition oc = new ObjectClassDefinition(\"10.19.19.78\", new String[]{\"user\"}, \"\", false, new String[]{\"TOP\"},",
          "123:             ObjectClassType.STRUCTURAL, new String[]{\"memberOf\"},",
          "124:             new String[]{}, new HashMap());",
          "125:         addEntry(ds, \"dn: cn=schema2,dc=test\", \"objectClass: top\", \"objectClass: ldapSubEntry\", \"objectClass: subschema\", \"cn: schema2\",",
          "126:             \"objectClasses:  \" + oc.toString());",
          "128:         addEntry(ds, \"dn: dc=people,dc=test\", \"objectClass: top\", \"objectClass: domain\", \"dc: people\");",
          "129:         addEntry(ds, \"dn: dc=groups,dc=test\", \"objectClass: top\", \"objectClass: domain\", \"dc: groups\");",
          "130:         addEntry(ds, \"dn: cn=test-group,dc=groups,dc=test\", \"objectClass: groupOfUniqueNames\", \"cn: test group\");",
          "131:         addEntry(ds, \"dn: cn=Testy Tester,dc=people,dc=test\", \"objectClass: Person\", \"objectClass: organizationalPerson\", \"sn: Tester\", \"cn: Testy Tester\");",
          "132:         addEntry(ds, \"dn: cn=chars[*()\\\\\\0],dc=people,dc=test\", \"objectClass: Person\", \"objectClass: organizationalPerson\", \"sn: chars\", \"cn: chars[*()\\\\\\0]\");",
          "133:     }",
          "135:     public static void addEntry(InMemoryDirectoryServer ds, String... args)",
          "136:         throws LDIFException, LDAPException",
          "137:     {",
          "138:         LDAPResult result = ds.add(args);",
          "139:         assertEquals(0, result.getResultCode().intValue());",
          "140:     }",
          "142:     static void verifyCert(X509Certificate cert)",
          "143:         throws Exception",
          "144:     {",
          "146:         X509CertSelector selector = new X509CertSelector();",
          "147:         selector.setCertificate(cert);",
          "150:         String filename = System.getProperty(\"java.home\") + \"/lib/security/cacerts\".replace('/', File.separatorChar);",
          "151:         KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());",
          "152:         keystore.load(new FileInputStream(filename), \"changeit\".toCharArray());",
          "154:         PKIXBuilderParameters pkixParams = new PKIXBuilderParameters(keystore, selector);",
          "157:         X509LDAPCertStoreParameters CertStoreParameters = new X509LDAPCertStoreParameters.Builder(\"ldap://127.0.0.1:1389\", \"CN=certificates\").build();",
          "158:         CertStore certStore = CertStore.getInstance(\"LDAP\", CertStoreParameters, \"BC\");",
          "159:         pkixParams.addCertStore(certStore);",
          "162:         try",
          "164:             CertPathBuilder builder = CertPathBuilder.getInstance(\"PKIX\", \"BC\");",
          "165:             PKIXCertPathBuilderResult result = (PKIXCertPathBuilderResult)builder.build(pkixParams);",
          "168:         catch (ExtCertPathBuilderException exception)",
          "172:     }",
          "175:         check we get a suitably escaped subject.",
          "177:     static class BcFilterCheck",
          "178:         extends InMemoryOperationInterceptor",
          "179:     {",
          "180:         private volatile boolean used = false;",
          "182:         public void processSearchResult(InMemoryInterceptedSearchResult result)",
          "184:             String filter = result.getRequest().getFilter().toString();",
          "186:             assertEquals(\"(&(cn=*chars[\\\\2a\\\\28\\\\29\\\\00]*)(userCertificate=*))\", filter);",
          "188:             used = true;",
          "190:             result.setResult(new LDAPResult(0, ResultCode.SUCCESS));",
          "193:         boolean isUsed()",
          "195:             return used;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d99e28a9cc2761eecd35460e8ae1b4a93d35d3d",
      "candidate_info": {
        "commit_hash": "3d99e28a9cc2761eecd35460e8ae1b4a93d35d3d",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/3d99e28a9cc2761eecd35460e8ae1b4a93d35d3d",
        "files": [
          "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java"
        ],
        "message": "Fix style errors",
        "before_after_code_files": [
          "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java||prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java||prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java"
          ],
          "candidate": [
            "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java||prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java"
          ]
        }
      },
      "candidate_diff": {
        "prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java||prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java": [
          "File: prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java -> prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:     private static String[] FILTER_ESCAPE_TABLE = new String['\\\\' + 1];",
          "387:             FILTER_ESCAPE_TABLE[c] = String.valueOf(c);",
          "388:         }",
          "",
          "[Removed Lines]",
          "381:     static {",
          "386:         for (char c = 0; c < FILTER_ESCAPE_TABLE.length; c++) {",
          "",
          "[Added Lines]",
          "381:     static",
          "382:     {",
          "387:         for (char c = 0; c < FILTER_ESCAPE_TABLE.length; c++)",
          "388:         {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:         int length = value.length();",
          "418:             char c = value.charAt(i);",
          "421:                 encodedValue.append(FILTER_ESCAPE_TABLE[c]);",
          "422:             }",
          "425:                 encodedValue.append(c);",
          "426:             }",
          "",
          "[Removed Lines]",
          "416:         for (int i = 0; i < length; i++) {",
          "420:             if (c < FILTER_ESCAPE_TABLE.length) {",
          "423:             else {",
          "",
          "[Added Lines]",
          "418:         for (int i = 0; i < length; i++)",
          "419:         {",
          "422:             if (c < FILTER_ESCAPE_TABLE.length)",
          "423:             {",
          "426:             else",
          "427:             {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "442:                        String[] attrs) throws CertStoreException",
          "443:     {",
          "444:         String filter = attributeName + \"=\" + filterEncode(attributeValue);",
          "446:         if (attributeName == null)",
          "447:         {",
          "448:             filter = null;",
          "",
          "[Removed Lines]",
          "445:         System.out.println(filter);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}