{
  "cve_id": "CVE-2022-24828",
  "cve_desc": "Composer is a dependency manager for the PHP programming language. Integrators using Composer code to call `VcsDriver::getFileContent` can have a code injection vulnerability if the user can control the `$file` or `$identifier` argument. This leads to a vulnerability on packagist.org for example where the composer.json's `readme` field can be used as a vector for injecting parameters into hg/Mercurial via the `$file` argument, or git via the `$identifier` argument if you allow arbitrary data there (Packagist does not, but maybe other integrators do). Composer itself should not be affected by the vulnerability as it does not call `getFileContent` with arbitrary data into `$file`/`$identifier`. To the best of our knowledge this was not abused, and the vulnerability has been patched on packagist.org and Private Packagist within a day of the vulnerability report.",
  "repo": "composer/composer",
  "patch_hash": "2c40c53637c5c7e43fff7c09d3d324d632734709",
  "patch_info": {
    "commit_hash": "2c40c53637c5c7e43fff7c09d3d324d632734709",
    "repo": "composer/composer",
    "commit_url": "https://github.com/composer/composer/commit/2c40c53637c5c7e43fff7c09d3d324d632734709",
    "files": [
      "src/Composer/Repository/Vcs/GitDriver.php",
      "src/Composer/Repository/Vcs/HgDriver.php",
      "tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
      "tests/Composer/Test/Repository/Vcs/HgDriverTest.php"
    ],
    "message": "Merge pull request from GHSA-x7cr-6qr6-2hh6\n\n* GitDriver: filter branch names starting with a - character\n\n* GitDriver: getFileContent prevent identifiers starting with a -\n\n* HgDriver: prevent invalid identifiers and prevent file from running commands\n\n* HgDriver: filter branches starting with a - character",
    "before_after_code_files": [
      "src/Composer/Repository/Vcs/GitDriver.php||src/Composer/Repository/Vcs/GitDriver.php",
      "src/Composer/Repository/Vcs/HgDriver.php||src/Composer/Repository/Vcs/HgDriver.php",
      "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
      "tests/Composer/Test/Repository/Vcs/HgDriverTest.php||tests/Composer/Test/Repository/Vcs/HgDriverTest.php"
    ]
  },
  "patch_diff": {
    "src/Composer/Repository/Vcs/GitDriver.php||src/Composer/Repository/Vcs/GitDriver.php": [
      "File: src/Composer/Repository/Vcs/GitDriver.php -> src/Composer/Repository/Vcs/GitDriver.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:     public function getFileContent($file, $identifier)",
      "140:     {",
      "141:         $resource = sprintf('%s:%s', ProcessExecutor::escape($identifier), ProcessExecutor::escape($file));",
      "142:         $this->process->execute(sprintf('git show %s', $resource), $content, $this->repoDir);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "141:         if (isset($identifier[0]) && $identifier[0] === '-') {",
      "142:             throw new \\RuntimeException('Invalid git identifier detected. Identifier must not start with a -, given: ' . $identifier);",
      "143:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "191:             $this->process->execute('git branch --no-color --no-abbrev -v', $output, $this->repoDir);",
      "192:             foreach ($this->process->splitLines($output) as $branch) {",
      "193:                 if ($branch && !Preg::isMatch('{^ *[^/]+/HEAD }', $branch)) {",
      "195:                         $branches[$match[1]] = $match[2];",
      "196:                     }",
      "197:                 }",
      "",
      "[Removed Lines]",
      "194:                     if (Preg::isMatch('{^(?:\\* )? *(\\S+) *([a-f0-9]+)(?: .*)?$}', $branch, $match)) {",
      "",
      "[Added Lines]",
      "198:                     if (Preg::isMatch('{^(?:\\* )? *(\\S+) *([a-f0-9]+)(?: .*)?$}', $branch, $match) && $match[1][0] !== '-') {",
      "",
      "---------------"
    ],
    "src/Composer/Repository/Vcs/HgDriver.php||src/Composer/Repository/Vcs/HgDriver.php": [
      "File: src/Composer/Repository/Vcs/HgDriver.php -> src/Composer/Repository/Vcs/HgDriver.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     public function getFileContent($file, $identifier)",
      "128:     {",
      "130:         $this->process->execute($resource, $content, $this->repoDir);",
      "132:         if (!trim($content)) {",
      "",
      "[Removed Lines]",
      "129:         $resource = sprintf('hg cat -r %s %s', ProcessExecutor::escape($identifier), ProcessExecutor::escape($file));",
      "",
      "[Added Lines]",
      "129:         if (isset($identifier[0]) && $identifier[0] === '-') {",
      "130:             throw new \\RuntimeException('Invalid hg identifier detected. Identifier must not start with a -, given: ' . $identifier);",
      "131:         }",
      "133:         $resource = sprintf('hg cat -r %s -- %s', ProcessExecutor::escape($identifier), ProcessExecutor::escape($file));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "187:             $this->process->execute('hg branches', $output, $this->repoDir);",
      "188:             foreach ($this->process->splitLines($output) as $branch) {",
      "190:                     $branches[$match[1]] = $match[2];",
      "191:                 }",
      "192:             }",
      "194:             $this->process->execute('hg bookmarks', $output, $this->repoDir);",
      "195:             foreach ($this->process->splitLines($output) as $branch) {",
      "197:                     $bookmarks[$match[1]] = $match[2];",
      "198:                 }",
      "199:             }",
      "",
      "[Removed Lines]",
      "189:                 if ($branch && Preg::isMatch('(^([^\\s]+)\\s+\\d+:([a-f0-9]+))', $branch, $match)) {",
      "196:                 if ($branch && Preg::isMatch('(^(?:[\\s*]*)([^\\s]+)\\s+\\d+:(.*)$)', $branch, $match)) {",
      "",
      "[Added Lines]",
      "193:                 if ($branch && Preg::isMatch('(^([^\\s]+)\\s+\\d+:([a-f0-9]+))', $branch, $match) && $match[1][0] !== '-') {",
      "200:                 if ($branch && Preg::isMatch('(^(?:[\\s*]*)([^\\s]+)\\s+\\d+:(.*)$)', $branch, $match) && $match[1][0] !== '-') {",
      "",
      "---------------"
    ],
    "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php": [
      "File: tests/Composer/Test/Repository/Vcs/GitDriverTest.php -> tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: namespace Composer\\Test\\Repository\\Vcs;",
      "5: use Composer\\Config;",
      "6: use Composer\\Repository\\Vcs\\GitDriver;",
      "7: use Composer\\Test\\Mock\\ProcessExecutorMock;",
      "8: use Composer\\Test\\TestCase;",
      "10: class GitDriverTest extends TestCase",
      "11: {",
      "13:     private $config;",
      "15:     private $home;",
      "17:     public function setUp()",
      "18:     {",
      "19:         $this->home = self::getUniqueTmpDirectory();",
      "20:         $this->config = new Config();",
      "21:         $this->config->merge(array(",
      "22:             'config' => array(",
      "23:                 'home' => $this->home,",
      "24:             ),",
      "25:         ));",
      "26:     }",
      "28:     public function testGetBranchesFilterInvalidBranchNames()",
      "29:     {",
      "30:         $process = new ProcessExecutorMock;",
      "31:         $io = $this->getMockBuilder('Composer\\IO\\IOInterface')->getMock();",
      "33:         $driver = new GitDriver(array('url' => 'https://example.org/acme.git'), $io, $this->config, $this->getMockBuilder('Composer\\Util\\HttpDownloader')->disableOriginalConstructor()->getMock(), $process);",
      "34:         $this->setRepoDir($driver, $this->home);",
      "38:         $stdout = <<<GIT",
      "40:   2.2  12681446ba44d6d9004350192486f2ceb4eaa06 commit",
      "41:   -h   089681446ba44d6d9004350192486f2ceb4eaa06 commit",
      "42: GIT;",
      "44:         $process",
      "45:             ->expects(array(array(",
      "46:                 'cmd' => 'git branch --no-color --no-abbrev -v',",
      "47:                 'stdout' => $stdout,",
      "48:             )));",
      "50:         $branches = $driver->getBranches();",
      "51:         $this->assertSame(array(",
      "52:             'main' => '089681446ba44d6d9004350192486f2ceb4eaa06',",
      "53:             '2.2' => '12681446ba44d6d9004350192486f2ceb4eaa06',",
      "54:         ), $branches);",
      "55:     }",
      "57:     public function testFileGetContentInvalidIdentifier()",
      "58:     {",
      "59:         $this->expectException('\\RuntimeException');",
      "61:         $process = new ProcessExecutorMock;",
      "62:         $io = $this->getMockBuilder('Composer\\IO\\IOInterface')->getMock();",
      "63:         $driver = new GitDriver(array('url' => 'https://example.org/acme.git'), $io, $this->config, $this->getMockBuilder('Composer\\Util\\HttpDownloader')->disableOriginalConstructor()->getMock(), $process);",
      "65:         $this->assertNull($driver->getFileContent('file.txt', 'h'));",
      "67:         $driver->getFileContent('file.txt', '-h');",
      "68:     }",
      "74:     private function setRepoDir($driver, $path)",
      "75:     {",
      "76:         $reflectionClass = new \\ReflectionClass($driver);",
      "77:         $reflectionProperty = $reflectionClass->getProperty('repoDir');",
      "78:         $reflectionProperty->setAccessible(true);",
      "79:         $reflectionProperty->setValue($driver, $path);",
      "80:     }",
      "81: }",
      "",
      "---------------"
    ],
    "tests/Composer/Test/Repository/Vcs/HgDriverTest.php||tests/Composer/Test/Repository/Vcs/HgDriverTest.php": [
      "File: tests/Composer/Test/Repository/Vcs/HgDriverTest.php -> tests/Composer/Test/Repository/Vcs/HgDriverTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: namespace Composer\\Test\\Repository\\Vcs;",
      "15: use Composer\\Repository\\Vcs\\HgDriver;",
      "16: use Composer\\Test\\TestCase;",
      "17: use Composer\\Util\\Filesystem;",
      "18: use Composer\\Config;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: use Composer\\Test\\Mock\\ProcessExecutorMock;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:             array('https://user@bitbucket.org/user/repo'),",
      "67:         );",
      "68:     }",
      "69: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:     public function testGetBranchesFilterInvalidBranchNames()",
      "72:     {",
      "73:         $process = new ProcessExecutorMock;",
      "75:         $driver = new HgDriver(array('url' => 'https://example.org/acme.git'), $this->io, $this->config, $this->getMockBuilder('Composer\\Util\\HttpDownloader')->disableOriginalConstructor()->getMock(), $process);",
      "77:         $stdout = <<<HG_BRANCHES",
      "78: default 1:dbf6c8acb640",
      "79: --help  1:dbf6c8acb640",
      "80: HG_BRANCHES;",
      "82:         $stdout1 = <<<HG_BOOKMARKS",
      "83: help    1:dbf6c8acb641",
      "84: --help  1:dbf6c8acb641",
      "86: HG_BOOKMARKS;",
      "88:         $process",
      "89:             ->expects(array(array(",
      "90:                 'cmd' => 'hg branches',",
      "91:                 'stdout' => $stdout,",
      "92:             ), array(",
      "93:                 'cmd' => 'hg bookmarks',",
      "94:                 'stdout' => $stdout1,",
      "95:             )));",
      "97:         $branches = $driver->getBranches();",
      "98:         $this->assertSame(array(",
      "99:             'help' => 'dbf6c8acb641',",
      "100:             'default' => 'dbf6c8acb640',",
      "101:         ), $branches);",
      "102:     }",
      "104:     public function testFileGetContentInvalidIdentifier()",
      "105:     {",
      "106:         $this->expectException('\\RuntimeException');",
      "108:         $process = new ProcessExecutorMock;",
      "109:         $driver = new HgDriver(array('url' => 'https://example.org/acme.git'), $this->io, $this->config, $this->getMockBuilder('Composer\\Util\\HttpDownloader')->disableOriginalConstructor()->getMock(), $process);",
      "111:         $this->assertNull($driver->getFileContent('file.txt', 'h'));",
      "113:         $driver->getFileContent('file.txt', '-h');",
      "114:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9a62ef7ff204aee67589220c1d09e67de614f1de",
      "candidate_info": {
        "commit_hash": "9a62ef7ff204aee67589220c1d09e67de614f1de",
        "repo": "composer/composer",
        "commit_url": "https://github.com/composer/composer/commit/9a62ef7ff204aee67589220c1d09e67de614f1de",
        "files": [
          "tests/Composer/Test/Repository/Vcs/GitDriverTest.php"
        ],
        "message": "Add missing return type",
        "before_after_code_files": [
          "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php"
          ],
          "candidate": [
            "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php"
          ]
        }
      },
      "candidate_diff": {
        "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php": [
          "File: tests/Composer/Test/Repository/Vcs/GitDriverTest.php -> tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     {",
          "76:         $reflectionClass = new \\ReflectionClass($driver);",
          "77:         $reflectionProperty = $reflectionClass->getProperty('repoDir');",
          "",
          "[Removed Lines]",
          "74:     private function setRepoDir($driver, $path)",
          "",
          "[Added Lines]",
          "74:     private function setRepoDir($driver, $path): void",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0b364af199d5fdffe3901b4cfa99074ba6ebcd2",
      "candidate_info": {
        "commit_hash": "b0b364af199d5fdffe3901b4cfa99074ba6ebcd2",
        "repo": "composer/composer",
        "commit_url": "https://github.com/composer/composer/commit/b0b364af199d5fdffe3901b4cfa99074ba6ebcd2",
        "files": [
          "tests/Composer/Test/Repository/Vcs/GitDriverTest.php"
        ],
        "message": "E_TOO_MANY_BRANCHES",
        "before_after_code_files": [
          "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php"
          ],
          "candidate": [
            "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php"
          ]
        }
      },
      "candidate_diff": {
        "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php": [
          "File: tests/Composer/Test/Repository/Vcs/GitDriverTest.php -> tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     {",
          "76:         $reflectionClass = new \\ReflectionClass($driver);",
          "77:         $reflectionProperty = $reflectionClass->getProperty('repoDir');",
          "",
          "[Removed Lines]",
          "74:     private function setRepoDir($driver, $path): void",
          "",
          "[Added Lines]",
          "75:     private function setRepoDir($driver, $path)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1f9baa11813d105729378be4650155ca5d07669",
      "candidate_info": {
        "commit_hash": "a1f9baa11813d105729378be4650155ca5d07669",
        "repo": "composer/composer",
        "commit_url": "https://github.com/composer/composer/commit/a1f9baa11813d105729378be4650155ca5d07669",
        "files": [
          "tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
          "tests/Composer/Test/Repository/Vcs/HgDriverTest.php"
        ],
        "message": "Fix 5.3/5.4 builds",
        "before_after_code_files": [
          "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
          "tests/Composer/Test/Repository/Vcs/HgDriverTest.php||tests/Composer/Test/Repository/Vcs/HgDriverTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
            "tests/Composer/Test/Repository/Vcs/HgDriverTest.php||tests/Composer/Test/Repository/Vcs/HgDriverTest.php"
          ],
          "candidate": [
            "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
            "tests/Composer/Test/Repository/Vcs/HgDriverTest.php||tests/Composer/Test/Repository/Vcs/HgDriverTest.php"
          ]
        }
      },
      "candidate_diff": {
        "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php": [
          "File: tests/Composer/Test/Repository/Vcs/GitDriverTest.php -> tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     public function testFileGetContentInvalidIdentifier()",
          "58:     {",
          "61:         $process = new ProcessExecutorMock;",
          "62:         $io = $this->getMockBuilder('Composer\\IO\\IOInterface')->getMock();",
          "",
          "[Removed Lines]",
          "59:         $this->expectException('\\RuntimeException');",
          "",
          "[Added Lines]",
          "59:         $this->setExpectedException('\\RuntimeException');",
          "",
          "---------------"
        ],
        "tests/Composer/Test/Repository/Vcs/HgDriverTest.php||tests/Composer/Test/Repository/Vcs/HgDriverTest.php": [
          "File: tests/Composer/Test/Repository/Vcs/HgDriverTest.php -> tests/Composer/Test/Repository/Vcs/HgDriverTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     public function testFileGetContentInvalidIdentifier()",
          "105:     {",
          "108:         $process = new ProcessExecutorMock;",
          "109:         $driver = new HgDriver(array('url' => 'https://example.org/acme.git'), $this->io, $this->config, $this->getMockBuilder('Composer\\Util\\HttpDownloader')->disableOriginalConstructor()->getMock(), $process);",
          "",
          "[Removed Lines]",
          "106:         $this->expectException('\\RuntimeException');",
          "",
          "[Added Lines]",
          "106:         $this->setExpectedException('\\RuntimeException');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c33aafaa04114e4f20104cb4bff050f31abc6178",
      "candidate_info": {
        "commit_hash": "c33aafaa04114e4f20104cb4bff050f31abc6178",
        "repo": "composer/composer",
        "commit_url": "https://github.com/composer/composer/commit/c33aafaa04114e4f20104cb4bff050f31abc6178",
        "files": [
          "src/Composer/Repository/Vcs/GitDriver.php",
          "src/Composer/Repository/Vcs/HgDriver.php",
          "tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
          "tests/Composer/Test/Repository/Vcs/HgDriverTest.php"
        ],
        "message": "Merge pull request from GHSA-x7cr-6qr6-2hh6\n\n* GitDriver: filter branch names starting with a - character\n\n* GitDriver: getFileContent prevent identifiers starting with a -\n\n* HgDriver: prevent invalid identifiers and prevent file from running commands\n\n* HgDriver: filter branches starting with a - character",
        "before_after_code_files": [
          "src/Composer/Repository/Vcs/GitDriver.php||src/Composer/Repository/Vcs/GitDriver.php",
          "src/Composer/Repository/Vcs/HgDriver.php||src/Composer/Repository/Vcs/HgDriver.php",
          "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
          "tests/Composer/Test/Repository/Vcs/HgDriverTest.php||tests/Composer/Test/Repository/Vcs/HgDriverTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/Composer/Repository/Vcs/GitDriver.php||src/Composer/Repository/Vcs/GitDriver.php",
            "src/Composer/Repository/Vcs/HgDriver.php||src/Composer/Repository/Vcs/HgDriver.php",
            "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
            "tests/Composer/Test/Repository/Vcs/HgDriverTest.php||tests/Composer/Test/Repository/Vcs/HgDriverTest.php"
          ],
          "candidate": [
            "src/Composer/Repository/Vcs/GitDriver.php||src/Composer/Repository/Vcs/GitDriver.php",
            "src/Composer/Repository/Vcs/HgDriver.php||src/Composer/Repository/Vcs/HgDriver.php",
            "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
            "tests/Composer/Test/Repository/Vcs/HgDriverTest.php||tests/Composer/Test/Repository/Vcs/HgDriverTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Composer/Repository/Vcs/GitDriver.php||src/Composer/Repository/Vcs/GitDriver.php": [
          "File: src/Composer/Repository/Vcs/GitDriver.php -> src/Composer/Repository/Vcs/GitDriver.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:     public function getFileContent($file, $identifier)",
          "132:     {",
          "133:         $resource = sprintf('%s:%s', ProcessExecutor::escape($identifier), ProcessExecutor::escape($file));",
          "134:         $this->process->execute(sprintf('git show %s', $resource), $content, $this->repoDir);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:         if (isset($identifier[0]) && $identifier[0] === '-') {",
          "134:             throw new \\RuntimeException('Invalid git identifier detected. Identifier must not start with a -, given: ' . $identifier);",
          "135:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:             $this->process->execute('git branch --no-color --no-abbrev -v', $output, $this->repoDir);",
          "184:             foreach ($this->process->splitLines($output) as $branch) {",
          "185:                 if ($branch && !preg_match('{^ *[^/]+/HEAD }', $branch)) {",
          "187:                         $branches[$match[1]] = $match[2];",
          "188:                     }",
          "189:                 }",
          "",
          "[Removed Lines]",
          "186:                     if (preg_match('{^(?:\\* )? *(\\S+) *([a-f0-9]+)(?: .*)?$}', $branch, $match)) {",
          "",
          "[Added Lines]",
          "190:                     if (preg_match('{^(?:\\* )? *(\\S+) *([a-f0-9]+)(?: .*)?$}', $branch, $match) && $match[1][0] !== '-') {",
          "",
          "---------------"
        ],
        "src/Composer/Repository/Vcs/HgDriver.php||src/Composer/Repository/Vcs/HgDriver.php": [
          "File: src/Composer/Repository/Vcs/HgDriver.php -> src/Composer/Repository/Vcs/HgDriver.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:     public function getFileContent($file, $identifier)",
          "124:     {",
          "126:         $this->process->execute($resource, $content, $this->repoDir);",
          "128:         if (!trim($content)) {",
          "",
          "[Removed Lines]",
          "125:         $resource = sprintf('hg cat -r %s %s', ProcessExecutor::escape($identifier), ProcessExecutor::escape($file));",
          "",
          "[Added Lines]",
          "125:         if (isset($identifier[0]) && $identifier[0] === '-') {",
          "126:             throw new \\RuntimeException('Invalid hg identifier detected. Identifier must not start with a -, given: ' . $identifier);",
          "127:         }",
          "129:         $resource = sprintf('hg cat -r %s -- %s', ProcessExecutor::escape($identifier), ProcessExecutor::escape($file));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:             $this->process->execute('hg branches', $output, $this->repoDir);",
          "184:             foreach ($this->process->splitLines($output) as $branch) {",
          "186:                     $branches[$match[1]] = $match[2];",
          "187:                 }",
          "188:             }",
          "190:             $this->process->execute('hg bookmarks', $output, $this->repoDir);",
          "191:             foreach ($this->process->splitLines($output) as $branch) {",
          "193:                     $bookmarks[$match[1]] = $match[2];",
          "194:                 }",
          "195:             }",
          "",
          "[Removed Lines]",
          "185:                 if ($branch && preg_match('(^([^\\s]+)\\s+\\d+:([a-f0-9]+))', $branch, $match)) {",
          "192:                 if ($branch && preg_match('(^(?:[\\s*]*)([^\\s]+)\\s+\\d+:(.*)$)', $branch, $match)) {",
          "",
          "[Added Lines]",
          "189:                 if ($branch && preg_match('(^([^\\s]+)\\s+\\d+:([a-f0-9]+))', $branch, $match) && $match[1][0] !== '-') {",
          "196:                 if ($branch && preg_match('(^(?:[\\s*]*)([^\\s]+)\\s+\\d+:(.*)$)', $branch, $match) && $match[1][0] !== '-') {",
          "",
          "---------------"
        ],
        "tests/Composer/Test/Repository/Vcs/GitDriverTest.php||tests/Composer/Test/Repository/Vcs/GitDriverTest.php": [
          "File: tests/Composer/Test/Repository/Vcs/GitDriverTest.php -> tests/Composer/Test/Repository/Vcs/GitDriverTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Composer\\Test\\Repository\\Vcs;",
          "5: use Composer\\Config;",
          "6: use Composer\\Repository\\Vcs\\GitDriver;",
          "7: use Composer\\Test\\Mock\\ProcessExecutorMock;",
          "8: use Composer\\Test\\TestCase;",
          "10: class GitDriverTest extends TestCase",
          "11: {",
          "13:     private $config;",
          "15:     private $home;",
          "17:     public function setUp()",
          "18:     {",
          "19:         $this->home = self::getUniqueTmpDirectory();",
          "20:         $this->config = new Config();",
          "21:         $this->config->merge(array(",
          "22:             'config' => array(",
          "23:                 'home' => $this->home,",
          "24:             ),",
          "25:         ));",
          "26:     }",
          "28:     public function testGetBranchesFilterInvalidBranchNames()",
          "29:     {",
          "30:         $process = $this->getMockBuilder('Composer\\Util\\ProcessExecutor')->getMock();",
          "31:         $process->expects($this->any())",
          "32:             ->method('execute')",
          "33:             ->will($this->returnValue(0));",
          "34:         $io = $this->getMockBuilder('Composer\\IO\\IOInterface')->getMock();",
          "36:         $driver = new GitDriver(array('url' => 'https://example.org/acme.git'), $io, $this->config, $process);",
          "37:         $this->setRepoDir($driver, $this->home);",
          "41:         $stdout = <<<GIT",
          "43:   2.2  12681446ba44d6d9004350192486f2ceb4eaa06 commit",
          "44:   -h   089681446ba44d6d9004350192486f2ceb4eaa06 commit",
          "45: GIT;",
          "47:         $process->expects($this->at(0))",
          "48:             ->method('execute')",
          "49:             ->with('git branch --no-color --no-abbrev -v');",
          "50:         $process->expects($this->at(1))",
          "51:             ->method('splitLines')",
          "52:             ->will($this->returnValue(preg_split('{\\r?\\n}', trim($stdout))));",
          "54:         $branches = $driver->getBranches();",
          "55:         $this->assertSame(array(",
          "56:             'main' => '089681446ba44d6d9004350192486f2ceb4eaa06',",
          "57:             '2.2' => '12681446ba44d6d9004350192486f2ceb4eaa06',",
          "58:         ), $branches);",
          "59:     }",
          "61:     public function testFileGetContentInvalidIdentifier()",
          "62:     {",
          "63:         $this->setExpectedException('\\RuntimeException');",
          "65:         $process = $this->getMockBuilder('Composer\\Util\\ProcessExecutor')->getMock();",
          "66:         $process->expects($this->any())",
          "67:             ->method('execute')",
          "68:             ->will($this->returnValue(0));",
          "69:         $io = $this->getMockBuilder('Composer\\IO\\IOInterface')->getMock();",
          "70:         $driver = new GitDriver(array('url' => 'https://example.org/acme.git'), $io, $this->config, $process);",
          "72:         $this->assertNull($driver->getFileContent('file.txt', 'h'));",
          "74:         $driver->getFileContent('file.txt', '-h');",
          "75:     }",
          "81:     private function setRepoDir($driver, $path)",
          "82:     {",
          "83:         $reflectionClass = new \\ReflectionClass($driver);",
          "84:         $reflectionProperty = $reflectionClass->getProperty('repoDir');",
          "85:         $reflectionProperty->setAccessible(true);",
          "86:         $reflectionProperty->setValue($driver, $path);",
          "87:     }",
          "88: }",
          "",
          "---------------"
        ],
        "tests/Composer/Test/Repository/Vcs/HgDriverTest.php||tests/Composer/Test/Repository/Vcs/HgDriverTest.php": [
          "File: tests/Composer/Test/Repository/Vcs/HgDriverTest.php -> tests/Composer/Test/Repository/Vcs/HgDriverTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: namespace Composer\\Test\\Repository\\Vcs;",
          "15: use Composer\\Repository\\Vcs\\HgDriver;",
          "16: use Composer\\Test\\TestCase;",
          "17: use Composer\\Util\\Filesystem;",
          "18: use Composer\\Config;",
          "20: class HgDriverTest extends TestCase",
          "21: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: use Composer\\Test\\Mock\\ProcessExecutorMock;",
          "20: use Composer\\Util\\ProcessExecutor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:             array('https://user@bitbucket.org/user/repo'),",
          "65:         );",
          "66:     }",
          "67: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     public function testGetBranchesFilterInvalidBranchNames()",
          "71:     {",
          "72:         $process = $this->getMockBuilder('Composer\\Util\\ProcessExecutor')->getMock();",
          "73:         $process->expects($this->any())",
          "74:             ->method('execute')",
          "75:             ->will($this->returnValue(0));",
          "77:         $driver = new HgDriver(array('url' => 'https://example.org/acme.git'), $this->io, $this->config, $process);",
          "79:         $stdout = <<<HG_BRANCHES",
          "80: default 1:dbf6c8acb640",
          "81: --help  1:dbf6c8acb640",
          "82: HG_BRANCHES;",
          "84:         $stdout1 = <<<HG_BOOKMARKS",
          "85: help    1:dbf6c8acb641",
          "86: --help  1:dbf6c8acb641",
          "88: HG_BOOKMARKS;",
          "90:         $process->expects($this->at(0))",
          "91:             ->method('execute')",
          "92:             ->with('hg branches');",
          "93:         $process->expects($this->at(1))",
          "94:             ->method('splitLines')",
          "95:             ->will($this->returnValue(preg_split('{\\r?\\n}', trim($stdout))));",
          "96:         $process->expects($this->at(2))",
          "97:             ->method('execute')",
          "98:             ->with('hg bookmarks');",
          "99:         $process->expects($this->at(3))",
          "100:             ->method('splitLines')",
          "101:             ->will($this->returnValue(preg_split('{\\r?\\n}', trim($stdout1))));",
          "103:         $branches = $driver->getBranches();",
          "104:         $this->assertSame(array(",
          "105:             'help' => 'dbf6c8acb641',",
          "106:             'default' => 'dbf6c8acb640',",
          "107:         ), $branches);",
          "108:     }",
          "110:     public function testFileGetContentInvalidIdentifier()",
          "111:     {",
          "112:         $this->setExpectedException('\\RuntimeException');",
          "114:         $process = $this->getMockBuilder('Composer\\Util\\ProcessExecutor')->getMock();",
          "115:         $process->expects($this->any())",
          "116:             ->method('execute')",
          "117:             ->will($this->returnValue(0));",
          "118:         $driver = new HgDriver(array('url' => 'https://example.org/acme.git'), $this->io, $this->config, $process);",
          "120:         $this->assertNull($driver->getFileContent('file.txt', 'h'));",
          "122:         $driver->getFileContent('file.txt', '-h');",
          "123:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}