{
  "cve_id": "CVE-2023-3515",
  "cve_desc": "Open Redirect in GitHub repository go-gitea/gitea prior to 1.19.4.",
  "repo": "go-gitea/gitea",
  "patch_hash": "9aaaf980f0ba15611f30568bd67bce3ec12954e2",
  "patch_info": {
    "commit_hash": "9aaaf980f0ba15611f30568bd67bce3ec12954e2",
    "repo": "go-gitea/gitea",
    "commit_url": "https://github.com/go-gitea/gitea/commit/9aaaf980f0ba15611f30568bd67bce3ec12954e2",
    "files": [
      "modules/context/context_response.go"
    ],
    "message": "Fix open redirect check for more cases (#25143)\n\nIf redirect_to parameter has set value starting with `\\\\example.com`\nredirect will be created with header `Location: /\\\\example.com` that\nwill redirect to example.com domain.",
    "before_after_code_files": [
      "modules/context/context_response.go||modules/context/context_response.go"
    ]
  },
  "patch_diff": {
    "modules/context/context_response.go||modules/context/context_response.go": [
      "File: modules/context/context_response.go -> modules/context/context_response.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "49:    continue",
      "50:   }",
      "55:    continue",
      "56:   }",
      "",
      "[Removed Lines]",
      "54:   if len(loc) > 1 && loc[0] == '/' && (loc[1] == '/' || loc[1] == '\\\\') {",
      "",
      "[Added Lines]",
      "54:   if len(loc) > 1 && (loc[0] == '/' || loc[0] == '\\\\') && (loc[1] == '/' || loc[1] == '\\\\') {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b71cb7acdc8840c9fc16b496c90a048051d15823",
      "candidate_info": {
        "commit_hash": "b71cb7acdc8840c9fc16b496c90a048051d15823",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/b71cb7acdc8840c9fc16b496c90a048051d15823",
        "files": [
          "modules/context/base.go",
          "modules/context/context_response.go",
          "modules/httplib/url.go",
          "modules/httplib/url_test.go",
          "modules/test/utils.go",
          "routers/common/redirect.go",
          "routers/init.go",
          "routers/web/repo/issue.go",
          "templates/repo/issue/new_form.tmpl",
          "templates/repo/issue/view_content.tmpl",
          "tests/integration/attachment_test.go",
          "tests/integration/issue_test.go",
          "web_src/js/features/common-global.js",
          "web_src/js/features/repo-issue.js"
        ],
        "message": "Use fetch to send requests to create issues/comments (#25258)\n\nFollow #23290\n\nNetwork error won't make content lost. And this is a much better\napproach than \"loading-button\".\n\nThe UI is not perfect and there are still some TODOs, they can be done\nin following PRs, not a must in this PR's scope.\n\n<details>\n\n\n![image](https://github.com/go-gitea/gitea/assets/2114189/c94ba958-aa46-4747-8ddf-6584deeed25c)\n\n</details>",
        "before_after_code_files": [
          "modules/context/base.go||modules/context/base.go",
          "modules/context/context_response.go||modules/context/context_response.go",
          "modules/httplib/url.go||modules/httpliurl.go",
          "modules/httplib/url_test.go||modules/httpliurl_test.go",
          "modules/test/utils.go||modules/test/utils.go",
          "routers/common/redirect.go||routers/common/redirect.go",
          "routers/init.go||routers/init.go",
          "routers/web/repo/issue.go||routers/werepo/issue.go",
          "templates/repo/issue/new_form.tmpl||templates/repo/issue/new_form.tmpl",
          "templates/repo/issue/view_content.tmpl||templates/repo/issue/view_content.tmpl",
          "tests/integration/attachment_test.go||tests/integration/attachment_test.go",
          "tests/integration/issue_test.go||tests/integration/issue_test.go",
          "web_src/js/features/common-global.js||web_src/js/features/common-global.js",
          "web_src/js/features/repo-issue.js||web_src/js/features/repo-issue.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/context/context_response.go||modules/context/context_response.go"
          ],
          "candidate": [
            "modules/context/context_response.go||modules/context/context_response.go"
          ]
        }
      },
      "candidate_diff": {
        "modules/context/base.go||modules/context/base.go": [
          "File: modules/context/base.go -> modules/context/base.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:  b.JSON(http.StatusOK, map[string]any{\"redirect\": redirect})",
          "137: }",
          "140: func (b *Base) RemoteAddr() string {",
          "141:  return b.Req.RemoteAddr",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139: func (b *Base) JSONError(msg string) {",
          "140:  b.JSON(http.StatusBadRequest, map[string]any{\"errorMessage\": msg})",
          "141: }",
          "",
          "---------------"
        ],
        "modules/context/context_response.go||modules/context/context_response.go": [
          "File: modules/context/context_response.go -> modules/context/context_response.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  user_model \"code.gitea.io/gitea/models/user\"",
          "18:  \"code.gitea.io/gitea/modules/base\"",
          "19:  \"code.gitea.io/gitea/modules/log\"",
          "20:  \"code.gitea.io/gitea/modules/setting\"",
          "21:  \"code.gitea.io/gitea/modules/templates\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  \"code.gitea.io/gitea/modules/httplib\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:    continue",
          "50:   }",
          "60:    continue",
          "61:   }",
          "",
          "[Removed Lines]",
          "54:   if len(loc) > 1 && (loc[0] == '/' || loc[0] == '\\\\') && (loc[1] == '/' || loc[1] == '\\\\') {",
          "55:    continue",
          "56:   }",
          "58:   u, err := url.Parse(loc)",
          "59:   if err != nil || ((u.Scheme != \"\" || u.Host != \"\") && !strings.HasPrefix(strings.ToLower(loc), strings.ToLower(setting.AppURL))) {",
          "",
          "[Added Lines]",
          "53:   if httplib.IsRiskyRedirectURL(loc) {",
          "",
          "---------------"
        ],
        "modules/httplib/url.go||modules/httpliurl.go": [
          "File: modules/httplib/url.go -> modules/httpliurl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/httplib/url_test.go||modules/httpliurl_test.go": [
          "File: modules/httplib/url_test.go -> modules/httpliurl_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/test/utils.go||modules/test/utils.go": [
          "File: modules/test/utils.go -> modules/test/utils.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"net/http\"",
          "8:  \"strings\"",
          "9: )",
          "12: func RedirectURL(resp http.ResponseWriter) string {",
          "14: }",
          "16: func IsNormalPageCompleted(s string) bool {",
          "",
          "[Removed Lines]",
          "13:  return resp.Header().Get(\"Location\")",
          "",
          "[Added Lines]",
          "8:  \"net/http/httptest\"",
          "11:  \"code.gitea.io/gitea/modules/json\"",
          "17:  loc := resp.Header().Get(\"Location\")",
          "18:  if loc != \"\" {",
          "19:   return loc",
          "20:  }",
          "21:  if r, ok := resp.(*httptest.ResponseRecorder); ok {",
          "22:   m := map[string]any{}",
          "23:   err := json.Unmarshal(r.Body.Bytes(), &m)",
          "24:   if err == nil {",
          "25:    if loc, ok := m[\"redirect\"].(string); ok {",
          "26:     return loc",
          "27:    }",
          "28:   }",
          "29:  }",
          "30:  return \"\"",
          "",
          "---------------"
        ],
        "routers/common/redirect.go||routers/common/redirect.go": [
          "File: routers/common/redirect.go -> routers/common/redirect.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: package common",
          "6: import (",
          "7:  \"net/http\"",
          "9:  \"code.gitea.io/gitea/modules/httplib\"",
          "10: )",
          "13: func FetchRedirectDelegate(resp http.ResponseWriter, req *http.Request) {",
          "19:  redirect := req.PostFormValue(\"redirect\")",
          "20:  if httplib.IsRiskyRedirectURL(redirect) {",
          "21:   resp.WriteHeader(http.StatusBadRequest)",
          "22:   return",
          "23:  }",
          "24:  resp.Header().Add(\"Location\", redirect)",
          "25:  resp.WriteHeader(http.StatusSeeOther)",
          "26: }",
          "",
          "---------------"
        ],
        "routers/init.go||routers/init.go": [
          "File: routers/init.go -> routers/init.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:  r.Mount(\"/api/v1\", apiv1.Routes(ctx))",
          "184:  r.Mount(\"/api/internal\", private.Routes())",
          "186:  if setting.Packages.Enabled {",
          "188:   r.Mount(\"/api/packages\", packages_router.CommonRoutes(ctx))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:  r.Post(\"/-/fetch-redirect\", common.FetchRedirectDelegate)",
          "",
          "---------------"
        ],
        "routers/web/repo/issue.go||routers/werepo/issue.go": [
          "File: routers/web/repo/issue.go -> routers/werepo/issue.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1134:  }",
          "1136:  if ctx.HasError() {",
          "1138:   return",
          "1139:  }",
          "1141:  if util.IsEmptyString(form.Title) {",
          "1143:   return",
          "1144:  }",
          "",
          "[Removed Lines]",
          "1137:   ctx.HTML(http.StatusOK, tplIssueNew)",
          "1142:   ctx.RenderWithErr(ctx.Tr(\"repo.issues.new.title_empty\"), tplIssueNew, form)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1185:  log.Trace(\"Issue created: %d/%d\", repo.ID, issue.ID)",
          "1186:  if ctx.FormString(\"redirect_after_creation\") == \"project\" && projectID > 0 {",
          "1188:  } else {",
          "1190:  }",
          "1191: }",
          "",
          "[Removed Lines]",
          "1187:   ctx.Redirect(ctx.Repo.RepoLink + \"/projects/\" + strconv.FormatInt(projectID, 10))",
          "1189:   ctx.Redirect(issue.Link())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2777:  }",
          "2779:  if issue.IsLocked && !ctx.Repo.CanWriteIssuesOrPulls(issue.IsPull) && !ctx.Doer.IsAdmin {",
          "2782:   return",
          "2783:  }",
          "",
          "[Removed Lines]",
          "2780:   ctx.Flash.Error(ctx.Tr(\"repo.issues.comment_on_locked\"))",
          "2781:   ctx.Redirect(issue.Link())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2788:  }",
          "2790:  if ctx.HasError() {",
          "2793:   return",
          "2794:  }",
          "",
          "[Removed Lines]",
          "2791:   ctx.Flash.Error(ctx.Data[\"ErrorMsg\"].(string))",
          "2792:   ctx.Redirect(issue.Link())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2809:     pr, err = issues_model.GetUnmergedPullRequest(ctx, pull.HeadRepoID, pull.BaseRepoID, pull.HeadBranch, pull.BaseBranch, pull.Flow)",
          "2810:     if err != nil {",
          "2811:      if !issues_model.IsErrPullRequestNotExist(err) {",
          "2814:       return",
          "2815:      }",
          "2816:     }",
          "",
          "[Removed Lines]",
          "2812:       ctx.Flash.Error(ctx.Tr(\"repo.issues.dependency.pr_close_blocked\"))",
          "2813:       ctx.Redirect(fmt.Sprintf(\"%s/pulls/%d\", ctx.Repo.RepoLink, pull.Index))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2841:     }",
          "2842:     if ok := git.IsBranchExist(ctx, pull.HeadRepo.RepoPath(), pull.BaseBranch); !ok {",
          "2846:      return",
          "2847:     }",
          "2848:     headBranchRef := pull.GetGitHeadBranchRefName()",
          "",
          "[Removed Lines]",
          "2844:      ctx.Flash.Error(\"The origin branch is delete, cannot reopen.\")",
          "2845:      ctx.Redirect(fmt.Sprintf(\"%s/pulls/%d\", ctx.Repo.RepoLink, pull.Index))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2883:      if issues_model.IsErrDependenciesLeft(err) {",
          "2884:       if issue.IsPull {",
          "2887:       } else {",
          "2890:       }",
          "2891:       return",
          "2892:      }",
          "",
          "[Removed Lines]",
          "2885:        ctx.Flash.Error(ctx.Tr(\"repo.issues.dependency.pr_close_blocked\"))",
          "2886:        ctx.Redirect(fmt.Sprintf(\"%s/pulls/%d\", ctx.Repo.RepoLink, issue.Index))",
          "2888:        ctx.Flash.Error(ctx.Tr(\"repo.issues.dependency.issue_close_blocked\"))",
          "2889:        ctx.Redirect(fmt.Sprintf(\"%s/issues/%d\", ctx.Repo.RepoLink, issue.Index))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2908:    typeName = \"pulls\"",
          "2909:   }",
          "2910:   if comment != nil {",
          "2912:   } else {",
          "2914:   }",
          "2915:  }()",
          "",
          "[Removed Lines]",
          "2911:    ctx.Redirect(fmt.Sprintf(\"%s/%s/%d#%s\", ctx.Repo.RepoLink, typeName, issue.Index, comment.HashTag()))",
          "2913:    ctx.Redirect(fmt.Sprintf(\"%s/%s/%d\", ctx.Repo.RepoLink, typeName, issue.Index))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "templates/repo/issue/new_form.tmpl||templates/repo/issue/new_form.tmpl": [
          "File: templates/repo/issue/new_form.tmpl -> templates/repo/issue/new_form.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:  {{.CsrfTokenHtml}}",
          "3:  {{if .Flash}}",
          "4:   <div class=\"sixteen wide column\">",
          "",
          "[Removed Lines]",
          "1: <form class=\"issue-content ui comment form\" id=\"new-issue\" action=\"{{.Link}}\" method=\"post\">",
          "",
          "[Added Lines]",
          "1: <form class=\"issue-content ui comment form form-fetch-action\" id=\"new-issue\" action=\"{{.Link}}\" method=\"post\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:       {{template \"repo/issue/comment_tab\" .}}",
          "36:      {{end}}",
          "37:      <div class=\"text right\">",
          "39:        {{if .PageIsComparePull}}",
          "40:         {{.locale.Tr \"repo.pulls.create\"}}",
          "41:        {{else}}",
          "",
          "[Removed Lines]",
          "38:       <button class=\"ui green button loading-button\" tabindex=\"6\">",
          "",
          "[Added Lines]",
          "38:       <button class=\"ui green button\" tabindex=\"6\">",
          "",
          "---------------"
        ],
        "templates/repo/issue/view_content.tmpl||templates/repo/issue/view_content.tmpl": [
          "File: templates/repo/issue/view_content.tmpl -> templates/repo/issue/view_content.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:       {{avatar $.Context .SignedUser 40}}",
          "97:      </a>",
          "98:      <div class=\"content\">",
          "100:        {{template \"repo/issue/comment_tab\" .}}",
          "101:        {{.CsrfTokenHtml}}",
          "103:        <div class=\"field footer\">",
          "104:         <div class=\"text right\">",
          "105:          {{if and (or .HasIssuesOrPullsWritePermission .IsIssuePoster) (not .DisableStatusChange)}}",
          "106:           {{if .Issue.IsClosed}}",
          "108:             {{.locale.Tr \"repo.issues.reopen_issue\"}}",
          "109:            </button>",
          "110:           {{else}}",
          "",
          "[Removed Lines]",
          "99:       <form class=\"ui segment form\" id=\"comment-form\" action=\"{{$.RepoLink}}/issues/{{.Issue.Index}}/comments\" method=\"post\">",
          "102:        <input id=\"status\" name=\"status\" type=\"hidden\">",
          "107:            <button id=\"status-button\" class=\"ui green basic button\" tabindex=\"6\" data-status=\"{{.locale.Tr \"repo.issues.reopen_issue\"}}\" data-status-and-comment=\"{{.locale.Tr \"repo.issues.reopen_comment_issue\"}}\" data-status-val=\"reopen\">",
          "",
          "[Added Lines]",
          "99:       <form class=\"ui segment form form-fetch-action\" id=\"comment-form\" action=\"{{$.RepoLink}}/issues/{{.Issue.Index}}/comments\" method=\"post\">",
          "106:            <button id=\"status-button\" class=\"ui green basic button\" tabindex=\"6\" data-status=\"{{.locale.Tr \"repo.issues.reopen_issue\"}}\" data-status-and-comment=\"{{.locale.Tr \"repo.issues.reopen_comment_issue\"}}\" name=\"status\" value=\"reopen\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:            {{if .Issue.IsPull}}",
          "113:             {{$closeTranslationKey = \"repo.pulls.close\"}}",
          "114:            {{end}}",
          "116:             {{.locale.Tr $closeTranslationKey}}",
          "117:            </button>",
          "118:           {{end}}",
          "119:          {{end}}",
          "121:           {{.locale.Tr \"repo.issues.create_comment\"}}",
          "122:          </button>",
          "123:         </div>",
          "",
          "[Removed Lines]",
          "115:            <button id=\"status-button\" class=\"ui red basic button\" tabindex=\"6\" data-status=\"{{.locale.Tr $closeTranslationKey}}\" data-status-and-comment=\"{{.locale.Tr \"repo.issues.close_comment_issue\"}}\" data-status-val=\"close\">",
          "120:          <button class=\"ui green button loading-button\" tabindex=\"5\">",
          "",
          "[Added Lines]",
          "114:            <button id=\"status-button\" class=\"ui red basic button\" tabindex=\"6\" data-status=\"{{.locale.Tr $closeTranslationKey}}\" data-status-and-comment=\"{{.locale.Tr \"repo.issues.close_comment_issue\"}}\" name=\"status\" value=\"close\">",
          "119:          <button class=\"ui green button\" tabindex=\"5\">",
          "",
          "---------------"
        ],
        "tests/integration/attachment_test.go||tests/integration/attachment_test.go": [
          "File: tests/integration/attachment_test.go -> tests/integration/attachment_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  }",
          "85:  req = NewRequestWithValues(t, \"POST\", link, postData)",
          "87:  test.RedirectURL(resp) // check that redirect URL exists",
          "",
          "[Removed Lines]",
          "86:  resp = session.MakeRequest(t, req, http.StatusSeeOther)",
          "",
          "[Added Lines]",
          "86:  resp = session.MakeRequest(t, req, http.StatusOK)",
          "",
          "---------------"
        ],
        "tests/integration/issue_test.go||tests/integration/issue_test.go": [
          "File: tests/integration/issue_test.go -> tests/integration/issue_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:   \"title\":   title,",
          "136:   \"content\": content,",
          "137:  })",
          "140:  issueURL := test.RedirectURL(resp)",
          "141:  req = NewRequest(t, \"GET\", issueURL)",
          "",
          "[Removed Lines]",
          "138:  resp = session.MakeRequest(t, req, http.StatusSeeOther)",
          "",
          "[Added Lines]",
          "138:  resp = session.MakeRequest(t, req, http.StatusOK)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   \"content\": content,",
          "166:   \"status\":  status,",
          "167:  })",
          "170:  req = NewRequest(t, \"GET\", test.RedirectURL(resp))",
          "171:  resp = session.MakeRequest(t, req, http.StatusOK)",
          "",
          "[Removed Lines]",
          "168:  resp = session.MakeRequest(t, req, http.StatusSeeOther)",
          "",
          "[Added Lines]",
          "168:  resp = session.MakeRequest(t, req, http.StatusOK)",
          "",
          "---------------"
        ],
        "web_src/js/features/common-global.js||web_src/js/features/common-global.js": [
          "File: web_src/js/features/common-global.js -> web_src/js/features/common-global.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import {htmlEscape} from 'escape-goat';",
          "10: import {createTippy} from '../modules/tippy.js';",
          "14: export function initGlobalFormDirtyLeaveConfirm() {",
          "",
          "[Removed Lines]",
          "12: const {appUrl, csrfToken, i18n} = window.config;",
          "",
          "[Added Lines]",
          "12: const {appUrl, appSubUrl, csrfToken, i18n} = window.config;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   });",
          "62: }",
          "64: async function formFetchAction(e) {",
          "65:   if (!e.target.classList.contains('form-fetch-action')) return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: function doRedirect(redirect) {",
          "67:   const form = document.createElement('form');",
          "68:   const input = document.createElement('input');",
          "69:   form.method = 'post';",
          "70:   form.action = `${appSubUrl}/-/fetch-redirect`;",
          "71:   input.type = 'hidden';",
          "72:   input.name = 'redirect';",
          "73:   input.value = redirect;",
          "74:   form.append(input);",
          "75:   document.body.append(form);",
          "76:   form.submit();",
          "77: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:         const {redirect} = await resp.json();",
          "121:         formEl.classList.remove('dirty'); // remove the areYouSure check before reloading",
          "122:         if (redirect) {",
          "124:         } else {",
          "125:           window.location.reload();",
          "126:         }",
          "127:       } else {",
          "128:         onError(`server error: ${resp.status}`);",
          "129:       }",
          "130:     } catch (e) {",
          "132:     }",
          "133:   };",
          "",
          "[Removed Lines]",
          "123:           window.location.href = redirect;",
          "131:       onError(e.error);",
          "",
          "[Added Lines]",
          "139:           doRedirect(redirect);",
          "143:       } else if (resp.status >= 400 && resp.status < 500) {",
          "144:         const data = await resp.json();",
          "147:         onError(data.errorMessage || `server error: ${resp.status}`);",
          "152:       console.error('error when doRequest', e);",
          "153:       onError(i18n.network_error);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:   $('.tabular.menu .item').tab();",
          "194:   document.addEventListener('submit', formFetchAction);",
          "195: }",
          "",
          "[Removed Lines]",
          "187:   document.addEventListener('submit', (e) => {",
          "188:     const btn = e.target.querySelector('.loading-button');",
          "189:     if (!btn) return;",
          "190:     if (btn.classList.contains('loading')) return e.preventDefault();",
          "191:     btn.classList.add('loading');",
          "192:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "web_src/js/features/repo-issue.js||web_src/js/features/repo-issue.js": [
          "File: web_src/js/features/repo-issue.js -> web_src/js/features/repo-issue.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "636:   const opts = {};",
          "637:   const $statusButton = $('#status-button');",
          "638:   if ($statusButton.length) {",
          "644:     opts.onContentChanged = (editor) => {",
          "645:       $statusButton.text($statusButton.attr(editor.value().trim() ? 'data-status-and-comment' : 'data-status'));",
          "646:     };",
          "",
          "[Removed Lines]",
          "639:     $statusButton.on('click', (e) => {",
          "640:       e.preventDefault();",
          "641:       $('#status').val($statusButton.data('status-val'));",
          "642:       $('#comment-form').trigger('submit');",
          "643:     });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7679f4d51a637ae47880e09dbb185651cb7163c7",
      "candidate_info": {
        "commit_hash": "7679f4d51a637ae47880e09dbb185651cb7163c7",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/7679f4d51a637ae47880e09dbb185651cb7163c7",
        "files": [
          "modules/context/context_response.go"
        ],
        "message": "Fix open redirect check for more cases (#25143) (#25154)\n\nBackport #25143 by @lafriks\n\nIf redirect_to parameter has set value starting with `\\\\example.com`\nredirect will be created with header `Location: /\\\\example.com` that\nwill redirect to example.com domain.\n\nCo-authored-by: Lauris BH <lauris@nix.lv>",
        "before_after_code_files": [
          "modules/context/context_response.go||modules/context/context_response.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "modules/context/context_response.go||modules/context/context_response.go"
          ],
          "candidate": [
            "modules/context/context_response.go||modules/context/context_response.go"
          ]
        }
      },
      "candidate_diff": {
        "modules/context/context_response.go||modules/context/context_response.go": [
          "File: modules/context/context_response.go -> modules/context/context_response.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:    continue",
          "50:   }",
          "55:    continue",
          "56:   }",
          "",
          "[Removed Lines]",
          "54:   if len(loc) > 1 && loc[0] == '/' && (loc[1] == '/' || loc[1] == '\\\\') {",
          "",
          "[Added Lines]",
          "54:   if len(loc) > 1 && (loc[0] == '/' || loc[0] == '\\\\') && (loc[1] == '/' || loc[1] == '\\\\') {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9030052a7b92bdfa1a6be0cdb540050a16ba31e",
      "candidate_info": {
        "commit_hash": "a9030052a7b92bdfa1a6be0cdb540050a16ba31e",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/a9030052a7b92bdfa1a6be0cdb540050a16ba31e",
        "files": [
          "modules/context/context.go"
        ],
        "message": "Fix open redirect check for more cases (#25143) (#25155)\n\nBackport https://github.com/go-gitea/gitea/pull/25143\n\nIf redirect_to parameter has set value starting with \\\\example.com\nredirect will be created with header Location: /\\\\example.com that will\nredirect to example.com domain.",
        "before_after_code_files": [
          "modules/context/context.go||modules/context/context.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/context/context.go||modules/context/context.go": [
          "File: modules/context/context.go -> modules/context/context.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:    continue",
          "198:   }",
          "203:    continue",
          "204:   }",
          "",
          "[Removed Lines]",
          "202:   if len(loc) > 1 && loc[0] == '/' && (loc[1] == '/' || loc[1] == '\\\\') {",
          "",
          "[Added Lines]",
          "202:   if len(loc) > 1 && (loc[0] == '/' || loc[0] == '\\\\') && (loc[1] == '/' || loc[1] == '\\\\') {",
          "",
          "---------------"
        ]
      }
    }
  ]
}