{
  "cve_id": "CVE-2022-25883",
  "cve_desc": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r",
  "repo": "npm/node-semver",
  "patch_hash": "717534ee353682f3bcf33e60a8af4292626d4441",
  "patch_info": {
    "commit_hash": "717534ee353682f3bcf33e60a8af4292626d4441",
    "repo": "npm/node-semver",
    "commit_url": "https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441",
    "files": [
      "classes/comparator.js",
      "classes/range.js",
      "classes/semver.js",
      "functions/coerce.js",
      "internal/re.js",
      "package.json",
      "test/integration/whitespace.js",
      "test/internal/re.js",
      "test/map.js"
    ],
    "message": "fix: better handling of whitespace (#564)",
    "before_after_code_files": [
      "classes/comparator.js||classes/comparator.js",
      "classes/range.js||classes/range.js",
      "classes/semver.js||classes/semver.js",
      "functions/coerce.js||functions/coerce.js",
      "internal/re.js||internal/re.js",
      "test/integration/whitespace.js||test/integration/whitespace.js",
      "test/internal/re.js||test/internal/re.js",
      "test/map.js||test/map.js"
    ]
  },
  "patch_diff": {
    "classes/comparator.js||classes/comparator.js": [
      "File: classes/comparator.js -> classes/comparator.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:       }",
      "17:     }",
      "19:     debug('comparator', comp, options)",
      "20:     this.options = options",
      "21:     this.loose = !!options.loose",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19:     comp = comp.trim().split(/\\s+/).join(' ')",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "133: module.exports = Comparator",
      "135: const parseOptions = require('../internal/parse-options')",
      "137: const cmp = require('../functions/cmp')",
      "138: const debug = require('../internal/debug')",
      "139: const SemVer = require('./semver')",
      "",
      "[Removed Lines]",
      "136: const { re, t } = require('../internal/re')",
      "",
      "[Added Lines]",
      "137: const { safeRe: re, t } = require('../internal/re')",
      "",
      "---------------"
    ],
    "classes/range.js||classes/range.js": [
      "File: classes/range.js -> classes/range.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:     this.loose = !!options.loose",
      "27:     this.includePrerelease = !!options.includePrerelease",
      "30:     this.raw = range",
      "32:       .split('||')",
      "38:       .filter(c => c.length)",
      "40:     if (!this.set.length) {",
      "42:     }",
      "",
      "[Removed Lines]",
      "31:     this.set = range",
      "34:       .map(r => this.parseRange(r.trim()))",
      "41:       throw new TypeError(`Invalid SemVer Range: ${range}`)",
      "",
      "[Added Lines]",
      "33:       .trim()",
      "34:       .split(/\\s+/)",
      "35:       .join(' ')",
      "38:     this.set = this.raw",
      "41:       .map(r => this.parseRange(r))",
      "48:       throw new TypeError(`Invalid SemVer Range: ${this.raw}`)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:   format () {",
      "66:     this.range = this.set",
      "70:       .join('||')",
      "71:       .trim()",
      "72:     return this.range",
      "",
      "[Removed Lines]",
      "67:       .map((comps) => {",
      "68:         return comps.join(' ').trim()",
      "69:       })",
      "",
      "[Added Lines]",
      "74:       .map((comps) => comps.join(' ').trim())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "77:   }",
      "79:   parseRange (range) {",
      "84:     const memoOpts =",
      "",
      "[Removed Lines]",
      "80:     range = range.trim()",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "106:     range = range.replace(re[t.CARETTRIM], caretTrimReplace)",
      "",
      "[Removed Lines]",
      "109:     range = range.split(/\\s+/).join(' ')",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "203: const debug = require('../internal/debug')",
      "204: const SemVer = require('./semver')",
      "205: const {",
      "207:   t,",
      "208:   comparatorTrimReplace,",
      "209:   tildeTrimReplace,",
      "",
      "[Removed Lines]",
      "206:   re,",
      "",
      "[Added Lines]",
      "206:   safeRe: re,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "265: const replaceTilde = (comp, options) => {",
      "266:   const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]",
      "",
      "[Removed Lines]",
      "260: const replaceTildes = (comp, options) =>",
      "261:   comp.trim().split(/\\s+/).map((c) => {",
      "262:     return replaceTilde(c, options)",
      "263:   }).join(' ')",
      "",
      "[Added Lines]",
      "260: const replaceTildes = (comp, options) => {",
      "261:   return comp",
      "262:     .trim()",
      "263:     .split(/\\s+/)",
      "264:     .map((c) => replaceTilde(c, options))",
      "265:     .join(' ')",
      "266: }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "306: const replaceCaret = (comp, options) => {",
      "307:   debug('caret', comp, options)",
      "",
      "[Removed Lines]",
      "301: const replaceCarets = (comp, options) =>",
      "302:   comp.trim().split(/\\s+/).map((c) => {",
      "303:     return replaceCaret(c, options)",
      "304:   }).join(' ')",
      "",
      "[Added Lines]",
      "304: const replaceCarets = (comp, options) => {",
      "305:   return comp",
      "306:     .trim()",
      "307:     .split(/\\s+/)",
      "308:     .map((c) => replaceCaret(c, options))",
      "309:     .join(' ')",
      "310: }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "359: const replaceXRanges = (comp, options) => {",
      "360:   debug('replaceXRanges', comp, options)",
      "364: }",
      "366: const replaceXRange = (comp, options) => {",
      "",
      "[Removed Lines]",
      "361:   return comp.split(/\\s+/).map((c) => {",
      "362:     return replaceXRange(c, options)",
      "363:   }).join(' ')",
      "",
      "[Added Lines]",
      "367:   return comp",
      "368:     .split(/\\s+/)",
      "369:     .map((c) => replaceXRange(c, options))",
      "370:     .join(' ')",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "443: const replaceStars = (comp, options) => {",
      "444:   debug('replaceStars', comp, options)",
      "447: }",
      "449: const replaceGTE0 = (comp, options) => {",
      "450:   debug('replaceGTE0', comp, options)",
      "452:     .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')",
      "453: }",
      "",
      "[Removed Lines]",
      "446:   return comp.trim().replace(re[t.STAR], '')",
      "451:   return comp.trim()",
      "",
      "[Added Lines]",
      "453:   return comp",
      "454:     .trim()",
      "455:     .replace(re[t.STAR], '')",
      "460:   return comp",
      "461:     .trim()",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "486:     to = `<=${to}`",
      "487:   }",
      "490: }",
      "492: const testSet = (set, version, options) => {",
      "",
      "[Removed Lines]",
      "489:   return (`${from} ${to}`).trim()",
      "",
      "[Added Lines]",
      "499:   return `${from} ${to}`.trim()",
      "",
      "---------------"
    ],
    "classes/semver.js||classes/semver.js": [
      "File: classes/semver.js -> classes/semver.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: const debug = require('../internal/debug')",
      "2: const { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')",
      "5: const parseOptions = require('../internal/parse-options')",
      "6: const { compareIdentifiers } = require('../internal/identifiers')",
      "",
      "[Removed Lines]",
      "3: const { re, t } = require('../internal/re')",
      "",
      "[Added Lines]",
      "3: const { safeRe: re, t } = require('../internal/re')",
      "",
      "---------------"
    ],
    "functions/coerce.js||functions/coerce.js": [
      "File: functions/coerce.js -> functions/coerce.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: const SemVer = require('../classes/semver')",
      "2: const parse = require('./parse')",
      "5: const coerce = (version, options) => {",
      "6:   if (version instanceof SemVer) {",
      "",
      "[Removed Lines]",
      "3: const { re, t } = require('../internal/re')",
      "",
      "[Added Lines]",
      "3: const { safeRe: re, t } = require('../internal/re')",
      "",
      "---------------"
    ],
    "internal/re.js||internal/re.js": [
      "File: internal/re.js -> internal/re.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: const re = exports.re = []",
      "7: const src = exports.src = []",
      "8: const t = exports.t = {}",
      "9: let R = 0",
      "11: const createToken = (name, value, isGlobal) => {",
      "12:   const index = R++",
      "13:   debug(name, index, value)",
      "14:   t[name] = index",
      "15:   src[index] = value",
      "16:   re[index] = new RegExp(value, isGlobal ? 'g' : undefined)",
      "17: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: const safeRe = exports.safeRe = []",
      "19:   const safe = value",
      "20:     .split('\\\\s*').join('\\\\s{0,1}')",
      "21:     .split('\\\\s+').join('\\\\s')",
      "27:   safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)",
      "",
      "---------------"
    ],
    "test/integration/whitespace.js||test/integration/whitespace.js": [
      "File: test/integration/whitespace.js -> test/integration/whitespace.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: const { test } = require('tap')",
      "2: const Range = require('../../classes/range')",
      "3: const SemVer = require('../../classes/semver')",
      "4: const Comparator = require('../../classes/comparator')",
      "5: const validRange = require('../../ranges/valid')",
      "6: const minVersion = require('../../ranges/min-version')",
      "7: const minSatisfying = require('../../ranges/min-satisfying')",
      "8: const maxSatisfying = require('../../ranges/max-satisfying')",
      "10: const s = (n = 500000) => ' '.repeat(n)",
      "12: test('regex dos via range whitespace', (t) => {",
      "16:   const r = `1.2.3 ${s()} <1.3.0`",
      "18:   t.equal(new Range(r).range, '1.2.3 <1.3.0')",
      "19:   t.equal(validRange(r), '1.2.3 <1.3.0')",
      "20:   t.equal(minVersion(r).version, '1.2.3')",
      "21:   t.equal(minSatisfying(['1.2.3'], r), '1.2.3')",
      "22:   t.equal(maxSatisfying(['1.2.3'], r), '1.2.3')",
      "24:   t.end()",
      "25: })",
      "27: test('semver version', (t) => {",
      "28:   const v = `${s(125)}1.2.3${s(125)}`",
      "29:   const tooLong = `${s()}1.2.3${s()}`",
      "30:   t.equal(new SemVer(v).version, '1.2.3')",
      "31:   t.throws(() => new SemVer(tooLong))",
      "32:   t.end()",
      "33: })",
      "35: test('comparator', (t) => {",
      "36:   const c = `${s()}<${s()}1.2.3${s()}`",
      "37:   t.equal(new Comparator(c).value, '<1.2.3')",
      "38:   t.end()",
      "39: })",
      "",
      "---------------"
    ],
    "test/internal/re.js||test/internal/re.js": [
      "File: test/internal/re.js -> test/internal/re.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: const { test } = require('tap')",
      "3: const semver = require('../../')",
      "5: test('has a list of src, re, and tokens', (t) => {",
      "",
      "[Removed Lines]",
      "2: const { src, re } = require('../../internal/re')",
      "",
      "[Added Lines]",
      "2: const { src, re, safeRe } = require('../../internal/re')",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "13:   for (const i in semver.tokens) {",
      "14:     t.match(semver.tokens[i], Number, 'tokens are numbers')",
      "15:   }",
      "16:   t.end()",
      "17: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17:   safeRe.forEach(r => {",
      "18:     t.notMatch(r.source, '\\\\s+', 'safe regex do not contain greedy whitespace')",
      "19:     t.notMatch(r.source, '\\\\s*', 'safe regex do not contain greedy whitespace')",
      "20:   })",
      "",
      "---------------"
    ],
    "test/map.js||test/map.js": [
      "File: test/map.js -> test/map.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: const t = require('tap')",
      "24:     }",
      "25:   }",
      "32: }",
      "",
      "[Removed Lines]",
      "4: const ignore = [",
      "5:   '.git',",
      "6:   '.github',",
      "7:   '.commitlintrc.js',",
      "8:   '.eslintrc.js',",
      "9:   '.eslintrc.local.js',",
      "10:   'node_modules',",
      "11:   'coverage',",
      "12:   'tap-snapshots',",
      "13:   'test',",
      "14:   'fixtures',",
      "15: ]",
      "17: const { statSync, readdirSync } = require('fs')",
      "18: const find = (folder, set = [], root = true) => {",
      "19:   const ent = readdirSync(folder)",
      "20:   set.push(...ent.filter(f => !ignore.includes(f) && /\\.m?js$/.test(f)).map(f => folder + '/' + f))",
      "21:   for (const e of ent.filter(f => !ignore.includes(f) && !/\\.m?js$/.test(f))) {",
      "22:     if (statSync(folder + '/' + e).isDirectory()) {",
      "23:       find(folder + '/' + e, set, false)",
      "26:   if (!root) {",
      "27:     return",
      "28:   }",
      "29:   return set.map(f => f.slice(folder.length + 1)",
      "30:     .replace(/\\\\/g, '/'))",
      "31:     .sort((a, b) => a.localeCompare(b))",
      "34: const { resolve } = require('path')",
      "35: const root = resolve(__dirname, '..')",
      "37: const sut = find(root)",
      "38: const tests = find(root + '/test')",
      "39: t.strictSame(sut, tests, 'test files should match system files')",
      "40: const map = require('../map.js')",
      "42: for (const testFile of tests) {",
      "43:   t.test(testFile, t => {",
      "44:     t.plan(1)",
      "46:     const systemFiles = [].concat(map(testFile))",
      "47:     t.ok(systemFiles.some(sys => sut.includes(sys)), 'test covers a file')",
      "48:   })",
      "49: }",
      "",
      "[Added Lines]",
      "2: const { resolve, join, relative, extname, dirname, basename } = require('path')",
      "3: const { statSync, readdirSync } = require('fs')",
      "4: const map = require('../map.js')",
      "5: const pkg = require('../package.json')",
      "7: const ROOT = resolve(__dirname, '..')",
      "8: const TEST = join(ROOT, 'test')",
      "9: const IGNORE_DIRS = ['fixtures', 'integration']",
      "11: const getFile = (f) => {",
      "12:   try {",
      "13:     if (statSync(f).isFile()) {",
      "14:       return extname(f) === '.js' ? [f] : []",
      "16:   } catch {",
      "17:     return []",
      "21: const walk = (item, res = []) => getFile(item) || readdirSync(item)",
      "22:   .map(f => join(item, f))",
      "23:   .reduce((acc, f) => acc.concat(statSync(f).isDirectory() ? walk(f, res) : getFile(f)), [])",
      "24:   .filter(Boolean)",
      "26: const walkAll = (items, relativeTo) => items",
      "27:   .reduce((acc, f) => acc.concat(walk(join(ROOT, f))), [])",
      "28:   .map((f) => relative(relativeTo, f))",
      "29:   .sort()",
      "31: t.test('tests match system', t => {",
      "32:   const sut = walkAll([pkg.tap['coverage-map'], ...pkg.files], ROOT)",
      "33:   const tests = walkAll([basename(TEST)], TEST)",
      "34:     .filter(f => !IGNORE_DIRS.includes(dirname(f)))",
      "36:   t.strictSame(sut, tests, 'test files should match system files')",
      "38:   for (const f of tests) {",
      "39:     t.test(f, t => {",
      "40:       t.plan(1)",
      "41:       t.ok(sut.includes(map(f)), 'test covers a file')",
      "42:     })",
      "43:   }",
      "45:   t.end()",
      "46: })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "abdd93d55496d22e3c15a454a5cf13f101e48bce",
      "candidate_info": {
        "commit_hash": "abdd93d55496d22e3c15a454a5cf13f101e48bce",
        "repo": "npm/node-semver",
        "commit_url": "https://github.com/npm/node-semver/commit/abdd93d55496d22e3c15a454a5cf13f101e48bce",
        "files": [
          "classes/range.js",
          "internal/constants.js",
          "internal/re.js",
          "test/integration/whitespace.js"
        ],
        "message": "fix: set max lengths in regex for numeric and build identifiers (#571)",
        "before_after_code_files": [
          "classes/range.js||classes/range.js",
          "internal/constants.js||internal/constants.js",
          "internal/re.js||internal/re.js",
          "test/integration/whitespace.js||test/integration/whitespace.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "classes/range.js||classes/range.js",
            "internal/re.js||internal/re.js",
            "test/integration/whitespace.js||test/integration/whitespace.js"
          ],
          "candidate": [
            "classes/range.js||classes/range.js",
            "internal/re.js||internal/re.js",
            "test/integration/whitespace.js||test/integration/whitespace.js"
          ]
        }
      },
      "candidate_diff": {
        "classes/range.js||classes/range.js": [
          "File: classes/range.js -> classes/range.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]",
          "99:     range = range.replace(hr, hyphenReplace(this.options.includePrerelease))",
          "100:     debug('hyphen replace', range)",
          "102:     range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)",
          "103:     debug('comparator trim', range)",
          "106:     range = range.replace(re[t.TILDETRIM], tildeTrimReplace)",
          "109:     range = range.replace(re[t.CARETTRIM], caretTrimReplace)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:     debug('tilde trim', range)",
          "112:     debug('caret trim', range)",
          "",
          "---------------"
        ],
        "internal/constants.js||internal/constants.js": [
          "File: internal/constants.js -> internal/constants.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: const MAX_SAFE_COMPONENT_LENGTH = 16",
          "12: const RELEASE_TYPES = [",
          "13:   'major',",
          "14:   'premajor',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: module.exports = {",
          "23:   MAX_LENGTH,",
          "24:   MAX_SAFE_COMPONENT_LENGTH,",
          "25:   MAX_SAFE_INTEGER,",
          "26:   RELEASE_TYPES,",
          "27:   SEMVER_SPEC_VERSION,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:   MAX_SAFE_BUILD_LENGTH,",
          "",
          "---------------"
        ],
        "internal/re.js||internal/re.js": [
          "File: internal/re.js -> internal/re.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: const debug = require('./debug')",
          "3: exports = module.exports = {}",
          "",
          "[Removed Lines]",
          "1: const { MAX_SAFE_COMPONENT_LENGTH } = require('./constants')",
          "",
          "[Added Lines]",
          "1: const { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH } = require('./constants')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9: const t = exports.t = {}",
          "10: let R = 0",
          "12: const createToken = (name, value, isGlobal) => {",
          "22:   const index = R++",
          "23:   debug(name, index, value)",
          "24:   t[name] = index",
          "",
          "[Removed Lines]",
          "19:   const safe = value",
          "20:     .split('\\\\s*').join('\\\\s{0,1}')",
          "21:     .split('\\\\s+').join('\\\\s')",
          "",
          "[Added Lines]",
          "12: const LETTERDASHNUMBER = '[a-zA-Z0-9-]'",
          "20: const safeRegexReplacements = [",
          "21:   ['\\\\s', 1],",
          "22:   ['\\\\d', MAX_SAFE_COMPONENT_LENGTH],",
          "23:   [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],",
          "24: ]",
          "26: const makeSafeRegex = (value) => {",
          "27:   for (const [token, max] of safeRegexReplacements) {",
          "28:     value = value",
          "29:       .split(`${token}*`).join(`${token}{0,${max}}`)",
          "30:       .split(`${token}+`).join(`${token}{1,${max}}`)",
          "31:   }",
          "32:   return value",
          "33: }",
          "36:   const safe = makeSafeRegex(value)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36: createToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')",
          "",
          "[Removed Lines]",
          "37: createToken('NUMERICIDENTIFIERLOOSE', '[0-9]+')",
          "43: createToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*')",
          "",
          "[Added Lines]",
          "52: createToken('NUMERICIDENTIFIERLOOSE', '\\\\d+')",
          "58: createToken('NONNUMERICIDENTIFIER', `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "78: createToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+')",
          "",
          "[Added Lines]",
          "93: createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)",
          "",
          "---------------"
        ],
        "test/integration/whitespace.js||test/integration/whitespace.js": [
          "File: test/integration/whitespace.js -> test/integration/whitespace.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const minSatisfying = require('../../ranges/min-satisfying')",
          "8: const maxSatisfying = require('../../ranges/max-satisfying')",
          "18:   t.equal(new Range(r).range, '1.2.3 <1.3.0')",
          "19:   t.equal(validRange(r), '1.2.3 <1.3.0')",
          "20:   t.equal(minVersion(r).version, '1.2.3')",
          "21:   t.equal(minSatisfying(['1.2.3'], r), '1.2.3')",
          "22:   t.equal(maxSatisfying(['1.2.3'], r), '1.2.3')",
          "24:   t.end()",
          "25: })",
          "27: test('semver version', (t) => {",
          "30:   t.equal(new SemVer(v).version, '1.2.3')",
          "31:   t.throws(() => new SemVer(tooLong))",
          "32:   t.end()",
          "33: })",
          "35: test('comparator', (t) => {",
          "38:   t.end()",
          "39: })",
          "",
          "[Removed Lines]",
          "10: const s = (n = 500000) => ' '.repeat(n)",
          "12: test('regex dos via range whitespace', (t) => {",
          "16:   const r = `1.2.3 ${s()} <1.3.0`",
          "28:   const v = `${s(125)}1.2.3${s(125)}`",
          "29:   const tooLong = `${s()}1.2.3${s()}`",
          "36:   const c = `${s()}<${s()}1.2.3${s()}`",
          "37:   t.equal(new Comparator(c).value, '<1.2.3')",
          "",
          "[Added Lines]",
          "10: const wsMedium = ' '.repeat(125)",
          "11: const wsLarge = ' '.repeat(500000)",
          "12: const zeroLarge = '0'.repeat(500000)",
          "14: test('range with whitespace', (t) => {",
          "18:   const r = `1.2.3 ${wsLarge} <1.3.0`",
          "24:   t.end()",
          "25: })",
          "27: test('range with 0', (t) => {",
          "28:   const r = `1.2.3 ${zeroLarge} <1.3.0`",
          "29:   t.throws(() => new Range(r).range)",
          "30:   t.equal(validRange(r), null)",
          "31:   t.throws(() => minVersion(r).version)",
          "32:   t.equal(minSatisfying(['1.2.3']), null)",
          "33:   t.equal(maxSatisfying(['1.2.3']), null)",
          "38:   const v = `${wsMedium}1.2.3${wsMedium}`",
          "39:   const tooLong = `${wsLarge}1.2.3${wsLarge}`",
          "46:   const comparator = `${wsLarge}<${wsLarge}1.2.3${wsLarge}`",
          "47:   t.equal(new Comparator(comparator).value, '<1.2.3')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f0f6b19a54b1ba7e1c62af2dfba61f7a4fa68d5",
      "candidate_info": {
        "commit_hash": "4f0f6b19a54b1ba7e1c62af2dfba61f7a4fa68d5",
        "repo": "npm/node-semver",
        "commit_url": "https://github.com/npm/node-semver/commit/4f0f6b19a54b1ba7e1c62af2dfba61f7a4fa68d5",
        "files": [
          "test/integration/whitespace.js"
        ],
        "message": "chore: fix arguments in whitespace test (#574)",
        "before_after_code_files": [
          "test/integration/whitespace.js||test/integration/whitespace.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/integration/whitespace.js||test/integration/whitespace.js"
          ],
          "candidate": [
            "test/integration/whitespace.js||test/integration/whitespace.js"
          ]
        }
      },
      "candidate_diff": {
        "test/integration/whitespace.js||test/integration/whitespace.js": [
          "File: test/integration/whitespace.js -> test/integration/whitespace.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   t.throws(() => new Range(r).range)",
          "30:   t.equal(validRange(r), null)",
          "31:   t.throws(() => minVersion(r).version)",
          "34:   t.end()",
          "35: })",
          "",
          "[Removed Lines]",
          "32:   t.equal(minSatisfying(['1.2.3']), null)",
          "33:   t.equal(maxSatisfying(['1.2.3']), null)",
          "",
          "[Added Lines]",
          "32:   t.equal(minSatisfying(['1.2.3'], r), null)",
          "33:   t.equal(maxSatisfying(['1.2.3'], r), null)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc6fde2d34b95cb600d126649d926901bd2a9703",
      "candidate_info": {
        "commit_hash": "cc6fde2d34b95cb600d126649d926901bd2a9703",
        "repo": "npm/node-semver",
        "commit_url": "https://github.com/npm/node-semver/commit/cc6fde2d34b95cb600d126649d926901bd2a9703",
        "files": [
          "classes/range.js",
          "test/fixtures/range-exclude.js"
        ],
        "message": "fix: trim each range set before parsing\n\nFixes #587",
        "before_after_code_files": [
          "classes/range.js||classes/range.js",
          "test/fixtures/range-exclude.js||test/fixtures/range-exclude.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "classes/range.js||classes/range.js"
          ],
          "candidate": [
            "classes/range.js||classes/range.js"
          ]
        }
      },
      "candidate_diff": {
        "classes/range.js||classes/range.js": [
          "File: classes/range.js -> classes/range.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     this.set = this.raw",
          "39:       .split('||')",
          "",
          "[Removed Lines]",
          "41:       .map(r => this.parseRange(r))",
          "",
          "[Added Lines]",
          "41:       .map(r => this.parseRange(r.trim()))",
          "",
          "---------------"
        ],
        "test/fixtures/range-exclude.js||test/fixtures/range-exclude.js": [
          "File: test/fixtures/range-exclude.js -> test/fixtures/range-exclude.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   ['>=1.0.0 <1.1.0', '1.1.0', { includePrerelease: true }],",
          "103:   ['>=1.0.0 <1.1.0', '1.1.0-pre'],",
          "104:   ['>=1.0.0 <1.1.0-pre', '1.1.0-pre'],",
          "105: ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:   ['== 1.0.0 || foo', '2.0.0', { loose: true }],",
          "",
          "---------------"
        ]
      }
    }
  ]
}