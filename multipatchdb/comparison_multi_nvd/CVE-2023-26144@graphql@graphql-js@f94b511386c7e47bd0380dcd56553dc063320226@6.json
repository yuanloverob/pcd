{
  "cve_id": "CVE-2023-26144",
  "cve_desc": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
  "repo": "graphql/graphql-js",
  "patch_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
  "patch_info": {
    "commit_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
    "repo": "graphql/graphql-js",
    "commit_url": "https://github.com/graphql/graphql-js/commit/f94b511386c7e47bd0380dcd56553dc063320226",
    "files": [
      "benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ],
    "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3958)\n\nCo-authored-by: AaronMoat <AaronMoat@users.noreply.github.com>\nCo-authored-by: Ivan Goncharov <ivan.goncharov.ua@gmail.com>\nResolves https://github.com/graphql/graphql-js/issues/3955 (at least",
    "before_after_code_files": [
      "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ]
  },
  "patch_diff": {
    "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
      "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { graphqlSync } from 'graphql/graphql.js';",
      "2: import { buildSchema } from 'graphql/utilities/buildASTSchema.js';",
      "4: const schema = buildSchema('type Query { hello: String! }');",
      "5: const source = `{ ${'hello '.repeat(250)}}`;",
      "7: export const benchmark = {",
      "8:   name: 'Many repeated fields',",
      "9:   count: 5,",
      "10:   measure() {",
      "11:     graphqlSync({ schema, source });",
      "12:   },",
      "13: };",
      "",
      "---------------"
    ],
    "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts": [
      "File: src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts -> src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "179:     ]);",
      "180:   });",
      "182:   it('mix of stream and no stream', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:   it('different stream directive extra argument', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "185:         name @stream(label: \"streamLabel\", initialCount: 1)",
      "186:         name @stream(label: \"streamLabel\", initialCount: 1, extraArg: true)",
      "187:       }",
      "188:     `).toDeepEqual([",
      "189:       {",
      "190:         message:",
      "191:           'Fields \"name\" conflict because they have differing stream directives. Use different aliases on the fields to fetch both if this was intentional.',",
      "192:         locations: [",
      "193:           { line: 3, column: 9 },",
      "194:           { line: 4, column: 9 },",
      "195:         ],",
      "196:       },",
      "197:     ]);",
      "198:   });",
      "",
      "---------------"
    ],
    "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
      "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   DirectiveNode,",
      "8:   FieldNode,",
      "9:   FragmentDefinitionNode,",
      "11:   SelectionSetNode,",
      "12: } from '../../language/ast.js';",
      "13: import { Kind } from '../../language/kinds.js';",
      "14: import { print } from '../../language/printer.js';",
      "",
      "[Removed Lines]",
      "10:   ObjectValueNode,",
      "",
      "[Added Lines]",
      "11:   ValueNode,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "592:     }",
      "596:       return [",
      "597:         [responseName, 'they have differing arguments'],",
      "598:         [node1],",
      "",
      "[Removed Lines]",
      "595:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
      "",
      "[Added Lines]",
      "595:     if (!sameArguments(node1, node2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "649:   }",
      "650: }",
      "665: }",
      "667: function getStreamDirective(",
      "",
      "[Removed Lines]",
      "652: function stringifyArguments(fieldNode: FieldNode | DirectiveNode): string {",
      "654:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
      "656:   const inputObjectWithArgs: ObjectValueNode = {",
      "657:     kind: Kind.OBJECT,",
      "658:     fields: args.map((argNode) => ({",
      "659:       kind: Kind.OBJECT_FIELD,",
      "660:       name: argNode.name,",
      "661:       value: argNode.value,",
      "662:     })),",
      "663:   };",
      "664:   return print(sortValueNode(inputObjectWithArgs));",
      "",
      "[Added Lines]",
      "652: function sameArguments(",
      "653:   node1: FieldNode | DirectiveNode,",
      "654:   node2: FieldNode | DirectiveNode,",
      "655: ): boolean {",
      "656:   const args1 = node1.arguments;",
      "657:   const args2 = node2.arguments;",
      "659:   if (args1 === undefined || args1.length === 0) {",
      "660:     return args2 === undefined || args2.length === 0;",
      "661:   }",
      "662:   if (args2 === undefined || args2.length === 0) {",
      "663:     return false;",
      "664:   }",
      "666:   if (args1.length !== args2.length) {",
      "667:     return false;",
      "668:   }",
      "670:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
      "671:   return args1.every((arg1) => {",
      "672:     const value1 = arg1.value;",
      "673:     const value2 = values2.get(arg1.name.value);",
      "674:     if (value2 === undefined) {",
      "675:       return false;",
      "676:     }",
      "678:     return stringifyValue(value1) === stringifyValue(value2);",
      "679:   });",
      "680: }",
      "682: function stringifyValue(value: ValueNode): string | null {",
      "683:   return print(sortValueNode(value));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "681:     return true;",
      "682:   } else if (stream1 && stream2) {",
      "685:   }",
      "687:   return false;",
      "",
      "[Removed Lines]",
      "684:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
      "",
      "[Added Lines]",
      "703:     return sameArguments(stream1, stream2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d9fc65623c16d455157a5e9df948c2eef57525bf",
      "candidate_info": {
        "commit_hash": "d9fc65623c16d455157a5e9df948c2eef57525bf",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/d9fc65623c16d455157a5e9df948c2eef57525bf",
        "files": [
          "src/execution/__tests__/lists-test.ts",
          "src/execution/execute.ts"
        ],
        "message": "return async iterables in the non incremental delivery case (#4144)\n\ncatching errors",
        "before_after_code_files": [
          "src/execution/__tests__/lists-test.ts||src/execution/__tests__/lists-test.ts",
          "src/execution/execute.ts||src/execution/execute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/__tests__/lists-test.ts||src/execution/__tests__/lists-test.ts": [
          "File: src/execution/__tests__/lists-test.ts -> src/execution/__tests__/lists-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { describe, it } from 'mocha';",
          "4: import { expectJSON } from '../../__testUtils__/expectJSON.js';",
          "",
          "[Removed Lines]",
          "1: import { expect } from 'chai';",
          "",
          "[Added Lines]",
          "1: import { assert, expect } from 'chai';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:       errors,",
          "246:     });",
          "247:   });",
          "248: });",
          "250: describe('Execute: Handles list nullability', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:   it('Returns async iterable when list nulls', async () => {",
          "250:     const values = [1, null, 2];",
          "251:     let i = 0;",
          "252:     let returned = false;",
          "253:     const listField = {",
          "254:       [Symbol.asyncIterator]: () => ({",
          "255:         next: () => Promise.resolve({ value: values[i++], done: false }),",
          "256:         return: () => {",
          "257:           returned = true;",
          "258:           return Promise.resolve({ value: undefined, done: true });",
          "259:         },",
          "260:       }),",
          "261:     };",
          "262:     const errors = [",
          "263:       {",
          "264:         message: 'Cannot return null for non-nullable field Query.listField.',",
          "265:         locations: [{ line: 1, column: 3 }],",
          "266:         path: ['listField', 1],",
          "267:       },",
          "268:     ];",
          "270:     expectJSON(await complete({ listField }, '[Int!]')).toDeepEqual({",
          "271:       data: { listField: null },",
          "272:       errors,",
          "273:     });",
          "274:     assert(returned);",
          "275:   });",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1094:   ];",
          "1095:   let index = 0;",
          "1096:   const streamUsage = getStreamUsage(exeContext, fieldGroup, path);",
          "1121:           path,",
          "1127:         }",
          "1156:           item,",
          "1157:           graphqlWrappedResult,",
          "1158:           exeContext,",
          "1159:           itemType,",
          "",
          "[Removed Lines]",
          "1098:   while (true) {",
          "1099:     if (streamUsage && index >= streamUsage.initialCount) {",
          "1100:       const streamItemQueue = buildAsyncStreamItemQueue(",
          "1101:         index,",
          "1102:         path,",
          "1103:         asyncIterator,",
          "1104:         exeContext,",
          "1105:         streamUsage.fieldGroup,",
          "1106:         info,",
          "1107:         itemType,",
          "1108:       );",
          "1110:       const returnFn = asyncIterator.return;",
          "1111:       let streamRecord: StreamRecord | CancellableStreamRecord;",
          "1112:       if (returnFn === undefined) {",
          "1113:         streamRecord = {",
          "1114:           label: streamUsage.label,",
          "1115:           path,",
          "1116:           streamItemQueue,",
          "1117:         };",
          "1118:       } else {",
          "1119:         streamRecord = {",
          "1120:           label: streamUsage.label,",
          "1122:           streamItemQueue,",
          "1123:           earlyReturn: returnFn.bind(asyncIterator),",
          "1124:         };",
          "1125:         if (exeContext.cancellableStreams === undefined) {",
          "1126:           exeContext.cancellableStreams = new Set();",
          "1128:         exeContext.cancellableStreams.add(streamRecord);",
          "1129:       }",
          "1131:       addIncrementalDataRecords(graphqlWrappedResult, [streamRecord]);",
          "1132:       break;",
          "1133:     }",
          "1135:     const itemPath = addPath(path, index, undefined);",
          "1136:     let iteration;",
          "1137:     try {",
          "1139:       iteration = await asyncIterator.next();",
          "1140:     } catch (rawError) {",
          "1141:       throw locatedError(rawError, toNodes(fieldGroup), pathToArray(path));",
          "1142:     }",
          "1146:     if (iteration.done) {",
          "1147:       break;",
          "1148:     }",
          "1150:     const item = iteration.value;",
          "1153:     if (isPromise(item)) {",
          "1154:       completedResults.push(",
          "1155:         completePromisedListItemValue(",
          "",
          "[Added Lines]",
          "1097:   const earlyReturn =",
          "1098:     asyncIterator.return === undefined",
          "1099:       ? undefined",
          "1100:       : asyncIterator.return.bind(asyncIterator);",
          "1101:   try {",
          "1103:     while (true) {",
          "1104:       if (streamUsage && index >= streamUsage.initialCount) {",
          "1105:         const streamItemQueue = buildAsyncStreamItemQueue(",
          "1106:           index,",
          "1108:           asyncIterator,",
          "1109:           exeContext,",
          "1110:           streamUsage.fieldGroup,",
          "1111:           info,",
          "1112:           itemType,",
          "1113:         );",
          "1115:         let streamRecord: StreamRecord | CancellableStreamRecord;",
          "1116:         if (earlyReturn === undefined) {",
          "1117:           streamRecord = {",
          "1118:             label: streamUsage.label,",
          "1119:             path,",
          "1120:             streamItemQueue,",
          "1121:           };",
          "1122:         } else {",
          "1123:           streamRecord = {",
          "1124:             label: streamUsage.label,",
          "1125:             path,",
          "1126:             earlyReturn,",
          "1127:             streamItemQueue,",
          "1128:           };",
          "1129:           if (exeContext.cancellableStreams === undefined) {",
          "1130:             exeContext.cancellableStreams = new Set();",
          "1131:           }",
          "1132:           exeContext.cancellableStreams.add(streamRecord);",
          "1135:         addIncrementalDataRecords(graphqlWrappedResult, [streamRecord]);",
          "1136:         break;",
          "1137:       }",
          "1139:       const itemPath = addPath(path, index, undefined);",
          "1140:       let iteration;",
          "1141:       try {",
          "1143:         iteration = await asyncIterator.next();",
          "1144:       } catch (rawError) {",
          "1145:         throw locatedError(rawError, toNodes(fieldGroup), pathToArray(path));",
          "1146:       }",
          "1150:       if (iteration.done) {",
          "1151:         break;",
          "1152:       }",
          "1154:       const item = iteration.value;",
          "1157:       if (isPromise(item)) {",
          "1158:         completedResults.push(",
          "1159:           completePromisedListItemValue(",
          "1160:             item,",
          "1161:             graphqlWrappedResult,",
          "1162:             exeContext,",
          "1163:             itemType,",
          "1164:             fieldGroup,",
          "1165:             info,",
          "1166:             itemPath,",
          "1167:             incrementalContext,",
          "1168:             deferMap,",
          "1169:           ),",
          "1170:         );",
          "1171:         containsPromise = true;",
          "1172:       } else if (",
          "1174:         completeListItemValue(",
          "1176:           completedResults,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1162:           itemPath,",
          "1163:           incrementalContext,",
          "1164:           deferMap,",
          "1186:     }",
          "1189:   }",
          "1191:   return containsPromise",
          "",
          "[Removed Lines]",
          "1165:         ),",
          "1166:       );",
          "1167:       containsPromise = true;",
          "1168:     } else if (",
          "1170:       completeListItemValue(",
          "1171:         item,",
          "1172:         completedResults,",
          "1173:         graphqlWrappedResult,",
          "1174:         exeContext,",
          "1175:         itemType,",
          "1176:         fieldGroup,",
          "1177:         info,",
          "1178:         itemPath,",
          "1179:         incrementalContext,",
          "1180:         deferMap,",
          "1181:       )",
          "1184:     ) {",
          "1185:       containsPromise = true;",
          "1188:     index++;",
          "",
          "[Added Lines]",
          "1185:         )",
          "1188:       ) {",
          "1189:         containsPromise = true;",
          "1190:       }",
          "1192:       index++;",
          "1194:   } catch (error) {",
          "1195:     if (earlyReturn !== undefined) {",
          "1196:       earlyReturn().catch(() => {",
          "1199:       });",
          "1200:     }",
          "1201:     throw error;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6227a899aad15a8784d07e442b5df6e5ab16212",
      "candidate_info": {
        "commit_hash": "f6227a899aad15a8784d07e442b5df6e5ab16212",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/f6227a899aad15a8784d07e442b5df6e5ab16212",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/execute.ts",
          "src/execution/types.ts"
        ],
        "message": "refactor(incremental): simplify incremental graph by allowing mutations (#4112)\n\ndepends on #4108",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/execute.ts||src/execution/execute.ts",
          "src/execution/types.ts||src/execution/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   StreamRecord,",
          "16:   SubsequentResultRecord,",
          "17: } from './types.js';",
          "38: export class IncrementalGraph {",
          "45:   private _completedQueue: Array<IncrementalDataRecordResult>;",
          "46:   private _nextQueue: Array<",
          "",
          "[Removed Lines]",
          "18: import { isDeferredGroupedFieldSetRecord } from './types.js';",
          "20: interface DeferredFragmentNode {",
          "21:   deferredFragmentRecord: DeferredFragmentRecord;",
          "22:   deferredGroupedFieldSetRecords: Set<DeferredGroupedFieldSetRecord>;",
          "23:   reconcilableResults: Set<ReconcilableDeferredGroupedFieldSetResult>;",
          "24:   children: Set<SubsequentResultNode>;",
          "25: }",
          "27: function isDeferredFragmentNode(",
          "28:   node: SubsequentResultNode | undefined,",
          "29: ): node is DeferredFragmentNode {",
          "30:   return node !== undefined && 'deferredFragmentRecord' in node;",
          "31: }",
          "33: type SubsequentResultNode = DeferredFragmentNode | StreamRecord;",
          "39:   private _rootNodes: Set<SubsequentResultNode>;",
          "40:   private _deferredFragmentNodes: Map<",
          "41:     DeferredFragmentRecord,",
          "42:     DeferredFragmentNode",
          "43:   >;",
          "",
          "[Added Lines]",
          "18: import {",
          "19:   isDeferredFragmentRecord,",
          "20:   isDeferredGroupedFieldSetRecord,",
          "21: } from './types.js';",
          "27:   private _rootNodes: Set<SubsequentResultRecord>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   constructor() {",
          "51:     this._rootNodes = new Set();",
          "53:     this._completedQueue = [];",
          "54:     this._nextQueue = [];",
          "55:   }",
          "",
          "[Removed Lines]",
          "52:     this._deferredFragmentNodes = new Map();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:   getNewRootNodes(",
          "58:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "59:   ): ReadonlyArray<SubsequentResultRecord> {",
          "61:     this._addIncrementalDataRecords(",
          "62:       incrementalDataRecords,",
          "63:       undefined,",
          "",
          "[Removed Lines]",
          "60:     const initialResultChildren = new Set<SubsequentResultNode>();",
          "",
          "[Added Lines]",
          "43:     const initialResultChildren = new Set<SubsequentResultRecord>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "69:   addCompletedReconcilableDeferredGroupedFieldSet(",
          "70:     reconcilableResult: ReconcilableDeferredGroupedFieldSetResult,",
          "71:   ): void {",
          "76:         reconcilableResult.deferredGroupedFieldSetRecord,",
          "77:       );",
          "79:     }",
          "81:     const incrementalDataRecords = reconcilableResult.incrementalDataRecords;",
          "",
          "[Removed Lines]",
          "72:     for (const deferredFragmentNode of this._fragmentsToNodes(",
          "73:       reconcilableResult.deferredGroupedFieldSetRecord.deferredFragmentRecords,",
          "74:     )) {",
          "75:       deferredFragmentNode.deferredGroupedFieldSetRecords.delete(",
          "78:       deferredFragmentNode.reconcilableResults.add(reconcilableResult);",
          "",
          "[Added Lines]",
          "55:     for (const deferredFragmentRecord of reconcilableResult",
          "56:       .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "57:       deferredFragmentRecord.deferredGroupedFieldSetRecords.delete(",
          "60:       deferredFragmentRecord.reconcilableResults.add(reconcilableResult);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131:         reconcilableResults: ReadonlyArray<ReconcilableDeferredGroupedFieldSetResult>;",
          "132:       }",
          "133:     | undefined {",
          "140:       return;",
          "141:     }",
          "143:       return;",
          "144:     }",
          "145:     const reconcilableResults = Array.from(",
          "147:     );",
          "149:     for (const reconcilableResult of reconcilableResults) {",
          "155:           reconcilableResult,",
          "156:         );",
          "157:       }",
          "158:     }",
          "159:     const newRootNodes = this._promoteNonEmptyToRoot(",
          "161:     );",
          "162:     return { newRootNodes, reconcilableResults };",
          "163:   }",
          "",
          "[Removed Lines]",
          "134:     const deferredFragmentNode = this._deferredFragmentNodes.get(",
          "135:       deferredFragmentRecord,",
          "136:     );",
          "139:     if (deferredFragmentNode === undefined) {",
          "142:     if (deferredFragmentNode.deferredGroupedFieldSetRecords.size > 0) {",
          "146:       deferredFragmentNode.reconcilableResults,",
          "148:     this._removeRootNode(deferredFragmentNode);",
          "150:       for (const otherDeferredFragmentNode of this._fragmentsToNodes(",
          "151:         reconcilableResult.deferredGroupedFieldSetRecord",
          "152:           .deferredFragmentRecords,",
          "153:       )) {",
          "154:         otherDeferredFragmentNode.reconcilableResults.delete(",
          "160:       deferredFragmentNode.children,",
          "",
          "[Added Lines]",
          "118:     if (!this._rootNodes.has(deferredFragmentRecord)) {",
          "121:     if (deferredFragmentRecord.deferredGroupedFieldSetRecords.size > 0) {",
          "125:       deferredFragmentRecord.reconcilableResults,",
          "127:     this._removeRootNode(deferredFragmentRecord);",
          "129:       for (const otherDeferredFragmentRecord of reconcilableResult",
          "130:         .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "131:         otherDeferredFragmentRecord.reconcilableResults.delete(",
          "137:       deferredFragmentRecord.children,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "165:   removeDeferredFragment(",
          "166:     deferredFragmentRecord: DeferredFragmentRecord,",
          "167:   ): boolean {",
          "172:       return false;",
          "173:     }",
          "183:     return true;",
          "184:   }",
          "",
          "[Removed Lines]",
          "168:     const deferredFragmentNode = this._deferredFragmentNodes.get(",
          "169:       deferredFragmentRecord,",
          "170:     );",
          "171:     if (deferredFragmentNode === undefined) {",
          "174:     this._removeRootNode(deferredFragmentNode);",
          "175:     this._deferredFragmentNodes.delete(deferredFragmentRecord);",
          "178:     for (const child of deferredFragmentNode.children) {",
          "179:       if (isDeferredFragmentNode(child)) {",
          "180:         this.removeDeferredFragment(child.deferredFragmentRecord);",
          "181:       }",
          "182:     }",
          "",
          "[Added Lines]",
          "145:     if (!this._rootNodes.has(deferredFragmentRecord)) {",
          "148:     this._removeRootNode(deferredFragmentRecord);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "187:     this._removeRootNode(streamRecord);",
          "188:   }",
          "192:     if (this._rootNodes.size === 0) {",
          "193:       for (const resolve of this._nextQueue) {",
          "194:         resolve({ value: undefined, done: true });",
          "",
          "[Removed Lines]",
          "190:   private _removeRootNode(subsequentResultNode: SubsequentResultNode): void {",
          "191:     this._rootNodes.delete(subsequentResultNode);",
          "",
          "[Added Lines]",
          "156:   private _removeRootNode(",
          "157:     subsequentResultRecord: SubsequentResultRecord,",
          "158:   ): void {",
          "159:     this._rootNodes.delete(subsequentResultRecord);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "199:   private _addIncrementalDataRecords(",
          "200:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "201:     parents: ReadonlyArray<DeferredFragmentRecord> | undefined,",
          "203:   ): void {",
          "204:     for (const incrementalDataRecord of incrementalDataRecords) {",
          "205:       if (isDeferredGroupedFieldSetRecord(incrementalDataRecord)) {",
          "206:         for (const deferredFragmentRecord of incrementalDataRecord.deferredFragmentRecords) {",
          "208:             deferredFragmentRecord,",
          "209:             initialResultChildren,",
          "210:           );",
          "212:             incrementalDataRecord,",
          "213:           );",
          "214:         }",
          "",
          "[Removed Lines]",
          "202:     initialResultChildren?: Set<SubsequentResultNode> | undefined,",
          "207:           const deferredFragmentNode = this._addDeferredFragmentNode(",
          "211:           deferredFragmentNode.deferredGroupedFieldSetRecords.add(",
          "",
          "[Added Lines]",
          "170:     initialResultChildren?: Set<SubsequentResultRecord> | undefined,",
          "175:           this._addDeferredFragment(",
          "179:           deferredFragmentRecord.deferredGroupedFieldSetRecords.add(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "220:         initialResultChildren.add(incrementalDataRecord);",
          "221:       } else {",
          "222:         for (const parent of parents) {",
          "228:         }",
          "229:       }",
          "230:     }",
          "231:   }",
          "233:   private _promoteNonEmptyToRoot(",
          "235:   ): ReadonlyArray<SubsequentResultRecord> {",
          "236:     const newRootNodes: Array<SubsequentResultRecord> = [];",
          "237:     for (const node of maybeEmptyNewRootNodes) {",
          "239:         if (node.deferredGroupedFieldSetRecords.size > 0) {",
          "240:           for (const deferredGroupedFieldSetRecord of node.deferredGroupedFieldSetRecords) {",
          "241:             if (!this._completesRootNode(deferredGroupedFieldSetRecord)) {",
          "",
          "[Removed Lines]",
          "223:           const deferredFragmentNode = this._addDeferredFragmentNode(",
          "224:             parent,",
          "225:             initialResultChildren,",
          "226:           );",
          "227:           deferredFragmentNode.children.add(incrementalDataRecord);",
          "234:     maybeEmptyNewRootNodes: Set<SubsequentResultNode>,",
          "238:       if (isDeferredFragmentNode(node)) {",
          "",
          "[Added Lines]",
          "191:           this._addDeferredFragment(parent, initialResultChildren);",
          "192:           parent.children.add(incrementalDataRecord);",
          "199:     maybeEmptyNewRootNodes: Set<SubsequentResultRecord>,",
          "203:       if (isDeferredFragmentRecord(node)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "243:             }",
          "244:           }",
          "245:           this._rootNodes.add(node);",
          "247:           continue;",
          "248:         }",
          "250:         for (const child of node.children) {",
          "251:           maybeEmptyNewRootNodes.add(child);",
          "252:         }",
          "",
          "[Removed Lines]",
          "246:           newRootNodes.push(node.deferredFragmentRecord);",
          "249:         this._deferredFragmentNodes.delete(node.deferredFragmentRecord);",
          "",
          "[Added Lines]",
          "211:           newRootNodes.push(node);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "264:   private _completesRootNode(",
          "265:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "266:   ): boolean {",
          "280:   }",
          "283:     deferredFragmentRecord: DeferredFragmentRecord,",
          "291:     }",
          "302:     const parent = deferredFragmentRecord.parent;",
          "303:     if (parent === undefined) {",
          "304:       invariant(initialResultChildren !== undefined);",
          "307:     }",
          "314:   }",
          "316:   private _onDeferredGroupedFieldSet(",
          "",
          "[Removed Lines]",
          "267:     return this._fragmentsToNodes(",
          "268:       deferredGroupedFieldSetRecord.deferredFragmentRecords,",
          "269:     ).some((node) => this._rootNodes.has(node));",
          "270:   }",
          "272:   private _fragmentsToNodes(",
          "273:     deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>,",
          "274:   ): Array<DeferredFragmentNode> {",
          "275:     return deferredFragmentRecords",
          "276:       .map((deferredFragmentRecord) =>",
          "277:         this._deferredFragmentNodes.get(deferredFragmentRecord),",
          "278:       )",
          "279:       .filter<DeferredFragmentNode>(isDeferredFragmentNode);",
          "282:   private _addDeferredFragmentNode(",
          "284:     initialResultChildren: Set<SubsequentResultNode> | undefined,",
          "285:   ): DeferredFragmentNode {",
          "286:     let deferredFragmentNode = this._deferredFragmentNodes.get(",
          "287:       deferredFragmentRecord,",
          "288:     );",
          "289:     if (deferredFragmentNode !== undefined) {",
          "290:       return deferredFragmentNode;",
          "292:     deferredFragmentNode = {",
          "293:       deferredFragmentRecord,",
          "294:       deferredGroupedFieldSetRecords: new Set(),",
          "295:       reconcilableResults: new Set(),",
          "296:       children: new Set(),",
          "297:     };",
          "298:     this._deferredFragmentNodes.set(",
          "299:       deferredFragmentRecord,",
          "300:       deferredFragmentNode,",
          "301:     );",
          "305:       initialResultChildren.add(deferredFragmentNode);",
          "306:       return deferredFragmentNode;",
          "308:     const parentNode = this._addDeferredFragmentNode(",
          "309:       parent,",
          "310:       initialResultChildren,",
          "311:     );",
          "312:     parentNode.children.add(deferredFragmentNode);",
          "313:     return deferredFragmentNode;",
          "",
          "[Added Lines]",
          "231:     return deferredGroupedFieldSetRecord.deferredFragmentRecords.some(",
          "232:       (deferredFragmentRecord) => this._rootNodes.has(deferredFragmentRecord),",
          "233:     );",
          "236:   private _addDeferredFragment(",
          "238:     initialResultChildren: Set<SubsequentResultRecord> | undefined,",
          "239:   ): void {",
          "240:     if (this._rootNodes.has(deferredFragmentRecord)) {",
          "241:       return;",
          "246:       initialResultChildren.add(deferredFragmentRecord);",
          "247:       return;",
          "249:     parent.children.add(deferredFragmentRecord);",
          "250:     this._addDeferredFragment(parent, initialResultChildren);",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: import { mapAsyncIterable } from './mapAsyncIterable.js';",
          "64: import type {",
          "65:   CancellableStreamRecord,",
          "67:   DeferredGroupedFieldSetRecord,",
          "68:   DeferredGroupedFieldSetResult,",
          "69:   ExecutionResult,",
          "",
          "[Removed Lines]",
          "66:   DeferredFragmentRecord,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   StreamItemResult,",
          "74:   StreamRecord,",
          "75: } from './types.js';",
          "76: import {",
          "77:   getArgumentValues,",
          "78:   getDirectiveValues,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: import { DeferredFragmentRecord } from './types.js';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1676:         : deferredFragmentRecordFromDeferUsage(parentDeferUsage, newDeferMap);",
          "1680:       path,",
          "1682:       parent,",
          "1686:     newDeferMap.set(newDeferUsage, deferredFragmentRecord);",
          "",
          "[Removed Lines]",
          "1679:     const deferredFragmentRecord: DeferredFragmentRecord = {",
          "1681:       label: newDeferUsage.label,",
          "1683:     };",
          "",
          "[Added Lines]",
          "1679:     const deferredFragmentRecord = new DeferredFragmentRecord(",
          "1681:       newDeferUsage.label,",
          "1683:     );",
          "",
          "---------------"
        ],
        "src/execution/types.ts||src/execution/types.ts": [
          "File: src/execution/types.ts -> src/execution/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "215: export type SubsequentResultRecord = DeferredFragmentRecord | StreamRecord;",
          "218:   path: Path | undefined;",
          "219:   label: string | undefined;",
          "220:   id?: string | undefined;",
          "221:   parent: DeferredFragmentRecord | undefined;",
          "222: }",
          "224: export interface StreamItemResult {",
          "",
          "[Removed Lines]",
          "217: export interface DeferredFragmentRecord {",
          "",
          "[Added Lines]",
          "218: export class DeferredFragmentRecord {",
          "223:   deferredGroupedFieldSetRecords: Set<DeferredGroupedFieldSetRecord>;",
          "224:   reconcilableResults: Set<ReconcilableDeferredGroupedFieldSetResult>;",
          "225:   children: Set<SubsequentResultRecord>;",
          "227:   constructor(",
          "228:     path: Path | undefined,",
          "229:     label: string | undefined,",
          "230:     parent: DeferredFragmentRecord | undefined,",
          "231:   ) {",
          "232:     this.path = path;",
          "233:     this.label = label;",
          "234:     this.parent = parent;",
          "235:     this.deferredGroupedFieldSetRecords = new Set();",
          "236:     this.reconcilableResults = new Set();",
          "237:     this.children = new Set();",
          "238:   }",
          "239: }",
          "241: export function isDeferredFragmentRecord(",
          "242:   subsequentResultRecord: SubsequentResultRecord,",
          "243: ): subsequentResultRecord is DeferredFragmentRecord {",
          "244:   return subsequentResultRecord instanceof DeferredFragmentRecord;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c78bc1d96307d48b0f56224e53a336cb5f5e482f",
      "candidate_info": {
        "commit_hash": "c78bc1d96307d48b0f56224e53a336cb5f5e482f",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/c78bc1d96307d48b0f56224e53a336cb5f5e482f",
        "files": [
          "src/execution/__tests__/stream-test.ts"
        ],
        "message": "polish(incremental): improve IncrementalPublisher return test\n\nUse a stream that never resolves to better demonstrate how there will be a definite pending promise.\n\nCalling return on the underlying graph flushes the nextQueue anyway.",
        "before_after_code_files": [
          "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts": [
          "File: src/execution/__tests__/stream-test.ts -> src/execution/__tests__/stream-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2331:   });",
          "2332:   it('Returns underlying async iterables when returned generator is returned', async () => {",
          "2333:     let returned = false;",
          "2335:     const iterable = {",
          "2336:       [Symbol.asyncIterator]: () => ({",
          "2344:         return: () => {",
          "2345:           returned = true;",
          "2346:         },",
          "",
          "[Removed Lines]",
          "2334:     let index = 0;",
          "2337:         next: () => {",
          "2338:           const friend = friends[index++];",
          "2339:           if (friend == null) {",
          "2340:             return Promise.resolve({ done: true, value: undefined });",
          "2341:           }",
          "2342:           return Promise.resolve({ done: false, value: friend });",
          "2343:         },",
          "",
          "[Added Lines]",
          "2336:         next: () =>",
          "2337:           new Promise(() => {",
          "2339:           }),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2350:     const document = parse(`",
          "2351:       query {",
          "2353:           id",
          "2357:         }",
          "2358:       }",
          "2359:     `);",
          "",
          "[Removed Lines]",
          "2352:         friendList @stream(initialCount: 1) {",
          "2354:           ... @defer {",
          "2355:             name",
          "2356:           }",
          "",
          "[Added Lines]",
          "2348:         friendList @stream(initialCount: 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2371:     const result1 = executeResult.initialResult;",
          "2372:     expectJSON(result1).toDeepEqual({",
          "2373:       data: {",
          "2379:       },",
          "2384:       hasNext: true,",
          "2385:     });",
          "2386:     const returnPromise = iterator.return();",
          "2389:     expectJSON(result2).toDeepEqual({",
          "2390:       done: true,",
          "2391:       value: undefined,",
          "",
          "[Removed Lines]",
          "2374:         friendList: [",
          "2375:           {",
          "2376:             id: '1',",
          "2377:           },",
          "2378:         ],",
          "2380:       pending: [",
          "2381:         { id: '0', path: ['friendList', 0] },",
          "2382:         { id: '1', path: ['friendList'] },",
          "2383:       ],",
          "2388:     const result2 = await iterator.next();",
          "",
          "[Added Lines]",
          "2367:         friendList: [],",
          "2369:       pending: [{ id: '0', path: ['friendList'] }],",
          "2373:     const result2Promise = iterator.next();",
          "2376:     const result2 = await result2Promise;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03cc5dc77ada0c03b348154558bf512a0e922f4a",
      "candidate_info": {
        "commit_hash": "03cc5dc77ada0c03b348154558bf512a0e922f4a",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/03cc5dc77ada0c03b348154558bf512a0e922f4a",
        "files": [
          "src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts",
          "src/execution/__tests__/defer-test.ts"
        ],
        "message": "fix(incremental): emit only single completion when multiple deferred grouped field sets error",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts",
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts",
          "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:     return reconcilableResults;",
          "218:   }",
          "221:     const deferredFragmentNode = this._deferredFragmentNodes.get(",
          "222:       deferredFragmentRecord,",
          "223:     );",
          "226:     if (deferredFragmentNode === undefined) {",
          "228:     }",
          "229:     this._removePending(deferredFragmentNode);",
          "230:     this._deferredFragmentNodes.delete(deferredFragmentRecord);",
          "",
          "[Removed Lines]",
          "220:   removeDeferredFragment(deferredFragmentRecord: DeferredFragmentRecord): void {",
          "227:       return;",
          "",
          "[Added Lines]",
          "220:   removeDeferredFragment(",
          "221:     deferredFragmentRecord: DeferredFragmentRecord,",
          "222:   ): boolean {",
          "229:       return false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233:     for (const child of deferredFragmentNode.children) {",
          "234:       this.removeDeferredFragment(child.deferredFragmentRecord);",
          "235:     }",
          "236:   }",
          "238:   removeStream(streamRecord: StreamRecord): void {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:     return true;",
          "",
          "---------------"
        ],
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:       for (const deferredFragmentRecord of deferredGroupedFieldSetResult",
          "234:         .deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "235:         const id = deferredFragmentRecord.id;",
          "242:         }",
          "243:       }",
          "244:       return;",
          "245:     }",
          "",
          "[Removed Lines]",
          "236:         if (id !== undefined) {",
          "237:           context.completed.push({",
          "238:             id,",
          "239:             errors: deferredGroupedFieldSetResult.errors,",
          "240:           });",
          "241:           this._incrementalGraph.removeDeferredFragment(deferredFragmentRecord);",
          "",
          "[Added Lines]",
          "236:         if (",
          "237:           !this._incrementalGraph.removeDeferredFragment(deferredFragmentRecord)",
          "238:         ) {",
          "240:           continue;",
          "242:         invariant(id !== undefined);",
          "243:         context.completed.push({",
          "244:           id,",
          "245:           errors: deferredGroupedFieldSetResult.errors,",
          "246:         });",
          "247:         this._incrementalGraph.removeDeferredFragment(deferredFragmentRecord);",
          "",
          "---------------"
        ],
        "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts": [
          "File: src/execution/__tests__/defer-test.ts -> src/execution/__tests__/defer-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1334:     ]);",
          "1335:   });",
          "1337:   it('filters a payload with a null that cannot be merged', async () => {",
          "1338:     const document = parse(`",
          "1339:       query {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1337:   it('Handles multiple erroring deferred grouped field sets', async () => {",
          "1338:     const document = parse(`",
          "1339:       query {",
          "1340:         ... @defer {",
          "1341:           a {",
          "1342:             b {",
          "1343:               c {",
          "1344:                 someError: nonNullErrorField",
          "1345:               }",
          "1346:             }",
          "1347:           }",
          "1348:         }",
          "1349:         ... @defer {",
          "1350:           a {",
          "1351:             b {",
          "1352:               c {",
          "1353:                 anotherError: nonNullErrorField",
          "1354:               }",
          "1355:             }",
          "1356:           }",
          "1357:         }",
          "1358:       }",
          "1359:     `);",
          "1360:     const result = await complete(document, {",
          "1361:       a: {",
          "1362:         b: { c: { nonNullErrorField: null } },",
          "1363:       },",
          "1364:     });",
          "1365:     expectJSON(result).toDeepEqual([",
          "1366:       {",
          "1367:         data: {},",
          "1368:         pending: [",
          "1369:           { id: '0', path: [] },",
          "1370:           { id: '1', path: [] },",
          "1371:         ],",
          "1372:         hasNext: true,",
          "1373:       },",
          "1374:       {",
          "1375:         completed: [",
          "1376:           {",
          "1377:             id: '0',",
          "1378:             errors: [",
          "1379:               {",
          "1380:                 message:",
          "1381:                   'Cannot return null for non-nullable field c.nonNullErrorField.',",
          "1382:                 locations: [{ line: 7, column: 17 }],",
          "1383:                 path: ['a', 'b', 'c', 'someError'],",
          "1384:               },",
          "1385:             ],",
          "1386:           },",
          "1387:           {",
          "1388:             id: '1',",
          "1389:             errors: [",
          "1390:               {",
          "1391:                 message:",
          "1392:                   'Cannot return null for non-nullable field c.nonNullErrorField.',",
          "1393:                 locations: [{ line: 16, column: 17 }],",
          "1394:                 path: ['a', 'b', 'c', 'anotherError'],",
          "1395:               },",
          "1396:             ],",
          "1397:           },",
          "1398:         ],",
          "1399:         hasNext: false,",
          "1400:       },",
          "1401:     ]);",
          "1402:   });",
          "1404:   it('Handles multiple erroring deferred grouped field sets for the same fragment', async () => {",
          "1405:     const document = parse(`",
          "1406:       query {",
          "1407:         ... @defer {",
          "1408:           a {",
          "1409:             b {",
          "1410:               someC: c {",
          "1411:                 d: d",
          "1412:               }",
          "1413:               anotherC: c {",
          "1414:                 d: d",
          "1415:               }",
          "1416:             }",
          "1417:           }",
          "1418:         }",
          "1419:         ... @defer {",
          "1420:           a {",
          "1421:             b {",
          "1422:               someC: c {",
          "1423:                 someError: nonNullErrorField",
          "1424:               }",
          "1425:               anotherC: c {",
          "1426:                 anotherError: nonNullErrorField",
          "1427:               }",
          "1428:             }",
          "1429:           }",
          "1430:         }",
          "1431:       }",
          "1432:     `);",
          "1433:     const result = await complete(document, {",
          "1434:       a: {",
          "1435:         b: { c: { d: 'd', nonNullErrorField: null } },",
          "1436:       },",
          "1437:     });",
          "1438:     expectJSON(result).toDeepEqual([",
          "1439:       {",
          "1440:         data: {},",
          "1441:         pending: [",
          "1442:           { id: '0', path: [] },",
          "1443:           { id: '1', path: [] },",
          "1444:         ],",
          "1445:         hasNext: true,",
          "1446:       },",
          "1447:       {",
          "1448:         incremental: [",
          "1449:           {",
          "1450:             data: { a: { b: { someC: {}, anotherC: {} } } },",
          "1451:             id: '0',",
          "1452:           },",
          "1453:           {",
          "1454:             data: { d: 'd' },",
          "1455:             id: '0',",
          "1456:             subPath: ['a', 'b', 'someC'],",
          "1457:           },",
          "1458:           {",
          "1459:             data: { d: 'd' },",
          "1460:             id: '0',",
          "1461:             subPath: ['a', 'b', 'anotherC'],",
          "1462:           },",
          "1463:         ],",
          "1464:         completed: [",
          "1465:           {",
          "1466:             id: '1',",
          "1467:             errors: [",
          "1468:               {",
          "1469:                 message:",
          "1470:                   'Cannot return null for non-nullable field c.nonNullErrorField.',",
          "1471:                 locations: [{ line: 19, column: 17 }],",
          "1472:                 path: ['a', 'b', 'someC', 'someError'],",
          "1473:               },",
          "1474:             ],",
          "1475:           },",
          "1476:           { id: '0' },",
          "1477:         ],",
          "1478:         hasNext: false,",
          "1479:       },",
          "1480:     ]);",
          "1481:   });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfcc4e51b95271517bb4b59c26c0a1804b87e778",
      "candidate_info": {
        "commit_hash": "dfcc4e51b95271517bb4b59c26c0a1804b87e778",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/dfcc4e51b95271517bb4b59c26c0a1804b87e778",
        "files": [
          "src/execution/IncrementalGraph.ts"
        ],
        "message": "polish(incremental): move check for empty state to end of batch\n\nReduces the number of times we need to check as to whether to flush the next queue.",
        "before_after_code_files": [
          "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalGraph.ts||src/execution/IncrementalGraph.ts": [
          "File: src/execution/IncrementalGraph.ts -> src/execution/IncrementalGraph.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:     subsequentResultRecord: SubsequentResultRecord,",
          "158:   ): void {",
          "159:     this._rootNodes.delete(subsequentResultRecord);",
          "165:   }",
          "167:   private _addIncrementalDataRecords(",
          "",
          "[Removed Lines]",
          "160:     if (this._rootNodes.size === 0) {",
          "161:       for (const resolve of this._nextQueue) {",
          "162:         resolve({ value: undefined, done: true });",
          "163:       }",
          "164:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:     while ((completed = this._completedQueue.shift()) !== undefined) {",
          "337:       yield completed;",
          "338:     }",
          "339:   }",
          "341:   private _enqueue(completed: IncrementalDataRecordResult): void {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:     if (this._rootNodes.size === 0) {",
          "335:       for (const resolve of this._nextQueue) {",
          "336:         resolve({ value: undefined, done: true });",
          "337:       }",
          "338:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}