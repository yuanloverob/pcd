{
  "cve_id": "CVE-2023-3224",
  "cve_desc": "Code Injection in GitHub repository nuxt/nuxt prior to 3.5.3.",
  "repo": "nuxt/nuxt",
  "patch_hash": "65a8f4eb3ef1b249a95fd59e323835a96428baff",
  "patch_info": {
    "commit_hash": "65a8f4eb3ef1b249a95fd59e323835a96428baff",
    "repo": "nuxt/nuxt",
    "commit_url": "https://github.com/nuxt/nuxt/commit/65a8f4eb3ef1b249a95fd59e323835a96428baff",
    "files": [
      "packages/nuxt/src/app/components/nuxt-root.vue",
      "packages/nuxt/src/app/components/test-component-wrapper.ts",
      "packages/nuxt/src/core/templates.ts",
      "packages/schema/src/config/vite.ts",
      "packages/webpack/package.json",
      "packages/webpack/src/presets/base.ts",
      "pnpm-lock.yaml"
    ],
    "message": "fix(nuxt): restrict access to single renderer outside of test/rootDir (#20543)",
    "before_after_code_files": [
      "packages/nuxt/src/app/components/nuxt-root.vue||packages/nuxt/src/app/components/nuxt-root.vue",
      "packages/nuxt/src/app/components/test-component-wrapper.ts||packages/nuxt/src/app/components/test-component-wrapper.ts",
      "packages/nuxt/src/core/templates.ts||packages/nuxt/src/core/templates.ts",
      "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts",
      "packages/webpack/src/presets/base.ts||packages/webpack/src/presets/base.ts"
    ]
  },
  "patch_diff": {
    "packages/nuxt/src/app/components/nuxt-root.vue||packages/nuxt/src/app/components/nuxt-root.vue": [
      "File: packages/nuxt/src/app/components/nuxt-root.vue -> packages/nuxt/src/app/components/nuxt-root.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: const onResolve = nuxtApp.deferHydration()",
      "25: const url = process.server ? nuxtApp.ssrContext.url : window.location.pathname",
      "27:   .then(r => r.default(process.server ? url : window.location.href)))",
      "",
      "[Removed Lines]",
      "26: const SingleRenderer = process.dev && process.server && url.startsWith('/__nuxt_component_test__/') && defineAsyncComponent(() => import('#build/test-component-wrapper.mjs')",
      "",
      "[Added Lines]",
      "26: const SingleRenderer = process.test && process.dev && process.server && url.startsWith('/__nuxt_component_test__/') && /* #__PURE__ */ defineAsyncComponent(() => import('#build/test-component-wrapper.mjs')",
      "",
      "---------------"
    ],
    "packages/nuxt/src/app/components/test-component-wrapper.ts||packages/nuxt/src/app/components/test-component-wrapper.ts": [
      "File: packages/nuxt/src/app/components/test-component-wrapper.ts -> packages/nuxt/src/app/components/test-component-wrapper.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { parseURL } from 'ufo'",
      "2: import { defineComponent, h } from 'vue'",
      "3: import { parseQuery } from 'vue-router'",
      "6:   name: 'NuxtTestComponentWrapper',",
      "8:   async setup (props, { attrs }) {",
      "9:     const query = parseQuery(parseURL(url).search)",
      "10:     const urlProps = query.props ? JSON.parse(query.props as string) : {}",
      "11:     const comp = await import(/* @vite-ignore */ query.path as string).then(r => r.default)",
      "12:     return () => [",
      "13:       h('div', 'Component Test Wrapper for ' + query.path),",
      "",
      "[Removed Lines]",
      "5: export default (url:string) => defineComponent({",
      "",
      "[Added Lines]",
      "4: import { resolve } from 'pathe'",
      "6: import { devRootDir } from '#build/nuxt.config.mjs'",
      "8: export default (url: string) => defineComponent({",
      "14:     const path = resolve(query.path as string)",
      "15:     if (!path.startsWith(devRootDir)) {",
      "16:       throw new Error(`[nuxt] Cannot access path outside of project root directory: \\`${path}\\`.`)",
      "17:     }",
      "",
      "---------------"
    ],
    "packages/nuxt/src/core/templates.ts||packages/nuxt/src/core/templates.ts": [
      "File: packages/nuxt/src/core/templates.ts -> packages/nuxt/src/core/templates.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "299:     return [",
      "300:       ...Object.entries(ctx.nuxt.options.app).map(([k, v]) => `export const ${camelCase('app-' + k)} = ${JSON.stringify(v)}`),",
      "301:       `export const renderJsonPayloads = ${!!ctx.nuxt.options.experimental.renderJsonPayloads}`,",
      "303:     ].join('\\n\\n')",
      "304:   }",
      "305: }",
      "",
      "[Removed Lines]",
      "302:       `export const devPagesDir = ${ctx.nuxt.options.dev ? JSON.stringify(ctx.nuxt.options.dir.pages) : 'null'}`",
      "",
      "[Added Lines]",
      "302:       `export const devPagesDir = ${ctx.nuxt.options.dev ? JSON.stringify(ctx.nuxt.options.dir.pages) : 'null'}`,",
      "303:       `export const devRootDir = ${ctx.nuxt.options.dev ? JSON.stringify(ctx.nuxt.options.rootDir) : 'null'}`",
      "",
      "---------------"
    ],
    "packages/schema/src/config/vite.ts||packages/schema/src/config/vite.ts": [
      "File: packages/schema/src/config/vite.ts -> packages/schema/src/config/vite.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { resolve } from 'pathe'",
      "2: import { withoutLeadingSlash } from 'ufo'",
      "3: import { defineUntypedSchema } from 'untyped'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: import { isTest } from 'std-env'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     define: {",
      "22:       $resolve: async (val, get) => ({",
      "23:         'process.dev': await get('dev'),",
      "24:         ...val || {}",
      "25:       })",
      "26:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25:         'process.test': isTest,",
      "",
      "---------------"
    ],
    "packages/webpack/src/presets/base.ts||packages/webpack/src/presets/base.ts": [
      "File: packages/webpack/src/presets/base.ts -> packages/webpack/src/presets/base.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: import escapeRegExp from 'escape-string-regexp'",
      "11: import { joinURL } from 'ufo'",
      "12: import type { NuxtOptions } from '@nuxt/schema'",
      "13: import type { WarningFilter } from '../plugins/warning-ignore'",
      "14: import WarningIgnorePlugin from '../plugins/warning-ignore'",
      "15: import type { WebpackConfigContext } from '../utils/config'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: import { isTest } from 'std-env'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "233:     'process.env.NODE_ENV': JSON.stringify(ctx.config.mode),",
      "234:     'process.mode': JSON.stringify(ctx.config.mode),",
      "235:     'process.dev': options.dev,",
      "236:     __NUXT_VERSION__: JSON.stringify(ctx.nuxt._version),",
      "237:     'process.env.VUE_ENV': JSON.stringify(ctx.name),",
      "238:     'process.browser': ctx.isClient,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "237:     'process.test': isTest,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e44e8b35dd62c3a15e9bbd0a3a231859f5a62579",
      "candidate_info": {
        "commit_hash": "e44e8b35dd62c3a15e9bbd0a3a231859f5a62579",
        "repo": "nuxt/nuxt",
        "commit_url": "https://github.com/nuxt/nuxt/commit/e44e8b35dd62c3a15e9bbd0a3a231859f5a62579",
        "files": [
          "packages/nuxt/src/app/plugins/view-transitions.client.ts",
          "packages/nuxt/src/core/templates.ts",
          "packages/schema/src/config/experimental.ts"
        ],
        "message": "fix(nuxt): disable View Transitions if `prefers-reduced-motion` (#22292)",
        "before_after_code_files": [
          "packages/nuxt/src/app/plugins/view-transitions.client.ts||packages/nuxt/src/app/plugins/view-transitions.client.ts",
          "packages/nuxt/src/core/templates.ts||packages/nuxt/src/core/templates.ts",
          "packages/schema/src/config/experimental.ts||packages/schema/src/config/experimental.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/nuxt/src/core/templates.ts||packages/nuxt/src/core/templates.ts"
          ],
          "candidate": [
            "packages/nuxt/src/core/templates.ts||packages/nuxt/src/core/templates.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/nuxt/src/app/plugins/view-transitions.client.ts||packages/nuxt/src/app/plugins/view-transitions.client.ts": [
          "File: packages/nuxt/src/app/plugins/view-transitions.client.ts -> packages/nuxt/src/app/plugins/view-transitions.client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { isChangingPage } from '../components/utils'",
          "2: import { useRouter } from '../composables/router'",
          "3: import { defineNuxtPlugin } from '../nuxt'",
          "5: export default defineNuxtPlugin((nuxtApp) => {",
          "8:   let finishTransition: undefined | (() => void)",
          "9:   let abortTransition: undefined | (() => void)",
          "",
          "[Removed Lines]",
          "6:   if (!document.startViewTransition) { return }",
          "",
          "[Added Lines]",
          "5: import { viewTransition } from '#build/nuxt.config.mjs'",
          "8:   if (!document.startViewTransition || (viewTransition !== 'always' && window.matchMedia('(prefers-reduced-motion: reduce)').matches)) { return }",
          "",
          "---------------"
        ],
        "packages/nuxt/src/core/templates.ts||packages/nuxt/src/core/templates.ts": [
          "File: packages/nuxt/src/core/templates.ts -> packages/nuxt/src/core/templates.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "386:       `export const nuxtLinkDefaults = ${JSON.stringify(ctx.nuxt.options.experimental.defaults.nuxtLink)}`,",
          "387:       `export const asyncDataDefaults = ${JSON.stringify(ctx.nuxt.options.experimental.defaults.useAsyncData)}`,",
          "388:       `export const fetchDefaults = ${JSON.stringify(fetchDefaults)}`,",
          "390:     ].join('\\n\\n')",
          "391:   }",
          "392: }",
          "",
          "[Removed Lines]",
          "389:       `export const vueAppRootContainer = ${ctx.nuxt.options.app.rootId ? `'#${ctx.nuxt.options.app.rootId}'` : `'body > ${ctx.nuxt.options.app.rootTag}'`}`",
          "",
          "[Added Lines]",
          "389:       `export const vueAppRootContainer = ${ctx.nuxt.options.app.rootId ? `'#${ctx.nuxt.options.app.rootId}'` : `'body > ${ctx.nuxt.options.app.rootTag}'`}`,",
          "390:       `export const viewTransition = ${ctx.nuxt.options.experimental.viewTransition}`",
          "",
          "---------------"
        ],
        "packages/schema/src/config/experimental.ts||packages/schema/src/config/experimental.ts": [
          "File: packages/schema/src/config/experimental.ts -> packages/schema/src/config/experimental.ts"
        ]
      }
    },
    {
      "candidate_hash": "b5b2b47feb19b5c4b7c1fb4dcdbceadc89505f8f",
      "candidate_info": {
        "commit_hash": "b5b2b47feb19b5c4b7c1fb4dcdbceadc89505f8f",
        "repo": "nuxt/nuxt",
        "commit_url": "https://github.com/nuxt/nuxt/commit/b5b2b47feb19b5c4b7c1fb4dcdbceadc89505f8f",
        "files": [
          "packages/nuxt/src/app/entry.ts",
          "packages/nuxt/src/core/runtime/nitro/renderer.ts",
          "packages/nuxt/src/core/templates.ts",
          "packages/schema/src/config/app.ts"
        ],
        "message": "feat(nuxt): make `app.rootId` optional (#22528)",
        "before_after_code_files": [
          "packages/nuxt/src/app/entry.ts||packages/nuxt/src/app/entry.ts",
          "packages/nuxt/src/core/runtime/nitro/renderer.ts||packages/nuxt/src/core/runtime/nitro/renderer.ts",
          "packages/nuxt/src/core/templates.ts||packages/nuxt/src/core/templates.ts",
          "packages/schema/src/config/app.ts||packages/schema/src/config/app.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/nuxt/src/core/templates.ts||packages/nuxt/src/core/templates.ts"
          ],
          "candidate": [
            "packages/nuxt/src/core/templates.ts||packages/nuxt/src/core/templates.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/nuxt/src/app/entry.ts||packages/nuxt/src/app/entry.ts": [
          "File: packages/nuxt/src/app/entry.ts -> packages/nuxt/src/app/entry.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import RootComponent from '#build/root-component.mjs'",
          "21: if (!globalThis.$fetch) {",
          "22:   globalThis.$fetch = $fetch.create({",
          "",
          "[Removed Lines]",
          "19: import { appRootId } from '#build/nuxt.config.mjs'",
          "",
          "[Added Lines]",
          "19: import { vueAppRootContainer } from '#build/nuxt.config.mjs'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     try {",
          "76:       await nuxt.hooks.callHook('app:created', vueApp)",
          "77:       await nuxt.hooks.callHook('app:beforeMount', vueApp)",
          "79:       await nuxt.hooks.callHook('app:mounted', vueApp)",
          "80:       await nextTick()",
          "81:     } catch (err) {",
          "",
          "[Removed Lines]",
          "78:       vueApp.mount('#' + appRootId)",
          "",
          "[Added Lines]",
          "78:       vueApp.mount(vueAppRootContainer)",
          "",
          "---------------"
        ],
        "packages/nuxt/src/core/runtime/nitro/renderer.ts||packages/nuxt/src/core/runtime/nitro/renderer.ts": [
          "File: packages/nuxt/src/core/runtime/nitro/renderer.ts -> packages/nuxt/src/core/runtime/nitro/renderer.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     if (import.meta.dev && process.env.NUXT_VITE_NODE_OPTIONS) {",
          "118:       renderer.rendererContext.updateManifest(await getClientManifest())",
          "119:     }",
          "121:   }",
          "123:   return renderer",
          "",
          "[Removed Lines]",
          "120:     return `<${appRootTag} id=\"${appRootId}\">${html}</${appRootTag}>`",
          "",
          "[Added Lines]",
          "120:     return `<${appRootTag}${appRootId ? ` id=\"${appRootId}\"` : ''}>${html}</${appRootTag}>`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:   const options = {",
          "134:     manifest,",
          "136:     buildAssetsURL",
          "137:   }",
          "",
          "[Removed Lines]",
          "135:     renderToString: () => `<${appRootTag} id=\"${appRootId}\">${spaTemplate}</${appRootTag}>`,",
          "",
          "[Added Lines]",
          "135:     renderToString: () => `<${appRootTag}${appRootId ? ` id=\"${appRootId}\"` : ''}>${spaTemplate}</${appRootTag}>`,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191: }",
          "193: const PAYLOAD_URL_RE = process.env.NUXT_JSON_PAYLOADS ? /\\/_payload(\\.[a-zA-Z0-9]+)?.json(\\?.*)?$/ : /\\/_payload(\\.[a-zA-Z0-9]+)?.js(\\?.*)?$/",
          "196: const PRERENDER_NO_SSR_ROUTES = new Set(['/index.html', '/200.html', '/404.html'])",
          "",
          "[Removed Lines]",
          "194: const ROOT_NODE_REGEX = new RegExp(`^<${appRootTag} id=\"${appRootId}\">([\\\\s\\\\S]*)</${appRootTag}>$`)",
          "",
          "[Added Lines]",
          "194: const ROOT_NODE_REGEX = new RegExp(`^<${appRootTag}${appRootId ? ` id=\"${appRootId}\"` : ''}>([\\\\s\\\\S]*)</${appRootTag}>$`)",
          "",
          "---------------"
        ],
        "packages/nuxt/src/core/templates.ts||packages/nuxt/src/core/templates.ts": [
          "File: packages/nuxt/src/core/templates.ts -> packages/nuxt/src/core/templates.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:       `export const componentIslands = ${!!ctx.nuxt.options.experimental.componentIslands}`,",
          "340:       `export const remoteComponentIslands = ${ctx.nuxt.options.experimental.componentIslands === 'local+remote'}`,",
          "341:       `export const devPagesDir = ${ctx.nuxt.options.dev ? JSON.stringify(ctx.nuxt.options.dir.pages) : 'null'}`,",
          "343:     ].join('\\n\\n')",
          "344:   }",
          "345: }",
          "",
          "[Removed Lines]",
          "342:       `export const devRootDir = ${ctx.nuxt.options.dev ? JSON.stringify(ctx.nuxt.options.rootDir) : 'null'}`",
          "",
          "[Added Lines]",
          "342:       `export const devRootDir = ${ctx.nuxt.options.dev ? JSON.stringify(ctx.nuxt.options.rootDir) : 'null'}`,",
          "343:       `export const vueAppRootContainer = ${ctx.nuxt.options.app.rootId ? `'#${ctx.nuxt.options.app.rootId}'` : `'body > ${ctx.nuxt.options.app.rootTag}'`}`",
          "",
          "---------------"
        ],
        "packages/schema/src/config/app.ts||packages/schema/src/config/app.ts": [
          "File: packages/schema/src/config/app.ts -> packages/schema/src/config/app.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:     rootId: {",
          "179:     },",
          "",
          "[Removed Lines]",
          "178:       $resolve: val => val || '__nuxt'",
          "",
          "[Added Lines]",
          "180:       $resolve: val => val === false ? false : val || '__nuxt'",
          "",
          "---------------"
        ]
      }
    }
  ]
}