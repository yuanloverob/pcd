{
  "cve_id": "CVE-2024-23687",
  "cve_desc": "Hard-coded credentials in FOLIO mod-data-export-spring versions before 1.5.4 and from 2.0.0 to 2.0.2 allows unauthenticated users to access critical APIs, modify user data, modify configurations including single-sign-on, and manipulate fees/fines.\n\n",
  "repo": "folio-org/mod-data-export-spring",
  "patch_hash": "93aff4566bff59e30f4121b5a2bda5b0b508a446",
  "patch_info": {
    "commit_hash": "93aff4566bff59e30f4121b5a2bda5b0b508a446",
    "repo": "folio-org/mod-data-export-spring",
    "commit_url": "https://github.com/folio-org/mod-data-export-spring/commit/93aff4566bff59e30f4121b5a2bda5b0b508a446",
    "files": [
      "README.md",
      "descriptors/ModuleDescriptor-template.json",
      "src/main/java/org/folio/des/ModDataExportSpringApplication.java",
      "src/main/java/org/folio/des/client/AuthClient.java",
      "src/main/java/org/folio/des/security/AuthService.java",
      "src/main/java/org/folio/des/security/SecurityManagerService.java",
      "src/main/resources/application.yml",
      "src/test/java/org/folio/des/InstallUpgradeIT.java",
      "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
      "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java",
      "src/test/resources/config/application.yml",
      "src/test/resources/mappings/authn.json"
    ],
    "message": "Merge pull request from GHSA-vf78-3q9f-92g3\n\nMODEXPS-226 - Invalid system user credentials usage",
    "before_after_code_files": [
      "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
      "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
      "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
      "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
      "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
      "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
      "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
    ]
  },
  "patch_diff": {
    "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java": [
      "File: src/main/java/org/folio/des/ModDataExportSpringApplication.java -> src/main/java/org/folio/des/ModDataExportSpringApplication.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package org.folio.des;",
      "3: import org.folio.de.entity.JobCommand;",
      "4: import org.springframework.boot.SpringApplication;",
      "5: import org.springframework.boot.autoconfigure.SpringBootApplication;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import org.apache.commons.lang3.StringUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "10: @EnableFeignClients",
      "11: @EntityScan(basePackageClasses = JobCommand.class)",
      "12: public class ModDataExportSpringApplication {",
      "14:   public static void main(String[] args) {",
      "15:     SpringApplication.run(ModDataExportSpringApplication.class, args);",
      "16:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14:   public static final String SYSTEM_USER_PASSWORD = \"SYSTEM_USER_PASSWORD\";",
      "17:     if (StringUtils.isEmpty(System.getenv(SYSTEM_USER_PASSWORD))) {",
      "18:       throw new IllegalArgumentException(\"Required environment variable is missing: \" + SYSTEM_USER_PASSWORD);",
      "19:     }",
      "",
      "---------------"
    ],
    "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java": [
      "File: src/main/java/org/folio/des/client/AuthClient.java -> src/main/java/org/folio/des/client/AuthClient.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import org.springframework.cloud.openfeign.FeignClient;",
      "5: import org.springframework.http.MediaType;",
      "6: import org.springframework.http.ResponseEntity;",
      "7: import org.springframework.web.bind.annotation.PostMapping;",
      "8: import org.springframework.web.bind.annotation.RequestBody;",
      "10: @FeignClient(\"authn\")",
      "11: public interface AuthClient {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: import org.springframework.web.bind.annotation.DeleteMapping;",
      "10: import org.springframework.web.bind.annotation.RequestParam;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16:   @PostMapping(value = \"/credentials\", consumes = MediaType.APPLICATION_JSON_VALUE)",
      "17:   void saveCredentials(@RequestBody SystemUserParameters systemUserParameters);",
      "18: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21:   @DeleteMapping(value = \"/credentials\", consumes = MediaType.APPLICATION_JSON_VALUE)",
      "22:   void deleteCredentials(@RequestParam(\"userId\") String userId);",
      "",
      "---------------"
    ],
    "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java": [
      "File: src/main/java/org/folio/des/security/AuthService.java -> src/main/java/org/folio/des/security/AuthService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   @Value(\"${folio.system.username}\")",
      "27:   private String username;",
      "29:   public String getTokenForSystemUser(String tenant, String url) {",
      "30:     SystemUserParameters userParameters =",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28:   @Value(\"${folio.system.password}\")",
      "29:   private String password;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32:             .okapiUrl(url)",
      "33:             .tenantId(tenant)",
      "34:             .username(username)",
      "36:             .build();",
      "38:     log.info(\"Attempt login with url={} tenant={} username={}.\", url, tenant, username);",
      "",
      "[Removed Lines]",
      "35:             .password(username)",
      "",
      "[Added Lines]",
      "37:             .password(password)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "63:     return CollectionUtils.isNotEmpty(token) && StringUtils.isNotBlank(token.get(0));",
      "64:   }",
      "66:   public void saveCredentials(SystemUserParameters systemUserParameters) {",
      "67:     authClient.saveCredentials(systemUserParameters);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "68:   public void deleteCredentials(String userId) {",
      "69:     authClient.deleteCredentials(userId);",
      "71:     log.info(\"Removed credentials for user {}.\", userId);",
      "72:   }",
      "",
      "---------------"
    ],
    "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java": [
      "File: src/main/java/org/folio/des/security/SecurityManagerService.java -> src/main/java/org/folio/des/security/SecurityManagerService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:   @Value(\"${folio.system.username}\")",
      "37:   private String username;",
      "39:   public void prepareSystemUser(String okapiUrl, String tenantId) {",
      "40:     Optional<User> userOptional = getUser(username);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38:   @Value(\"${folio.system.password}\")",
      "39:   private String password;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "45:       updateUser(user);",
      "46:     } else {",
      "47:       user = createUser(username);",
      "55:     }",
      "57:     Optional<PermissionUser> permissionUserOptional = permissionsClient.get(\"userId==\" + user.getId())",
      "58:         .getPermissionUsers()",
      "59:         .stream()",
      "",
      "[Removed Lines]",
      "48:       authService.saveCredentials(SystemUserParameters.builder()",
      "49:           .id(UUID.randomUUID())",
      "50:           .username(username)",
      "51:           .password(username)",
      "52:           .okapiUrl(okapiUrl)",
      "53:           .tenantId(tenantId)",
      "54:           .build());",
      "",
      "[Added Lines]",
      "52:     try {",
      "53:       authService.deleteCredentials(user.getId());",
      "54:     } catch (feign.FeignException.NotFound e) {",
      "56:     }",
      "57:     authService.saveCredentials(SystemUserParameters.builder()",
      "58:         .id(UUID.randomUUID())",
      "59:         .username(username)",
      "60:         .password(password)",
      "61:         .okapiUrl(okapiUrl)",
      "62:         .tenantId(tenantId)",
      "63:         .build());",
      "",
      "---------------"
    ],
    "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java": [
      "File: src/test/java/org/folio/des/InstallUpgradeIT.java -> src/test/java/org/folio/des/InstallUpgradeIT.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "94:     .withEnv(\"DB_PASSWORD\", \"password\")",
      "95:     .withEnv(\"DB_DATABASE\", \"postgres\")",
      "96:     .withEnv(\"KAFKA_HOST\", \"mykafka\")",
      "99:   private static void mockPath(MockServerClient mockServerClient, String path, String jsonBody) {",
      "100:     mockServerClient.when(request(path))",
      "",
      "[Removed Lines]",
      "97:     .withEnv(\"KAFKA_PORT\", \"9092\");",
      "",
      "[Added Lines]",
      "97:     .withEnv(\"KAFKA_PORT\", \"9092\")",
      "98:     .withEnv(\"SYSTEM_USER_PASSWORD\", \"password\");",
      "",
      "---------------"
    ],
    "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java": [
      "File: src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java -> src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package org.folio.des;",
      "3: import static org.hamcrest.CoreMatchers.containsString;",
      "4: import static org.hamcrest.MatcherAssert.assertThat;",
      "5: import static org.junit.Assert.assertThrows;",
      "7: import org.junit.jupiter.api.Test;",
      "9: class ModDataExportSpringApplicationTest {",
      "11:   @Test",
      "12:   void exceptionOnMissingSystemUserPassword() {",
      "13:     var e = assertThrows(IllegalArgumentException.class, () -> ModDataExportSpringApplication.main(null));",
      "14:     assertThat(e.getMessage(), containsString(ModDataExportSpringApplication.SYSTEM_USER_PASSWORD));",
      "15:   }",
      "17: }",
      "",
      "---------------"
    ],
    "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java": [
      "File: src/test/java/org/folio/des/security/SecurityManagerServiceTest.java -> src/test/java/org/folio/des/security/SecurityManagerServiceTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package org.folio.des.security;",
      "3: import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;",
      "4: import static com.github.tomakehurst.wiremock.client.WireMock.get;",
      "5: import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;",
      "6: import static com.github.tomakehurst.wiremock.client.WireMock.putRequestedFor;",
      "7: import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: import static com.github.tomakehurst.wiremock.client.WireMock.delete;",
      "5: import static com.github.tomakehurst.wiremock.client.WireMock.deleteRequestedFor;",
      "8: import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14: import org.junit.jupiter.api.DisplayName;",
      "15: import org.junit.jupiter.api.Test;",
      "16: import org.springframework.beans.factory.annotation.Autowired;",
      "17: import org.springframework.http.MediaType;",
      "19: import java.util.Collection;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import org.springframework.http.HttpStatus;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "75:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
      "76:                     .withBody(USER_PERMS_RESPONSE)));",
      "78:     Map<String, Collection<String>> tenantOkapiHeaders = new HashMap<>() {{",
      "79:       put(XOkapiHeaders.TENANT, List.of(TENANT));",
      "80:       put(XOkapiHeaders.URL, List.of(wireMockServer.baseUrl()));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:     wireMockServer.stubFor(",
      "83:       delete(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\"))",
      "84:         .willReturn(",
      "85:           aResponse()",
      "86:             .withStatus(HttpStatus.NO_CONTENT.value())));",
      "88:     Map<String, Collection<String>> tenantOkapiHeaders = new HashMap<>() {{",
      "89:       put(XOkapiHeaders.TENANT, List.of(TENANT));",
      "90:       put(XOkapiHeaders.URL, List.of(wireMockServer.baseUrl()));",
      "91:       put(XOkapiHeaders.TOKEN, List.of(TOKEN));",
      "92:     }};",
      "94:     try (var context = new FolioExecutionContextSetter(new DefaultFolioExecutionContext(folioModuleMetadata, tenantOkapiHeaders))) {",
      "95:       securityManagerService.prepareSystemUser(wireMockServer.baseUrl(), TENANT);",
      "96:     }",
      "98:     wireMockServer.verify(",
      "99:         getRequestedFor(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\")));",
      "100:     wireMockServer.verify(",
      "101:         putRequestedFor(urlEqualTo(\"/users/a85c45b7-d427-4122-8532-5570219c5e59\")));",
      "102:     wireMockServer.verify(",
      "103:         deleteRequestedFor(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\")));",
      "104:     wireMockServer.verify(",
      "105:         postRequestedFor(urlEqualTo(\"/authn/credentials\")));",
      "106:   }",
      "108:   @Test",
      "109:   @DisplayName(\"Update user without previous password\")",
      "110:   void prepareSystemUserWithoutPreviousPassword() {",
      "112:     wireMockServer.stubFor(",
      "113:         get(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\"))",
      "114:             .willReturn(",
      "115:                 aResponse()",
      "116:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
      "117:                     .withBody(SYS_USER_EXIST_RESPONSE)));",
      "119:     wireMockServer.stubFor(",
      "120:         get(urlEqualTo(\"/perms/users?query=userId%3D%3Da85c45b7-d427-4122-8532-5570219c5e59\"))",
      "121:             .willReturn(",
      "122:                 aResponse()",
      "123:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
      "124:                     .withBody(USER_PERMS_RESPONSE)));",
      "126:     wireMockServer.stubFor(",
      "127:       delete(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\"))",
      "128:         .willReturn(",
      "129:           aResponse()",
      "130:             .withStatus(HttpStatus.NOT_FOUND.value())));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "89:         getRequestedFor(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\")));",
      "90:     wireMockServer.verify(",
      "91:         putRequestedFor(urlEqualTo(\"/users/a85c45b7-d427-4122-8532-5570219c5e59\")));",
      "92:   }",
      "93: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "146:     wireMockServer.verify(",
      "147:         deleteRequestedFor(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\")));",
      "148:     wireMockServer.verify(",
      "149:         postRequestedFor(urlEqualTo(\"/authn/credentials\")));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "285fe85e7989307593f8d15f89f5e279719e9833",
      "candidate_info": {
        "commit_hash": "285fe85e7989307593f8d15f89f5e279719e9833",
        "repo": "folio-org/mod-data-export-spring",
        "commit_url": "https://github.com/folio-org/mod-data-export-spring/commit/285fe85e7989307593f8d15f89f5e279719e9833",
        "files": [
          "NEWS.md",
          "README.md",
          "descriptors/ModuleDescriptor-template.json",
          "pom.xml",
          "src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "src/main/java/org/folio/des/client/AuthClient.java",
          "src/main/java/org/folio/des/security/AuthService.java",
          "src/main/java/org/folio/des/security/SecurityManagerService.java",
          "src/main/resources/application.yml",
          "src/test/java/org/folio/des/InstallUpgradeIT.java",
          "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java",
          "src/test/resources/config/application.yml",
          "src/test/resources/mappings/authn.json"
        ],
        "message": "Merge pull request from GHSA-vf78-3q9f-92g3\n\nRelease 2.0.2",
        "before_after_code_files": [
          "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
          "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
          "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
          "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
          "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
            "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
            "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
            "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
            "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
            "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
            "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
          ],
          "candidate": [
            "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
            "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
            "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
            "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
            "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
            "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
            "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java": [
          "File: src/main/java/org/folio/des/ModDataExportSpringApplication.java -> src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.folio.des;",
          "3: import org.folio.de.entity.JobCommand;",
          "4: import org.springframework.boot.SpringApplication;",
          "5: import org.springframework.boot.autoconfigure.SpringBootApplication;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import org.apache.commons.lang3.StringUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: @EnableFeignClients",
          "11: @EntityScan(basePackageClasses = JobCommand.class)",
          "12: public class ModDataExportSpringApplication {",
          "14:   public static void main(String[] args) {",
          "15:     SpringApplication.run(ModDataExportSpringApplication.class, args);",
          "16:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:   public static final String SYSTEM_USER_PASSWORD = \"SYSTEM_USER_PASSWORD\";",
          "17:     if (StringUtils.isEmpty(System.getenv(SYSTEM_USER_PASSWORD))) {",
          "18:       throw new IllegalArgumentException(\"Required environment variable is missing: \" + SYSTEM_USER_PASSWORD);",
          "19:     }",
          "",
          "---------------"
        ],
        "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java": [
          "File: src/main/java/org/folio/des/client/AuthClient.java -> src/main/java/org/folio/des/client/AuthClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import org.springframework.cloud.openfeign.FeignClient;",
          "5: import org.springframework.http.MediaType;",
          "6: import org.springframework.http.ResponseEntity;",
          "7: import org.springframework.web.bind.annotation.PostMapping;",
          "8: import org.springframework.web.bind.annotation.RequestBody;",
          "10: @FeignClient(\"authn\")",
          "11: public interface AuthClient {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import org.springframework.web.bind.annotation.DeleteMapping;",
          "10: import org.springframework.web.bind.annotation.RequestParam;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:   @PostMapping(value = \"/credentials\", consumes = MediaType.APPLICATION_JSON_VALUE)",
          "17:   void saveCredentials(@RequestBody SystemUserParameters systemUserParameters);",
          "18: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:   @DeleteMapping(value = \"/credentials\", consumes = MediaType.APPLICATION_JSON_VALUE)",
          "22:   void deleteCredentials(@RequestParam(\"userId\") String userId);",
          "",
          "---------------"
        ],
        "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java": [
          "File: src/main/java/org/folio/des/security/AuthService.java -> src/main/java/org/folio/des/security/AuthService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   @Value(\"${folio.system.username}\")",
          "24:   private String username;",
          "26:   public SystemUserParameters loginSystemUser(String tenant, String url) {",
          "27:     SystemUserParameters userParameters =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:   @Value(\"${folio.system.password}\")",
          "26:   private String password;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:             .okapiUrl(url)",
          "30:             .tenantId(tenant)",
          "31:             .username(username)",
          "33:             .build();",
          "35:     log.info(\"Login with url={} tenant={} username={}.\", url, tenant, username);",
          "",
          "[Removed Lines]",
          "32:             .password(username)",
          "",
          "[Added Lines]",
          "34:             .password(password)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:     return CollectionUtils.isNotEmpty(token) && StringUtils.isNotBlank(token.get(0));",
          "53:   }",
          "55:   public void saveCredentials(SystemUserParameters systemUserParameters) {",
          "56:     authClient.saveCredentials(systemUserParameters);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   public void deleteCredentials(String userId) {",
          "58:     authClient.deleteCredentials(userId);",
          "60:     log.info(\"Removed credentials for user {}.\", userId);",
          "61:   }",
          "",
          "---------------"
        ],
        "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java": [
          "File: src/main/java/org/folio/des/security/SecurityManagerService.java -> src/main/java/org/folio/des/security/SecurityManagerService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   @Value(\"${folio.system.username}\")",
          "37:   private String username;",
          "39:   public void prepareSystemUser(String okapiUrl, String tenantId) {",
          "40:     Optional<User> userOptional = getUser(username);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   @Value(\"${folio.system.password}\")",
          "39:   private String password;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:       updateUser(user);",
          "46:     } else {",
          "47:       user = createUser(username);",
          "55:     }",
          "57:     Optional<PermissionUser> permissionUserOptional = permissionsClient.get(\"userId==\" + user.getId())",
          "58:         .getPermissionUsers()",
          "59:         .stream()",
          "",
          "[Removed Lines]",
          "48:       authService.saveCredentials(SystemUserParameters.builder()",
          "49:           .id(UUID.randomUUID())",
          "50:           .username(username)",
          "51:           .password(username)",
          "52:           .okapiUrl(okapiUrl)",
          "53:           .tenantId(tenantId)",
          "54:           .build());",
          "",
          "[Added Lines]",
          "52:     try {",
          "53:       authService.deleteCredentials(user.getId());",
          "54:     } catch (feign.FeignException.NotFound e) {",
          "56:     }",
          "57:     authService.saveCredentials(SystemUserParameters.builder()",
          "58:         .id(UUID.randomUUID())",
          "59:         .username(username)",
          "60:         .password(password)",
          "61:         .okapiUrl(okapiUrl)",
          "62:         .tenantId(tenantId)",
          "63:         .build());",
          "",
          "---------------"
        ],
        "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java": [
          "File: src/test/java/org/folio/des/InstallUpgradeIT.java -> src/test/java/org/folio/des/InstallUpgradeIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     .withEnv(\"DB_PASSWORD\", \"password\")",
          "86:     .withEnv(\"DB_DATABASE\", \"postgres\")",
          "87:     .withEnv(\"KAFKA_HOST\", \"mykafka\")",
          "90:   private static void mockPath(MockServerClient mockServerClient, String path, String jsonBody) {",
          "91:     mockServerClient.when(request(path))",
          "",
          "[Removed Lines]",
          "88:     .withEnv(\"KAFKA_PORT\", \"9092\");",
          "",
          "[Added Lines]",
          "88:     .withEnv(\"KAFKA_PORT\", \"9092\")",
          "89:     .withEnv(\"SYSTEM_USER_PASSWORD\", \"password\");",
          "",
          "---------------"
        ],
        "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java": [
          "File: src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java -> src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.folio.des;",
          "3: import static org.hamcrest.CoreMatchers.containsString;",
          "4: import static org.hamcrest.MatcherAssert.assertThat;",
          "5: import static org.junit.Assert.assertThrows;",
          "7: import org.junit.jupiter.api.Test;",
          "9: class ModDataExportSpringApplicationTest {",
          "11:   @Test",
          "12:   void exceptionOnMissingSystemUserPassword() {",
          "13:     var e = assertThrows(IllegalArgumentException.class, () -> ModDataExportSpringApplication.main(null));",
          "14:     assertThat(e.getMessage(), containsString(ModDataExportSpringApplication.SYSTEM_USER_PASSWORD));",
          "15:   }",
          "17: }",
          "",
          "---------------"
        ],
        "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java": [
          "File: src/test/java/org/folio/des/security/SecurityManagerServiceTest.java -> src/test/java/org/folio/des/security/SecurityManagerServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.folio.des.security;",
          "3: import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;",
          "4: import static com.github.tomakehurst.wiremock.client.WireMock.get;",
          "5: import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;",
          "6: import static com.github.tomakehurst.wiremock.client.WireMock.putRequestedFor;",
          "7: import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;",
          "10: import org.folio.des.support.BaseTest;",
          "11: import org.folio.spring.scope.FolioExecutionContextSetter;",
          "12: import org.junit.jupiter.api.DisplayName;",
          "13: import org.junit.jupiter.api.Test;",
          "14: import org.springframework.beans.factory.annotation.Autowired;",
          "15: import org.springframework.http.MediaType;",
          "17: class SecurityManagerServiceTest extends BaseTest {",
          "19:   @Autowired private SecurityManagerService securityManagerService;",
          "21:   private static final String SYS_USER_EXIST_RESPONSE =",
          "22:       \"{\\n\"",
          "23:           + \"    \\\"users\\\": [\\n\"",
          "",
          "[Removed Lines]",
          "9: import org.folio.des.config.FolioExecutionContextHelper;",
          "20:   @Autowired private FolioExecutionContextHelper contextHelper;",
          "",
          "[Added Lines]",
          "4: import static com.github.tomakehurst.wiremock.client.WireMock.delete;",
          "5: import static com.github.tomakehurst.wiremock.client.WireMock.deleteRequestedFor;",
          "8: import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;",
          "13: import org.folio.spring.DefaultFolioExecutionContext;",
          "14: import org.folio.spring.FolioModuleMetadata;",
          "15: import org.folio.spring.integration.XOkapiHeaders;",
          "20: import org.springframework.http.HttpStatus;",
          "23: import java.util.Collection;",
          "24: import java.util.HashMap;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "31:   @Autowired private FolioModuleMetadata folioModuleMetadata;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
          "69:                     .withBody(USER_PERMS_RESPONSE)));",
          "72:       securityManagerService.prepareSystemUser(wireMockServer.baseUrl(), TENANT);",
          "73:     }",
          "",
          "[Removed Lines]",
          "71:     try (var context = new FolioExecutionContextSetter(contextHelper.getFolioExecutionContext(TENANT))) {",
          "",
          "[Added Lines]",
          "82:     wireMockServer.stubFor(",
          "83:       delete(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\"))",
          "84:         .willReturn(",
          "85:           aResponse()",
          "86:             .withStatus(HttpStatus.NO_CONTENT.value())));",
          "88:     Map<String, Collection<String>> tenantOkapiHeaders = new HashMap<>() {{",
          "89:       put(XOkapiHeaders.TENANT, List.of(TENANT));",
          "90:       put(XOkapiHeaders.URL, List.of(wireMockServer.baseUrl()));",
          "91:       put(XOkapiHeaders.TOKEN, List.of(TOKEN));",
          "92:     }};",
          "94:     try (var context = new FolioExecutionContextSetter(new DefaultFolioExecutionContext(folioModuleMetadata, tenantOkapiHeaders))) {",
          "95:       securityManagerService.prepareSystemUser(wireMockServer.baseUrl(), TENANT);",
          "96:     }",
          "98:     wireMockServer.verify(",
          "99:         getRequestedFor(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\")));",
          "100:     wireMockServer.verify(",
          "101:         putRequestedFor(urlEqualTo(\"/users/a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "102:     wireMockServer.verify(",
          "103:         deleteRequestedFor(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "104:     wireMockServer.verify(",
          "105:         postRequestedFor(urlEqualTo(\"/authn/credentials\")));",
          "106:   }",
          "108:   @Test",
          "109:   @DisplayName(\"Update user without previous password\")",
          "110:   void prepareSystemUserWithoutPreviousPassword() {",
          "112:     wireMockServer.stubFor(",
          "113:         get(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\"))",
          "114:             .willReturn(",
          "115:                 aResponse()",
          "116:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
          "117:                     .withBody(SYS_USER_EXIST_RESPONSE)));",
          "119:     wireMockServer.stubFor(",
          "120:         get(urlEqualTo(\"/perms/users?query=userId%3D%3Da85c45b7-d427-4122-8532-5570219c5e59\"))",
          "121:             .willReturn(",
          "122:                 aResponse()",
          "123:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
          "124:                     .withBody(USER_PERMS_RESPONSE)));",
          "126:     wireMockServer.stubFor(",
          "127:       delete(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\"))",
          "128:         .willReturn(",
          "129:           aResponse()",
          "130:             .withStatus(HttpStatus.NOT_FOUND.value())));",
          "132:     Map<String, Collection<String>> tenantOkapiHeaders = new HashMap<>() {{",
          "133:       put(XOkapiHeaders.TENANT, List.of(TENANT));",
          "134:       put(XOkapiHeaders.URL, List.of(wireMockServer.baseUrl()));",
          "135:       put(XOkapiHeaders.TOKEN, List.of(TOKEN));",
          "136:     }};",
          "138:     try (var context = new FolioExecutionContextSetter(new DefaultFolioExecutionContext(folioModuleMetadata, tenantOkapiHeaders))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:         getRequestedFor(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\")));",
          "77:     wireMockServer.verify(",
          "78:         putRequestedFor(urlEqualTo(\"/users/a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "79:   }",
          "80: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     wireMockServer.verify(",
          "147:         deleteRequestedFor(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "148:     wireMockServer.verify(",
          "149:         postRequestedFor(urlEqualTo(\"/authn/credentials\")));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2806ce554c57d57490394bdaade52b802bd7900",
      "candidate_info": {
        "commit_hash": "e2806ce554c57d57490394bdaade52b802bd7900",
        "repo": "folio-org/mod-data-export-spring",
        "commit_url": "https://github.com/folio-org/mod-data-export-spring/commit/e2806ce554c57d57490394bdaade52b802bd7900",
        "files": [
          "NEWS.md",
          "README.md",
          "descriptors/ModuleDescriptor-template.json",
          "pom.xml",
          "src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "src/main/java/org/folio/des/client/AuthClient.java",
          "src/main/java/org/folio/des/security/AuthService.java",
          "src/main/java/org/folio/des/security/SecurityManagerService.java",
          "src/main/resources/application.yml",
          "src/test/java/org/folio/des/InstallUpgradeIT.java",
          "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java",
          "src/test/resources/config/application.yml",
          "src/test/resources/mappings/authn.json"
        ],
        "message": "Merge pull request from GHSA-vf78-3q9f-92g3\n\nRelease 1.5.4",
        "before_after_code_files": [
          "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
          "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
          "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
          "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
          "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
            "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
            "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
            "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
            "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
            "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
            "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
          ],
          "candidate": [
            "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
            "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
            "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
            "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
            "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
            "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
            "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java": [
          "File: src/main/java/org/folio/des/ModDataExportSpringApplication.java -> src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.folio.des;",
          "3: import org.folio.de.entity.JobCommand;",
          "4: import org.springframework.boot.SpringApplication;",
          "5: import org.springframework.boot.autoconfigure.SpringBootApplication;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import org.apache.commons.lang3.StringUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: @EnableFeignClients",
          "11: @EntityScan(basePackageClasses = JobCommand.class)",
          "12: public class ModDataExportSpringApplication {",
          "14:   public static void main(String[] args) {",
          "15:     SpringApplication.run(ModDataExportSpringApplication.class, args);",
          "16:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:   public static final String SYSTEM_USER_PASSWORD = \"SYSTEM_USER_PASSWORD\";",
          "17:     if (StringUtils.isEmpty(System.getenv(SYSTEM_USER_PASSWORD))) {",
          "18:       throw new IllegalArgumentException(\"Required environment variable is missing: \" + SYSTEM_USER_PASSWORD);",
          "19:     }",
          "",
          "---------------"
        ],
        "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java": [
          "File: src/main/java/org/folio/des/client/AuthClient.java -> src/main/java/org/folio/des/client/AuthClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import org.springframework.cloud.openfeign.FeignClient;",
          "5: import org.springframework.http.MediaType;",
          "6: import org.springframework.http.ResponseEntity;",
          "7: import org.springframework.web.bind.annotation.PostMapping;",
          "8: import org.springframework.web.bind.annotation.RequestBody;",
          "10: @FeignClient(\"authn\")",
          "11: public interface AuthClient {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import org.springframework.web.bind.annotation.DeleteMapping;",
          "10: import org.springframework.web.bind.annotation.RequestParam;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:   @PostMapping(value = \"/credentials\", consumes = MediaType.APPLICATION_JSON_VALUE)",
          "17:   void saveCredentials(@RequestBody SystemUserParameters systemUserParameters);",
          "18: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:   @DeleteMapping(value = \"/credentials\", consumes = MediaType.APPLICATION_JSON_VALUE)",
          "22:   void deleteCredentials(@RequestParam(\"userId\") String userId);",
          "",
          "---------------"
        ],
        "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java": [
          "File: src/main/java/org/folio/des/security/AuthService.java -> src/main/java/org/folio/des/security/AuthService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   @Value(\"${folio.system.username}\")",
          "24:   private String username;",
          "26:   public SystemUserParameters loginSystemUser(String tenant, String url) {",
          "27:     SystemUserParameters userParameters =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:   @Value(\"${folio.system.password}\")",
          "26:   private String password;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:             .okapiUrl(url)",
          "30:             .tenantId(tenant)",
          "31:             .username(username)",
          "33:             .build();",
          "35:     log.info(\"Login with url={} tenant={} username={}.\", url, tenant, username);",
          "",
          "[Removed Lines]",
          "32:             .password(username)",
          "",
          "[Added Lines]",
          "34:             .password(password)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:     return CollectionUtils.isNotEmpty(token) && StringUtils.isNotBlank(token.get(0));",
          "53:   }",
          "55:   public void saveCredentials(SystemUserParameters systemUserParameters) {",
          "56:     authClient.saveCredentials(systemUserParameters);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   public void deleteCredentials(String userId) {",
          "58:     authClient.deleteCredentials(userId);",
          "60:     log.info(\"Removed credentials for user {}.\", userId);",
          "61:   }",
          "",
          "---------------"
        ],
        "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java": [
          "File: src/main/java/org/folio/des/security/SecurityManagerService.java -> src/main/java/org/folio/des/security/SecurityManagerService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   @Value(\"${folio.system.username}\")",
          "37:   private String username;",
          "39:   public void prepareSystemUser(String okapiUrl, String tenantId) {",
          "40:     Optional<User> userOptional = getUser(username);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   @Value(\"${folio.system.password}\")",
          "39:   private String password;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:       updateUser(user);",
          "46:     } else {",
          "47:       user = createUser(username);",
          "55:     }",
          "57:     Optional<PermissionUser> permissionUserOptional = permissionsClient.get(\"userId==\" + user.getId())",
          "58:         .getPermissionUsers()",
          "59:         .stream()",
          "",
          "[Removed Lines]",
          "48:       authService.saveCredentials(SystemUserParameters.builder()",
          "49:           .id(UUID.randomUUID())",
          "50:           .username(username)",
          "51:           .password(username)",
          "52:           .okapiUrl(okapiUrl)",
          "53:           .tenantId(tenantId)",
          "54:           .build());",
          "",
          "[Added Lines]",
          "52:     try {",
          "53:       authService.deleteCredentials(user.getId());",
          "54:     } catch (feign.FeignException.NotFound e) {",
          "56:     }",
          "57:     authService.saveCredentials(SystemUserParameters.builder()",
          "58:         .id(UUID.randomUUID())",
          "59:         .username(username)",
          "60:         .password(password)",
          "61:         .okapiUrl(okapiUrl)",
          "62:         .tenantId(tenantId)",
          "63:         .build());",
          "",
          "---------------"
        ],
        "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java": [
          "File: src/test/java/org/folio/des/InstallUpgradeIT.java -> src/test/java/org/folio/des/InstallUpgradeIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     .withEnv(\"DB_PASSWORD\", \"password\")",
          "83:     .withEnv(\"DB_DATABASE\", \"postgres\")",
          "84:     .withEnv(\"KAFKA_HOST\", \"mykafka\")",
          "87:   private static void mockPath(MockServerClient mockServerClient, String path, String jsonBody) {",
          "88:     mockServerClient.when(request(path))",
          "",
          "[Removed Lines]",
          "85:     .withEnv(\"KAFKA_PORT\", \"9092\");",
          "",
          "[Added Lines]",
          "85:     .withEnv(\"KAFKA_PORT\", \"9092\")",
          "86:     .withEnv(\"SYSTEM_USER_PASSWORD\", \"password\");",
          "",
          "---------------"
        ],
        "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java": [
          "File: src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java -> src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.folio.des;",
          "3: import static org.hamcrest.CoreMatchers.containsString;",
          "4: import static org.hamcrest.MatcherAssert.assertThat;",
          "5: import static org.junit.Assert.assertThrows;",
          "7: import org.junit.jupiter.api.Test;",
          "9: class ModDataExportSpringApplicationTest {",
          "11:   @Test",
          "12:   void exceptionOnMissingSystemUserPassword() {",
          "13:     var e = assertThrows(IllegalArgumentException.class, () -> ModDataExportSpringApplication.main(null));",
          "14:     assertThat(e.getMessage(), containsString(ModDataExportSpringApplication.SYSTEM_USER_PASSWORD));",
          "15:   }",
          "17: }",
          "",
          "---------------"
        ],
        "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java": [
          "File: src/test/java/org/folio/des/security/SecurityManagerServiceTest.java -> src/test/java/org/folio/des/security/SecurityManagerServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.folio.des.security;",
          "3: import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;",
          "4: import static com.github.tomakehurst.wiremock.client.WireMock.get;",
          "5: import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;",
          "6: import static com.github.tomakehurst.wiremock.client.WireMock.putRequestedFor;",
          "7: import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;",
          "10: import org.folio.des.support.BaseTest;",
          "13: import org.junit.jupiter.api.DisplayName;",
          "14: import org.junit.jupiter.api.Test;",
          "15: import org.springframework.beans.factory.annotation.Autowired;",
          "16: import org.springframework.http.MediaType;",
          "18: class SecurityManagerServiceTest extends BaseTest {",
          "20:   @Autowired private SecurityManagerService securityManagerService;",
          "22:   private static final String SYS_USER_EXIST_RESPONSE =",
          "23:       \"{\\n\"",
          "24:           + \"    \\\"users\\\": [\\n\"",
          "",
          "[Removed Lines]",
          "9: import org.folio.des.config.FolioExecutionContextHelper;",
          "11: import org.junit.jupiter.api.AfterEach;",
          "12: import org.junit.jupiter.api.BeforeEach;",
          "21:   @Autowired private FolioExecutionContextHelper contextHelper;",
          "",
          "[Added Lines]",
          "4: import static com.github.tomakehurst.wiremock.client.WireMock.delete;",
          "5: import static com.github.tomakehurst.wiremock.client.WireMock.deleteRequestedFor;",
          "8: import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;",
          "13: import org.folio.spring.DefaultFolioExecutionContext;",
          "14: import org.folio.spring.FolioModuleMetadata;",
          "15: import org.folio.spring.integration.XOkapiHeaders;",
          "16: import org.folio.spring.scope.FolioExecutionContextSetter;",
          "20: import org.springframework.http.HttpStatus;",
          "23: import java.util.Collection;",
          "24: import java.util.HashMap;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "31:   @Autowired private FolioModuleMetadata folioModuleMetadata;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   private static final String USER_PERMS_RESPONSE =",
          "51:       \"{  \\\"permissionUsers\\\": [],\\n  \\\"totalRecords\\\": 0,\\n  \\\"resultInfo\\\": {\\n    \\\"totalRecords\\\": 0,\\n    \\\"facets\\\": [],\\n    \\\"diagnostics\\\": []\\n  }\\n}\";",
          "63:   @Test",
          "64:   @DisplayName(\"Update user\")",
          "",
          "[Removed Lines]",
          "53:   @BeforeEach",
          "54:   void setUp() {",
          "55:     contextHelper.initScope(TENANT);",
          "56:   }",
          "58:   @AfterEach",
          "59:   void tearDown() {",
          "60:     contextHelper.finishContext();",
          "61:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
          "79:                     .withBody(USER_PERMS_RESPONSE)));",
          "83:     wireMockServer.verify(",
          "84:         getRequestedFor(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\")));",
          "85:     wireMockServer.verify(",
          "86:         putRequestedFor(urlEqualTo(\"/users/a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "87:   }",
          "88: }",
          "",
          "[Removed Lines]",
          "81:     securityManagerService.prepareSystemUser(wireMockServer.baseUrl(), TENANT);",
          "",
          "[Added Lines]",
          "82:     wireMockServer.stubFor(",
          "83:       delete(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\"))",
          "84:         .willReturn(",
          "85:           aResponse()",
          "86:             .withStatus(HttpStatus.NO_CONTENT.value())));",
          "88:     Map<String, Collection<String>> tenantOkapiHeaders = new HashMap<>() {{",
          "89:       put(XOkapiHeaders.TENANT, List.of(TENANT));",
          "90:       put(XOkapiHeaders.URL, List.of(wireMockServer.baseUrl()));",
          "91:       put(XOkapiHeaders.TOKEN, List.of(TOKEN));",
          "92:     }};",
          "94:     try (var context = new FolioExecutionContextSetter(new DefaultFolioExecutionContext(folioModuleMetadata, tenantOkapiHeaders))) {",
          "95:       securityManagerService.prepareSystemUser(wireMockServer.baseUrl(), TENANT);",
          "96:     }",
          "102:     wireMockServer.verify(",
          "103:         deleteRequestedFor(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "104:     wireMockServer.verify(",
          "105:         postRequestedFor(urlEqualTo(\"/authn/credentials\")));",
          "106:   }",
          "108:   @Test",
          "109:   @DisplayName(\"Update user without previous password\")",
          "110:   void prepareSystemUserWithoutPreviousPassword() {",
          "112:     wireMockServer.stubFor(",
          "113:         get(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\"))",
          "114:             .willReturn(",
          "115:                 aResponse()",
          "116:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
          "117:                     .withBody(SYS_USER_EXIST_RESPONSE)));",
          "119:     wireMockServer.stubFor(",
          "120:         get(urlEqualTo(\"/perms/users?query=userId%3D%3Da85c45b7-d427-4122-8532-5570219c5e59\"))",
          "121:             .willReturn(",
          "122:                 aResponse()",
          "123:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
          "124:                     .withBody(USER_PERMS_RESPONSE)));",
          "126:     wireMockServer.stubFor(",
          "127:       delete(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\"))",
          "128:         .willReturn(",
          "129:           aResponse()",
          "130:             .withStatus(HttpStatus.NOT_FOUND.value())));",
          "132:     Map<String, Collection<String>> tenantOkapiHeaders = new HashMap<>() {{",
          "133:       put(XOkapiHeaders.TENANT, List.of(TENANT));",
          "134:       put(XOkapiHeaders.URL, List.of(wireMockServer.baseUrl()));",
          "135:       put(XOkapiHeaders.TOKEN, List.of(TOKEN));",
          "136:     }};",
          "138:     try (var context = new FolioExecutionContextSetter(new DefaultFolioExecutionContext(folioModuleMetadata, tenantOkapiHeaders))) {",
          "139:       securityManagerService.prepareSystemUser(wireMockServer.baseUrl(), TENANT);",
          "140:     }",
          "142:     wireMockServer.verify(",
          "143:         getRequestedFor(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\")));",
          "144:     wireMockServer.verify(",
          "145:         putRequestedFor(urlEqualTo(\"/users/a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "146:     wireMockServer.verify(",
          "147:         deleteRequestedFor(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "148:     wireMockServer.verify(",
          "149:         postRequestedFor(urlEqualTo(\"/authn/credentials\")));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23dab8a1d6c31cf75a398c932358b18ddf358dbd",
      "candidate_info": {
        "commit_hash": "23dab8a1d6c31cf75a398c932358b18ddf358dbd",
        "repo": "folio-org/mod-data-export-spring",
        "commit_url": "https://github.com/folio-org/mod-data-export-spring/commit/23dab8a1d6c31cf75a398c932358b18ddf358dbd",
        "files": [
          "README.md",
          "descriptors/ModuleDescriptor-template.json",
          "src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "src/main/java/org/folio/des/client/AuthClient.java",
          "src/main/java/org/folio/des/security/AuthService.java",
          "src/main/java/org/folio/des/security/SecurityManagerService.java",
          "src/main/resources/application.yml",
          "src/test/java/org/folio/des/InstallUpgradeIT.java",
          "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java",
          "src/test/resources/config/application.yml",
          "src/test/resources/mappings/authn.json"
        ],
        "message": "Security Remediation",
        "before_after_code_files": [
          "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
          "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
          "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
          "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
          "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
            "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
            "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
            "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
            "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
            "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
            "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
          ],
          "candidate": [
            "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
            "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
            "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
            "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
            "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
            "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
            "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java": [
          "File: src/main/java/org/folio/des/ModDataExportSpringApplication.java -> src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.folio.des;",
          "3: import org.folio.de.entity.JobCommand;",
          "4: import org.springframework.boot.SpringApplication;",
          "5: import org.springframework.boot.autoconfigure.SpringBootApplication;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import org.apache.commons.lang3.StringUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: @EnableFeignClients",
          "11: @EntityScan(basePackageClasses = JobCommand.class)",
          "12: public class ModDataExportSpringApplication {",
          "14:   public static void main(String[] args) {",
          "15:     SpringApplication.run(ModDataExportSpringApplication.class, args);",
          "16:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:   public static final String SYSTEM_USER_PASSWORD = \"SYSTEM_USER_PASSWORD\";",
          "17:     if (StringUtils.isEmpty(System.getenv(SYSTEM_USER_PASSWORD))) {",
          "18:       throw new IllegalArgumentException(\"Required environment variable is missing: \" + SYSTEM_USER_PASSWORD);",
          "19:     }",
          "",
          "---------------"
        ],
        "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java": [
          "File: src/main/java/org/folio/des/client/AuthClient.java -> src/main/java/org/folio/des/client/AuthClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import org.springframework.cloud.openfeign.FeignClient;",
          "5: import org.springframework.http.MediaType;",
          "6: import org.springframework.http.ResponseEntity;",
          "7: import org.springframework.web.bind.annotation.PostMapping;",
          "8: import org.springframework.web.bind.annotation.RequestBody;",
          "10: @FeignClient(\"authn\")",
          "11: public interface AuthClient {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import org.springframework.web.bind.annotation.DeleteMapping;",
          "10: import org.springframework.web.bind.annotation.RequestParam;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:   @PostMapping(value = \"/credentials\", consumes = MediaType.APPLICATION_JSON_VALUE)",
          "17:   void saveCredentials(@RequestBody SystemUserParameters systemUserParameters);",
          "18: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:   @DeleteMapping(value = \"/credentials\", consumes = MediaType.APPLICATION_JSON_VALUE)",
          "22:   void deleteCredentials(@RequestParam(\"userId\") String userId);",
          "",
          "---------------"
        ],
        "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java": [
          "File: src/main/java/org/folio/des/security/AuthService.java -> src/main/java/org/folio/des/security/AuthService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   @Value(\"${folio.system.username}\")",
          "24:   private String username;",
          "26:   public SystemUserParameters loginSystemUser(String tenant, String url) {",
          "27:     SystemUserParameters userParameters =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:   @Value(\"${folio.system.password}\")",
          "26:   private String password;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:             .okapiUrl(url)",
          "30:             .tenantId(tenant)",
          "31:             .username(username)",
          "33:             .build();",
          "35:     log.info(\"Login with url={} tenant={} username={}.\", url, tenant, username);",
          "",
          "[Removed Lines]",
          "32:             .password(username)",
          "",
          "[Added Lines]",
          "34:             .password(password)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:     return CollectionUtils.isNotEmpty(token) && StringUtils.isNotBlank(token.get(0));",
          "53:   }",
          "55:   public void saveCredentials(SystemUserParameters systemUserParameters) {",
          "56:     authClient.saveCredentials(systemUserParameters);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   public void deleteCredentials(String userId) {",
          "58:     authClient.deleteCredentials(userId);",
          "60:     log.info(\"Removed credentials for user {}.\", userId);",
          "61:   }",
          "",
          "---------------"
        ],
        "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java": [
          "File: src/main/java/org/folio/des/security/SecurityManagerService.java -> src/main/java/org/folio/des/security/SecurityManagerService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   @Value(\"${folio.system.username}\")",
          "37:   private String username;",
          "39:   public void prepareSystemUser(String okapiUrl, String tenantId) {",
          "40:     Optional<User> userOptional = getUser(username);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   @Value(\"${folio.system.password}\")",
          "39:   private String password;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:       updateUser(user);",
          "46:     } else {",
          "47:       user = createUser(username);",
          "55:     }",
          "57:     Optional<PermissionUser> permissionUserOptional = permissionsClient.get(\"userId==\" + user.getId())",
          "58:         .getPermissionUsers()",
          "59:         .stream()",
          "",
          "[Removed Lines]",
          "48:       authService.saveCredentials(SystemUserParameters.builder()",
          "49:           .id(UUID.randomUUID())",
          "50:           .username(username)",
          "51:           .password(username)",
          "52:           .okapiUrl(okapiUrl)",
          "53:           .tenantId(tenantId)",
          "54:           .build());",
          "",
          "[Added Lines]",
          "52:     try {",
          "53:       authService.deleteCredentials(user.getId());",
          "54:     } catch (feign.FeignException.NotFound e) {",
          "56:     }",
          "57:     authService.saveCredentials(SystemUserParameters.builder()",
          "58:         .id(UUID.randomUUID())",
          "59:         .username(username)",
          "60:         .password(password)",
          "61:         .okapiUrl(okapiUrl)",
          "62:         .tenantId(tenantId)",
          "63:         .build());",
          "",
          "---------------"
        ],
        "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java": [
          "File: src/test/java/org/folio/des/InstallUpgradeIT.java -> src/test/java/org/folio/des/InstallUpgradeIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     .withEnv(\"DB_PASSWORD\", \"password\")",
          "86:     .withEnv(\"DB_DATABASE\", \"postgres\")",
          "87:     .withEnv(\"KAFKA_HOST\", \"mykafka\")",
          "90:   private static void mockPath(MockServerClient mockServerClient, String path, String jsonBody) {",
          "91:     mockServerClient.when(request(path))",
          "",
          "[Removed Lines]",
          "88:     .withEnv(\"KAFKA_PORT\", \"9092\");",
          "",
          "[Added Lines]",
          "88:     .withEnv(\"KAFKA_PORT\", \"9092\")",
          "89:     .withEnv(\"SYSTEM_USER_PASSWORD\", \"password\");",
          "",
          "---------------"
        ],
        "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java": [
          "File: src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java -> src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.folio.des;",
          "3: import static org.hamcrest.CoreMatchers.containsString;",
          "4: import static org.hamcrest.MatcherAssert.assertThat;",
          "5: import static org.junit.Assert.assertThrows;",
          "7: import org.junit.jupiter.api.Test;",
          "9: class ModDataExportSpringApplicationTest {",
          "11:   @Test",
          "12:   void exceptionOnMissingSystemUserPassword() {",
          "13:     var e = assertThrows(IllegalArgumentException.class, () -> ModDataExportSpringApplication.main(null));",
          "14:     assertThat(e.getMessage(), containsString(ModDataExportSpringApplication.SYSTEM_USER_PASSWORD));",
          "15:   }",
          "17: }",
          "",
          "---------------"
        ],
        "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java": [
          "File: src/test/java/org/folio/des/security/SecurityManagerServiceTest.java -> src/test/java/org/folio/des/security/SecurityManagerServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.folio.des.security;",
          "3: import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;",
          "4: import static com.github.tomakehurst.wiremock.client.WireMock.get;",
          "5: import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;",
          "6: import static com.github.tomakehurst.wiremock.client.WireMock.putRequestedFor;",
          "7: import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;",
          "10: import org.folio.des.support.BaseTest;",
          "11: import org.folio.spring.scope.FolioExecutionContextSetter;",
          "12: import org.junit.jupiter.api.DisplayName;",
          "13: import org.junit.jupiter.api.Test;",
          "14: import org.springframework.beans.factory.annotation.Autowired;",
          "15: import org.springframework.http.MediaType;",
          "17: class SecurityManagerServiceTest extends BaseTest {",
          "19:   @Autowired private SecurityManagerService securityManagerService;",
          "21:   private static final String SYS_USER_EXIST_RESPONSE =",
          "22:       \"{\\n\"",
          "23:           + \"    \\\"users\\\": [\\n\"",
          "",
          "[Removed Lines]",
          "9: import org.folio.des.config.FolioExecutionContextHelper;",
          "20:   @Autowired private FolioExecutionContextHelper contextHelper;",
          "",
          "[Added Lines]",
          "4: import static com.github.tomakehurst.wiremock.client.WireMock.delete;",
          "5: import static com.github.tomakehurst.wiremock.client.WireMock.deleteRequestedFor;",
          "8: import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;",
          "13: import org.folio.spring.DefaultFolioExecutionContext;",
          "14: import org.folio.spring.FolioModuleMetadata;",
          "15: import org.folio.spring.integration.XOkapiHeaders;",
          "20: import org.springframework.http.HttpStatus;",
          "23: import java.util.Collection;",
          "24: import java.util.HashMap;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "31:   @Autowired private FolioModuleMetadata folioModuleMetadata;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
          "69:                     .withBody(USER_PERMS_RESPONSE)));",
          "72:       securityManagerService.prepareSystemUser(wireMockServer.baseUrl(), TENANT);",
          "73:     }",
          "",
          "[Removed Lines]",
          "71:     try (var context = new FolioExecutionContextSetter(contextHelper.getFolioExecutionContext(TENANT))) {",
          "",
          "[Added Lines]",
          "82:     wireMockServer.stubFor(",
          "83:       delete(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\"))",
          "84:         .willReturn(",
          "85:           aResponse()",
          "86:             .withStatus(HttpStatus.NO_CONTENT.value())));",
          "88:     Map<String, Collection<String>> tenantOkapiHeaders = new HashMap<>() {{",
          "89:       put(XOkapiHeaders.TENANT, List.of(TENANT));",
          "90:       put(XOkapiHeaders.URL, List.of(wireMockServer.baseUrl()));",
          "91:       put(XOkapiHeaders.TOKEN, List.of(TOKEN));",
          "92:     }};",
          "94:     try (var context = new FolioExecutionContextSetter(new DefaultFolioExecutionContext(folioModuleMetadata, tenantOkapiHeaders))) {",
          "95:       securityManagerService.prepareSystemUser(wireMockServer.baseUrl(), TENANT);",
          "96:     }",
          "98:     wireMockServer.verify(",
          "99:         getRequestedFor(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\")));",
          "100:     wireMockServer.verify(",
          "101:         putRequestedFor(urlEqualTo(\"/users/a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "102:     wireMockServer.verify(",
          "103:         deleteRequestedFor(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "104:     wireMockServer.verify(",
          "105:         postRequestedFor(urlEqualTo(\"/authn/credentials\")));",
          "106:   }",
          "108:   @Test",
          "109:   @DisplayName(\"Update user without previous password\")",
          "110:   void prepareSystemUserWithoutPreviousPassword() {",
          "112:     wireMockServer.stubFor(",
          "113:         get(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\"))",
          "114:             .willReturn(",
          "115:                 aResponse()",
          "116:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
          "117:                     .withBody(SYS_USER_EXIST_RESPONSE)));",
          "119:     wireMockServer.stubFor(",
          "120:         get(urlEqualTo(\"/perms/users?query=userId%3D%3Da85c45b7-d427-4122-8532-5570219c5e59\"))",
          "121:             .willReturn(",
          "122:                 aResponse()",
          "123:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
          "124:                     .withBody(USER_PERMS_RESPONSE)));",
          "126:     wireMockServer.stubFor(",
          "127:       delete(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\"))",
          "128:         .willReturn(",
          "129:           aResponse()",
          "130:             .withStatus(HttpStatus.NOT_FOUND.value())));",
          "132:     Map<String, Collection<String>> tenantOkapiHeaders = new HashMap<>() {{",
          "133:       put(XOkapiHeaders.TENANT, List.of(TENANT));",
          "134:       put(XOkapiHeaders.URL, List.of(wireMockServer.baseUrl()));",
          "135:       put(XOkapiHeaders.TOKEN, List.of(TOKEN));",
          "136:     }};",
          "138:     try (var context = new FolioExecutionContextSetter(new DefaultFolioExecutionContext(folioModuleMetadata, tenantOkapiHeaders))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:         getRequestedFor(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\")));",
          "77:     wireMockServer.verify(",
          "78:         putRequestedFor(urlEqualTo(\"/users/a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "79:   }",
          "80: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     wireMockServer.verify(",
          "147:         deleteRequestedFor(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "148:     wireMockServer.verify(",
          "149:         postRequestedFor(urlEqualTo(\"/authn/credentials\")));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb6785565067a2a90c1e2250c241e5b23214c691",
      "candidate_info": {
        "commit_hash": "cb6785565067a2a90c1e2250c241e5b23214c691",
        "repo": "folio-org/mod-data-export-spring",
        "commit_url": "https://github.com/folio-org/mod-data-export-spring/commit/cb6785565067a2a90c1e2250c241e5b23214c691",
        "files": [
          "README.md",
          "descriptors/ModuleDescriptor-template.json",
          "src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "src/main/java/org/folio/des/client/AuthClient.java",
          "src/main/java/org/folio/des/security/AuthService.java",
          "src/main/java/org/folio/des/security/SecurityManagerService.java",
          "src/main/resources/application.yml",
          "src/test/java/org/folio/des/InstallUpgradeIT.java",
          "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java",
          "src/test/resources/config/application.yml",
          "src/test/resources/mappings/authn.json"
        ],
        "message": "Security Remediation",
        "before_after_code_files": [
          "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
          "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
          "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
          "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
          "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
            "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
            "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
            "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
            "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
            "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
            "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
          ],
          "candidate": [
            "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java",
            "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java",
            "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java",
            "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java",
            "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java",
            "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
            "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/folio/des/ModDataExportSpringApplication.java||src/main/java/org/folio/des/ModDataExportSpringApplication.java": [
          "File: src/main/java/org/folio/des/ModDataExportSpringApplication.java -> src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.folio.des;",
          "3: import org.folio.de.entity.JobCommand;",
          "4: import org.springframework.boot.SpringApplication;",
          "5: import org.springframework.boot.autoconfigure.SpringBootApplication;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import org.apache.commons.lang3.StringUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: @EnableFeignClients",
          "11: @EntityScan(basePackageClasses = JobCommand.class)",
          "12: public class ModDataExportSpringApplication {",
          "14:   public static void main(String[] args) {",
          "15:     SpringApplication.run(ModDataExportSpringApplication.class, args);",
          "16:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:   public static final String SYSTEM_USER_PASSWORD = \"SYSTEM_USER_PASSWORD\";",
          "17:     if (StringUtils.isEmpty(System.getenv(SYSTEM_USER_PASSWORD))) {",
          "18:       throw new IllegalArgumentException(\"Required environment variable is missing: \" + SYSTEM_USER_PASSWORD);",
          "19:     }",
          "",
          "---------------"
        ],
        "src/main/java/org/folio/des/client/AuthClient.java||src/main/java/org/folio/des/client/AuthClient.java": [
          "File: src/main/java/org/folio/des/client/AuthClient.java -> src/main/java/org/folio/des/client/AuthClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import org.springframework.cloud.openfeign.FeignClient;",
          "5: import org.springframework.http.MediaType;",
          "6: import org.springframework.http.ResponseEntity;",
          "7: import org.springframework.web.bind.annotation.PostMapping;",
          "8: import org.springframework.web.bind.annotation.RequestBody;",
          "10: @FeignClient(\"authn\")",
          "11: public interface AuthClient {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import org.springframework.web.bind.annotation.DeleteMapping;",
          "10: import org.springframework.web.bind.annotation.RequestParam;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:   @PostMapping(value = \"/credentials\", consumes = MediaType.APPLICATION_JSON_VALUE)",
          "17:   void saveCredentials(@RequestBody SystemUserParameters systemUserParameters);",
          "18: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:   @DeleteMapping(value = \"/credentials\", consumes = MediaType.APPLICATION_JSON_VALUE)",
          "22:   void deleteCredentials(@RequestParam(\"userId\") String userId);",
          "",
          "---------------"
        ],
        "src/main/java/org/folio/des/security/AuthService.java||src/main/java/org/folio/des/security/AuthService.java": [
          "File: src/main/java/org/folio/des/security/AuthService.java -> src/main/java/org/folio/des/security/AuthService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   @Value(\"${folio.system.username}\")",
          "24:   private String username;",
          "26:   public SystemUserParameters loginSystemUser(String tenant, String url) {",
          "27:     SystemUserParameters userParameters =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:   @Value(\"${folio.system.password}\")",
          "26:   private String password;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:             .okapiUrl(url)",
          "30:             .tenantId(tenant)",
          "31:             .username(username)",
          "33:             .build();",
          "35:     log.info(\"Login with url={} tenant={} username={}.\", url, tenant, username);",
          "",
          "[Removed Lines]",
          "32:             .password(username)",
          "",
          "[Added Lines]",
          "34:             .password(password)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:     return CollectionUtils.isNotEmpty(token) && StringUtils.isNotBlank(token.get(0));",
          "53:   }",
          "55:   public void saveCredentials(SystemUserParameters systemUserParameters) {",
          "56:     authClient.saveCredentials(systemUserParameters);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   public void deleteCredentials(String userId) {",
          "58:     authClient.deleteCredentials(userId);",
          "60:     log.info(\"Removed credentials for user {}.\", userId);",
          "61:   }",
          "",
          "---------------"
        ],
        "src/main/java/org/folio/des/security/SecurityManagerService.java||src/main/java/org/folio/des/security/SecurityManagerService.java": [
          "File: src/main/java/org/folio/des/security/SecurityManagerService.java -> src/main/java/org/folio/des/security/SecurityManagerService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   @Value(\"${folio.system.username}\")",
          "37:   private String username;",
          "39:   public void prepareSystemUser(String okapiUrl, String tenantId) {",
          "40:     Optional<User> userOptional = getUser(username);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   @Value(\"${folio.system.password}\")",
          "39:   private String password;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:       updateUser(user);",
          "46:     } else {",
          "47:       user = createUser(username);",
          "55:     }",
          "57:     Optional<PermissionUser> permissionUserOptional = permissionsClient.get(\"userId==\" + user.getId())",
          "58:         .getPermissionUsers()",
          "59:         .stream()",
          "",
          "[Removed Lines]",
          "48:       authService.saveCredentials(SystemUserParameters.builder()",
          "49:           .id(UUID.randomUUID())",
          "50:           .username(username)",
          "51:           .password(username)",
          "52:           .okapiUrl(okapiUrl)",
          "53:           .tenantId(tenantId)",
          "54:           .build());",
          "",
          "[Added Lines]",
          "52:     try {",
          "53:       authService.deleteCredentials(user.getId());",
          "54:     } catch (feign.FeignException.NotFound e) {",
          "56:     }",
          "57:     authService.saveCredentials(SystemUserParameters.builder()",
          "58:         .id(UUID.randomUUID())",
          "59:         .username(username)",
          "60:         .password(password)",
          "61:         .okapiUrl(okapiUrl)",
          "62:         .tenantId(tenantId)",
          "63:         .build());",
          "",
          "---------------"
        ],
        "src/test/java/org/folio/des/InstallUpgradeIT.java||src/test/java/org/folio/des/InstallUpgradeIT.java": [
          "File: src/test/java/org/folio/des/InstallUpgradeIT.java -> src/test/java/org/folio/des/InstallUpgradeIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     .withEnv(\"DB_PASSWORD\", \"password\")",
          "83:     .withEnv(\"DB_DATABASE\", \"postgres\")",
          "84:     .withEnv(\"KAFKA_HOST\", \"mykafka\")",
          "87:   private static void mockPath(MockServerClient mockServerClient, String path, String jsonBody) {",
          "88:     mockServerClient.when(request(path))",
          "",
          "[Removed Lines]",
          "85:     .withEnv(\"KAFKA_PORT\", \"9092\");",
          "",
          "[Added Lines]",
          "85:     .withEnv(\"KAFKA_PORT\", \"9092\")",
          "86:     .withEnv(\"SYSTEM_USER_PASSWORD\", \"password\");",
          "",
          "---------------"
        ],
        "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java||src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java": [
          "File: src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java -> src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.folio.des;",
          "3: import static org.hamcrest.CoreMatchers.containsString;",
          "4: import static org.hamcrest.MatcherAssert.assertThat;",
          "5: import static org.junit.Assert.assertThrows;",
          "7: import org.junit.jupiter.api.Test;",
          "9: class ModDataExportSpringApplicationTest {",
          "11:   @Test",
          "12:   void exceptionOnMissingSystemUserPassword() {",
          "13:     var e = assertThrows(IllegalArgumentException.class, () -> ModDataExportSpringApplication.main(null));",
          "14:     assertThat(e.getMessage(), containsString(ModDataExportSpringApplication.SYSTEM_USER_PASSWORD));",
          "15:   }",
          "17: }",
          "",
          "---------------"
        ],
        "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java||src/test/java/org/folio/des/security/SecurityManagerServiceTest.java": [
          "File: src/test/java/org/folio/des/security/SecurityManagerServiceTest.java -> src/test/java/org/folio/des/security/SecurityManagerServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.folio.des.security;",
          "3: import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;",
          "4: import static com.github.tomakehurst.wiremock.client.WireMock.get;",
          "5: import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;",
          "6: import static com.github.tomakehurst.wiremock.client.WireMock.putRequestedFor;",
          "7: import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;",
          "10: import org.folio.des.support.BaseTest;",
          "13: import org.junit.jupiter.api.DisplayName;",
          "14: import org.junit.jupiter.api.Test;",
          "15: import org.springframework.beans.factory.annotation.Autowired;",
          "16: import org.springframework.http.MediaType;",
          "18: class SecurityManagerServiceTest extends BaseTest {",
          "20:   @Autowired private SecurityManagerService securityManagerService;",
          "22:   private static final String SYS_USER_EXIST_RESPONSE =",
          "23:       \"{\\n\"",
          "24:           + \"    \\\"users\\\": [\\n\"",
          "",
          "[Removed Lines]",
          "9: import org.folio.des.config.FolioExecutionContextHelper;",
          "11: import org.junit.jupiter.api.AfterEach;",
          "12: import org.junit.jupiter.api.BeforeEach;",
          "21:   @Autowired private FolioExecutionContextHelper contextHelper;",
          "",
          "[Added Lines]",
          "4: import static com.github.tomakehurst.wiremock.client.WireMock.delete;",
          "5: import static com.github.tomakehurst.wiremock.client.WireMock.deleteRequestedFor;",
          "8: import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;",
          "13: import org.folio.spring.DefaultFolioExecutionContext;",
          "14: import org.folio.spring.FolioModuleMetadata;",
          "15: import org.folio.spring.integration.XOkapiHeaders;",
          "16: import org.folio.spring.scope.FolioExecutionContextSetter;",
          "20: import org.springframework.http.HttpStatus;",
          "23: import java.util.Collection;",
          "24: import java.util.HashMap;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "31:   @Autowired private FolioModuleMetadata folioModuleMetadata;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   private static final String USER_PERMS_RESPONSE =",
          "51:       \"{  \\\"permissionUsers\\\": [],\\n  \\\"totalRecords\\\": 0,\\n  \\\"resultInfo\\\": {\\n    \\\"totalRecords\\\": 0,\\n    \\\"facets\\\": [],\\n    \\\"diagnostics\\\": []\\n  }\\n}\";",
          "63:   @Test",
          "64:   @DisplayName(\"Update user\")",
          "",
          "[Removed Lines]",
          "53:   @BeforeEach",
          "54:   void setUp() {",
          "55:     contextHelper.initScope(TENANT);",
          "56:   }",
          "58:   @AfterEach",
          "59:   void tearDown() {",
          "60:     contextHelper.finishContext();",
          "61:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
          "79:                     .withBody(USER_PERMS_RESPONSE)));",
          "83:     wireMockServer.verify(",
          "84:         getRequestedFor(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\")));",
          "85:     wireMockServer.verify(",
          "86:         putRequestedFor(urlEqualTo(\"/users/a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "87:   }",
          "88: }",
          "",
          "[Removed Lines]",
          "81:     securityManagerService.prepareSystemUser(wireMockServer.baseUrl(), TENANT);",
          "",
          "[Added Lines]",
          "82:     wireMockServer.stubFor(",
          "83:       delete(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\"))",
          "84:         .willReturn(",
          "85:           aResponse()",
          "86:             .withStatus(HttpStatus.NO_CONTENT.value())));",
          "88:     Map<String, Collection<String>> tenantOkapiHeaders = new HashMap<>() {{",
          "89:       put(XOkapiHeaders.TENANT, List.of(TENANT));",
          "90:       put(XOkapiHeaders.URL, List.of(wireMockServer.baseUrl()));",
          "91:       put(XOkapiHeaders.TOKEN, List.of(TOKEN));",
          "92:     }};",
          "94:     try (var context = new FolioExecutionContextSetter(new DefaultFolioExecutionContext(folioModuleMetadata, tenantOkapiHeaders))) {",
          "95:       securityManagerService.prepareSystemUser(wireMockServer.baseUrl(), TENANT);",
          "96:     }",
          "102:     wireMockServer.verify(",
          "103:         deleteRequestedFor(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "104:     wireMockServer.verify(",
          "105:         postRequestedFor(urlEqualTo(\"/authn/credentials\")));",
          "106:   }",
          "108:   @Test",
          "109:   @DisplayName(\"Update user without previous password\")",
          "110:   void prepareSystemUserWithoutPreviousPassword() {",
          "112:     wireMockServer.stubFor(",
          "113:         get(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\"))",
          "114:             .willReturn(",
          "115:                 aResponse()",
          "116:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
          "117:                     .withBody(SYS_USER_EXIST_RESPONSE)));",
          "119:     wireMockServer.stubFor(",
          "120:         get(urlEqualTo(\"/perms/users?query=userId%3D%3Da85c45b7-d427-4122-8532-5570219c5e59\"))",
          "121:             .willReturn(",
          "122:                 aResponse()",
          "123:                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)",
          "124:                     .withBody(USER_PERMS_RESPONSE)));",
          "126:     wireMockServer.stubFor(",
          "127:       delete(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\"))",
          "128:         .willReturn(",
          "129:           aResponse()",
          "130:             .withStatus(HttpStatus.NOT_FOUND.value())));",
          "132:     Map<String, Collection<String>> tenantOkapiHeaders = new HashMap<>() {{",
          "133:       put(XOkapiHeaders.TENANT, List.of(TENANT));",
          "134:       put(XOkapiHeaders.URL, List.of(wireMockServer.baseUrl()));",
          "135:       put(XOkapiHeaders.TOKEN, List.of(TOKEN));",
          "136:     }};",
          "138:     try (var context = new FolioExecutionContextSetter(new DefaultFolioExecutionContext(folioModuleMetadata, tenantOkapiHeaders))) {",
          "139:       securityManagerService.prepareSystemUser(wireMockServer.baseUrl(), TENANT);",
          "140:     }",
          "142:     wireMockServer.verify(",
          "143:         getRequestedFor(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\")));",
          "144:     wireMockServer.verify(",
          "145:         putRequestedFor(urlEqualTo(\"/users/a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "146:     wireMockServer.verify(",
          "147:         deleteRequestedFor(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\")));",
          "148:     wireMockServer.verify(",
          "149:         postRequestedFor(urlEqualTo(\"/authn/credentials\")));",
          "",
          "---------------"
        ]
      }
    }
  ]
}