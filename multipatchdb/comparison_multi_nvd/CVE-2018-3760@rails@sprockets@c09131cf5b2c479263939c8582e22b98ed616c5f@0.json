{
  "cve_id": "CVE-2018-3760",
  "cve_desc": "There is an information leak vulnerability in Sprockets. Versions Affected: 4.0.0.beta7 and lower, 3.7.1 and lower, 2.12.4 and lower. Specially crafted requests can be used to access files that exists on the filesystem that is outside an application's root directory, when the Sprockets server is used in production. All users running an affected release should either upgrade or use one of the work arounds immediately.",
  "repo": "rails/sprockets",
  "patch_hash": "c09131cf5b2c479263939c8582e22b98ed616c5f",
  "patch_info": {
    "commit_hash": "c09131cf5b2c479263939c8582e22b98ed616c5f",
    "repo": "rails/sprockets",
    "commit_url": "https://github.com/rails/sprockets/commit/c09131cf5b2c479263939c8582e22b98ed616c5f",
    "files": [
      "lib/sprockets/server.rb",
      "test/test_server.rb"
    ],
    "message": "Do not respond to http requests asking for a `file://`\n\nBased on CVE-2018-3760 when the Sprockets server is accidentally being used in production, an attacker can pass in a specifically crafted url that will allow them access to view every file on the system. If the file hit contains a compilable extension such as `.erb` then the code in that file will be executed.\n\nA Rails app will be using the Sprockets file server in production if they have accidentally configured their app to:\n\n```ruby\nconfig.assets.compile = true # Your app is vulnerable\n```\n\nIt is highly recommended to not use the Sprockets server in production and to instead precompile assets to disk and serve them through a server such as Nginx or via the static file middleware that ships with rails `config.public_file_server.enabled = true`.\n\nThis patch mitigates the issue, but explicitly disallowing any requests to uri resources via the server.",
    "before_after_code_files": [
      "lib/sprockets/server.rb||lib/sprockets/server.rb",
      "test/test_server.rb||test/test_server.rb"
    ]
  },
  "patch_diff": {
    "lib/sprockets/server.rb||lib/sprockets/server.rb": [
      "File: lib/sprockets/server.rb -> lib/sprockets/server.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "114:         #",
      "115:         #     http://example.org/assets/../../../etc/passwd",
      "116:         #",
      "118:       end",
      "120:       def head_request?(env)",
      "",
      "[Removed Lines]",
      "117:         path.include?(\"..\") || absolute_path?(path)",
      "",
      "[Added Lines]",
      "117:         path.include?(\"..\") || absolute_path?(path) || path.include?(\"://\")",
      "",
      "---------------"
    ],
    "test/test_server.rb||test/test_server.rb": [
      "File: test/test_server.rb -> test/test_server.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "286:     assert_equal \"\", last_response.body",
      "287:   end",
      "289:   test \"add new source to tree\" do",
      "290:     filename = fixture_path(\"server/app/javascripts/baz.js\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "289:   test \"illegal access of a file asset\" do",
      "290:     absolute_path = fixture_path(\"server/app/javascripts\")",
      "292:     get \"assets/file:%2f%2f//#{absolute_path}/foo.js\"",
      "293:     assert_equal 403, last_response.status",
      "294:   end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "15894e7a96f62d2219b29d38a22d67299b22d115",
      "candidate_info": {
        "commit_hash": "15894e7a96f62d2219b29d38a22d67299b22d115",
        "repo": "rails/sprockets",
        "commit_url": "https://github.com/rails/sprockets/commit/15894e7a96f62d2219b29d38a22d67299b22d115",
        "files": [
          "lib/sprockets/server.rb",
          "test/test_server.rb"
        ],
        "message": "Do not respond to http requests asking for a `file://`\n\nBased on CVE-2018-3760 when the Sprockets server is accidentally being used in production, an attacker can pass in a specifically crafted url that will allow them access to view every file on the system. If the file hit contains a compilable extension such as `.erb` then the code in that file will be executed.\n\nA Rails app will be using the Sprockets file server in production if they have accidentally configured their app to:\n\n```ruby\nconfig.assets.compile = true # Your app is vulnerable\n```\n\nIt is highly recommended to not use the Sprockets server in production and to instead precompile assets to disk and serve them through a server such as Nginx or via the static file middleware that ships with rails `config.public_file_server.enabled = true`.\n\nThis patch mitigates the issue, but explicitly disallowing any requests to uri resources via the server.",
        "before_after_code_files": [
          "lib/sprockets/server.rb||lib/sprockets/server.rb",
          "test/test_server.rb||test/test_server.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/sprockets/server.rb||lib/sprockets/server.rb",
            "test/test_server.rb||test/test_server.rb"
          ],
          "candidate": [
            "lib/sprockets/server.rb||lib/sprockets/server.rb",
            "test/test_server.rb||test/test_server.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/sprockets/server.rb||lib/sprockets/server.rb": [
          "File: lib/sprockets/server.rb -> lib/sprockets/server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:         #",
          "115:         #     http://example.org/assets/../../../etc/passwd",
          "116:         #",
          "118:       end",
          "120:       def head_request?(env)",
          "",
          "[Removed Lines]",
          "117:         path.include?(\"..\") || absolute_path?(path)",
          "",
          "[Added Lines]",
          "117:         path.include?(\"..\") || absolute_path?(path) || path.include?(\"://\")",
          "",
          "---------------"
        ],
        "test/test_server.rb||test/test_server.rb": [
          "File: test/test_server.rb -> test/test_server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:     assert_equal \"\", last_response.body",
          "287:   end",
          "289:   test \"add new source to tree\" do",
          "290:     filename = fixture_path(\"server/app/javascripts/baz.js\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:   test \"illegal access of a file asset\" do",
          "290:     absolute_path = fixture_path(\"server/app/javascripts\")",
          "292:     get \"assets/file:%2f%2f//#{absolute_path}/foo.js\"",
          "293:     assert_equal 403, last_response.status",
          "294:   end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c34fa05900b968d74f08ccf40917848a7be9441",
      "candidate_info": {
        "commit_hash": "9c34fa05900b968d74f08ccf40917848a7be9441",
        "repo": "rails/sprockets",
        "commit_url": "https://github.com/rails/sprockets/commit/9c34fa05900b968d74f08ccf40917848a7be9441",
        "files": [
          "lib/sprockets/server.rb",
          "test/test_server.rb"
        ],
        "message": "Do not respond to http requests asking for a `file://`\n\nBased on CVE-2018-3760 when the Sprockets server is accidentally being used in production, an attacker can pass in a specifically crafted url that will allow them access to view every file on the system. If the file hit contains a compilable extension such as `.erb` then the code in that file will be executed.\n\nA Rails app will be using the Sprockets file server in production if they have accidentally configured their app to:\n\n```ruby\nconfig.assets.compile = true # Your app is vulnerable\n```\n\nIt is highly recommended to not use the Sprockets server in production and to instead precompile assets to disk and serve them through a server such as Nginx or via the static file middleware that ships with rails `config.public_file_server.enabled = true`.\n\nThis patch mitigates the issue, but explicitly disallowing any requests to any URI resources via the server.",
        "before_after_code_files": [
          "lib/sprockets/server.rb||lib/sprockets/server.rb",
          "test/test_server.rb||test/test_server.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lib/sprockets/server.rb||lib/sprockets/server.rb",
            "test/test_server.rb||test/test_server.rb"
          ],
          "candidate": [
            "lib/sprockets/server.rb||lib/sprockets/server.rb",
            "test/test_server.rb||test/test_server.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/sprockets/server.rb||lib/sprockets/server.rb": [
          "File: lib/sprockets/server.rb -> lib/sprockets/server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:         #",
          "116:         #     http://example.org/assets/../../../etc/passwd",
          "117:         #",
          "119:       end",
          "121:       def head_request?(env)",
          "",
          "[Removed Lines]",
          "118:         path.include?(\"..\") || absolute_path?(path)",
          "",
          "[Added Lines]",
          "118:         path.include?(\"..\") || absolute_path?(path) || path.include?(\"://\")",
          "",
          "---------------"
        ],
        "test/test_server.rb||test/test_server.rb": [
          "File: test/test_server.rb -> test/test_server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:     assert_equal \"\", last_response.body",
          "332:   end",
          "334:   test \"add new source to tree\" do",
          "335:     filename = fixture_path(\"server/app/javascripts/baz.js\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:   test \"illegal access of a file asset\" do",
          "335:     absolute_path = fixture_path(\"server/app/javascripts\")",
          "337:     get \"assets/file:%2f%2f//#{absolute_path}/foo.js\"",
          "338:     assert_equal 403, last_response.status",
          "339:   end",
          "",
          "---------------"
        ]
      }
    }
  ]
}