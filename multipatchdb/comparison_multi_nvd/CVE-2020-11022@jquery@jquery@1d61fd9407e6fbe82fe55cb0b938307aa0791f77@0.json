{
  "cve_id": "CVE-2020-11022",
  "cve_desc": "In jQuery versions greater than or equal to 1.2 and before 3.5.0, passing HTML from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute untrusted code. This problem is patched in jQuery 3.5.0.",
  "repo": "jquery/jquery",
  "patch_hash": "1d61fd9407e6fbe82fe55cb0b938307aa0791f77",
  "patch_info": {
    "commit_hash": "1d61fd9407e6fbe82fe55cb0b938307aa0791f77",
    "repo": "jquery/jquery",
    "commit_url": "https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77",
    "files": [
      "src/manipulation.js",
      "test/data/testinit.js",
      "test/localfile.html",
      "test/unit/ajax.js",
      "test/unit/attributes.js",
      "test/unit/basic.js",
      "test/unit/core.js",
      "test/unit/css.js",
      "test/unit/data.js",
      "test/unit/deprecated.js",
      "test/unit/dimensions.js",
      "test/unit/effects.js",
      "test/unit/event.js",
      "test/unit/manipulation.js",
      "test/unit/offset.js",
      "test/unit/selector.js",
      "test/unit/traversing.js",
      "test/unit/wrap.js"
    ],
    "message": "Manipulation: Make jQuery.htmlPrefilter an identity function\n\nCloses gh-4642\n\n(cherry picked from 90fed4b453a5becdb7f173d9e3c1492390a1441f)",
    "before_after_code_files": [
      "src/manipulation.js||src/manipulation.js",
      "test/data/testinit.js||test/data/testinit.js",
      "test/localfile.html||test/localfile.html",
      "test/unit/ajax.js||test/unit/ajax.js",
      "test/unit/attributes.js||test/unit/attributes.js",
      "test/unit/basic.js||test/unit/basic.js",
      "test/unit/core.js||test/unit/core.js",
      "test/unit/css.js||test/unit/css.js",
      "test/unit/data.js||test/unit/data.js",
      "test/unit/deprecated.js||test/unit/deprecated.js",
      "test/unit/dimensions.js||test/unit/dimensions.js",
      "test/unit/effects.js||test/unit/effects.js",
      "test/unit/event.js||test/unit/event.js",
      "test/unit/manipulation.js||test/unit/manipulation.js",
      "test/unit/offset.js||test/unit/offset.js",
      "test/unit/selector.js||test/unit/selector.js",
      "test/unit/traversing.js||test/unit/traversing.js",
      "test/unit/wrap.js||test/unit/wrap.js"
    ]
  },
  "patch_diff": {
    "src/manipulation.js||src/manipulation.js": [
      "File: src/manipulation.js -> src/manipulation.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: var",
      "",
      "[Removed Lines]",
      "39:  rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "237: jQuery.extend( {",
      "238:  htmlPrefilter: function( html ) {",
      "240:  },",
      "242:  clone: function( elem, dataAndEvents, deepDataAndEvents ) {",
      "",
      "[Removed Lines]",
      "239:   return html.replace( rxhtmlTag, \"<$1></$2>\" );",
      "",
      "[Added Lines]",
      "232:   return html;",
      "",
      "---------------"
    ],
    "test/data/testinit.js||test/data/testinit.js": [
      "File: test/data/testinit.js -> test/data/testinit.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:  }",
      "252:  wrapper.call( QUnit, title, function( assert ) {",
      "253:   var done = assert.async(),",
      "255:     .css( { position: \"absolute\", top: \"0\", left: \"-600px\", width: \"500px\" } )",
      "256:     .attr( { id: \"qunit-fixture-iframe\", src: url( fileName ) } );",
      "",
      "[Removed Lines]",
      "254:    $iframe = supportjQuery( \"<iframe/>\" )",
      "",
      "[Added Lines]",
      "254:    $iframe = supportjQuery( \"<iframe></iframe>\" )",
      "",
      "---------------"
    ],
    "test/localfile.html||test/localfile.html": [
      "File: test/localfile.html -> test/localfile.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "49:  <script>",
      "50:   var logUL = jQuery( \"#log\" );",
      "51:   function doLog( message, args ) {",
      "53:   }",
      "54:   jQuery.ajax( \"./data/badjson.js\" , {",
      "55:    context: jQuery( \"#success\" ),",
      "",
      "[Removed Lines]",
      "52:    jQuery( \"<li />\").appendTo( logUL ).text( message + ': \"' + Array.prototype.join.call( args, '\" - \"' ) + '\"' );",
      "",
      "[Added Lines]",
      "52:    jQuery( \"<li></li>\" ).appendTo( logUL ).text( message + ': \"' + Array.prototype.join.call( args, '\" - \"' ) + '\"' );",
      "",
      "---------------"
    ],
    "test/unit/ajax.js||test/unit/ajax.js": [
      "File: test/unit/ajax.js -> test/unit/ajax.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:   addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError\", assert )();",
      "2458:   jQuery( document ).on( \"ajaxStop\", done );",
      "2460:    assert.ok( true, \"complete\" );",
      "2461:   } );",
      "2462:  } );",
      "",
      "[Removed Lines]",
      "2459:   jQuery( \"<div/>\" ).load( baseURL + \"404.txt\", function() {",
      "",
      "[Added Lines]",
      "2459:   jQuery( \"<div></div>\" ).load( baseURL + \"404.txt\", function() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2563:     return \"Hello World\";",
      "2564:    }",
      "2565:   } );",
      "2567:    assert.strictEqual( jQuery( this ).html(), \"Hello World\", \"Test div was filled with filtered data\" );",
      "2568:    assert.strictEqual( responseText, \"Hello World\", \"Test callback receives filtered data\" );",
      "2569:    done();",
      "",
      "[Removed Lines]",
      "2566:   jQuery( \"<div/>\" ).load( url( \"name.html\" ), function( responseText ) {",
      "",
      "[Added Lines]",
      "2566:   jQuery( \"<div></div>\" ).load( url( \"name.html\" ), function( responseText ) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2573:  QUnit.test( \"jQuery.fn.load( String, Object, Function )\", function( assert ) {",
      "2574:   assert.expect( 2 );",
      "2575:   var done = assert.async();",
      "2577:    \"bar\": \"ok\"",
      "2578:   }, function() {",
      "2579:    var $node = jQuery( this );",
      "",
      "[Removed Lines]",
      "2576:   jQuery( \"<div />\" ).load( url( \"mock.php?action=echoHtml\" ), {",
      "",
      "[Added Lines]",
      "2576:   jQuery( \"<div></div>\" ).load( url( \"mock.php?action=echoHtml\" ), {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2587:   assert.expect( 2 );",
      "2588:   var done = assert.async();",
      "2591:    var $node = jQuery( this );",
      "2592:    assert.strictEqual( $node.find( \"#method\" ).text(), \"GET\", \"Check method\" );",
      "2593:    assert.ok( $node.find( \"#query\" ).text().match( /foo=3&bar=ok/ ), \"Check if a string of data is passed correctly\" );",
      "",
      "[Removed Lines]",
      "2590:   jQuery( \"<div />\" ).load( url( \"mock.php?action=echoHtml\" ), \"foo=3&bar=ok\", function() {",
      "",
      "[Added Lines]",
      "2590:   jQuery( \"<div></div>\" ).load( url( \"mock.php?action=echoHtml\" ), \"foo=3&bar=ok\", function() {",
      "",
      "---------------"
    ],
    "test/unit/attributes.js||test/unit/attributes.js": [
      "File: test/unit/attributes.js -> test/unit/attributes.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "93:  assert.equal( jQuery( \"#area1\" ).attr( \"maxLength\" ), \"30\", \"Check for maxLength attribute\" );",
      "97:   \"id\": \"tAnchor5\",",
      "98:   \"href\": \"#5\"",
      "99:  } ).appendTo( \"#qunit-fixture\" );",
      "100:  assert.equal( jQuery( \"#tAnchor5\" ).attr( \"href\" ), \"#5\", \"Check for non-absolute href (an anchor)\" );",
      "102:  assert.equal( jQuery( \"#tAnchor5\" ).prop( \"href\" ), jQuery( \"#tAnchor6\" ).prop( \"href\" ), \"Check for absolute href prop on an anchor\" );",
      "104:  jQuery( \"<script type='jquery/test' src='#5' id='scriptSrc'></script>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Removed Lines]",
      "96:  jQuery( \"<a/>\" ).attr( {",
      "101:  jQuery( \"<a id='tAnchor6' href='#5' />\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Added Lines]",
      "96:  jQuery( \"<a></a>\" ).attr( {",
      "101:  jQuery( \"<a id='tAnchor6' href='#5'></a>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "136:  assert.equal( $img.attr( \"height\" ), \"53\", \"Retrieve height attribute on an element with display:none.\" );",
      "140:   background: \"url(UPPERlower.gif)\"",
      "141:  } );",
      "142:  assert.ok( !!~styleElem.attr( \"style\" ).indexOf( \"UPPERlower.gif\" ), \"Check style attribute getter\" );",
      "",
      "[Removed Lines]",
      "139:  styleElem = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).css( {",
      "",
      "[Added Lines]",
      "139:  styleElem = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).css( {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "158:  $a = jQuery( \"<a href='#' onclick='something()'>Click</a>\" ).appendTo( \"#qunit-fixture\" );",
      "159:  assert.equal( $a.attr( \"onclick\" ), \"something()\", \"Retrieve ^on attribute without anonymous function wrapper.\" );",
      "164:  assert.ok( jQuery().attr( \"doesntexist\" ) === undefined, \"Make sure undefined is returned when no element is there.\" );",
      "166:  assert.strictEqual( jQuery( \"<select><option value='property'></option></select>\" ).attr( \"value\" ), undefined, \"An unset value on a select returns undefined.\" );",
      "168:  $form = jQuery( \"#form\" ).attr( \"enctype\", \"multipart/form-data\" );",
      "",
      "[Removed Lines]",
      "161:  assert.ok( jQuery( \"<div/>\" ).attr( \"doesntexist\" ) === undefined, \"Make sure undefined is returned when no attribute is found.\" );",
      "162:  assert.ok( jQuery( \"<div/>\" ).attr( \"title\" ) === undefined, \"Make sure undefined is returned when no attribute is found.\" );",
      "163:  assert.equal( jQuery( \"<div/>\" ).attr( \"title\", \"something\" ).attr( \"title\" ), \"something\", \"Set the title attribute.\" );",
      "165:  assert.equal( jQuery( \"<div/>\" ).attr( \"value\" ), undefined, \"An unset value on a div returns undefined.\" );",
      "",
      "[Added Lines]",
      "161:  assert.ok( jQuery( \"<div></div>\" ).attr( \"doesntexist\" ) === undefined, \"Make sure undefined is returned when no attribute is found.\" );",
      "162:  assert.ok( jQuery( \"<div></div>\" ).attr( \"title\" ) === undefined, \"Make sure undefined is returned when no attribute is found.\" );",
      "163:  assert.equal( jQuery( \"<div></div>\" ).attr( \"title\", \"something\" ).attr( \"title\" ), \"something\", \"Set the title attribute.\" );",
      "165:  assert.equal( jQuery( \"<div></div>\" ).attr( \"value\" ), undefined, \"An unset value on a div returns undefined.\" );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "181:  assert.strictEqual( input.clone( true ).attr( \"name\", \"test\" )[ 0 ].name, \"test\", \"Name attribute should be changed on cloned element\" );",
      "184:  div.attr( \"id\" );",
      "186:  assert.strictEqual( div.clone( true ).attr( \"id\", \"test\" )[ 0 ].id, \"test\", \"Id attribute should be changed on cloned element\" );",
      "",
      "[Removed Lines]",
      "183:  div = jQuery( \"<div id='tester' />\" );",
      "",
      "[Added Lines]",
      "183:  div = jQuery( \"<div id='tester'></div>\" );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "299:  $input = jQuery( \"<input type='checkbox'/>\" ).attr( \"checked\", true );",
      "300:  assert.equal( $input.prop( \"checked\" ), true, \"Setting checked updates property (verified by .prop)\" );",
      "301:  assert.equal( $input[ 0 ].checked, true, \"Setting checked updates property (verified by native property)\" );",
      "303:  assert.equal( $input.prop( \"selected\" ), true, \"Setting selected updates property (verified by .prop)\" );",
      "304:  assert.equal( $input[ 0 ].selected, true, \"Setting selected updates property (verified by native property)\" );",
      "",
      "[Removed Lines]",
      "302:  $input = jQuery( \"<option/>\" ).attr( \"selected\", true );",
      "",
      "[Added Lines]",
      "302:  $input = jQuery( \"<option></option>\" ).attr( \"selected\", true );",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "592:  assert.expect( 12 );",
      "593:  var $first;",
      "596:  assert.equal( jQuery( \"#form\" ).removeAttr( \"id\" ).attr( \"id\" ), undefined, \"Remove id\" );",
      "597:  assert.equal( jQuery( \"#foo\" ).attr( \"style\", \"position:absolute;\" ).removeAttr( \"style\" ).attr( \"style\" ), undefined, \"Check removing style attribute\" );",
      "598:  assert.equal( jQuery( \"#form\" ).attr( \"style\", \"position:absolute;\" ).removeAttr( \"style\" ).attr( \"style\" ), undefined, \"Check removing style attribute on a form\" );",
      "",
      "[Removed Lines]",
      "595:  assert.equal( jQuery( \"<div class='hello' />\" ).removeAttr( \"class\" ).attr( \"class\" ), undefined, \"remove class\" );",
      "",
      "[Added Lines]",
      "595:  assert.equal( jQuery( \"<div class='hello'></div>\" ).removeAttr( \"class\" ).attr( \"class\" ), undefined, \"remove class\" );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "692:  assert.equal( jQuery( \"#select2\" ).prop( \"selectedIndex\" ), 3, \"Check for selectedIndex attribute\" );",
      "693:  assert.equal( jQuery( \"#foo\" ).prop( \"nodeName\" ).toUpperCase(), \"DIV\", \"Check for nodeName attribute\" );",
      "694:  assert.equal( jQuery( \"#foo\" ).prop( \"tagName\" ).toUpperCase(), \"DIV\", \"Check for tagName attribute\" );",
      "697:  assert.equal( jQuery( \"#listWithTabIndex\" ).prop( \"tabindex\" ), 5, \"Check retrieving tabindex\" );",
      "698:  jQuery( \"#text1\" ).prop( \"readonly\", true );",
      "",
      "[Removed Lines]",
      "695:  assert.equal( jQuery( \"<option/>\" ).prop( \"selected\" ), false, \"Check selected attribute on disconnected element.\" );",
      "",
      "[Added Lines]",
      "695:  assert.equal( jQuery( \"<option></option>\" ).prop( \"selected\" ), false, \"Check selected attribute on disconnected element.\" );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "838:  function addOptions( $elem ) {",
      "839:   return $elem.append(",
      "843:   )",
      "844:   .find( \"[value=a]\" ).prop( \"selected\", true ).end()",
      "845:   .find( \"[value=c]\" ).prop( \"selected\", true ).end();",
      "846:  }",
      "848:  var $optgroup,",
      "852:  addOptions( $select ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Removed Lines]",
      "840:    jQuery( \"<option/>\" ).val( \"a\" ).text( \"One\" ),",
      "841:    jQuery( \"<option/>\" ).val( \"b\" ).text( \"Two\" ),",
      "842:    jQuery( \"<option/>\" ).val( \"c\" ).text( \"Three\" )",
      "849:   $select = jQuery( \"<select/>\" );",
      "",
      "[Added Lines]",
      "840:    jQuery( \"<option></option>\" ).val( \"a\" ).text( \"One\" ),",
      "841:    jQuery( \"<option></option>\" ).val( \"b\" ).text( \"Two\" ),",
      "842:    jQuery( \"<option></option>\" ).val( \"c\" ).text( \"Three\" )",
      "849:   $select = jQuery( \"<select></select>\" );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "856:  $select.empty();",
      "860:  addOptions( $optgroup ).appendTo( $select );",
      "861:  $select.find( \"[value=b]\" ).prop( \"selected\", true );",
      "",
      "[Removed Lines]",
      "859:  $optgroup = jQuery( \"<optgroup/>\" );",
      "",
      "[Added Lines]",
      "859:  $optgroup = jQuery( \"<optgroup></optgroup>\" );",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "970:  assert.equal( $button.val(), \"foobar\", \"Value retrieval on a button does not return innerHTML\" );",
      "971:  assert.equal( $button.val( \"baz\" ).html(), \"text\", \"Setting the value does not change innerHTML\" );",
      "974: } );",
      "976: QUnit.test( \"val() with non-matching values on dropdown list\", function( assert ) {",
      "",
      "[Removed Lines]",
      "973:  assert.equal( jQuery( \"<option/>\" ).val( \"test\" ).attr( \"value\" ), \"test\", \"Setting value sets the value attribute\" );",
      "",
      "[Added Lines]",
      "973:  assert.equal( jQuery( \"<option></option>\" ).val( \"test\" ).attr( \"value\" ), \"test\", \"Setting value sets the value attribute\" );",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1029:  assert.equal( document.getElementById( \"text1\" ).value, \"\", \"Check for modified (via val(null)) value of input element\" );",
      "1031:  var j,",
      "1033:   $select1 = jQuery( \"#select1\" );",
      "1035:  $select1.val( valueObj( \"3\" ) );",
      "",
      "[Removed Lines]",
      "1032:   $select = jQuery( \"<select multiple><option value='1'/><option value='2'/></select>\" ),",
      "",
      "[Added Lines]",
      "1032:   $select = jQuery( \"<select multiple><option value='1'></option><option value='2'></option></select>\" ),",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1145: QUnit.test( \"select.val(space characters) (gh-2978)\", function( assert ) {",
      "1146:  assert.expect( 37 );",
      "1149:   spaces = {",
      "1150:    \"\\\\t\": {",
      "1151:     html: \"&#09;\",",
      "",
      "[Removed Lines]",
      "1148:  var $select = jQuery( \"<select/>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "1148:  var $select = jQuery( \"<select></select>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1230:  j.addClass( valueObj( \"asdf\" ) );",
      "1231:  assert.ok( j.hasClass( \"asdf\" ), \"Check node,textnode,comment for addClass\" );",
      "1235:  div.addClass( valueObj( \"test\" ) );",
      "1236:  assert.equal( div.attr( \"class\" ), \"test\", \"Make sure there's no extra whitespace.\" );",
      "",
      "[Removed Lines]",
      "1233:  div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "1233:  div = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1669:  assert.expect( 1 );",
      "1671:  var area,",
      "1675:  assert.equal( area.attr( \"coords\" ), \"0,0,0,0\", \"did not retrieve coords correctly\" );",
      "1676: } );",
      "",
      "[Removed Lines]",
      "1672:   map = jQuery( \"<map />\" );",
      "1674:  area = map.html( \"<area shape='rect' coords='0,0,0,0' href='#' alt='a' />\" ).find( \"area\" );",
      "",
      "[Added Lines]",
      "1672:   map = jQuery( \"<map></map>\" );",
      "1674:  area = map.html( \"<area shape='rect' coords='0,0,0,0' href='#' alt='a'></area>\" ).find( \"area\" );",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1679:  assert.expect( 1 );",
      "1681:  try {",
      "1683:   assert.ok( true );",
      "1684:  } catch ( _ ) {",
      "1685:   assert.ok( false );",
      "",
      "[Removed Lines]",
      "1682:   jQuery( \"<option/>\" ).val();",
      "",
      "[Added Lines]",
      "1682:   jQuery( \"<option></option>\" ).val();",
      "",
      "---------------"
    ],
    "test/unit/basic.js||test/unit/basic.js": [
      "File: test/unit/basic.js -> test/unit/basic.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: QUnit.test( \"attributes\", function( assert ) {",
      "37:  assert.expect( 6 );",
      "40:   input = jQuery( \"<input/>\" ).appendTo( \"#qunit-fixture\" );",
      "42:  assert.strictEqual( a.attr( \"foo\", \"bar\" ).attr( \"foo\" ), \"bar\", \".attr getter/setter\" );",
      "",
      "[Removed Lines]",
      "39:  var a = jQuery( \"<a/>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "39:  var a = jQuery( \"<a></a>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: QUnit.test( \"css\", function( assert ) {",
      "57:  assert.expect( 1 );",
      "61:  assert.strictEqual( div.css( \"width\", \"50px\" ).css( \"width\" ), \"50px\", \".css getter/setter\" );",
      "62: } );",
      "",
      "[Removed Lines]",
      "59:  var div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Added Lines]",
      "59:  var div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "66: QUnit.test( \"show/hide\", function( assert ) {",
      "67:  assert.expect( 2 );",
      "71:  div.hide();",
      "72:  assert.strictEqual( div.css( \"display\" ), \"none\", \"div hidden\" );",
      "",
      "[Removed Lines]",
      "69:  var div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Added Lines]",
      "69:  var div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "126: QUnit.test( \"data\", function( assert ) {",
      "127:  assert.expect( 4 );",
      "131:  assert.ok( !jQuery.hasData( elem[ 0 ] ), \"jQuery.hasData - false\" );",
      "132:  assert.strictEqual( elem.data( \"a\", \"b\" ).data( \"a\" ), \"b\", \".data getter/setter\" );",
      "",
      "[Removed Lines]",
      "129:  var elem = jQuery( \"<div data-c='d'/>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Added Lines]",
      "129:  var elem = jQuery( \"<div data-c='d'></div>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "138:  assert.expect( 3 );",
      "140:  var elem = jQuery(",
      "142:  ).appendTo( \"#qunit-fixture\" );",
      "144:  assert.strictEqual( elem.width( 50 ).width(), 50, \".width getter/setter\" );",
      "",
      "[Removed Lines]",
      "141:   \"<div style='margin: 10px; padding: 7px; border: 2px solid black;' /> \"",
      "",
      "[Added Lines]",
      "141:   \"<div style='margin: 10px; padding: 7px; border: 2px solid black;'></div> \"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "149: QUnit.test( \"event\", function( assert ) {",
      "150:  assert.expect( 1 );",
      "154:  elem",
      "155:   .on( \"click\", function() {",
      "",
      "[Removed Lines]",
      "152:  var elem = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Added Lines]",
      "152:  var elem = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "169:  var child,",
      "170:   elem1 = jQuery( \"<div><span></span></div>\" ).appendTo( \"#qunit-fixture\" ),",
      "173:  assert.strictEqual( elem1.text( \"foo\" ).text(), \"foo\", \".html getter/setter\" );",
      "175:  assert.strictEqual(",
      "177:   \"<span></span>\",",
      "178:   \".html getter/setter\"",
      "179:  );",
      "",
      "[Removed Lines]",
      "171:   elem2 = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
      "176:   elem1.html( \"<span/>\" ).html(),",
      "",
      "[Added Lines]",
      "171:   elem2 = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
      "176:   elem1.html( \"<span></span>\" ).html(),",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "182:  assert.strictEqual( elem1.prepend( elem2 )[ 0 ].childNodes[ 0 ], elem2[ 0 ], \".prepend\" );",
      "184:  child = elem1.find( \"span\" );",
      "188:  assert.strictEqual(",
      "189:   elem1.html(),",
      "",
      "[Removed Lines]",
      "185:  child.after( \"<a/>\" );",
      "186:  child.before( \"<b/>\" );",
      "",
      "[Added Lines]",
      "185:  child.after( \"<a></a>\" );",
      "186:  child.before( \"<b></b>\" );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "197: QUnit[ /jsdom\\//.test( navigator.userAgent ) ? \"skip\" : \"test\" ]( \"offset\", function( assert ) {",
      "198:  assert.expect( 3 );",
      "203:  assert.strictEqual( elem.offset().top, 25, \".offset getter\" );",
      "204:  assert.strictEqual( elem.position().top, 5, \".position getter\" );",
      "",
      "[Removed Lines]",
      "200:  var parent = jQuery( \"<div style='position:fixed;top:20px;'/>\" ).appendTo( \"#qunit-fixture\" ),",
      "201:   elem = jQuery( \"<div style='position:absolute;top:5px;'/>\" ).appendTo( parent );",
      "",
      "[Added Lines]",
      "200:  var parent = jQuery( \"<div style='position:fixed;top:20px;'></div>\" ).appendTo( \"#qunit-fixture\" ),",
      "201:   elem = jQuery( \"<div style='position:absolute;top:5px;'></div>\" ).appendTo( parent );",
      "",
      "---------------"
    ],
    "test/unit/core.js||test/unit/core.js": [
      "File: test/unit/core.js -> test/unit/core.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:  var elem, i,",
      "25:   obj = jQuery( \"div\" ),",
      "27:   img = jQuery( \"<img/>\" ),",
      "29:   exec = false,",
      "30:   expected = 23,",
      "31:   attrObj = {",
      "",
      "[Removed Lines]",
      "26:   code = jQuery( \"<code/>\" ),",
      "28:   div = jQuery( \"<div/><hr/><code/><b/>\" ),",
      "",
      "[Added Lines]",
      "26:   code = jQuery( \"<code></code>\" ),",
      "28:   div = jQuery( \"<div></div><hr/><code></code><b/>\" ),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:  elem = jQuery( \"\\n\\n<em>world</em>\" )[ 0 ];",
      "114:  assert.equal( elem.nodeName.toLowerCase(), \"em\", \"leading newlines\" );",
      "118:  if ( jQuery.fn.width ) {",
      "119:   assert.equal( elem[ 0 ].style.width, \"10px\", \"jQuery() quick setter width\" );",
      "",
      "[Removed Lines]",
      "116:  elem = jQuery( \"<div/>\", attrObj );",
      "",
      "[Added Lines]",
      "116:  elem = jQuery( \"<div></div>\", attrObj );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:  assert.ok( jQuery( \"<link rel='stylesheet'/>\" )[ 0 ], \"Creating a link\" );",
      "463:  assert.ok( jQuery( \"<input/>\" ).attr( \"type\", \"hidden\" ), \"Create an input and set the type.\" );",
      "",
      "[Removed Lines]",
      "461:  assert.ok( !jQuery( \"<script/>\" )[ 0 ].parentNode, \"Create a script\" );",
      "",
      "[Added Lines]",
      "461:  assert.ok( !jQuery( \"<script></script>\" )[ 0 ].parentNode, \"Create a script\" );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "526: QUnit.test( \"jQuery('html', context)\", function( assert ) {",
      "527:  assert.expect( 1 );",
      "531:  assert.equal( $span.length, 1, \"verify a span created with a div context works, #1763\" );",
      "532: } );",
      "",
      "[Removed Lines]",
      "529:  var $div = jQuery( \"<div/>\" )[ 0 ],",
      "530:   $span = jQuery( \"<span/>\", $div );",
      "",
      "[Added Lines]",
      "529:  var $div = jQuery( \"<div></div>\" )[ 0 ],",
      "530:   $span = jQuery( \"<span></span>\", $div );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1356:  assert.equal( jQuery.parseHTML( \"text\" )[ 0 ].nodeType, 3, \"Parsing text returns a text node\" );",
      "1357:  assert.equal( jQuery.parseHTML( \"\\t<div></div>\" )[ 0 ].nodeValue, \"\\t\", \"Preserve leading whitespace\" );",
      "1361:  html = jQuery.parseHTML( \"<div>test div</div>\" );",
      "",
      "[Removed Lines]",
      "1359:  assert.equal( jQuery.parseHTML( \" <div/> \" )[ 0 ].nodeType, 3, \"Leading spaces are treated as text nodes (#11290)\" );",
      "",
      "[Added Lines]",
      "1359:  assert.equal( jQuery.parseHTML( \" <div></div> \" )[ 0 ].nodeType, 3, \"Leading spaces are treated as text nodes (#11290)\" );",
      "",
      "---------------"
    ],
    "test/unit/css.js||test/unit/css.js": [
      "File: test/unit/css.js -> test/unit/css.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "13:  assert.notEqual( $child.css( \"width\" ), \"20px\", \"Retrieving a width percentage on the child of a hidden div returns percentage\" );",
      "14:  assert.notEqual( $child.css( \"height\" ), \"20px\", \"Retrieving a height percentage on the child of a hidden div returns percentage\" );",
      "",
      "[Removed Lines]",
      "16:  div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "16:  div = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25:  assert.equal( div.css( \"width\" ), \"4px\", \"Width on disconnected node.\" );",
      "26:  assert.equal( div.css( \"height\" ), \"4px\", \"Height on disconnected node.\" );",
      "30:  assert.equal( div2.find( \"input\" ).css( \"height\" ), \"20px\", \"Height on hidden input.\" );",
      "31:  assert.equal( div2.find( \"textarea\" ).css( \"height\" ), \"20px\", \"Height on hidden textarea.\" );",
      "",
      "[Removed Lines]",
      "28:  div2 = jQuery( \"<div style='display:none;'><input type='text' style='height:20px;'/><textarea style='height:20px;'/><div style='height:20px;'></div></div>\" ).appendTo( \"body\" );",
      "",
      "[Added Lines]",
      "28:  div2 = jQuery( \"<div style='display:none;'><input type='text' style='height:20px;'/><textarea style='height:20px;'></textarea><div style='height:20px;'></div></div>\" ).appendTo( \"body\" );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42:  assert.equal( parseFloat( jQuery( \"#nothiddendiv\" ).css( \"width\" ) ), 0, \"Test negative width set to 0\" );",
      "43:  assert.equal( parseFloat( jQuery( \"#nothiddendiv\" ).css( \"height\" ) ), 0, \"Test negative height set to 0\" );",
      "47:  jQuery( \"#floatTest\" ).css( { \"float\": \"right\" } );",
      "48:  assert.equal( jQuery( \"#floatTest\" ).css( \"float\" ), \"right\", \"Modified CSS float using \\\"float\\\": Assert float is right\" );",
      "",
      "[Removed Lines]",
      "45:  assert.equal( jQuery( \"<div style='display: none;'/>\" ).css( \"display\" ), \"none\", \"Styles on disconnected nodes\" );",
      "",
      "[Added Lines]",
      "45:  assert.equal( jQuery( \"<div style='display: none;'></div>\" ).css( \"display\" ), \"none\", \"Styles on disconnected nodes\" );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "112:  assert.strictEqual( child.css( \"x-fake\" ), undefined, \"Make sure undefined is returned from css(nonexistent).\" );",
      "115:  assert.strictEqual( div.css( \"z-index\" ), \"1000\",",
      "116:   \"Make sure that a string z-index is returned from css('z-index') (#14432).\" );",
      "117: } );",
      "",
      "[Removed Lines]",
      "114:  div = jQuery( \"<div/>\" ).css( { position: \"absolute\", \"z-index\": 1000 } ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Added Lines]",
      "114:  div = jQuery( \"<div></div>\" ).css( { position: \"absolute\", \"z-index\": 1000 } ).appendTo( \"#qunit-fixture\" );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "275:  assert.expect( 1 );",
      "277:  var right,",
      "279:    .css( { position: \"absolute\", width: \"400px\", fontSize: \"4px\" } )",
      "280:    .appendTo( \"#qunit-fixture\" ),",
      "282:    .css( { position: \"absolute\", left: \"50%\", right: \"50%\" } )",
      "283:    .appendTo( $container );",
      "",
      "[Removed Lines]",
      "278:   $container = jQuery( \"<div/>\" )",
      "281:   $el = jQuery( \"<div/>\" )",
      "",
      "[Added Lines]",
      "278:   $container = jQuery( \"<div></div>\" )",
      "281:   $el = jQuery( \"<div></div>\" )",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "574:  assert.equal( div.css( \"display\" ), \"none\",",
      "575:   \"A shown-while-detached div inside a visible div can be hidden by the CSS cascade\" );",
      "578:  span.show().appendTo( \"#qunit-fixture\" );",
      "579:  assert.equal( span.css( \"display\" ), \"none\",",
      "580:   \"A shown-while-detached span can be hidden by the CSS cascade\" );",
      "",
      "[Removed Lines]",
      "577:  span = jQuery( \"<span class='hidden'/>\" );",
      "",
      "[Added Lines]",
      "577:  span = jQuery( \"<span class='hidden'></span>\" );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "588:   \"A shown-while-detached cascade-hidden div is hidden after attachment\" );",
      "589:  div.remove();",
      "592:  span.appendTo( \"#qunit-fixture\" ).detach().show().appendTo( \"#qunit-fixture\" );",
      "593:  assert.equal( span.css( \"display\" ), \"none\",",
      "594:   \"A shown-while-detached cascade-hidden span is hidden after attachment\" );",
      "",
      "[Removed Lines]",
      "591:  span = jQuery( \"<span class='hidden'/>\" );",
      "",
      "[Added Lines]",
      "591:  span = jQuery( \"<span class='hidden'></span>\" );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "615:   \"A shown-while-detached inline-hidden div inside a visible div has default display \" +",
      "616:   \"after attachment\" );",
      "619:  span.show();",
      "620:  assert.equal( span[ 0 ].style.display, \"\",",
      "621:   \"show() updates inline style of a detached inline-hidden span\" );",
      "",
      "[Removed Lines]",
      "618:  span = jQuery( \"<span style='display: none'/>\" );",
      "",
      "[Added Lines]",
      "618:  span = jQuery( \"<span style='display: none'></span>\" );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "623:  assert.equal( span.css( \"display\" ), \"inline\",",
      "624:   \"A shown-while-detached inline-hidden span has default display after attachment\" );",
      "627:  div.show().appendTo( \"#qunit-fixture\" );",
      "628:  assert.equal( div.css( \"display\" ), \"inline\",",
      "629:   \"show() does not update inline style of a detached inline-visible div\" );",
      "630:  div.remove();",
      "633:  jQuery( \"#table\" ).append( tr );",
      "634:  tr.detach().hide().show();",
      "636:  assert.ok( !tr[ 0 ].style.display, \"Not-hidden detached tr elements have no inline style\" );",
      "637:  tr.remove();",
      "640:  assert.ok( !span[ 0 ].style.display, \"Not-hidden detached span elements have no inline style\" );",
      "641:  span.remove();",
      "642: } );",
      "",
      "[Removed Lines]",
      "626:  div = jQuery( \"<div style='display: inline'/>\" );",
      "632:  tr = jQuery( \"<tr/>\" );",
      "639:  span = jQuery( \"<span/>\" ).hide().show();",
      "",
      "[Added Lines]",
      "626:  div = jQuery( \"<div style='display: inline'></div>\" );",
      "632:  tr = jQuery( \"<tr></tr>\" );",
      "639:  span = jQuery( \"<span></span>\" ).hide().show();",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "718: QUnit.test( \"show() after hide() should always set display to initial value (#14750)\", function( assert ) {",
      "719:  assert.expect( 1 );",
      "722:   fixture = jQuery( \"#qunit-fixture\" );",
      "724:  fixture.append( div );",
      "",
      "[Removed Lines]",
      "721:  var div = jQuery( \"<div />\" ),",
      "",
      "[Added Lines]",
      "721:  var div = jQuery( \"<div></div>\" ),",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "732:  assert.expect( 36 );",
      "734:  var i,",
      "736:    .appendTo( \"#qunit-fixture\" )",
      "740:    .find( \"[data-expected-display]\" );",
      "742:  $elems.each( function() {",
      "",
      "[Removed Lines]",
      "735:   $elems = jQuery( \"<div/>\" )",
      "737:    .html( \"<div data-expected-display='block'/>\" +",
      "738:     \"<span data-expected-display='inline'/>\" +",
      "739:     \"<ul><li data-expected-display='list-item'/></ul>\" )",
      "",
      "[Added Lines]",
      "735:   $elems = jQuery( \"<div></div>\" )",
      "737:    .html( \"<div data-expected-display='block'></div>\" +",
      "738:     \"<span data-expected-display='inline'></span>\" +",
      "739:     \"<ul><li data-expected-display='list-item'></li></ul>\" )",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "790:  assert.expect( 36 );",
      "792:  var i,",
      "794:    .appendTo( \"#qunit-fixture\" )",
      "796:    .children();",
      "798:  $elems.each( function() {",
      "",
      "[Removed Lines]",
      "793:   $elems = jQuery( \"<div/>\" )",
      "795:    .html( \"<span class='block'/><div class='inline'/><div class='list-item'/>\" )",
      "",
      "[Added Lines]",
      "793:   $elems = jQuery( \"<div></div>\" )",
      "795:    .html( \"<span class='block'></span><div class='inline'></div><div class='list-item'></div>\" )",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "829:  assert.expect( 96 );",
      "831:  var i,",
      "833:    .appendTo( \"#qunit-fixture\" )",
      "838:     \"<ul>\" +",
      "843:     \"</ul>\" )",
      "844:    .find( \"[data-expected-display]\" );",
      "",
      "[Removed Lines]",
      "832:   $elems = jQuery( \"<div/>\" )",
      "834:    .html( \"<span data-expected-display='block' style='display:block'/>\" +",
      "835:     \"<span class='list-item' data-expected-display='block' style='display:block'/>\" +",
      "836:     \"<div data-expected-display='inline' style='display:inline'/>\" +",
      "837:     \"<div class='list-item' data-expected-display='inline' style='display:inline'/>\" +",
      "839:      \"<li data-expected-display='block' style='display:block'/>\" +",
      "840:      \"<li class='inline' data-expected-display='block' style='display:block'/>\" +",
      "841:      \"<li data-expected-display='inline' style='display:inline'/>\" +",
      "842:      \"<li class='block' data-expected-display='inline' style='display:inline'/>\" +",
      "",
      "[Added Lines]",
      "832:   $elems = jQuery( \"<div></div>\" )",
      "834:    .html( \"<span data-expected-display='block' style='display:block'></span>\" +",
      "835:     \"<span class='list-item' data-expected-display='block' style='display:block'></span>\" +",
      "836:     \"<div data-expected-display='inline' style='display:inline'></div>\" +",
      "837:     \"<div class='list-item' data-expected-display='inline' style='display:inline'></div>\" +",
      "839:      \"<li data-expected-display='block' style='display:block'></li>\" +",
      "840:      \"<li class='inline' data-expected-display='block' style='display:block'></li>\" +",
      "841:      \"<li data-expected-display='inline' style='display:inline'></li>\" +",
      "842:      \"<li class='block' data-expected-display='inline' style='display:inline'></li>\" +",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "878:  assert.expect( 72 );",
      "880:  var i,",
      "882:    .appendTo( \"#qunit-fixture\" )",
      "887:     \"<ul>\" +",
      "890:     \"</ul>\" )",
      "891:    .find( \"[data-expected-display]\" );",
      "",
      "[Removed Lines]",
      "881:   $elems = jQuery( \"<div/>\" )",
      "883:    .html( \"<div class='hidden' data-expected-display='block'/>\" +",
      "884:     \"<div class='hidden' data-expected-display='block' style='display:none'/>\" +",
      "885:     \"<span class='hidden' data-expected-display='inline'/>\" +",
      "886:     \"<span class='hidden' data-expected-display='inline' style='display:none'/>\" +",
      "888:      \"<li class='hidden' data-expected-display='list-item'/>\" +",
      "889:      \"<li class='hidden' data-expected-display='list-item' style='display:none'/>\" +",
      "",
      "[Added Lines]",
      "881:   $elems = jQuery( \"<div></div>\" )",
      "883:    .html( \"<div class='hidden' data-expected-display='block'></div>\" +",
      "884:     \"<div class='hidden' data-expected-display='block' style='display:none'></div>\" +",
      "885:     \"<span class='hidden' data-expected-display='inline'></span>\" +",
      "886:     \"<span class='hidden' data-expected-display='inline' style='display:none'></span>\" +",
      "888:      \"<li class='hidden' data-expected-display='list-item'></li>\" +",
      "889:      \"<li class='hidden' data-expected-display='list-item' style='display:none'></li>\" +",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "925:  assert.expect( 84 );",
      "927:  var i,",
      "929:    .appendTo( \"#qunit-fixture\" )",
      "934:     \"<ul>\" +",
      "938:     \"</ul>\" )",
      "939:    .find( \"[data-expected-display]\" );",
      "",
      "[Removed Lines]",
      "928:   $elems = jQuery( \"<div/>\" )",
      "930:    .html( \"<span data-expected-display='inline' style='display:none'/>\" +",
      "931:     \"<span class='list-item' data-expected-display='list-item' style='display:none'/>\" +",
      "932:     \"<div data-expected-display='block' style='display:none'/>\" +",
      "933:     \"<div class='list-item' data-expected-display='list-item' style='display:none'/>\" +",
      "935:      \"<li data-expected-display='list-item' style='display:none'/>\" +",
      "936:      \"<li class='block' data-expected-display='block' style='display:none'/>\" +",
      "937:      \"<li class='inline' data-expected-display='inline' style='display:none'/>\" +",
      "",
      "[Added Lines]",
      "928:   $elems = jQuery( \"<div></div>\" )",
      "930:    .html( \"<span data-expected-display='inline' style='display:none'></span>\" +",
      "931:     \"<span class='list-item' data-expected-display='list-item' style='display:none'></span>\" +",
      "932:     \"<div data-expected-display='block' style='display:none'></div>\" +",
      "933:     \"<div class='list-item' data-expected-display='list-item' style='display:none'></div>\" +",
      "935:      \"<li data-expected-display='list-item' style='display:none'></li>\" +",
      "936:      \"<li class='block' data-expected-display='block' style='display:none'></li>\" +",
      "937:      \"<li class='inline' data-expected-display='inline' style='display:none'></li>\" +",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1006: QUnit[ jQuery.find.compile && jQuery.fn.toggle ? \"test\" : \"skip\" ]( \"detached toggle()\", function( assert ) {",
      "1007:  assert.expect( 6 );",
      "1012:  detached.toggle();",
      "1013:  detached.appendTo( \"#qunit-fixture\" );",
      "",
      "[Removed Lines]",
      "1008:  var detached = jQuery( \"<p><a/><p>\" ).find( \"*\" ).addBack(),",
      "1009:   hiddenDetached = jQuery( \"<p><a/></p>\" ).find( \"*\" ).addBack().css( \"display\", \"none\" ),",
      "1010:   cascadeHiddenDetached = jQuery( \"<p><a/></p>\" ).find( \"*\" ).addBack().addClass( \"hidden\" );",
      "",
      "[Added Lines]",
      "1008:  var detached = jQuery( \"<p><a></a><p>\" ).find( \"*\" ).addBack(),",
      "1009:   hiddenDetached = jQuery( \"<p><a></a></p>\" ).find( \"*\" ).addBack().css( \"display\", \"none\" ),",
      "1010:   cascadeHiddenDetached = jQuery( \"<p><a></a></p>\" ).find( \"*\" ).addBack().addClass( \"hidden\" );",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1108: QUnit.test( \"box model properties incorrectly returning % instead of px, see #10639 and #12088\", function( assert ) {",
      "1109:  assert.expect( 2 );",
      "1115:  assert.equal( el.css( \"marginRight\" ), \"200px\", \"css('marginRight') returning % instead of px, see #10639\" );",
      "1116:  assert.equal( el2.css( \"marginLeft\" ), \"100px\", \"css('marginLeft') returning incorrect pixel value, see #12088\" );",
      "",
      "[Removed Lines]",
      "1111:  var container = jQuery( \"<div/>\" ).width( 400 ).appendTo( \"#qunit-fixture\" ),",
      "1112:   el = jQuery( \"<div/>\" ).css( { \"width\": \"50%\", \"marginRight\": \"50%\" } ).appendTo( container ),",
      "1113:   el2 = jQuery( \"<div/>\" ).css( { \"width\": \"50%\", \"minWidth\": \"300px\", \"marginLeft\": \"25%\" } ).appendTo( container );",
      "",
      "[Added Lines]",
      "1111:  var container = jQuery( \"<div></div>\" ).width( 400 ).appendTo( \"#qunit-fixture\" ),",
      "1112:   el = jQuery( \"<div></div>\" ).css( { \"width\": \"50%\", \"marginRight\": \"50%\" } ).appendTo( container ),",
      "1113:   el2 = jQuery( \"<div></div>\" ).css( { \"width\": \"50%\", \"minWidth\": \"300px\", \"marginLeft\": \"25%\" } ).appendTo( container );",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1154:  assert.expect( 2 );",
      "1155:  var span, div;",
      "1158:  assert.notEqual( span.css( \"background-image\" ), null, \"can't get background-image in IE<9, see #10254\" );",
      "1161:  assert.equal( div.css( \"top\" ), \"10px\", \"can't get top in IE<9, see #8388\" );",
      "1162: } );",
      "",
      "[Removed Lines]",
      "1157:  span = jQuery( \"<span/>\" ).css( \"background-image\", \"url(\" + baseURL + \"1x1.jpg)\" );",
      "1160:  div = jQuery( \"<div/>\" ).css( \"top\", 10 );",
      "",
      "[Added Lines]",
      "1157:  span = jQuery( \"<span></span>\" ).css( \"background-image\", \"url(\" + baseURL + \"1x1.jpg)\" );",
      "1160:  div = jQuery( \"<div></div>\" ).css( \"top\", 10 );",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1172: } );",
      "1174: QUnit.test( \"can't get background-position in IE<9, see #10796\", function( assert ) {",
      "1176:   units = [",
      "1177:    \"0 0\",",
      "1178:    \"12px 12px\",",
      "",
      "[Removed Lines]",
      "1175:  var div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "1175:  var div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1262:   };",
      "1264:  for ( prop in gridProps ) {",
      "1266:   $div.css( prop, 2 );",
      "1268:   value = gridProps[ prop ];",
      "",
      "[Removed Lines]",
      "1265:   $div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Added Lines]",
      "1265:   $div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1627:   QUnit.test( \"Don't append px to CSS \\\"order\\\" value (#14049)\", function( assert ) {",
      "1628:    assert.expect( 1 );",
      "1632:    $elem.css( \"order\", 2 );",
      "1633:    assert.equal( $elem.css( \"order\" ), \"2\", \"2 on order\" );",
      "",
      "[Removed Lines]",
      "1630:    var $elem = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "1630:    var $elem = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1706:   resetCssPropsFor( \"appearance\" );",
      "1707:   resetCssPropsFor( \"transform\" );",
      "1710:    .css( {",
      "1711:     msAppearance: \"none\",",
      "1712:     appearance: \"none\",",
      "",
      "[Removed Lines]",
      "1709:   elem = jQuery( \"<div/>\" )",
      "",
      "[Added Lines]",
      "1709:   elem = jQuery( \"<div></div>\" )",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1730:  QUnit.test( \"Don't detect fake set properties on a node when caching the prefixed version\", function( assert ) {",
      "1731:   assert.expect( 1 );",
      "1734:    style = elem[ 0 ].style;",
      "1735:   style.MozFakeProperty = \"old value\";",
      "1736:   elem.css( \"fakeProperty\", \"new value\" );",
      "",
      "[Removed Lines]",
      "1733:   var elem = jQuery( \"<div/>\" ),",
      "",
      "[Added Lines]",
      "1733:   var elem = jQuery( \"<div></div>\" ),",
      "",
      "---------------"
    ],
    "test/unit/data.js||test/unit/data.js": [
      "File: test/unit/data.js -> test/unit/data.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "427:  assert.expect( 4 );",
      "429:  var obj, jqobj,",
      "432:  div.data( { \"test\": \"in\", \"test2\": \"in2\" } );",
      "433:  assert.equal( div.data( \"test\" ), \"in\", \"Verify setting an object in data\" );",
      "",
      "[Removed Lines]",
      "430:   div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "430:   div = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "557:  assert.expect( 2 );",
      "560:   test = {",
      "561:    \"camelBar\": \"camelBar\",",
      "562:    \"hyphen-foo\": \"hyphen-foo\"",
      "",
      "[Removed Lines]",
      "559:  var div = jQuery( \"<div/>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "559:  var div = jQuery( \"<div></div>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "574:  assert.expect( 1 );",
      "578:  div.data( \"foo-bar\", \"baz\" );",
      "",
      "[Removed Lines]",
      "576:  var div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "576:  var div = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "586:  var a, b;",
      "590:  a.attr( \"data-long-param\", \"test\" );",
      "591:  a.data( \"long-param\", { a: 2 } );",
      "593:  assert.deepEqual( a.data( \"long-param\" ), { a: 2 }, \"data with property long-param was found, 1\" );",
      "597:  b.attr( \"data-long-param\", \"test\" );",
      "598:  b.data( \"long-param\" );",
      "",
      "[Removed Lines]",
      "588:  a = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
      "595:  b = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Added Lines]",
      "588:  a = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
      "595:  b = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "669: QUnit.test( \".data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values\", function( assert ) {",
      "672:   datas = {",
      "673:    \"non-empty\": {",
      "674:     key: \"nonEmpty\",",
      "",
      "[Removed Lines]",
      "671:  var div = jQuery( \"<div/>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "671:  var div = jQuery( \"<div></div>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "736: } );",
      "738: QUnit.test( \".data supports interoperable removal of hyphenated/camelCase properties\", function( assert ) {",
      "740:   rdashAlpha = /-([a-z])/g,",
      "741:   datas = {",
      "742:    \"non-empty\": \"a string\",",
      "",
      "[Removed Lines]",
      "739:  var div = jQuery( \"<div/>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "739:  var div = jQuery( \"<div></div>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "943:  assert.expect( 2 );",
      "945:  var key,",
      "947:  div.data( \"some\", \"data\" );",
      "948:  assert.equal( div.data( \"some\" ), \"data\", \"Data is added\" );",
      "949:  div.removeData( \"some\" );",
      "",
      "[Removed Lines]",
      "946:   div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "946:   div = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "977:  assert.expect( 1 );",
      "979:  var key,",
      "982:  div.data( \"foo\" );",
      "983:  assert.equal( jQuery.hasData( div[ 0 ] ), false, \"No data exists after access\" );",
      "",
      "[Removed Lines]",
      "980:   div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "980:   div = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "993: QUnit.test( \"keys matching Object.prototype properties  (gh-3256)\", function( assert ) {",
      "994:  assert.expect( 2 );",
      "998:  assert.strictEqual( div.data( \"hasOwnProperty\" ), undefined,",
      "999:   \"hasOwnProperty not matched (before forced data creation)\" );",
      "",
      "[Removed Lines]",
      "996:  var div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "996:  var div = jQuery( \"<div></div>\" );",
      "",
      "---------------"
    ],
    "test/unit/deprecated.js||test/unit/deprecated.js": [
      "File: test/unit/deprecated.js -> test/unit/deprecated.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "138: QUnit[ jQuery.fn.click ? \"test\" : \"skip\" ]( \"Event aliases\", function( assert ) {",
      "142:   aliases = ( \"resize scroll click dblclick mousedown mouseup \" +",
      "143:    \"mousemove mouseover mouseout mouseenter mouseleave change \" +",
      "144:    \"select submit keydown keypress keyup contextmenu\" ).split( \" \" );",
      "",
      "[Removed Lines]",
      "141:  var $elem = jQuery( \"<div />\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "141:  var $elem = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------"
    ],
    "test/unit/dimensions.js||test/unit/dimensions.js": [
      "File: test/unit/dimensions.js -> test/unit/dimensions.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "342: QUnit.test( \"table dimensions\", function( assert ) {",
      "343:  assert.expect( 2 );",
      "346:   tdElem = table.find( \"td\" ).first(),",
      "347:   colElem = table.find( \"col\" ).first().width( 300 );",
      "",
      "[Removed Lines]",
      "345:  var table = jQuery( \"<table><colgroup><col/><col/></colgroup><tbody><tr><td></td><td>a</td></tr><tr><td></td><td>a</td></tr></tbody></table>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "345:  var table = jQuery( \"<table><colgroup><col></col><col></col></colgroup><tbody><tr><td></td><td>a</td></tr><tr><td></td><td>a</td></tr></tbody></table>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "536:  assert.expect( 1 );",
      "538:  var offsetTop,",
      "541:  element.offset( function( index, coords ) {",
      "542:   coords.top = 100;",
      "",
      "[Removed Lines]",
      "539:   element = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Added Lines]",
      "539:   element = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "584:  assert.expect( 2 );",
      "587:   .appendTo( \"#qunit-fixture\" );",
      "589:  assert.equal( $elem.width(), 200, \"Width ignores transforms\" );",
      "",
      "[Removed Lines]",
      "586:  var $elem = jQuery( \"<div style='width: 200px; height: 200px; transform: scale(2);' />\" )",
      "",
      "[Added Lines]",
      "586:  var $elem = jQuery( \"<div style='width: 200px; height: 200px; transform: scale(2);'></div>\" )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "663:     return old + adjustment;",
      "664:    };",
      "665:   },",
      "667:    .css( { position: \"absolute\", width: \"1000px\", height: \"1000px\" } )",
      "668:    .appendTo( \"#qunit-fixture\" ),",
      "669:   fraction = jQuery.support.boxSizingReliable() ?",
      "",
      "[Removed Lines]",
      "666:   parent = jQuery( \"<div/>\" )",
      "",
      "[Added Lines]",
      "666:   parent = jQuery( \"<div></div>\" )",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "672:   borderWidth = 1,",
      "673:   padding = 2,",
      "674:   size = 100 + fraction,",
      "676:    .css( {",
      "677:     \"box-sizing\": \"content-box\",",
      "678:     position: \"absolute\",",
      "",
      "[Removed Lines]",
      "675:   plainBox = jQuery( \"<div />\" )",
      "",
      "[Added Lines]",
      "675:   plainBox = jQuery( \"<div></div>\" )",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "760: QUnit.test( \"outerWidth/Height for table cells and textarea with border-box in IE 11 (gh-4102)\", function( assert ) {",
      "761:  assert.expect( 5 );",
      "",
      "[Removed Lines]",
      "762:  var $table = jQuery( \"<table class='border-box' style='border-collapse: separate' />\" ).appendTo( \"#qunit-fixture\" ),",
      "763:   $thead = jQuery( \"<thead />\" ).appendTo( $table ),",
      "764:   $firstTh = jQuery( \"<th style='width: 200px;padding: 5px' />\" ),",
      "765:   $secondTh = jQuery( \"<th style='width: 190px;padding: 5px' />\" ),",
      "766:   $thirdTh = jQuery( \"<th style='width: 180px;padding: 5px' />\" ),",
      "",
      "[Added Lines]",
      "762:  var $table = jQuery( \"<table class='border-box' style='border-collapse: separate'></table>\" ).appendTo( \"#qunit-fixture\" ),",
      "763:   $thead = jQuery( \"<thead></thead>\" ).appendTo( $table ),",
      "764:   $firstTh = jQuery( \"<th style='width: 200px;padding: 5px'></th>\" ),",
      "765:   $secondTh = jQuery( \"<th style='width: 190px;padding: 5px'></th>\" ),",
      "766:   $thirdTh = jQuery( \"<th style='width: 180px;padding: 5px'></th>\" ),",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "772:   $td = jQuery( \"<td style='height: 20px;padding: 5px;border: 1px solid;line-height:18px'>text</td>\" ),",
      "780:  jQuery( \"<tr><td></td></tr>\" ).appendTo( $tbody ).append( $td );",
      "782:  assert.strictEqual( $firstTh.outerWidth(), 200, \"First th has outerWidth 200.\" );",
      "",
      "[Removed Lines]",
      "774:   $tbody = jQuery( \"<tbody />\" ).appendTo( $table ),",
      "775:   $textarea = jQuery( \"<textarea style='height: 0;padding: 2px;border: 1px solid;box-sizing: border-box' />\" ).appendTo( \"#qunit-fixture\" );",
      "777:  jQuery( \"<tr />\" ).appendTo( $thead ).append( $firstTh );",
      "778:  jQuery( \"<tr />\" ).appendTo( $thead ).append( $secondTh );",
      "779:  jQuery( \"<tr />\" ).appendTo( $thead ).append( $thirdTh );",
      "",
      "[Added Lines]",
      "774:   $tbody = jQuery( \"<tbody></tbody>\" ).appendTo( $table ),",
      "775:   $textarea = jQuery( \"<textarea style='height: 0;padding: 2px;border: 1px solid;box-sizing: border-box'></textarea>\" ).appendTo( \"#qunit-fixture\" );",
      "777:  jQuery( \"<tr></tr>\" ).appendTo( $thead ).append( $firstTh );",
      "778:  jQuery( \"<tr></tr>\" ).appendTo( $thead ).append( $secondTh );",
      "779:  jQuery( \"<tr></tr>\" ).appendTo( $thead ).append( $thirdTh );",
      "",
      "---------------"
    ],
    "test/unit/effects.js||test/unit/effects.js": [
      "File: test/unit/effects.js -> test/unit/effects.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "605:  } );",
      "606:  this.clock.tick( 200 );",
      "609:  $elem.show( 0, function() {",
      "610:   assert.ok( true, \"Show callback with no duration\" );",
      "611:  } );",
      "",
      "[Removed Lines]",
      "608:  $elem = jQuery( \"<div />\" );",
      "",
      "[Added Lines]",
      "608:  $elem = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1302: QUnit.test( \"hide hidden elements, with animation (bug #7141)\", function( assert ) {",
      "1303:  assert.expect( 4 );",
      "1306:  assert.equal( div.css( \"display\" ), \"none\", \"Element is initially hidden\" );",
      "1307:  div.hide( 10, function() {",
      "1308:   assert.equal( div.css( \"display\" ), \"none\", \"Element is hidden in .hide() callback\" );",
      "",
      "[Removed Lines]",
      "1305:  var div = jQuery( \"<div id='bug7141' style='display:none'/>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Added Lines]",
      "1305:  var div = jQuery( \"<div id='bug7141' style='display:none'></div>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1603:    toggle: [ 1 ],",
      "1604:    slideToggle: []",
      "1605:   },",
      "1607:   $divTest = jQuery( \"<div>test</div>\" ),",
      "1610:   nullParentDisplay = $divEmpty.css( \"display\" ),",
      "1611:   underFragmentDisplay = $divTest.css( \"display\" ),",
      "1612:   clock = this.clock;",
      "",
      "[Removed Lines]",
      "1606:   $divEmpty = jQuery( \"<div/>\" ),",
      "1608:   $divNone = jQuery( \"<div style='display: none;'/>\" ),",
      "1609:   $divInline = jQuery( \"<div style='display: inline;'/>\" ),",
      "",
      "[Added Lines]",
      "1606:   $divEmpty = jQuery( \"<div></div>\" ),",
      "1608:   $divNone = jQuery( \"<div style='display: none;'></div>\" ),",
      "1609:   $divInline = jQuery( \"<div style='display: inline;'></div>\" ),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1626:  assert.expectJqData( env, $divNone[ 0 ], \"olddisplay\" );",
      "1628:  jQuery.each( showMethods, function( name, opt ) {",
      "1630:    assert.strictEqual( jQuery( this ).css( \"display\" ), nullParentDisplay,",
      "1631:     \".\" + name + \" block with null parentNode\" );",
      "1632:   } ] ) );",
      "",
      "[Removed Lines]",
      "1629:   jQuery.fn[ name ].apply( jQuery( \"<div/>\" ), opt.concat( [ function() {",
      "",
      "[Added Lines]",
      "1629:   jQuery.fn[ name ].apply( jQuery( \"<div></div>\" ), opt.concat( [ function() {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1637:   } ] ) );",
      "1638:  } );",
      "1639:  jQuery.each( toggleMethods, function( name, opt ) {",
      "1641:    assert.strictEqual( jQuery( this ).css( \"display\" ), \"none\",",
      "1642:     \".\" + name + \" block with null parentNode\" );",
      "1643:   } ] ) );",
      "",
      "[Removed Lines]",
      "1640:   jQuery.fn[ name ].apply( jQuery( \"<div/>\" ), opt.concat( [ function() {",
      "",
      "[Added Lines]",
      "1640:   jQuery.fn[ name ].apply( jQuery( \"<div></div>\" ), opt.concat( [ function() {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2362:  assert.expect( 2 );",
      "2364:  var clock = this.clock,",
      "2368:  jQuery( \"#qunit-fixture\" ).append( fromStyleSheet, fromStyleAttr );",
      "",
      "[Removed Lines]",
      "2365:   fromStyleSheet = jQuery( \"<span id='span-14824' />\" ),",
      "2366:   fromStyleAttr = jQuery( \"<span style='display: block;' />\" );",
      "",
      "[Added Lines]",
      "2365:   fromStyleSheet = jQuery( \"<span id='span-14824'></span>\" ),",
      "2366:   fromStyleAttr = jQuery( \"<span style='display: block;'></span>\" );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2463: QUnit.test( \"Display value is correct for disconnected nodes (trac-13310)\", function( assert ) {",
      "2464:  assert.expect( 3 );",
      "2468:  assert.equal( div.css( \"display\", \"inline\" ).hide().show().appendTo( \"body\" ).css( \"display\" ), \"inline\", \"Initialized display value has returned\" );",
      "2469:  div.remove();",
      "",
      "[Removed Lines]",
      "2466:  var div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "2466:  var div = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2485:  var clock = this.clock;",
      "2488:   var completed, interrupted,",
      "2489:    N = 100,",
      "2490:    fixture = jQuery( \"#qunit-fixture\" ),",
      "",
      "[Removed Lines]",
      "2487:  jQuery( \"<span/><div style='display:inline' title='inline div'/>\" ).each( function() {",
      "",
      "[Added Lines]",
      "2487:  jQuery( \"<span></span><div style='display:inline' title='inline div'></div>\" ).each( function() {",
      "",
      "---------------"
    ],
    "test/unit/event.js||test/unit/event.js": [
      "File: test/unit/event.js -> test/unit/event.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "153:  var cur, div,",
      "154:   obj = {};",
      "157:   assert.equal( e.type, cur, \"Verify right single event was fired.\" );",
      "158:  } );",
      "",
      "[Removed Lines]",
      "156:  div = jQuery( \"<div/>\" ).on( \"focusin.a\", function( e ) {",
      "",
      "[Added Lines]",
      "156:  div = jQuery( \"<div></div>\" ).on( \"focusin.a\", function( e ) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "164:  div.remove();",
      "167:   assert.equal( e.type, cur, \"Verify right multi event was fired.\" );",
      "168:   assert.equal( e.data, obj, \"Make sure the data came in correctly.\" );",
      "169:  } );",
      "",
      "[Removed Lines]",
      "166:  div = jQuery( \"<div/>\" ).on( \"click mouseover\", obj, function( e ) {",
      "",
      "[Added Lines]",
      "166:  div = jQuery( \"<div></div>\" ).on( \"click mouseover\", obj, function( e ) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "178:  div.remove();",
      "181:   assert.equal( e.type, cur, \"Verify right multi event was fired.\" );",
      "182:  } );",
      "",
      "[Removed Lines]",
      "180:  div = jQuery( \"<div/>\" ).on( \"focusin.a focusout.b\", function( e ) {",
      "",
      "[Added Lines]",
      "180:  div = jQuery( \"<div></div>\" ).on( \"focusin.a focusout.b\", function( e ) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "195:  assert.expect( 27 );",
      "197:  var i = 0,",
      "199:    assert.ok( true, \"Test event fired.\" );",
      "200:   } );",
      "",
      "[Removed Lines]",
      "198:   div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).on( \"test\", function() {",
      "",
      "[Added Lines]",
      "198:   div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).on( \"test\", function() {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "245:  div.off( \"test\" );",
      "248:   assert.ok( true, \"Test event fired.\" );",
      "249:  } );",
      "",
      "[Removed Lines]",
      "247:  div = jQuery( \"<div/>\" ).on( \"test\", function() {",
      "",
      "[Added Lines]",
      "247:  div = jQuery( \"<div></div>\" ).on( \"test\", function() {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "876:  assert.expect( 1 );",
      "878:  var count = 0,",
      "880:  elem.on( \"mouseenter\", function() {",
      "881:   count++;",
      "882:  } );",
      "",
      "[Removed Lines]",
      "879:   elem = jQuery( \"<a />\" );",
      "",
      "[Added Lines]",
      "879:   elem = jQuery( \"<a></a>\" );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "890:  assert.expect( 1 );",
      "892:  var count = 0,",
      "894:  elem.on( \"pointerenter\", function() {",
      "895:   count++;",
      "896:  } );",
      "",
      "[Removed Lines]",
      "893:   elem = jQuery( \"<a />\" );",
      "",
      "[Added Lines]",
      "893:   elem = jQuery( \"<a></a>\" );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1075:  var $formByClone, $formByHTML,",
      "1076:   $testForm = jQuery( \"#testForm\" ),",
      "1077:   $fixture = jQuery( \"#qunit-fixture\" ),",
      "1080:  function noSubmit( e ) {",
      "1081:   e.preventDefault();",
      "",
      "[Removed Lines]",
      "1078:   $wrapperDiv = jQuery( \"<div/>\" ).appendTo( $fixture );",
      "",
      "[Added Lines]",
      "1078:   $wrapperDiv = jQuery( \"<div></div>\" ).appendTo( $fixture );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1111:  var $formByClone, $formByHTML,",
      "1112:   $form = jQuery( \"#form\" ),",
      "1113:   $fixture = jQuery( \"#qunit-fixture\" ),",
      "1116:  function delegatedChange() {",
      "1117:   assert.ok( true, \"Make sure change event bubbles up.\" );",
      "",
      "[Removed Lines]",
      "1114:   $wrapperDiv = jQuery( \"<div/>\" ).appendTo( $fixture );",
      "",
      "[Added Lines]",
      "1114:   $wrapperDiv = jQuery( \"<div></div>\" ).appendTo( $fixture );",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1141:  assert.expect( 28 );",
      "1143:  var event,",
      "1145:   $child = jQuery( \"<p id='child'>foo</p>\" ).appendTo( $parent );",
      "1147:  $parent.get( 0 ).style.display = \"none\";",
      "",
      "[Removed Lines]",
      "1144:   $parent = jQuery( \"<div id='par' />\" ).appendTo( \"body\" ),",
      "",
      "[Added Lines]",
      "1144:   $parent = jQuery( \"<div id='par'></div>\" ).appendTo( \"body\" ),",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1799: QUnit.test( \"events with type matching an Object.prototype property (gh-3256)\", function( assert ) {",
      "1800:  assert.expect( 1 );",
      "1803:   eventFired = false;",
      "1805:  elem.appendTo( \"#qunit-fixture\" );",
      "",
      "[Removed Lines]",
      "1802:  var elem = jQuery( \"<div/>\" ),",
      "",
      "[Added Lines]",
      "1802:  var elem = jQuery( \"<div></div>\" ),",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1819:  function( assert ) {",
      "1820:  assert.expect( 1 );",
      "1823:   eventFired = false;",
      "1825:  elem.appendTo( \"#qunit-fixture\" );",
      "",
      "[Removed Lines]",
      "1822:  var elem = jQuery( \"<div/>\" ),",
      "",
      "[Added Lines]",
      "1822:  var elem = jQuery( \"<div></div>\" ),",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2783:  assert.expect( 2 );",
      "2785:  var key,",
      "2788:  div.on( \"click\", false );",
      "2789:  div.on( \"custom\", function() {",
      "",
      "[Removed Lines]",
      "2786:   div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Added Lines]",
      "2786:   div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "---------------"
    ],
    "test/unit/manipulation.js||test/unit/manipulation.js": [
      "File: test/unit/manipulation.js -> test/unit/manipulation.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "88:  assert.equal( $multipleElements.eq( 1 ).text(), expected, \"text() updates multiple elements (#11809)\" );",
      "92:  $childDiv.data( \"leak\", true );",
      "94:  $parentDiv.append( $childDiv );",
      "95:  $parentDiv.text( \"Dry off\" );",
      "96: }",
      "",
      "[Removed Lines]",
      "91:  $childDiv = jQuery( \"<div/>\" );",
      "93:  $parentDiv = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "91:  $childDiv = jQuery( \"<div></div>\" );",
      "93:  $parentDiv = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "241:   assert.strictEqual( e.message || e, undefined, message );",
      "242:  }",
      "245:  assert.t( \"Append legend\", \"#legend\", [ \"legend\" ] );",
      "249:  assert.equal( $map[ 0 ].childNodes.length, 1, \"The area was inserted.\" );",
      "250:  assert.equal( $map[ 0 ].firstChild.nodeName.toLowerCase(), \"area\", \"The area was inserted.\" );",
      "",
      "[Removed Lines]",
      "244:  jQuery( \"<fieldset/>\" ).appendTo( \"#form\" ).append( valueObj( \"<legend id='legend'>test</legend>\" ) );",
      "247:  $map = jQuery( \"<map/>\" ).append( valueObj( \"<area id='map01' shape='rect' coords='50,50,150,150' href='http://www.jquery.com/' alt='jQuery'>\" ) );",
      "",
      "[Added Lines]",
      "244:  jQuery( \"<fieldset></fieldset>\" ).appendTo( \"#form\" ).append( valueObj( \"<legend id='legend'>test</legend>\" ) );",
      "247:  $map = jQuery( \"<map></map>\" ).append( valueObj( \"<area id='map01' shape='rect' coords='50,50,150,150' href='http://www.jquery.com/' alt='jQuery'>\" ) );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "264:   assert.ok( jQuery.parseHTML( \"<\" + name + \"/>\" ).length, name + \" wrapped correctly\" );",
      "265:  } );",
      "268:  assert.equal( jQuery( \"#table colgroup col\" ).length, 1, \"Append col\" );",
      "270:  jQuery( \"#form\" )",
      "",
      "[Removed Lines]",
      "267:  jQuery( \"#table colgroup\" ).append( valueObj( \"<col/>\" ) );",
      "",
      "[Added Lines]",
      "267:  jQuery( \"#table colgroup\" ).append( valueObj( \"<col></col>\" ) );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "272:   .append( valueObj( \"<select id='appendSelect2'><option>Test</option></select>\" ) );",
      "273:  assert.t( \"Append Select\", \"#appendSelect1, #appendSelect2\", [ \"appendSelect1\", \"appendSelect2\" ] );",
      "279:  j = jQuery( \"#nonnodes\" ).contents();",
      "282:  assert.equal( jQuery( \"#nonnodes\" ).length, 1, \"Check node,textnode,comment append moved leaving just the div\" );",
      "283:  assert.equal( d.contents().length, 3, \"Check node,textnode,comment append works\" );",
      "",
      "[Removed Lines]",
      "275:  assert.equal( \"Two nodes\", jQuery( \"<div />\" ).append( \"Two\", \" nodes\" ).text(), \"Appending two text nodes (#4011)\" );",
      "276:  assert.equal( jQuery( \"<div />\" ).append( \"1\", \"\", 3 ).text(), \"13\", \"If median is false-like value, subsequent arguments should not be ignored\" );",
      "280:  d = jQuery( \"<div/>\" ).appendTo( \"#nonnodes\" ).append( j );",
      "",
      "[Added Lines]",
      "275:  assert.equal( \"Two nodes\", jQuery( \"<div></div>\" ).append( \"Two\", \" nodes\" ).text(), \"Appending two text nodes (#4011)\" );",
      "276:  assert.equal( jQuery( \"<div></div>\" ).append( \"1\", \"\", 3 ).text(), \"13\", \"If median is false-like value, subsequent arguments should not be ignored\" );",
      "280:  d = jQuery( \"<div></div>\" ).appendTo( \"#nonnodes\" ).append( j );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "294:  $radioChecked.trigger( \"click\" );",
      "295:  $radioUnchecked[ 0 ].checked = false;",
      "299:  assert.equal( $radioChecked[ 0 ].checked, true, \"Reappending radios uphold which radio is checked\" );",
      "300:  assert.equal( $radioUnchecked[ 0 ].checked, false, \"Reappending radios uphold not being checked\" );",
      "303: }",
      "305: QUnit.test( \"append(String|Element|Array<Element>|jQuery)\", function( assert ) {",
      "",
      "[Removed Lines]",
      "297:  jQuery( \"<div/>\" ).insertBefore( $radioParent ).append( $radioParent );",
      "302:  assert.equal( jQuery( \"<div/>\" ).append( valueObj( \"option<area/>\" ) )[ 0 ].childNodes.length, 2, \"HTML-string with leading text should be processed correctly\" );",
      "",
      "[Added Lines]",
      "297:  jQuery( \"<div></div>\" ).insertBefore( $radioParent ).append( $radioParent );",
      "302:  assert.equal( jQuery( \"<div></div>\" ).append( valueObj( \"option<area></area>\" ) )[ 0 ].childNodes.length, 2, \"HTML-string with leading text should be processed correctly\" );",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "672:  jQuery( \"#select1\" ).appendTo( \"#foo\" );",
      "673:  assert.t( \"Append select\", \"#foo select\", [ \"select1\" ] );",
      "676:   assert.ok( true, \"Running a cloned click.\" );",
      "677:  } );",
      "678:  div.appendTo( \"#qunit-fixture, #moretests\" );",
      "",
      "[Removed Lines]",
      "675:  div = jQuery( \"<div/>\" ).on( \"click\", function() {",
      "",
      "[Added Lines]",
      "675:  div = jQuery( \"<div></div>\" ).on( \"click\", function() {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "680:  jQuery( \"#qunit-fixture div\" ).last().trigger( \"click\" );",
      "681:  jQuery( \"#moretests div\" ).last().trigger( \"click\" );",
      "685:  assert.equal( div.length, 2, \"appendTo returns the inserted elements\" );",
      "",
      "[Removed Lines]",
      "683:  div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture, #moretests\" );",
      "",
      "[Added Lines]",
      "683:  div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture, #moretests\" );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "689:  assert.ok( jQuery( \"#qunit-fixture div\" ).last().hasClass( \"test\" ), \"appendTo element was modified after the insertion\" );",
      "690:  assert.ok( jQuery( \"#moretests div\" ).last().hasClass( \"test\" ), \"appendTo element was modified after the insertion\" );",
      "693:  jQuery( \"<span>a</span><b>b</b>\" ).filter( \"span\" ).appendTo( div );",
      "695:  assert.equal( div.children().length, 1, \"Make sure the right number of children were inserted.\" );",
      "",
      "[Removed Lines]",
      "692:  div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "692:  div = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "989:  assert.expect( 2 );",
      "991:  var set;",
      "993:  assert.equal( set[ 0 ].nodeName.toLowerCase(), \"div\", \"Insert before a disconnected node should be a no-op\" );",
      "994:  assert.equal( set.length, 1, \"Insert the element before the disconnected node. should be a no-op\" );",
      "995: } );",
      "",
      "[Removed Lines]",
      "992:  set = jQuery( \"<div/>\" ).before( \"<span>test</span>\" );",
      "",
      "[Added Lines]",
      "992:  set = jQuery( \"<div></div>\" ).before( \"<span>test</span>\" );",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1009:  assert.expect( 2 );",
      "1013: } );",
      "1015: QUnit.test( \"insert with .before() on disconnected node last\", function( assert ) {",
      "",
      "[Removed Lines]",
      "1011:  assert.equal( jQuery( \"<input type='checkbox'/>\" ).before( \"<div/>\" ).length, 1, \"before() on disconnected node is no-op\" );",
      "1012:  assert.equal( jQuery( \"<input type='checkbox'/>\" ).after( \"<div/>\" ).length, 1, \"after() on disconnected node is no-op\" );",
      "",
      "[Added Lines]",
      "1011:  assert.equal( jQuery( \"<input type='checkbox'/>\" ).before( \"<div></div>\" ).length, 1, \"before() on disconnected node is no-op\" );",
      "1012:  assert.equal( jQuery( \"<input type='checkbox'/>\" ).after( \"<div></div>\" ).length, 1, \"after() on disconnected node is no-op\" );",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1019:  var expectedBefore = \"This is a normal link: bugaYahoo\";",
      "1022:  assert.equal( jQuery( \"#en\" ).text(), expectedBefore, \"Insert String before with disconnected node last\" );",
      "1023: } );",
      "",
      "[Removed Lines]",
      "1021:  jQuery( \"#yahoo\" ).add( \"<span/>\" ).before( \"<b>buga</b>\" );",
      "",
      "[Added Lines]",
      "1021:  jQuery( \"#yahoo\" ).add( \"<span></span>\" ).before( \"<b>buga</b>\" );",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1029:  var expectedBefore = \"This is a normal link: bugaYahoo\";",
      "1032:  assert.equal( jQuery( \"#en\" ).text(), expectedBefore, \"Insert String before with disconnected node first\" );",
      "1033: } );",
      "",
      "[Removed Lines]",
      "1031:  jQuery( \"<span/>\" ).add( \"#yahoo\" ).before( \"<b>buga</b>\" );",
      "",
      "[Added Lines]",
      "1031:  jQuery( \"<span></span>\" ).add( \"#yahoo\" ).before( \"<b>buga</b>\" );",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1039:  var expectedAfter = \"This is a normal link: Yahoobuga\";",
      "1042:  assert.equal( jQuery( \"#en\" ).text(), expectedAfter, \"Insert String after with disconnected node last\" );",
      "1043: } );",
      "",
      "[Removed Lines]",
      "1041:  jQuery( \"#yahoo\" ).add( \"<span/>\" ).after( \"<b>buga</b>\" );",
      "",
      "[Added Lines]",
      "1041:  jQuery( \"#yahoo\" ).add( \"<span></span>\" ).after( \"<b>buga</b>\" );",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1049:  var expectedAfter = \"This is a normal link: Yahoobuga\";",
      "1052:  assert.equal( jQuery( \"#en\" ).text(), expectedAfter, \"Insert String after with disconnected node first\" );",
      "1053: } );",
      "",
      "[Removed Lines]",
      "1051:  jQuery( \"<span/>\" ).add( \"#yahoo\" ).after( \"<b>buga</b>\" );",
      "",
      "[Added Lines]",
      "1051:  jQuery( \"<span></span>\" ).add( \"#yahoo\" ).after( \"<b>buga</b>\" );",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1169:  assert.expect( 2 );",
      "1172:  assert.equal( set[ 0 ].nodeName.toLowerCase(), \"div\", \"Insert after a disconnected node should be a no-op\" );",
      "1173:  assert.equal( set.length, 1, \"Insert the element after the disconnected node should be a no-op\" );",
      "1174: } );",
      "",
      "[Removed Lines]",
      "1171:  var set = jQuery( \"<div/>\" ).before( \"<span>test</span>\" );",
      "",
      "[Added Lines]",
      "1171:  var set = jQuery( \"<div></div>\" ).before( \"<span>test</span>\" );",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1250:  jQuery( \"#anchor1\" ).contents().replaceWith( val( tmp ) );",
      "1251:  assert.deepEqual( jQuery( \"#anchor1\" ).contents().get(), [ tmp ], \"Replace text node with element\" );",
      "1254:   assert.ok( true, \"Newly bound click run.\" );",
      "1255:  } );",
      "1257:   assert.ok( false, \"Previously bound click run.\" );",
      "1258:  } );",
      "1259:  child = y.append( \"<b>test</b>\" ).find( \"b\" ).on( \"click\", function() {",
      "",
      "[Removed Lines]",
      "1253:  tmp = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {",
      "1256:  y = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {",
      "",
      "[Added Lines]",
      "1253:  tmp = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {",
      "1256:  y = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1267:  y.trigger( \"click\" ); // Shouldn't be run",
      "1268:  child.trigger( \"click\" ); // Shouldn't be run",
      "1271:   assert.ok( false, \"Previously bound click run.\" );",
      "1272:  } );",
      "1273:  child2 = y.append( \"<u>test</u>\" ).find( \"u\" ).on( \"click\", function() {",
      "",
      "[Removed Lines]",
      "1270:  y = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {",
      "",
      "[Added Lines]",
      "1270:  y = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1280:  child2.trigger( \"click\" );",
      "1283:  assert.equal( set[ 0 ].nodeName.toLowerCase(), \"div\", \"No effect on a disconnected node.\" );",
      "1284:  assert.equal( set.length, 1, \"No effect on a disconnected node.\" );",
      "1285:  assert.equal( set[ 0 ].childNodes.length, 0, \"No effect on a disconnected node.\" );",
      "1287:  child = jQuery( \"#qunit-fixture\" ).children().first();",
      "1289:  $div.replaceWith( $div );",
      "1290:  assert.deepEqual( jQuery( \".pathological\", \"#qunit-fixture\" ).get(), $div.get(),",
      "1291:   \"Self-replacement\" );",
      "",
      "[Removed Lines]",
      "1282:  set = jQuery( \"<div/>\" ).replaceWith( val( \"<span>test</span>\" ) );",
      "1288:  $div = jQuery( \"<div class='pathological'/>\" ).insertBefore( child );",
      "",
      "[Added Lines]",
      "1282:  set = jQuery( \"<div></div>\" ).replaceWith( val( \"<span>test</span>\" ) );",
      "1288:  $div = jQuery( \"<div class='pathological'></div>\" ).insertBefore( child );",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1343:  assert.expect( 25 );",
      "1346:   expectedHTML = $el.html(),",
      "1347:   tests = {",
      "1348:    \"empty string\": \"\",",
      "",
      "[Removed Lines]",
      "1345:  var $el = jQuery( \"<div/><div/>\" ).html( \"<p>0</p>\" ),",
      "",
      "[Added Lines]",
      "1345:  var $el = jQuery( \"<div></div><div></div>\" ).html( \"<p>0</p>\" ),",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1355:   };",
      "1357:  jQuery.each( tests, function( label, input ) {",
      "1359:   assert.strictEqual( $el.html(), \"\", \"replaceWith(\" + label + \")\" );",
      "1361:   assert.strictEqual( $el.html(), \"\", \"replaceWith(function returning \" + label + \")\" );",
      "1363:   assert.strictEqual( $el.html(), \"\", \"replaceWith(other function returning \" + label + \")\" );",
      "1365:    return i ?",
      "1366:     input :",
      "1367:     jQuery( this ).html( i + \"\" );",
      "",
      "[Removed Lines]",
      "1358:   $el.html( \"<a/>\" ).children().replaceWith( input );",
      "1360:   $el.html( \"<b/>\" ).children().replaceWith( function() { return input; } );",
      "1362:   $el.html( \"<i/>\" ).children().replaceWith( function( i ) { return input; } );",
      "1364:   $el.html( \"<p/>\" ).children().replaceWith( function( i ) {",
      "",
      "[Added Lines]",
      "1358:   $el.html( \"<a></a>\" ).children().replaceWith( input );",
      "1360:   $el.html( \"<b></b>\" ).children().replaceWith( function() { return input; } );",
      "1362:   $el.html( \"<i></i>\" ).children().replaceWith( function( i ) { return input; } );",
      "1364:   $el.html( \"<p></p>\" ).children().replaceWith( function( i ) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1482:  div.remove();",
      "1486:  div.find( \"table\" ).on( \"click\", function() {",
      "1487:   assert.ok( true, \"Bound event still exists.\" );",
      "1488:  } );",
      "",
      "[Removed Lines]",
      "1485:  div = jQuery( \"<div/>\" ).append( [ document.createElement( \"table\" ), document.createElement( \"table\" ) ] );",
      "",
      "[Added Lines]",
      "1485:  div = jQuery( \"<div></div>\" ).append( [ document.createElement( \"table\" ), document.createElement( \"table\" ) ] );",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1509:  div.remove();",
      "1514:  clone = div.clone( true );",
      "1515:  assert.equal( clone.length, 1, \"One element cloned\" );",
      "",
      "[Removed Lines]",
      "1512:  div = jQuery( \"<div/>\" ).html( \"<embed height='355' width='425' src='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'></embed>\" );",
      "",
      "[Added Lines]",
      "1512:  div = jQuery( \"<div></div>\" ).html( \"<embed height='355' width='425' src='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'></embed>\" );",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1524:  clone = div.clone( true );",
      "1525:  assert.equal( clone.length, 1, \"One element cloned\" );",
      "",
      "[Removed Lines]",
      "1522:  div = jQuery( \"<div/>\" ).html( \"<object height='355' width='425' classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'>  <param name='movie' value='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\" );",
      "",
      "[Added Lines]",
      "1522:  div = jQuery( \"<div></div>\" ).html( \"<object height='355' width='425' classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'>  <param name='movie' value='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\" );",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1546:  } )();",
      "1551:  clone = div.clone( true );",
      "1552:  assert.equal( clone.length, 1, \"One element cloned\" );",
      "1553:  assert.equal( clone.html(), div.html(), \"Element contents cloned\" );",
      "1554:  assert.equal( clone[ 0 ].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );",
      "1557:  clone = div.clone( true );",
      "1558:  assert.equal( clone.data( \"a\" ), true, \"Data cloned.\" );",
      "1559:  clone.data( \"a\", false );",
      "",
      "[Removed Lines]",
      "1549:  div = jQuery( \"<div/>\" ).html( \"<object height='355' width='425' type='application/x-shockwave-flash' data='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='movie' value='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\" );",
      "1556:  div = jQuery( \"<div/>\" ).data( { \"a\": true } );",
      "",
      "[Added Lines]",
      "1549:  div = jQuery( \"<div></div>\" ).html( \"<object height='355' width='425' type='application/x-shockwave-flash' data='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='movie' value='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\" );",
      "1556:  div = jQuery( \"<div></div>\" ).data( { \"a\": true } );",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1688:   div = jQuery( \"<div></div>\" ),",
      "1689:   fixture = jQuery( \"#qunit-fixture\" );",
      "1692:  assert.equal( div.children().length, 2, \"Found children\" );",
      "1693:  assert.equal( div.children().children().length, 1, \"Found grandchild\" );",
      "1695:  actual = []; expected = [];",
      "1697:   expected.push( \"AREA\" );",
      "1698:   actual.push( childNodeNames( this ) );",
      "1699:  } );",
      "",
      "[Removed Lines]",
      "1691:  div.html( valueObj( \"<div id='parent_1'><div id='child_1'/></div><div id='parent_2'/>\" ) );",
      "1696:  tmp = jQuery( \"<map/>\" ).html( valueObj( \"<area alt='area'/>\" ) ).each( function() {",
      "",
      "[Added Lines]",
      "1691:  div.html( valueObj( \"<div id='parent_1'><div id='child_1'></div></div><div id='parent_2'></div>\" ) );",
      "1696:  tmp = jQuery( \"<map></map>\" ).html( valueObj( \"<area alt='area'></area>\" ) ).each( function() {",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1748:  assert.equal( expected.length, 1, \"Expecting one parent\" );",
      "1749:  assert.deepEqual( actual, expected, \"Found the inserted style element\" );",
      "1752:  jQuery( \"#qunit-fixture select\" ).html( valueObj( \"<option>O1</option><option selected='selected'>O2</option><option>O3</option>\" ) );",
      "1753:  assert.equal( jQuery( \"#qunit-fixture select\" ).val(), \"O2\", \"Selected option correct\" );",
      "",
      "[Removed Lines]",
      "1751:  fixture.html( valueObj( \"<select/>\" ) );",
      "",
      "[Added Lines]",
      "1751:  fixture.html( valueObj( \"<select></select>\" ) );",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "1904:  assert.equal( j.html().replace( / xmlns=\"[^\"]+\"/g, \"\" ).toLowerCase(), \"<b>bold</b>\", \"Check node,textnode,comment with html()\" );",
      "1908:  assert.equal( $div.html( function( i, val ) {",
      "1909:   assert.equal( val, \"\", \"Make sure the incoming value is correct.\" );",
      "",
      "[Removed Lines]",
      "1906:  $div = jQuery( \"<div />\" );",
      "",
      "[Added Lines]",
      "1906:  $div = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "1915:   return 0;",
      "1916:  } ).html(), \"0\", \"Setting a zero as html\" );",
      "1919:  insert = \"&lt;div&gt;hello1&lt;/div&gt;\";",
      "1920:  assert.equal( $div2.html( function( i, val ) {",
      "1921:   assert.equal( val, \"\", \"Make sure the incoming value is correct.\" );",
      "",
      "[Removed Lines]",
      "1918:  $div2 = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "1918:  $div2 = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "2211: QUnit.test( \"jQuery.cleanData eliminates all private data (gh-2127)\", function( assert ) {",
      "2212:  assert.expect( 3 );",
      "2216:  jQuery._data( div[ 0 ], \"gh-2127\", \"testing\" );",
      "",
      "[Removed Lines]",
      "2214:  var div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "[Added Lines]",
      "2214:  var div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "2231:  assert.expect( 3 );",
      "2233:  var key,",
      "2235:  div.data( \"some\", \"data\" );",
      "2236:  assert.ok( !jQuery.isEmptyObject( jQuery.data( div[ 0 ] ) ),  \"Ensure some public data exists\" );",
      "",
      "[Removed Lines]",
      "2234:   div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "2234:   div = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "2255:  var i,",
      "2257:   bad = [ \"start-\", \"toString\", \"hasOwnProperty\", \"append\", \"here&there!\", \"-end\" ];",
      "2259:  for ( i = 0; i < bad.length; i++ ) {",
      "",
      "[Removed Lines]",
      "2256:   $f = jQuery( \"<div />\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "2256:   $f = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "2422:  var div;",
      "2424:  try {",
      "2426:  } catch ( e ) {}",
      "2428:  assert.ok( div && div.jquery, \"Created nodes safely, guarded against exceptions on safeChildNodes[ -1 ]\" );",
      "",
      "[Removed Lines]",
      "2425:   div = jQuery( \"<div/><hr/><code/><b/>\" );",
      "",
      "[Added Lines]",
      "2425:   div = jQuery( \"<div></div><hr/><code></code><b></b>\" );",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "2433:  assert.expect( 5 );",
      "2440: } );",
      "2442: QUnit.test( \"html() - script exceptions bubble (#11743)\", function( assert ) {",
      "",
      "[Removed Lines]",
      "2435:  assert.strictEqual( jQuery( \"<div/>\" ).clone().addClass( \"test\" ).appendTo( \"<div/>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.clone\" );",
      "2436:  assert.strictEqual( jQuery( \"<div/>\" ).find( \"p\" ).end().addClass( \"test\" ).appendTo( \"<div/>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.fn.find\" );",
      "2437:  assert.strictEqual( jQuery( \"<div/>\" ).text( \"test\" ).addClass( \"test\" ).appendTo( \"<div/>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.fn.text\" );",
      "2438:  assert.strictEqual( jQuery( \"<bdi/>\" ).clone().addClass( \"test\" ).appendTo( \"<div/>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after clone html5 element\" );",
      "2439:  assert.strictEqual( jQuery( \"<p/>\" ).appendTo( \"<div/>\" ).end().length, jQuery( \"<p>test</p>\" ).appendTo( \"<div/>\" ).end().length, \"Elements created with createElement and with createDocumentFragment should be treated alike\" );",
      "",
      "[Added Lines]",
      "2435:  assert.strictEqual( jQuery( \"<div></div>\" ).clone().addClass( \"test\" ).appendTo( \"<div></div>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.clone\" );",
      "2436:  assert.strictEqual( jQuery( \"<div></div>\" ).find( \"p\" ).end().addClass( \"test\" ).appendTo( \"<div></div>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.fn.find\" );",
      "2437:  assert.strictEqual( jQuery( \"<div></div>\" ).text( \"test\" ).addClass( \"test\" ).appendTo( \"<div></div>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.fn.text\" );",
      "2438:  assert.strictEqual( jQuery( \"<bdi></bdi>\" ).clone().addClass( \"test\" ).appendTo( \"<div></div>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after clone html5 element\" );",
      "2439:  assert.strictEqual( jQuery( \"<p></p>\" ).appendTo( \"<div></div>\" ).end().length, jQuery( \"<p>test</p>\" ).appendTo( \"<div></div>\" ).end().length, \"Elements created with createElement and with createDocumentFragment should be treated alike\" );",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "2526:    \"<script>QUnit.assert.ok( true, 'evaluated: inner no type' );</script>\",",
      "2527:   \"</div>\"",
      "2528:  ].join( \"\" ) );",
      "2530:  objGlobal.ok = isOk;",
      "2532:  scriptsOut = fixture.append( scriptsIn ).find( \"script\" );",
      "",
      "[Removed Lines]",
      "2529:  scriptsIn.appendTo( jQuery( \"<div class='detached'/>\" ) );",
      "",
      "[Added Lines]",
      "2529:  scriptsIn.appendTo( jQuery( \"<div class='detached'></div>\" ) );",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "2544:  if ( jQuery.ajax ) {",
      "2545:   Globals.register( \"testBar\" );",
      "2547:   assert.strictEqual( window.testBar, \"bar\", \"Global script evaluation\" );",
      "2548:  } else {",
      "2549:   assert.ok( true, \"No jQuery.ajax\" );",
      "",
      "[Removed Lines]",
      "2546:   jQuery( \"#qunit-fixture\" ).append( \"<script src='\" + url( \"mock.php?action=testbar\" ) + \"'/>\" );",
      "",
      "[Added Lines]",
      "2546:   jQuery( \"#qunit-fixture\" ).append( \"<script src='\" + url( \"mock.php?action=testbar\" ) + \"'></script>\" );",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "2565:   assert.equal( ( input.url || input ).slice( -1 ), expectedArgument, message );",
      "2566:   expectedArgument++;",
      "2567:  };",
      "2569:  assert.equal( expectedArgument, 3, \"synchronous execution\" );",
      "2571:  message = \"custom implementation\";",
      "",
      "[Removed Lines]",
      "2568:  jQuery( \"#qunit-fixture\" ).append( \"<script src='1'/><script src='2'/>\" );",
      "",
      "[Added Lines]",
      "2568:  jQuery( \"#qunit-fixture\" ).append( \"<script src='1'></script><script src='2'></script>\" );",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "2574:  jQuery.ajax = function( options ) {",
      "2575:   assert.strictEqual( options, {}, \"Unexpected call to jQuery.ajax\" );",
      "2576:  };",
      "2579:  jQuery.ajax = ajax;",
      "2580:  jQuery._evalUrl = evalUrl;",
      "",
      "[Removed Lines]",
      "2577:  jQuery( \"#qunit-fixture\" ).append( \"<script src='3'/><script src='4'/>\" );",
      "",
      "[Added Lines]",
      "2577:  jQuery( \"#qunit-fixture\" ).append( \"<script src='3'></script><script src='4'></script>\" );",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "2588:   invocations = 0,",
      "2589:   done = assert.async(),",
      "2590:   htmlPrefilter = jQuery.htmlPrefilter,",
      "2592:   poison = \"<script>jQuery.htmlPrefilter.assert.ok( false, 'script not executed' );</script>\";",
      "2594:  jQuery.htmlPrefilter = function( html ) {",
      "",
      "[Removed Lines]",
      "2591:   fixture = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "2591:   fixture = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "2604:  expectedArgument = \"A-\" + poison + \"B-\" + poison + poison + \"C-\";",
      "2605:  fixture.html( expectedArgument );",
      "2608:  fixture.append( expectedArgument );",
      "2610:  expectedArgument = poison;",
      "",
      "[Removed Lines]",
      "2607:  expectedArgument = \"D-\" + poison + \"E-\" + \"<del/><div>\" + poison + poison + \"</div>\" + \"F-\";",
      "",
      "[Added Lines]",
      "2607:  expectedArgument = \"D-\" + poison + \"E-\" + \"<del></del><div>\" + poison + poison + \"</div>\" + \"F-\";",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "2660:  var i = 0;",
      "2663:   assert.equal( index, i++, \"Index should be correct\" );",
      "2664:  } );",
      "",
      "[Removed Lines]",
      "2662:  jQuery( \"<div/><div/>\" ).before( function( index ) {",
      "",
      "[Added Lines]",
      "2662:  jQuery( \"<div></div><div></div>\" ).before( function( index ) {",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "2685:    thead: \"<tr><td>thead</td></tr>\",",
      "2686:    tbody: \"<tr><td>tbody</td></tr>\",",
      "2687:    tfoot: \"<tr><td>tfoot</td></tr>\",",
      "2689:    caption: \"caption\",",
      "2690:    tr: \"<td>tr</td>\",",
      "2691:    th: \"th\",",
      "",
      "[Removed Lines]",
      "2688:    colgroup: \"<col span='5' />\",",
      "",
      "[Added Lines]",
      "2688:    colgroup: \"<col span='5'></col>\",",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "2702:   args.push( html );",
      "2703:  } );",
      "2706:   assert.ok( this.nodeName.toLowerCase() === results[ i ] );",
      "2707:  } );",
      "2708: } );",
      "2710: QUnit.test( \"Validate creation of multiple quantities of certain elements (#13818)\", function( assert ) {",
      "2713:  var tags = [ \"thead\", \"tbody\", \"tfoot\", \"colgroup\", \"col\", \"caption\", \"tr\", \"th\", \"td\", \"optgroup\", \"option\" ];",
      "2715:  jQuery.each( tags, function( index, tag ) {",
      "2722:   } );",
      "2723:  } );",
      "2724: } );",
      "",
      "[Removed Lines]",
      "2705:  jQuery.fn.append.apply( jQuery( \"<div/>\" ), args ).children().each( function( i ) {",
      "2711:  assert.expect( 44 );",
      "2716:   jQuery( \"<\" + tag + \"/><\" + tag + \"/>\" ).each( function() {",
      "2717:    assert.ok( this.nodeName.toLowerCase() === tag, tag + \" empty elements created correctly\" );",
      "2718:   } );",
      "2720:   jQuery( \"<\" + this + \"></\" + tag + \"><\" + tag + \"></\" + tag + \">\" ).each( function() {",
      "2721:    assert.ok( this.nodeName.toLowerCase() === tag, tag + \" elements with closing tag created correctly\" );",
      "",
      "[Added Lines]",
      "2705:  jQuery.fn.append.apply( jQuery( \"<div></div>\" ), args ).children().each( function( i ) {",
      "2711:  assert.expect( 22 );",
      "2716:   jQuery( \"<\" + tag + \"></\" + tag + \"><\" + tag + \"></\" + tag + \">\" ).each( function() {",
      "2717:    assert.ok( this.nodeName.toLowerCase() === tag, tag + \" elements created correctly\" );",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "2766:  table.appendChild( document.createElement( \"tbody\" ) );",
      "2767:  document.getElementById( \"qunit-fixture\" ).appendChild( table );",
      "2772:  html = table.innerHTML.toLowerCase().replace( /\\s/g, \"\" );",
      "",
      "[Removed Lines]",
      "2769:  jQuery( table ).append( \"<tfoot/>\" );",
      "",
      "[Added Lines]",
      "2765:  jQuery( table ).append( \"<tfoot></tfoot>\" );",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "2806:  jQuery( table ).appendTo( \"#qunit-fixture\" );",
      "2810:  assert.strictEqual( table.find( \"td\" ).width(), 150 );",
      "2811: } );",
      "",
      "[Removed Lines]",
      "2808:  jQuery( \"<col width='150'/>\" ).prependTo( table );",
      "",
      "[Added Lines]",
      "2804:  jQuery( \"<col width='150'></col>\" ).prependTo( table );",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "2820:    \"</td></tr></thead>\",",
      "2821:   newRow = \"<tr><td>added</td></tr>\",",
      "2822:   htmlExpected = htmlIn.replace( \"</thead>\", \"</thead>\" + newRow ),",
      "2825:  jQuery( table ).append( newRow );",
      "",
      "[Removed Lines]",
      "2823:   table = supportjQuery( \"<table/>\" ).html( htmlIn ).appendTo( \"#qunit-fixture\" )[ 0 ];",
      "",
      "[Added Lines]",
      "2819:   table = supportjQuery( \"<table></table>\" ).html( htmlIn ).appendTo( \"#qunit-fixture\" )[ 0 ];",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "2836:  var htmlOut,",
      "2837:   htmlIn = \"<p>foo<!--<td>--></p>\",",
      "2840:  $el.html( htmlIn );",
      "",
      "[Removed Lines]",
      "2838:   $el = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "2834:   $el = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 47 ---",
      "[Context before]",
      "2884:  try {",
      "2885:   jQuery( \"#qunit-fixture\" ).append(",
      "2887:   assert.ok( true, \"no error thrown from embedding script with unsuccessful-response src\" );",
      "2888:  } catch ( e ) {",
      "2889:   throw e;",
      "",
      "[Removed Lines]",
      "2886:    \"<script src='\" + url( \"mock.php?action=error\" ) + \"'/>\" );",
      "",
      "[Added Lines]",
      "2882:    \"<script src='\" + url( \"mock.php?action=error\" ) + \"'></script>\" );",
      "",
      "---------------"
    ],
    "test/unit/offset.js||test/unit/offset.js": [
      "File: test/unit/offset.js -> test/unit/offset.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: }",
      "7: var supportsFixedPosition, supportsScroll, alwaysScrollable,",
      "9:  checkSupport = function( assert ) {",
      "",
      "[Removed Lines]",
      "8:  forceScroll = supportjQuery( \"<div/>\" ).css( { width: 2000, height: 2000 } ),",
      "",
      "[Added Lines]",
      "8:  forceScroll = supportjQuery( \"<div></div>\" ).css( { width: 2000, height: 2000 } ),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "81: QUnit.test( \"hidden (display: none) element\", function( assert ) {",
      "82:  assert.expect( 4 );",
      "85:   result = node.offset();",
      "87:  node.remove();",
      "",
      "[Removed Lines]",
      "84:  var node = jQuery( \"<div style='display: none' />\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "84:  var node = jQuery( \"<div style='display: none'></div>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "98: QUnit.test( \"0 sized element\", function( assert ) {",
      "99:  assert.expect( 4 );",
      "102:   result = node.offset();",
      "104:  node.remove();",
      "",
      "[Removed Lines]",
      "101:  var node = jQuery( \"<div style='margin: 5px; width: 0; height: 0' />\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "101:  var node = jQuery( \"<div style='margin: 5px; width: 0; height: 0'></div>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "112: QUnit.test( \"hidden (visibility: hidden) element\", function( assert ) {",
      "113:  assert.expect( 4 );",
      "116:   result = node.offset();",
      "118:  node.remove();",
      "",
      "[Removed Lines]",
      "115:  var node = jQuery( \"<div style='margin: 5px; visibility: hidden' />\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "[Added Lines]",
      "115:  var node = jQuery( \"<div style='margin: 5px; visibility: hidden'></div>\" ).appendTo( \"#qunit-fixture\" ),",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "785: QUnit.test( \"fractions (see #7730 and #7885)\", function( assert ) {",
      "786:  assert.expect( 2 );",
      "790:  var result,",
      "791:   expected = { \"top\": 1000, \"left\": 1000 },",
      "",
      "[Removed Lines]",
      "788:  jQuery( \"body\" ).append( \"<div id='fractions'/>\" );",
      "",
      "[Added Lines]",
      "788:  jQuery( \"body\" ).append( \"<div id='fractions'></div>\" );",
      "",
      "---------------"
    ],
    "test/unit/selector.js||test/unit/selector.js": [
      "File: test/unit/selector.js -> test/unit/selector.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "92: QUnit.test( \"selectors with comma\", function( assert ) {",
      "93:  assert.expect( 4 );",
      "97:  assert.equal( fixture.find( \"h2, div p\" ).filter( \"p\" ).length, 2, \"has to find two <p>\" );",
      "98:  assert.equal( fixture.find( \"h2, div p\" ).filter( \"h2\" ).length, 1, \"has to find one <h2>\" );",
      "",
      "[Removed Lines]",
      "95:  var fixture = jQuery( \"<div><h2><span/></h2><div><p><span/></p><p/></div></div>\" );",
      "",
      "[Added Lines]",
      "95:  var fixture = jQuery( \"<div><h2><span></span></h2><div><p><span></span></p><p></p></div></div>\" );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "275: QUnit.test( \"disconnected nodes\", function( assert ) {",
      "276:  assert.expect( 1 );",
      "279:  assert.equal( $div.is( \"div\" ), true, \"Make sure .is('nodeName') works on disconnected nodes.\" );",
      "280: } );",
      "",
      "[Removed Lines]",
      "278:  var $div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "278:  var $div = jQuery( \"<div></div>\" );",
      "",
      "---------------"
    ],
    "test/unit/traversing.js||test/unit/traversing.js": [
      "File: test/unit/traversing.js -> test/unit/traversing.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "198:  assert.equal( jQuery( \"#text2\" ).index(), 2, \"Returns the index of a child amongst its siblings\" );",
      "201: } );",
      "203: QUnit.test( \"index(Object|String|undefined)\", function( assert ) {",
      "",
      "[Removed Lines]",
      "200:  assert.equal( jQuery( \"<div/>\" ).index(), -1, \"Node without parent returns -1\" );",
      "",
      "[Added Lines]",
      "200:  assert.equal( jQuery( \"<div></div>\" ).index(), -1, \"Node without parent returns -1\" );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "502:  obj = jQuery( \"#qunit-fixture\" ).has( jQuery( \"#sndp\" )[ 0 ] );",
      "503:  assert.deepEqual( obj.get(), q( \"qunit-fixture\" ), \"Keeps elements that have the element as a descendant\" );",
      "506:  assert.deepEqual( detached.has( detached.find( \"i\" )[ 0 ] ).get(), detached.get(), \"...Even when detached\" );",
      "508:  multipleParent = jQuery( \"#qunit-fixture, #header\" ).has( jQuery( \"#sndp\" )[ 0 ] );",
      "",
      "[Removed Lines]",
      "505:  detached = jQuery( \"<a><b><i/></b></a>\" );",
      "",
      "[Added Lines]",
      "505:  detached = jQuery( \"<a><b><i></i></b></a>\" );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "517:  obj = jQuery( \"#qunit-fixture\" ).has( \"#sndp\" );",
      "518:  assert.deepEqual( obj.get(), q( \"qunit-fixture\" ), \"Keeps elements that have any element matching the selector as a descendant\" );",
      "521:  assert.deepEqual( detached.has( \"i\" ).get(), detached.get(), \"...Even when detached\" );",
      "523:  multipleParent = jQuery( \"#qunit-fixture, #header\" ).has( \"#sndp\" );",
      "",
      "[Removed Lines]",
      "520:  detached = jQuery( \"<a><b><i/></b></a>\" );",
      "",
      "[Added Lines]",
      "520:  detached = jQuery( \"<a><b><i></i></b></a>\" );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "538:  simple = jQuery( \"#qunit-fixture\" ).has( jQuery( \"#sndp\" ) );",
      "539:  assert.deepEqual( simple.get(), q( \"qunit-fixture\" ), \"Keeps elements that have any element in the jQuery list as a descendant\" );",
      "542:  assert.deepEqual( detached.has( detached.find( \"i\" ) ).get(), detached.get(), \"...Even when detached\" );",
      "544:  multipleParent = jQuery( \"#qunit-fixture, #header\" ).has( jQuery( \"#sndp\" ) );",
      "",
      "[Removed Lines]",
      "541:  detached = jQuery( \"<a><b><i/></b></a>\" );",
      "",
      "[Added Lines]",
      "541:  detached = jQuery( \"<a><b><i></i></b></a>\" );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "566:  var set = q( \"sndp\", \"en\", \"sap\" );",
      "567:  assert.deepEqual( jQuery( \"#en, #sndp\" ).siblings().get(), set, \"Check for unique results from siblings\" );",
      "568:  assert.deepEqual( jQuery( \"#option5a\" ).siblings( \"option[data-attr]\" ).get(), q( \"option5c\" ), \"Has attribute selector in siblings (#9261)\" );",
      "570: } );",
      "572: QUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"siblings([String])\", function( assert ) {",
      "",
      "[Removed Lines]",
      "569:  assert.equal( jQuery( \"<a/>\" ).siblings().length, 0, \"Detached elements have no siblings (#11370)\" );",
      "",
      "[Added Lines]",
      "569:  assert.equal( jQuery( \"<a></a>\" ).siblings().length, 0, \"Detached elements have no siblings (#11370)\" );",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "734:  assert.equal( jQuery( \"div\", ibody ).text(), \"span text\", \"Make sure the correct div is still left after deletion in IFrame\" );",
      "737:  jQuery( \"table\", ibody ).remove();",
      "738:  assert.equal( jQuery( \"div\", ibody ).length, 1, \"Check for JS error on add and delete of a table in IFrame\" );",
      "",
      "[Removed Lines]",
      "736:  jQuery( \"<table/>\", ibody ).append( \"<tr><td>cell</td></tr>\" ).appendTo( ibody );",
      "",
      "[Added Lines]",
      "736:  jQuery( \"<table></table>\", ibody ).append( \"<tr><td>cell</td></tr>\" ).appendTo( ibody );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "762:  assert.equal( contents.find( \"span\" ).text(), \"Hello, Web Component!\", \"Find span in template and check its text\" );",
      "765:    jQuery( jQuery.map( contents, function( node ) {",
      "766:      return document.importNode( node, true );",
      "767:    } ) )",
      "",
      "[Removed Lines]",
      "764:  jQuery( \"<div id='templateTest' />\" ).append(",
      "",
      "[Added Lines]",
      "764:  jQuery( \"<div id='templateTest'></div>\" ).append(",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "875:   \"Check elements from document\"",
      "876:  );",
      "879:  assert.ok( divs[ 0 ].parentNode, \"Sort with the disconnected node last (started with disconnected first).\" );",
      "880: } );",
      "",
      "[Removed Lines]",
      "878:  divs = jQuery( \"<div/>\" ).add( \"#sndp\" );",
      "",
      "[Added Lines]",
      "878:  divs = jQuery( \"<div></div>\" ).add( \"#sndp\" );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "893:  assert.expect( 3 );",
      "895:  var x,",
      "898:  assert.ok( !divs[ 1 ].parentNode, \"Sort with the disconnected node last.\" );",
      "",
      "[Removed Lines]",
      "896:   divs = jQuery( \"#sndp\" ).add( \"<div/>\" );",
      "",
      "[Added Lines]",
      "896:   divs = jQuery( \"#sndp\" ).add( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "906:  assert.expect( 4 );",
      "908:  var x,",
      "911:  x = jQuery( [] )",
      "912:  .add(",
      "",
      "[Removed Lines]",
      "909:   tmp = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "909:   tmp = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "935:  assert.expect( 2 );",
      "937:  var x,",
      "940:  x = jQuery( [] ).add( jQuery( \"<p id='x1'>xxx</p>\" ).appendTo( tmp )[ 0 ] ).add( jQuery( \"<p id='x2'>xxx</p>\" ).appendTo( tmp )[ 0 ] );",
      "941:  assert.equal( x[ 0 ].id, \"x1\", \"Check on-the-fly element1\" );",
      "",
      "[Removed Lines]",
      "938:   tmp = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "938:   tmp = jQuery( \"<div></div>\" );",
      "",
      "---------------"
    ],
    "test/unit/wrap.js||test/unit/wrap.js": [
      "File: test/unit/wrap.js -> test/unit/wrap.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:   cacheLength++;",
      "75:  }",
      "78:  assert.equal(",
      "79:   j[ 0 ] .nodeName.toUpperCase(), \"LABEL\", \"Element is a label\"",
      "80:  );",
      "",
      "[Removed Lines]",
      "77:  j = jQuery( \"<label/>\" ).wrap( val( \"<li/>\" ) );",
      "",
      "[Added Lines]",
      "77:  j = jQuery( \"<label></label>\" ).wrap( val( \"<li></li>\" ) );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "90:  );",
      "94:  assert.equal(",
      "95:   j[ 0 ].previousSibling.nodeType, 3, \"Make sure the previous node is a text element\"",
      "96:  );",
      "",
      "[Removed Lines]",
      "93:  j = jQuery( \"<span/>\" ).wrap( \"<div>test</div>\" );",
      "",
      "[Added Lines]",
      "93:  j = jQuery( \"<span></span>\" ).wrap( \"<div>test</div>\" );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:  );",
      "116:  assert.equal(",
      "117:   j[ 0 ].parentNode.nodeName.toLowerCase(), \"div\", \"Wrapping works.\"",
      "118:  );",
      "",
      "[Removed Lines]",
      "115:  j = jQuery( \"<span/>\" ).wrap( jQuery( \"<div></div>\" ) );",
      "",
      "[Added Lines]",
      "115:  j = jQuery( \"<span></span>\" ).wrap( jQuery( \"<div></div>\" ) );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "128:   jQuery( this ).off();",
      "129:  } );",
      "132:  assert.equal(",
      "133:   j[ 0 ].parentNode.nodeName.toLowerCase(), \"div\", \"Wrapping works.\"",
      "134:  );",
      "",
      "[Removed Lines]",
      "131:  j = jQuery( \"<span/>\" ).wrap( result );",
      "",
      "[Added Lines]",
      "131:  j = jQuery( \"<span></span>\" ).wrap( result );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "313:  assert.expect( 5 );",
      "315:  var num,",
      "318:  num = jQuery( \"#first\" ).children().length;",
      "319:  jQuery( \"#first\" ).wrapInner( document.getElementById( \"empty\" ) );",
      "",
      "[Removed Lines]",
      "316:   div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "316:   div = jQuery( \"<div></div>\" );",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "376:  var num,",
      "377:     val = manipulationFunctionReturningObj,",
      "380:  num = jQuery( \"#first\" ).children().length;",
      "381:  jQuery( \"#first\" ).wrapInner( val( document.getElementById( \"empty\" ) ) );",
      "",
      "[Removed Lines]",
      "378:   div = jQuery( \"<div/>\" );",
      "",
      "[Added Lines]",
      "378:   div = jQuery( \"<div></div>\" );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "90fed4b453a5becdb7f173d9e3c1492390a1441f",
      "candidate_info": {
        "commit_hash": "90fed4b453a5becdb7f173d9e3c1492390a1441f",
        "repo": "jquery/jquery",
        "commit_url": "https://github.com/jquery/jquery/commit/90fed4b453a5becdb7f173d9e3c1492390a1441f",
        "files": [
          "src/manipulation.js",
          "test/data/testinit.js",
          "test/localfile.html",
          "test/unit/ajax.js",
          "test/unit/attributes.js",
          "test/unit/basic.js",
          "test/unit/core.js",
          "test/unit/css.js",
          "test/unit/data.js",
          "test/unit/deprecated.js",
          "test/unit/dimensions.js",
          "test/unit/effects.js",
          "test/unit/event.js",
          "test/unit/manipulation.js",
          "test/unit/offset.js",
          "test/unit/selector.js",
          "test/unit/traversing.js",
          "test/unit/wrap.js"
        ],
        "message": "Manipulation: Make jQuery.htmlPrefilter an identity function\n\nCloses gh-4642",
        "before_after_code_files": [
          "src/manipulation.js||src/manipulation.js",
          "test/data/testinit.js||test/data/testinit.js",
          "test/localfile.html||test/localfile.html",
          "test/unit/ajax.js||test/unit/ajax.js",
          "test/unit/attributes.js||test/unit/attributes.js",
          "test/unit/basic.js||test/unit/basic.js",
          "test/unit/core.js||test/unit/core.js",
          "test/unit/css.js||test/unit/css.js",
          "test/unit/data.js||test/unit/data.js",
          "test/unit/deprecated.js||test/unit/deprecated.js",
          "test/unit/dimensions.js||test/unit/dimensions.js",
          "test/unit/effects.js||test/unit/effects.js",
          "test/unit/event.js||test/unit/event.js",
          "test/unit/manipulation.js||test/unit/manipulation.js",
          "test/unit/offset.js||test/unit/offset.js",
          "test/unit/selector.js||test/unit/selector.js",
          "test/unit/traversing.js||test/unit/traversing.js",
          "test/unit/wrap.js||test/unit/wrap.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/manipulation.js||src/manipulation.js",
            "test/data/testinit.js||test/data/testinit.js",
            "test/localfile.html||test/localfile.html",
            "test/unit/ajax.js||test/unit/ajax.js",
            "test/unit/attributes.js||test/unit/attributes.js",
            "test/unit/basic.js||test/unit/basic.js",
            "test/unit/core.js||test/unit/core.js",
            "test/unit/css.js||test/unit/css.js",
            "test/unit/data.js||test/unit/data.js",
            "test/unit/deprecated.js||test/unit/deprecated.js",
            "test/unit/dimensions.js||test/unit/dimensions.js",
            "test/unit/effects.js||test/unit/effects.js",
            "test/unit/event.js||test/unit/event.js",
            "test/unit/manipulation.js||test/unit/manipulation.js",
            "test/unit/offset.js||test/unit/offset.js",
            "test/unit/selector.js||test/unit/selector.js",
            "test/unit/traversing.js||test/unit/traversing.js",
            "test/unit/wrap.js||test/unit/wrap.js"
          ],
          "candidate": [
            "src/manipulation.js||src/manipulation.js",
            "test/data/testinit.js||test/data/testinit.js",
            "test/localfile.html||test/localfile.html",
            "test/unit/ajax.js||test/unit/ajax.js",
            "test/unit/attributes.js||test/unit/attributes.js",
            "test/unit/basic.js||test/unit/basic.js",
            "test/unit/core.js||test/unit/core.js",
            "test/unit/css.js||test/unit/css.js",
            "test/unit/data.js||test/unit/data.js",
            "test/unit/deprecated.js||test/unit/deprecated.js",
            "test/unit/dimensions.js||test/unit/dimensions.js",
            "test/unit/effects.js||test/unit/effects.js",
            "test/unit/event.js||test/unit/event.js",
            "test/unit/manipulation.js||test/unit/manipulation.js",
            "test/unit/offset.js||test/unit/offset.js",
            "test/unit/selector.js||test/unit/selector.js",
            "test/unit/traversing.js||test/unit/traversing.js",
            "test/unit/wrap.js||test/unit/wrap.js"
          ]
        }
      },
      "candidate_diff": {
        "src/manipulation.js||src/manipulation.js": [
          "File: src/manipulation.js -> src/manipulation.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: var",
          "",
          "[Removed Lines]",
          "27:  rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199: jQuery.extend( {",
          "200:  htmlPrefilter: function( html ) {",
          "202:  },",
          "204:  clone: function( elem, dataAndEvents, deepDataAndEvents ) {",
          "",
          "[Removed Lines]",
          "201:   return html.replace( rxhtmlTag, \"<$1></$2>\" );",
          "",
          "[Added Lines]",
          "198:   return html;",
          "",
          "---------------"
        ],
        "test/data/testinit.js||test/data/testinit.js": [
          "File: test/data/testinit.js -> test/data/testinit.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:  }",
          "244:  wrapper.call( QUnit, title, function( assert ) {",
          "245:   var done = assert.async(),",
          "247:     .css( { position: \"absolute\", top: \"0\", left: \"-600px\", width: \"500px\" } )",
          "248:     .attr( { id: \"qunit-fixture-iframe\", src: url( fileName ) } );",
          "",
          "[Removed Lines]",
          "246:    $iframe = supportjQuery( \"<iframe/>\" )",
          "",
          "[Added Lines]",
          "246:    $iframe = supportjQuery( \"<iframe></iframe>\" )",
          "",
          "---------------"
        ],
        "test/localfile.html||test/localfile.html": [
          "File: test/localfile.html -> test/localfile.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  <script>",
          "50:   var logUL = jQuery( \"#log\" );",
          "51:   function doLog( message, args ) {",
          "53:   }",
          "54:   jQuery.ajax( \"./data/badjson.js\" , {",
          "55:    context: jQuery( \"#success\" ),",
          "",
          "[Removed Lines]",
          "52:    jQuery( \"<li />\").appendTo( logUL ).text( message + ': \"' + Array.prototype.join.call( args, '\" - \"' ) + '\"' );",
          "",
          "[Added Lines]",
          "52:    jQuery( \"<li></li>\" ).appendTo( logUL ).text( message + ': \"' + Array.prototype.join.call( args, '\" - \"' ) + '\"' );",
          "",
          "---------------"
        ],
        "test/unit/ajax.js||test/unit/ajax.js": [
          "File: test/unit/ajax.js -> test/unit/ajax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2541:   addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError\", assert )();",
          "2542:   jQuery( document ).on( \"ajaxStop\", done );",
          "2544:    assert.ok( true, \"complete\" );",
          "2545:   } );",
          "2546:  } );",
          "",
          "[Removed Lines]",
          "2543:   jQuery( \"<div/>\" ).load( baseURL + \"404.txt\", function() {",
          "",
          "[Added Lines]",
          "2543:   jQuery( \"<div></div>\" ).load( baseURL + \"404.txt\", function() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2647:     return \"Hello World\";",
          "2648:    }",
          "2649:   } );",
          "2651:    assert.strictEqual( jQuery( this ).html(), \"Hello World\", \"Test div was filled with filtered data\" );",
          "2652:    assert.strictEqual( responseText, \"Hello World\", \"Test callback receives filtered data\" );",
          "2653:    done();",
          "",
          "[Removed Lines]",
          "2650:   jQuery( \"<div/>\" ).load( url( \"name.html\" ), function( responseText ) {",
          "",
          "[Added Lines]",
          "2650:   jQuery( \"<div></div>\" ).load( url( \"name.html\" ), function( responseText ) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2657:  QUnit.test( \"jQuery.fn.load( String, Object, Function )\", function( assert ) {",
          "2658:   assert.expect( 2 );",
          "2659:   var done = assert.async();",
          "2661:    \"bar\": \"ok\"",
          "2662:   }, function() {",
          "2663:    var $node = jQuery( this );",
          "",
          "[Removed Lines]",
          "2660:   jQuery( \"<div />\" ).load( url( \"mock.php?action=echoHtml\" ), {",
          "",
          "[Added Lines]",
          "2660:   jQuery( \"<div></div>\" ).load( url( \"mock.php?action=echoHtml\" ), {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2671:   assert.expect( 2 );",
          "2672:   var done = assert.async();",
          "2675:    var $node = jQuery( this );",
          "2676:    assert.strictEqual( $node.find( \"#method\" ).text(), \"GET\", \"Check method\" );",
          "2677:    assert.ok( $node.find( \"#query\" ).text().match( /foo=3&bar=ok/ ), \"Check if a string of data is passed correctly\" );",
          "",
          "[Removed Lines]",
          "2674:   jQuery( \"<div />\" ).load( url( \"mock.php?action=echoHtml\" ), \"foo=3&bar=ok\", function() {",
          "",
          "[Added Lines]",
          "2674:   jQuery( \"<div></div>\" ).load( url( \"mock.php?action=echoHtml\" ), \"foo=3&bar=ok\", function() {",
          "",
          "---------------"
        ],
        "test/unit/attributes.js||test/unit/attributes.js": [
          "File: test/unit/attributes.js -> test/unit/attributes.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:  assert.equal( jQuery( \"#area1\" ).attr( \"maxLength\" ), \"30\", \"Check for maxLength attribute\" );",
          "97:   \"id\": \"tAnchor5\",",
          "98:   \"href\": \"#5\"",
          "99:  } ).appendTo( \"#qunit-fixture\" );",
          "100:  assert.equal( jQuery( \"#tAnchor5\" ).attr( \"href\" ), \"#5\", \"Check for non-absolute href (an anchor)\" );",
          "102:  assert.equal( jQuery( \"#tAnchor5\" ).prop( \"href\" ), jQuery( \"#tAnchor6\" ).prop( \"href\" ), \"Check for absolute href prop on an anchor\" );",
          "104:  jQuery( \"<script type='jquery/test' src='#5' id='scriptSrc'></script>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Removed Lines]",
          "96:  jQuery( \"<a/>\" ).attr( {",
          "101:  jQuery( \"<a id='tAnchor6' href='#5' />\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "96:  jQuery( \"<a></a>\" ).attr( {",
          "101:  jQuery( \"<a id='tAnchor6' href='#5'></a>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:  assert.equal( $img.attr( \"height\" ), \"53\", \"Retrieve height attribute on an element with display:none.\" );",
          "140:   background: \"url(UPPERlower.gif)\"",
          "141:  } );",
          "142:  assert.ok( !!~styleElem.attr( \"style\" ).indexOf( \"UPPERlower.gif\" ), \"Check style attribute getter\" );",
          "",
          "[Removed Lines]",
          "139:  styleElem = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).css( {",
          "",
          "[Added Lines]",
          "139:  styleElem = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).css( {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:  $a = jQuery( \"<a href='#' onclick='something()'>Click</a>\" ).appendTo( \"#qunit-fixture\" );",
          "159:  assert.equal( $a.attr( \"onclick\" ), \"something()\", \"Retrieve ^on attribute without anonymous function wrapper.\" );",
          "164:  assert.ok( jQuery().attr( \"doesntexist\" ) === undefined, \"Make sure undefined is returned when no element is there.\" );",
          "166:  assert.strictEqual( jQuery( \"<select><option value='property'></option></select>\" ).attr( \"value\" ), undefined, \"An unset value on a select returns undefined.\" );",
          "168:  $form = jQuery( \"#form\" ).attr( \"enctype\", \"multipart/form-data\" );",
          "",
          "[Removed Lines]",
          "161:  assert.ok( jQuery( \"<div/>\" ).attr( \"doesntexist\" ) === undefined, \"Make sure undefined is returned when no attribute is found.\" );",
          "162:  assert.ok( jQuery( \"<div/>\" ).attr( \"title\" ) === undefined, \"Make sure undefined is returned when no attribute is found.\" );",
          "163:  assert.equal( jQuery( \"<div/>\" ).attr( \"title\", \"something\" ).attr( \"title\" ), \"something\", \"Set the title attribute.\" );",
          "165:  assert.equal( jQuery( \"<div/>\" ).attr( \"value\" ), undefined, \"An unset value on a div returns undefined.\" );",
          "",
          "[Added Lines]",
          "161:  assert.ok( jQuery( \"<div></div>\" ).attr( \"doesntexist\" ) === undefined, \"Make sure undefined is returned when no attribute is found.\" );",
          "162:  assert.ok( jQuery( \"<div></div>\" ).attr( \"title\" ) === undefined, \"Make sure undefined is returned when no attribute is found.\" );",
          "163:  assert.equal( jQuery( \"<div></div>\" ).attr( \"title\", \"something\" ).attr( \"title\" ), \"something\", \"Set the title attribute.\" );",
          "165:  assert.equal( jQuery( \"<div></div>\" ).attr( \"value\" ), undefined, \"An unset value on a div returns undefined.\" );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:  assert.strictEqual( input.clone( true ).attr( \"name\", \"test\" )[ 0 ].name, \"test\", \"Name attribute should be changed on cloned element\" );",
          "184:  div.attr( \"id\" );",
          "186:  assert.strictEqual( div.clone( true ).attr( \"id\", \"test\" )[ 0 ].id, \"test\", \"Id attribute should be changed on cloned element\" );",
          "",
          "[Removed Lines]",
          "183:  div = jQuery( \"<div id='tester' />\" );",
          "",
          "[Added Lines]",
          "183:  div = jQuery( \"<div id='tester'></div>\" );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "299:  $input = jQuery( \"<input type='checkbox'/>\" ).attr( \"checked\", true );",
          "300:  assert.equal( $input.prop( \"checked\" ), true, \"Setting checked updates property (verified by .prop)\" );",
          "301:  assert.equal( $input[ 0 ].checked, true, \"Setting checked updates property (verified by native property)\" );",
          "303:  assert.equal( $input.prop( \"selected\" ), true, \"Setting selected updates property (verified by .prop)\" );",
          "304:  assert.equal( $input[ 0 ].selected, true, \"Setting selected updates property (verified by native property)\" );",
          "",
          "[Removed Lines]",
          "302:  $input = jQuery( \"<option/>\" ).attr( \"selected\", true );",
          "",
          "[Added Lines]",
          "302:  $input = jQuery( \"<option></option>\" ).attr( \"selected\", true );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "569:  assert.expect( 12 );",
          "570:  var $first;",
          "573:  assert.equal( jQuery( \"#form\" ).removeAttr( \"id\" ).attr( \"id\" ), undefined, \"Remove id\" );",
          "574:  assert.equal( jQuery( \"#foo\" ).attr( \"style\", \"position:absolute;\" ).removeAttr( \"style\" ).attr( \"style\" ), undefined, \"Check removing style attribute\" );",
          "575:  assert.equal( jQuery( \"#form\" ).attr( \"style\", \"position:absolute;\" ).removeAttr( \"style\" ).attr( \"style\" ), undefined, \"Check removing style attribute on a form\" );",
          "",
          "[Removed Lines]",
          "572:  assert.equal( jQuery( \"<div class='hello' />\" ).removeAttr( \"class\" ).attr( \"class\" ), undefined, \"remove class\" );",
          "",
          "[Added Lines]",
          "572:  assert.equal( jQuery( \"<div class='hello'></div>\" ).removeAttr( \"class\" ).attr( \"class\" ), undefined, \"remove class\" );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "669:  assert.equal( jQuery( \"#select2\" ).prop( \"selectedIndex\" ), 3, \"Check for selectedIndex attribute\" );",
          "670:  assert.equal( jQuery( \"#foo\" ).prop( \"nodeName\" ).toUpperCase(), \"DIV\", \"Check for nodeName attribute\" );",
          "671:  assert.equal( jQuery( \"#foo\" ).prop( \"tagName\" ).toUpperCase(), \"DIV\", \"Check for tagName attribute\" );",
          "674:  assert.equal( jQuery( \"#listWithTabIndex\" ).prop( \"tabindex\" ), 5, \"Check retrieving tabindex\" );",
          "675:  jQuery( \"#text1\" ).prop( \"readonly\", true );",
          "",
          "[Removed Lines]",
          "672:  assert.equal( jQuery( \"<option/>\" ).prop( \"selected\" ), false, \"Check selected attribute on disconnected element.\" );",
          "",
          "[Added Lines]",
          "672:  assert.equal( jQuery( \"<option></option>\" ).prop( \"selected\" ), false, \"Check selected attribute on disconnected element.\" );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "815:  function addOptions( $elem ) {",
          "816:   return $elem.append(",
          "820:   )",
          "821:   .find( \"[value=a]\" ).prop( \"selected\", true ).end()",
          "822:   .find( \"[value=c]\" ).prop( \"selected\", true ).end();",
          "823:  }",
          "825:  var $optgroup,",
          "829:  addOptions( $select ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Removed Lines]",
          "817:    jQuery( \"<option/>\" ).val( \"a\" ).text( \"One\" ),",
          "818:    jQuery( \"<option/>\" ).val( \"b\" ).text( \"Two\" ),",
          "819:    jQuery( \"<option/>\" ).val( \"c\" ).text( \"Three\" )",
          "826:   $select = jQuery( \"<select/>\" );",
          "",
          "[Added Lines]",
          "817:    jQuery( \"<option></option>\" ).val( \"a\" ).text( \"One\" ),",
          "818:    jQuery( \"<option></option>\" ).val( \"b\" ).text( \"Two\" ),",
          "819:    jQuery( \"<option></option>\" ).val( \"c\" ).text( \"Three\" )",
          "826:   $select = jQuery( \"<select></select>\" );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "833:  $select.empty();",
          "837:  addOptions( $optgroup ).appendTo( $select );",
          "838:  $select.find( \"[value=b]\" ).prop( \"selected\", true );",
          "",
          "[Removed Lines]",
          "836:  $optgroup = jQuery( \"<optgroup/>\" );",
          "",
          "[Added Lines]",
          "836:  $optgroup = jQuery( \"<optgroup></optgroup>\" );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "947:  assert.equal( $button.val(), \"foobar\", \"Value retrieval on a button does not return innerHTML\" );",
          "948:  assert.equal( $button.val( \"baz\" ).html(), \"text\", \"Setting the value does not change innerHTML\" );",
          "951: } );",
          "953: QUnit.test( \"val() with non-matching values on dropdown list\", function( assert ) {",
          "",
          "[Removed Lines]",
          "950:  assert.equal( jQuery( \"<option/>\" ).val( \"test\" ).attr( \"value\" ), \"test\", \"Setting value sets the value attribute\" );",
          "",
          "[Added Lines]",
          "950:  assert.equal( jQuery( \"<option></option>\" ).val( \"test\" ).attr( \"value\" ), \"test\", \"Setting value sets the value attribute\" );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1014:  assert.equal( document.getElementById( \"text1\" ).value, \"\", \"Check for modified (via val(null)) value of input element\" );",
          "1016:  var j,",
          "1018:   $select1 = jQuery( \"#select1\" );",
          "1020:  $select1.val( valueObj( \"3\" ) );",
          "",
          "[Removed Lines]",
          "1017:   $select = jQuery( \"<select multiple><option value='1'/><option value='2'/></select>\" ),",
          "",
          "[Added Lines]",
          "1017:   $select = jQuery( \"<select multiple><option value='1'></option><option value='2'></option></select>\" ),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1130: QUnit.test( \"select.val(space characters) (gh-2978)\", function( assert ) {",
          "1131:  assert.expect( 37 );",
          "1134:   spaces = {",
          "1135:    \"\\\\t\": {",
          "1136:     html: \"&#09;\",",
          "",
          "[Removed Lines]",
          "1133:  var $select = jQuery( \"<select/>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "1133:  var $select = jQuery( \"<select></select>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1266:  j.addClass( valueObj( \"asdf\" ) );",
          "1267:  assert.ok( j.hasClass( \"asdf\" ), \"Check node,textnode,comment for addClass\" );",
          "1271:  div.addClass( valueObj( \"test\" ) );",
          "1272:  assert.equal( div.attr( \"class\" ), \"test\", \"Make sure there's no extra whitespace.\" );",
          "",
          "[Removed Lines]",
          "1269:  div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "1269:  div = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1697:  assert.expect( 1 );",
          "1699:  var area,",
          "1703:  assert.equal( area.attr( \"coords\" ), \"0,0,0,0\", \"did not retrieve coords correctly\" );",
          "1704: } );",
          "",
          "[Removed Lines]",
          "1700:   map = jQuery( \"<map />\" );",
          "1702:  area = map.html( \"<area shape='rect' coords='0,0,0,0' href='#' alt='a' />\" ).find( \"area\" );",
          "",
          "[Added Lines]",
          "1700:   map = jQuery( \"<map></map>\" );",
          "1702:  area = map.html( \"<area shape='rect' coords='0,0,0,0' href='#' alt='a'></area>\" ).find( \"area\" );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1707:  assert.expect( 1 );",
          "1709:  try {",
          "1711:   assert.ok( true );",
          "1712:  } catch ( _ ) {",
          "1713:   assert.ok( false );",
          "",
          "[Removed Lines]",
          "1710:   jQuery( \"<option/>\" ).val();",
          "",
          "[Added Lines]",
          "1710:   jQuery( \"<option></option>\" ).val();",
          "",
          "---------------"
        ],
        "test/unit/basic.js||test/unit/basic.js": [
          "File: test/unit/basic.js -> test/unit/basic.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: QUnit.test( \"attributes\", function( assert ) {",
          "37:  assert.expect( 6 );",
          "40:   input = jQuery( \"<input/>\" ).appendTo( \"#qunit-fixture\" );",
          "42:  assert.strictEqual( a.attr( \"foo\", \"bar\" ).attr( \"foo\" ), \"bar\", \".attr getter/setter\" );",
          "",
          "[Removed Lines]",
          "39:  var a = jQuery( \"<a/>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "39:  var a = jQuery( \"<a></a>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: QUnit.test( \"css\", function( assert ) {",
          "57:  assert.expect( 1 );",
          "61:  assert.strictEqual( div.css( \"width\", \"50px\" ).css( \"width\" ), \"50px\", \".css getter/setter\" );",
          "62: } );",
          "",
          "[Removed Lines]",
          "59:  var div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "59:  var div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66: QUnit.test( \"show/hide\", function( assert ) {",
          "67:  assert.expect( 2 );",
          "71:  div.hide();",
          "72:  assert.strictEqual( div.css( \"display\" ), \"none\", \"div hidden\" );",
          "",
          "[Removed Lines]",
          "69:  var div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "69:  var div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126: QUnit.test( \"data\", function( assert ) {",
          "127:  assert.expect( 4 );",
          "131:  assert.ok( !jQuery.hasData( elem[ 0 ] ), \"jQuery.hasData - false\" );",
          "132:  assert.strictEqual( elem.data( \"a\", \"b\" ).data( \"a\" ), \"b\", \".data getter/setter\" );",
          "",
          "[Removed Lines]",
          "129:  var elem = jQuery( \"<div data-c='d'/>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "129:  var elem = jQuery( \"<div data-c='d'></div>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:  assert.expect( 3 );",
          "140:  var elem = jQuery(",
          "142:  ).appendTo( \"#qunit-fixture\" );",
          "144:  assert.strictEqual( elem.width( 50 ).width(), 50, \".width getter/setter\" );",
          "",
          "[Removed Lines]",
          "141:   \"<div style='margin: 10px; padding: 7px; border: 2px solid black;' /> \"",
          "",
          "[Added Lines]",
          "141:   \"<div style='margin: 10px; padding: 7px; border: 2px solid black;'></div> \"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "149: QUnit.test( \"event\", function( assert ) {",
          "150:  assert.expect( 1 );",
          "154:  elem",
          "155:   .on( \"click\", function() {",
          "",
          "[Removed Lines]",
          "152:  var elem = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "152:  var elem = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "169:  var child,",
          "170:   elem1 = jQuery( \"<div><span></span></div>\" ).appendTo( \"#qunit-fixture\" ),",
          "173:  assert.strictEqual( elem1.text( \"foo\" ).text(), \"foo\", \".html getter/setter\" );",
          "175:  assert.strictEqual(",
          "177:   \"<span></span>\",",
          "178:   \".html getter/setter\"",
          "179:  );",
          "",
          "[Removed Lines]",
          "171:   elem2 = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
          "176:   elem1.html( \"<span/>\" ).html(),",
          "",
          "[Added Lines]",
          "171:   elem2 = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
          "176:   elem1.html( \"<span></span>\" ).html(),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "186:  assert.strictEqual( elem1.prepend( elem2 )[ 0 ].childNodes[ 0 ], elem2[ 0 ], \".prepend\" );",
          "188:  child = elem1.find( \"span\" );",
          "192:  assert.strictEqual(",
          "193:   elem1.html(),",
          "",
          "[Removed Lines]",
          "189:  child.after( \"<a/>\" );",
          "190:  child.before( \"<b/>\" );",
          "",
          "[Added Lines]",
          "189:  child.after( \"<a></a>\" );",
          "190:  child.before( \"<b></b>\" );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "201: QUnit[ /jsdom\\//.test( navigator.userAgent ) ? \"skip\" : \"test\" ]( \"offset\", function( assert ) {",
          "202:  assert.expect( 3 );",
          "207:  assert.strictEqual( elem.offset().top, 25, \".offset getter\" );",
          "208:  assert.strictEqual( elem.position().top, 5, \".position getter\" );",
          "",
          "[Removed Lines]",
          "204:  var parent = jQuery( \"<div style='position:fixed;top:20px;'/>\" ).appendTo( \"#qunit-fixture\" ),",
          "205:   elem = jQuery( \"<div style='position:absolute;top:5px;'/>\" ).appendTo( parent );",
          "",
          "[Added Lines]",
          "204:  var parent = jQuery( \"<div style='position:fixed;top:20px;'></div>\" ).appendTo( \"#qunit-fixture\" ),",
          "205:   elem = jQuery( \"<div style='position:absolute;top:5px;'></div>\" ).appendTo( parent );",
          "",
          "---------------"
        ],
        "test/unit/core.js||test/unit/core.js": [
          "File: test/unit/core.js -> test/unit/core.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  var elem, i,",
          "25:   obj = jQuery( \"div\" ),",
          "27:   img = jQuery( \"<img/>\" ),",
          "29:   exec = false,",
          "30:   expected = 23,",
          "31:   attrObj = {",
          "",
          "[Removed Lines]",
          "26:   code = jQuery( \"<code/>\" ),",
          "28:   div = jQuery( \"<div/><hr/><code/><b/>\" ),",
          "",
          "[Added Lines]",
          "26:   code = jQuery( \"<code></code>\" ),",
          "28:   div = jQuery( \"<div></div><hr/><code></code><b/>\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:  elem = jQuery( \"\\n\\n<em>world</em>\" )[ 0 ];",
          "114:  assert.equal( elem.nodeName.toLowerCase(), \"em\", \"leading newlines\" );",
          "118:  if ( jQuery.fn.width ) {",
          "119:   assert.equal( elem[ 0 ].style.width, \"10px\", \"jQuery() quick setter width\" );",
          "",
          "[Removed Lines]",
          "116:  elem = jQuery( \"<div/>\", attrObj );",
          "",
          "[Added Lines]",
          "116:  elem = jQuery( \"<div></div>\", attrObj );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "459:  assert.ok( jQuery( \"<link rel='stylesheet'/>\" )[ 0 ], \"Creating a link\" );",
          "463:  assert.ok( jQuery( \"<input/>\" ).attr( \"type\", \"hidden\" ), \"Create an input and set the type.\" );",
          "",
          "[Removed Lines]",
          "461:  assert.ok( !jQuery( \"<script/>\" )[ 0 ].parentNode, \"Create a script\" );",
          "",
          "[Added Lines]",
          "461:  assert.ok( !jQuery( \"<script></script>\" )[ 0 ].parentNode, \"Create a script\" );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "526: QUnit.test( \"jQuery('html', context)\", function( assert ) {",
          "527:  assert.expect( 1 );",
          "531:  assert.equal( $span.length, 1, \"verify a span created with a div context works, #1763\" );",
          "532: } );",
          "",
          "[Removed Lines]",
          "529:  var $div = jQuery( \"<div/>\" )[ 0 ],",
          "530:   $span = jQuery( \"<span/>\", $div );",
          "",
          "[Added Lines]",
          "529:  var $div = jQuery( \"<div></div>\" )[ 0 ],",
          "530:   $span = jQuery( \"<span></span>\", $div );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1355:  assert.equal( jQuery.parseHTML( \"text\" )[ 0 ].nodeType, 3, \"Parsing text returns a text node\" );",
          "1356:  assert.equal( jQuery.parseHTML( \"\\t<div></div>\" )[ 0 ].nodeValue, \"\\t\", \"Preserve leading whitespace\" );",
          "1360:  html = jQuery.parseHTML( \"<div>test div</div>\" );",
          "",
          "[Removed Lines]",
          "1358:  assert.equal( jQuery.parseHTML( \" <div/> \" )[ 0 ].nodeType, 3, \"Leading spaces are treated as text nodes (#11290)\" );",
          "",
          "[Added Lines]",
          "1358:  assert.equal( jQuery.parseHTML( \" <div></div> \" )[ 0 ].nodeType, 3, \"Leading spaces are treated as text nodes (#11290)\" );",
          "",
          "---------------"
        ],
        "test/unit/css.js||test/unit/css.js": [
          "File: test/unit/css.js -> test/unit/css.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  assert.notEqual( $child.css( \"width\" ), \"20px\", \"Retrieving a width percentage on the child of a hidden div returns percentage\" );",
          "14:  assert.notEqual( $child.css( \"height\" ), \"20px\", \"Retrieving a height percentage on the child of a hidden div returns percentage\" );",
          "",
          "[Removed Lines]",
          "16:  div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "16:  div = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  assert.equal( div.css( \"width\" ), \"4px\", \"Width on disconnected node.\" );",
          "26:  assert.equal( div.css( \"height\" ), \"4px\", \"Height on disconnected node.\" );",
          "30:  assert.equal( div2.find( \"input\" ).css( \"height\" ), \"20px\", \"Height on hidden input.\" );",
          "31:  assert.equal( div2.find( \"textarea\" ).css( \"height\" ), \"20px\", \"Height on hidden textarea.\" );",
          "",
          "[Removed Lines]",
          "28:  div2 = jQuery( \"<div style='display:none;'><input type='text' style='height:20px;'/><textarea style='height:20px;'/><div style='height:20px;'></div></div>\" ).appendTo( \"body\" );",
          "",
          "[Added Lines]",
          "28:  div2 = jQuery( \"<div style='display:none;'><input type='text' style='height:20px;'/><textarea style='height:20px;'></textarea><div style='height:20px;'></div></div>\" ).appendTo( \"body\" );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:  assert.equal( parseFloat( jQuery( \"#nothiddendiv\" ).css( \"width\" ) ), 0, \"Test negative width set to 0\" );",
          "43:  assert.equal( parseFloat( jQuery( \"#nothiddendiv\" ).css( \"height\" ) ), 0, \"Test negative height set to 0\" );",
          "47:  jQuery( \"#floatTest\" ).css( { \"float\": \"right\" } );",
          "48:  assert.equal( jQuery( \"#floatTest\" ).css( \"float\" ), \"right\", \"Modified CSS float using \\\"float\\\": Assert float is right\" );",
          "",
          "[Removed Lines]",
          "45:  assert.equal( jQuery( \"<div style='display: none;'/>\" ).css( \"display\" ), \"none\", \"Styles on disconnected nodes\" );",
          "",
          "[Added Lines]",
          "45:  assert.equal( jQuery( \"<div style='display: none;'></div>\" ).css( \"display\" ), \"none\", \"Styles on disconnected nodes\" );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:  assert.strictEqual( child.css( \"x-fake\" ), undefined, \"Make sure undefined is returned from css(nonexistent).\" );",
          "115:  assert.strictEqual( div.css( \"z-index\" ), \"1000\",",
          "116:   \"Make sure that a string z-index is returned from css('z-index') (#14432).\" );",
          "117: } );",
          "",
          "[Removed Lines]",
          "114:  div = jQuery( \"<div/>\" ).css( { position: \"absolute\", \"z-index\": 1000 } ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "114:  div = jQuery( \"<div></div>\" ).css( { position: \"absolute\", \"z-index\": 1000 } ).appendTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "275:  assert.expect( 1 );",
          "277:  var right,",
          "279:    .css( { position: \"absolute\", width: \"400px\", fontSize: \"4px\" } )",
          "280:    .appendTo( \"#qunit-fixture\" ),",
          "282:    .css( { position: \"absolute\", left: \"50%\", right: \"50%\" } )",
          "283:    .appendTo( $container );",
          "",
          "[Removed Lines]",
          "278:   $container = jQuery( \"<div/>\" )",
          "281:   $el = jQuery( \"<div/>\" )",
          "",
          "[Added Lines]",
          "278:   $container = jQuery( \"<div></div>\" )",
          "281:   $el = jQuery( \"<div></div>\" )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "574:  assert.equal( div.css( \"display\" ), \"none\",",
          "575:   \"A shown-while-detached div inside a visible div can be hidden by the CSS cascade\" );",
          "578:  span.show().appendTo( \"#qunit-fixture\" );",
          "579:  assert.equal( span.css( \"display\" ), \"none\",",
          "580:   \"A shown-while-detached span can be hidden by the CSS cascade\" );",
          "",
          "[Removed Lines]",
          "577:  span = jQuery( \"<span class='hidden'/>\" );",
          "",
          "[Added Lines]",
          "577:  span = jQuery( \"<span class='hidden'></span>\" );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "588:   \"A shown-while-detached cascade-hidden div is hidden after attachment\" );",
          "589:  div.remove();",
          "592:  span.appendTo( \"#qunit-fixture\" ).detach().show().appendTo( \"#qunit-fixture\" );",
          "593:  assert.equal( span.css( \"display\" ), \"none\",",
          "594:   \"A shown-while-detached cascade-hidden span is hidden after attachment\" );",
          "",
          "[Removed Lines]",
          "591:  span = jQuery( \"<span class='hidden'/>\" );",
          "",
          "[Added Lines]",
          "591:  span = jQuery( \"<span class='hidden'></span>\" );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "615:   \"A shown-while-detached inline-hidden div inside a visible div has default display \" +",
          "616:   \"after attachment\" );",
          "619:  span.show();",
          "620:  assert.equal( span[ 0 ].style.display, \"\",",
          "621:   \"show() updates inline style of a detached inline-hidden span\" );",
          "",
          "[Removed Lines]",
          "618:  span = jQuery( \"<span style='display: none'/>\" );",
          "",
          "[Added Lines]",
          "618:  span = jQuery( \"<span style='display: none'></span>\" );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "623:  assert.equal( span.css( \"display\" ), \"inline\",",
          "624:   \"A shown-while-detached inline-hidden span has default display after attachment\" );",
          "627:  div.show().appendTo( \"#qunit-fixture\" );",
          "628:  assert.equal( div.css( \"display\" ), \"inline\",",
          "629:   \"show() does not update inline style of a detached inline-visible div\" );",
          "630:  div.remove();",
          "633:  jQuery( \"#table\" ).append( tr );",
          "634:  tr.detach().hide().show();",
          "636:  assert.ok( !tr[ 0 ].style.display, \"Not-hidden detached tr elements have no inline style\" );",
          "637:  tr.remove();",
          "640:  assert.ok( !span[ 0 ].style.display, \"Not-hidden detached span elements have no inline style\" );",
          "641:  span.remove();",
          "642: } );",
          "",
          "[Removed Lines]",
          "626:  div = jQuery( \"<div style='display: inline'/>\" );",
          "632:  tr = jQuery( \"<tr/>\" );",
          "639:  span = jQuery( \"<span/>\" ).hide().show();",
          "",
          "[Added Lines]",
          "626:  div = jQuery( \"<div style='display: inline'></div>\" );",
          "632:  tr = jQuery( \"<tr></tr>\" );",
          "639:  span = jQuery( \"<span></span>\" ).hide().show();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "718: QUnit.test( \"show() after hide() should always set display to initial value (#14750)\", function( assert ) {",
          "719:  assert.expect( 1 );",
          "722:   fixture = jQuery( \"#qunit-fixture\" );",
          "724:  fixture.append( div );",
          "",
          "[Removed Lines]",
          "721:  var div = jQuery( \"<div />\" ),",
          "",
          "[Added Lines]",
          "721:  var div = jQuery( \"<div></div>\" ),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "732:  assert.expect( 36 );",
          "734:  var i,",
          "736:    .appendTo( \"#qunit-fixture\" )",
          "740:    .find( \"[data-expected-display]\" );",
          "742:  $elems.each( function() {",
          "",
          "[Removed Lines]",
          "735:   $elems = jQuery( \"<div/>\" )",
          "737:    .html( \"<div data-expected-display='block'/>\" +",
          "738:     \"<span data-expected-display='inline'/>\" +",
          "739:     \"<ul><li data-expected-display='list-item'/></ul>\" )",
          "",
          "[Added Lines]",
          "735:   $elems = jQuery( \"<div></div>\" )",
          "737:    .html( \"<div data-expected-display='block'></div>\" +",
          "738:     \"<span data-expected-display='inline'></span>\" +",
          "739:     \"<ul><li data-expected-display='list-item'></li></ul>\" )",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "790:  assert.expect( 36 );",
          "792:  var i,",
          "794:    .appendTo( \"#qunit-fixture\" )",
          "796:    .children();",
          "798:  $elems.each( function() {",
          "",
          "[Removed Lines]",
          "793:   $elems = jQuery( \"<div/>\" )",
          "795:    .html( \"<span class='block'/><div class='inline'/><div class='list-item'/>\" )",
          "",
          "[Added Lines]",
          "793:   $elems = jQuery( \"<div></div>\" )",
          "795:    .html( \"<span class='block'></span><div class='inline'></div><div class='list-item'></div>\" )",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "829:  assert.expect( 96 );",
          "831:  var i,",
          "833:    .appendTo( \"#qunit-fixture\" )",
          "838:     \"<ul>\" +",
          "843:     \"</ul>\" )",
          "844:    .find( \"[data-expected-display]\" );",
          "",
          "[Removed Lines]",
          "832:   $elems = jQuery( \"<div/>\" )",
          "834:    .html( \"<span data-expected-display='block' style='display:block'/>\" +",
          "835:     \"<span class='list-item' data-expected-display='block' style='display:block'/>\" +",
          "836:     \"<div data-expected-display='inline' style='display:inline'/>\" +",
          "837:     \"<div class='list-item' data-expected-display='inline' style='display:inline'/>\" +",
          "839:      \"<li data-expected-display='block' style='display:block'/>\" +",
          "840:      \"<li class='inline' data-expected-display='block' style='display:block'/>\" +",
          "841:      \"<li data-expected-display='inline' style='display:inline'/>\" +",
          "842:      \"<li class='block' data-expected-display='inline' style='display:inline'/>\" +",
          "",
          "[Added Lines]",
          "832:   $elems = jQuery( \"<div></div>\" )",
          "834:    .html( \"<span data-expected-display='block' style='display:block'></span>\" +",
          "835:     \"<span class='list-item' data-expected-display='block' style='display:block'></span>\" +",
          "836:     \"<div data-expected-display='inline' style='display:inline'></div>\" +",
          "837:     \"<div class='list-item' data-expected-display='inline' style='display:inline'></div>\" +",
          "839:      \"<li data-expected-display='block' style='display:block'></li>\" +",
          "840:      \"<li class='inline' data-expected-display='block' style='display:block'></li>\" +",
          "841:      \"<li data-expected-display='inline' style='display:inline'></li>\" +",
          "842:      \"<li class='block' data-expected-display='inline' style='display:inline'></li>\" +",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "878:  assert.expect( 72 );",
          "880:  var i,",
          "882:    .appendTo( \"#qunit-fixture\" )",
          "887:     \"<ul>\" +",
          "890:     \"</ul>\" )",
          "891:    .find( \"[data-expected-display]\" );",
          "",
          "[Removed Lines]",
          "881:   $elems = jQuery( \"<div/>\" )",
          "883:    .html( \"<div class='hidden' data-expected-display='block'/>\" +",
          "884:     \"<div class='hidden' data-expected-display='block' style='display:none'/>\" +",
          "885:     \"<span class='hidden' data-expected-display='inline'/>\" +",
          "886:     \"<span class='hidden' data-expected-display='inline' style='display:none'/>\" +",
          "888:      \"<li class='hidden' data-expected-display='list-item'/>\" +",
          "889:      \"<li class='hidden' data-expected-display='list-item' style='display:none'/>\" +",
          "",
          "[Added Lines]",
          "881:   $elems = jQuery( \"<div></div>\" )",
          "883:    .html( \"<div class='hidden' data-expected-display='block'></div>\" +",
          "884:     \"<div class='hidden' data-expected-display='block' style='display:none'></div>\" +",
          "885:     \"<span class='hidden' data-expected-display='inline'></span>\" +",
          "886:     \"<span class='hidden' data-expected-display='inline' style='display:none'></span>\" +",
          "888:      \"<li class='hidden' data-expected-display='list-item'></li>\" +",
          "889:      \"<li class='hidden' data-expected-display='list-item' style='display:none'></li>\" +",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "925:  assert.expect( 84 );",
          "927:  var i,",
          "929:    .appendTo( \"#qunit-fixture\" )",
          "934:     \"<ul>\" +",
          "938:     \"</ul>\" )",
          "939:    .find( \"[data-expected-display]\" );",
          "",
          "[Removed Lines]",
          "928:   $elems = jQuery( \"<div/>\" )",
          "930:    .html( \"<span data-expected-display='inline' style='display:none'/>\" +",
          "931:     \"<span class='list-item' data-expected-display='list-item' style='display:none'/>\" +",
          "932:     \"<div data-expected-display='block' style='display:none'/>\" +",
          "933:     \"<div class='list-item' data-expected-display='list-item' style='display:none'/>\" +",
          "935:      \"<li data-expected-display='list-item' style='display:none'/>\" +",
          "936:      \"<li class='block' data-expected-display='block' style='display:none'/>\" +",
          "937:      \"<li class='inline' data-expected-display='inline' style='display:none'/>\" +",
          "",
          "[Added Lines]",
          "928:   $elems = jQuery( \"<div></div>\" )",
          "930:    .html( \"<span data-expected-display='inline' style='display:none'></span>\" +",
          "931:     \"<span class='list-item' data-expected-display='list-item' style='display:none'></span>\" +",
          "932:     \"<div data-expected-display='block' style='display:none'></div>\" +",
          "933:     \"<div class='list-item' data-expected-display='list-item' style='display:none'></div>\" +",
          "935:      \"<li data-expected-display='list-item' style='display:none'></li>\" +",
          "936:      \"<li class='block' data-expected-display='block' style='display:none'></li>\" +",
          "937:      \"<li class='inline' data-expected-display='inline' style='display:none'></li>\" +",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1006: QUnit[ QUnit.jQuerySelectors && jQuery.fn.toggle ? \"test\" : \"skip\" ]( \"detached toggle()\", function( assert ) {",
          "1007:  assert.expect( 6 );",
          "1012:  detached.toggle();",
          "1013:  detached.appendTo( \"#qunit-fixture\" );",
          "",
          "[Removed Lines]",
          "1008:  var detached = jQuery( \"<p><a/><p>\" ).find( \"*\" ).addBack(),",
          "1009:   hiddenDetached = jQuery( \"<p><a/></p>\" ).find( \"*\" ).addBack().css( \"display\", \"none\" ),",
          "1010:   cascadeHiddenDetached = jQuery( \"<p><a/></p>\" ).find( \"*\" ).addBack().addClass( \"hidden\" );",
          "",
          "[Added Lines]",
          "1008:  var detached = jQuery( \"<p><a></a><p>\" ).find( \"*\" ).addBack(),",
          "1009:   hiddenDetached = jQuery( \"<p><a></a></p>\" ).find( \"*\" ).addBack().css( \"display\", \"none\" ),",
          "1010:   cascadeHiddenDetached = jQuery( \"<p><a></a></p>\" ).find( \"*\" ).addBack().addClass( \"hidden\" );",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1107: QUnit.test( \"box model properties incorrectly returning % instead of px, see #10639 and #12088\", function( assert ) {",
          "1108:  assert.expect( 2 );",
          "1114:  assert.equal( el.css( \"marginRight\" ), \"200px\", \"css('marginRight') returning % instead of px, see #10639\" );",
          "1115:  assert.equal( el2.css( \"marginLeft\" ), \"100px\", \"css('marginLeft') returning incorrect pixel value, see #12088\" );",
          "",
          "[Removed Lines]",
          "1110:  var container = jQuery( \"<div/>\" ).width( 400 ).appendTo( \"#qunit-fixture\" ),",
          "1111:   el = jQuery( \"<div/>\" ).css( { \"width\": \"50%\", \"marginRight\": \"50%\" } ).appendTo( container ),",
          "1112:   el2 = jQuery( \"<div/>\" ).css( { \"width\": \"50%\", \"minWidth\": \"300px\", \"marginLeft\": \"25%\" } ).appendTo( container );",
          "",
          "[Added Lines]",
          "1110:  var container = jQuery( \"<div></div>\" ).width( 400 ).appendTo( \"#qunit-fixture\" ),",
          "1111:   el = jQuery( \"<div></div>\" ).css( { \"width\": \"50%\", \"marginRight\": \"50%\" } ).appendTo( container ),",
          "1112:   el2 = jQuery( \"<div></div>\" ).css( { \"width\": \"50%\", \"minWidth\": \"300px\", \"marginLeft\": \"25%\" } ).appendTo( container );",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1136:  assert.expect( 2 );",
          "1137:  var span, div;",
          "1140:  assert.notEqual( span.css( \"background-image\" ), null, \"can't get background-image in IE<9, see #10254\" );",
          "1143:  assert.equal( div.css( \"top\" ), \"10px\", \"can't get top in IE<9, see #8388\" );",
          "1144: } );",
          "",
          "[Removed Lines]",
          "1139:  span = jQuery( \"<span/>\" ).css( \"background-image\", \"url(\" + baseURL + \"1x1.jpg)\" );",
          "1142:  div = jQuery( \"<div/>\" ).css( \"top\", 10 );",
          "",
          "[Added Lines]",
          "1139:  span = jQuery( \"<span></span>\" ).css( \"background-image\", \"url(\" + baseURL + \"1x1.jpg)\" );",
          "1142:  div = jQuery( \"<div></div>\" ).css( \"top\", 10 );",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1154: } );",
          "1156: QUnit.test( \"can't get background-position in IE<9, see #10796\", function( assert ) {",
          "1158:   units = [",
          "1159:    \"0 0\",",
          "1160:    \"12px 12px\",",
          "",
          "[Removed Lines]",
          "1157:  var div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "1157:  var div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1246:   };",
          "1248:  for ( prop in gridProps ) {",
          "1250:   $div.css( prop, 2 );",
          "1252:   value = gridProps[ prop ];",
          "",
          "[Removed Lines]",
          "1249:   $div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "1249:   $div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1644: QUnit.test( \"Don't append px to CSS \\\"order\\\" value (#14049)\", function( assert ) {",
          "1645:  assert.expect( 1 );",
          "1649:  $elem.css( \"order\", 2 );",
          "1650:  assert.equal( $elem.css( \"order\" ), \"2\", \"2 on order\" );",
          "",
          "[Removed Lines]",
          "1647:  var $elem = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "1647:  var $elem = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1712:   assert.expect( !!appearanceName + !!transformName + 1 );",
          "1715:    .css( {",
          "1716:     msAppearance: \"none\",",
          "1717:     appearance: \"none\",",
          "",
          "[Removed Lines]",
          "1714:   elem = jQuery( \"<div/>\" )",
          "",
          "[Added Lines]",
          "1714:   elem = jQuery( \"<div></div>\" )",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1735:  QUnit.test( \"Don't detect fake set properties on a node when caching the prefixed version\", function( assert ) {",
          "1736:   assert.expect( 1 );",
          "1739:    style = elem[ 0 ].style;",
          "1740:   style.MozFakeProperty = \"old value\";",
          "1741:   elem.css( \"fakeProperty\", \"new value\" );",
          "",
          "[Removed Lines]",
          "1738:   var elem = jQuery( \"<div/>\" ),",
          "",
          "[Added Lines]",
          "1738:   var elem = jQuery( \"<div></div>\" ),",
          "",
          "---------------"
        ],
        "test/unit/data.js||test/unit/data.js": [
          "File: test/unit/data.js -> test/unit/data.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:  assert.expect( 4 );",
          "422:  var obj, jqobj,",
          "425:  div.data( { \"test\": \"in\", \"test2\": \"in2\" } );",
          "426:  assert.equal( div.data( \"test\" ), \"in\", \"Verify setting an object in data\" );",
          "",
          "[Removed Lines]",
          "423:   div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "423:   div = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "548:  assert.expect( 2 );",
          "551:   test = {",
          "552:    \"camelBar\": \"camelBar\",",
          "553:    \"hyphen-foo\": \"hyphen-foo\"",
          "",
          "[Removed Lines]",
          "550:  var div = jQuery( \"<div/>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "550:  var div = jQuery( \"<div></div>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "565:  assert.expect( 1 );",
          "569:  div.data( \"foo-bar\", \"baz\" );",
          "",
          "[Removed Lines]",
          "567:  var div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "567:  var div = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "577:  var a, b;",
          "581:  a.attr( \"data-long-param\", \"test\" );",
          "582:  a.data( \"long-param\", { a: 2 } );",
          "584:  assert.deepEqual( a.data( \"long-param\" ), { a: 2 }, \"data with property long-param was found, 1\" );",
          "588:  b.attr( \"data-long-param\", \"test\" );",
          "589:  b.data( \"long-param\" );",
          "",
          "[Removed Lines]",
          "579:  a = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
          "586:  b = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "579:  a = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
          "586:  b = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "660: QUnit.test( \".data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values\", function( assert ) {",
          "663:   datas = {",
          "664:    \"non-empty\": {",
          "665:     key: \"nonEmpty\",",
          "",
          "[Removed Lines]",
          "662:  var div = jQuery( \"<div/>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "662:  var div = jQuery( \"<div></div>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "745: } );",
          "747: QUnit.test( \".data supports interoperable removal of hyphenated/camelCase properties\", function( assert ) {",
          "749:   rdashAlpha = /-([a-z])/g,",
          "750:   datas = {",
          "751:    \"non-empty\": \"a string\",",
          "",
          "[Removed Lines]",
          "748:  var div = jQuery( \"<div/>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "748:  var div = jQuery( \"<div></div>\", { id: \"hyphened\" } ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "952:  assert.expect( 2 );",
          "954:  var key,",
          "956:  div.data( \"some\", \"data\" );",
          "957:  assert.equal( div.data( \"some\" ), \"data\", \"Data is added\" );",
          "958:  div.removeData( \"some\" );",
          "",
          "[Removed Lines]",
          "955:   div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "955:   div = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "986:  assert.expect( 1 );",
          "988:  var key,",
          "991:  div.data( \"foo\" );",
          "992:  assert.equal( jQuery.hasData( div[ 0 ] ), false, \"No data exists after access\" );",
          "",
          "[Removed Lines]",
          "989:   div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "989:   div = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1002: QUnit.test( \"keys matching Object.prototype properties  (gh-3256)\", function( assert ) {",
          "1003:  assert.expect( 2 );",
          "1007:  assert.strictEqual( div.data( \"hasOwnProperty\" ), undefined,",
          "1008:   \"hasOwnProperty not matched (before forced data creation)\" );",
          "",
          "[Removed Lines]",
          "1005:  var div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "1005:  var div = jQuery( \"<div></div>\" );",
          "",
          "---------------"
        ],
        "test/unit/deprecated.js||test/unit/deprecated.js": [
          "File: test/unit/deprecated.js -> test/unit/deprecated.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: QUnit[ jQuery.fn.click ? \"test\" : \"skip\" ]( \"Event aliases\", function( assert ) {",
          "141:   aliases = ( \"resize scroll click dblclick mousedown mouseup \" +",
          "142:    \"mousemove mouseover mouseout mouseenter mouseleave change \" +",
          "143:    \"select submit keydown keypress keyup contextmenu\" ).split( \" \" );",
          "",
          "[Removed Lines]",
          "140:  var $elem = jQuery( \"<div />\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "140:  var $elem = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------"
        ],
        "test/unit/dimensions.js||test/unit/dimensions.js": [
          "File: test/unit/dimensions.js -> test/unit/dimensions.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "342: QUnit.test( \"table dimensions\", function( assert ) {",
          "343:  assert.expect( 2 );",
          "346:   tdElem = table.find( \"td\" ).first(),",
          "347:   colElem = table.find( \"col\" ).first().width( 300 );",
          "",
          "[Removed Lines]",
          "345:  var table = jQuery( \"<table><colgroup><col/><col/></colgroup><tbody><tr><td></td><td>a</td></tr><tr><td></td><td>a</td></tr></tbody></table>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "345:  var table = jQuery( \"<table><colgroup><col></col><col></col></colgroup><tbody><tr><td></td><td>a</td></tr><tr><td></td><td>a</td></tr></tbody></table>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "536:  assert.expect( 1 );",
          "538:  var offsetTop,",
          "541:  element.offset( function( index, coords ) {",
          "542:   coords.top = 100;",
          "",
          "[Removed Lines]",
          "539:   element = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "539:   element = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "584:  assert.expect( 2 );",
          "587:   .appendTo( \"#qunit-fixture\" );",
          "589:  assert.equal( $elem.width(), 200, \"Width ignores transforms\" );",
          "",
          "[Removed Lines]",
          "586:  var $elem = jQuery( \"<div style='width: 200px; height: 200px; transform: scale(2);' />\" )",
          "",
          "[Added Lines]",
          "586:  var $elem = jQuery( \"<div style='width: 200px; height: 200px; transform: scale(2);'></div>\" )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "663:     return old + adjustment;",
          "664:    };",
          "665:   },",
          "667:    .css( { position: \"absolute\", width: \"1000px\", height: \"1000px\" } )",
          "668:    .appendTo( \"#qunit-fixture\" ),",
          "",
          "[Removed Lines]",
          "666:   parent = jQuery( \"<div/>\" )",
          "",
          "[Added Lines]",
          "666:   parent = jQuery( \"<div></div>\" )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "672:   borderWidth = 1,",
          "673:   padding = 2,",
          "674:   size = 100 + fraction,",
          "676:    .css( {",
          "677:     \"box-sizing\": \"content-box\",",
          "678:     position: \"absolute\",",
          "",
          "[Removed Lines]",
          "675:   plainBox = jQuery( \"<div />\" )",
          "",
          "[Added Lines]",
          "675:   plainBox = jQuery( \"<div></div>\" )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "748: QUnit.test( \"outerWidth/Height for table cells and textarea with border-box in IE 11 (gh-4102)\", function( assert ) {",
          "749:  assert.expect( 5 );",
          "759:   $td = jQuery( \"<td style='height: 20px;padding: 5px;border: 1px solid;line-height:18px'>text</td>\" ),",
          "767:  jQuery( \"<tr><td></td></tr>\" ).appendTo( $tbody ).append( $td );",
          "769:  assert.strictEqual( $firstTh.outerWidth(), 200, \"First th has outerWidth 200.\" );",
          "",
          "[Removed Lines]",
          "750:  var $table = jQuery( \"<table class='border-box' style='border-collapse: separate' />\" ).appendTo( \"#qunit-fixture\" ),",
          "751:   $thead = jQuery( \"<thead />\" ).appendTo( $table ),",
          "752:   $firstTh = jQuery( \"<th style='width: 200px;padding: 5px' />\" ),",
          "753:   $secondTh = jQuery( \"<th style='width: 190px;padding: 5px' />\" ),",
          "754:   $thirdTh = jQuery( \"<th style='width: 180px;padding: 5px' />\" ),",
          "761:   $tbody = jQuery( \"<tbody />\" ).appendTo( $table ),",
          "762:   $textarea = jQuery( \"<textarea style='height: 0;padding: 2px;border: 1px solid;box-sizing: border-box' />\" ).appendTo( \"#qunit-fixture\" );",
          "764:  jQuery( \"<tr />\" ).appendTo( $thead ).append( $firstTh );",
          "765:  jQuery( \"<tr />\" ).appendTo( $thead ).append( $secondTh );",
          "766:  jQuery( \"<tr />\" ).appendTo( $thead ).append( $thirdTh );",
          "",
          "[Added Lines]",
          "750:  var $table = jQuery( \"<table class='border-box' style='border-collapse: separate'></table>\" ).appendTo( \"#qunit-fixture\" ),",
          "751:   $thead = jQuery( \"<thead></thead>\" ).appendTo( $table ),",
          "752:   $firstTh = jQuery( \"<th style='width: 200px;padding: 5px'></th>\" ),",
          "753:   $secondTh = jQuery( \"<th style='width: 190px;padding: 5px'></th>\" ),",
          "754:   $thirdTh = jQuery( \"<th style='width: 180px;padding: 5px'></th>\" ),",
          "761:   $tbody = jQuery( \"<tbody></tbody>\" ).appendTo( $table ),",
          "762:   $textarea = jQuery( \"<textarea style='height: 0;padding: 2px;border: 1px solid;box-sizing: border-box'></textarea>\" ).appendTo( \"#qunit-fixture\" );",
          "764:  jQuery( \"<tr></tr>\" ).appendTo( $thead ).append( $firstTh );",
          "765:  jQuery( \"<tr></tr>\" ).appendTo( $thead ).append( $secondTh );",
          "766:  jQuery( \"<tr></tr>\" ).appendTo( $thead ).append( $thirdTh );",
          "",
          "---------------"
        ],
        "test/unit/effects.js||test/unit/effects.js": [
          "File: test/unit/effects.js -> test/unit/effects.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "597:  } );",
          "598:  this.clock.tick( 200 );",
          "601:  $elem.show( 0, function() {",
          "602:   assert.ok( true, \"Show callback with no duration\" );",
          "603:  } );",
          "",
          "[Removed Lines]",
          "600:  $elem = jQuery( \"<div />\" );",
          "",
          "[Added Lines]",
          "600:  $elem = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1282: QUnit.test( \"hide hidden elements, with animation (bug #7141)\", function( assert ) {",
          "1283:  assert.expect( 4 );",
          "1286:  assert.equal( div.css( \"display\" ), \"none\", \"Element is initially hidden\" );",
          "1287:  div.hide( 10, function() {",
          "1288:   assert.equal( div.css( \"display\" ), \"none\", \"Element is hidden in .hide() callback\" );",
          "",
          "[Removed Lines]",
          "1285:  var div = jQuery( \"<div id='bug7141' style='display:none'/>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "1285:  var div = jQuery( \"<div id='bug7141' style='display:none'></div>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1583:    toggle: [ 1 ],",
          "1584:    slideToggle: []",
          "1585:   },",
          "1587:   $divTest = jQuery( \"<div>test</div>\" ),",
          "1590:   nullParentDisplay = $divEmpty.css( \"display\" ),",
          "1591:   underFragmentDisplay = $divTest.css( \"display\" ),",
          "1592:   clock = this.clock;",
          "",
          "[Removed Lines]",
          "1586:   $divEmpty = jQuery( \"<div/>\" ),",
          "1588:   $divNone = jQuery( \"<div style='display: none;'/>\" ),",
          "1589:   $divInline = jQuery( \"<div style='display: inline;'/>\" ),",
          "",
          "[Added Lines]",
          "1586:   $divEmpty = jQuery( \"<div></div>\" ),",
          "1588:   $divNone = jQuery( \"<div style='display: none;'></div>\" ),",
          "1589:   $divInline = jQuery( \"<div style='display: inline;'></div>\" ),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1604:   \"show() should not change display if it already set\" );",
          "1606:  jQuery.each( showMethods, function( name, opt ) {",
          "1608:    assert.strictEqual( jQuery( this ).css( \"display\" ), nullParentDisplay,",
          "1609:     \".\" + name + \" block with null parentNode\" );",
          "1610:   } ] ) );",
          "",
          "[Removed Lines]",
          "1607:   jQuery.fn[ name ].apply( jQuery( \"<div/>\" ), opt.concat( [ function() {",
          "",
          "[Added Lines]",
          "1607:   jQuery.fn[ name ].apply( jQuery( \"<div></div>\" ), opt.concat( [ function() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1615:   } ] ) );",
          "1616:  } );",
          "1617:  jQuery.each( toggleMethods, function( name, opt ) {",
          "1619:    assert.strictEqual( jQuery( this ).css( \"display\" ), \"none\",",
          "1620:     \".\" + name + \" block with null parentNode\" );",
          "1621:   } ] ) );",
          "",
          "[Removed Lines]",
          "1618:   jQuery.fn[ name ].apply( jQuery( \"<div/>\" ), opt.concat( [ function() {",
          "",
          "[Added Lines]",
          "1618:   jQuery.fn[ name ].apply( jQuery( \"<div></div>\" ), opt.concat( [ function() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2340:  assert.expect( 2 );",
          "2342:  var clock = this.clock,",
          "2346:  jQuery( \"#qunit-fixture\" ).append( fromStyleSheet, fromStyleAttr );",
          "",
          "[Removed Lines]",
          "2343:   fromStyleSheet = jQuery( \"<span id='span-14824' />\" ),",
          "2344:   fromStyleAttr = jQuery( \"<span style='display: block;' />\" );",
          "",
          "[Added Lines]",
          "2343:   fromStyleSheet = jQuery( \"<span id='span-14824'></span>\" ),",
          "2344:   fromStyleAttr = jQuery( \"<span style='display: block;'></span>\" );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2441: QUnit.test( \"Display value is correct for disconnected nodes (trac-13310)\", function( assert ) {",
          "2442:  assert.expect( 3 );",
          "2446:  assert.equal( div.css( \"display\", \"inline\" ).hide().show().appendTo( \"body\" ).css( \"display\" ), \"inline\", \"Initialized display value has returned\" );",
          "2447:  div.remove();",
          "",
          "[Removed Lines]",
          "2444:  var div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "2444:  var div = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2463:  var clock = this.clock;",
          "2466:   var completed, interrupted,",
          "2467:    N = 100,",
          "2468:    fixture = jQuery( \"#qunit-fixture\" ),",
          "",
          "[Removed Lines]",
          "2465:  jQuery( \"<span/><div style='display:inline' title='inline div'/>\" ).each( function() {",
          "",
          "[Added Lines]",
          "2465:  jQuery( \"<span></span><div style='display:inline' title='inline div'></div>\" ).each( function() {",
          "",
          "---------------"
        ],
        "test/unit/event.js||test/unit/event.js": [
          "File: test/unit/event.js -> test/unit/event.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:  var cur, div,",
          "154:   obj = {};",
          "157:   assert.equal( e.type, cur, \"Verify right single event was fired.\" );",
          "158:  } );",
          "",
          "[Removed Lines]",
          "156:  div = jQuery( \"<div/>\" ).on( \"focusin.a\", function( e ) {",
          "",
          "[Added Lines]",
          "156:  div = jQuery( \"<div></div>\" ).on( \"focusin.a\", function( e ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:  div.remove();",
          "167:   assert.equal( e.type, cur, \"Verify right multi event was fired.\" );",
          "168:   assert.equal( e.data, obj, \"Make sure the data came in correctly.\" );",
          "169:  } );",
          "",
          "[Removed Lines]",
          "166:  div = jQuery( \"<div/>\" ).on( \"click mouseover\", obj, function( e ) {",
          "",
          "[Added Lines]",
          "166:  div = jQuery( \"<div></div>\" ).on( \"click mouseover\", obj, function( e ) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:  div.remove();",
          "181:   assert.equal( e.type, cur, \"Verify right multi event was fired.\" );",
          "182:  } );",
          "",
          "[Removed Lines]",
          "180:  div = jQuery( \"<div/>\" ).on( \"focusin.a focusout.b\", function( e ) {",
          "",
          "[Added Lines]",
          "180:  div = jQuery( \"<div></div>\" ).on( \"focusin.a focusout.b\", function( e ) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:  assert.expect( 27 );",
          "197:  var i = 0,",
          "199:    assert.ok( true, \"Test event fired.\" );",
          "200:   } );",
          "",
          "[Removed Lines]",
          "198:   div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).on( \"test\", function() {",
          "",
          "[Added Lines]",
          "198:   div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).on( \"test\", function() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "245:  div.off( \"test\" );",
          "248:   assert.ok( true, \"Test event fired.\" );",
          "249:  } );",
          "",
          "[Removed Lines]",
          "247:  div = jQuery( \"<div/>\" ).on( \"test\", function() {",
          "",
          "[Added Lines]",
          "247:  div = jQuery( \"<div></div>\" ).on( \"test\", function() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "876:  assert.expect( 1 );",
          "878:  var count = 0,",
          "880:  elem.on( \"mouseenter\", function() {",
          "881:   count++;",
          "882:  } );",
          "",
          "[Removed Lines]",
          "879:   elem = jQuery( \"<a />\" );",
          "",
          "[Added Lines]",
          "879:   elem = jQuery( \"<a></a>\" );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "890:  assert.expect( 1 );",
          "892:  var count = 0,",
          "894:  elem.on( \"pointerenter\", function() {",
          "895:   count++;",
          "896:  } );",
          "",
          "[Removed Lines]",
          "893:   elem = jQuery( \"<a />\" );",
          "",
          "[Added Lines]",
          "893:   elem = jQuery( \"<a></a>\" );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1075:  var $formByClone, $formByHTML,",
          "1076:   $testForm = jQuery( \"#testForm\" ),",
          "1077:   $fixture = jQuery( \"#qunit-fixture\" ),",
          "1080:  function noSubmit( e ) {",
          "1081:   e.preventDefault();",
          "",
          "[Removed Lines]",
          "1078:   $wrapperDiv = jQuery( \"<div/>\" ).appendTo( $fixture );",
          "",
          "[Added Lines]",
          "1078:   $wrapperDiv = jQuery( \"<div></div>\" ).appendTo( $fixture );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1111:  var $formByClone, $formByHTML,",
          "1112:   $form = jQuery( \"#form\" ),",
          "1113:   $fixture = jQuery( \"#qunit-fixture\" ),",
          "1116:  function delegatedChange() {",
          "1117:   assert.ok( true, \"Make sure change event bubbles up.\" );",
          "",
          "[Removed Lines]",
          "1114:   $wrapperDiv = jQuery( \"<div/>\" ).appendTo( $fixture );",
          "",
          "[Added Lines]",
          "1114:   $wrapperDiv = jQuery( \"<div></div>\" ).appendTo( $fixture );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1141:  assert.expect( 28 );",
          "1143:  var event,",
          "1145:   $child = jQuery( \"<p id='child'>foo</p>\" ).appendTo( $parent );",
          "1147:  $parent.get( 0 ).style.display = \"none\";",
          "",
          "[Removed Lines]",
          "1144:   $parent = jQuery( \"<div id='par' />\" ).appendTo( \"body\" ),",
          "",
          "[Added Lines]",
          "1144:   $parent = jQuery( \"<div id='par'></div>\" ).appendTo( \"body\" ),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1799: QUnit.test( \"events with type matching an Object.prototype property (gh-3256)\", function( assert ) {",
          "1800:  assert.expect( 1 );",
          "1803:   eventFired = false;",
          "1805:  elem.appendTo( \"#qunit-fixture\" );",
          "",
          "[Removed Lines]",
          "1802:  var elem = jQuery( \"<div/>\" ),",
          "",
          "[Added Lines]",
          "1802:  var elem = jQuery( \"<div></div>\" ),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1819:  function( assert ) {",
          "1820:  assert.expect( 1 );",
          "1823:   eventFired = false;",
          "1825:  elem.appendTo( \"#qunit-fixture\" );",
          "",
          "[Removed Lines]",
          "1822:  var elem = jQuery( \"<div/>\" ),",
          "",
          "[Added Lines]",
          "1822:  var elem = jQuery( \"<div></div>\" ),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2788:  assert.expect( 2 );",
          "2790:  var key,",
          "2793:  div.on( \"click\", false );",
          "2794:  div.on( \"custom\", function() {",
          "",
          "[Removed Lines]",
          "2791:   div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "2791:   div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "---------------"
        ],
        "test/unit/manipulation.js||test/unit/manipulation.js": [
          "File: test/unit/manipulation.js -> test/unit/manipulation.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  assert.equal( $multipleElements.eq( 1 ).text(), expected, \"text() updates multiple elements (#11809)\" );",
          "92:  $childDiv.data( \"leak\", true );",
          "94:  $parentDiv.append( $childDiv );",
          "95:  $parentDiv.text( \"Dry off\" );",
          "96: }",
          "",
          "[Removed Lines]",
          "91:  $childDiv = jQuery( \"<div/>\" );",
          "93:  $parentDiv = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "91:  $childDiv = jQuery( \"<div></div>\" );",
          "93:  $parentDiv = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:   assert.strictEqual( e.message || e, undefined, message );",
          "242:  }",
          "245:  assert.t( \"Append legend\", \"#legend\", [ \"legend\" ] );",
          "249:  assert.equal( $map[ 0 ].childNodes.length, 1, \"The area was inserted.\" );",
          "250:  assert.equal( $map[ 0 ].firstChild.nodeName.toLowerCase(), \"area\", \"The area was inserted.\" );",
          "",
          "[Removed Lines]",
          "244:  jQuery( \"<fieldset/>\" ).appendTo( \"#form\" ).append( valueObj( \"<legend id='legend'>test</legend>\" ) );",
          "247:  $map = jQuery( \"<map/>\" ).append( valueObj( \"<area id='map01' shape='rect' coords='50,50,150,150' href='https://www.jquery.com/' alt='jQuery'>\" ) );",
          "",
          "[Added Lines]",
          "244:  jQuery( \"<fieldset></fieldset>\" ).appendTo( \"#form\" ).append( valueObj( \"<legend id='legend'>test</legend>\" ) );",
          "247:  $map = jQuery( \"<map></map>\" ).append( valueObj( \"<area id='map01' shape='rect' coords='50,50,150,150' href='https://www.jquery.com/' alt='jQuery'>\" ) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "264:   assert.ok( jQuery.parseHTML( \"<\" + name + \"/>\" ).length, name + \" wrapped correctly\" );",
          "265:  } );",
          "268:  assert.equal( jQuery( \"#table colgroup col\" ).length, 1, \"Append col\" );",
          "270:  jQuery( \"#form\" )",
          "",
          "[Removed Lines]",
          "267:  jQuery( \"#table colgroup\" ).append( valueObj( \"<col/>\" ) );",
          "",
          "[Added Lines]",
          "267:  jQuery( \"#table colgroup\" ).append( valueObj( \"<col></col>\" ) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:   .append( valueObj( \"<select id='appendSelect2'><option>Test</option></select>\" ) );",
          "273:  assert.t( \"Append Select\", \"#appendSelect1, #appendSelect2\", [ \"appendSelect1\", \"appendSelect2\" ] );",
          "279:  j = jQuery( \"#nonnodes\" ).contents();",
          "282:  assert.equal( jQuery( \"#nonnodes\" ).length, 1, \"Check node,textnode,comment append moved leaving just the div\" );",
          "283:  assert.equal( d.contents().length, 3, \"Check node,textnode,comment append works\" );",
          "",
          "[Removed Lines]",
          "275:  assert.equal( \"Two nodes\", jQuery( \"<div />\" ).append( \"Two\", \" nodes\" ).text(), \"Appending two text nodes (#4011)\" );",
          "276:  assert.equal( jQuery( \"<div />\" ).append( \"1\", \"\", 3 ).text(), \"13\", \"If median is false-like value, subsequent arguments should not be ignored\" );",
          "280:  d = jQuery( \"<div/>\" ).appendTo( \"#nonnodes\" ).append( j );",
          "",
          "[Added Lines]",
          "275:  assert.equal( \"Two nodes\", jQuery( \"<div></div>\" ).append( \"Two\", \" nodes\" ).text(), \"Appending two text nodes (#4011)\" );",
          "276:  assert.equal( jQuery( \"<div></div>\" ).append( \"1\", \"\", 3 ).text(), \"13\", \"If median is false-like value, subsequent arguments should not be ignored\" );",
          "280:  d = jQuery( \"<div></div>\" ).appendTo( \"#nonnodes\" ).append( j );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "294:  $radioChecked.trigger( \"click\" );",
          "295:  $radioUnchecked[ 0 ].checked = false;",
          "299:  assert.equal( $radioChecked[ 0 ].checked, true, \"Reappending radios uphold which radio is checked\" );",
          "300:  assert.equal( $radioUnchecked[ 0 ].checked, false, \"Reappending radios uphold not being checked\" );",
          "303: }",
          "305: QUnit.test( \"append(String|Element|Array<Element>|jQuery)\", function( assert ) {",
          "",
          "[Removed Lines]",
          "297:  jQuery( \"<div/>\" ).insertBefore( $radioParent ).append( $radioParent );",
          "302:  assert.equal( jQuery( \"<div/>\" ).append( valueObj( \"option<area/>\" ) )[ 0 ].childNodes.length, 2, \"HTML-string with leading text should be processed correctly\" );",
          "",
          "[Added Lines]",
          "297:  jQuery( \"<div></div>\" ).insertBefore( $radioParent ).append( $radioParent );",
          "302:  assert.equal( jQuery( \"<div></div>\" ).append( valueObj( \"option<area></area>\" ) )[ 0 ].childNodes.length, 2, \"HTML-string with leading text should be processed correctly\" );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "637:  jQuery( \"#select1\" ).appendTo( \"#foo\" );",
          "638:  assert.t( \"Append select\", \"#foo select\", [ \"select1\" ] );",
          "641:   assert.ok( true, \"Running a cloned click.\" );",
          "642:  } );",
          "643:  div.appendTo( \"#qunit-fixture, #moretests\" );",
          "",
          "[Removed Lines]",
          "640:  div = jQuery( \"<div/>\" ).on( \"click\", function() {",
          "",
          "[Added Lines]",
          "640:  div = jQuery( \"<div></div>\" ).on( \"click\", function() {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "645:  jQuery( \"#qunit-fixture div\" ).last().trigger( \"click\" );",
          "646:  jQuery( \"#moretests div\" ).last().trigger( \"click\" );",
          "650:  assert.equal( div.length, 2, \"appendTo returns the inserted elements\" );",
          "",
          "[Removed Lines]",
          "648:  div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture, #moretests\" );",
          "",
          "[Added Lines]",
          "648:  div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture, #moretests\" );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "654:  assert.ok( jQuery( \"#qunit-fixture div\" ).last().hasClass( \"test\" ), \"appendTo element was modified after the insertion\" );",
          "655:  assert.ok( jQuery( \"#moretests div\" ).last().hasClass( \"test\" ), \"appendTo element was modified after the insertion\" );",
          "658:  jQuery( \"<span>a</span><b>b</b>\" ).filter( \"span\" ).appendTo( div );",
          "660:  assert.equal( div.children().length, 1, \"Make sure the right number of children were inserted.\" );",
          "",
          "[Removed Lines]",
          "657:  div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "657:  div = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "954:  assert.expect( 2 );",
          "956:  var set;",
          "958:  assert.equal( set[ 0 ].nodeName.toLowerCase(), \"div\", \"Insert before a disconnected node should be a no-op\" );",
          "959:  assert.equal( set.length, 1, \"Insert the element before the disconnected node. should be a no-op\" );",
          "960: } );",
          "",
          "[Removed Lines]",
          "957:  set = jQuery( \"<div/>\" ).before( \"<span>test</span>\" );",
          "",
          "[Added Lines]",
          "957:  set = jQuery( \"<div></div>\" ).before( \"<span>test</span>\" );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "974:  assert.expect( 2 );",
          "978: } );",
          "980: QUnit.test( \"insert with .before() on disconnected node last\", function( assert ) {",
          "",
          "[Removed Lines]",
          "976:  assert.equal( jQuery( \"<input type='checkbox'/>\" ).before( \"<div/>\" ).length, 1, \"before() on disconnected node is no-op\" );",
          "977:  assert.equal( jQuery( \"<input type='checkbox'/>\" ).after( \"<div/>\" ).length, 1, \"after() on disconnected node is no-op\" );",
          "",
          "[Added Lines]",
          "976:  assert.equal( jQuery( \"<input type='checkbox'/>\" ).before( \"<div></div>\" ).length, 1, \"before() on disconnected node is no-op\" );",
          "977:  assert.equal( jQuery( \"<input type='checkbox'/>\" ).after( \"<div></div>\" ).length, 1, \"after() on disconnected node is no-op\" );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "984:  var expectedBefore = \"This is a normal link: bugaYahoo\";",
          "987:  assert.equal( jQuery( \"#en\" ).text(), expectedBefore, \"Insert String before with disconnected node last\" );",
          "988: } );",
          "",
          "[Removed Lines]",
          "986:  jQuery( \"#yahoo\" ).add( \"<span/>\" ).before( \"<b>buga</b>\" );",
          "",
          "[Added Lines]",
          "986:  jQuery( \"#yahoo\" ).add( \"<span></span>\" ).before( \"<b>buga</b>\" );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "994:  var expectedBefore = \"This is a normal link: bugaYahoo\";",
          "997:  assert.equal( jQuery( \"#en\" ).text(), expectedBefore, \"Insert String before with disconnected node first\" );",
          "998: } );",
          "",
          "[Removed Lines]",
          "996:  jQuery( \"<span/>\" ).add( \"#yahoo\" ).before( \"<b>buga</b>\" );",
          "",
          "[Added Lines]",
          "996:  jQuery( \"<span></span>\" ).add( \"#yahoo\" ).before( \"<b>buga</b>\" );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1004:  var expectedAfter = \"This is a normal link: Yahoobuga\";",
          "1007:  assert.equal( jQuery( \"#en\" ).text(), expectedAfter, \"Insert String after with disconnected node last\" );",
          "1008: } );",
          "",
          "[Removed Lines]",
          "1006:  jQuery( \"#yahoo\" ).add( \"<span/>\" ).after( \"<b>buga</b>\" );",
          "",
          "[Added Lines]",
          "1006:  jQuery( \"#yahoo\" ).add( \"<span></span>\" ).after( \"<b>buga</b>\" );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1014:  var expectedAfter = \"This is a normal link: Yahoobuga\";",
          "1017:  assert.equal( jQuery( \"#en\" ).text(), expectedAfter, \"Insert String after with disconnected node first\" );",
          "1018: } );",
          "",
          "[Removed Lines]",
          "1016:  jQuery( \"<span/>\" ).add( \"#yahoo\" ).after( \"<b>buga</b>\" );",
          "",
          "[Added Lines]",
          "1016:  jQuery( \"<span></span>\" ).add( \"#yahoo\" ).after( \"<b>buga</b>\" );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1134:  assert.expect( 2 );",
          "1137:  assert.equal( set[ 0 ].nodeName.toLowerCase(), \"div\", \"Insert after a disconnected node should be a no-op\" );",
          "1138:  assert.equal( set.length, 1, \"Insert the element after the disconnected node should be a no-op\" );",
          "1139: } );",
          "",
          "[Removed Lines]",
          "1136:  var set = jQuery( \"<div/>\" ).before( \"<span>test</span>\" );",
          "",
          "[Added Lines]",
          "1136:  var set = jQuery( \"<div></div>\" ).before( \"<span>test</span>\" );",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1215:  jQuery( \"#anchor1\" ).contents().replaceWith( val( tmp ) );",
          "1216:  assert.deepEqual( jQuery( \"#anchor1\" ).contents().get(), [ tmp ], \"Replace text node with element\" );",
          "1219:   assert.ok( true, \"Newly bound click run.\" );",
          "1220:  } );",
          "1222:   assert.ok( false, \"Previously bound click run.\" );",
          "1223:  } );",
          "1224:  child = y.append( \"<b>test</b>\" ).find( \"b\" ).on( \"click\", function() {",
          "",
          "[Removed Lines]",
          "1218:  tmp = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {",
          "1221:  y = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {",
          "",
          "[Added Lines]",
          "1218:  tmp = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {",
          "1221:  y = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1232:  y.trigger( \"click\" ); // Shouldn't be run",
          "1233:  child.trigger( \"click\" ); // Shouldn't be run",
          "1236:   assert.ok( false, \"Previously bound click run.\" );",
          "1237:  } );",
          "1238:  child2 = y.append( \"<u>test</u>\" ).find( \"u\" ).on( \"click\", function() {",
          "",
          "[Removed Lines]",
          "1235:  y = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {",
          "",
          "[Added Lines]",
          "1235:  y = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ).on( \"click\", function() {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1245:  child2.trigger( \"click\" );",
          "1248:  assert.equal( set[ 0 ].nodeName.toLowerCase(), \"div\", \"No effect on a disconnected node.\" );",
          "1249:  assert.equal( set.length, 1, \"No effect on a disconnected node.\" );",
          "1250:  assert.equal( set[ 0 ].childNodes.length, 0, \"No effect on a disconnected node.\" );",
          "1252:  child = jQuery( \"#qunit-fixture\" ).children().first();",
          "1254:  $div.replaceWith( $div );",
          "1255:  assert.deepEqual( jQuery( \".pathological\", \"#qunit-fixture\" ).get(), $div.get(),",
          "1256:   \"Self-replacement\" );",
          "",
          "[Removed Lines]",
          "1247:  set = jQuery( \"<div/>\" ).replaceWith( val( \"<span>test</span>\" ) );",
          "1253:  $div = jQuery( \"<div class='pathological'/>\" ).insertBefore( child );",
          "",
          "[Added Lines]",
          "1247:  set = jQuery( \"<div></div>\" ).replaceWith( val( \"<span>test</span>\" ) );",
          "1253:  $div = jQuery( \"<div class='pathological'></div>\" ).insertBefore( child );",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1308:  assert.expect( 25 );",
          "1311:   expectedHTML = $el.html(),",
          "1312:   tests = {",
          "1313:    \"empty string\": \"\",",
          "",
          "[Removed Lines]",
          "1310:  var $el = jQuery( \"<div/><div/>\" ).html( \"<p>0</p>\" ),",
          "",
          "[Added Lines]",
          "1310:  var $el = jQuery( \"<div></div><div></div>\" ).html( \"<p>0</p>\" ),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1320:   };",
          "1322:  jQuery.each( tests, function( label, input ) {",
          "1324:   assert.strictEqual( $el.html(), \"\", \"replaceWith(\" + label + \")\" );",
          "1326:   assert.strictEqual( $el.html(), \"\", \"replaceWith(function returning \" + label + \")\" );",
          "1328:   assert.strictEqual( $el.html(), \"\", \"replaceWith(other function returning \" + label + \")\" );",
          "1330:    return i ?",
          "1331:     input :",
          "1332:     jQuery( this ).html( i + \"\" );",
          "",
          "[Removed Lines]",
          "1323:   $el.html( \"<a/>\" ).children().replaceWith( input );",
          "1325:   $el.html( \"<b/>\" ).children().replaceWith( function() { return input; } );",
          "1327:   $el.html( \"<i/>\" ).children().replaceWith( function( i ) { return input; } );",
          "1329:   $el.html( \"<p/>\" ).children().replaceWith( function( i ) {",
          "",
          "[Added Lines]",
          "1323:   $el.html( \"<a></a>\" ).children().replaceWith( input );",
          "1325:   $el.html( \"<b></b>\" ).children().replaceWith( function() { return input; } );",
          "1327:   $el.html( \"<i></i>\" ).children().replaceWith( function( i ) { return input; } );",
          "1329:   $el.html( \"<p></p>\" ).children().replaceWith( function( i ) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1447:  div.remove();",
          "1451:  div.find( \"table\" ).on( \"click\", function() {",
          "1452:   assert.ok( true, \"Bound event still exists.\" );",
          "1453:  } );",
          "",
          "[Removed Lines]",
          "1450:  div = jQuery( \"<div/>\" ).append( [ document.createElement( \"table\" ), document.createElement( \"table\" ) ] );",
          "",
          "[Added Lines]",
          "1450:  div = jQuery( \"<div></div>\" ).append( [ document.createElement( \"table\" ), document.createElement( \"table\" ) ] );",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1474:  div.remove();",
          "1479:  clone = div.clone( true );",
          "1480:  assert.equal( clone.length, 1, \"One element cloned\" );",
          "",
          "[Removed Lines]",
          "1477:  div = jQuery( \"<div/>\" ).html( \"<embed height='355' width='425' src='https://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'></embed>\" );",
          "",
          "[Added Lines]",
          "1477:  div = jQuery( \"<div></div>\" ).html( \"<embed height='355' width='425' src='https://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'></embed>\" );",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1489:  clone = div.clone( true );",
          "1490:  assert.equal( clone.length, 1, \"One element cloned\" );",
          "",
          "[Removed Lines]",
          "1487:  div = jQuery( \"<div/>\" ).html( \"<object height='355' width='425' classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'>  <param name='movie' value='https://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\" );",
          "",
          "[Added Lines]",
          "1487:  div = jQuery( \"<div></div>\" ).html( \"<object height='355' width='425' classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'>  <param name='movie' value='https://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\" );",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1511:  } )();",
          "1516:  clone = div.clone( true );",
          "1517:  assert.equal( clone.length, 1, \"One element cloned\" );",
          "1518:  assert.equal( clone.html(), div.html(), \"Element contents cloned\" );",
          "1519:  assert.equal( clone[ 0 ].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );",
          "1522:  clone = div.clone( true );",
          "1523:  assert.equal( clone.data( \"a\" ), true, \"Data cloned.\" );",
          "1524:  clone.data( \"a\", false );",
          "",
          "[Removed Lines]",
          "1514:  div = jQuery( \"<div/>\" ).html( \"<object height='355' width='425' type='application/x-shockwave-flash' data='https://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='movie' value='https://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\" );",
          "1521:  div = jQuery( \"<div/>\" ).data( { \"a\": true } );",
          "",
          "[Added Lines]",
          "1514:  div = jQuery( \"<div></div>\" ).html( \"<object height='355' width='425' type='application/x-shockwave-flash' data='https://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='movie' value='https://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\" );",
          "1521:  div = jQuery( \"<div></div>\" ).data( { \"a\": true } );",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1653:   div = jQuery( \"<div></div>\" ),",
          "1654:   fixture = jQuery( \"#qunit-fixture\" );",
          "1657:  assert.equal( div.children().length, 2, \"Found children\" );",
          "1658:  assert.equal( div.children().children().length, 1, \"Found grandchild\" );",
          "1660:  actual = []; expected = [];",
          "1662:   expected.push( \"AREA\" );",
          "1663:   actual.push( childNodeNames( this ) );",
          "1664:  } );",
          "",
          "[Removed Lines]",
          "1656:  div.html( valueObj( \"<div id='parent_1'><div id='child_1'/></div><div id='parent_2'/>\" ) );",
          "1661:  tmp = jQuery( \"<map/>\" ).html( valueObj( \"<area alt='area'/>\" ) ).each( function() {",
          "",
          "[Added Lines]",
          "1656:  div.html( valueObj( \"<div id='parent_1'><div id='child_1'></div></div><div id='parent_2'></div>\" ) );",
          "1661:  tmp = jQuery( \"<map></map>\" ).html( valueObj( \"<area alt='area'></area>\" ) ).each( function() {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1713:  assert.equal( expected.length, 1, \"Expecting one parent\" );",
          "1714:  assert.deepEqual( actual, expected, \"Found the inserted style element\" );",
          "1717:  jQuery( \"#qunit-fixture select\" ).html( valueObj( \"<option>O1</option><option selected='selected'>O2</option><option>O3</option>\" ) );",
          "1718:  assert.equal( jQuery( \"#qunit-fixture select\" ).val(), \"O2\", \"Selected option correct\" );",
          "",
          "[Removed Lines]",
          "1716:  fixture.html( valueObj( \"<select/>\" ) );",
          "",
          "[Added Lines]",
          "1716:  fixture.html( valueObj( \"<select></select>\" ) );",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1863:  assert.equal( j.html().replace( / xmlns=\"[^\"]+\"/g, \"\" ).toLowerCase(), \"<b>bold</b>\", \"Check node,textnode,comment with html()\" );",
          "1867:  assert.equal( $div.html( function( i, val ) {",
          "1868:   assert.equal( val, \"\", \"Make sure the incoming value is correct.\" );",
          "",
          "[Removed Lines]",
          "1865:  $div = jQuery( \"<div />\" );",
          "",
          "[Added Lines]",
          "1865:  $div = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1874:   return 0;",
          "1875:  } ).html(), \"0\", \"Setting a zero as html\" );",
          "1878:  insert = \"&lt;div&gt;hello1&lt;/div&gt;\";",
          "1879:  assert.equal( $div2.html( function( i, val ) {",
          "1880:   assert.equal( val, \"\", \"Make sure the incoming value is correct.\" );",
          "",
          "[Removed Lines]",
          "1877:  $div2 = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "1877:  $div2 = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2170: QUnit.test( \"jQuery.cleanData eliminates all private data (gh-2127)\", function( assert ) {",
          "2171:  assert.expect( 3 );",
          "2175:  jQuery._data( div[ 0 ], \"gh-2127\", \"testing\" );",
          "",
          "[Removed Lines]",
          "2173:  var div = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "2173:  var div = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2190:  assert.expect( 3 );",
          "2192:  var key,",
          "2194:  div.data( \"some\", \"data\" );",
          "2195:  assert.ok( !jQuery.isEmptyObject( jQuery.data( div[ 0 ] ) ),  \"Ensure some public data exists\" );",
          "",
          "[Removed Lines]",
          "2193:   div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "2193:   div = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2214:  var i,",
          "2216:   bad = [ \"start-\", \"toString\", \"hasOwnProperty\", \"append\", \"here&there!\", \"-end\" ];",
          "2218:  for ( i = 0; i < bad.length; i++ ) {",
          "",
          "[Removed Lines]",
          "2215:   $f = jQuery( \"<div />\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "2215:   $f = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2381:  var div;",
          "2383:  try {",
          "2385:  } catch ( e ) {}",
          "2387:  assert.ok( div && div.jquery, \"Created nodes safely, guarded against exceptions on safeChildNodes[ -1 ]\" );",
          "",
          "[Removed Lines]",
          "2384:   div = jQuery( \"<div/><hr/><code/><b/>\" );",
          "",
          "[Added Lines]",
          "2384:   div = jQuery( \"<div></div><hr/><code></code><b></b>\" );",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2392:  assert.expect( 5 );",
          "2399: } );",
          "2401: QUnit.test( \"html() - script exceptions bubble (#11743)\", function( assert ) {",
          "",
          "[Removed Lines]",
          "2394:  assert.strictEqual( jQuery( \"<div/>\" ).clone().addClass( \"test\" ).appendTo( \"<div/>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.clone\" );",
          "2395:  assert.strictEqual( jQuery( \"<div/>\" ).find( \"p\" ).end().addClass( \"test\" ).appendTo( \"<div/>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.fn.find\" );",
          "2396:  assert.strictEqual( jQuery( \"<div/>\" ).text( \"test\" ).addClass( \"test\" ).appendTo( \"<div/>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.fn.text\" );",
          "2397:  assert.strictEqual( jQuery( \"<bdi/>\" ).clone().addClass( \"test\" ).appendTo( \"<div/>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after clone html5 element\" );",
          "2398:  assert.strictEqual( jQuery( \"<p/>\" ).appendTo( \"<div/>\" ).end().length, jQuery( \"<p>test</p>\" ).appendTo( \"<div/>\" ).end().length, \"Elements created with createElement and with createDocumentFragment should be treated alike\" );",
          "",
          "[Added Lines]",
          "2394:  assert.strictEqual( jQuery( \"<div></div>\" ).clone().addClass( \"test\" ).appendTo( \"<div></div>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.clone\" );",
          "2395:  assert.strictEqual( jQuery( \"<div></div>\" ).find( \"p\" ).end().addClass( \"test\" ).appendTo( \"<div></div>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.fn.find\" );",
          "2396:  assert.strictEqual( jQuery( \"<div></div>\" ).text( \"test\" ).addClass( \"test\" ).appendTo( \"<div></div>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after jQuery.fn.text\" );",
          "2397:  assert.strictEqual( jQuery( \"<bdi></bdi>\" ).clone().addClass( \"test\" ).appendTo( \"<div></div>\" ).end().end().hasClass( \"test\" ), false, \"Check jQuery.fn.appendTo after clone html5 element\" );",
          "2398:  assert.strictEqual( jQuery( \"<p></p>\" ).appendTo( \"<div></div>\" ).end().length, jQuery( \"<p>test</p>\" ).appendTo( \"<div></div>\" ).end().length, \"Elements created with createElement and with createDocumentFragment should be treated alike\" );",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2485:    \"<script>QUnit.assert.ok( true, 'evaluated: inner no type' );</script>\",",
          "2486:   \"</div>\"",
          "2487:  ].join( \"\" ) );",
          "2489:  objGlobal.ok = isOk;",
          "2491:  scriptsOut = fixture.append( scriptsIn ).find( \"script\" );",
          "",
          "[Removed Lines]",
          "2488:  scriptsIn.appendTo( jQuery( \"<div class='detached'/>\" ) );",
          "",
          "[Added Lines]",
          "2488:  scriptsIn.appendTo( jQuery( \"<div class='detached'></div>\" ) );",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2503:  if ( jQuery.ajax ) {",
          "2504:   Globals.register( \"testBar\" );",
          "2506:   assert.strictEqual( window.testBar, \"bar\", \"Global script evaluation\" );",
          "2507:  } else {",
          "2508:   assert.ok( true, \"No jQuery.ajax\" );",
          "",
          "[Removed Lines]",
          "2505:   jQuery( \"#qunit-fixture\" ).append( \"<script src='\" + url( \"mock.php?action=testbar\" ) + \"'/>\" );",
          "",
          "[Added Lines]",
          "2505:   jQuery( \"#qunit-fixture\" ).append( \"<script src='\" + url( \"mock.php?action=testbar\" ) + \"'></script>\" );",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2524:   assert.equal( ( input.url || input ).slice( -1 ), expectedArgument, message );",
          "2525:   expectedArgument++;",
          "2526:  };",
          "2528:  assert.equal( expectedArgument, 3, \"synchronous execution\" );",
          "2530:  message = \"custom implementation\";",
          "",
          "[Removed Lines]",
          "2527:  jQuery( \"#qunit-fixture\" ).append( \"<script src='1'/><script src='2'/>\" );",
          "",
          "[Added Lines]",
          "2527:  jQuery( \"#qunit-fixture\" ).append( \"<script src='1'></script><script src='2'></script>\" );",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2533:  jQuery.ajax = function( options ) {",
          "2534:   assert.strictEqual( options, {}, \"Unexpected call to jQuery.ajax\" );",
          "2535:  };",
          "2538:  jQuery.ajax = ajax;",
          "2539:  jQuery._evalUrl = evalUrl;",
          "",
          "[Removed Lines]",
          "2536:  jQuery( \"#qunit-fixture\" ).append( \"<script src='3'/><script src='4'/>\" );",
          "",
          "[Added Lines]",
          "2536:  jQuery( \"#qunit-fixture\" ).append( \"<script src='3'></script><script src='4'></script>\" );",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2547:   invocations = 0,",
          "2548:   done = assert.async(),",
          "2549:   htmlPrefilter = jQuery.htmlPrefilter,",
          "2551:   poison = \"<script>jQuery.htmlPrefilter.assert.ok( false, 'script not executed' );</script>\";",
          "2553:  jQuery.htmlPrefilter = function( html ) {",
          "",
          "[Removed Lines]",
          "2550:   fixture = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "2550:   fixture = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2563:  expectedArgument = \"A-\" + poison + \"B-\" + poison + poison + \"C-\";",
          "2564:  fixture.html( expectedArgument );",
          "2567:  fixture.append( expectedArgument );",
          "2569:  expectedArgument = poison;",
          "",
          "[Removed Lines]",
          "2566:  expectedArgument = \"D-\" + poison + \"E-\" + \"<del/><div>\" + poison + poison + \"</div>\" + \"F-\";",
          "",
          "[Added Lines]",
          "2566:  expectedArgument = \"D-\" + poison + \"E-\" + \"<del></del><div>\" + poison + poison + \"</div>\" + \"F-\";",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2619:  var i = 0;",
          "2622:   assert.equal( index, i++, \"Index should be correct\" );",
          "2623:  } );",
          "",
          "[Removed Lines]",
          "2621:  jQuery( \"<div/><div/>\" ).before( function( index ) {",
          "",
          "[Added Lines]",
          "2621:  jQuery( \"<div></div><div></div>\" ).before( function( index ) {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2644:    thead: \"<tr><td>thead</td></tr>\",",
          "2645:    tbody: \"<tr><td>tbody</td></tr>\",",
          "2646:    tfoot: \"<tr><td>tfoot</td></tr>\",",
          "2648:    caption: \"caption\",",
          "2649:    tr: \"<td>tr</td>\",",
          "2650:    th: \"th\",",
          "",
          "[Removed Lines]",
          "2647:    colgroup: \"<col span='5' />\",",
          "",
          "[Added Lines]",
          "2647:    colgroup: \"<col span='5'></col>\",",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2665:   args.push( html );",
          "2666:  } );",
          "2669:   assert.strictEqual( this.nodeName.toLowerCase(), results[ i ] );",
          "2670:  } );",
          "2671: } );",
          "2673: QUnit.test( \"Validate creation of multiple quantities of certain elements (#13818)\", function( assert ) {",
          "2676:  var tags = [ \"thead\", \"tbody\", \"tfoot\", \"colgroup\", \"col\", \"caption\", \"tr\", \"th\", \"td\", \"optgroup\", \"option\" ];",
          "2678:  jQuery.each( tags, function( index, tag ) {",
          "2685:   } );",
          "2686:  } );",
          "2687: } );",
          "",
          "[Removed Lines]",
          "2668:  jQuery.fn.append.apply( jQuery( \"<div/>\" ), args ).children().each( function( i ) {",
          "2674:  assert.expect( 44 );",
          "2679:   jQuery( \"<\" + tag + \"/><\" + tag + \"/>\" ).each( function() {",
          "2680:    assert.ok( this.nodeName.toLowerCase() === tag, tag + \" empty elements created correctly\" );",
          "2681:   } );",
          "2683:   jQuery( \"<\" + this + \"></\" + tag + \"><\" + tag + \"></\" + tag + \">\" ).each( function() {",
          "2684:    assert.ok( this.nodeName.toLowerCase() === tag, tag + \" elements with closing tag created correctly\" );",
          "",
          "[Added Lines]",
          "2668:  jQuery.fn.append.apply( jQuery( \"<div></div>\" ), args ).children().each( function( i ) {",
          "2674:  assert.expect( 22 );",
          "2679:   jQuery( \"<\" + tag + \"></\" + tag + \"><\" + tag + \"></\" + tag + \">\" ).each( function() {",
          "2680:    assert.ok( this.nodeName.toLowerCase() === tag, tag + \" elements created correctly\" );",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2729:  table.appendChild( document.createElement( \"tbody\" ) );",
          "2730:  document.getElementById( \"qunit-fixture\" ).appendChild( table );",
          "2735:  html = table.innerHTML.toLowerCase().replace( /\\s/g, \"\" );",
          "",
          "[Removed Lines]",
          "2732:  jQuery( table ).append( \"<tfoot/>\" );",
          "",
          "[Added Lines]",
          "2728:  jQuery( table ).append( \"<tfoot></tfoot>\" );",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2769:  jQuery( table ).appendTo( \"#qunit-fixture\" );",
          "2773:  assert.strictEqual( table.find( \"td\" ).width(), 150 );",
          "2774: } );",
          "",
          "[Removed Lines]",
          "2771:  jQuery( \"<col width='150'/>\" ).prependTo( table );",
          "",
          "[Added Lines]",
          "2767:  jQuery( \"<col width='150'></col>\" ).prependTo( table );",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2783:    \"</td></tr></thead>\",",
          "2784:   newRow = \"<tr><td>added</td></tr>\",",
          "2785:   htmlExpected = htmlIn.replace( \"</thead>\", \"</thead>\" + newRow ),",
          "2788:  jQuery( table ).append( newRow );",
          "",
          "[Removed Lines]",
          "2786:   table = supportjQuery( \"<table/>\" ).html( htmlIn ).appendTo( \"#qunit-fixture\" )[ 0 ];",
          "",
          "[Added Lines]",
          "2782:   table = supportjQuery( \"<table></table>\" ).html( htmlIn ).appendTo( \"#qunit-fixture\" )[ 0 ];",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2799:  var htmlOut,",
          "2800:   htmlIn = \"<p>foo<!--<td>--></p>\",",
          "2803:  $el.html( htmlIn );",
          "",
          "[Removed Lines]",
          "2801:   $el = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "2797:   $el = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2848:  try {",
          "2849:   jQuery( \"#qunit-fixture\" ).append(",
          "2851:   assert.ok( true, \"no error thrown from embedding script with unsuccessful-response src\" );",
          "2852:  } catch ( e ) {",
          "2853:   throw e;",
          "",
          "[Removed Lines]",
          "2850:    \"<script src='\" + url( \"mock.php?action=error\" ) + \"'/>\" );",
          "",
          "[Added Lines]",
          "2846:    \"<script src='\" + url( \"mock.php?action=error\" ) + \"'></script>\" );",
          "",
          "---------------"
        ],
        "test/unit/offset.js||test/unit/offset.js": [
          "File: test/unit/offset.js -> test/unit/offset.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: }",
          "7: var supportsScroll, alwaysScrollable,",
          "9:  checkSupport = function( assert ) {",
          "",
          "[Removed Lines]",
          "8:  forceScroll = supportjQuery( \"<div/>\" ).css( { width: 2000, height: 2000 } ),",
          "",
          "[Added Lines]",
          "8:  forceScroll = supportjQuery( \"<div></div>\" ).css( { width: 2000, height: 2000 } ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: QUnit.test( \"hidden (display: none) element\", function( assert ) {",
          "76:  assert.expect( 4 );",
          "79:   result = node.offset();",
          "81:  node.remove();",
          "",
          "[Removed Lines]",
          "78:  var node = jQuery( \"<div style='display: none' />\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "78:  var node = jQuery( \"<div style='display: none'></div>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92: QUnit.test( \"0 sized element\", function( assert ) {",
          "93:  assert.expect( 4 );",
          "96:   result = node.offset();",
          "98:  node.remove();",
          "",
          "[Removed Lines]",
          "95:  var node = jQuery( \"<div style='margin: 5px; width: 0; height: 0' />\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "95:  var node = jQuery( \"<div style='margin: 5px; width: 0; height: 0'></div>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106: QUnit.test( \"hidden (visibility: hidden) element\", function( assert ) {",
          "107:  assert.expect( 4 );",
          "110:   result = node.offset();",
          "112:  node.remove();",
          "",
          "[Removed Lines]",
          "109:  var node = jQuery( \"<div style='margin: 5px; visibility: hidden' />\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "[Added Lines]",
          "109:  var node = jQuery( \"<div style='margin: 5px; visibility: hidden'></div>\" ).appendTo( \"#qunit-fixture\" ),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "736: QUnit.test( \"fractions (see #7730 and #7885)\", function( assert ) {",
          "737:  assert.expect( 2 );",
          "741:  var result,",
          "742:   expected = { \"top\": 1000, \"left\": 1000 },",
          "",
          "[Removed Lines]",
          "739:  jQuery( \"body\" ).append( \"<div id='fractions'/>\" );",
          "",
          "[Added Lines]",
          "739:  jQuery( \"body\" ).append( \"<div id='fractions'></div>\" );",
          "",
          "---------------"
        ],
        "test/unit/selector.js||test/unit/selector.js": [
          "File: test/unit/selector.js -> test/unit/selector.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:  assert.deepEqual( jQuery( \"p, div p\" ), jQuery( \"p\" ), \"Check for duplicates: p, div p\" );",
          "99:  assert.t( \"Checking sort order\", \"#qunit-fixture h2, #qunit-fixture h1\", [ \"h1\", \"h2\", \"h2-2\" ] );",
          "101:  if ( QUnit.jQuerySelectorsPos ) {",
          "",
          "[Removed Lines]",
          "98:  jQuery( \"<h1 id='h1'/><h2 id='h2'/><h2 id='h2-2'/>\" ).prependTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "98:  jQuery( \"<h1 id='h1'></h1><h2 id='h2'></h2><h2 id='h2-2'></h2>\" ).prependTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401: QUnit.test( \"comma-separated\", function( assert ) {",
          "402:  assert.expect( 4 );",
          "406:  assert.equal( fixture.find( \"h2, div p\" ).filter( \"p\" ).length, 2, \"has to find two <p>\" );",
          "407:  assert.equal( fixture.find( \"h2, div p\" ).filter( \"h2\" ).length, 1, \"has to find one <h2>\" );",
          "",
          "[Removed Lines]",
          "404:  var fixture = jQuery( \"<div><h2><span/></h2><div><p><span/></p><p/></div></div>\" );",
          "",
          "[Added Lines]",
          "404:  var fixture = jQuery( \"<div><h2><span></span></h2><div><p><span></span></p><p></p></div></div>\" );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "554:  assert.t( \"input[type=text]\", \"#form input[type=text]\", [ \"text1\", \"text2\", \"hidden2\", \"name\" ] );",
          "555:  assert.t( \"input[type=search]\", \"#form input[type=search]\", [ \"search\" ] );",
          "558:  assert.ok( withScript.find( \"#moretests script[src]\" ).has( \"script\" ), \"script[src] (jQuery #13777)\" );",
          "560:  assert.t( \"Boolean attribute equals name\", \"#select2 option[selected='selected']\", [ \"option2d\" ] );",
          "",
          "[Removed Lines]",
          "557:  withScript = supportjQuery( \"<div><span><script src=''/></span></div>\" );",
          "",
          "[Added Lines]",
          "557:  withScript = supportjQuery( \"<div><span><script src=''></script></span></div>\" );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "853: QUnit.test( \"pseudo - nth-last-child\", function( assert ) {",
          "854:  assert.expect( 30 );",
          "857:  assert.t( \"Nth-last-child\", \"form:nth-last-child(5)\", [ \"nth-last-child-form\" ] );",
          "858:  assert.t( \"Nth-last-child (with whitespace)\", \"form:nth-last-child( 5 )\", [ \"nth-last-child-form\" ] );",
          "",
          "[Removed Lines]",
          "856:  jQuery( \"#qunit-fixture\" ).append( \"<form id='nth-last-child-form'/><i/><i/><i/><i/>\" );",
          "",
          "[Added Lines]",
          "856:  jQuery( \"#qunit-fixture\" ).append( \"<form id='nth-last-child-form'></form><i></i><i></i><i></i><i></i>\" );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "970:  var select, tmp, input;",
          "974:  if ( QUnit.jQuerySelectors ) {",
          "975:   assert.t( \"Headers\", \"#qunit-fixture :header\", [ \"h1\", \"h2\", \"h2-2\" ] );",
          "",
          "[Removed Lines]",
          "972:  jQuery( \"<h1 id='h1'/><h2 id='h2'/><h2 id='h2-2'/>\" ).prependTo( \"#qunit-fixture\" );",
          "",
          "[Added Lines]",
          "972:  jQuery( \"<h1 id='h1'></h1><h2 id='h2'></h2><h2 id='h2-2'></h2>\" ).prependTo( \"#qunit-fixture\" );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1428:  assert.expect( 2 );",
          "1430:  var enabled, disabled,",
          "1432:   anchor = jQuery( \"<a href='#'>Link</a>\" );",
          "1434:  container.appendTo( \"#qunit-fixture\" );",
          "",
          "[Removed Lines]",
          "1431:   container = jQuery( \"<div/>\" ),",
          "",
          "[Added Lines]",
          "1431:   container = jQuery( \"<div></div>\" ),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1447:  var oldHash,",
          "1449:    href: \"#\",",
          "1450:    id: \"new-link\"",
          "1451:   } ).appendTo( \"#qunit-fixture\" );",
          "",
          "[Removed Lines]",
          "1448:   $link = jQuery( \"<a/>\" ).attr( {",
          "",
          "[Added Lines]",
          "1448:   $link = jQuery( \"<a></a>\" ).attr( {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1674:  var timeout,",
          "1675:   done = assert.async(),",
          "1679:  child.appendTo( container );",
          "1680:  container.appendTo( \"#qunit-fixture\" );",
          "",
          "[Removed Lines]",
          "1676:   container = jQuery( \"<div/>\" ),",
          "1677:   child = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "1676:   container = jQuery( \"<div></div>\" ),",
          "1677:   child = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1728: QUnit.test( \"disconnected nodes\", function( assert ) {",
          "1729:  assert.expect( 1 );",
          "1732:  assert.equal( $div.is( \"div\" ), true, \"Make sure .is('nodeName') works on disconnected nodes.\" );",
          "1733: } );",
          "",
          "[Removed Lines]",
          "1731:  var $div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "1731:  var $div = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1749:  \"Shadow DOM nodes supported as root\", function( assert ) {",
          "1750:  assert.expect( 2 );",
          "1753:  var shadowRoot = shadowHost.attachShadow( { mode: \"open\" } );",
          "1755:  shadowRoot.innerHTML = \"<div class='vagabond'><p></p></div>\";",
          "",
          "[Removed Lines]",
          "1752:  var shadowHost = jQuery( \"<div/>\" ).appendTo( \"#qunit-fixture\" )[ 0 ];",
          "",
          "[Added Lines]",
          "1752:  var shadowHost = jQuery( \"<div></div>\" ).appendTo( \"#qunit-fixture\" )[ 0 ];",
          "",
          "---------------"
        ],
        "test/unit/traversing.js||test/unit/traversing.js": [
          "File: test/unit/traversing.js -> test/unit/traversing.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:  assert.equal( jQuery( \"#text2\" ).index(), 2, \"Returns the index of a child amongst its siblings\" );",
          "256: } );",
          "258: QUnit.test( \"index(Object|String|undefined)\", function( assert ) {",
          "",
          "[Removed Lines]",
          "255:  assert.equal( jQuery( \"<div/>\" ).index(), -1, \"Node without parent returns -1\" );",
          "",
          "[Added Lines]",
          "255:  assert.equal( jQuery( \"<div></div>\" ).index(), -1, \"Node without parent returns -1\" );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "557:  obj = jQuery( \"#qunit-fixture\" ).has( jQuery( \"#sndp\" )[ 0 ] );",
          "558:  assert.deepEqual( obj.get(), q( \"qunit-fixture\" ), \"Keeps elements that have the element as a descendant\" );",
          "561:  assert.deepEqual( detached.has( detached.find( \"i\" )[ 0 ] ).get(), detached.get(), \"...Even when detached\" );",
          "563:  multipleParent = jQuery( \"#qunit-fixture, #header\" ).has( jQuery( \"#sndp\" )[ 0 ] );",
          "",
          "[Removed Lines]",
          "560:  detached = jQuery( \"<a><b><i/></b></a>\" );",
          "",
          "[Added Lines]",
          "560:  detached = jQuery( \"<a><b><i></i></b></a>\" );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "572:  obj = jQuery( \"#qunit-fixture\" ).has( \"#sndp\" );",
          "573:  assert.deepEqual( obj.get(), q( \"qunit-fixture\" ), \"Keeps elements that have any element matching the selector as a descendant\" );",
          "576:  assert.deepEqual( detached.has( \"i\" ).get(), detached.get(), \"...Even when detached\" );",
          "578:  multipleParent = jQuery( \"#qunit-fixture, #header\" ).has( \"#sndp\" );",
          "",
          "[Removed Lines]",
          "575:  detached = jQuery( \"<a><b><i/></b></a>\" );",
          "",
          "[Added Lines]",
          "575:  detached = jQuery( \"<a><b><i></i></b></a>\" );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "593:  simple = jQuery( \"#qunit-fixture\" ).has( jQuery( \"#sndp\" ) );",
          "594:  assert.deepEqual( simple.get(), q( \"qunit-fixture\" ), \"Keeps elements that have any element in the jQuery list as a descendant\" );",
          "597:  assert.deepEqual( detached.has( detached.find( \"i\" ) ).get(), detached.get(), \"...Even when detached\" );",
          "599:  multipleParent = jQuery( \"#qunit-fixture, #header\" ).has( jQuery( \"#sndp\" ) );",
          "",
          "[Removed Lines]",
          "596:  detached = jQuery( \"<a><b><i/></b></a>\" );",
          "",
          "[Added Lines]",
          "596:  detached = jQuery( \"<a><b><i></i></b></a>\" );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "625:  var set = q( \"sndp\", \"en\", \"sap\" );",
          "626:  assert.deepEqual( jQuery( \"#en, #sndp\" ).siblings().get(), set, \"Check for unique results from siblings\" );",
          "627:  assert.deepEqual( jQuery( \"#option5a\" ).siblings( \"option[data-attr]\" ).get(), q( \"option5c\" ), \"Has attribute selector in siblings (#9261)\" );",
          "629: } );",
          "631: QUnit[ QUnit.jQuerySelectors ? \"test\" : \"skip\" ]( \"siblings([String])\", function( assert ) {",
          "",
          "[Removed Lines]",
          "628:  assert.equal( jQuery( \"<a/>\" ).siblings().length, 0, \"Detached elements have no siblings (#11370)\" );",
          "",
          "[Added Lines]",
          "628:  assert.equal( jQuery( \"<a></a>\" ).siblings().length, 0, \"Detached elements have no siblings (#11370)\" );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "793:  assert.equal( jQuery( \"div\", ibody ).text(), \"span text\", \"Make sure the correct div is still left after deletion in IFrame\" );",
          "796:  jQuery( \"table\", ibody ).remove();",
          "797:  assert.equal( jQuery( \"div\", ibody ).length, 1, \"Check for JS error on add and delete of a table in IFrame\" );",
          "",
          "[Removed Lines]",
          "795:  jQuery( \"<table/>\", ibody ).append( \"<tr><td>cell</td></tr>\" ).appendTo( ibody );",
          "",
          "[Added Lines]",
          "795:  jQuery( \"<table></table>\", ibody ).append( \"<tr><td>cell</td></tr>\" ).appendTo( ibody );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "821:  assert.equal( contents.find( \"span\" ).text(), \"Hello, Web Component!\", \"Find span in template and check its text\" );",
          "824:    jQuery( jQuery.map( contents, function( node ) {",
          "825:      return document.importNode( node, true );",
          "826:    } ) )",
          "",
          "[Removed Lines]",
          "823:  jQuery( \"<div id='templateTest' />\" ).append(",
          "",
          "[Added Lines]",
          "823:  jQuery( \"<div id='templateTest'></div>\" ).append(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "934:   \"Check elements from document\"",
          "935:  );",
          "938:  assert.ok( divs[ 0 ].parentNode, \"Sort with the disconnected node last (started with disconnected first).\" );",
          "939: } );",
          "",
          "[Removed Lines]",
          "937:  divs = jQuery( \"<div/>\" ).add( \"#sndp\" );",
          "",
          "[Added Lines]",
          "937:  divs = jQuery( \"<div></div>\" ).add( \"#sndp\" );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "952:  assert.expect( 3 );",
          "954:  var x,",
          "957:  assert.ok( !divs[ 1 ].parentNode, \"Sort with the disconnected node last.\" );",
          "",
          "[Removed Lines]",
          "955:   divs = jQuery( \"#sndp\" ).add( \"<div/>\" );",
          "",
          "[Added Lines]",
          "955:   divs = jQuery( \"#sndp\" ).add( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "965:  assert.expect( 4 );",
          "967:  var x,",
          "970:  x = jQuery( [] )",
          "971:  .add(",
          "",
          "[Removed Lines]",
          "968:   tmp = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "968:   tmp = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "994:  assert.expect( 2 );",
          "996:  var x,",
          "999:  x = jQuery( [] ).add( jQuery( \"<p id='x1'>xxx</p>\" ).appendTo( tmp )[ 0 ] ).add( jQuery( \"<p id='x2'>xxx</p>\" ).appendTo( tmp )[ 0 ] );",
          "1000:  assert.equal( x[ 0 ].id, \"x1\", \"Check on-the-fly element1\" );",
          "",
          "[Removed Lines]",
          "997:   tmp = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "997:   tmp = jQuery( \"<div></div>\" );",
          "",
          "---------------"
        ],
        "test/unit/wrap.js||test/unit/wrap.js": [
          "File: test/unit/wrap.js -> test/unit/wrap.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:   cacheLength++;",
          "75:  }",
          "78:  assert.equal(",
          "79:   j[ 0 ] .nodeName.toUpperCase(), \"LABEL\", \"Element is a label\"",
          "80:  );",
          "",
          "[Removed Lines]",
          "77:  j = jQuery( \"<label/>\" ).wrap( val( \"<li/>\" ) );",
          "",
          "[Added Lines]",
          "77:  j = jQuery( \"<label></label>\" ).wrap( val( \"<li></li>\" ) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:  );",
          "94:  assert.equal(",
          "95:   j[ 0 ].previousSibling.nodeType, 3, \"Make sure the previous node is a text element\"",
          "96:  );",
          "",
          "[Removed Lines]",
          "93:  j = jQuery( \"<span/>\" ).wrap( \"<div>test</div>\" );",
          "",
          "[Added Lines]",
          "93:  j = jQuery( \"<span></span>\" ).wrap( \"<div>test</div>\" );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:  );",
          "116:  assert.equal(",
          "117:   j[ 0 ].parentNode.nodeName.toLowerCase(), \"div\", \"Wrapping works.\"",
          "118:  );",
          "",
          "[Removed Lines]",
          "115:  j = jQuery( \"<span/>\" ).wrap( jQuery( \"<div></div>\" ) );",
          "",
          "[Added Lines]",
          "115:  j = jQuery( \"<span></span>\" ).wrap( jQuery( \"<div></div>\" ) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:   jQuery( this ).off();",
          "129:  } );",
          "132:  assert.equal(",
          "133:   j[ 0 ].parentNode.nodeName.toLowerCase(), \"div\", \"Wrapping works.\"",
          "134:  );",
          "",
          "[Removed Lines]",
          "131:  j = jQuery( \"<span/>\" ).wrap( result );",
          "",
          "[Added Lines]",
          "131:  j = jQuery( \"<span></span>\" ).wrap( result );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "313:  assert.expect( 5 );",
          "315:  var num,",
          "318:  num = jQuery( \"#first\" ).children().length;",
          "319:  jQuery( \"#first\" ).wrapInner( document.getElementById( \"empty\" ) );",
          "",
          "[Removed Lines]",
          "316:   div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "316:   div = jQuery( \"<div></div>\" );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "376:  var num,",
          "377:     val = manipulationFunctionReturningObj,",
          "380:  num = jQuery( \"#first\" ).children().length;",
          "381:  jQuery( \"#first\" ).wrapInner( val( document.getElementById( \"empty\" ) ) );",
          "",
          "[Removed Lines]",
          "378:   div = jQuery( \"<div/>\" );",
          "",
          "[Added Lines]",
          "378:   div = jQuery( \"<div></div>\" );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65e909844c2d064606217b47e92eff12ebdb79de",
      "candidate_info": {
        "commit_hash": "65e909844c2d064606217b47e92eff12ebdb79de",
        "repo": "jquery/jquery",
        "commit_url": "https://github.com/jquery/jquery/commit/65e909844c2d064606217b47e92eff12ebdb79de",
        "files": [
          "src/data/Data.js",
          "test/unit/data.js"
        ],
        "message": "Data: Make the data object a regular object again\n\nThe change in gh-4603 made the object returned by `elem.data()`\na prototype-less object. That's a desired change to support keys\ncolliding with `Object.prototype` properties but it's also a breaking\nchange so it has to wait for jQuery 4.0.0.\n\nA 3.x-only test was added to avoid breaking it in the future on this\nbranch.\n\nFixes gh-4665\nRef gh-4603\nCloses gh-4666",
        "before_after_code_files": [
          "src/data/Data.js||src/data/Data.js",
          "test/unit/data.js||test/unit/data.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/unit/data.js||test/unit/data.js"
          ],
          "candidate": [
            "test/unit/data.js||test/unit/data.js"
          ]
        }
      },
      "candidate_diff": {
        "src/data/Data.js||src/data/Data.js": [
          "File: src/data/Data.js -> src/data/Data.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   if ( !value ) {",
          "",
          "[Removed Lines]",
          "25:    value = Object.create( null );",
          "",
          "[Added Lines]",
          "25:    value = {};",
          "",
          "---------------"
        ],
        "test/unit/data.js||test/unit/data.js": [
          "File: test/unit/data.js -> test/unit/data.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "990:  }",
          "991: } );",
          "1006: } );",
          "",
          "[Removed Lines]",
          "993: QUnit.test( \"keys matching Object.prototype properties  (gh-3256)\", function( assert ) {",
          "994:  assert.expect( 2 );",
          "996:  var div = jQuery( \"<div></div>\" );",
          "998:  assert.strictEqual( div.data( \"hasOwnProperty\" ), undefined,",
          "999:   \"hasOwnProperty not matched (before forced data creation)\" );",
          "1002:  div.data( { foo: \"bar\" } );",
          "1004:  assert.strictEqual( div.data( \"hasOwnProperty\" ), undefined,",
          "1005:   \"hasOwnProperty not matched (after forced data creation)\" );",
          "",
          "[Added Lines]",
          "993: QUnit.test( \".data() returns a regular object (jQuery <4 only, gh-4665)\", function( assert ) {",
          "994:  assert.expect( 4 );",
          "996:  function verifyRegularObject( assert, object ) {",
          "997:   assert.strictEqual( object.hasOwnProperty, Object.prototype.hasOwnProperty,",
          "998:    \"Data object has the hasOwnProperty method\" );",
          "999:   assert.strictEqual( object + \"\", \"[object Object]\",",
          "1000:    \"Data object can be stringified\" );",
          "1001:  }",
          "1003:  var elem = jQuery( \"<div></div>\" );",
          "1005:  verifyRegularObject( assert, elem.data() );",
          "1007:  elem.data( \"foo\", \"bar\" );",
          "1008:  verifyRegularObject( assert, elem.data() );",
          "",
          "---------------"
        ]
      }
    }
  ]
}