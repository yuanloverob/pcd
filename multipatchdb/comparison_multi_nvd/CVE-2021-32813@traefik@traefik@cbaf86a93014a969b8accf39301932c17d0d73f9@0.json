{
  "cve_id": "CVE-2021-32813",
  "cve_desc": "Traefik is an HTTP reverse proxy and load balancer. Prior to version 2.4.13, there exists a potential header vulnerability in Traefik's handling of the Connection header. Active exploitation of this issue is unlikely, as it requires that a removed header would lead to a privilege escalation, however, the Traefik team has addressed this issue to prevent any potential abuse. If one has a chain of Traefik middlewares, and one of them sets a request header, then sending a request with a certain Connection header will cause it to be removed before the request is sent. In this case, the backend does not see the request header. A patch is available in version 2.4.13. There are no known workarounds aside from upgrading.",
  "repo": "traefik/traefik",
  "patch_hash": "cbaf86a93014a969b8accf39301932c17d0d73f9",
  "patch_info": {
    "commit_hash": "cbaf86a93014a969b8accf39301932c17d0d73f9",
    "repo": "traefik/traefik",
    "commit_url": "https://github.com/traefik/traefik/commit/cbaf86a93014a969b8accf39301932c17d0d73f9",
    "files": [
      "pkg/middlewares/auth/forward.go",
      "pkg/middlewares/connectionheader/connectionheader.go",
      "pkg/middlewares/connectionheader/connectionheader_test.go",
      "pkg/middlewares/headers/headers.go"
    ],
    "message": "fix: remove hop-by-hop headers define in connection header.",
    "before_after_code_files": [
      "pkg/middlewares/auth/forward.go||pkg/middlewares/auth/forward.go",
      "pkg/middlewares/connectionheader/connectionheader.go||pkg/middlewares/connectionheader/connectionheader.go",
      "pkg/middlewares/connectionheader/connectionheader_test.go||pkg/middlewares/connectionheader/connectionheader_test.go",
      "pkg/middlewares/headers/headers.go||pkg/middlewares/headers/headers.go"
    ]
  },
  "patch_diff": {
    "pkg/middlewares/auth/forward.go||pkg/middlewares/auth/forward.go": [
      "File: pkg/middlewares/auth/forward.go -> pkg/middlewares/auth/forward.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:  \"github.com/traefik/traefik/v2/pkg/config/dynamic\"",
      "16:  \"github.com/traefik/traefik/v2/pkg/log\"",
      "17:  \"github.com/traefik/traefik/v2/pkg/middlewares\"",
      "18:  \"github.com/traefik/traefik/v2/pkg/tracing\"",
      "19:  \"github.com/vulcand/oxy/forward\"",
      "20:  \"github.com/vulcand/oxy/utils\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18:  \"github.com/traefik/traefik/v2/pkg/middlewares/connectionheader\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89:   fa.authResponseHeadersRegex = re",
      "90:  }",
      "93: }",
      "95: func (fa *forwardAuth) GetTracingInformation() (string, ext.SpanKindEnum) {",
      "",
      "[Removed Lines]",
      "92:  return fa, nil",
      "",
      "[Added Lines]",
      "93:  return connectionheader.Remove(fa), nil",
      "",
      "---------------"
    ],
    "pkg/middlewares/connectionheader/connectionheader.go||pkg/middlewares/connectionheader/connectionheader.go": [
      "File: pkg/middlewares/connectionheader/connectionheader.go -> pkg/middlewares/connectionheader/connectionheader.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package connectionheader",
      "3: import (",
      "4:  \"net/http\"",
      "5:  \"net/textproto\"",
      "6:  \"strings\"",
      "8:  \"golang.org/x/net/http/httpguts\"",
      "9: )",
      "13: func Remove(next http.Handler) http.HandlerFunc {",
      "14:  return func(rw http.ResponseWriter, req *http.Request) {",
      "15:   reqUpType := upgradeType(req.Header)",
      "16:   removeConnectionHeaders(req.Header)",
      "18:   if reqUpType != \"\" {",
      "19:    req.Header.Set(\"Connection\", \"Upgrade\")",
      "20:    req.Header.Set(\"Upgrade\", reqUpType)",
      "21:   } else {",
      "22:    req.Header.Del(\"Connection\")",
      "23:   }",
      "25:   next.ServeHTTP(rw, req)",
      "26:  }",
      "27: }",
      "29: func removeConnectionHeaders(h http.Header) {",
      "30:  for _, f := range h[\"Connection\"] {",
      "31:   for _, sf := range strings.Split(f, \",\") {",
      "32:    if sf = textproto.TrimString(sf); sf != \"\" {",
      "33:     h.Del(sf)",
      "34:    }",
      "35:   }",
      "36:  }",
      "37: }",
      "39: func upgradeType(h http.Header) string {",
      "40:  if !httpguts.HeaderValuesContainsToken(h[\"Connection\"], \"Upgrade\") {",
      "41:   return \"\"",
      "42:  }",
      "43:  return h.Get(\"Upgrade\")",
      "44: }",
      "",
      "---------------"
    ],
    "pkg/middlewares/connectionheader/connectionheader_test.go||pkg/middlewares/connectionheader/connectionheader_test.go": [
      "File: pkg/middlewares/connectionheader/connectionheader_test.go -> pkg/middlewares/connectionheader/connectionheader_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package connectionheader",
      "3: import (",
      "4:  \"net/http\"",
      "5:  \"net/http/httptest\"",
      "6:  \"testing\"",
      "8:  \"github.com/stretchr/testify/assert\"",
      "9: )",
      "11: func TestRemove(t *testing.T) {",
      "12:  testCases := []struct {",
      "13:   desc       string",
      "14:   reqHeaders map[string]string",
      "15:   expected   http.Header",
      "16:  }{",
      "17:   {",
      "18:    desc: \"simple remove\",",
      "19:    reqHeaders: map[string]string{",
      "20:     \"Foo\":        \"bar\",",
      "21:     \"Connection\": \"foo\",",
      "22:    },",
      "23:    expected: http.Header{},",
      "24:   },",
      "25:   {",
      "26:    desc: \"remove and Upgrade\",",
      "27:    reqHeaders: map[string]string{",
      "28:     \"Upgrade\":    \"test\",",
      "29:     \"Foo\":        \"bar\",",
      "30:     \"Connection\": \"Upgrade,foo\",",
      "31:    },",
      "32:    expected: http.Header{",
      "33:     \"Upgrade\":    []string{\"test\"},",
      "34:     \"Connection\": []string{\"Upgrade\"},",
      "35:    },",
      "36:   },",
      "37:   {",
      "38:    desc: \"no remove\",",
      "39:    reqHeaders: map[string]string{",
      "40:     \"Foo\":        \"bar\",",
      "41:     \"Connection\": \"fii\",",
      "42:    },",
      "43:    expected: http.Header{",
      "44:     \"Foo\": []string{\"bar\"},",
      "45:    },",
      "46:   },",
      "47:  }",
      "49:  for _, test := range testCases {",
      "50:   test := test",
      "51:   t.Run(test.desc, func(t *testing.T) {",
      "52:    t.Parallel()",
      "54:    next := http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {})",
      "56:    h := Remove(next)",
      "58:    req := httptest.NewRequest(http.MethodGet, \"https://localhost\", nil)",
      "60:    for k, v := range test.reqHeaders {",
      "61:     req.Header.Set(k, v)",
      "62:    }",
      "64:    rw := httptest.NewRecorder()",
      "66:    h.ServeHTTP(rw, req)",
      "68:    assert.Equal(t, test.expected, req.Header)",
      "69:   })",
      "70:  }",
      "71: }",
      "",
      "---------------"
    ],
    "pkg/middlewares/headers/headers.go||pkg/middlewares/headers/headers.go": [
      "File: pkg/middlewares/headers/headers.go -> pkg/middlewares/headers/headers.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:  \"github.com/traefik/traefik/v2/pkg/config/dynamic\"",
      "11:  \"github.com/traefik/traefik/v2/pkg/log\"",
      "12:  \"github.com/traefik/traefik/v2/pkg/middlewares\"",
      "13:  \"github.com/traefik/traefik/v2/pkg/tracing\"",
      "14: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13:  \"github.com/traefik/traefik/v2/pkg/middlewares/connectionheader\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:  if hasCustomHeaders || hasCorsHeaders {",
      "60:   logger.Debugf(\"Setting up customHeaders/Cors from %v\", cfg)",
      "63:   if err != nil {",
      "64:    return nil, err",
      "65:   }",
      "66:  }",
      "68:  return &headers{",
      "",
      "[Removed Lines]",
      "61:   var err error",
      "62:   handler, err = NewHeader(nextHandler, cfg)",
      "",
      "[Added Lines]",
      "62:   h, err := NewHeader(nextHandler, cfg)",
      "67:   handler = connectionheader.Remove(h)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b386964abcd3322e9e975a63c8c8e774b9edadcf",
      "candidate_info": {
        "commit_hash": "b386964abcd3322e9e975a63c8c8e774b9edadcf",
        "repo": "traefik/traefik",
        "commit_url": "https://github.com/traefik/traefik/commit/b386964abcd3322e9e975a63c8c8e774b9edadcf",
        "files": [
          "pkg/middlewares/auth/forward.go",
          "pkg/middlewares/connectionheader/connectionheader.go",
          "pkg/middlewares/connectionheader/connectionheader_test.go",
          "pkg/middlewares/headers/headers.go"
        ],
        "message": "fix: remove hop-by-hop headers define in connection header beore some middleware\n\nCo-authored-by: Julien Salleyron <julien.salleyron@gmail.com>",
        "before_after_code_files": [
          "pkg/middlewares/auth/forward.go||pkg/middlewares/auth/forward.go",
          "pkg/middlewares/connectionheader/connectionheader.go||pkg/middlewares/connectionheader/connectionheader.go",
          "pkg/middlewares/connectionheader/connectionheader_test.go||pkg/middlewares/connectionheader/connectionheader_test.go",
          "pkg/middlewares/headers/headers.go||pkg/middlewares/headers/headers.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/traefik/traefik/pull/8319"
        ],
        "olp_code_files": {
          "patch": [
            "pkg/middlewares/auth/forward.go||pkg/middlewares/auth/forward.go",
            "pkg/middlewares/connectionheader/connectionheader.go||pkg/middlewares/connectionheader/connectionheader.go",
            "pkg/middlewares/connectionheader/connectionheader_test.go||pkg/middlewares/connectionheader/connectionheader_test.go",
            "pkg/middlewares/headers/headers.go||pkg/middlewares/headers/headers.go"
          ],
          "candidate": [
            "pkg/middlewares/auth/forward.go||pkg/middlewares/auth/forward.go",
            "pkg/middlewares/connectionheader/connectionheader.go||pkg/middlewares/connectionheader/connectionheader.go",
            "pkg/middlewares/connectionheader/connectionheader_test.go||pkg/middlewares/connectionheader/connectionheader_test.go",
            "pkg/middlewares/headers/headers.go||pkg/middlewares/headers/headers.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/middlewares/auth/forward.go||pkg/middlewares/auth/forward.go": [
          "File: pkg/middlewares/auth/forward.go -> pkg/middlewares/auth/forward.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  \"github.com/traefik/traefik/v2/pkg/config/dynamic\"",
          "16:  \"github.com/traefik/traefik/v2/pkg/log\"",
          "17:  \"github.com/traefik/traefik/v2/pkg/middlewares\"",
          "18:  \"github.com/traefik/traefik/v2/pkg/tracing\"",
          "19:  \"github.com/vulcand/oxy/forward\"",
          "20:  \"github.com/vulcand/oxy/utils\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  \"github.com/traefik/traefik/v2/pkg/middlewares/connectionheader\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:   fa.authResponseHeadersRegex = re",
          "90:  }",
          "93: }",
          "95: func (fa *forwardAuth) GetTracingInformation() (string, ext.SpanKindEnum) {",
          "",
          "[Removed Lines]",
          "92:  return fa, nil",
          "",
          "[Added Lines]",
          "93:  return connectionheader.Remover(fa), nil",
          "",
          "---------------"
        ],
        "pkg/middlewares/connectionheader/connectionheader.go||pkg/middlewares/connectionheader/connectionheader.go": [
          "File: pkg/middlewares/connectionheader/connectionheader.go -> pkg/middlewares/connectionheader/connectionheader.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package connectionheader",
          "3: import (",
          "4:  \"net/http\"",
          "5:  \"net/textproto\"",
          "6:  \"strings\"",
          "8:  \"golang.org/x/net/http/httpguts\"",
          "9: )",
          "11: const (",
          "12:  connectionHeader = \"Connection\"",
          "13:  upgradeHeader    = \"Upgrade\"",
          "14: )",
          "18: func Remover(next http.Handler) http.HandlerFunc {",
          "19:  return func(rw http.ResponseWriter, req *http.Request) {",
          "20:   var reqUpType string",
          "21:   if httpguts.HeaderValuesContainsToken(req.Header[connectionHeader], upgradeHeader) {",
          "22:    reqUpType = req.Header.Get(upgradeHeader)",
          "23:   }",
          "25:   removeConnectionHeaders(req.Header)",
          "27:   if reqUpType != \"\" {",
          "28:    req.Header.Set(connectionHeader, upgradeHeader)",
          "29:    req.Header.Set(upgradeHeader, reqUpType)",
          "30:   } else {",
          "31:    req.Header.Del(connectionHeader)",
          "32:   }",
          "34:   next.ServeHTTP(rw, req)",
          "35:  }",
          "36: }",
          "38: func removeConnectionHeaders(h http.Header) {",
          "39:  for _, f := range h[connectionHeader] {",
          "40:   for _, sf := range strings.Split(f, \",\") {",
          "41:    if sf = textproto.TrimString(sf); sf != \"\" {",
          "42:     h.Del(sf)",
          "43:    }",
          "44:   }",
          "45:  }",
          "46: }",
          "",
          "---------------"
        ],
        "pkg/middlewares/connectionheader/connectionheader_test.go||pkg/middlewares/connectionheader/connectionheader_test.go": [
          "File: pkg/middlewares/connectionheader/connectionheader_test.go -> pkg/middlewares/connectionheader/connectionheader_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package connectionheader",
          "3: import (",
          "4:  \"net/http\"",
          "5:  \"net/http/httptest\"",
          "6:  \"testing\"",
          "8:  \"github.com/stretchr/testify/assert\"",
          "9: )",
          "11: func TestRemover(t *testing.T) {",
          "12:  testCases := []struct {",
          "13:   desc       string",
          "14:   reqHeaders map[string]string",
          "15:   expected   http.Header",
          "16:  }{",
          "17:   {",
          "18:    desc: \"simple remove\",",
          "19:    reqHeaders: map[string]string{",
          "20:     \"Foo\":            \"bar\",",
          "21:     connectionHeader: \"foo\",",
          "22:    },",
          "23:    expected: http.Header{},",
          "24:   },",
          "25:   {",
          "26:    desc: \"remove and Upgrade\",",
          "27:    reqHeaders: map[string]string{",
          "28:     upgradeHeader:    \"test\",",
          "29:     \"Foo\":            \"bar\",",
          "30:     connectionHeader: \"Upgrade,foo\",",
          "31:    },",
          "32:    expected: http.Header{",
          "33:     upgradeHeader:    []string{\"test\"},",
          "34:     connectionHeader: []string{\"Upgrade\"},",
          "35:    },",
          "36:   },",
          "37:   {",
          "38:    desc: \"no remove\",",
          "39:    reqHeaders: map[string]string{",
          "40:     \"Foo\":            \"bar\",",
          "41:     connectionHeader: \"fii\",",
          "42:    },",
          "43:    expected: http.Header{",
          "44:     \"Foo\": []string{\"bar\"},",
          "45:    },",
          "46:   },",
          "47:  }",
          "49:  for _, test := range testCases {",
          "50:   test := test",
          "51:   t.Run(test.desc, func(t *testing.T) {",
          "52:    t.Parallel()",
          "54:    next := http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {})",
          "56:    h := Remover(next)",
          "58:    req := httptest.NewRequest(http.MethodGet, \"https://localhost\", nil)",
          "60:    for k, v := range test.reqHeaders {",
          "61:     req.Header.Set(k, v)",
          "62:    }",
          "64:    rw := httptest.NewRecorder()",
          "66:    h.ServeHTTP(rw, req)",
          "68:    assert.Equal(t, test.expected, req.Header)",
          "69:   })",
          "70:  }",
          "71: }",
          "",
          "---------------"
        ],
        "pkg/middlewares/headers/headers.go||pkg/middlewares/headers/headers.go": [
          "File: pkg/middlewares/headers/headers.go -> pkg/middlewares/headers/headers.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  \"github.com/traefik/traefik/v2/pkg/config/dynamic\"",
          "11:  \"github.com/traefik/traefik/v2/pkg/log\"",
          "12:  \"github.com/traefik/traefik/v2/pkg/middlewares\"",
          "13:  \"github.com/traefik/traefik/v2/pkg/tracing\"",
          "14: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:  \"github.com/traefik/traefik/v2/pkg/middlewares/connectionheader\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:  if hasCustomHeaders || hasCorsHeaders {",
          "60:   logger.Debugf(\"Setting up customHeaders/Cors from %v\", cfg)",
          "63:   if err != nil {",
          "64:    return nil, err",
          "65:   }",
          "66:  }",
          "68:  return &headers{",
          "",
          "[Removed Lines]",
          "61:   var err error",
          "62:   handler, err = NewHeader(nextHandler, cfg)",
          "",
          "[Added Lines]",
          "62:   h, err := NewHeader(nextHandler, cfg)",
          "67:   handler = connectionheader.Remover(h)",
          "",
          "---------------"
        ]
      }
    }
  ]
}