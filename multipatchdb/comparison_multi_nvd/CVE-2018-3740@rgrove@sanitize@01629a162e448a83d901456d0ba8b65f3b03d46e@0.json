{
  "cve_id": "CVE-2018-3740",
  "cve_desc": "A specially crafted HTML fragment can cause Sanitize gem for Ruby to allow non-whitelisted attributes to be used on a whitelisted HTML element.",
  "repo": "rgrove/sanitize",
  "patch_hash": "01629a162e448a83d901456d0ba8b65f3b03d46e",
  "patch_info": {
    "commit_hash": "01629a162e448a83d901456d0ba8b65f3b03d46e",
    "repo": "rgrove/sanitize",
    "commit_url": "https://github.com/rgrove/sanitize/commit/01629a162e448a83d901456d0ba8b65f3b03d46e",
    "files": [
      "lib/sanitize/transformers/clean_element.rb",
      "test/test_clean_element.rb",
      "test/test_malicious_html.rb"
    ],
    "message": "fix: Prevent code injection due to improper escaping in libxml2 >= 2.9.2\n\nWhen Sanitize <= 4.6.2 is used in combination with libxml2 >= 2.9.2, a\nspecially crafted HTML fragment can cause libxml2 to generate improperly\nescaped output, allowing non-whitelisted attributes to be used on\nwhitelisted elements.\n\nSanitize now performs additional escaping on affected attributes to\nprevent this.\n\nMany thanks to the Shopify Application Security Team for responsibly\nreporting this issue.\n\nFixes #176",
    "before_after_code_files": [
      "lib/sanitize/transformers/clean_element.rb||lib/sanitize/transformers/clean_element.rb",
      "test/test_clean_element.rb||test/test_clean_element.rb",
      "test/test_malicious_html.rb||test/test_malicious_html.rb"
    ]
  },
  "patch_diff": {
    "lib/sanitize/transformers/clean_element.rb||lib/sanitize/transformers/clean_element.rb": [
      "File: lib/sanitize/transformers/clean_element.rb -> lib/sanitize/transformers/clean_element.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "18:   # http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#embedding-custom-non-visible-data-with-the-data-*-attributes",
      "19:   REGEX_DATA_ATTR = /\\Adata-(?!xml)[a-z_][\\w.\\u00E0-\\u00F6\\u00F8-\\u017F\\u01DD-\\u02AF-]*\\z/u",
      "21:   def initialize(config)",
      "22:     @add_attributes          = config[:add_attributes]",
      "23:     @attributes              = config[:attributes].dup",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21:   # Attributes that need additional escaping on `<a>` elements due to unsafe",
      "22:   # libxml2 behavior.",
      "23:   UNSAFE_LIBXML_ATTRS_A = Set.new(%w[",
      "24:     name",
      "25:   ])",
      "27:   # Attributes that need additional escaping on all elements due to unsafe",
      "28:   # libxml2 behavior.",
      "29:   UNSAFE_LIBXML_ATTRS_GLOBAL = Set.new(%w[",
      "30:     action",
      "31:     href",
      "32:     src",
      "33:   ])",
      "35:   # Mapping of original characters to escape sequences for characters that",
      "36:   # should be escaped in attributes affected by unsafe libxml2 behavior.",
      "37:   UNSAFE_LIBXML_ESCAPE_CHARS = {",
      "38:     ' ' => '%20',",
      "39:     '\"' => '%22'",
      "40:   }",
      "42:   # Regex that matches any single character that needs to be escaped in",
      "43:   # attributes affected by unsafe libxml2 behavior.",
      "44:   UNSAFE_LIBXML_ESCAPE_REGEX = /[ \"]/",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "92:       node.attribute_nodes.each do |attr|",
      "93:         attr_name = attr.name.downcase",
      "106:             end",
      "115:           else",
      "119:           end",
      "120:         end",
      "121:       end",
      "122:     end",
      "",
      "[Removed Lines]",
      "95:         if attr_whitelist.include?(attr_name)",
      "96:           # The attribute is whitelisted.",
      "98:           # Remove any attributes that use unacceptable protocols.",
      "99:           if @protocols.include?(name) && @protocols[name].include?(attr_name)",
      "100:             attr_protocols = @protocols[name][attr_name]",
      "102:             if attr.value =~ REGEX_PROTOCOL",
      "103:               attr.unlink unless attr_protocols.include?($1.downcase)",
      "104:             else",
      "105:               attr.unlink unless attr_protocols.include?(:relative)",
      "107:           end",
      "108:         else",
      "109:           # The attribute isn't whitelisted.",
      "111:           if allow_data_attributes && attr_name.start_with?('data-')",
      "112:             # Arbitrary data attributes are allowed. Verify that the attribute",
      "113:             # is a valid data attribute.",
      "114:             attr.unlink unless attr_name =~ REGEX_DATA_ATTR",
      "116:             # Either the attribute isn't a data attribute, or arbitrary data",
      "117:             # attributes aren't allowed. Remove the attribute.",
      "118:             attr.unlink",
      "",
      "[Added Lines]",
      "120:         unless attr_whitelist.include?(attr_name)",
      "121:           # The attribute isn't whitelisted.",
      "123:           if allow_data_attributes && attr_name.start_with?('data-')",
      "124:             # Arbitrary data attributes are allowed. If this is a data",
      "125:             # attribute, continue.",
      "126:             next if attr_name =~ REGEX_DATA_ATTR",
      "127:           end",
      "129:           # Either the attribute isn't a data attribute or arbitrary data",
      "130:           # attributes aren't allowed. Remove the attribute.",
      "131:           attr.unlink",
      "132:           next",
      "133:         end",
      "135:         # The attribute is whitelisted.",
      "137:         # Remove any attributes that use unacceptable protocols.",
      "138:         if @protocols.include?(name) && @protocols[name].include?(attr_name)",
      "139:           attr_protocols = @protocols[name][attr_name]",
      "141:           if attr.value =~ REGEX_PROTOCOL",
      "142:             unless attr_protocols.include?($1.downcase)",
      "143:               attr.unlink",
      "144:               next",
      "148:             unless attr_protocols.include?(:relative)",
      "149:               attr.unlink",
      "150:               next",
      "151:             end",
      "154:           # Leading and trailing whitespace around URLs is ignored at parse",
      "155:           # time. Stripping it here prevents it from being escaped by the",
      "156:           # libxml2 workaround below.",
      "157:           attr.value = attr.value.strip",
      "158:         end",
      "160:         # libxml2 >= 2.9.2 doesn't escape comments within some attributes, in an",
      "161:         # attempt to preserve server-side includes. This can result in XSS since",
      "162:         # an unescaped double quote can allow an attacker to inject a",
      "163:         # non-whitelisted attribute.",
      "164:         #",
      "165:         # Sanitize works around this by implementing its own escaping for",
      "166:         # affected attributes, some of which can exist on any element and some",
      "167:         # of which can only exist on `<a>` elements.",
      "168:         #",
      "169:         # The relevant libxml2 code is here:",
      "170:         # <https://github.com/GNOME/libxml2/commit/960f0e275616cadc29671a218d7fb9b69eb35588>",
      "171:         if UNSAFE_LIBXML_ATTRS_GLOBAL.include?(attr_name) ||",
      "172:             (name == 'a' && UNSAFE_LIBXML_ATTRS_A.include?(attr_name))",
      "174:           attr.value = attr.value.gsub(UNSAFE_LIBXML_ESCAPE_REGEX, UNSAFE_LIBXML_ESCAPE_CHARS)",
      "",
      "---------------"
    ],
    "test/test_clean_element.rb||test/test_clean_element.rb": [
      "File: test/test_clean_element.rb -> test/test_clean_element.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "235:     it 'should not choke on valueless attributes' do",
      "236:       @s.fragment('foo <a href>foo</a> bar')",
      "238:     end",
      "240:     it 'should downcase attribute names' do",
      "",
      "[Removed Lines]",
      "237:         .must_equal 'foo <a href=\"\" rel=\"nofollow\">foo</a> bar'",
      "",
      "[Added Lines]",
      "237:         .must_equal 'foo <a href rel=\"nofollow\">foo</a> bar'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "300:       }).must_equal input",
      "301:     end",
      "303:     it 'should allow relative URLs containing colons when the colon is not in the first path segment' do",
      "304:       input = '<a href=\"/wiki/Special:Random\">Random Page</a>'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "303:     it \"should not allow relative URLs when relative URLs aren't whitelisted\" do",
      "304:       input = '<a href=\"/foo/bar\">Link</a>'",
      "306:       Sanitize.fragment(input,",
      "307:         :elements   => ['a'],",
      "308:         :attributes => {'a' => ['href']},",
      "309:         :protocols  => {'a' => {'href' => ['http']}}",
      "310:       ).must_equal '<a>Link</a>'",
      "311:     end",
      "",
      "---------------"
    ],
    "test/test_malicious_html.rb||test/test_malicious_html.rb": [
      "File: test/test_malicious_html.rb -> test/test_malicious_html.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "125:         must_equal '&lt;alert(\"XSS\");//&lt;'",
      "126:     end",
      "127:   end",
      "128: end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:   # libxml2 >= 2.9.2 doesn't escape comments within some attributes, in an",
      "130:   # attempt to preserve server-side includes. This can result in XSS since an",
      "131:   # unescaped double quote can allow an attacker to inject a non-whitelisted",
      "132:   # attribute. Sanitize works around this by implementing its own escaping for",
      "133:   # affected attributes.",
      "134:   #",
      "135:   # The relevant libxml2 code is here:",
      "136:   # <https://github.com/GNOME/libxml2/commit/960f0e275616cadc29671a218d7fb9b69eb35588>",
      "137:   describe 'unsafe libxml2 server-side includes in attributes' do",
      "138:     tag_configs = [",
      "139:       {",
      "140:         tag_name: 'a',",
      "141:         escaped_attrs: %w[ action href src name ],",
      "142:         unescaped_attrs: []",
      "143:       },",
      "145:       {",
      "146:         tag_name: 'div',",
      "147:         escaped_attrs: %w[ action href src ],",
      "148:         unescaped_attrs: %w[ name ]",
      "149:       }",
      "150:     ]",
      "152:     before do",
      "153:       @s = Sanitize.new({",
      "154:         elements: %w[ a div ],",
      "156:         attributes: {",
      "157:           all: %w[ action href src name ]",
      "158:         }",
      "159:       })",
      "160:     end",
      "162:     tag_configs.each do |tag_config|",
      "163:       tag_name = tag_config[:tag_name]",
      "165:       tag_config[:escaped_attrs].each do |attr_name|",
      "166:         input = %[<#{tag_name} #{attr_name}='examp<!--\" onmouseover=alert(1)>-->le.com'>foo</#{tag_name}>]",
      "168:         it 'should escape unsafe characters in attributes' do",
      "169:           @s.fragment(input).must_equal(%[<#{tag_name} #{attr_name}=\"examp<!--%22%20onmouseover=alert(1)>-->le.com\">foo</#{tag_name}>])",
      "170:         end",
      "172:         it 'should round-trip to the same output' do",
      "173:           output = @s.fragment(input)",
      "174:           @s.fragment(output).must_equal(output)",
      "175:         end",
      "176:       end",
      "178:       tag_config[:unescaped_attrs].each do |attr_name|",
      "179:         input = %[<#{tag_name} #{attr_name}='examp<!--\" onmouseover=alert(1)>-->le.com'>foo</#{tag_name}>]",
      "181:         it 'should not escape characters unnecessarily' do",
      "182:           @s.fragment(input).must_equal(input)",
      "183:         end",
      "185:         it 'should round-trip to the same output' do",
      "186:           output = @s.fragment(input)",
      "187:           @s.fragment(output).must_equal(output)",
      "188:         end",
      "189:       end",
      "190:     end",
      "191:   end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7c3fdb63882c8713350d5b29dba148854d7c0d7f",
      "candidate_info": {
        "commit_hash": "7c3fdb63882c8713350d5b29dba148854d7c0d7f",
        "repo": "rgrove/sanitize",
        "commit_url": "https://github.com/rgrove/sanitize/commit/7c3fdb63882c8713350d5b29dba148854d7c0d7f",
        "files": [
          "lib/sanitize/transformers/clean_element.rb",
          "test/test_malicious_html.rb"
        ],
        "message": "fix: Update tests to allow new Nokogumbo attribute quoting behavior",
        "before_after_code_files": [
          "lib/sanitize/transformers/clean_element.rb||lib/sanitize/transformers/clean_element.rb",
          "test/test_malicious_html.rb||test/test_malicious_html.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/sanitize/transformers/clean_element.rb||lib/sanitize/transformers/clean_element.rb",
            "test/test_malicious_html.rb||test/test_malicious_html.rb"
          ],
          "candidate": [
            "lib/sanitize/transformers/clean_element.rb||lib/sanitize/transformers/clean_element.rb",
            "test/test_malicious_html.rb||test/test_malicious_html.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/sanitize/transformers/clean_element.rb||lib/sanitize/transformers/clean_element.rb": [
          "File: lib/sanitize/transformers/clean_element.rb -> lib/sanitize/transformers/clean_element.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:         # affected attributes, some of which can exist on any element and some",
          "169:         # of which can only exist on `<a>` elements.",
          "170:         #",
          "171:         # The relevant libxml2 code is here:",
          "172:         # <https://github.com/GNOME/libxml2/commit/960f0e275616cadc29671a218d7fb9b69eb35588>",
          "173:         if UNSAFE_LIBXML_ATTRS_GLOBAL.include?(attr_name) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:         # This fix is technically no longer necessary with Nokogumbo >= 2.0",
          "172:         # since it no longer uses libxml2's serializer, but it's retained to",
          "173:         # avoid breaking use cases where people might be sanitizing individual",
          "174:         # Nokogiri nodes and then serializing them manually without Nokogumbo.",
          "175:         #",
          "",
          "---------------"
        ],
        "test/test_malicious_html.rb||test/test_malicious_html.rb": [
          "File: test/test_malicious_html.rb -> test/test_malicious_html.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:         input = %[<#{tag_name} #{attr_name}='examp<!--\" onmouseover=alert(1)>-->le.com'>foo</#{tag_name}>]",
          "168:         it 'should escape unsafe characters in attributes' do",
          "170:         end",
          "172:         it 'should round-trip to the same output' do",
          "",
          "[Removed Lines]",
          "169:           @s.fragment(input).must_equal(%[<#{tag_name} #{attr_name}=\"examp<!--%22%20onmouseover=alert(1)>-->le.com\">foo</#{tag_name}>])",
          "",
          "[Added Lines]",
          "169:           output = %[<#{tag_name} #{attr_name}=\"examp<!--%22%20onmouseover=alert(1)>-->le.com\">foo</#{tag_name}>]",
          "170:           @s.fragment(input).must_equal(output)",
          "172:           fragment = Nokogiri::HTML.fragment(input)",
          "173:           @s.node!(fragment)",
          "174:           fragment.to_html.must_equal(output)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:         input = %[<#{tag_name} #{attr_name}='examp<!--\" onmouseover=alert(1)>-->le.com'>foo</#{tag_name}>]",
          "181:         it 'should not escape characters unnecessarily' do",
          "183:         end",
          "185:         it 'should round-trip to the same output' do",
          "",
          "[Removed Lines]",
          "182:           @s.fragment(input).must_equal(input)",
          "",
          "[Added Lines]",
          "187:           @s.fragment(input).must_equal(%[<#{tag_name} #{attr_name}=\"examp<!--&quot; onmouseover=alert(1)>-->le.com\">foo</#{tag_name}>])",
          "189:           fragment = Nokogiri::HTML.fragment(input)",
          "190:           @s.node!(fragment)",
          "191:           fragment.to_html.must_equal(%[<#{tag_name} #{attr_name}='examp<!--\" onmouseover=alert(1)>-->le.com'>foo</#{tag_name}>])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3dab489b255526ff4f940f39fd476a1c80877d1",
      "candidate_info": {
        "commit_hash": "e3dab489b255526ff4f940f39fd476a1c80877d1",
        "repo": "rgrove/sanitize",
        "commit_url": "https://github.com/rgrove/sanitize/commit/e3dab489b255526ff4f940f39fd476a1c80877d1",
        "files": [
          "lib/sanitize.rb",
          "sanitize.gemspec",
          "test/test_clean_css.rb",
          "test/test_clean_doctype.rb",
          "test/test_clean_element.rb",
          "test/test_malicious_html.rb",
          "test/test_parser.rb",
          "test/test_sanitize.rb",
          "test/test_unicode.rb"
        ],
        "message": "Update to Nokogumbo 2.0",
        "before_after_code_files": [
          "lib/sanitize.rb||lib/sanitize.rb",
          "sanitize.gemspec||sanitize.gemspec",
          "test/test_clean_css.rb||test/test_clean_css.rb",
          "test/test_clean_doctype.rb||test/test_clean_doctype.rb",
          "test/test_clean_element.rb||test/test_clean_element.rb",
          "test/test_malicious_html.rb||test/test_malicious_html.rb",
          "test/test_parser.rb||test/test_parser.rb",
          "test/test_sanitize.rb||test/test_sanitize.rb",
          "test/test_unicode.rb||test/test_unicode.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/test_clean_element.rb||test/test_clean_element.rb",
            "test/test_malicious_html.rb||test/test_malicious_html.rb"
          ],
          "candidate": [
            "test/test_clean_element.rb||test/test_clean_element.rb",
            "test/test_malicious_html.rb||test/test_malicious_html.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/sanitize.rb||lib/sanitize.rb": [
          "File: lib/sanitize.rb -> lib/sanitize.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     return '' unless html",
          "123:     html = preprocess(html)",
          "137:     node!(frag)",
          "138:     to_html(frag)",
          "139:   end",
          "",
          "[Removed Lines]",
          "124:     doc  = Nokogiri::HTML5.parse(\"<html><body>#{html}\")",
          "126:     # Hack to allow fragments containing <body>. Borrowed from",
          "127:     # Nokogiri::HTML::DocumentFragment.",
          "128:     if html =~ /\\A<body(?:\\s|>)/i",
          "129:       path = '/html/body'",
          "130:     else",
          "131:       path = '/html/body/node()'",
          "132:     end",
          "134:     frag = doc.fragment",
          "135:     frag << doc.xpath(path)",
          "",
          "[Added Lines]",
          "124:     frag  = Nokogiri::HTML5.fragment(html)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:   end",
          "186:   def to_html(node)",
          "218:   end",
          "220:   def transform_node!(node, node_whitelist)",
          "",
          "[Removed Lines]",
          "187:     replace_meta = false",
          "189:     # Hacky workaround for a libxml2 bug that adds an undesired Content-Type",
          "190:     # meta tag to all serialized HTML documents.",
          "191:     #",
          "192:     # https://github.com/sparklemotion/nokogiri/issues/1008",
          "193:     if node.type == Nokogiri::XML::Node::DOCUMENT_NODE ||",
          "194:         node.type == Nokogiri::XML::Node::HTML_DOCUMENT_NODE",
          "196:       regex_meta   = %r|(<html[^>]*>\\s*<head[^>]*>\\s*)<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">|i",
          "198:       # Only replace the content-type meta tag if <meta> isn't whitelisted or",
          "199:       # the original document didn't actually include a content-type meta tag.",
          "200:       replace_meta = !@config[:elements].include?('meta') ||",
          "201:         node.xpath('/html/head/meta[@http-equiv]').none? do |meta|",
          "202:           meta['http-equiv'].casecmp('content-type').zero?",
          "203:         end",
          "204:     end",
          "206:     so = Nokogiri::XML::Node::SaveOptions",
          "208:     # Serialize to HTML without any formatting to prevent Nokogiri from adding",
          "209:     # newlines after certain tags.",
          "210:     html = node.to_html(",
          "211:       :encoding  => 'utf-8',",
          "212:       :indent    => 0,",
          "213:       :save_with => so::NO_DECLARATION | so::NO_EMPTY_TAGS | so::AS_HTML",
          "214:     )",
          "216:     html.gsub!(regex_meta, '\\1') if replace_meta",
          "217:     html",
          "",
          "[Added Lines]",
          "175:     node.to_html(preserve_newline: true)",
          "",
          "---------------"
        ],
        "sanitize.gemspec||sanitize.gemspec": [
          "File: sanitize.gemspec -> sanitize.gemspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   # Runtime dependencies.",
          "20:   s.add_dependency('crass', '~> 1.0.2')",
          "21:   s.add_dependency('nokogiri', '>= 1.4.4')",
          "24:   # Development dependencies.",
          "25:   s.add_development_dependency('minitest', '~> 5.10.2')",
          "",
          "[Removed Lines]",
          "22:   s.add_dependency('nokogumbo', '~> 1.4')",
          "",
          "[Added Lines]",
          "22:   s.add_dependency('nokogumbo', '~> 2.0')",
          "",
          "---------------"
        ],
        "test/test_clean_css.rb||test/test_clean_css.rb": [
          "File: test/test_clean_css.rb -> test/test_clean_css.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     @s.fragment(%[",
          "14:       <div style=\"color: #fff; width: expression(alert(1)); /* <-- evil! */\"></div>",
          "15:     ].strip).must_equal %[",
          "17:     ].strip",
          "18:   end",
          "",
          "[Removed Lines]",
          "16:       <div style=\"color: #fff;  /* &lt;-- evil! */\"></div>",
          "",
          "[Added Lines]",
          "16:       <div style=\"color: #fff;  /* <-- evil! */\"></div>",
          "",
          "---------------"
        ],
        "test/test_clean_doctype.rb||test/test_clean_doctype.rb": [
          "File: test/test_clean_doctype.rb -> test/test_clean_doctype.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     end",
          "13:     it 'should remove doctype declarations' do",
          "15:       @s.fragment('<!DOCTYPE html>foo').must_equal 'foo'",
          "16:     end",
          "",
          "[Removed Lines]",
          "14:       @s.document('<!DOCTYPE html><html>foo</html>').must_equal \"<html>foo</html>\\n\"",
          "",
          "[Added Lines]",
          "14:       @s.document('<!DOCTYPE html><html>foo</html>').must_equal \"<html>foo</html>\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     it 'should allow doctype declarations in documents' do",
          "36:       @s.document('<!DOCTYPE html><html>foo</html>')",
          "39:       @s.document('<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"><html>foo</html>')",
          "42:       @s.document(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\"\\n    \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\"><html>foo</html>\")",
          "44:     end",
          "46:     it 'should not allow obviously invalid doctype declarations in documents' do",
          "47:       @s.document('<!DOCTYPE blah blah blah><html>foo</html>')",
          "50:       @s.document('<!DOCTYPE blah><html>foo</html>')",
          "53:       @s.document('<!DOCTYPE html BLAH \"-//W3C//DTD HTML 4.01//EN\"><html>foo</html>')",
          "56:       @s.document('<!whatever><html>foo</html>')",
          "58:     end",
          "60:     it 'should not allow doctype definitions in fragments' do",
          "",
          "[Removed Lines]",
          "37:         .must_equal \"<!DOCTYPE html>\\n<html>foo</html>\\n\"",
          "40:         .must_equal \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\">\\n<html>foo</html>\\n\"",
          "43:         .must_equal \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\\n<html>foo</html>\\n\"",
          "48:         .must_equal \"<!DOCTYPE html>\\n<html>foo</html>\\n\"",
          "51:         .must_equal \"<!DOCTYPE html>\\n<html>foo</html>\\n\"",
          "54:         .must_equal \"<!DOCTYPE html>\\n<html>foo</html>\\n\"",
          "57:         .must_equal \"<html>foo</html>\\n\"",
          "",
          "[Added Lines]",
          "37:         .must_equal \"<!DOCTYPE html><html>foo</html>\"",
          "40:         .must_equal \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\"><html>foo</html>\"",
          "43:         .must_equal \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\"><html>foo</html>\"",
          "48:         .must_equal \"<!DOCTYPE html><html>foo</html>\"",
          "51:         .must_equal \"<!DOCTYPE html><html>foo</html>\"",
          "54:         .must_equal \"<!DOCTYPE html><html>foo</html>\"",
          "57:         .must_equal \"<html>foo</html>\"",
          "",
          "---------------"
        ],
        "test/test_clean_element.rb||test/test_clean_element.rb": [
          "File: test/test_clean_element.rb -> test/test_clean_element.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:       :default    => 'Lorem dolor sit amet alert(\"hello world\");',",
          "22:       :restricted => 'Lorem <strong>dolor</strong> sit amet alert(\"hello world\");',",
          "23:       :basic      => 'Lorem <a href=\"pants\" rel=\"nofollow\"><strong>dolor</strong></a> sit<br>amet alert(\"hello world\");',",
          "25:     },",
          "27:     :unclosed => {",
          "",
          "[Removed Lines]",
          "24:       :relaxed    => 'Lorem <a href=\"pants\" title=\"foo&gt;ipsum &lt;a href=\"><strong>dolor</strong></a> sit<br>amet alert(\"hello world\");',",
          "",
          "[Added Lines]",
          "24:       :relaxed    => 'Lorem <a href=\"pants\" title=\"foo>ipsum <a href=\"><strong>dolor</strong></a> sit<br>amet alert(\"hello world\");',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:     it 'should not choke on valueless attributes' do",
          "236:       @s.fragment('foo <a href>foo</a> bar')",
          "238:     end",
          "240:     it 'should downcase attribute names' do",
          "",
          "[Removed Lines]",
          "237:         .must_equal 'foo <a href rel=\"nofollow\">foo</a> bar'",
          "",
          "[Added Lines]",
          "237:         .must_equal 'foo <a href=\"\" rel=\"nofollow\">foo</a> bar'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263:     it 'should encode special chars in attribute values' do",
          "264:       @s.fragment('<a href=\"http://example.com\" title=\"<b>&eacute;xamples</b> & things\">foo</a>')",
          "266:     end",
          "268:     strings.each do |name, data|",
          "",
          "[Removed Lines]",
          "265:         .must_equal '<a href=\"http://example.com\" title=\"&lt;b&gt;\u00e9xamples&lt;/b&gt; &amp; things\">foo</a>'",
          "",
          "[Added Lines]",
          "265:         .must_equal '<a href=\"http://example.com\" title=\"<b>\u00e9xamples</b> &amp; things\">foo</a>'",
          "",
          "---------------"
        ],
        "test/test_malicious_html.rb||test/test_malicious_html.rb": [
          "File: test/test_malicious_html.rb -> test/test_malicious_html.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   describe '<body>' do",
          "44:     it 'should not be possible to inject JS via a malformed event attribute' do",
          "45:       @s.document('<html><head></head><body onload!#$%&()*~+-_.,:;?@[/|\\\\]^`=alert(\"XSS\")></body></html>').",
          "47:     end",
          "48:   end",
          "",
          "[Removed Lines]",
          "46:         must_equal \"<html><head></head><body></body></html>\\n\"",
          "",
          "[Added Lines]",
          "46:         must_equal \"<html><head></head><body></body></html>\"",
          "",
          "---------------"
        ],
        "test/test_parser.rb||test/test_parser.rb": [
          "File: test/test_parser.rb -> test/test_parser.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   it 'should work around the libxml2 content-type meta tag bug' do",
          "33:     Sanitize.document('<html><head></head><body>Howdy!</body></html>',",
          "34:       :elements => %w[html head body]",
          "37:     Sanitize.document('<html><head></head><body>Howdy!</body></html>',",
          "38:       :elements => %w[html head meta body]",
          "41:     Sanitize.document('<html><head><meta charset=\"utf-8\"></head><body>Howdy!</body></html>',",
          "42:       :elements   => %w[html head meta body],",
          "43:       :attributes => {'meta' => ['charset']}",
          "46:     Sanitize.document('<html><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"></head><body>Howdy!</body></html>',",
          "47:       :elements   => %w[html head meta body],",
          "48:       :attributes => {'meta' => %w[charset content http-equiv]}",
          "51:     # Edge case: an existing content-type meta tag with a non-UTF-8 content type",
          "52:     # will be converted to UTF-8, since that's the only output encoding we",
          "",
          "[Removed Lines]",
          "35:     ).must_equal \"<html><head></head><body>Howdy!</body></html>\\n\"",
          "39:     ).must_equal \"<html><head></head><body>Howdy!</body></html>\\n\"",
          "44:     ).must_equal \"<html><head><meta charset=\\\"utf-8\\\"></head><body>Howdy!</body></html>\\n\"",
          "49:     ).must_equal \"<html><head><meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=utf-8\\\"></head><body>Howdy!</body></html>\\n\"",
          "",
          "[Added Lines]",
          "35:     ).must_equal \"<html><head></head><body>Howdy!</body></html>\"",
          "39:     ).must_equal \"<html><head></head><body>Howdy!</body></html>\"",
          "44:     ).must_equal \"<html><head><meta charset=\\\"utf-8\\\"></head><body>Howdy!</body></html>\"",
          "49:     ).must_equal \"<html><head><meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=utf-8\\\"></head><body>Howdy!</body></html>\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:     Sanitize.document('<html><head><meta http-equiv=\"content-type\" content=\"text/html;charset=us-ascii\"></head><body>Howdy!</body></html>',",
          "55:       :elements   => %w[html head meta body],",
          "56:       :attributes => {'meta' => %w[charset content http-equiv]}",
          "58:   end",
          "60:   describe 'when siblings are added after a node during traversal' do",
          "",
          "[Removed Lines]",
          "57:     ).must_equal \"<html><head><meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=utf-8\\\"></head><body>Howdy!</body></html>\\n\"",
          "",
          "[Added Lines]",
          "57:     ).must_equal \"<html><head><meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=utf-8\\\"></head><body>Howdy!</body></html>\"",
          "",
          "---------------"
        ],
        "test/test_sanitize.rb||test/test_sanitize.rb": [
          "File: test/test_sanitize.rb -> test/test_sanitize.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:       it 'should sanitize an HTML document' do",
          "27:         @s.document('<!doctype html><html><b>Lo<!-- comment -->rem</b> <a href=\"pants\" title=\"foo\">ipsum</a> <a href=\"http://foo.com/\"><strong>dolor</strong></a> sit<br/>amet <script>alert(\"hello world\");</script></html>')",
          "29:       end",
          "31:       it 'should not modify the input string' do",
          "",
          "[Removed Lines]",
          "28:           .must_equal \"<html>Lorem ipsum dolor sit amet alert(\\\"hello world\\\");</html>\\n\"",
          "",
          "[Added Lines]",
          "28:           .must_equal \"<html>Lorem ipsum dolor sit amet alert(\\\"hello world\\\");</html>\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:       end",
          "37:       it 'should not choke on frozen documents' do",
          "39:       end",
          "40:     end",
          "",
          "[Removed Lines]",
          "38:         @s.document('<!doctype html><html><b>foo</b>'.freeze).must_equal \"<html>foo</html>\\n\"",
          "",
          "[Added Lines]",
          "38:         @s.document('<!doctype html><html><b>foo</b>'.freeze).must_equal \"<html>foo</html>\"",
          "",
          "---------------"
        ],
        "test/test_unicode.rb||test/test_unicode.rb": [
          "File: test/test_unicode.rb -> test/test_unicode.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     end",
          "25:     it 'should strip deprecated grave and acute clones' do",
          "27:       @s.fragment(\"a\\u0340b\\u0341c\").must_equal 'abc'",
          "28:     end",
          "30:     it 'should strip deprecated Khmer characters' do",
          "32:       @s.fragment(\"a\\u17a3b\\u17d3c\").must_equal 'abc'",
          "33:     end",
          "35:     it 'should strip line and paragraph separator punctuation' do",
          "37:       @s.fragment(\"a\\u2028b\\u2029c\").must_equal 'abc'",
          "38:     end",
          "40:     it 'should strip bidi embedding control characters' do",
          "41:       @s.document(\"a\\u202ab\\u202bc\\u202cd\\u202de\\u202e\")",
          "44:       @s.fragment(\"a\\u202ab\\u202bc\\u202cd\\u202de\\u202e\")",
          "45:         .must_equal 'abcde'",
          "46:     end",
          "48:     it 'should strip deprecated symmetric swapping characters' do",
          "50:       @s.fragment(\"a\\u206ab\\u206bc\").must_equal 'abc'",
          "51:     end",
          "53:     it 'should strip deprecated Arabic form shaping characters' do",
          "55:       @s.fragment(\"a\\u206cb\\u206dc\").must_equal 'abc'",
          "56:     end",
          "58:     it 'should strip deprecated National digit shape characters' do",
          "60:       @s.fragment(\"a\\u206eb\\u206fc\").must_equal 'abc'",
          "61:     end",
          "63:     it 'should strip interlinear annotation characters' do",
          "65:       @s.fragment(\"a\\ufff9b\\ufffac\\ufffb\").must_equal 'abc'",
          "66:     end",
          "68:     it 'should strip BOM/zero-width non-breaking space characters' do",
          "70:       @s.fragment(\"a\\ufeffbc\").must_equal 'abc'",
          "71:     end",
          "73:     it 'should strip object replacement characters' do",
          "75:       @s.fragment(\"a\\ufffcbc\").must_equal 'abc'",
          "76:     end",
          "78:     it 'should strip musical notation scoping characters' do",
          "79:       @s.document(\"a\\u{1d173}b\\u{1d174}c\\u{1d175}d\\u{1d176}e\\u{1d177}f\\u{1d178}g\\u{1d179}h\\u{1d17a}\")",
          "82:       @s.fragment(\"a\\u{1d173}b\\u{1d174}c\\u{1d175}d\\u{1d176}e\\u{1d177}f\\u{1d178}g\\u{1d179}h\\u{1d17a}\")",
          "83:         .must_equal 'abcdefgh'",
          "",
          "[Removed Lines]",
          "26:       @s.document(\"a\\u0340b\\u0341c\").must_equal \"<html><head></head><body>abc</body></html>\\n\"",
          "31:       @s.document(\"a\\u17a3b\\u17d3c\").must_equal \"<html><head></head><body>abc</body></html>\\n\"",
          "36:       @s.document(\"a\\u2028b\\u2029c\").must_equal \"<html><head></head><body>abc</body></html>\\n\"",
          "42:         .must_equal \"<html><head></head><body>abcde</body></html>\\n\"",
          "49:       @s.document(\"a\\u206ab\\u206bc\").must_equal \"<html><head></head><body>abc</body></html>\\n\"",
          "54:       @s.document(\"a\\u206cb\\u206dc\").must_equal \"<html><head></head><body>abc</body></html>\\n\"",
          "59:       @s.document(\"a\\u206eb\\u206fc\").must_equal \"<html><head></head><body>abc</body></html>\\n\"",
          "64:       @s.document(\"a\\ufff9b\\ufffac\\ufffb\").must_equal \"<html><head></head><body>abc</body></html>\\n\"",
          "69:       @s.document(\"a\\ufeffbc\").must_equal \"<html><head></head><body>abc</body></html>\\n\"",
          "74:       @s.document(\"a\\ufffcbc\").must_equal \"<html><head></head><body>abc</body></html>\\n\"",
          "80:         .must_equal \"<html><head></head><body>abcdefgh</body></html>\\n\"",
          "",
          "[Added Lines]",
          "26:       @s.document(\"a\\u0340b\\u0341c\").must_equal \"<html><head></head><body>abc</body></html>\"",
          "31:       @s.document(\"a\\u17a3b\\u17d3c\").must_equal \"<html><head></head><body>abc</body></html>\"",
          "36:       @s.document(\"a\\u2028b\\u2029c\").must_equal \"<html><head></head><body>abc</body></html>\"",
          "42:         .must_equal \"<html><head></head><body>abcde</body></html>\"",
          "49:       @s.document(\"a\\u206ab\\u206bc\").must_equal \"<html><head></head><body>abc</body></html>\"",
          "54:       @s.document(\"a\\u206cb\\u206dc\").must_equal \"<html><head></head><body>abc</body></html>\"",
          "59:       @s.document(\"a\\u206eb\\u206fc\").must_equal \"<html><head></head><body>abc</body></html>\"",
          "64:       @s.document(\"a\\ufff9b\\ufffac\\ufffb\").must_equal \"<html><head></head><body>abc</body></html>\"",
          "69:       @s.document(\"a\\ufeffbc\").must_equal \"<html><head></head><body>abc</body></html>\"",
          "74:       @s.document(\"a\\ufffcbc\").must_equal \"<html><head></head><body>abc</body></html>\"",
          "80:         .must_equal \"<html><head></head><body>abcdefgh</body></html>\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:       (0xE0000..0xE007F).each {|n| str << [n].pack('U') }",
          "89:       str << 'b'",
          "92:       @s.fragment(str).must_equal 'ab'",
          "93:     end",
          "94:   end",
          "",
          "[Removed Lines]",
          "91:       @s.document(str).must_equal \"<html><head></head><body>ab</body></html>\\n\"",
          "",
          "[Added Lines]",
          "91:       @s.document(str).must_equal \"<html><head></head><body>ab</body></html>\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}