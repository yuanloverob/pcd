{
  "cve_id": "CVE-2021-4026",
  "cve_desc": "bookstack is vulnerable to Improper Access Control",
  "repo": "bookstackapp/bookstack",
  "patch_hash": "b4fa82e3298a15443ca40bff205b7a16a1031d92",
  "patch_info": {
    "commit_hash": "b4fa82e3298a15443ca40bff205b7a16a1031d92",
    "repo": "bookstackapp/bookstack",
    "commit_url": "https://github.com/bookstackapp/bookstack/commit/b4fa82e3298a15443ca40bff205b7a16a1031d92",
    "files": [
      "app/Actions/ActivityService.php",
      "app/Auth/Permissions/PermissionService.php",
      "app/Exceptions/Handler.php",
      "tests/Api/AttachmentsApiTest.php"
    ],
    "message": "Fixed related permissions query not considering drafts\n\nPage-related items added on drafts could be visible in certain scenarios\nsince the applied permissions query filters would not consider\npage draft visibility.\nThis commit alters queries on related items to apply such filtering.\n\nIncluded test to cover API scenario.\nThanks to @haxatron for reporting.",
    "before_after_code_files": [
      "app/Actions/ActivityService.php||app/Actions/ActivityService.php",
      "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php",
      "app/Exceptions/Handler.php||app/Exceptions/Handler.php",
      "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
    ]
  },
  "patch_diff": {
    "app/Actions/ActivityService.php||app/Actions/ActivityService.php": [
      "File: app/Actions/ActivityService.php -> app/Actions/ActivityService.php"
    ],
    "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php": [
      "File: app/Auth/Permissions/PermissionService.php -> app/Auth/Permissions/PermissionService.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "608:     public function filterRestrictedEntityRelations($query, string $tableName, string $entityIdColumn, string $entityTypeColumn, string $action = 'view')",
      "609:     {",
      "610:         $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn, 'entityTypeColumn' => $entityTypeColumn];",
      "624:         });",
      "626:         $this->clean();",
      "",
      "[Removed Lines]",
      "612:         $q = $query->where(function ($query) use ($tableDetails, $action) {",
      "613:             $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {",
      "615:                 $permissionQuery->select(['role_id'])->from('joint_permissions')",
      "616:                     ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
      "617:                     ->whereColumn('joint_permissions.entity_type', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
      "618:                     ->where('action', '=', $action)",
      "619:                     ->whereIn('role_id', $this->getCurrentUserRoles())",
      "620:                     ->where(function (QueryBuilder $query) {",
      "621:                         $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
      "622:                     });",
      "623:             });",
      "",
      "[Added Lines]",
      "613:         $pageMorphClass = (new Page())->getMorphClass();",
      "615:         $q = $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {",
      "617:             $permissionQuery->select(['role_id'])->from('joint_permissions')",
      "618:                 ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
      "619:                 ->whereColumn('joint_permissions.entity_type', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
      "620:                 ->where('joint_permissions.action', '=', $action)",
      "621:                 ->whereIn('joint_permissions.role_id', $this->getCurrentUserRoles())",
      "622:                 ->where(function (QueryBuilder $query) {",
      "623:                     $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
      "624:                 });",
      "625:         })->where(function ($query) use ($tableDetails, $pageMorphClass) {",
      "627:             $query->where($tableDetails['entityTypeColumn'], '!=', $pageMorphClass)",
      "628:                 ->orWhereExists(function(QueryBuilder $query) use ($tableDetails, $pageMorphClass) {",
      "629:                     $query->select('id')->from('pages')",
      "630:                         ->whereColumn('pages.id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
      "631:                         ->where($tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'], '=', $pageMorphClass)",
      "632:                         ->where('pages.draft', '=', false);",
      "633:                 });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "635:     public function filterRelatedEntity(string $entityClass, Builder $query, string $tableName, string $entityIdColumn): Builder",
      "636:     {",
      "652:                 });",
      "654:         });",
      "656:         $this->clean();",
      "658:         return $q;",
      "",
      "[Removed Lines]",
      "637:         $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn];",
      "638:         $morphClass = app($entityClass)->getMorphClass();",
      "640:         $q = $query->where(function ($query) use ($tableDetails, $morphClass) {",
      "641:             $query->where(function ($query) use (&$tableDetails, $morphClass) {",
      "642:                 $query->whereExists(function ($permissionQuery) use (&$tableDetails, $morphClass) {",
      "644:                     $permissionQuery->select('id')->from('joint_permissions')",
      "645:                         ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
      "646:                         ->where('entity_type', '=', $morphClass)",
      "647:                         ->where('action', '=', 'view')",
      "648:                         ->whereIn('role_id', $this->getCurrentUserRoles())",
      "649:                         ->where(function (QueryBuilder $query) {",
      "650:                             $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
      "651:                         });",
      "653:             })->orWhere($tableDetails['entityIdColumn'], '=', 0);",
      "",
      "[Added Lines]",
      "647:         $fullEntityIdColumn = $tableName . '.' . $entityIdColumn;",
      "648:         $instance = new $entityClass;",
      "649:         $morphClass = $instance->getMorphClass();",
      "651:         $existsQuery = function($permissionQuery) use ($fullEntityIdColumn, $morphClass) {",
      "653:             $permissionQuery->select('joint_permissions.role_id')->from('joint_permissions')",
      "654:                 ->whereColumn('joint_permissions.entity_id', '=', $fullEntityIdColumn)",
      "655:                 ->where('joint_permissions.entity_type', '=', $morphClass)",
      "656:                 ->where('joint_permissions.action', '=', 'view')",
      "657:                 ->whereIn('joint_permissions.role_id', $this->getCurrentUserRoles())",
      "658:                 ->where(function (QueryBuilder $query) {",
      "659:                     $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
      "661:         };",
      "663:         $q = $query->where(function ($query) use ($existsQuery, $fullEntityIdColumn) {",
      "664:             $query->whereExists($existsQuery)",
      "665:                 ->orWhere($fullEntityIdColumn, '=', 0);",
      "668:         if ($instance instanceof Page) {",
      "670:             $q->whereExists(function(QueryBuilder $query) use ($fullEntityIdColumn) {",
      "671:                 $query->select('id')->from('pages')",
      "672:                     ->whereColumn('pages.id', '=', $fullEntityIdColumn)",
      "673:                     ->where(function (QueryBuilder $query) {",
      "674:                         $query->where('pages.draft', '=', false)",
      "675:                             ->orWhere('pages.owned_by', '=', $this->currentUser()->id);",
      "676:                     });",
      "677:             });",
      "678:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "667:     protected function addJointHasPermissionCheck($query, int $userIdToCheck)",
      "668:     {",
      "672:         });",
      "673:     }",
      "",
      "[Removed Lines]",
      "669:         $query->where('has_permission', '=', true)->orWhere(function ($query) use ($userIdToCheck) {",
      "670:             $query->where('has_permission_own', '=', true)",
      "671:                 ->where('owned_by', '=', $userIdToCheck);",
      "",
      "[Added Lines]",
      "693:         $query->where('joint_permissions.has_permission', '=', true)->orWhere(function ($query) use ($userIdToCheck) {",
      "694:             $query->where('joint_permissions.has_permission_own', '=', true)",
      "695:                 ->where('joint_permissions.owned_by', '=', $userIdToCheck);",
      "",
      "---------------"
    ],
    "app/Exceptions/Handler.php||app/Exceptions/Handler.php": [
      "File: app/Exceptions/Handler.php -> app/Exceptions/Handler.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: use Exception;",
      "6: use Illuminate\\Auth\\AuthenticationException;",
      "7: use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;",
      "8: use Illuminate\\Http\\JsonResponse;",
      "9: use Illuminate\\Http\\Request;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: use Illuminate\\Database\\Eloquent\\ModelNotFoundException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79:     {",
      "81:         $headers = [];",
      "82:         if ($e instanceof HttpException) {",
      "83:             $code = $e->getStatusCode();",
      "84:             $headers = $e->getHeaders();",
      "85:         }",
      "87:         $responseData = [",
      "88:             'error' => [",
      "89:                 'message' => $e->getMessage(),",
      "",
      "[Removed Lines]",
      "78:     protected function renderApiException(Exception $e): JsonResponse",
      "80:         $code = $e->getCode() === 0 ? 500 : $e->getCode();",
      "",
      "[Added Lines]",
      "79:     protected function renderApiException(Throwable $e): JsonResponse",
      "81:         $code = 500;",
      "89:         if ($e instanceof ModelNotFoundException) {",
      "90:             $code = 404;",
      "91:         }",
      "",
      "---------------"
    ],
    "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php": [
      "File: tests/Api/AttachmentsApiTest.php -> tests/Api/AttachmentsApiTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "224:         unlink(storage_path($attachment->path));",
      "225:     }",
      "227:     public function test_update_endpoint()",
      "228:     {",
      "229:         $this->actingAsApiAdmin();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227:     public function test_attachment_not_visible_on_other_users_draft()",
      "228:     {",
      "229:         $this->actingAsApiAdmin();",
      "230:         $editor = $this->getEditor();",
      "233:         $page = Page::query()->first();",
      "234:         $page->draft = true;",
      "235:         $page->owned_by = $editor;",
      "236:         $page->save();",
      "237:         $this->regenEntityPermissions($page);",
      "239:         $attachment = $this->createAttachmentForPage($page, [",
      "240:             'name'  => 'my attachment',",
      "241:             'path'  => 'https://example.com',",
      "242:             'order' => 1,",
      "243:         ]);",
      "245:         $resp = $this->getJson(\"{$this->baseEndpoint}/{$attachment->id}\");",
      "247:         $resp->assertStatus(404);",
      "248:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "068a8a068c5d7c7ab98a6ee95baae8d321c3c61f",
      "candidate_info": {
        "commit_hash": "068a8a068c5d7c7ab98a6ee95baae8d321c3c61f",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/068a8a068c5d7c7ab98a6ee95baae8d321c3c61f",
        "files": [
          "tests/Api/AttachmentsApiTest.php",
          "tests/Api/PagesApiTest.php",
          "tests/Api/UsersApiTest.php",
          "tests/Commands/CopyShelfPermissionsCommandTest.php",
          "tests/Entity/BookShelfTest.php",
          "tests/Entity/BookTest.php",
          "tests/Entity/ChapterTest.php",
          "tests/Entity/EntityAccessTest.php",
          "tests/Entity/EntitySearchTest.php",
          "tests/Entity/PageTest.php",
          "tests/Entity/SortTest.php",
          "tests/Entity/TagTest.php",
          "tests/Helpers/EntityProvider.php",
          "tests/HomepageTest.php",
          "tests/Permissions/EntityPermissionsTest.php",
          "tests/Permissions/ExportPermissionsTest.php",
          "tests/Permissions/RolesTest.php",
          "tests/PublicActionTest.php",
          "tests/References/CrossLinkParserTest.php",
          "tests/References/ReferencesTest.php",
          "tests/TestCase.php",
          "tests/Uploads/ImageTest.php",
          "tests/User/UserProfileTest.php"
        ],
        "message": "Extracted entity testcase methods to own class\n\nAlso added some new fetch helper methods for future use.",
        "before_after_code_files": [
          "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php",
          "tests/Api/PagesApiTest.php||tests/Api/PagesApiTest.php",
          "tests/Api/UsersApiTest.php||tests/Api/UsersApiTest.php",
          "tests/Commands/CopyShelfPermissionsCommandTest.php||tests/Commands/CopyShelfPermissionsCommandTest.php",
          "tests/Entity/BookShelfTest.php||tests/Entity/BookShelfTest.php",
          "tests/Entity/BookTest.php||tests/Entity/BookTest.php",
          "tests/Entity/ChapterTest.php||tests/Entity/ChapterTest.php",
          "tests/Entity/EntityAccessTest.php||tests/Entity/EntityAccessTest.php",
          "tests/Entity/EntitySearchTest.php||tests/Entity/EntitySearchTest.php",
          "tests/Entity/PageTest.php||tests/Entity/PageTest.php",
          "tests/Entity/SortTest.php||tests/Entity/SortTest.php",
          "tests/Entity/TagTest.php||tests/Entity/TagTest.php",
          "tests/Helpers/EntityProvider.php||tests/Helpers/EntityProvider.php",
          "tests/HomepageTest.php||tests/HomepageTest.php",
          "tests/Permissions/EntityPermissionsTest.php||tests/Permissions/EntityPermissionsTest.php",
          "tests/Permissions/ExportPermissionsTest.php||tests/Permissions/ExportPermissionsTest.php",
          "tests/Permissions/RolesTest.php||tests/Permissions/RolesTest.php",
          "tests/PublicActionTest.php||tests/PublicActionTest.php",
          "tests/References/CrossLinkParserTest.php||tests/References/CrossLinkParserTest.php",
          "tests/References/ReferencesTest.php||tests/References/ReferencesTest.php",
          "tests/TestCase.php||tests/TestCase.php",
          "tests/Uploads/ImageTest.php||tests/Uploads/ImageTest.php",
          "tests/User/UserProfileTest.php||tests/User/UserProfileTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
          ],
          "candidate": [
            "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
          ]
        }
      },
      "candidate_diff": {
        "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php": [
          "File: tests/Api/AttachmentsApiTest.php -> tests/Api/AttachmentsApiTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         $page->restricted = true;",
          "55:         $page->save();",
          "58:         $resp = $this->getJson($this->baseEndpoint . '?count=1&sort=+id');",
          "59:         $resp->assertJsonMissing(['data' => [",
          "",
          "[Removed Lines]",
          "56:         $this->regenEntityPermissions($page);",
          "",
          "[Added Lines]",
          "56:         $this->entities->regenPermissions($page);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:         $page->draft = true;",
          "265:         $page->owned_by = $editor->id;",
          "266:         $page->save();",
          "269:         $attachment = $this->createAttachmentForPage($page, [",
          "270:             'name'  => 'my attachment',",
          "",
          "[Removed Lines]",
          "267:         $this->regenEntityPermissions($page);",
          "",
          "[Added Lines]",
          "267:         $this->entities->regenPermissions($page);",
          "",
          "---------------"
        ],
        "tests/Api/PagesApiTest.php||tests/Api/PagesApiTest.php": [
          "File: tests/Api/PagesApiTest.php -> tests/Api/PagesApiTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:         $this->actingAsApiEditor();",
          "211:         $page = Page::visible()->first();",
          "212:         $chapter = Chapter::visible()->where('book_id', '!=', $page->book_id)->first();",
          "214:         $details = [",
          "215:             'name'       => 'My updated API page',",
          "216:             'chapter_id' => $chapter->id,",
          "",
          "[Removed Lines]",
          "213:         $this->setEntityRestrictions($chapter, ['view'], [$this->getEditor()->roles()->first()]);",
          "",
          "[Added Lines]",
          "213:         $this->entities->setPermissions($chapter, ['view'], [$this->getEditor()->roles()->first()]);",
          "",
          "---------------"
        ],
        "tests/Api/UsersApiTest.php||tests/Api/UsersApiTest.php": [
          "File: tests/Api/UsersApiTest.php -> tests/Api/UsersApiTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:         $user = User::query()->where('id', '!=', $this->getAdmin()->id)",
          "240:             ->whereNull('system_name')",
          "241:             ->first();",
          "244:         $newOwner = User::query()->where('id', '!=', $user->id)->first();",
          "",
          "[Removed Lines]",
          "242:         $entityChain = $this->createEntityChainBelongingToUser($user);",
          "",
          "[Added Lines]",
          "242:         $entityChain = $this->entities->createChainBelongingToUser($user);",
          "",
          "---------------"
        ],
        "tests/Commands/CopyShelfPermissionsCommandTest.php||tests/Commands/CopyShelfPermissionsCommandTest.php": [
          "File: tests/Commands/CopyShelfPermissionsCommandTest.php -> tests/Commands/CopyShelfPermissionsCommandTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:         $this->assertFalse(boolval($child->restricted), 'Child book should not be restricted by default');",
          "23:         $this->assertTrue($child->permissions()->count() === 0, 'Child book should have no permissions by default');",
          "26:         $this->artisan('bookstack:copy-shelf-permissions', [",
          "27:             '--slug' => $shelf->slug,",
          "28:         ]);",
          "",
          "[Removed Lines]",
          "25:         $this->setEntityRestrictions($shelf, ['view', 'update'], [$editorRole]);",
          "",
          "[Added Lines]",
          "25:         $this->entities->setPermissions($shelf, ['view', 'update'], [$editorRole]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:         $this->assertFalse(boolval($child->restricted), 'Child book should not be restricted by default');",
          "44:         $this->assertTrue($child->permissions()->count() === 0, 'Child book should have no permissions by default');",
          "47:         $this->artisan('bookstack:copy-shelf-permissions --all')",
          "48:             ->expectsQuestion('Permission settings for all shelves will be cascaded. Books assigned to multiple shelves will receive only the permissions of it\\'s last processed shelf. Are you sure you want to proceed?', 'y');",
          "49:         $child = $shelf->books()->first();",
          "",
          "[Removed Lines]",
          "46:         $this->setEntityRestrictions($shelf, ['view', 'update'], [$editorRole]);",
          "",
          "[Added Lines]",
          "46:         $this->entities->setPermissions($shelf, ['view', 'update'], [$editorRole]);",
          "",
          "---------------"
        ],
        "tests/Entity/BookShelfTest.php||tests/Entity/BookShelfTest.php": [
          "File: tests/Entity/BookShelfTest.php -> tests/Entity/BookShelfTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         $resp = $this->actingAs($user)->get('/');",
          "46:         $this->withHtml($resp)->assertElementNotContains('header', 'Shelves');",
          "50:         $resp = $this->get('/');",
          "51:         $this->withHtml($resp)->assertElementContains('header', 'Shelves');",
          "",
          "[Removed Lines]",
          "48:         $this->setEntityRestrictions($shelf, ['view'], [$userRole]);",
          "",
          "[Added Lines]",
          "48:         $this->entities->setPermissions($shelf, ['view'], [$userRole]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:         $resp->assertSee($book->name);",
          "70:         $resp->assertSee($book->getUrl());",
          "74:         $resp = $this->asEditor()->get('/shelves');",
          "75:         $resp->assertDontSee($book->name);",
          "",
          "[Removed Lines]",
          "72:         $this->setEntityRestrictions($book, []);",
          "",
          "[Added Lines]",
          "72:         $this->entities->setPermissions($book, []);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:         $this->assertFalse(boolval($child->restricted), 'Child book should not be restricted by default');",
          "299:         $this->assertTrue($child->permissions()->count() === 0, 'Child book should have no permissions by default');",
          "302:         $resp = $this->post($shelf->getUrl('/copy-permissions'));",
          "303:         $child = $shelf->books()->first();",
          "",
          "[Removed Lines]",
          "301:         $this->setEntityRestrictions($shelf, ['view', 'update'], [$editorRole]);",
          "",
          "[Added Lines]",
          "301:         $this->entities->setPermissions($shelf, ['view', 'update'], [$editorRole]);",
          "",
          "---------------"
        ],
        "tests/Entity/BookTest.php||tests/Entity/BookTest.php": [
          "File: tests/Entity/BookTest.php -> tests/Entity/BookTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:     public function test_slug_multi_byte_url_safe()",
          "248:     {",
          "250:             'name' => '\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f',",
          "251:         ]);",
          "253:         $this->assertEquals('informaciya', $book->slug);",
          "256:             'name' => '\u00bfQu\u00e9?',",
          "257:         ]);",
          "",
          "[Removed Lines]",
          "249:         $book = $this->newBook([",
          "255:         $book = $this->newBook([",
          "",
          "[Added Lines]",
          "249:         $book = $this->entities->newBook([",
          "255:         $book = $this->entities->newBook([",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:     public function test_slug_format()",
          "263:     {",
          "265:             'name' => 'PartA / PartB / PartC',",
          "266:         ]);",
          "",
          "[Removed Lines]",
          "264:         $book = $this->newBook([",
          "",
          "[Added Lines]",
          "264:         $book = $this->entities->newBook([",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "311:         foreach ($book->getDirectChildren() as $child) {",
          "312:             $child->restricted = true;",
          "313:             $child->save();",
          "315:         }",
          "317:         $this->asEditor()->post($book->getUrl('/copy'), ['name' => 'My copy book']);",
          "",
          "[Removed Lines]",
          "314:             $this->regenEntityPermissions($child);",
          "",
          "[Added Lines]",
          "314:             $this->entities->regenPermissions($child);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366:         $viewer = $this->getViewer();",
          "367:         $this->giveUserPermissions($viewer, ['book-update-all', 'book-create-all', 'bookshelf-update-all']);",
          "371:         $this->asEditor()->post($book->getUrl('/copy'), ['name' => 'My copy book']);",
          "",
          "[Removed Lines]",
          "368:         $this->setEntityRestrictions($shelfB);",
          "",
          "[Added Lines]",
          "368:         $this->entities->setPermissions($shelfB);",
          "",
          "---------------"
        ],
        "tests/Entity/ChapterTest.php||tests/Entity/ChapterTest.php": [
          "File: tests/Entity/ChapterTest.php -> tests/Entity/ChapterTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:         foreach ($chapter->pages as $page) {",
          "108:             $page->restricted = true;",
          "109:             $page->save();",
          "111:         }",
          "113:         $this->asEditor()->post($chapter->getUrl('/copy'), [",
          "",
          "[Removed Lines]",
          "110:             $this->regenEntityPermissions($page);",
          "",
          "[Added Lines]",
          "110:             $this->entities->regenPermissions($page);",
          "",
          "---------------"
        ],
        "tests/Entity/EntityAccessTest.php||tests/Entity/EntityAccessTest.php": [
          "File: tests/Entity/EntityAccessTest.php -> tests/Entity/EntityAccessTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:         $creator = $this->getEditor();",
          "16:         $updater = $this->getViewer();",
          "18:         app()->make(UserRepo::class)->destroy($creator);",
          "19:         app()->make(PageRepo::class)->update($entities['page'], ['html' => '<p>hello!</p>>']);",
          "",
          "[Removed Lines]",
          "17:         $entities = $this->createEntityChainBelongingToUser($creator, $updater);",
          "",
          "[Added Lines]",
          "17:         $entities = $this->entities->createChainBelongingToUser($creator, $updater);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:         $creator = $this->getViewer();",
          "28:         $updater = $this->getEditor();",
          "30:         app()->make(UserRepo::class)->destroy($updater);",
          "31:         app()->make(PageRepo::class)->update($entities['page'], ['html' => '<p>Hello there!</p>']);",
          "",
          "[Removed Lines]",
          "29:         $entities = $this->createEntityChainBelongingToUser($creator, $updater);",
          "",
          "[Added Lines]",
          "29:         $entities = $this->entities->createChainBelongingToUser($creator, $updater);",
          "",
          "---------------"
        ],
        "tests/Entity/EntitySearchTest.php||tests/Entity/EntitySearchTest.php": [
          "File: tests/Entity/EntitySearchTest.php -> tests/Entity/EntitySearchTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     public function test_searching_accents_and_small_terms()",
          "49:     {",
          "51:         $this->asEditor();",
          "53:         $accentSearch = $this->get('/search?term=' . urlencode('\u00e1\u00e9\u00ed\u00ed'));",
          "",
          "[Removed Lines]",
          "50:         $page = $this->newPage(['name' => 'My new test quaffleachits', 'html' => 'some \u00e1\u00e9\u00ed\u00ed\u00fa\u00fc\u00bf\u00a1 test content a2 orange dog']);",
          "",
          "[Added Lines]",
          "50:         $page = $this->entities->newPage(['name' => 'My new test quaffleachits', 'html' => 'some \u00e1\u00e9\u00ed\u00ed\u00fa\u00fc\u00bf\u00a1 test content a2 orange dog']);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:     public function test_exact_searches()",
          "113:     {",
          "116:         $exactSearchA = $this->asEditor()->get('/search?term=' . urlencode('\"story about an orange\"'));",
          "117:         $exactSearchA->assertStatus(200)->assertSee($page->name);",
          "",
          "[Removed Lines]",
          "114:         $page = $this->newPage(['name' => 'My new test page', 'html' => 'this is a story about an orange donkey']);",
          "",
          "[Added Lines]",
          "114:         $page = $this->entities->newPage(['name' => 'My new test page', 'html' => 'this is a story about an orange donkey']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     public function test_search_terms_with_delimiters_are_converted_to_exact_matches()",
          "124:     {",
          "125:         $this->asEditor();",
          "127:         $terms = explode(' ', '1.1 2,2 3?3 4:4 5;5 (8) <9> \"10\" \\'11\\' `12`');",
          "129:         foreach ($terms as $term) {",
          "",
          "[Removed Lines]",
          "126:         $page = $this->newPage(['name' => 'Delimiter test', 'html' => '<p>1.1 2,2 3?3 4:4 5;5 (8) &lt;9&gt; \"10\" \\'11\\' `12`</p>']);",
          "",
          "[Added Lines]",
          "126:         $page = $this->entities->newPage(['name' => 'Delimiter test', 'html' => '<p>1.1 2,2 3?3 4:4 5;5 (8) &lt;9&gt; \"10\" \\'11\\' `12`</p>']);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:     public function test_search_filters()",
          "136:     {",
          "138:         $this->asEditor();",
          "139:         $editorId = $this->getEditor()->id;",
          "140:         $editorSlug = $this->getEditor()->slug;",
          "",
          "[Removed Lines]",
          "137:         $page = $this->newPage(['name' => 'My new test quaffleachits', 'html' => 'this is about an orange donkey danzorbhsing']);",
          "",
          "[Added Lines]",
          "137:         $page = $this->entities->newPage(['name' => 'My new test quaffleachits', 'html' => 'this is about an orange donkey danzorbhsing']);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198:     public function test_ajax_entity_search()",
          "199:     {",
          "201:         $notVisitedPage = Page::first();",
          "",
          "[Removed Lines]",
          "200:         $page = $this->newPage(['name' => 'my ajax search test', 'html' => 'ajax test']);",
          "",
          "[Added Lines]",
          "200:         $page = $this->entities->newPage(['name' => 'my ajax search test', 'html' => 'ajax test']);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "335:     public function test_search_ranks_common_words_lower()",
          "336:     {",
          "340:         $search = $this->asEditor()->get('/search?term=cat+dog+biscuit');",
          "341:         $this->withHtml($search)->assertElementContains('.entity-list > .page:nth-child(1)', 'Test page A');",
          "342:         $this->withHtml($search)->assertElementContains('.entity-list > .page:nth-child(2)', 'Test page B');",
          "344:         for ($i = 0; $i < 2; $i++) {",
          "346:         }",
          "348:         $search = $this->asEditor()->get('/search?term=cat+dog+biscuit');",
          "",
          "[Removed Lines]",
          "337:         $this->newPage(['name' => 'Test page A', 'html' => '<p>dog biscuit dog dog</p>']);",
          "338:         $this->newPage(['name' => 'Test page B', 'html' => '<p>cat biscuit</p>']);",
          "345:             $this->newPage(['name' => 'Test page ' . $i, 'html' => '<p>dog</p>']);",
          "",
          "[Added Lines]",
          "337:         $this->entities->newPage(['name' => 'Test page A', 'html' => '<p>dog biscuit dog dog</p>']);",
          "338:         $this->entities->newPage(['name' => 'Test page B', 'html' => '<p>cat biscuit</p>']);",
          "345:             $this->entities->newPage(['name' => 'Test page ' . $i, 'html' => '<p>dog</p>']);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "353:     public function test_terms_in_headers_have_an_adjusted_index_score()",
          "354:     {",
          "356:             <p>TermA</p>",
          "357:             <h1>TermB <strong>TermNested</strong></h1>",
          "358:             <h2>TermC</h2>",
          "",
          "[Removed Lines]",
          "355:         $page = $this->newPage(['name' => 'Test page A', 'html' => '",
          "",
          "[Added Lines]",
          "355:         $page = $this->entities->newPage(['name' => 'Test page A', 'html' => '",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "378:     public function test_name_and_content_terms_are_merged_to_single_score()",
          "379:     {",
          "381:             <p>TermA</p>",
          "382:         ']);",
          "",
          "[Removed Lines]",
          "380:         $page = $this->newPage(['name' => 'TermA', 'html' => '",
          "",
          "[Added Lines]",
          "380:         $page = $this->entities->newPage(['name' => 'TermA', 'html' => '",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "390:     public function test_tag_names_and_values_are_indexed_for_search()",
          "391:     {",
          "393:             ['name' => 'Animal', 'value' => 'MeowieCat'],",
          "394:             ['name' => 'SuperImportant'],",
          "395:         ]]);",
          "",
          "[Removed Lines]",
          "392:         $page = $this->newPage(['name' => 'PageA', 'html' => '<p>content</p>', 'tags' => [",
          "",
          "[Added Lines]",
          "392:         $page = $this->entities->newPage(['name' => 'PageA', 'html' => '<p>content</p>', 'tags' => [",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "403:     public function test_matching_terms_in_search_results_are_highlighted()",
          "404:     {",
          "406:             ['name' => 'Animal', 'value' => 'MeowieCat'],",
          "407:             ['name' => 'SuperImportant'],",
          "408:         ]]);",
          "",
          "[Removed Lines]",
          "405:         $this->newPage(['name' => 'My Meowie Cat', 'html' => '<p>A superimportant page about meowieable animals</p>', 'tags' => [",
          "",
          "[Added Lines]",
          "405:         $this->entities->newPage(['name' => 'My Meowie Cat', 'html' => '<p>A superimportant page about meowieable animals</p>', 'tags' => [",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "421:     public function test_match_highlighting_works_with_multibyte_content()",
          "422:     {",
          "424:             'name' => 'Test Page',",
          "425:             'html' => '<p>\u041d\u0430 \u043c\u0435\u043d \u043c\u0438 \u0442\u0440\u044f\u0431\u0432\u0430 \u043d\u0435\u0449\u043e \u0434\u043e\u0431\u0440\u043e test</p>',",
          "426:         ]);",
          "",
          "[Removed Lines]",
          "423:         $this->newPage([",
          "",
          "[Added Lines]",
          "423:         $this->entities->newPage([",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "432:     public function test_html_entities_in_item_details_remains_escaped_in_search_results()",
          "433:     {",
          "436:         $search = $this->asEditor()->get('/search?term=TestPageContent');",
          "437:         $search->assertSee('My &lt;cool&gt; <strong>TestPageContent</strong>', false);",
          "",
          "[Removed Lines]",
          "434:         $this->newPage(['name' => 'My <cool> TestPageContent', 'html' => '<p>My supercool &lt;great&gt; TestPageContent page</p>']);",
          "",
          "[Added Lines]",
          "434:         $this->entities->newPage(['name' => 'My <cool> TestPageContent', 'html' => '<p>My supercool &lt;great&gt; TestPageContent page</p>']);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "441:     public function test_words_adjacent_to_lines_breaks_can_be_matched_with_normal_terms()",
          "442:     {",
          "444:             <p>TermA<br>TermB<br>TermC</p>",
          "445:         ']);",
          "",
          "[Removed Lines]",
          "443:         $page = $this->newPage(['name' => 'TermA', 'html' => '",
          "",
          "[Added Lines]",
          "443:         $page = $this->entities->newPage(['name' => 'TermA', 'html' => '",
          "",
          "---------------"
        ],
        "tests/Entity/PageTest.php||tests/Entity/PageTest.php": [
          "File: tests/Entity/PageTest.php -> tests/Entity/PageTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:         $newBook->owned_by = $viewer->id;",
          "202:         $newBook->save();",
          "203:         $this->giveUserPermissions($viewer, ['page-create-own']);",
          "206:         $resp = $this->actingAs($viewer)->get($page->getUrl());",
          "207:         $resp->assertSee($page->getUrl('/copy'));",
          "",
          "[Removed Lines]",
          "204:         $this->regenEntityPermissions($newBook);",
          "",
          "[Added Lines]",
          "204:         $this->entities->regenPermissions($newBook);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:     public function test_recently_updated_pages_view()",
          "256:     {",
          "257:         $user = $this->getEditor();",
          "260:         $resp = $this->asAdmin()->get('/pages/recently-updated');",
          "261:         $this->withHtml($resp)->assertElementContains('.entity-list .page:nth-child(1)', $content['page']->name);",
          "",
          "[Removed Lines]",
          "258:         $content = $this->createEntityChainBelongingToUser($user);",
          "",
          "[Added Lines]",
          "258:         $content = $this->entities->createChainBelongingToUser($user);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:             'html' => '<p>Updated content</p>',",
          "304:         ]);",
          "309:         $resp = $this->get('/pages/recently-updated');",
          "310:         $resp->assertDontSee($page->book->getShortName(42));",
          "",
          "[Removed Lines]",
          "306:         $this->setEntityRestrictions($page->book);",
          "307:         $this->setEntityRestrictions($page, ['view'], [$user->roles->first()]);",
          "",
          "[Added Lines]",
          "306:         $this->entities->setPermissions($page->book);",
          "307:         $this->entities->setPermissions($page, ['view'], [$user->roles->first()]);",
          "",
          "---------------"
        ],
        "tests/Entity/SortTest.php||tests/Entity/SortTest.php": [
          "File: tests/Entity/SortTest.php -> tests/Entity/SortTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:         $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();",
          "99:         $editor = $this->getEditor();",
          "103:         $movePageResp = $this->actingAs($editor)->put($page->getUrl('/move'), [",
          "104:             'entity_selection' => 'book:' . $newBook->id,",
          "105:         ]);",
          "106:         $this->assertPermissionError($movePageResp);",
          "109:         $movePageResp = $this->put($page->getUrl('/move'), [",
          "110:             'entity_selection' => 'book:' . $newBook->id,",
          "111:         ]);",
          "",
          "[Removed Lines]",
          "101:         $this->setEntityRestrictions($newBook, ['view', 'update', 'delete'], $editor->roles->all());",
          "108:         $this->setEntityRestrictions($newBook, ['view', 'update', 'delete', 'create'], $editor->roles->all());",
          "",
          "[Added Lines]",
          "101:         $this->entities->setPermissions($newBook, ['view', 'update', 'delete'], $editor->roles->all());",
          "108:         $this->entities->setPermissions($newBook, ['view', 'update', 'delete', 'create'], $editor->roles->all());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:         $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();",
          "124:         $editor = $this->getEditor();",
          "129:         $movePageResp = $this->actingAs($editor)->put($page->getUrl('/move'), [",
          "130:             'entity_selection' => 'book:' . $newBook->id,",
          "",
          "[Removed Lines]",
          "126:         $this->setEntityRestrictions($newBook, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "127:         $this->setEntityRestrictions($page, ['view', 'update', 'create'], $editor->roles->all());",
          "",
          "[Added Lines]",
          "126:         $this->entities->setPermissions($newBook, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "127:         $this->entities->setPermissions($page, ['view', 'update', 'create'], $editor->roles->all());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:         $pageView = $this->get($page->getUrl());",
          "134:         $pageView->assertDontSee($page->getUrl('/move'));",
          "137:         $movePageResp = $this->put($page->getUrl('/move'), [",
          "138:             'entity_selection' => 'book:' . $newBook->id,",
          "139:         ]);",
          "",
          "[Removed Lines]",
          "136:         $this->setEntityRestrictions($page, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "",
          "[Added Lines]",
          "136:         $this->entities->setPermissions($page, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:         $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();",
          "179:         $editor = $this->getEditor();",
          "184:         $moveChapterResp = $this->actingAs($editor)->put($chapter->getUrl('/move'), [",
          "185:             'entity_selection' => 'book:' . $newBook->id,",
          "",
          "[Removed Lines]",
          "181:         $this->setEntityRestrictions($newBook, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "182:         $this->setEntityRestrictions($chapter, ['view', 'update', 'create'], $editor->roles->all());",
          "",
          "[Added Lines]",
          "181:         $this->entities->setPermissions($newBook, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "182:         $this->entities->setPermissions($chapter, ['view', 'update', 'create'], $editor->roles->all());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "188:         $pageView = $this->get($chapter->getUrl());",
          "189:         $pageView->assertDontSee($chapter->getUrl('/move'));",
          "192:         $moveChapterResp = $this->put($chapter->getUrl('/move'), [",
          "193:             'entity_selection' => 'book:' . $newBook->id,",
          "194:         ]);",
          "",
          "[Removed Lines]",
          "191:         $this->setEntityRestrictions($chapter, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "",
          "[Added Lines]",
          "191:         $this->entities->setPermissions($chapter, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "205:         $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();",
          "206:         $editor = $this->getEditor();",
          "211:         $moveChapterResp = $this->actingAs($editor)->put($chapter->getUrl('/move'), [",
          "212:             'entity_selection' => 'book:' . $newBook->id,",
          "213:         ]);",
          "214:         $this->assertPermissionError($moveChapterResp);",
          "217:         $moveChapterResp = $this->put($chapter->getUrl('/move'), [",
          "218:             'entity_selection' => 'book:' . $newBook->id,",
          "219:         ]);",
          "",
          "[Removed Lines]",
          "208:         $this->setEntityRestrictions($newBook, ['view', 'update', 'delete'], [$editor->roles->first()]);",
          "209:         $this->setEntityRestrictions($chapter, ['view', 'update', 'create', 'delete'], [$editor->roles->first()]);",
          "216:         $this->setEntityRestrictions($newBook, ['view', 'update', 'create', 'delete'], [$editor->roles->first()]);",
          "",
          "[Added Lines]",
          "208:         $this->entities->setPermissions($newBook, ['view', 'update', 'delete'], [$editor->roles->first()]);",
          "209:         $this->entities->setPermissions($chapter, ['view', 'update', 'create', 'delete'], [$editor->roles->first()]);",
          "216:         $this->entities->setPermissions($newBook, ['view', 'update', 'create', 'delete'], [$editor->roles->first()]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257:     public function test_book_sort()",
          "258:     {",
          "259:         $oldBook = Book::query()->first();",
          "262:         $pagesToMove = Page::query()->take(5)->get();",
          "",
          "[Removed Lines]",
          "260:         $chapterToMove = $this->newChapter(['name' => 'chapter to move'], $oldBook);",
          "261:         $newBook = $this->newBook(['name' => 'New sort book']);",
          "",
          "[Added Lines]",
          "260:         $chapterToMove = $this->entities->newChapter(['name' => 'chapter to move'], $oldBook);",
          "261:         $newBook = $this->entities->newBook(['name' => 'New sort book']);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "323:         $page = Page::query()->where('chapter_id', '!=', 0)->first();",
          "325:         $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();",
          "328:         $sortData = [",
          "329:             'id'            => $page->id,",
          "",
          "[Removed Lines]",
          "326:         $this->setEntityRestrictions($otherChapter);",
          "",
          "[Added Lines]",
          "326:         $this->entities->setPermissions($otherChapter);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "347:         $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();",
          "348:         $editor = $this->getEditor();",
          "351:         $sortData = [",
          "352:             'id'            => $page->id,",
          "",
          "[Removed Lines]",
          "349:         $this->setEntityRestrictions($otherChapter->book, ['update', 'delete'], [$editor->roles()->first()]);",
          "",
          "[Added Lines]",
          "349:         $this->entities->setPermissions($otherChapter->book, ['update', 'delete'], [$editor->roles()->first()]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "370:         $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();",
          "371:         $editor = $this->getEditor();",
          "374:         $sortData = [",
          "375:             'id'            => $page->id,",
          "",
          "[Removed Lines]",
          "372:         $this->setEntityRestrictions($otherChapter, ['view', 'delete'], [$editor->roles()->first()]);",
          "",
          "[Added Lines]",
          "372:         $this->entities->setPermissions($otherChapter, ['view', 'delete'], [$editor->roles()->first()]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "393:         $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();",
          "394:         $editor = $this->getEditor();",
          "397:         $sortData = [",
          "398:             'id'            => $page->id,",
          "",
          "[Removed Lines]",
          "395:         $this->setEntityRestrictions($page, ['view', 'delete'], [$editor->roles()->first()]);",
          "",
          "[Added Lines]",
          "395:         $this->entities->setPermissions($page, ['view', 'delete'], [$editor->roles()->first()]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "416:         $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();",
          "417:         $editor = $this->getEditor();",
          "420:         $sortData = [",
          "421:             'id'            => $page->id,",
          "",
          "[Removed Lines]",
          "418:         $this->setEntityRestrictions($page, ['view', 'update'], [$editor->roles()->first()]);",
          "",
          "[Added Lines]",
          "418:         $this->entities->setPermissions($page, ['view', 'update'], [$editor->roles()->first()]);",
          "",
          "---------------"
        ],
        "tests/Entity/TagTest.php||tests/Entity/TagTest.php": [
          "File: tests/Entity/TagTest.php -> tests/Entity/TagTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:         $resp->assertSee('GreatTestContent');",
          "190:         $page->restricted = true;",
          "193:         $resp = $this->asEditor()->get('/tags');",
          "194:         $resp->assertDontSee('SuperCategory');",
          "",
          "[Removed Lines]",
          "191:         $this->regenEntityPermissions($page);",
          "",
          "[Added Lines]",
          "191:         $this->entities->regenPermissions($page);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:     {",
          "208:         $this->asEditor();",
          "211:             $entity->tags()->create(['name' => 'My Super Tag Name', 'value' => 'An-awesome-value']);",
          "212:             $html = $this->withHtml($this->get($entity->getUrl()));",
          "213:             $html->assertElementExists('body.tag-name-mysupertagname.tag-value-anawesomevalue.tag-pair-mysupertagname-anawesomevalue');",
          "",
          "[Removed Lines]",
          "210:         foreach ($this->getEachEntityType() as $entity) {",
          "",
          "[Added Lines]",
          "210:         foreach ($this->entities->all() as $entity) {",
          "",
          "---------------"
        ],
        "tests/Helpers/EntityProvider.php||tests/Helpers/EntityProvider.php": [
          "File: tests/Helpers/EntityProvider.php -> tests/Helpers/EntityProvider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Tests\\Helpers;",
          "5: use BookStack\\Auth\\Role;",
          "6: use BookStack\\Auth\\User;",
          "7: use BookStack\\Entities\\Models\\Book;",
          "8: use BookStack\\Entities\\Models\\Bookshelf;",
          "9: use BookStack\\Entities\\Models\\Chapter;",
          "10: use BookStack\\Entities\\Models\\Entity;",
          "11: use BookStack\\Entities\\Models\\Page;",
          "12: use BookStack\\Entities\\Repos\\BookRepo;",
          "13: use BookStack\\Entities\\Repos\\BookshelfRepo;",
          "14: use BookStack\\Entities\\Repos\\ChapterRepo;",
          "15: use BookStack\\Entities\\Repos\\PageRepo;",
          "17: class EntityProvider",
          "18: {",
          "22:     protected array $fetchCache = [",
          "23:         'book' => [],",
          "24:         'page' => [],",
          "25:         'bookshelf' => [],",
          "26:         'chapter' => [],",
          "27:     ];",
          "32:     public function page(): Page",
          "33:     {",
          "35:         $page = Page::query()->whereNotIn('id', $this->fetchCache['page'])->first();",
          "36:         $this->addToCache($page);",
          "37:         return $page;",
          "38:     }",
          "43:     public function chapter(): Chapter",
          "44:     {",
          "46:         $chapter = Chapter::query()->whereNotIn('id', $this->fetchCache['chapter'])->first();",
          "47:         $this->addToCache($chapter);",
          "48:         return $chapter;",
          "49:     }",
          "54:     public function book(): Book",
          "55:     {",
          "57:         $book = Book::query()->whereNotIn('id', $this->fetchCache['book'])->first();",
          "58:         $this->addToCache($book);",
          "59:         return $book;",
          "60:     }",
          "65:     public function shelf(): Bookshelf",
          "66:     {",
          "68:         $shelf = Bookshelf::query()->whereNotIn('id', $this->fetchCache['bookshelf'])->first();",
          "69:         $this->addToCache($shelf);",
          "70:         return $shelf;",
          "71:     }",
          "77:     public function all(): array",
          "78:     {",
          "79:         return [",
          "80:             'page'      => $this->page(),",
          "81:             'chapter'   => $this->chapter(),",
          "82:             'book'      => $this->book(),",
          "83:             'bookshelf' => $this->shelf(),",
          "84:         ];",
          "85:     }",
          "91:     public function createChainBelongingToUser(User $creatorUser, ?User $updaterUser = null): array",
          "92:     {",
          "93:         if (empty($updaterUser)) {",
          "94:             $updaterUser = $creatorUser;",
          "95:         }",
          "97:         $userAttrs = ['created_by' => $creatorUser->id, 'owned_by' => $creatorUser->id, 'updated_by' => $updaterUser->id];",
          "99:         $book = Book::factory()->create($userAttrs);",
          "100:         $chapter = Chapter::factory()->create(array_merge(['book_id' => $book->id], $userAttrs));",
          "101:         $page = Page::factory()->create(array_merge(['book_id' => $book->id, 'chapter_id' => $chapter->id], $userAttrs));",
          "103:         $book->rebuildPermissions();",
          "104:         $this->addToCache([$page, $chapter, $book]);",
          "106:         return compact('book', 'chapter', 'page');",
          "107:     }",
          "112:     public function newShelf(array $input = ['name' => 'test shelf', 'description' => 'My new test shelf']): Bookshelf",
          "113:     {",
          "114:         $shelf = app(BookshelfRepo::class)->create($input, []);",
          "115:         $this->addToCache($shelf);",
          "116:         return $shelf;",
          "117:     }",
          "122:     public function newBook(array $input = ['name' => 'test book', 'description' => 'My new test book']): Book",
          "123:     {",
          "124:         $book = app(BookRepo::class)->create($input);",
          "125:         $this->addToCache($book);",
          "126:         return $book;",
          "127:     }",
          "132:     public function newChapter(array $input, Book $book): Chapter",
          "133:     {",
          "134:         $chapter = app(ChapterRepo::class)->create($input, $book);",
          "135:         $this->addToCache($chapter);",
          "136:         return $chapter;",
          "137:     }",
          "142:     public function newPage(array $input = ['name' => 'test page', 'html' => 'My new test page']): Page",
          "143:     {",
          "144:         $book = Book::query()->first();",
          "145:         $pageRepo = app(PageRepo::class);",
          "146:         $draftPage = $pageRepo->getNewDraftPage($book);",
          "147:         $this->addToCache($draftPage);",
          "148:         return $pageRepo->publishDraft($draftPage, $input);",
          "149:     }",
          "155:     public function regenPermissions(Entity $entity): void",
          "156:     {",
          "157:         $entity->rebuildPermissions();",
          "158:         $entity->load('jointPermissions');",
          "159:     }",
          "167:     public function setPermissions(Entity $entity, array $actions = [], array $roles = []): void",
          "168:     {",
          "169:         $entity->restricted = true;",
          "170:         $entity->permissions()->delete();",
          "172:         $permissions = [];",
          "173:         foreach ($actions as $action) {",
          "174:             foreach ($roles as $role) {",
          "175:                 $permissions[] = [",
          "176:                     'role_id' => $role->id,",
          "177:                     'action'  => strtolower($action),",
          "178:                 ];",
          "179:             }",
          "180:         }",
          "182:         $entity->permissions()->createMany($permissions);",
          "183:         $entity->save();",
          "184:         $entity->load('permissions');",
          "185:         $this->regenPermissions($entity);",
          "186:     }",
          "191:     protected function addToCache($entities): void",
          "192:     {",
          "193:         if (!is_array($entities)) {",
          "194:             $entities = [$entities];",
          "195:         }",
          "197:         foreach ($entities as $entity) {",
          "198:             $this->fetchCache[$entity->getType()][] = $entity->id;",
          "199:         }",
          "200:     }",
          "201: }",
          "",
          "---------------"
        ],
        "tests/HomepageTest.php||tests/HomepageTest.php": [
          "File: tests/HomepageTest.php -> tests/HomepageTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:         $this->asEditor();",
          "25:         $name = 'My custom homepage';",
          "26:         $content = str_repeat('This is the body content of my custom homepage.', 20);",
          "28:         $this->setSettings(['app-homepage' => $customPage->id]);",
          "29:         $this->setSettings(['app-homepage-type' => 'page']);",
          "",
          "[Removed Lines]",
          "27:         $customPage = $this->newPage(['name' => $name, 'html' => $content]);",
          "",
          "[Added Lines]",
          "27:         $customPage = $this->entities->newPage(['name' => $name, 'html' => $content]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:         $this->asEditor();",
          "42:         $name = 'My custom homepage';",
          "43:         $content = str_repeat('This is the body content of my custom homepage.', 20);",
          "45:         $this->setSettings([",
          "46:             'app-homepage'      => $customPage->id,",
          "47:             'app-homepage-type' => 'page',",
          "",
          "[Removed Lines]",
          "44:         $customPage = $this->newPage(['name' => $name, 'html' => $content]);",
          "",
          "[Added Lines]",
          "44:         $customPage = $this->entities->newPage(['name' => $name, 'html' => $content]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:         $this->asEditor();",
          "68:         $name = 'My custom homepage';",
          "69:         $content = str_repeat('This is the body content of my custom homepage.', 20);",
          "71:         $this->setSettings([",
          "72:             'app-homepage'      => $customPage->id,",
          "73:             'app-homepage-type' => 'default',",
          "",
          "[Removed Lines]",
          "70:         $customPage = $this->newPage(['name' => $name, 'html' => $content]);",
          "",
          "[Added Lines]",
          "70:         $customPage = $this->entities->newPage(['name' => $name, 'html' => $content]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:         $included->save();",
          "109:         $name = 'My custom homepage';",
          "111:         $this->setSettings(['app-homepage' => $customPage->id]);",
          "112:         $this->setSettings(['app-homepage-type' => 'page']);",
          "",
          "[Removed Lines]",
          "110:         $customPage = $this->newPage(['name' => $name, 'html' => '{{@' . $included->id . '}}']);",
          "",
          "[Added Lines]",
          "110:         $customPage = $this->entities->newPage(['name' => $name, 'html' => '{{@' . $included->id . '}}']);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:         $this->withHtml($homeVisit)->assertElementNotContains('.content-wrap', $book->name);",
          "181:         $homeVisit = $this->get('/');",
          "182:         $this->withHtml($homeVisit)->assertElementContains('.content-wrap', $shelf->name);",
          "183:         $this->withHtml($homeVisit)->assertElementContains('.content-wrap', $book->name);",
          "",
          "[Removed Lines]",
          "180:         $this->setEntityRestrictions($book, ['view'], [$editor->roles()->first()]);",
          "",
          "[Added Lines]",
          "180:         $this->entities->setPermissions($book, ['view'], [$editor->roles()->first()]);",
          "",
          "---------------"
        ],
        "tests/Permissions/EntityPermissionsTest.php||tests/Permissions/EntityPermissionsTest.php": [
          "File: tests/Permissions/EntityPermissionsTest.php -> tests/Permissions/EntityPermissionsTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:             $this->user->roles->first(),",
          "37:             $this->viewer->roles->first(),",
          "38:         ];",
          "40:     }",
          "42:     public function test_bookshelf_view_restriction()",
          "",
          "[Removed Lines]",
          "39:         $this->setEntityRestrictions($entity, $actions, $roles);",
          "",
          "[Added Lines]",
          "39:         $this->entities->setPermissions($entity, $actions, $roles);",
          "",
          "---------------"
        ],
        "tests/Permissions/ExportPermissionsTest.php||tests/Permissions/ExportPermissionsTest.php": [
          "File: tests/Permissions/ExportPermissionsTest.php -> tests/Permissions/ExportPermissionsTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:             $resp->assertSee($pageContent);",
          "28:         }",
          "32:         foreach ($formats as $format) {",
          "33:             $resp = $this->get($chapter->getUrl(\"export/{$format}\"));",
          "",
          "[Removed Lines]",
          "30:         $this->setEntityRestrictions($page, []);",
          "",
          "[Added Lines]",
          "30:         $this->entities->setPermissions($page, []);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:             $resp->assertSee($pageContent);",
          "56:         }",
          "60:         foreach ($formats as $format) {",
          "61:             $resp = $this->get($book->getUrl(\"export/{$format}\"));",
          "",
          "[Removed Lines]",
          "58:         $this->setEntityRestrictions($page, []);",
          "",
          "[Added Lines]",
          "58:         $this->entities->setPermissions($page, []);",
          "",
          "---------------"
        ],
        "tests/Permissions/RolesTest.php||tests/Permissions/RolesTest.php": [
          "File: tests/Permissions/RolesTest.php -> tests/Permissions/RolesTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:     {",
          "287:         $otherUsersPage = Page::query()->first();",
          "",
          "[Removed Lines]",
          "288:         $content = $this->createEntityChainBelongingToUser($this->user);",
          "",
          "[Added Lines]",
          "288:         $content = $this->entities->createChainBelongingToUser($this->user);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355:     {",
          "357:         $otherShelf = Bookshelf::query()->first();",
          "359:         $ownShelf->forceFill(['owned_by' => $this->user->id, 'updated_by' => $this->user->id])->save();",
          "362:         $this->checkAccessPermission('bookshelf-update-own', [",
          "363:             $ownShelf->getUrl('/edit'),",
          "",
          "[Removed Lines]",
          "358:         $ownShelf = $this->newShelf(['name' => 'test-shelf', 'slug' => 'test-shelf']);",
          "360:         $this->regenEntityPermissions($ownShelf);",
          "",
          "[Added Lines]",
          "358:         $ownShelf = $this->entities->newShelf(['name' => 'test-shelf', 'slug' => 'test-shelf']);",
          "360:         $this->entities->regenPermissions($ownShelf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "386:         $this->giveUserPermissions($this->user, ['bookshelf-update-all']);",
          "388:         $otherShelf = Bookshelf::query()->first();",
          "390:         $ownShelf->forceFill(['owned_by' => $this->user->id, 'updated_by' => $this->user->id])->save();",
          "393:         $this->checkAccessPermission('bookshelf-delete-own', [",
          "394:             $ownShelf->getUrl('/delete'),",
          "",
          "[Removed Lines]",
          "389:         $ownShelf = $this->newShelf(['name' => 'test-shelf', 'slug' => 'test-shelf']);",
          "391:         $this->regenEntityPermissions($ownShelf);",
          "",
          "[Added Lines]",
          "389:         $ownShelf = $this->entities->newShelf(['name' => 'test-shelf', 'slug' => 'test-shelf']);",
          "391:         $this->entities->regenPermissions($ownShelf);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "438:     {",
          "440:         $otherBook = Book::query()->take(1)->get()->first();",
          "442:         $this->checkAccessPermission('book-update-own', [",
          "443:             $ownBook->getUrl() . '/edit',",
          "444:         ], [",
          "",
          "[Removed Lines]",
          "441:         $ownBook = $this->createEntityChainBelongingToUser($this->user)['book'];",
          "",
          "[Added Lines]",
          "441:         $ownBook = $this->entities->createChainBelongingToUser($this->user)['book'];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "466:         $this->giveUserPermissions($this->user, ['book-update-all']);",
          "468:         $otherBook = Book::query()->take(1)->get()->first();",
          "470:         $this->checkAccessPermission('book-delete-own', [",
          "471:             $ownBook->getUrl() . '/delete',",
          "472:         ], [",
          "",
          "[Removed Lines]",
          "469:         $ownBook = $this->createEntityChainBelongingToUser($this->user)['book'];",
          "",
          "[Added Lines]",
          "469:         $ownBook = $this->entities->createChainBelongingToUser($this->user)['book'];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "501:     {",
          "503:         $book = Book::query()->take(1)->get()->first();",
          "505:         $this->checkAccessPermission('chapter-create-own', [",
          "506:             $ownBook->getUrl('/create-chapter'),",
          "507:         ], [",
          "",
          "[Removed Lines]",
          "504:         $ownBook = $this->createEntityChainBelongingToUser($this->user)['book'];",
          "",
          "[Added Lines]",
          "504:         $ownBook = $this->entities->createChainBelongingToUser($this->user)['book'];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "538:     {",
          "540:         $otherChapter = Chapter::query()->first();",
          "542:         $this->checkAccessPermission('chapter-update-own', [",
          "543:             $ownChapter->getUrl() . '/edit',",
          "544:         ], [",
          "",
          "[Removed Lines]",
          "541:         $ownChapter = $this->createEntityChainBelongingToUser($this->user)['chapter'];",
          "",
          "[Added Lines]",
          "541:         $ownChapter = $this->entities->createChainBelongingToUser($this->user)['chapter'];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "566:         $this->giveUserPermissions($this->user, ['chapter-update-all']);",
          "568:         $otherChapter = Chapter::query()->first();",
          "570:         $this->checkAccessPermission('chapter-delete-own', [",
          "571:             $ownChapter->getUrl() . '/delete',",
          "572:         ], [",
          "",
          "[Removed Lines]",
          "569:         $ownChapter = $this->createEntityChainBelongingToUser($this->user)['chapter'];",
          "",
          "[Added Lines]",
          "569:         $ownChapter = $this->entities->createChainBelongingToUser($this->user)['chapter'];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "609:         $chapter = Chapter::query()->first();",
          "612:         $ownBook = $entities['book'];",
          "613:         $ownChapter = $entities['chapter'];",
          "",
          "[Removed Lines]",
          "611:         $entities = $this->createEntityChainBelongingToUser($this->user);",
          "",
          "[Added Lines]",
          "611:         $entities = $this->entities->createChainBelongingToUser($this->user);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "699:     {",
          "701:         $otherPage = Page::query()->first();",
          "703:         $this->checkAccessPermission('page-update-own', [",
          "704:             $ownPage->getUrl() . '/edit',",
          "705:         ], [",
          "",
          "[Removed Lines]",
          "702:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "702:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "727:         $this->giveUserPermissions($this->user, ['page-update-all']);",
          "729:         $otherPage = Page::query()->first();",
          "731:         $this->checkAccessPermission('page-delete-own', [",
          "732:             $ownPage->getUrl() . '/delete',",
          "733:         ], [",
          "",
          "[Removed Lines]",
          "730:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "730:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "865:         $admin = $this->getAdmin();",
          "867:         $book = Book::factory()->create(['created_by' => $admin->id, 'updated_by' => $admin->id]);",
          "869:         $this->actingAs($this->getViewer())->get($book->getUrl())",
          "870:             ->assertDontSee('Create a new page')",
          "871:             ->assertDontSee('Add a chapter');",
          "874:         $chapter = Chapter::factory()->create(['created_by' => $admin->id, 'updated_by' => $admin->id, 'book_id' => $book->id]);",
          "876:         $this->actingAs($this->getViewer())->get($chapter->getUrl())",
          "877:             ->assertDontSee('Create a new page')",
          "878:             ->assertDontSee('Sort the current book');",
          "",
          "[Removed Lines]",
          "868:         $this->regenEntityPermissions($book);",
          "875:         $this->regenEntityPermissions($chapter);",
          "",
          "[Added Lines]",
          "868:         $this->entities->regenPermissions($book);",
          "875:         $this->entities->regenPermissions($chapter);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "881:     public function test_comment_create_permission()",
          "882:     {",
          "885:         $this->actingAs($this->user)",
          "886:             ->addComment($ownPage)",
          "",
          "[Removed Lines]",
          "883:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "883:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "896:     public function test_comment_update_own_permission()",
          "897:     {",
          "899:         $this->giveUserPermissions($this->user, ['comment-create-all']);",
          "900:         $this->actingAs($this->user)->addComment($ownPage);",
          "",
          "[Removed Lines]",
          "898:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "898:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "913:     public function test_comment_update_all_permission()",
          "914:     {",
          "917:         $this->asAdmin()->addComment($ownPage);",
          "919:         $comment = $ownPage->comments()->latest()->first();",
          "",
          "[Removed Lines]",
          "916:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "916:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "930:     public function test_comment_delete_own_permission()",
          "931:     {",
          "934:         $this->giveUserPermissions($this->user, ['comment-create-all']);",
          "935:         $this->actingAs($this->user)->addComment($ownPage);",
          "",
          "[Removed Lines]",
          "933:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "933:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "949:     public function test_comment_delete_all_permission()",
          "950:     {",
          "953:         $this->asAdmin()->addComment($ownPage);",
          "955:         $comment = $ownPage->comments()->latest()->first();",
          "",
          "[Removed Lines]",
          "952:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "952:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------"
        ],
        "tests/PublicActionTest.php||tests/PublicActionTest.php": [
          "File: tests/PublicActionTest.php -> tests/PublicActionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:         $this->setSettings(['app-public' => 'true']);",
          "179:         $book = Book::query()->first();",
          "182:         $resp = $this->get($book->getUrl());",
          "183:         $resp->assertSee('Book not found');",
          "",
          "[Removed Lines]",
          "180:         $this->setEntityRestrictions($book);",
          "",
          "[Added Lines]",
          "180:         $this->entities->setPermissions($book);",
          "",
          "---------------"
        ],
        "tests/References/CrossLinkParserTest.php||tests/References/CrossLinkParserTest.php": [
          "File: tests/References/CrossLinkParserTest.php -> tests/References/CrossLinkParserTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: {",
          "11:     public function test_instance_with_entity_resolvers_matches_entity_links()",
          "12:     {",
          "14:         $otherPage = Page::query()->where('id', '!=', $entities['page']->id)->first();",
          "16:         $html = '",
          "",
          "[Removed Lines]",
          "13:         $entities = $this->getEachEntityType();",
          "",
          "[Added Lines]",
          "13:         $entities = $this->entities->all();",
          "",
          "---------------"
        ],
        "tests/References/ReferencesTest.php||tests/References/ReferencesTest.php": [
          "File: tests/References/ReferencesTest.php -> tests/References/ReferencesTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     public function test_references_to_count_visible_on_entity_show_view()",
          "59:     {",
          "62:         $otherPage = Page::query()->where('id', '!=', $entities['page']->id)->first();",
          "",
          "[Removed Lines]",
          "60:         $entities = $this->getEachEntityType();",
          "",
          "[Added Lines]",
          "60:         $entities = $this->entities->all();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     public function test_references_to_visible_on_references_page()",
          "81:     {",
          "83:         $this->asEditor();",
          "84:         foreach ($entities as $entity) {",
          "85:             $this->createReference($entities['page'], $entity);",
          "",
          "[Removed Lines]",
          "82:         $entities = $this->getEachEntityType();",
          "",
          "[Added Lines]",
          "82:         $entities = $this->entities->all();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:         $pageB = Page::query()->where('id', '!=', $page->id)->first();",
          "102:         $this->createReference($pageB, $page);",
          "106:         $this->asEditor()->get($page->getUrl('/references'))->assertDontSee($pageB->name);",
          "107:         $this->asAdmin()->get($page->getUrl('/references'))->assertSee($pageB->name);",
          "",
          "[Removed Lines]",
          "104:         $this->setEntityRestrictions($pageB);",
          "",
          "[Added Lines]",
          "104:         $this->entities->setPermissions($pageB);",
          "",
          "---------------"
        ],
        "tests/TestCase.php||tests/TestCase.php": [
          "File: tests/TestCase.php -> tests/TestCase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use BookStack\\Auth\\Permissions\\RolePermission;",
          "8: use BookStack\\Auth\\Role;",
          "9: use BookStack\\Auth\\User;",
          "13: use BookStack\\Entities\\Models\\Entity;",
          "19: use BookStack\\Settings\\SettingService;",
          "20: use BookStack\\Uploads\\HttpFetcher;",
          "21: use GuzzleHttp\\Client;",
          "",
          "[Removed Lines]",
          "10: use BookStack\\Entities\\Models\\Book;",
          "11: use BookStack\\Entities\\Models\\Bookshelf;",
          "12: use BookStack\\Entities\\Models\\Chapter;",
          "14: use BookStack\\Entities\\Models\\Page;",
          "15: use BookStack\\Entities\\Repos\\BookRepo;",
          "16: use BookStack\\Entities\\Repos\\BookshelfRepo;",
          "17: use BookStack\\Entities\\Repos\\ChapterRepo;",
          "18: use BookStack\\Entities\\Repos\\PageRepo;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: use Monolog\\Logger;",
          "35: use Psr\\Http\\Client\\ClientInterface;",
          "36: use Ssddanbrown\\AssertHtml\\TestsHtml;",
          "38: abstract class TestCase extends BaseTestCase",
          "39: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: use Tests\\Helpers\\EntityProvider;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:     protected ?User $admin = null;",
          "45:     protected ?User $editor = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     protected EntityProvider $entities;",
          "41:     protected function setUp(): void",
          "42:     {",
          "43:         $this->entities = new EntityProvider();",
          "44:         parent::setUp();",
          "45:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:         return User::query()->where('system_name', '=', null)->get()->last();",
          "136:     }",
          "",
          "[Removed Lines]",
          "141:     protected function regenEntityPermissions(Entity $entity): void",
          "142:     {",
          "143:         $entity->rebuildPermissions();",
          "144:         $entity->load('jointPermissions');",
          "145:     }",
          "150:     public function newShelf(array $input = ['name' => 'test shelf', 'description' => 'My new test shelf']): Bookshelf",
          "151:     {",
          "152:         return app(BookshelfRepo::class)->create($input, []);",
          "153:     }",
          "158:     public function newBook(array $input = ['name' => 'test book', 'description' => 'My new test book']): Book",
          "159:     {",
          "160:         return app(BookRepo::class)->create($input);",
          "161:     }",
          "166:     public function newChapter(array $input, Book $book): Chapter",
          "167:     {",
          "168:         return app(ChapterRepo::class)->create($input, $book);",
          "169:     }",
          "174:     public function newPage(array $input = ['name' => 'test page', 'html' => 'My new test page']): Page",
          "175:     {",
          "176:         $book = Book::query()->first();",
          "177:         $pageRepo = app(PageRepo::class);",
          "178:         $draftPage = $pageRepo->getNewDraftPage($book);",
          "180:         return $pageRepo->publishDraft($draftPage, $input);",
          "181:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "191:         }",
          "192:     }",
          "",
          "[Removed Lines]",
          "197:     protected function setEntityRestrictions(Entity $entity, array $actions = [], array $roles = []): void",
          "198:     {",
          "199:         $entity->restricted = true;",
          "200:         $entity->permissions()->delete();",
          "202:         $permissions = [];",
          "203:         foreach ($actions as $action) {",
          "204:             foreach ($roles as $role) {",
          "205:                 $permissions[] = [",
          "206:                     'role_id' => $role->id,",
          "207:                     'action'  => strtolower($action),",
          "208:                 ];",
          "209:             }",
          "210:         }",
          "211:         $entity->permissions()->createMany($permissions);",
          "213:         $entity->save();",
          "214:         $entity->load('permissions');",
          "215:         $this->app->make(JointPermissionBuilder::class)->rebuildForEntity($entity);",
          "216:         $entity->load('jointPermissions');",
          "217:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "262:         return $permissionRepo->saveNewRole($roleData);",
          "263:     }",
          "",
          "[Removed Lines]",
          "270:     protected function createEntityChainBelongingToUser(User $creatorUser, ?User $updaterUser = null): array",
          "271:     {",
          "272:         if (empty($updaterUser)) {",
          "273:             $updaterUser = $creatorUser;",
          "274:         }",
          "276:         $userAttrs = ['created_by' => $creatorUser->id, 'owned_by' => $creatorUser->id, 'updated_by' => $updaterUser->id];",
          "277:         $book = Book::factory()->create($userAttrs);",
          "278:         $chapter = Chapter::factory()->create(array_merge(['book_id' => $book->id], $userAttrs));",
          "279:         $page = Page::factory()->create(array_merge(['book_id' => $book->id, 'chapter_id' => $chapter->id], $userAttrs));",
          "281:         $this->app->make(JointPermissionBuilder::class)->rebuildForEntity($book);",
          "283:         return compact('book', 'chapter', 'page');",
          "284:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "461:         $this->assertDatabaseHas('activities', $detailsToCheck);",
          "462:     }",
          "476: }",
          "",
          "[Removed Lines]",
          "467:     protected function getEachEntityType(): array",
          "468:     {",
          "469:         return [",
          "470:             'page'      => Page::query()->first(),",
          "471:             'chapter'   => Chapter::query()->first(),",
          "472:             'book'      => Book::query()->first(),",
          "473:             'bookshelf' => Bookshelf::query()->first(),",
          "474:         ];",
          "475:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/Uploads/ImageTest.php||tests/Uploads/ImageTest.php": [
          "File: tests/Uploads/ImageTest.php -> tests/Uploads/ImageTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:         $this->get($expectedUrl)->assertOk();",
          "347:         $resp = $this->get($expectedUrl);",
          "348:         $resp->assertNotFound();",
          "",
          "[Removed Lines]",
          "345:         $this->setEntityRestrictions($page, [], []);",
          "",
          "[Added Lines]",
          "345:         $this->entities->setPermissions($page, [], []);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368:         $this->get($expectedUrl)->assertOk();",
          "372:         $resp = $this->get($expectedUrl);",
          "373:         $resp->assertNotFound();",
          "",
          "[Removed Lines]",
          "370:         $this->setEntityRestrictions($page, [], []);",
          "",
          "[Added Lines]",
          "370:         $this->entities->setPermissions($page, [], []);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "400:         $export = $this->get($pageB->getUrl('/export/html'));",
          "401:         $this->assertStringContainsString($encodedImageContent, $export->getContent());",
          "405:         $export = $this->get($pageB->getUrl('/export/html'));",
          "406:         $this->assertStringNotContainsString($encodedImageContent, $export->getContent());",
          "",
          "[Removed Lines]",
          "403:         $this->setEntityRestrictions($pageA, [], []);",
          "",
          "[Added Lines]",
          "403:         $this->entities->setPermissions($pageA, [], []);",
          "",
          "---------------"
        ],
        "tests/User/UserProfileTest.php||tests/User/UserProfileTest.php": [
          "File: tests/User/UserProfileTest.php -> tests/User/UserProfileTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     public function test_profile_page_shows_recent_entities()",
          "31:     {",
          "34:         $resp = $this->asAdmin()->get('/user/' . $this->user->slug);",
          "",
          "[Removed Lines]",
          "32:         $content = $this->createEntityChainBelongingToUser($this->user, $this->user);",
          "",
          "[Added Lines]",
          "32:         $content = $this->entities->createChainBelongingToUser($this->user, $this->user);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:             ->assertElementContains('#content-counts', '0 Chapters')",
          "51:             ->assertElementContains('#content-counts', '0 Pages');",
          "55:         $resp = $this->asAdmin()->get('/user/' . $newUser->slug)",
          "56:             ->assertSee($newUser->name);",
          "",
          "[Removed Lines]",
          "53:         $this->createEntityChainBelongingToUser($newUser, $newUser);",
          "",
          "[Added Lines]",
          "53:         $this->entities->createChainBelongingToUser($newUser, $newUser);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:     {",
          "64:         $newUser = User::factory()->create();",
          "65:         $this->actingAs($newUser);",
          "67:         Activity::add(ActivityType::BOOK_UPDATE, $entities['book']);",
          "68:         Activity::add(ActivityType::PAGE_CREATE, $entities['page']);",
          "",
          "[Removed Lines]",
          "66:         $entities = $this->createEntityChainBelongingToUser($newUser, $newUser);",
          "",
          "[Added Lines]",
          "66:         $entities = $this->entities->createChainBelongingToUser($newUser, $newUser);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:     {",
          "78:         $newUser = User::factory()->create();",
          "79:         $this->actingAs($newUser);",
          "81:         Activity::add(ActivityType::BOOK_UPDATE, $entities['book']);",
          "82:         Activity::add(ActivityType::PAGE_CREATE, $entities['page']);",
          "",
          "[Removed Lines]",
          "80:         $entities = $this->createEntityChainBelongingToUser($newUser, $newUser);",
          "",
          "[Added Lines]",
          "80:         $entities = $this->entities->createChainBelongingToUser($newUser, $newUser);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2989852520ee05581abbf156a0b6aa8aad2cc910",
      "candidate_info": {
        "commit_hash": "2989852520ee05581abbf156a0b6aa8aad2cc910",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/2989852520ee05581abbf156a0b6aa8aad2cc910",
        "files": [
          "app/Auth/Permissions/JointPermissionBuilder.php",
          "app/Auth/Permissions/SimpleEntityData.php",
          "tests/Api/AttachmentsApiTest.php"
        ],
        "message": "Added simple data model for faster permission generation",
        "before_after_code_files": [
          "app/Auth/Permissions/JointPermissionBuilder.php||app/Auth/Permissions/JointPermissionBuilder.php",
          "app/Auth/Permissions/SimpleEntityData.php||app/Auth/Permissions/SimpleEntityData.php",
          "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
          ],
          "candidate": [
            "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Auth/Permissions/JointPermissionBuilder.php||app/Auth/Permissions/JointPermissionBuilder.php": [
          "File: app/Auth/Permissions/JointPermissionBuilder.php -> app/Auth/Permissions/JointPermissionBuilder.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     public function rebuildForAll()",
          "27:     {",
          "28:         JointPermission::query()->truncate();",
          "32:         $roles = Role::query()->with('permissions')->get()->all();",
          "",
          "[Removed Lines]",
          "29:         $this->readyEntityCache();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     {",
          "106:         $this->entityCache = [];",
          "108:         foreach ($entities as $entity) {",
          "113:             }",
          "116:         }",
          "117:     }",
          "123:     {",
          "129:     }",
          "135:     {",
          "143:     }",
          "148:     protected function bookFetchQuery(): Builder",
          "149:     {",
          "",
          "[Removed Lines]",
          "104:     protected function readyEntityCache(array $entities = [])",
          "109:             $class = get_class($entity);",
          "111:             if (!isset($this->entityCache[$class])) {",
          "112:                 $this->entityCache[$class] = [];",
          "115:             $this->entityCache[$class][$entity->getRawAttribute('id')] = $entity;",
          "122:     protected function getBook(int $bookId): ?Book",
          "124:         if ($this->entityCache[Book::class][$bookId] ?? false) {",
          "125:             return $this->entityCache[Book::class][$bookId];",
          "126:         }",
          "128:         return Book::query()->withTrashed()->find($bookId);",
          "134:     protected function getChapter(int $chapterId): ?Chapter",
          "136:         if ($this->entityCache[Chapter::class][$chapterId] ?? false) {",
          "137:             return $this->entityCache[Chapter::class][$chapterId];",
          "138:         }",
          "140:         return Chapter::query()",
          "141:             ->withTrashed()",
          "142:             ->find($chapterId);",
          "",
          "[Added Lines]",
          "101:     protected function readyEntityCache(array $entities)",
          "106:             if (!isset($this->entityCache[$entity->type])) {",
          "107:                 $this->entityCache[$entity->type] = [];",
          "110:             $this->entityCache[$entity->type][$entity->id] = $entity;",
          "117:     protected function getBook(int $bookId): SimpleEntityData",
          "119:         return $this->entityCache['book'][$bookId];",
          "125:     protected function getChapter(int $chapterId): SimpleEntityData",
          "127:         return $this->entityCache['chapter'][$chapterId];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:     protected function deleteManyJointPermissionsForEntities(array $entities)",
          "208:     {",
          "211:         DB::transaction(function () use ($idsByType) {",
          "212:             foreach ($idsByType as $type => $ids) {",
          "",
          "[Removed Lines]",
          "209:         $idsByType = $this->entitiesToTypeIdMap($entities);",
          "",
          "[Added Lines]",
          "188:         $simpleEntities = $this->entitiesToSimpleEntities($entities);",
          "189:         $idsByType = $this->entitiesToTypeIdMap($simpleEntities);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "220:         });",
          "221:     }",
          "232:     {",
          "233:         $this->readyEntityCache($entities);",
          "234:         $jointPermissions = [];",
          "237:         $entityRestrictedMap = [];",
          "238:         foreach ($entities as $entity) {",
          "240:         }",
          "",
          "[Removed Lines]",
          "231:     protected function createManyJointPermissions(array $entities, array $roles)",
          "239:             $entityRestrictedMap[$entity->getMorphClass() . ':' . $entity->getRawAttribute('id')] = boolval($entity->getRawAttribute('restricted'));",
          "",
          "[Added Lines]",
          "207:     protected function entitiesToSimpleEntities(array $entities): array",
          "208:     {",
          "209:         $simpleEntities = [];",
          "211:         foreach ($entities as $entity) {",
          "212:             $attrs = $entity->getAttributes();",
          "213:             $simple = new SimpleEntityData();",
          "214:             $simple->id = $attrs['id'];",
          "215:             $simple->type = $entity->getMorphClass();",
          "216:             $simple->restricted = boolval($attrs['restricted'] ?? 0);",
          "217:             $simple->owned_by = $attrs['owned_by'] ?? 0;",
          "218:             $simple->book_id = $attrs['book_id'] ?? null;",
          "219:             $simple->chapter_id = $attrs['chapter_id'] ?? null;",
          "220:             $simpleEntities[] = $simple;",
          "221:         }",
          "223:         return $simpleEntities;",
          "224:     }",
          "232:     protected function createManyJointPermissions(array $originalEntities, array $roles)",
          "234:         $entities = $this->entitiesToSimpleEntities($originalEntities);",
          "241:             $entityRestrictedMap[$entity->type . ':' . $entity->id] = $entity->restricted;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "262:         foreach ($entities as $entity) {",
          "263:             foreach ($roles as $role) {",
          "264:                 foreach ($this->getActions($entity) as $action) {",
          "266:                 }",
          "267:             }",
          "268:         }",
          "",
          "[Removed Lines]",
          "265:                     $jointPermissions[] = $this->createJointPermissionData($entity, $role, $action, $permissionMap, $rolePermissionMap);",
          "",
          "[Added Lines]",
          "267:                     $jointPermissions[] = $this->createJointPermissionData(",
          "268:                         $entity,",
          "269:                         $role->getRawAttribute('id'),",
          "270:                         $action,",
          "271:                         $permissionMap,",
          "272:                         $rolePermissionMap,",
          "273:                         $role->system_name === 'admin'",
          "274:                     );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "285:         $idsByType = [];",
          "287:         foreach ($entities as $entity) {",
          "292:             }",
          "295:         }",
          "297:         return $idsByType;",
          "",
          "[Removed Lines]",
          "288:             $type = $entity->getMorphClass();",
          "290:             if (!isset($idsByType[$type])) {",
          "291:                 $idsByType[$type] = [];",
          "294:             $idsByType[$type][] = $entity->getRawAttribute('id');",
          "",
          "[Added Lines]",
          "297:             if (!isset($idsByType[$entity->type])) {",
          "298:                 $idsByType[$entity->type] = [];",
          "301:             $idsByType[$entity->type][] = $entity->id;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "306:     {",
          "307:         $idsByType = $this->entitiesToTypeIdMap($entities);",
          "308:         $permissionFetch = EntityPermission::query();",
          "",
          "[Removed Lines]",
          "305:     protected function getEntityPermissionsForEntities(array $entities)",
          "",
          "[Added Lines]",
          "312:     protected function getEntityPermissionsForEntities(array $entities): array",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "313:             });",
          "314:         }",
          "317:     }",
          "323:     {",
          "324:         $baseActions = ['view', 'update', 'delete'];",
          "326:             $baseActions[] = 'page-create';",
          "327:         }",
          "329:             $baseActions[] = 'chapter-create';",
          "330:         }",
          "",
          "[Removed Lines]",
          "316:         return $permissionFetch->get();",
          "322:     protected function getActions(Entity $entity): array",
          "325:         if ($entity instanceof Chapter || $entity instanceof Book) {",
          "328:         if ($entity instanceof Book) {",
          "",
          "[Added Lines]",
          "323:         return $permissionFetch->get()->all();",
          "329:     protected function getActions(SimpleEntityData $entity): array",
          "333:         if ($entity->type === 'chapter' || $entity->type === 'book') {",
          "337:         if ($entity->type === 'book') {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "340:     {",
          "344:         $explodedAction = explode('-', $action);",
          "345:         $restrictionAction = end($explodedAction);",
          "349:         }",
          "351:         if ($entity->restricted) {",
          "355:         }",
          "359:         }",
          "362:         $book = $this->getBook($entity->book_id);",
          "364:         $hasPermissiveAccessToParents = !$book->restricted;",
          "368:             $chapter = $this->getChapter($entity->chapter_id);",
          "369:             $hasPermissiveAccessToParents = $hasPermissiveAccessToParents && !$chapter->restricted;",
          "370:             if ($chapter->restricted) {",
          "372:             }",
          "373:         }",
          "375:         return $this->createJointPermissionDataArray(",
          "376:             $entity,",
          "378:             $action,",
          "379:             ($hasExplicitAccessToParents || ($roleHasPermission && $hasPermissiveAccessToParents)),",
          "380:             ($hasExplicitAccessToParents || ($roleHasPermissionOwn && $hasPermissiveAccessToParents))",
          "",
          "[Removed Lines]",
          "339:     protected function createJointPermissionData(Entity $entity, Role $role, string $action, array $permissionMap, array $rolePermissionMap): array",
          "341:         $permissionPrefix = (strpos($action, '-') === false ? ($entity->getType() . '-') : '') . $action;",
          "342:         $roleHasPermission = isset($rolePermissionMap[$role->getRawAttribute('id') . ':' . $permissionPrefix . '-all']);",
          "343:         $roleHasPermissionOwn = isset($rolePermissionMap[$role->getRawAttribute('id') . ':' . $permissionPrefix . '-own']);",
          "347:         if ($role->system_name === 'admin') {",
          "348:             return $this->createJointPermissionDataArray($entity, $role, $action, true, true);",
          "352:             $hasAccess = $this->mapHasActiveRestriction($permissionMap, $entity, $role, $restrictionAction);",
          "354:             return $this->createJointPermissionDataArray($entity, $role, $action, $hasAccess, $hasAccess);",
          "357:         if ($entity instanceof Book || $entity instanceof Bookshelf) {",
          "358:             return $this->createJointPermissionDataArray($entity, $role, $action, $roleHasPermission, $roleHasPermissionOwn);",
          "363:         $hasExplicitAccessToParents = $this->mapHasActiveRestriction($permissionMap, $book, $role, $restrictionAction);",
          "367:         if ($entity instanceof Page && intval($entity->chapter_id) !== 0) {",
          "371:                 $hasExplicitAccessToParents = $this->mapHasActiveRestriction($permissionMap, $chapter, $role, $restrictionAction);",
          "377:             $role,",
          "",
          "[Added Lines]",
          "348:     protected function createJointPermissionData(SimpleEntityData $entity, int $roleId, string $action, array $permissionMap, array $rolePermissionMap, bool $isAdminRole): array",
          "350:         $permissionPrefix = (strpos($action, '-') === false ? ($entity->type . '-') : '') . $action;",
          "351:         $roleHasPermission = isset($rolePermissionMap[$roleId . ':' . $permissionPrefix . '-all']);",
          "352:         $roleHasPermissionOwn = isset($rolePermissionMap[$roleId . ':' . $permissionPrefix . '-own']);",
          "356:         if ($isAdminRole) {",
          "357:             return $this->createJointPermissionDataArray($entity, $roleId, $action, true, true);",
          "361:             $hasAccess = $this->mapHasActiveRestriction($permissionMap, $entity, $roleId, $restrictionAction);",
          "363:             return $this->createJointPermissionDataArray($entity, $roleId, $action, $hasAccess, $hasAccess);",
          "366:         if ($entity->type === 'book' || $entity->type === 'bookshelf') {",
          "367:             return $this->createJointPermissionDataArray($entity, $roleId, $action, $roleHasPermission, $roleHasPermissionOwn);",
          "372:         $hasExplicitAccessToParents = $this->mapHasActiveRestriction($permissionMap, $book, $roleId, $restrictionAction);",
          "376:         if ($entity->type === 'page' && $entity->chapter_id !== 0) {",
          "380:                 $hasExplicitAccessToParents = $this->mapHasActiveRestriction($permissionMap, $chapter, $roleId, $restrictionAction);",
          "386:             $roleId,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "388:     {",
          "391:         return $entityMap[$key] ?? false;",
          "392:     }",
          "",
          "[Removed Lines]",
          "387:     protected function mapHasActiveRestriction(array $entityMap, Entity $entity, Role $role, string $action): bool",
          "389:         $key = $entity->getMorphClass() . ':' . $entity->getRawAttribute('id') . ':' . $role->getRawAttribute('id') . ':' . $action;",
          "",
          "[Added Lines]",
          "396:     protected function mapHasActiveRestriction(array $entityMap, SimpleEntityData $entity, int $roleId, string $action): bool",
          "398:         $key = $entity->type . ':' . $entity->id . ':' . $roleId . ':' . $action;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "399:     {",
          "400:         return [",
          "401:             'action'             => $action,",
          "404:             'has_permission'     => $permissionAll,",
          "405:             'has_permission_own' => $permissionOwn,",
          "408:         ];",
          "409:     }",
          "",
          "[Removed Lines]",
          "398:     protected function createJointPermissionDataArray(Entity $entity, Role $role, string $action, bool $permissionAll, bool $permissionOwn): array",
          "402:             'entity_id'          => $entity->getRawAttribute('id'),",
          "403:             'entity_type'        => $entity->getMorphClass(),",
          "406:             'owned_by'           => $entity->getRawAttribute('owned_by'),",
          "407:             'role_id'            => $role->getRawAttribute('id'),",
          "",
          "[Added Lines]",
          "407:     protected function createJointPermissionDataArray(SimpleEntityData $entity, int $roleId, string $action, bool $permissionAll, bool $permissionOwn): array",
          "411:             'entity_id'          => $entity->id,",
          "412:             'entity_type'        => $entity->type,",
          "415:             'owned_by'           => $entity->owned_by,",
          "416:             'role_id'            => $roleId,",
          "",
          "---------------"
        ],
        "app/Auth/Permissions/SimpleEntityData.php||app/Auth/Permissions/SimpleEntityData.php": [
          "File: app/Auth/Permissions/SimpleEntityData.php -> app/Auth/Permissions/SimpleEntityData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace BookStack\\Auth\\Permissions;",
          "5: class SimpleEntityData",
          "6: {",
          "7:     public int $id;",
          "8:     public string $type;",
          "9:     public bool $restricted;",
          "10:     public int $owned_by;",
          "11:     public ?int $book_id;",
          "12:     public ?int $chapter_id;",
          "13: }",
          "",
          "---------------"
        ],
        "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php": [
          "File: tests/Api/AttachmentsApiTest.php -> tests/Api/AttachmentsApiTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:         $page = Page::query()->first();",
          "264:         $page->draft = true;",
          "266:         $page->save();",
          "267:         $this->regenEntityPermissions($page);",
          "",
          "[Removed Lines]",
          "265:         $page->owned_by = $editor;",
          "",
          "[Added Lines]",
          "265:         $page->owned_by = $editor->id;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9490457d044b51fbe330998ce37dcfe255038f55",
      "candidate_info": {
        "commit_hash": "9490457d044b51fbe330998ce37dcfe255038f55",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/9490457d044b51fbe330998ce37dcfe255038f55",
        "files": [
          "app/Auth/Permissions/PermissionService.php",
          "app/Http/Middleware/ApiAuthenticate.php"
        ],
        "message": "Applied StyleCI changes",
        "before_after_code_files": [
          "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php",
          "app/Http/Middleware/ApiAuthenticate.php||app/Http/Middleware/ApiAuthenticate.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ],
          "candidate": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php": [
          "File: app/Auth/Permissions/PermissionService.php -> app/Auth/Permissions/PermissionService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:         })->where(function ($query) use ($tableDetails, $pageMorphClass) {",
          "627:             $query->where($tableDetails['entityTypeColumn'], '!=', $pageMorphClass)",
          "629:                     $query->select('id')->from('pages')",
          "630:                         ->whereColumn('pages.id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "631:                         ->where($tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'], '=', $pageMorphClass)",
          "",
          "[Removed Lines]",
          "628:                 ->orWhereExists(function(QueryBuilder $query) use ($tableDetails, $pageMorphClass) {",
          "",
          "[Added Lines]",
          "628:                 ->orWhereExists(function (QueryBuilder $query) use ($tableDetails, $pageMorphClass) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "645:     public function filterRelatedEntity(string $entityClass, Builder $query, string $tableName, string $entityIdColumn): Builder",
          "646:     {",
          "647:         $fullEntityIdColumn = $tableName . '.' . $entityIdColumn;",
          "649:         $morphClass = $instance->getMorphClass();",
          "653:             $permissionQuery->select('joint_permissions.role_id')->from('joint_permissions')",
          "654:                 ->whereColumn('joint_permissions.entity_id', '=', $fullEntityIdColumn)",
          "",
          "[Removed Lines]",
          "648:         $instance = new $entityClass;",
          "651:         $existsQuery = function($permissionQuery) use ($fullEntityIdColumn, $morphClass) {",
          "",
          "[Added Lines]",
          "648:         $instance = new $entityClass();",
          "651:         $existsQuery = function ($permissionQuery) use ($fullEntityIdColumn, $morphClass) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "668:         if ($instance instanceof Page) {",
          "671:                 $query->select('id')->from('pages')",
          "672:                     ->whereColumn('pages.id', '=', $fullEntityIdColumn)",
          "673:                     ->where(function (QueryBuilder $query) {",
          "",
          "[Removed Lines]",
          "670:             $q->whereExists(function(QueryBuilder $query) use ($fullEntityIdColumn) {",
          "",
          "[Added Lines]",
          "670:             $q->whereExists(function (QueryBuilder $query) use ($fullEntityIdColumn) {",
          "",
          "---------------"
        ],
        "app/Http/Middleware/ApiAuthenticate.php||app/Http/Middleware/ApiAuthenticate.php": [
          "File: app/Http/Middleware/ApiAuthenticate.php -> app/Http/Middleware/ApiAuthenticate.php"
        ]
      }
    }
  ]
}