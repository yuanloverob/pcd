{
  "cve_id": "CVE-2022-23471",
  "cve_desc": "containerd is an open source container runtime. A bug was found in containerd's CRI implementation where a user can exhaust memory on the host. In the CRI stream server, a goroutine is launched to handle terminal resize events if a TTY is requested. If the user's process fails to launch due to, for example, a faulty command, the goroutine will be stuck waiting to send without a receiver, resulting in a memory leak. Kubernetes and crictl can both be configured to use containerd's CRI implementation and the stream server is used for handling container IO. This bug has been fixed in containerd 1.6.12 and 1.5.16.  Users should update to these versions to resolve the issue. Users unable to upgrade should ensure that only trusted images and commands are used and that only trusted users have permissions to execute commands in running containers.",
  "repo": "containerd/containerd",
  "patch_hash": "a05d175400b1145e5e6a735a6710579d181e7fb0",
  "patch_info": {
    "commit_hash": "a05d175400b1145e5e6a735a6710579d181e7fb0",
    "repo": "containerd/containerd",
    "commit_url": "https://github.com/containerd/containerd/commit/a05d175400b1145e5e6a735a6710579d181e7fb0",
    "files": [
      "pkg/cri/streaming/remotecommand/httpstream.go",
      "releases/v1.6.12.toml",
      "version/version.go"
    ],
    "message": "Merge pull request from GHSA-2qjp-425j-52j9\n\n[release/1.6] CRI stream server: Fix goroutine leak in Exec",
    "before_after_code_files": [
      "pkg/cri/streaming/remotecommand/httpstream.go||pkg/cri/streaming/remotecommand/httpstream.go",
      "version/version.go||version/version.go"
    ]
  },
  "patch_diff": {
    "pkg/cri/streaming/remotecommand/httpstream.go||pkg/cri/streaming/remotecommand/httpstream.go": [
      "File: pkg/cri/streaming/remotecommand/httpstream.go -> pkg/cri/streaming/remotecommand/httpstream.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: package remotecommand",
      "35: import (",
      "36:  \"encoding/json\"",
      "37:  \"errors\"",
      "38:  \"fmt\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36:  gocontext \"context\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "133:  if ctx.resizeStream != nil {",
      "134:   ctx.resizeChan = make(chan remotecommand.TerminalSize)",
      "136:  }",
      "138:  return ctx, true",
      "",
      "[Removed Lines]",
      "135:   go handleResizeEvents(ctx.resizeStream, ctx.resizeChan)",
      "",
      "[Added Lines]",
      "136:   go handleResizeEvents(req.Context(), ctx.resizeStream, ctx.resizeChan)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "426: func (*v1ProtocolHandler) supportsTerminalResizing() bool { return false }",
      "429:  defer runtime.HandleCrash()",
      "430:  defer close(channel)",
      "",
      "[Removed Lines]",
      "428: func handleResizeEvents(stream io.Reader, channel chan<- remotecommand.TerminalSize) {",
      "",
      "[Added Lines]",
      "429: func handleResizeEvents(ctx gocontext.Context, stream io.Reader, channel chan<- remotecommand.TerminalSize) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "435:   if err := decoder.Decode(&size); err != nil {",
      "436:    break",
      "437:   }",
      "439:  }",
      "440: }",
      "",
      "[Removed Lines]",
      "438:   channel <- size",
      "",
      "[Added Lines]",
      "440:   select {",
      "441:   case channel <- size:",
      "442:   case <-ctx.Done():",
      "446:    return",
      "447:   }",
      "",
      "---------------"
    ],
    "version/version.go||version/version.go": [
      "File: version/version.go -> version/version.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:  Package = \"github.com/containerd/containerd\"",
      "",
      "[Removed Lines]",
      "26:  Version = \"1.6.11+unknown\"",
      "",
      "[Added Lines]",
      "26:  Version = \"1.6.12+unknown\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2e3140a0e09d288a9086474752b4478aa0964e7c",
      "candidate_info": {
        "commit_hash": "2e3140a0e09d288a9086474752b4478aa0964e7c",
        "repo": "containerd/containerd",
        "commit_url": "https://github.com/containerd/containerd/commit/2e3140a0e09d288a9086474752b4478aa0964e7c",
        "files": [
          "pkg/cri/streaming/remotecommand/httpstream.go",
          "releases/v1.5.16.toml",
          "version/version.go"
        ],
        "message": "Merge pull request from GHSA-2qjp-425j-52j9\n\n[release/1.5] CRI stream server: Fix goroutine leak in Exec",
        "before_after_code_files": [
          "pkg/cri/streaming/remotecommand/httpstream.go||pkg/cri/streaming/remotecommand/httpstream.go",
          "version/version.go||version/version.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pkg/cri/streaming/remotecommand/httpstream.go||pkg/cri/streaming/remotecommand/httpstream.go",
            "version/version.go||version/version.go"
          ],
          "candidate": [
            "pkg/cri/streaming/remotecommand/httpstream.go||pkg/cri/streaming/remotecommand/httpstream.go",
            "version/version.go||version/version.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/cri/streaming/remotecommand/httpstream.go||pkg/cri/streaming/remotecommand/httpstream.go": [
          "File: pkg/cri/streaming/remotecommand/httpstream.go -> pkg/cri/streaming/remotecommand/httpstream.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: package remotecommand",
          "35: import (",
          "36:  \"encoding/json\"",
          "37:  \"errors\"",
          "38:  \"fmt\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:  gocontext \"context\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:  if ctx.resizeStream != nil {",
          "134:   ctx.resizeChan = make(chan remotecommand.TerminalSize)",
          "136:  }",
          "138:  return ctx, true",
          "",
          "[Removed Lines]",
          "135:   go handleResizeEvents(ctx.resizeStream, ctx.resizeChan)",
          "",
          "[Added Lines]",
          "136:   go handleResizeEvents(req.Context(), ctx.resizeStream, ctx.resizeChan)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "426: func (*v1ProtocolHandler) supportsTerminalResizing() bool { return false }",
          "429:  defer runtime.HandleCrash()",
          "430:  defer close(channel)",
          "",
          "[Removed Lines]",
          "428: func handleResizeEvents(stream io.Reader, channel chan<- remotecommand.TerminalSize) {",
          "",
          "[Added Lines]",
          "429: func handleResizeEvents(ctx gocontext.Context, stream io.Reader, channel chan<- remotecommand.TerminalSize) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "435:   if err := decoder.Decode(&size); err != nil {",
          "436:    break",
          "437:   }",
          "439:  }",
          "440: }",
          "",
          "[Removed Lines]",
          "438:   channel <- size",
          "",
          "[Added Lines]",
          "440:   select {",
          "441:   case channel <- size:",
          "442:   case <-ctx.Done():",
          "446:    return",
          "447:   }",
          "",
          "---------------"
        ],
        "version/version.go||version/version.go": [
          "File: version/version.go -> version/version.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  Package = \"github.com/containerd/containerd\"",
          "",
          "[Removed Lines]",
          "26:  Version = \"1.5.15+unknown\"",
          "",
          "[Added Lines]",
          "26:  Version = \"1.5.16+unknown\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cd11527fcc2b4e4efab90cd677dd87d6fe2e4e8",
      "candidate_info": {
        "commit_hash": "6cd11527fcc2b4e4efab90cd677dd87d6fe2e4e8",
        "repo": "containerd/containerd",
        "commit_url": "https://github.com/containerd/containerd/commit/6cd11527fcc2b4e4efab90cd677dd87d6fe2e4e8",
        "files": [
          "pkg/cri/streaming/remotecommand/httpstream.go"
        ],
        "message": "CRI stream server: Fix goroutine leak in Exec\n\nIn the CRI streaming server, a goroutine (`handleResizeEvents`) is launched\nto handle terminal resize events if a TTY is asked for with an exec; this\nis the sender of terminal resize events. Another goroutine is launched\nshortly after successful process startup to actually do something with\nthese events, however the issue arises if the exec process fails to start\nfor any reason that would have `process.Start` return non-nil. The receiver\ngoroutine never gets launched so the sender is stuck blocked on a channel send\ninfinitely.\n\nThis could be used in a malicious manner by repeatedly launching execs\nwith a command that doesn't exist in the image, as a single goroutine\nwill get leaked on every invocation which will slowly grow containerd's\nmemory usage.\n\nSigned-off-by: Danny Canter <danny@dcantah.dev>\n(cherry picked from commit f012617edfd887a29345888d65640a7ccd7c72ce)",
        "before_after_code_files": [
          "pkg/cri/streaming/remotecommand/httpstream.go||pkg/cri/streaming/remotecommand/httpstream.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/cri/streaming/remotecommand/httpstream.go||pkg/cri/streaming/remotecommand/httpstream.go"
          ],
          "candidate": [
            "pkg/cri/streaming/remotecommand/httpstream.go||pkg/cri/streaming/remotecommand/httpstream.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/cri/streaming/remotecommand/httpstream.go||pkg/cri/streaming/remotecommand/httpstream.go": [
          "File: pkg/cri/streaming/remotecommand/httpstream.go -> pkg/cri/streaming/remotecommand/httpstream.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: package remotecommand",
          "35: import (",
          "36:  \"encoding/json\"",
          "37:  \"errors\"",
          "38:  \"fmt\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:  gocontext \"context\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:  if ctx.resizeStream != nil {",
          "134:   ctx.resizeChan = make(chan remotecommand.TerminalSize)",
          "136:  }",
          "138:  return ctx, true",
          "",
          "[Removed Lines]",
          "135:   go handleResizeEvents(ctx.resizeStream, ctx.resizeChan)",
          "",
          "[Added Lines]",
          "136:   go handleResizeEvents(req.Context(), ctx.resizeStream, ctx.resizeChan)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "426: func (*v1ProtocolHandler) supportsTerminalResizing() bool { return false }",
          "429:  defer runtime.HandleCrash()",
          "430:  defer close(channel)",
          "",
          "[Removed Lines]",
          "428: func handleResizeEvents(stream io.Reader, channel chan<- remotecommand.TerminalSize) {",
          "",
          "[Added Lines]",
          "429: func handleResizeEvents(ctx gocontext.Context, stream io.Reader, channel chan<- remotecommand.TerminalSize) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "435:   if err := decoder.Decode(&size); err != nil {",
          "436:    break",
          "437:   }",
          "439:  }",
          "440: }",
          "",
          "[Removed Lines]",
          "438:   channel <- size",
          "",
          "[Added Lines]",
          "440:   select {",
          "441:   case channel <- size:",
          "442:   case <-ctx.Done():",
          "446:    return",
          "447:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}