{
  "cve_id": "CVE-2024-24752",
  "cve_desc": "Bref enable serverless PHP on AWS Lambda. When Bref is used with the Event-Driven Function runtime and the handler is a `RequestHandlerInterface`, then the Lambda event is converted to a PSR7 object. During the conversion process, if the request is a MultiPart, each part is parsed and for each which contains a file, it is extracted and saved in `/tmp` with a random filename starting with `bref_upload_`. The flow mimics what plain PHP does but it does not delete the temporary files when the request has been processed. An attacker could fill the Lambda instance disk by performing multiple MultiPart requests containing files. This vulnerability is patched in 2.1.13.",
  "repo": "brefphp/bref",
  "patch_hash": "350788de12880b6fd64c4c318ba995388bec840e",
  "patch_info": {
    "commit_hash": "350788de12880b6fd64c4c318ba995388bec840e",
    "repo": "brefphp/bref",
    "commit_url": "https://github.com/brefphp/bref/commit/350788de12880b6fd64c4c318ba995388bec840e",
    "files": [
      "src/Event/Http/Psr7Bridge.php",
      "tests/Event/Http/CommonHttpTest.php",
      "tests/Event/Http/HttpRequestEventTest.php",
      "tests/Event/Http/Psr7BridgeTest.php"
    ],
    "message": "Support malformed multipart body\n\nFor example body containing broken array keys like `key0[key1][key2][`",
    "before_after_code_files": [
      "src/Event/Http/Psr7Bridge.php||src/Event/Http/Psr7Bridge.php",
      "tests/Event/Http/CommonHttpTest.php||tests/Event/Http/CommonHttpTest.php",
      "tests/Event/Http/HttpRequestEventTest.php||tests/Event/Http/HttpRequestEventTest.php",
      "tests/Event/Http/Psr7BridgeTest.php||tests/Event/Http/Psr7BridgeTest.php"
    ]
  },
  "patch_diff": {
    "src/Event/Http/Psr7Bridge.php||src/Event/Http/Psr7Bridge.php": [
      "File: src/Event/Http/Psr7Bridge.php -> src/Event/Http/Psr7Bridge.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "93:         return new HttpResponse($body, $response->getHeaders(), $response->getStatusCode());",
      "94:     }",
      "96:     private static function parseBodyAndUploadedFiles(HttpRequestEvent $event): array",
      "97:     {",
      "101:         $contentType = $event->getContentType();",
      "111:                             $tmpPath = tempnam(sys_get_temp_dir(), self::UPLOADED_FILES_PREFIX);",
      "123:                 }",
      "124:             }",
      "125:         }",
      "126:         return [$files, $parsedBody];",
      "127:     }",
      "",
      "[Removed Lines]",
      "98:         $bodyString = $event->getBody();",
      "99:         $files = [];",
      "100:         $parsedBody = null;",
      "102:         if ($contentType !== null && $event->getMethod() === 'POST') {",
      "103:             if (str_starts_with($contentType, 'application/x-www-form-urlencoded')) {",
      "104:                 parse_str($bodyString, $parsedBody);",
      "105:             } else {",
      "106:                 $document = new Part(\"Content-type: $contentType\\r\\n\\r\\n\" . $bodyString);",
      "107:                 if ($document->isMultiPart()) {",
      "108:                     $parsedBody = [];",
      "109:                     foreach ($document->getParts() as $part) {",
      "110:                         if ($part->isFile()) {",
      "112:                             if ($tmpPath === false) {",
      "113:                                 throw new RuntimeException('Unable to create a temporary directory');",
      "114:                             }",
      "115:                             file_put_contents($tmpPath, $part->getBody());",
      "116:                             $file = new UploadedFile($tmpPath, filesize($tmpPath), UPLOAD_ERR_OK, $part->getFileName(), $part->getMimeType());",
      "118:                             self::parseKeyAndInsertValueInArray($files, $part->getName(), $file);",
      "119:                         } else {",
      "120:                             self::parseKeyAndInsertValueInArray($parsedBody, $part->getName(), $part->getBody());",
      "121:                         }",
      "122:                     }",
      "",
      "[Added Lines]",
      "102:         if ($contentType === null || $event->getMethod() !== 'POST') {",
      "103:             return [[], null];",
      "104:         }",
      "106:         if (str_starts_with($contentType, 'application/x-www-form-urlencoded')) {",
      "107:             $parsedBody = [];",
      "108:             parse_str($event->getBody(), $parsedBody);",
      "109:             return [[], $parsedBody];",
      "110:         }",
      "113:         $document = new Part(\"Content-type: $contentType\\r\\n\\r\\n\" . $event->getBody());",
      "114:         if (!$document->isMultiPart()) {",
      "115:             return [[], null];",
      "116:         }",
      "117:         $files = [];",
      "118:         $queryString = '';",
      "119:         foreach ($document->getParts() as $part) {",
      "120:             if ($part->isFile()) {",
      "122:                 if ($tmpPath === false) {",
      "123:                     throw new RuntimeException('Unable to create a temporary directory');",
      "125:                 file_put_contents($tmpPath, $part->getBody());",
      "126:                 $file = new UploadedFile($tmpPath, filesize($tmpPath), UPLOAD_ERR_OK, $part->getFileName(), $part->getMimeType());",
      "127:                 self::parseKeyAndInsertValueInArray($files, $part->getName(), $file);",
      "128:             } else {",
      "130:                 $queryString .= urlencode($part->getName()) . '=' . urlencode($part->getBody()) . '&';",
      "133:         if ($queryString !== '') {",
      "134:             $parsedBody = [];",
      "135:             parse_str($queryString, $parsedBody);",
      "136:         } else {",
      "137:             $parsedBody = null;",
      "138:         }",
      "",
      "---------------"
    ],
    "tests/Event/Http/CommonHttpTest.php||tests/Event/Http/CommonHttpTest.php": [
      "File: tests/Event/Http/CommonHttpTest.php -> tests/Event/Http/CommonHttpTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "401: --testBoundary--\\r",
      "402: \";",
      "403:         $this->assertBody($body);",
      "405:         $this->assertUploadedFile(",
      "406:             'foo',",
      "407:             'lorem.txt',",
      "",
      "[Removed Lines]",
      "404:         $this->assertParsedBody([]);",
      "",
      "[Added Lines]",
      "404:         $this->assertParsedBody(null);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "555:     abstract protected function assertHasMultiHeader(bool $expected): void;",
      "559:     abstract protected function assertSourceIp(string $expected): void;",
      "",
      "[Removed Lines]",
      "557:     abstract protected function assertParsedBody(array $expected): void;",
      "",
      "[Added Lines]",
      "557:     abstract protected function assertParsedBody(array|null $expected): void;",
      "",
      "---------------"
    ],
    "tests/Event/Http/HttpRequestEventTest.php||tests/Event/Http/HttpRequestEventTest.php": [
      "File: tests/Event/Http/HttpRequestEventTest.php -> tests/Event/Http/HttpRequestEventTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "112:         $this->assertEquals($expected, $this->event->getSourceIp());",
      "113:     }",
      "116:     {",
      "118:     }",
      "",
      "[Removed Lines]",
      "115:     protected function assertParsedBody(array $expected): void",
      "",
      "[Added Lines]",
      "115:     protected function assertParsedBody(array|null $expected): void",
      "",
      "---------------"
    ],
    "tests/Event/Http/Psr7BridgeTest.php||tests/Event/Http/Psr7BridgeTest.php": [
      "File: tests/Event/Http/Psr7BridgeTest.php -> tests/Event/Http/Psr7BridgeTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:     }",
      "127:     {",
      "128:         $this->assertEquals($expected, $this->request->getParsedBody());",
      "129:     }",
      "",
      "[Removed Lines]",
      "126:     protected function assertParsedBody(array $expected): void",
      "",
      "[Added Lines]",
      "126:     protected function assertParsedBody(array|null $expected): void",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2ace51c3a18597f2f27fdef855a51ca0b338247a",
      "candidate_info": {
        "commit_hash": "2ace51c3a18597f2f27fdef855a51ca0b338247a",
        "repo": "brefphp/bref",
        "commit_url": "https://github.com/brefphp/bref/commit/2ace51c3a18597f2f27fdef855a51ca0b338247a",
        "files": [
          "tests/Event/Http/CommonHttpTest.php",
          "tests/Event/Http/Fixture/ag-v1-body-form-multipart-arrays-malformed.json",
          "tests/Event/Http/Fixture/ag-v2-body-form-multipart-arrays-malformed.json"
        ],
        "message": "Add test case to reproduce invalid body parsing with malformed body",
        "before_after_code_files": [
          "tests/Event/Http/CommonHttpTest.php||tests/Event/Http/CommonHttpTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/brefphp/bref/pull/1733"
        ],
        "olp_code_files": {
          "patch": [
            "tests/Event/Http/CommonHttpTest.php||tests/Event/Http/CommonHttpTest.php"
          ],
          "candidate": [
            "tests/Event/Http/CommonHttpTest.php||tests/Event/Http/CommonHttpTest.php"
          ]
        }
      },
      "candidate_diff": {
        "tests/Event/Http/CommonHttpTest.php||tests/Event/Http/CommonHttpTest.php": [
          "File: tests/Event/Http/CommonHttpTest.php -> tests/Event/Http/CommonHttpTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:         ]);",
          "358:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363:     public function test\u00a0POST\u00a0request\u00a0with\u00a0malformed\u00a0multipart\u00a0form\u00a0data(int $version)",
          "364:     {",
          "365:         $this->fromFixture(__DIR__ . \"/Fixture/ag-v$version-body-form-multipart-arrays-malformed.json\");",
          "367:         $this->assertContentType('multipart/form-data; boundary=testBoundary');",
          "368:         $body = \"--testBoundary\\r",
          "369: Content-Disposition: form-data; name=\\\"key0[key1][key2][\\\"\\r",
          "370: \\r",
          "371: 123\\r",
          "372: --testBoundary--\\r",
          "373: \";",
          "374:         $this->assertBody($body);",
          "375:         $this->assertParsedBody(['key0' => ['key1' => ['key2' => '123']]]);",
          "376:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30a3e4745859de6c710816df513a6789b89a42b5",
      "candidate_info": {
        "commit_hash": "30a3e4745859de6c710816df513a6789b89a42b5",
        "repo": "brefphp/bref",
        "commit_url": "https://github.com/brefphp/bref/commit/30a3e4745859de6c710816df513a6789b89a42b5",
        "files": [
          "src/Event/Http/Psr7Bridge.php",
          "tests/Event/Http/CommonHttpTest.php",
          "tests/Event/Http/HttpRequestEventTest.php",
          "tests/Event/Http/Psr7BridgeTest.php"
        ],
        "message": "Fix code formatting",
        "before_after_code_files": [
          "src/Event/Http/Psr7Bridge.php||src/Event/Http/Psr7Bridge.php",
          "tests/Event/Http/CommonHttpTest.php||tests/Event/Http/CommonHttpTest.php",
          "tests/Event/Http/HttpRequestEventTest.php||tests/Event/Http/HttpRequestEventTest.php",
          "tests/Event/Http/Psr7BridgeTest.php||tests/Event/Http/Psr7BridgeTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Event/Http/Psr7Bridge.php||src/Event/Http/Psr7Bridge.php",
            "tests/Event/Http/CommonHttpTest.php||tests/Event/Http/CommonHttpTest.php",
            "tests/Event/Http/HttpRequestEventTest.php||tests/Event/Http/HttpRequestEventTest.php",
            "tests/Event/Http/Psr7BridgeTest.php||tests/Event/Http/Psr7BridgeTest.php"
          ],
          "candidate": [
            "src/Event/Http/Psr7Bridge.php||src/Event/Http/Psr7Bridge.php",
            "tests/Event/Http/CommonHttpTest.php||tests/Event/Http/CommonHttpTest.php",
            "tests/Event/Http/HttpRequestEventTest.php||tests/Event/Http/HttpRequestEventTest.php",
            "tests/Event/Http/Psr7BridgeTest.php||tests/Event/Http/Psr7BridgeTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Event/Http/Psr7Bridge.php||src/Event/Http/Psr7Bridge.php": [
          "File: src/Event/Http/Psr7Bridge.php -> src/Event/Http/Psr7Bridge.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:         $document = new Part(\"Content-type: $contentType\\r\\n\\r\\n\" . $event->getBody());",
          "115:             return [[], null];",
          "116:         }",
          "117:         $files = [];",
          "",
          "[Removed Lines]",
          "114:         if (!$document->isMultiPart()) {",
          "",
          "[Added Lines]",
          "114:         if (! $document->isMultiPart()) {",
          "",
          "---------------"
        ],
        "tests/Event/Http/CommonHttpTest.php||tests/Event/Http/CommonHttpTest.php": [
          "File: tests/Event/Http/CommonHttpTest.php -> tests/Event/Http/CommonHttpTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:     abstract protected function assertHasMultiHeader(bool $expected): void;",
          "559:     abstract protected function assertSourceIp(string $expected): void;",
          "",
          "[Removed Lines]",
          "557:     abstract protected function assertParsedBody(array|null $expected): void;",
          "",
          "[Added Lines]",
          "557:     abstract protected function assertParsedBody(array | null $expected): void;",
          "",
          "---------------"
        ],
        "tests/Event/Http/HttpRequestEventTest.php||tests/Event/Http/HttpRequestEventTest.php": [
          "File: tests/Event/Http/HttpRequestEventTest.php -> tests/Event/Http/HttpRequestEventTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:         $this->assertEquals($expected, $this->event->getSourceIp());",
          "113:     }",
          "116:     {",
          "118:     }",
          "",
          "[Removed Lines]",
          "115:     protected function assertParsedBody(array|null $expected): void",
          "",
          "[Added Lines]",
          "115:     protected function assertParsedBody(array | null $expected): void",
          "",
          "---------------"
        ],
        "tests/Event/Http/Psr7BridgeTest.php||tests/Event/Http/Psr7BridgeTest.php": [
          "File: tests/Event/Http/Psr7BridgeTest.php -> tests/Event/Http/Psr7BridgeTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     }",
          "127:     {",
          "128:         $this->assertEquals($expected, $this->request->getParsedBody());",
          "129:     }",
          "",
          "[Removed Lines]",
          "126:     protected function assertParsedBody(array|null $expected): void",
          "",
          "[Added Lines]",
          "126:     protected function assertParsedBody(array | null $expected): void",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56df95ef8039fddec7a005e0dfa277a8243ed793",
      "candidate_info": {
        "commit_hash": "56df95ef8039fddec7a005e0dfa277a8243ed793",
        "repo": "brefphp/bref",
        "commit_url": "https://github.com/brefphp/bref/commit/56df95ef8039fddec7a005e0dfa277a8243ed793",
        "files": [
          "src/Event/Http/Psr7Bridge.php"
        ],
        "message": "Support malformed multipart body for uploaded files too",
        "before_after_code_files": [
          "src/Event/Http/Psr7Bridge.php||src/Event/Http/Psr7Bridge.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Event/Http/Psr7Bridge.php||src/Event/Http/Psr7Bridge.php"
          ],
          "candidate": [
            "src/Event/Http/Psr7Bridge.php||src/Event/Http/Psr7Bridge.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Event/Http/Psr7Bridge.php||src/Event/Http/Psr7Bridge.php": [
          "File: src/Event/Http/Psr7Bridge.php -> src/Event/Http/Psr7Bridge.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:         if (! $document->isMultiPart()) {",
          "115:             return [[], null];",
          "116:         }",
          "117:         $files = [];",
          "119:         foreach ($document->getParts() as $part) {",
          "120:             if ($part->isFile()) {",
          "122:                 if ($tmpPath === false) {",
          "123:                     throw new RuntimeException('Unable to create a temporary directory');",
          "124:                 }",
          "",
          "[Removed Lines]",
          "118:         $queryString = '';",
          "121:                             $tmpPath = tempnam(sys_get_temp_dir(), self::UPLOADED_FILES_PREFIX);",
          "",
          "[Added Lines]",
          "117:         $parsedBody = null;",
          "121:                 $tmpPath = tempnam(sys_get_temp_dir(), self::UPLOADED_FILES_PREFIX);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:                 $file = new UploadedFile($tmpPath, filesize($tmpPath), UPLOAD_ERR_OK, $part->getFileName(), $part->getMimeType());",
          "127:                 self::parseKeyAndInsertValueInArray($files, $part->getName(), $file);",
          "128:             } else {",
          "131:             }",
          "132:         }",
          "139:         return [$files, $parsedBody];",
          "140:     }",
          "",
          "[Removed Lines]",
          "130:                 $queryString .= urlencode($part->getName()) . '=' . urlencode($part->getBody()) . '&';",
          "133:         if ($queryString !== '') {",
          "134:             $parsedBody = [];",
          "135:             parse_str($queryString, $parsedBody);",
          "136:         } else {",
          "137:             $parsedBody = null;",
          "138:         }",
          "",
          "[Added Lines]",
          "129:                 if ($parsedBody === null) {",
          "130:                     $parsedBody = [];",
          "131:                 }",
          "132:                 self::parseKeyAndInsertValueInArray($parsedBody, $part->getName(), $part->getBody());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:     private static function parseKeyAndInsertValueInArray(array &$array, string $key, mixed $value): void",
          "146:     {",
          "183:     }",
          "",
          "[Removed Lines]",
          "147:         if (! str_contains($key, '[')) {",
          "148:             $array[$key] = $value;",
          "150:             return;",
          "151:         }",
          "153:         $parts = explode('[', $key); // files[id_cards][jpg][] => [ 'files',  'id_cards]', 'jpg]', ']' ]",
          "154:         $pointer = &$array;",
          "156:         foreach ($parts as $k => $part) {",
          "157:             if ($k === 0) {",
          "158:                 $pointer = &$pointer[$part];",
          "160:                 continue;",
          "161:             }",
          "166:             if ($part === '' || ! str_ends_with($part, ']')) {",
          "168:                 $array[$key] = $value;",
          "170:                 return;",
          "171:             }",
          "173:             $part = substr($part, 0, -1); // The last char is a ] => remove it to have the real key",
          "175:             if ($part === '') { // [] case",
          "176:                 $pointer = &$pointer[];",
          "177:             } else {",
          "178:                 $pointer = &$pointer[$part];",
          "179:             }",
          "180:         }",
          "182:         $pointer = $value;",
          "",
          "[Added Lines]",
          "143:         $parsed = [];",
          "146:         parse_str(urlencode($key) . '=mock', $parsed);",
          "148:         array_walk_recursive($parsed, fn (&$v) => $v = $value);",
          "150:         $array = array_merge_recursive($array, $parsed);",
          "",
          "---------------"
        ]
      }
    }
  ]
}