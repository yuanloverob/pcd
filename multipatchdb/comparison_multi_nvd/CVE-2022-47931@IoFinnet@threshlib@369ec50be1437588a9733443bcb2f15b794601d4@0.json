{
  "cve_id": "CVE-2022-47931",
  "cve_desc": "IO FinNet tss-lib before 2.0.0 allows a collision of hash values.",
  "repo": "IoFinnet/threshlib",
  "patch_hash": "369ec50be1437588a9733443bcb2f15b794601d4",
  "patch_info": {
    "commit_hash": "369ec50be1437588a9733443bcb2f15b794601d4",
    "repo": "IoFinnet/threshlib",
    "commit_url": "https://github.com/IoFinnet/threshlib/commit/369ec50be1437588a9733443bcb2f15b794601d4",
    "files": [
      "common/hash.go",
      "common/hash_test.go",
      "common/int/bigint.go",
      "crypto/vss/feldman_vss_test.go"
    ],
    "message": "KS-IOF-F-02 Security audit. Collision of Hash Values: fix size of length parts (#16)\n\n* KS-IOF-F-02 Security audit. Collision of Hash Values: fix size of length parts\n\n* revert Makefile change\n\n* KS-IOF-F-02 Security audit. Collision of Hash Values: use common_test package in hash tests\n\n* KS-IOF-F-02 Security audit. Collision of Hash Values: fix case of Hash(-a) != Hash(a), add tests\n\n* KS-IOF-F-02 Security audit. Collision of Hash Values: fix race condition in Mul\n\n* failing test fix",
    "before_after_code_files": [
      "common/hash.go||common/hash.go",
      "common/hash_test.go||common/hash_test.go",
      "common/int/bigint.go||common/int/bigint.go",
      "crypto/vss/feldman_vss_test.go||crypto/vss/feldman_vss_test.go"
    ]
  },
  "patch_diff": {
    "common/hash.go||common/hash.go": [
      "File: common/hash.go -> common/hash.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:  \"crypto\"",
      "11:  _ \"crypto/sha512\"",
      "12:  \"encoding/binary\"",
      "13:  big \"github.com/binance-chain/tss-lib/common/int\"",
      "15: )",
      "17: const (",
      "",
      "[Removed Lines]",
      "14:  \"strconv\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29:  }",
      "30:  bzSize := 0",
      "35:  binary.LittleEndian.PutUint64(inLenBz, uint64(inLen))",
      "36:  for _, bz := range in {",
      "37:   bzSize += len(bz)",
      "38:  }",
      "40:  data = append(data, inLenBz...)",
      "41:  for _, bz := range in {",
      "42:   data = append(data, bz...)",
      "43:   data = append(data, hashInputDelimiter) // safety delimiter",
      "47:  }",
      "",
      "[Removed Lines]",
      "32:  inLenBz := make([]byte, 64/8)",
      "39:  data = make([]byte, 0, len(inLenBz)+bzSize+inLen)",
      "44:   l := []byte(strconv.Itoa(len(bz)))",
      "45:   data = append(data, l...) // Security audit: length of each byte buffer should be added after",
      "",
      "[Added Lines]",
      "32:  inLenBz := make([]byte, 8) // 64-bits",
      "39:  dataCap := len(inLenBz) + bzSize + inLen + (inLen * 8)",
      "40:  data = make([]byte, 0, dataCap)",
      "45:   dataLen := make([]byte, 8)              // 64-bits",
      "46:   binary.LittleEndian.PutUint64(dataLen, uint64(len(bz)))",
      "47:   data = append(data, dataLen...) // Security audit: length of each byte buffer should be added after",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "63:  }",
      "64:  bzSize := 0",
      "69:  binary.LittleEndian.PutUint64(inLenBz, uint64(inLen))",
      "",
      "[Removed Lines]",
      "66:  inLenBz := make([]byte, 64/8)",
      "",
      "[Added Lines]",
      "68:  inLenBz := make([]byte, 8) // 64-bits",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "72:   ptrs[i] = append(n.Bytes(), byte(n.Sign()))",
      "73:   bzSize += len(ptrs[i])",
      "74:  }",
      "76:  data = append(data, inLenBz...)",
      "77:  for i := range in {",
      "78:   data = append(data, ptrs[i]...)",
      "79:   data = append(data, hashInputDelimiter) // safety delimiter",
      "83:  }",
      "",
      "[Removed Lines]",
      "75:  data = make([]byte, 0, len(inLenBz)+bzSize+inLen)",
      "80:   l := []byte(strconv.Itoa(len(ptrs[i])))",
      "81:   data = append(data, l...) // Security audit: length of each byte buffer should be added after",
      "",
      "[Added Lines]",
      "77:  dataCap := len(inLenBz) + bzSize + inLen + (inLen * 8)",
      "78:  data = make([]byte, 0, dataCap)",
      "83:   dataLen := make([]byte, 8)              // 64-bits",
      "84:   binary.LittleEndian.PutUint64(dataLen, uint64(len(ptrs[i])))",
      "85:   data = append(data, dataLen...) // Security audit: length of each byte buffer should be added after",
      "",
      "---------------"
    ],
    "common/hash_test.go||common/hash_test.go": [
      "File: common/hash_test.go -> common/hash_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package common_test",
      "3: import (",
      "4:  \"testing\"",
      "6:  . \"github.com/binance-chain/tss-lib/common\"",
      "7:  big \"github.com/binance-chain/tss-lib/common/int\"",
      "8:  \"github.com/stretchr/testify/assert\"",
      "9: )",
      "11: func TestSHA512_256(t *testing.T) {",
      "12:  input := [][]byte{[]byte(\"abc\"), []byte(\"def\"), []byte(\"ghi\")}",
      "13:  input2 := [][]byte{[]byte(\"abc\"), []byte(\"def\"), []byte(\"gh\")}",
      "14:  type args struct {",
      "15:   in [][]byte",
      "16:  }",
      "17:  tests := []struct {",
      "18:   name     string",
      "19:   args     args",
      "20:   want     []byte",
      "21:   wantDiff bool",
      "22:   wantLen  int",
      "23:  }{{",
      "24:   name:    \"same inputs produce the same hash\",",
      "25:   args:    args{input},",
      "26:   want:    SHA512_256(input...),",
      "27:   wantLen: 256 / 8,",
      "28:  }, {",
      "29:   name:     \"different inputs produce a differing hash\",",
      "30:   args:     args{input2},",
      "31:   want:     SHA512_256(input...),",
      "32:   wantDiff: true,",
      "33:   wantLen:  256 / 8,",
      "34:  }}",
      "35:  for _, tt := range tests {",
      "36:   t.Run(tt.name, func(t *testing.T) {",
      "37:    got := SHA512_256(tt.args.in...)",
      "38:    if tt.wantDiff {",
      "39:     if !assert.NotEqualf(t, tt.want, got, \"SHA512_256(%v)\", tt.args.in) {",
      "40:      t.Errorf(\"SHA512_256() = %v, do not want %v\", got, tt.want)",
      "41:     }",
      "42:    } else {",
      "43:     if !assert.Equalf(t, tt.want, got, \"SHA512_256(%v)\", tt.args.in) {",
      "44:      t.Errorf(\"SHA512_256() = %v, want %v\", got, tt.want)",
      "45:     }",
      "46:    }",
      "47:    if tt.wantLen != len(got) {",
      "48:     t.Errorf(\"SHA512_256() = bitlen %d, want %d\", len(got), tt.wantLen)",
      "49:    }",
      "50:   })",
      "51:  }",
      "52: }",
      "54: func TestSHA512_256i(t *testing.T) {",
      "55:  input := ByteSlicesToBigInts([][]byte{[]byte(\"abc\"), []byte(\"def\"), []byte(\"ghi\")})",
      "56:  input2 := ByteSlicesToBigInts([][]byte{[]byte(\"abc\"), []byte(\"def\"), []byte(\"gh\")})",
      "57:  input3 := new(big.Int).SetBytes([]byte(\"abc\"))",
      "58:  t.Logf(\"%d\", input3.Int64())",
      "59:  t.Logf(\"%d\", new(big.Int).Neg(input3).Int64())",
      "60:  type args struct {",
      "61:   in []*big.Int",
      "62:  }",
      "63:  tests := []struct {",
      "64:   name     string",
      "65:   args     args",
      "66:   want     *big.Int",
      "67:   wantDiff bool",
      "68:  }{{",
      "69:   name: \"same inputs produce the same hash\",",
      "70:   args: args{input},",
      "71:   want: SHA512_256i(input...),",
      "72:  }, {",
      "73:   name:     \"different inputs produce a differing hash\",",
      "74:   args:     args{input2},",
      "75:   want:     SHA512_256i(input...),",
      "76:   wantDiff: true,",
      "77:  }, {",
      "78:   name:     \"different inputs produce a differing hash: Hash(-a) != Hash(a)\",",
      "79:   args:     args{[]*big.Int{new(big.Int).Neg(input3)}},",
      "80:   want:     SHA512_256i(input3),",
      "81:   wantDiff: true,",
      "82:  }}",
      "83:  for _, tt := range tests {",
      "84:   t.Run(tt.name, func(t *testing.T) {",
      "85:    got := SHA512_256i(tt.args.in...)",
      "86:    if tt.wantDiff {",
      "87:     if !assert.NotEqualf(t, tt.want, got, \"SHA512_256i(%v)\", tt.args.in) {",
      "88:      t.Errorf(\"SHA512_256i() = %v, do not want %v\", got, tt.want)",
      "89:     }",
      "90:    } else {",
      "91:     if !assert.Equalf(t, tt.want, got, \"SHA512_256i(%v)\", tt.args.in) {",
      "92:      t.Errorf(\"SHA512_256i() = %v, want %v\", got, tt.want)",
      "93:     }",
      "94:    }",
      "95:   })",
      "96:  }",
      "97: }",
      "99: func TestSHA512_256iOne(t *testing.T) {",
      "100:  input := new(big.Int).SetBytes([]byte(\"abc\"))",
      "101:  input2 := new(big.Int).SetBytes([]byte(\"ab\"))",
      "102:  input3 := new(big.Int).SetBytes([]byte(\"cd\"))",
      "103:  type args struct {",
      "104:   in *big.Int",
      "105:  }",
      "106:  tests := []struct {",
      "107:   name     string",
      "108:   args     args",
      "109:   want     *big.Int",
      "110:   wantDiff bool",
      "111:  }{{",
      "112:   name: \"same inputs produce the same hash\",",
      "113:   args: args{input},",
      "114:   want: SHA512_256iOne(input),",
      "115:  }, {",
      "116:   name:     \"different inputs produce a differing hash\",",
      "117:   args:     args{input2},",
      "118:   want:     SHA512_256iOne(input),",
      "119:   wantDiff: true,",
      "120:  }, {",
      "121:   name:     \"different inputs produce a differing hash: Hash(-a) != Hash(a)\",",
      "122:   args:     args{new(big.Int).Neg(input3)},",
      "123:   want:     SHA512_256i(input3),",
      "124:   wantDiff: true,",
      "125:  }}",
      "126:  for _, tt := range tests {",
      "127:   t.Run(tt.name, func(t *testing.T) {",
      "128:    got := SHA512_256iOne(tt.args.in)",
      "129:    if tt.wantDiff {",
      "130:     if !assert.NotEqualf(t, tt.want, got, \"SHA512_256iOne(%v)\", tt.args.in) {",
      "131:      t.Errorf(\"SHA512_256iOne() = %v, do not want %v\", got, tt.want)",
      "132:     }",
      "133:    } else {",
      "134:     if !assert.Equalf(t, tt.want, got, \"SHA512_256iOne(%v)\", tt.args.in) {",
      "135:      t.Errorf(\"SHA512_256iOne() = %v, want %v\", got, tt.want)",
      "136:     }",
      "137:    }",
      "138:   })",
      "139:  }",
      "140: }",
      "",
      "---------------"
    ],
    "common/int/bigint.go||common/int/bigint.go": [
      "File: common/int/bigint.go -> common/int/bigint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:  z.ensureInitialized()",
      "80:  z.mutex.Lock()",
      "81:  defer z.mutex.Unlock()",
      "84: }",
      "85: func (z *Int) Resize(cap int) *Int {",
      "86:  z.ensureInitialized()",
      "",
      "[Removed Lines]",
      "82:  z.i = z.i.Clone()",
      "83:  return z",
      "",
      "[Added Lines]",
      "82:  cloned := new(Int)",
      "83:  cloned.i = z.i.Clone()",
      "84:  return cloned",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "127:  x.ensureInitialized()",
      "128:  z.mutex.Lock()",
      "129:  defer z.mutex.Unlock()",
      "131:  return z",
      "132: }",
      "133: func (z *Int) SetNeg() *Int {",
      "",
      "[Removed Lines]",
      "130:  z.i = x.i.Neg(1)",
      "",
      "[Added Lines]",
      "132:  z.i = x.Clone().i.Neg(1)",
      "",
      "---------------"
    ],
    "crypto/vss/feldman_vss_test.go||crypto/vss/feldman_vss_test.go": [
      "File: crypto/vss/feldman_vss_test.go -> crypto/vss/feldman_vss_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "128:  assert.NoError(t, err5)",
      "129:  assert.NotZero(t, secret5)",
      "133: }",
      "",
      "[Removed Lines]",
      "131:  assert.EqualValues(t, secret, secret4, \"secrets must be the same\")",
      "132:  assert.EqualValues(t, secret4, secret5, \"secrets must be the same\")",
      "",
      "[Added Lines]",
      "131:  assert.Equal(t, secret.Int64(), secret4.Int64(), \"secrets must be the same\")",
      "132:  assert.Equal(t, secret4.Int64(), secret5.Int64(), \"secrets must be the same\")",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "601fadd19306dad7b87e007ffc5682248d020777",
      "candidate_info": {
        "commit_hash": "601fadd19306dad7b87e007ffc5682248d020777",
        "repo": "IoFinnet/threshlib",
        "commit_url": "https://github.com/IoFinnet/threshlib/commit/601fadd19306dad7b87e007ffc5682248d020777",
        "files": [
          "common/hash/xmd.go",
          "common/int/bigint.go",
          "common/random.go",
          "crypto/zkp/mod/mod_test.go",
          "ecdsa/keygen/local_party.go",
          "ecdsa/keygen/local_party_test.go",
          "ecdsa/keygen/local_stateful_party_test.go",
          "ecdsa/resharing/local_party.go",
          "ecdsa/resharing/local_party_test.go",
          "ecdsa/signing/key_derivation_test.go",
          "ecdsa/signing/local_party.go",
          "ecdsa/signing/local_party_test.go",
          "ecdsa/signing/local_stateful_party_test.go",
          "eddsa/keygen/local_party.go",
          "eddsa/keygen/local_party_test.go",
          "eddsa/resharing/local_party.go",
          "eddsa/resharing/local_party_test.go",
          "eddsa/signing/local_party.go",
          "eddsa/signing/local_party_test.go",
          "tss/session_id.go"
        ],
        "message": "fix: expand sessionId with ExpandXMD to make sure it satisfies min nonce length",
        "before_after_code_files": [
          "common/hash/xmd.go||common/hash/xmd.go",
          "common/int/bigint.go||common/int/bigint.go",
          "common/random.go||common/random.go",
          "crypto/zkp/mod/mod_test.go||crypto/zkp/mod/mod_test.go",
          "ecdsa/keygen/local_party.go||ecdsa/keygen/local_party.go",
          "ecdsa/keygen/local_party_test.go||ecdsa/keygen/local_party_test.go",
          "ecdsa/keygen/local_stateful_party_test.go||ecdsa/keygen/local_stateful_party_test.go",
          "ecdsa/resharing/local_party.go||ecdsa/resharing/local_party.go",
          "ecdsa/resharing/local_party_test.go||ecdsa/resharing/local_party_test.go",
          "ecdsa/signing/key_derivation_test.go||ecdsa/signing/key_derivation_test.go",
          "ecdsa/signing/local_party.go||ecdsa/signing/local_party.go",
          "ecdsa/signing/local_party_test.go||ecdsa/signing/local_party_test.go",
          "ecdsa/signing/local_stateful_party_test.go||ecdsa/signing/local_stateful_party_test.go",
          "eddsa/keygen/local_party.go||eddsa/keygen/local_party.go",
          "eddsa/keygen/local_party_test.go||eddsa/keygen/local_party_test.go",
          "eddsa/resharing/local_party.go||eddsa/resharing/local_party.go",
          "eddsa/resharing/local_party_test.go||eddsa/resharing/local_party_test.go",
          "eddsa/signing/local_party.go||eddsa/signing/local_party.go",
          "eddsa/signing/local_party_test.go||eddsa/signing/local_party_test.go",
          "tss/session_id.go||tss/session_id.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/int/bigint.go||common/int/bigint.go"
          ],
          "candidate": [
            "common/int/bigint.go||common/int/bigint.go"
          ]
        }
      },
      "candidate_diff": {
        "common/hash/xmd.go||common/hash/xmd.go": [
          "File: common/hash/xmd.go -> common/hash/xmd.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: var errLengthTooLarge = errors.New(\"requested byte length is too high\")",
          "28:  h := id.New()",
          "29:  dst = vetDSTXMD(h, dst)",
          "30:  b := id.Size()",
          "31:  blockSize := h.BlockSize()",
          "35:   panic(errLengthTooLarge)",
          "36:  }",
          "38:  zPad := make([]byte, blockSize)",
          "40:  zeroByte := []byte{0}",
          "41:  dstPrime := dstPrime(dst)",
          "",
          "[Removed Lines]",
          "27: func ExpandXMD(id crypto.Hash, input, dst []byte, length int) []byte {",
          "33:  ell := math.Ceil(float64(length) / float64(b))",
          "34:  if ell > 255 || length > math.MaxUint16 || len(dst) > math.MaxUint8 {",
          "39:  lib := i2osp(length, 2)",
          "",
          "[Added Lines]",
          "27: func ExpandXMD(id crypto.Hash, input, dst []byte, byteLen int) []byte {",
          "33:  ell := math.Ceil(float64(byteLen) / float64(b))",
          "34:  if ell > 255 || byteLen > math.MaxUint16 || len(dst) > math.MaxUint8 {",
          "39:  lib := i2osp(byteLen, 2)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:  if ell < 2 {",
          "52:  }",
          "56: }",
          "58: func dstPrime(dst []byte) []byte {",
          "",
          "[Removed Lines]",
          "51:   return b1[0:length]",
          "55:  return xmd(h, b0, b1, dstPrime, uint(ell), length)",
          "",
          "[Added Lines]",
          "51:   return b1[0:byteLen]",
          "55:  return xmd(h, b0, b1, dstPrime, uint(ell), byteLen)",
          "",
          "---------------"
        ],
        "common/int/bigint.go||common/int/bigint.go": [
          "File: common/int/bigint.go -> common/int/bigint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:  z.ensureInitialized()",
          "220:  x.ensureInitialized()",
          "221:  y.ensureInitialized()",
          "223:  var bi *big.Int",
          "224:  if m == nil {",
          "225:   bi = new(big.Int).Exp(x.i.Big(), y.i.Big(), nil)",
          "",
          "[Removed Lines]",
          "222:  m.ensureInitialized()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "common/random.go||common/random.go": [
          "File: common/random.go -> common/random.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import (",
          "10:  \"crypto/rand\"",
          "11:  \"fmt\"",
          "15:  \"github.com/pkg/errors\"",
          "16: )",
          "",
          "[Removed Lines]",
          "12:  big2 \"math/big\"",
          "14:  int2 \"github.com/binance-chain/tss-lib/common/int\"",
          "",
          "[Added Lines]",
          "12:  gbig \"math/big\"",
          "14:  big \"github.com/binance-chain/tss-lib/common/int\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: )",
          "22: var (",
          "26: )",
          "32:  }",
          "41:  }",
          "43: }",
          "46:  if upper == nil || zero.Cmp(upper) != -1 {",
          "47:   return nil",
          "48:  }",
          "50:  for {",
          "52:   if try.Cmp(upper) < 0 && try.Cmp(zero) > 0 {",
          "53:    break",
          "54:   }",
          "",
          "[Removed Lines]",
          "23:  zero = int2.NewInt(0)",
          "24:  one  = int2.NewInt(1)",
          "25:  two  = int2.NewInt(2)",
          "29: func MustGetRandomInt(bits int) *int2.Int {",
          "30:  if bits <= 0 || mustGetRandomIntMaxBits < bits {",
          "31:   panic(fmt.Errorf(\"MustGetRandomInt: bits should be positive, non-zero and less than %d\", mustGetRandomIntMaxBits))",
          "34:  max := new(big2.Int)",
          "35:  max = max.Exp(two.Big(), big2.NewInt(int64(bits)), nil).Sub(max, one.Big())",
          "38:  n, err := rand.Int(rand.Reader, max)",
          "39:  if err != nil {",
          "40:   panic(errors.Wrap(err, \"rand.Int failure in MustGetRandomInt!\"))",
          "42:  return int2.Wrap(n)",
          "45: func GetRandomPositiveInt(upper *int2.Int) *int2.Int {",
          "49:  var try *int2.Int",
          "51:   try = MustGetRandomInt(upper.BitLen())",
          "",
          "[Added Lines]",
          "23:  zero = big.NewInt(0)",
          "24:  one  = big.NewInt(1)",
          "25:  two  = big.NewInt(2)",
          "29: func MustGetRandomInt(minBits int, upper ...*big.Int) *big.Int {",
          "30:  if minBits <= 0 || mustGetRandomIntMaxBits < minBits {",
          "31:   panic(fmt.Errorf(\"MustGetRandomInt: minBits should be positive, non-zero and less than %d\", mustGetRandomIntMaxBits))",
          "34:  max := new(big.Int)",
          "35:  if len(upper) == 0 {",
          "36:   max = max.Exp(two, big.NewInt(uint64(minBits)), nil).Sub(max, one)",
          "37:  } else {",
          "38:   max = upper[0]",
          "39:  }",
          "40:  maxBI := max.Big()",
          "43:  var n *gbig.Int",
          "44:  var err error",
          "45:  for do := true; do; do = n.BitLen() < minBits {",
          "46:   if n, err = rand.Int(rand.Reader, maxBI); err != nil {",
          "47:    panic(errors.Wrap(err, \"rand.Int failure in MustGetRandomInt!\"))",
          "48:   }",
          "50:  return big.Wrap(n)",
          "53: func GetRandomPositiveInt(upper *big.Int) *big.Int {",
          "57:  var try *big.Int",
          "59:   try = MustGetRandomInt(upper.BitLen()-1, upper)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:  return try",
          "57: }",
          "61:   return nil",
          "62:  }",
          "64:  maxRetries := 100",
          "65:  ok := false",
          "66:  for i := 0; i < maxRetries; i++ {",
          "69:    ok = true",
          "70:    break",
          "71:   }",
          "",
          "[Removed Lines]",
          "59: func GetBigRandomPositiveInt(upper *int2.Int, minBitLen int) *int2.Int {",
          "60:  if upper == nil || zero.Cmp(upper) != -1 || minBitLen < 8 || upper.BitLen() < minBitLen {",
          "63:  var try *int2.Int",
          "67:   try = MustGetRandomInt(upper.BitLen())",
          "68:   if try.Cmp(upper) < 0 && try.Cmp(zero) >= 0 && try.BitLen() >= minBitLen {",
          "",
          "[Added Lines]",
          "67: func GetBigRandomPositiveInt(upper *big.Int, minBits int) *big.Int {",
          "68:  if upper == nil || zero.Cmp(upper) != -1 || minBits < 8 || upper.BitLen() < minBits {",
          "71:  var try *big.Int",
          "75:   try = MustGetRandomInt(minBits, upper)",
          "76:   if try.Cmp(upper) < 0 && try.Cmp(zero) >= 0 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76:  return try",
          "77: }",
          "81:   return nil",
          "82:  }",
          "84:  if err != nil ||",
          "85:   try.Cmp(zero.Big()) == 0 {",
          "87:   for {",
          "90:     break",
          "91:    }",
          "92:   }",
          "93:  }",
          "95: }",
          "100:  if n == nil || zero.Cmp(n) != -1 {",
          "101:   return nil",
          "102:  }",
          "104:  for {",
          "105:   try = MustGetRandomInt(n.BitLen())",
          "106:   if IsNumberInMultiplicativeGroup(n, try) {",
          "",
          "[Removed Lines]",
          "79: func GetRandomPrimeInt(bits int) *int2.Int {",
          "80:  if bits <= 0 {",
          "83:  try, err := rand.Prime(rand.Reader, bits)",
          "88:    try = MustGetRandomInt(bits).Big()",
          "89:    if probablyPrime(int2.Wrap(try)) {",
          "94:  return int2.Wrap(try)",
          "99: func GetRandomPositiveRelativelyPrimeInt(n *int2.Int) *int2.Int {",
          "103:  var try *int2.Int",
          "",
          "[Added Lines]",
          "87: func GetRandomPrimeInt(minBits int) *big.Int {",
          "88:  if minBits <= 0 {",
          "91:  try, err := rand.Prime(rand.Reader, minBits)",
          "96:    try = MustGetRandomInt(minBits).Big()",
          "97:    if probablyPrime(big.Wrap(try)) {",
          "102:  return big.Wrap(try)",
          "107: func GetRandomPositiveRelativelyPrimeInt(n *big.Int) *big.Int {",
          "111:  var try *big.Int",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:  return try",
          "111: }",
          "114:  if n == nil || v == nil || zero.Cmp(n) != -1 {",
          "115:   return false",
          "116:  }",
          "118:  return v.Cmp(n) < 0 && v.Cmp(one) >= 0 &&",
          "119:   gcd.GCD(nil, nil, v, n).Cmp(one) == 0",
          "120: }",
          "",
          "[Removed Lines]",
          "113: func IsNumberInMultiplicativeGroup(n, v *int2.Int) bool {",
          "117:  gcd := int2.NewInt(0)",
          "",
          "[Added Lines]",
          "121: func IsNumberInMultiplicativeGroup(n, v *big.Int) bool {",
          "125:  gcd := big.NewInt(0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "126:  f := GetRandomPositiveRelativelyPrimeInt(n)",
          "128:  return fSq.Mod(fSq, n)",
          "129: }",
          "132:  for {",
          "133:   w := GetRandomPositiveInt(n)",
          "135:    return w",
          "136:   }",
          "137:  }",
          "",
          "[Removed Lines]",
          "125: func GetRandomGeneratorOfTheQuadraticResidue(n *int2.Int) *int2.Int {",
          "127:  fSq := new(int2.Int).Mul(f, f)",
          "131: func GetRandomQuadraticNonResidue(n *int2.Int) *int2.Int {",
          "134:   if big2.Jacobi(w.Big(), n.Big()) == -1 {",
          "",
          "[Added Lines]",
          "133: func GetRandomGeneratorOfTheQuadraticResidue(n *big.Int) *big.Int {",
          "135:  fSq := new(big.Int).Mul(f, f)",
          "139: func GetRandomQuadraticNonResidue(n *big.Int) *big.Int {",
          "142:   if gbig.Jacobi(w.Big(), n.Big()) == -1 {",
          "",
          "---------------"
        ],
        "crypto/zkp/mod/mod_test.go||crypto/zkp/mod/mod_test.go": [
          "File: crypto/zkp/mod/mod_test.go -> crypto/zkp/mod/mod_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  p2, q2 := new(big.Int).Lsh(p, 1), new(big.Int).Lsh(q, 1)",
          "29:  P, Q := new(big.Int).Add(p2, big.NewInt(1)), new(big.Int).Add(q2, big.NewInt(1))",
          "31:  order := big.Wrap(tss.S256().Params().N)",
          "33:  proof, err := NewProof(order, N, P, Q, nonce)",
          "",
          "[Removed Lines]",
          "30:  nonce := common.MustGetRandomInt(256)",
          "",
          "[Added Lines]",
          "30:  nonce := common.GetBigRandomPositiveInt(q, q.BitLen())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:  p2, q2 := new(big.Int).Lsh(p, 1), new(big.Int).Lsh(q, 1)",
          "60:  P, Q := new(big.Int).Add(p2, big.NewInt(1)), new(big.Int).Add(q2, big.NewInt(1))",
          "62:  order := big.Wrap(tss.S256().Params().N)",
          "64:  pr, err := NewProof(order, N, P, Q, nonce)",
          "",
          "[Removed Lines]",
          "61:  nonce := common.GetRandomPrimeInt(256)",
          "",
          "[Added Lines]",
          "61:  nonce := common.GetRandomPrimeInt(q.BitLen())",
          "",
          "---------------"
        ],
        "ecdsa/keygen/local_party.go||ecdsa/keygen/local_party.go": [
          "File: ecdsa/keygen/local_party.go -> ecdsa/keygen/local_party.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:  p.temp.r4msgCulpritPj = make([]int, partyCount)",
          "204:  p.temp.r4msgCji = make([]*big.Int, partyCount)",
          "205:  p.temp.r4msgxji = make([]*big.Int, partyCount)",
          "207:  return p, nil",
          "208: }",
          "",
          "[Removed Lines]",
          "206:  p.temp.sessionId = sessionId",
          "",
          "[Added Lines]",
          "208:  p.temp.sessionId = tss.ExpandSessionID(sessionId, len(p.params.EC().Params().N.Bytes()))",
          "",
          "---------------"
        ],
        "ecdsa/keygen/local_party_test.go||ecdsa/keygen/local_party_test.go": [
          "File: ecdsa/keygen/local_party_test.go -> ecdsa/keygen/local_party_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: }",
          "61: func initTheParties(pIDs tss.SortedPartyIDs, p2pCtx *tss.PeerContext, threshold int, fixtures []LocalPartySaveData, outCh chan tss.Message, endCh chan LocalPartySaveData, parties []*LocalParty, errCh chan *tss.Error) ([]*LocalParty, chan *tss.Error) {",
          "65:  for i := 0; i < len(pIDs); i++ {",
          "66:   var P *LocalParty",
          "",
          "[Removed Lines]",
          "62:  q := big.Wrap(tss.EC().Params().N)",
          "63:  sessionId := common.GetBigRandomPositiveInt(q, q.BitLen())",
          "",
          "[Added Lines]",
          "65:  sessionId := new(big.Int).SetInt64(1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:   pIDs = tss.GenerateTestPartyIDs(testParticipants)",
          "123:  }",
          "124:  q := big.Wrap(tss.EC().Params().N)",
          "126:  var lp *LocalParty",
          "127:  out := make(chan tss.Message, len(pIDs))",
          "128:  if 0 < len(fixtures) {",
          "",
          "[Removed Lines]",
          "125:  sessionId := common.GetRandomPositiveInt(q)",
          "",
          "[Added Lines]",
          "127:  sessionId := common.GetBigRandomPositiveInt(q, q.BitLen())",
          "",
          "---------------"
        ],
        "ecdsa/keygen/local_stateful_party_test.go||ecdsa/keygen/local_stateful_party_test.go": [
          "File: ecdsa/keygen/local_stateful_party_test.go -> ecdsa/keygen/local_stateful_party_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  startGR := runtime.NumGoroutine()",
          "47:  q := int2.Wrap(tss.EC().Params().N)",
          "51:  preAdvanceFunc := func(p LocalStatefulParty, msg tss.ParsedMessage) (bool, *tss.Error) {",
          "",
          "[Removed Lines]",
          "48:  sessionId := common.GetRandomPositiveInt(q)",
          "",
          "[Added Lines]",
          "48:  sessionId := common.GetBigRandomPositiveInt(q, q.BitLen())",
          "",
          "---------------"
        ],
        "ecdsa/resharing/local_party.go||ecdsa/resharing/local_party.go": [
          "File: ecdsa/resharing/local_party.go -> ecdsa/resharing/local_party.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:  p.temp.dgRound3Message1s = make([]tss.ParsedMessage, oldPartyCount)          // from t+1 of Old Committee",
          "107:  p.temp.dgRound3Message2s = make([]tss.ParsedMessage, oldPartyCount)          // \"",
          "108:  p.temp.dgRound4Messages = make([]tss.ParsedMessage, params.NewPartyCount())  // from n of New Committee",
          "111:  if key.LocalPreParams.ValidateWithProof() {",
          "112:   p.save.LocalPreParams = key.LocalPreParams",
          "113:  }",
          "114:  return p, nil",
          "115: }",
          "",
          "[Removed Lines]",
          "109:  p.temp.sessionId = sessionId",
          "",
          "[Added Lines]",
          "115:  p.temp.sessionId = tss.ExpandSessionID(sessionId, len(p.params.EC().Params().N.Bytes()))",
          "",
          "---------------"
        ],
        "ecdsa/resharing/local_party_test.go||ecdsa/resharing/local_party_test.go": [
          "File: ecdsa/resharing/local_party_test.go -> ecdsa/resharing/local_party_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:  params, _ := tss.NewReSharingParameters(tss.S256(), oldP2PCtx, p2pCtx, pIDs[0], MaxParties+1, MaxParties/10,",
          "248:   len(pIDs), MaxParties/10)",
          "249:  q := big.Wrap(tss.EC().Params().N)",
          "252:  var err error",
          "253:  var void keygen.LocalPartySaveData",
          "",
          "[Removed Lines]",
          "250:  sessionId := common.GetRandomPositiveInt(q)",
          "",
          "[Added Lines]",
          "250:  sessionId := common.GetBigRandomPositiveInt(q, q.BitLen())",
          "",
          "---------------"
        ],
        "ecdsa/signing/key_derivation_test.go||ecdsa/signing/key_derivation_test.go": [
          "File: ecdsa/signing/key_derivation_test.go -> ecdsa/signing/key_derivation_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"github.com/binance-chain/tss-lib/tss\"",
          "23: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: func initTheParties(signPIDs tss.SortedPartyIDs, p2pCtx *tss.PeerContext, threshold int,",
          "26:  keys []keygen.LocalPartySaveData, keyDerivationDelta *big.Int, outCh chan tss.Message,",
          "27:  endCh chan common.SignatureData, parties []*LocalParty,",
          "28:  errCh chan *tss.Error) (*big.Int, []*LocalParty, chan *tss.Error) {",
          "32:  sessionId := new(big.Int).SetInt64(1)",
          "34:  msg := common.GetRandomPrimeInt(256)",
          "35:  for i := 0; i < len(signPIDs); i++ {",
          "36:   params, _ := tss.NewParameters(tss.EC(), p2pCtx, signPIDs[i], len(signPIDs), threshold)",
          "38:   P_, _ := NewLocalParty(msg, params, keys[i], keyDerivationDelta, outCh, endCh, sessionId)",
          "39:   P := P_.(*LocalParty)",
          "40:   parties = append(parties, P)",
          "41:   go func(P *LocalParty) {",
          "42:    if err := P.Start(); err != nil {",
          "43:     errCh <- err",
          "44:    }",
          "45:   }(P)",
          "46:  }",
          "47:  return msg, parties, errCh",
          "48: }",
          "",
          "---------------"
        ],
        "ecdsa/signing/local_party.go||ecdsa/signing/local_party.go": [
          "File: ecdsa/signing/local_party.go -> ecdsa/signing/local_party.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:  p.temp.keyDerivationDelta = keyDerivationDelta",
          "164:  p.temp.m = msg",
          "166:  p.temp.BigWs = make([]*crypto.ECPoint, partyCount)",
          "167:  p.temp.DeltaShareBetas = make([]*big.Int, partyCount)",
          "168:  p.temp.DeltaShareBetaNegs = make([]*big.Int, partyCount)",
          "",
          "[Removed Lines]",
          "165:  p.temp.sessionId = sessionId",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:  p.temp.r5msgsji = make([]*big.Int, partyCount)",
          "202:  p.temp.r5msg\ud835\udefd\u02b9ji = make([]*big.Int, partyCount)",
          "204:  return p, nil",
          "205: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:  p.temp.sessionId = tss.ExpandSessionID(sessionId, len(p.params.EC().Params().N.Bytes()))",
          "",
          "---------------"
        ],
        "ecdsa/signing/local_party_test.go||ecdsa/signing/local_party_test.go": [
          "File: ecdsa/signing/local_party_test.go -> ecdsa/signing/local_party_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:  }",
          "47: }",
          "72: func TestE2EConcurrent(t *testing.T) {",
          "73:  setUp(\"info\")",
          "74:  threshold := testThreshold",
          "",
          "[Removed Lines]",
          "49: func initTheParties(signPIDs tss.SortedPartyIDs, p2pCtx *tss.PeerContext, threshold int,",
          "50:  keys []keygen.LocalPartySaveData, keyDerivationDelta *big.Int, outCh chan tss.Message,",
          "51:  endCh chan common.SignatureData, parties []*LocalParty,",
          "52:  errCh chan *tss.Error) (*big.Int, []*LocalParty, chan *tss.Error) {",
          "53:  q := big.Wrap(tss.EC().Params().N)",
          "54:  sessionId := common.GetBigRandomPositiveInt(q, q.BitLen())",
          "56:  msg := common.GetRandomPrimeInt(256)",
          "57:  for i := 0; i < len(signPIDs); i++ {",
          "58:   params, _ := tss.NewParameters(tss.EC(), p2pCtx, signPIDs[i], len(signPIDs), threshold)",
          "60:   P_, _ := NewLocalParty(msg, params, keys[i], keyDerivationDelta, outCh, endCh, sessionId)",
          "61:   P := P_.(*LocalParty)",
          "62:   parties = append(parties, P)",
          "63:   go func(P *LocalParty) {",
          "64:    if err := P.Start(); err != nil {",
          "65:     errCh <- err",
          "66:    }",
          "67:   }(P)",
          "68:  }",
          "69:  return msg, parties, errCh",
          "70: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:  outCh := make(chan tss.Message, len(signPIDs))",
          "89:  endCh := make(chan common.SignatureData, len(signPIDs))",
          "90:  dumpCh := make(chan tss.Message, len(signPIDs))",
          "94:  updater := test.SharedPartyUpdater",
          "",
          "[Removed Lines]",
          "91:  q := big.Wrap(tss.EC().Params().N)",
          "92:  sessionId := common.GetBigRandomPositiveInt(q, q.BitLen())",
          "",
          "[Added Lines]",
          "71:  sessionId := new(big.Int).SetInt64(1)",
          "",
          "---------------"
        ],
        "ecdsa/signing/local_stateful_party_test.go||ecdsa/signing/local_stateful_party_test.go": [
          "File: ecdsa/signing/local_stateful_party_test.go -> ecdsa/signing/local_stateful_party_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  q := int2.Wrap(tss.EC().Params().N)",
          "45:  updater := test.SharedPartyUpdater",
          "46:  keyDerivationDelta := int2.NewInt(0)",
          "",
          "[Removed Lines]",
          "43:  sessionId := common.GetRandomPositiveInt(q)",
          "",
          "[Added Lines]",
          "43:  sessionId := common.GetBigRandomPositiveInt(q, q.BitLen())",
          "",
          "---------------"
        ],
        "eddsa/keygen/local_party.go||eddsa/keygen/local_party.go": [
          "File: eddsa/keygen/local_party.go -> eddsa/keygen/local_party.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  p.temp.kgRound3Messages = make([]tss.ParsedMessage, partyCount)",
          "84:  p.temp.KGCs = make([]cmt.HashCommitment, partyCount)",
          "86:  return p, nil",
          "87: }",
          "",
          "[Removed Lines]",
          "85:  p.temp.sessionId = sessionId",
          "",
          "[Added Lines]",
          "87:  p.temp.sessionId = tss.ExpandSessionID(sessionId, len(p.params.EC().Params().N.Bytes()))",
          "",
          "---------------"
        ],
        "eddsa/keygen/local_party_test.go||eddsa/keygen/local_party_test.go": [
          "File: eddsa/keygen/local_party_test.go -> eddsa/keygen/local_party_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  outCh := make(chan tss.Message, len(pIDs))",
          "60:  endCh := make(chan LocalPartySaveData, len(pIDs))",
          "61:  q := big.Wrap(tss.Edwards().Params().N)",
          "64:  updater := test.SharedPartyUpdater",
          "",
          "[Removed Lines]",
          "62:  sessionId := common.GetBigRandomPositiveInt(q, q.BitLen()-1)",
          "",
          "[Added Lines]",
          "62:  sessionId := common.MustGetRandomInt(q.BitLen() - 1)",
          "",
          "---------------"
        ],
        "eddsa/resharing/local_party.go||eddsa/resharing/local_party.go": [
          "File: eddsa/resharing/local_party.go -> eddsa/resharing/local_party.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:  p.temp.dgRound3Message1s = make([]tss.ParsedMessage, oldPartyCount)         // from t+1 of Old Committee",
          "96:  p.temp.dgRound3Message2s = make([]tss.ParsedMessage, oldPartyCount)         // \"",
          "97:  p.temp.dgRound4Messages = make([]tss.ParsedMessage, params.NewPartyCount()) // from n of New Committee",
          "99:  return p, nil",
          "100: }",
          "",
          "[Removed Lines]",
          "98:  p.temp.sessionId = sessionId",
          "",
          "[Added Lines]",
          "100:  p.temp.sessionId = tss.ExpandSessionID(sessionId, len(p.params.EC().Params().N.Bytes()))",
          "",
          "---------------"
        ],
        "eddsa/resharing/local_party_test.go||eddsa/resharing/local_party_test.go": [
          "File: eddsa/resharing/local_party_test.go -> eddsa/resharing/local_party_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:  outCh := make(chan tss.Message, bothCommitteesPax)",
          "67:  endCh := make(chan keygen.LocalPartySaveData, bothCommitteesPax)",
          "68:  q := big.Wrap(tss.EC().Params().N)",
          "71:  updater := test.SharedPartyUpdater",
          "",
          "[Removed Lines]",
          "69:  sessionId := common.GetBigRandomPositiveInt(q, q.BitLen()-1)",
          "",
          "[Added Lines]",
          "69:  sessionId := common.MustGetRandomInt(q.BitLen() - 1)",
          "",
          "---------------"
        ],
        "eddsa/signing/local_party.go||eddsa/signing/local_party.go": [
          "File: eddsa/signing/local_party.go -> eddsa/signing/local_party.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:  p.temp.m = msg",
          "95:  p.temp.cjs = make([]*big.Int, partyCount)",
          "97:  return p, nil",
          "98: }",
          "",
          "[Removed Lines]",
          "96:  p.temp.sessionId = sessionId",
          "",
          "[Added Lines]",
          "99:  p.temp.sessionId = tss.ExpandSessionID(sessionId, len(p.params.EC().Params().N.Bytes()))",
          "",
          "---------------"
        ],
        "eddsa/signing/local_party_test.go||eddsa/signing/local_party_test.go": [
          "File: eddsa/signing/local_party_test.go -> eddsa/signing/local_party_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  outCh := make(chan tss.Message, len(signPIDs))",
          "64:  endCh := make(chan common.SignatureData, len(signPIDs))",
          "65:  q := big.Wrap(tss.EC().Params().N)",
          "67:  updater := test.SharedPartyUpdater",
          "69:  msg := big.NewInt(200)",
          "",
          "[Removed Lines]",
          "66:  sessionId := common.GetBigRandomPositiveInt(q, q.BitLen()-1)",
          "",
          "[Added Lines]",
          "66:  sessionId := common.MustGetRandomInt(q.BitLen() - 1)",
          "",
          "---------------"
        ],
        "tss/session_id.go||tss/session_id.go": [
          "File: tss/session_id.go -> tss/session_id.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package tss",
          "3: import (",
          "4:  \"crypto\"",
          "6:  \"github.com/binance-chain/tss-lib/common/hash\"",
          "7:  big \"github.com/binance-chain/tss-lib/common/int\"",
          "8: )",
          "10: func ExpandSessionID(sessionId *big.Int, byteLen int) *big.Int {",
          "11:  if byteLen < len(sessionId.Bytes()) {",
          "12:   return sessionId",
          "13:  }",
          "15:  expanded := hash.ExpandXMD(crypto.SHA256, sessionId.Bytes(), sessionId.Bytes(), byteLen+1)",
          "16:  return new(big.Int).SetBytes(expanded)",
          "17: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16ad7e7f7411442baff48a44164a1cea8d3e3f6b",
      "candidate_info": {
        "commit_hash": "16ad7e7f7411442baff48a44164a1cea8d3e3f6b",
        "repo": "IoFinnet/threshlib",
        "commit_url": "https://github.com/IoFinnet/threshlib/commit/16ad7e7f7411442baff48a44164a1cea8d3e3f6b",
        "files": [
          "common/int/bigint.go",
          "common/int/modint.go"
        ],
        "message": "common/int: make constant-time arithmetic optional via feature flag",
        "before_after_code_files": [
          "common/int/bigint.go||common/int/bigint.go",
          "common/int/modint.go||common/int/modint.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/int/bigint.go||common/int/bigint.go"
          ],
          "candidate": [
            "common/int/bigint.go||common/int/bigint.go"
          ]
        }
      },
      "candidate_diff": {
        "common/int/bigint.go||common/int/bigint.go": [
          "File: common/int/bigint.go -> common/int/bigint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: type (",
          "14:  Int struct {",
          "15:   i     *big_const.Int",
          "17:  }",
          "18: )",
          "20: func NewInt(x uint64) *Int {",
          "22: }",
          "28:  }",
          "30: }",
          "32: func (z *Int) Set(x *Int) *Int {",
          "",
          "[Removed Lines]",
          "16:   mutex sync.RWMutex",
          "21:  return &Int{new(big_const.Int).SetUint64(x), sync.RWMutex{}}",
          "24: func Wrap(i *big.Int) *Int {",
          "25:  cBI := new(big_const.Int).SetBytes(i.Bytes())",
          "26:  if i.Cmp(zero.Big()) < 0 {",
          "27:   cBI = cBI.Neg(1)",
          "29:  return &Int{cBI, sync.RWMutex{}}",
          "",
          "[Added Lines]",
          "16:   i2    *big.Int",
          "17:   mutex *sync.RWMutex",
          "21: var (",
          "22:  constantTimeIntEnabled = false",
          "23: )",
          "27: func EnableConstantTimeArithmetic() (enabled bool) {",
          "28:  constantTimeIntEnabled = true",
          "29:  return constantTimeIntEnabled",
          "30: }",
          "33:  i := new(big_const.Int).SetUint64(x)",
          "34:  return &Int{i, i.Big(), new(sync.RWMutex)}",
          "37: func Wrap(i2 *big.Int) *Int {",
          "38:  i := new(big_const.Int).SetBytes(i2.Bytes())",
          "39:  if i2.Cmp(zero.Big()) < 0 {",
          "40:   i = i.Neg(1)",
          "42:  return &Int{i, i2, new(sync.RWMutex)}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:  x.ensureInitialized()",
          "35:  z.mutex.Lock()",
          "36:  defer z.mutex.Unlock()",
          "38:  return z",
          "39: }",
          "40: func (z *Int) SetBytes(data []byte) *Int {",
          "41:  z.ensureInitialized()",
          "42:  z.mutex.Lock()",
          "43:  defer z.mutex.Unlock()",
          "45:  return z",
          "46: }",
          "47: func (z *Int) SetInt64(x int64) *Int {",
          "",
          "[Removed Lines]",
          "37:  z.i = z.i.SetBytes(x.Bytes())",
          "44:  z.i = z.i.SetBytes(data)",
          "",
          "[Added Lines]",
          "50:  if constantTimeIntEnabled {",
          "51:   z.i = z.i.SetBytes(x.Bytes())",
          "52:  } else {",
          "53:   z.i2 = z.i2.SetBytes(x.Bytes())",
          "54:  }",
          "61:  if constantTimeIntEnabled {",
          "62:   z.i = z.i.SetBytes(data)",
          "63:  } else {",
          "64:   z.i2 = z.i2.SetBytes(data)",
          "65:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:  z.ensureInitialized()",
          "52:  z.mutex.Lock()",
          "53:  defer z.mutex.Unlock()",
          "55:  return z",
          "56: }",
          "57: func (z *Int) SetUint64(x uint64) *Int {",
          "58:  z.ensureInitialized()",
          "59:  z.mutex.Lock()",
          "60:  defer z.mutex.Unlock()",
          "76:  return z",
          "77: }",
          "78: func (z *Int) Clone() *Int {",
          "",
          "[Removed Lines]",
          "54:  z.i = z.i.SetUint64(uint64(x))",
          "61:  z.i = z.i.SetUint64(x)",
          "62:  return z",
          "63: }",
          "64: func (z *Int) SetNat(x *big_const.Nat) *Int {",
          "65:  z.ensureInitialized()",
          "66:  z.mutex.Lock()",
          "67:  defer z.mutex.Unlock()",
          "68:  z.i = z.i.SetNat(x)",
          "69:  return z",
          "70: }",
          "71: func (z *Int) SetBig(x *big.Int, size int) *Int {",
          "72:  z.ensureInitialized()",
          "73:  z.mutex.Lock()",
          "74:  defer z.mutex.Unlock()",
          "75:  z.i = z.i.SetBig(x, size)",
          "",
          "[Added Lines]",
          "75:  if constantTimeIntEnabled {",
          "76:   z.i = z.i.SetUint64(uint64(x))",
          "77:  } else {",
          "78:   z.i2 = z.i2.SetUint64(uint64(x))",
          "79:  }",
          "86:  if constantTimeIntEnabled {",
          "87:   z.i = z.i.SetUint64(x)",
          "88:  } else {",
          "89:   z.i2 = z.i2.SetUint64(x)",
          "90:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:  z.mutex.Lock()",
          "81:  defer z.mutex.Unlock()",
          "82:  cloned := new(Int)",
          "84:  return cloned",
          "85: }",
          "98: func (z *Int) Cmp(y *Int) (r int) {",
          "99:  z.ensureInitialized()",
          "100:  y.ensureInitialized()",
          "118: }",
          "119: func (z *Int) BitLen() int {",
          "120:  z.ensureInitialized()",
          "121:  z.mutex.RLock()",
          "122:  defer z.mutex.RUnlock()",
          "124:  return z.i.TrueLen()",
          "125: }",
          "",
          "[Removed Lines]",
          "83:  cloned.i = z.i.Clone()",
          "86: func (z *Int) Resize(cap int) *Int {",
          "87:  z.ensureInitialized()",
          "88:  z.mutex.Lock()",
          "89:  defer z.mutex.Unlock()",
          "90:  z.i = z.i.Resize(cap)",
          "91:  return z",
          "92: }",
          "93: func (z *Int) Eq(x *Int) big_const.Choice {",
          "94:  z.ensureInitialized()",
          "95:  x.ensureInitialized()",
          "96:  return z.i.Eq(x.i)",
          "97: }",
          "101:  return z.i.Big().Cmp(y.i.Big())",
          "102: }",
          "103: func (z *Int) Abs() *big_const.Nat {",
          "104:  z.ensureInitialized()",
          "105:  z.mutex.RLock()",
          "106:  defer z.mutex.RUnlock()",
          "107:  return z.i.Abs()",
          "108: }",
          "109: func (z *Int) IsNegative() big_const.Choice {",
          "110:  z.ensureInitialized()",
          "111:  return z.IsNegative()",
          "112: }",
          "113: func (z *Int) AnnouncedLen() int {",
          "114:  z.ensureInitialized()",
          "115:  z.mutex.RLock()",
          "116:  defer z.mutex.RUnlock()",
          "117:  return z.i.AnnouncedLen()",
          "",
          "[Added Lines]",
          "98:  if constantTimeIntEnabled {",
          "99:   cloned.i = z.i.Clone()",
          "100:  } else {",
          "101:   cloned.i2 = new(big.Int).SetBytes(z.i2.Bytes())",
          "102:  }",
          "108:  return z.Big().Cmp(y.Big())",
          "114:  if !constantTimeIntEnabled {",
          "115:   return z.i2.BitLen()",
          "116:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:  x.ensureInitialized()",
          "129:  z.mutex.Lock()",
          "130:  defer z.mutex.Unlock()",
          "133:  return z",
          "134: }",
          "135: func (z *Int) SetNeg() *Int {",
          "136:  z.ensureInitialized()",
          "137:  z.mutex.Lock()",
          "138:  defer z.mutex.Unlock()",
          "140:  return z",
          "141: }",
          "142: func (z *Int) SetInt(x *Int) *Int {",
          "",
          "[Removed Lines]",
          "132:  z.i = x.Clone().i.Neg(1)",
          "139:  z.i = z.i.Neg(1)",
          "",
          "[Added Lines]",
          "125:  if constantTimeIntEnabled {",
          "127:   z.i = x.Clone().i.Neg(1)",
          "128:  } else {",
          "129:   z.i2 = z.i2.Neg(x.i2)",
          "130:  }",
          "137:  if constantTimeIntEnabled {",
          "138:   z.i = z.i.Neg(1)",
          "139:  } else {",
          "140:   z.i2 = z.i2.Neg(z.i2)",
          "141:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "145:  z.mutex.Lock()",
          "146:  defer z.mutex.Unlock()",
          "147:  z.i = x.i",
          "148:  return z",
          "149: }",
          "150: func (z *Int) Add(x, y *Int) *Int {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:  z.i2 = x.i2",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "153:  y.ensureInitialized()",
          "154:  z.mutex.Lock()",
          "155:  defer z.mutex.Unlock()",
          "157:  return z",
          "158: }",
          "159: func (z *Int) Mul(x, y *Int) *Int {",
          "",
          "[Removed Lines]",
          "156:  z.i = z.i.Add(x.i, y.i, -1)",
          "",
          "[Added Lines]",
          "159:  if constantTimeIntEnabled {",
          "160:   z.i = z.i.Add(x.i, y.i, -1)",
          "161:  } else {",
          "162:   z.i2 = z.i2.Add(x.i2, y.i2)",
          "163:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "162:  y.ensureInitialized()",
          "163:  z.mutex.Lock()",
          "164:  defer z.mutex.Unlock()",
          "166:  return z",
          "167: }",
          "168: func (z *Int) Mod(x, y *Int) *Int {",
          "",
          "[Removed Lines]",
          "165:  z.i = z.i.Clone().Mul(x.i.Clone(), y.i.Clone(), -1)",
          "",
          "[Added Lines]",
          "172:  if constantTimeIntEnabled {",
          "173:   z.i = z.i.Clone().Mul(x.i.Clone(), y.i.Clone(), -1)",
          "174:  } else {",
          "175:   z.i2 = z.i2.Mul(x.i2, y.i2)",
          "176:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "171:  y.ensureInitialized()",
          "172:  z.mutex.Lock()",
          "173:  defer z.mutex.Unlock()",
          "182:  return z",
          "183: }",
          "190: func (z *Int) String() string {",
          "191:  z.ensureInitialized()",
          "192:  z.mutex.RLock()",
          "193:  defer z.mutex.RUnlock()",
          "195: }",
          "198: func (z *Int) SetBit(x *Int, i int, b uint) *Int {",
          "199:  z.ensureInitialized()",
          "200:  x.ensureInitialized()",
          "",
          "[Removed Lines]",
          "174:  z.i = z.i.SetBytes(x.i.Mod(big_const.ModulusFromBytes(y.Bytes())).Bytes())",
          "175:  return z",
          "176: }",
          "177: func (z *Int) SetModSymmetric(x *big_const.Nat, m *big_const.Modulus) *Int {",
          "178:  z.ensureInitialized()",
          "179:  z.mutex.Lock()",
          "180:  defer z.mutex.Unlock()",
          "181:  z.i = z.i.SetModSymmetric(x, m)",
          "184: func (z *Int) CheckInRange(m *big_const.Modulus) big_const.Choice {",
          "185:  z.ensureInitialized()",
          "186:  z.mutex.RLock()",
          "187:  defer z.mutex.RUnlock()",
          "188:  return z.i.CheckInRange(m)",
          "189: }",
          "194:  return z.i.String()",
          "",
          "[Added Lines]",
          "185:  if constantTimeIntEnabled {",
          "186:   z.i = z.i.SetBytes(x.i.Mod(big_const.ModulusFromBytes(y.Bytes())).Bytes())",
          "187:  } else {",
          "188:   z.i2 = z.i2.Mod(x.i2, y.i2)",
          "189:  }",
          "196:  if constantTimeIntEnabled {",
          "197:   return z.i.String()",
          "198:  } else {",
          "199:   return z.i2.String()",
          "200:  }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "205:  z.ensureInitialized()",
          "206:  x.ensureInitialized()",
          "207:  y.ensureInitialized()",
          "209:  return z.wrap(bi)",
          "210: }",
          "211: func (z *Int) Div(x, y *Int) *Int {",
          "212:  z.ensureInitialized()",
          "213:  x.ensureInitialized()",
          "214:  y.ensureInitialized()",
          "216:  return z.wrap(bi)",
          "217: }",
          "218: func (z *Int) Exp(x, y, m *Int) *Int {",
          "",
          "[Removed Lines]",
          "208:  bi := new(big.Int).Sub(x.i.Big(), y.i.Big())",
          "215:  bi := new(big.Int).Div(x.i.Big(), y.i.Big())",
          "",
          "[Added Lines]",
          "214:  bi := new(big.Int).Sub(x.Big(), y.Big())",
          "221:  bi := new(big.Int).Div(x.Big(), y.Big())",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "221:  y.ensureInitialized()",
          "222:  var bi *big.Int",
          "223:  if m == nil {",
          "225:  } else {",
          "227:  }",
          "228:  return z.wrap(bi)",
          "229: }",
          "",
          "[Removed Lines]",
          "224:   bi = new(big.Int).Exp(x.i.Big(), y.i.Big(), nil)",
          "226:   bi = new(big.Int).Exp(x.i.Big(), y.i.Big(), m.i.Big())",
          "",
          "[Added Lines]",
          "230:   bi = new(big.Int).Exp(x.Big(), y.Big(), nil)",
          "232:   bi = new(big.Int).Exp(x.Big(), y.Big(), m.Big())",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "231:  z.ensureInitialized()",
          "232:  x.ensureInitialized()",
          "233:  m.ensureInitialized()",
          "235:  return z.wrap(bi)",
          "236: }",
          "237: func (z *Int) Sqrt(x *Int) *Int {",
          "238:  z.ensureInitialized()",
          "239:  x.ensureInitialized()",
          "241:  return z.wrap(bi)",
          "243: }",
          "",
          "[Removed Lines]",
          "234:  bi := new(big.Int).ModInverse(x.i.Big(), m.i.Big())",
          "240:  bi := new(big.Int).Sqrt(x.i.Big())",
          "",
          "[Added Lines]",
          "240:  bi := new(big.Int).ModInverse(x.Big(), m.Big())",
          "246:  bi := new(big.Int).Sqrt(x.Big())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "245:  z.ensureInitialized()",
          "246:  x.ensureInitialized()",
          "247:  m.ensureInitialized()",
          "249:  return z.wrap(bi)",
          "250: }",
          "251: func (z *Int) Lsh(x *Int, n uint) *Int {",
          "",
          "[Removed Lines]",
          "248:  bi := new(big.Int).ModSqrt(x.i.Big(), m.i.Big())",
          "",
          "[Added Lines]",
          "254:  bi := new(big.Int).ModSqrt(x.Big(), m.Big())",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "273:  b.ensureInitialized()",
          "274:  var bi *big.Int",
          "275:  if x == nil && y == nil {",
          "277:  } else {",
          "278:   x.ensureInitialized()",
          "279:   y.ensureInitialized()",
          "281:  }",
          "282:  return z.wrap(bi)",
          "283: }",
          "284: func (z *Int) ProbablyPrime(n int) bool {",
          "285:  z.ensureInitialized()",
          "287: }",
          "288: func (z *Int) And(x, y *Int) *Int {",
          "289:  z.ensureInitialized()",
          "",
          "[Removed Lines]",
          "276:   bi = z.i.Big().GCD(nil, nil, a.Big(), b.Big())",
          "280:   bi = z.i.Big().GCD(x.Big(), y.Big(), a.Big(), b.Big())",
          "286:  return z.i.Big().ProbablyPrime(n)",
          "",
          "[Added Lines]",
          "282:   bi = z.Big().GCD(nil, nil, a.Big(), b.Big())",
          "286:   bi = z.Big().GCD(x.Big(), y.Big(), a.Big(), b.Big())",
          "292:  return z.Big().ProbablyPrime(n)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "297: func (z *Int) Sign() int {",
          "298:  z.ensureInitialized()",
          "300: }",
          "301: func (z *Int) Int64() int64 {",
          "302:  z.ensureInitialized()",
          "304: }",
          "305: func (z *Int) Uint64() uint64 {",
          "306:  z.ensureInitialized()",
          "308: }",
          "309: func (z *Int) Bit(i int) uint {",
          "310:  z.ensureInitialized()",
          "312: }",
          "313: func (z *Int) Bytes() []byte {",
          "314:  z.ensureInitialized()",
          "316: }",
          "317: func (z *Int) Big() *big.Int {",
          "318:  z.ensureInitialized()",
          "320: }",
          "324: func (z *Int) ensureInitialized() {",
          "326:   z.i = new(big_const.Int)",
          "327:  }",
          "328: }",
          "329: func (z *Int) wrap(bi *big.Int) *Int {",
          "330:  wrapped := Wrap(bi)",
          "331:  z.i = wrapped.i",
          "332:  return z",
          "333: }",
          "342: func SetString(s string, base int) (*Int, bool) {",
          "343:  bi := new(big.Int)",
          "344:  var b bool",
          "",
          "[Removed Lines]",
          "299:  return z.i.Big().Sign()",
          "303:  return z.i.Big().Int64()",
          "307:  return z.i.Big().Uint64()",
          "311:  return z.i.Big().Bit(i)",
          "315:  return z.i.Big().Bytes()",
          "319:  return z.i.Big()",
          "325:  if z.i == nil {",
          "335: func (z *Int) Text(base int) string {",
          "336:  z.ensureInitialized()",
          "337:  z.mutex.RLock()",
          "338:  defer z.mutex.RUnlock()",
          "339:  return z.i.Big().Text(base)",
          "340: }",
          "",
          "[Added Lines]",
          "305:  return z.Big().Sign()",
          "309:  return z.Big().Int64()",
          "313:  return z.Big().Uint64()",
          "317:  return z.Big().Bit(i)",
          "321:  return z.Big().Bytes()",
          "325:  if constantTimeIntEnabled {",
          "326:   return z.i.Big()",
          "327:  } else {",
          "328:   return z.i2",
          "329:  }",
          "335:  if constantTimeIntEnabled && z.i == nil {",
          "337:  } else if !constantTimeIntEnabled && z.i2 == nil {",
          "338:   z.i2 = new(big.Int)",
          "339:  }",
          "340:  if z.mutex == nil {",
          "341:   z.mutex = new(sync.RWMutex)",
          "347:  z.i2 = wrapped.i2",
          "",
          "---------------"
        ],
        "common/int/modint.go||common/int/modint.go": [
          "File: common/int/modint.go -> common/int/modint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: )",
          "22: func ModInt(mod *Int) *modInt {",
          "24:  return (*modInt)(newMod)",
          "25: }",
          "",
          "[Removed Lines]",
          "23:  newMod := &Int{mod.i.Clone(), sync.RWMutex{}}",
          "",
          "[Added Lines]",
          "23:  i := mod.Clone()",
          "24:  newMod := &Int{i.i, i.Big(), new(sync.RWMutex)}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:  mutex := sync.RWMutex{}",
          "47:  mutex.Lock()",
          "48:  defer mutex.Unlock()",
          "50:  i.Mul(x, y)",
          "51:  return i.Mod(i, mi.int())",
          "52: }",
          "",
          "[Removed Lines]",
          "49:  i := &Int{mi.i.Clone(), sync.RWMutex{}}",
          "",
          "[Added Lines]",
          "50:  i := &Int{mi.i, mi.int().Big(), new(sync.RWMutex)}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a11f92a2ea462078729fbec6614bb4b9693b9eb",
      "candidate_info": {
        "commit_hash": "6a11f92a2ea462078729fbec6614bb4b9693b9eb",
        "repo": "IoFinnet/threshlib",
        "commit_url": "https://github.com/IoFinnet/threshlib/commit/6a11f92a2ea462078729fbec6614bb4b9693b9eb",
        "files": [
          "common/int/bigint.go"
        ],
        "message": "KS-IOF-F-10 Security audit. Rejection Sampling Unimplemented: use new saferith bigint",
        "before_after_code_files": [
          "common/int/bigint.go||common/int/bigint.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/int/bigint.go||common/int/bigint.go"
          ],
          "candidate": [
            "common/int/bigint.go||common/int/bigint.go"
          ]
        }
      },
      "candidate_diff": {
        "common/int/bigint.go||common/int/bigint.go": [
          "File: common/int/bigint.go -> common/int/bigint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "195: }",
          "198: func (z *Int) Sub(x, y *Int) *Int {",
          "199:  z.ensureInitialized()",
          "200:  x.ensureInitialized()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198: func (z *Int) SetBit(x *Int, i int, b uint) *Int {",
          "199:  z.ensureInitialized()",
          "200:  x.ensureInitialized()",
          "201:  bi := new(big.Int).SetBit(x.Big(), i, b)",
          "202:  return z.wrap(bi)",
          "203: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f80c69cdf88a4444c764b4d3ba32b8c6cc5d474d",
      "candidate_info": {
        "commit_hash": "f80c69cdf88a4444c764b4d3ba32b8c6cc5d474d",
        "repo": "IoFinnet/threshlib",
        "commit_url": "https://github.com/IoFinnet/threshlib/commit/f80c69cdf88a4444c764b4d3ba32b8c6cc5d474d",
        "files": [
          "common/hash_test.go",
          "crypto/zkp/mod/mod.go",
          "crypto/zkp/mod/mod_test.go"
        ],
        "message": "for the rebase",
        "before_after_code_files": [
          "common/hash_test.go||common/hash_test.go",
          "crypto/zkp/mod/mod.go||crypto/zkp/mod/mod.go",
          "crypto/zkp/mod/mod_test.go||crypto/zkp/mod/mod_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/hash_test.go||common/hash_test.go"
          ],
          "candidate": [
            "common/hash_test.go||common/hash_test.go"
          ]
        }
      },
      "candidate_diff": {
        "common/hash_test.go||common/hash_test.go": [
          "File: common/hash_test.go -> common/hash_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"testing\"",
          "6:  . \"github.com/binance-chain/tss-lib/common\"",
          "7:  big \"github.com/binance-chain/tss-lib/common/int\"",
          "8:  \"github.com/stretchr/testify/assert\"",
          "9: )",
          "12:  input := [][]byte{[]byte(\"abc\"), []byte(\"def\"), []byte(\"ghi\")}",
          "13:  input2 := [][]byte{[]byte(\"abc\"), []byte(\"def\"), []byte(\"gh\")}",
          "14:  type args struct {",
          "",
          "[Removed Lines]",
          "11: func TestSHA512_256(t *testing.T) {",
          "",
          "[Added Lines]",
          "7:  . \"github.com/binance-chain/tss-lib/common/hash\"",
          "12: func TestSHA256(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:  }{{",
          "24:   name:    \"same inputs produce the same hash\",",
          "25:   args:    args{input},",
          "27:   wantLen: 256 / 8,",
          "28:  }, {",
          "29:   name:     \"different inputs produce a differing hash\",",
          "30:   args:     args{input2},",
          "32:   wantDiff: true,",
          "33:   wantLen:  256 / 8,",
          "34:  }}",
          "35:  for _, tt := range tests {",
          "36:   t.Run(tt.name, func(t *testing.T) {",
          "38:    if tt.wantDiff {",
          "41:     }",
          "42:    } else {",
          "45:     }",
          "46:    }",
          "47:    if tt.wantLen != len(got) {",
          "49:    }",
          "50:   })",
          "51:  }",
          "52: }",
          "55:  input := ByteSlicesToBigInts([][]byte{[]byte(\"abc\"), []byte(\"def\"), []byte(\"ghi\")})",
          "56:  input2 := ByteSlicesToBigInts([][]byte{[]byte(\"abc\"), []byte(\"def\"), []byte(\"gh\")})",
          "57:  input3 := new(big.Int).SetBytes([]byte(\"abc\"))",
          "",
          "[Removed Lines]",
          "26:   want:    SHA512_256(input...),",
          "31:   want:     SHA512_256(input...),",
          "37:    got := SHA512_256(tt.args.in...)",
          "39:     if !assert.NotEqualf(t, tt.want, got, \"SHA512_256(%v)\", tt.args.in) {",
          "40:      t.Errorf(\"SHA512_256() = %v, do not want %v\", got, tt.want)",
          "43:     if !assert.Equalf(t, tt.want, got, \"SHA512_256(%v)\", tt.args.in) {",
          "44:      t.Errorf(\"SHA512_256() = %v, want %v\", got, tt.want)",
          "48:     t.Errorf(\"SHA512_256() = bitlen %d, want %d\", len(got), tt.wantLen)",
          "54: func TestSHA512_256i(t *testing.T) {",
          "",
          "[Added Lines]",
          "27:   want:    SHA256(input...),",
          "32:   want:     SHA256(input...),",
          "38:    got := SHA256(tt.args.in...)",
          "40:     if !assert.NotEqualf(t, tt.want, got, \"SHA256(%v)\", tt.args.in) {",
          "41:      t.Errorf(\"SHA256() = %v, do not want %v\", got, tt.want)",
          "44:     if !assert.Equalf(t, tt.want, got, \"SHA256(%v)\", tt.args.in) {",
          "45:      t.Errorf(\"SHA256() = %v, want %v\", got, tt.want)",
          "49:     t.Errorf(\"SHA256() = bitlen %d, want %d\", len(got), tt.wantLen)",
          "55: func TestSHA256i(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:  }{{",
          "69:   name: \"same inputs produce the same hash\",",
          "70:   args: args{input},",
          "72:  }, {",
          "73:   name:     \"different inputs produce a differing hash\",",
          "74:   args:     args{input2},",
          "76:   wantDiff: true,",
          "77:  }, {",
          "78:   name:     \"different inputs produce a differing hash: Hash(-a) != Hash(a)\",",
          "79:   args:     args{[]*big.Int{new(big.Int).Neg(input3)}},",
          "81:   wantDiff: true,",
          "82:  }}",
          "83:  for _, tt := range tests {",
          "84:   t.Run(tt.name, func(t *testing.T) {",
          "86:    if tt.wantDiff {",
          "89:     }",
          "90:    } else {",
          "93:     }",
          "94:    }",
          "95:   })",
          "96:  }",
          "97: }",
          "100:  input := new(big.Int).SetBytes([]byte(\"abc\"))",
          "101:  input2 := new(big.Int).SetBytes([]byte(\"ab\"))",
          "102:  input3 := new(big.Int).SetBytes([]byte(\"cd\"))",
          "",
          "[Removed Lines]",
          "71:   want: SHA512_256i(input...),",
          "75:   want:     SHA512_256i(input...),",
          "80:   want:     SHA512_256i(input3),",
          "85:    got := SHA512_256i(tt.args.in...)",
          "87:     if !assert.NotEqualf(t, tt.want, got, \"SHA512_256i(%v)\", tt.args.in) {",
          "88:      t.Errorf(\"SHA512_256i() = %v, do not want %v\", got, tt.want)",
          "91:     if !assert.Equalf(t, tt.want, got, \"SHA512_256i(%v)\", tt.args.in) {",
          "92:      t.Errorf(\"SHA512_256i() = %v, want %v\", got, tt.want)",
          "99: func TestSHA512_256iOne(t *testing.T) {",
          "",
          "[Added Lines]",
          "72:   want: SHA256i(input...),",
          "76:   want:     SHA256i(input...),",
          "81:   want:     SHA256i(input3),",
          "86:    got := SHA256i(tt.args.in...)",
          "88:     if !assert.NotEqualf(t, tt.want, got, \"SHA256i(%v)\", tt.args.in) {",
          "89:      t.Errorf(\"SHA256i() = %v, do not want %v\", got, tt.want)",
          "92:     if !assert.Equalf(t, tt.want, got, \"SHA256i(%v)\", tt.args.in) {",
          "93:      t.Errorf(\"SHA256i() = %v, want %v\", got, tt.want)",
          "100: func TestSHA256iOne(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:  }{{",
          "112:   name: \"same inputs produce the same hash\",",
          "113:   args: args{input},",
          "115:  }, {",
          "116:   name:     \"different inputs produce a differing hash\",",
          "117:   args:     args{input2},",
          "119:   wantDiff: true,",
          "120:  }, {",
          "121:   name:     \"different inputs produce a differing hash: Hash(-a) != Hash(a)\",",
          "122:   args:     args{new(big.Int).Neg(input3)},",
          "124:   wantDiff: true,",
          "125:  }}",
          "126:  for _, tt := range tests {",
          "127:   t.Run(tt.name, func(t *testing.T) {",
          "129:    if tt.wantDiff {",
          "132:     }",
          "133:    } else {",
          "136:     }",
          "137:    }",
          "138:   })",
          "",
          "[Removed Lines]",
          "114:   want: SHA512_256iOne(input),",
          "118:   want:     SHA512_256iOne(input),",
          "123:   want:     SHA512_256i(input3),",
          "128:    got := SHA512_256iOne(tt.args.in)",
          "130:     if !assert.NotEqualf(t, tt.want, got, \"SHA512_256iOne(%v)\", tt.args.in) {",
          "131:      t.Errorf(\"SHA512_256iOne() = %v, do not want %v\", got, tt.want)",
          "134:     if !assert.Equalf(t, tt.want, got, \"SHA512_256iOne(%v)\", tt.args.in) {",
          "135:      t.Errorf(\"SHA512_256iOne() = %v, want %v\", got, tt.want)",
          "",
          "[Added Lines]",
          "115:   want: SHA256iOne(input),",
          "119:   want:     SHA256iOne(input),",
          "124:   want:     SHA256i(input3),",
          "129:    got := SHA256iOne(tt.args.in)",
          "131:     if !assert.NotEqualf(t, tt.want, got, \"SHA256iOne(%v)\", tt.args.in) {",
          "132:      t.Errorf(\"SHA256iOne() = %v, do not want %v\", got, tt.want)",
          "135:     if !assert.Equalf(t, tt.want, got, \"SHA256iOne(%v)\", tt.args.in) {",
          "136:      t.Errorf(\"SHA256iOne() = %v, want %v\", got, tt.want)",
          "",
          "---------------"
        ],
        "crypto/zkp/mod/mod.go||crypto/zkp/mod/mod.go": [
          "File: crypto/zkp/mod/mod.go -> crypto/zkp/mod/mod.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  return ok",
          "48: }",
          "51:  if N == nil || P == nil || Q == nil || nonce == nil || big.NewInt(0).Cmp(nonce) == 0 {",
          "52:   return nil, errors.New(\"nil value(s)\")",
          "53:  }",
          "",
          "[Removed Lines]",
          "50: func NewProofGivenNonce(q, N, P, Q, nonce *big.Int) (*ProofMod, error) {",
          "",
          "[Added Lines]",
          "50: func NewProof(q, N, P, Q, nonce *big.Int) (*ProofMod, error) {",
          "",
          "---------------"
        ],
        "crypto/zkp/mod/mod_test.go||crypto/zkp/mod/mod_test.go": [
          "File: crypto/zkp/mod/mod_test.go -> crypto/zkp/mod/mod_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  ok := proof.Verify(order, N, nonce)",
          "41:  assert.True(test, ok, \"proof must verify\")",
          "45:  assert.NoError(test, err2)",
          "48:  assert.True(test, ok2, \"proof must verify\")",
          "49: }",
          "",
          "[Removed Lines]",
          "43:  nonce := common.GetBigRandomPositiveInt(q, q.BitLen())",
          "44:  proof2, err2 := NewProofGivenNonce(N, P, Q, nonce)",
          "47:  ok2 := proof2.VerifyWithNonce(N, nonce)",
          "",
          "[Added Lines]",
          "43:  nonce = common.GetBigRandomPositiveInt(q, q.BitLen())",
          "44:  proof2, err2 := NewProof(order, N, P, Q, nonce)",
          "47:  ok2 := proof2.Verify(order, N, nonce)",
          "",
          "---------------"
        ]
      }
    }
  ]
}