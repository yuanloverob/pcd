{
  "cve_id": "CVE-2023-32694",
  "cve_desc": "Saleor Core is a composable, headless commerce API. Saleor's `validate_hmac_signature` function is vulnerable to timing attacks. Malicious users could abuse this vulnerability on Saleor deployments having the Adyen plugin enabled in order to determine the secret key and forge fake events, this could affect the database integrity such as marking an order as paid when it is not. This issue has been patched in versions 3.7.68, 3.8.40, 3.9.49, 3.10.36, 3.11.35, 3.12.25, and 3.13.16.",
  "repo": "saleor/saleor",
  "patch_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
  "patch_info": {
    "commit_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "repo": "saleor/saleor",
    "commit_url": "https://github.com/saleor/saleor/commit/1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "files": [
      "saleor/graphql/schema.graphql",
      "saleor/order/__init__.py",
      "saleor/order/events.py",
      "saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py"
    ],
    "message": "Add webhooks logic",
    "before_after_code_files": [
      "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
      "saleor/order/__init__.py||saleor/order/__init__.py",
      "saleor/order/events.py||saleor/order/events.py",
      "saleor/payment/__init__.py||saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py||saleor/payment/utils.py"
    ]
  },
  "patch_diff": {
    "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
      "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   exportProducts(input: ExportProductsInput!): ExportProducts",
      "2751:   checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode",
      "2752:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate",
      "2754:   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate",
      "2755:   checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach",
      "2756:   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach",
      "",
      "[Removed Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "[Added Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3063:   EMAIL_SENT",
      "3064:   PAYMENT_AUTHORIZED",
      "3065:   PAYMENT_CAPTURED",
      "3066:   PAYMENT_REFUNDED",
      "3067:   PAYMENT_VOIDED",
      "3068:   PAYMENT_FAILED",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3066:   PAYMENT_GATEWAY_NOTIFICATION",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3388: enum PaymentChargeStatusEnum {",
      "3389:   NOT_CHARGED",
      "3390:   PARTIALLY_CHARGED",
      "3391:   FULLY_CHARGED",
      "3392:   PARTIALLY_REFUNDED",
      "3393:   FULLY_REFUNDED",
      "3394: }",
      "3396: type PaymentCountableConnection {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3391:   PENDING",
      "3396:   REFUSED",
      "3397:   CANCELLED",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3435: input PaymentInput {",
      "3436:   gateway: String!",
      "3437:   token: String",
      "3439:   amount: Decimal",
      "3440:   billingAddress: AddressInput",
      "3441: }",
      "",
      "[Removed Lines]",
      "3438:   paymentData: JSONString",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5024: enum TransactionKind {",
      "5025:   AUTH",
      "5026:   REFUND",
      "5027:   CAPTURE",
      "5028:   VOID",
      "5029:   CONFIRM",
      "5030: }",
      "5032: union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029:   PENDING",
      "5031:   REFUND_ONGOING",
      "5035:   CANCEL",
      "",
      "---------------"
    ],
    "saleor/order/__init__.py||saleor/order/__init__.py": [
      "File: saleor/order/__init__.py -> saleor/order/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     PAYMENT_REFUNDED = \"payment_refunded\"",
      "52:     PAYMENT_VOIDED = \"payment_voided\"",
      "53:     PAYMENT_FAILED = \"payment_failed\"",
      "55:     INVOICE_REQUESTED = \"invoice_requested\"",
      "56:     INVOICE_GENERATED = \"invoice_generated\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     PAYMENT_GATEWAY_NOTIFICATION = \"payment_gateway_notification\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         (EMAIL_SENT, \"The email was sent\"),",
      "81:         (PAYMENT_AUTHORIZED, \"The payment was authorized\"),",
      "82:         (PAYMENT_CAPTURED, \"The payment was captured\"),",
      "83:         (PAYMENT_REFUNDED, \"The payment was refunded\"),",
      "84:         (PAYMENT_VOIDED, \"The payment was voided\"),",
      "85:         (PAYMENT_FAILED, \"The payment was failed\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         (PAYMENT_GATEWAY_NOTIFICATION, \"Notification from payment gateway\"),",
      "",
      "---------------"
    ],
    "saleor/order/events.py||saleor/order/events.py": [
      "File: saleor/order/events.py -> saleor/order/events.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:     )",
      "263: def fulfillment_canceled_event(",
      "265: ) -> OrderEvent:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: def payment_gateway_notification_event(",
      "265: ) -> OrderEvent:",
      "266:     if not _user_is_valid(user):",
      "267:         user = None",
      "268:     parameters = {\"message\": message}",
      "270:     if payment:",
      "271:         parameters.update({\"gateway\": payment.gateway, \"payment_id\": payment.token})",
      "273:     return OrderEvent.objects.create(",
      "274:         order=order,",
      "275:         type=OrderEvents.PAYMENT_GATEWAY_NOTIFICATION,",
      "276:         user=user,",
      "277:         parameters=parameters,",
      "278:     )",
      "",
      "---------------"
    ],
    "saleor/payment/__init__.py||saleor/payment/__init__.py": [
      "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     AUTH = \"auth\"",
      "61:     CAPTURE = \"capture\"",
      "62:     VOID = \"void\"",
      "63:     PENDING = \"pending\"",
      "64:     REFUND = \"refund\"",
      "65:     REFUND_ONGOING = \"refund_ongoing\"",
      "66:     CONFIRM = \"confirm\"",
      "67:     # FIXME we could use another status like WAITING_FOR_AUTH for transactions",
      "68:     # Which were authorized, but needs to be confirmed manually by staff",
      "69:     # eg. Braintree with \"submit_for_settlement\" enabled",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     CAPTURE_FAILED = \"capture_failed\"",
      "67:     REFUND_FAILED = \"refund_failed\"",
      "68:     REFUND_REVERSED = \"refund_reversed\"",
      "70:     CANCEL = \"cancel\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         (CAPTURE, \"Capture\"),",
      "76:         (VOID, \"Void\"),",
      "77:         (CONFIRM, \"Confirm\"),",
      "78:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         (CANCEL, \"Cancel\"),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:     FULLY_CHARGED = \"fully-charged\"",
      "98:     PARTIALLY_REFUNDED = \"partially-refunded\"",
      "99:     FULLY_REFUNDED = \"fully-refunded\"",
      "101:     CHOICES = [",
      "102:         (NOT_CHARGED, \"Not charged\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     REFUSED = \"refused\"",
      "106:     CANCELLED = \"cancelled\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:         (FULLY_CHARGED, \"Fully charged\"),",
      "106:         (PARTIALLY_REFUNDED, \"Partially refunded\"),",
      "107:         (FULLY_REFUNDED, \"Fully refunded\"),",
      "108:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:         (REFUSED, \"Refused\"),",
      "116:         (CANCELLED, \"Cancelled\"),",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
      "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import json",
      "4: import Adyen",
      "5: from babel.numbers import get_currency_precision",
      "6: from django.core.handlers.wsgi import WSGIRequest",
      "8: from graphql_relay import from_global_id",
      "10: from ....checkout.models import Checkout",
      "",
      "[Removed Lines]",
      "2: from typing import Optional",
      "7: from django.http import HttpResponse, JsonResponse",
      "",
      "[Added Lines]",
      "2: from typing import List, Optional",
      "6: from django.contrib.auth.hashers import make_password",
      "8: from django.http import HttpResponse, HttpResponseNotFound, JsonResponse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     request_data_for_payment,",
      "22:     request_for_payment_refund,",
      "23: )",
      "25: GATEWAY_NAME = \"Adyen\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: from .webhooks import handle_webhook",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:         {\"name\": \"Origin Key\", \"value\": \"\"},",
      "51:         {\"name\": \"Origin Url\", \"value\": \"\"},",
      "52:         {\"name\": \"Live\", \"value\": \"\"},",
      "54:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
      "55:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
      "56:         {\"name\": \"Notification user\", \"value\": \"\"},",
      "",
      "[Removed Lines]",
      "53:         {\"name\": \"Enable notifications\", \"value\": True},",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:             \"type\": ConfigurationTypeField.BOOLEAN,",
      "110:             \"help_text\": (",
      "111:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
      "114:                 \"https://docs.adyen.com/development-resources/webhooks\"",
      "115:             ),",
      "116:             \"label\": \"Enable notifications\",",
      "",
      "[Removed Lines]",
      "112:                 \"webhook url is <your-backend-url>/plugins/mirumee.payments.adyen/\"",
      "113:                 \"webhooks/ \"",
      "",
      "[Added Lines]",
      "113:                 \"webhook url is http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:             \"help_text\": (",
      "135:                 \"Provide secret key generated on Adyen side.\"",
      "136:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
      "138:             ),",
      "139:             \"label\": \"HMAC secret key\",",
      "140:         },",
      "",
      "[Removed Lines]",
      "137:                 \"ions-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "137:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
      "138:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "143:             \"help_text\": (",
      "144:                 \"Base User provided on the Adyen side for authenticate incoming \"",
      "145:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "147:             ),",
      "148:             \"label\": \"Notification user\",",
      "149:         },",
      "",
      "[Removed Lines]",
      "146:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "147:                 \"set-up-notifications-in-your-customer-area \"",
      "148:                 \"The Saleor webhook url is \"",
      "149:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "152:             \"help_text\": (",
      "153:                 \"User password provided on the Adyen side for authenticate incoming \"",
      "154:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "156:             ),",
      "157:             \"label\": \"Notification password\",",
      "158:         },",
      "",
      "[Removed Lines]",
      "155:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "158:                 \"set-up-notifications-in-your-customer-area \"",
      "159:                 \"The Saleor webhook url is \"",
      "160:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
      "164:         self.config = GatewayConfig(",
      "165:             gateway_name=GATEWAY_NAME,",
      "167:             supported_currencies=configuration[\"Supported currencies\"],",
      "168:             connection_params={",
      "169:                 \"api_key\": configuration[\"API key\"],",
      "",
      "[Removed Lines]",
      "166:             auto_capture=True,  # FIXME check this",
      "",
      "[Added Lines]",
      "171:             auto_capture=configuration[",
      "172:                 \"Automatically mark payment as a capture\"",
      "173:             ],  # FIXME check this",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "171:                 \"return_url\": configuration[\"Return Url\"],",
      "172:                 \"origin_key\": configuration[\"Origin Key\"],",
      "173:                 \"origin_url\": configuration[\"Origin Url\"],",
      "174:             },",
      "175:         )",
      "176:         api_key = self.config.connection_params[\"api_key\"]",
      "177:         self.adyen = Adyen.Adyen(xapikey=api_key)",
      "179:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
      "184:     def _get_gateway_config(self) -> GatewayConfig:",
      "185:         return self.config",
      "",
      "[Removed Lines]",
      "181:         print(request.body)",
      "182:         return HttpResponse(\"[accepted]\")",
      "",
      "[Added Lines]",
      "181:                 \"live\": configuration[\"Live\"],",
      "182:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
      "183:                 \"webhook_user\": configuration[\"Notification user\"],",
      "184:                 \"webhook_user_password\": configuration[\"Notification password\"],",
      "191:         config = self._get_gateway_config()",
      "192:         return handle_webhook(request, config)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "238:             raw_response=result.message,",
      "239:         )",
      "241:     @require_active_plugin",
      "242:     def get_payment_config(self, previous_value):",
      "243:         return []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @classmethod",
      "252:     def _update_config_items(",
      "253:         cls, configuration_to_update: List[dict], current_config: List[dict]",
      "254:     ):",
      "255:         super()._update_config_items(configuration_to_update, current_config)",
      "256:         for item in current_config:",
      "257:             if item.get(\"name\") == \"Notification password\":",
      "258:                 item[\"value\"] = make_password(item[\"value\"])",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
      "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: logger = logging.getLogger(__name__)",
      "18: def get_price_amount(value: Decimal, currency: str):",
      "19:     \"\"\"Adyen doesn't use values with comma.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: def convert_adyen_price_format(value: str, currency: str):",
      "19:     value = Decimal(value)",
      "20:     precision = get_currency_precision(currency)",
      "21:     number_places = Decimal(10) ** -precision",
      "22:     return value * number_places",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
      "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import base64",
      "2: import binascii",
      "3: import hashlib",
      "4: import hmac",
      "5: import json",
      "6: from typing import Any, Dict, Optional",
      "8: from django.contrib.auth.hashers import check_password",
      "9: from django.core.handlers.wsgi import WSGIRequest",
      "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
      "11: from django.http.request import HttpHeaders",
      "12: from graphql_relay import from_global_id",
      "14: from ....order.events import payment_gateway_notification_event",
      "15: from ....payment.models import Payment, Transaction",
      "16: from ... import TransactionKind",
      "17: from ...interface import GatewayConfig, GatewayResponse",
      "18: from ...utils import create_transaction, gateway_postprocess",
      "19: from .utils import convert_adyen_price_format",
      "22: def get_payment(payment_id: str) -> Payment:",
      "23:     _type, payment_id = from_global_id(payment_id)",
      "24:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
      "25:     return payment",
      "28: def get_transaction(",
      "29:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
      "30: ) -> Transaction:",
      "31:     transaction = payment.transactions.filter(kind=kind, token=transaction_id)",
      "32:     return transaction",
      "35: def create_new_transaction(notification, payment, kind):",
      "36:     transaction_id = notification.get(\"pspReference\")",
      "37:     currency = notification.get(\"amount\", {}).get(\"currency\")",
      "38:     amount = convert_adyen_price_format(",
      "39:         notification.get(\"amount\", {}).get(\"value\"), currency",
      "40:     )",
      "41:     is_success = True if notification.get(\"success\") == \"true\" else False",
      "43:     gateway_response = GatewayResponse(",
      "44:         kind=kind,",
      "45:         action_required=False,",
      "46:         transaction_id=transaction_id,",
      "47:         is_success=is_success,",
      "48:         amount=amount,",
      "49:         currency=currency,",
      "50:         error=\"\",",
      "51:         raw_response={},",
      "52:     )",
      "53:     return create_transaction(",
      "54:         payment,",
      "55:         kind=kind,",
      "56:         payment_information=None,",
      "57:         action_required=False,",
      "58:         gateway_response=gateway_response,",
      "59:     )",
      "62: def create_payment_notification_for_order(",
      "63:     payment: Payment, success_msg: str, failed_msg: Optional[str], is_success: bool",
      "64: ):",
      "65:     if not payment.order:",
      "66:         # Order is not assigned",
      "67:         return",
      "68:     msg = success_msg if is_success else failed_msg",
      "70:     payment_gateway_notification_event(",
      "71:         order=payment.order, user=None, message=msg, payment=payment",
      "72:     )",
      "75: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "76:     mark_capture = gateway_config.auto_capture",
      "77:     if mark_capture:",
      "78:         # If we mark order as a capture by default we don't need to handle auth actions",
      "79:         return",
      "80:     payment = get_payment(notification.get(\"merchantReference\"))",
      "81:     if not payment:",
      "82:         # We don't know anything about that payment",
      "83:         return",
      "85:     transaction_id = notification.get(\"pspReference\")",
      "86:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
      "87:     if transaction:",
      "88:         # We already marked it as Auth",
      "89:         return",
      "91:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
      "93:     success_msg = \"Adyen: The payment request was successful.\"",
      "94:     failed_msg = \"Adyen: The payment request failed.\"",
      "95:     create_payment_notification_for_order(",
      "96:         payment, success_msg, failed_msg, transaction.is_success",
      "97:     )",
      "100: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "101:     payment = get_payment(notification.get(\"merchantReference\"))",
      "102:     if not payment:",
      "103:         return",
      "104:     transaction_id = notification.get(\"pspReference\")",
      "105:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
      "106:     if transaction:",
      "107:         # it is already cancelled",
      "108:         return",
      "109:     new_transaction = create_new_transaction(",
      "110:         notification, payment, TransactionKind.CANCEL",
      "111:     )",
      "112:     gateway_postprocess(new_transaction, payment)",
      "114:     success_msg = \"Adyen: The cancel request was successful.\"",
      "115:     failed_msg = \"Adyen: The request failed.\"",
      "116:     create_payment_notification_for_order(",
      "117:         payment, success_msg, failed_msg, transaction.is_success",
      "118:     )",
      "121: def handle_cancel_or_refund(",
      "122:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "123: ):",
      "124:     additional_data = notification.get(\"additionalData\")",
      "125:     action = additional_data.get(\"modification.action\")",
      "126:     if action == \"refund\":",
      "127:         handle_refund(notification, gateway_config)",
      "128:     elif action == \"cancel\":",
      "129:         handle_cancellation(notification, gateway_config)",
      "132: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "133:     payment = get_payment(notification.get(\"merchantReference\"))",
      "134:     if not payment:",
      "135:         return",
      "136:     transaction_id = notification.get(\"pspReference\")",
      "137:     transaction = get_transaction(payment, transaction_id, TransactionKind.CAPTURE)",
      "138:     if transaction and transaction.is_success:",
      "139:         # it is already captured",
      "140:         return",
      "142:     new_transaction = create_new_transaction(",
      "143:         notification, payment, TransactionKind.CAPTURE",
      "144:     )",
      "145:     gateway_postprocess(new_transaction, payment)",
      "147:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
      "148:     failed_msg = f\"Adyen: The capture {transaction_id} request failed.\"",
      "149:     create_payment_notification_for_order(",
      "150:         payment, success_msg, failed_msg, transaction.is_success",
      "151:     )",
      "154: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "155:     payment = get_payment(notification.get(\"merchantReference\"))",
      "156:     if not payment:",
      "157:         return",
      "158:     transaction_id = notification.get(\"pspReference\")",
      "160:     transaction = get_transaction(",
      "161:         payment, transaction_id, TransactionKind.CAPTURE_FAILED",
      "162:     )",
      "163:     if transaction and transaction.is_success:",
      "164:         # it is already failed",
      "165:         return",
      "166:     new_transaction = create_new_transaction(",
      "167:         notification, payment, TransactionKind.CAPTURE_FAILED",
      "168:     )",
      "169:     gateway_postprocess(new_transaction, payment)",
      "171:     msg = f\"Adyen: The capture for {transaction_id} failed due to a technical issue.\"",
      "172:     create_payment_notification_for_order(payment, msg, None, True)",
      "175: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "176:     mark_capture = gateway_config.auto_capture",
      "177:     if mark_capture:",
      "178:         # If we mark order as a capture by default we don't need to handle this action",
      "179:         return",
      "180:     payment = get_payment(notification.get(\"merchantReference\"))",
      "181:     if not payment:",
      "182:         return",
      "183:     transaction_id = notification.get(\"pspReference\")",
      "184:     transaction = get_transaction(payment, transaction_id, TransactionKind.PENDING)",
      "185:     if transaction and transaction.is_success:",
      "186:         # it is already pending",
      "187:         return",
      "188:     new_transaction = create_new_transaction(",
      "189:         notification, payment, TransactionKind.PENDING",
      "190:     )",
      "191:     gateway_postprocess(new_transaction, payment)",
      "193:     msg = f\"Adyen: The transaction {transaction_id} is pending.\"",
      "194:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
      "197: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "198:     payment = get_payment(notification.get(\"merchantReference\"))",
      "199:     if not payment:",
      "200:         return",
      "201:     transaction_id = notification.get(\"pspReference\")",
      "202:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "203:     if transaction and transaction.is_success:",
      "204:         # it is already refunded",
      "205:         return",
      "206:     new_transaction = create_new_transaction(",
      "207:         notification, payment, TransactionKind.REFUND",
      "208:     )",
      "209:     gateway_postprocess(new_transaction, payment)",
      "211:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "212:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "213:     create_payment_notification_for_order(",
      "214:         payment, success_msg, failed_msg, transaction.is_success",
      "215:     )",
      "218: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "219:     payment = get_payment(notification.get(\"merchantReference\"))",
      "220:     if not payment:",
      "221:         return",
      "222:     transaction_id = notification.get(\"pspReference\")",
      "223:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "224:     if transaction and not transaction.is_success:",
      "225:         # The refund is already saved",
      "226:         return",
      "227:     new_transaction = create_new_transaction(",
      "228:         notification, payment, TransactionKind.REFUND",
      "229:     )",
      "230:     gateway_postprocess(new_transaction, payment)",
      "232:     msg = (",
      "233:         f\"The refund {transaction_id} failed due to a technical issue. If you receive \"",
      "234:         f\"more than two failures on the same refund, contact Adyen Support Team.\"",
      "235:     )",
      "236:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "239: def handle_reversed_refund(",
      "240:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "241: ):",
      "242:     payment = get_payment(notification.get(\"merchantReference\"))",
      "243:     if not payment:",
      "244:         return",
      "245:     transaction_id = notification.get(\"pspReference\")",
      "246:     transaction = get_transaction(",
      "247:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
      "248:     )",
      "250:     if transaction and not transaction.is_success:",
      "251:         # it is already refunded",
      "252:         return",
      "253:     new_transaction = create_new_transaction(",
      "254:         notification, payment, TransactionKind.REFUND_REVERSED",
      "255:     )",
      "256:     gateway_postprocess(new_transaction, payment)",
      "257:     msg = (",
      "258:         f\"Adyen: The refunded amount from {transaction_id} has been returned to Adyen, \"",
      "259:         f\"and is back in your account. This may happen if the shopper's bank account \"",
      "260:         f\"is no longer valid\"",
      "261:     )",
      "262:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "265: def handle_refund_with_data(",
      "266:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "267: ):",
      "269:     payment = get_payment(notification.get(\"merchantReference\"))",
      "270:     if not payment:",
      "271:         return",
      "272:     transaction_id = notification.get(\"pspReference\")",
      "273:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "274:     if transaction:",
      "275:         # it is already refunded",
      "276:         return",
      "277:     new_transaction = create_new_transaction(",
      "278:         notification, payment, TransactionKind.REFUND",
      "279:     )",
      "280:     gateway_postprocess(new_transaction, payment)",
      "281:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "282:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "283:     create_payment_notification_for_order(",
      "284:         payment, success_msg, failed_msg, transaction.is_success",
      "285:     )",
      "288: def webhook_not_implemented(",
      "289:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "290: ):",
      "291:     adyen_id = notification.get(\"pspReference\")",
      "292:     success = notification.get(\"success\", True)",
      "293:     event = notification.get(\"eventCode\")",
      "294:     payment = get_payment(notification.get(\"merchantReference\"))",
      "295:     if not payment:",
      "296:         return",
      "297:     msg = (",
      "298:         f\"Received not implemented notification from Adyen. Event name: {event}, \"",
      "299:         f\"success: {success}, adyen reference: {adyen_id}.\"",
      "300:     )",
      "301:     create_payment_notification_for_order(payment, msg, None, True)",
      "304: EVENT_MAP = {",
      "305:     \"AUTHORISATION\": handle_authorization,",
      "306:     \"AUTHORISATION_ADJUSTMENT\": webhook_not_implemented,",
      "307:     \"CANCELLATION\": handle_cancellation,",
      "308:     \"CANCEL_OR_REFUND\": handle_cancel_or_refund,",
      "309:     \"CAPTURE\": handle_capture,",
      "310:     \"CAPTURE_FAILED\": handle_failed_capture,",
      "311:     \"HANDLED_EXTERNALLY\": webhook_not_implemented,",
      "312:     \"ORDER_OPENED\": webhook_not_implemented,",
      "313:     \"ORDER_CLOSED\": webhook_not_implemented,",
      "314:     \"PENDING\": handle_pending,",
      "315:     \"PROCESS_RETRY\": webhook_not_implemented,",
      "316:     \"REFUND\": handle_refund,",
      "317:     \"REFUND_FAILED\": handle_failed_refund,",
      "318:     \"REFUNDED_REVERSED\": handle_reversed_refund,",
      "319:     \"REFUND_WITH_DATA\": handle_refund_with_data,",
      "320:     \"REPORT_AVAILABLE\": webhook_not_implemented,",
      "321:     \"VOID_PENDING_REFUND\": webhook_not_implemented,",
      "322: }",
      "325: def validate_hmac_signature(",
      "326:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
      "327: ) -> bool:",
      "329:     \"\"\"",
      "330:     pspReference 7914073381342284",
      "331:     originalReference",
      "332:     merchantAccountCode YOUR_MERCHANT_ACCOUNT",
      "333:     merchantReference TestPayment-1407325143704",
      "334:     value 1130",
      "335:     currency EUR",
      "336:     eventCode AUTHORISATION",
      "337:     success true",
      "338:     \"\"\"",
      "339:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
      "340:     if not hmac_key:",
      "341:         return True",
      "343:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
      "344:     if not hmac_signature and hmac_key:",
      "345:         return False",
      "347:     success = \"true\" if notification.get(\"success\", \"\") else \"false\"",
      "348:     if notification.get(\"success\", None) is None:",
      "349:         success = \"\"",
      "351:     payload_list = [",
      "352:         notification.get(\"pspReference\", \"\"),",
      "353:         notification.get(\"originalReference\", \"\"),",
      "354:         notification.get(\"merchantAccountCode\", \"\"),",
      "355:         notification.get(\"merchantReference\", \"\"),",
      "356:         notification.get(\"value\", \"\"),",
      "357:         notification.get(\"currency\", \"\"),",
      "358:         notification.get(\"eventCode\", \"\"),",
      "359:         success,",
      "360:     ]",
      "361:     payload = \":\".join(payload_list)",
      "363:     hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)",
      "364:     expected_merchant_sign = base64.b64encode(hm.digest())",
      "365:     return hmac_signature == expected_merchant_sign.decode(\"utf-8\")",
      "368: def validate_auth_user(headers: HttpHeaders, gateway_config: \"GatewayConfig\") -> bool:",
      "369:     username = gateway_config.connection_params[\"webhook_user\"]",
      "370:     password = gateway_config.connection_params[\"webhook_user_password\"]",
      "371:     auth_header = headers.get(\"Authorization\")",
      "372:     if not auth_header and not username:",
      "373:         return True",
      "375:     split_auth = auth_header.split(maxsplit=1)",
      "376:     prefix = \"BASIC\"",
      "378:     if len(split_auth) != 2 or split_auth[0].upper() != prefix:",
      "379:         return False",
      "381:     auth = split_auth[1]",
      "382:     try:",
      "383:         request_username, request_password = base64.b64decode(auth).split(\":\")",
      "384:         user_is_correct = request_username == username",
      "385:         if user_is_correct and check_password(request_password, password):",
      "386:             return True",
      "387:     except binascii.Error:",
      "388:         pass",
      "389:     return False",
      "392: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
      "393:     json_data = json.loads(request.body)",
      "394:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
      "395:     # object.",
      "396:     notification = json_data.get(\"notificationItems\")[0].get(",
      "397:         \"NotificationRequestItem\", {}",
      "398:     )",
      "400:     if not validate_hmac_signature(notification, gateway_config):",
      "401:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
      "402:     if not validate_auth_user(notification, gateway_config):",
      "403:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
      "405:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
      "406:     if event_handler:",
      "407:         event_handler(notification, gateway_config)",
      "408:         return HttpResponse(\"[accepted]\")",
      "409:     return HttpResponseNotFound()",
      "",
      "---------------"
    ],
    "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py": [
      "File: saleor/payment/migrations/0019_auto_20200721_1313.py -> saleor/payment/migrations/0019_auto_20200721_1313.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Generated by Django 3.0.6 on 2020-07-21 13:13",
      "3: from django.db import migrations, models",
      "6: class Migration(migrations.Migration):",
      "8:     dependencies = [",
      "9:         (\"payment\", \"0018_auto_20200720_1118\"),",
      "10:     ]",
      "12:     operations = [",
      "13:         migrations.AlterField(",
      "14:             model_name=\"payment\",",
      "15:             name=\"charge_status\",",
      "16:             field=models.CharField(",
      "17:                 choices=[",
      "18:                     (\"not-charged\", \"Not charged\"),",
      "19:                     (\"pending\", \"Pending\"),",
      "20:                     (\"partially-charged\", \"Partially charged\"),",
      "21:                     (\"fully-charged\", \"Fully charged\"),",
      "22:                     (\"partially-refunded\", \"Partially refunded\"),",
      "23:                     (\"fully-refunded\", \"Fully refunded\"),",
      "24:                     (\"refused\", \"Refused\"),",
      "25:                     (\"cancelled\", \"Cancelled\"),",
      "26:                 ],",
      "27:                 default=\"not-charged\",",
      "28:                 max_length=20,",
      "29:             ),",
      "30:         ),",
      "31:         migrations.AlterField(",
      "32:             model_name=\"transaction\",",
      "33:             name=\"kind\",",
      "34:             field=models.CharField(",
      "35:                 choices=[",
      "36:                     (\"auth\", \"Authorization\"),",
      "37:                     (\"pending\", \"Pending\"),",
      "38:                     (\"refund\", \"Refund\"),",
      "39:                     (\"refund_ongoing\", \"Refund in progress\"),",
      "40:                     (\"capture\", \"Capture\"),",
      "41:                     (\"void\", \"Void\"),",
      "42:                     (\"confirm\", \"Confirm\"),",
      "43:                     (\"cancel\", \"Cancel\"),",
      "44:                 ],",
      "45:                 max_length=25,",
      "46:             ),",
      "47:         ),",
      "48:     ]",
      "",
      "---------------"
    ],
    "saleor/payment/utils.py||saleor/payment/utils.py": [
      "File: saleor/payment/utils.py -> saleor/payment/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: def create_transaction(",
      "133:     payment: Payment,",
      "134:     kind: str,",
      "136:     action_required: bool = False,",
      "137:     gateway_response: GatewayResponse = None,",
      "138:     error_msg=None,",
      "",
      "[Removed Lines]",
      "135:     payment_information: PaymentData,",
      "",
      "[Added Lines]",
      "135:     payment_information: Optional[PaymentData],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
      "221:     #     payment.save(update_fields=[\"charge_status\", ])",
      "224:         payment.captured_amount += transaction.amount",
      "226:         # Set payment charge status to fully charged",
      "",
      "[Removed Lines]",
      "223:     if transaction_kind in {TransactionKind.CAPTURE, TransactionKind.CONFIRM}:",
      "",
      "[Added Lines]",
      "223:     if transaction_kind in {",
      "224:         TransactionKind.CAPTURE,",
      "225:         TransactionKind.CONFIRM,",
      "226:         TransactionKind.REFUND_REVERSED,",
      "227:     }:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "249:         payment.save(",
      "250:             update_fields=[\"charge_status\",]",
      "251:         )",
      "254: def fetch_customer_id(user: User, gateway: str):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:     elif transaction_kind == TransactionKind.CANCEL:",
      "257:         payment.charge_status = ChargeStatus.CANCELLED",
      "258:         payment.save(",
      "259:             update_fields=[\"charge_status\",]",
      "260:         )",
      "261:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
      "262:         if payment.charge_status in {",
      "263:             ChargeStatus.PARTIALLY_CHARGED,",
      "264:             ChargeStatus.FULLY_CHARGED,",
      "265:         }:",
      "266:             payment.captured_amount -= transaction.amount",
      "267:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
      "268:             if payment.get_charge_amount() <= 0:",
      "269:                 payment.charge_status = ChargeStatus.FULLY_CHARGED",
      "271:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cf062f0563df4bd3d5114e1c4968839c35f57dc6",
      "candidate_info": {
        "commit_hash": "cf062f0563df4bd3d5114e1c4968839c35f57dc6",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/cf062f0563df4bd3d5114e1c4968839c35f57dc6",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Update handling additionals actions in adyen - create transactions",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
          "200:         config = self._get_gateway_config()",
          "201:         if path.startswith(WEBHOOK_PATH):",
          "202:             return handle_webhook(request, config)",
          "203:         elif path.startswith(ADDITIONAL_ACTION_PATH):",
          "204:             return handle_additional_actions(",
          "206:             )",
          "207:         return HttpResponseNotFound()",
          "",
          "[Removed Lines]",
          "205:                 request, self.adyen.checkout.payments_details",
          "",
          "[Added Lines]",
          "201:         self.config.connection_params[\"adyen_auto_capture\"]",
          "206:                 request,",
          "207:                 self.adyen.checkout.payments_details,",
          "208:                 config.connection_params[\"adyen_auto_capture\"],",
          "209:                 config.auto_capture,",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py": [
          "File: saleor/payment/gateways/adyen/tests/test_webhook.py -> saleor/payment/gateways/adyen/tests/test_webhook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from .....order import OrderStatus",
          "11: from .... import ChargeStatus, PaymentError, TransactionKind",
          "12: from ..utils import get_price_amount",
          "13: from ..webhooks import (",
          "14:     create_new_transaction,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: from ....models import Transaction",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "632:     assert is_valid is True",
          "636:     # given",
          "637:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "638:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "639:     )",
          "640:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\"])",
          "642:     checkout = payment_adyen_for_checkout.checkout",
          "643:     payment_id = graphene.Node.to_global_id(\"Payment\", payment_adyen_for_checkout.pk)",
          "644:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "645:     request_mock = mock.Mock()",
          "646:     request_mock.GET = {\"payment\": payment_id, \"checkout\": checkout.pk}",
          "647:     request_mock.POST = {\"payload\": \"test\"}",
          "",
          "[Removed Lines]",
          "635: def test_handle_additional_actions(payment_adyen_for_checkout):",
          "",
          "[Added Lines]",
          "636: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "637: def test_handle_additional_actions(api_call_mock, payment_adyen_for_checkout):",
          "644:     transaction_count = payment_adyen_for_checkout.transactions.all().count()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "650:     message = {",
          "651:         \"resultCode\": \"Test\",",
          "652:     }",
          "655:     # when",
          "658:     # then",
          "659:     assert response.status_code == 302",
          "660:     assert f\"checkout={quote_plus(checkout_id)}\" in response.url",
          "661:     assert f\"resultCode={message['resultCode']}\" in response.url",
          "662:     assert f\"payment={quote_plus(payment_id)}\" in response.url",
          "665: def test_handle_additional_actions_more_action_required(payment_adyen_for_checkout):",
          "",
          "[Removed Lines]",
          "653:     payment_details_mock.return_value.message = message",
          "656:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "[Added Lines]",
          "658:     api_call_mock.return_value.message = message",
          "660:     # when",
          "661:     response = handle_additional_actions(",
          "662:         request_mock, payment_details_mock, False, False",
          "663:     )",
          "665:     # then",
          "666:     payment_adyen_for_checkout.refresh_from_db()",
          "667:     assert response.status_code == 302",
          "668:     assert f\"checkout={quote_plus(checkout_id)}\" in response.url",
          "669:     assert f\"resultCode={message['resultCode']}\" in response.url",
          "670:     assert f\"payment={quote_plus(payment_id)}\" in response.url",
          "671:     assert (",
          "672:         payment_adyen_for_checkout.transactions.all().count() == transaction_count + 1",
          "673:     )",
          "674:     transaction = payment_adyen_for_checkout.transactions.last()",
          "675:     assert transaction.kind == \"auth\"",
          "678: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "679: def test_handle_additional_actions_adyen_auto_capture(",
          "680:     api_call_mock, payment_adyen_for_checkout",
          "681: ):",
          "682:     # given",
          "683:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "684:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "685:     )",
          "686:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\"])",
          "688:     transaction_count = payment_adyen_for_checkout.transactions.all().count()",
          "690:     checkout = payment_adyen_for_checkout.checkout",
          "691:     payment_id = graphene.Node.to_global_id(\"Payment\", payment_adyen_for_checkout.pk)",
          "692:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "694:     request_mock = mock.Mock()",
          "695:     request_mock.GET = {\"payment\": payment_id, \"checkout\": checkout.pk}",
          "696:     request_mock.POST = {\"payload\": \"test\"}",
          "698:     payment_details_mock = mock.Mock()",
          "699:     message = {",
          "700:         \"resultCode\": \"Test\",",
          "701:     }",
          "702:     api_call_mock.return_value.message = message",
          "705:     response = handle_additional_actions(",
          "706:         request_mock, payment_details_mock, True, False",
          "707:     )",
          "710:     payment_adyen_for_checkout.refresh_from_db()",
          "715:     assert (",
          "716:         payment_adyen_for_checkout.transactions.all().count() == transaction_count + 1",
          "717:     )",
          "718:     transaction = payment_adyen_for_checkout.transactions.last()",
          "719:     assert transaction.kind == \"capture\"",
          "722: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.capture\")",
          "723: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "724: def test_handle_additional_actions_auto_capture(",
          "725:     api_call_mock, capture_mock, payment_adyen_for_checkout",
          "726: ):",
          "727:     # given",
          "728:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "729:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "730:     )",
          "731:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\"])",
          "733:     payment_adyen_for_checkout.transactions.create(",
          "734:         amount=payment_adyen_for_checkout.total,",
          "735:         kind=TransactionKind.AUTH,",
          "736:         gateway_response={},",
          "737:         is_success=True,",
          "738:     )",
          "740:     transaction_count = payment_adyen_for_checkout.transactions.all().count()",
          "742:     checkout = payment_adyen_for_checkout.checkout",
          "743:     payment_id = graphene.Node.to_global_id(\"Payment\", payment_adyen_for_checkout.pk)",
          "744:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "746:     request_mock = mock.Mock()",
          "747:     request_mock.GET = {\"payment\": payment_id, \"checkout\": checkout.pk}",
          "748:     request_mock.POST = {\"payload\": \"test\"}",
          "750:     payment_details_mock = mock.Mock()",
          "751:     message = {",
          "752:         \"resultCode\": \"Test\",",
          "753:     }",
          "754:     api_call_mock.return_value.message = message",
          "756:     capture_mock.return_value = Transaction.objects.create(",
          "757:         payment=payment_adyen_for_checkout,",
          "758:         action_required=False,",
          "759:         kind=TransactionKind.CAPTURE,",
          "760:         gateway_response={},",
          "761:         is_success=True,",
          "762:     )",
          "764:     # when",
          "765:     response = handle_additional_actions(",
          "766:         request_mock, payment_details_mock, False, True",
          "767:     )",
          "769:     # then",
          "770:     payment_adyen_for_checkout.refresh_from_db()",
          "771:     assert response.status_code == 302",
          "772:     assert f\"checkout={quote_plus(checkout_id)}\" in response.url",
          "773:     assert f\"resultCode={message['resultCode']}\" in response.url",
          "774:     assert f\"payment={quote_plus(payment_id)}\" in response.url",
          "775:     assert (",
          "776:         payment_adyen_for_checkout.transactions.all().count() == transaction_count + 2",
          "777:     )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "691:     payment_details_mock.return_value.message = message",
          "693:     # when",
          "696:     # then",
          "697:     assert response.status_code == 302",
          "",
          "[Removed Lines]",
          "694:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "[Added Lines]",
          "809:     response = handle_additional_actions(",
          "810:         request_mock, payment_details_mock, False, False",
          "811:     )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "727:     payment_adyen_for_checkout.delete()",
          "729:     # when",
          "732:     # then",
          "733:     assert response.status_code == 404",
          "",
          "[Removed Lines]",
          "730:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "[Added Lines]",
          "847:     response = handle_additional_actions(",
          "848:         request_mock, payment_details_mock, False, False",
          "849:     )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "760:     }",
          "762:     # when",
          "765:     # then",
          "766:     assert response.status_code == 404",
          "",
          "[Removed Lines]",
          "763:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "[Added Lines]",
          "882:     response = handle_additional_actions(",
          "883:         request_mock, payment_details_mock, False, False",
          "884:     )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "788:     payment_details_mock.return_value.message = message",
          "790:     # when",
          "793:     # then",
          "794:     assert response.status_code == 404",
          "",
          "[Removed Lines]",
          "791:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "[Added Lines]",
          "912:     response = handle_additional_actions(",
          "913:         request_mock, payment_details_mock, False, False",
          "914:     )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "816:     payment_details_mock.return_value.message = message",
          "818:     # when",
          "821:     # then",
          "822:     assert response.status_code == 400",
          "",
          "[Removed Lines]",
          "819:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "[Added Lines]",
          "942:     response = handle_additional_actions(",
          "943:         request_mock, payment_details_mock, False, False",
          "944:     )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "849:     payment_details_mock.return_value.message = message",
          "851:     # when",
          "854:     # then",
          "855:     assert response.status_code == 400",
          "",
          "[Removed Lines]",
          "852:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "[Added Lines]",
          "977:     response = handle_additional_actions(",
          "978:         request_mock, payment_details_mock, False, False",
          "979:     )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "888:     payment_details_mock.return_value.message = message",
          "890:     # when",
          "893:     # then",
          "894:     assert response.status_code == 400",
          "",
          "[Removed Lines]",
          "891:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "[Added Lines]",
          "1018:     response = handle_additional_actions(",
          "1019:         request_mock, payment_details_mock, False, False",
          "1020:     )",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "917:     payment_details_mock.return_value.message = message",
          "919:     # when",
          "922:     # then",
          "923:     assert response.status_code == 400",
          "",
          "[Removed Lines]",
          "920:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "[Added Lines]",
          "1049:     response = handle_additional_actions(",
          "1050:         request_mock, payment_details_mock, False, False",
          "1051:     )",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "948:     payment_details_mock.return_value.message = message",
          "950:     # when",
          "953:     # then",
          "954:     assert response.status_code == 400",
          "",
          "[Removed Lines]",
          "951:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "[Added Lines]",
          "1082:     response = handle_additional_actions(",
          "1083:         request_mock, payment_details_mock, False, False",
          "1084:     )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from typing import Any, Callable, Dict, Optional",
          "7: from urllib.parse import urlencode",
          "9: import graphene",
          "10: from django.contrib.auth.hashers import check_password",
          "11: from django.core.exceptions import ObjectDoesNotExist",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import Adyen",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: from ... import ChargeStatus, PaymentError, TransactionKind",
          "28: from ...gateway import capture",
          "29: from ...interface import GatewayConfig, GatewayResponse",
          "31: from .utils import api_call, convert_adyen_price_format",
          "",
          "[Removed Lines]",
          "30: from ...utils import create_transaction, gateway_postprocess",
          "",
          "[Added Lines]",
          "31: from ...utils import create_payment_information, create_transaction, gateway_postprocess",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "503:     return HttpResponseNotFound()",
          "507:     payment_id = request.GET.get(\"payment\")",
          "508:     checkout_pk = request.GET.get(\"checkout\")",
          "",
          "[Removed Lines]",
          "506: def handle_additional_actions(request: WSGIRequest, payment_details: Callable):",
          "",
          "[Added Lines]",
          "507: def handle_additional_actions(",
          "508:     request: WSGIRequest,",
          "509:     payment_details: Callable,",
          "510:     adyen_auto_capture: bool,",
          "511:     auto_capture: bool,",
          "512: ):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "538:     except PaymentError as e:",
          "539:         return HttpResponseBadRequest(str(e))",
          "558: def validate_payment(payment: \"Payment\", checkout_pk: str):",
          "",
          "[Removed Lines]",
          "541:     checkout_id = graphene.Node.to_global_id(",
          "542:         \"Checkout\", checkout_pk  # type: ignore",
          "543:     )",
          "545:     params = {",
          "546:         \"checkout\": checkout_id,",
          "547:         \"payment\": payment_id,",
          "548:         \"resultCode\": result.message[\"resultCode\"],",
          "549:     }",
          "551:     # Check if further action is needed.",
          "552:     if \"action\" in result.message:",
          "553:         params.update(result.message[\"action\"])",
          "555:     return redirect(prepare_url(urlencode(params), return_url))",
          "",
          "[Added Lines]",
          "547:     handle_api_response(payment, result, adyen_auto_capture, auto_capture)",
          "549:     redirect_url = prepare_redirect_url(payment_id, checkout_pk, result, return_url)",
          "551:     return redirect(redirect_url)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "572:     if payment.gateway != \"mirumee.payments.adyen\":",
          "573:         return HttpResponseBadRequest(\"Cannot perform not adyen payment.\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572: def prepare_redirect_url(",
          "573:     payment_id: str, checkout_pk: str, api_response: Adyen.Adyen, return_url: str",
          "574: ):",
          "575:     checkout_id = graphene.Node.to_global_id(",
          "576:         \"Checkout\", checkout_pk  # type: ignore",
          "577:     )",
          "579:     params = {",
          "580:         \"checkout\": checkout_id,",
          "581:         \"payment\": payment_id,",
          "582:         \"resultCode\": api_response.message[\"resultCode\"],",
          "583:     }",
          "585:     # Check if further action is needed.",
          "586:     if \"action\" in api_response.message:",
          "587:         params.update(api_response.message[\"action\"])",
          "589:     return prepare_url(urlencode(params), return_url)",
          "592: def handle_api_response(",
          "593:     payment: Payment,",
          "594:     response: Adyen.Adyen,",
          "595:     adyen_auto_capture: bool,",
          "596:     auto_capture: bool,",
          "597: ):",
          "598:     kind = TransactionKind.AUTH",
          "599:     if adyen_auto_capture:",
          "600:         kind = TransactionKind.CAPTURE",
          "602:     payment_data = create_payment_information(",
          "603:         payment=payment, payment_token=payment.token,",
          "604:     )",
          "606:     action_required = False",
          "607:     error_message = response.message.get(\"refusalReason\")",
          "608:     if \"action\" in response.message:",
          "609:         action_required = True",
          "611:     gateway_response = GatewayResponse(",
          "612:         is_success=True if error_message else False,",
          "613:         action_required=action_required,",
          "614:         kind=kind,",
          "615:         amount=payment_data.amount,",
          "616:         currency=payment_data.currency,",
          "617:         transaction_id=response.message.get(\"pspReference\", \"\"),",
          "618:         error=error_message,",
          "619:         raw_response=response.message,",
          "620:         action_required_data=response.message.get(\"action\"),",
          "621:     )",
          "623:     transaction = create_transaction(",
          "624:         payment=payment,",
          "625:         kind=kind,",
          "626:         action_required=action_required,",
          "627:         payment_information=payment_data,",
          "628:         gateway_response=gateway_response,",
          "629:     )",
          "631:     if auto_capture:",
          "632:         transaction = capture(payment, amount=transaction.amount)",
          "634:     gateway_postprocess(transaction, payment)",
          "",
          "---------------"
        ]
      }
    }
  ]
}