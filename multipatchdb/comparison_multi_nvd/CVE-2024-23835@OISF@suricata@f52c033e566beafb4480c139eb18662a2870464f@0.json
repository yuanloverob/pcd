{
  "cve_id": "CVE-2024-23835",
  "cve_desc": "Suricata is a network Intrusion Detection System, Intrusion Prevention System and Network Security Monitoring engine.  Prior to version 7.0.3, excessive memory use during pgsql parsing could lead to OOM-related crashes.  This vulnerability is patched in 7.0.3.  As workaround, users can disable the pgsql app layer parser.",
  "repo": "OISF/suricata",
  "patch_hash": "f52c033e566beafb4480c139eb18662a2870464f",
  "patch_info": {
    "commit_hash": "f52c033e566beafb4480c139eb18662a2870464f",
    "repo": "OISF/suricata",
    "commit_url": "https://github.com/OISF/suricata/commit/f52c033e566beafb4480c139eb18662a2870464f",
    "files": [
      "rust/src/pgsql/parser.rs"
    ],
    "message": "pgsql: parse auth message within its bound\n\nIf the next PDU is already in the slice next, do not use it and\nrestrict ourselves to the length of this PDU.\nAvoids overconsumption of memory by quadratic complexity, when\nhaving many small PDUS in one big chunk being parsed\n\nTicket: #6411",
    "before_after_code_files": [
      "rust/src/pgsql/parser.rs||rust/src/pgsql/parser.rs"
    ]
  },
  "patch_diff": {
    "rust/src/pgsql/parser.rs||rust/src/pgsql/parser.rs": [
      "File: rust/src/pgsql/parser.rs -> rust/src/pgsql/parser.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "719:     let (i, identifier) = verify(be_u8, |&x| x == b'R')(i)?;",
      "720:     let (i, length) = verify(be_u32, |&x| x >= 8)(i)?;",
      "721:     let (i, auth_type) = be_u32(i)?;",
      "723:     let (i, message) = map_parser(",
      "724:         take(length - 8),",
      "725:         |b: &'a [u8]| {",
      "",
      "[Removed Lines]",
      "722:     let (i, payload) = peek(rest)(i)?;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "729:                                 identifier,",
      "730:                                 length,",
      "731:                                 auth_type,",
      "733:                             }))),",
      "734:                 3 => Ok((b, PgsqlBEMessage::AuthenticationCleartextPassword(",
      "735:                             AuthenticationMessage {",
      "736:                                 identifier,",
      "737:                                 length,",
      "738:                                 auth_type,",
      "740:                             }))),",
      "741:                 5 => {",
      "742:                     let (b, salt) = all_consuming(take(4_usize))(b)?;",
      "",
      "[Removed Lines]",
      "732:                                 payload: payload.to_vec(),",
      "739:                                 payload: payload.to_vec(),",
      "",
      "[Added Lines]",
      "731:                                 payload: b.to_vec(),",
      "738:                                 payload: b.to_vec(),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "753:                                 identifier,",
      "754:                                 length,",
      "755:                                 auth_type,",
      "757:                             }))),",
      "759:                 10 => {",
      "",
      "[Removed Lines]",
      "756:                                 payload: payload.to_vec(),",
      "",
      "[Added Lines]",
      "755:                                 payload: b.to_vec(),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "767:                                 })))",
      "768:                 }",
      "769:                 11 => {",
      "771:                     Ok((b, PgsqlBEMessage::AuthenticationSASLContinue(",
      "772:                                 AuthenticationMessage {",
      "773:                                     identifier,",
      "774:                                     length,",
      "775:                                     auth_type,",
      "777:                                 })))",
      "778:                 },",
      "779:                 12 => {",
      "782:                                 AuthenticationMessage {",
      "783:                                     identifier,",
      "784:                                     length,",
      "785:                                     auth_type,",
      "787:                                 }",
      "788:                                 )))",
      "789:                 }",
      "",
      "[Removed Lines]",
      "770:                     let (b, sasl_challenge) = rest(i)?;",
      "776:                                     payload: sasl_challenge.to_vec(),",
      "780:                     let (i, signature) = take(length - 8)(i)?;",
      "781:                     Ok((i, PgsqlBEMessage::AuthenticationSASLFinal(",
      "786:                                     payload: signature.to_vec(),",
      "",
      "[Added Lines]",
      "774:                                     payload: b.to_vec(),",
      "778:                     Ok((b, PgsqlBEMessage::AuthenticationSASLFinal(",
      "783:                                     payload: b.to_vec(),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "61a32360eba3c032de51029a05515ab46690286f",
      "candidate_info": {
        "commit_hash": "61a32360eba3c032de51029a05515ab46690286f",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/61a32360eba3c032de51029a05515ab46690286f",
        "files": [
          "rust/src/pgsql/parser.rs"
        ],
        "message": "pgsql: parse auth message within its bound\n\nIf the next PDU is already in the slice next, do not use it and\nrestrict ourselves to the length of this PDU.\nAvoids overconsumption of memory by quadratic complexity, when\nhaving many small PDUS in one big chunk being parsed\n\nTicket: #6411\n(cherry picked from commit f52c033e566beafb4480c139eb18662a2870464f)",
        "before_after_code_files": [
          "rust/src/pgsql/parser.rs||rust/src/pgsql/parser.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "rust/src/pgsql/parser.rs||rust/src/pgsql/parser.rs"
          ],
          "candidate": [
            "rust/src/pgsql/parser.rs||rust/src/pgsql/parser.rs"
          ]
        }
      },
      "candidate_diff": {
        "rust/src/pgsql/parser.rs||rust/src/pgsql/parser.rs": [
          "File: rust/src/pgsql/parser.rs -> rust/src/pgsql/parser.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "719:     let (i, identifier) = verify(be_u8, |&x| x == b'R')(i)?;",
          "720:     let (i, length) = verify(be_u32, |&x| x >= 8)(i)?;",
          "721:     let (i, auth_type) = be_u32(i)?;",
          "723:     let (i, message) = map_parser(",
          "724:         take(length - 8),",
          "725:         |b: &'a [u8]| {",
          "",
          "[Removed Lines]",
          "722:     let (i, payload) = peek(rest)(i)?;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "729:                                 identifier,",
          "730:                                 length,",
          "731:                                 auth_type,",
          "733:                             }))),",
          "734:                 3 => Ok((b, PgsqlBEMessage::AuthenticationCleartextPassword(",
          "735:                             AuthenticationMessage {",
          "736:                                 identifier,",
          "737:                                 length,",
          "738:                                 auth_type,",
          "740:                             }))),",
          "741:                 5 => {",
          "742:                     let (b, salt) = all_consuming(take(4_usize))(b)?;",
          "",
          "[Removed Lines]",
          "732:                                 payload: payload.to_vec(),",
          "739:                                 payload: payload.to_vec(),",
          "",
          "[Added Lines]",
          "731:                                 payload: b.to_vec(),",
          "738:                                 payload: b.to_vec(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "753:                                 identifier,",
          "754:                                 length,",
          "755:                                 auth_type,",
          "757:                             }))),",
          "759:                 10 => {",
          "",
          "[Removed Lines]",
          "756:                                 payload: payload.to_vec(),",
          "",
          "[Added Lines]",
          "755:                                 payload: b.to_vec(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "767:                                 })))",
          "768:                 }",
          "769:                 11 => {",
          "771:                     Ok((b, PgsqlBEMessage::AuthenticationSASLContinue(",
          "772:                                 AuthenticationMessage {",
          "773:                                     identifier,",
          "774:                                     length,",
          "775:                                     auth_type,",
          "777:                                 })))",
          "778:                 },",
          "779:                 12 => {",
          "782:                                 AuthenticationMessage {",
          "783:                                     identifier,",
          "784:                                     length,",
          "785:                                     auth_type,",
          "787:                                 }",
          "788:                                 )))",
          "789:                 }",
          "",
          "[Removed Lines]",
          "770:                     let (b, sasl_challenge) = rest(i)?;",
          "776:                                     payload: sasl_challenge.to_vec(),",
          "780:                     let (i, signature) = take(length - 8)(i)?;",
          "781:                     Ok((i, PgsqlBEMessage::AuthenticationSASLFinal(",
          "786:                                     payload: signature.to_vec(),",
          "",
          "[Added Lines]",
          "774:                                     payload: b.to_vec(),",
          "778:                     Ok((b, PgsqlBEMessage::AuthenticationSASLFinal(",
          "783:                                     payload: b.to_vec(),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7aeb718dd7242bb90c900a281294ac5cb95874c0",
      "candidate_info": {
        "commit_hash": "7aeb718dd7242bb90c900a281294ac5cb95874c0",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/7aeb718dd7242bb90c900a281294ac5cb95874c0",
        "files": [
          "rust/src/pgsql/logger.rs",
          "rust/src/pgsql/parser.rs",
          "rust/src/pgsql/pgsql.rs"
        ],
        "message": "pgsql: apply rust fmt changes",
        "before_after_code_files": [
          "rust/src/pgsql/logger.rs||rust/src/pgsql/logger.rs",
          "rust/src/pgsql/parser.rs||rust/src/pgsql/parser.rs",
          "rust/src/pgsql/pgsql.rs||rust/src/pgsql/pgsql.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rust/src/pgsql/parser.rs||rust/src/pgsql/parser.rs"
          ],
          "candidate": [
            "rust/src/pgsql/parser.rs||rust/src/pgsql/parser.rs"
          ]
        }
      },
      "candidate_diff": {
        "rust/src/pgsql/logger.rs||rust/src/pgsql/logger.rs": [
          "File: rust/src/pgsql/logger.rs -> rust/src/pgsql/logger.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:         }) => {",
          "98:             js.set_string_from_bytes(req.to_str(), payload)?;",
          "99:         }",
          "104:             js.set_string(\"message\", \"cancel_request\")?;",
          "105:             js.set_uint(\"process_id\", (*pid).into())?;",
          "106:             js.set_uint(\"secret_key\", (*backend_key).into())?;",
          "",
          "[Removed Lines]",
          "100:         PgsqlFEMessage::CancelRequest(CancelRequestMessage {",
          "101:             pid,",
          "102:             backend_key,",
          "103:         }) => {",
          "",
          "[Added Lines]",
          "100:         PgsqlFEMessage::CancelRequest(CancelRequestMessage { pid, backend_key }) => {",
          "",
          "---------------"
        ],
        "rust/src/pgsql/parser.rs||rust/src/pgsql/parser.rs": [
          "File: rust/src/pgsql/parser.rs -> rust/src/pgsql/parser.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:             }",
          "280:             PgsqlBEMessage::ConsolidatedDataRow(_) => \"data_row\",",
          "281:             PgsqlBEMessage::NotificationResponse(_) => \"notification_response\",",
          "283:         }",
          "284:     }",
          "",
          "[Removed Lines]",
          "282:             PgsqlBEMessage::UnknownMessageType(_) => \"unknown_message_type\"",
          "",
          "[Added Lines]",
          "282:             PgsqlBEMessage::UnknownMessageType(_) => \"unknown_message_type\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "534:     let (i, _) = tag(\"\\x00\")(i)?;",
          "535:     let (i, param_value) = take_until(\"\\x00\")(i)?;",
          "536:     let (i, _) = tag(\"\\x00\")(i)?;",
          "541: }",
          "543: pub fn pgsql_parse_startup_parameters(i: &[u8]) -> IResult<&[u8], PgsqlStartupParameters> {",
          "545:     if let Some(ref mut params) = optional {",
          "547:         let mut index: usize = 0;",
          "548:         for (j, p) in params.iter().enumerate() {",
          "549:             if p.name == PgsqlParameters::User {",
          "",
          "[Removed Lines]",
          "537:     Ok((i, PgsqlParameter {",
          "538:         name: PgsqlParameters::from(param_name),",
          "539:         value: param_value.to_vec(),",
          "540:     }))",
          "544:     let (i, mut optional) = opt(terminated(many1(pgsql_parse_generic_parameter), tag(\"\\x00\")))(i)?;",
          "546:         let mut user = PgsqlParameter{name: PgsqlParameters::User, value: Vec::new() };",
          "",
          "[Added Lines]",
          "537:     Ok((",
          "538:         i,",
          "539:         PgsqlParameter {",
          "540:             name: PgsqlParameters::from(param_name),",
          "541:             value: param_value.to_vec(),",
          "542:         },",
          "543:     ))",
          "547:     let (i, mut optional) = opt(terminated(",
          "548:         many1(pgsql_parse_generic_parameter),",
          "549:         tag(\"\\x00\"),",
          "550:     ))(i)?;",
          "552:         let mut user = PgsqlParameter {",
          "553:             name: PgsqlParameters::User,",
          "554:             value: Vec::new(),",
          "555:         };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "555:         if user.value.is_empty() {",
          "556:             return Err(Err::Error(make_error(i, ErrorKind::Tag)));",
          "557:         }",
          "564:     }",
          "565:     return Err(Err::Error(make_error(i, ErrorKind::Tag)));",
          "566: }",
          "569:     let (i, sasl_mechanism) = parse_sasl_mechanism(i)?;",
          "570:     let (i, param_length) = be_u32(i)?;",
          "",
          "[Removed Lines]",
          "558:         return Ok((i, PgsqlStartupParameters{",
          "559:             user,",
          "560:             optional_params: if !params.is_empty() {",
          "561:                 optional",
          "562:             } else { None },",
          "563:         }));",
          "568: fn parse_sasl_initial_response_payload(i: &[u8]) -> IResult<&[u8], (SASLAuthenticationMechanism, u32, Vec<u8>)> {",
          "",
          "[Added Lines]",
          "567:         return Ok((",
          "568:             i,",
          "569:             PgsqlStartupParameters {",
          "570:                 user,",
          "571:                 optional_params: if !params.is_empty() { optional } else { None },",
          "572:             },",
          "573:         ));",
          "578: fn parse_sasl_initial_response_payload(",
          "579:     i: &[u8],",
          "580: ) -> IResult<&[u8], (SASLAuthenticationMechanism, u32, Vec<u8>)> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "577: pub fn parse_sasl_initial_response(i: &[u8]) -> IResult<&[u8], PgsqlFEMessage> {",
          "578:     let (i, identifier) = verify(be_u8, |&x| x == b'p')(i)?;",
          "579:     let (i, length) = parse_length(i)?;",
          "589: }",
          "591: pub fn parse_sasl_response(i: &[u8]) -> IResult<&[u8], PgsqlFEMessage> {",
          "592:     let (i, identifier) = verify(be_u8, |&x| x == b'p')(i)?;",
          "593:     let (i, length) = parse_length(i)?;",
          "594:     let (i, payload) = take(length - PGSQL_LENGTH_FIELD)(i)?;",
          "601:     Ok((i, resp))",
          "602: }",
          "",
          "[Removed Lines]",
          "580:     let (i, payload) = map_parser(take(length - PGSQL_LENGTH_FIELD), parse_sasl_initial_response_payload)(i)?;",
          "581:     Ok((i, PgsqlFEMessage::SASLInitialResponse(",
          "582:                 SASLInitialResponsePacket {",
          "583:                     identifier,",
          "584:                     length,",
          "585:                     auth_mechanism: payload.0,",
          "586:                     param_length: payload.1,",
          "587:                     sasl_param: payload.2,",
          "588:                 })))",
          "595:     let resp = PgsqlFEMessage::SASLResponse(",
          "596:         RegularPacket {",
          "597:             identifier,",
          "598:             length,",
          "599:             payload: payload.to_vec(),",
          "600:         });",
          "",
          "[Added Lines]",
          "592:     let (i, payload) = map_parser(",
          "593:         take(length - PGSQL_LENGTH_FIELD),",
          "594:         parse_sasl_initial_response_payload,",
          "595:     )(i)?;",
          "596:     Ok((",
          "597:         i,",
          "598:         PgsqlFEMessage::SASLInitialResponse(SASLInitialResponsePacket {",
          "599:             identifier,",
          "600:             length,",
          "601:             auth_mechanism: payload.0,",
          "602:             param_length: payload.1,",
          "603:             sasl_param: payload.2,",
          "604:         }),",
          "605:     ))",
          "612:     let resp = PgsqlFEMessage::SASLResponse(RegularPacket {",
          "613:         identifier,",
          "614:         length,",
          "615:         payload: payload.to_vec(),",
          "616:     });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "605:     let (i, len) = verify(be_u32, |&x| x >= 8)(i)?;",
          "606:     let (i, proto_major) = peek(be_u16)(i)?;",
          "607:     let (i, b) = take(len - PGSQL_LENGTH_FIELD)(i)?;",
          "615:                     length: len,",
          "616:                     proto_major,",
          "617:                     proto_minor,",
          "628:                         length: len,",
          "629:                         proto_major,",
          "639:     Ok((i, message))",
          "640: }",
          "",
          "[Removed Lines]",
          "608:     let (_, message) =",
          "609:         match proto_major {",
          "610:             1..=3 => {",
          "611:                 let (b, proto_major) = be_u16(b)?;",
          "612:                 let (b, proto_minor) = be_u16(b)?;",
          "613:                 let (b, params) = pgsql_parse_startup_parameters(b)?;",
          "614:                 (b, PgsqlFEMessage::StartupMessage(StartupPacket{",
          "618:                     params}))",
          "619:             },",
          "620:             PGSQL_DUMMY_PROTO_MAJOR => {",
          "621:                 let (b, proto_major) = be_u16(b)?;",
          "622:                 let (b, proto_minor) = be_u16(b)?;",
          "623:                 let (b, message) = match proto_minor {",
          "624:                     PGSQL_DUMMY_PROTO_CANCEL_REQUEST => {",
          "625:                         parse_cancel_request(b)?",
          "626:                     },",
          "627:                     PGSQL_DUMMY_PROTO_MINOR_SSL => (b, PgsqlFEMessage::SSLRequest(DummyStartupPacket{",
          "630:                         proto_minor",
          "631:                     })),",
          "632:                     _ => return Err(Err::Error(make_error(b, ErrorKind::Switch))),",
          "633:                 };",
          "635:                 (b, message)",
          "636:             }",
          "637:             _ => return Err(Err::Error(make_error(b, ErrorKind::Switch))),",
          "638:         };",
          "",
          "[Added Lines]",
          "624:     let (_, message) = match proto_major {",
          "625:         1..=3 => {",
          "626:             let (b, proto_major) = be_u16(b)?;",
          "627:             let (b, proto_minor) = be_u16(b)?;",
          "628:             let (b, params) = pgsql_parse_startup_parameters(b)?;",
          "629:             (",
          "630:                 b,",
          "631:                 PgsqlFEMessage::StartupMessage(StartupPacket {",
          "635:                     params,",
          "636:                 }),",
          "637:             )",
          "638:         }",
          "639:         PGSQL_DUMMY_PROTO_MAJOR => {",
          "640:             let (b, proto_major) = be_u16(b)?;",
          "641:             let (b, proto_minor) = be_u16(b)?;",
          "642:             let (b, message) = match proto_minor {",
          "643:                 PGSQL_DUMMY_PROTO_CANCEL_REQUEST => parse_cancel_request(b)?,",
          "644:                 PGSQL_DUMMY_PROTO_MINOR_SSL => (",
          "645:                     b,",
          "646:                     PgsqlFEMessage::SSLRequest(DummyStartupPacket {",
          "649:                         proto_minor,",
          "650:                     }),",
          "651:                 ),",
          "652:                 _ => return Err(Err::Error(make_error(b, ErrorKind::Switch))),",
          "653:             };",
          "655:             (b, message)",
          "656:         }",
          "657:         _ => return Err(Err::Error(make_error(b, ErrorKind::Switch))),",
          "658:     };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "655: pub fn parse_password_message(i: &[u8]) -> IResult<&[u8], PgsqlFEMessage> {",
          "656:     let (i, identifier) = verify(be_u8, |&x| x == b'p')(i)?;",
          "657:     let (i, length) = parse_length(i)?;",
          "668: }",
          "670: fn parse_simple_query(i: &[u8]) -> IResult<&[u8], PgsqlFEMessage> {",
          "671:     let (i, identifier) = verify(be_u8, |&x| x == b'Q')(i)?;",
          "672:     let (i, length) = parse_length(i)?;",
          "673:     let (i, query) = map_parser(take(length - PGSQL_LENGTH_FIELD), take_until1(\"\\x00\"))(i)?;",
          "679: }",
          "681: fn parse_cancel_request(i: &[u8]) -> IResult<&[u8], PgsqlFEMessage> {",
          "682:     let (i, pid) = be_u32(i)?;",
          "683:     let (i, backend_key) = be_u32(i)?;",
          "688: }",
          "690: fn parse_terminate_message(i: &[u8]) -> IResult<&[u8], PgsqlFEMessage> {",
          "691:     let (i, identifier) = verify(be_u8, |&x| x == b'X')(i)?;",
          "692:     let (i, length) = parse_length(i)?;",
          "694: }",
          "",
          "[Removed Lines]",
          "658:     let (i, password) = map_parser(",
          "659:         take(length - PGSQL_LENGTH_FIELD),",
          "660:         take_until1(\"\\x00\")",
          "661:         )(i)?;",
          "662:     Ok((i, PgsqlFEMessage::PasswordMessage(",
          "663:                 RegularPacket{",
          "664:                     identifier,",
          "665:                     length,",
          "666:                     payload: password.to_vec(),",
          "667:                 })))",
          "674:     Ok((i, PgsqlFEMessage::SimpleQuery(RegularPacket {",
          "675:         identifier,",
          "676:         length,",
          "677:         payload: query.to_vec(),",
          "678:     })))",
          "684:     Ok((i, PgsqlFEMessage::CancelRequest(CancelRequestMessage {",
          "685:         pid,",
          "686:         backend_key,",
          "687:     })))",
          "693:     Ok((i, PgsqlFEMessage::Terminate(TerminationMessage { identifier, length })))",
          "",
          "[Added Lines]",
          "678:     let (i, password) = map_parser(take(length - PGSQL_LENGTH_FIELD), take_until1(\"\\x00\"))(i)?;",
          "679:     Ok((",
          "680:         i,",
          "681:         PgsqlFEMessage::PasswordMessage(RegularPacket {",
          "682:             identifier,",
          "683:             length,",
          "684:             payload: password.to_vec(),",
          "685:         }),",
          "686:     ))",
          "693:     Ok((",
          "694:         i,",
          "695:         PgsqlFEMessage::SimpleQuery(RegularPacket {",
          "696:             identifier,",
          "697:             length,",
          "698:             payload: query.to_vec(),",
          "699:         }),",
          "700:     ))",
          "706:     Ok((",
          "707:         i,",
          "708:         PgsqlFEMessage::CancelRequest(CancelRequestMessage { pid, backend_key }),",
          "709:     ))",
          "715:     Ok((",
          "716:         i,",
          "717:         PgsqlFEMessage::Terminate(TerminationMessage { identifier, length }),",
          "718:     ))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "704:             let (i, identifier) = be_u8(i)?;",
          "705:             let (i, length) = verify(be_u32, |&x| x > PGSQL_LENGTH_FIELD)(i)?;",
          "706:             let (i, payload) = take(length - PGSQL_LENGTH_FIELD)(i)?;",
          "708:                 identifier,",
          "709:                 length,",
          "710:                 payload: payload.to_vec(),",
          "",
          "[Removed Lines]",
          "707:             let unknown = PgsqlFEMessage::UnknownMessageType (RegularPacket{",
          "",
          "[Added Lines]",
          "732:             let unknown = PgsqlFEMessage::UnknownMessageType(RegularPacket {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "719:     let (i, identifier) = verify(be_u8, |&x| x == b'R')(i)?;",
          "720:     let (i, length) = verify(be_u32, |&x| x >= 8)(i)?;",
          "721:     let (i, auth_type) = be_u32(i)?;",
          "790:         }",
          "792:     Ok((i, message))",
          "793: }",
          "795: fn parse_parameter_status_message(i: &[u8]) -> IResult<&[u8], PgsqlBEMessage> {",
          "796:     let (i, identifier) = verify(be_u8, |&x| x == b'S')(i)?;",
          "797:     let (i, length) = parse_length(i)?;",
          "804: }",
          "806: pub fn parse_ssl_response(i: &[u8]) -> IResult<&[u8], PgsqlBEMessage> {",
          "807:     let (i, tag) = alt((char('N'), char('S')))(i)?;",
          "811: }",
          "813: fn parse_backend_key_data_message(i: &[u8]) -> IResult<&[u8], PgsqlBEMessage> {",
          "",
          "[Removed Lines]",
          "722:     let (i, message) = map_parser(",
          "723:         take(length - 8),",
          "724:         |b: &'a [u8]| {",
          "725:             match auth_type {",
          "726:                 0 => Ok((b, PgsqlBEMessage::AuthenticationOk(",
          "727:                             AuthenticationMessage {",
          "728:                                 identifier,",
          "729:                                 length,",
          "730:                                 auth_type,",
          "731:                                 payload: b.to_vec(),",
          "732:                             }))),",
          "733:                 3 => Ok((b, PgsqlBEMessage::AuthenticationCleartextPassword(",
          "734:                             AuthenticationMessage {",
          "735:                                 identifier,",
          "736:                                 length,",
          "737:                                 auth_type,",
          "738:                                 payload: b.to_vec(),",
          "739:                             }))),",
          "740:                 5 => {",
          "741:                     let (b, salt) = all_consuming(take(4_usize))(b)?;",
          "742:                     Ok((b, PgsqlBEMessage::AuthenticationMD5Password(",
          "743:                                 AuthenticationMessage {",
          "744:                                     identifier,",
          "745:                                     length,",
          "746:                                     auth_type,",
          "747:                                     payload: salt.to_vec(),",
          "748:                                 })))",
          "749:                 }",
          "750:                 9 => Ok((b, PgsqlBEMessage::AuthenticationSSPI(",
          "751:                             AuthenticationMessage {",
          "752:                                 identifier,",
          "753:                                 length,",
          "754:                                 auth_type,",
          "755:                                 payload: b.to_vec(),",
          "756:                             }))),",
          "758:                 10 => {",
          "759:                     let (b, auth_mechanisms) = parse_sasl_mechanisms(b)?;",
          "760:                     Ok((b, PgsqlBEMessage::AuthenticationSASL(",
          "761:                                 AuthenticationSASLMechanismMessage {",
          "762:                                     identifier,",
          "763:                                     length,",
          "764:                                     auth_type,",
          "765:                                     auth_mechanisms,",
          "766:                                 })))",
          "767:                 }",
          "768:                 11 => {",
          "769:                     Ok((b, PgsqlBEMessage::AuthenticationSASLContinue(",
          "770:                                 AuthenticationMessage {",
          "771:                                     identifier,",
          "772:                                     length,",
          "773:                                     auth_type,",
          "774:                                     payload: b.to_vec(),",
          "775:                                 })))",
          "776:                 },",
          "777:                 12 => {",
          "778:                     Ok((b, PgsqlBEMessage::AuthenticationSASLFinal(",
          "779:                                 AuthenticationMessage {",
          "780:                                     identifier,",
          "781:                                     length,",
          "782:                                     auth_type,",
          "783:                                     payload: b.to_vec(),",
          "784:                                 }",
          "785:                                 )))",
          "786:                 }",
          "788:                 _ => return Err(Err::Error(make_error(i, ErrorKind::Switch))),",
          "789:             }",
          "791:     )(i)?;",
          "798:     let (i, param) = map_parser(take(length - PGSQL_LENGTH_FIELD), pgsql_parse_generic_parameter)(i)?;",
          "799:     Ok((i, PgsqlBEMessage::ParameterStatus(ParameterStatusMessage {",
          "800:         identifier,",
          "801:         length,",
          "802:         param,",
          "803:     })))",
          "808:     Ok((i, PgsqlBEMessage::SSLResponse(",
          "809:                 SSLResponseMessage::from(tag))",
          "810:        ))",
          "",
          "[Added Lines]",
          "747:     let (i, message) = map_parser(take(length - 8), |b: &'a [u8]| {",
          "748:         match auth_type {",
          "749:             0 => Ok((",
          "750:                 b,",
          "751:                 PgsqlBEMessage::AuthenticationOk(AuthenticationMessage {",
          "752:                     identifier,",
          "753:                     length,",
          "754:                     auth_type,",
          "755:                     payload: b.to_vec(),",
          "756:                 }),",
          "757:             )),",
          "758:             3 => Ok((",
          "759:                 b,",
          "760:                 PgsqlBEMessage::AuthenticationCleartextPassword(AuthenticationMessage {",
          "761:                     identifier,",
          "762:                     length,",
          "763:                     auth_type,",
          "764:                     payload: b.to_vec(),",
          "765:                 }),",
          "766:             )),",
          "767:             5 => {",
          "768:                 let (b, salt) = all_consuming(take(4_usize))(b)?;",
          "769:                 Ok((",
          "770:                     b,",
          "771:                     PgsqlBEMessage::AuthenticationMD5Password(AuthenticationMessage {",
          "772:                         identifier,",
          "773:                         length,",
          "774:                         auth_type,",
          "775:                         payload: salt.to_vec(),",
          "776:                     }),",
          "777:                 ))",
          "778:             }",
          "779:             9 => Ok((",
          "780:                 b,",
          "781:                 PgsqlBEMessage::AuthenticationSSPI(AuthenticationMessage {",
          "782:                     identifier,",
          "783:                     length,",
          "784:                     auth_type,",
          "785:                     payload: b.to_vec(),",
          "786:                 }),",
          "787:             )),",
          "789:             10 => {",
          "790:                 let (b, auth_mechanisms) = parse_sasl_mechanisms(b)?;",
          "791:                 Ok((",
          "792:                     b,",
          "793:                     PgsqlBEMessage::AuthenticationSASL(AuthenticationSASLMechanismMessage {",
          "794:                         identifier,",
          "795:                         length,",
          "796:                         auth_type,",
          "797:                         auth_mechanisms,",
          "798:                     }),",
          "799:                 ))",
          "800:             }",
          "801:             11 => Ok((",
          "802:                 b,",
          "803:                 PgsqlBEMessage::AuthenticationSASLContinue(AuthenticationMessage {",
          "804:                     identifier,",
          "805:                     length,",
          "806:                     auth_type,",
          "807:                     payload: b.to_vec(),",
          "808:                 }),",
          "809:             )),",
          "810:             12 => Ok((",
          "811:                 b,",
          "812:                 PgsqlBEMessage::AuthenticationSASLFinal(AuthenticationMessage {",
          "813:                     identifier,",
          "814:                     length,",
          "815:                     auth_type,",
          "816:                     payload: b.to_vec(),",
          "817:                 }),",
          "818:             )),",
          "820:             _ => return Err(Err::Error(make_error(i, ErrorKind::Switch))),",
          "822:     })(i)?;",
          "829:     let (i, param) = map_parser(",
          "830:         take(length - PGSQL_LENGTH_FIELD),",
          "831:         pgsql_parse_generic_parameter,",
          "832:     )(i)?;",
          "833:     Ok((",
          "834:         i,",
          "835:         PgsqlBEMessage::ParameterStatus(ParameterStatusMessage {",
          "836:             identifier,",
          "837:             length,",
          "838:             param,",
          "839:         }),",
          "840:     ))",
          "845:     Ok((",
          "846:         i,",
          "847:         PgsqlBEMessage::SSLResponse(SSLResponseMessage::from(tag)),",
          "848:     ))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "815:     let (i, length) = verify(be_u32, |&x| x == 12)(i)?;",
          "816:     let (i, pid) = be_u32(i)?;",
          "817:     let (i, secret_key) = be_u32(i)?;",
          "824: }",
          "826: fn parse_command_complete(i: &[u8]) -> IResult<&[u8], PgsqlBEMessage> {",
          "827:     let (i, identifier) = verify(be_u8, |&x| x == b'C')(i)?;",
          "828:     let (i, length) = parse_length(i)?;",
          "829:     let (i, payload) = map_parser(take(length - PGSQL_LENGTH_FIELD), take_until(\"\\x00\"))(i)?;",
          "835: }",
          "837: fn parse_ready_for_query(i: &[u8]) -> IResult<&[u8], PgsqlBEMessage> {",
          "838:     let (i, identifier) = verify(be_u8, |&x| x == b'Z')(i)?;",
          "839:     let (i, length) = verify(be_u32, |&x| x == 5)(i)?;",
          "840:     let (i, status) = verify(be_u8, |&x| x == b'I' || x == b'T' || x == b'E')(i)?;",
          "846: }",
          "848: fn parse_row_field(i: &[u8]) -> IResult<&[u8], RowField> {",
          "",
          "[Removed Lines]",
          "818:     Ok((i, PgsqlBEMessage::BackendKeyData(BackendKeyDataMessage {",
          "819:         identifier,",
          "820:         length,",
          "821:         backend_pid: pid,",
          "822:         secret_key,",
          "823:     })))",
          "830:     Ok((i, PgsqlBEMessage::CommandComplete(RegularPacket {",
          "831:         identifier,",
          "832:         length,",
          "833:         payload: payload.to_vec(),",
          "834:     })))",
          "841:     Ok((i, PgsqlBEMessage::ReadyForQuery(ReadyForQueryMessage {",
          "842:         identifier,",
          "843:         length,",
          "844:         transaction_status: status,",
          "845:     })))",
          "",
          "[Added Lines]",
          "856:     Ok((",
          "857:         i,",
          "858:         PgsqlBEMessage::BackendKeyData(BackendKeyDataMessage {",
          "859:             identifier,",
          "860:             length,",
          "861:             backend_pid: pid,",
          "862:             secret_key,",
          "863:         }),",
          "864:     ))",
          "871:     Ok((",
          "872:         i,",
          "873:         PgsqlBEMessage::CommandComplete(RegularPacket {",
          "874:             identifier,",
          "875:             length,",
          "876:             payload: payload.to_vec(),",
          "877:         }),",
          "878:     ))",
          "885:     Ok((",
          "886:         i,",
          "887:         PgsqlBEMessage::ReadyForQuery(ReadyForQueryMessage {",
          "888:             identifier,",
          "889:             length,",
          "890:             transaction_status: status,",
          "891:         }),",
          "892:     ))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "854:     let (i, data_type_size) = be_i16(i)?;",
          "855:     let (i, type_modifier) = be_i32(i)?;",
          "856:     let (i, format_code) = be_u16(i)?;",
          "866: }",
          "868: pub fn parse_row_description(i: &[u8]) -> IResult<&[u8], PgsqlBEMessage> {",
          "",
          "[Removed Lines]",
          "857:     Ok((i, RowField {",
          "858:         field_name: field_name.to_vec(),",
          "859:         table_oid,",
          "860:         column_index,",
          "861:         data_type_oid,",
          "862:         data_type_size,",
          "863:         type_modifier,",
          "864:         format_code,",
          "865:     }))",
          "",
          "[Added Lines]",
          "904:     Ok((",
          "905:         i,",
          "906:         RowField {",
          "907:             field_name: field_name.to_vec(),",
          "908:             table_oid,",
          "909:             column_index,",
          "910:             data_type_oid,",
          "911:             data_type_size,",
          "912:             type_modifier,",
          "913:             format_code,",
          "914:         },",
          "915:     ))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "871:     let (i, field_count) = be_u16(i)?;",
          "872:     let (i, fields) = map_parser(",
          "873:         take(length - 6),",
          "875:     )(i)?;",
          "883: }",
          "885: fn parse_data_row_value(i: &[u8]) -> IResult<&[u8], ColumnFieldValue> {",
          "886:     let (i, value_length) = be_i32(i)?;",
          "887:     let (i, value) = cond(value_length >= 0, take(value_length as usize))(i)?;",
          "895:         },",
          "897: }",
          "",
          "[Removed Lines]",
          "874:         many_m_n(0, field_count.into(), parse_row_field)",
          "876:     Ok((i, PgsqlBEMessage::RowDescription(",
          "877:                 RowDescriptionMessage {",
          "878:                     identifier,",
          "879:                     length,",
          "880:                     field_count,",
          "881:                     fields,",
          "882:                 })))",
          "888:     Ok((i, ColumnFieldValue {",
          "889:         value_length,",
          "890:         value: {",
          "891:             match value {",
          "892:                 Some(data) => data.to_vec(),",
          "893:                 None => [].to_vec(),",
          "894:             }",
          "896:     }))",
          "",
          "[Added Lines]",
          "924:         many_m_n(0, field_count.into(), parse_row_field),",
          "926:     Ok((",
          "927:         i,",
          "928:         PgsqlBEMessage::RowDescription(RowDescriptionMessage {",
          "929:             identifier,",
          "930:             length,",
          "931:             field_count,",
          "932:             fields,",
          "933:         }),",
          "934:     ))",
          "940:     Ok((",
          "941:         i,",
          "942:         ColumnFieldValue {",
          "943:             value_length,",
          "944:             value: {",
          "945:                 match value {",
          "946:                     Some(data) => data.to_vec(),",
          "947:                     None => [].to_vec(),",
          "948:                 }",
          "949:             },",
          "951:     ))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "916:     let (i, length) = verify(be_u32, |&x| x >= 6)(i)?;",
          "917:     let (i, field_count) = be_u16(i)?;",
          "927: }",
          "929: fn parse_sasl_mechanism(i: &[u8]) -> IResult<&[u8], SASLAuthenticationMechanism> {",
          "",
          "[Removed Lines]",
          "919:     let (i, rows) = map_parser(take(length - 6), many_m_n(0, field_count.into(), parse_data_row_value))(i)?;",
          "920:     Ok((i, PgsqlBEMessage::ConsolidatedDataRow(",
          "921:                 ConsolidatedDataRowPacket {",
          "922:                     identifier,",
          "923:                     row_cnt: 1,",
          "924:                     data_size: add_up_data_size(rows),",
          "925:                 }",
          "926:                 )))",
          "",
          "[Added Lines]",
          "974:     let (i, rows) = map_parser(",
          "975:         take(length - 6),",
          "976:         many_m_n(0, field_count.into(), parse_data_row_value),",
          "977:     )(i)?;",
          "978:     Ok((",
          "979:         i,",
          "980:         PgsqlBEMessage::ConsolidatedDataRow(ConsolidatedDataRowPacket {",
          "981:             identifier,",
          "982:             row_cnt: 1,",
          "983:             data_size: add_up_data_size(rows),",
          "984:         }),",
          "985:     ))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "945: pub fn parse_error_response_code(i: &[u8]) -> IResult<&[u8], PgsqlErrorNoticeMessageField> {",
          "946:     let (i, _field_type) = char('C')(i)?;",
          "947:     let (i, field_value) = map_parser(take(6_usize), alphanumeric1)(i)?;",
          "952: }",
          "",
          "[Removed Lines]",
          "948:     Ok((i, PgsqlErrorNoticeMessageField{",
          "949:         field_type: PgsqlErrorNoticeFieldType::CodeSqlStateCode,",
          "950:         field_value: field_value.to_vec(),",
          "951:     }))",
          "",
          "[Added Lines]",
          "1007:     Ok((",
          "1008:         i,",
          "1009:         PgsqlErrorNoticeMessageField {",
          "1010:             field_type: PgsqlErrorNoticeFieldType::CodeSqlStateCode,",
          "1011:             field_value: field_value.to_vec(),",
          "1012:         },",
          "1013:     ))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "957:     let (i, field_type) = char('V')(i)?;",
          "958:     let (i, field_value) = alt((tag(\"ERROR\"), tag(\"FATAL\"), tag(\"PANIC\")))(i)?;",
          "959:     let (i, _) = tag(\"\\x00\")(i)?;",
          "964: }",
          "",
          "[Removed Lines]",
          "960:     Ok((i, PgsqlErrorNoticeMessageField{",
          "961:         field_type: PgsqlErrorNoticeFieldType::from(field_type),",
          "962:         field_value: field_value.to_vec(),",
          "963:     }))",
          "",
          "[Added Lines]",
          "1022:     Ok((",
          "1023:         i,",
          "1024:         PgsqlErrorNoticeMessageField {",
          "1025:             field_type: PgsqlErrorNoticeFieldType::from(field_type),",
          "1026:             field_value: field_value.to_vec(),",
          "1027:         },",
          "1028:     ))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "968: pub fn parse_notice_response_severity(i: &[u8]) -> IResult<&[u8], PgsqlErrorNoticeMessageField> {",
          "969:     let (i, field_type) = char('V')(i)?;",
          "970:     let (i, field_value) = alt((",
          "976:     let (i, _) = tag(\"\\x00\")(i)?;",
          "981: }",
          "983: pub fn parse_error_response_field(",
          "",
          "[Removed Lines]",
          "971:             tag(\"WARNING\"),",
          "972:             tag(\"NOTICE\"),",
          "973:             tag(\"DEBUG\"),",
          "974:             tag(\"INFO\"),",
          "975:             tag(\"LOG\")))(i)?;",
          "977:     Ok((i, PgsqlErrorNoticeMessageField{",
          "978:         field_type: PgsqlErrorNoticeFieldType::from(field_type),",
          "979:         field_value: field_value.to_vec(),",
          "980:     }))",
          "",
          "[Added Lines]",
          "1036:         tag(\"WARNING\"),",
          "1037:         tag(\"NOTICE\"),",
          "1038:         tag(\"DEBUG\"),",
          "1039:         tag(\"INFO\"),",
          "1040:         tag(\"LOG\"),",
          "1041:     ))(i)?;",
          "1043:     Ok((",
          "1044:         i,",
          "1045:         PgsqlErrorNoticeMessageField {",
          "1046:             field_type: PgsqlErrorNoticeFieldType::from(field_type),",
          "1047:             field_value: field_value.to_vec(),",
          "1048:         },",
          "1049:     ))",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1007:     Ok((i, data))",
          "1008: }",
          "1011:     let (i, data) = many_till(|b| parse_error_response_field(b, is_err_msg), tag(\"\\x00\"))(i)?;",
          "1012:     Ok((i, data.0))",
          "1013: }",
          "",
          "[Removed Lines]",
          "1010: pub fn parse_error_notice_fields(i: &[u8], is_err_msg: bool) -> IResult<&[u8], Vec<PgsqlErrorNoticeMessageField>> {",
          "",
          "[Added Lines]",
          "1079: pub fn parse_error_notice_fields(",
          "1080:     i: &[u8], is_err_msg: bool,",
          "1081: ) -> IResult<&[u8], Vec<PgsqlErrorNoticeMessageField>> {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1015: fn pgsql_parse_error_response(i: &[u8]) -> IResult<&[u8], PgsqlBEMessage> {",
          "1016:     let (i, identifier) = verify(be_u8, |&x| x == b'E')(i)?;",
          "1017:     let (i, length) = verify(be_u32, |&x| x > 10)(i)?;",
          "1028: }",
          "1030: fn pgsql_parse_notice_response(i: &[u8]) -> IResult<&[u8], PgsqlBEMessage> {",
          "1031:     let (i, identifier) = verify(be_u8, |&x| x == b'N')(i)?;",
          "1032:     let (i, length) = verify(be_u32, |&x| x > 10)(i)?;",
          "1042: }",
          "1044: fn parse_notification_response(i: &[u8]) -> IResult<&[u8], PgsqlBEMessage> {",
          "1045:     let (i, identifier) = verify(be_u8, |&x| x == b'A')(i)?;",
          "1047:     let (i, length) = verify(be_u32, |&x| x > 9)(i)?;",
          "1057:         identifier,",
          "1058:         length,",
          "1059:         pid: data.0,",
          "",
          "[Removed Lines]",
          "1018:     let (i, message_body) = map_parser(",
          "1019:         take(length - PGSQL_LENGTH_FIELD),",
          "1020:         |b| parse_error_notice_fields(b, true)",
          "1021:         )(i)?;",
          "1023:     Ok((i, PgsqlBEMessage::ErrorResponse(ErrorNoticeMessage {",
          "1024:         identifier,",
          "1025:         length,",
          "1026:         message_body,",
          "1027:     })))",
          "1033:     let (i, message_body) = map_parser(",
          "1034:         take(length - PGSQL_LENGTH_FIELD),",
          "1035:         |b| parse_error_notice_fields(b, false)",
          "1036:         )(i)?;",
          "1037:     Ok((i, PgsqlBEMessage::NoticeResponse(ErrorNoticeMessage {",
          "1038:         identifier,",
          "1039:         length,",
          "1040:         message_body,",
          "1041:     })))",
          "1048:     let (i, data) = map_parser(",
          "1049:         take(length - PGSQL_LENGTH_FIELD),",
          "1050:         |b| {",
          "1051:             let (b, pid) = be_u32(b)?;",
          "1052:             let (b, channel_name) = take_until_and_consume(b\"\\x00\")(b)?;",
          "1053:             let (b, payload) = take_until_and_consume(b\"\\x00\")(b)?;",
          "1054:             Ok((b, (pid, channel_name, payload)))",
          "1055:         })(i)?;",
          "1056:     let msg = PgsqlBEMessage::NotificationResponse(NotificationResponse{",
          "",
          "[Added Lines]",
          "1089:     let (i, message_body) = map_parser(take(length - PGSQL_LENGTH_FIELD), |b| {",
          "1090:         parse_error_notice_fields(b, true)",
          "1091:     })(i)?;",
          "1093:     Ok((",
          "1094:         i,",
          "1095:         PgsqlBEMessage::ErrorResponse(ErrorNoticeMessage {",
          "1096:             identifier,",
          "1097:             length,",
          "1098:             message_body,",
          "1099:         }),",
          "1100:     ))",
          "1106:     let (i, message_body) = map_parser(take(length - PGSQL_LENGTH_FIELD), |b| {",
          "1107:         parse_error_notice_fields(b, false)",
          "1108:     })(i)?;",
          "1109:     Ok((",
          "1110:         i,",
          "1111:         PgsqlBEMessage::NoticeResponse(ErrorNoticeMessage {",
          "1112:             identifier,",
          "1113:             length,",
          "1114:             message_body,",
          "1115:         }),",
          "1116:     ))",
          "1123:     let (i, data) = map_parser(take(length - PGSQL_LENGTH_FIELD), |b| {",
          "1124:         let (b, pid) = be_u32(b)?;",
          "1125:         let (b, channel_name) = take_until_and_consume(b\"\\x00\")(b)?;",
          "1126:         let (b, payload) = take_until_and_consume(b\"\\x00\")(b)?;",
          "1127:         Ok((b, (pid, channel_name, payload)))",
          "1128:     })(i)?;",
          "1129:     let msg = PgsqlBEMessage::NotificationResponse(NotificationResponse {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1066: pub fn pgsql_parse_response(i: &[u8]) -> IResult<&[u8], PgsqlBEMessage> {",
          "1067:     let (i, pseudo_header) = peek(tuple((be_u8, be_u32)))(i)?;",
          "1093:     Ok((i, message))",
          "1094: }",
          "",
          "[Removed Lines]",
          "1068:     let (i, message) =",
          "1069:             match pseudo_header.0 {",
          "1070:                 b'E' => pgsql_parse_error_response(i)?,",
          "1071:                 b'K' => parse_backend_key_data_message(i)?,",
          "1072:                 b'N' => pgsql_parse_notice_response(i)?,",
          "1073:                 b'R' => pgsql_parse_authentication_message(i)?,",
          "1074:                 b'S' => parse_parameter_status_message(i)?,",
          "1075:                 b'C' => parse_command_complete(i)?,",
          "1076:                 b'Z' => parse_ready_for_query(i)?,",
          "1077:                 b'T' => parse_row_description(i)?,",
          "1078:                 b'A' => parse_notification_response(i)?,",
          "1079:                 b'D' => parse_consolidated_data_row(i)?,",
          "1080:                 _ => {",
          "1081:                     let (i, identifier) = be_u8(i)?;",
          "1082:                     let (i, length) = verify(be_u32, |&x| x > PGSQL_LENGTH_FIELD)(i)?;",
          "1083:                     let (i, payload) = take(length - PGSQL_LENGTH_FIELD)(i)?;",
          "1084:                     let unknown = PgsqlBEMessage::UnknownMessageType (RegularPacket{",
          "1085:                         identifier,",
          "1086:                         length,",
          "1087:                         payload: payload.to_vec(),",
          "1088:                     });",
          "1089:                     (i, unknown)",
          "1090:                 }",
          "1092:             };",
          "",
          "[Added Lines]",
          "1141:     let (i, message) = match pseudo_header.0 {",
          "1142:         b'E' => pgsql_parse_error_response(i)?,",
          "1143:         b'K' => parse_backend_key_data_message(i)?,",
          "1144:         b'N' => pgsql_parse_notice_response(i)?,",
          "1145:         b'R' => pgsql_parse_authentication_message(i)?,",
          "1146:         b'S' => parse_parameter_status_message(i)?,",
          "1147:         b'C' => parse_command_complete(i)?,",
          "1148:         b'Z' => parse_ready_for_query(i)?,",
          "1149:         b'T' => parse_row_description(i)?,",
          "1150:         b'A' => parse_notification_response(i)?,",
          "1151:         b'D' => parse_consolidated_data_row(i)?,",
          "1152:         _ => {",
          "1153:             let (i, identifier) = be_u8(i)?;",
          "1154:             let (i, length) = verify(be_u32, |&x| x > PGSQL_LENGTH_FIELD)(i)?;",
          "1155:             let (i, payload) = take(length - PGSQL_LENGTH_FIELD)(i)?;",
          "1156:             let unknown = PgsqlBEMessage::UnknownMessageType(RegularPacket {",
          "1157:                 identifier,",
          "1158:                 length,",
          "1159:                 payload: payload.to_vec(),",
          "1160:             });",
          "1161:             (i, unknown)",
          "1162:         }",
          "1163:     };",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1289:             0x00, 0x00, 0x00, 0x10, // length: 16 (fixed)",
          "1290:             0x04, 0xd2, 0x16, 0x2e, // 1234.5678 - identifies a cancel request",
          "1291:             0x00, 0x00, 0x76, 0x31, // PID: 30257",
          "1293:         let result = parse_cancel_request(buf);",
          "1294:         assert!(result.is_ok());",
          "",
          "[Removed Lines]",
          "1292:             0x23, 0x84, 0xf7, 0x2d]; // Backend key: 595916589",
          "",
          "[Added Lines]",
          "1362:             0x23, 0x84, 0xf7, 0x2d,",
          "1363:         ]; // Backend key: 595916589",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1916:             0x2b, 0x4a, 0x36, 0x79, 0x78, 0x72, 0x66, 0x77, 0x2f, 0x7a, 0x7a, 0x70, 0x38, 0x59,",
          "1917:             0x54, 0x39, 0x65, 0x78, 0x56, 0x37, 0x73, 0x38, 0x3d,",
          "1918:         ];",
          "1920:         let res = PgsqlBEMessage::UnknownMessageType(RegularPacket {",
          "1921:             identifier: b'`',",
          "1922:             length: 54,",
          "",
          "[Removed Lines]",
          "1919:         let (remainder, result) = pgsql_parse_response(bad_buf).expect(\"parsing sasl final response failed\");",
          "",
          "[Added Lines]",
          "1988:         let (remainder, result) =",
          "1989:             pgsql_parse_response(bad_buf).expect(\"parsing sasl final response failed\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2130:         let buf = &[",
          "2180:         ];",
          "2182:         let result = pgsql_parse_response(buf);",
          "",
          "[Removed Lines]",
          "2131:             0x52, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,",
          "2132:             0x00, 0x53, 0x00, 0x00, 0x00, 0x16, 0x61, 0x70,",
          "2133:             0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,",
          "2134:             0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x00,",
          "2135:             0x53, 0x00, 0x00, 0x00, 0x19, 0x63, 0x6c, 0x69,",
          "2136:             0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f,",
          "2137:             0x64, 0x69, 0x6e, 0x67, 0x00, 0x55, 0x54, 0x46,",
          "2138:             0x38, 0x00, 0x53, 0x00, 0x00, 0x00, 0x17, 0x44,",
          "2139:             0x61, 0x74, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65,",
          "2140:             0x00, 0x49, 0x53, 0x4f, 0x2c, 0x20, 0x4d, 0x44,",
          "2141:             0x59, 0x00, 0x53, 0x00, 0x00, 0x00, 0x26, 0x64,",
          "2142:             0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,",
          "2143:             0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,",
          "2144:             0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,",
          "2145:             0x6f, 0x6e, 0x6c, 0x79, 0x00, 0x6f, 0x66, 0x66,",
          "2146:             0x00, 0x53, 0x00, 0x00, 0x00, 0x17, 0x69, 0x6e,",
          "2147:             0x5f, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61,",
          "2148:             0x6e, 0x64, 0x62, 0x79, 0x00, 0x6f, 0x66, 0x66,",
          "2149:             0x00, 0x53, 0x00, 0x00, 0x00, 0x19, 0x69, 0x6e,",
          "2150:             0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x61,",
          "2151:             0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x00,",
          "2152:             0x6f, 0x6e, 0x00, 0x53, 0x00, 0x00, 0x00, 0x1b,",
          "2153:             0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,",
          "2154:             0x53, 0x74, 0x79, 0x6c, 0x65, 0x00, 0x70, 0x6f,",
          "2155:             0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x00, 0x53,",
          "2156:             0x00, 0x00, 0x00, 0x15, 0x69, 0x73, 0x5f, 0x73,",
          "2157:             0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72,",
          "2158:             0x00, 0x6f, 0x66, 0x66, 0x00, 0x53, 0x00, 0x00,",
          "2159:             0x00, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,",
          "2160:             0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,",
          "2161:             0x67, 0x00, 0x55, 0x54, 0x46, 0x38, 0x00, 0x53,",
          "2162:             0x00, 0x00, 0x00, 0x18, 0x73, 0x65, 0x72, 0x76,",
          "2163:             0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,",
          "2164:             0x6f, 0x6e, 0x00, 0x31, 0x34, 0x2e, 0x35, 0x00,",
          "2165:             0x53, 0x00, 0x00, 0x00, 0x22, 0x73, 0x65, 0x73,",
          "2166:             0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74,",
          "2167:             0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,",
          "2168:             0x6f, 0x6e, 0x00, 0x63, 0x74, 0x66, 0x70, 0x6f,",
          "2169:             0x73, 0x74, 0x00, 0x53, 0x00, 0x00, 0x00, 0x23,",
          "2170:             0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,",
          "2171:             0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,",
          "2172:             0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69,",
          "2173:             0x6e, 0x67, 0x73, 0x00, 0x6f, 0x6e, 0x00, 0x53,",
          "2174:             0x00, 0x00, 0x00, 0x1a, 0x54, 0x69, 0x6d, 0x65,",
          "2175:             0x5a, 0x6f, 0x6e, 0x65, 0x00, 0x45, 0x75, 0x72,",
          "2176:             0x6f, 0x70, 0x65, 0x2f, 0x50, 0x61, 0x72, 0x69,",
          "2177:             0x73, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x0c, 0x00,",
          "2178:             0x00, 0x0b, 0x8d, 0xcf, 0x4f, 0xb6, 0xcf, 0x5a,",
          "2179:             0x00, 0x00, 0x00, 0x05, 0x49",
          "",
          "[Added Lines]",
          "2201:             0x52, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x16,",
          "2202:             0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,",
          "2203:             0x6d, 0x65, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e,",
          "2204:             0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x00, 0x55, 0x54, 0x46,",
          "2205:             0x38, 0x00, 0x53, 0x00, 0x00, 0x00, 0x17, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x79,",
          "2206:             0x6c, 0x65, 0x00, 0x49, 0x53, 0x4f, 0x2c, 0x20, 0x4d, 0x44, 0x59, 0x00, 0x53, 0x00,",
          "2207:             0x00, 0x00, 0x26, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x72, 0x61,",
          "2208:             0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,",
          "2209:             0x6f, 0x6e, 0x6c, 0x79, 0x00, 0x6f, 0x66, 0x66, 0x00, 0x53, 0x00, 0x00, 0x00, 0x17,",
          "2210:             0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79,",
          "2211:             0x00, 0x6f, 0x66, 0x66, 0x00, 0x53, 0x00, 0x00, 0x00, 0x19, 0x69, 0x6e, 0x74, 0x65,",
          "2212:             0x67, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x00,",
          "2213:             0x6f, 0x6e, 0x00, 0x53, 0x00, 0x00, 0x00, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,",
          "2214:             0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x00, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,",
          "2215:             0x65, 0x73, 0x00, 0x53, 0x00, 0x00, 0x00, 0x15, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70,",
          "2216:             0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x00, 0x6f, 0x66, 0x66, 0x00, 0x53, 0x00, 0x00,",
          "2217:             0x00, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64,",
          "2218:             0x69, 0x6e, 0x67, 0x00, 0x55, 0x54, 0x46, 0x38, 0x00, 0x53, 0x00, 0x00, 0x00, 0x18,",
          "2219:             0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,",
          "2220:             0x00, 0x31, 0x34, 0x2e, 0x35, 0x00, 0x53, 0x00, 0x00, 0x00, 0x22, 0x73, 0x65, 0x73,",
          "2221:             0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,",
          "2222:             0x74, 0x69, 0x6f, 0x6e, 0x00, 0x63, 0x74, 0x66, 0x70, 0x6f, 0x73, 0x74, 0x00, 0x53,",
          "2223:             0x00, 0x00, 0x00, 0x23, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x63,",
          "2224:             0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69,",
          "2225:             0x6e, 0x67, 0x73, 0x00, 0x6f, 0x6e, 0x00, 0x53, 0x00, 0x00, 0x00, 0x1a, 0x54, 0x69,",
          "2226:             0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x00, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x2f,",
          "2227:             0x50, 0x61, 0x72, 0x69, 0x73, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0b,",
          "2228:             0x8d, 0xcf, 0x4f, 0xb6, 0xcf, 0x5a, 0x00, 0x00, 0x00, 0x05, 0x49,",
          "",
          "---------------"
        ],
        "rust/src/pgsql/pgsql.rs||rust/src/pgsql/pgsql.rs": [
          "File: rust/src/pgsql/pgsql.rs -> rust/src/pgsql/pgsql.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: use super::parser::{self, ConsolidatedDataRowPacket, PgsqlBEMessage, PgsqlFEMessage};",
          "23: use crate::applayer::*;",
          "24: use crate::conf::*;",
          "25: use nom7::{Err, IResult};",
          "26: use std;",
          "27: use std::collections::VecDeque;",
          "28: use std::ffi::CString;",
          "31: pub const PGSQL_CONFIG_DEFAULT_STREAM_DEPTH: u32 = 0;",
          "",
          "[Removed Lines]",
          "29: use crate::core::{Flow, AppProto, Direction, ALPROTO_FAILED, ALPROTO_UNKNOWN, IPPROTO_TCP, *};",
          "",
          "[Added Lines]",
          "25: use crate::core::{AppProto, Direction, Flow, ALPROTO_FAILED, ALPROTO_UNKNOWN, IPPROTO_TCP, *};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "341:             );",
          "342:             match PgsqlState::state_based_req_parsing(self.state_progress, start) {",
          "343:                 Ok((rem, request)) => {",
          "345:                     start = rem;",
          "346:                     if let Some(state) = PgsqlState::request_next_state(&request) {",
          "347:                         self.state_progress = state;",
          "",
          "[Removed Lines]",
          "344:                     sc_app_layer_parser_trigger_raw_stream_reassembly(flow, Direction::ToServer as i32);",
          "",
          "[Added Lines]",
          "344:                     sc_app_layer_parser_trigger_raw_stream_reassembly(",
          "345:                         flow,",
          "346:                         Direction::ToServer as i32,",
          "347:                     );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "471:         while !start.is_empty() {",
          "472:             match PgsqlState::state_based_resp_parsing(self.state_progress, start) {",
          "473:                 Ok((rem, response)) => {",
          "475:                     start = rem;",
          "476:                     SCLogDebug!(\"Response is {:?}\", &response);",
          "477:                     if let Some(state) = self.response_process_next_state(&response, flow) {",
          "",
          "[Removed Lines]",
          "474:                     sc_app_layer_parser_trigger_raw_stream_reassembly(flow, Direction::ToClient as i32);",
          "",
          "[Added Lines]",
          "477:                     sc_app_layer_parser_trigger_raw_stream_reassembly(",
          "478:                         flow,",
          "479:                         Direction::ToClient as i32,",
          "480:                     );",
          "",
          "---------------"
        ]
      }
    }
  ]
}