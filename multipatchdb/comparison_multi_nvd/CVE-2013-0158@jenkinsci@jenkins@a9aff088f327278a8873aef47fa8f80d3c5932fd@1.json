{
  "cve_id": "CVE-2013-0158",
  "cve_desc": "Unspecified vulnerability in Jenkins before 1.498, Jenkins LTS before 1.480.2, and Jenkins Enterprise 1.447.x before 1.447.6.1 and 1.466.x before 1.466.12.1, when a slave is attached and anonymous read access is enabled, allows remote attackers to obtain the master cryptographic key via unknown vectors.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "a9aff088f327278a8873aef47fa8f80d3c5932fd",
  "patch_info": {
    "commit_hash": "a9aff088f327278a8873aef47fa8f80d3c5932fd",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/a9aff088f327278a8873aef47fa8f80d3c5932fd",
    "files": [
      "core/pom.xml",
      "core/src/main/java/hudson/DNSMultiCast.java",
      "core/src/main/java/hudson/UDPBroadcastThread.java",
      "core/src/main/java/hudson/console/AnnotatedLargeText.java",
      "core/src/main/java/hudson/model/Job.java",
      "core/src/main/java/hudson/model/UsageStatistics.java",
      "core/src/main/java/hudson/security/RememberMeServicesProxy.java",
      "core/src/main/java/hudson/security/SecurityRealm.java",
      "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java",
      "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
      "core/src/main/java/hudson/slaves/SlaveComputer.java",
      "core/src/main/java/hudson/util/Secret.java",
      "core/src/main/java/jenkins/model/Jenkins.java",
      "core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "core/src/main/java/jenkins/security/ConfidentialKey.java",
      "core/src/main/java/jenkins/security/ConfidentialStore.java",
      "core/src/main/java/jenkins/security/CryptoConfidentialKey.java",
      "core/src/main/java/jenkins/security/DefaultConfidentialStore.java",
      "core/src/main/java/jenkins/security/HMACConfidentialKey.java",
      "core/src/main/java/jenkins/security/HexStringConfidentialKey.java",
      "core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java",
      "core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java",
      "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
      "core/src/test/java/hudson/util/SecretTest.groovy",
      "core/src/test/java/hudson/util/SecretTest.java",
      "core/src/test/java/jenkins/security/ConfidentialStoreRule.java",
      "core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy",
      "core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy",
      "core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy",
      "core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy",
      "pom.xml",
      "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
    ],
    "message": "[SECURITY-49] Deprecating Jenkins.getSecretKey()\n\nWe are replacing it by the ConfidentialStore class and the\nConfidentialKey class, which provides purpose-specific confidential\ninformation that are separated from each other.\n\nIn this way, not all eggs are in one basket, and in case of a\ncompromise, the impact will contained.\n\nAlso replaced several insecure use of digest(secret|messsage) or\ndigest(message|secret) by HMAC.",
    "before_after_code_files": [
      "core/src/main/java/hudson/DNSMultiCast.java||core/src/main/java/hudson/DNSMultiCast.java",
      "core/src/main/java/hudson/UDPBroadcastThread.java||core/src/main/java/hudson/UDPBroadcastThread.java",
      "core/src/main/java/hudson/console/AnnotatedLargeText.java||core/src/main/java/hudson/console/AnnotatedLargeText.java",
      "core/src/main/java/hudson/model/Job.java||core/src/main/java/hudson/model/Job.java",
      "core/src/main/java/hudson/model/UsageStatistics.java||core/src/main/java/hudson/model/UsageStatistics.java",
      "core/src/main/java/hudson/security/RememberMeServicesProxy.java||core/src/main/java/hudson/security/RememberMeServicesProxy.java",
      "core/src/main/java/hudson/security/SecurityRealm.java||core/src/main/java/hudson/security/SecurityRealm.java",
      "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java||core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java",
      "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
      "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
      "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java",
      "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
      "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "core/src/main/java/jenkins/security/ConfidentialKey.java||core/src/main/java/jenkins/security/ConfidentialKey.java",
      "core/src/main/java/jenkins/security/ConfidentialStore.java||core/src/main/java/jenkins/security/ConfidentialStore.java",
      "core/src/main/java/jenkins/security/CryptoConfidentialKey.java||core/src/main/java/jenkins/security/CryptoConfidentialKey.java",
      "core/src/main/java/jenkins/security/DefaultConfidentialStore.java||core/src/main/java/jenkins/security/DefaultConfidentialStore.java",
      "core/src/main/java/jenkins/security/HMACConfidentialKey.java||core/src/main/java/jenkins/security/HMACConfidentialKey.java",
      "core/src/main/java/jenkins/security/HexStringConfidentialKey.java||core/src/main/java/jenkins/security/HexStringConfidentialKey.java",
      "core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java||core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java",
      "core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java||core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java",
      "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
      "core/src/test/java/hudson/util/SecretTest.groovy||core/src/test/java/hudson/util/SecretTest.groovy",
      "core/src/test/java/hudson/util/SecretTest.java||core/src/test/java/hudson/util/SecretTest.java",
      "core/src/test/java/jenkins/security/ConfidentialStoreRule.java||core/src/test/java/jenkins/security/ConfidentialStoreRule.java",
      "core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy||core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy",
      "core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy||core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy",
      "core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy||core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy",
      "core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy||core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy",
      "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/DNSMultiCast.java||core/src/main/java/hudson/DNSMultiCast.java": [
      "File: core/src/main/java/hudson/DNSMultiCast.java -> core/src/main/java/hudson/DNSMultiCast.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:                     if (tal!=null)",
      "47:                         props.put(\"slave-port\",String.valueOf(tal.getPort()));",
      "51:                     URL jenkins_url = new URL(rootURL);",
      "52:                     int jenkins_port = jenkins_url.getPort();",
      "",
      "[Removed Lines]",
      "49:                     props.put(\"server-id\", Util.getDigestOf(jenkins.getSecretKey()));",
      "",
      "[Added Lines]",
      "49:                     props.put(\"server-id\", jenkins.getLegacyInstanceId());",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/UDPBroadcastThread.java||core/src/main/java/hudson/UDPBroadcastThread.java": [
      "File: core/src/main/java/hudson/UDPBroadcastThread.java -> core/src/main/java/hudson/UDPBroadcastThread.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:                 StringBuilder rsp = new StringBuilder(\"<hudson>\");",
      "87:                 tag(rsp,\"version\", Jenkins.VERSION);",
      "88:                 tag(rsp,\"url\", jenkins.getRootUrl());",
      "90:                 tag(rsp,\"slave-port\",tal==null?null:tal.getPort());",
      "92:                 for (UDPBroadcastFragment f : UDPBroadcastFragment.all())",
      "",
      "[Removed Lines]",
      "89:                 tag(rsp,\"server-id\", Util.getDigestOf(jenkins.getSecretKey()));",
      "",
      "[Added Lines]",
      "89:                 tag(rsp,\"server-id\", jenkins.getLegacyInstanceId());",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/console/AnnotatedLargeText.java||core/src/main/java/hudson/console/AnnotatedLargeText.java": [
      "File: core/src/main/java/hudson/console/AnnotatedLargeText.java -> core/src/main/java/hudson/console/AnnotatedLargeText.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: import hudson.util.IOException2;",
      "30: import hudson.util.Secret;",
      "31: import hudson.util.TimeUnit2;",
      "32: import org.apache.commons.io.output.ByteArrayOutputStream;",
      "33: import org.kohsuke.stapler.Stapler;",
      "34: import org.kohsuke.stapler.StaplerRequest;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: import jenkins.security.CryptoConfidentialKey;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "116:         try {",
      "117:             String base64 = req!=null ? req.getHeader(\"X-ConsoleAnnotator\") : null;",
      "118:             if (base64!=null) {",
      "122:                 ObjectInputStream ois = new ObjectInputStreamEx(new GZIPInputStream(",
      "123:                         new CipherInputStream(new ByteArrayInputStream(Base64.decode(base64.toCharArray())),sym)),",
      "",
      "[Removed Lines]",
      "119:                 Cipher sym = Secret.getCipher(\"AES\");",
      "120:                 sym.init(Cipher.DECRYPT_MODE, Jenkins.getInstance().getSecretKeyAsAES128());",
      "",
      "[Added Lines]",
      "120:                 Cipher sym = PASSING_ANNOTATOR.decrypt();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "131:                     ois.close();",
      "132:                 }",
      "133:             }",
      "136:         } catch (ClassNotFoundException e) {",
      "137:             throw new IOException2(e);",
      "138:         }",
      "",
      "[Removed Lines]",
      "134:         } catch (GeneralSecurityException e) {",
      "135:             throw new IOException2(e);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "158:                 w, createAnnotator(Stapler.getCurrentRequest()), context, charset);",
      "159:         long r = super.writeLogTo(start,caw);",
      "175:         return r;",
      "176:     }",
      "178: }",
      "",
      "[Removed Lines]",
      "161:         try {",
      "162:             ByteArrayOutputStream baos = new ByteArrayOutputStream();",
      "163:             Cipher sym = Secret.getCipher(\"AES\");",
      "164:             sym.init(Cipher.ENCRYPT_MODE, Jenkins.getInstance().getSecretKeyAsAES128());",
      "165:             ObjectOutputStream oos = new ObjectOutputStream(new GZIPOutputStream(new CipherOutputStream(baos,sym)));",
      "166:             oos.writeLong(System.currentTimeMillis()); // send timestamp to prevent a replay attack",
      "167:             oos.writeObject(caw.getConsoleAnnotator());",
      "168:             oos.close();",
      "169:             StaplerResponse rsp = Stapler.getCurrentResponse();",
      "170:             if (rsp!=null)",
      "171:                 rsp.setHeader(\"X-ConsoleAnnotator\", new String(Base64.encode(baos.toByteArray())));",
      "172:         } catch (GeneralSecurityException e) {",
      "173:             throw new IOException2(e);",
      "174:         }",
      "",
      "[Added Lines]",
      "159:         ByteArrayOutputStream baos = new ByteArrayOutputStream();",
      "160:         Cipher sym = PASSING_ANNOTATOR.encrypt();",
      "161:         ObjectOutputStream oos = new ObjectOutputStream(new GZIPOutputStream(new CipherOutputStream(baos,sym)));",
      "162:         oos.writeLong(System.currentTimeMillis()); // send timestamp to prevent a replay attack",
      "163:         oos.writeObject(caw.getConsoleAnnotator());",
      "164:         oos.close();",
      "165:         StaplerResponse rsp = Stapler.getCurrentResponse();",
      "166:         if (rsp!=null)",
      "167:             rsp.setHeader(\"X-ConsoleAnnotator\", new String(Base64.encode(baos.toByteArray())));",
      "174:     private static final CryptoConfidentialKey PASSING_ANNOTATOR = new CryptoConfidentialKey(AnnotatedLargeText.class,\"consoleAnnotator\");",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/model/Job.java||core/src/main/java/hudson/model/Job.java": [
      "File: core/src/main/java/hudson/model/Job.java -> core/src/main/java/hudson/model/Job.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: import hudson.widgets.Widget;",
      "63: import jenkins.model.Jenkins;",
      "64: import jenkins.model.ProjectNamingStrategy;",
      "65: import jenkins.util.io.OnMaster;",
      "66: import net.sf.json.JSONException;",
      "67: import net.sf.json.JSONObject;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65: import jenkins.security.HexStringConfidentialKey;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "309:     public EnvVars getCharacteristicEnvVars() {",
      "310:         EnvVars env = new EnvVars();",
      "313:         env.put(\"JOB_NAME\",getFullName());",
      "314:         return env;",
      "315:     }",
      "",
      "[Removed Lines]",
      "311:         env.put(\"JENKINS_SERVER_COOKIE\",Util.getDigestOf(\"ServerID:\"+ Jenkins.getInstance().getSecretKey()));",
      "312:         env.put(\"HUDSON_SERVER_COOKIE\",Util.getDigestOf(\"ServerID:\"+ Jenkins.getInstance().getSecretKey())); // Legacy compatibility",
      "",
      "[Added Lines]",
      "312:         env.put(\"JENKINS_SERVER_COOKIE\",SERVER_COOKIE.get());",
      "313:         env.put(\"HUDSON_SERVER_COOKIE\",SERVER_COOKIE.get()); // Legacy compatibility",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1313:     public BuildTimelineWidget getTimeline() {",
      "1314:         return new BuildTimelineWidget(getBuilds());",
      "1315:     }",
      "1316: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1318:     private final static HexStringConfidentialKey SERVER_COOKIE = new HexStringConfidentialKey(Job.class,\"serverCookie\",16);",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/model/UsageStatistics.java||core/src/main/java/hudson/model/UsageStatistics.java": [
      "File: core/src/main/java/hudson/model/UsageStatistics.java -> core/src/main/java/hudson/model/UsageStatistics.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "123:     public String getStatData() throws IOException {",
      "126:         JSONObject o = new JSONObject();",
      "127:         o.put(\"stat\",1);",
      "130:         o.put(\"version\", Jenkins.VERSION);",
      "132:         List<JSONObject> nodes = new ArrayList<JSONObject>();",
      "134:             JSONObject  n = new JSONObject();",
      "136:                 n.put(\"master\",true);",
      "137:                 n.put(\"jvm-vendor\", System.getProperty(\"java.vm.vendor\"));",
      "138:                 n.put(\"jvm-version\", System.getProperty(\"java.version\"));",
      "139:             }",
      "140:             n.put(\"executors\",c.getNumExecutors());",
      "142:             n.put(\"os\", descriptor.get(c));",
      "143:             nodes.add(n);",
      "144:         }",
      "145:         o.put(\"nodes\",nodes);",
      "147:         List<JSONObject> plugins = new ArrayList<JSONObject>();",
      "149:             if(!pw.isActive())  continue;   // treat disabled plugins as if they are uninstalled",
      "150:             JSONObject p = new JSONObject();",
      "151:             p.put(\"name\",pw.getShortName());",
      "",
      "[Removed Lines]",
      "124:         Jenkins h = Jenkins.getInstance();",
      "128:         o.put(\"install\", Util.getDigestOf(h.getSecretKey()));",
      "129:         o.put(\"servletContainer\",h.servletContext.getServerInfo());",
      "133:         for( Computer c : h.getComputers() ) {",
      "135:             if(c.getNode()==h) {",
      "141:             DescriptorImpl descriptor = h.getDescriptorByType(DescriptorImpl.class);",
      "148:         for( PluginWrapper pw : h.getPluginManager().getPlugins() ) {",
      "",
      "[Added Lines]",
      "124:         Jenkins j = Jenkins.getInstance();",
      "128:         o.put(\"install\", j.getLegacyInstanceId());",
      "129:         o.put(\"servletContainer\", j.servletContext.getServerInfo());",
      "133:         for( Computer c : j.getComputers() ) {",
      "135:             if(c.getNode()==j) {",
      "141:             DescriptorImpl descriptor = j.getDescriptorByType(DescriptorImpl.class);",
      "148:         for( PluginWrapper pw : j.getPluginManager().getPlugins() ) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "155:         o.put(\"plugins\",plugins);",
      "157:         JSONObject jobs = new JSONObject();",
      "159:         for (TopLevelItemDescriptor d : Items.all()) {",
      "160:             int cnt=0;",
      "161:             for (TopLevelItem item : items) {",
      "",
      "[Removed Lines]",
      "158:         List<TopLevelItem> items = h.getItems();",
      "",
      "[Added Lines]",
      "158:         List<TopLevelItem> items = j.getItems();",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/security/RememberMeServicesProxy.java||core/src/main/java/hudson/security/RememberMeServicesProxy.java": [
      "File: core/src/main/java/hudson/security/RememberMeServicesProxy.java -> core/src/main/java/hudson/security/RememberMeServicesProxy.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package hudson.security;",
      "26: import org.acegisecurity.ui.rememberme.RememberMeServices;",
      "27: import org.acegisecurity.Authentication;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import jenkins.model.Jenkins;",
      "27: import jenkins.security.ConfidentialStore;",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/security/SecurityRealm.java||core/src/main/java/hudson/security/SecurityRealm.java": [
      "File: core/src/main/java/hudson/security/SecurityRealm.java -> core/src/main/java/hudson/security/SecurityRealm.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "516:             this.rememberMe = rememberMe;",
      "517:         }",
      "519:         private static RememberMeServices createRememberMeService(UserDetailsService uds) {",
      "521:             TokenBasedRememberMeServices2 rms = new TokenBasedRememberMeServices2();",
      "522:             rms.setUserDetailsService(uds);",
      "523:             rms.setKey(Jenkins.getInstance().getSecretKey());",
      "524:             rms.setParameter(\"remember_me\"); // this is the form field name in login.jelly",
      "525:             return rms;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "519:         @SuppressWarnings(\"deprecation\")",
      "525:                 TokenBasedRememberMeServices needs to be used in conjunction with RememberMeAuthenticationProvider,",
      "526:                 and both needs to use the same key (this is a reflection of a poor design in AcgeiSecurity, if you ask me)",
      "527:                 and various security plugins have its own groovy script that configures them.",
      "529:                 So if we change this, it creates a painful situation for those plugins by forcing them to choose",
      "530:                 to work with earlier version of Jenkins or newer version of Jenkins, and not both.",
      "532:                 So we keep this here.",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java||core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java": [
      "File: core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java -> core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package hudson.security;",
      "26: import org.acegisecurity.ui.rememberme.TokenBasedRememberMeServices;",
      "27: import org.acegisecurity.userdetails.UserDetails;",
      "28: import org.acegisecurity.Authentication;",
      "",
      "[Removed Lines]",
      "29: import org.apache.commons.codec.digest.DigestUtils;",
      "",
      "[Added Lines]",
      "26: import jenkins.security.HMACConfidentialKey;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41: public class TokenBasedRememberMeServices2 extends TokenBasedRememberMeServices {",
      "42:     @Override",
      "43:     protected String makeTokenSignature(long tokenExpiryTime, UserDetails userDetails) {",
      "45:                 + \"N/A\" + \":\" + getKey());",
      "46:         return expectedTokenSignature;",
      "47:     }",
      "",
      "[Removed Lines]",
      "44:         String expectedTokenSignature = DigestUtils.md5Hex(userDetails.getUsername() + \":\" + tokenExpiryTime + \":\"",
      "",
      "[Added Lines]",
      "44:         String expectedTokenSignature = MAC.mac(userDetails.getUsername() + \":\" + tokenExpiryTime + \":\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:     protected String retrievePassword(Authentication successfulAuthentication) {",
      "51:         return \"N/A\";",
      "52:     }",
      "53: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:     private static final HMACConfidentialKey MAC = new HMACConfidentialKey(TokenBasedRememberMeServices.class,\"mac\");",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java": [
      "File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java -> core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:     public static final class DescriptorImpl extends CrumbIssuerDescriptor<DefaultCrumbIssuer> implements ModelObject {",
      "120:         public DescriptorImpl() {",
      "122:             load();",
      "123:         }",
      "",
      "[Removed Lines]",
      "121:             super(Jenkins.getInstance().getSecretKey(), System.getProperty(\"hudson.security.csrf.requestfield\", \".crumb\"));",
      "",
      "[Added Lines]",
      "122:             super(Jenkins.getInstance().getLegacyInstanceId(), System.getProperty(\"hudson.security.csrf.requestfield\", \".crumb\"));",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java": [
      "File: core/src/main/java/hudson/slaves/SlaveComputer.java -> core/src/main/java/hudson/slaves/SlaveComputer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "60: import hudson.util.io.ReopenableFileOutputStream;",
      "61: import jenkins.model.Jenkins;",
      "62: import org.kohsuke.stapler.StaplerRequest;",
      "63: import org.kohsuke.stapler.StaplerResponse;",
      "64: import org.kohsuke.stapler.QueryParameter;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62: import jenkins.slaves.JnlpSlaveAgentProtocol;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "128:         return acceptingTasks;",
      "129:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "132:     public String getJnlpMac() {",
      "133:         return JnlpSlaveAgentProtocol.SLAVE_SECRET.mac(getName());",
      "134:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java": [
      "File: core/src/main/java/hudson/util/Secret.java -> core/src/main/java/hudson/util/Secret.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: import com.trilead.ssh2.crypto.Base64;",
      "32: import jenkins.model.Jenkins;",
      "33: import hudson.Util;",
      "34: import org.kohsuke.stapler.Stapler;",
      "36: import javax.crypto.SecretKey;",
      "37: import javax.crypto.Cipher;",
      "38: import java.io.Serializable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: import jenkins.security.CryptoConfidentialKey;",
      "37: import javax.crypto.BadPaddingException;",
      "38: import javax.crypto.IllegalBlockSizeException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96:     }",
      "102:         String secret = SECRET;",
      "103:         if(secret==null)    return Jenkins.getInstance().getSecretKeyAsAES128();",
      "104:         return Util.toAes128Key(secret);",
      "",
      "[Removed Lines]",
      "101:     private static SecretKey getKey() throws UnsupportedEncodingException, GeneralSecurityException {",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:     public String getEncryptedValue() {",
      "113:         try {",
      "117:             return new String(Base64.encode(cipher.doFinal((value+MAGIC).getBytes(\"UTF-8\"))));",
      "118:         } catch (GeneralSecurityException e) {",
      "",
      "[Removed Lines]",
      "114:             Cipher cipher = getCipher(\"AES\");",
      "115:             cipher.init(Cipher.ENCRYPT_MODE, getKey());",
      "",
      "[Added Lines]",
      "121:             Cipher cipher = KEY.encrypt();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "129:     public static Secret decrypt(String data) {",
      "130:         if(data==null)      return null;",
      "131:         try {",
      "132:             Cipher cipher = getCipher(\"AES\");",
      "138:         } catch (GeneralSecurityException e) {",
      "139:             return null;",
      "140:         } catch (UnsupportedEncodingException e) {",
      "",
      "[Removed Lines]",
      "133:             cipher.init(Cipher.DECRYPT_MODE, getKey());",
      "134:             String plainText = new String(cipher.doFinal(Base64.decode(data.toCharArray())), \"UTF-8\");",
      "135:             if(plainText.endsWith(MAGIC))",
      "136:                 return new Secret(plainText.substring(0,plainText.length()-MAGIC.length()));",
      "137:             return null;",
      "",
      "[Added Lines]",
      "138:             byte[] in = Base64.decode(data.toCharArray());",
      "139:             Secret s = tryDecrypt(KEY.decrypt(), in);",
      "140:             if (s!=null)    return s;",
      "144:             cipher.init(Cipher.DECRYPT_MODE, getLegacyKey());",
      "145:             return tryDecrypt(cipher, in);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "144:         }",
      "145:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "155:     private static Secret tryDecrypt(Cipher cipher, byte[] in) throws UnsupportedEncodingException {",
      "156:         try {",
      "157:             String plainText = new String(cipher.doFinal(in), \"UTF-8\");",
      "158:             if(plainText.endsWith(MAGIC))",
      "159:                 return new Secret(plainText.substring(0,plainText.length()-MAGIC.length()));",
      "160:             return null;",
      "161:         } catch (GeneralSecurityException e) {",
      "162:             return null;",
      "163:         }",
      "164:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "207:     private static final String PROVIDER = System.getProperty(Secret.class.getName()+\".provider\");",
      "214:     private static final long serialVersionUID = 1L;",
      "216:     static {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "236:     private static final CryptoConfidentialKey KEY = new CryptoConfidentialKey(Secret.class.getName());",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
      "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "196: import jenkins.ExtensionRefreshException;",
      "197: import jenkins.InitReactorRunner;",
      "198: import jenkins.model.ProjectNamingStrategy.DefaultProjectNamingStrategy;",
      "199: import net.sf.json.JSONObject;",
      "200: import org.acegisecurity.AccessDeniedException;",
      "201: import org.acegisecurity.AcegiSecurityException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "199: import jenkins.security.ConfidentialKey;",
      "200: import jenkins.security.ConfidentialStore;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1006:     public SecretKey getSecretKeyAsAES128() {",
      "1007:         return Util.toAes128Key(secretKey);",
      "1008:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1029:     @SuppressWarnings(\"deprecation\")",
      "1030:     public String getLegacyInstanceId() {",
      "1031:         return Util.getDigestOf(getSecretKey());",
      "1032:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java": [
      "File: core/src/main/java/jenkins/security/ApiTokenProperty.java -> core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: import hudson.model.UserPropertyDescriptor;",
      "32: import hudson.util.HttpResponses;",
      "33: import hudson.util.Secret;",
      "35: import net.sf.json.JSONObject;",
      "36: import org.kohsuke.stapler.AncestorInPath;",
      "37: import org.kohsuke.stapler.DataBoundConstructor;",
      "",
      "[Removed Lines]",
      "34: import jenkins.model.Jenkins;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:         public ApiTokenProperty newInstance(User user) {",
      "110:         }",
      "112:         public HttpResponse doChangeToken(@AncestorInPath User u, StaplerResponse rsp) throws IOException {",
      "",
      "[Removed Lines]",
      "109:             return new ApiTokenProperty(Util.getDigestOf(Jenkins.getInstance().getSecretKey() + \":\" + user.getId()));",
      "",
      "[Added Lines]",
      "108:             return new ApiTokenProperty(API_KEY_SEED.mac(user.getId()));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "123:     }",
      "125:     private static final SecureRandom RANDOM = new SecureRandom();",
      "126: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:     private static final HMACConfidentialKey API_KEY_SEED = new HMACConfidentialKey(ApiTokenProperty.class,\"seed\",16);",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/ConfidentialKey.java||core/src/main/java/jenkins/security/ConfidentialKey.java": [
      "File: core/src/main/java/jenkins/security/ConfidentialKey.java -> core/src/main/java/jenkins/security/ConfidentialKey.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.scm.SCM;",
      "4: import hudson.tasks.Builder;",
      "5: import hudson.util.Secret;",
      "6: import jenkins.slaves.JnlpSlaveAgentProtocol;",
      "8: import javax.annotation.CheckForNull;",
      "9: import java.io.IOException;",
      "36: public abstract class ConfidentialKey {",
      "40:     private final String id;",
      "42:     protected ConfidentialKey(String id) {",
      "43:         this.id = id;",
      "44:     }",
      "46:     protected @CheckForNull byte[] load() throws IOException {",
      "47:         return ConfidentialStore.get().load(this);",
      "48:     }",
      "50:     protected void store(byte[] payload) throws IOException {",
      "51:         ConfidentialStore.get().store(this,payload);",
      "52:     }",
      "54:     public String getId() {",
      "55:         return id;",
      "56:     }",
      "57: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/ConfidentialStore.java||core/src/main/java/jenkins/security/ConfidentialStore.java": [
      "File: core/src/main/java/jenkins/security/ConfidentialStore.java -> core/src/main/java/jenkins/security/ConfidentialStore.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.Extension;",
      "4: import jenkins.model.Jenkins;",
      "6: import javax.annotation.CheckForNull;",
      "7: import javax.annotation.Nonnull;",
      "8: import java.io.IOException;",
      "9: import java.security.SecureRandom;",
      "27: public abstract class ConfidentialStore {",
      "32:     protected abstract void store(ConfidentialKey key, byte[] payload) throws IOException;",
      "40:     protected abstract @CheckForNull byte[] load(ConfidentialKey key) throws IOException;",
      "47:     public abstract byte[] randomBytes(int size);",
      "52:     public static @Nonnull ConfidentialStore get() {",
      "53:         if (TEST!=null) return TEST.get();",
      "54:         return Jenkins.getInstance().getExtensionList(ConfidentialStore.class).get(0);",
      "55:     }",
      "61: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/CryptoConfidentialKey.java||core/src/main/java/jenkins/security/CryptoConfidentialKey.java": [
      "File: core/src/main/java/jenkins/security/CryptoConfidentialKey.java -> core/src/main/java/jenkins/security/CryptoConfidentialKey.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.util.Secret;",
      "5: import javax.crypto.Cipher;",
      "6: import javax.crypto.SecretKey;",
      "7: import javax.crypto.spec.SecretKeySpec;",
      "8: import java.io.IOException;",
      "9: import java.security.GeneralSecurityException;",
      "17: public class CryptoConfidentialKey extends ConfidentialKey {",
      "18:     private volatile SecretKey secret;",
      "19:     public CryptoConfidentialKey(String id) {",
      "20:         super(id);",
      "21:     }",
      "23:     public CryptoConfidentialKey(Class owner, String shortName) {",
      "24:         this(owner.getName()+'.'+shortName);",
      "25:     }",
      "27:     private SecretKey getKey() {",
      "28:         try {",
      "29:             if (secret==null) {",
      "30:                 synchronized (this) {",
      "31:                     if (secret==null) {",
      "32:                         byte[] payload = load();",
      "33:                         if (payload==null) {",
      "34:                             payload = ConfidentialStore.get().randomBytes(256);",
      "35:                             store(payload);",
      "36:                         }",
      "38:                         secret = new SecretKeySpec(payload,0,128/8, ALGORITHM);",
      "39:                     }",
      "40:                 }",
      "41:             }",
      "42:             return secret;",
      "43:         } catch (IOException e) {",
      "44:             throw new Error(\"Failed to load the key: \"+getId(),e);",
      "45:         }",
      "46:     }",
      "51:     public Cipher encrypt() {",
      "52:         try {",
      "53:             Cipher cipher = Secret.getCipher(ALGORITHM);",
      "54:             cipher.init(Cipher.ENCRYPT_MODE, getKey());",
      "55:             return cipher;",
      "56:         } catch (GeneralSecurityException e) {",
      "57:             throw new AssertionError(e);",
      "58:         }",
      "59:     }",
      "64:     public Cipher decrypt() {",
      "65:         try {",
      "66:             Cipher cipher = Secret.getCipher(ALGORITHM);",
      "67:             cipher.init(Cipher.DECRYPT_MODE, getKey());",
      "68:             return cipher;",
      "69:         } catch (GeneralSecurityException e) {",
      "70:             throw new AssertionError(e);",
      "71:         }",
      "72:     }",
      "75:     private static final String ALGORITHM = \"AES\";",
      "76: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/DefaultConfidentialStore.java||core/src/main/java/jenkins/security/DefaultConfidentialStore.java": [
      "File: core/src/main/java/jenkins/security/DefaultConfidentialStore.java -> core/src/main/java/jenkins/security/DefaultConfidentialStore.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.Extension;",
      "4: import hudson.FilePath;",
      "5: import hudson.Util;",
      "6: import hudson.util.IOException2;",
      "7: import hudson.util.IOUtils;",
      "8: import hudson.util.Secret;",
      "9: import hudson.util.TextFile;",
      "10: import jenkins.model.Jenkins;",
      "12: import javax.crypto.Cipher;",
      "13: import javax.crypto.CipherInputStream;",
      "14: import javax.crypto.CipherOutputStream;",
      "15: import javax.crypto.SecretKey;",
      "16: import java.io.File;",
      "17: import java.io.FileInputStream;",
      "18: import java.io.FileOutputStream;",
      "19: import java.io.IOException;",
      "20: import java.security.GeneralSecurityException;",
      "21: import java.security.SecureRandom;",
      "31: @Extension(ordinal=-99999) // small ordinal value to allow other higher ones to take over",
      "32: public class DefaultConfidentialStore extends ConfidentialStore {",
      "33:     private final SecureRandom sr = new SecureRandom();",
      "38:     private final File rootDir;",
      "47:     private final SecretKey masterKey;",
      "49:     public DefaultConfidentialStore() throws IOException, InterruptedException {",
      "50:         this(new File(Jenkins.getInstance().getRootDir(),\"secrets\"));",
      "51:     }",
      "53:     public DefaultConfidentialStore(File rootDir) throws IOException, InterruptedException {",
      "54:         this.rootDir = rootDir;",
      "55:         if (rootDir.mkdirs()) {",
      "58:             new FilePath(rootDir).chmod(0700);",
      "59:         }",
      "61:         TextFile masterSecret = new TextFile(new File(rootDir,\"master.key\"));",
      "62:         if (!masterSecret.exists()) {",
      "65:             masterSecret.write(Util.toHexString(randomBytes(128)));",
      "66:         }",
      "67:         this.masterKey = Util.toAes128Key(masterSecret.readTrim());",
      "68:     }",
      "73:     @Override",
      "74:     protected void store(ConfidentialKey key, byte[] payload) throws IOException {",
      "75:         CipherOutputStream cos=null;",
      "76:         FileOutputStream fos=null;",
      "77:         try {",
      "78:             Cipher sym = Secret.getCipher(\"AES\");",
      "79:             sym.init(Cipher.ENCRYPT_MODE, masterKey);",
      "80:             cos = new CipherOutputStream(fos=new FileOutputStream(getFileFor(key)), sym);",
      "81:             cos.write(payload);",
      "82:             cos.write(MAGIC);",
      "83:         } catch (GeneralSecurityException e) {",
      "84:             throw new IOException2(\"Failed to persist the key: \"+key.getId(),e);",
      "85:         } finally {",
      "86:             IOUtils.closeQuietly(cos);",
      "87:             IOUtils.closeQuietly(fos);",
      "88:         }",
      "89:     }",
      "97:     @Override",
      "98:     protected byte[] load(ConfidentialKey key) throws IOException {",
      "99:         CipherInputStream cis=null;",
      "100:         FileInputStream fis=null;",
      "101:         try {",
      "102:             File f = getFileFor(key);",
      "103:             if (!f.exists())    return null;",
      "105:             Cipher sym = Secret.getCipher(\"AES\");",
      "106:             sym.init(Cipher.DECRYPT_MODE, masterKey);",
      "107:             cis = new CipherInputStream(fis=new FileInputStream(f), sym);",
      "108:             byte[] bytes = IOUtils.toByteArray(cis);",
      "109:             return verifyMagic(bytes);",
      "110:         } catch (GeneralSecurityException e) {",
      "111:             throw new IOException2(\"Failed to persist the key: \"+key.getId(),e);",
      "112:         } finally {",
      "113:             IOUtils.closeQuietly(cis);",
      "114:             IOUtils.closeQuietly(fis);",
      "115:         }",
      "116:     }",
      "121:     private byte[] verifyMagic(byte[] payload) {",
      "122:         int payloadLen = payload.length-MAGIC.length;",
      "123:         if (payloadLen<0)   return null;    // obviously broken",
      "125:         for (int i=0; i<MAGIC.length; i++) {",
      "126:             if (payload[payloadLen+i]!=MAGIC[i])",
      "127:                 return null;    // broken",
      "128:         }",
      "129:         byte[] truncated = new byte[payloadLen];",
      "130:         System.arraycopy(payload,0,truncated,0,truncated.length);",
      "131:         return truncated;",
      "132:     }",
      "134:     private File getFileFor(ConfidentialKey key) {",
      "135:         return new File(rootDir, key.getId());",
      "136:     }",
      "138:     public byte[] randomBytes(int size) {",
      "139:         byte[] random = new byte[size];",
      "140:         sr.nextBytes(random);",
      "141:         return random;",
      "142:     }",
      "144:     private static final byte[] MAGIC = \"::::MAGIC::::\".getBytes();",
      "145: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/HMACConfidentialKey.java||core/src/main/java/jenkins/security/HMACConfidentialKey.java": [
      "File: core/src/main/java/jenkins/security/HMACConfidentialKey.java -> core/src/main/java/jenkins/security/HMACConfidentialKey.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.Util;",
      "5: import javax.crypto.KeyGenerator;",
      "6: import javax.crypto.Mac;",
      "7: import javax.crypto.SecretKey;",
      "8: import javax.crypto.spec.SecretKeySpec;",
      "9: import java.io.IOException;",
      "10: import java.io.UnsupportedEncodingException;",
      "11: import java.security.GeneralSecurityException;",
      "12: import java.security.NoSuchAlgorithmException;",
      "13: import java.util.Arrays;",
      "28: public class HMACConfidentialKey extends ConfidentialKey {",
      "29:     private volatile SecretKey key;",
      "30:     private final int length;",
      "40:     public HMACConfidentialKey(String id, int length) {",
      "41:         super(id);",
      "42:         this.length = length;",
      "43:     }",
      "48:     public HMACConfidentialKey(String id) {",
      "49:         this(id,Integer.MAX_VALUE);",
      "50:     }",
      "56:     public HMACConfidentialKey(Class owner, String shortName, int length) {",
      "57:         this(owner.getName()+'.'+shortName,length);",
      "58:     }",
      "60:     public HMACConfidentialKey(Class owner, String shortName) {",
      "61:         this(owner,shortName,Integer.MAX_VALUE);",
      "62:     }",
      "68:     public byte[] mac(byte[] message) {",
      "69:         return chop(createMac().doFinal(message));",
      "70:     }",
      "75:     public boolean checkMac(byte[] message, byte[] mac) {",
      "76:         return Arrays.equals(mac(message),mac);",
      "77:     }",
      "83:     public String mac(String message) {",
      "84:         try {",
      "85:             return Util.toHexString(mac(message.getBytes(\"UTF-8\")));",
      "86:         } catch (UnsupportedEncodingException e) {",
      "87:             throw new AssertionError(e);",
      "88:         }",
      "89:     }",
      "94:     public boolean checkMac(String message, String mac) {",
      "95:         return mac(message).equals(mac);",
      "96:     }",
      "98:     private byte[] chop(byte[] mac) {",
      "99:         if (mac.length<=length)  return mac; // already too short",
      "101:         byte[] b = new byte[length];",
      "102:         System.arraycopy(mac,0,b,0,b.length);",
      "103:         return b;",
      "104:     }",
      "109:     public Mac createMac() {",
      "110:         try {",
      "111:             Mac mac = Mac.getInstance(ALGORITHM);",
      "112:             mac.init(getKey());",
      "113:             return mac;",
      "114:         } catch (GeneralSecurityException e) {",
      "116:             throw new Error(ALGORITHM+\" not supported?\",e);",
      "117:         }",
      "118:     }",
      "120:     private SecretKey getKey() {",
      "121:         if (key==null) {",
      "122:             synchronized (this) {",
      "123:                 if (key==null) {",
      "124:                     try {",
      "125:                         byte[] encoded = load();",
      "126:                         if (encoded==null) {",
      "127:                             KeyGenerator kg = KeyGenerator.getInstance(ALGORITHM);",
      "128:                             SecretKey key = kg.generateKey();",
      "129:                             store(encoded=key.getEncoded());",
      "130:                         }",
      "131:                         key = new SecretKeySpec(encoded,ALGORITHM);",
      "132:                     } catch (IOException e) {",
      "133:                         throw new Error(\"Failed to load the key: \"+getId(),e);",
      "134:                     } catch (NoSuchAlgorithmException e) {",
      "135:                         throw new Error(\"Failed to load the key: \"+getId(),e);",
      "136:                     }",
      "137:                 }",
      "138:             }",
      "139:         }",
      "140:         return key;",
      "141:     }",
      "143:     private static final String ALGORITHM = \"HmacSHA256\";",
      "144: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/HexStringConfidentialKey.java||core/src/main/java/jenkins/security/HexStringConfidentialKey.java": [
      "File: core/src/main/java/jenkins/security/HexStringConfidentialKey.java -> core/src/main/java/jenkins/security/HexStringConfidentialKey.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.Util;",
      "5: import java.io.IOException;",
      "17: public class HexStringConfidentialKey extends ConfidentialKey {",
      "18:     private final int length;",
      "20:     private volatile String secret;",
      "26:     public HexStringConfidentialKey(String id, int length) {",
      "27:         super(id);",
      "28:         if (length%2!=0)",
      "29:             throw new IllegalArgumentException(\"length must be even: \"+length);",
      "30:         this.length = length;",
      "31:     }",
      "33:     public HexStringConfidentialKey(Class owner, String shortName, int length) {",
      "34:         this(owner.getName()+'.'+shortName,length);",
      "35:     }",
      "46:     public String get() {",
      "47:         try {",
      "48:             if (secret==null) {",
      "49:                 synchronized (this) {",
      "50:                     if (secret==null) {",
      "51:                         byte[] payload = load();",
      "52:                         if (payload==null) {",
      "53:                             payload = ConfidentialStore.get().randomBytes(length/2);",
      "54:                             store(payload);",
      "55:                         }",
      "56:                         secret = Util.toHexString(payload).substring(0,length);",
      "57:                     }",
      "58:                 }",
      "59:             }",
      "60:             return secret;",
      "61:         } catch (IOException e) {",
      "62:             throw new Error(\"Failed to load the key: \"+getId(),e);",
      "63:         }",
      "64:     }",
      "65: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java||core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java": [
      "File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java -> core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import hudson.slaves.SlaveComputer;",
      "9: import jenkins.AgentProtocol;",
      "10: import jenkins.model.Jenkins;",
      "12: import java.io.BufferedInputStream;",
      "13: import java.io.BufferedOutputStream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: import jenkins.security.HMACConfidentialKey;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:         }",
      "86:         protected void run() throws IOException, InterruptedException {",
      "88:                 error(out, \"Unauthorized access\");",
      "89:                 return;",
      "90:             }",
      "93:             SlaveComputer computer = (SlaveComputer) Jenkins.getInstance().getComputer(nodeName);",
      "94:             if(computer==null) {",
      "95:                 error(out, \"No such slave: \"+nodeName);",
      "",
      "[Removed Lines]",
      "87:             if(!getSecretKey().equals(in.readUTF())) {",
      "92:             final String nodeName = in.readUTF();",
      "",
      "[Added Lines]",
      "88:             final String secret = in.readUTF();",
      "89:             final String nodeName = in.readUTF();",
      "91:             if(!SLAVE_SECRET.mac(nodeName).equals(secret)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "138:             }",
      "139:         }",
      "145:         protected void error(PrintWriter out, String msg) throws IOException {",
      "146:             out.println(msg);",
      "147:             LOGGER.log(Level.WARNING,Thread.currentThread().getName()+\" is aborted: \"+msg);",
      "",
      "[Removed Lines]",
      "141:         protected String getSecretKey() {",
      "142:             return Jenkins.getInstance().getSecretKey();",
      "143:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "150:     }",
      "152:     private static final Logger LOGGER = Logger.getLogger(JnlpSlaveAgentProtocol.class.getName());",
      "153: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "157:     public static final HMACConfidentialKey SLAVE_SECRET = new HMACConfidentialKey(JnlpSlaveAgentProtocol.class,\"secret\");",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java||core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java": [
      "File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java -> core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:             Properties request = new Properties();",
      "58:             request.load(new ByteArrayInputStream(in.readUTF().getBytes(\"UTF-8\")));",
      "61:                 error(out, \"Unauthorized access\");",
      "62:                 return;",
      "63:             }",
      "66:             SlaveComputer computer = (SlaveComputer) Jenkins.getInstance().getComputer(nodeName);",
      "67:             if(computer==null) {",
      "68:                 error(out, \"No such slave: \"+nodeName);",
      "",
      "[Removed Lines]",
      "60:             if(!getSecretKey().equals(request.getProperty(\"Secret-Key\"))) {",
      "65:             final String nodeName = request.getProperty(\"Node-Name\");",
      "",
      "[Added Lines]",
      "60:             final String nodeName = request.getProperty(\"Node-Name\");",
      "62:             if(!SLAVE_SECRET.mac(nodeName).equals(request.getProperty(\"Secret-Key\"))) {",
      "",
      "---------------"
    ],
    "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly": [
      "File: core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly -> core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:   <!--",
      "32:     See http://www.dallaway.com/acad/webstart/ for obtaining the certificate.",
      "33:   -->",
      "35:     <!-- See http://java.sun.com/j2se/1.5.0/docs/guide/javaws/developersguide/syntax.html for the syntax -->",
      "36:     <jnlp spec=\"1.0+\"",
      "37:         codebase=\"${rootURL}computer/${h.encode(it.node.nodeName)}/\">",
      "",
      "[Removed Lines]",
      "34:   <l:isAdminOrTest test=\"true\">",
      "",
      "[Added Lines]",
      "34:   <j:getStatic var=\"connect\" className=\"hudson.model.Computer\" field=\"CONNECT\"/>",
      "35:   ${it.checkPermission(connect)}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:       </resources>",
      "63:       <application-desc main-class=\"hudson.remoting.jnlp.Main\">",
      "65:         <argument>${it.node.nodeName}</argument>",
      "66:         <j:if test=\"${it.launcher.tunnel!=null}\">",
      "67:           <argument>-tunnel</argument>",
      "",
      "[Removed Lines]",
      "64:         <argument>${app.secretKey}</argument>",
      "",
      "[Added Lines]",
      "66:         <argument>${it.jnlpMac}</argument>",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:         </j:if>",
      "88:       </application-desc>",
      "89:     </jnlp>",
      "91: </j:jelly>",
      "",
      "[Removed Lines]",
      "90:   </l:isAdminOrTest>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/util/SecretTest.groovy||core/src/test/java/hudson/util/SecretTest.groovy": [
      "File: core/src/test/java/hudson/util/SecretTest.groovy -> core/src/test/java/hudson/util/SecretTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.util",
      "26: import com.trilead.ssh2.crypto.Base64;",
      "27: import jenkins.model.Jenkins",
      "28: import jenkins.security.ConfidentialStoreRule;",
      "29: import org.junit.After",
      "30: import org.junit.Before",
      "31: import org.junit.Rule",
      "32: import org.junit.Test",
      "34: import javax.crypto.Cipher;",
      "35: import java.security.SecureRandom;",
      "37: import hudson.Util;",
      "42: public class SecretTest {",
      "43:     @Rule",
      "44:     public ConfidentialStoreRule confidentialStore = new ConfidentialStoreRule()",
      "46:     @Test @Before",
      "47:     void setUp() {",
      "48:         def sr = new SecureRandom();",
      "49:         byte[] random = new byte[32];",
      "50:         sr.nextBytes(random);",
      "51:         Secret.SECRET = Util.toHexString(random);",
      "52:     }",
      "54:     @Test @After",
      "55:     void tearDown() {",
      "56:         Secret.SECRET = null;",
      "57:     }",
      "59:     @Test",
      "60:     void testEncrypt() {",
      "61:         def secret = Secret.fromString(\"abc\");",
      "62:         assert \"abc\"==secret.plainText;",
      "65:         println secret.encryptedValue;",
      "66:         assert !\"abc\".equals(secret.encryptedValue);",
      "69:         assert secret==Secret.fromString(secret.encryptedValue);",
      "70:     }",
      "72:     @Test",
      "73:     void testDecrypt() {",
      "74:         assert \"abc\"==Secret.toString(Secret.fromString(\"abc\"))",
      "75:     }",
      "77:     @Test",
      "78:     void testSerialization() {",
      "79:         def s = Secret.fromString(\"Mr.Jenkins\");",
      "80:         def xml = Jenkins.XSTREAM.toXML(s);",
      "81:         assert !xml.contains(s.plainText)",
      "82:         assert xml.contains(s.encryptedValue)",
      "84:         def o = Jenkins.XSTREAM.fromXML(xml);",
      "85:         assert o==s : xml;",
      "86:     }",
      "88:     public static class Foo {",
      "89:         Secret password;",
      "90:     }",
      "95:     @Test",
      "96:     void testCompatibilityFromString() {",
      "97:         def tagName = Foo.class.name.replace(\"\\$\",\"_-\");",
      "98:         def xml = \"<$tagName><password>secret</password></$tagName>\";",
      "99:         def foo = new Foo();",
      "100:         Jenkins.XSTREAM.fromXML(xml, foo);",
      "101:         assert \"secret\"==Secret.toString(foo.password)",
      "102:     }",
      "107:     @Test",
      "108:     void migrationFromLegacyKeyToConfidentialStore() {",
      "109:         def legacy = Secret.legacyKey",
      "110:         [\"Hello world\",\"\",\"\\u0000unprintable\"].each { str ->",
      "111:             def cipher = Secret.getCipher(\"AES\");",
      "112:             cipher.init(Cipher.ENCRYPT_MODE, legacy);",
      "113:             def old = new String(Base64.encode(cipher.doFinal((str + Secret.MAGIC).getBytes(\"UTF-8\"))))",
      "114:             def s = Secret.fromString(old)",
      "115:             assert s.plainText==str : \"secret by the old key should decrypt\"",
      "116:             assert s.encryptedValue!=old : \"but when encrypting, ConfidentialKey should be in use\"",
      "117:         }",
      "118:     }",
      "119: }",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/util/SecretTest.java||core/src/test/java/hudson/util/SecretTest.java": [
      "File: core/src/test/java/hudson/util/SecretTest.java -> core/src/test/java/hudson/util/SecretTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/security/ConfidentialStoreRule.java||core/src/test/java/jenkins/security/ConfidentialStoreRule.java": [
      "File: core/src/test/java/jenkins/security/ConfidentialStoreRule.java -> core/src/test/java/jenkins/security/ConfidentialStoreRule.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.Util;",
      "4: import org.junit.rules.ExternalResource;",
      "6: import java.io.File;",
      "7: import java.io.IOException;",
      "13: public class ConfidentialStoreRule extends ExternalResource {",
      "14:     public ConfidentialStore store;",
      "15:     public File tmp;",
      "17:     @Override",
      "18:     protected void before() throws Throwable {",
      "19:         tmp = Util.createTempDir();",
      "20:         store = new DefaultConfidentialStore(tmp);",
      "21:         ConfidentialStore.TEST.set(store);",
      "22:     }",
      "24:     @Override",
      "25:     protected void after() {",
      "26:         ConfidentialStore.TEST.set(null);",
      "27:         try {",
      "28:             Util.deleteRecursive(tmp);",
      "29:         } catch (IOException e) {",
      "30:             throw new Error(e);",
      "31:         }",
      "32:     }",
      "34:     static {",
      "35:         ConfidentialStore.TEST = new ThreadLocal<ConfidentialStore>();",
      "36:     }",
      "37: }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy||core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy": [
      "File: core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy -> core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security",
      "3: import org.junit.Rule",
      "4: import org.junit.Test",
      "11: class CryptoConfidentialKeyTest {",
      "12:     @Rule",
      "13:     public ConfidentialStoreRule store = new ConfidentialStoreRule()",
      "15:     def key = new CryptoConfidentialKey(\"test\")",
      "17:     @Test",
      "18:     void decryptGetsPlainTextBack() {",
      "19:         [\"Hello world\",\"\",\"\\u0000\"].each { str ->",
      "20:             assert key.decrypt().doFinal(key.encrypt().doFinal(str.bytes))==str.bytes",
      "21:         }",
      "22:     }",
      "24:     @Test",
      "25:     void multipleEncryptsAreIdempotent() {",
      "26:         def str = \"Hello world\".bytes",
      "27:         assert key.encrypt().doFinal(str)==key.encrypt().doFinal(str)",
      "28:     }",
      "30:     @Test",
      "31:     void loadingExistingKey() {",
      "32:         def key2 = new CryptoConfidentialKey(\"test\") // this will cause the key to be loaded from the disk",
      "33:         [\"Hello world\",\"\",\"\\u0000\"].each { str ->",
      "34:             assert key2.decrypt().doFinal(key.encrypt().doFinal(str.bytes))==str.bytes",
      "35:         }",
      "36:     }",
      "37: }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy||core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy": [
      "File: core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy -> core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security",
      "3: import hudson.FilePath",
      "4: import hudson.Functions",
      "5: import hudson.Util",
      "6: import org.junit.After",
      "7: import org.junit.Before",
      "8: import org.junit.Test",
      "13: public class DefaultConfidentialStoreTest {",
      "15:     def tmp;",
      "17:     @Before",
      "18:     void setup() {",
      "19:         tmp = Util.createTempDir()",
      "20:     }",
      "22:     @After",
      "23:     void tearDown() {",
      "24:         Util.deleteRecursive(tmp)",
      "25:     }",
      "27:     @Test",
      "28:     void roundtrip() {",
      "29:         tmp.deleteDir()   // let ConfidentialStore create a directory",
      "31:         def store = new DefaultConfidentialStore(tmp);",
      "32:         def key = new ConfidentialKey(\"test\") {};",
      "35:         def str = \"Hello world!\"",
      "36:         store.store(key, str.bytes)",
      "37:         assert new String(store.load(key))==str",
      "40:         assert new File(tmp,\"test\").exists()",
      "41:         assert new File(tmp,\"master.key\").exists()",
      "43:         assert !new File(tmp,\"test\").text.contains(\"Hello\") // the data shouldn't be a plain text, obviously",
      "45:         if (!Functions.isWindows())",
      "46:             assert (new FilePath(tmp).mode()&0777) == 0700 // should be read only",
      "49:         new File(tmp,\"master.key\").delete()",
      "50:         def store2 = new DefaultConfidentialStore(tmp)",
      "51:         assert new File(tmp,\"master.key\").exists()  // we should have a new key now",
      "52:         assert store2.load(key)==null;",
      "53:     }",
      "54: }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy||core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy": [
      "File: core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy -> core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security",
      "3: import org.junit.Rule",
      "4: import org.junit.Test",
      "11: class HMACConfidentialKeyTest {",
      "12:     @Rule",
      "13:     public ConfidentialStoreRule store = new ConfidentialStoreRule()",
      "15:     def key = new HMACConfidentialKey(\"test\",16)",
      "17:     @Test",
      "18:     void basics() {",
      "19:         def unique = [] as TreeSet",
      "20:         [\"Hello world\",\"\",\"\\u0000\"].each { str ->",
      "21:             def mac = key.mac(str)",
      "22:             unique.add(mac)",
      "23:             assert mac =~ /[0-9A-Fa-f]{32}/",
      "24:             assert key.checkMac(str,mac)",
      "25:             assert !key.checkMac(\"garbage\",mac)",
      "26:         }",
      "28:         assert unique.size()==3 // make sure all 3 MAC are different",
      "29:     }",
      "31:     @Test",
      "32:     void loadingExistingKey() {",
      "34:         def key2 = new HMACConfidentialKey(\"test\",16)",
      "35:         [\"Hello world\",\"\",\"\\u0000\"].each { str ->",
      "36:             assert key.mac(str)==key2.mac(str)",
      "37:         }",
      "38:     }",
      "39: }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy||core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy": [
      "File: core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy -> core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security",
      "3: import org.junit.Rule",
      "4: import org.junit.Test",
      "11: class HexStringConfidentialKeyTest {",
      "12:     @Rule",
      "13:     public ConfidentialStoreRule store = new ConfidentialStoreRule()",
      "15:     @Test",
      "16:     void hexStringShouldProduceHexString() {",
      "17:         def key = new HexStringConfidentialKey(\"test\",8)",
      "18:         assert key.get() =~ /[A-Fa-f0-9]{8}/",
      "19:     }",
      "21:     @Test",
      "22:     void multipleGetsAreIdempotent() {",
      "23:         def key = new HexStringConfidentialKey(\"test\",8)",
      "24:         assert key.get()==key.get()",
      "25:     }",
      "27:     @Test",
      "28:     void specifyLengthAndMakeSureItTakesEffect() {",
      "29:         [8,16,32,256].each { n ->",
      "30:             new HexStringConfidentialKey(\"test\"+n,n).get().length()==n",
      "31:         }",
      "32:     }",
      "34:     @Test",
      "35:     void loadingExistingKey() {",
      "36:         def key1 = new HexStringConfidentialKey(\"test\",8)",
      "37:         key1.get() // this causes the ke to be generated",
      "40:         def key2 = new HexStringConfidentialKey(\"test\",8)",
      "41:         assert key1.get()==key2.get()",
      "42:     }",
      "43: }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java": [
      "File: test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java -> test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package hudson.bugs;",
      "26: import com.gargoylesoftware.htmlunit.Page;",
      "27: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "28: import com.gargoylesoftware.htmlunit.xml.XmlPage;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39: import org.jvnet.hudson.test.recipes.PresetData;",
      "40: import org.jvnet.hudson.test.recipes.PresetData.DataSet;",
      "42: import java.net.URL;",
      "43: import java.util.Collections;",
      "44: import java.util.List;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43: import java.net.HttpURLConnection;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "58:         return new DumbSlave(name,\"\",System.getProperty(\"java.io.tmpdir\")+'/'+name,\"2\", Mode.NORMAL, \"\", new JNLPLauncher(), RetentionStrategy.INSTANCE, Collections.EMPTY_LIST);",
      "59:     }",
      "62:     @Email(\"http://www.nabble.com/Launching-slave-by-JNLP-with-Active-Directory-plugin-and-matrix-security-problem-td18980323.html\")",
      "63:     public void test() throws Exception {",
      "64:         jenkins.setNodes(Collections.singletonList(createNewJnlpSlave(\"test\")));",
      "",
      "[Removed Lines]",
      "61:     @PresetData(DataSet.NO_ANONYMOUS_READACCESS)",
      "",
      "[Added Lines]",
      "63:     @PresetData(DataSet.ANONYMOUS_READONLY)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "80:             Page jarResource = jnlpAgent.getPage(url);",
      "81:             assertTrue(jarResource.getWebResponse().getContentType().toLowerCase(Locale.ENGLISH).startsWith(\"application/\"));",
      "82:         }",
      "83:     }",
      "84: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:         try {",
      "88:             jnlp = (XmlPage) jnlpAgent.goTo(\"computer/test/slave-agent.jnlp\", \"application/x-java-jnlp-file\");",
      "89:             fail(\"anonymous users must not be able to get secrets\");",
      "90:         } catch (FailingHttpStatusCodeException x) {",
      "91:             assertEquals(HttpURLConnection.HTTP_FORBIDDEN, x.getStatusCode());",
      "92:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "91a62d6574075516ecabf24f920a933683957ccb",
      "candidate_info": {
        "commit_hash": "91a62d6574075516ecabf24f920a933683957ccb",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/91a62d6574075516ecabf24f920a933683957ccb",
        "files": [
          "core/src/main/java/jenkins/security/ConfidentialStore.java"
        ],
        "message": "[FIXED JENKINS-18193] NPE thrown when Jenkins failed to initialize. Not really solving anything here\u2014there is no plausible implementation that could run under these circumstances\u2014 but at least reporting the problem more clearly.",
        "before_after_code_files": [
          "core/src/main/java/jenkins/security/ConfidentialStore.java||core/src/main/java/jenkins/security/ConfidentialStore.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/security/ConfidentialStore.java||core/src/main/java/jenkins/security/ConfidentialStore.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/security/ConfidentialStore.java||core/src/main/java/jenkins/security/ConfidentialStore.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/security/ConfidentialStore.java||core/src/main/java/jenkins/security/ConfidentialStore.java": [
          "File: core/src/main/java/jenkins/security/ConfidentialStore.java -> core/src/main/java/jenkins/security/ConfidentialStore.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     public static @Nonnull ConfidentialStore get() {",
          "64:         if (TEST!=null) return TEST.get();",
          "67:         ConfidentialStore cs = lookup.get(ConfidentialStore.class);",
          "68:         if (cs==null) {",
          "69:             try {",
          "",
          "[Removed Lines]",
          "66:         Lookup lookup = Jenkins.getInstance().lookup;",
          "",
          "[Added Lines]",
          "66:         Jenkins j = Jenkins.getInstance();",
          "67:         if (j == null) {",
          "68:             throw new IllegalStateException(\"cannot initialize confidential key store until Jenkins has started\");",
          "69:         }",
          "70:         Lookup lookup = j.lookup;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4895eaafca468b7f0f1a3166b2fca7414f0d5da5",
      "candidate_info": {
        "commit_hash": "4895eaafca468b7f0f1a3166b2fca7414f0d5da5",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/4895eaafca468b7f0f1a3166b2fca7414f0d5da5",
        "files": [
          "core/src/main/java/hudson/util/Secret.java",
          "core/src/main/java/hudson/util/SecretRewriter.java",
          "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
          "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy",
          "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy",
          "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties",
          "core/src/test/java/hudson/util/MockSecretRule.java",
          "core/src/test/java/hudson/util/SecretRewriterTest.groovy",
          "core/src/test/java/hudson/util/SecretTest.groovy",
          "test/src/main/java/hudson/util/SecretHelper.java",
          "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java"
        ],
        "message": "[SECURITY-49] added a tool to re-key secrets\n\nAs an AdministrativeMonitor, it shows up in the manage Jenkins UI, and\nallows the administrator to run a re-keying operation.",
        "before_after_code_files": [
          "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java",
          "core/src/main/java/hudson/util/SecretRewriter.java||core/src/main/java/hudson/util/SecretRewriter.java",
          "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
          "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy",
          "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy",
          "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties",
          "core/src/test/java/hudson/util/MockSecretRule.java||core/src/test/java/hudson/util/MockSecretRule.java",
          "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy",
          "core/src/test/java/hudson/util/SecretTest.groovy||core/src/test/java/hudson/util/SecretTest.groovy",
          "test/src/main/java/hudson/util/SecretHelper.java||test/src/main/java/hudson/util/SecretHelper.java",
          "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java",
            "core/src/test/java/hudson/util/SecretTest.groovy||core/src/test/java/hudson/util/SecretTest.groovy"
          ],
          "candidate": [
            "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java",
            "core/src/test/java/hudson/util/SecretTest.groovy||core/src/test/java/hudson/util/SecretTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java": [
          "File: core/src/main/java/hudson/util/Secret.java -> core/src/main/java/hudson/util/Secret.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import jenkins.security.CryptoConfidentialKey;",
          "35: import org.kohsuke.stapler.Stapler;",
          "39: import javax.crypto.SecretKey;",
          "40: import javax.crypto.Cipher;",
          "41: import java.io.Serializable;",
          "",
          "[Removed Lines]",
          "37: import javax.crypto.BadPaddingException;",
          "38: import javax.crypto.IllegalBlockSizeException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:         }",
          "153:     }",
          "156:         try {",
          "157:             String plainText = new String(cipher.doFinal(in), \"UTF-8\");",
          "158:             if(plainText.endsWith(MAGIC))",
          "159:                 return new Secret(plainText.substring(0,plainText.length()-MAGIC.length()));",
          "160:             return null;",
          "161:         } catch (GeneralSecurityException e) {",
          "163:         }",
          "164:     }",
          "",
          "[Removed Lines]",
          "155:     private static Secret tryDecrypt(Cipher cipher, byte[] in) throws UnsupportedEncodingException {",
          "162:             return null;",
          "",
          "[Added Lines]",
          "160:             return null; // if the key doesn't match with the bytes, it can result in BadPaddingException",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/util/SecretRewriter.java||core/src/main/java/hudson/util/SecretRewriter.java": [
          "File: core/src/main/java/hudson/util/SecretRewriter.java -> core/src/main/java/hudson/util/SecretRewriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.util;",
          "3: import com.trilead.ssh2.crypto.Base64;",
          "4: import hudson.model.TaskListener;",
          "5: import org.apache.commons.io.FileUtils;",
          "7: import javax.crypto.Cipher;",
          "8: import javax.crypto.SecretKey;",
          "9: import java.io.BufferedReader;",
          "10: import java.io.BufferedWriter;",
          "11: import java.io.File;",
          "12: import java.io.FileInputStream;",
          "13: import java.io.IOException;",
          "14: import java.io.InputStreamReader;",
          "15: import java.io.PrintWriter;",
          "16: import java.security.GeneralSecurityException;",
          "17: import java.security.InvalidKeyException;",
          "18: import java.util.HashSet;",
          "19: import java.util.Set;",
          "27: public class SecretRewriter {",
          "28:     private final Cipher cipher;",
          "29:     private final SecretKey key;",
          "34:     private int count;",
          "39:     private final File backupDirectory;",
          "45:     private Set<String> callstack = new HashSet<String>();",
          "47:     public SecretRewriter(File backupDirectory) throws GeneralSecurityException {",
          "48:         cipher = Secret.getCipher(\"AES\");",
          "49:         key = Secret.getLegacyKey();",
          "50:         this.backupDirectory = backupDirectory;",
          "51:     }",
          "53:     private String tryRewrite(String s) throws IOException, InvalidKeyException {",
          "54:         if (s.length()<24)",
          "55:             return s;   // Encrypting \"\" in Secret produces 24-letter characters, so this must be the minimum length",
          "56:         if (!isBase64(s))",
          "57:             return s;   // decode throws IOException if the input is not base64, and this is also a very quick way to filter",
          "59:         byte[] in;",
          "60:         try {",
          "61:             in = Base64.decode(s.toCharArray());",
          "62:         } catch (IOException e) {",
          "63:             return s;   // not a valid base64",
          "64:         }",
          "65:         cipher.init(Cipher.DECRYPT_MODE, key);",
          "66:         Secret sec = Secret.tryDecrypt(cipher, in);",
          "67:         if(sec!=null) // matched",
          "68:             return sec.getEncryptedValue(); // replace by the new encrypted value",
          "69:         else // not encrypted with the legacy key. leave it unmodified",
          "70:             return s;",
          "71:     }",
          "78:     public boolean rewrite(File f, File backup) throws InvalidKeyException, IOException {",
          "79:         FileInputStream fin = new FileInputStream(f);",
          "80:         try {",
          "81:             BufferedReader r = new BufferedReader(new InputStreamReader(fin, \"UTF-8\"));",
          "82:             AtomicFileWriter w = new AtomicFileWriter(f, \"UTF-8\");",
          "83:             try {",
          "84:                 PrintWriter out = new PrintWriter(new BufferedWriter(w));",
          "86:                 boolean modified = false; // did we actually change anything?",
          "87:                 try {",
          "88:                     String line;",
          "89:                     StringBuilder buf = new StringBuilder();",
          "91:                     while ((line=r.readLine())!=null) {",
          "92:                         int copied=0;",
          "93:                         buf.setLength(0);",
          "94:                         while (true) {",
          "95:                             int sidx = line.indexOf('>',copied);",
          "96:                             if (sidx<0) break;",
          "97:                             int eidx = line.indexOf('<',sidx);",
          "98:                             if (eidx<0) break;",
          "100:                             String elementText = line.substring(sidx+1,eidx);",
          "101:                             String replacement = tryRewrite(elementText);",
          "102:                             if (!replacement.equals(elementText))",
          "103:                                 modified = true;",
          "105:                             buf.append(line.substring(copied,sidx+1));",
          "106:                             buf.append(replacement);",
          "107:                             copied = eidx;",
          "108:                         }",
          "109:                         buf.append(line.substring(copied));",
          "110:                         out.println(buf.toString());",
          "111:                     }",
          "112:                 } finally {",
          "113:                     out.close();",
          "114:                 }",
          "116:                 if (modified) {",
          "117:                     if (backup!=null) {",
          "118:                         backup.getParentFile().mkdirs();",
          "119:                         FileUtils.copyFile(f,backup);",
          "120:                     }",
          "121:                     w.commit();",
          "122:                 }",
          "123:                 return modified;",
          "124:             } finally {",
          "125:                 w.abort();",
          "126:             }",
          "127:         } finally {",
          "128:             fin.close();",
          "129:         }",
          "130:     }",
          "142:     public synchronized int rewriteRecursive(File dir, TaskListener listener) throws InvalidKeyException {",
          "143:         return rewriteRecursive(dir,\"\",listener);",
          "144:     }",
          "145:     private int rewriteRecursive(File dir, String relative, TaskListener listener) throws InvalidKeyException {",
          "146:         String canonical;",
          "147:         try {",
          "148:             canonical = dir.getCanonicalPath();",
          "149:         } catch (IOException e) {",
          "150:             canonical = dir.getAbsolutePath(); //",
          "151:         }",
          "152:         if (!callstack.add(canonical)) {",
          "153:             listener.getLogger().println(\"Cycle detected: \"+dir);",
          "154:             return 0;",
          "155:         }",
          "157:         try {",
          "158:             File[] children = dir.listFiles();",
          "159:             if (children==null)     return 0;",
          "161:             int rewritten=0;",
          "162:             for (File child : children) {",
          "163:                 String cn = child.getName();",
          "164:                 if (cn.endsWith(\".xml\")) {",
          "165:                     if ((count++)%100==0)",
          "166:                         listener.getLogger().println(\"Scanning \"+child);",
          "167:                     try {",
          "168:                         File backup = null;",
          "169:                         if (backupDirectory!=null)  backup = new File(backupDirectory,relative+'/'+ cn);",
          "170:                         if (rewrite(child,backup)) {",
          "171:                             if (backup!=null)",
          "172:                                 listener.getLogger().println(\"Copied \"+child+\" to \"+backup+\" as a backup\");",
          "173:                             listener.getLogger().println(\"Rewritten \"+child);",
          "174:                             rewritten++;",
          "175:                         }",
          "176:                     } catch (IOException e) {",
          "177:                         e.printStackTrace(listener.error(\"Failed to rewrite \"+child));",
          "178:                     }",
          "179:                 }",
          "180:                 if (child.isDirectory()) {",
          "181:                     if (!isIgnoredDir(child))",
          "182:                         rewritten += rewriteRecursive(child,",
          "183:                                 relative.length()==0 ? cn : relative+'/'+ cn,",
          "184:                                 listener);",
          "185:                 }",
          "186:             }",
          "187:             return rewritten;",
          "188:         } finally {",
          "189:             callstack.remove(canonical);",
          "190:         }",
          "191:     }",
          "196:     protected boolean isIgnoredDir(File dir) {",
          "199:         String n = dir.getName();",
          "200:         return n.equals(\"workspace\") || n.equals(\"artifacts\")",
          "201:             || n.equals(\"plugins\") // no mutable data here",
          "202:             || n.equals(\"jenkins.security.RekeySecretAdminMonitor\") // we don't want to rewrite backups",
          "203:             || n.equals(\".\") || n.equals(\"..\");",
          "204:     }",
          "206:     private static boolean isBase64(char ch) {",
          "207:         return 0<=ch && ch<128 && IS_BASE64[ch];",
          "208:     }",
          "210:     private static boolean isBase64(String s) {",
          "211:         for (int i=0; i<s.length(); i++)",
          "212:             if (!isBase64(s.charAt(i)))",
          "213:                 return false;",
          "214:         return true;",
          "215:     }",
          "217:     private static final boolean[] IS_BASE64 = new boolean[128];",
          "218:     static {",
          "219:         String chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";",
          "220:         for (int i=0; i<chars.length();i++)",
          "221:             IS_BASE64[chars.charAt(i)] = true;",
          "222:     }",
          "223: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java": [
          "File: core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java -> core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package jenkins.security;",
          "3: import hudson.Extension;",
          "4: import hudson.console.AnnotatedLargeText;",
          "5: import hudson.init.InitMilestone;",
          "6: import hudson.init.Initializer;",
          "7: import hudson.model.AdministrativeMonitor;",
          "8: import hudson.util.HttpResponses;",
          "9: import hudson.util.SecretRewriter;",
          "10: import hudson.util.StreamTaskListener;",
          "11: import hudson.util.VersionNumber;",
          "12: import jenkins.model.Jenkins;",
          "13: import jenkins.util.io.FileBoolean;",
          "14: import org.kohsuke.stapler.HttpResponse;",
          "15: import org.kohsuke.stapler.StaplerProxy;",
          "16: import org.kohsuke.stapler.StaplerRequest;",
          "17: import org.kohsuke.stapler.interceptor.RequirePOST;",
          "19: import java.io.File;",
          "20: import java.io.IOException;",
          "21: import java.io.PrintStream;",
          "22: import java.nio.charset.Charset;",
          "23: import java.security.GeneralSecurityException;",
          "24: import java.util.Date;",
          "25: import java.util.logging.Level;",
          "26: import java.util.logging.Logger;",
          "33: @Extension",
          "34: public class RekeySecretAdminMonitor extends AdministrativeMonitor implements StaplerProxy {",
          "44:     private final FileBoolean needed = state(\"needed\");",
          "49:     private final FileBoolean done = state(\"done\");",
          "54:     private final FileBoolean scanOnBoot = state(\"scanOnBoot\");",
          "59:     private volatile RekeyThread rekeyThread;",
          "62:     public RekeySecretAdminMonitor() throws IOException {",
          "67:         if (Jenkins.getInstance().isUpgradedFromBefore(new VersionNumber(\"1.496.*\")))",
          "68:             needed.on();",
          "69:     }",
          "74:     public Object getTarget() {",
          "75:         Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);",
          "76:         return this;",
          "77:     }",
          "79:     @Override",
          "80:     public boolean isActivated() {",
          "81:         return needed.isOn();",
          "82:     }",
          "87:     public boolean isDone() {",
          "88:         return done.isOn();",
          "89:     }",
          "91:     public void setNeeded() {",
          "92:         needed.on();",
          "93:     }",
          "95:     public boolean isScanOnBoot() {",
          "96:         return scanOnBoot.isOn();",
          "97:     }",
          "99:     @RequirePOST",
          "100:     public HttpResponse doScan(StaplerRequest req) throws IOException, GeneralSecurityException {",
          "101:         if(req.hasParameter(\"background\")) {",
          "102:             synchronized (this) {",
          "103:                 if (!isRewriterActive()) {",
          "104:                     rekeyThread = new RekeyThread();",
          "105:                     rekeyThread.start();",
          "106:                 }",
          "107:             }",
          "108:         } else",
          "109:         if(req.hasParameter(\"schedule\")) {",
          "110:             scanOnBoot.on();",
          "111:         } else",
          "112:         if(req.hasParameter(\"dismiss\")) {",
          "113:             disable(true);",
          "114:         } else",
          "115:             throw HttpResponses.error(400,\"Invalid request submission\");",
          "117:         return HttpResponses.redirectViaContextPath(\"/manage\");",
          "118:     }",
          "123:     public boolean isRewriterActive() {",
          "124:         return rekeyThread !=null && rekeyThread.isAlive();",
          "125:     }",
          "130:     public AnnotatedLargeText getLogText() {",
          "131:         return new AnnotatedLargeText<RekeySecretAdminMonitor>(getLogFile(), Charset.defaultCharset(),",
          "132:                 !isRewriterActive(),this);",
          "133:     }",
          "135:     private static FileBoolean state(String name) {",
          "136:         return new FileBoolean(new File(getBaseDir(),name));",
          "137:     }",
          "139:     @Initializer(fatal=false,after=InitMilestone.PLUGINS_STARTED,before=InitMilestone.EXTENSIONS_AUGMENTED)",
          "141:     public static void scanOnReboot() throws InterruptedException, IOException, GeneralSecurityException {",
          "142:         FileBoolean flag = new RekeySecretAdminMonitor().scanOnBoot;",
          "143:         if (flag.isOn()) {",
          "144:             flag.off();",
          "145:             RekeyThread t = new RekeyThread();",
          "146:             t.start();",
          "147:             t.join();",
          "150:         }",
          "151:     }",
          "156:     public static File getLogFile() {",
          "157:         return new File(getBaseDir(),\"rekey.log\");",
          "158:     }",
          "160:     private static File getBaseDir() {",
          "161:         return new File(Jenkins.getInstance().getRootDir(),RekeySecretAdminMonitor.class.getName());",
          "162:     }",
          "164:     private static class RekeyThread extends Thread {",
          "165:         private final SecretRewriter rewriter;",
          "167:         RekeyThread() throws GeneralSecurityException {",
          "168:             super(\"Rekey secret thread\");",
          "169:             rewriter = new SecretRewriter(new File(getBaseDir(),\"backups\"));",
          "170:         }",
          "172:         @Override",
          "173:         public void run() {",
          "174:             try {",
          "175:                 LOGGER.info(\"Initiating a re-keying of secrets. See \"+getLogFile());",
          "176:                 StreamTaskListener listener = new StreamTaskListener(getLogFile());",
          "177:                 try {",
          "178:                     PrintStream log = listener.getLogger();",
          "179:                     log.println(\"Started re-keying \" + new Date());",
          "180:                     int count = rewriter.rewriteRecursive(Jenkins.getInstance().getRootDir(), listener);",
          "181:                     log.printf(\"Completed re-keying %d files on %s\\n\",count,new Date());",
          "182:                     new RekeySecretAdminMonitor().done.on();",
          "183:                     LOGGER.info(\"Secret re-keying completed\");",
          "184:                 } catch (Exception e) {",
          "185:                     LOGGER.log(Level.SEVERE, \"Fatal failure in re-keying secrets\",e);",
          "186:                     e.printStackTrace(listener.error(\"Fatal failure in rewriting secrets\"));",
          "187:                 }",
          "188:             } catch (IOException e) {",
          "189:                 LOGGER.log(Level.SEVERE, \"Catastrophic failure to rewrite secrets\",e);",
          "190:             }",
          "191:         }",
          "192:     }",
          "194:     private static final Logger LOGGER = Logger.getLogger(RekeySecretAdminMonitor.class.getName());",
          "196: }",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy": [
          "File: core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy -> core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: The MIT License",
          "4: Copyright (c) 2013, CloudBees, Inc.",
          "6: Permission is hereby granted, free of charge, to any person obtaining a copy",
          "7: of this software and associated documentation files (the \"Software\"), to deal",
          "8: in the Software without restriction, including without limitation the rights",
          "9: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
          "10: copies of the Software, and to permit persons to whom the Software is",
          "11: furnished to do so, subject to the following conditions:",
          "13: The above copyright notice and this permission notice shall be included in",
          "14: all copies or substantial portions of the Software.",
          "16: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
          "17: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
          "18: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
          "19: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
          "20: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
          "21: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
          "22: THE SOFTWARE.",
          "24: package jenkins.security.RekeySecretAdminMonitor;",
          "26: def l = namespace(lib.LayoutTagLib)",
          "27: def t = namespace(lib.JenkinsTagLib)",
          "29: l.layout {",
          "30:     l.main_panel() {",
          "31:         h1 _(\"Re-keying log\")",
          "33:         if (my.isRewriterActive()) {",
          "34:             pre(id: \"out\")",
          "35:             div(id: \"spinner\") {",
          "36:                 img(src: \"${imagesURL}/spinner.gif\", alt: \"\")",
          "37:             }",
          "38:             t.progressiveText(spinner: \"spinner\", href: \"logText/progressiveHtml\", idref: \"out\")",
          "39:         } else {",
          "40:             pre {",
          "41:                 my.logText.writeHtmlTo(0, output.asWriter())",
          "42:             }",
          "43:         }",
          "44:     }",
          "45: }",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy": [
          "File: core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy -> core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: The MIT License",
          "4: Copyright (c) 2013, CloudBees, Inc.",
          "6: Permission is hereby granted, free of charge, to any person obtaining a copy",
          "7: of this software and associated documentation files (the \"Software\"), to deal",
          "8: in the Software without restriction, including without limitation the rights",
          "9: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
          "10: copies of the Software, and to permit persons to whom the Software is",
          "11: furnished to do so, subject to the following conditions:",
          "13: The above copyright notice and this permission notice shall be included in",
          "14: all copies or substantial portions of the Software.",
          "16: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
          "17: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
          "18: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
          "19: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
          "20: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
          "21: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
          "22: THE SOFTWARE.",
          "24: package jenkins.security.RekeySecretAdminMonitor;",
          "26: def f = namespace(lib.FormTagLib)",
          "28: if (!my.isDone()) {",
          "29:     div(class:\"error\") {",
          "30:         raw _(\"pleaseRekeyAsap\",app.rootDir,my.url)",
          "31:     }",
          "32: }",
          "34: if (my.isRewriterActive()) {",
          "35:     div(class:\"info\") {",
          "36:         raw _(\"rekeyInProgress\",my.url)",
          "37:     }",
          "38: } else if (my.logFile.exists()) {",
          "39:     if (my.isDone()) {",
          "40:         div(class:\"info\") {",
          "41:             raw _(\"rekeySuccessful\",my.url)",
          "42:         }",
          "43:     } else {",
          "44:         div(class:\"warning\") {",
          "45:             raw _(\"rekeyHadProblems\",my.url)",
          "46:         }",
          "47:     }",
          "48: }",
          "50: form(method:\"POST\",action:\"${my.url}/scan\",style:\"text-align:center; margin-top:0.5em;\",name:\"rekey\") {",
          "51:     f.submit(name:\"background\",value:_(\"Re-key in background now\"))",
          "52:     if (my.isScanOnBoot()) {",
          "53:         input(type:\"button\",class:\"yui-button\",disabled:\"true\",",
          "54:                 value:_(\"Re-keying currently scheduled during the next startup\"))",
          "55:     } else {",
          "56:         f.submit(name:\"schedule\",  value:_(\"Schedule a re-key during the next startup\"))",
          "57:     }",
          "58:     f.submit(name:\"dismiss\",   value:_(\"Dismiss this message\"))",
          "59: }",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties": [
          "File: core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties -> core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: pleaseRekeyAsap=\\",
          "2:     Because of <a href=\"https://wiki.jenkins-ci.org/display/SECURITY/Jenkins+Security+Advisory+2013-01-04\">a security vulnerability</a> discovered earlier, we need to \\",
          "3:     change the encryption key used to protect secrets in your configuration files on the disk. \\",
          "4:     This process scans a large portion of your <tt>$JENKINS_HOME</tt> ({0}), \\",
          "5:     find encrypted data, re-key them, which will take some time. \\",
          "6:     See <a href=\"http://jenkins-ci.org/rekey\">this document</a> for more implications about different ways of doing this \\",
          "7:     (or not doing this.) This operation can be safely run in background, but cautious users \\",
          "8:     are recommended to take backups.",
          "10: rekeyInProgress=Re-keying is in progress. <a href=\"{0}/log\">You can check the log</a>.",
          "12: rekeySuccessful=\\",
          "13:   Secrets in your <tt>$JENKINS_HOME</tt> has been re-keyed successfully. \\",
          "14:   <a href=\"{0}/log\">Please check the log</a>, confirm the success, and then dismiss or re-run.",
          "16: rekeyHadProblems=\\",
          "17:   Re-keying has completed, but there were problems. <a href=\"{0}\">Please check the log</a>.",
          "",
          "---------------"
        ],
        "core/src/test/java/hudson/util/MockSecretRule.java||core/src/test/java/hudson/util/MockSecretRule.java": [
          "File: core/src/test/java/hudson/util/MockSecretRule.java -> core/src/test/java/hudson/util/MockSecretRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.util;",
          "3: import hudson.Util;",
          "4: import org.junit.rules.ExternalResource;",
          "6: import java.security.SecureRandom;",
          "13: public class MockSecretRule extends ExternalResource {",
          "15:     private String value;",
          "17:     @Override",
          "18:     protected void before() throws Throwable {",
          "19:         byte[] random = new byte[32];",
          "20:         sr.nextBytes(random);",
          "21:         value = Util.toHexString(random);",
          "22:         Secret.SECRET = value;",
          "23:     }",
          "25:     @Override",
          "26:     protected void after() {",
          "27:         if (!Secret.SECRET.equals(value))",
          "28:             throw new IllegalStateException(\"Someone tinkered with Secret.SECRET\");",
          "29:         Secret.SECRET = null;",
          "30:     }",
          "32:     private static final SecureRandom sr = new SecureRandom();",
          "33: }",
          "",
          "---------------"
        ],
        "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy": [
          "File: core/src/test/java/hudson/util/SecretRewriterTest.groovy -> core/src/test/java/hudson/util/SecretRewriterTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.util",
          "3: import com.trilead.ssh2.crypto.Base64",
          "4: import hudson.FilePath",
          "5: import jenkins.security.ConfidentialStoreRule",
          "6: import org.junit.Rule",
          "7: import org.junit.Test",
          "9: import javax.crypto.Cipher",
          "11: import static hudson.Util.createTempDir",
          "18: class SecretRewriterTest {",
          "19:     @Rule",
          "20:     public MockSecretRule mockSecretRule = new MockSecretRule()",
          "22:     @Rule",
          "23:     public ConfidentialStoreRule confidentialStoreRule = new ConfidentialStoreRule();",
          "25:     @Test",
          "26:     void singleFileRewrite() {",
          "27:         def o = encryptOld('foobar') // old",
          "28:         def n = encryptNew('foobar') // new",
          "29:         roundtrip \"<foo>${o}</foo>\",",
          "30:                   \"<foo>${n}</foo>\"",
          "32:         roundtrip \"<foo>${o}</foo><foo>${o}</foo>\",",
          "33:                   \"<foo>${n}</foo><foo>${n}</foo>\"",
          "35:         roundtrip \"<foo>${n}</foo>\",",
          "36:                   \"<foo>${n}</foo>\"",
          "38:         roundtrip \"  <foo>thisIsLegalBase64AndLongEnoughThatItCouldLookLikeSecret</foo>  \",",
          "39:                   \"  <foo>thisIsLegalBase64AndLongEnoughThatItCouldLookLikeSecret</foo>  \"",
          "42:         roundtrip \"<foo>$o\", \"<foo>$o\"",
          "43:         roundtrip \"$o</foo>\", \"$o</foo>\"",
          "46:         roundtrip \"<abc>\\n<foo>$o</foo>\\n</abc>\", \"<abc>\\n<foo>$n</foo>\\n</abc>\"",
          "47:     }",
          "49:     void roundtrip(String before, String after) {",
          "50:         def sr = new SecretRewriter(null);",
          "51:         def f = File.createTempFile(\"test\",\"xml\");",
          "52:         try {",
          "53:             f.text = before",
          "54:             sr.rewrite(f,null)",
          "55:             assert after.trim()==f.text.trim()",
          "56:         } finally {",
          "57:             f.delete()",
          "58:         }",
          "59:     }",
          "61:     String encryptOld(str) {",
          "62:         def cipher = Secret.getCipher(\"AES\");",
          "63:         cipher.init(Cipher.ENCRYPT_MODE, Secret.legacyKey);",
          "64:         return new String(Base64.encode(cipher.doFinal((str + Secret.MAGIC).getBytes(\"UTF-8\"))))",
          "65:     }",
          "67:     String encryptNew(str) {",
          "68:         return Secret.fromString(str).encryptedValue",
          "69:     }",
          "74:     @Test",
          "75:     void recursionDetection() {",
          "76:         def backup = createTempDir()",
          "77:         def sw = new SecretRewriter(backup);",
          "78:         def st = StreamTaskListener.fromStdout()",
          "80:         def o = encryptOld(\"Hello world\")",
          "81:         def n = encryptNew(\"Hello world\")",
          "82:         def payload = \"<msg>$o</msg>\"",
          "83:         def answer = \"<msg>$n</msg>\"",
          "86:         def t = createTempDir()",
          "87:         def dirs = [\"a\", \"b\", \"c\", \"c/d\", \"c/d/e\"]",
          "88:         dirs.each { p ->",
          "89:             def d = new File(t, p)",
          "90:             d.mkdir()",
          "91:             new File(d,\"foo.xml\").text = payload",
          "92:         }",
          "95:         def t2 = createTempDir()",
          "96:         new File(t2,\"foo.xml\").text = payload",
          "99:         new FilePath(t).child(\"c/symlink\").symlinkTo(\"..\",st)",
          "100:         new FilePath(t).child(\"b/symlink\").symlinkTo(\".\",st)",
          "101:         new FilePath(t).child(\"a/symlink\").symlinkTo(t2.absolutePath,st)",
          "103:         assert 6==sw.rewriteRecursive(t, st)",
          "105:         dirs.each { p->",
          "106:             assert new File(t,\"$p/foo.xml\").text.trim()==answer",
          "107:             assert new File(backup,\"$p/foo.xml\").text.trim()==payload",
          "108:         }",
          "111:         assert new File(t2,\"foo.xml\").text.trim()==answer.trim();",
          "112:     }",
          "114: }",
          "",
          "---------------"
        ],
        "core/src/test/java/hudson/util/SecretTest.groovy||core/src/test/java/hudson/util/SecretTest.groovy": [
          "File: core/src/test/java/hudson/util/SecretTest.groovy -> core/src/test/java/hudson/util/SecretTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import com.trilead.ssh2.crypto.Base64;",
          "27: import jenkins.model.Jenkins",
          "28: import jenkins.security.ConfidentialStoreRule;",
          "31: import org.junit.Rule",
          "32: import org.junit.Test",
          "34: import javax.crypto.Cipher;",
          "",
          "[Removed Lines]",
          "29: import org.junit.After",
          "30: import org.junit.Before",
          "35: import java.security.SecureRandom;",
          "37: import hudson.Util;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     @Rule",
          "44:     public ConfidentialStoreRule confidentialStore = new ConfidentialStoreRule()",
          "59:     @Test",
          "60:     void testEncrypt() {",
          "",
          "[Removed Lines]",
          "46:     @Test @Before",
          "47:     void setUp() {",
          "48:         def sr = new SecureRandom();",
          "49:         byte[] random = new byte[32];",
          "50:         sr.nextBytes(random);",
          "51:         Secret.SECRET = Util.toHexString(random);",
          "52:     }",
          "54:     @Test @After",
          "55:     void tearDown() {",
          "56:         Secret.SECRET = null;",
          "57:     }",
          "",
          "[Added Lines]",
          "41:     @Rule",
          "42:     public MockSecretRule mockSecretRule = new MockSecretRule()",
          "",
          "---------------"
        ],
        "test/src/main/java/hudson/util/SecretHelper.java||test/src/main/java/hudson/util/SecretHelper.java": [
          "File: test/src/main/java/hudson/util/SecretHelper.java -> test/src/main/java/hudson/util/SecretHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.util;",
          "6: public class SecretHelper {",
          "7:     public static void set(String s) {",
          "8:         Secret.SECRET = s;",
          "9:     }",
          "10: }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java": [
          "File: test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java -> test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package jenkins.security;",
          "3: import com.gargoylesoftware.htmlunit.ElementNotFoundException;",
          "4: import com.gargoylesoftware.htmlunit.html.HtmlButton;",
          "5: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
          "6: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "7: import com.trilead.ssh2.crypto.Base64;",
          "8: import hudson.FilePath;",
          "9: import hudson.Util;",
          "10: import hudson.util.Secret;",
          "11: import hudson.util.SecretHelper;",
          "12: import org.apache.commons.io.FileUtils;",
          "13: import org.jvnet.hudson.test.HudsonTestCase;",
          "14: import org.jvnet.hudson.test.recipes.Recipe.Runner;",
          "15: import org.xml.sax.SAXException;",
          "17: import javax.crypto.Cipher;",
          "18: import javax.inject.Inject;",
          "19: import java.io.File;",
          "20: import java.io.IOException;",
          "21: import java.lang.annotation.Annotation;",
          "26: public class RekeySecretAdminMonitorTest extends HudsonTestCase {",
          "27:     @Inject",
          "28:     RekeySecretAdminMonitor monitor;",
          "30:     @Override",
          "31:     protected void setUp() throws Exception {",
          "32:         SecretHelper.set(TEST_KEY);",
          "33:         super.setUp();",
          "34:         monitor.setNeeded();",
          "35:     }",
          "37:     @Override",
          "38:     protected void tearDown() throws Exception {",
          "39:         SecretHelper.set(null);",
          "40:         super.tearDown();",
          "41:     }",
          "43:     @Override",
          "44:     protected void recipe() throws Exception {",
          "45:         super.recipe();",
          "46:         recipes.add(new Runner() {",
          "47:             @Override",
          "48:             public void setup(HudsonTestCase testCase, Annotation recipe) throws Exception {",
          "49:             }",
          "51:             @Override",
          "52:             public void decorateHome(HudsonTestCase testCase, File home) throws Exception {",
          "53:                 if (getName().endsWith(\"testScanOnBoot\")) {",
          "55:                     File f = new File(home, RekeySecretAdminMonitor.class.getName() + \"/scanOnBoot\");",
          "56:                     f.getParentFile().mkdirs();",
          "57:                     new FilePath(f).touch(0);",
          "60:                     putSomeOldData(home);",
          "61:                 }",
          "62:             }",
          "64:             @Override",
          "65:             public void tearDown(HudsonTestCase testCase, Annotation recipe) throws Exception {",
          "66:             }",
          "67:         });",
          "68:     }",
          "71:     private void putSomeOldData(File dir) throws Exception {",
          "72:         File xml = new File(dir, \"foo.xml\");",
          "73:         FileUtils.writeStringToFile(xml,\"<foo>\" + encryptOld(TEST_KEY) + \"</foo>\");",
          "74:     }",
          "76:     private void verifyRewrite(File dir) throws Exception {",
          "77:         File xml = new File(dir, \"foo.xml\");",
          "78:         assertEquals(\"<foo>\" + encryptNew(TEST_KEY) + \"</foo>\".trim(),",
          "79:                 FileUtils.readFileToString(xml).trim());",
          "80:     }",
          "82:     public void testBasicWorkflow() throws Exception {",
          "83:         putSomeOldData(jenkins.getRootDir());",
          "85:         WebClient wc = createWebClient();",
          "88:         assertTrue(!monitor.isScanOnBoot());",
          "89:         HtmlForm form = getRekeyForm(wc);",
          "90:         submit(form, \"schedule\");",
          "91:         assertTrue(monitor.isScanOnBoot());",
          "92:         form = getRekeyForm(wc);",
          "93:         assertTrue(getButton(form, 1).isDisabled());",
          "96:         assertTrue(!monitor.getLogFile().exists());",
          "97:         submit(form, \"background\");",
          "98:         assertTrue(monitor.getLogFile().exists());",
          "101:         HtmlPage manage = wc.goTo(\"/manage\");",
          "102:         assertEquals(0,manage.selectNodes(\"//*[class='error']\").size());",
          "103:         assertEquals(0,manage.selectNodes(\"//*[class='warning']\").size());",
          "106:         verifyRewrite(jenkins.getRootDir());",
          "107:         assertTrue(monitor.isDone());",
          "110:         assertTrue(monitor.isEnabled());",
          "111:         form = getRekeyForm(wc);",
          "112:         submit(form, \"dismiss\");",
          "113:         assertFalse(monitor.isEnabled());",
          "114:         try {",
          "115:             getRekeyForm(wc);",
          "116:             fail();",
          "117:         } catch (ElementNotFoundException e) {",
          "119:         }",
          "120:     }",
          "122:     private HtmlForm getRekeyForm(WebClient wc) throws IOException, SAXException {",
          "123:         return wc.goTo(\"/manage\").getFormByName(\"rekey\");",
          "124:     }",
          "126:     private HtmlButton getButton(HtmlForm form, int index) {",
          "127:         return form.<HtmlButton>getHtmlElementsByTagName(\"button\").get(index);",
          "128:     }",
          "130:     public void testScanOnBoot() throws Exception {",
          "131:         WebClient wc = createWebClient();",
          "134:         assertTrue(monitor.getLogFile().exists());",
          "135:         assertTrue(\"scan on boot should have turned this off\",!monitor.isScanOnBoot());",
          "138:         verifyRewrite(jenkins.getRootDir());",
          "141:         HtmlPage manage = wc.goTo(\"/manage\");",
          "142:         assertEquals(0,manage.selectNodes(\"//*[class='error']\").size());",
          "143:         assertEquals(0,manage.selectNodes(\"//*[class='warning']\").size());",
          "144:     }",
          "146:     private String encryptOld(String str) throws Exception {",
          "147:         Cipher cipher = Secret.getCipher(\"AES\");",
          "148:         cipher.init(Cipher.ENCRYPT_MODE, Util.toAes128Key(TEST_KEY));",
          "149:         return new String(Base64.encode(cipher.doFinal((str + \"::::MAGIC::::\").getBytes(\"UTF-8\"))));",
          "150:     }",
          "152:     private String encryptNew(String str) {",
          "153:         return Secret.fromString(str).getEncryptedValue();",
          "154:     }",
          "156:     private static final String TEST_KEY = \"superDuperSecretWasNotSoSecretAfterAll\";",
          "157: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7338713975c1791e09be9b9670470cf1052577f0",
      "candidate_info": {
        "commit_hash": "7338713975c1791e09be9b9670470cf1052577f0",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/7338713975c1791e09be9b9670470cf1052577f0",
        "files": [
          "core/src/main/java/hudson/slaves/SlaveComputer.java",
          "core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly",
          "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
          "pom.xml",
          "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
        ],
        "message": "[SECURITY-54]\n\nJesse's original patch\n(cherry picked from commit 01a24e2cb1e885895c35fdf409c4305dcd877cd8)",
        "before_after_code_files": [
          "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly||core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly",
          "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
          "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
            "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
            "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
            "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
            "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java": [
          "File: core/src/main/java/hudson/slaves/SlaveComputer.java -> core/src/main/java/hudson/slaves/SlaveComputer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import hudson.remoting.Launcher;",
          "41: import static hudson.slaves.SlaveComputer.LogHolder.SLAVE_LOG_HANDLER;",
          "42: import hudson.slaves.OfflineCause.ChannelTermination;",
          "44: import java.io.File;",
          "45: import java.io.OutputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import hudson.util.Secret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: import java.security.Security;",
          "60: import hudson.util.io.ReopenableFileOutputStream;",
          "61: import jenkins.model.Jenkins;",
          "62: import jenkins.slaves.JnlpSlaveAgentProtocol;",
          "63: import org.kohsuke.stapler.StaplerRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: import java.io.ByteArrayOutputStream;",
          "63: import java.io.PrintWriter;",
          "64: import java.security.GeneralSecurityException;",
          "65: import javax.crypto.Cipher;",
          "66: import javax.crypto.SecretKey;",
          "67: import javax.crypto.spec.SecretKeySpec;",
          "68: import javax.servlet.RequestDispatcher;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67: import org.kohsuke.stapler.HttpRedirect;",
          "69: import javax.servlet.ServletException;",
          "",
          "[Removed Lines]",
          "70: import javax.servlet.http.HttpServletResponse;",
          "",
          "[Added Lines]",
          "78: import javax.servlet.ServletOutputStream;",
          "79: import javax.servlet.http.HttpServletResponseWrapper;",
          "80: import org.kohsuke.stapler.ResponseImpl;",
          "81: import org.kohsuke.stapler.WebMethod;",
          "82: import org.kohsuke.stapler.compression.FilterServletOutputStream;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "535:         return new Slave.JnlpJar(fileName);",
          "536:     }",
          "538:     @Override",
          "539:     protected void kill() {",
          "540:         super.kill();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:     @WebMethod(name=\"slave-agent.jnlp\")",
          "554:     public void doSlaveAgentJnlp(StaplerRequest req, StaplerResponse res) throws IOException, ServletException {",
          "555:         RequestDispatcher view = req.getView(this, \"slave-agent.jnlp.jelly\");",
          "556:         if (\"true\".equals(req.getParameter(\"encrypt\"))) {",
          "557:             req.setAttribute(\"jnlpMac\", \"SLAVE_SECRET\");",
          "558:             final ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "559:             StaplerResponse temp = new ResponseImpl(req.getStapler(), new HttpServletResponseWrapper(res) {",
          "560:                 @Override public ServletOutputStream getOutputStream() throws IOException {",
          "561:                     return new FilterServletOutputStream(baos);",
          "562:                 }",
          "563:                 @Override public PrintWriter getWriter() throws IOException {",
          "564:                     throw new IllegalStateException();",
          "565:                 }",
          "566:             });",
          "567:             view.forward(req, temp);",
          "568:             byte[] jnlpMac = JnlpSlaveAgentProtocol.SLAVE_SECRET.mac(getName().getBytes(\"UTF-8\"));",
          "569:             SecretKey key = new SecretKeySpec(jnlpMac, 0, /* export restrictions */ 128 / 8, \"AES\");",
          "570:             byte[] encrypted;",
          "571:             try {",
          "572:                 Cipher c = Secret.getCipher(\"AES\");",
          "573:                 c.init(Cipher.ENCRYPT_MODE, key);",
          "574:                 encrypted = c.doFinal(baos.toByteArray());",
          "575:             } catch (GeneralSecurityException x) {",
          "576:                 throw new IOException(x);",
          "577:             }",
          "578:             res.setContentType(\"application/octet-stream\");",
          "579:             res.getOutputStream().write(encrypted);",
          "580:         } else {",
          "581:             checkPermission(CONNECT);",
          "582:             req.setAttribute(\"jnlpMac\", getJnlpMac());",
          "583:             view.forward(req, res);",
          "584:         }",
          "585:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3567:             || rest.startsWith(\"/adjuncts/\")",
          "3568:             || rest.startsWith(\"/signup\")",
          "3569:             || rest.startsWith(\"/tcpSlaveAgentListener\")",
          "3570:             || rest.startsWith(\"/cli\")",
          "3571:             || rest.startsWith(\"/federatedLoginService/\")",
          "3572:             || rest.startsWith(\"/securityRealm\"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3571:             || rest.matches(\"/computer/.+/slave-agent[.]jnlp\") && \"true\".equals(Stapler.getCurrentRequest().getParameter(\"encrypt\"))",
          "",
          "---------------"
        ],
        "core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly||core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly": [
          "File: core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly -> core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:                 <p>",
          "66:                   ${%Run from slave command line:}",
          "67:                 </p>",
          "69:               </li>",
          "70:             </j:otherwise>",
          "71:           </j:choose>",
          "",
          "[Removed Lines]",
          "68:                 <pre>java -jar <a href=\"${rootURL}/jnlpJars/slave.jar\">slave.jar</a> -jnlpUrl ${h.inferHudsonURL(request)}${it.url}slave-agent.jnlp -jnlpCredentials ${app.authentication.name}:<a href=\"${rootURL}/user/${app.authentication.name}/configure\" target=\"_blank\">your-API-token</a></pre>",
          "",
          "[Added Lines]",
          "68:                 <!-- XXX conceal secret w/ JS if possible -->",
          "69:                 <pre>java -jar <a href=\"${rootURL}/jnlpJars/slave.jar\">slave.jar</a> -jnlpUrl ${h.inferHudsonURL(request)}${it.url}slave-agent.jnlp -secret ${it.jnlpMac}</pre>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:       </p>",
          "86:     </j:otherwise>",
          "87:   </j:choose>",
          "",
          "[Removed Lines]",
          "88: </j:jelly>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly": [
          "File: core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly -> core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   <!--",
          "32:     See http://www.dallaway.com/acad/webstart/ for obtaining the certificate.",
          "33:   -->",
          "37:     <!-- See http://java.sun.com/j2se/1.5.0/docs/guide/javaws/developersguide/syntax.html for the syntax -->",
          "38:     <jnlp spec=\"1.0+\"",
          "",
          "[Removed Lines]",
          "34:   <j:getStatic var=\"connect\" className=\"hudson.model.Computer\" field=\"CONNECT\"/>",
          "35:   ${it.checkPermission(connect)}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:       </resources>",
          "65:       <application-desc main-class=\"hudson.remoting.jnlp.Main\">",
          "67:         <argument>${it.node.nodeName}</argument>",
          "68:         <j:if test=\"${it.launcher.tunnel!=null}\">",
          "69:           <argument>-tunnel</argument>",
          "",
          "[Removed Lines]",
          "66:         <argument>${it.jnlpMac}</argument>",
          "",
          "[Added Lines]",
          "64:         <argument>${jnlpMac}</argument>",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java": [
          "File: test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java -> test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
        ]
      }
    },
    {
      "candidate_hash": "b78afe5d7fc760d1190cff7cc4c368721687b9d5",
      "candidate_info": {
        "commit_hash": "b78afe5d7fc760d1190cff7cc4c368721687b9d5",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/b78afe5d7fc760d1190cff7cc4c368721687b9d5",
        "files": [
          "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
        ],
        "message": "[SECURITY-49] a9aff08 weakened the existing test; restoring it and introducing a separate test.",
        "before_after_code_files": [
          "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java": [
          "File: test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java -> test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         return new DumbSlave(name,\"\",System.getProperty(\"java.io.tmpdir\")+'/'+name,\"2\", Mode.NORMAL, \"\", new JNLPLauncher(), RetentionStrategy.INSTANCE, Collections.EMPTY_LIST);",
          "61:     }",
          "66:         jenkins.setNodes(Collections.singletonList(createNewJnlpSlave(\"test\")));",
          "67:         HudsonTestCase.WebClient wc = new WebClient();",
          "68:         HtmlPage p = wc.login(\"alice\").goTo(\"computer/test/\");",
          "",
          "[Removed Lines]",
          "63:     @PresetData(DataSet.ANONYMOUS_READONLY)",
          "64:     @Email(\"http://www.nabble.com/Launching-slave-by-JNLP-with-Active-Directory-plugin-and-matrix-security-problem-td18980323.html\")",
          "65:     public void test() throws Exception {",
          "",
          "[Added Lines]",
          "63:     @PresetData(DataSet.NO_ANONYMOUS_READACCESS)",
          "64:     @Email(\"http://markmail.org/message/on4wkjdaldwi2atx\")",
          "65:     public void testAnonymousCanAlwaysLoadJARs() throws Exception {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:             Page jarResource = jnlpAgent.getPage(url);",
          "83:             assertTrue(jarResource.getWebResponse().getContentType().toLowerCase(Locale.ENGLISH).startsWith(\"application/\"));",
          "84:         }",
          "87:         try {",
          "89:             fail(\"anonymous users must not be able to get secrets\");",
          "90:         } catch (FailingHttpStatusCodeException x) {",
          "91:             assertEquals(HttpURLConnection.HTTP_FORBIDDEN, x.getStatusCode());",
          "",
          "[Removed Lines]",
          "88:             jnlp = (XmlPage) jnlpAgent.goTo(\"computer/test/slave-agent.jnlp\", \"application/x-java-jnlp-file\");",
          "",
          "[Added Lines]",
          "85:     }",
          "87:     @PresetData(DataSet.ANONYMOUS_READONLY)",
          "88:     public void testAnonymousCannotGetSecrets() throws Exception {",
          "89:         jenkins.setNodes(Collections.singletonList(createNewJnlpSlave(\"test\")));",
          "91:             new WebClient().goTo(\"computer/test/slave-agent.jnlp\", \"application/x-java-jnlp-file\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}