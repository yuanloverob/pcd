{
  "cve_id": "CVE-2020-28471",
  "cve_desc": "This affects the package properties-reader before 2.2.0.",
  "repo": "steveukx/properties",
  "patch_hash": "0877cc871db9865f58dd9389ce99e61be05380a5",
  "patch_info": {
    "commit_hash": "0877cc871db9865f58dd9389ce99e61be05380a5",
    "repo": "steveukx/properties",
    "commit_url": "https://github.com/steveukx/properties/commit/0877cc871db9865f58dd9389ce99e61be05380a5",
    "files": [
      "src/properties-reader.js",
      "test/fix-prototype-pollution.spec.js"
    ],
    "message": "Test case covering the use of `__proto__` as a section name Closes #40",
    "before_after_code_files": [
      "src/properties-reader.js||src/properties-reader.js",
      "test/fix-prototype-pollution.spec.js||test/fix-prototype-pollution.spec.js"
    ]
  },
  "patch_diff": {
    "src/properties-reader.js||src/properties-reader.js": [
      "File: src/properties-reader.js -> src/properties-reader.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: const propertyAppender = require('./property-appender').propertyAppender;",
      "3: const propertyWriter = require('./property-writer').propertyWriter;",
      "5: const SECTION = Symbol('SECTION');",
      "7: function PropertiesReader (sourceFile, encoding, options = {}) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: const has = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "213:       if (expanded.length >= 1 && typeof source[step] === 'string') {",
      "214:          source[step] = {'': source[step]};",
      "215:       }",
      "217:    }",
      "219:    if (typeof parsedValue === 'string' && typeof  source[expanded[0]] === 'object') {",
      "",
      "[Removed Lines]",
      "216:       source = (source[step] = source[step] || {});",
      "",
      "[Added Lines]",
      "219:       if (!has(source, step)) {",
      "220:          Object.defineProperty(source, step, { value: Object.create(null) });",
      "221:       }",
      "223:       source = source[step]",
      "",
      "---------------"
    ],
    "test/fix-prototype-pollution.spec.js||test/fix-prototype-pollution.spec.js": [
      "File: test/fix-prototype-pollution.spec.js -> test/fix-prototype-pollution.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: const {createTestContext} = require('./__fixtues__/create-test-context');",
      "3: const propertiesReader = require('../');",
      "5: describe('prototype-pollution', () => {",
      "6:    let context;",
      "8:    beforeEach(async () => {",
      "9:       context = await createTestContext();",
      "10:    });",
      "12:    it('does not pollute global Object.prototype', async () => {",
      "13:       const file = `",
      "14:          [__proto__]",
      "15:             polluted = polluted",
      "16:             parsed = true",
      "17:       `;",
      "18:       const props = propertiesReader(await context.file('props.ini', file));",
      "20:       expect(({}).polluted).toBeUndefined();",
      "21:       expect(props.path().__proto__.polluted).toBe('polluted');",
      "22:       expect(props.getRaw('__proto__.polluted')).toBe('polluted');",
      "23:       expect(props.get('__proto__.polluted')).toBe('polluted');",
      "24:       expect(props.getRaw('__proto__.parsed')).toBe('true');",
      "25:       expect(props.get('__proto__.parsed')).toBe(true);",
      "26:    });",
      "28: });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4e4bc392ecfd0a128f48c1d69f64a0d7194fcaab",
      "candidate_info": {
        "commit_hash": "4e4bc392ecfd0a128f48c1d69f64a0d7194fcaab",
        "repo": "steveukx/properties",
        "commit_url": "https://github.com/steveukx/properties/commit/4e4bc392ecfd0a128f48c1d69f64a0d7194fcaab",
        "files": [
          "src/properties-reader.js"
        ],
        "message": "Allow for relying on Object prototype in steps of the expanded properties",
        "before_after_code_files": [
          "src/properties-reader.js||src/properties-reader.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/steveukx/properties/pull/41"
        ],
        "olp_code_files": {
          "patch": [
            "src/properties-reader.js||src/properties-reader.js"
          ],
          "candidate": [
            "src/properties-reader.js||src/properties-reader.js"
          ]
        }
      },
      "candidate_diff": {
        "src/properties-reader.js||src/properties-reader.js": [
          "File: src/properties-reader.js -> src/properties-reader.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:       }",
          "219:       if (!has(source, step)) {",
          "221:       }",
          "223:       source = source[step]",
          "",
          "[Removed Lines]",
          "220:          Object.defineProperty(source, step, { value: Object.create(null) });",
          "",
          "[Added Lines]",
          "220:          Object.defineProperty(source, step, { value: {} });",
          "",
          "---------------"
        ]
      }
    }
  ]
}