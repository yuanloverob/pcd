{
  "cve_id": "CVE-2024-10940",
  "cve_desc": "A vulnerability in langchain-core versions >=0.1.17,<0.1.53, >=0.2.0,<0.2.43, and >=0.3.0,<0.3.15 allows unauthorized users to read arbitrary files from the host file system. The issue arises from the ability to create langchain_core.prompts.ImagePromptTemplate's (and by extension langchain_core.prompts.ChatPromptTemplate's) with input variables that can read any user-specified path from the server file system. If the outputs of these prompt templates are exposed to the user, either directly or through downstream model outputs, it can lead to the exposure of sensitive information.",
  "repo": "langchain-ai/langchain",
  "patch_hash": "c1e742347f9701aadba8920e4d1f79a636e50b68",
  "patch_info": {
    "commit_hash": "c1e742347f9701aadba8920e4d1f79a636e50b68",
    "repo": "langchain-ai/langchain",
    "commit_url": "https://github.com/langchain-ai/langchain/commit/c1e742347f9701aadba8920e4d1f79a636e50b68",
    "files": [
      "libs/core/langchain_core/prompts/image.py",
      "libs/core/langchain_core/utils/image.py",
      "libs/core/tests/unit_tests/prompts/test_chat.py"
    ],
    "message": "core[patch]: rm image loading (#27797)",
    "before_after_code_files": [
      "libs/core/langchain_core/prompts/image.py||libs/core/langchain_core/prompts/image.py",
      "libs/core/langchain_core/utils/image.py||libs/core/langchain_core/utils/image.py",
      "libs/core/tests/unit_tests/prompts/test_chat.py||libs/core/tests/unit_tests/prompts/test_chat.py"
    ]
  },
  "patch_diff": {
    "libs/core/langchain_core/prompts/image.py||libs/core/langchain_core/prompts/image.py": [
      "File: libs/core/langchain_core/prompts/image.py -> libs/core/langchain_core/prompts/image.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "9:     PromptTemplateFormat,",
      "10: )",
      "11: from langchain_core.runnables import run_in_executor",
      "15: class ImagePromptTemplate(BasePromptTemplate[ImageURL]):",
      "",
      "[Removed Lines]",
      "12: from langchain_core.utils import image as image_utils",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:             A formatted string.",
      "82:         Raises:",
      "86:         Example:",
      "",
      "[Removed Lines]",
      "83:             ValueError: If the url or path is not provided.",
      "84:             ValueError: If the path or url is not a string.",
      "",
      "[Added Lines]",
      "82:             ValueError: If the url is not provided.",
      "83:             ValueError: If the url is not a string.",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "98:             else:",
      "99:                 formatted[k] = v",
      "100:         url = kwargs.get(\"url\") or formatted.get(\"url\")",
      "105:             raise ValueError(msg)",
      "106:         if not url:",
      "112:             msg = \"url must be a string.\"",
      "113:             raise ValueError(msg)",
      "118:         return output",
      "120:     async def aformat(self, **kwargs: Any) -> ImageURL:",
      "",
      "[Removed Lines]",
      "101:         path = kwargs.get(\"path\") or formatted.get(\"path\")",
      "102:         detail = kwargs.get(\"detail\") or formatted.get(\"detail\")",
      "103:         if not url and not path:",
      "104:             msg = \"Must provide either url or path.\"",
      "107:             if not isinstance(path, str):",
      "108:                 msg = \"path must be a string.\"",
      "109:                 raise ValueError(msg)",
      "110:             url = image_utils.image_to_data_url(path)",
      "111:         if not isinstance(url, str):",
      "114:         output: ImageURL = {\"url\": url}",
      "115:         if detail:",
      "116:             # Don't check literal values here: let the API check them",
      "117:             output[\"detail\"] = detail  # type: ignore[typeddict-item]",
      "",
      "[Added Lines]",
      "100:         if kwargs.get(\"path\") or formatted.get(\"path\"):",
      "101:             msg = (",
      "102:                 \"Loading images from 'path' has been removed as of 0.3.15 for security \"",
      "103:                 \"reasons. Please specify images by 'url'.\"",
      "104:             )",
      "106:         detail = kwargs.get(\"detail\") or formatted.get(\"detail\")",
      "108:             msg = \"Must provide url.\"",
      "109:             raise ValueError(msg)",
      "110:         elif not isinstance(url, str):",
      "113:         else:",
      "114:             output: ImageURL = {\"url\": url}",
      "115:             if detail:",
      "116:                 # Don't check literal values here: let the API check them",
      "117:                 output[\"detail\"] = detail  # type: ignore[typeddict-item]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "127:             A formatted string.",
      "129:         Raises:",
      "131:             ValueError: If the path or url is not a string.",
      "132:         \"\"\"",
      "133:         return await run_in_executor(None, self.format, **kwargs)",
      "",
      "[Removed Lines]",
      "130:             ValueError: If the url or path is not provided.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "libs/core/langchain_core/utils/image.py||libs/core/langchain_core/utils/image.py": [
      "File: libs/core/langchain_core/utils/image.py -> libs/core/langchain_core/utils/image.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: import base64",
      "2: import mimetypes",
      "5: def encode_image(image_path: str) -> str:",
      "6:     \"\"\"Get base64 string from image URI.",
      "8:     Args:",
      "9:         image_path: The path to the image.",
      "11:     Returns:",
      "12:         The base64 string of the image.",
      "13:     \"\"\"",
      "14:     with open(image_path, \"rb\") as image_file:",
      "15:         return base64.b64encode(image_file.read()).decode(\"utf-8\")",
      "18: def image_to_data_url(image_path: str) -> str:",
      "19:     \"\"\"Get data URL from image URI.",
      "21:     Args:",
      "22:         image_path: The path to the image.",
      "24:     Returns:",
      "25:         The data URL of the image.",
      "26:     \"\"\"",
      "27:     encoding = encode_image(image_path)",
      "28:     mime_type = mimetypes.guess_type(image_path)[0]",
      "29:     return f\"data:{mime_type};base64,{encoding}\"",
      "",
      "[Added Lines]",
      "1: from typing import Any",
      "4: def __getattr__(name: str) -> Any:",
      "5:     if name in (\"encode_image\", \"image_to_data_url\"):",
      "6:         msg = f\"'{name}' has been removed for security reasons.\"",
      "7:         raise ValueError(msg)",
      "8:     raise AttributeError(name)",
      "",
      "---------------"
    ],
    "libs/core/tests/unit_tests/prompts/test_chat.py||libs/core/tests/unit_tests/prompts/test_chat.py": [
      "File: libs/core/tests/unit_tests/prompts/test_chat.py -> libs/core/tests/unit_tests/prompts/test_chat.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "721: async def test_chat_tmpl_from_messages_multipart_formatting_with_path() -> None:",
      "723:     in_mem = \"base64mem\"",
      "724:     in_file_data = \"base64file01\"",
      "",
      "[Removed Lines]",
      "722:     \"\"\"Verify that we can pass `path` for an image as a variable.\"\"\"",
      "",
      "[Added Lines]",
      "722:     \"\"\"Verify that we cannot pass `path` for an image as a variable.\"\"\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "746:                 ),",
      "747:             ]",
      "748:         )",
      "780: def test_messages_placeholder() -> None:",
      "",
      "[Removed Lines]",
      "749:         expected = [",
      "750:             SystemMessage(content=\"You are an AI assistant named R2D2.\"),",
      "751:             HumanMessage(",
      "752:                 content=[",
      "753:                     {\"type\": \"text\", \"text\": \"What's in this image?\"},",
      "754:                     {",
      "755:                         \"type\": \"image_url\",",
      "756:                         \"image_url\": {\"url\": f\"data:image/jpeg;base64,{in_mem}\"},",
      "757:                     },",
      "758:                     {",
      "759:                         \"type\": \"image_url\",",
      "760:                         \"image_url\": {\"url\": f\"data:image/jpeg;base64,{in_file_data}\"},",
      "761:                     },",
      "762:                 ]",
      "763:             ),",
      "764:         ]",
      "765:         messages = template.format_messages(",
      "766:             name=\"R2D2\",",
      "767:             in_mem=in_mem,",
      "768:             file_path=temp_file.name,",
      "769:         )",
      "770:         assert messages == expected",
      "772:         messages = await template.aformat_messages(",
      "773:             name=\"R2D2\",",
      "774:             in_mem=in_mem,",
      "775:             file_path=temp_file.name,",
      "776:         )",
      "777:         assert messages == expected",
      "",
      "[Added Lines]",
      "749:         with pytest.raises(ValueError):",
      "750:             template.format_messages(",
      "751:                 name=\"R2D2\",",
      "752:                 in_mem=in_mem,",
      "753:                 file_path=temp_file.name,",
      "754:             )",
      "756:         with pytest.raises(ValueError):",
      "757:             await template.aformat_messages(",
      "758:                 name=\"R2D2\",",
      "759:                 in_mem=in_mem,",
      "760:                 file_path=temp_file.name,",
      "761:             )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7d481f10102f43559cc57bcad7eba291067939ee",
      "candidate_info": {
        "commit_hash": "7d481f10102f43559cc57bcad7eba291067939ee",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/7d481f10102f43559cc57bcad7eba291067939ee",
        "files": [
          "libs/core/langchain_core/prompts/image.py",
          "libs/core/langchain_core/utils/image.py",
          "libs/core/tests/unit_tests/prompts/test_chat.py"
        ],
        "message": "core[patch]: remove prompt img loading (#27807)",
        "before_after_code_files": [
          "libs/core/langchain_core/prompts/image.py||libs/core/langchain_core/prompts/image.py",
          "libs/core/langchain_core/utils/image.py||libs/core/langchain_core/utils/image.py",
          "libs/core/tests/unit_tests/prompts/test_chat.py||libs/core/tests/unit_tests/prompts/test_chat.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/langchain_core/prompts/image.py||libs/core/langchain_core/prompts/image.py",
            "libs/core/langchain_core/utils/image.py||libs/core/langchain_core/utils/image.py",
            "libs/core/tests/unit_tests/prompts/test_chat.py||libs/core/tests/unit_tests/prompts/test_chat.py"
          ],
          "candidate": [
            "libs/core/langchain_core/prompts/image.py||libs/core/langchain_core/prompts/image.py",
            "libs/core/langchain_core/utils/image.py||libs/core/langchain_core/utils/image.py",
            "libs/core/tests/unit_tests/prompts/test_chat.py||libs/core/tests/unit_tests/prompts/test_chat.py"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/langchain_core/prompts/image.py||libs/core/langchain_core/prompts/image.py": [
          "File: libs/core/langchain_core/prompts/image.py -> libs/core/langchain_core/prompts/image.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from langchain_core.prompts.base import BasePromptTemplate",
          "5: from langchain_core.pydantic_v1 import Field",
          "6: from langchain_core.runnables import run_in_executor",
          "10: class ImagePromptTemplate(BasePromptTemplate[ImageURL]):",
          "",
          "[Removed Lines]",
          "7: from langchain_core.utils import image as image_utils",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:             A formatted string.",
          "73:         Raises:",
          "77:         Example:",
          "",
          "[Removed Lines]",
          "74:             ValueError: If the url or path is not provided.",
          "75:             ValueError: If the path or url is not a string.",
          "",
          "[Added Lines]",
          "73:             ValueError: If the url is not provided.",
          "74:             ValueError: If the url is not a string.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:             else:",
          "88:                 formatted[k] = v",
          "89:         url = kwargs.get(\"url\") or formatted.get(\"url\")",
          "91:         detail = kwargs.get(\"detail\") or formatted.get(\"detail\")",
          "94:         if not url:",
          "104:         return output",
          "106:     async def aformat(self, **kwargs: Any) -> ImageURL:",
          "",
          "[Removed Lines]",
          "90:         path = kwargs.get(\"path\") or formatted.get(\"path\")",
          "92:         if not url and not path:",
          "93:             raise ValueError(\"Must provide either url or path.\")",
          "95:             if not isinstance(path, str):",
          "96:                 raise ValueError(\"path must be a string.\")",
          "97:             url = image_utils.image_to_data_url(path)",
          "98:         if not isinstance(url, str):",
          "99:             raise ValueError(\"url must be a string.\")",
          "100:         output: ImageURL = {\"url\": url}",
          "101:         if detail:",
          "102:             # Don't check literal values here: let the API check them",
          "103:             output[\"detail\"] = detail  # type: ignore[typeddict-item]",
          "",
          "[Added Lines]",
          "89:         if kwargs.get(\"path\") or formatted.get(\"path\"):",
          "90:             msg = (",
          "91:                 \"Loading images from 'path' has been removed as of 0.3.15 for security \"",
          "92:                 \"reasons. Please specify images by 'url'.\"",
          "93:             )",
          "94:             raise ValueError(msg)",
          "97:             msg = \"Must provide url.\"",
          "98:             raise ValueError(msg)",
          "99:         elif not isinstance(url, str):",
          "100:             msg = \"url must be a string.\"",
          "101:             raise ValueError(msg)",
          "102:         else:",
          "103:             output: ImageURL = {\"url\": url}",
          "104:             if detail:",
          "105:                 # Don't check literal values here: let the API check them",
          "106:                 output[\"detail\"] = detail  # type: ignore[typeddict-item]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:             A formatted string.",
          "115:         Raises:",
          "117:             ValueError: If the path or url is not a string.",
          "118:         \"\"\"",
          "119:         return await run_in_executor(None, self.format, **kwargs)",
          "",
          "[Removed Lines]",
          "116:             ValueError: If the url or path is not provided.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/utils/image.py||libs/core/langchain_core/utils/image.py": [
          "File: libs/core/langchain_core/utils/image.py -> libs/core/langchain_core/utils/image.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: import base64",
          "2: import mimetypes",
          "5: def encode_image(image_path: str) -> str:",
          "6:     \"\"\"Get base64 string from image URI.",
          "8:     Args:",
          "9:         image_path: The path to the image.",
          "11:     Returns:",
          "12:         The base64 string of the image.",
          "13:     \"\"\"",
          "14:     with open(image_path, \"rb\") as image_file:",
          "15:         return base64.b64encode(image_file.read()).decode(\"utf-8\")",
          "18: def image_to_data_url(image_path: str) -> str:",
          "19:     \"\"\"Get data URL from image URI.",
          "21:     Args:",
          "22:         image_path: The path to the image.",
          "24:     Returns:",
          "25:         The data URL of the image.",
          "26:     \"\"\"",
          "27:     encoding = encode_image(image_path)",
          "28:     mime_type = mimetypes.guess_type(image_path)[0]",
          "29:     return f\"data:{mime_type};base64,{encoding}\"",
          "",
          "[Added Lines]",
          "1: from typing import Any",
          "4: def __getattr__(name: str) -> Any:",
          "5:     if name in (\"encode_image\", \"image_to_data_url\"):",
          "6:         msg = (",
          "7:             f\"'{name}' has been removed for security reasons.\\n\\n\"",
          "8:             f\"Usage of this utility in environments with user-input paths is a \"",
          "9:             f\"security vulnerability. Out of an abundance of caution, the utility \"",
          "10:             f\"has been removed to prevent possible misuse.\"",
          "11:         )",
          "12:         raise ValueError(msg)",
          "13:     raise AttributeError(name)",
          "",
          "---------------"
        ],
        "libs/core/tests/unit_tests/prompts/test_chat.py||libs/core/tests/unit_tests/prompts/test_chat.py": [
          "File: libs/core/tests/unit_tests/prompts/test_chat.py -> libs/core/tests/unit_tests/prompts/test_chat.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "647: async def test_chat_tmpl_from_messages_multipart_formatting_with_path() -> None:",
          "649:     in_mem = \"base64mem\"",
          "650:     in_file_data = \"base64file01\"",
          "",
          "[Removed Lines]",
          "648:     \"\"\"Verify that we can pass `path` for an image as a variable.\"\"\"",
          "",
          "[Added Lines]",
          "648:     \"\"\"Verify that we cannot pass `path` for an image as a variable.\"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "672:                 ),",
          "673:             ]",
          "674:         )",
          "706: def test_messages_placeholder() -> None:",
          "",
          "[Removed Lines]",
          "675:         expected = [",
          "676:             SystemMessage(content=\"You are an AI assistant named R2D2.\"),",
          "677:             HumanMessage(",
          "678:                 content=[",
          "679:                     {\"type\": \"text\", \"text\": \"What's in this image?\"},",
          "680:                     {",
          "681:                         \"type\": \"image_url\",",
          "682:                         \"image_url\": {\"url\": f\"data:image/jpeg;base64,{in_mem}\"},",
          "683:                     },",
          "684:                     {",
          "685:                         \"type\": \"image_url\",",
          "686:                         \"image_url\": {\"url\": f\"data:image/jpeg;base64,{in_file_data}\"},",
          "687:                     },",
          "688:                 ]",
          "689:             ),",
          "690:         ]",
          "691:         messages = template.format_messages(",
          "692:             name=\"R2D2\",",
          "693:             in_mem=in_mem,",
          "694:             file_path=temp_file.name,",
          "695:         )",
          "696:         assert messages == expected",
          "698:         messages = await template.aformat_messages(",
          "699:             name=\"R2D2\",",
          "700:             in_mem=in_mem,",
          "701:             file_path=temp_file.name,",
          "702:         )",
          "703:         assert messages == expected",
          "",
          "[Added Lines]",
          "675:         with pytest.raises(ValueError):",
          "676:             template.format_messages(",
          "677:                 name=\"R2D2\",",
          "678:                 in_mem=in_mem,",
          "679:                 file_path=temp_file.name,",
          "680:             )",
          "682:         with pytest.raises(ValueError):",
          "683:             await template.aformat_messages(",
          "684:                 name=\"R2D2\",",
          "685:                 in_mem=in_mem,",
          "686:                 file_path=temp_file.name,",
          "687:             )",
          "",
          "---------------"
        ]
      }
    }
  ]
}