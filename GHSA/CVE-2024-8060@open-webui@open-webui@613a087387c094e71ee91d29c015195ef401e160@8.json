{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aa7184ae0d0e7108194dc5f9072471cffcdff049",
      "candidate_info": {
        "commit_hash": "aa7184ae0d0e7108194dc5f9072471cffcdff049",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/aa7184ae0d0e7108194dc5f9072471cffcdff049",
        "files": [
          "backend/open_webui/utils/middleware.py",
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1090:         task_id = str(uuid4())  # Create a unique task ID.",
          "1091:         model_id = form_data.get(\"model\", \"\")",
          "1093:         # Handle as a background task",
          "1094:         async def post_response_handler(response, events):",
          "1095:             def serialize_content_blocks(content_blocks, raw=False):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1093:         Chats.upsert_message_to_chat_by_id_and_message_id(",
          "1094:             metadata[\"chat_id\"],",
          "1095:             metadata[\"message_id\"],",
          "1096:             {",
          "1097:                 \"model\": model_id,",
          "1098:             },",
          "1099:         )",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1400:   await saveChatHandler(_chatId);",
          "1402:   await Promise.all(",
          "1403:    selectedModelIds.map(async (modelId, _modelIdx) => {",
          "1404:     console.log('modelId', modelId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1402:   await tick();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c846a550fa6ad2591c9ce471da96ee934ce11028",
      "candidate_info": {
        "commit_hash": "c846a550fa6ad2591c9ce471da96ee934ce11028",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/c846a550fa6ad2591c9ce471da96ee934ce11028",
        "files": [
          "backend/open_webui/utils/task.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/task.py||backend/open_webui/utils/task.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/task.py||backend/open_webui/utils/task.py": [
          "File: backend/open_webui/utils/task.py -> backend/open_webui/utils/task.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     if template.strip() == \"\":",
          "153:         template = DEFAULT_RAG_TEMPLATE",
          "155:     if \"[context]\" not in template and \"{{CONTEXT}}\" not in template:",
          "156:         log.debug(",
          "157:             \"WARNING: The RAG template does not contain the '[context]' or '{{CONTEXT}}' placeholder.\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:     template = prompt_template(template)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "039d685547244f0ce7fb603aeaba76786a388a72",
      "candidate_info": {
        "commit_hash": "039d685547244f0ce7fb603aeaba76786a388a72",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/039d685547244f0ce7fb603aeaba76786a388a72",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:                 # We might want to disable this by default",
          "1076:                 detect_reasoning = True",
          "1078:                 reasoning_start_time = None",
          "1079:                 reasoning_content = \"\"",
          "1081:                 async for line in response.body_iterator:",
          "1082:                     line = line.decode(\"utf-8\") if isinstance(line, bytes) else line",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1080:                 ongoing_content = \"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1117:                                 if detect_reasoning:",
          "1118:                                     if \"<think>\\n\" in content:",
          "1119:                                         reasoning_start_time = time.time()",
          "1120:                                         reasoning_content = \"\"",
          "1123:                                     if reasoning_start_time is not None:",
          "1124:                                         reasoning_content += value",
          "1126:                                         if \"</think>\\n\" in reasoning_content:",
          "",
          "[Removed Lines]",
          "1121:                                         content = content.replace(\"<think>\\n\", \"\")",
          "",
          "[Added Lines]",
          "1120:                                         # Remove the <think> tag",
          "1121:                                         content = content.replace(\"<think>\\n\", \"\")",
          "1122:                                         ongoing_content = content",
          "1128:                                         # Remove the last value from the content",
          "1129:                                         content = content[: -len(value)]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1147:                                                 )",
          "1149:                                                 # Format reasoning with <details> tag",
          "1151:                                             else:",
          "1152:                                                 content = \"\"",
          "1154:                                             reasoning_start_time = None",
          "1155:                                         else:",
          "1157:                                                 (",
          "1158:                                                     f\"> {line}\"",
          "1159:                                                     if not line.startswith(\">\")",
          "",
          "[Removed Lines]",
          "1150:                                                 content = f\"<details>\\n<summary>Thought for {reasoning_duration} seconds</summary>\\n{reasoning_content}\\n</details>\\n\"",
          "1156:                                             ongoing_content = \"\\n\".join(",
          "",
          "[Added Lines]",
          "1157:                                                 content = f\"{ongoing_content}<details>\\n<summary>Thought for {reasoning_duration} seconds</summary>\\n{reasoning_content}\\n</details>\\n\"",
          "1164:                                             reasoning_content = \"\\n\".join(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1163:                                             )",
          "1165:                                             # Show ongoing thought process",
          "1168:                                 if ENABLE_REALTIME_CHAT_SAVE:",
          "1169:                                     # Save message in the database",
          "",
          "[Removed Lines]",
          "1166:                                             content = f\"<details>\\n<summary>Thinking\u2026 <loading/></summary>\\n{ongoing_content}\\n</details>\\n\"",
          "",
          "[Added Lines]",
          "1174:                                             content = f\"{ongoing_content}<details>\\n<summary>Thinking\u2026 <loading/></summary>\\n{reasoning_content}\\n</details>\\n\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "807b2084182662a9d42840d3f2fdbaf314405edb",
      "candidate_info": {
        "commit_hash": "807b2084182662a9d42840d3f2fdbaf314405edb",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/807b2084182662a9d42840d3f2fdbaf314405edb",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:                 except Exception as e:",
          "222:                     tool_result = str(e)",
          "224:                 if isinstance(tool_result, dict) or isinstance(tool_result, list):",
          "225:                     tool_result = json.dumps(tool_result, indent=2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:                 tool_result_files = []",
          "225:                 if isinstance(tool_result, list):",
          "226:                     for item in tool_result:",
          "227:                         # check if string",
          "228:                         if isinstance(item, str) and item.startswith(\"data:\"):",
          "229:                             tool_result_files.append(item)",
          "230:                             tool_result.remove(item)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:                                         else f\"{tool_function_name}\"",
          "241:                                     ),",
          "242:                                 },",
          "244:                                 \"metadata\": [",
          "245:                                     {",
          "246:                                         \"source\": (",
          "",
          "[Removed Lines]",
          "243:                                 \"document\": [tool_result],",
          "",
          "[Added Lines]",
          "251:                                 \"document\": [tool_result, *tool_result_files],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256:                         sources.append(",
          "257:                             {",
          "258:                                 \"source\": {},",
          "260:                                 \"metadata\": [",
          "261:                                     {",
          "262:                                         \"source\": (",
          "",
          "[Removed Lines]",
          "259:                                 \"document\": [tool_result],",
          "",
          "[Added Lines]",
          "267:                                 \"document\": [tool_result, *tool_result_files],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afe92fd22718ac7464ebce2c59c5d9212fddc05c",
      "candidate_info": {
        "commit_hash": "afe92fd22718ac7464ebce2c59c5d9212fddc05c",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/afe92fd22718ac7464ebce2c59c5d9212fddc05c",
        "files": [
          "src/lib/components/admin/Settings/Connections.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/admin/Settings/Connections.svelte||src/lib/components/admin/Settings/Connections.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Settings/Connections.svelte||src/lib/components/admin/Settings/Connections.svelte": [
          "File: src/lib/components/admin/Settings/Connections.svelte -> src/lib/components/admin/Settings/Connections.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:    <hr class=\" border-gray-50 dark:border-gray-850\" />",
          "348:     <div class=\"flex justify-between items-center text-sm\">",
          "349:      <div class=\"  font-medium\">{$i18n.t('Direct API')}</div>",
          "",
          "[Removed Lines]",
          "347:    <div class=\"my-2\">",
          "",
          "[Added Lines]",
          "347:    <div class=\"pr-1.5 my-2\">",
          "",
          "---------------"
        ]
      }
    }
  ]
}