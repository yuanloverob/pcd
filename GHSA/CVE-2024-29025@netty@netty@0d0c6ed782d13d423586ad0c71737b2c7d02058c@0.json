{
  "cve_id": "CVE-2024-29025",
  "cve_desc": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.",
  "repo": "netty/netty",
  "patch_hash": "0d0c6ed782d13d423586ad0c71737b2c7d02058c",
  "patch_info": {
    "commit_hash": "0d0c6ed782d13d423586ad0c71737b2c7d02058c",
    "repo": "netty/netty",
    "commit_url": "https://github.com/netty/netty/commit/0d0c6ed782d13d423586ad0c71737b2c7d02058c",
    "files": [
      "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java",
      "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java",
      "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java",
      "codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoderTest.java"
    ],
    "message": "Merge pull request from GHSA-5jpm-x58v-624v\n\n* The InterfaceHttpPostRequestDecoder form implementations does not provide hard limits for the number of fields a form can have and the number of accumulated bytes. The former can be used by sending a large amount of fields that will fill the bodyListHttpData list, the later can be used by sending a very large field filling the undecodedChunk buffer since the decoder implementation buffers the field before handling it.\n\nThis provides hard limits for both: maxFields defines the maximum number of fields the form can have, maxBufferedBytes defines the maximum number of bytes a field can cumulate. When a limit is reached, a decoder exception is thrown, letting the decoder controller take care of it.\n\n* Set default limits for maxFields/maxUnbufferedBytes (breaking change)\n\n* Update codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n\n* Update codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n\n---------\n\nCo-authored-by: Julien Viet <julien@julienviet.com>",
    "before_after_code_files": [
      "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java",
      "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java",
      "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java",
      "codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoderTest.java||codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoderTest.java"
    ]
  },
  "patch_diff": {
    "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java": [
      "File: codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java -> codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:     private final HttpRequest request;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "70:     private final int maxFields;",
      "75:     private final int maxBufferedBytes;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "177:     public HttpPostMultipartRequestDecoder(HttpDataFactory factory, HttpRequest request, Charset charset) {",
      "178:         this.request = checkNotNull(request, \"request\");",
      "179:         this.charset = checkNotNull(charset, \"charset\");",
      "180:         this.factory = checkNotNull(factory, \"factory\");",
      "183:         String contentTypeValue = this.request.headers().get(HttpHeaderNames.CONTENT_TYPE);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "188:         this(factory, request, charset, HttpPostRequestDecoder.DEFAULT_MAX_FIELDS, HttpPostRequestDecoder.DEFAULT_MAX_BUFFERED_BYTES);",
      "189:     }",
      "209:     public HttpPostMultipartRequestDecoder(HttpDataFactory factory, HttpRequest request, Charset charset,",
      "210:                                            int maxFields, int maxBufferedBytes) {",
      "214:         this.maxFields = maxFields;",
      "215:         this.maxBufferedBytes = maxBufferedBytes;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "346:             undecodedChunk.writeBytes(buf);",
      "347:         }",
      "348:         parseBody();",
      "349:         if (undecodedChunk != null && undecodedChunk.writerIndex() > discardThreshold) {",
      "350:             if (undecodedChunk.refCnt() == 1) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "384:         if (maxBufferedBytes > 0 && undecodedChunk != null && undecodedChunk.readableBytes() > maxBufferedBytes) {",
      "385:             throw new HttpPostRequestDecoder.TooLongFormFieldException();",
      "386:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "440:         if (data == null) {",
      "441:             return;",
      "442:         }",
      "443:         List<InterfaceHttpData> datas = bodyMapHttpData.get(data.getName());",
      "444:         if (datas == null) {",
      "445:             datas = new ArrayList<InterfaceHttpData>(1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "481:         if (maxFields > 0 && bodyListHttpData.size() >= maxFields) {",
      "482:             throw new HttpPostRequestDecoder.TooManyFormFieldsException();",
      "483:         }",
      "",
      "---------------"
    ],
    "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java": [
      "File: codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java -> codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:     static final int DEFAULT_DISCARD_THRESHOLD = 10 * 1024 * 1024;",
      "40:     private final InterfaceHttpPostRequestDecoder decoder;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40:     static final int DEFAULT_MAX_FIELDS = 128;",
      "42:     static final int DEFAULT_MAX_BUFFERED_BYTES = 1024;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "53:         this(new DefaultHttpDataFactory(DefaultHttpDataFactory.MINSIZE), request, HttpConstants.DEFAULT_CHARSET);",
      "54:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74:     public HttpPostRequestDecoder(HttpRequest request, int maxFields, int maxBufferedBytes) {",
      "75:         this(new DefaultHttpDataFactory(DefaultHttpDataFactory.MINSIZE), request, HttpConstants.DEFAULT_CHARSET,",
      "76:              maxFields, maxBufferedBytes);",
      "77:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:         }",
      "97:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "140:     public HttpPostRequestDecoder(HttpDataFactory factory, HttpRequest request, Charset charset,",
      "141:                                   int maxFields, int maxBufferedBytes) {",
      "142:         ObjectUtil.checkNotNull(factory, \"factory\");",
      "143:         ObjectUtil.checkNotNull(request, \"request\");",
      "144:         ObjectUtil.checkNotNull(charset, \"charset\");",
      "147:         if (isMultipart(request)) {",
      "148:             decoder = new HttpPostMultipartRequestDecoder(factory, request, charset, maxFields, maxBufferedBytes);",
      "149:         } else {",
      "150:             decoder = new HttpPostStandardRequestDecoder(factory, request, charset, maxFields, maxBufferedBytes);",
      "151:         }",
      "152:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "338:             super(msg, cause);",
      "339:         }",
      "340:     }",
      "341: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "400:     public static final class TooManyFormFieldsException extends DecoderException {",
      "401:         private static final long serialVersionUID = 1336267941020800769L;",
      "402:     }",
      "407:     public static final class TooLongFormFieldException extends DecoderException {",
      "408:         private static final long serialVersionUID = 1336267941020800769L;",
      "409:     }",
      "",
      "---------------"
    ],
    "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java": [
      "File: codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java -> codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: import io.netty.buffer.ByteBuf;",
      "19: import io.netty.buffer.Unpooled;",
      "20: import io.netty.handler.codec.http.HttpConstants;",
      "21: import io.netty.handler.codec.http.HttpContent;",
      "22: import io.netty.handler.codec.http.HttpRequest;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import io.netty.handler.codec.DecoderException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "27: import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.ErrorDataDecoderException;",
      "28: import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.MultiPartStatus;",
      "29: import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.NotEnoughDataDecoderException;",
      "30: import io.netty.util.ByteProcessor;",
      "31: import io.netty.util.internal.PlatformDependent;",
      "32: import io.netty.util.internal.StringUtil;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.TooManyFormFieldsException;",
      "32: import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.TooLongFormFieldException;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "64:     private final Charset charset;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72:     private final int maxFields;",
      "77:     private final int maxBufferedBytes;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "150:     public HttpPostStandardRequestDecoder(HttpDataFactory factory, HttpRequest request, Charset charset) {",
      "151:         this.request = checkNotNull(request, \"request\");",
      "152:         this.charset = checkNotNull(charset, \"charset\");",
      "153:         this.factory = checkNotNull(factory, \"factory\");",
      "154:         try {",
      "155:             if (request instanceof HttpContent) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "164:         this(factory, request, charset, HttpPostRequestDecoder.DEFAULT_MAX_FIELDS, HttpPostRequestDecoder.DEFAULT_MAX_BUFFERED_BYTES);",
      "165:     }",
      "185:     public HttpPostStandardRequestDecoder(HttpDataFactory factory, HttpRequest request, Charset charset,",
      "186:                                           int maxFields, int maxBufferedBytes) {",
      "190:         this.maxFields = maxFields;",
      "191:         this.maxBufferedBytes = maxBufferedBytes;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "297:             undecodedChunk.writeBytes(buf);",
      "298:         }",
      "299:         parseBody();",
      "300:         if (undecodedChunk != null && undecodedChunk.writerIndex() > discardThreshold) {",
      "301:             if (undecodedChunk.refCnt() == 1) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "338:         if (maxBufferedBytes > 0 && undecodedChunk != null && undecodedChunk.readableBytes() > maxBufferedBytes) {",
      "339:             throw new TooLongFormFieldException();",
      "340:         }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "387:         if (data == null) {",
      "388:             return;",
      "389:         }",
      "390:         List<InterfaceHttpData> datas = bodyMapHttpData.get(data.getName());",
      "391:         if (datas == null) {",
      "392:             datas = new ArrayList<InterfaceHttpData>(1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "431:         if (maxFields > 0 && bodyListHttpData.size() >= maxFields) {",
      "432:             throw new TooManyFormFieldsException();",
      "433:         }",
      "",
      "---------------"
    ],
    "codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoderTest.java||codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoderTest.java": [
      "File: codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoderTest.java -> codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoderTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import io.netty.buffer.ByteBufAllocator;",
      "20: import io.netty.buffer.Unpooled;",
      "21: import io.netty.buffer.UnpooledByteBufAllocator;",
      "22: import io.netty.handler.codec.DecoderResult;",
      "23: import io.netty.handler.codec.http.DefaultFullHttpRequest;",
      "24: import io.netty.handler.codec.http.DefaultHttpContent;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import io.netty.handler.codec.DecoderException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1040:         }",
      "1041:     }",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1044:     @Test",
      "1045:     public void testTooManyFormFieldsPostStandardDecoder() {",
      "1046:         HttpRequest req = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/\");",
      "1048:         HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(req, 1024, -1);",
      "1050:         int num = 0;",
      "1051:         while (true) {",
      "1052:             try {",
      "1053:                 decoder.offer(new DefaultHttpContent(Unpooled.wrappedBuffer(\"foo=bar&\".getBytes())));",
      "1054:             } catch (DecoderException e) {",
      "1055:                 assertEquals(HttpPostRequestDecoder.TooManyFormFieldsException.class, e.getClass());",
      "1056:                 break;",
      "1057:             }",
      "1058:             assertTrue(num++ < 1024);",
      "1059:         }",
      "1060:         assertEquals(1024, num);",
      "1061:     }",
      "1063:     @Test",
      "1064:     public void testTooManyFormFieldsPostMultipartDecoder() {",
      "1065:         HttpRequest req = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/\");",
      "1066:         req.headers().add(\"Content-Type\", \"multipart/form-data;boundary=be38b42a9ad2713f\");",
      "1068:         HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(req, 1024, -1);",
      "1069:         decoder.offer(new DefaultHttpContent(Unpooled.wrappedBuffer(\"--be38b42a9ad2713f\\n\".getBytes())));",
      "1071:         int num = 0;",
      "1072:         while (true) {",
      "1073:             try {",
      "1074:                 byte[] bodyBytes = (\"content-disposition: form-data; name=\\\"title\\\"\\n\" +",
      "1075:                         \"content-length: 10\\n\" +",
      "1076:                         \"content-type: text/plain; charset=UTF-8\\n\" +",
      "1077:                         \"\\n\" +",
      "1078:                         \"bar-stream\\n\" +",
      "1079:                         \"--be38b42a9ad2713f\\n\").getBytes();",
      "1080:                 ByteBuf content = Unpooled.wrappedBuffer(bodyBytes);",
      "1081:                 decoder.offer(new DefaultHttpContent(content));",
      "1082:             } catch (DecoderException e) {",
      "1083:                 assertEquals(HttpPostRequestDecoder.TooManyFormFieldsException.class, e.getClass());",
      "1084:                 break;",
      "1085:             }",
      "1086:             assertTrue(num++ < 1024);",
      "1087:         }",
      "1088:         assertEquals(1024, num);",
      "1089:     }",
      "1091:     @Test",
      "1092:     public void testTooLongFormFieldStandardDecoder() {",
      "1093:         HttpRequest req = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/\");",
      "1095:         HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(req, -1, 16 * 1024);",
      "1097:         try {",
      "1098:             decoder.offer(new DefaultHttpContent(Unpooled.wrappedBuffer(new byte[16 * 1024 + 1])));",
      "1099:             fail();",
      "1100:         } catch (DecoderException e) {",
      "1101:             assertEquals(HttpPostRequestDecoder.TooLongFormFieldException.class, e.getClass());",
      "1102:         }",
      "1103:     }",
      "1105:     @Test",
      "1106:     public void testFieldGreaterThanMaxBufferedBytesStandardDecoder() {",
      "1107:         HttpRequest req = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/\");",
      "1109:         HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(req, -1, 6);",
      "1111:         decoder.offer(new DefaultHttpContent(Unpooled.wrappedBuffer(\"foo=bar\".getBytes())));",
      "1112:     }",
      "1114:     @Test",
      "1115:     public void testTooLongFormFieldMultipartDecoder() {",
      "1116:         HttpRequest req = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/\");",
      "1117:         req.headers().add(\"Content-Type\", \"multipart/form-data;boundary=be38b42a9ad2713f\");",
      "1119:         HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(req, -1, 16 * 1024);",
      "1121:         try {",
      "1122:             decoder.offer(new DefaultHttpContent(Unpooled.wrappedBuffer(new byte[16 * 1024 + 1])));",
      "1123:             fail();",
      "1124:         } catch (DecoderException e) {",
      "1125:             assertEquals(HttpPostRequestDecoder.TooLongFormFieldException.class, e.getClass());",
      "1126:         }",
      "1127:     }",
      "1129:     @Test",
      "1130:     public void testFieldGreaterThanMaxBufferedBytesMultipartDecoder() {",
      "1131:         HttpRequest req = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/\");",
      "1132:         req.headers().add(\"Content-Type\", \"multipart/form-data;boundary=be38b42a9ad2713f\");",
      "1134:         byte[] bodyBytes = (\"content-disposition: form-data; name=\\\"title\\\"\\n\" +",
      "1135:                 \"content-length: 10\\n\" +",
      "1136:                 \"content-type: text/plain; charset=UTF-8\\n\" +",
      "1137:                 \"\\n\" +",
      "1138:                 \"bar-stream\\n\" +",
      "1139:                 \"--be38b42a9ad2713f\\n\").getBytes();",
      "1141:         HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(req, -1, bodyBytes.length - 1);",
      "1143:         decoder.offer(new DefaultHttpContent(Unpooled.wrappedBuffer(bodyBytes)));",
      "1144:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd26566fc9008010bb7da888aad13466fb83d22f",
      "candidate_info": {
        "commit_hash": "bd26566fc9008010bb7da888aad13466fb83d22f",
        "repo": "netty/netty",
        "commit_url": "https://github.com/netty/netty/commit/bd26566fc9008010bb7da888aad13466fb83d22f",
        "files": [
          "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java",
          "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java"
        ],
        "message": "Fix checkstyle error",
        "before_after_code_files": [
          "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java",
          "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java",
            "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java"
          ],
          "candidate": [
            "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java",
            "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java"
          ]
        }
      },
      "candidate_diff": {
        "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java": [
          "File: codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java -> codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:     public HttpPostMultipartRequestDecoder(HttpDataFactory factory, HttpRequest request, Charset charset) {",
          "189:     }",
          "",
          "[Removed Lines]",
          "188:         this(factory, request, charset, HttpPostRequestDecoder.DEFAULT_MAX_FIELDS, HttpPostRequestDecoder.DEFAULT_MAX_BUFFERED_BYTES);",
          "",
          "[Added Lines]",
          "188:         this(factory, request, charset, HttpPostRequestDecoder.DEFAULT_MAX_FIELDS,",
          "189:                 HttpPostRequestDecoder.DEFAULT_MAX_BUFFERED_BYTES);",
          "",
          "---------------"
        ],
        "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java||codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java": [
          "File: codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java -> codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:     public HttpPostStandardRequestDecoder(HttpDataFactory factory, HttpRequest request, Charset charset) {",
          "165:     }",
          "",
          "[Removed Lines]",
          "164:         this(factory, request, charset, HttpPostRequestDecoder.DEFAULT_MAX_FIELDS, HttpPostRequestDecoder.DEFAULT_MAX_BUFFERED_BYTES);",
          "",
          "[Added Lines]",
          "164:         this(factory, request, charset, HttpPostRequestDecoder.DEFAULT_MAX_FIELDS,",
          "165:                 HttpPostRequestDecoder.DEFAULT_MAX_BUFFERED_BYTES);",
          "",
          "---------------"
        ]
      }
    }
  ]
}