{
  "cve_id": "CVE-2024-27299",
  "cve_desc": "phpMyFAQ is an open source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases. A SQL injection vulnerability has been discovered in the the \"Add News\" functionality due to improper escaping of the email address. This allows any authenticated user with the rights to add/edit FAQ news to exploit this vulnerability to exfiltrate data, take over accounts and in some cases, even achieve RCE. The vulnerable field lies in the  `authorEmail` field which uses PHP's `FILTER_VALIDATE_EMAIL` filter. This filter is insufficient in protecting against SQL injection attacks and should still be properly escaped. However, in this version of phpMyFAQ (3.2.5), this field is not escaped properly can be used together with other fields to fully exploit the SQL injection vulnerability. This vulnerability is fixed in 3.2.6.",
  "repo": "thorsten/phpMyFAQ",
  "patch_hash": "1b68a5f89fb65996c56285fa636b818de8608011",
  "patch_info": {
    "commit_hash": "1b68a5f89fb65996c56285fa636b818de8608011",
    "repo": "thorsten/phpMyFAQ",
    "commit_url": "https://github.com/thorsten/phpMyFAQ/commit/1b68a5f89fb65996c56285fa636b818de8608011",
    "files": [
      "phpmyfaq/src/phpMyFAQ/News.php"
    ],
    "message": "fix: added missing escapting of value",
    "before_after_code_files": [
      "phpmyfaq/src/phpMyFAQ/News.php||phpmyfaq/src/phpMyFAQ/News.php"
    ]
  },
  "patch_diff": {
    "phpmyfaq/src/phpMyFAQ/News.php||phpmyfaq/src/phpMyFAQ/News.php": [
      "File: phpmyfaq/src/phpMyFAQ/News.php -> phpmyfaq/src/phpMyFAQ/News.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "286:             $this->configuration->getDb()->escape($data['header']),",
      "287:             $this->configuration->getDb()->escape($data['content']),",
      "288:             $this->configuration->getDb()->escape($data['authorName']),",
      "290:             $data['dateStart'],",
      "291:             $data['dateEnd'],",
      "292:             $data['active'],",
      "",
      "[Removed Lines]",
      "289:             $data['authorEmail'],",
      "",
      "[Added Lines]",
      "289:             $this->configuration->getDb()->escape($data['authorEmail']),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "332:             $this->configuration->getDb()->escape($data['header']),",
      "333:             $this->configuration->getDb()->escape($data['content']),",
      "334:             $this->configuration->getDb()->escape($data['authorName']),",
      "336:             $data['dateStart'],",
      "337:             $data['dateEnd'],",
      "338:             $data['active'],",
      "",
      "[Removed Lines]",
      "335:             $data['authorEmail'],",
      "",
      "[Added Lines]",
      "335:             $this->configuration->getDb()->escape($data['authorEmail']),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "23bec69fe7b266fc033bf85008bad42c5d0d2905",
      "candidate_info": {
        "commit_hash": "23bec69fe7b266fc033bf85008bad42c5d0d2905",
        "repo": "thorsten/phpMyFAQ",
        "commit_url": "https://github.com/thorsten/phpMyFAQ/commit/23bec69fe7b266fc033bf85008bad42c5d0d2905",
        "files": [
          "phpmyfaq/src/phpMyFAQ/News.php"
        ],
        "message": "fix: added missing escapting of value",
        "before_after_code_files": [
          "phpmyfaq/src/phpMyFAQ/News.php||phpmyfaq/src/phpMyFAQ/News.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "phpmyfaq/src/phpMyFAQ/News.php||phpmyfaq/src/phpMyFAQ/News.php"
          ],
          "candidate": [
            "phpmyfaq/src/phpMyFAQ/News.php||phpmyfaq/src/phpMyFAQ/News.php"
          ]
        }
      },
      "candidate_diff": {
        "phpmyfaq/src/phpMyFAQ/News.php||phpmyfaq/src/phpMyFAQ/News.php": [
          "File: phpmyfaq/src/phpMyFAQ/News.php -> phpmyfaq/src/phpMyFAQ/News.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:             $this->config->getDb()->escape($data['header']),",
          "287:             $this->config->getDb()->escape($data['content']),",
          "288:             $this->config->getDb()->escape($data['authorName']),",
          "290:             $data['dateStart'],",
          "291:             $data['dateEnd'],",
          "292:             $data['active'],",
          "",
          "[Removed Lines]",
          "289:             $data['authorEmail'],",
          "",
          "[Added Lines]",
          "289:             $this->config->getDb()->escape($data['authorEmail']),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:             $this->config->getDb()->escape($data['header']),",
          "338:             $this->config->getDb()->escape($data['content']),",
          "339:             $this->config->getDb()->escape($data['authorName']),",
          "341:             $data['dateStart'],",
          "342:             $data['dateEnd'],",
          "343:             $data['active'],",
          "",
          "[Removed Lines]",
          "340:             $data['authorEmail'],",
          "",
          "[Added Lines]",
          "340:             $this->config->getDb()->escape($data['authorEmail']),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0fae62a72615d809e6710861c1a7f67ac893007",
      "candidate_info": {
        "commit_hash": "d0fae62a72615d809e6710861c1a7f67ac893007",
        "repo": "thorsten/phpMyFAQ",
        "commit_url": "https://github.com/thorsten/phpMyFAQ/commit/d0fae62a72615d809e6710861c1a7f67ac893007",
        "files": [
          "phpmyfaq/src/phpMyFAQ/Faq.php"
        ],
        "message": "fix: added missing escapting of value",
        "before_after_code_files": [
          "phpmyfaq/src/phpMyFAQ/Faq.php||phpmyfaq/src/phpMyFAQ/Faq.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpmyfaq/src/phpMyFAQ/Faq.php||phpmyfaq/src/phpMyFAQ/Faq.php": [
          "File: phpmyfaq/src/phpMyFAQ/Faq.php -> phpmyfaq/src/phpMyFAQ/Faq.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "925:             $this->config->getDb()->escape($faq->getQuestion()),",
          "926:             $this->config->getDb()->escape($faq->getAnswer()),",
          "927:             $this->config->getDb()->escape($faq->getAuthor()),",
          "929:             $faq->isComment() ? 'y' : 'n',",
          "930:             $faq->getUpdatedDate()->format('YmdHis'),",
          "931:             '00000000000000',",
          "932:             '99991231235959',",
          "933:             date('Y-m-d H:i:s'),",
          "935:         );",
          "937:         $this->config->getDb()->query($query);",
          "",
          "[Removed Lines]",
          "928:             $faq->getEmail(),",
          "934:             $faq->getNotes()",
          "",
          "[Added Lines]",
          "928:             $this->config->getDb()->escape($faq->getEmail()),",
          "934:             $this->config->getDb()->escape($faq->getNotes())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "994:             $this->config->getDb()->escape($faq->getQuestion()),",
          "995:             $this->config->getDb()->escape($faq->getAnswer()),",
          "996:             $this->config->getDb()->escape($faq->getAuthor()),",
          "998:             $faq->isComment() ? 'y' : 'n',",
          "999:             $faq->getUpdatedDate()->format('YmdHis'),",
          "1000:             $faq->getValidFrom()->format('YmdHis'),",
          "1001:             $faq->getValidTo()->format('YmdHis'),",
          "1003:             $faq->getId(),",
          "1004:             $faq->getLanguage()",
          "1005:         );",
          "",
          "[Removed Lines]",
          "997:             $faq->getEmail(),",
          "1002:             $faq->getNotes(),",
          "",
          "[Added Lines]",
          "997:             $this->config->getDb()->escape($faq->getEmail()),",
          "1002:             $this->config->getDb()->escape($faq->getNotes()),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce02c7031c045f41106f89d7eac83272e998707b",
      "candidate_info": {
        "commit_hash": "ce02c7031c045f41106f89d7eac83272e998707b",
        "repo": "thorsten/phpMyFAQ",
        "commit_url": "https://github.com/thorsten/phpMyFAQ/commit/ce02c7031c045f41106f89d7eac83272e998707b",
        "files": [
          "phpmyfaq/admin/news.php",
          "phpmyfaq/news.php",
          "phpmyfaq/src/phpMyFAQ/Controller/Frontend/CommentController.php",
          "phpmyfaq/src/phpMyFAQ/Entity/NewsMessage.php",
          "phpmyfaq/src/phpMyFAQ/News.php",
          "phpmyfaq/startpage.php",
          "tests/phpMyFAQ/NewsTest.php"
        ],
        "message": "refactor: introduced news model and tests",
        "before_after_code_files": [
          "phpmyfaq/admin/news.php||phpmyfaq/admin/news.php",
          "phpmyfaq/news.php||phpmyfaq/news.php",
          "phpmyfaq/src/phpMyFAQ/Controller/Frontend/CommentController.php||phpmyfaq/src/phpMyFAQ/Controller/Frontend/CommentController.php",
          "phpmyfaq/src/phpMyFAQ/Entity/NewsMessage.php||phpmyfaq/src/phpMyFAQ/Entity/NewsMessage.php",
          "phpmyfaq/src/phpMyFAQ/News.php||phpmyfaq/src/phpMyFAQ/News.php",
          "phpmyfaq/startpage.php||phpmyfaq/startpage.php",
          "tests/phpMyFAQ/NewsTest.php||tests/phpMyFAQ/NewsTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "phpmyfaq/src/phpMyFAQ/News.php||phpmyfaq/src/phpMyFAQ/News.php"
          ],
          "candidate": [
            "phpmyfaq/src/phpMyFAQ/News.php||phpmyfaq/src/phpMyFAQ/News.php"
          ]
        }
      },
      "candidate_diff": {
        "phpmyfaq/admin/news.php||phpmyfaq/admin/news.php": [
          "File: phpmyfaq/admin/news.php -> phpmyfaq/admin/news.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use phpMyFAQ\\Component\\Alert;",
          "21: use phpMyFAQ\\Date;",
          "22: use phpMyFAQ\\Entity\\CommentType;",
          "23: use phpMyFAQ\\Filter;",
          "24: use phpMyFAQ\\Helper\\LanguageHelper;",
          "25: use phpMyFAQ\\Language;",
          "26: use phpMyFAQ\\News;",
          "28: use phpMyFAQ\\Translation;",
          "30: if (!defined('IS_VALID_PHPMYFAQ')) {",
          "",
          "[Removed Lines]",
          "27: use phpMyFAQ\\Session\\Token;use phpMyFAQ\\Strings;",
          "",
          "[Added Lines]",
          "23: use phpMyFAQ\\Entity\\NewsMessage;",
          "28: use phpMyFAQ\\Session\\Token;",
          "29: use phpMyFAQ\\Strings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:         </thead>",
          "217:         <tbody>",
          "218:     <?php",
          "220:     $date = new Date($faqConfig);",
          "221:     if (is_countable($newsHeader) ? count($newsHeader) : 0) {",
          "222:         foreach ($newsHeader as $newsItem) {",
          "",
          "[Removed Lines]",
          "219:     $newsHeader = $news->getNewsHeader();",
          "",
          "[Added Lines]",
          "221:     $newsHeader = $news->getHeader();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "251:     <?php",
          "252: } elseif ('edit-news' == $action && $user->perm->hasPermission($user->getUserId(), 'editnews')) {",
          "253:     $id = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);",
          "255:     ?>",
          "256: <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">",
          "257:   <h1 class=\"h2\">",
          "",
          "[Removed Lines]",
          "254:     $newsData = $news->getNewsEntry($id, true);",
          "",
          "[Added Lines]",
          "256:     $newsData = $news->get($id, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "473:     $newsLang = Filter::filterInput(INPUT_POST, 'langTo', FILTER_SANITIZE_SPECIAL_CHARS);",
          "474:     $target = Filter::filterInput(INPUT_POST, 'target', FILTER_SANITIZE_SPECIAL_CHARS);",
          "479:         echo Alert::success('ad_news_updatesuc');",
          "480:     } else {",
          "481:         echo Alert::danger('ad_news_insertfail', $faqConfig->getDb()->error());",
          "",
          "[Removed Lines]",
          "476:     $newsData = ['lang' => $newsLang, 'header' => $header, 'content' => html_entity_decode((string) $content), 'authorName' => $author, 'authorEmail' => $email, 'active' => (is_null($active)) ? 'n' : 'y', 'comment' => (is_null($comment)) ? 'n' : 'y', 'dateStart' => (empty($dateStart)) ? '00000000000000' : str_replace('-', '', (string) $dateStart) . '000000', 'dateEnd' => (empty($dateEnd)) ? '99991231235959' : str_replace('-', '', (string) $dateEnd) . '235959', 'link' => $link, 'linkTitle' => $linkTitle, 'date' => date('YmdHis'), 'target' => (is_null($target)) ? '' : $target];",
          "478:     if ($news->addNewsEntry($newsData)) {",
          "",
          "[Added Lines]",
          "478:     $newsMessage = new NewsMessage();",
          "479:     $newsMessage",
          "480:         ->setLanguage($newsLang)",
          "481:         ->setHeader($header)",
          "482:         ->setMessage(html_entity_decode((string) $content))",
          "483:         ->setAuthor($author)",
          "484:         ->setEmail($email)",
          "485:         ->setActive(!is_null($active))",
          "486:         ->setComment(!is_null($comment))",
          "487:         ->setDateStart(new DateTime($dateStart))",
          "488:         ->setDateEnd(new DateTime($dateEnd))",
          "489:         ->setLink($link ?? '')",
          "490:         ->setLinkTitle($linkTitle ?? '')",
          "491:         ->setLinkTarget($target ?? '')",
          "492:         ->setCreated(new DateTime());",
          "494:     if ($news->create($newsMessage)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "497:         <div class=\"row\">",
          "498:             <div class=\"col-12\">",
          "499:     <?php",
          "500:     $dateStart = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_SANITIZE_SPECIAL_CHARS);",
          "501:     $dateEnd = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_SANITIZE_SPECIAL_CHARS);",
          "502:     $header = Filter::filterInput(INPUT_POST, 'newsheader', FILTER_SANITIZE_SPECIAL_CHARS);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "516:     $newsId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "510:     $newsLang = Filter::filterInput(INPUT_POST, 'langTo', FILTER_SANITIZE_SPECIAL_CHARS);",
          "511:     $target = Filter::filterInput(INPUT_POST, 'target', FILTER_SANITIZE_SPECIAL_CHARS);",
          "531:         echo Alert::success('ad_news_updatesuc');",
          "532:     } else {",
          "533:         echo Alert::danger('ad_news_updatefail', $faqConfig->getDb()->error());",
          "",
          "[Removed Lines]",
          "513:     $newsData = [",
          "514:         'lang' => $newsLang,",
          "515:         'header' => $header,",
          "516:         'content' => html_entity_decode((string) $content),",
          "517:         'authorName' => $author,",
          "518:         'authorEmail' => $email,",
          "519:         'active' => (is_null($active)) ? 'n' : 'y',",
          "520:         'comment' => (is_null($comment)) ? 'n' : 'y',",
          "521:         'dateStart' => (empty($dateStart)) ? '00000000000000' : str_replace('-', '', (string) $dateStart) . '000000',",
          "522:         'dateEnd' => (empty($dateEnd)) ? '99991231235959' : str_replace('-', '', (string) $dateEnd) . '235959',",
          "523:         'link' => $link,",
          "524:         'linkTitle' => $linkTitle,",
          "525:         'date' => date('YmdHis'),",
          "526:         'target' => (is_null($target)) ? '' : $target,",
          "527:     ];",
          "529:     $newsId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);",
          "530:     if ($news->updateNewsEntry((int) $newsId, $newsData)) {",
          "",
          "[Added Lines]",
          "530:     $newsMessage = new NewsMessage();",
          "531:     $newsMessage",
          "532:         ->setId($newsId)",
          "533:         ->setLanguage($newsLang)",
          "534:         ->setHeader($header)",
          "535:         ->setMessage(html_entity_decode((string) $content))",
          "536:         ->setAuthor($author)",
          "537:         ->setEmail($email)",
          "538:         ->setActive(!is_null($active))",
          "539:         ->setComment(!is_null($comment))",
          "540:         ->setDateStart(new DateTime($dateStart))",
          "541:         ->setDateEnd(new DateTime($dateEnd))",
          "542:         ->setLink($link ?? '')",
          "543:         ->setLinkTitle($linkTitle ?? '')",
          "544:         ->setLinkTarget($target ?? '')",
          "545:         ->setCreated(new DateTime());",
          "547:     if ($news->update($newsMessage)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "539:     <?php",
          "540: } elseif ('delete-news' == $action && $user->perm->hasPermission($user->getUserId(), 'delnews')) {",
          "541:     ?>",
          "543:           <h1 class=\"h2\">",
          "544:             <i aria-hidden=\"true\" class=\"bi bi-pencil\"></i>",
          "545:             <?= Translation::get('ad_news_data') ?>",
          "",
          "[Removed Lines]",
          "542:         <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">",
          "",
          "[Added Lines]",
          "559:         <div",
          "560:         class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "560:     <form action=\"?action=delete-news\" method=\"post\" accept-charset=\"utf-8\">",
          "561:     <input type=\"hidden\" name=\"id\" value=\"<?= $deleteId ?>\">",
          "562:     <input type=\"hidden\" name=\"really\" value=\"yes\">",
          "564:         <button class=\"btn btn-warning\" type=\"submit\" name=\"submit\">",
          "565:             <?= Translation::get('ad_news_yesdelete') ?>",
          "566:         </button>",
          "",
          "[Removed Lines]",
          "563:     <?= Token::getInstance()->getTokenInput('delete-news') ?>",
          "",
          "[Added Lines]",
          "581:         <?= Token::getInstance()->getTokenInput('delete-news') ?>",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "574:     } else {",
          "575:         if (Token::getInstance()->verifyToken('delete-news', $csrfToken)) {",
          "576:             $deleteId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);",
          "578:             echo Alert::success('ad_news_delsuc');",
          "579:             printf('<div class=\"row\">&rarr; <a href=\"?action=news\">%s</a></p>', Translation::get('msgNews'));",
          "580:         }",
          "",
          "[Removed Lines]",
          "577:             $news->deleteNews((int)$deleteId);",
          "",
          "[Added Lines]",
          "595:             $news->delete((int)$deleteId);",
          "",
          "---------------"
        ],
        "phpmyfaq/news.php||phpmyfaq/news.php": [
          "File: phpmyfaq/news.php -> phpmyfaq/news.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: $newsMainHeader = $faqConfig->getTitle() . Translation::get('msgNews');",
          "57: $newsContent = $news['content'];",
          "58: $newsHeader = $news['header'];",
          "",
          "[Removed Lines]",
          "55: $news = $oNews->getNewsEntry($newsId);",
          "",
          "[Added Lines]",
          "55: $news = $oNews->get($newsId);",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/Controller/Frontend/CommentController.php||phpmyfaq/src/phpMyFAQ/Controller/Frontend/CommentController.php": [
          "File: phpmyfaq/src/phpMyFAQ/Controller/Frontend/CommentController.php -> phpmyfaq/src/phpMyFAQ/Controller/Frontend/CommentController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:                     $notification->sendFaqCommentNotification($faq, $commentEntity);",
          "135:                 } else {",
          "136:                     $news = new News($this->configuration);",
          "138:                     $notification->sendNewsCommentNotification($newsData, $commentEntity);",
          "139:                 }",
          "",
          "[Removed Lines]",
          "137:                     $newsData = $news->getNewsEntry($id);",
          "",
          "[Added Lines]",
          "137:                     $newsData = $news->get($id);",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/Entity/NewsMessage.php||phpmyfaq/src/phpMyFAQ/Entity/NewsMessage.php": [
          "File: phpmyfaq/src/phpMyFAQ/Entity/NewsMessage.php -> phpmyfaq/src/phpMyFAQ/Entity/NewsMessage.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "18: namespace phpMyFAQ\\Entity;",
          "20: use DateTime;",
          "22: class NewsMessage",
          "23: {",
          "24:     private int $id;",
          "26:     private string $language;",
          "28:     private string $header;",
          "30:     private string $message;",
          "32:     private DateTime $created;",
          "34:     private string $author;",
          "36:     private string $email;",
          "38:     private bool $active;",
          "40:     private bool $comment;",
          "42:     private ?DateTime $dateStart;",
          "44:     private ?DateTime $dateEnd;",
          "46:     private ?string $link;",
          "48:     private ?string $linkTitle;",
          "50:     private ?string $linkTarget;",
          "52:     public function getId(): int",
          "53:     {",
          "54:         return $this->id;",
          "55:     }",
          "56:     public function setId(int $id): NewsMessage",
          "57:     {",
          "58:         $this->id = $id;",
          "59:         return $this;",
          "60:     }",
          "61:     public function getLanguage(): string",
          "62:     {",
          "63:         return $this->language;",
          "64:     }",
          "65:     public function setLanguage(string $language): NewsMessage",
          "66:     {",
          "67:         $this->language = $language;",
          "68:         return $this;",
          "69:     }",
          "70:     public function getHeader(): string",
          "71:     {",
          "72:         return $this->header;",
          "73:     }",
          "74:     public function setHeader(string $header): NewsMessage",
          "75:     {",
          "76:         $this->header = $header;",
          "77:         return $this;",
          "78:     }",
          "79:     public function getMessage(): string",
          "80:     {",
          "81:         return $this->message;",
          "82:     }",
          "83:     public function setMessage(string $message): NewsMessage",
          "84:     {",
          "85:         $this->message = $message;",
          "86:         return $this;",
          "87:     }",
          "88:     public function getCreated(): DateTime",
          "89:     {",
          "90:         return $this->created;",
          "91:     }",
          "92:     public function setCreated(DateTime $created): NewsMessage",
          "93:     {",
          "94:         $this->created = $created;",
          "95:         return $this;",
          "96:     }",
          "97:     public function getAuthor(): string",
          "98:     {",
          "99:         return $this->author;",
          "100:     }",
          "101:     public function setAuthor(string $author): NewsMessage",
          "102:     {",
          "103:         $this->author = $author;",
          "104:         return $this;",
          "105:     }",
          "106:     public function getEmail(): string",
          "107:     {",
          "108:         return $this->email;",
          "109:     }",
          "110:     public function setEmail(string $email): NewsMessage",
          "111:     {",
          "112:         $this->email = $email;",
          "113:         return $this;",
          "114:     }",
          "115:     public function isActive(): bool",
          "116:     {",
          "117:         return $this->active;",
          "118:     }",
          "119:     public function setActive(bool $active): NewsMessage",
          "120:     {",
          "121:         $this->active = $active;",
          "122:         return $this;",
          "123:     }",
          "124:     public function isComment(): bool",
          "125:     {",
          "126:         return $this->comment;",
          "127:     }",
          "128:     public function setComment(bool $comment): NewsMessage",
          "129:     {",
          "130:         $this->comment = $comment;",
          "131:         return $this;",
          "132:     }",
          "133:     public function getDateStart(): ?DateTime",
          "134:     {",
          "135:         return $this->dateStart ?? null;",
          "136:     }",
          "137:     public function setDateStart(DateTime $dateStart): NewsMessage",
          "138:     {",
          "139:         $this->dateStart = $dateStart;",
          "140:         return $this;",
          "141:     }",
          "142:     public function getDateEnd(): ?DateTime",
          "143:     {",
          "144:         return $this->dateEnd ?? null;",
          "145:     }",
          "146:     public function setDateEnd(DateTime $dateEnd): NewsMessage",
          "147:     {",
          "148:         $this->dateEnd = $dateEnd;",
          "149:         return $this;",
          "150:     }",
          "151:     public function getLink(): string",
          "152:     {",
          "153:         return $this->link ?? '';",
          "154:     }",
          "155:     public function setLink(string $link): NewsMessage",
          "156:     {",
          "157:         $this->link = $link;",
          "158:         return $this;",
          "159:     }",
          "160:     public function getLinkTitle(): string",
          "161:     {",
          "162:         return $this->linkTitle ?? '';",
          "163:     }",
          "164:     public function setLinkTitle(string $linkTitle): NewsMessage",
          "165:     {",
          "166:         $this->linkTitle = $linkTitle;",
          "167:         return $this;",
          "168:     }",
          "169:     public function getLinkTarget(): string",
          "170:     {",
          "171:         return $this->linkTarget ?? '';",
          "172:     }",
          "173:     public function setLinkTarget(string $linkTarget): NewsMessage",
          "174:     {",
          "175:         $this->linkTarget = $linkTarget;",
          "176:         return $this;",
          "177:     }",
          "178: }",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/News.php||phpmyfaq/src/phpMyFAQ/News.php": [
          "File: phpmyfaq/src/phpMyFAQ/News.php -> phpmyfaq/src/phpMyFAQ/News.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace phpMyFAQ;",
          "20: use Exception;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: use phpMyFAQ\\Entity\\NewsMessage;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     {",
          "47:         $output = '';",
          "48:         $news = $this->getLatestData($showArchive, $active);",
          "",
          "[Removed Lines]",
          "45:     public function getNews(bool $showArchive = false, bool $active = true): string",
          "",
          "[Added Lines]",
          "46:     public function getAll(bool $showArchive = false, bool $active = true): string",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:     {",
          "177:         $headers = [];",
          "178:         $now = date('YmdHis');",
          "",
          "[Removed Lines]",
          "175:     public function getNewsHeader(): array",
          "",
          "[Added Lines]",
          "176:     public function getHeader(): array",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "217:     {",
          "218:         $news = [];",
          "",
          "[Removed Lines]",
          "216:     public function getNewsEntry(int $id, bool $admin = false): array",
          "",
          "[Added Lines]",
          "217:     public function get(int $id, bool $admin = false): array",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "273:     {",
          "274:         $query = sprintf(",
          "275:             \"",
          "",
          "[Removed Lines]",
          "272:     public function addNewsEntry(array $data): bool",
          "",
          "[Added Lines]",
          "273:     public function create(NewsMessage $data): bool",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "281:             (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')\",",
          "282:             Database::getTablePrefix(),",
          "283:             $this->configuration->getDb()->nextId(Database::getTablePrefix() . 'faqnews', 'id'),",
          "297:         );",
          "298:         return (bool) $this->configuration->getDb()->query($query);",
          "299:     }",
          "308:     {",
          "309:         $query = sprintf(",
          "310:             \"",
          "",
          "[Removed Lines]",
          "284:             $data['date'],",
          "285:             $data['lang'],",
          "286:             $this->configuration->getDb()->escape($data['header']),",
          "287:             $this->configuration->getDb()->escape($data['content']),",
          "288:             $this->configuration->getDb()->escape($data['authorName']),",
          "289:             $this->configuration->getDb()->escape($data['authorEmail']),",
          "290:             $data['dateStart'],",
          "291:             $data['dateEnd'],",
          "292:             $data['active'],",
          "293:             $data['comment'],",
          "294:             $this->configuration->getDb()->escape($data['link']),",
          "295:             $this->configuration->getDb()->escape($data['linkTitle']),",
          "296:             $data['target']",
          "307:     public function updateNewsEntry(int $id, array $data): bool",
          "",
          "[Added Lines]",
          "285:             $data->getCreated()->format('YmdHis'),",
          "286:             $this->configuration->getDb()->escape($data->getLanguage()),",
          "287:             $this->configuration->getDb()->escape($data->getHeader()),",
          "288:             $this->configuration->getDb()->escape($data->getMessage()),",
          "289:             $this->configuration->getDb()->escape($data->getAuthor()),",
          "290:             $this->configuration->getDb()->escape($data->getEmail()),",
          "291:             $data->getDateStart() ? $data->getDateStart()->format('YmdHis') : '',",
          "292:             $data->getDateEnd() ? $data->getDateEnd()->format('YmdHis') : '',",
          "293:             $data->isActive() ? 'y' : 'n',",
          "294:             $data->isComment() ? 'y' : 'n',",
          "295:             $this->configuration->getDb()->escape($data->getLink() ?? ''),",
          "296:             $this->configuration->getDb()->escape($data->getLinkTitle() ?? ''),",
          "297:             $this->configuration->getDb()->escape($data->getLinkTarget() ?? '')",
          "308:     public function update(NewsMessage $data): bool",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "327:             WHERE",
          "328:                 id = %d\",",
          "329:             Database::getTablePrefix(),",
          "344:         );",
          "345:         return (bool) $this->configuration->getDb()->query($query);",
          "346:     }",
          "",
          "[Removed Lines]",
          "330:             $data['date'],",
          "331:             $data['lang'],",
          "332:             $this->configuration->getDb()->escape($data['header']),",
          "333:             $this->configuration->getDb()->escape($data['content']),",
          "334:             $this->configuration->getDb()->escape($data['authorName']),",
          "335:             $this->configuration->getDb()->escape($data['authorEmail']),",
          "336:             $data['dateStart'],",
          "337:             $data['dateEnd'],",
          "338:             $data['active'],",
          "339:             $data['comment'],",
          "340:             $this->configuration->getDb()->escape($data['link']),",
          "341:             $this->configuration->getDb()->escape($data['linkTitle']),",
          "342:             $data['target'],",
          "343:             $id",
          "",
          "[Added Lines]",
          "331:             $data->getCreated()->format('YmdHis'),",
          "332:             $this->configuration->getDb()->escape($data->getLanguage()),",
          "333:             $this->configuration->getDb()->escape($data->getHeader()),",
          "334:             $this->configuration->getDb()->escape($data->getMessage()),",
          "335:             $this->configuration->getDb()->escape($data->getAuthor()),",
          "336:             $this->configuration->getDb()->escape($data->getEmail()),",
          "337:             $data->getDateStart() ? $data->getDateStart()->format('YmdHis') : '',",
          "338:             $data->getDateEnd() ? $data->getDateEnd()->format('YmdHis') : '',",
          "339:             $data->isActive() ? 'y' : 'n',",
          "340:             $data->isComment() ? 'y' : 'n',",
          "341:             $this->configuration->getDb()->escape($data->getLink() ?? ''),",
          "342:             $this->configuration->getDb()->escape($data->getLinkTitle() ?? ''),",
          "343:             $this->configuration->getDb()->escape($data->getLinkTarget() ?? ''),",
          "344:             $data->getId()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "355:     {",
          "356:         $query = sprintf(",
          "357:             \"DELETE FROM %sfaqnews WHERE id = %d AND lang = '%s'\",",
          "",
          "[Removed Lines]",
          "354:     public function deleteNews(int $id): bool",
          "",
          "[Added Lines]",
          "355:     public function delete(int $id): bool",
          "",
          "---------------"
        ],
        "phpmyfaq/startpage.php||phpmyfaq/startpage.php": [
          "File: phpmyfaq/startpage.php -> phpmyfaq/startpage.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:         'writeTopTenHeader' => Translation::get('msgTopTen'),",
          "135:         'writeNewestHeader' => Translation::get('msgLatestArticles'),",
          "136:         'writeNewsHeader' => $writeNewsHeader,",
          "138:         'showAllNews' => $showAllNews,",
          "139:         'writeNumberOfArticles' => $plr->getMsg('plmsgHomeArticlesOnline', $faq->getNumberOfRecords($faqLangCode)),",
          "140:         'formActionUrl' => '?' . $sids . 'action=search',",
          "",
          "[Removed Lines]",
          "137:         'writeNews' => $news->getNews($archived),",
          "",
          "[Added Lines]",
          "137:         'writeNews' => $news->getAll($archived),",
          "",
          "---------------"
        ],
        "tests/phpMyFAQ/NewsTest.php||tests/phpMyFAQ/NewsTest.php": [
          "File: tests/phpMyFAQ/NewsTest.php -> tests/phpMyFAQ/NewsTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace phpMyFAQ;",
          "5: use DateTime;",
          "6: use phpMyFAQ\\Database\\Sqlite3;",
          "7: use phpMyFAQ\\Entity\\NewsMessage;",
          "8: use PHPUnit\\Framework\\TestCase;",
          "10: class NewsTest extends TestCase",
          "11: {",
          "12:     private News $news;",
          "13:     protected function setUp(): void",
          "14:     {",
          "15:         parent::setUp();",
          "17:         $dbHandle = new Sqlite3();",
          "18:         $dbHandle->connect(PMF_TEST_DIR . '/test.db', '', '');",
          "19:         $configuration = new Configuration($dbHandle);",
          "21:         $language = new Language($configuration);",
          "22:         $configuration->setLanguage($language);",
          "24:         $this->news = new News($configuration);",
          "25:     }",
          "27:     public function testCreate(): void",
          "28:     {",
          "29:         $news = new NewsMessage();",
          "30:         $news",
          "31:             ->setCreated(new DateTime())",
          "32:             ->setLanguage('en')",
          "33:             ->setHeader('Test')",
          "34:             ->setMessage('Message')",
          "35:             ->setAuthor('Test Author')",
          "36:             ->setEmail('test@example.org')",
          "37:             ->setActive(true)",
          "38:             ->setComment(true);",
          "40:         $this->assertTrue($this->news->create($news));",
          "41:         $this->news->delete(1);",
          "42:     }",
          "44:     public function testUpdate(): void",
          "45:     {",
          "46:         $news = new NewsMessage();",
          "47:         $news",
          "48:             ->setCreated(new DateTime())",
          "49:             ->setLanguage('en')",
          "50:             ->setHeader('Test')",
          "51:             ->setMessage('Message')",
          "52:             ->setAuthor('Test Author')",
          "53:             ->setEmail('test@example.org')",
          "54:             ->setActive(true)",
          "55:             ->setComment(true);",
          "57:         $this->news->create($news);",
          "59:         $news",
          "60:             ->setId(1)",
          "61:             ->setCreated(new DateTime())",
          "62:             ->setLanguage('en')",
          "63:             ->setHeader('Test Updated')",
          "64:             ->setMessage('Message Updated')",
          "65:             ->setAuthor('Test Author')",
          "66:             ->setEmail('test@example.org')",
          "67:             ->setActive(true)",
          "68:             ->setComment(true);",
          "70:         $this->assertTrue($this->news->update($news));",
          "71:         $this->news->delete(1);",
          "72:     }",
          "73: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}