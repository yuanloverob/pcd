{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "430854e22318acdb3941283337dad78372c90e9b",
      "candidate_info": {
        "commit_hash": "430854e22318acdb3941283337dad78372c90e9b",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/430854e22318acdb3941283337dad78372c90e9b",
        "files": [
          "src/lib/components/chat/Chat.svelte",
          "src/lib/components/chat/MessageInput.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte",
          "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:    files = [];",
          "139:    selectedToolIds = [];",
          "140:    webSearchEnabled = false;",
          "142:    loaded = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:    imageGenerationEnabled = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:       files = input.files;",
          "154:       selectedToolIds = input.selectedToolIds;",
          "155:       webSearchEnabled = input.webSearchEnabled;",
          "156:      } catch (e) {}",
          "157:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:       imageGenerationEnabled = input.imageGenerationEnabled;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:     files = input.files;",
          "392:     selectedToolIds = input.selectedToolIds;",
          "393:     webSearchEnabled = input.webSearchEnabled;",
          "394:    } catch (e) {",
          "395:     prompt = '';",
          "396:     files = [];",
          "397:     selectedToolIds = [];",
          "398:     webSearchEnabled = false;",
          "399:    }",
          "400:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396:     imageGenerationEnabled = input.imageGenerationEnabled;",
          "402:     imageGenerationEnabled = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "697:   if ($page.url.searchParams.get('web-search') === 'true') {",
          "698:    webSearchEnabled = true;",
          "699:   }",
          "701:   if ($page.url.searchParams.get('tools')) {",
          "702:    selectedToolIds = $page.url.searchParams",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:   if ($page.url.searchParams.get('image-generation') === 'true') {",
          "705:    imageGenerationEnabled = true;",
          "706:   }",
          "",
          "---------------"
        ],
        "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte": [
          "File: src/lib/components/chat/MessageInput.svelte -> src/lib/components/chat/MessageInput.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:               atSelectedModel = undefined;",
          "871:               selectedToolIds = [];",
          "872:               webSearchEnabled = false;",
          "873:              }",
          "874:             }}",
          "875:             on:paste={async (e) => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "873:               imageGenerationEnabled = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1056:              atSelectedModel = undefined;",
          "1057:              selectedToolIds = [];",
          "1058:              webSearchEnabled = false;",
          "1059:             }",
          "1060:            }}",
          "1061:            rows=\"1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1060:              imageGenerationEnabled = false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40d019ff50c0b5e15e6da9e706f6883937cbb13f",
      "candidate_info": {
        "commit_hash": "40d019ff50c0b5e15e6da9e706f6883937cbb13f",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/40d019ff50c0b5e15e6da9e706f6883937cbb13f",
        "files": [
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1744:   history.currentId = userMessageId;",
          "1746:   await tick();",
          "1747:   await sendPrompt(history, userPrompt, userMessageId);",
          "1748:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1748:   if (autoScroll) {",
          "1749:    scrollToBottom();",
          "1750:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1754:    let userMessage = history.messages[message.parentId];",
          "1755:    let userPrompt = userMessage.content;",
          "1757:    if ((userMessage?.models ?? [...selectedModels]).length == 1) {",
          "1759:     await sendPrompt(history, userPrompt, userMessage.id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1762:    if (autoScroll) {",
          "1763:     scrollToBottom();",
          "1764:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cf0ceedba450c79973ecae70652e7f1b2fefd17",
      "candidate_info": {
        "commit_hash": "6cf0ceedba450c79973ecae70652e7f1b2fefd17",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/6cf0ceedba450c79973ecae70652e7f1b2fefd17",
        "files": [
          "backend/open_webui/routers/pipelines.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/pipelines.py||backend/open_webui/routers/pipelines.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/pipelines.py||backend/open_webui/routers/pipelines.py": [
          "File: backend/open_webui/routers/pipelines.py -> backend/open_webui/routers/pipelines.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: @router.get(\"/list\")",
          "171: async def get_pipelines_list(request: Request, user=Depends(get_admin_user)):",
          "173:     log.debug(f\"get_pipelines_list: get_openai_models_responses returned {responses}\")",
          "175:     urlIdxs = [",
          "",
          "[Removed Lines]",
          "172:     responses = await get_all_models_responses(request)",
          "",
          "[Added Lines]",
          "172:     responses = await get_all_models_responses(request, user)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "038df1131e771788e910046e8bc79919b6df4a4a",
      "candidate_info": {
        "commit_hash": "038df1131e771788e910046e8bc79919b6df4a4a",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/038df1131e771788e910046e8bc79919b6df4a4a",
        "files": [
          "backend/open_webui/utils/middleware.py",
          "src/lib/apis/index.ts",
          "src/lib/components/chat/MessageInput.svelte",
          "src/routes/+layout.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "src/lib/apis/index.ts||src/lib/apis/index.ts",
          "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte",
          "src/routes/+layout.svelte||src/routes/+layout.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:                     allowed_params = (",
          "199:                         spec.get(\"parameters\", {}).get(\"properties\", {}).keys()",
          "200:                     )",
          "202:                     tool_function_params = {",
          "203:                         k: v",
          "204:                         for k, v in tool_function_params.items()",
          "",
          "[Removed Lines]",
          "201:                     tool_function = tool[\"callable\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:                     }",
          "208:                     if tool.get(\"direct\", False):",
          "211:                         tool_output = await event_caller(",
          "212:                             {",
          "213:                                 \"type\": \"execute:tool\",",
          "",
          "[Removed Lines]",
          "209:                         tool_output = await tool_function(**tool_function_params)",
          "210:                     else:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:                                     \"id\": str(uuid4()),",
          "216:                                     \"name\": tool_function_name,",
          "217:                                     \"params\": tool_function_params,",
          "219:                                     \"server\": tool.get(\"server\", {}),",
          "220:                                     \"session_id\": metadata.get(\"session_id\", None),",
          "221:                                 },",
          "222:                             }",
          "223:                         )",
          "225:                 except Exception as e:",
          "226:                     tool_output = str(e)",
          "",
          "[Removed Lines]",
          "218:                                     \"tool\": tool,",
          "",
          "[Added Lines]",
          "220:                     else:",
          "221:                         tool_function = tool[\"callable\"]",
          "222:                         tool_output = await tool_function(**tool_function_params)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "229:                     tool_output = json.dumps(tool_output, indent=4)",
          "231:                 if isinstance(tool_output, str):",
          "235:                         sources.append(",
          "236:                             {",
          "",
          "[Removed Lines]",
          "232:                     tool_id = tools[tool_function_name].get(\"toolkit_id\", \"\")",
          "233:                     if tools[tool_function_name].get(\"citation\", False):",
          "",
          "[Added Lines]",
          "231:                     tool = tools[tool_function_name]",
          "232:                     tool_id = tool.get(\"toolkit_id\", \"\")",
          "233:                     if tool.get(\"citation\", False) or tool.get(\"direct\", False):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1825:                                     .get(\"properties\", {})",
          "1826:                                     .keys()",
          "1827:                                 )",
          "1829:                                 tool_function_params = {",
          "1830:                                     k: v",
          "1831:                                     for k, v in tool_function_params.items()",
          "",
          "[Removed Lines]",
          "1828:                                 tool_function = tool[\"callable\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1833:                                 }",
          "1835:                                 if tool.get(\"direct\", False):",
          "1840:                                     tool_result = await event_caller(",
          "1841:                                         {",
          "1842:                                             \"type\": \"execute:tool\",",
          "",
          "[Removed Lines]",
          "1836:                                     tool_result = await tool_function(",
          "1838:                                     )",
          "1839:                                 else:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1844:                                                 \"id\": str(uuid4()),",
          "1845:                                                 \"name\": tool_name,",
          "1846:                                                 \"params\": tool_function_params,",
          "1848:                                                 \"server\": tool.get(\"server\", {}),",
          "1849:                                                 \"session_id\": metadata.get(",
          "1850:                                                     \"session_id\", None",
          "",
          "[Removed Lines]",
          "1847:                                                 \"tool\": tool,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1852:                                             },",
          "1853:                                         }",
          "1854:                                     )",
          "1855:                             except Exception as e:",
          "1856:                                 tool_result = str(e)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1851:                                 else:",
          "1852:                                     tool_function = tool[\"callable\"]",
          "1853:                                     tool_result = await tool_function(",
          "1855:                                     )",
          "",
          "---------------"
        ],
        "src/lib/apis/index.ts||src/lib/apis/index.ts": [
          "File: src/lib/apis/index.ts -> src/lib/apis/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:  token: string,",
          "324:  url: string,",
          "325:  name: string,",
          "327:  serverData: { openapi: any; info: any; specs: any }",
          "328: ) => {",
          "329:  let error = null;",
          "331:  try {",
          "339:   if (!matchingRoute) {",
          "340:    throw new Error(`No matching route found for operationId: ${name}`);",
          "341:   }",
          "346:   );",
          "348:   if (!methodEntry) {",
          "",
          "[Removed Lines]",
          "326:  params: object,",
          "333:   const matchingRoute = Object.entries(serverData.openapi.paths).find(([path, methods]) => {",
          "334:    return Object.entries(methods).some(",
          "335:     ([method, operation]: any) => operation.operationId === name",
          "336:    );",
          "337:   });",
          "343:   const [route, methods] = matchingRoute;",
          "344:   const methodEntry = Object.entries(methods).find(",
          "345:    ([method, operation]: any) => operation.operationId === name",
          "",
          "[Added Lines]",
          "326:  params: Record<string, any>,",
          "333:   const matchingRoute = Object.entries(serverData.openapi.paths).find(([_, methods]) =>",
          "334:    Object.entries(methods as any).some(([__, operation]: any) => operation.operationId === name)",
          "335:   );",
          "341:   const [routePath, methods] = matchingRoute;",
          "343:   const methodEntry = Object.entries(methods as any).find(",
          "344:    ([_, operation]: any) => operation.operationId === name",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:   const [httpMethod, operation]: [string, any] = methodEntry;",
          "356:   if (operation.parameters) {",
          "359:    });",
          "360:   }",
          "366:   };",
          "368:   let requestOptions: RequestInit = {",
          "",
          "[Removed Lines]",
          "355:   let finalUrl = `${url}${route}`;",
          "357:    Object.entries(params).forEach(([key, value]) => {",
          "358:     finalUrl = finalUrl.replace(`{${key}}`, encodeURIComponent(value as string));",
          "363:   const headers = {",
          "364:    ...(token && { authorization: `Bearer ${token}` }),",
          "365:    'Content-Type': 'application/json'",
          "",
          "[Added Lines]",
          "354:   const pathParams: Record<string, any> = {};",
          "355:   const queryParams: Record<string, any> = {};",
          "356:   let bodyParams: any = {};",
          "359:    operation.parameters.forEach((param: any) => {",
          "360:     const paramName = param.name;",
          "361:     const paramIn = param.in;",
          "362:     if (params.hasOwnProperty(paramName)) {",
          "363:      if (paramIn === 'path') {",
          "364:       pathParams[paramName] = params[paramName];",
          "365:      } else if (paramIn === 'query') {",
          "366:       queryParams[paramName] = params[paramName];",
          "367:      }",
          "368:     }",
          "372:   let finalUrl = `${url}${routePath}`;",
          "375:   Object.entries(pathParams).forEach(([key, value]) => {",
          "376:    finalUrl = finalUrl.replace(new RegExp(`{${key}}`, 'g'), encodeURIComponent(value));",
          "377:   });",
          "380:   if (Object.keys(queryParams).length > 0) {",
          "381:    const queryString = new URLSearchParams(",
          "382:     Object.entries(queryParams).map(([k, v]) => [k, String(v)])",
          "383:    ).toString();",
          "384:    finalUrl += `?${queryString}`;",
          "385:   }",
          "388:   if (operation.requestBody && operation.requestBody.content) {",
          "389:    const contentType = Object.keys(operation.requestBody.content)[0]; // typically \"application/json\"",
          "390:    if (params.body !== undefined) {",
          "391:     bodyParams = params.body; // Assume the provided params has a \"body\" property containing the payload",
          "392:    } else {",
          "394:     throw new Error(`Request body expected for operation '${name}' but none found.`);",
          "395:    }",
          "396:   }",
          "399:   const headers: Record<string, string> = {",
          "400:    'Content-Type': 'application/json',",
          "401:    ...(token && { authorization: `Bearer ${token}` })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:    headers",
          "371:   };",
          "374:   if (['post', 'put', 'patch'].includes(httpMethod.toLowerCase()) && operation.requestBody) {",
          "376:   }",
          "379:   const res = await fetch(finalUrl, requestOptions);",
          "380:   if (!res.ok) {",
          "382:   }",
          "384:   return await res.json();",
          "",
          "[Removed Lines]",
          "375:    requestOptions.body = JSON.stringify(params);",
          "381:    throw new Error(`HTTP error! Status: ${res.status}`);",
          "",
          "[Added Lines]",
          "410:    requestOptions.body = JSON.stringify(bodyParams);",
          "415:    const resText = await res.text();",
          "416:    throw new Error(`HTTP error! Status: ${res.status}. Message: ${resText}`);",
          "",
          "---------------"
        ],
        "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte": [
          "File: src/lib/components/chat/MessageInput.svelte -> src/lib/components/chat/MessageInput.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "999:                return;",
          "1000:               }",
          "1004:               const isCtrlPressed = e.ctrlKey || e.metaKey;",
          "1005:               const enterPressed =",
          "",
          "[Removed Lines]",
          "1002:               console.log('keypress', e);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/routes/+layout.svelte||src/routes/+layout.svelte": [
          "File: src/routes/+layout.svelte -> src/routes/+layout.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   temporaryChatEnabled,",
          "26:   isLastActiveTab,",
          "27:   isApp,",
          "29:  } from '$lib/stores';",
          "30:  import { goto } from '$app/navigation';",
          "31:  import { page } from '$app/stores';",
          "",
          "[Removed Lines]",
          "28:   appInfo",
          "",
          "[Added Lines]",
          "28:   appInfo,",
          "29:   toolServers",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:  };",
          "206:  const executeTool = async (data, cb) => {",
          "211:   if (toolServer) {",
          "212:    const res = await executeToolServer(",
          "",
          "[Removed Lines]",
          "207:   console.log(data);",
          "209:   const toolServer = $settings?.toolServers?.find((server) => server.url === data.server?.url);",
          "",
          "[Added Lines]",
          "208:   const toolServer = $toolServers?.find((server) => server.url === data.server?.url);",
          "210:   console.log('executeTool', data, toolServer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:     data?.name,",
          "216:     data?.params,",
          "217:     toolServer",
          "225:    if (cb) {",
          "226:     cb(JSON.parse(JSON.stringify(res)));",
          "227:    }",
          "",
          "[Removed Lines]",
          "218:    ).catch((error) => {",
          "219:     console.error('executeToolServer', error);",
          "220:     return {",
          "221:      error: error",
          "222:     };",
          "223:    });",
          "",
          "[Added Lines]",
          "219:    );",
          "221:    console.log('executeToolServer', res);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a650d77af46e136b817bb5aa187477488e853c65",
      "candidate_info": {
        "commit_hash": "a650d77af46e136b817bb5aa187477488e853c65",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/a650d77af46e136b817bb5aa187477488e853c65",
        "files": [
          "backend/open_webui/routers/chats.py",
          "backend/open_webui/socket/main.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/chats.py||backend/open_webui/routers/chats.py",
          "backend/open_webui/socket/main.py||backend/open_webui/socket/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/chats.py||backend/open_webui/routers/chats.py": [
          "File: backend/open_webui/routers/chats.py -> backend/open_webui/routers/chats.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "416:     )",
          "418:     if event_emitter:",
          "420:             {",
          "421:                 \"type\": \"chat:message\",",
          "422:                 \"data\": {",
          "",
          "[Removed Lines]",
          "419:         event_emitter(",
          "",
          "[Added Lines]",
          "419:         await event_emitter(",
          "",
          "---------------"
        ],
        "backend/open_webui/socket/main.py||backend/open_webui/socket/main.py": [
          "File: backend/open_webui/socket/main.py -> backend/open_webui/socket/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "272: def get_event_emitter(request_info, update_db=True):",
          "273:     async def __event_emitter__(event_data):",
          "274:         user_id = request_info[\"user_id\"]",
          "275:         session_ids = list(",
          "277:         )",
          "279:         for session_id in session_ids:",
          "",
          "[Removed Lines]",
          "276:             set(USER_POOL.get(user_id, []) + [request_info[\"session_id\"]])",
          "",
          "[Added Lines]",
          "277:             set(",
          "278:                 USER_POOL.get(user_id, [])",
          "279:                 + (",
          "280:                     [request_info.get(\"session_id\")]",
          "281:                     if request_info.get(\"session_id\")",
          "282:                     else []",
          "283:                 )",
          "284:             )",
          "",
          "---------------"
        ]
      }
    }
  ]
}