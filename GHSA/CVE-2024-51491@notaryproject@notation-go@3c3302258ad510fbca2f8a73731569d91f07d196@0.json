{
  "cve_id": "CVE-2024-51491",
  "cve_desc": "notion-go is a collection of libraries for supporting sign and verify OCI artifacts. Based on Notary Project specifications. The issue was identified during Quarkslab's security audit on the Certificate Revocation List (CRL) based revocation check feature.\nAfter retrieving the CRL, notation-go attempts to update the CRL cache using the os.Rename method. However, this operation may fail due to operating system-specific limitations, particularly when the source and destination paths are on different mount points. This failure could lead to an unexpected program termination. In method `crl.(*FileCache).Set`, a temporary file is created in the OS dedicated area (like /tmp for, usually, Linux/Unix). The file is written and then it is tried to move it to the dedicated `notation` cache directory thanks `os.Rename`. As specified in Go documentation, OS specific restriction may apply. When used with Linux OS, it is relying on rename syscall from the libc and as per the documentation, moving a file to a different mountpoint raises an EXDEV error, interpreted as Cross device link not permitted error. Some Linux distribution, like RedHat use a dedicated filesystem (tmpfs), mounted on a specific mountpoint (usually /tmp) for temporary files. When using such OS, revocation check based on CRL will repeatedly crash notation. As a result the signature verification process is aborted as process crashes. This issue has been addressed in version 1.3.0-rc.2 and all users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "notaryproject/notation-go",
  "patch_hash": "3c3302258ad510fbca2f8a73731569d91f07d196",
  "patch_info": {
    "commit_hash": "3c3302258ad510fbca2f8a73731569d91f07d196",
    "repo": "notaryproject/notation-go",
    "commit_url": "https://github.com/notaryproject/notation-go/commit/3c3302258ad510fbca2f8a73731569d91f07d196",
    "files": [
      "internal/file/file.go",
      "internal/file/file_test.go",
      "verifier/crl/crl.go"
    ],
    "message": "fix: OS error when setting CRL cache leads to denial of signature verification\n\nSigned-off-by: Junjie Gao <junjiegao@microsoft.com>\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
    "before_after_code_files": [
      "internal/file/file.go||internal/file/file.go",
      "internal/file/file_test.go||internal/file/file_test.go",
      "verifier/crl/crl.go||verifier/crl/crl.go"
    ]
  },
  "patch_diff": {
    "internal/file/file.go||internal/file/file.go": [
      "File: internal/file/file.go -> internal/file/file.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:  if err != nil {",
      "125:   return fmt.Errorf(\"failed to create temp file: %w\", err)",
      "126:  }",
      "",
      "[Removed Lines]",
      "122: func WriteFile(path string, content []byte) (writeErr error) {",
      "123:  tempFile, err := os.CreateTemp(\"\", tempFileNamePrefix)",
      "",
      "[Added Lines]",
      "129: func WriteFile(tempDir, path string, content []byte) (writeErr error) {",
      "130:  tempFile, err := os.CreateTemp(tempDir, tempFileNamePrefix)",
      "",
      "---------------"
    ],
    "internal/file/file_test.go||internal/file/file_test.go": [
      "File: internal/file/file_test.go -> internal/file/file_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "31:    t.Fatal(err)",
      "32:   }",
      "34:    t.Fatal(err)",
      "35:   }",
      "",
      "[Removed Lines]",
      "33:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "33:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "53:    t.Fatal(err)",
      "54:   }",
      "56:    t.Fatal(err)",
      "57:   }",
      "",
      "[Removed Lines]",
      "55:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "55:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "88:    t.Fatal(err)",
      "89:   }",
      "91:    t.Fatal(err)",
      "92:   }",
      "",
      "[Removed Lines]",
      "90:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "90:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "113:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "114:    t.Fatal(err)",
      "115:   }",
      "117:    t.Fatal(err)",
      "118:   }",
      "",
      "[Removed Lines]",
      "116:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "116:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "139:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "140:    t.Fatal(err)",
      "141:   }",
      "143:    t.Fatal(err)",
      "144:   }",
      "",
      "[Removed Lines]",
      "142:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "142:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "159:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "160:    t.Fatal(err)",
      "161:   }",
      "163:    t.Fatal(err)",
      "164:   }",
      "",
      "[Removed Lines]",
      "162:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "162:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "192:   if err != nil {",
      "193:    t.Fatal(err)",
      "194:   }",
      "196:   if err == nil || !strings.Contains(err.Error(), \"permission denied\") {",
      "197:    t.Fatalf(\"expected permission denied error, but got %s\", err)",
      "198:   }",
      "",
      "[Removed Lines]",
      "195:   err = WriteFile(filepath.Join(tempDir, \"testFile\"), content)",
      "",
      "[Added Lines]",
      "195:   err = WriteFile(tempDir, filepath.Join(tempDir, \"testFile\"), content)",
      "",
      "---------------"
    ],
    "verifier/crl/crl.go||verifier/crl/crl.go": [
      "File: verifier/crl/crl.go -> verifier/crl/crl.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "144:  if err != nil {",
      "145:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
      "146:  }",
      "148:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
      "149:  }",
      "150:  return nil",
      "",
      "[Removed Lines]",
      "147:  if err := file.WriteFile(filepath.Join(c.root, c.fileName(url)), contentBytes); err != nil {",
      "",
      "[Added Lines]",
      "147:  if err := file.WriteFile(c.root, filepath.Join(c.root, c.fileName(url)), contentBytes); err != nil {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0b9f71fba45c86943707ff9ae28f224ea5890ee7",
      "candidate_info": {
        "commit_hash": "0b9f71fba45c86943707ff9ae28f224ea5890ee7",
        "repo": "notaryproject/notation-go",
        "commit_url": "https://github.com/notaryproject/notation-go/commit/0b9f71fba45c86943707ff9ae28f224ea5890ee7",
        "files": [
          "verifier/crl/crl.go"
        ],
        "message": "chore: add crl cache debug logs (#473)\n\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
        "before_after_code_files": [
          "verifier/crl/crl.go||verifier/crl/crl.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/notaryproject/notation-go/pull/487"
        ],
        "olp_code_files": {
          "patch": [
            "verifier/crl/crl.go||verifier/crl/crl.go"
          ],
          "candidate": [
            "verifier/crl/crl.go||verifier/crl/crl.go"
          ]
        }
      },
      "candidate_diff": {
        "verifier/crl/crl.go||verifier/crl/crl.go": [
          "File: verifier/crl/crl.go -> verifier/crl/crl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:    logger.Debugf(\"CRL file cache miss. Key %q does not exist\", url)",
          "89:    return nil, corecrl.ErrCacheMiss",
          "90:   }",
          "91:   return nil, fmt.Errorf(\"failed to get crl bundle from file cache with key %q: %w\", url, err)",
          "92:  }",
          "95:  var content fileCacheContent",
          "96:  if err := json.Unmarshal(contentBytes, &content); err != nil {",
          "97:   return nil, fmt.Errorf(\"failed to decode file retrieved from file cache: %w\", err)",
          "98:  }",
          "99:  var bundle corecrl.Bundle",
          "100:  bundle.BaseCRL, err = x509.ParseRevocationList(content.BaseCRL)",
          "101:  if err != nil {",
          "102:   return nil, fmt.Errorf(\"failed to parse base CRL of file retrieved from file cache: %w\", err)",
          "103:  }",
          "104:  if content.DeltaCRL != nil {",
          "105:   bundle.DeltaCRL, err = x509.ParseRevocationList(content.DeltaCRL)",
          "106:   if err != nil {",
          "107:    return nil, fmt.Errorf(\"failed to parse delta CRL of file retrieved from file cache: %w\", err)",
          "108:   }",
          "109:  }",
          "112:  if err := checkExpiry(ctx, bundle.BaseCRL.NextUpdate); err != nil {",
          "113:   return nil, err",
          "114:  }",
          "115:  if bundle.DeltaCRL != nil {",
          "116:   if err := checkExpiry(ctx, bundle.DeltaCRL.NextUpdate); err != nil {",
          "117:    return nil, err",
          "118:   }",
          "119:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:   logger.Debugf(\"failed to get crl bundle from file cache with key %q: %w\", url, err)",
          "98:   logger.Debugf(\"failed to decode file retrieved from file cache: %w\", err)",
          "104:   logger.Debugf(\"failed to parse base CRL of file retrieved from file cache: %w\", err)",
          "110:    logger.Debugf(\"failed to parse delta CRL of file retrieved from file cache: %w\", err)",
          "117:   logger.Debugf(\"check BaseCRL expiry failed: %w\", err)",
          "122:    logger.Debugf(\"check DeltaCRL expiry failed: %w\", err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:  logger.Debugf(\"Storing crl bundle to file cache with key %q ...\", url)",
          "129:  if bundle == nil {",
          "130:   return errors.New(\"failed to store crl bundle in file cache: bundle cannot be nil\")",
          "131:  }",
          "132:  if bundle.BaseCRL == nil {",
          "133:   return errors.New(\"failed to store crl bundle in file cache: bundle BaseCRL cannot be nil\")",
          "134:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:   logger.Debugln(\"failed to store crl bundle in file cache: bundle cannot be nil\")",
          "140:   logger.Debugln(\"failed to store crl bundle in file cache: bundle BaseCRL cannot be nil\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:  }",
          "143:  contentBytes, err := json.Marshal(content)",
          "144:  if err != nil {",
          "145:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
          "146:  }",
          "147:  if err := file.WriteFile(c.root, filepath.Join(c.root, c.fileName(url)), contentBytes); err != nil {",
          "148:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
          "149:  }",
          "150:  return nil",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:   logger.Debugf(\"failed to store crl bundle in file cache: %w\", err)",
          "157:   logger.Debugf(\"failed to store crl bundle in file cache: %w\", err)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b95c1d54d503d5776fa34e63dd4a9a1a4f397240",
      "candidate_info": {
        "commit_hash": "b95c1d54d503d5776fa34e63dd4a9a1a4f397240",
        "repo": "notaryproject/notation-go",
        "commit_url": "https://github.com/notaryproject/notation-go/commit/b95c1d54d503d5776fa34e63dd4a9a1a4f397240",
        "files": [
          "internal/pkix/fuzz_test.go"
        ],
        "message": "test: add fuzz test (#459)\n\nAdds a fuzz test from cncf-fuzzing:\nhttps://github.com/cncf/cncf-fuzzing/blob/main/projects/notary/fuzz_pkix_test.go\n\nSigned-off-by: Adam Korczynski <adam@adalogics.com>\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
        "before_after_code_files": [
          "internal/pkix/fuzz_test.go||internal/pkix/fuzz_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/notaryproject/notation-go/pull/487"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "internal/pkix/fuzz_test.go||internal/pkix/fuzz_test.go": [
          "File: internal/pkix/fuzz_test.go -> internal/pkix/fuzz_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: package pkix",
          "16: import (",
          "17:  \"testing\"",
          "18: )",
          "20: func FuzzParseDistinguishedName(f *testing.F) {",
          "21:  f.Fuzz(func(t *testing.T, name string) {",
          "22:   _, _ = ParseDistinguishedName(name)",
          "23:  })",
          "24: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2307de5f297b54486a94eb2b9fa7b36c990ec898",
      "candidate_info": {
        "commit_hash": "2307de5f297b54486a94eb2b9fa7b36c990ec898",
        "repo": "notaryproject/notation-go",
        "commit_url": "https://github.com/notaryproject/notation-go/commit/2307de5f297b54486a94eb2b9fa7b36c990ec898",
        "files": [
          "plugin/plugin.go",
          "plugin/plugin_test.go"
        ],
        "message": "chore: Improve error message in case of plugin timeout (#472)\n\nWhen a plugin exceeds the specified timeout or deadline for content\nprocessing, the current error message displayed is ```signal: killed```.\nThis PR updates the error message to a more informative message:\n```[plugin_name] [command_name] command execution timeout: signal:\nkilled```\n\n---------\n\nSigned-off-by: Pritesh Bandi <priteshbandi@gmail.com>\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
        "before_after_code_files": [
          "plugin/plugin.go||plugin/plugin.go",
          "plugin/plugin_test.go||plugin/plugin_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/notaryproject/notation-go/pull/487"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "plugin/plugin.go||plugin/plugin.go": [
          "File: plugin/plugin.go -> plugin/plugin.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:  cmd.Stdout = &stdout",
          "227:  err := cmd.Run()",
          "228:  if err != nil {",
          "229:   return nil, stderr.Bytes(), err",
          "230:  }",
          "231:  return stdout.Bytes(), nil, nil",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:   if errors.Is(ctx.Err(), context.DeadlineExceeded) {",
          "230:    return nil, stderr.Bytes(), fmt.Errorf(\"'%s %s' command execution timeout: %w\", name, string(command), err);",
          "231:   }",
          "",
          "---------------"
        ],
        "plugin/plugin_test.go||plugin/plugin_test.go": [
          "File: plugin/plugin_test.go -> plugin/plugin_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  \"errors\"",
          "20:  \"os\"",
          "21:  \"reflect\"",
          "22:  \"strconv\"",
          "23:  \"strings\"",
          "24:  \"testing\"",
          "26:  \"github.com/notaryproject/notation-go/plugin/proto\"",
          "27: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"runtime\"",
          "26:  \"time\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:  }",
          "182: }",
          "185:  ctx := context.Background()",
          "186:  t.Run(\"plugin directory exists without executable.\", func(t *testing.T) {",
          "187:   p, err := NewCLIPlugin(ctx, \"emptyplugin\", \"./testdata/plugins/emptyplugin/notation-emptyplugin\")",
          "",
          "[Removed Lines]",
          "184: func TestNewCLIPlugin_PathError(t *testing.T) {",
          "",
          "[Added Lines]",
          "186: func TestNewCLIPlugin_Error(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:    t.Errorf(\"NewCLIPlugin() plugin = %v, want nil\", p)",
          "204:   }",
          "205:  })",
          "206: }",
          "208: func TestNewCLIPlugin_ValidError(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:  t.Run(\"plugin timeout error\", func(t *testing.T) {",
          "210:   if runtime.GOOS == \"windows\" {",
          "211:    t.Skip(\"skipping test on Windows\")",
          "212:   }",
          "213:   expectedErrMsg := \"'sleep 2' command execution timeout: signal: killed\"",
          "214:   ctxWithTimout, cancel := context.WithTimeout(ctx, 10 * time.Millisecond)",
          "215:   defer cancel()",
          "217:   var twoSeconds proto.Command",
          "218:   twoSeconds = \"2\"",
          "219:   _, _, err := execCommander{}.Output(ctxWithTimout, \"sleep\", twoSeconds, nil);",
          "220:   if err == nil {",
          "221:    t.Errorf(\"execCommander{}.Output() expected error = %v, got nil\", expectedErrMsg)",
          "222:   }",
          "223:   if err.Error() != expectedErrMsg {",
          "224:    t.Errorf(\"execCommander{}.Output() error = %v, want %v\", err, expectedErrMsg)",
          "225:   }",
          "226:  })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7005a6d13e5ba472d4e166fbb085152f909e102",
      "candidate_info": {
        "commit_hash": "e7005a6d13e5ba472d4e166fbb085152f909e102",
        "repo": "notaryproject/notation-go",
        "commit_url": "https://github.com/notaryproject/notation-go/commit/e7005a6d13e5ba472d4e166fbb085152f909e102",
        "files": [
          ".github/.codecov.yml",
          "example_signWithTimestmap_test.go",
          "go.mod",
          "go.sum",
          "notation.go",
          "signer/signer.go",
          "signer/signer_test.go"
        ],
        "message": "fix: enable timestamping cert chain revocation check during signing (#482)\n\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
        "before_after_code_files": [
          "example_signWithTimestmap_test.go||example_signWithTimestmap_test.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "notation.go||notation.go",
          "signer/signer.go||signer/signer.go",
          "signer/signer_test.go||signer/signer_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/notaryproject/notation-go/pull/487"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "example_signWithTimestmap_test.go||example_signWithTimestmap_test.go": [
          "File: example_signWithTimestmap_test.go -> example_signWithTimestmap_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"oras.land/oras-go/v2/registry/remote\"",
          "24:  \"github.com/notaryproject/notation-core-go/testhelper\"",
          "25:  \"github.com/notaryproject/notation-go\"",
          "26:  \"github.com/notaryproject/notation-go/registry\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:  \"github.com/notaryproject/notation-core-go/revocation\"",
          "25:  \"github.com/notaryproject/notation-core-go/revocation/purpose\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:  tsaRootCAs := x509.NewCertPool()",
          "78:  tsaRootCAs.AddCert(tsaRootCert)",
          "81:  exampleSignOptions := notation.SignOptions{",
          "82:   SignerSignOptions: notation.SignerSignOptions{",
          "86:   },",
          "87:   ArtifactReference: exampleArtifactReference,",
          "88:  }",
          "",
          "[Removed Lines]",
          "83:    SignatureMediaType: exampleSignatureMediaType,",
          "84:    Timestamper:        httpTimestamper,",
          "85:    TSARootCAs:         tsaRootCAs,",
          "",
          "[Added Lines]",
          "83:  tsaRevocationValidator, err := revocation.NewWithOptions(revocation.Options{",
          "84:   CertChainPurpose: purpose.Timestamping,",
          "85:  })",
          "86:  if err != nil {",
          "87:   panic(err) // Handle error",
          "88:  }",
          "93:    SignatureMediaType:     exampleSignatureMediaType,",
          "94:    Timestamper:            httpTimestamper,",
          "95:    TSARootCAs:             tsaRootCAs,",
          "96:    TSARevocationValidator: tsaRevocationValidator,",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: require (",
          "6:  github.com/go-ldap/ldap/v3 v3.4.8",
          "8:  github.com/notaryproject/notation-plugin-framework-go v1.0.0",
          "9:  github.com/notaryproject/tspclient-go v0.2.1-0.20241030015323-90a141e7525c",
          "10:  github.com/opencontainers/go-digest v1.0.0",
          "",
          "[Removed Lines]",
          "7:  github.com/notaryproject/notation-core-go v1.2.0-rc.1.0.20241112001243-33af15a18954",
          "",
          "[Added Lines]",
          "7:  github.com/notaryproject/notation-core-go v1.2.0-rc.1.0.20241129024749-95d89543c9f9",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: github.com/jcmturner/gokrb5/v8 v8.4.4/go.mod h1:1btQEpgT6k+unzCwX1KdWMEwPPkkgBtP+F6aCACiMrs=",
          "33: github.com/jcmturner/rpc/v2 v2.0.3 h1:7FXXj8Ti1IaVFpSAziCZWNzbNuZmnvw/i6CqLNdWfZY=",
          "34: github.com/jcmturner/rpc/v2 v2.0.3/go.mod h1:VUJYCIDm3PVOEHw8sgt091/20OJjskO/YJki3ELg/Hc=",
          "37: github.com/notaryproject/notation-plugin-framework-go v1.0.0 h1:6Qzr7DGXoCgXEQN+1gTZWuJAZvxh3p8Lryjn5FaLzi4=",
          "38: github.com/notaryproject/notation-plugin-framework-go v1.0.0/go.mod h1:RqWSrTOtEASCrGOEffq0n8pSg2KOgKYiWqFWczRSics=",
          "39: github.com/notaryproject/tspclient-go v0.2.1-0.20241030015323-90a141e7525c h1:bX6gGxFw9+DShmYTgbD+vr6neF1SoXIMUU2fDgdLsfA=",
          "",
          "[Removed Lines]",
          "35: github.com/notaryproject/notation-core-go v1.2.0-rc.1.0.20241112001243-33af15a18954 h1:UbjH/ePjxU8jcYMca9NVYqU8Qcr7pP1SKDWCxl++ToA=",
          "36: github.com/notaryproject/notation-core-go v1.2.0-rc.1.0.20241112001243-33af15a18954/go.mod h1:phjvE2bqHsLfJMqMUYqRCqNIH3TQ4GCcFQuEVyQTpDg=",
          "",
          "[Added Lines]",
          "35: github.com/notaryproject/notation-core-go v1.2.0-rc.1.0.20241129024749-95d89543c9f9 h1:FURo9xpGLKmghWCcWypCPQTlcOGKxzayeXacGfb8WUU=",
          "36: github.com/notaryproject/notation-core-go v1.2.0-rc.1.0.20241129024749-95d89543c9f9/go.mod h1:Umjn4NKGmuHpVffMgKVcUnArNG3Qtd3duKYpPILUBg4=",
          "",
          "---------------"
        ],
        "notation.go||notation.go": [
          "File: notation.go -> notation.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  orasRegistry \"oras.land/oras-go/v2/registry\"",
          "30:  \"oras.land/oras-go/v2/registry/remote\"",
          "32:  \"github.com/notaryproject/notation-core-go/signature\"",
          "33:  \"github.com/notaryproject/notation-core-go/signature/cose\"",
          "34:  \"github.com/notaryproject/notation-core-go/signature/jws\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:  \"github.com/notaryproject/notation-core-go/revocation\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:  TSARootCAs *x509.CertPool",
          "70: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:  TSARevocationValidator revocation.Validator",
          "",
          "---------------"
        ],
        "signer/signer.go||signer/signer.go": [
          "File: signer/signer.go -> signer/signer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:    ContentType: envelope.MediaTypePayloadV1,",
          "126:    Content:     payloadBytes,",
          "127:   },",
          "134:  }",
          "",
          "[Removed Lines]",
          "128:   Signer:        s.signer,",
          "129:   SigningTime:   time.Now(),",
          "130:   SigningScheme: signature.SigningSchemeX509,",
          "131:   SigningAgent:  signingAgentId,",
          "132:   Timestamper:   opts.Timestamper,",
          "133:   TSARootCAs:    opts.TSARootCAs,",
          "",
          "[Added Lines]",
          "127:   Signer:                 s.signer,",
          "128:   SigningTime:            time.Now(),",
          "129:   SigningScheme:          signature.SigningSchemeX509,",
          "130:   SigningAgent:           signingAgentId,",
          "131:   Timestamper:            opts.Timestamper,",
          "132:   TSARootCAs:             opts.TSARootCAs,",
          "133:   TSARevocationValidator: opts.TSARevocationValidator,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:  logger.Debugf(\"  Expiry:        %v\", signReq.Expiry)",
          "145:  logger.Debugf(\"  SigningScheme: %v\", signReq.SigningScheme)",
          "146:  logger.Debugf(\"  SigningAgent:  %v\", signReq.SigningAgent)",
          "149:  signReq = signReq.WithContext(ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:  if signReq.Timestamper != nil {",
          "148:   logger.Debug(\"Enabled timestamping\")",
          "149:   if signReq.TSARevocationValidator != nil {",
          "150:    logger.Debug(\"Enabled timestamping certificate chain revocation check\")",
          "151:   }",
          "152:  }",
          "",
          "---------------"
        ],
        "signer/signer_test.go||signer/signer_test.go": [
          "File: signer/signer_test.go -> signer/signer_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  \"testing\"",
          "31:  \"time\"",
          "33:  \"github.com/notaryproject/notation-core-go/signature\"",
          "34:  _ \"github.com/notaryproject/notation-core-go/signature/cose\"",
          "35:  _ \"github.com/notaryproject/notation-core-go/signature/jws\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:  \"github.com/notaryproject/notation-core-go/revocation\"",
          "34:  \"github.com/notaryproject/notation-core-go/revocation/purpose\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:  if err == nil || err.Error() != expectedErrMsg {",
          "258:   t.Fatalf(\"expected %s, but got %s\", expectedErrMsg, err)",
          "259:  }",
          "260: }",
          "262: func TestSignWithoutExpiry(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264:  desc, sOpts = generateSigningContent()",
          "265:  sOpts.SignatureMediaType = envelopeType",
          "266:  sOpts.Timestamper, err = tspclient.NewHTTPTimestamper(nil, rfc3161URL)",
          "267:  if err != nil {",
          "268:   t.Fatal(err)",
          "269:  }",
          "270:  sOpts.TSARootCAs = x509.NewCertPool()",
          "271:  tsaRevocationValidator, err := revocation.NewWithOptions(revocation.Options{",
          "272:   CertChainPurpose: purpose.Timestamping,",
          "273:  })",
          "274:  if err != nil {",
          "275:   t.Fatal(err)",
          "276:  }",
          "277:  sOpts.TSARevocationValidator = tsaRevocationValidator",
          "278:  _, _, err = s.Sign(ctx, desc, sOpts)",
          "279:  expectedErrMsg = \"timestamp: failed to verify signed token: cms verification failure: x509: certificate signed by unknown authority\"",
          "280:  if err == nil || err.Error() != expectedErrMsg {",
          "281:   t.Fatalf(\"expected %s, but got %s\", expectedErrMsg, err)",
          "282:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b21f2f46179dc8ba17374934cbe163adc8a6756",
      "candidate_info": {
        "commit_hash": "5b21f2f46179dc8ba17374934cbe163adc8a6756",
        "repo": "notaryproject/notation-go",
        "commit_url": "https://github.com/notaryproject/notation-go/commit/5b21f2f46179dc8ba17374934cbe163adc8a6756",
        "files": [
          "notation.go",
          "verifier/verifier.go"
        ],
        "message": "perf(log): encode objects only when logged (#481)\n\nFix:\n- replaced `.String()` with the `%v` format to avoid rendering the\nstring before actually logging it.\n\nResolves #480\n\nSigned-off-by: Junjie Gao <junjiegao@microsoft.com>\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
        "before_after_code_files": [
          "notation.go||notation.go",
          "verifier/verifier.go||verifier/verifier.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/notaryproject/notation-go/pull/487"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "notation.go||notation.go": [
          "File: notation.go -> notation.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   }",
          "136:   logger.Warnf(\"Always sign the artifact using digest(`@sha256:...`) rather than a tag(`:%s`) because tags are mutable and a tag reference can point to a different artifact than the one signed\", artifactRef)",
          "138:  }",
          "139:  descToSign, err := addUserMetadataToDescriptor(ctx, targetDesc, signOpts.UserMetadata)",
          "140:  if err != nil {",
          "",
          "[Removed Lines]",
          "137:   logger.Infof(\"Resolved artifact tag `%s` to digest `%s` before signing\", artifactRef, targetDesc.Digest.String())",
          "",
          "[Added Lines]",
          "137:   logger.Infof(\"Resolved artifact tag `%s` to digest `%v` before signing\", artifactRef, targetDesc.Digest)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:  }",
          "379:  if ref.ValidateReferenceAsDigest() != nil {",
          "382:   logger.Warn(\"The resolved digest may not point to the same signed artifact, since tags are mutable\")",
          "383:  } else if ref.Reference != artifactDescriptor.Digest.String() {",
          "384:   return ocispec.Descriptor{}, nil, ErrorSignatureRetrievalFailed{Msg: fmt.Sprintf(\"user input digest %s does not match the resolved digest %s\", ref.Reference, artifactDescriptor.Digest.String())}",
          "",
          "[Removed Lines]",
          "381:   logger.Infof(\"Resolved artifact tag `%s` to digest `%s` before verification\", ref.Reference, artifactDescriptor.Digest.String())",
          "",
          "[Added Lines]",
          "381:   logger.Infof(\"Resolved artifact tag `%s` to digest `%v` before verification\", ref.Reference, artifactDescriptor.Digest)",
          "",
          "---------------"
        ],
        "verifier/verifier.go||verifier/verifier.go": [
          "File: verifier/verifier.go -> verifier/verifier.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "678:   certResult := certResults[i]",
          "679:   if certResult.RevocationMethod == revocationresult.RevocationMethodOCSPFallbackCRL {",
          "682:   }",
          "683:   for _, serverResult := range certResult.ServerResults {",
          "684:    if serverResult.Error != nil {",
          "",
          "[Removed Lines]",
          "681:    logger.Warnf(\"OCSP check failed with unknown error and fallback to CRL check for certificate #%d in chain with subject %v\", (i + 1), cert.Subject.String())",
          "",
          "[Added Lines]",
          "681:    logger.Warnf(\"OCSP check failed with unknown error and fallback to CRL check for certificate #%d in chain with subject %v\", (i + 1), cert.Subject)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "691:      continue",
          "692:     }",
          "694:    }",
          "695:   }",
          "",
          "[Removed Lines]",
          "690:      logger.Debugf(\"Certificate #%d in chain with subject %v encountered an error for revocation method %s at URL %q: %v\", (i + 1), cert.Subject.String(), revocationresult.RevocationMethodOCSP, serverResult.Server, serverResult.Error)",
          "693:     logger.Errorf(\"Certificate #%d in chain with subject %v encountered an error for revocation method %s at URL %q: %v\", (i + 1), cert.Subject.String(), serverResult.RevocationMethod, serverResult.Server, serverResult.Error)",
          "",
          "[Added Lines]",
          "690:      logger.Debugf(\"Certificate #%d in chain with subject %v encountered an error for revocation method %s at URL %q: %v\", (i + 1), cert.Subject, revocationresult.RevocationMethodOCSP, serverResult.Server, serverResult.Error)",
          "693:     logger.Errorf(\"Certificate #%d in chain with subject %v encountered an error for revocation method %s at URL %q: %v\", (i + 1), cert.Subject, serverResult.RevocationMethod, serverResult.Server, serverResult.Error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "706:   }",
          "708:   if i < len(certResults)-1 && certResult.Result == revocationresult.ResultNonRevokable {",
          "710:   }",
          "711:  }",
          "712:  if revokedFound {",
          "",
          "[Removed Lines]",
          "709:    logger.Warnf(\"Certificate #%d in the chain with subject %v neither has an OCSP nor a CRL revocation method.\", (i + 1), cert.Subject.String())",
          "",
          "[Added Lines]",
          "709:    logger.Warnf(\"Certificate #%d in the chain with subject %v neither has an OCSP nor a CRL revocation method.\", (i + 1), cert.Subject)",
          "",
          "---------------"
        ]
      }
    }
  ]
}