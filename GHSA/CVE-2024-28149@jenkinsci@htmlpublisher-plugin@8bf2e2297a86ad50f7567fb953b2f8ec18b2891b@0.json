{
  "cve_id": "CVE-2024-28149",
  "cve_desc": "Jenkins HTML Publisher Plugin 1.16 through 1.32 (both inclusive) does not properly sanitize input, allowing attackers with Item/Configure permission to implement cross-site scripting (XSS) attacks and to determine whether a path on the Jenkins controller file system exists.",
  "repo": "jenkinsci/htmlpublisher-plugin",
  "patch_hash": "8bf2e2297a86ad50f7567fb953b2f8ec18b2891b",
  "patch_info": {
    "commit_hash": "8bf2e2297a86ad50f7567fb953b2f8ec18b2891b",
    "repo": "jenkinsci/htmlpublisher-plugin",
    "commit_url": "https://github.com/jenkinsci/htmlpublisher-plugin/commit/8bf2e2297a86ad50f7567fb953b2f8ec18b2891b",
    "files": [
      "src/main/java/htmlpublisher/HtmlPublisherTarget.java",
      "src/test/java/htmlpublisher/Security3301Test.java",
      "src/test/java/htmlpublisher/Security784Test.java",
      "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/config.xml",
      "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
      "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/test.txt",
      "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/config.xml",
      "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html"
    ],
    "message": "SECURITY-3301",
    "before_after_code_files": [
      "src/main/java/htmlpublisher/HtmlPublisherTarget.java||src/main/java/htmlpublisher/HtmlPublisherTarget.java",
      "src/test/java/htmlpublisher/Security3301Test.java||src/test/java/htmlpublisher/Security3301Test.java",
      "src/test/java/htmlpublisher/Security784Test.java||src/test/java/htmlpublisher/Security784Test.java",
      "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
      "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html"
    ]
  },
  "patch_diff": {
    "src/main/java/htmlpublisher/HtmlPublisherTarget.java||src/main/java/htmlpublisher/HtmlPublisherTarget.java": [
      "File: src/main/java/htmlpublisher/HtmlPublisherTarget.java -> src/main/java/htmlpublisher/HtmlPublisherTarget.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package htmlpublisher;",
      "10: import edu.umd.cs.findbugs.annotations.NonNull;",
      "13: import org.apache.commons.codec.binary.Hex;",
      "14: import org.apache.commons.lang.StringUtils;",
      "15: import org.kohsuke.accmod.Restricted;",
      "",
      "[Removed Lines]",
      "3: import java.io.File;",
      "4: import java.io.IOException;",
      "5: import java.nio.charset.StandardCharsets;",
      "6: import java.util.Objects;",
      "7: import java.util.regex.Matcher;",
      "8: import java.util.regex.Pattern;",
      "11: import javax.servlet.ServletException;",
      "",
      "[Added Lines]",
      "3: import com.infradna.tool.bridge_method_injector.WithBridgeMethods;",
      "5: import hudson.Extension;",
      "6: import hudson.FilePath;",
      "7: import hudson.Util;",
      "8: import hudson.model.AbstractDescribableImpl;",
      "9: import hudson.model.Action;",
      "10: import hudson.model.AbstractItem;",
      "11: import hudson.model.Run;",
      "12: import hudson.model.DirectoryBrowserSupport;",
      "13: import hudson.model.Job;",
      "14: import hudson.model.ProminentProjectAction;",
      "15: import hudson.model.AbstractBuild;",
      "16: import hudson.model.InvisibleAction;",
      "17: import hudson.model.Descriptor;",
      "18: import hudson.util.HttpResponses;",
      "19: import jenkins.model.RunAction2;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "20: import org.kohsuke.stapler.StaplerResponse;",
      "21: import org.owasp.encoder.Encode;",
      "",
      "[Removed Lines]",
      "23: import com.infradna.tool.bridge_method_injector.WithBridgeMethods;",
      "25: import hudson.Extension;",
      "26: import hudson.FilePath;",
      "27: import hudson.Util;",
      "28: import hudson.model.AbstractBuild;",
      "29: import hudson.model.AbstractDescribableImpl;",
      "30: import hudson.model.AbstractItem;",
      "31: import hudson.model.Action;",
      "32: import hudson.model.Descriptor;",
      "33: import hudson.model.DirectoryBrowserSupport;",
      "34: import hudson.model.InvisibleAction;",
      "35: import hudson.model.Job;",
      "36: import hudson.model.ProminentProjectAction;",
      "37: import hudson.model.Run;",
      "38: import hudson.util.HttpResponses;",
      "39: import jenkins.model.RunAction2;",
      "",
      "[Added Lines]",
      "30: import javax.servlet.ServletException;",
      "31: import java.io.File;",
      "32: import java.io.IOException;",
      "33: import java.nio.charset.StandardCharsets;",
      "34: import java.util.Objects;",
      "35: import java.util.regex.Matcher;",
      "36: import java.util.regex.Pattern;",
      "38: import static hudson.Functions.htmlAttributeEscape;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "51:     private final String reportName;",
      "",
      "[Added Lines]",
      "50:     private String reportName;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "183:         this.reportTitles = StringUtils.trim(reportTitles);",
      "184:     }",
      "196:     public String getSanitizedName() {",
      "197:         return sanitizeReportName(this.reportName, getEscapeUnderscores());",
      "",
      "[Removed Lines]",
      "190:     private String getLegacySanitizedName() {",
      "191:         String safeName = this.reportName;",
      "192:         safeName = safeName.replace(\" \", \"_\");",
      "193:         return safeName;",
      "194:     }",
      "",
      "[Added Lines]",
      "186:     public void setReportName(String reportName) {this.reportName = StringUtils.trim(reportName);}",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "313:                 if (run != null) {",
      "314:                     File javadocDir = getBuildArchiveDir(run);",
      "321:                     if (javadocDir.exists()) {",
      "322:                         for (HTMLBuildAction a : run.getActions(HTMLBuildAction.class)) {",
      "323:                             if (a.getHTMLTarget().getReportName().equals(getHTMLTarget().getReportName())) {",
      "",
      "[Removed Lines]",
      "316:                     if (!javadocDir.exists()) {",
      "317:                         javadocDir = getBuildArchiveDir(run, getLegacySanitizedName());",
      "318:                     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "329:                 }",
      "330:             }",
      "333:             File projectArchiveDir = getProjectArchiveDir(this.project);",
      "341:             return projectArchiveDir;",
      "342:         }",
      "",
      "[Removed Lines]",
      "334:             if (projectArchiveDir.exists()) {",
      "335:                 return projectArchiveDir;",
      "336:             }",
      "337:             File legacyProjectArchiveDir = getProjectArchiveDir(this.project, getLegacySanitizedName());",
      "338:             if (legacyProjectArchiveDir.exists()) {",
      "339:                 return legacyProjectArchiveDir;",
      "340:             }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "441:         @Override",
      "442:         protected File dir() {",
      "444:             File buildArchiveDir = getBuildArchiveDir(this.build);",
      "452:             return buildArchiveDir;",
      "453:         }",
      "",
      "[Removed Lines]",
      "445:             if (buildArchiveDir.exists()) {",
      "446:                 return buildArchiveDir;",
      "447:             }",
      "448:             File legacyBuildArchiveDir = getBuildArchiveDir(this.build, getLegacySanitizedName());",
      "449:             if (legacyBuildArchiveDir.exists()) {",
      "450:                 return legacyBuildArchiveDir;",
      "451:             }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/test/java/htmlpublisher/Security3301Test.java||src/test/java/htmlpublisher/Security3301Test.java": [
      "File: src/test/java/htmlpublisher/Security3301Test.java -> src/test/java/htmlpublisher/Security3301Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package htmlpublisher;",
      "3: import hudson.model.FreeStyleProject;",
      "4: import org.junit.Assert;",
      "5: import org.junit.Rule;",
      "6: import org.junit.Test;",
      "7: import org.jvnet.hudson.test.JenkinsRule;",
      "8: import org.jvnet.hudson.test.recipes.LocalData;",
      "10: import java.io.File;",
      "12: import static hudson.Functions.isWindows;",
      "13: import static org.junit.Assume.assumeFalse;",
      "15: public class Security3301Test {",
      "17:     @Rule",
      "18:     public JenkinsRule j = new JenkinsRule();",
      "20:     @Test",
      "21:     @LocalData",
      "22:     public void security3301sanitizeTest() throws Exception {",
      "26:         assumeFalse(isWindows());",
      "28:         FreeStyleProject job = j.jenkins.getItemByFullName(\"testJob\", FreeStyleProject.class);",
      "30:         Assert.assertTrue(new File(job.getRootDir(), \"htmlreports/HTML_20Report\").exists());",
      "32:         j.buildAndAssertSuccess(job);",
      "34:         changeJobReportName(job,\"HTML_20Report/javascript:alert(1)\");",
      "36:         job.save();",
      "38:         j.buildAndAssertSuccess(job);",
      "40:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
      "41:         Assert.assertNotNull(action);",
      "44:         Assert.assertEquals(\"HTML_20Report/javascript:alert(1)\", action.getHTMLTarget().getReportName());",
      "45:         Assert.assertEquals(\"HTML_5f20Report_2fjavascript_3aalert_281_29\", action.getUrlName());",
      "47:         Assert.assertTrue(new File(job.getRootDir(), \"htmlreports/HTML_5f20Report_2fjavascript_3aalert_281_29\").exists());",
      "49:         FreeStyleProject anotherJob = j.jenkins.getItemByFullName(\"anotherJob\", FreeStyleProject.class);",
      "51:         Assert.assertTrue(new File(anotherJob.getRootDir(), \"htmlreports/HTML_20Report\").exists());",
      "53:         j.buildAndAssertSuccess(anotherJob);",
      "55:         changeJobReportName(job,\"../../anotherJob/htmlreports/HTML_20Report\");",
      "57:         job.save();",
      "60:         Assert.assertEquals(\"../../anotherJob/htmlreports/HTML_20Report\", action.getHTMLTarget().getReportName());",
      "61:         Assert.assertEquals(\"_2e_2e_2f_2e_2e_2fanotherJob_2fhtmlreports_2fHTML_5f20Report\", action.getUrlName());",
      "62:         Assert.assertFalse(new File(job.getRootDir(), \"htmlreports/_2e_2e_2f_2e_2e_2fanotherJob_2fhtmlreports_2fHTML_5f20Report/test.txt\").exists());",
      "64:     }",
      "66:     public void changeJobReportName(FreeStyleProject job, String newName) {",
      "67:         for (Object publisher : job.getPublishersList()) {",
      "68:             if (publisher instanceof HtmlPublisher) {",
      "69:                 HtmlPublisher existingPublishHTML = (HtmlPublisher) publisher;",
      "70:                 existingPublishHTML.getReportTargets().get(0).setReportName(newName);",
      "71:             }",
      "72:         }",
      "73:     }",
      "74: }",
      "",
      "---------------"
    ],
    "src/test/java/htmlpublisher/Security784Test.java||src/test/java/htmlpublisher/Security784Test.java": [
      "File: src/test/java/htmlpublisher/Security784Test.java -> src/test/java/htmlpublisher/Security784Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:         Assert.assertTrue(new File(job.getRootDir(), \"htmlreports/foo!!!!bar/index.html\").exists());",
      "32:         JenkinsRule.WebClient client = j.createWebClient();",
      "37:         job.getBuildersList().clear();",
      "38:         String newDate = new Date().toString();",
      "",
      "[Removed Lines]",
      "27:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
      "28:         Assert.assertNotNull(action);",
      "29:         Assert.assertEquals(\"foo!!!!bar\", action.getHTMLTarget().getReportName());",
      "30:         Assert.assertEquals(\"foo!!!!bar\", action.getUrlName()); // legacy",
      "33:         HtmlPage page = client.getPage(job, \"foo!!!!bar/index.html\");",
      "34:         String text = page.getWebResponse().getContentAsString();",
      "35:         Assert.assertEquals(\"Sun Mar 25 15:42:10 CEST 2018\", text.trim());",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "45:         Assert.assertTrue(new File(job.getRootDir(), \"htmlreports/foo_21_21_21_21bar/index.html\").exists());",
      "48:         Assert.assertNotNull(action);",
      "49:         Assert.assertEquals(\"foo!!!!bar\", action.getHTMLTarget().getReportName());",
      "50:         Assert.assertEquals(\"foo_21_21_21_21bar\", action.getUrlName()); // new",
      "53:         Assert.assertEquals(newDate, text.trim());",
      "57:     }",
      "59:     @Test",
      "",
      "[Removed Lines]",
      "47:         action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
      "52:         text = client.goTo(\"job/thejob/foo_21_21_21_21bar/index.html\").getWebResponse().getContentAsString();",
      "56:         Assert.assertTrue(new File(job.getRootDir(), \"htmlreports/foo!!!!bar/index.html\").exists());",
      "",
      "[Added Lines]",
      "39:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
      "44:         String text = client.goTo(\"job/thejob/foo_21_21_21_21bar/index.html\").getWebResponse().getContentAsString();",
      "",
      "---------------"
    ],
    "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html": [
      "File: src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html -> src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"",
      "2: \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
      "4: <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">",
      "5: <head>",
      "6: <meta http-equiv=\"Content-Type\" content=\"text/html\" />",
      "7: <!-- CSS Tabs is licensed under Creative Commons Attribution 3.0 - http://creativecommons.org/licenses/by/3.0/ -->",
      "8: <style type=\"text/css\">",
      "10: body {",
      "11: font: 100% verdana, arial, sans-serif;",
      "12: background-color: #fff;",
      "13: }",
      "22: list-style-type: none;",
      "23: padding: 3px 10px 0px 10px;",
      "24: }",
      "27: display: inline-block;",
      "28: }",
      "33: }",
      "37: padding: 3px 4px;",
      "39: border-bottom: 1px solid #cfc;",
      "43: text-decoration: none;",
      "44: cursor: pointer;",
      "45: }",
      "49: }",
      "54: html, body, div, iframe { margin:0; padding:0; }",
      "55: iframe { display:block; width:100%; border:none; }",
      "57: h1",
      "58: {",
      "59:     display: inline;",
      "60:     float: left;",
      "61:     font-size: small;",
      "62:     margin: 0;",
      "63:     padding: 0 10px;",
      "64: }",
      "66: h2",
      "67: {",
      "68:     display: inline;",
      "69:     float: right;",
      "70:     font-size: small;",
      "71:     margin: 0;",
      "72:     padding: 0 10px;",
      "73: }",
      "75: </style>",
      "77: <script type=\"text/javascript\">",
      "78: function updateBody(tabId, page) {",
      "79:     document.getElementById(selectedTab).setAttribute(\"class\", \"unselected\");",
      "80:     tab = document.getElementById(tabId)",
      "81:     tab.setAttribute(\"class\", \"selected\");",
      "82:     selectedTab = tabId;",
      "83:     iframe = document.getElementById(\"myframe\");",
      "84:     iframe.src = encodeURIComponent(tab.getAttribute(\"value\")).replace(/%2F/g, '/');",
      "85: }",
      "86: function init(tabId){",
      "87:  updateBody(tabId);",
      "88:  updateViewport();",
      "90:  window.onresize = updateViewport;",
      "91: }",
      "93: function updateViewport(){",
      "94:   var viewportheight;",
      "98:   if (typeof window.innerWidth != 'undefined')",
      "99:   {",
      "100:        viewportheight = window.innerHeight",
      "101:   }",
      "105:   else if (typeof document.documentElement != 'undefined'",
      "106:       && typeof document.documentElement.clientWidth !=",
      "107:       'undefined' && document.documentElement.clientWidth != 0)",
      "108:   {",
      "109:         viewportheight = document.documentElement.clientHeight",
      "110:   }",
      "112:   else",
      "113:   {",
      "114:         viewportheight = document.getElementsByTagName('body')[0].clientHeight",
      "115:   }",
      "117:  iframe = document.getElementById(\"myframe\");",
      "118:  iframe.style.height = (viewportheight-30)+'px';",
      "119: }",
      "120: var selectedTab = \"tab1\"",
      "121: </script>",
      "123: </head>",
      "125: <body onload=\"init('tab1');\">",
      "127: <h1><a id=\"hudson_link\" href=\"#\"></a></h1>",
      "128: <h2><a id=\"zip_link\" href=\"#\">Zip</a></h2>",
      "130: <ul id=\"tabnav\">",
      "131: <li id=\"tab1\" class=\"unselected\" onclick=\"updateBody('tab1');\" value=\"test.txt\">test</li>",
      "132: <script type=\"text/javascript\">document.getElementById(\"hudson_link\").innerHTML=\"Back to anotherJob\";</script>",
      "133: <script type=\"text/javascript\">document.getElementById(\"hudson_link\").onclick = function() { history.go(-1); return false; };</script>",
      "134: <script type=\"text/javascript\">document.getElementById(\"zip_link\").href=\"*zip*/HTML_20Report.zip\";</script>",
      "135: </ul>",
      "136: <div>",
      "137: <iframe id=\"myframe\" height=\"100%\" width=\"100%\" frameborder=\"0\"></iframe>",
      "138: </div>",
      "140: </body>",
      "141: </html>",
      "",
      "---------------"
    ],
    "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html": [
      "File: src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html -> src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <script type=\"text/javascript\">",
      "2: function updateBody(tabId, page) {",
      "3:     document.getElementById(selectedTab).setAttribute(\"class\", \"unselected\");",
      "4:     tab = document.getElementById(tabId)",
      "5:     tab.setAttribute(\"class\", \"selected\");",
      "6:     selectedTab = tabId;",
      "7:     iframe = document.getElementById(\"myframe\");",
      "8:     iframe.src = encodeURIComponent(tab.getAttribute(\"value\")).replace(/%2F/g, '/');",
      "9: }",
      "10: function init(tabId){",
      "11:         updateBody(tabId);",
      "12:         updateViewport();",
      "14:         window.onresize = updateViewport;",
      "15: }",
      "17: function updateViewport(){",
      "18:          var viewportheight;",
      "22:          if (typeof window.innerWidth != 'undefined')",
      "23:          {",
      "24:               viewportheight = window.innerHeight",
      "25:          }",
      "29:          else if (typeof document.documentElement != 'undefined'",
      "30:              && typeof document.documentElement.clientWidth !=",
      "31:              'undefined' && document.documentElement.clientWidth != 0)",
      "32:          {",
      "33:                viewportheight = document.documentElement.clientHeight",
      "34:          }",
      "36:          else",
      "37:          {",
      "38:                viewportheight = document.getElementsByTagName('body')[0].clientHeight",
      "39:          }",
      "41:         iframe = document.getElementById(\"myframe\");",
      "42:         iframe.style.height = (viewportheight-30)+'px';",
      "43: }",
      "44: var selectedTab = \"tab1\"",
      "45: </script>",
      "47: </head>",
      "49: <body onload=\"init('tab1');\">",
      "51: <h1><a id=\"hudson_link\" href=\"#\"></a></h1>",
      "52: <h2><a id=\"zip_link\" href=\"#\">Zip</a></h2>",
      "54: <ul id=\"tabnav\">",
      "55:     <script type=\"text/javascript\">document.getElementById(\"hudson_link\").innerHTML=\"Back to testJob\";</script>",
      "56:     <script type=\"text/javascript\">document.getElementById(\"hudson_link\").onclick = function() { history.go(-1); return false; };</script>",
      "57:     <script type=\"text/javascript\">document.getElementById(\"zip_link\").href=\"*zip*/HTML_5f20Report_2fjavascript_3aalert_281_29.zip\";</script>",
      "58: </ul>",
      "59: <div>",
      "60:     <iframe id=\"myframe\" height=\"100%\" width=\"100%\" frameborder=\"0\"></iframe>",
      "61: </div>",
      "63: </body>",
      "64: </html>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3d6bc7dbd39ab7855c102eeeca7da1fef265a8c",
      "candidate_info": {
        "commit_hash": "e3d6bc7dbd39ab7855c102eeeca7da1fef265a8c",
        "repo": "jenkinsci/htmlpublisher-plugin",
        "commit_url": "https://github.com/jenkinsci/htmlpublisher-plugin/commit/e3d6bc7dbd39ab7855c102eeeca7da1fef265a8c",
        "files": [
          "pom.xml",
          "src/main/java/htmlpublisher/HtmlPublisherTarget.java"
        ],
        "message": "Migrate from EE 8 to EE 9 (#320)",
        "before_after_code_files": [
          "src/main/java/htmlpublisher/HtmlPublisherTarget.java||src/main/java/htmlpublisher/HtmlPublisherTarget.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/htmlpublisher/HtmlPublisherTarget.java||src/main/java/htmlpublisher/HtmlPublisherTarget.java"
          ],
          "candidate": [
            "src/main/java/htmlpublisher/HtmlPublisherTarget.java||src/main/java/htmlpublisher/HtmlPublisherTarget.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/htmlpublisher/HtmlPublisherTarget.java||src/main/java/htmlpublisher/HtmlPublisherTarget.java": [
          "File: src/main/java/htmlpublisher/HtmlPublisherTarget.java -> src/main/java/htmlpublisher/HtmlPublisherTarget.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "24: import org.kohsuke.stapler.DataBoundConstructor;",
          "25: import org.kohsuke.stapler.DataBoundSetter;",
          "28: import org.owasp.encoder.Encode;",
          "31: import java.io.File;",
          "32: import java.io.IOException;",
          "33: import java.nio.charset.StandardCharsets;",
          "",
          "[Removed Lines]",
          "26: import org.kohsuke.stapler.StaplerRequest;",
          "27: import org.kohsuke.stapler.StaplerResponse;",
          "30: import javax.servlet.ServletException;",
          "",
          "[Added Lines]",
          "26: import org.kohsuke.stapler.StaplerRequest2;",
          "27: import org.kohsuke.stapler.StaplerResponse2;",
          "30: import jakarta.servlet.ServletException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288:             DirectoryBrowserSupport dbs = new DirectoryBrowserSupport(this, new FilePath(this.dir()), this.getTitle(), \"symbol-document-text\", false);",
          "289:             if (req.getRestOfPath().isEmpty()) {",
          "290:                 throw HttpResponses.forwardToView(this, \"index.jelly\");",
          "",
          "[Removed Lines]",
          "287:         public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {",
          "",
          "[Added Lines]",
          "287:         public void doDynamic(StaplerRequest2 req, StaplerResponse2 rsp) throws IOException, ServletException {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "374642b835e2fc2ad8d3e4455278b55f320bc027",
      "candidate_info": {
        "commit_hash": "374642b835e2fc2ad8d3e4455278b55f320bc027",
        "repo": "jenkinsci/htmlpublisher-plugin",
        "commit_url": "https://github.com/jenkinsci/htmlpublisher-plugin/commit/374642b835e2fc2ad8d3e4455278b55f320bc027",
        "files": [
          "src/main/java/htmlpublisher/HtmlPublisherTarget.java",
          "src/test/java/htmlpublisher/Security3301Test.java",
          "src/test/java/htmlpublisher/Security784Test.java",
          "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/config.xml",
          "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
          "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/test.txt",
          "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/config.xml",
          "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html"
        ],
        "message": "SECURITY-3301",
        "before_after_code_files": [
          "src/main/java/htmlpublisher/HtmlPublisherTarget.java||src/main/java/htmlpublisher/HtmlPublisherTarget.java",
          "src/test/java/htmlpublisher/Security3301Test.java||src/test/java/htmlpublisher/Security3301Test.java",
          "src/test/java/htmlpublisher/Security784Test.java||src/test/java/htmlpublisher/Security784Test.java",
          "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
          "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/htmlpublisher/HtmlPublisherTarget.java||src/main/java/htmlpublisher/HtmlPublisherTarget.java",
            "src/test/java/htmlpublisher/Security3301Test.java||src/test/java/htmlpublisher/Security3301Test.java",
            "src/test/java/htmlpublisher/Security784Test.java||src/test/java/htmlpublisher/Security784Test.java",
            "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
            "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html"
          ],
          "candidate": [
            "src/main/java/htmlpublisher/HtmlPublisherTarget.java||src/main/java/htmlpublisher/HtmlPublisherTarget.java",
            "src/test/java/htmlpublisher/Security3301Test.java||src/test/java/htmlpublisher/Security3301Test.java",
            "src/test/java/htmlpublisher/Security784Test.java||src/test/java/htmlpublisher/Security784Test.java",
            "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
            "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/htmlpublisher/HtmlPublisherTarget.java||src/main/java/htmlpublisher/HtmlPublisherTarget.java": [
          "File: src/main/java/htmlpublisher/HtmlPublisherTarget.java -> src/main/java/htmlpublisher/HtmlPublisherTarget.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package htmlpublisher;",
          "10: import edu.umd.cs.findbugs.annotations.NonNull;",
          "13: import org.apache.commons.codec.binary.Hex;",
          "14: import org.apache.commons.lang.StringUtils;",
          "15: import org.kohsuke.accmod.Restricted;",
          "",
          "[Removed Lines]",
          "3: import java.io.File;",
          "4: import java.io.IOException;",
          "5: import java.nio.charset.StandardCharsets;",
          "6: import java.util.Objects;",
          "7: import java.util.regex.Matcher;",
          "8: import java.util.regex.Pattern;",
          "11: import javax.servlet.ServletException;",
          "",
          "[Added Lines]",
          "3: import com.infradna.tool.bridge_method_injector.WithBridgeMethods;",
          "5: import hudson.Extension;",
          "6: import hudson.FilePath;",
          "7: import hudson.Util;",
          "8: import hudson.model.AbstractDescribableImpl;",
          "9: import hudson.model.Action;",
          "10: import hudson.model.AbstractItem;",
          "11: import hudson.model.Run;",
          "12: import hudson.model.DirectoryBrowserSupport;",
          "13: import hudson.model.Job;",
          "14: import hudson.model.ProminentProjectAction;",
          "15: import hudson.model.AbstractBuild;",
          "16: import hudson.model.InvisibleAction;",
          "17: import hudson.model.Descriptor;",
          "18: import hudson.util.HttpResponses;",
          "19: import jenkins.model.RunAction2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: import org.kohsuke.stapler.StaplerResponse;",
          "21: import org.owasp.encoder.Encode;",
          "",
          "[Removed Lines]",
          "23: import com.infradna.tool.bridge_method_injector.WithBridgeMethods;",
          "25: import hudson.Extension;",
          "26: import hudson.FilePath;",
          "27: import hudson.Util;",
          "28: import hudson.model.AbstractBuild;",
          "29: import hudson.model.AbstractDescribableImpl;",
          "30: import hudson.model.AbstractItem;",
          "31: import hudson.model.Action;",
          "32: import hudson.model.Descriptor;",
          "33: import hudson.model.DirectoryBrowserSupport;",
          "34: import hudson.model.InvisibleAction;",
          "35: import hudson.model.Job;",
          "36: import hudson.model.ProminentProjectAction;",
          "37: import hudson.model.Run;",
          "38: import hudson.util.HttpResponses;",
          "39: import jenkins.model.RunAction2;",
          "",
          "[Added Lines]",
          "30: import javax.servlet.ServletException;",
          "31: import java.io.File;",
          "32: import java.io.IOException;",
          "33: import java.nio.charset.StandardCharsets;",
          "34: import java.util.Objects;",
          "35: import java.util.regex.Matcher;",
          "36: import java.util.regex.Pattern;",
          "38: import static hudson.Functions.htmlAttributeEscape;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "51:     private final String reportName;",
          "",
          "[Added Lines]",
          "50:     private String reportName;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:         this.reportTitles = StringUtils.trim(reportTitles);",
          "184:     }",
          "196:     public String getSanitizedName() {",
          "197:         return sanitizeReportName(this.reportName, getEscapeUnderscores());",
          "",
          "[Removed Lines]",
          "190:     private String getLegacySanitizedName() {",
          "191:         String safeName = this.reportName;",
          "192:         safeName = safeName.replace(\" \", \"_\");",
          "193:         return safeName;",
          "194:     }",
          "",
          "[Added Lines]",
          "186:     public void setReportName(String reportName) {this.reportName = StringUtils.trim(reportName);}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "313:                 if (run != null) {",
          "314:                     File javadocDir = getBuildArchiveDir(run);",
          "321:                     if (javadocDir.exists()) {",
          "322:                         for (HTMLBuildAction a : run.getActions(HTMLBuildAction.class)) {",
          "323:                             if (a.getHTMLTarget().getReportName().equals(getHTMLTarget().getReportName())) {",
          "",
          "[Removed Lines]",
          "316:                     if (!javadocDir.exists()) {",
          "317:                         javadocDir = getBuildArchiveDir(run, getLegacySanitizedName());",
          "318:                     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "329:                 }",
          "330:             }",
          "333:             File projectArchiveDir = getProjectArchiveDir(this.project);",
          "341:             return projectArchiveDir;",
          "342:         }",
          "",
          "[Removed Lines]",
          "334:             if (projectArchiveDir.exists()) {",
          "335:                 return projectArchiveDir;",
          "336:             }",
          "337:             File legacyProjectArchiveDir = getProjectArchiveDir(this.project, getLegacySanitizedName());",
          "338:             if (legacyProjectArchiveDir.exists()) {",
          "339:                 return legacyProjectArchiveDir;",
          "340:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "441:         @Override",
          "442:         protected File dir() {",
          "444:             File buildArchiveDir = getBuildArchiveDir(this.build);",
          "452:             return buildArchiveDir;",
          "453:         }",
          "",
          "[Removed Lines]",
          "445:             if (buildArchiveDir.exists()) {",
          "446:                 return buildArchiveDir;",
          "447:             }",
          "448:             File legacyBuildArchiveDir = getBuildArchiveDir(this.build, getLegacySanitizedName());",
          "449:             if (legacyBuildArchiveDir.exists()) {",
          "450:                 return legacyBuildArchiveDir;",
          "451:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test/java/htmlpublisher/Security3301Test.java||src/test/java/htmlpublisher/Security3301Test.java": [
          "File: src/test/java/htmlpublisher/Security3301Test.java -> src/test/java/htmlpublisher/Security3301Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package htmlpublisher;",
          "3: import hudson.model.FreeStyleProject;",
          "4: import org.junit.Assert;",
          "5: import org.junit.Rule;",
          "6: import org.junit.Test;",
          "7: import org.jvnet.hudson.test.JenkinsRule;",
          "8: import org.jvnet.hudson.test.recipes.LocalData;",
          "10: import java.io.File;",
          "12: import static hudson.Functions.isWindows;",
          "13: import static org.junit.Assume.assumeFalse;",
          "15: public class Security3301Test {",
          "17:     @Rule",
          "18:     public JenkinsRule j = new JenkinsRule();",
          "20:     @Test",
          "21:     @LocalData",
          "22:     public void security3301sanitizeTest() throws Exception {",
          "26:         assumeFalse(isWindows());",
          "28:         FreeStyleProject job = j.jenkins.getItemByFullName(\"testJob\", FreeStyleProject.class);",
          "30:         Assert.assertTrue(new File(job.getRootDir(), \"htmlreports/HTML_20Report\").exists());",
          "32:         j.buildAndAssertSuccess(job);",
          "34:         changeJobReportName(job,\"HTML_20Report/javascript:alert(1)\");",
          "36:         job.save();",
          "38:         j.buildAndAssertSuccess(job);",
          "40:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
          "41:         Assert.assertNotNull(action);",
          "44:         Assert.assertEquals(\"HTML_20Report/javascript:alert(1)\", action.getHTMLTarget().getReportName());",
          "45:         Assert.assertEquals(\"HTML_5f20Report_2fjavascript_3aalert_281_29\", action.getUrlName());",
          "47:         Assert.assertTrue(new File(job.getRootDir(), \"htmlreports/HTML_5f20Report_2fjavascript_3aalert_281_29\").exists());",
          "49:         FreeStyleProject anotherJob = j.jenkins.getItemByFullName(\"anotherJob\", FreeStyleProject.class);",
          "51:         Assert.assertTrue(new File(anotherJob.getRootDir(), \"htmlreports/HTML_20Report\").exists());",
          "53:         j.buildAndAssertSuccess(anotherJob);",
          "55:         changeJobReportName(job,\"../../anotherJob/htmlreports/HTML_20Report\");",
          "57:         job.save();",
          "60:         Assert.assertEquals(\"../../anotherJob/htmlreports/HTML_20Report\", action.getHTMLTarget().getReportName());",
          "61:         Assert.assertEquals(\"_2e_2e_2f_2e_2e_2fanotherJob_2fhtmlreports_2fHTML_5f20Report\", action.getUrlName());",
          "62:         Assert.assertFalse(new File(job.getRootDir(), \"htmlreports/_2e_2e_2f_2e_2e_2fanotherJob_2fhtmlreports_2fHTML_5f20Report/test.txt\").exists());",
          "64:     }",
          "66:     public void changeJobReportName(FreeStyleProject job, String newName) {",
          "67:         for (Object publisher : job.getPublishersList()) {",
          "68:             if (publisher instanceof HtmlPublisher) {",
          "69:                 HtmlPublisher existingPublishHTML = (HtmlPublisher) publisher;",
          "70:                 existingPublishHTML.getReportTargets().get(0).setReportName(newName);",
          "71:             }",
          "72:         }",
          "73:     }",
          "74: }",
          "",
          "---------------"
        ],
        "src/test/java/htmlpublisher/Security784Test.java||src/test/java/htmlpublisher/Security784Test.java": [
          "File: src/test/java/htmlpublisher/Security784Test.java -> src/test/java/htmlpublisher/Security784Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:         Assert.assertTrue(new File(job.getRootDir(), \"htmlreports/foo!!!!bar/index.html\").exists());",
          "32:         JenkinsRule.WebClient client = j.createWebClient();",
          "37:         job.getBuildersList().clear();",
          "38:         String newDate = new Date().toString();",
          "",
          "[Removed Lines]",
          "27:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
          "28:         Assert.assertNotNull(action);",
          "29:         Assert.assertEquals(\"foo!!!!bar\", action.getHTMLTarget().getReportName());",
          "30:         Assert.assertEquals(\"foo!!!!bar\", action.getUrlName()); // legacy",
          "33:         HtmlPage page = client.getPage(job, \"foo!!!!bar/index.html\");",
          "34:         String text = page.getWebResponse().getContentAsString();",
          "35:         Assert.assertEquals(\"Sun Mar 25 15:42:10 CEST 2018\", text.trim());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:         Assert.assertTrue(new File(job.getRootDir(), \"htmlreports/foo_21_21_21_21bar/index.html\").exists());",
          "48:         Assert.assertNotNull(action);",
          "49:         Assert.assertEquals(\"foo!!!!bar\", action.getHTMLTarget().getReportName());",
          "50:         Assert.assertEquals(\"foo_21_21_21_21bar\", action.getUrlName()); // new",
          "53:         Assert.assertEquals(newDate, text.trim());",
          "57:     }",
          "59:     @Test",
          "",
          "[Removed Lines]",
          "47:         action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
          "52:         text = client.goTo(\"job/thejob/foo_21_21_21_21bar/index.html\").getWebResponse().getContentAsString();",
          "56:         Assert.assertTrue(new File(job.getRootDir(), \"htmlreports/foo!!!!bar/index.html\").exists());",
          "",
          "[Added Lines]",
          "39:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
          "44:         String text = client.goTo(\"job/thejob/foo_21_21_21_21bar/index.html\").getWebResponse().getContentAsString();",
          "",
          "---------------"
        ],
        "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html": [
          "File: src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html -> src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/anotherJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"",
          "2: \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
          "4: <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">",
          "5: <head>",
          "6: <meta http-equiv=\"Content-Type\" content=\"text/html\" />",
          "7: <!-- CSS Tabs is licensed under Creative Commons Attribution 3.0 - http://creativecommons.org/licenses/by/3.0/ -->",
          "8: <style type=\"text/css\">",
          "10: body {",
          "11: font: 100% verdana, arial, sans-serif;",
          "12: background-color: #fff;",
          "13: }",
          "22: list-style-type: none;",
          "23: padding: 3px 10px 0px 10px;",
          "24: }",
          "27: display: inline-block;",
          "28: }",
          "33: }",
          "37: padding: 3px 4px;",
          "39: border-bottom: 1px solid #cfc;",
          "43: text-decoration: none;",
          "44: cursor: pointer;",
          "45: }",
          "49: }",
          "54: html, body, div, iframe { margin:0; padding:0; }",
          "55: iframe { display:block; width:100%; border:none; }",
          "57: h1",
          "58: {",
          "59:     display: inline;",
          "60:     float: left;",
          "61:     font-size: small;",
          "62:     margin: 0;",
          "63:     padding: 0 10px;",
          "64: }",
          "66: h2",
          "67: {",
          "68:     display: inline;",
          "69:     float: right;",
          "70:     font-size: small;",
          "71:     margin: 0;",
          "72:     padding: 0 10px;",
          "73: }",
          "75: </style>",
          "77: <script type=\"text/javascript\">",
          "78: function updateBody(tabId, page) {",
          "79:     document.getElementById(selectedTab).setAttribute(\"class\", \"unselected\");",
          "80:     tab = document.getElementById(tabId)",
          "81:     tab.setAttribute(\"class\", \"selected\");",
          "82:     selectedTab = tabId;",
          "83:     iframe = document.getElementById(\"myframe\");",
          "84:     iframe.src = encodeURIComponent(tab.getAttribute(\"value\")).replace(/%2F/g, '/');",
          "85: }",
          "86: function init(tabId){",
          "87:  updateBody(tabId);",
          "88:  updateViewport();",
          "90:  window.onresize = updateViewport;",
          "91: }",
          "93: function updateViewport(){",
          "94:   var viewportheight;",
          "98:   if (typeof window.innerWidth != 'undefined')",
          "99:   {",
          "100:        viewportheight = window.innerHeight",
          "101:   }",
          "105:   else if (typeof document.documentElement != 'undefined'",
          "106:       && typeof document.documentElement.clientWidth !=",
          "107:       'undefined' && document.documentElement.clientWidth != 0)",
          "108:   {",
          "109:         viewportheight = document.documentElement.clientHeight",
          "110:   }",
          "112:   else",
          "113:   {",
          "114:         viewportheight = document.getElementsByTagName('body')[0].clientHeight",
          "115:   }",
          "117:  iframe = document.getElementById(\"myframe\");",
          "118:  iframe.style.height = (viewportheight-30)+'px';",
          "119: }",
          "120: var selectedTab = \"tab1\"",
          "121: </script>",
          "123: </head>",
          "125: <body onload=\"init('tab1');\">",
          "127: <h1><a id=\"hudson_link\" href=\"#\"></a></h1>",
          "128: <h2><a id=\"zip_link\" href=\"#\">Zip</a></h2>",
          "130: <ul id=\"tabnav\">",
          "131: <li id=\"tab1\" class=\"unselected\" onclick=\"updateBody('tab1');\" value=\"test.txt\">test</li>",
          "132: <script type=\"text/javascript\">document.getElementById(\"hudson_link\").innerHTML=\"Back to anotherJob\";</script>",
          "133: <script type=\"text/javascript\">document.getElementById(\"hudson_link\").onclick = function() { history.go(-1); return false; };</script>",
          "134: <script type=\"text/javascript\">document.getElementById(\"zip_link\").href=\"*zip*/HTML_20Report.zip\";</script>",
          "135: </ul>",
          "136: <div>",
          "137: <iframe id=\"myframe\" height=\"100%\" width=\"100%\" frameborder=\"0\"></iframe>",
          "138: </div>",
          "140: </body>",
          "141: </html>",
          "",
          "---------------"
        ],
        "src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html": [
          "File: src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html -> src/test/resources/htmlpublisher/Security3301Test/security3301sanitizeTest/jobs/testJob/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <script type=\"text/javascript\">",
          "2: function updateBody(tabId, page) {",
          "3:     document.getElementById(selectedTab).setAttribute(\"class\", \"unselected\");",
          "4:     tab = document.getElementById(tabId)",
          "5:     tab.setAttribute(\"class\", \"selected\");",
          "6:     selectedTab = tabId;",
          "7:     iframe = document.getElementById(\"myframe\");",
          "8:     iframe.src = encodeURIComponent(tab.getAttribute(\"value\")).replace(/%2F/g, '/');",
          "9: }",
          "10: function init(tabId){",
          "11:         updateBody(tabId);",
          "12:         updateViewport();",
          "14:         window.onresize = updateViewport;",
          "15: }",
          "17: function updateViewport(){",
          "18:          var viewportheight;",
          "22:          if (typeof window.innerWidth != 'undefined')",
          "23:          {",
          "24:               viewportheight = window.innerHeight",
          "25:          }",
          "29:          else if (typeof document.documentElement != 'undefined'",
          "30:              && typeof document.documentElement.clientWidth !=",
          "31:              'undefined' && document.documentElement.clientWidth != 0)",
          "32:          {",
          "33:                viewportheight = document.documentElement.clientHeight",
          "34:          }",
          "36:          else",
          "37:          {",
          "38:                viewportheight = document.getElementsByTagName('body')[0].clientHeight",
          "39:          }",
          "41:         iframe = document.getElementById(\"myframe\");",
          "42:         iframe.style.height = (viewportheight-30)+'px';",
          "43: }",
          "44: var selectedTab = \"tab1\"",
          "45: </script>",
          "47: </head>",
          "49: <body onload=\"init('tab1');\">",
          "51: <h1><a id=\"hudson_link\" href=\"#\"></a></h1>",
          "52: <h2><a id=\"zip_link\" href=\"#\">Zip</a></h2>",
          "54: <ul id=\"tabnav\">",
          "55:     <script type=\"text/javascript\">document.getElementById(\"hudson_link\").innerHTML=\"Back to testJob\";</script>",
          "56:     <script type=\"text/javascript\">document.getElementById(\"hudson_link\").onclick = function() { history.go(-1); return false; };</script>",
          "57:     <script type=\"text/javascript\">document.getElementById(\"zip_link\").href=\"*zip*/HTML_5f20Report_2fjavascript_3aalert_281_29.zip\";</script>",
          "58: </ul>",
          "59: <div>",
          "60:     <iframe id=\"myframe\" height=\"100%\" width=\"100%\" frameborder=\"0\"></iframe>",
          "61: </div>",
          "63: </body>",
          "64: </html>",
          "",
          "---------------"
        ]
      }
    }
  ]
}