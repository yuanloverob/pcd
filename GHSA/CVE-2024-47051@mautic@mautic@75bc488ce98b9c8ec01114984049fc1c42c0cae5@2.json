{
  "cve_id": "CVE-2024-47051",
  "cve_desc": "This advisory addresses two critical security vulnerabilities present in Mautic versions before 5.2.3. These vulnerabilities could be exploited by authenticated users.\n\n  *  Remote Code Execution (RCE) via Asset Upload:\u00a0A Remote Code Execution vulnerability has been identified in the asset upload functionality. Insufficient enforcement of allowed file extensions allows an attacker to bypass restrictions and upload executable files, such as PHP scripts.\n\n\n  *  Path Traversal File Deletion:\u00a0A Path Traversal vulnerability exists in the upload validation process. Due to improper handling of path components, an authenticated user can manipulate the file deletion process to delete arbitrary files on the host system.",
  "repo": "mautic/mautic",
  "patch_hash": "75bc488ce98b9c8ec01114984049fc1c42c0cae5",
  "patch_info": {
    "commit_hash": "75bc488ce98b9c8ec01114984049fc1c42c0cae5",
    "repo": "mautic/mautic",
    "commit_url": "https://github.com/mautic/mautic/commit/75bc488ce98b9c8ec01114984049fc1c42c0cae5",
    "files": [
      "app/bundles/AssetBundle/Config/config.php",
      "app/bundles/AssetBundle/Controller/UploadController.php",
      "app/bundles/AssetBundle/Entity/Asset.php",
      "app/bundles/AssetBundle/EventListener/UploadSubscriber.php",
      "app/bundles/AssetBundle/Form/Type/AssetType.php",
      "app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php",
      "app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php",
      "app/bundles/AssetBundle/Translations/en_US/messages.ini",
      "app/bundles/AssetBundle/Translations/en_US/validators.ini"
    ],
    "message": "Merge pull request from GHSA-73gx-x7r9-77x2",
    "before_after_code_files": [
      "app/bundles/AssetBundle/Config/config.php||app/bundles/AssetBundle/Config/config.php",
      "app/bundles/AssetBundle/Controller/UploadController.php||app/bundles/AssetBundle/Controller/UploadController.php",
      "app/bundles/AssetBundle/Entity/Asset.php||app/bundles/AssetBundle/Entity/Asset.php",
      "app/bundles/AssetBundle/EventListener/UploadSubscriber.php||app/bundles/AssetBundle/EventListener/UploadSubscriber.php",
      "app/bundles/AssetBundle/Form/Type/AssetType.php||app/bundles/AssetBundle/Form/Type/AssetType.php",
      "app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php||app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php",
      "app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php||app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php"
    ]
  },
  "patch_diff": {
    "app/bundles/AssetBundle/Config/config.php||app/bundles/AssetBundle/Config/config.php": [
      "File: app/bundles/AssetBundle/Config/config.php -> app/bundles/AssetBundle/Config/config.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "67:                 'arguments' => 'mautic.factory',",
      "68:             ],",
      "71:         ],",
      "72:         'fixtures' => [",
      "73:             'mautic.asset.fixture.asset' => [",
      "",
      "[Removed Lines]",
      "70:             'oneup_uploader.controller.dropzone.class' => Mautic\\AssetBundle\\Controller\\UploadController::class,",
      "",
      "[Added Lines]",
      "70:             'oneup_uploader.controller.dropzone.class' => [",
      "71:                 'class'     => Mautic\\AssetBundle\\Controller\\UploadController::class,",
      "72:             ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "82:         'max_size'            => '6',",
      "83:         'allowed_extensions'  => ['csv', 'doc', 'docx', 'epub', 'gif', 'jpg', 'jpeg', 'mpg', 'mpeg', 'mp3', 'odt', 'odp', 'ods', 'pdf', 'png', 'ppt', 'pptx', 'tif', 'tiff', 'txt', 'xls', 'xlsx', 'wav'],",
      "84:         'streamed_extensions' => ['gif', 'jpg', 'jpeg', 'mpg', 'mpeg', 'mp3', 'pdf', 'png', 'wav'],",
      "85:     ],",
      "86: ];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:         'allowed_mimetypes'   => [",
      "88:             'csv'  => 'text/csv',",
      "89:             'doc'  => 'application/msword',",
      "90:             'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',",
      "91:             'epub' => 'application/epub+zip',",
      "92:             'gif'  => 'image/gif',",
      "93:             'jpg'  => 'image/jpeg',",
      "94:             'jpeg' => 'image/jpeg',",
      "95:             'mpg'  => 'video/mpeg',",
      "96:             'mpeg' => 'video/mpeg',",
      "97:             'mp3'  => 'audio/mpeg',",
      "98:             'odt'  => 'application/vnd.oasis.opendocument.text',",
      "99:             'odp'  => 'application/vnd.oasis.opendocument.presentation',",
      "100:             'ods'  => 'application/vnd.oasis.opendocument.spreadsheet',",
      "101:             'pdf'  => 'application/pdf',",
      "102:             'png'  => 'image/png',",
      "103:             'ppt'  => 'application/vnd.ms-powerpoint',",
      "104:             'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation',",
      "105:             'tif'  => 'image/tiff',",
      "106:             'tiff' => 'image/tiff',",
      "107:             'txt'  => 'text/plain',",
      "108:             'xls'  => 'application/vnd.ms-excel',",
      "109:             'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',",
      "110:             'wav'  => 'audio/wav',",
      "111:         ],",
      "",
      "---------------"
    ],
    "app/bundles/AssetBundle/Controller/UploadController.php||app/bundles/AssetBundle/Controller/UploadController.php": [
      "File: app/bundles/AssetBundle/Controller/UploadController.php -> app/bundles/AssetBundle/Controller/UploadController.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "17:         $request  = $this->getRequest();",
      "18:         $response = new EmptyResponse();",
      "19:         $files    = $this->getFiles($request->files);",
      "21:         if (!empty($files)) {",
      "22:             foreach ($files as $file) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20:         $this->setTranslator($this->container->get('translator'));",
      "",
      "---------------"
    ],
    "app/bundles/AssetBundle/Entity/Asset.php||app/bundles/AssetBundle/Entity/Asset.php": [
      "File: app/bundles/AssetBundle/Entity/Asset.php -> app/bundles/AssetBundle/Entity/Asset.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: use Mautic\\CoreBundle\\Doctrine\\Mapping\\ClassMetadataBuilder;",
      "9: use Mautic\\CoreBundle\\Entity\\FormEntity;",
      "10: use Mautic\\CoreBundle\\Helper\\FileHelper;",
      "11: use Symfony\\Component\\Filesystem\\Filesystem;",
      "12: use Symfony\\Component\\HttpFoundation\\File\\Exception\\FileNotFoundException;",
      "13: use Symfony\\Component\\HttpFoundation\\File\\File;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: use Mautic\\CoreBundle\\Loader\\ParameterLoader;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1164:                     ->setTranslationDomain('validators')",
      "1165:                     ->addViolation();",
      "1166:             }",
      "1169:             $object->setRemotePath(null);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1166:                     ->addViolation();",
      "1167:             }",
      "1168:             $loader           = new ParameterLoader();",
      "1169:             $parameters       = $loader->getParameterBag();",
      "1170:             $mimeTypesAllowed = $parameters->get('allowed_mimetypes');",
      "1172:             if (!empty($object->getFileMimeType()) && !in_array($object->getFileMimeType(), $mimeTypesAllowed)) {",
      "1173:                 $context->buildViolation('mautic.asset.asset.error.invalid.mimetype', [",
      "1174:                     '%fileMimetype%'=> $object->getFileMimeType(),",
      "1175:                     '%mimetypes%'   => implode(', ', $mimeTypesAllowed),",
      "1176:                 ])->atPath('file')",
      "1177:                     ->setTranslationDomain('validators')",
      "1178:                     ->addViolation();",
      "1179:             }",
      "1181:             $extensionsAllowed = array_keys($mimeTypesAllowed);",
      "1182:             $fileType          = $object->getExtension();",
      "1183:             if (null !== $object->getExtension() && !in_array($fileType, $extensionsAllowed)) {",
      "1184:                 $context->buildViolation('mautic.asset.asset.error.file.extension', [",
      "1185:                     '%fileExtension%'=> $object->getExtension(),",
      "1186:                     '%extensions%'   => implode(', ', $extensionsAllowed),",
      "1187:                 ])->atPath('file')",
      "1188:                     ->setTranslationDomain('validators')",
      "",
      "---------------"
    ],
    "app/bundles/AssetBundle/EventListener/UploadSubscriber.php||app/bundles/AssetBundle/EventListener/UploadSubscriber.php": [
      "File: app/bundles/AssetBundle/EventListener/UploadSubscriber.php -> app/bundles/AssetBundle/EventListener/UploadSubscriber.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: use Mautic\\AssetBundle\\Model\\AssetModel;",
      "6: use Mautic\\CoreBundle\\Exception\\FileInvalidException;",
      "7: use Mautic\\CoreBundle\\Helper\\CoreParametersHelper;",
      "8: use Mautic\\CoreBundle\\Validator\\FileUploadValidator;",
      "9: use Oneup\\UploaderBundle\\Event\\PostUploadEvent;",
      "10: use Oneup\\UploaderBundle\\Event\\ValidationEvent;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: use Mautic\\CoreBundle\\Translation\\Translator;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:     public function __construct(",
      "18:         private CoreParametersHelper $coreParametersHelper,",
      "19:         private AssetModel $assetModel,",
      "21:     ) {",
      "22:     }",
      "",
      "[Removed Lines]",
      "20:         private FileUploadValidator $fileUploadValidator",
      "",
      "[Added Lines]",
      "21:         private FileUploadValidator $fileUploadValidator,",
      "22:         protected Translator $translator,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "59:     public function onUploadValidation(ValidationEvent $event): void",
      "60:     {",
      "61:         $file       = $event->getFile();",
      "63:         $maxSize    = $this->assetModel->getMaxUploadSize('B');",
      "65:         if (null === $file) {",
      "",
      "[Removed Lines]",
      "62:         $extensions = $this->coreParametersHelper->get('allowed_extensions');",
      "",
      "[Added Lines]",
      "64:         $mimetypes  = $this->coreParametersHelper->get('allowed_mimetypes');",
      "65:         $extensions = array_keys($mimetypes);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "77:         } catch (FileInvalidException $e) {",
      "78:             throw new ValidationException($e->getMessage());",
      "79:         }",
      "80:     }",
      "81: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         try {",
      "85:             $this->checkMimeType($file->getMimeType(), $mimetypes, 'mautic.asset.asset.error.file.mimetype');",
      "86:         } catch (FileInvalidException $e) {",
      "87:             throw new ValidationException($e->getMessage());",
      "88:         }",
      "89:     }",
      "94:     private function checkMimeType(string $mimeType, array $allowedMimeTypes, string $extensionErrorMsg): void",
      "95:     {",
      "96:         if (!in_array(strtolower($mimeType), array_map('strtolower', $allowedMimeTypes), true)) {",
      "97:             $error = $this->translator->trans($extensionErrorMsg, [",
      "98:                 '%fileMimetype%' => $mimeType,",
      "99:                 '%mimetypes%'    => implode(', ', $allowedMimeTypes),",
      "100:             ], 'validators');",
      "102:             throw new FileInvalidException($error);",
      "103:         }",
      "",
      "---------------"
    ],
    "app/bundles/AssetBundle/Form/Type/AssetType.php||app/bundles/AssetBundle/Form/Type/AssetType.php": [
      "File: app/bundles/AssetBundle/Form/Type/AssetType.php -> app/bundles/AssetBundle/Form/Type/AssetType.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: use Mautic\\CoreBundle\\Form\\Type\\PublishDownDateType;",
      "13: use Mautic\\CoreBundle\\Form\\Type\\PublishUpDateType;",
      "14: use Mautic\\CoreBundle\\Form\\Type\\YesNoButtonGroupType;",
      "15: use Symfony\\Component\\Form\\AbstractType;",
      "16: use Symfony\\Component\\Form\\Extension\\Core\\Type\\HiddenType;",
      "17: use Symfony\\Component\\Form\\Extension\\Core\\Type\\LocaleType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: use Mautic\\CoreBundle\\Loader\\ParameterLoader;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19: use Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;",
      "20: use Symfony\\Component\\Form\\FormBuilderInterface;",
      "21: use Symfony\\Component\\OptionsResolver\\OptionsResolver;",
      "22: use Symfony\\Component\\Validator\\Constraints\\NotBlank;",
      "23: use Symfony\\Component\\Validator\\Constraints\\Url;",
      "24: use Symfony\\Contracts\\Translation\\TranslatorInterface;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: use Symfony\\Component\\Validator\\Constraints\\Callback;",
      "26: use Symfony\\Component\\Validator\\Context\\ExecutionContextInterface;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55:             'tempName',",
      "56:             HiddenType::class,",
      "57:             [",
      "61:             ]",
      "62:         );",
      "",
      "[Removed Lines]",
      "58:                 'label'      => $this->translator->trans('mautic.asset.asset.form.file.upload', ['%max%' => $maxUploadSize]),",
      "59:                 'label_attr' => ['class' => 'control-label'],",
      "60:                 'required'   => false,",
      "",
      "[Added Lines]",
      "61:                 'label'       => $this->translator->trans('mautic.asset.asset.form.file.upload', ['%max%' => $maxUploadSize]),",
      "62:                 'label_attr'  => ['class' => 'control-label'],",
      "63:                 'required'    => false,",
      "64:                 'constraints' => [",
      "65:                     new Callback([$this, 'validateExtension']),",
      "66:                 ],",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "65:             'originalFileName',",
      "66:             HiddenType::class,",
      "67:             [",
      "70:         );",
      "71:         $builder->add(",
      "72:             'disallow',",
      "",
      "[Removed Lines]",
      "68:                 'required' => false,",
      "69:             ]",
      "",
      "[Added Lines]",
      "74:                 'required'    => false,",
      "75:                 'constraints' => [",
      "76:                     new Callback([$this, 'validateExtension']),",
      "77:                 ],",
      "78:             ],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "180:         }",
      "181:     }",
      "183:     public function configureOptions(OptionsResolver $resolver): void",
      "184:     {",
      "185:         $resolver->setDefaults(['data_class' => Asset::class]);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "195:     public function validateExtension($object, ExecutionContextInterface $context): void",
      "196:     {",
      "197:         if (empty($object)) {",
      "198:             return;",
      "199:         }",
      "200:         $parameters       = (new ParameterLoader())->getParameterBag();",
      "201:         $mimeTypesAllowed = $parameters->get('allowed_mimetypes');",
      "202:         $extensions       = array_keys($mimeTypesAllowed);",
      "203:         $fileName         = $object;",
      "204:         if (!is_string($object) && $object instanceof Asset) {",
      "205:             $fileName = $object->getOriginalFileName();",
      "206:         }",
      "207:         $fileExtension    = pathinfo($fileName, PATHINFO_EXTENSION);",
      "208:         if (!in_array($fileExtension, $extensions, true)) {",
      "209:             $context->buildViolation('mautic.asset.asset.error.file.extension', [",
      "210:                 '%fileExtension%'=> $fileExtension,",
      "211:                 '%extensions%'   => implode(', ', $extensions),",
      "212:             ])",
      "213:                 ->atPath('file')",
      "214:                 ->setTranslationDomain('validators')",
      "215:                 ->addViolation();",
      "216:         }",
      "217:     }",
      "",
      "---------------"
    ],
    "app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php||app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php": [
      "File: app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php -> app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "233:         $this->em->persist($role);",
      "234:         $this->em->flush();",
      "235:     }",
      "236: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "237:     public function testPostRequestWithWrongTempNameAndOriginalFileNameFileExtension(): void",
      "238:     {",
      "239:         $response = $this->client->request(",
      "240:             Request::METHOD_GET,",
      "241:             '/s/assets/new',",
      "242:         );",
      "243:         $this->assertResponseStatusCodeSame(Response::HTTP_OK);",
      "244:         $form                              = $response->filter('form[name=\"asset\"]')->form();",
      "245:         $data                              = $form->getPhpValues();",
      "246:         $data['asset']['tempName']         = 'image2.php';",
      "247:         $data['asset']['originalFileName'] = 'originalImage2.php';",
      "248:         $data['asset']['storageLocation']  = 'local';",
      "249:         $data['asset']['title']            = 'title';",
      "250:         $data['asset']['description']      = 'description';",
      "251:         $this->client->submit($form, $data);",
      "252:         preg_match_all('/Upload failed as the file extension, php/', $this->client->getResponse()->getContent(), $matches);",
      "253:         $this->assertCount(2, $matches[0]);",
      "254:         $this->assertStringContainsString('Upload failed as the file extension, php', $this->client->getResponse()->getContent());",
      "255:     }",
      "257:     public function testPostRequestWithWrongTempNameFileExtension(): void",
      "258:     {",
      "259:         $response = $this->client->request(",
      "260:             Request::METHOD_GET,",
      "261:             '/s/assets/new',",
      "262:         );",
      "263:         $this->assertResponseStatusCodeSame(Response::HTTP_OK);",
      "264:         $form                              = $response->filter('form[name=\"asset\"]')->form();",
      "265:         $data                              = $form->getPhpValues();",
      "266:         $data['asset']['tempName']         = 'image2.php';",
      "267:         $data['asset']['originalFileName'] = 'originalImage2.png';",
      "268:         $data['asset']['storageLocation']  = 'local';",
      "269:         $data['asset']['title']            = 'title';",
      "270:         $data['asset']['description']      = 'description';",
      "271:         $this->client->submit($form, $data);",
      "272:         preg_match_all('/Upload failed as the file extension, php/', $this->client->getResponse()->getContent(), $matches);",
      "273:         $this->assertCount(1, $matches[0]);",
      "274:         $this->assertStringContainsString('Upload failed as the file extension, php', $this->client->getResponse()->getContent());",
      "275:     }",
      "277:     public function testPostResquetSuccessWithCorrectFileExtension(): void",
      "278:     {",
      "279:         $response = $this->client->request(",
      "280:             Request::METHOD_GET,",
      "281:             '/s/assets/new',",
      "282:         );",
      "283:         $this->assertResponseStatusCodeSame(Response::HTTP_OK);",
      "284:         $form                              = $response->filter('form[name=\"asset\"]')->form();",
      "285:         $data                              = $form->getPhpValues();",
      "286:         $data['asset']['tempName']         = 'image.png';",
      "287:         $data['asset']['originalFileName'] = 'originalImage.png';",
      "288:         $data['asset']['storageLocation']  = 'local';",
      "289:         $data['asset']['title']            = 'title';",
      "290:         $data['asset']['description']      = 'description';",
      "291:         $this->client->submit($form, $data);",
      "292:         $this->assertResponseStatusCodeSame(Response::HTTP_OK);",
      "293:         $this->assertStringNotContainsString('Upload failed as the file extension, php', $this->client->getResponse()->getContent());",
      "294:     }",
      "",
      "---------------"
    ],
    "app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php||app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php": [
      "File: app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php -> app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: namespace Mautic\\AssetBundle\\Tests\\Controller;",
      "5: use Mautic\\AssetBundle\\Tests\\Asset\\AbstractAssetTest;",
      "6: use Symfony\\Component\\HttpFoundation\\File\\UploadedFile;",
      "7: use Symfony\\Component\\HttpFoundation\\Request;",
      "8: use Symfony\\Component\\HttpFoundation\\Response;",
      "10: class UploadControllerFunctionalTest extends AbstractAssetTest",
      "11: {",
      "12:     public function testUploadWithWrongMimetype(): void",
      "13:     {",
      "15:         $assetsPath = $this->client->getKernel()->getContainer()->getParameter('mautic.upload_dir');",
      "17:         $fileName = 'image2.png';",
      "18:         $filePath = $assetsPath.'/'.$fileName;",
      "20:         if (file_exists($filePath)) {",
      "21:             unlink($filePath);",
      "22:         }",
      "24:         copy('index.php', $filePath);",
      "26:         $binaryFile = new UploadedFile($filePath, $fileName, 'application/x-httpd-php', null, true);",
      "28:         $tmpId = 'tempId_'.time();",
      "30:         $this->client->request(",
      "31:             Request::METHOD_POST,",
      "32:             '/s/_uploader/asset/upload',",
      "33:             [",
      "34:                 'tempId' => $tmpId,",
      "35:             ],",
      "36:             [",
      "37:                 'file' => $binaryFile,",
      "38:             ]",
      "39:         );",
      "41:         $response = $this->client->getResponse();",
      "42:         $this->assertStringContainsString('Upload failed as the file mimetype', $response->getContent());",
      "43:         $this->assertStringContainsString('text\\/x-php is not allowed', $response->getContent());",
      "44:         unlink($filePath);",
      "45:     }",
      "47:     public function testSuccessUploadWithPng(): void",
      "48:     {",
      "51:         $assetsPath     = $this->client->getKernel()->getContainer()->getParameter('mautic.upload_dir');",
      "52:         $assetsPathFrom = $this->client->getKernel()->getContainer()->getParameter('mautic.application_dir').'/app/assets/images/mautic_logo_db64.png';",
      "54:         $fileName = 'image3.png';",
      "55:         $filePath = $assetsPath.'/'.$fileName;",
      "57:         copy($assetsPathFrom, $filePath);",
      "59:         $uploadedFile = new UploadedFile($filePath, $fileName, 'image/png', null, true);",
      "61:         $tmpId = 'tempId_'.time();",
      "63:         $this->client->request(",
      "64:             'POST',",
      "65:             '/s/_uploader/asset/upload',",
      "66:             ['tempId' => $tmpId],",
      "67:             ['file'   => $uploadedFile]",
      "68:         );",
      "69:         $this->assertResponseStatusCodeSame(Response::HTTP_OK);",
      "70:         $this->assertStringContainsString('state\":1', $this->client->getResponse()->getContent());",
      "71:         if (file_exists($filePath)) {",
      "72:             unlink($filePath);",
      "73:         }",
      "74:         $data = json_decode($this->client->getResponse()->getContent(), true);",
      "75:         unlink($assetsPath.'/tmp/'.$tmpId.'/'.$data['tmpFileName']);",
      "76:         rmdir($assetsPath.'/tmp/'.$tmpId);",
      "77:     }",
      "79:     public function testUploadWithWrongExtension(): void",
      "80:     {",
      "82:         $assetsPath     = $this->client->getKernel()->getContainer()->getParameter('mautic.upload_dir');",
      "83:         $assetsPathFrom = $this->client->getKernel()->getContainer()->getParameter('mautic.application_dir').'/app/assets/images/mautic_logo_db64.png';",
      "85:         $fileName = 'image2.php';",
      "86:         $filePath = $assetsPath.'/'.$fileName;",
      "88:         if (file_exists($filePath)) {",
      "89:             unlink($filePath);",
      "90:         }",
      "92:         copy($assetsPathFrom, $filePath);",
      "94:         $binaryFile = new UploadedFile($filePath, $fileName, 'image/png', null, true);",
      "96:         $tmpId = 'tempId_'.time();",
      "98:         $this->client->request(",
      "99:             Request::METHOD_POST,",
      "100:             '/s/_uploader/asset/upload',",
      "101:             [",
      "102:                 'tempId' => $tmpId,",
      "103:             ],",
      "104:             [",
      "105:                 'file' => $binaryFile,",
      "106:             ]",
      "107:         );",
      "109:         $response = $this->client->getResponse();",
      "110:         $this->assertStringContainsString('Upload failed as the file extension', $response->getContent());",
      "111:         $this->assertStringContainsString('Upload failed as the file extension, php,', $response->getContent());",
      "112:         unlink($filePath);",
      "113:     }",
      "114: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9da96b7f733b98480cd4d53e7b748b3842613510",
      "candidate_info": {
        "commit_hash": "9da96b7f733b98480cd4d53e7b748b3842613510",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/9da96b7f733b98480cd4d53e7b748b3842613510",
        "files": [
          "app/bundles/ReportBundle/Controller/Api/ReportApiController.php"
        ],
        "message": "- mst-83",
        "before_after_code_files": [
          "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php": [
          "File: app/bundles/ReportBundle/Controller/Api/ReportApiController.php -> app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     protected $model;",
          "40:     public function __construct(CorePermissions $security, Translator $translator, EntityResultHelper $entityResultHelper, RouterInterface $router, FormFactoryInterface $formFactory, AppVersion $appVersion, RequestStack $requestStack, ManagerRegistry $doctrine, ModelFactory $modelFactory, EventDispatcherInterface $dispatcher, CoreParametersHelper $coreParametersHelper, MauticFactory $factory, UserHelper $userHelper)",
          "41:     {",
          "",
          "[Removed Lines]",
          "38:     protected $userHelper;",
          "",
          "[Added Lines]",
          "35:     protected UserHelper $userHelper;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61176eedce04c21fb78dc15644a6f73f213e4951",
      "candidate_info": {
        "commit_hash": "61176eedce04c21fb78dc15644a6f73f213e4951",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/61176eedce04c21fb78dc15644a6f73f213e4951",
        "files": [
          "app/bundles/EmailBundle/Tests/Functional/EmailClickTrackingTest.php"
        ],
        "message": "User must be logged out to be tracked (test fix)",
        "before_after_code_files": [
          "app/bundles/EmailBundle/Tests/Functional/EmailClickTrackingTest.php||app/bundles/EmailBundle/Tests/Functional/EmailClickTrackingTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "app/bundles/EmailBundle/Tests/Functional/EmailClickTrackingTest.php||app/bundles/EmailBundle/Tests/Functional/EmailClickTrackingTest.php": [
          "File: app/bundles/EmailBundle/Tests/Functional/EmailClickTrackingTest.php -> app/bundles/EmailBundle/Tests/Functional/EmailClickTrackingTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:         $this->em->persist($page);",
          "45:         $this->em->flush();",
          "47:         $this->client->request(Request::METHOD_GET, '/test-page?&ct=YToxOntzOjQ6InN0YXQiO3M6MjI6IjY3MTY3ZjU3YTRjMDUyNjU5MzYwOTEiO30%3D');",
          "48:         Assert::assertTrue($this->client->getResponse()->isSuccessful());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:         $this->logoutUser();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8d0e012889d2f295182811a6bfb92912d2904fe",
      "candidate_info": {
        "commit_hash": "b8d0e012889d2f295182811a6bfb92912d2904fe",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/b8d0e012889d2f295182811a6bfb92912d2904fe",
        "files": [
          "app/bundles/ReportBundle/Controller/Api/ReportApiController.php"
        ],
        "message": "- mst-83",
        "before_after_code_files": [
          "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php": [
          "File: app/bundles/ReportBundle/Controller/Api/ReportApiController.php -> app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     protected $model;",
          "38:     {",
          "39:         $reportModel = $modelFactory->getModel('report');",
          "40:         \\assert($reportModel instanceof ReportModel);",
          "",
          "[Removed Lines]",
          "35:     protected UserHelper $userHelper;",
          "37:     public function __construct(CorePermissions $security, Translator $translator, EntityResultHelper $entityResultHelper, RouterInterface $router, FormFactoryInterface $formFactory, AppVersion $appVersion, RequestStack $requestStack, ManagerRegistry $doctrine, ModelFactory $modelFactory, EventDispatcherInterface $dispatcher, CoreParametersHelper $coreParametersHelper, MauticFactory $factory, UserHelper $userHelper)",
          "",
          "[Added Lines]",
          "35:     public function __construct(CorePermissions $security, Translator $translator, EntityResultHelper $entityResultHelper, RouterInterface $router, FormFactoryInterface $formFactory, AppVersion $appVersion, RequestStack $requestStack, ManagerRegistry $doctrine, ModelFactory $modelFactory, EventDispatcherInterface $dispatcher, CoreParametersHelper $coreParametersHelper, MauticFactory $factory, protected UserHelper $userHelper)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:         $this->entityNameOne    = 'report';",
          "45:         $this->entityNameMulti  = 'reports';",
          "46:         $this->serializerGroups = ['reportList', 'reportDetails'];",
          "49:         parent::__construct($security, $translator, $entityResultHelper, $router, $formFactory, $appVersion, $requestStack, $doctrine, $modelFactory, $dispatcher, $coreParametersHelper, $factory);",
          "50:     }",
          "",
          "[Removed Lines]",
          "47:         $this->userHelper       = $userHelper;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}