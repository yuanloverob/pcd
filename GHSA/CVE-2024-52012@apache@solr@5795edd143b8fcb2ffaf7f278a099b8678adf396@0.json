{
  "cve_id": "CVE-2024-52012",
  "cve_desc": "Relative Path Traversal vulnerability in Apache Solr.\n\nSolr instances running on Windows are vulnerable to arbitrary filepath write-access, due to a lack of input-sanitation in the \"configset upload\" API.\u00a0 Commonly known as a \"zipslip\", maliciously constructed ZIP files can use relative filepaths to write data to unanticipated parts of the filesystem.\u00a0\u00a0\nThis issue affects Apache Solr: from 6.6 through 9.7.0.\n\nUsers are recommended to upgrade to version 9.8.0, which fixes the issue.\u00a0 Users unable to upgrade may also safely prevent the issue by using Solr's \"Rule-Based Authentication Plugin\" to restrict access to the configset upload API, so that it can only be accessed by a trusted set of administrators/users.",
  "repo": "apache/solr",
  "patch_hash": "5795edd143b8fcb2ffaf7f278a099b8678adf396",
  "patch_info": {
    "commit_hash": "5795edd143b8fcb2ffaf7f278a099b8678adf396",
    "repo": "apache/solr",
    "commit_url": "https://github.com/apache/solr/commit/5795edd143b8fcb2ffaf7f278a099b8678adf396",
    "files": [
      "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
      "solr/core/src/java/org/apache/solr/util/FileUtils.java",
      "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
      "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java"
    ],
    "message": "SOLR-17543: Input validation in FSConfigSetService\n\nSee JIRA ticket for more details.",
    "before_after_code_files": [
      "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
      "solr/core/src/java/org/apache/solr/util/FileUtils.java||solr/core/src/java/org/apache/solr/util/FileUtils.java",
      "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java||solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
      "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java||solr/core/src/test/org/apache/solr/util/FileUtilsTest.java"
    ]
  },
  "patch_diff": {
    "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java": [
      "File: solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java -> solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: import org.apache.solr.common.cloud.ZkMaintenanceUtils;",
      "39: import org.apache.solr.common.util.Utils;",
      "40: import org.apache.solr.util.FileTypeMagicUtil;",
      "41: import org.slf4j.Logger;",
      "42: import org.slf4j.LoggerFactory;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "41: import org.apache.solr.util.FileUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "150:       throws IOException {",
      "151:     if (ZkMaintenanceUtils.isFileForbiddenInConfigSets(fileName)) {",
      "152:       log.warn(\"Not including uploading file to config, as it is a forbidden type: {}\", fileName);",
      "166:     }",
      "167:   }",
      "",
      "[Removed Lines]",
      "153:     } else {",
      "154:       if (!FileTypeMagicUtil.isFileForbiddenInConfigset(data)) {",
      "155:         Path filePath = getConfigDir(configName).resolve(normalizePathToOsSeparator(fileName));",
      "156:         if (!Files.exists(filePath) || overwriteOnExists) {",
      "157:           Files.write(filePath, data);",
      "158:         }",
      "159:       } else {",
      "160:         String mimeType = FileTypeMagicUtil.INSTANCE.guessMimeType(data);",
      "161:         log.warn(",
      "162:             \"Not including uploading file {}, as it matched the MAGIC signature of a forbidden mime type {}\",",
      "163:             fileName,",
      "164:             mimeType);",
      "165:       }",
      "",
      "[Added Lines]",
      "154:       return;",
      "155:     }",
      "156:     if (FileTypeMagicUtil.isFileForbiddenInConfigset(data)) {",
      "157:       String mimeType = FileTypeMagicUtil.INSTANCE.guessMimeType(data);",
      "158:       log.warn(",
      "159:           \"Not including uploading file {}, as it matched the MAGIC signature of a forbidden mime type {}\",",
      "160:           fileName,",
      "161:           mimeType);",
      "162:       return;",
      "163:     }",
      "164:     final var configsetBasePath = getConfigDir(configName);",
      "165:     final var configsetFilePath = configsetBasePath.resolve(normalizePathToOsSeparator(fileName));",
      "166:     if (!FileUtils.isPathAChildOfParent(",
      "167:         configsetBasePath, configsetFilePath)) { // See SOLR-17543 for context",
      "168:       log.warn(",
      "169:           \"Not uploading file [{}], as it resolves to a location [{}] outside of the configset root directory [{}]\",",
      "170:           fileName,",
      "171:           configsetFilePath,",
      "172:           configsetBasePath);",
      "173:       return;",
      "174:     }",
      "176:     if (overwriteOnExists || !Files.exists(configsetFilePath)) {",
      "177:       Files.write(configsetFilePath, data);",
      "",
      "---------------"
    ],
    "solr/core/src/java/org/apache/solr/util/FileUtils.java||solr/core/src/java/org/apache/solr/util/FileUtils.java": [
      "File: solr/core/src/java/org/apache/solr/util/FileUtils.java -> solr/core/src/java/org/apache/solr/util/FileUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "103:     }",
      "104:     return Files.createDirectories(path);",
      "105:   }",
      "106: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "123:   public static boolean isPathAChildOfParent(Path parent, Path potentialChild) {",
      "124:     final var normalizedParent = parent.toAbsolutePath().normalize();",
      "125:     final var normalizedChild = potentialChild.toAbsolutePath().normalize();",
      "127:     return normalizedChild.startsWith(normalizedParent)",
      "128:         && !normalizedChild.equals(normalizedParent);",
      "129:   }",
      "",
      "---------------"
    ],
    "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java||solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java": [
      "File: solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java -> solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.solr.core;",
      "19: import static org.apache.solr.core.FileSystemConfigSetService.METADATA_FILE;",
      "21: import java.io.IOException;",
      "22: import java.nio.charset.StandardCharsets;",
      "23: import java.nio.file.Files;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import static org.hamcrest.Matchers.hasItem;",
      "22: import java.io.File;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "49:     fileSystemConfigSetService = null;",
      "50:   }",
      "52:   @Test",
      "53:   public void testUploadAndDeleteConfig() throws IOException {",
      "54:     String configName = \"testconfig\";",
      "56:     fileSystemConfigSetService.uploadConfig(configName, configset(\"cloud-minimal\"));",
      "59:     assertTrue(fileSystemConfigSetService.checkConfigExists(configName));",
      "61:     byte[] testdata = \"test data\".getBytes(StandardCharsets.UTF_8);",
      "",
      "[Removed Lines]",
      "58:     assertEquals(fileSystemConfigSetService.listConfigs().size(), 1);",
      "",
      "[Added Lines]",
      "54:   @Test",
      "55:   public void testIgnoresFileUploadsOutsideOfConfigSetDirectory() throws IOException {",
      "56:     final var initialNumConfigs = fileSystemConfigSetService.listConfigs().size();",
      "57:     final String configName = \"fileEscapeTestConfig\";",
      "58:     final var specificConfigSetBase = configSetBase.resolve(configName);",
      "60:     fileSystemConfigSetService.uploadConfig(configName, configset(\"cloud-minimal\"));",
      "61:     assertEquals(fileSystemConfigSetService.listConfigs().size(), initialNumConfigs + 1);",
      "62:     assertTrue(fileSystemConfigSetService.checkConfigExists(configName));",
      "66:     byte[] testdata = \"test data\".getBytes(StandardCharsets.UTF_8);",
      "67:     fileSystemConfigSetService.uploadFileToConfig(configName, \"validPath\", testdata, true);",
      "68:     final var knownFiles = fileSystemConfigSetService.getAllConfigFiles(configName);",
      "69:     assertThat(knownFiles, hasItem(\"validPath\"));",
      "70:     assertTrue(Files.exists(specificConfigSetBase.resolve(\"validPath\")));",
      "74:     final var invalidFilePaths =",
      "75:         List.of(",
      "76:             \"..\" + File.separator + \"escapePath\",",
      "77:             \"foo\" + File.separator + \"..\" + File.separator + \"..\" + File.separator + \"bar\");",
      "78:     for (String invalidFilePath : invalidFilePaths) {",
      "79:       fileSystemConfigSetService.uploadFileToConfig(configName, invalidFilePath, testdata, true);",
      "80:       assertFalse(Files.exists(specificConfigSetBase.resolve(invalidFilePath)));",
      "81:     }",
      "82:   }",
      "86:     final var initialNumConfigs = fileSystemConfigSetService.listConfigs().size();",
      "90:     assertEquals(fileSystemConfigSetService.listConfigs().size(), initialNumConfigs + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "79:     assertEquals(\"[schema.xml, solrconfig.xml]\", allConfigFiles.toString());",
      "81:     fileSystemConfigSetService.copyConfig(configName, \"copytestconfig\");",
      "84:     allConfigFiles = fileSystemConfigSetService.getAllConfigFiles(\"copytestconfig\");",
      "85:     assertEquals(\"[schema.xml, solrconfig.xml]\", allConfigFiles.toString());",
      "",
      "[Removed Lines]",
      "82:     assertEquals(fileSystemConfigSetService.listConfigs().size(), 2);",
      "",
      "[Added Lines]",
      "114:     assertEquals(fileSystemConfigSetService.listConfigs().size(), initialNumConfigs + 2);",
      "",
      "---------------"
    ],
    "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java||solr/core/src/test/org/apache/solr/util/FileUtilsTest.java": [
      "File: solr/core/src/test/org/apache/solr/util/FileUtilsTest.java -> solr/core/src/test/org/apache/solr/util/FileUtilsTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.solr.util;",
      "19: import java.io.File;",
      "20: import org.apache.solr.SolrTestCase;",
      "22: public class FileUtilsTest extends SolrTestCase {",
      "24:   public void testResolve() {",
      "25:     String cwd = new File(\".\").getAbsolutePath();",
      "26:     assertEquals(new File(\"conf/data\"), FileUtils.resolvePath(new File(\"conf\"), \"data\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import java.nio.file.Path;",
      "22: import org.junit.Test;",
      "26:   @Test",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "28:         new File(cwd + \"/conf/data\"), FileUtils.resolvePath(new File(cwd + \"/conf\"), \"data\"));",
      "29:     assertEquals(new File(cwd + \"/data\"), FileUtils.resolvePath(new File(\"conf\"), cwd + \"/data\"));",
      "30:   }",
      "31: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:   @Test",
      "36:   public void testDetectsPathEscape() {",
      "37:     final var parent = Path.of(\".\");",
      "40:     assertTrue(FileUtils.isPathAChildOfParent(parent, parent.resolve(\"child\")));",
      "43:     assertTrue(FileUtils.isPathAChildOfParent(parent, parent.resolve(buildPath(\".\", \"child\"))));",
      "46:     assertTrue(",
      "47:         FileUtils.isPathAChildOfParent(parent, parent.resolve(buildPath(\"nested\", \"child\"))));",
      "50:     assertTrue(",
      "51:         FileUtils.isPathAChildOfParent(",
      "52:             parent, parent.resolve(buildPath(\"child1\", \"..\", \"child2\"))));",
      "53:     assertTrue(",
      "54:         FileUtils.isPathAChildOfParent(",
      "55:             parent, parent.resolve(buildPath(\"child\", \"grandchild1\", \"..\", \"grandchild2\"))));",
      "58:     assertFalse(FileUtils.isPathAChildOfParent(parent, parent));",
      "61:     assertFalse(FileUtils.isPathAChildOfParent(parent, parent.resolve(buildPath(\"..\", \"sibling\"))));",
      "64:     assertFalse(FileUtils.isPathAChildOfParent(parent, parent.resolve(\"..\")));",
      "67:     assertFalse(",
      "68:         FileUtils.isPathAChildOfParent(parent, parent.resolve(buildPath(\"..\", \"..\", \"..\", \"..\"))));",
      "69:   }",
      "71:   private static String buildPath(String... pathSegments) {",
      "72:     final var sb = new StringBuilder();",
      "73:     for (int i = 0; i < pathSegments.length; i++) {",
      "74:       sb.append(pathSegments[i]);",
      "75:       if (i < pathSegments.length - 1) {",
      "76:         sb.append(File.separator);",
      "77:       }",
      "78:     }",
      "79:     return sb.toString();",
      "80:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "15534754f492079e52288dd11abaf1c4261b3ea4",
      "candidate_info": {
        "commit_hash": "15534754f492079e52288dd11abaf1c4261b3ea4",
        "repo": "apache/solr",
        "commit_url": "https://github.com/apache/solr/commit/15534754f492079e52288dd11abaf1c4261b3ea4",
        "files": [
          "solr/CHANGES.txt",
          "solr/core/build.gradle",
          "solr/core/src/java/org/apache/solr/cli/ConfigSetUploadTool.java",
          "solr/core/src/java/org/apache/solr/cloud/ZkConfigSetService.java",
          "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
          "solr/core/src/java/org/apache/solr/core/backup/BackupManager.java",
          "solr/core/src/java/org/apache/solr/handler/configsets/UploadConfigSetFileAPI.java",
          "solr/core/src/java/org/apache/solr/util/FileTypeMagicUtil.java",
          "solr/core/src/resources/magic/executables",
          "solr/core/src/test-files/magic/HelloWorld.java.txt",
          "solr/core/src/test-files/magic/HelloWorldJavaClass.class.bin",
          "solr/core/src/test-files/magic/README.md",
          "solr/core/src/test-files/magic/hello.tar.bin",
          "solr/core/src/test-files/magic/plain.txt",
          "solr/core/src/test-files/magic/shell.sh.txt",
          "solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI.java",
          "solr/core/src/test/org/apache/solr/util/FileTypeMagicUtilTest.java",
          "solr/licenses/simplemagic-1.17.jar.sha1",
          "solr/licenses/simplemagic-LICENSE-BSD_LIKE.txt",
          "solr/licenses/simplemagic-NOTICE.txt",
          "solr/solrj-zookeeper/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils.java",
          "versions.lock",
          "versions.props"
        ],
        "message": "SOLR-16949: Restrict certain file types from being uploaded to or downloaded from Config Sets",
        "before_after_code_files": [
          "solr/core/build.gradle||solr/core/build.gradle",
          "solr/core/src/java/org/apache/solr/cli/ConfigSetUploadTool.java||solr/core/src/java/org/apache/solr/cli/ConfigSetUploadTool.java",
          "solr/core/src/java/org/apache/solr/cloud/ZkConfigSetService.java||solr/core/src/java/org/apache/solr/cloud/ZkConfigSetService.java",
          "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
          "solr/core/src/java/org/apache/solr/core/backup/BackupManager.java||solr/core/src/java/org/apache/solr/core/backup/BackupManager.java",
          "solr/core/src/java/org/apache/solr/handler/configsets/UploadConfigSetFileAPI.java||solr/core/src/java/org/apache/solr/handler/configsets/UploadConfigSetFileAPI.java",
          "solr/core/src/java/org/apache/solr/util/FileTypeMagicUtil.java||solr/core/src/java/org/apache/solr/util/FileTypeMagicUtil.java",
          "solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI.java||solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI.java",
          "solr/core/src/test/org/apache/solr/util/FileTypeMagicUtilTest.java||solr/core/src/test/org/apache/solr/util/FileTypeMagicUtilTest.java",
          "solr/licenses/simplemagic-1.17.jar.sha1||solr/licenses/simplemagic-1.17.jar.sha1",
          "solr/solrj-zookeeper/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils.java||solr/solrj-zookeeper/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils.java",
          "versions.lock||versions.lock",
          "versions.props||versions.props"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java"
          ],
          "candidate": [
            "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java"
          ]
        }
      },
      "candidate_diff": {
        "solr/core/build.gradle||solr/core/build.gradle": [
          "File: solr/core/build.gradle -> solr/core/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:   compileOnly 'com.github.stephenc.jcip:jcip-annotations'",
          "164:   testRuntimeOnly 'org.slf4j:jcl-over-slf4j'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:   implementation 'com.j256.simplemagic:simplemagic'",
          "",
          "---------------"
        ],
        "solr/core/src/java/org/apache/solr/cli/ConfigSetUploadTool.java||solr/core/src/java/org/apache/solr/cli/ConfigSetUploadTool.java": [
          "File: solr/core/src/java/org/apache/solr/cli/ConfigSetUploadTool.java -> solr/core/src/java/org/apache/solr/cli/ConfigSetUploadTool.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.apache.solr.common.cloud.SolrZkClient;",
          "28: import org.apache.solr.common.cloud.ZkMaintenanceUtils;",
          "29: import org.apache.solr.core.ConfigSetService;",
          "30: import org.slf4j.Logger;",
          "31: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import org.apache.solr.util.FileTypeMagicUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:               + cli.getOptionValue(\"confname\")",
          "102:               + \" to ZooKeeper at \"",
          "103:               + zkHost);",
          "104:       ZkMaintenanceUtils.uploadToZK(",
          "105:           zkClient,",
          "106:           confPath,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:       FileTypeMagicUtil.assertConfigSetFolderLegal(confPath);",
          "",
          "---------------"
        ],
        "solr/core/src/java/org/apache/solr/cloud/ZkConfigSetService.java||solr/core/src/java/org/apache/solr/cloud/ZkConfigSetService.java": [
          "File: solr/core/src/java/org/apache/solr/cloud/ZkConfigSetService.java -> solr/core/src/java/org/apache/solr/cloud/ZkConfigSetService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.ArrayList;",
          "23: import java.util.Collections;",
          "24: import java.util.List;",
          "25: import java.util.Map;",
          "26: import java.util.Objects;",
          "27: import org.apache.solr.client.solrj.cloud.SolrCloudManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.Locale;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.apache.solr.core.CoreDescriptor;",
          "40: import org.apache.solr.core.SolrConfig;",
          "41: import org.apache.solr.core.SolrResourceLoader;",
          "42: import org.apache.zookeeper.CreateMode;",
          "43: import org.apache.zookeeper.KeeperException;",
          "44: import org.apache.zookeeper.data.Stat;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.apache.solr.util.FileTypeMagicUtil;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:     try {",
          "200:       if (ZkMaintenanceUtils.isFileForbiddenInConfigSets(fileName)) {",
          "201:         log.warn(\"Not including uploading file to config, as it is a forbidden type: {}\", fileName);",
          "202:       } else {",
          "204:         zkClient.makePath(filePath, data, CreateMode.PERSISTENT, null, !overwriteOnExists, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:       } else if (FileTypeMagicUtil.isFileForbiddenInConfigset(data)) {",
          "205:         String mimeType = FileTypeMagicUtil.INSTANCE.guessMimeType(data);",
          "206:         throw new SolrException(",
          "207:             SolrException.ErrorCode.BAD_REQUEST,",
          "208:             String.format(",
          "209:                 Locale.ROOT,",
          "210:                 \"Not uploading file %s to config, as it matched the MAGIC signature of a forbidden mime type %s\",",
          "211:                 fileName,",
          "212:                 mimeType));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "340:     } else {",
          "341:       log.debug(\"Copying zk node {} to {}\", fromZkFilePath, toZkFilePath);",
          "342:       byte[] data = zkClient.getData(fromZkFilePath, null, null, true);",
          "344:     }",
          "345:   }",
          "",
          "[Removed Lines]",
          "343:       zkClient.makePath(toZkFilePath, data, true);",
          "",
          "[Added Lines]",
          "354:       if (!FileTypeMagicUtil.isFileForbiddenInConfigset(data)) {",
          "355:         zkClient.makePath(toZkFilePath, data, true);",
          "356:       } else {",
          "357:         String mimeType = FileTypeMagicUtil.INSTANCE.guessMimeType(data);",
          "358:         log.warn(",
          "359:             \"Skipping copy of file {} in ZK, as it matched the MAGIC signature of a forbidden mime type {}\",",
          "360:             fromZkFilePath,",
          "361:             mimeType);",
          "362:       }",
          "",
          "---------------"
        ],
        "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java": [
          "File: solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java -> solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import org.apache.solr.common.SolrException;",
          "38: import org.apache.solr.common.cloud.ZkMaintenanceUtils;",
          "39: import org.apache.solr.common.util.Utils;",
          "40: import org.slf4j.Logger;",
          "41: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import org.apache.solr.util.FileTypeMagicUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:     if (ZkMaintenanceUtils.isFileForbiddenInConfigSets(fileName)) {",
          "151:       log.warn(\"Not including uploading file to config, as it is a forbidden type: {}\", fileName);",
          "152:     } else {",
          "156:       }",
          "157:     }",
          "158:   }",
          "",
          "[Removed Lines]",
          "153:       Path filePath = getConfigDir(configName).resolve(normalizePathToOsSeparator(fileName));",
          "154:       if (!Files.exists(filePath) || overwriteOnExists) {",
          "155:         Files.write(filePath, data);",
          "",
          "[Added Lines]",
          "154:       if (!FileTypeMagicUtil.isFileForbiddenInConfigset(data)) {",
          "155:         Path filePath = getConfigDir(configName).resolve(normalizePathToOsSeparator(fileName));",
          "156:         if (!Files.exists(filePath) || overwriteOnExists) {",
          "157:           Files.write(filePath, data);",
          "158:         }",
          "159:       } else {",
          "160:         String mimeType = FileTypeMagicUtil.INSTANCE.guessMimeType(data);",
          "161:         log.warn(",
          "162:             \"Not including uploading file {}, as it matched the MAGIC signature of a forbidden mime type {}\",",
          "163:             fileName,",
          "164:             mimeType);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:                     \"Not including uploading file to config, as it is a forbidden type: {}\",",
          "206:                     file.getFileName());",
          "207:               } else {",
          "210:               }",
          "211:               return FileVisitResult.CONTINUE;",
          "212:             }",
          "",
          "[Removed Lines]",
          "208:                 Files.copy(",
          "209:                     file, target.resolve(source.relativize(file).toString()), REPLACE_EXISTING);",
          "",
          "[Added Lines]",
          "217:                 if (!FileTypeMagicUtil.isFileForbiddenInConfigset(Files.newInputStream(file))) {",
          "218:                   Files.copy(",
          "219:                       file, target.resolve(source.relativize(file).toString()), REPLACE_EXISTING);",
          "220:                 } else {",
          "221:                   String mimeType =",
          "222:                       FileTypeMagicUtil.INSTANCE.guessMimeType(Files.newInputStream(file));",
          "223:                   log.warn(",
          "224:                       \"Not copying file {}, as it matched the MAGIC signature of a forbidden mime type {}\",",
          "225:                       file.getFileName(),",
          "226:                       mimeType);",
          "227:                 }",
          "",
          "---------------"
        ],
        "solr/core/src/java/org/apache/solr/core/backup/BackupManager.java||solr/core/src/java/org/apache/solr/core/backup/BackupManager.java": [
          "File: solr/core/src/java/org/apache/solr/core/backup/BackupManager.java -> solr/core/src/java/org/apache/solr/core/backup/BackupManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import org.apache.solr.common.util.Utils;",
          "41: import org.apache.solr.core.ConfigSetService;",
          "42: import org.apache.solr.core.backup.repository.BackupRepository;",
          "43: import org.apache.zookeeper.CreateMode;",
          "44: import org.apache.zookeeper.KeeperException;",
          "45: import org.slf4j.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.apache.solr.util.FileTypeMagicUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:           if (data == null) {",
          "350:             data = new byte[0];",
          "351:           }",
          "354:           }",
          "355:         }",
          "356:       } else {",
          "",
          "[Removed Lines]",
          "352:           try (OutputStream os = repository.createOutput(uri)) {",
          "353:             os.write(data);",
          "",
          "[Added Lines]",
          "353:           if (!FileTypeMagicUtil.isFileForbiddenInConfigset(data)) {",
          "354:             try (OutputStream os = repository.createOutput(uri)) {",
          "355:               os.write(data);",
          "356:             }",
          "357:           } else {",
          "358:             String mimeType = FileTypeMagicUtil.INSTANCE.guessMimeType(data);",
          "359:             log.warn(",
          "360:                 \"Not including zookeeper file {} in backup, as it matched the MAGIC signature of a forbidden mime type {}\",",
          "361:                 filePath,",
          "362:                 mimeType);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "380:                 byte[] arr = new byte[(int) is.length()];",
          "381:                 is.readBytes(arr, 0, (int) is.length());",
          "383:               }",
          "384:             }",
          "385:             break;",
          "",
          "[Removed Lines]",
          "382:                 configSetService.uploadFileToConfig(configName, filePath, arr, false);",
          "",
          "[Added Lines]",
          "391:                 if (!FileTypeMagicUtil.isFileForbiddenInConfigset(arr)) {",
          "392:                   configSetService.uploadFileToConfig(configName, filePath, arr, false);",
          "393:                 } else {",
          "394:                   String mimeType = FileTypeMagicUtil.INSTANCE.guessMimeType(arr);",
          "395:                   log.warn(",
          "396:                       \"Not including zookeeper file {} in restore, as it matched the MAGIC signature of a forbidden mime type {}\",",
          "397:                       filePath,",
          "398:                       mimeType);",
          "399:                 }",
          "",
          "---------------"
        ],
        "solr/core/src/java/org/apache/solr/handler/configsets/UploadConfigSetFileAPI.java||solr/core/src/java/org/apache/solr/handler/configsets/UploadConfigSetFileAPI.java": [
          "File: solr/core/src/java/org/apache/solr/handler/configsets/UploadConfigSetFileAPI.java -> solr/core/src/java/org/apache/solr/handler/configsets/UploadConfigSetFileAPI.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.apache.solr.core.CoreContainer;",
          "28: import org.apache.solr.request.SolrQueryRequest;",
          "29: import org.apache.solr.response.SolrQueryResponse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import org.apache.solr.util.FileTypeMagicUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     if (fixedSingleFilePath.charAt(0) == '/') {",
          "68:       fixedSingleFilePath = fixedSingleFilePath.substring(1);",
          "69:     }",
          "70:     if (fixedSingleFilePath.isEmpty()) {",
          "71:       throw new SolrException(",
          "72:           SolrException.ErrorCode.BAD_REQUEST,",
          "73:           \"The file path provided for upload, '\" + singleFilePath + \"', is not valid.\");",
          "75:       throw new SolrException(",
          "76:           SolrException.ErrorCode.BAD_REQUEST,",
          "77:           \"The file type provided for upload, '\"",
          "",
          "[Removed Lines]",
          "74:     } else if (ZkMaintenanceUtils.isFileForbiddenInConfigSets(fixedSingleFilePath)) {",
          "",
          "[Added Lines]",
          "71:     byte[] data = inputStream.readAllBytes();",
          "76:     } else if (ZkMaintenanceUtils.isFileForbiddenInConfigSets(fixedSingleFilePath)",
          "77:         || FileTypeMagicUtil.isFileForbiddenInConfigset(data)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:       createBaseNode(configSetService, overwritesExisting, requestIsTrusted, configSetName);",
          "92:     }",
          "93:   }",
          "94: }",
          "",
          "[Removed Lines]",
          "90:       configSetService.uploadFileToConfig(",
          "91:           configSetName, fixedSingleFilePath, inputStream.readAllBytes(), allowOverwrite);",
          "",
          "[Added Lines]",
          "93:       configSetService.uploadFileToConfig(configSetName, fixedSingleFilePath, data, allowOverwrite);",
          "",
          "---------------"
        ],
        "solr/core/src/java/org/apache/solr/util/FileTypeMagicUtil.java||solr/core/src/java/org/apache/solr/util/FileTypeMagicUtil.java": [
          "File: solr/core/src/java/org/apache/solr/util/FileTypeMagicUtil.java -> solr/core/src/java/org/apache/solr/util/FileTypeMagicUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.solr.util;",
          "20: import com.j256.simplemagic.ContentInfo;",
          "21: import com.j256.simplemagic.ContentInfoUtil;",
          "22: import com.j256.simplemagic.ContentType;",
          "23: import java.io.ByteArrayInputStream;",
          "24: import java.io.IOException;",
          "25: import java.io.InputStream;",
          "26: import java.nio.file.FileVisitResult;",
          "27: import java.nio.file.Files;",
          "28: import java.nio.file.Path;",
          "29: import java.nio.file.SimpleFileVisitor;",
          "30: import java.nio.file.attribute.BasicFileAttributes;",
          "31: import java.util.Arrays;",
          "32: import java.util.HashSet;",
          "33: import java.util.Locale;",
          "34: import java.util.Set;",
          "35: import org.apache.solr.common.SolrException;",
          "38: public class FileTypeMagicUtil implements ContentInfoUtil.ErrorCallBack {",
          "39:   private final ContentInfoUtil util;",
          "40:   private static final Set<String> SKIP_FOLDERS = new HashSet<>(Arrays.asList(\".\", \"..\"));",
          "42:   public static FileTypeMagicUtil INSTANCE = new FileTypeMagicUtil();",
          "44:   FileTypeMagicUtil() {",
          "45:     try {",
          "46:       util = new ContentInfoUtil(\"/magic/executables\", this);",
          "47:     } catch (IOException e) {",
          "48:       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing magic file\", e);",
          "49:     }",
          "50:   }",
          "58:   public static void assertConfigSetFolderLegal(Path confPath) throws IOException {",
          "59:     Files.walkFileTree(",
          "60:         confPath,",
          "61:         new SimpleFileVisitor<Path>() {",
          "62:           @Override",
          "63:           public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)",
          "64:               throws IOException {",
          "66:             try (InputStream fileStream = Files.newInputStream(file)) {",
          "67:               byte[] bytes = new byte[100];",
          "68:               fileStream.read(bytes);",
          "69:               if (FileTypeMagicUtil.isFileForbiddenInConfigset(bytes)) {",
          "70:                 throw new SolrException(",
          "71:                     SolrException.ErrorCode.BAD_REQUEST,",
          "72:                     String.format(",
          "73:                         Locale.ROOT,",
          "74:                         \"Not uploading file %s to configset, as it matched the MAGIC signature of a forbidden mime type %s\",",
          "75:                         file,",
          "76:                         FileTypeMagicUtil.INSTANCE.guessMimeType(bytes)));",
          "77:               }",
          "78:               return FileVisitResult.CONTINUE;",
          "79:             }",
          "80:           }",
          "82:           @Override",
          "83:           public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)",
          "84:               throws IOException {",
          "85:             if (SKIP_FOLDERS.contains(dir.getFileName().toString()))",
          "86:               return FileVisitResult.SKIP_SUBTREE;",
          "88:             return FileVisitResult.CONTINUE;",
          "89:           }",
          "90:         });",
          "91:   }",
          "99:   public String guessMimeType(InputStream stream) {",
          "100:     try {",
          "101:       ContentInfo info = util.findMatch(stream);",
          "102:       if (info == null) {",
          "103:         return ContentType.OTHER.getMimeType();",
          "104:       }",
          "105:       return info.getContentType().getMimeType();",
          "106:     } catch (IOException e) {",
          "107:       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);",
          "108:     }",
          "109:   }",
          "117:   public String guessMimeType(byte[] bytes) {",
          "118:     return guessMimeType(new ByteArrayInputStream(bytes));",
          "119:   }",
          "121:   @Override",
          "122:   public void error(String line, String details, Exception e) {",
          "123:     throw new SolrException(",
          "124:         SolrException.ErrorCode.SERVER_ERROR,",
          "125:         String.format(Locale.ROOT, \"%s: %s\", line, details),",
          "126:         e);",
          "127:   }",
          "143:   public static boolean isFileForbiddenInConfigset(InputStream fileStream) {",
          "144:     return forbiddenTypes.contains(FileTypeMagicUtil.INSTANCE.guessMimeType(fileStream));",
          "145:   }",
          "153:   public static boolean isFileForbiddenInConfigset(byte[] bytes) {",
          "154:     if (bytes == null || bytes.length == 0)",
          "155:       return false; // A ZK znode may be a folder with no content",
          "156:     return isFileForbiddenInConfigset(new ByteArrayInputStream(bytes));",
          "157:   }",
          "159:   private static final Set<String> forbiddenTypes =",
          "160:       new HashSet<>(",
          "161:           Arrays.asList(",
          "162:               System.getProperty(",
          "163:                       \"solr.configset.upload.mimetypes.forbidden\",",
          "164:                       \"application/x-java-applet,application/zip,application/x-tar,text/x-shellscript\")",
          "165:                   .split(\",\")));",
          "166: }",
          "",
          "---------------"
        ],
        "solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI.java||solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI.java": [
          "File: solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI.java -> solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: import java.util.List;",
          "46: import java.util.Locale;",
          "47: import java.util.Map;",
          "48: import java.util.Properties;",
          "49: import java.util.Set;",
          "50: import java.util.concurrent.TimeUnit;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "592:       assertEquals(",
          "593:           \"Can't overwrite an existing configset unless the overwrite parameter is set\",",
          "594:           400,",
          "596:       unIgnoreException(\"The configuration regulartestOverwrite-1 already exists in zookeeper\");",
          "597:       assertEquals(",
          "598:           \"Expecting version to remain equal\",",
          "599:           solrconfigZkVersion,",
          "600:           getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\"));",
          "601:       assertEquals(",
          "603:       assertTrue(",
          "604:           \"Expecting version bump\",",
          "605:           solrconfigZkVersion",
          "",
          "[Removed Lines]",
          "595:           uploadConfigSet(configsetName, configsetSuffix, null, false, false, v2, false));",
          "602:           0, uploadConfigSet(configsetName, configsetSuffix, null, true, false, v2, false));",
          "",
          "[Added Lines]",
          "596:           uploadConfigSet(configsetName, configsetSuffix, null, false, false, v2, false, false));",
          "603:           0, uploadConfigSet(configsetName, configsetSuffix, null, true, false, v2, false, false));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "638:         zkClient.makePath(f, true);",
          "639:       }",
          "640:       assertEquals(",
          "642:       for (String f : extraFiles) {",
          "643:         assertTrue(",
          "644:             \"Expecting file \" + f + \" to exist in ConfigSet but it's gone\",",
          "645:             zkClient.exists(f, true));",
          "646:       }",
          "648:       for (String f : extraFiles) {",
          "649:         assertFalse(",
          "650:             \"Expecting file \" + f + \" to be deleted from ConfigSet but it wasn't\",",
          "",
          "[Removed Lines]",
          "641:           0, uploadConfigSet(configsetName, configsetSuffix, null, true, false, v2, false));",
          "647:       assertEquals(0, uploadConfigSet(configsetName, configsetSuffix, null, true, true, v2, false));",
          "",
          "[Added Lines]",
          "642:           0, uploadConfigSet(configsetName, configsetSuffix, null, true, false, v2, false, false));",
          "648:       assertEquals(",
          "649:           0, uploadConfigSet(configsetName, configsetSuffix, null, true, true, v2, false, false));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "675:             .withConnTimeOut(45000, TimeUnit.MILLISECONDS)",
          "676:             .build()) {",
          "677:       String configPath = \"/configs/\" + configsetName + configsetSuffix;",
          "679:       for (String fileEnding : ZkMaintenanceUtils.DEFAULT_FORBIDDEN_FILE_TYPES) {",
          "680:         String f = configPath + \"/test.\" + fileEnding;",
          "681:         assertFalse(",
          "",
          "[Removed Lines]",
          "678:       assertEquals(0, uploadConfigSet(configsetName, configsetSuffix, null, true, false, v2, true));",
          "",
          "[Added Lines]",
          "680:       assertEquals(",
          "681:           0, uploadConfigSet(configsetName, configsetSuffix, null, true, false, v2, true, false));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "710:           getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\");",
          "712:       assertEquals(",
          "714:       assertTrue(",
          "715:           \"Expecting version bump\",",
          "716:           solrconfigZkVersion",
          "",
          "[Removed Lines]",
          "713:           0, uploadConfigSet(configsetName, configsetSuffix, null, true, false, v2, false));",
          "",
          "[Added Lines]",
          "716:           0, uploadConfigSet(configsetName, configsetSuffix, null, true, false, v2, false, false));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "723:       assertEquals(",
          "725:       assertTrue(",
          "726:           \"Expecting version bump\",",
          "727:           solrconfigZkVersion",
          "",
          "[Removed Lines]",
          "724:           0, uploadConfigSet(configsetName, configsetSuffix, \"solr\", true, false, v2, false));",
          "",
          "[Added Lines]",
          "727:           0,",
          "728:           uploadConfigSet(configsetName, configsetSuffix, \"solr\", true, false, v2, false, false));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "749:       assertEquals(",
          "751:       assertTrue(",
          "752:           \"Expecting version bump\",",
          "753:           solrconfigZkVersion",
          "",
          "[Removed Lines]",
          "750:           0, uploadConfigSet(configsetName, configsetSuffix, \"solr\", true, true, v2, false));",
          "",
          "[Added Lines]",
          "754:           0, uploadConfigSet(configsetName, configsetSuffix, \"solr\", true, true, v2, false, false));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "761:       assertEquals(",
          "762:           \"Can't upload a trusted configset with an untrusted request\",",
          "763:           400,",
          "765:       assertEquals(",
          "766:           \"Expecting version to remain equal\",",
          "767:           solrconfigZkVersion,",
          "",
          "[Removed Lines]",
          "764:           uploadConfigSet(configsetName, configsetSuffix, null, true, false, v2, false));",
          "",
          "[Added Lines]",
          "768:           uploadConfigSet(configsetName, configsetSuffix, null, true, false, v2, false, false));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "773:       assertEquals(",
          "774:           \"Can't upload a trusted configset with an untrusted request\",",
          "775:           400,",
          "777:       assertEquals(",
          "778:           \"Expecting version to remain equal\",",
          "779:           solrconfigZkVersion,",
          "",
          "[Removed Lines]",
          "776:           uploadConfigSet(configsetName, configsetSuffix, null, true, true, v2, false));",
          "",
          "[Added Lines]",
          "780:           uploadConfigSet(configsetName, configsetSuffix, null, true, true, v2, false, false));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "785:       assertEquals(",
          "787:       assertTrue(",
          "788:           \"Expecting version bump\",",
          "789:           solrconfigZkVersion",
          "",
          "[Removed Lines]",
          "786:           0, uploadConfigSet(configsetName, configsetSuffix, \"solr\", true, false, v2, false));",
          "",
          "[Added Lines]",
          "790:           0,",
          "791:           uploadConfigSet(configsetName, configsetSuffix, \"solr\", true, false, v2, false, false));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "796:       assertEquals(",
          "798:       assertTrue(",
          "799:           \"Expecting version bump\",",
          "800:           solrconfigZkVersion",
          "",
          "[Removed Lines]",
          "797:           0, uploadConfigSet(configsetName, configsetSuffix, \"solr\", true, true, v2, false));",
          "",
          "[Added Lines]",
          "802:           0, uploadConfigSet(configsetName, configsetSuffix, \"solr\", true, true, v2, false, false));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1457:             .get(\"id\"));",
          "1458:   }",
          "1460:   private static String getSecurityJson() {",
          "1461:     return \"{\\n\"",
          "1462:         + \"  'authentication':{\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1465:   @Test",
          "1466:   public void testUploadWithForbiddenContent() throws Exception {",
          "1468:     long res = uploadConfigSet(\"forbidden\", \"suffix\", \"foo\", true, false, true, false, true);",
          "1469:     assertEquals(400, res);",
          "1470:   }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1511:       String configSetName, String suffix, String username, SolrZkClient zkClient, boolean v2)",
          "1512:       throws IOException {",
          "1513:     assertFalse(getConfigSetService().checkConfigExists(configSetName + suffix));",
          "1515:   }",
          "1517:   private long uploadConfigSet(",
          "",
          "[Removed Lines]",
          "1514:     return uploadConfigSet(configSetName, suffix, username, false, false, v2, false);",
          "",
          "[Added Lines]",
          "1526:     return uploadConfigSet(configSetName, suffix, username, false, false, v2, false, false);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1521:       boolean overwrite,",
          "1522:       boolean cleanup,",
          "1523:       boolean v2,",
          "1525:       throws IOException {",
          "1539:   }",
          "1541:   private long uploadBadConfigSet(String configSetName, String suffix, String username, boolean v2)",
          "",
          "[Removed Lines]",
          "1524:       boolean forbiddenTypes)",
          "1528:     return uploadGivenConfigSet(",
          "1529:         forbiddenTypes",
          "1530:             ? createTempZipFileWithForbiddenTypes(",
          "1531:                 \"solr/configsets/upload/\" + configSetName + \"/solrconfig.xml\")",
          "1532:             : createTempZipFile(\"solr/configsets/upload/\" + configSetName),",
          "1533:         configSetName,",
          "1534:         suffix,",
          "1535:         username,",
          "1536:         overwrite,",
          "1537:         cleanup,",
          "1538:         v2);",
          "",
          "[Added Lines]",
          "1536:       boolean forbiddenTypes,",
          "1537:       boolean forbiddenContent)",
          "1540:     File zipFile;",
          "1541:     if (forbiddenTypes) {",
          "1542:       log.info(\"Uploading configset with forbidden file endings\");",
          "1543:       zipFile =",
          "1544:           createTempZipFileWithForbiddenTypes(",
          "1545:               \"solr/configsets/upload/\" + configSetName + \"/solrconfig.xml\");",
          "1546:     } else if (forbiddenContent) {",
          "1547:       log.info(\"Uploading configset with forbidden file content\");",
          "1548:       zipFile = createTempZipFileWithForbiddenContent(\"magic\");",
          "1549:     } else {",
          "1550:       zipFile = createTempZipFile(\"solr/configsets/upload/\" + configSetName);",
          "1551:     }",
          "1554:     return uploadGivenConfigSet(zipFile, configSetName, suffix, username, overwrite, cleanup, v2);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1702:     }",
          "1703:   }",
          "1708:     try {",
          "1719:             }",
          "1721:           }",
          "1727:       }",
          "1730:     }",
          "1731:   }",
          "",
          "[Removed Lines]",
          "1705:   private static void zipWithForbiddenEndings(File file, File zipfile) throws IOException {",
          "1706:     OutputStream out = new FileOutputStream(zipfile);",
          "1707:     ZipOutputStream zout = new ZipOutputStream(out);",
          "1709:       for (String fileType : ZkMaintenanceUtils.DEFAULT_FORBIDDEN_FILE_TYPES) {",
          "1710:         zout.putNextEntry(new ZipEntry(\"test.\" + fileType));",
          "1712:         InputStream in = new FileInputStream(file);",
          "1713:         try {",
          "1714:           byte[] buffer = new byte[1024];",
          "1715:           while (true) {",
          "1716:             int readCount = in.read(buffer);",
          "1717:             if (readCount < 0) {",
          "1718:               break;",
          "1720:             zout.write(buffer, 0, readCount);",
          "1722:         } finally {",
          "1723:           in.close();",
          "1724:         }",
          "1726:         zout.closeEntry();",
          "1728:     } finally {",
          "1729:       zout.close();",
          "",
          "[Added Lines]",
          "1722:   private File createTempZipFileWithForbiddenContent(String resourcePath) {",
          "1724:       final File zipFile = createTempFile(\"configset\", \"zip\").toFile();",
          "1725:       final File directory = SolrTestCaseJ4.getFile(resourcePath);",
          "1726:       if (log.isInfoEnabled()) {",
          "1727:         log.info(\"Directory: {}\", directory.getAbsolutePath());",
          "1728:       }",
          "1729:       zipWithForbiddenContent(directory, zipFile);",
          "1730:       if (log.isInfoEnabled()) {",
          "1731:         log.info(\"Zipfile: {}\", zipFile.getAbsolutePath());",
          "1732:       }",
          "1733:       return zipFile;",
          "1734:     } catch (IOException e) {",
          "1735:       throw new RuntimeException(e);",
          "1736:     }",
          "1737:   }",
          "1739:   private static void zipWithForbiddenContent(File directory, File zipfile) throws IOException {",
          "1740:     OutputStream out = Files.newOutputStream(zipfile.toPath());",
          "1741:     assertTrue(directory.isDirectory());",
          "1742:     try (ZipOutputStream zout = new ZipOutputStream(out)) {",
          "1744:       for (File file : Objects.requireNonNull(directory.listFiles())) {",
          "1745:         zout.putNextEntry(new ZipEntry(file.getName()));",
          "1746:         zout.write(Files.readAllBytes(file.toPath()));",
          "1747:         zout.closeEntry();",
          "1748:       }",
          "1749:     }",
          "1750:   }",
          "1752:   private static void zipWithForbiddenEndings(File fileOrDirectory, File zipfile)",
          "1753:       throws IOException {",
          "1754:     OutputStream out = new FileOutputStream(zipfile);",
          "1755:     try (ZipOutputStream zout = new ZipOutputStream(out)) {",
          "1756:       if (fileOrDirectory.isFile()) {",
          "1758:         for (String fileType : ZkMaintenanceUtils.DEFAULT_FORBIDDEN_FILE_TYPES) {",
          "1759:           zout.putNextEntry(new ZipEntry(\"test.\" + fileType));",
          "1761:           try (InputStream in = new FileInputStream(fileOrDirectory)) {",
          "1762:             byte[] buffer = new byte[1024];",
          "1763:             while (true) {",
          "1764:               int readCount = in.read(buffer);",
          "1765:               if (readCount < 0) {",
          "1766:                 break;",
          "1767:               }",
          "1768:               zout.write(buffer, 0, readCount);",
          "1772:           zout.closeEntry();",
          "1773:         }",
          "1774:       }",
          "1775:       if (fileOrDirectory.isDirectory()) {",
          "1777:         for (File file : Objects.requireNonNull(fileOrDirectory.listFiles())) {",
          "1778:           zout.putNextEntry(new ZipEntry(file.getName()));",
          "1779:           zout.write(Files.readAllBytes(file.toPath()));",
          "1780:           zout.closeEntry();",
          "1781:         }",
          "",
          "---------------"
        ],
        "solr/core/src/test/org/apache/solr/util/FileTypeMagicUtilTest.java||solr/core/src/test/org/apache/solr/util/FileTypeMagicUtilTest.java": [
          "File: solr/core/src/test/org/apache/solr/util/FileTypeMagicUtilTest.java -> solr/core/src/test/org/apache/solr/util/FileTypeMagicUtilTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.solr.util;",
          "20: import org.apache.solr.SolrTestCaseJ4;",
          "22: public class FileTypeMagicUtilTest extends SolrTestCaseJ4 {",
          "23:   public void testGuessMimeType() {",
          "24:     assertEquals(",
          "25:         \"application/x-java-applet\",",
          "26:         FileTypeMagicUtil.INSTANCE.guessMimeType(",
          "27:             FileTypeMagicUtil.class.getResourceAsStream(\"/magic/HelloWorldJavaClass.class.bin\")));",
          "28:     assertEquals(",
          "29:         \"application/zip\",",
          "30:         FileTypeMagicUtil.INSTANCE.guessMimeType(",
          "31:             FileTypeMagicUtil.class.getResourceAsStream(",
          "32:                 \"/runtimecode/containerplugin.v.1.jar.bin\")));",
          "33:     assertEquals(",
          "34:         \"application/x-tar\",",
          "35:         FileTypeMagicUtil.INSTANCE.guessMimeType(",
          "36:             FileTypeMagicUtil.class.getResourceAsStream(\"/magic/hello.tar.bin\")));",
          "37:     assertEquals(",
          "38:         \"text/x-shellscript\",",
          "39:         FileTypeMagicUtil.INSTANCE.guessMimeType(",
          "40:             FileTypeMagicUtil.class.getResourceAsStream(\"/magic/shell.sh.txt\")));",
          "41:   }",
          "43:   public void testIsFileForbiddenInConfigset() {",
          "44:     assertTrue(",
          "45:         FileTypeMagicUtil.isFileForbiddenInConfigset(",
          "46:             FileTypeMagicUtil.class.getResourceAsStream(\"/magic/HelloWorldJavaClass.class.bin\")));",
          "47:     assertTrue(",
          "48:         FileTypeMagicUtil.isFileForbiddenInConfigset(",
          "49:             FileTypeMagicUtil.class.getResourceAsStream(\"/magic/shell.sh.txt\")));",
          "50:     assertFalse(",
          "51:         FileTypeMagicUtil.isFileForbiddenInConfigset(",
          "52:             FileTypeMagicUtil.class.getResourceAsStream(\"/magic/plain.txt\")));",
          "53:   }",
          "54: }",
          "",
          "---------------"
        ],
        "solr/licenses/simplemagic-1.17.jar.sha1||solr/licenses/simplemagic-1.17.jar.sha1": [
          "File: solr/licenses/simplemagic-1.17.jar.sha1 -> solr/licenses/simplemagic-1.17.jar.sha1",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: b6e2d1e47d7172e57fa858a2e3940c09a590e61e",
          "",
          "---------------"
        ],
        "solr/solrj-zookeeper/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils.java||solr/solrj-zookeeper/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils.java": [
          "File: solr/solrj-zookeeper/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils.java -> solr/solrj-zookeeper/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils.java"
        ],
        "versions.lock||versions.lock": [
          "File: versions.lock -> versions.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: com.healthmarketscience.jackcess:jackcess:4.0.2 (1 constraints: 5d0cf201)",
          "63: com.healthmarketscience.jackcess:jackcess-encrypt:4.0.1 (1 constraints: 5c0cf101)",
          "64: com.ibm.icu:icu4j:70.1 (1 constraints: a90f1784)",
          "65: com.jayway.jsonpath:json-path:2.8.0 (2 constraints: 6c12952c)",
          "66: com.lmax:disruptor:3.4.4 (1 constraints: 0d050a36)",
          "67: com.mchange:c3p0:0.9.5.5 (1 constraints: c80c571b)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: com.j256.simplemagic:simplemagic:1.17 (1 constraints: dd04f830)",
          "",
          "---------------"
        ],
        "versions.props||versions.props": [
          "File: versions.props -> versions.props",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: com.google.errorprone:*=2.23.0",
          "14: com.google.guava:guava=32.1.3-jre",
          "15: com.google.re2j:re2j=1.7",
          "16: com.jayway.jsonpath:json-path=2.8.0",
          "17: com.lmax:disruptor=3.4.4",
          "18: com.tdunning:t-digest=3.1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: com.j256.simplemagic:simplemagic=1.17",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "774891d134b41132dafcdabce99564953c4957fd",
      "candidate_info": {
        "commit_hash": "774891d134b41132dafcdabce99564953c4957fd",
        "repo": "apache/solr",
        "commit_url": "https://github.com/apache/solr/commit/774891d134b41132dafcdabce99564953c4957fd",
        "files": [
          "solr/CHANGES.txt",
          "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
          "solr/core/src/java/org/apache/solr/util/FileUtils.java",
          "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
          "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java"
        ],
        "message": "SOLR-17543: Input validation in FSConfigSetService\n\nSee JIRA ticket for more details.",
        "before_after_code_files": [
          "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
          "solr/core/src/java/org/apache/solr/util/FileUtils.java||solr/core/src/java/org/apache/solr/util/FileUtils.java",
          "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java||solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
          "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java||solr/core/src/test/org/apache/solr/util/FileUtilsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
            "solr/core/src/java/org/apache/solr/util/FileUtils.java||solr/core/src/java/org/apache/solr/util/FileUtils.java",
            "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java||solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
            "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java||solr/core/src/test/org/apache/solr/util/FileUtilsTest.java"
          ],
          "candidate": [
            "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
            "solr/core/src/java/org/apache/solr/util/FileUtils.java||solr/core/src/java/org/apache/solr/util/FileUtils.java",
            "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java||solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
            "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java||solr/core/src/test/org/apache/solr/util/FileUtilsTest.java"
          ]
        }
      },
      "candidate_diff": {
        "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java": [
          "File: solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java -> solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import org.apache.solr.common.cloud.ZkMaintenanceUtils;",
          "39: import org.apache.solr.common.util.Utils;",
          "40: import org.apache.solr.util.FileTypeMagicUtil;",
          "41: import org.slf4j.Logger;",
          "42: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import org.apache.solr.util.FileUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:       throws IOException {",
          "151:     if (ZkMaintenanceUtils.isFileForbiddenInConfigSets(fileName)) {",
          "152:       log.warn(\"Not including uploading file to config, as it is a forbidden type: {}\", fileName);",
          "166:     }",
          "167:   }",
          "",
          "[Removed Lines]",
          "153:     } else {",
          "154:       if (!FileTypeMagicUtil.isFileForbiddenInConfigset(data)) {",
          "155:         Path filePath = getConfigDir(configName).resolve(normalizePathToOsSeparator(fileName));",
          "156:         if (!Files.exists(filePath) || overwriteOnExists) {",
          "157:           Files.write(filePath, data);",
          "158:         }",
          "159:       } else {",
          "160:         String mimeType = FileTypeMagicUtil.INSTANCE.guessMimeType(data);",
          "161:         log.warn(",
          "162:             \"Not including uploading file {}, as it matched the MAGIC signature of a forbidden mime type {}\",",
          "163:             fileName,",
          "164:             mimeType);",
          "165:       }",
          "",
          "[Added Lines]",
          "154:       return;",
          "155:     }",
          "156:     if (FileTypeMagicUtil.isFileForbiddenInConfigset(data)) {",
          "157:       String mimeType = FileTypeMagicUtil.INSTANCE.guessMimeType(data);",
          "158:       log.warn(",
          "159:           \"Not including uploading file {}, as it matched the MAGIC signature of a forbidden mime type {}\",",
          "160:           fileName,",
          "161:           mimeType);",
          "162:       return;",
          "163:     }",
          "164:     final var configsetBasePath = getConfigDir(configName);",
          "165:     final var configsetFilePath = configsetBasePath.resolve(normalizePathToOsSeparator(fileName));",
          "166:     if (!FileUtils.isPathAChildOfParent(",
          "167:         configsetBasePath, configsetFilePath)) { // See SOLR-17543 for context",
          "168:       log.warn(",
          "169:           \"Not uploading file [{}], as it resolves to a location [{}] outside of the configset root directory [{}]\",",
          "170:           fileName,",
          "171:           configsetFilePath,",
          "172:           configsetBasePath);",
          "173:       return;",
          "174:     }",
          "176:     if (overwriteOnExists || !Files.exists(configsetFilePath)) {",
          "177:       Files.write(configsetFilePath, data);",
          "",
          "---------------"
        ],
        "solr/core/src/java/org/apache/solr/util/FileUtils.java||solr/core/src/java/org/apache/solr/util/FileUtils.java": [
          "File: solr/core/src/java/org/apache/solr/util/FileUtils.java -> solr/core/src/java/org/apache/solr/util/FileUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     }",
          "104:     return Files.createDirectories(path);",
          "105:   }",
          "106: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:   public static boolean isPathAChildOfParent(Path parent, Path potentialChild) {",
          "124:     final var normalizedParent = parent.toAbsolutePath().normalize();",
          "125:     final var normalizedChild = potentialChild.toAbsolutePath().normalize();",
          "127:     return normalizedChild.startsWith(normalizedParent)",
          "128:         && !normalizedChild.equals(normalizedParent);",
          "129:   }",
          "",
          "---------------"
        ],
        "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java||solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java": [
          "File: solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java -> solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.solr.core;",
          "19: import static org.apache.solr.core.FileSystemConfigSetService.METADATA_FILE;",
          "21: import java.io.IOException;",
          "22: import java.nio.charset.StandardCharsets;",
          "23: import java.nio.file.Files;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import static org.hamcrest.Matchers.hasItem;",
          "22: import java.io.File;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     fileSystemConfigSetService = null;",
          "50:   }",
          "52:   @Test",
          "53:   public void testUploadAndDeleteConfig() throws IOException {",
          "54:     String configName = \"testconfig\";",
          "56:     fileSystemConfigSetService.uploadConfig(configName, configset(\"cloud-minimal\"));",
          "59:     assertTrue(fileSystemConfigSetService.checkConfigExists(configName));",
          "61:     byte[] testdata = \"test data\".getBytes(StandardCharsets.UTF_8);",
          "",
          "[Removed Lines]",
          "58:     assertEquals(fileSystemConfigSetService.listConfigs().size(), 1);",
          "",
          "[Added Lines]",
          "54:   @Test",
          "55:   public void testIgnoresFileUploadsOutsideOfConfigSetDirectory() throws IOException {",
          "56:     final var initialNumConfigs = fileSystemConfigSetService.listConfigs().size();",
          "57:     final String configName = \"fileEscapeTestConfig\";",
          "58:     final var specificConfigSetBase = configSetBase.resolve(configName);",
          "60:     fileSystemConfigSetService.uploadConfig(configName, configset(\"cloud-minimal\"));",
          "61:     assertEquals(fileSystemConfigSetService.listConfigs().size(), initialNumConfigs + 1);",
          "62:     assertTrue(fileSystemConfigSetService.checkConfigExists(configName));",
          "66:     byte[] testdata = \"test data\".getBytes(StandardCharsets.UTF_8);",
          "67:     fileSystemConfigSetService.uploadFileToConfig(configName, \"validPath\", testdata, true);",
          "68:     final var knownFiles = fileSystemConfigSetService.getAllConfigFiles(configName);",
          "69:     assertThat(knownFiles, hasItem(\"validPath\"));",
          "70:     assertTrue(Files.exists(specificConfigSetBase.resolve(\"validPath\")));",
          "74:     final var invalidFilePaths =",
          "75:         List.of(",
          "76:             \"..\" + File.separator + \"escapePath\",",
          "77:             \"foo\" + File.separator + \"..\" + File.separator + \"..\" + File.separator + \"bar\");",
          "78:     for (String invalidFilePath : invalidFilePaths) {",
          "79:       fileSystemConfigSetService.uploadFileToConfig(configName, invalidFilePath, testdata, true);",
          "80:       assertFalse(Files.exists(specificConfigSetBase.resolve(invalidFilePath)));",
          "81:     }",
          "82:   }",
          "86:     final var initialNumConfigs = fileSystemConfigSetService.listConfigs().size();",
          "90:     assertEquals(fileSystemConfigSetService.listConfigs().size(), initialNumConfigs + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:     assertEquals(\"[schema.xml, solrconfig.xml]\", allConfigFiles.toString());",
          "81:     fileSystemConfigSetService.copyConfig(configName, \"copytestconfig\");",
          "84:     allConfigFiles = fileSystemConfigSetService.getAllConfigFiles(\"copytestconfig\");",
          "85:     assertEquals(\"[schema.xml, solrconfig.xml]\", allConfigFiles.toString());",
          "",
          "[Removed Lines]",
          "82:     assertEquals(fileSystemConfigSetService.listConfigs().size(), 2);",
          "",
          "[Added Lines]",
          "114:     assertEquals(fileSystemConfigSetService.listConfigs().size(), initialNumConfigs + 2);",
          "",
          "---------------"
        ],
        "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java||solr/core/src/test/org/apache/solr/util/FileUtilsTest.java": [
          "File: solr/core/src/test/org/apache/solr/util/FileUtilsTest.java -> solr/core/src/test/org/apache/solr/util/FileUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.solr.util;",
          "19: import java.io.File;",
          "20: import org.apache.solr.SolrTestCase;",
          "22: public class FileUtilsTest extends SolrTestCase {",
          "24:   public void testResolve() {",
          "25:     String cwd = new File(\".\").getAbsolutePath();",
          "26:     assertEquals(new File(\"conf/data\"), FileUtils.resolvePath(new File(\"conf\"), \"data\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.nio.file.Path;",
          "22: import org.junit.Test;",
          "26:   @Test",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:         new File(cwd + \"/conf/data\"), FileUtils.resolvePath(new File(cwd + \"/conf\"), \"data\"));",
          "29:     assertEquals(new File(cwd + \"/data\"), FileUtils.resolvePath(new File(\"conf\"), cwd + \"/data\"));",
          "30:   }",
          "31: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:   @Test",
          "36:   public void testDetectsPathEscape() {",
          "37:     final var parent = Path.of(\".\");",
          "40:     assertTrue(FileUtils.isPathAChildOfParent(parent, parent.resolve(\"child\")));",
          "43:     assertTrue(FileUtils.isPathAChildOfParent(parent, parent.resolve(buildPath(\".\", \"child\"))));",
          "46:     assertTrue(",
          "47:         FileUtils.isPathAChildOfParent(parent, parent.resolve(buildPath(\"nested\", \"child\"))));",
          "50:     assertTrue(",
          "51:         FileUtils.isPathAChildOfParent(",
          "52:             parent, parent.resolve(buildPath(\"child1\", \"..\", \"child2\"))));",
          "53:     assertTrue(",
          "54:         FileUtils.isPathAChildOfParent(",
          "55:             parent, parent.resolve(buildPath(\"child\", \"grandchild1\", \"..\", \"grandchild2\"))));",
          "58:     assertFalse(FileUtils.isPathAChildOfParent(parent, parent));",
          "61:     assertFalse(FileUtils.isPathAChildOfParent(parent, parent.resolve(buildPath(\"..\", \"sibling\"))));",
          "64:     assertFalse(FileUtils.isPathAChildOfParent(parent, parent.resolve(\"..\")));",
          "67:     assertFalse(",
          "68:         FileUtils.isPathAChildOfParent(parent, parent.resolve(buildPath(\"..\", \"..\", \"..\", \"..\"))));",
          "69:   }",
          "71:   private static String buildPath(String... pathSegments) {",
          "72:     final var sb = new StringBuilder();",
          "73:     for (int i = 0; i < pathSegments.length; i++) {",
          "74:       sb.append(pathSegments[i]);",
          "75:       if (i < pathSegments.length - 1) {",
          "76:         sb.append(File.separator);",
          "77:       }",
          "78:     }",
          "79:     return sb.toString();",
          "80:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1d81443e07e782ad753217d58b78ec3d67a9c95",
      "candidate_info": {
        "commit_hash": "f1d81443e07e782ad753217d58b78ec3d67a9c95",
        "repo": "apache/solr",
        "commit_url": "https://github.com/apache/solr/commit/f1d81443e07e782ad753217d58b78ec3d67a9c95",
        "files": [
          "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
          "solr/core/src/java/org/apache/solr/util/FileUtils.java",
          "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
          "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java"
        ],
        "message": "SOLR-17543: Input validation in FSConfigSetService\n\nSee JIRA ticket for more details.",
        "before_after_code_files": [
          "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
          "solr/core/src/java/org/apache/solr/util/FileUtils.java||solr/core/src/java/org/apache/solr/util/FileUtils.java",
          "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java||solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
          "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java||solr/core/src/test/org/apache/solr/util/FileUtilsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
            "solr/core/src/java/org/apache/solr/util/FileUtils.java||solr/core/src/java/org/apache/solr/util/FileUtils.java",
            "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java||solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
            "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java||solr/core/src/test/org/apache/solr/util/FileUtilsTest.java"
          ],
          "candidate": [
            "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
            "solr/core/src/java/org/apache/solr/util/FileUtils.java||solr/core/src/java/org/apache/solr/util/FileUtils.java",
            "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java||solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
            "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java||solr/core/src/test/org/apache/solr/util/FileUtilsTest.java"
          ]
        }
      },
      "candidate_diff": {
        "solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java||solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java": [
          "File: solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java -> solr/core/src/java/org/apache/solr/core/FileSystemConfigSetService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import org.apache.solr.common.cloud.ZkMaintenanceUtils;",
          "39: import org.apache.solr.common.util.Utils;",
          "40: import org.apache.solr.util.FileTypeMagicUtil;",
          "41: import org.slf4j.Logger;",
          "42: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import org.apache.solr.util.FileUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:       throws IOException {",
          "151:     if (ZkMaintenanceUtils.isFileForbiddenInConfigSets(fileName)) {",
          "152:       log.warn(\"Not including uploading file to config, as it is a forbidden type: {}\", fileName);",
          "166:     }",
          "167:   }",
          "",
          "[Removed Lines]",
          "153:     } else {",
          "154:       if (!FileTypeMagicUtil.isFileForbiddenInConfigset(data)) {",
          "155:         Path filePath = getConfigDir(configName).resolve(normalizePathToOsSeparator(fileName));",
          "156:         if (!Files.exists(filePath) || overwriteOnExists) {",
          "157:           Files.write(filePath, data);",
          "158:         }",
          "159:       } else {",
          "160:         String mimeType = FileTypeMagicUtil.INSTANCE.guessMimeType(data);",
          "161:         log.warn(",
          "162:             \"Not including uploading file {}, as it matched the MAGIC signature of a forbidden mime type {}\",",
          "163:             fileName,",
          "164:             mimeType);",
          "165:       }",
          "",
          "[Added Lines]",
          "154:       return;",
          "155:     }",
          "156:     if (FileTypeMagicUtil.isFileForbiddenInConfigset(data)) {",
          "157:       String mimeType = FileTypeMagicUtil.INSTANCE.guessMimeType(data);",
          "158:       log.warn(",
          "159:           \"Not including uploading file {}, as it matched the MAGIC signature of a forbidden mime type {}\",",
          "160:           fileName,",
          "161:           mimeType);",
          "162:       return;",
          "163:     }",
          "164:     final var configsetBasePath = getConfigDir(configName);",
          "165:     final var configsetFilePath = configsetBasePath.resolve(normalizePathToOsSeparator(fileName));",
          "166:     if (!FileUtils.isPathAChildOfParent(",
          "167:         configsetBasePath, configsetFilePath)) { // See SOLR-17543 for context",
          "168:       log.warn(",
          "169:           \"Not uploading file [{}], as it resolves to a location [{}] outside of the configset root directory [{}]\",",
          "170:           fileName,",
          "171:           configsetFilePath,",
          "172:           configsetBasePath);",
          "173:       return;",
          "174:     }",
          "176:     if (overwriteOnExists || !Files.exists(configsetFilePath)) {",
          "177:       Files.write(configsetFilePath, data);",
          "",
          "---------------"
        ],
        "solr/core/src/java/org/apache/solr/util/FileUtils.java||solr/core/src/java/org/apache/solr/util/FileUtils.java": [
          "File: solr/core/src/java/org/apache/solr/util/FileUtils.java -> solr/core/src/java/org/apache/solr/util/FileUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     }",
          "104:     return Files.createDirectories(path);",
          "105:   }",
          "106: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:   public static boolean isPathAChildOfParent(Path parent, Path potentialChild) {",
          "124:     final var normalizedParent = parent.toAbsolutePath().normalize();",
          "125:     final var normalizedChild = potentialChild.toAbsolutePath().normalize();",
          "127:     return normalizedChild.startsWith(normalizedParent)",
          "128:         && !normalizedChild.equals(normalizedParent);",
          "129:   }",
          "",
          "---------------"
        ],
        "solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java||solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java": [
          "File: solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java -> solr/core/src/test/org/apache/solr/core/TestFileSystemConfigSetService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.solr.core;",
          "19: import static org.apache.solr.core.FileSystemConfigSetService.METADATA_FILE;",
          "21: import java.io.IOException;",
          "22: import java.nio.charset.StandardCharsets;",
          "23: import java.nio.file.Files;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import static org.hamcrest.Matchers.hasItem;",
          "22: import java.io.File;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     fileSystemConfigSetService = null;",
          "50:   }",
          "52:   @Test",
          "53:   public void testUploadAndDeleteConfig() throws IOException {",
          "54:     String configName = \"testconfig\";",
          "56:     fileSystemConfigSetService.uploadConfig(configName, configset(\"cloud-minimal\"));",
          "59:     assertTrue(fileSystemConfigSetService.checkConfigExists(configName));",
          "61:     byte[] testdata = \"test data\".getBytes(StandardCharsets.UTF_8);",
          "",
          "[Removed Lines]",
          "58:     assertEquals(fileSystemConfigSetService.listConfigs().size(), 1);",
          "",
          "[Added Lines]",
          "54:   @Test",
          "55:   public void testIgnoresFileUploadsOutsideOfConfigSetDirectory() throws IOException {",
          "56:     final var initialNumConfigs = fileSystemConfigSetService.listConfigs().size();",
          "57:     final String configName = \"fileEscapeTestConfig\";",
          "58:     final var specificConfigSetBase = configSetBase.resolve(configName);",
          "60:     fileSystemConfigSetService.uploadConfig(configName, configset(\"cloud-minimal\"));",
          "61:     assertEquals(fileSystemConfigSetService.listConfigs().size(), initialNumConfigs + 1);",
          "62:     assertTrue(fileSystemConfigSetService.checkConfigExists(configName));",
          "66:     byte[] testdata = \"test data\".getBytes(StandardCharsets.UTF_8);",
          "67:     fileSystemConfigSetService.uploadFileToConfig(configName, \"validPath\", testdata, true);",
          "68:     final var knownFiles = fileSystemConfigSetService.getAllConfigFiles(configName);",
          "69:     assertThat(knownFiles, hasItem(\"validPath\"));",
          "70:     assertTrue(Files.exists(specificConfigSetBase.resolve(\"validPath\")));",
          "74:     final var invalidFilePaths =",
          "75:         List.of(",
          "76:             \"..\" + File.separator + \"escapePath\",",
          "77:             \"foo\" + File.separator + \"..\" + File.separator + \"..\" + File.separator + \"bar\");",
          "78:     for (String invalidFilePath : invalidFilePaths) {",
          "79:       fileSystemConfigSetService.uploadFileToConfig(configName, invalidFilePath, testdata, true);",
          "80:       assertFalse(Files.exists(specificConfigSetBase.resolve(invalidFilePath)));",
          "81:     }",
          "82:   }",
          "86:     final var initialNumConfigs = fileSystemConfigSetService.listConfigs().size();",
          "90:     assertEquals(fileSystemConfigSetService.listConfigs().size(), initialNumConfigs + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:     assertEquals(\"[schema.xml, solrconfig.xml]\", allConfigFiles.toString());",
          "81:     fileSystemConfigSetService.copyConfig(configName, \"copytestconfig\");",
          "84:     allConfigFiles = fileSystemConfigSetService.getAllConfigFiles(\"copytestconfig\");",
          "85:     assertEquals(\"[schema.xml, solrconfig.xml]\", allConfigFiles.toString());",
          "",
          "[Removed Lines]",
          "82:     assertEquals(fileSystemConfigSetService.listConfigs().size(), 2);",
          "",
          "[Added Lines]",
          "114:     assertEquals(fileSystemConfigSetService.listConfigs().size(), initialNumConfigs + 2);",
          "",
          "---------------"
        ],
        "solr/core/src/test/org/apache/solr/util/FileUtilsTest.java||solr/core/src/test/org/apache/solr/util/FileUtilsTest.java": [
          "File: solr/core/src/test/org/apache/solr/util/FileUtilsTest.java -> solr/core/src/test/org/apache/solr/util/FileUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.solr.util;",
          "19: import java.io.File;",
          "20: import org.apache.solr.SolrTestCase;",
          "22: public class FileUtilsTest extends SolrTestCase {",
          "24:   public void testResolve() {",
          "25:     String cwd = new File(\".\").getAbsolutePath();",
          "26:     assertEquals(new File(\"conf/data\"), FileUtils.resolvePath(new File(\"conf\"), \"data\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.nio.file.Path;",
          "22: import org.junit.Test;",
          "26:   @Test",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:         new File(cwd + \"/conf/data\"), FileUtils.resolvePath(new File(cwd + \"/conf\"), \"data\"));",
          "29:     assertEquals(new File(cwd + \"/data\"), FileUtils.resolvePath(new File(\"conf\"), cwd + \"/data\"));",
          "30:   }",
          "31: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:   @Test",
          "36:   public void testDetectsPathEscape() {",
          "37:     final var parent = Path.of(\".\");",
          "40:     assertTrue(FileUtils.isPathAChildOfParent(parent, parent.resolve(\"child\")));",
          "43:     assertTrue(FileUtils.isPathAChildOfParent(parent, parent.resolve(buildPath(\".\", \"child\"))));",
          "46:     assertTrue(",
          "47:         FileUtils.isPathAChildOfParent(parent, parent.resolve(buildPath(\"nested\", \"child\"))));",
          "50:     assertTrue(",
          "51:         FileUtils.isPathAChildOfParent(",
          "52:             parent, parent.resolve(buildPath(\"child1\", \"..\", \"child2\"))));",
          "53:     assertTrue(",
          "54:         FileUtils.isPathAChildOfParent(",
          "55:             parent, parent.resolve(buildPath(\"child\", \"grandchild1\", \"..\", \"grandchild2\"))));",
          "58:     assertFalse(FileUtils.isPathAChildOfParent(parent, parent));",
          "61:     assertFalse(FileUtils.isPathAChildOfParent(parent, parent.resolve(buildPath(\"..\", \"sibling\"))));",
          "64:     assertFalse(FileUtils.isPathAChildOfParent(parent, parent.resolve(\"..\")));",
          "67:     assertFalse(",
          "68:         FileUtils.isPathAChildOfParent(parent, parent.resolve(buildPath(\"..\", \"..\", \"..\", \"..\"))));",
          "69:   }",
          "71:   private static String buildPath(String... pathSegments) {",
          "72:     final var sb = new StringBuilder();",
          "73:     for (int i = 0; i < pathSegments.length; i++) {",
          "74:       sb.append(pathSegments[i]);",
          "75:       if (i < pathSegments.length - 1) {",
          "76:         sb.append(File.separator);",
          "77:       }",
          "78:     }",
          "79:     return sb.toString();",
          "80:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}