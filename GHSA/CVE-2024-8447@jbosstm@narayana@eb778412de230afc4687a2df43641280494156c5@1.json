{
  "cve_id": "CVE-2024-8447",
  "cve_desc": "A security issue was discovered in the LRA Coordinator component of Narayana. When Cancel is called in LRA, an execution time of approximately 2 seconds occurs. If Join is called with the same LRA ID within that timeframe, the application may crash or hang indefinitely, leading to a denial of service.",
  "repo": "jbosstm/narayana",
  "patch_hash": "eb778412de230afc4687a2df43641280494156c5",
  "patch_info": {
    "commit_hash": "eb778412de230afc4687a2df43641280494156c5",
    "repo": "jbosstm/narayana",
    "commit_url": "https://github.com/jbosstm/narayana/commit/eb778412de230afc4687a2df43641280494156c5",
    "files": [
      "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
      "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
      "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
    ],
    "message": "JBTM-3911 Replace synchronized in favor of Reentrant Lock\n\nin LRAService joinLRA method",
    "before_after_code_files": [
      "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
      "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
      "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
    ]
  },
  "patch_diff": {
    "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java": [
      "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "727:     public LRAParticipantRecord enlistParticipant(URI coordinatorUrl, String participantUrl, String recoveryUrlBase,",
      "728:                                                   long timeLimit, String compensatorData) throws UnsupportedEncodingException {",
      "743:         }",
      "746:     }",
      "748:     private LRAParticipantRecord doEnlistParticipant(URI coordinatorUrl, String participantUrl, String recoveryUrlBase,",
      "",
      "[Removed Lines]",
      "729:         LRAParticipantRecord participant = findLRAParticipant(participantUrl, false);",
      "731:         if (participant != null) {",
      "732:             participant.setCompensatorData(compensatorData);",
      "733:             return participant; // must have already been enlisted",
      "734:         }",
      "736:         participant = doEnlistParticipant(coordinatorUrl, participantUrl, recoveryUrlBase,",
      "737:                 timeLimit, compensatorData);",
      "739:         if (participant != null) {",
      "741:             deactivate(); // if it fails the superclass will have logged a warning",
      "742:             savedIntentionList = true; // need this clean up if the LRA times out",
      "745:         return participant;",
      "",
      "[Added Lines]",
      "729:         ReentrantLock lock = tryLockTransaction();",
      "730:         if (lock == null) {",
      "731:             LRALogger.i18nLogger.warn_enlistment();",
      "732:             return null;",
      "733:         }",
      "734:         else {",
      "735:             try {",
      "736:                 LRAParticipantRecord participant = findLRAParticipant(participantUrl, false);",
      "737:                 if (participant != null) {",
      "738:                     participant.setCompensatorData(compensatorData);",
      "739:                     return participant; // must have already been enlisted",
      "740:                 }",
      "741:                 participant = doEnlistParticipant(coordinatorUrl, participantUrl, recoveryUrlBase, timeLimit,",
      "742:                         compensatorData);",
      "743:                 if (participant != null) {",
      "745:                     deactivate(); // if it fails the superclass will have logged a warning",
      "746:                     savedIntentionList = true; // need this clean up if the LRA times out",
      "747:                 }",
      "748:                 return participant;",
      "749:             }",
      "750:             finally {",
      "751:                 lock.unlock();",
      "752:             }",
      "",
      "---------------"
    ],
    "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java": [
      "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:         }",
      "329:     }",
      "332:                                     String compensatorUrl, String linkHeader, String recoveryUrlBase,",
      "333:                                     StringBuilder compensatorData) {",
      "334:         if (lra ==  null) {",
      "",
      "[Removed Lines]",
      "331:     public synchronized int joinLRA(StringBuilder recoveryUrl, URI lra, long timeLimit,",
      "",
      "[Added Lines]",
      "331:     public int joinLRA(StringBuilder recoveryUrl, URI lra, long timeLimit,",
      "",
      "---------------"
    ],
    "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java": [
      "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: package io.narayana.lra.coordinator.domain.model;",
      "21: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
      "24: import org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer;",
      "25: import org.jboss.resteasy.test.TestPortProvider;",
      "26: import org.junit.After;",
      "",
      "[Removed Lines]",
      "8: import com.arjuna.ats.arjuna.common.arjPropertyManager;",
      "9: import io.narayana.lra.LRAData;",
      "10: import io.narayana.lra.client.NarayanaLRAClient;",
      "11: import io.narayana.lra.coordinator.api.Coordinator;",
      "12: import io.narayana.lra.coordinator.domain.service.LRAService;",
      "13: import io.narayana.lra.coordinator.internal.LRARecoveryModule;",
      "14: import io.narayana.lra.filter.ServerLRAFilter;",
      "15: import io.narayana.lra.logging.LRALogger;",
      "16: import io.narayana.lra.provider.ParticipantStatusOctetStreamProvider;",
      "17: import org.eclipse.microprofile.lra.annotation.AfterLRA;",
      "18: import org.eclipse.microprofile.lra.annotation.Compensate;",
      "19: import org.eclipse.microprofile.lra.annotation.Complete;",
      "20: import org.eclipse.microprofile.lra.annotation.Forget;",
      "22: import org.eclipse.microprofile.lra.annotation.ParticipantStatus;",
      "23: import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;",
      "",
      "[Added Lines]",
      "8: import static io.narayana.lra.LRAConstants.COORDINATOR_PATH_NAME;",
      "9: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
      "10: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
      "11: import static org.junit.Assert.assertEquals;",
      "12: import static org.junit.Assert.assertFalse;",
      "13: import static org.junit.Assert.assertNotNull;",
      "14: import static org.junit.Assert.assertNull;",
      "15: import static org.junit.Assert.assertTrue;",
      "16: import static org.junit.Assert.fail;",
      "18: import java.net.URI;",
      "19: import java.net.URISyntaxException;",
      "20: import java.time.temporal.ChronoUnit;",
      "21: import java.util.Arrays;",
      "22: import java.util.HashSet;",
      "23: import java.util.List;",
      "24: import java.util.Set;",
      "25: import java.util.StringTokenizer;",
      "26: import java.util.concurrent.TimeUnit;",
      "27: import java.util.stream.IntStream;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31: import org.junit.Test;",
      "32: import org.junit.rules.TestName;",
      "34: import jakarta.ws.rs.ApplicationPath;",
      "39: import jakarta.ws.rs.NotFoundException;",
      "44: import jakarta.ws.rs.WebApplicationException;",
      "45: import jakarta.ws.rs.client.Client;",
      "46: import jakarta.ws.rs.client.ClientBuilder;",
      "",
      "[Removed Lines]",
      "35: import jakarta.ws.rs.DELETE;",
      "36: import jakarta.ws.rs.DefaultValue;",
      "37: import jakarta.ws.rs.GET;",
      "38: import jakarta.ws.rs.HeaderParam;",
      "40: import jakarta.ws.rs.PUT;",
      "41: import jakarta.ws.rs.Path;",
      "42: import jakarta.ws.rs.Produces;",
      "43: import jakarta.ws.rs.QueryParam;",
      "",
      "[Added Lines]",
      "40: import io.narayana.lra.LRAData;",
      "41: import io.narayana.lra.client.NarayanaLRAClient;",
      "42: import io.narayana.lra.coordinator.api.Coordinator;",
      "43: import io.narayana.lra.coordinator.domain.service.LRAService;",
      "44: import io.narayana.lra.coordinator.internal.LRARecoveryModule;",
      "45: import io.narayana.lra.filter.ServerLRAFilter;",
      "46: import io.narayana.lra.logging.LRALogger;",
      "47: import io.narayana.lra.provider.ParticipantStatusOctetStreamProvider;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50: import jakarta.ws.rs.core.Link;",
      "51: import jakarta.ws.rs.core.MediaType;",
      "52: import jakarta.ws.rs.core.Response;",
      "80:     private static LRAService service;",
      "91:     private NarayanaLRAClient lraClient;",
      "92:     private Client client;",
      "93:     private String coordinatorPath;",
      "",
      "[Removed Lines]",
      "53: import java.io.File;",
      "54: import java.net.URI;",
      "55: import java.net.URISyntaxException;",
      "56: import java.time.temporal.ChronoUnit;",
      "57: import java.util.Arrays;",
      "58: import java.util.HashSet;",
      "59: import java.util.List;",
      "60: import java.util.Objects;",
      "61: import java.util.Set;",
      "62: import java.util.StringTokenizer;",
      "63: import java.util.concurrent.TimeUnit;",
      "64: import java.util.concurrent.atomic.AtomicInteger;",
      "65: import java.util.stream.IntStream;",
      "67: import static io.narayana.lra.LRAConstants.COORDINATOR_PATH_NAME;",
      "68: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
      "69: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_PARENT_CONTEXT_HEADER;",
      "70: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
      "71: import static org.junit.Assert.assertEquals;",
      "72: import static org.junit.Assert.assertFalse;",
      "73: import static org.junit.Assert.assertNotNull;",
      "74: import static org.junit.Assert.assertNull;",
      "75: import static org.junit.Assert.assertTrue;",
      "76: import static org.junit.Assert.fail;",
      "78: public class LRATest {",
      "79:     private static UndertowJaxrsServer server;",
      "82:     static final AtomicInteger compensateCount = new AtomicInteger(0);",
      "83:     static final AtomicInteger completeCount = new AtomicInteger(0);",
      "84:     static final AtomicInteger forgetCount = new AtomicInteger(0);",
      "86:     static final long LRA_SHORT_TIMELIMIT = 10L;",
      "88:     private static LRAStatus status = LRAStatus.Active;",
      "89:     private static final AtomicInteger acceptCount = new AtomicInteger(0);",
      "",
      "[Added Lines]",
      "60: public class LRATest extends LRATestBase {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "95:     @Rule",
      "96:     public TestName testName = new TestName();",
      "304:     @ApplicationPath(\"base\")",
      "305:     public static class LRAParticipant extends Application {",
      "306:         @Override",
      "",
      "[Removed Lines]",
      "98:     @Path(\"/test\")",
      "99:     public static class Participant {",
      "100:         private Response getResult(boolean cancel, URI lraId) {",
      "101:             Response.Status status = cancel ? Response.Status.INTERNAL_SERVER_ERROR : Response.Status.OK;",
      "103:             return Response.status(status).entity(lraId.toASCIIString()).build();",
      "104:         }",
      "106:         @GET",
      "107:         @Path(\"start-end\")",
      "108:         @LRA(value = LRA.Type.REQUIRED)",
      "109:         public Response doInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "110:                                 @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
      "111:                                 @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "112:             LRATest.acceptCount.set(acceptCount);",
      "114:             return getResult(cancel, contextId);",
      "115:         }",
      "117:         @GET",
      "118:         @Path(\"start\")",
      "119:         @LRA(value = LRA.Type.REQUIRED, end = false)",
      "120:         public Response startInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "121:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
      "122:                                    @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
      "123:                                    @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "124:             LRATest.acceptCount.set(acceptCount);",
      "126:             return getResult(cancel, contextId);",
      "127:         }",
      "129:         @PUT",
      "130:         @Path(\"end\")",
      "131:         @LRA(value = LRA.Type.MANDATORY,",
      "132:                 cancelOnFamily = Response.Status.Family.SERVER_ERROR)",
      "133:         public Response endLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "134:                                @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
      "135:                                @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
      "136:                                @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "137:             LRATest.acceptCount.set(acceptCount);",
      "139:             return getResult(cancel, contextId);",
      "140:         }",
      "142:         @GET",
      "143:         @Path(\"time-limit\")",
      "144:         @Produces(MediaType.APPLICATION_JSON)",
      "145:         @LRA(value = LRA.Type.REQUIRED, timeLimit = 500, timeUnit = ChronoUnit.MILLIS)",
      "146:         public Response timeLimit(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {",
      "147:             try {",
      "150:                 Thread.sleep(2000);",
      "151:             } catch (InterruptedException e) {",
      "152:                 LRALogger.logger.debugf(\"Interrupted because time limit elapsed\", e);",
      "153:             }",
      "154:             return Response.status(Response.Status.OK).entity(lraId.toASCIIString()).build();",
      "155:         }",
      "157:         @GET",
      "158:         @Path(\"timed-action\")",
      "159:         @LRA(value = LRA.Type.REQUIRED, end = false, timeLimit = LRA_SHORT_TIMELIMIT) // the default unit is SECONDS",
      "160:         public Response actionWithLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "161:                                       @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "162:             status = LRAStatus.Active;",
      "164:             server.stop(); //simulate a server crash",
      "166:             return getResult(cancel, contextId);",
      "167:         }",
      "169:         @LRA(value = LRA.Type.NESTED, end = false)",
      "170:         @PUT",
      "171:         @Path(\"nested\")",
      "172:         public Response nestedLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "173:                                   @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
      "174:                                   @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "175:             return getResult(cancel, contextId);",
      "176:         }",
      "178:         @LRA(value = LRA.Type.NESTED)",
      "179:         @PUT",
      "180:         @Path(\"nested-with-close\")",
      "181:         public Response nestedLRAWithClose(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "182:                                            @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentId,",
      "183:                                            @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "184:             return getResult(cancel, contextId);",
      "185:         }",
      "187:         @PUT",
      "188:         @Path(\"multiLevelNestedActivity\")",
      "189:         @LRA(value = LRA.Type.MANDATORY, end = false)",
      "190:         public Response multiLevelNestedActivity(",
      "191:                 @HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
      "192:                 @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI nestedLRAId,",
      "193:                 @QueryParam(\"nestedCnt\") @DefaultValue(\"1\") Integer nestedCnt) {",
      "195:             String[] lras = new String[nestedCnt + 1];",
      "196:             lras[0] = nestedLRAId.toASCIIString();",
      "197:             IntStream.range(1, lras.length).forEach(i -> lras[i] = restPutInvocation(nestedLRAId,\"nestedActivity\", \"\"));",
      "199:             return Response.ok(String.join(\",\", lras)).build();",
      "200:         }",
      "202:         @PUT",
      "203:         @Path(\"nestedActivity\")",
      "204:         @LRA(value = LRA.Type.NESTED, end = true)",
      "205:         public Response nestedActivity(@HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
      "206:                                        @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI nestedLRAId) {",
      "207:             return Response.ok(nestedLRAId.toASCIIString()).build();",
      "208:         }",
      "210:         @GET",
      "211:         @Path(\"status\")",
      "212:         public Response getStatus() {",
      "213:             return Response.ok(status.name()).build();",
      "214:         }",
      "216:         @PUT",
      "217:         @Path(\"/complete\")",
      "218:         @Complete",
      "219:         public Response complete(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
      "220:                                  @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
      "221:             if (acceptCount.getAndDecrement() <= 0) {",
      "222:                 completeCount.incrementAndGet();",
      "223:                 acceptCount.set(0);",
      "224:                 return Response.status(Response.Status.OK).entity(ParticipantStatus.Completed).build();",
      "225:             }",
      "227:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Completing).build();",
      "228:         }",
      "230:         @PUT",
      "231:         @Path(\"/compensate\")",
      "232:         @Compensate",
      "233:         public Response compensate(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
      "234:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
      "235:             if (acceptCount.getAndDecrement() <= 0) {",
      "236:                 compensateCount.incrementAndGet();",
      "237:                 acceptCount.set(0);",
      "238:                 return Response.status(Response.Status.OK).entity(ParticipantStatus.Compensated).build();",
      "239:             }",
      "241:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Compensating).build();",
      "242:         }",
      "244:         @PUT",
      "245:         @Path(\"after\")",
      "246:         @AfterLRA",
      "247:         public Response lraEndStatus(LRAStatus endStatus) {",
      "248:             status = endStatus;",
      "250:             return Response.ok().build();",
      "251:         }",
      "253:         @DELETE",
      "254:         @Path(\"/forget\")",
      "255:         @Produces(MediaType.APPLICATION_JSON)",
      "256:         @Forget",
      "257:         public Response forgetWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,",
      "258:                                    @HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId) {",
      "259:             forgetCount.incrementAndGet();",
      "261:             return Response.ok().build();",
      "262:         }",
      "264:         @GET",
      "265:         @Path(\"forget-count\")",
      "266:         public int getForgetCount() {",
      "267:             return forgetCount.get();",
      "268:         }",
      "270:         @PUT",
      "271:         @Path(\"reset-accepted\")",
      "272:         public Response reset() {",
      "273:             LRATest.acceptCount.set(0);",
      "275:             return Response.ok(\"\").build();",
      "276:         }",
      "278:         private String restPutInvocation(URI lraURI, String path, String bodyText) {",
      "279:             String id = \"\";",
      "280:             Client client = ClientBuilder.newClient();",
      "281:             try {",
      "282:                 try (Response response = client",
      "283:                         .target(TestPortProvider.generateURL(\"/base/test\"))",
      "284:                         .path(path)",
      "285:                         .request()",
      "286:                         .header(LRA_HTTP_CONTEXT_HEADER, lraURI)",
      "287:                         .put(Entity.text(bodyText))) {",
      "288:                     if (response.hasEntity()) { // read the entity (to force close on the response)",
      "289:                         id = response.readEntity(String.class);",
      "290:                     }",
      "291:                     if (response.getStatus() != Response.Status.OK.getStatusCode()) {",
      "292:                         throw new WebApplicationException(id + \": error on REST PUT for LRA '\" + lraURI",
      "293:                                 + \"' at path '\" + path + \"' and body '\" + bodyText + \"'\", response);",
      "294:                     }",
      "295:                 }",
      "297:                 return id;",
      "298:             } finally {",
      "299:                 client.close();",
      "300:             }",
      "301:         }",
      "302:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "333:         LRALogger.logger.debugf(\"Starting test %s\", testName);",
      "334:         server = new UndertowJaxrsServer().start();",
      "337:         lraClient = new NarayanaLRAClient();",
      "339:         compensateCount.set(0);",
      "",
      "[Removed Lines]",
      "336:         clearObjectStore();",
      "",
      "[Added Lines]",
      "103:         clearObjectStore(testName);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "353:         LRALogger.logger.debugf(\"Finished test %s\", testName);",
      "354:         lraClient.close();",
      "355:         client.close();",
      "357:         server.stop();",
      "358:     }",
      "",
      "[Removed Lines]",
      "356:         clearObjectStore();",
      "",
      "[Added Lines]",
      "123:         clearObjectStore(testName);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "904:                 .build().toString();",
      "905:     }",
      "929: }",
      "",
      "[Removed Lines]",
      "907:     private void clearObjectStore() {",
      "908:         final String objectStorePath = arjPropertyManager.getObjectStoreEnvironmentBean().getObjectStoreDir();",
      "909:         final File objectStoreDirectory = new File(objectStorePath);",
      "911:         clearDirectory(objectStoreDirectory);",
      "912:     }",
      "914:     private void clearDirectory(final File directory) {",
      "915:         final File[] files = directory.listFiles();",
      "917:         if (files != null) {",
      "918:             for (final File file : Objects.requireNonNull(directory.listFiles())) {",
      "919:                 if (file.isDirectory()) {",
      "920:                     clearDirectory(file);",
      "921:                 }",
      "923:                 if (!file.delete()) {",
      "924:                     LRALogger.logger.infof(\"%s: unable to delete file %s\", testName, file.getName());",
      "925:                 }",
      "926:             }",
      "927:         }",
      "928:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java": [
      "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2:    Copyright The Narayana Authors",
      "3:    SPDX-License-Identifier: Apache-2.0",
      "6: package io.narayana.lra.coordinator.domain.model;",
      "8: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
      "9: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_PARENT_CONTEXT_HEADER;",
      "10: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
      "12: import java.io.File;",
      "13: import java.net.URI;",
      "14: import java.time.temporal.ChronoUnit;",
      "15: import java.util.Objects;",
      "16: import java.util.concurrent.atomic.AtomicInteger;",
      "17: import java.util.stream.IntStream;",
      "19: import org.eclipse.microprofile.lra.annotation.AfterLRA;",
      "20: import org.eclipse.microprofile.lra.annotation.Compensate;",
      "21: import org.eclipse.microprofile.lra.annotation.Complete;",
      "22: import org.eclipse.microprofile.lra.annotation.Forget;",
      "23: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
      "24: import org.eclipse.microprofile.lra.annotation.ParticipantStatus;",
      "25: import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;",
      "26: import org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer;",
      "27: import org.jboss.resteasy.test.TestPortProvider;",
      "28: import org.junit.rules.TestName;",
      "30: import com.arjuna.ats.arjuna.common.arjPropertyManager;",
      "32: import io.narayana.lra.logging.LRALogger;",
      "33: import jakarta.ws.rs.DELETE;",
      "34: import jakarta.ws.rs.DefaultValue;",
      "35: import jakarta.ws.rs.GET;",
      "36: import jakarta.ws.rs.HeaderParam;",
      "37: import jakarta.ws.rs.PUT;",
      "38: import jakarta.ws.rs.Path;",
      "39: import jakarta.ws.rs.Produces;",
      "40: import jakarta.ws.rs.QueryParam;",
      "41: import jakarta.ws.rs.WebApplicationException;",
      "42: import jakarta.ws.rs.client.Client;",
      "43: import jakarta.ws.rs.client.ClientBuilder;",
      "44: import jakarta.ws.rs.client.Entity;",
      "45: import jakarta.ws.rs.core.MediaType;",
      "46: import jakarta.ws.rs.core.Response;",
      "48: public class LRATestBase {",
      "50:     protected static UndertowJaxrsServer server;",
      "51:     static final AtomicInteger compensateCount = new AtomicInteger(0);",
      "52:     static final AtomicInteger completeCount = new AtomicInteger(0);",
      "53:     static final AtomicInteger forgetCount = new AtomicInteger(0);",
      "54:     static final long LRA_SHORT_TIMELIMIT = 10L;",
      "55:     private static LRAStatus status = LRAStatus.Active;",
      "56:     private static final AtomicInteger acceptCount = new AtomicInteger(0);",
      "58:     @Path(\"/test\")",
      "59:     public static class Participant {",
      "60:         private Response getResult(boolean cancel, URI lraId) {",
      "61:             Response.Status status = cancel ? Response.Status.INTERNAL_SERVER_ERROR : Response.Status.OK;",
      "63:             return Response.status(status).entity(lraId.toASCIIString()).build();",
      "64:         }",
      "66:         @GET",
      "67:         @Path(\"start-end\")",
      "68:         @LRA(value = LRA.Type.REQUIRED)",
      "69:         public Response doInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "70:                                 @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
      "71:                                 @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "72:             LRATestBase.acceptCount.set(acceptCount);",
      "74:             return getResult(cancel, contextId);",
      "75:         }",
      "77:         @GET",
      "78:         @Path(\"start\")",
      "79:         @LRA(value = LRA.Type.REQUIRED, end = false)",
      "80:         public Response startInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "81:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
      "82:                                    @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
      "83:                                    @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "84:             LRATestBase.acceptCount.set(acceptCount);",
      "86:             return getResult(cancel, contextId);",
      "87:         }",
      "89:         @PUT",
      "90:         @Path(\"end\")",
      "91:         @LRA(value = LRA.Type.MANDATORY,",
      "92:                 cancelOnFamily = Response.Status.Family.SERVER_ERROR)",
      "93:         public Response endLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "94:                                @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
      "95:                                @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
      "96:                                @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "97:             LRATestBase.acceptCount.set(acceptCount);",
      "99:             return getResult(cancel, contextId);",
      "100:         }",
      "102:         @GET",
      "103:         @Path(\"time-limit\")",
      "104:         @Produces(MediaType.APPLICATION_JSON)",
      "105:         @LRA(value = LRA.Type.REQUIRED, timeLimit = 500, timeUnit = ChronoUnit.MILLIS)",
      "106:         public Response timeLimit(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {",
      "107:             try {",
      "110:                 Thread.sleep(2000);",
      "111:             } catch (InterruptedException e) {",
      "112:                 LRALogger.logger.debugf(\"Interrupted because time limit elapsed\", e);",
      "113:             }",
      "114:             return Response.status(Response.Status.OK).entity(lraId.toASCIIString()).build();",
      "115:         }",
      "117:         @GET",
      "118:         @Path(\"timed-action\")",
      "119:         @LRA(value = LRA.Type.REQUIRED, end = false, timeLimit = LRA_SHORT_TIMELIMIT) // the default unit is SECONDS",
      "120:         public Response actionWithLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "121:                                       @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "122:             status = LRAStatus.Active;",
      "124:             server.stop(); //simulate a server crash",
      "126:             return getResult(cancel, contextId);",
      "127:         }",
      "129:         @LRA(value = LRA.Type.NESTED, end = false)",
      "130:         @PUT",
      "131:         @Path(\"nested\")",
      "132:         public Response nestedLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "133:                                   @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
      "134:                                   @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "135:             return getResult(cancel, contextId);",
      "136:         }",
      "138:         @LRA(value = LRA.Type.NESTED)",
      "139:         @PUT",
      "140:         @Path(\"nested-with-close\")",
      "141:         public Response nestedLRAWithClose(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "142:                                            @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentId,",
      "143:                                            @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "144:             return getResult(cancel, contextId);",
      "145:         }",
      "147:         @PUT",
      "148:         @Path(\"multiLevelNestedActivity\")",
      "149:         @LRA(value = LRA.Type.MANDATORY, end = false)",
      "150:         public Response multiLevelNestedActivity(",
      "151:                 @HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
      "152:                 @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI nestedLRAId,",
      "153:                 @QueryParam(\"nestedCnt\") @DefaultValue(\"1\") Integer nestedCnt) {",
      "155:             String[] lras = new String[nestedCnt + 1];",
      "156:             lras[0] = nestedLRAId.toASCIIString();",
      "157:             IntStream.range(1, lras.length).forEach(i -> lras[i] = restPutInvocation(nestedLRAId,\"nestedActivity\", \"\"));",
      "159:             return Response.ok(String.join(\",\", lras)).build();",
      "160:         }",
      "162:         @PUT",
      "163:         @Path(\"nestedActivity\")",
      "164:         @LRA(value = LRA.Type.NESTED, end = true)",
      "165:         public Response nestedActivity(@HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
      "166:                                        @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI nestedLRAId) {",
      "167:             return Response.ok(nestedLRAId.toASCIIString()).build();",
      "168:         }",
      "170:         @GET",
      "171:         @Path(\"status\")",
      "172:         public Response getStatus() {",
      "173:             return Response.ok(status.name()).build();",
      "174:         }",
      "176:         @PUT",
      "177:         @Path(\"/complete\")",
      "178:         @Complete",
      "179:         public Response complete(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
      "180:                                  @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
      "181:             if (acceptCount.getAndDecrement() <= 0) {",
      "182:                 completeCount.incrementAndGet();",
      "183:                 acceptCount.set(0);",
      "184:                 return Response.status(Response.Status.OK).entity(ParticipantStatus.Completed).build();",
      "185:             }",
      "187:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Completing).build();",
      "188:         }",
      "190:         @PUT",
      "191:         @Path(\"/compensate\")",
      "192:         @Compensate",
      "193:         public Response compensate(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
      "194:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
      "195:             if (acceptCount.getAndDecrement() <= 0) {",
      "196:                 compensateCount.incrementAndGet();",
      "197:                 acceptCount.set(0);",
      "198:                 return Response.status(Response.Status.OK).entity(ParticipantStatus.Compensated).build();",
      "199:             }",
      "201:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Compensating).build();",
      "202:         }",
      "204:         @PUT",
      "205:         @Path(\"after\")",
      "206:         @AfterLRA",
      "207:         public Response lraEndStatus(LRAStatus endStatus) {",
      "208:             status = endStatus;",
      "210:             return Response.ok().build();",
      "211:         }",
      "213:         @DELETE",
      "214:         @Path(\"/forget\")",
      "215:         @Produces(MediaType.APPLICATION_JSON)",
      "216:         @Forget",
      "217:         public Response forgetWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,",
      "218:                                    @HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId) {",
      "219:             forgetCount.incrementAndGet();",
      "221:             return Response.ok().build();",
      "222:         }",
      "224:         @GET",
      "225:         @Path(\"forget-count\")",
      "226:         public int getForgetCount() {",
      "227:             return forgetCount.get();",
      "228:         }",
      "230:         @PUT",
      "231:         @Path(\"reset-accepted\")",
      "232:         public Response reset() {",
      "233:             LRATestBase.acceptCount.set(0);",
      "235:             return Response.ok(\"\").build();",
      "236:         }",
      "238:         private String restPutInvocation(URI lraURI, String path, String bodyText) {",
      "239:             String id = \"\";",
      "240:             Client client = ClientBuilder.newClient();",
      "241:             try {",
      "242:                 try (Response response = client",
      "243:                         .target(TestPortProvider.generateURL(\"/base/test\"))",
      "244:                         .path(path)",
      "245:                         .request()",
      "246:                         .header(LRA_HTTP_CONTEXT_HEADER, lraURI)",
      "247:                         .put(Entity.text(bodyText))) {",
      "248:                     if (response.hasEntity()) { // read the entity (to force close on the response)",
      "249:                         id = response.readEntity(String.class);",
      "250:                     }",
      "251:                     if (response.getStatus() != Response.Status.OK.getStatusCode()) {",
      "252:                         throw new WebApplicationException(id + \": error on REST PUT for LRA '\" + lraURI",
      "253:                                 + \"' at path '\" + path + \"' and body '\" + bodyText + \"'\", response);",
      "254:                     }",
      "255:                 }",
      "257:                 return id;",
      "258:             } finally {",
      "259:                 client.close();",
      "260:             }",
      "261:         }",
      "262:     }",
      "264:     protected void clearObjectStore(TestName testName) {",
      "265:         final String objectStorePath = arjPropertyManager.getObjectStoreEnvironmentBean().getObjectStoreDir();",
      "266:         final File objectStoreDirectory = new File(objectStorePath);",
      "268:         clearDirectory(objectStoreDirectory, testName);",
      "269:     }",
      "271:     protected void clearDirectory(final File directory, TestName testName) {",
      "272:         final File[] files = directory.listFiles();",
      "274:         if (files != null) {",
      "275:             for (final File file : Objects.requireNonNull(directory.listFiles())) {",
      "276:                 if (file.isDirectory()) {",
      "277:                     clearDirectory(file, testName);",
      "278:                 }",
      "280:                 if (!file.delete()) {",
      "281:                     LRALogger.logger.infof(\"%s: unable to delete file %s\", testName, file.getName());",
      "282:                 }",
      "283:             }",
      "284:         }",
      "285:     }",
      "286: }",
      "",
      "---------------"
    ],
    "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java": [
      "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2:    Copyright The Narayana Authors",
      "3:    SPDX-License-Identifier: Apache-2.0",
      "5: package io.narayana.lra.coordinator.domain.model;",
      "7: import static io.narayana.lra.LRAConstants.COORDINATOR_PATH_NAME;",
      "8: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
      "9: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_PARENT_CONTEXT_HEADER;",
      "10: import static org.junit.Assert.assertThrows;",
      "11: import static org.junit.Assert.fail;",
      "13: import java.net.URI;",
      "14: import java.time.temporal.ChronoUnit;",
      "15: import java.util.HashSet;",
      "16: import java.util.Set;",
      "17: import java.util.concurrent.TimeUnit;",
      "18: import java.util.concurrent.locks.ReentrantLock;",
      "20: import org.eclipse.microprofile.lra.annotation.Compensate;",
      "21: import org.eclipse.microprofile.lra.annotation.ParticipantStatus;",
      "22: import org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer;",
      "23: import org.jboss.resteasy.test.TestPortProvider;",
      "24: import org.junit.After;",
      "25: import org.junit.Before;",
      "26: import org.junit.BeforeClass;",
      "27: import org.junit.Rule;",
      "28: import org.junit.Test;",
      "29: import org.junit.rules.TestName;",
      "31: import io.narayana.lra.client.NarayanaLRAClient;",
      "32: import io.narayana.lra.coordinator.api.Coordinator;",
      "33: import io.narayana.lra.filter.ServerLRAFilter;",
      "34: import io.narayana.lra.logging.LRALogger;",
      "35: import io.narayana.lra.provider.ParticipantStatusOctetStreamProvider;",
      "36: import jakarta.ws.rs.ApplicationPath;",
      "37: import jakarta.ws.rs.HeaderParam;",
      "38: import jakarta.ws.rs.PUT;",
      "39: import jakarta.ws.rs.Path;",
      "40: import jakarta.ws.rs.WebApplicationException;",
      "41: import jakarta.ws.rs.core.Application;",
      "42: import jakarta.ws.rs.core.Response;",
      "44: public class LRAWithParticipantsTest extends LRATestBase {",
      "46:     @Rule",
      "47:     public TestName testName = new TestName();",
      "48:     private UndertowJaxrsServer server;",
      "49:     private NarayanaLRAClient lraClient;",
      "50:     private static ReentrantLock lock = new ReentrantLock();",
      "51:     private static boolean joinAttempted;",
      "52:     private static boolean compensateCalled;",
      "53:     @Path(\"/test\")",
      "54:     public static class ParticipantExtended extends Participant {",
      "56:         @PUT",
      "57:         @Path(\"/compensate\")",
      "58:         @Compensate",
      "59:         public Response compensate(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
      "60:                 @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
      "61:             synchronized (lock) {",
      "62:                 compensateCalled = true;",
      "63:                 lock.notify();",
      "64:             }",
      "65:             synchronized (lock) {",
      "66:                 while (!joinAttempted) {",
      "67:                     try {",
      "68:                         lock.wait();",
      "69:                     }",
      "70:                     catch (InterruptedException e) {",
      "71:                         fail(\"Could not wait\");",
      "72:                     }",
      "73:                 }",
      "74:             }",
      "75:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Compensating).build();",
      "76:         }",
      "77:     }",
      "78:     @ApplicationPath(\"service2\")",
      "79:     public static class Service2 extends Application {",
      "81:         @Override",
      "82:         public Set<Class<?>> getClasses() {",
      "83:             HashSet<Class<?>> classes = new HashSet<>();",
      "84:             classes.add(ParticipantExtended.class);",
      "85:             classes.add(ServerLRAFilter.class);",
      "86:             classes.add(ParticipantStatusOctetStreamProvider.class);",
      "87:             return classes;",
      "88:         }",
      "89:     }",
      "90:     @ApplicationPath(\"service3\")",
      "91:     public static class Service3 extends Service2 {",
      "92:     }",
      "93:     @ApplicationPath(\"service4\")",
      "94:     public static class Service4 extends Service2 {",
      "95:     }",
      "96:     @ApplicationPath(\"/\")",
      "97:     public static class LRACoordinator extends Application {",
      "99:         @Override",
      "100:         public Set<Class<?>> getClasses() {",
      "101:             HashSet<Class<?>> classes = new HashSet<>();",
      "102:             classes.add(Coordinator.class);",
      "103:             return classes;",
      "104:         }",
      "105:     }",
      "106:     @BeforeClass",
      "107:     public static void start() {",
      "108:         System.setProperty(\"lra.coordinator.url\", TestPortProvider.generateURL('/' + COORDINATOR_PATH_NAME));",
      "109:     }",
      "111:     @Before",
      "112:     public void before() {",
      "113:         LRALogger.logger.debugf(\"Starting test %s\", testName);",
      "114:         server = new UndertowJaxrsServer().start();",
      "115:         clearObjectStore(testName);",
      "116:         lraClient = new NarayanaLRAClient();",
      "117:         server.deploy(LRACoordinator.class);",
      "118:         server.deployOldStyle(Service2.class);",
      "119:         server.deployOldStyle(Service3.class);",
      "120:         server.deployOldStyle(Service4.class);",
      "121:     }",
      "123:     @After",
      "124:     public void after() {",
      "125:         LRALogger.logger.debugf(\"Finished test %s\", testName);",
      "126:         lraClient.close();",
      "127:         clearObjectStore(testName);",
      "128:         server.stop();",
      "129:     }",
      "131:     @Test",
      "132:     public void testJoinAfterTimeout() {",
      "135:         URI lraId = lraClient.startLRA(null, \"testTimeLimit\", 1000L, ChronoUnit.MILLIS);",
      "137:         lraClient.joinLRA(lraId, null, URI.create(\"http://localhost:8081/service2/test\"), null);",
      "139:         lraClient.joinLRA(lraId, null, URI.create(\"http://localhost:8081/service3/test\"), null);",
      "144:         try {",
      "145:             TimeUnit.SECONDS.sleep(1);",
      "146:         }",
      "147:         catch (InterruptedException e) {",
      "148:             throw new RuntimeException(e);",
      "149:         }",
      "150:         synchronized (lock) {",
      "151:             while (!compensateCalled) {",
      "152:                 try {",
      "153:                     lock.wait();",
      "154:                 }",
      "155:                 catch (InterruptedException e) {",
      "156:                     fail(\"Could not wait\");",
      "157:                 }",
      "158:             }",
      "163:             assertThrows(WebApplicationException.class, () -> {",
      "164:                 lraClient.joinLRA(lraId, null, URI.create(\"http://localhost:8081/service4/test\"), null);",
      "165:             });",
      "166:             joinAttempted = true;",
      "167:             lock.notify();",
      "168:         }",
      "169:     }",
      "170: }",
      "",
      "---------------"
    ],
    "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java": [
      "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:     @Test",
      "92:     public void lraMBeanRemoval() throws Exception {",
      "94:         OSEntryBean lraOSEntryBean = null;",
      "95:         try {",
      "96:             lra.begin(Long.MAX_VALUE); // Creating the LRA records in the log store.",
      "",
      "[Removed Lines]",
      "93:         LongRunningAction lra = new LongRunningAction(new Uid());",
      "",
      "[Added Lines]",
      "93:         String lraUrl = \"http://localhost:8080/lra\";",
      "94:         LongRunningAction lra = LRARecoveryModule.getService().startLRA(lraUrl, null, \"client\", Long.MAX_VALUE);",
      "",
      "---------------"
    ],
    "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java": [
      "File: rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java -> rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "165:     @Message(id = 25039, value = \"Invalid argument passed to method: %s\")",
      "166:     String error_invalidArgument(String reason);",
      "169:         Allocate new messages directly above this notice.",
      "170:           - id: use the next id number in numeric sequence. Don't reuse ids.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "168:     @LogMessage(level = WARN)",
      "169:     @Message(id = 25040, value = \"Lock not acquired, enlistment failed: cannot enlist participant, cannot lock transaction\")",
      "170:     void warn_enlistment();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "227274e40ffa2e157dc5880eb14891fe8a0ee605",
      "candidate_info": {
        "commit_hash": "227274e40ffa2e157dc5880eb14891fe8a0ee605",
        "repo": "jbosstm/narayana",
        "commit_url": "https://github.com/jbosstm/narayana/commit/227274e40ffa2e157dc5880eb14891fe8a0ee605",
        "files": [
          "rts/lra/client/src/main/java/io/narayana/lra/client/internal/NarayanaLRAClient.java",
          "rts/lra/coordinator/pom.xml",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/internal/RecoveringLRA.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
          "rts/lra/coordinator/src/test/resources/scripts/transition-active-failure.btm",
          "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java",
          "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
        ],
        "message": "JBTM-3945 handle store write errors",
        "before_after_code_files": [
          "rts/lra/client/src/main/java/io/narayana/lra/client/internal/NarayanaLRAClient.java||rts/lra/client/src/main/java/io/narayana/lra/client/internal/NarayanaLRAClient.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/internal/RecoveringLRA.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/internal/RecoveringLRA.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
          "rts/lra/coordinator/src/test/resources/scripts/transition-active-failure.btm||rts/lra/coordinator/src/test/resources/scripts/transition-active-failure.btm",
          "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java||rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java",
          "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
            "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
          ],
          "candidate": [
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
            "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
          ]
        }
      },
      "candidate_diff": {
        "rts/lra/client/src/main/java/io/narayana/lra/client/internal/NarayanaLRAClient.java||rts/lra/client/src/main/java/io/narayana/lra/client/internal/NarayanaLRAClient.java": [
          "File: rts/lra/client/src/main/java/io/narayana/lra/client/internal/NarayanaLRAClient.java -> rts/lra/client/src/main/java/io/narayana/lra/client/internal/NarayanaLRAClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import jakarta.ws.rs.POST;",
          "17: import jakarta.ws.rs.PUT;",
          "18: import jakarta.ws.rs.Path;",
          "19: import jakarta.ws.rs.WebApplicationException;",
          "20: import jakarta.ws.rs.client.Client;",
          "21: import jakarta.ws.rs.client.ClientBuilder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import jakarta.ws.rs.ServiceUnavailableException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "746:                     .get(JOIN_TIMEOUT, TimeUnit.SECONDS);",
          "748:             String responseEntity = response.hasEntity() ? response.readEntity(String.class) : \"\";",
          "749:             if (response.getStatus() == Response.Status.PRECONDITION_FAILED.getStatusCode()) {",
          "751:                 LRALogger.logger.error(logMsg);",
          "752:                 throw new WebApplicationException(logMsg,",
          "753:                         Response.status(PRECONDITION_FAILED).entity(logMsg).build());",
          "754:             } else if (response.getStatus() == NOT_FOUND.getStatusCode()) {",
          "755:                 String logMsg = LRALogger.i18nLogger.info_failedToEnlistingLRANotFound(",
          "757:                 LRALogger.logger.info(logMsg);",
          "759:             } else if (response.getStatus() != OK.getStatusCode()) {",
          "763:             }",
          "765:             String recoveryUrl = null;",
          "",
          "[Removed Lines]",
          "750:                 String logMsg = LRALogger.i18nLogger.error_tooLateToJoin(lraId, responseEntity);",
          "756:                         lraId, coordinatorUrl, NOT_FOUND.getStatusCode(), NOT_FOUND.getReasonPhrase(), GONE.getStatusCode(), GONE.getReasonPhrase());",
          "758:                 throw new WebApplicationException(logMsg);",
          "760:                 String logMsg = LRALogger.i18nLogger.error_failedToEnlist(lraId, coordinatorUrl, response.getStatus());",
          "761:                 LRALogger.logger.error(logMsg);",
          "762:                 throwGenericLRAException(uri, response.getStatus(), logMsg, null);",
          "",
          "[Added Lines]",
          "752:                 String logMsg = LRALogger.i18nLogger.error_tooLateToJoin(String.valueOf(lraId), responseEntity);",
          "758:                         lraId, coordinatorUrl, NOT_FOUND.getStatusCode(), NOT_FOUND.getReasonPhrase(),",
          "759:                         GONE.getStatusCode(), GONE.getReasonPhrase());",
          "761:                 throw new WebApplicationException(Response.status(GONE).entity(logMsg).build());",
          "763:                 throw new WebApplicationException(responseEntity, response);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "770:                     compensatorData.append(prevParticipantData);",
          "771:                 }",
          "781:             }",
          "788:         } finally {",
          "789:             if (client != null) {",
          "790:                 client.close();",
          "",
          "[Removed Lines]",
          "773:             try {",
          "774:                 recoveryUrl = response.getHeaderString(LRA_HTTP_RECOVERY_HEADER);",
          "775:                 return new URI(recoveryUrl);",
          "776:             } catch (URISyntaxException e) {",
          "777:                 LRALogger.logger.infof(e,\"join %s returned an invalid recovery URI '%s': %s\", lraId, recoveryUrl, responseEntity);",
          "778:                 throwGenericLRAException(null, Response.Status.SERVICE_UNAVAILABLE.getStatusCode(),",
          "779:                         \"join \" + lraId + \" returned an invalid recovery URI '\" + recoveryUrl + \"' : \" + responseEntity, e);",
          "780:                 return null;",
          "782:         } catch (WebApplicationException webApplicationException) {",
          "783:             throw new WebApplicationException(uri.toASCIIString(), GONE); // not sure why we think it's gone",
          "784:         } catch (InterruptedException | ExecutionException | TimeoutException e) {",
          "785:             throw new WebApplicationException(\"join LRA client request timed out, try again later\",",
          "786:                     Response.Status.SERVICE_UNAVAILABLE.getStatusCode());",
          "787:         }",
          "",
          "[Added Lines]",
          "774:                 try {",
          "775:                     recoveryUrl = response.getHeaderString(LRA_HTTP_RECOVERY_HEADER);",
          "776:                     return new URI(recoveryUrl);",
          "777:                 } catch (URISyntaxException e) {",
          "778:                     LRALogger.logger.infof(e,\"join %s returned an invalid recovery URI '%s': %s\", lraId, recoveryUrl, responseEntity);",
          "779:                     throwGenericLRAException(null, Response.Status.SERVICE_UNAVAILABLE.getStatusCode(),",
          "780:                             \"join \" + lraId + \" returned an invalid recovery URI '\" + recoveryUrl + \"' : \" + responseEntity, e);",
          "781:                     return null;",
          "782:                 }",
          "784:             } catch (InterruptedException | ExecutionException | TimeoutException e) {",
          "785:                 throw new WebApplicationException(\"join LRA client request timed out, try again later\",",
          "786:                         Response.Status.SERVICE_UNAVAILABLE.getStatusCode());",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import jakarta.ws.rs.Produces;",
          "31: import jakarta.ws.rs.PUT;",
          "32: import jakarta.ws.rs.QueryParam;",
          "33: import jakarta.ws.rs.WebApplicationException;",
          "34: import jakarta.ws.rs.client.Client;",
          "35: import jakarta.ws.rs.client.ClientBuilder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import jakarta.ws.rs.ServiceUnavailableException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:         }",
          "698:         StringBuilder recoveryUrl = new StringBuilder();",
          "700:         String recoveryUrlValue;",
          "702:         if (acceptMediaType.equals(MediaType.APPLICATION_JSON)) {",
          "703:             JsonObject model = Json.createObjectBuilder().add(\"recoveryUrl\", recoveryUrl.toString()).build();",
          "",
          "[Removed Lines]",
          "699:         int status = lraService.joinLRA(recoveryUrl, lraId, timeLimit, null, linkHeader, recoveryUrlBase, userData, version);",
          "",
          "[Added Lines]",
          "701:         int status;",
          "703:         try {",
          "704:             status = lraService.joinLRA(recoveryUrl, lraId, timeLimit, null, linkHeader, recoveryUrlBase, userData, version);",
          "705:         } catch (ServiceUnavailableException e) {",
          "706:             return Response.status(Response.Status.SERVICE_UNAVAILABLE.getStatusCode()).entity(e.getMessage()).build();",
          "707:         }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import io.narayana.lra.coordinator.domain.service.LRAService;",
          "10: import io.narayana.lra.coordinator.internal.LRARecoveryModule;",
          "11: import io.narayana.lra.logging.LRALogger;",
          "12: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
          "13: import org.eclipse.microprofile.openapi.annotations.Operation;",
          "14: import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: import jakarta.ws.rs.ServiceUnavailableException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:                         Response.status(INTERNAL_SERVER_ERROR.getStatusCode()).entity(errMsg).build());",
          "119:             }",
          "123:             return context;",
          "124:         }",
          "",
          "[Removed Lines]",
          "121:             lraService.updateRecoveryURI(lra, newCompensatorUrl, context, true);",
          "",
          "[Added Lines]",
          "122:             if (!lraService.updateRecoveryURI(lra, newCompensatorUrl, context, true)) {",
          "124:                 throw new ServiceUnavailableException(LRALogger.i18nLogger.warn_saveState(\"deactivate\"));",
          "125:             }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:                 os.packString(childId.toASCIIString());",
          "62:                 os.packBoolean(committed);",
          "63:             } catch (IOException e) {",
          "65:                 return false;",
          "66:             }",
          "67:         }",
          "",
          "[Removed Lines]",
          "64:                 LRALogger.i18nLogger.warn_saveState(e.getMessage());",
          "",
          "[Added Lines]",
          "64:                 LRALogger.logger.warn(LRALogger.i18nLogger.warn_saveState(e.getMessage()));",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "862:                 os.packString(participantPath);",
          "863:                 os.packString(compensatorData);",
          "864:             } catch (IOException e) {",
          "867:                 return false;",
          "868:             } finally {",
          "",
          "[Removed Lines]",
          "865:                 LRALogger.i18nLogger.warn_saveState(e.getMessage());",
          "",
          "[Added Lines]",
          "865:                 LRALogger.logger.warn(LRALogger.i18nLogger.warn_saveState(e.getMessage()));",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import com.arjuna.ats.arjuna.coordinator.RecordList;",
          "14: import com.arjuna.ats.arjuna.coordinator.RecordListIterator;",
          "15: import com.arjuna.ats.arjuna.coordinator.RecordType;",
          "16: import io.narayana.lra.Current;",
          "17: import io.narayana.lra.LRAConstants;",
          "18: import io.narayana.lra.LRAData;",
          "19: import io.narayana.lra.logging.LRALogger;",
          "23: import io.narayana.lra.coordinator.domain.service.LRAService;",
          "24: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
          "27: import jakarta.ws.rs.core.Response;",
          "30: import java.io.IOException;",
          "31: import java.io.UnsupportedEncodingException;",
          "",
          "[Removed Lines]",
          "20: import com.arjuna.ats.arjuna.state.InputObjectState;",
          "21: import com.arjuna.ats.arjuna.state.OutputObjectState;",
          "26: import jakarta.ws.rs.WebApplicationException;",
          "28: import jakarta.ws.rs.core.Response.Status;",
          "",
          "[Added Lines]",
          "16: import com.arjuna.ats.arjuna.state.InputObjectState;",
          "17: import com.arjuna.ats.arjuna.state.OutputObjectState;",
          "28: import jakarta.ws.rs.ServiceUnavailableException;",
          "29: import jakarta.ws.rs.WebApplicationException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: public class LongRunningAction extends BasicAction {",
          "50:     private static final String LRA_TYPE = \"/StateManager/BasicAction/LongRunningAction\";",
          "51:     private static final ScheduledExecutorService scheduler = new ScheduledThreadPoolExecutor(10);",
          "52:     private URI id;",
          "53:     private URI parentId;",
          "54:     private String clientId;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     private static final String DEACTIVATE_REASON = \"deactivate\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:             os.packString(status.name());",
          "155:         } catch (IOException e) {",
          "157:             return false;",
          "158:         } finally {",
          "159:             if (LRALogger.logger.isTraceEnabled()) {",
          "",
          "[Removed Lines]",
          "156:             LRALogger.i18nLogger.warn_saveState(e.getMessage());",
          "",
          "[Added Lines]",
          "158:             LRALogger.logger.warn(LRALogger.i18nLogger.warn_saveState(e.getMessage()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "318:                     }",
          "319:                 }",
          "322:             }",
          "324:             return true;",
          "",
          "[Removed Lines]",
          "321:                 setTimeLimit(ttl);",
          "",
          "[Added Lines]",
          "325:                 setTimeLimit(ttl, false);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "487:         boolean nested = !isTopLevel();",
          "489:         if (status == LRAStatus.Active) {",
          "491:         } else if (isFinished()) {",
          "492:             if (LRALogger.logger.isTraceEnabled()) {",
          "493:                 trace_progress(\"finished\");",
          "",
          "[Removed Lines]",
          "490:             updateState(cancel ? LRAStatus.Cancelling : LRAStatus.Closing);",
          "",
          "[Added Lines]",
          "494:             updateState(cancel ? LRAStatus.Cancelling : LRAStatus.Closing); // can throw ServiceUnavailableException",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "528:                     moveTo(pendingList, preparedList, true);",
          "529:                     moveTo(heuristicList, preparedList, true);",
          "534:                     if (LRALogger.logger.isTraceEnabled()) {",
          "",
          "[Removed Lines]",
          "531:                     updateState(LRAStatus.Cancelling);",
          "",
          "[Added Lines]",
          "535:                     updateState(LRAStatus.Cancelling); // can throw ServiceUnavailableException",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "539:                     res = status();",
          "542:                 } else {",
          "544:                     if (forgetAllParticipants()) {",
          "546:                     } else {",
          "548:                         if (LRALogger.logger.isTraceEnabled()) {",
          "",
          "[Removed Lines]",
          "541:                     updateState(toLRAStatus(status()));",
          "545:                         updateState(LRAStatus.Closed);",
          "",
          "[Added Lines]",
          "545:                     updateState(toLRAStatus(status())); // can throw ServiceUnavailableException",
          "549:                         updateState(LRAStatus.Closed); // can throw ServiceUnavailableException",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "561:                 moveTo(heuristicList, preparedList, true);",
          "567:                 if (heuristicList == null) {",
          "",
          "[Removed Lines]",
          "564:                 updateState(LRAStatus.Cancelling);",
          "",
          "[Added Lines]",
          "568:                 updateState(LRAStatus.Cancelling); // can throw ServiceUnavailableException",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "579:                 pendingList = invert(pendingList);",
          "582:                 if (LRALogger.logger.isTraceEnabled()) {",
          "583:                     trace_progress(\"doEnd with close\");",
          "584:                 }",
          "",
          "[Removed Lines]",
          "581:                 updateState(LRAStatus.Closing);",
          "",
          "[Added Lines]",
          "585:                 updateState(LRAStatus.Closing); // can throw ServiceUnavailableException",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "597:         }",
          "599:         if (getSize(heuristicList) != 0) {",
          "602:             }",
          "603:         } else if (getSize(failedList) != 0) {",
          "604:             updateState(cancel ? LRAStatus.FailedToCancel : LRAStatus.FailedToClose);",
          "",
          "[Removed Lines]",
          "600:             if (!isInEndState()) { // else it must be a failed AfterLRA notification which will need to be retried",
          "601:                 updateState(cancel ? LRAStatus.Cancelling : LRAStatus.Closing);",
          "",
          "[Added Lines]",
          "604:             if (!endStateCheck() && !isFinished()) {",
          "606:                 updateState(cancel ? LRAStatus.Cancelling : LRAStatus.Closing); // can throw ServiceUnavailableException",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "632:     protected void runPostLRAActions() {",
          "635:             if (preparedList == null) {",
          "636:                 preparedList = new RecordList();",
          "637:             }",
          "",
          "[Removed Lines]",
          "634:         if (isInEndState() && heuristicList != null && heuristicList.size() != 0) {",
          "",
          "[Added Lines]",
          "639:         endStateCheck();",
          "641:         if (isFinished() && heuristicList != null && heuristicList.size() != 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "645:         }",
          "646:     }",
          "649:         if (status != nextState) {",
          "650:             status = nextState; // we trust that nextState is reachable from the current one",
          "654:             }",
          "655:         }",
          "657:     }",
          "659:     protected void checkParticipant(RecordList participants) {",
          "",
          "[Removed Lines]",
          "648:     protected void updateState(LRAStatus nextState) {",
          "652:             if ((pendingList != null && pendingList.size() != 0)) {",
          "653:                 deactivate();",
          "",
          "[Added Lines]",
          "656:     protected boolean updateState(LRAStatus nextState) {",
          "657:         return updateState(nextState, true);",
          "658:     }",
          "661:     protected boolean updateState(LRAStatus nextState, boolean save) {",
          "665:             if (save && (pendingList != null && pendingList.size() != 0)) {",
          "666:                 if (!deactivate()) {",
          "667:                     throw new ServiceUnavailableException(LRALogger.i18nLogger.warn_saveState(DEACTIVATE_REASON));",
          "668:                 }",
          "671:             return true;",
          "674:         return false;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "717:         return true;",
          "718:     }",
          "722:         if (status == LRAStatus.Cancelling && allFinished(heuristicList, failedList)) {",
          "724:         } else if (status == LRAStatus.Closing && allFinished(heuristicList, failedList)) {",
          "726:         }",
          "729:     }",
          "731:     private int getSize(RecordList list) {",
          "",
          "[Removed Lines]",
          "720:     protected boolean isInEndState() {",
          "723:             updateState((failedList == null || failedList.size() == 0) ? LRAStatus.Cancelled : LRAStatus.FailedToCancel);",
          "725:             updateState((failedList == null || failedList.size() == 0) ? LRAStatus.Closed : LRAStatus.FailedToClose);",
          "728:         return isFinished();",
          "",
          "[Added Lines]",
          "739:     protected boolean endStateCheck() {",
          "742:             return updateState((failedList == null || failedList.size() == 0) ? LRAStatus.Cancelled : LRAStatus.FailedToCancel);",
          "744:             return updateState((failedList == null || failedList.size() == 0) ? LRAStatus.Closed : LRAStatus.FailedToClose);",
          "747:         return false;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "756:             throws UnsupportedEncodingException {",
          "757:         ReentrantLock lock = tryLockTransaction();",
          "758:         if (lock == null) {",
          "761:         }",
          "762:         else {",
          "763:             try {",
          "",
          "[Removed Lines]",
          "759:             LRALogger.i18nLogger.warn_enlistment();",
          "760:             return null;",
          "",
          "[Added Lines]",
          "778:             String reason = LRALogger.i18nLogger.warn_enlistment();",
          "779:             LRALogger.logger.warn(reason);",
          "780:             throw new ServiceUnavailableException(reason);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "770:                         compensatorData, version);",
          "771:                 if (participant != null) {",
          "775:                 }",
          "776:                 return participant;",
          "777:             }",
          "",
          "[Removed Lines]",
          "773:                     deactivate(); // if it fails the superclass will have logged a warning",
          "774:                     savedIntentionList = true; // need this clean up if the LRA times out",
          "",
          "[Added Lines]",
          "793:                     if (deactivate()) { // if it fails the superclass will have logged a warning",
          "794:                         savedIntentionList = true; // need this clean up if the LRA times out",
          "795:                     } else {",
          "796:                         throw new ServiceUnavailableException(LRALogger.i18nLogger.warn_saveState(DEACTIVATE_REASON));",
          "797:                     }",
          "798:                 } else {",
          "799:                     throw new ServiceUnavailableException(LRALogger.i18nLogger.warn_saveState(DEACTIVATE_REASON));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "811:             p.setRecoveryURI(recoveryUrlBase, this.get_uid().fileStringForm(), pid);",
          "812:         }",
          "816:         }",
          "818:         if (add(p) != AddOutcome.AR_REJECTED) {",
          "821:             if (LRALogger.logger.isTraceEnabled()) {",
          "822:                 trace_progress(\"enlisted \" + p.getParticipantPath());",
          "",
          "[Removed Lines]",
          "814:         if (isInEndState()) {",
          "815:             return null;",
          "819:             setTimeLimit(timeLimit);",
          "",
          "[Added Lines]",
          "839:         endStateCheck();",
          "841:         if (isFinished()) {",
          "842:             throw new WebApplicationException(",
          "843:                     Response.status(Response.Status.GONE)",
          "844:                             .entity(LRALogger.i18nLogger.error_tooLateToJoin(id.toASCIIString(), \"finished\"))",
          "845:                             .build());",
          "849:             if (setTimeLimit(timeLimit, true) != Response.Status.OK.getStatusCode()) {",
          "853:                 LRALogger.logger.warn(",
          "854:                         LRALogger.i18nLogger.warn_saveState(\"could not durably record the new time limit\"));",
          "855:             }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "978:     private int lraStatusToHttpStatus() {",
          "979:         if (status == null || status == LRAStatus.Active) {",
          "981:         }",
          "983:         switch (status) {",
          "984:             case Closed:",
          "985:             case Cancelled:",
          "987:             case Closing:",
          "988:             case Cancelling:",
          "990:             case FailedToCancel:",
          "991:             case FailedToClose:",
          "993:             default:",
          "995:         }",
          "996:     }",
          "",
          "[Removed Lines]",
          "980:             return Status.NO_CONTENT.getStatusCode(); // in progress, 204",
          "986:                 return Status.OK.getStatusCode(); // 200",
          "989:                 return Status.ACCEPTED.getStatusCode(); // 202",
          "992:                 return Status.PRECONDITION_FAILED.getStatusCode(); // 412, probably not the correct code",
          "994:                 return Status.INTERNAL_SERVER_ERROR.getStatusCode(); // 500",
          "",
          "[Added Lines]",
          "1016:             return Response.Status.NO_CONTENT.getStatusCode(); // in progress, 204",
          "1022:                 return Response.Status.OK.getStatusCode(); // 200",
          "1025:                 return Response.Status.ACCEPTED.getStatusCode(); // 202",
          "1028:                 return Response.Status.PRECONDITION_FAILED.getStatusCode(); // 412, probably not the correct code",
          "1030:                 return Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(); // 500",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1029:         startTime = LocalDateTime.now(ZoneOffset.UTC);",
          "1033:         if (LRALogger.logger.isTraceEnabled()) {",
          "1034:             trace_progress(\"begin, deactivating\");",
          "1035:         }",
          "1039:         return res;",
          "1040:     }",
          "",
          "[Removed Lines]",
          "1031:         setTimeLimit(timeLimit);",
          "1037:         deactivate();",
          "",
          "[Added Lines]",
          "1071:         if (setTimeLimit(timeLimit, true) != Response.Status.OK.getStatusCode() || !deactivate()) {",
          "1073:             LRALogger.logger.warn(LRALogger.i18nLogger.warn_saveState(DEACTIVATE_REASON));",
          "1077:             status = null;",
          "1078:         }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1051:         return add(childAR) != AddOutcome.AR_REJECTED;",
          "1052:     }",
          "1055:         if (timeLimit <= 0L) {",
          "1056:             return Response.Status.OK.getStatusCode();",
          "1057:         }",
          "1060:     }",
          "1063:         assert timeLimit > 0L;",
          "1065:         if (status() != ActionStatus.RUNNING) {",
          "",
          "[Removed Lines]",
          "1054:     public int setTimeLimit(Long timeLimit) {",
          "1059:         return scheduleCancellation(this::abortLRA, timeLimit);",
          "1062:     private int scheduleCancellation(Runnable runnable, Long timeLimit) {",
          "",
          "[Added Lines]",
          "1095:     public int setTimeLimit(Long timeLimit, boolean save) {",
          "1100:         return scheduleCancellation(this::abortLRA, timeLimit, save);",
          "1103:     private int scheduleCancellation(Runnable runnable, Long timeLimit, boolean save) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1106:                 trace_progress(\"scheduleCancellation accepted\");",
          "1107:             }",
          "1108:         } catch (RejectedExecutionException executionException) {",
          "1112:             if (LRALogger.logger.isTraceEnabled()) {",
          "1113:                 trace_progress(\"scheduleCancellation rejected\");",
          "1114:             }",
          "",
          "[Removed Lines]",
          "1111:             updateState(LRAStatus.Cancelling);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1118:                             \"Exception message: %s\",",
          "1119:                     this.getId(),",
          "1120:                     executionException.getMessage());",
          "1121:         }",
          "1123:         return Response.Status.OK.getStatusCode();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1162:             updateState(LRAStatus.Cancelling, save);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1153:         }",
          "1154:     }",
          "1157:         LRAParticipantRecord lraRecord = findLRAParticipant(recoveryUri, false);",
          "1159:         if (lraRecord != null) {",
          "",
          "[Removed Lines]",
          "1156:     public void updateRecoveryURI(String linkHeader, String recoveryUri) {",
          "",
          "[Added Lines]",
          "1199:     public boolean updateRecoveryURI(String linkHeader, String recoveryUri) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1162:                 lraRecord.updateCallbacks(linkHeader);",
          "1164:                 if (!deactivate()) {",
          "1168:                 }",
          "1170:             } catch (WebApplicationException e) {",
          "1171:                 if (LRALogger.logger.isInfoEnabled()) {",
          "1172:                     LRALogger.logger.infof(\"Could not save new recovery URL: %s\", e.getMessage());",
          "1173:                 }",
          "1174:             }",
          "1175:         }",
          "1176:     }",
          "1178:     public URI getParentId() {",
          "",
          "[Removed Lines]",
          "1165:                     if (LRALogger.logger.isInfoEnabled()) {",
          "1166:                         LRALogger.logger.infof(\"Could not save new recovery URL\");",
          "1167:                     }",
          "",
          "[Added Lines]",
          "1208:                     LRALogger.logger.warn(LRALogger.i18nLogger.warn_saveState(DEACTIVATE_REASON));",
          "1210:                     return false;",
          "1217:                 return false;",
          "1221:         return true;",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import io.narayana.lra.coordinator.internal.LRARecoveryModule;",
          "18: import io.narayana.lra.coordinator.domain.model.LongRunningAction;",
          "20: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
          "22: import jakarta.ws.rs.InternalServerErrorException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import jakarta.ws.rs.ServiceUnavailableException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:         getRM().recover();",
          "211:     }",
          "214:         assert recoveryURI != null;",
          "215:         assert compensatorUrl != null;",
          "216:         LongRunningAction transaction = getTransaction(lraId);",
          "",
          "[Removed Lines]",
          "213:     public void updateRecoveryURI(URI lraId, String compensatorUrl, String recoveryURI, boolean persist) {",
          "",
          "[Added Lines]",
          "214:     public boolean updateRecoveryURI(URI lraId, String compensatorUrl, String recoveryURI, boolean persist) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:         }",
          "230:         if (persist) {",
          "232:         }",
          "233:     }",
          "235:     public String getParticipant(String rcvCoordId) {",
          "",
          "[Removed Lines]",
          "231:             transaction.updateRecoveryURI(compensatorUrl, recoveryURI);",
          "",
          "[Added Lines]",
          "232:             return transaction.updateRecoveryURI(compensatorUrl, recoveryURI);",
          "235:         return true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:         status = lra.begin(timelimit);",
          "260:         if (status != ActionStatus.RUNNING) {",
          "261:             lraTrace(lra.getId(), \"failed to start LRA\");",
          "263:             lra.finishLRA(true);",
          "265:             String errorMsg = \"Could not start LRA: \" + ActionStatus.stringForm(status);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:         if (lra.getLRAStatus() == null) {",
          "265:             throw new ServiceUnavailableException(LRALogger.i18nLogger.warn_saveState(\"deactivate\"));",
          "266:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "403:         String recoveryURI = participant.getRecoveryURI().toASCIIString();",
          "407:         recoveryUrl.append(recoveryURI);",
          "",
          "[Removed Lines]",
          "405:         updateRecoveryURI(lra, participant.getParticipantURI(), recoveryURI, false);",
          "",
          "[Added Lines]",
          "412:         if (!updateRecoveryURI(lra, participant.getParticipantURI(), recoveryURI, false)) {",
          "413:             throw new ServiceUnavailableException(LRALogger.i18nLogger.warn_saveState(\"deactivate\"));",
          "414:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "440:             return NOT_FOUND.getStatusCode();",
          "441:         }",
          "444:     }",
          "446:     public List<LRAData> getFailedLRAs() {",
          "",
          "[Removed Lines]",
          "443:         return lra.setTimeLimit(timelimit);",
          "",
          "[Added Lines]",
          "452:         return lra.setTimeLimit(timelimit, true);",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/internal/RecoveringLRA.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/internal/RecoveringLRA.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/internal/RecoveringLRA.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/internal/RecoveringLRA.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import io.narayana.lra.logging.LRALogger;",
          "11: import io.narayana.lra.coordinator.domain.model.LongRunningAction;",
          "12: import io.narayana.lra.coordinator.domain.service.LRAService;",
          "13: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
          "15: import java.util.concurrent.locks.ReentrantLock;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import jakarta.ws.rs.ServiceUnavailableException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:         try {",
          "41:             tryReplayPhase2();",
          "42:         } finally {",
          "43:             lock.unlock();",
          "44:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:         } catch (ServiceUnavailableException ignore) {",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package io.narayana.lra.coordinator.domain.model;",
          "3: import java.lang.reflect.InvocationTargetException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    Copyright The Narayana Authors",
          "3:    SPDX-License-Identifier: Apache-2.0",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import static jakarta.ws.rs.core.Response.Status.OK;",
          "10: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
          "11: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
          "12: import static org.hamcrest.Matchers.containsString;",
          "13: import static org.junit.Assert.assertEquals;",
          "14: import static org.junit.Assert.assertNotEquals;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: import static org.hamcrest.MatcherAssert.assertThat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: import static org.junit.Assert.assertTrue;",
          "19: import static org.junit.Assert.fail;",
          "21: import java.net.URI;",
          "22: import java.net.URISyntaxException;",
          "23: import java.net.URLEncoder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.io.IOException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32: import java.util.concurrent.TimeUnit;",
          "33: import java.util.stream.IntStream;",
          "35: import com.fasterxml.jackson.core.JsonProcessingException;",
          "36: import com.fasterxml.jackson.databind.JsonNode;",
          "37: import com.fasterxml.jackson.databind.ObjectMapper;",
          "38: import io.narayana.lra.LRAConstants;",
          "39: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
          "40: import org.hamcrest.MatcherAssert;",
          "41: import org.jboss.byteman.contrib.bmunit.BMRule;",
          "42: import org.jboss.byteman.contrib.bmunit.BMRules;",
          "43: import org.jboss.byteman.contrib.bmunit.BMUnitRunner;",
          "44: import org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer;",
          "45: import org.jboss.resteasy.test.TestPortProvider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import com.arjuna.ats.arjuna.exceptions.ObjectStoreException;",
          "42: import jakarta.ws.rs.ServiceUnavailableException;",
          "45: import org.hamcrest.Matchers;",
          "48: import org.jboss.byteman.contrib.bmunit.BMScript;",
          "49: import org.jboss.byteman.contrib.bmunit.BMScripts;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:     @Before",
          "121:     public void before() {",
          "122:         LRALogger.logger.debugf(\"Starting test %s\", testName);",
          "123:         server = new UndertowJaxrsServer().start();",
          "126:         lraClient = new NarayanaLRAClient();",
          "128:         compensateCount.set(0);",
          "",
          "[Removed Lines]",
          "125:         clearObjectStore(testName);",
          "",
          "[Added Lines]",
          "130:         clearObjectStore(testName);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1151:         }",
          "1152:     }",
          "1154:     private void runLRA(boolean cancel) {",
          "1155:         URI parentId = lraClient.startLRA(\"parent\");",
          "1156:         URI childId = lraClient.startLRA(parentId, \"child\", 0L, ChronoUnit.SECONDS);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1163:     @Test",
          "1164:     @BMScripts(scripts = {",
          "1165:             @BMScript(\"scripts/transition-active-failure\")",
          "1166:     })",
          "1167:     public void testTransitionToActivateFailure() throws IOException, URISyntaxException {",
          "1168:         try {",
          "1169:             client.target(TestPortProvider.generateURL(\"/base/test/start\")).request().get(String.class);",
          "1170:             fail(\"expected ServiceUnavailableException on startLRA\");",
          "1171:         } catch (ServiceUnavailableException ignore) {",
          "1173:         }",
          "1176:         try {",
          "1177:             assertEquals(\"LRA record should not have been created\", 0, countRecords());",
          "1178:         } catch (ObjectStoreException e) {",
          "1179:             fail(\"Unable to read the store: \" + e.getMessage());",
          "1180:         }",
          "1181:     }",
          "1183:     @Test",
          "1184:     @BMRules(rules={",
          "1186:             @BMRule(name = \"fail deactivate during enlist\",",
          "1187:                     targetClass = \"io.narayana.lra.coordinator.domain.model.LongRunningAction\",",
          "1188:                     targetMethod = \"enlistParticipant\",",
          "1189:                     targetLocation = \"AFTER INVOKE deactivate\",",
          "1190:                     action = \"$! = false;\" )",
          "1191:     })",
          "1192:     public void testEnlistFailure() throws IOException, URISyntaxException {",
          "1193:         try {",
          "1194:             Object res = client.target(TestPortProvider.generateURL(\"/base/test/start-end\")).request().get(Object.class);",
          "1195:             fail(\"should have thrown ServiceUnavailableException but returned \" + res);",
          "1196:         } catch (WebApplicationException e) {",
          "1197:             assertEquals(\"Unexpected response code\",",
          "1198:                     Response.Status.SERVICE_UNAVAILABLE.getStatusCode(), e.getResponse().getStatus());",
          "1199:             String reason = e.getResponse().readEntity(String.class);",
          "1200:             assertTrue(\"response does not contain LRA025032\",",
          "1201:                     reason.contains(\"LRA025032\")); // LRA025032 means deactivate failed",
          "1202:         }",
          "1203:     }",
          "1212:     @Test",
          "1213:     public void timeLimitWithPreConditionFailed() {",
          "1214:         try (Response response = client.target(TestPortProvider.generateURL(\"/base/test/time-limit2\")).request().get()) {",
          "1216:             assertThat(\"Expected 412 or 410 response\", response.getStatus(),",
          "1217:                     Matchers.anyOf(Matchers.is(Response.Status.PRECONDITION_FAILED.getStatusCode()),",
          "1218:                             Matchers.is(Response.Status.GONE.getStatusCode())));",
          "1219:         }",
          "1220:     }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: package io.narayana.lra.coordinator.domain.model;",
          "8: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
          "9: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_PARENT_CONTEXT_HEADER;",
          "10: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
          "12: import java.io.File;",
          "13: import java.net.URI;",
          "14: import java.time.temporal.ChronoUnit;",
          "15: import java.util.Objects;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import static io.narayana.lra.LRAConstants.COORDINATOR_PATH_NAME;",
          "12: import static org.junit.Assert.assertEquals;",
          "15: import java.io.IOException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: import java.util.concurrent.atomic.AtomicInteger;",
          "19: import java.util.stream.IntStream;",
          "21: import org.eclipse.microprofile.lra.annotation.AfterLRA;",
          "22: import org.eclipse.microprofile.lra.annotation.Compensate;",
          "23: import org.eclipse.microprofile.lra.annotation.Complete;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import com.arjuna.ats.arjuna.common.Uid;",
          "25: import com.arjuna.ats.arjuna.exceptions.ObjectStoreException;",
          "26: import com.arjuna.ats.arjuna.objectstore.RecoveryStore;",
          "27: import com.arjuna.ats.arjuna.objectstore.StoreManager;",
          "28: import com.arjuna.ats.arjuna.state.InputObjectState;",
          "29: import com.arjuna.ats.internal.arjuna.common.UidHelper;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     static Queue<Integer> queue = new ConcurrentLinkedQueue<>(); // used to check the participant order",
          "",
          "[Removed Lines]",
          "65:     private static AtomicInteger afterCallCount = new AtomicInteger(0);",
          "",
          "[Added Lines]",
          "74:     private static final AtomicInteger afterCallCount = new AtomicInteger(0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "161:             return getResult(cancel, contextId);",
          "162:         }",
          "164:         @LRA(value = LRA.Type.NESTED, end = false)",
          "165:         @PUT",
          "166:         @Path(\"nested\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:         @GET",
          "184:         @Path(\"/time-limit2\")",
          "185:         @Produces(MediaType.APPLICATION_JSON)",
          "186:         @LRA(value = LRA.Type.REQUIRED, timeLimit = 500, timeUnit = ChronoUnit.MILLIS)",
          "187:         public Response timeLimitTest(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {",
          "188:             try {",
          "189:                 Thread.sleep(1000); // sleep for longer than specified in the timeLimit annotation attribute",
          "195:                 String coordinatorPath = TestPortProvider.generateURL('/' + COORDINATOR_PATH_NAME);",
          "196:                 String recoveryPath = coordinatorPath + \"/recovery\";",
          "198:                 try (Client client = ClientBuilder.newClient()) {",
          "199:                     try (Response response = client.target(recoveryPath).request().get()) {",
          "200:                         assertEquals(\"unable to trigger a recovery scan\", 200, response.getStatus());",
          "201:                         response.getEntity(); // clean up by reading the response stream ignoring the result",
          "204:                         restPutInvocation(lraId, \"/mandatory\", \"\");",
          "205:                     } catch (WebApplicationException wae) {",
          "206:                         return Response.status(wae.getResponse().getStatus()).build();",
          "207:                     }",
          "208:                 }",
          "210:                 return Response.status(Response.Status.OK).entity(lraId.toASCIIString()).build();",
          "211:             } catch (InterruptedException e) {",
          "212:                 System.out.printf(\"time-limit2: Interrupted because time limit elapsed:%s%n\", e.getMessage());",
          "213:                 return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();",
          "214:             }",
          "215:         }",
          "217:         @PUT",
          "218:         @Path(\"/mandatory\")",
          "219:         @Produces(MediaType.TEXT_PLAIN)",
          "220:         @LRA(value = LRA.Type.MANDATORY, end = false)",
          "221:         public Response activityWithMandatoryLRA(@HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
          "222:                                                  @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {",
          "223:             return Response.ok(lraId).header(LRA_HTTP_RECOVERY_HEADER, recoveryId).build();",
          "224:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "418:             }",
          "419:         }",
          "420:     }",
          "421: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "484:     protected int countRecords() throws ObjectStoreException, IOException {",
          "485:         InputObjectState uids = new InputObjectState();",
          "486:         RecoveryStore recoveryStore = StoreManager.getRecoveryStore();",
          "487:         int count = 0;",
          "489:         if (recoveryStore.allObjUids(LongRunningAction.getType(), uids) && uids.notempty()) {",
          "490:             boolean finished = false;",
          "492:             do {",
          "493:                 Uid uid = UidHelper.unpackFrom(uids);",
          "495:                 if (uid.notEquals(Uid.nullUid())) {",
          "496:                     count += 1;",
          "497:                 } else {",
          "498:                     finished = true;",
          "499:                 }",
          "500:             } while (!finished);",
          "501:         }",
          "503:         return count;",
          "504:     }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/resources/scripts/transition-active-failure.btm||rts/lra/coordinator/src/test/resources/scripts/transition-active-failure.btm": [
          "File: rts/lra/coordinator/src/test/resources/scripts/transition-active-failure.btm -> rts/lra/coordinator/src/test/resources/scripts/transition-active-failure.btm",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # transition-active-failure.btm",
          "2: RULE store write failure",
          "3: CLASS com.arjuna.ats.arjuna.coordinator.BasicAction",
          "4: METHOD deactivate",
          "5: AT ENTRY",
          "6: IF true",
          "7: DO RETURN false",
          "8: ENDRULE",
          "",
          "---------------"
        ],
        "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java||rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java": [
          "File: rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java -> rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:                     headers.putSingle(LRA_HTTP_RECOVERY_HEADER,",
          "418:                             START_END_QUOTES_PATTERN.matcher(recoveryUrl.toASCIIString()).replaceAll(\"\"));",
          "419:                 } catch (WebApplicationException e) {",
          "421:                     abortWith(containerRequestContext, lraId.toASCIIString(),",
          "422:                             e.getResponse().getStatus(),",
          "425:                 } catch (URISyntaxException e) {",
          "426:                     progress = updateProgress(progress, ProgressStep.JoinFailed, e.getMessage()); // one or more of the participant end points was invalid",
          "",
          "[Removed Lines]",
          "420:                     progress = updateProgress(progress, ProgressStep.JoinFailed, e.getMessage());",
          "423:                             String.format(\"%s: %s\", e.getClass().getSimpleName(), e.getMessage()), progress);",
          "",
          "[Added Lines]",
          "420:                     String reason = e.getMessage();",
          "422:                     progress = updateProgress(progress, ProgressStep.JoinFailed, reason);",
          "425:                             String.format(\"%s: %s\", e.getClass().getSimpleName(), reason), progress);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567:                 String failureMessage =  processLRAOperationFailures(progress);",
          "569:                 if (failureMessage != null) {",
          "574:                 }",
          "575:             }",
          "576:         } finally {",
          "",
          "[Removed Lines]",
          "570:                     LRALogger.logger.warn(failureMessage);",
          "573:                     responseContext.setEntity(failureMessage, null, MediaType.TEXT_PLAIN_TYPE);",
          "",
          "[Added Lines]",
          "572:                     responseContext.setEntity(failureMessage);",
          "574:                     LRALogger.logger.warn(failureMessage); // any other failure(s) will already have been logged",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "716:     private void abortWith(ContainerRequestContext containerRequestContext, String lraId, int statusCode,",
          "717:                            String message, Collection<Progress> reasons) {",
          "721:         containerRequestContext.setProperty(ABORT_WITH_PROP, reasons);",
          "",
          "[Removed Lines]",
          "719:         containerRequestContext.abortWith(Response.status(statusCode).build());",
          "",
          "[Added Lines]",
          "720:         containerRequestContext.abortWith(Response.status(statusCode).entity(message).build());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "751:                     e.getResponse().getStatus(),",
          "752:                     String.format(\"%s %s\", e.getClass().getSimpleName(), e.getMessage()),",
          "753:                     progress);",
          "761:         }",
          "762:         return null;",
          "763:     }",
          "",
          "[Removed Lines]",
          "754:         } catch (ProcessingException e) {",
          "755:             updateProgress(progress, ProgressStep.StartFailed, e.getMessage());",
          "757:             abortWith(containerRequestContext, null,",
          "758:                     Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),",
          "759:                     String.format(\"%s %s\", e.getClass().getSimpleName(), e.getMessage()),",
          "760:                     progress);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java": [
          "File: rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java -> rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     String error_invalidArgumentOnStatusFromCoordinator(URI coordinator, URL lra, @Cause Throwable t);",
          "53:     @Message(id = 25008, value = \"Too late to join with the LRA '%s', coordinator response: '%s'\")",
          "56:     @Message(id = 25009, value = \"Failed enlisting to LRA '%s', coordinator '%s' responded with status '%s'\")",
          "57:     String error_failedToEnlist(URL lra, URI coordinator, int status);",
          "",
          "[Removed Lines]",
          "54:     String error_tooLateToJoin(URL lra, String response);",
          "",
          "[Added Lines]",
          "54:     String error_tooLateToJoin(String lra, String response);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:     @Message(id=25031, value = \"%s: Invalid link URI (%s): missing compensator or after LRA callback\")",
          "136:     String error_missingCompensator(URI id, String linkURI);",
          "142:     @LogMessage(level = WARN)",
          "143:     @Message(id = 25033, value = \"LRA Record: Cannot restore state (reason: %s)\")",
          "",
          "[Removed Lines]",
          "138:     @LogMessage(level = WARN)",
          "139:     @Message(id = 25032, value = \"LRA Record: Cannot save state (reason: %s\")",
          "140:     void warn_saveState(String cause);",
          "",
          "[Added Lines]",
          "138:     @Message(id = 25032, value = \"LRA Record: Cannot save state (reason: %s)\")",
          "139:     String warn_saveState(String cause);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:     @Message(id = 25039, value = \"Invalid argument passed to method: %s\")",
          "166:     String error_invalidArgument(String reason);",
          "169:     @Message(id = 25040, value = \"Lock not acquired, enlistment failed: cannot enlist participant, cannot lock transaction\")",
          "172:     @Message(id = 25041, value = \"Participant provided invalid callback endpoints, reason: %s link: %s\")",
          "173:     String warn_invalid_compensator(String reason, String linkStr);",
          "",
          "[Removed Lines]",
          "168:     @LogMessage(level = WARN)",
          "170:     void warn_enlistment();",
          "",
          "[Added Lines]",
          "168:     String warn_enlistment();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e2e74b0e6ab93da60485340df2548e60bb605bb",
      "candidate_info": {
        "commit_hash": "8e2e74b0e6ab93da60485340df2548e60bb605bb",
        "repo": "jbosstm/narayana",
        "commit_url": "https://github.com/jbosstm/narayana/commit/8e2e74b0e6ab93da60485340df2548e60bb605bb",
        "files": [
          "rts/lra/client/src/main/java/io/narayana/lra/client/internal/NarayanaLRAClient.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/objectstore/TestBase.java",
          "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java",
          "rts/lra/proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/ProxyService.java",
          "rts/lra/proxy/test/src/test/java/io/narayana/lra/participant/SpecTest.java",
          "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/TestBase.java",
          "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java",
          "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/LRAParticipant.java"
        ],
        "message": "JBTM-3934 move client API into an internal package",
        "before_after_code_files": [
          "rts/lra/client/src/main/java/io/narayana/lra/client/NarayanaLRAClient.java||rts/lra/client/src/main/java/io/narayana/lra/client/internal/NarayanaLRAClient.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/objectstore/TestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/objectstore/TestBase.java",
          "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java||rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java",
          "rts/lra/proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/ProxyService.java||rts/lra/proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/ProxyService.java",
          "rts/lra/proxy/test/src/test/java/io/narayana/lra/participant/SpecTest.java||rts/lra/proxy/test/src/test/java/io/narayana/lra/participant/SpecTest.java",
          "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/TestBase.java||rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/TestBase.java",
          "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java||rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java",
          "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/LRAParticipant.java||rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/LRAParticipant.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java"
          ],
          "candidate": [
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java"
          ]
        }
      },
      "candidate_diff": {
        "rts/lra/client/src/main/java/io/narayana/lra/client/NarayanaLRAClient.java||rts/lra/client/src/main/java/io/narayana/lra/client/internal/NarayanaLRAClient.java": [
          "File: rts/lra/client/src/main/java/io/narayana/lra/client/NarayanaLRAClient.java -> rts/lra/client/src/main/java/io/narayana/lra/client/internal/NarayanaLRAClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:    SPDX-License-Identifier: Apache-2.0",
          "8: import io.narayana.lra.Current;",
          "9: import io.narayana.lra.LRAConstants;",
          "",
          "[Removed Lines]",
          "6: package io.narayana.lra.client;",
          "",
          "[Added Lines]",
          "6: package io.narayana.lra.client.internal;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import jakarta.ws.rs.core.MultivaluedMap;",
          "30: import jakarta.ws.rs.core.Response;",
          "31: import jakarta.ws.rs.core.UriBuilder;",
          "33: import org.eclipse.microprofile.lra.annotation.AfterLRA;",
          "34: import org.eclipse.microprofile.lra.annotation.Compensate;",
          "35: import org.eclipse.microprofile.lra.annotation.Complete;",
          "",
          "[Removed Lines]",
          "32: import jakarta.ws.rs.core.UriInfo;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import org.junit.rules.TestName;",
          "45: import io.narayana.lra.LRAData;",
          "47: import io.narayana.lra.coordinator.api.Coordinator;",
          "48: import io.narayana.lra.coordinator.domain.service.LRAService;",
          "49: import io.narayana.lra.coordinator.internal.LRARecoveryModule;",
          "",
          "[Removed Lines]",
          "46: import io.narayana.lra.client.NarayanaLRAClient;",
          "",
          "[Added Lines]",
          "46: import io.narayana.lra.client.internal.NarayanaLRAClient;",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.junit.Test;",
          "29: import org.junit.rules.TestName;",
          "32: import io.narayana.lra.coordinator.api.Coordinator;",
          "33: import io.narayana.lra.filter.ServerLRAFilter;",
          "34: import io.narayana.lra.logging.LRALogger;",
          "",
          "[Removed Lines]",
          "31: import io.narayana.lra.client.NarayanaLRAClient;",
          "",
          "[Added Lines]",
          "31: import io.narayana.lra.client.internal.NarayanaLRAClient;",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/objectstore/TestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/objectstore/TestBase.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/objectstore/TestBase.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/objectstore/TestBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: package io.narayana.lra.coordinator.domain.model.objectstore;",
          "8: import io.narayana.lra.LRAData;",
          "10: import io.narayana.lra.coordinator.api.Coordinator;",
          "11: import io.narayana.lra.filter.ServerLRAFilter;",
          "12: import io.narayana.lra.logging.LRALogger;",
          "",
          "[Removed Lines]",
          "9: import io.narayana.lra.client.NarayanaLRAClient;",
          "",
          "[Added Lines]",
          "9: import io.narayana.lra.client.internal.NarayanaLRAClient;",
          "",
          "---------------"
        ],
        "rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java||rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java": [
          "File: rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java -> rts/lra/jaxrs/src/main/java/io/narayana/lra/filter/ServerLRAFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import io.narayana.lra.AnnotationResolver;",
          "9: import io.narayana.lra.Current;",
          "10: import io.narayana.lra.client.LRAParticipantData;",
          "12: import io.narayana.lra.client.internal.proxy.nonjaxrs.LRAParticipant;",
          "13: import io.narayana.lra.client.internal.proxy.nonjaxrs.LRAParticipantRegistry;",
          "14: import io.narayana.lra.logging.LRALogger;",
          "",
          "[Removed Lines]",
          "11: import io.narayana.lra.client.NarayanaLRAClient;",
          "",
          "[Added Lines]",
          "11: import io.narayana.lra.client.internal.NarayanaLRAClient;",
          "",
          "---------------"
        ],
        "rts/lra/proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/ProxyService.java||rts/lra/proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/ProxyService.java": [
          "File: rts/lra/proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/ProxyService.java -> rts/lra/proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/ProxyService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: package io.narayana.lra.client.internal.proxy;",
          "9: import io.narayana.lra.proxy.logging.LRAProxyLogger;",
          "10: import jakarta.annotation.PostConstruct;",
          "11: import jakarta.enterprise.context.ApplicationScoped;",
          "",
          "[Removed Lines]",
          "8: import io.narayana.lra.client.NarayanaLRAClient;",
          "",
          "[Added Lines]",
          "8: import io.narayana.lra.client.internal.NarayanaLRAClient;",
          "",
          "---------------"
        ],
        "rts/lra/proxy/test/src/test/java/io/narayana/lra/participant/SpecTest.java||rts/lra/proxy/test/src/test/java/io/narayana/lra/participant/SpecTest.java": [
          "File: rts/lra/proxy/test/src/test/java/io/narayana/lra/participant/SpecTest.java -> rts/lra/proxy/test/src/test/java/io/narayana/lra/participant/SpecTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: package io.narayana.lra.participant;",
          "10: import org.junit.After;",
          "11: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "8: import io.narayana.lra.client.NarayanaLRAClient;",
          "",
          "[Added Lines]",
          "8: import io.narayana.lra.client.internal.NarayanaLRAClient;",
          "",
          "---------------"
        ],
        "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/TestBase.java||rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/TestBase.java": [
          "File: rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/TestBase.java -> rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/TestBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import io.narayana.lra.LRAConstants;",
          "9: import io.narayana.lra.LRAData;",
          "11: import jakarta.json.Json;",
          "12: import jakarta.json.JsonArray;",
          "13: import jakarta.json.JsonReader;",
          "",
          "[Removed Lines]",
          "10: import io.narayana.lra.client.NarayanaLRAClient;",
          "",
          "[Added Lines]",
          "10: import io.narayana.lra.client.internal.NarayanaLRAClient;",
          "",
          "---------------"
        ],
        "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java||rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java": [
          "File: rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java -> rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import io.narayana.lra.arquillian.Deployer;",
          "9: import io.narayana.lra.arquillian.TestBase;",
          "10: import io.narayana.lra.arquillian.resource.LRAParticipant;",
          "12: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
          "13: import org.jboss.arquillian.container.test.api.Deployment;",
          "14: import org.jboss.arquillian.test.api.ArquillianResource;",
          "",
          "[Removed Lines]",
          "11: import io.narayana.lra.client.NarayanaLRAClient;",
          "",
          "[Added Lines]",
          "11: import io.narayana.lra.client.internal.NarayanaLRAClient;",
          "",
          "---------------"
        ],
        "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/LRAParticipant.java||rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/LRAParticipant.java": [
          "File: rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/LRAParticipant.java -> rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/resource/LRAParticipant.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: package io.narayana.lra.arquillian.resource;",
          "9: import org.eclipse.microprofile.lra.annotation.Compensate;",
          "10: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
          "11: import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;",
          "",
          "[Removed Lines]",
          "8: import io.narayana.lra.client.NarayanaLRAClient;",
          "",
          "[Added Lines]",
          "8: import io.narayana.lra.client.internal.NarayanaLRAClient;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2cb9d4765bdd7dcd1865cf8f329298b84c725d8c",
      "candidate_info": {
        "commit_hash": "2cb9d4765bdd7dcd1865cf8f329298b84c725d8c",
        "repo": "jbosstm/narayana",
        "commit_url": "https://github.com/jbosstm/narayana/commit/2cb9d4765bdd7dcd1865cf8f329298b84c725d8c",
        "files": [
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java"
        ],
        "message": "JBTM-3846 handle timeouts without participants",
        "before_after_code_files": [
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java"
          ],
          "candidate": [
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java"
          ]
        }
      },
      "candidate_diff": {
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1076:                         LRALogger.logger.debugf(\"LongRunningAction.abortLRA cancelling LRA `%s\", id);",
          "1077:                     }",
          "1080:                     if (LRALogger.logger.isTraceEnabled()) {",
          "1081:                         trace_progress(\"scheduledAbort fired\");",
          "1082:                     }",
          "",
          "[Removed Lines]",
          "1079:                     updateState(LRAStatus.Cancelling);",
          "",
          "[Added Lines]",
          "1079:                     if (getSize(pendingList) == 0 && getSize(preparedList) == 0 && getSize(heuristicList) == 0) {",
          "1080:                         updateState(LRAStatus.Cancelled);",
          "1081:                     } else {",
          "1082:                         updateState(LRAStatus.Cancelling);",
          "1083:                     }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: import java.util.Objects;",
          "61: import java.util.Set;",
          "62: import java.util.StringTokenizer;",
          "63: import java.util.concurrent.atomic.AtomicInteger;",
          "64: import java.util.stream.IntStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: import java.util.concurrent.TimeUnit;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "791:         assertTrue(\"LRA should have cancelled\", status == null || status == LRAStatus.Cancelled);",
          "792:     }",
          "794:     private void runLRA(boolean cancel) {",
          "795:         URI parentId = lraClient.startLRA(\"parent\");",
          "796:         URI childId = lraClient.startLRA(parentId, \"child\", 0L, ChronoUnit.SECONDS);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "795:     @Test",
          "796:     public void testTimeOutWithNoParticipants() {",
          "797:         URI lraId = lraClient.startLRA(null, \"testTimeLimit\", 100L, ChronoUnit.MILLIS);",
          "800:         try {",
          "801:             TimeUnit.SECONDS.sleep(1);",
          "802:         } catch (InterruptedException e) {",
          "803:             throw new RuntimeException(e);",
          "804:         }",
          "807:         LRAStatus status = getStatus(lraId);",
          "808:         assertTrue(\"LRA should have cancelled but it's in state \" + status,",
          "809:                 status == null || status == LRAStatus.Cancelled);",
          "810:         try {",
          "811:             lraClient.cancelLRA(lraId);",
          "812:             fail(\"should not be able to cancel a timed out LRA\");",
          "813:         } catch (WebApplicationException ignore) {",
          "814:         }",
          "815:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbac7f15110c47d69f9830807f2e3e7a577f6005",
      "candidate_info": {
        "commit_hash": "bbac7f15110c47d69f9830807f2e3e7a577f6005",
        "repo": "jbosstm/narayana",
        "commit_url": "https://github.com/jbosstm/narayana/commit/bbac7f15110c47d69f9830807f2e3e7a577f6005",
        "files": [
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
          "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
        ],
        "message": "JBTM-3924 (6.0) Replace synchronized in favor of Reentrant Lock\n\n in LRAService joinLRA method",
        "before_after_code_files": [
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
          "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
            "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
          ],
          "candidate": [
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
            "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
          ]
        }
      },
      "candidate_diff": {
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:     public LRAParticipantRecord enlistParticipant(URI coordinatorUrl, String participantUrl, String recoveryUrlBase,",
          "716:                                                   long timeLimit, String compensatorData) throws UnsupportedEncodingException {",
          "722:         }",
          "731:         }",
          "734:     }",
          "736:     private LRAParticipantRecord enlistParticipant(URI coordinatorUrl, String participantUrl, String recoveryUrlBase, String terminateUrl,",
          "",
          "[Removed Lines]",
          "717:         LRAParticipantRecord participant = findLRAParticipant(participantUrl, false);",
          "719:         if (participant != null) {",
          "720:             participant.setCompensatorData(compensatorData);",
          "721:             return participant; // must have already been enlisted",
          "724:         participant = enlistParticipant(coordinatorUrl, participantUrl, recoveryUrlBase, null,",
          "725:                 timeLimit, compensatorData);",
          "727:         if (participant != null) {",
          "729:             deactivate(); // if it fails the superclass will have logged a warning",
          "730:             savedIntentionList = true; // need this clean up if the LRA times out",
          "733:         return participant;",
          "",
          "[Added Lines]",
          "717:         ReentrantLock lock = tryLockTransaction();",
          "718:         if (lock == null) {",
          "719:             LRALogger.i18nLogger.warn_enlistment();",
          "720:             return null;",
          "722:         else {",
          "723:             try {",
          "724:                 LRAParticipantRecord participant = findLRAParticipant(participantUrl, false);",
          "725:                 if (participant != null) {",
          "726:                     participant.setCompensatorData(compensatorData);",
          "727:                     return participant; // must have already been enlisted",
          "728:                 }",
          "729:                 participant = enlistParticipant(coordinatorUrl, participantUrl, recoveryUrlBase, null,",
          "730:                         timeLimit, compensatorData);",
          "731:                 if (participant != null) {",
          "733:                     deactivate(); // if it fails the superclass will have logged a warning",
          "734:                     savedIntentionList = true; // need this clean up if the LRA times out",
          "735:                 }",
          "736:                 return participant;",
          "737:             }",
          "738:             finally {",
          "739:                 lock.unlock();",
          "740:             }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:         }",
          "345:     }",
          "348:                                     String compensatorUrl, String linkHeader, String recoveryUrlBase,",
          "349:                                     StringBuilder compensatorData) {",
          "350:         if (lra ==  null) {",
          "",
          "[Removed Lines]",
          "347:     public synchronized int joinLRA(StringBuilder recoveryUrl, URI lra, long timeLimit,",
          "",
          "[Added Lines]",
          "347:     public int joinLRA(StringBuilder recoveryUrl, URI lra, long timeLimit,",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: package io.narayana.lra.coordinator.domain.model;",
          "36: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
          "39: import org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer;",
          "40: import org.jboss.resteasy.test.TestPortProvider;",
          "41: import org.junit.After;",
          "",
          "[Removed Lines]",
          "24: import com.arjuna.ats.arjuna.common.arjPropertyManager;",
          "25: import io.narayana.lra.client.NarayanaLRAClient;",
          "26: import io.narayana.lra.coordinator.api.Coordinator;",
          "27: import io.narayana.lra.coordinator.domain.service.LRAService;",
          "28: import io.narayana.lra.coordinator.internal.LRARecoveryModule;",
          "29: import io.narayana.lra.filter.ServerLRAFilter;",
          "30: import io.narayana.lra.logging.LRALogger;",
          "31: import io.narayana.lra.provider.ParticipantStatusOctetStreamProvider;",
          "32: import org.eclipse.microprofile.lra.annotation.AfterLRA;",
          "33: import org.eclipse.microprofile.lra.annotation.Compensate;",
          "34: import org.eclipse.microprofile.lra.annotation.Complete;",
          "35: import org.eclipse.microprofile.lra.annotation.Forget;",
          "37: import org.eclipse.microprofile.lra.annotation.ParticipantStatus;",
          "38: import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;",
          "",
          "[Added Lines]",
          "24: import static io.narayana.lra.LRAConstants.COORDINATOR_PATH_NAME;",
          "25: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
          "26: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
          "27: import static org.junit.Assert.assertEquals;",
          "28: import static org.junit.Assert.assertFalse;",
          "29: import static org.junit.Assert.assertNotNull;",
          "30: import static org.junit.Assert.assertNull;",
          "31: import static org.junit.Assert.assertTrue;",
          "32: import static org.junit.Assert.fail;",
          "34: import java.net.URI;",
          "35: import java.net.URISyntaxException;",
          "36: import java.time.temporal.ChronoUnit;",
          "37: import java.util.Arrays;",
          "38: import java.util.HashSet;",
          "39: import java.util.Set;",
          "40: import java.util.StringTokenizer;",
          "41: import java.util.stream.IntStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.junit.Test;",
          "47: import org.junit.rules.TestName;",
          "49: import jakarta.ws.rs.ApplicationPath;",
          "54: import jakarta.ws.rs.NotFoundException;",
          "59: import jakarta.ws.rs.WebApplicationException;",
          "60: import jakarta.ws.rs.client.Client;",
          "61: import jakarta.ws.rs.client.ClientBuilder;",
          "",
          "[Removed Lines]",
          "50: import jakarta.ws.rs.DELETE;",
          "51: import jakarta.ws.rs.DefaultValue;",
          "52: import jakarta.ws.rs.GET;",
          "53: import jakarta.ws.rs.HeaderParam;",
          "55: import jakarta.ws.rs.PUT;",
          "56: import jakarta.ws.rs.Path;",
          "57: import jakarta.ws.rs.Produces;",
          "58: import jakarta.ws.rs.QueryParam;",
          "",
          "[Added Lines]",
          "54: import io.narayana.lra.client.NarayanaLRAClient;",
          "55: import io.narayana.lra.coordinator.api.Coordinator;",
          "56: import io.narayana.lra.coordinator.domain.service.LRAService;",
          "57: import io.narayana.lra.coordinator.internal.LRARecoveryModule;",
          "58: import io.narayana.lra.filter.ServerLRAFilter;",
          "59: import io.narayana.lra.logging.LRALogger;",
          "60: import io.narayana.lra.provider.ParticipantStatusOctetStreamProvider;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65: import jakarta.ws.rs.core.Link;",
          "66: import jakarta.ws.rs.core.MediaType;",
          "67: import jakarta.ws.rs.core.Response;",
          "93:     private static LRAService service;",
          "104:     private NarayanaLRAClient lraClient;",
          "105:     private Client client;",
          "106:     private String coordinatorPath;",
          "",
          "[Removed Lines]",
          "68: import java.io.File;",
          "69: import java.net.URI;",
          "70: import java.net.URISyntaxException;",
          "71: import java.time.temporal.ChronoUnit;",
          "72: import java.util.Arrays;",
          "73: import java.util.HashSet;",
          "74: import java.util.Objects;",
          "75: import java.util.Set;",
          "76: import java.util.StringTokenizer;",
          "77: import java.util.concurrent.atomic.AtomicInteger;",
          "78: import java.util.stream.IntStream;",
          "80: import static io.narayana.lra.LRAConstants.COORDINATOR_PATH_NAME;",
          "81: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
          "82: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_PARENT_CONTEXT_HEADER;",
          "83: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
          "84: import static org.junit.Assert.assertEquals;",
          "85: import static org.junit.Assert.assertFalse;",
          "86: import static org.junit.Assert.assertNotNull;",
          "87: import static org.junit.Assert.assertNull;",
          "88: import static org.junit.Assert.assertTrue;",
          "89: import static org.junit.Assert.fail;",
          "91: public class LRATest {",
          "92:     private static UndertowJaxrsServer server;",
          "95:     static final AtomicInteger compensateCount = new AtomicInteger(0);",
          "96:     static final AtomicInteger completeCount = new AtomicInteger(0);",
          "97:     static final AtomicInteger forgetCount = new AtomicInteger(0);",
          "99:     static final long LRA_SHORT_TIMELIMIT = 10L;",
          "101:     private static LRAStatus status = LRAStatus.Active;",
          "102:     private static final AtomicInteger acceptCount = new AtomicInteger(0);",
          "",
          "[Added Lines]",
          "73: public class LRATest extends LRATestBase {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:     @Rule",
          "109:     public TestName testName = new TestName();",
          "317:     @ApplicationPath(\"base\")",
          "318:     public static class LRAParticipant extends Application {",
          "319:         @Override",
          "",
          "[Removed Lines]",
          "111:     @Path(\"/test\")",
          "112:     public static class Participant {",
          "113:         private Response getResult(boolean cancel, URI lraId) {",
          "114:             Response.Status status = cancel ? Response.Status.INTERNAL_SERVER_ERROR : Response.Status.OK;",
          "116:             return Response.status(status).entity(lraId.toASCIIString()).build();",
          "117:         }",
          "119:         @GET",
          "120:         @Path(\"start-end\")",
          "121:         @LRA(value = LRA.Type.REQUIRED)",
          "122:         public Response doInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "123:                                 @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
          "124:                                 @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "125:             LRATest.acceptCount.set(acceptCount);",
          "127:             return getResult(cancel, contextId);",
          "128:         }",
          "130:         @GET",
          "131:         @Path(\"start\")",
          "132:         @LRA(value = LRA.Type.REQUIRED, end = false)",
          "133:         public Response startInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "134:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
          "135:                                    @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
          "136:                                    @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "137:             LRATest.acceptCount.set(acceptCount);",
          "139:             return getResult(cancel, contextId);",
          "140:         }",
          "142:         @PUT",
          "143:         @Path(\"end\")",
          "144:         @LRA(value = LRA.Type.MANDATORY,",
          "145:                 cancelOnFamily = Response.Status.Family.SERVER_ERROR)",
          "146:         public Response endLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "147:                                @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
          "148:                                @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
          "149:                                @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "150:             LRATest.acceptCount.set(acceptCount);",
          "152:             return getResult(cancel, contextId);",
          "153:         }",
          "155:         @GET",
          "156:         @Path(\"time-limit\")",
          "157:         @Produces(MediaType.APPLICATION_JSON)",
          "158:         @LRA(value = LRA.Type.REQUIRED, timeLimit = 500, timeUnit = ChronoUnit.MILLIS)",
          "159:         public Response timeLimit(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {",
          "160:             try {",
          "163:                 Thread.sleep(2000);",
          "164:             } catch (InterruptedException e) {",
          "165:                 LRALogger.logger.debugf(\"Interrupted because time limit elapsed\", e);",
          "166:             }",
          "167:             return Response.status(Response.Status.OK).entity(lraId.toASCIIString()).build();",
          "168:         }",
          "170:         @GET",
          "171:         @Path(\"timed-action\")",
          "172:         @LRA(value = LRA.Type.REQUIRED, end = false, timeLimit = LRA_SHORT_TIMELIMIT) // the default unit is SECONDS",
          "173:         public Response actionWithLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "174:                                       @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "175:             status = LRAStatus.Active;",
          "177:             server.stop(); //simulate a server crash",
          "179:             return getResult(cancel, contextId);",
          "180:         }",
          "182:         @LRA(value = LRA.Type.NESTED, end = false)",
          "183:         @PUT",
          "184:         @Path(\"nested\")",
          "185:         public Response nestedLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "186:                                   @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
          "187:                                   @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "188:             return getResult(cancel, contextId);",
          "189:         }",
          "191:         @LRA(value = LRA.Type.NESTED)",
          "192:         @PUT",
          "193:         @Path(\"nested-with-close\")",
          "194:         public Response nestedLRAWithClose(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "195:                                            @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentId,",
          "196:                                            @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "197:             return getResult(cancel, contextId);",
          "198:         }",
          "200:         @PUT",
          "201:         @Path(\"multiLevelNestedActivity\")",
          "202:         @LRA(value = LRA.Type.MANDATORY, end = false)",
          "203:         public Response multiLevelNestedActivity(",
          "204:                 @HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
          "205:                 @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI nestedLRAId,",
          "206:                 @QueryParam(\"nestedCnt\") @DefaultValue(\"1\") Integer nestedCnt) {",
          "208:             String[] lras = new String[nestedCnt + 1];",
          "209:             lras[0] = nestedLRAId.toASCIIString();",
          "210:             IntStream.range(1, lras.length).forEach(i -> lras[i] = restPutInvocation(nestedLRAId,\"nestedActivity\", \"\"));",
          "212:             return Response.ok(String.join(\",\", lras)).build();",
          "213:         }",
          "215:         @PUT",
          "216:         @Path(\"nestedActivity\")",
          "217:         @LRA(value = LRA.Type.NESTED, end = true)",
          "218:         public Response nestedActivity(@HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
          "219:                                        @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI nestedLRAId) {",
          "220:             return Response.ok(nestedLRAId.toASCIIString()).build();",
          "221:         }",
          "223:         @GET",
          "224:         @Path(\"status\")",
          "225:         public Response getStatus() {",
          "226:             return Response.ok(status.name()).build();",
          "227:         }",
          "229:         @PUT",
          "230:         @Path(\"/complete\")",
          "231:         @Complete",
          "232:         public Response complete(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
          "233:                                  @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
          "234:             if (acceptCount.getAndDecrement() <= 0) {",
          "235:                 completeCount.incrementAndGet();",
          "236:                 acceptCount.set(0);",
          "237:                 return Response.status(Response.Status.OK).entity(ParticipantStatus.Completed).build();",
          "238:             }",
          "240:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Completing).build();",
          "241:         }",
          "243:         @PUT",
          "244:         @Path(\"/compensate\")",
          "245:         @Compensate",
          "246:         public Response compensate(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
          "247:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
          "248:             if (acceptCount.getAndDecrement() <= 0) {",
          "249:                 compensateCount.incrementAndGet();",
          "250:                 acceptCount.set(0);",
          "251:                 return Response.status(Response.Status.OK).entity(ParticipantStatus.Compensated).build();",
          "252:             }",
          "254:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Compensating).build();",
          "255:         }",
          "257:         @PUT",
          "258:         @Path(\"after\")",
          "259:         @AfterLRA",
          "260:         public Response lraEndStatus(LRAStatus endStatus) {",
          "261:             status = endStatus;",
          "263:             return Response.ok().build();",
          "264:         }",
          "266:         @DELETE",
          "267:         @Path(\"/forget\")",
          "268:         @Produces(MediaType.APPLICATION_JSON)",
          "269:         @Forget",
          "270:         public Response forgetWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,",
          "271:                                    @HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId) {",
          "272:             forgetCount.incrementAndGet();",
          "274:             return Response.ok().build();",
          "275:         }",
          "277:         @GET",
          "278:         @Path(\"forget-count\")",
          "279:         public int getForgetCount() {",
          "280:             return forgetCount.get();",
          "281:         }",
          "283:         @PUT",
          "284:         @Path(\"reset-accepted\")",
          "285:         public Response reset() {",
          "286:             LRATest.acceptCount.set(0);",
          "288:             return Response.ok(\"\").build();",
          "289:         }",
          "291:         private String restPutInvocation(URI lraURI, String path, String bodyText) {",
          "292:             String id = \"\";",
          "293:             Client client = ClientBuilder.newClient();",
          "294:             try {",
          "295:                 try (Response response = client",
          "296:                         .target(TestPortProvider.generateURL(\"/base/test\"))",
          "297:                         .path(path)",
          "298:                         .request()",
          "299:                         .header(LRA_HTTP_CONTEXT_HEADER, lraURI)",
          "300:                         .put(Entity.text(bodyText))) {",
          "301:                     if (response.hasEntity()) { // read the entity (to force close on the response)",
          "302:                         id = response.readEntity(String.class);",
          "303:                     }",
          "304:                     if (response.getStatus() != Response.Status.OK.getStatusCode()) {",
          "305:                         throw new WebApplicationException(id + \": error on REST PUT for LRA '\" + lraURI",
          "306:                                 + \"' at path '\" + path + \"' and body '\" + bodyText + \"'\", response);",
          "307:                     }",
          "308:                 }",
          "310:                 return id;",
          "311:             } finally {",
          "312:                 client.close();",
          "313:             }",
          "314:         }",
          "315:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "346:         LRALogger.logger.debugf(\"Starting test %s\", testName);",
          "347:         server = new UndertowJaxrsServer().start();",
          "350:         lraClient = new NarayanaLRAClient();",
          "352:         compensateCount.set(0);",
          "",
          "[Removed Lines]",
          "349:         clearObjectStore();",
          "",
          "[Added Lines]",
          "116:         clearObjectStore(testName);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "366:         LRALogger.logger.debugf(\"Finished test %s\", testName);",
          "367:         lraClient.close();",
          "368:         client.close();",
          "370:         server.stop();",
          "371:     }",
          "",
          "[Removed Lines]",
          "369:         clearObjectStore();",
          "",
          "[Added Lines]",
          "136:         clearObjectStore(testName);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "882:                 .build().toString();",
          "883:     }",
          "907: }",
          "",
          "[Removed Lines]",
          "885:     private void clearObjectStore() {",
          "886:         final String objectStorePath = arjPropertyManager.getObjectStoreEnvironmentBean().getObjectStoreDir();",
          "887:         final File objectStoreDirectory = new File(objectStorePath);",
          "889:         clearDirectory(objectStoreDirectory);",
          "890:     }",
          "892:     private void clearDirectory(final File directory) {",
          "893:         final File[] files = directory.listFiles();",
          "895:         if (files != null) {",
          "896:             for (final File file : Objects.requireNonNull(directory.listFiles())) {",
          "897:                 if (file.isDirectory()) {",
          "898:                     clearDirectory(file);",
          "899:                 }",
          "901:                 if (!file.delete()) {",
          "902:                     LRALogger.logger.infof(\"%s: unable to delete file %s\", testName, file.getName());",
          "903:                 }",
          "904:             }",
          "905:         }",
          "906:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    Copyright The Narayana Authors",
          "3:    SPDX-License-Identifier: Apache-2.0",
          "6: package io.narayana.lra.coordinator.domain.model;",
          "8: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
          "9: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_PARENT_CONTEXT_HEADER;",
          "10: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
          "12: import java.io.File;",
          "13: import java.net.URI;",
          "14: import java.time.temporal.ChronoUnit;",
          "15: import java.util.Objects;",
          "16: import java.util.concurrent.atomic.AtomicInteger;",
          "17: import java.util.stream.IntStream;",
          "19: import org.eclipse.microprofile.lra.annotation.AfterLRA;",
          "20: import org.eclipse.microprofile.lra.annotation.Compensate;",
          "21: import org.eclipse.microprofile.lra.annotation.Complete;",
          "22: import org.eclipse.microprofile.lra.annotation.Forget;",
          "23: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
          "24: import org.eclipse.microprofile.lra.annotation.ParticipantStatus;",
          "25: import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;",
          "26: import org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer;",
          "27: import org.jboss.resteasy.test.TestPortProvider;",
          "28: import org.junit.rules.TestName;",
          "30: import com.arjuna.ats.arjuna.common.arjPropertyManager;",
          "32: import io.narayana.lra.logging.LRALogger;",
          "33: import jakarta.ws.rs.DELETE;",
          "34: import jakarta.ws.rs.DefaultValue;",
          "35: import jakarta.ws.rs.GET;",
          "36: import jakarta.ws.rs.HeaderParam;",
          "37: import jakarta.ws.rs.PUT;",
          "38: import jakarta.ws.rs.Path;",
          "39: import jakarta.ws.rs.Produces;",
          "40: import jakarta.ws.rs.QueryParam;",
          "41: import jakarta.ws.rs.WebApplicationException;",
          "42: import jakarta.ws.rs.client.Client;",
          "43: import jakarta.ws.rs.client.ClientBuilder;",
          "44: import jakarta.ws.rs.client.Entity;",
          "45: import jakarta.ws.rs.core.MediaType;",
          "46: import jakarta.ws.rs.core.Response;",
          "48: public class LRATestBase {",
          "50:     protected static UndertowJaxrsServer server;",
          "51:     static final AtomicInteger compensateCount = new AtomicInteger(0);",
          "52:     static final AtomicInteger completeCount = new AtomicInteger(0);",
          "53:     static final AtomicInteger forgetCount = new AtomicInteger(0);",
          "54:     static final long LRA_SHORT_TIMELIMIT = 10L;",
          "55:     private static LRAStatus status = LRAStatus.Active;",
          "56:     private static final AtomicInteger acceptCount = new AtomicInteger(0);",
          "58:     @Path(\"/test\")",
          "59:     public static class Participant {",
          "60:         private Response getResult(boolean cancel, URI lraId) {",
          "61:             Response.Status status = cancel ? Response.Status.INTERNAL_SERVER_ERROR : Response.Status.OK;",
          "63:             return Response.status(status).entity(lraId.toASCIIString()).build();",
          "64:         }",
          "66:         @GET",
          "67:         @Path(\"start-end\")",
          "68:         @LRA(value = LRA.Type.REQUIRED)",
          "69:         public Response doInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "70:                                 @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
          "71:                                 @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "72:             LRATestBase.acceptCount.set(acceptCount);",
          "74:             return getResult(cancel, contextId);",
          "75:         }",
          "77:         @GET",
          "78:         @Path(\"start\")",
          "79:         @LRA(value = LRA.Type.REQUIRED, end = false)",
          "80:         public Response startInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "81:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
          "82:                                    @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
          "83:                                    @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "84:             LRATestBase.acceptCount.set(acceptCount);",
          "86:             return getResult(cancel, contextId);",
          "87:         }",
          "89:         @PUT",
          "90:         @Path(\"end\")",
          "91:         @LRA(value = LRA.Type.MANDATORY,",
          "92:                 cancelOnFamily = Response.Status.Family.SERVER_ERROR)",
          "93:         public Response endLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "94:                                @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
          "95:                                @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
          "96:                                @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "97:             LRATestBase.acceptCount.set(acceptCount);",
          "99:             return getResult(cancel, contextId);",
          "100:         }",
          "102:         @GET",
          "103:         @Path(\"time-limit\")",
          "104:         @Produces(MediaType.APPLICATION_JSON)",
          "105:         @LRA(value = LRA.Type.REQUIRED, timeLimit = 1000, timeUnit = ChronoUnit.MILLIS)",
          "106:         public Response timeLimit(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {",
          "107:             try {",
          "110:                 Thread.sleep(8000);",
          "111:             } catch (InterruptedException e) {",
          "112:                 LRALogger.logger.debugf(\"Interrupted because time limit elapsed\", e);",
          "113:             }",
          "114:             return Response.status(Response.Status.OK).entity(lraId.toASCIIString()).build();",
          "115:         }",
          "117:         @GET",
          "118:         @Path(\"timed-action\")",
          "119:         @LRA(value = LRA.Type.REQUIRED, end = false, timeLimit = LRA_SHORT_TIMELIMIT) // the default unit is SECONDS",
          "120:         public Response actionWithLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "121:                                       @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "122:             status = LRAStatus.Active;",
          "124:             server.stop(); //simulate a server crash",
          "126:             return getResult(cancel, contextId);",
          "127:         }",
          "129:         @LRA(value = LRA.Type.NESTED, end = false)",
          "130:         @PUT",
          "131:         @Path(\"nested\")",
          "132:         public Response nestedLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "133:                                   @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
          "134:                                   @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "135:             return getResult(cancel, contextId);",
          "136:         }",
          "138:         @LRA(value = LRA.Type.NESTED)",
          "139:         @PUT",
          "140:         @Path(\"nested-with-close\")",
          "141:         public Response nestedLRAWithClose(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "142:                                            @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentId,",
          "143:                                            @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "144:             return getResult(cancel, contextId);",
          "145:         }",
          "147:         @PUT",
          "148:         @Path(\"multiLevelNestedActivity\")",
          "149:         @LRA(value = LRA.Type.MANDATORY, end = false)",
          "150:         public Response multiLevelNestedActivity(",
          "151:                 @HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
          "152:                 @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI nestedLRAId,",
          "153:                 @QueryParam(\"nestedCnt\") @DefaultValue(\"1\") Integer nestedCnt) {",
          "155:             String[] lras = new String[nestedCnt + 1];",
          "156:             lras[0] = nestedLRAId.toASCIIString();",
          "157:             IntStream.range(1, lras.length).forEach(i -> lras[i] = restPutInvocation(nestedLRAId,\"nestedActivity\", \"\"));",
          "159:             return Response.ok(String.join(\",\", lras)).build();",
          "160:         }",
          "162:         @PUT",
          "163:         @Path(\"nestedActivity\")",
          "164:         @LRA(value = LRA.Type.NESTED, end = true)",
          "165:         public Response nestedActivity(@HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
          "166:                                        @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI nestedLRAId) {",
          "167:             return Response.ok(nestedLRAId.toASCIIString()).build();",
          "168:         }",
          "170:         @GET",
          "171:         @Path(\"status\")",
          "172:         public Response getStatus() {",
          "173:             return Response.ok(status.name()).build();",
          "174:         }",
          "176:         @PUT",
          "177:         @Path(\"/complete\")",
          "178:         @Complete",
          "179:         public Response complete(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
          "180:                                  @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
          "181:             if (acceptCount.getAndDecrement() <= 0) {",
          "182:                 completeCount.incrementAndGet();",
          "183:                 acceptCount.set(0);",
          "184:                 return Response.status(Response.Status.OK).entity(ParticipantStatus.Completed).build();",
          "185:             }",
          "187:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Completing).build();",
          "188:         }",
          "190:         @PUT",
          "191:         @Path(\"/compensate\")",
          "192:         @Compensate",
          "193:         public Response compensate(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
          "194:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
          "195:             if (acceptCount.getAndDecrement() <= 0) {",
          "196:                 compensateCount.incrementAndGet();",
          "197:                 acceptCount.set(0);",
          "198:                 return Response.status(Response.Status.OK).entity(ParticipantStatus.Compensated).build();",
          "199:             }",
          "201:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Compensating).build();",
          "202:         }",
          "204:         @PUT",
          "205:         @Path(\"after\")",
          "206:         @AfterLRA",
          "207:         public Response lraEndStatus(LRAStatus endStatus) {",
          "208:             status = endStatus;",
          "210:             return Response.ok().build();",
          "211:         }",
          "213:         @DELETE",
          "214:         @Path(\"/forget\")",
          "215:         @Produces(MediaType.APPLICATION_JSON)",
          "216:         @Forget",
          "217:         public Response forgetWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,",
          "218:                                    @HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId) {",
          "219:             forgetCount.incrementAndGet();",
          "221:             return Response.ok().build();",
          "222:         }",
          "224:         @GET",
          "225:         @Path(\"forget-count\")",
          "226:         public int getForgetCount() {",
          "227:             return forgetCount.get();",
          "228:         }",
          "230:         @PUT",
          "231:         @Path(\"reset-accepted\")",
          "232:         public Response reset() {",
          "233:             LRATestBase.acceptCount.set(0);",
          "235:             return Response.ok(\"\").build();",
          "236:         }",
          "238:         private String restPutInvocation(URI lraURI, String path, String bodyText) {",
          "239:             String id = \"\";",
          "240:             Client client = ClientBuilder.newClient();",
          "241:             try {",
          "242:                 try (Response response = client",
          "243:                         .target(TestPortProvider.generateURL(\"/base/test\"))",
          "244:                         .path(path)",
          "245:                         .request()",
          "246:                         .header(LRA_HTTP_CONTEXT_HEADER, lraURI)",
          "247:                         .put(Entity.text(bodyText))) {",
          "248:                     if (response.hasEntity()) { // read the entity (to force close on the response)",
          "249:                         id = response.readEntity(String.class);",
          "250:                     }",
          "251:                     if (response.getStatus() != Response.Status.OK.getStatusCode()) {",
          "252:                         throw new WebApplicationException(id + \": error on REST PUT for LRA '\" + lraURI",
          "253:                                 + \"' at path '\" + path + \"' and body '\" + bodyText + \"'\", response);",
          "254:                     }",
          "255:                 }",
          "257:                 return id;",
          "258:             } finally {",
          "259:                 client.close();",
          "260:             }",
          "261:         }",
          "262:     }",
          "264:     protected void clearObjectStore(TestName testName) {",
          "265:         final String objectStorePath = arjPropertyManager.getObjectStoreEnvironmentBean().getObjectStoreDir();",
          "266:         final File objectStoreDirectory = new File(objectStorePath);",
          "268:         clearDirectory(objectStoreDirectory, testName);",
          "269:     }",
          "271:     protected void clearDirectory(final File directory, TestName testName) {",
          "272:         final File[] files = directory.listFiles();",
          "274:         if (files != null) {",
          "275:             for (final File file : Objects.requireNonNull(directory.listFiles())) {",
          "276:                 if (file.isDirectory()) {",
          "277:                     clearDirectory(file, testName);",
          "278:                 }",
          "280:                 if (!file.delete()) {",
          "281:                     LRALogger.logger.infof(\"%s: unable to delete file %s\", testName, file.getName());",
          "282:                 }",
          "283:             }",
          "284:         }",
          "285:     }",
          "286: }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    Copyright The Narayana Authors",
          "3:    SPDX-License-Identifier: Apache-2.0",
          "5: package io.narayana.lra.coordinator.domain.model;",
          "7: import static io.narayana.lra.LRAConstants.COORDINATOR_PATH_NAME;",
          "8: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
          "9: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_PARENT_CONTEXT_HEADER;",
          "10: import static org.junit.Assert.assertThrows;",
          "11: import static org.junit.Assert.fail;",
          "13: import java.net.URI;",
          "14: import java.time.temporal.ChronoUnit;",
          "15: import java.util.HashSet;",
          "16: import java.util.Set;",
          "17: import java.util.concurrent.TimeUnit;",
          "18: import java.util.concurrent.locks.ReentrantLock;",
          "20: import org.eclipse.microprofile.lra.annotation.Compensate;",
          "21: import org.eclipse.microprofile.lra.annotation.ParticipantStatus;",
          "22: import org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer;",
          "23: import org.jboss.resteasy.test.TestPortProvider;",
          "24: import org.junit.After;",
          "25: import org.junit.Before;",
          "26: import org.junit.BeforeClass;",
          "27: import org.junit.Rule;",
          "28: import org.junit.Test;",
          "29: import org.junit.rules.TestName;",
          "31: import io.narayana.lra.client.NarayanaLRAClient;",
          "32: import io.narayana.lra.coordinator.api.Coordinator;",
          "33: import io.narayana.lra.filter.ServerLRAFilter;",
          "34: import io.narayana.lra.logging.LRALogger;",
          "35: import io.narayana.lra.provider.ParticipantStatusOctetStreamProvider;",
          "36: import jakarta.ws.rs.ApplicationPath;",
          "37: import jakarta.ws.rs.HeaderParam;",
          "38: import jakarta.ws.rs.PUT;",
          "39: import jakarta.ws.rs.Path;",
          "40: import jakarta.ws.rs.WebApplicationException;",
          "41: import jakarta.ws.rs.core.Application;",
          "42: import jakarta.ws.rs.core.Response;",
          "44: public class LRAWithParticipantsTest extends LRATestBase {",
          "46:     @Rule",
          "47:     public TestName testName = new TestName();",
          "48:     private UndertowJaxrsServer server;",
          "49:     private NarayanaLRAClient lraClient;",
          "50:     private static ReentrantLock lock = new ReentrantLock();",
          "51:     private static boolean joinAttempted;",
          "52:     private static boolean compensateCalled;",
          "53:     @Path(\"/test\")",
          "54:     public static class ParticipantExtended extends Participant {",
          "56:         @PUT",
          "57:         @Path(\"/compensate\")",
          "58:         @Compensate",
          "59:         public Response compensate(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
          "60:                 @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
          "61:             synchronized (lock) {",
          "62:                 compensateCalled = true;",
          "63:                 lock.notify();",
          "64:             }",
          "65:             synchronized (lock) {",
          "66:                 while (!joinAttempted) {",
          "67:                     try {",
          "68:                         lock.wait();",
          "69:                     }",
          "70:                     catch (InterruptedException e) {",
          "71:                         fail(\"Could not wait\");",
          "72:                     }",
          "73:                 }",
          "74:             }",
          "75:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Compensating).build();",
          "76:         }",
          "77:     }",
          "78:     @ApplicationPath(\"service2\")",
          "79:     public static class Service2 extends Application {",
          "81:         @Override",
          "82:         public Set<Class<?>> getClasses() {",
          "83:             HashSet<Class<?>> classes = new HashSet<>();",
          "84:             classes.add(ParticipantExtended.class);",
          "85:             classes.add(ServerLRAFilter.class);",
          "86:             classes.add(ParticipantStatusOctetStreamProvider.class);",
          "87:             return classes;",
          "88:         }",
          "89:     }",
          "90:     @ApplicationPath(\"service3\")",
          "91:     public static class Service3 extends Service2 {",
          "92:     }",
          "93:     @ApplicationPath(\"service4\")",
          "94:     public static class Service4 extends Service2 {",
          "95:     }",
          "96:     @ApplicationPath(\"/\")",
          "97:     public static class LRACoordinator extends Application {",
          "99:         @Override",
          "100:         public Set<Class<?>> getClasses() {",
          "101:             HashSet<Class<?>> classes = new HashSet<>();",
          "102:             classes.add(Coordinator.class);",
          "103:             return classes;",
          "104:         }",
          "105:     }",
          "106:     @BeforeClass",
          "107:     public static void start() {",
          "108:         System.setProperty(\"lra.coordinator.url\", TestPortProvider.generateURL('/' + COORDINATOR_PATH_NAME));",
          "109:     }",
          "111:     @Before",
          "112:     public void before() {",
          "113:         LRALogger.logger.debugf(\"Starting test %s\", testName);",
          "114:         server = new UndertowJaxrsServer().start();",
          "115:         clearObjectStore(testName);",
          "116:         lraClient = new NarayanaLRAClient();",
          "117:         server.deploy(LRACoordinator.class);",
          "118:         server.deployOldStyle(Service2.class);",
          "119:         server.deployOldStyle(Service3.class);",
          "120:         server.deployOldStyle(Service4.class);",
          "121:     }",
          "123:     @After",
          "124:     public void after() {",
          "125:         LRALogger.logger.debugf(\"Finished test %s\", testName);",
          "126:         lraClient.close();",
          "127:         clearObjectStore(testName);",
          "128:         server.stop();",
          "129:     }",
          "131:     @Test",
          "132:     public void testJoinAfterTimeout() {",
          "135:         URI lraId = lraClient.startLRA(null, \"testTimeLimit\", 1000L, ChronoUnit.MILLIS);",
          "137:         lraClient.joinLRA(lraId, null, URI.create(\"http://localhost:8081/service2/test\"), null);",
          "139:         lraClient.joinLRA(lraId, null, URI.create(\"http://localhost:8081/service3/test\"), null);",
          "144:         try {",
          "145:             TimeUnit.SECONDS.sleep(1);",
          "146:         }",
          "147:         catch (InterruptedException e) {",
          "148:             throw new RuntimeException(e);",
          "149:         }",
          "150:         synchronized (lock) {",
          "151:             while (!compensateCalled) {",
          "152:                 try {",
          "153:                     lock.wait();",
          "154:                 }",
          "155:                 catch (InterruptedException e) {",
          "156:                     fail(\"Could not wait\");",
          "157:                 }",
          "158:             }",
          "163:             assertThrows(WebApplicationException.class, () -> {",
          "164:                 lraClient.joinLRA(lraId, null, URI.create(\"http://localhost:8081/service4/test\"), null);",
          "165:             });",
          "166:             joinAttempted = true;",
          "167:             lock.notify();",
          "168:         }",
          "169:     }",
          "170: }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: package io.narayana.lra.coordinator.tools.osb.mbean;",
          "9: import com.arjuna.ats.arjuna.common.recoveryPropertyManager;",
          "10: import com.arjuna.ats.arjuna.tools.osb.mbean.ActionBean;",
          "11: import com.arjuna.ats.arjuna.tools.osb.mbean.LogRecordWrapper;",
          "",
          "[Removed Lines]",
          "8: import com.arjuna.ats.arjuna.common.Uid;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     @Test",
          "92:     public void lraMBeanRemoval() throws Exception {",
          "94:         OSEntryBean lraOSEntryBean = null;",
          "95:         try {",
          "96:             lra.begin(Long.MAX_VALUE); // Creating the LRA records in the log store.",
          "",
          "[Removed Lines]",
          "93:         LongRunningAction lra = new LongRunningAction(new Uid());",
          "",
          "[Added Lines]",
          "92:         String lraUrl = \"http://localhost:8080/lra\";",
          "93:         LongRunningAction lra = LRARecoveryModule.getService().startLRA(lraUrl, null, \"client\", Long.MAX_VALUE);",
          "",
          "---------------"
        ],
        "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java": [
          "File: rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java -> rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     @Message(id = 25038, value = \"Invalid participant enlistment with LRA %s: participant data is disabled\")",
          "179:     String error_participant_data_disallowed(String lraId);",
          "182:         Allocate new messages directly above this notice.",
          "183:           - id: use the next id number in numeric sequence. Don't reuse ids.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:     @LogMessage(level = WARN)",
          "182:     @Message(id = 25040, value = \"Lock not acquired, enlistment failed: cannot enlist participant, cannot lock transaction\")",
          "183:     void warn_enlistment();",
          "",
          "---------------"
        ]
      }
    }
  ]
}