{
  "cve_id": "CVE-2024-28184",
  "cve_desc": "WeasyPrint helps web developers to create PDF documents. Since version 61.0, there's a vulnerability which allows attaching content of arbitrary files and URLs to a generated PDF document, even if `url_fetcher` is configured to prevent access to files and URLs. This vulnerability has been patched in version 61.2.",
  "repo": "Kozea/WeasyPrint",
  "patch_hash": "734ee8e2dc84ff3090682f3abff056d0907c8598",
  "patch_info": {
    "commit_hash": "734ee8e2dc84ff3090682f3abff056d0907c8598",
    "repo": "Kozea/WeasyPrint",
    "commit_url": "https://github.com/Kozea/WeasyPrint/commit/734ee8e2dc84ff3090682f3abff056d0907c8598",
    "files": [
      "weasyprint/html.py",
      "weasyprint/pdf/__init__.py",
      "weasyprint/pdf/anchors.py"
    ],
    "message": "Use document\u2019s url_fetcher for attachments\n\nAlso force HTML attachments to be detected as URLs so that url_fetcher is\nalways used.",
    "before_after_code_files": [
      "weasyprint/html.py||weasyprint/html.py",
      "weasyprint/pdf/__init__.py||weasyprint/pdf/__init__.py",
      "weasyprint/pdf/anchors.py||weasyprint/pdf/anchors.py"
    ]
  },
  "patch_diff": {
    "weasyprint/html.py||weasyprint/html.py": [
      "File: weasyprint/html.py -> weasyprint/html.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "281:             if url is None:",
      "282:                 LOGGER.error('Missing href in <link rel=\"attachment\">')",
      "283:             else:",
      "285:                 attachments.append(attachment)",
      "286:     return {",
      "287:         'title': title,",
      "",
      "[Removed Lines]",
      "284:                 attachment = Attachment(url=url, description=attachment_title)",
      "",
      "[Added Lines]",
      "284:                 attachment = Attachment(",
      "285:                     url=url, description=attachment_title,",
      "286:                     url_fetcher=html.url_fetcher)",
      "",
      "---------------"
    ],
    "weasyprint/pdf/__init__.py||weasyprint/pdf/__init__.py": [
      "File: weasyprint/pdf/__init__.py -> weasyprint/pdf/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "249:     if options['attachments']:",
      "250:         for attachment in options['attachments']:",
      "251:             if not isinstance(attachment, Attachment):",
      "253:             attachments.append(attachment)",
      "254:     pdf_attachments = []",
      "255:     for attachment in attachments:",
      "",
      "[Removed Lines]",
      "252:                 attachment = Attachment(attachment)",
      "",
      "[Added Lines]",
      "252:                 attachment = Attachment(",
      "253:                     attachment, url_fetcher=document.url_fetcher)",
      "",
      "---------------"
    ],
    "weasyprint/pdf/anchors.py||weasyprint/pdf/anchors.py": [
      "File: weasyprint/pdf/anchors.py -> weasyprint/pdf/anchors.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "252:             # TODO: Use the title attribute as description. The comment",
      "253:             # above about multiple regions won't always be correct, because",
      "254:             # two links might have the same href, but different titles.",
      "255:             annot_files[annot_target] = write_pdf_attachment(",
      "257:         annot_file = annot_files[annot_target]",
      "258:         if annot_file is None:",
      "259:             continue",
      "",
      "[Removed Lines]",
      "256:                 pdf, Attachment(annot_target), compress)",
      "",
      "[Added Lines]",
      "255:             attachment = Attachment(",
      "256:                 url=annot_target, url_fetcher=document.url_fetcher)",
      "258:                 pdf, attachment, compress)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "287819b30298c0bc1380ebb927ec262f44c8563a",
      "candidate_info": {
        "commit_hash": "287819b30298c0bc1380ebb927ec262f44c8563a",
        "repo": "Kozea/WeasyPrint",
        "commit_url": "https://github.com/Kozea/WeasyPrint/commit/287819b30298c0bc1380ebb927ec262f44c8563a",
        "files": [
          "weasyprint/document.py",
          "weasyprint/html.py",
          "weasyprint/pdf/__init__.py",
          "weasyprint/pdf/anchors.py"
        ],
        "message": "Change management of attachments",
        "before_after_code_files": [
          "weasyprint/document.py||weasyprint/document.py",
          "weasyprint/html.py||weasyprint/html.py",
          "weasyprint/pdf/__init__.py||weasyprint/pdf/__init__.py",
          "weasyprint/pdf/anchors.py||weasyprint/pdf/anchors.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "weasyprint/html.py||weasyprint/html.py",
            "weasyprint/pdf/__init__.py||weasyprint/pdf/__init__.py",
            "weasyprint/pdf/anchors.py||weasyprint/pdf/anchors.py"
          ],
          "candidate": [
            "weasyprint/html.py||weasyprint/html.py",
            "weasyprint/pdf/__init__.py||weasyprint/pdf/__init__.py",
            "weasyprint/pdf/anchors.py||weasyprint/pdf/anchors.py"
          ]
        }
      },
      "candidate_diff": {
        "weasyprint/document.py||weasyprint/document.py": [
          "File: weasyprint/document.py -> weasyprint/document.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:         #: Extracted from the ``<meta name=dcterms.modified>`` element in HTML",
          "144:         #: and written to the ``/ModDate`` info field in PDF.",
          "145:         self.modified = modified",
          "148:         #: Extracted from the ``<link rel=attachment>`` elements in HTML",
          "149:         #: and written to the ``/EmbeddedFiles`` dictionary in PDF.",
          "150:         self.attachments = attachments or []",
          "",
          "[Removed Lines]",
          "146:         #: File attachments, as a list of tuples of URL and a description or",
          "147:         #: :obj:`None`. (Defaults to the empty list.)",
          "",
          "[Added Lines]",
          "146:         #: A list of :class:`attachments <Attachment>`, empty by default.",
          "",
          "---------------"
        ],
        "weasyprint/html.py||weasyprint/html.py": [
          "File: weasyprint/html.py -> weasyprint/html.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import re",
          "23: from .css import get_child_text",
          "24: from .css.counters import CounterStyle",
          "25: from .formatting_structure import boxes",
          "",
          "[Removed Lines]",
          "22: from . import CSS, css",
          "",
          "[Added Lines]",
          "22: from . import CSS, Attachment, css",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:             if url is None:",
          "282:                 LOGGER.error('Missing href in <link rel=\"attachment\">')",
          "283:             else:",
          "285:     return {",
          "286:         'title': title,",
          "287:         'description': description,",
          "",
          "[Removed Lines]",
          "284:                 attachments.append((url, attachment_title))",
          "",
          "[Added Lines]",
          "284:                 attachment = Attachment(url=url, description=attachment_title)",
          "285:                 attachments.append(attachment)",
          "",
          "---------------"
        ],
        "weasyprint/pdf/__init__.py||weasyprint/pdf/__init__.py": [
          "File: weasyprint/pdf/__init__.py -> weasyprint/pdf/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import pydyf",
          "6: from ..html import W3C_DATE_RE",
          "7: from ..logger import LOGGER, PROGRESS_LOGGER",
          "8: from ..matrix import Matrix",
          "",
          "[Removed Lines]",
          "5: from .. import VERSION",
          "",
          "[Added Lines]",
          "5: from .. import VERSION, Attachment",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:                 pdf.info[key] = pydyf.String(value)",
          "247:     # Embedded files",
          "249:     pdf_attachments = []",
          "250:     for attachment in attachments:",
          "253:         if pdf_attachment is not None:",
          "254:             pdf_attachments.append(pdf_attachment)",
          "255:     if pdf_attachments:",
          "",
          "[Removed Lines]",
          "248:     attachments = metadata.attachments + (options['attachments'] or [])",
          "251:         pdf_attachment = write_pdf_attachment(",
          "252:             pdf, attachment, document.url_fetcher, compress)",
          "",
          "[Added Lines]",
          "248:     attachments = metadata.attachments.copy()",
          "249:     if options['attachments']:",
          "250:         for attachment in options['attachments']:",
          "251:             if not isinstance(attachment, Attachment):",
          "252:                 attachment = Attachment(attachment)",
          "253:             attachments.append(attachment)",
          "256:         pdf_attachment = write_pdf_attachment(pdf, attachment, compress)",
          "",
          "---------------"
        ],
        "weasyprint/pdf/anchors.py||weasyprint/pdf/anchors.py": [
          "File: weasyprint/pdf/anchors.py -> weasyprint/pdf/anchors.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:             # above about multiple regions won't always be correct, because",
          "254:             # two links might have the same href, but different titles.",
          "255:             annot_files[annot_target] = write_pdf_attachment(",
          "257:         annot_file = annot_files[annot_target]",
          "258:         if annot_file is None:",
          "259:             continue",
          "",
          "[Removed Lines]",
          "256:                 pdf, (annot_target, None), document.url_fetcher, compress)",
          "",
          "[Added Lines]",
          "256:                 pdf, Attachment(annot_target), compress)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:         page['Annots'].append(annot.reference)",
          "285:     \"\"\"Write an attachment to the PDF stream.\"\"\"",
          "286:     # Attachments from document links like <link> or <a> can only be URLs.",
          "287:     # They're passed in as tuples",
          "296:     uncompressed_length = 0",
          "297:     stream = b''",
          "298:     try:",
          "",
          "[Removed Lines]",
          "284: def write_pdf_attachment(pdf, attachment, url_fetcher, compress):",
          "288:     url = ''",
          "289:     if isinstance(attachment, tuple):",
          "290:         url, description = attachment",
          "291:         attachment = Attachment(",
          "292:             url=url, url_fetcher=url_fetcher, description=description)",
          "293:     elif not isinstance(attachment, Attachment):",
          "294:         attachment = Attachment(guess=attachment, url_fetcher=url_fetcher)",
          "",
          "[Added Lines]",
          "284: def write_pdf_attachment(pdf, attachment, compress):",
          "288:     url = None",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bcfb1499800216770383cbdc41cb910318459a4",
      "candidate_info": {
        "commit_hash": "7bcfb1499800216770383cbdc41cb910318459a4",
        "repo": "Kozea/WeasyPrint",
        "commit_url": "https://github.com/Kozea/WeasyPrint/commit/7bcfb1499800216770383cbdc41cb910318459a4",
        "files": [
          "docs/api_reference.rst",
          "tests/conftest.py",
          "tests/test_api.py",
          "tests/test_pdf.py",
          "tests/testing_utils.py",
          "weasyprint/__init__.py",
          "weasyprint/__main__.py",
          "weasyprint/document.py",
          "weasyprint/html.py",
          "weasyprint/images.py",
          "weasyprint/layout/__init__.py",
          "weasyprint/layout/page.py",
          "weasyprint/pdf/__init__.py",
          "weasyprint/pdf/fonts.py",
          "weasyprint/text/line_break.py",
          "weasyprint/urls.py"
        ],
        "message": "Use dictionary to store API options\n\nThis commit uses an \"option\" dictionary to store various API options that were\nused as arguments in many public and private functions. This change allows to\neasily document default values, to reduce the number of arguments and to avoid\nmany repetitions in documentation and signatures.\n\nThe changes to the public API are minimal, and should only have an impact for\nusers who passed unnamed arguments.",
        "before_after_code_files": [
          "tests/conftest.py||tests/conftest.py",
          "tests/test_api.py||tests/test_api.py",
          "tests/test_pdf.py||tests/test_pdf.py",
          "tests/testing_utils.py||tests/testing_utils.py",
          "weasyprint/__init__.py||weasyprint/__init__.py",
          "weasyprint/__main__.py||weasyprint/__main__.py",
          "weasyprint/document.py||weasyprint/document.py",
          "weasyprint/html.py||weasyprint/html.py",
          "weasyprint/images.py||weasyprint/images.py",
          "weasyprint/layout/__init__.py||weasyprint/layout/__init__.py",
          "weasyprint/layout/page.py||weasyprint/layout/page.py",
          "weasyprint/pdf/__init__.py||weasyprint/pdf/__init__.py",
          "weasyprint/pdf/fonts.py||weasyprint/pdf/fonts.py",
          "weasyprint/text/line_break.py||weasyprint/text/line_break.py",
          "weasyprint/urls.py||weasyprint/urls.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "weasyprint/html.py||weasyprint/html.py",
            "weasyprint/pdf/__init__.py||weasyprint/pdf/__init__.py"
          ],
          "candidate": [
            "weasyprint/html.py||weasyprint/html.py",
            "weasyprint/pdf/__init__.py||weasyprint/pdf/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/conftest.py||tests/conftest.py": [
          "File: tests/conftest.py -> tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:             shutil.copyfileobj(png, fd)",
          "87: Document.write_png = document_write_png",
          "",
          "[Removed Lines]",
          "76: def html_write_png(self, target=None, stylesheets=None, resolution=96,",
          "77:                    presentational_hints=False,",
          "78:                    optimize_size=('fonts', 'hinting', 'pdf'), font_config=None,",
          "79:                    counter_style=None, image_cache=None):",
          "80:     return self.render(",
          "81:         stylesheets, presentational_hints=presentational_hints,",
          "82:         optimize_size=optimize_size, font_config=font_config,",
          "83:         counter_style=counter_style, image_cache=image_cache).write_png(",
          "84:             target, resolution)",
          "",
          "[Added Lines]",
          "76: def html_write_png(self, target=None, font_config=None, counter_style=None,",
          "77:                    resolution=96, **options):",
          "78:     document = self.render(font_config, counter_style, **options)",
          "79:     return document.write_png(target, resolution)",
          "",
          "---------------"
        ],
        "tests/test_api.py||tests/test_api.py": [
          "File: tests/test_api.py -> tests/test_api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import sys",
          "7: import unicodedata",
          "8: import zlib",
          "9: from pathlib import Path",
          "10: from urllib.parse import urljoin, uses_relative",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: from functools import partial",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:         assert html.base_url is None",
          "79:     stdin = io.BytesIO(stdin)",
          "80:     stdout = io.BytesIO()",
          "86:     return stdout.getvalue()",
          "",
          "[Removed Lines]",
          "78: def _run(args, stdin=b''):",
          "81:     try:",
          "82:         __main__.HTML = FakeHTML",
          "83:         __main__.main(args.split(), stdin=stdin, stdout=stdout)",
          "84:     finally:",
          "85:         __main__.HTML = HTML",
          "",
          "[Added Lines]",
          "79: def _run(args, stdin=b'', uncompressed=False):",
          "82:     HTML = partial(FakeHTML, force_uncompressed_pdf=uncompressed)",
          "83:     __main__.main(args.split(), stdin=stdin, stdout=stdout, HTML=HTML)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:         tmpdir.join(name).write_binary(pattern_bytes)",
          "305:     # Reference",
          "309:     rotated_pdf_bytes = FakeHTML(",
          "310:         string=combined, base_url='dummy.html',",
          "313:     tmpdir.join('no_css.html').write_binary(html)",
          "314:     tmpdir.join('combined.html').write_binary(combined)",
          "",
          "[Removed Lines]",
          "306:     optimize_size = ('fonts', 'hinting', 'pdf')",
          "307:     html_obj = FakeHTML(string=combined, base_url='dummy.html')",
          "308:     pdf_bytes = html_obj.write_pdf(optimize_size=optimize_size)",
          "311:         media_type='screen').write_pdf(optimize_size=optimize_size)",
          "",
          "[Added Lines]",
          "304:     html_obj = FakeHTML(",
          "305:         string=combined, base_url='dummy.html', force_uncompressed_pdf=False)",
          "306:     pdf_bytes = html_obj.write_pdf()",
          "309:         media_type='screen', force_uncompressed_pdf=False).write_pdf()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "362:     os.environ['SOURCE_DATE_EPOCH'] = '0'",
          "363:     _run('not_optimized.html out15.pdf')",
          "376:     assert (",
          "379:         len(tmpdir.join('out16.pdf').read_binary()) <",
          "380:         len(tmpdir.join('out15.pdf').read_binary()) <",
          "382:     assert len({",
          "383:         tmpdir.join(f'out{i}.pdf').read_binary()",
          "391:     os.environ.pop('SOURCE_DATE_EPOCH')",
          "394:     assert stdout.count(b'attachment') == 0",
          "396:     assert stdout.count(b'attachment') == 0",
          "398:     assert stdout.count(b'attachment') == 1",
          "400:     assert stdout.count(b'attachment') == 2",
          "402:     os.mkdir('subdirectory')",
          "",
          "[Removed Lines]",
          "364:     _run('not_optimized.html out16.pdf -O images')",
          "365:     _run('not_optimized.html out17.pdf -O fonts')",
          "366:     _run('not_optimized.html out18.pdf -O fonts -O images')",
          "367:     _run('not_optimized.html out19.pdf -O all')",
          "368:     _run('not_optimized.html out20.pdf -O none')",
          "369:     _run('not_optimized.html out21.pdf -O none -O all')",
          "370:     _run('not_optimized.html out22.pdf -O all -O none')",
          "371:     _run('not_optimized.html out23.pdf -O pdf')",
          "372:     _run('not_optimized.html out24.pdf -O none -O fonts -O pdf -O hinting')",
          "373:     _run('not_optimized.html out25.pdf -O all -j 10')",
          "374:     _run('not_optimized.html out26.pdf -O all -j 10 -D 1')",
          "375:     _run(f'not_optimized.html out27.pdf -c {tmpdir}')",
          "377:         len(tmpdir.join('out26.pdf').read_binary()) <",
          "378:         len(tmpdir.join('out25.pdf').read_binary()) <",
          "381:         len(tmpdir.join('out20.pdf').read_binary()))",
          "384:         for i in (16, 18, 19, 21)}) == 1",
          "385:     assert len({",
          "386:         tmpdir.join(f'out{i}.pdf').read_binary()",
          "387:         for i in (15, 17, 23, 24, 27)}) == 1",
          "388:     assert len({",
          "389:         tmpdir.join(f'out{i}.pdf').read_binary()",
          "390:         for i in (20, 22)}) == 1",
          "393:     stdout = _run('-O none combined.html -')",
          "395:     stdout = _run('-O none combined.html -')",
          "397:     stdout = _run('-O none -a pattern.png combined.html -')",
          "399:     stdout = _run('-O none -a style.css -a pattern.png combined.html -')",
          "",
          "[Added Lines]",
          "362:     _run('not_optimized.html out16.pdf --optimize-images')",
          "363:     _run('not_optimized.html out17.pdf --optimize-images -j 10')",
          "364:     _run('not_optimized.html out18.pdf --optimize-images -j 10 -D 1')",
          "365:     _run('not_optimized.html out19.pdf --hinting')",
          "366:     _run('not_optimized.html out20.pdf --full-fonts')",
          "367:     _run('not_optimized.html out21.pdf --full-fonts --uncompressed-pdf')",
          "368:     _run(f'not_optimized.html out22.pdf -c {tmpdir}')",
          "370:         len(tmpdir.join('out18.pdf').read_binary()) <",
          "371:         len(tmpdir.join('out17.pdf').read_binary()) <",
          "374:         len(tmpdir.join('out19.pdf').read_binary()) <",
          "375:         len(tmpdir.join('out20.pdf').read_binary()) <",
          "376:         len(tmpdir.join('out21.pdf').read_binary()))",
          "379:         for i in (15, 22)}) == 1",
          "382:     stdout = _run('combined.html -', uncompressed=True)",
          "384:     stdout = _run('combined.html -', uncompressed=True)",
          "386:     stdout = _run('-a pattern.png combined.html -', uncompressed=True)",
          "388:     stdout = _run(",
          "389:         '-a style.css -a pattern.png combined.html -', uncompressed=True)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "431:     (4, '2.0'),",
          "432: ))",
          "433: def test_pdfa(version, pdf_version):",
          "435:     assert f'PDF-{pdf_version}'.encode() in stdout",
          "436:     assert f'part=\"{version}\"'.encode() in stdout",
          "",
          "[Removed Lines]",
          "434:     stdout = _run(f'--pdf-variant=pdf/a-{version}b -O none - -', b'test')",
          "",
          "[Added Lines]",
          "424:     stdout = _run(",
          "425:         f'--pdf-variant=pdf/a-{version}b - -', b'test', uncompressed=True)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "449: def test_pdfua():",
          "451:     assert b'part=\"1\"' in stdout",
          "",
          "[Removed Lines]",
          "450:     stdout = _run('--pdf-variant=pdf/ua-1 -O none - -', b'test')",
          "",
          "[Added Lines]",
          "441:     stdout = _run('--pdf-variant=pdf/ua-1 - -', b'test', uncompressed=True)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "458: def test_pdf_identifier():",
          "460:     assert b'abc' in stdout",
          "463: def test_pdf_version():",
          "465:     assert b'PDF-1.4' in stdout",
          "468: def test_pdf_custom_metadata():",
          "469:     stdout = _run(",
          "472:     assert b'/key' in stdout",
          "473:     assert b'value' in stdout",
          "476: def test_bad_pdf_custom_metadata():",
          "477:     stdout = _run(",
          "480:     assert b'value' not in stdout",
          "483: def test_partial_pdf_custom_metadata():",
          "484:     stdout = _run(",
          "487:     assert b'/abcd0' in stdout",
          "488:     assert b'value' in stdout",
          "",
          "[Removed Lines]",
          "459:     stdout = _run('--pdf-identifier=abc -O none - -', b'test')",
          "464:     stdout = _run('--pdf-version=1.4 -O none - -', b'test')",
          "470:         '--custom-metadata -O none - -',",
          "471:         b'<meta name=key content=value />')",
          "478:         '--custom-metadata -O none - -',",
          "479:         '<meta name=\u00e9 content=value />'.encode('latin1'))",
          "485:         '--custom-metadata -O none - -',",
          "486:         '<meta name=a.b/c\u00e9d0 content=value />'.encode('latin1'))",
          "",
          "[Added Lines]",
          "450:     stdout = _run('--pdf-identifier=abc - -', b'test', uncompressed=True)",
          "455:     stdout = _run('--pdf-version=1.4 - -', b'test', uncompressed=True)",
          "461:         '--custom-metadata - -', b'<meta name=key content=value />',",
          "462:         uncompressed=True)",
          "469:         '--custom-metadata - -',",
          "470:         '<meta name=\u00e9 content=value />'.encode('latin1'), uncompressed=True)",
          "476:         '--custom-metadata - -',",
          "477:         '<meta name=a.b/c\u00e9d0 content=value />'.encode('latin1'),",
          "478:         uncompressed=True)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "494:     (b'<textarea></textarea>', b'/Tx'),",
          "495: ))",
          "496: def test_pdf_inputs(html, field):",
          "498:     assert b'AcroForm' in stdout",
          "499:     assert field in stdout",
          "501:     assert b'AcroForm' not in stdout",
          "",
          "[Removed Lines]",
          "497:     stdout = _run('--pdf-forms -O none - -', html)",
          "500:     stdout = _run('- -', html)",
          "",
          "[Added Lines]",
          "489:     stdout = _run('--pdf-forms - -', html, uncompressed=True)",
          "492:     stdout = _run('- -', html, uncompressed=True)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "508: ))",
          "509: def test_appearance(css, with_forms, without_forms):",
          "510:     html = f'<input style=\"{css}\">'.encode()",
          "515: def test_reproducible():",
          "",
          "[Removed Lines]",
          "511:     assert (b'AcroForm' in _run('--pdf-forms -O none - -', html)) is with_forms",
          "512:     assert (b'AcroForm' in _run(' -O none - -', html)) is without_forms",
          "",
          "[Added Lines]",
          "503:     assert with_forms is (",
          "504:         b'AcroForm' in _run('--pdf-forms - -', html, uncompressed=True))",
          "505:     assert without_forms is (",
          "506:         b'AcroForm' in _run(' - -', html, uncompressed=True))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "565:     assert pdf_bytes.startswith(b'%PDF')",
          "567:     png_bytes = html.write_png(stylesheets=[css])",
          "569:     page, = document.pages",
          "570:     assert page.width == 8",
          "571:     assert page.height == 8",
          "572:     assert document.write_png() == png_bytes",
          "573:     assert document.copy([page]).write_png() == png_bytes",
          "576:     page, = document.pages",
          "577:     assert (page.width, page.height) == (8, 8)",
          "578:     png_bytes = document.write_png(resolution=192)",
          "579:     check_png_pattern(assert_pixels_equal, png_bytes, x2=True)",
          "582:     page, = document.pages",
          "583:     assert (page.width, page.height) == (8, 8)",
          "584:     # A resolution that is not multiple of 96:",
          "",
          "[Removed Lines]",
          "568:     document = html.render([css])",
          "575:     document = html.render([css])",
          "581:     document = html.render([css])",
          "",
          "[Added Lines]",
          "562:     document = html.render(stylesheets=[css])",
          "569:     document = html.render(stylesheets=[css])",
          "575:     document = html.render(stylesheets=[css])",
          "",
          "---------------"
        ],
        "tests/test_pdf.py||tests/test_pdf.py": [
          "File: tests/test_pdf.py -> tests/test_pdf.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "537:         string='<img src=\"not-optimized.jpg\">').render().pages",
          "538:     document = Document(",
          "539:         (page1, page2), metadata=DocumentMetadata(),",
          "542:     assert document.count(b'/Filter /DCTDecode') == 2",
          "",
          "[Removed Lines]",
          "540:         font_config=FontConfiguration(), url_fetcher=None,",
          "541:         optimize_size=()).write_pdf()",
          "",
          "[Added Lines]",
          "540:         font_config=FontConfiguration(), url_fetcher=None).write_pdf()",
          "",
          "---------------"
        ],
        "tests/testing_utils.py||tests/testing_utils.py": [
          "File: tests/testing_utils.py -> tests/testing_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import threading",
          "9: import wsgiref.simple_server",
          "12: from weasyprint.css import get_all_computed_styles",
          "13: from weasyprint.css.counters import CounterStyle",
          "14: from weasyprint.css.targets import TargetCollector",
          "",
          "[Removed Lines]",
          "11: from weasyprint import CSS, HTML, images",
          "",
          "[Added Lines]",
          "11: from weasyprint import CSS, DEFAULT_OPTIONS, HTML, images",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: class FakeHTML(HTML):",
          "50:     \"\"\"Like weasyprint.HTML, but with a lighter UA stylesheet.\"\"\"",
          "51:     def _ua_stylesheets(self, forms=False):",
          "52:         return [",
          "53:             TEST_UA_STYLESHEET if stylesheet == HTML5_UA_STYLESHEET",
          "54:             else stylesheet for stylesheet in super()._ua_stylesheets(forms)]",
          "70: def resource_filename(basename):",
          "",
          "[Removed Lines]",
          "56:     def write_pdf(self, target=None, stylesheets=None, zoom=1,",
          "57:                   attachments=None, finisher=None, presentational_hints=False,",
          "58:                   optimize_size=('fonts',), jpeg_quality=None, dpi=None,",
          "59:                   font_config=None, counter_style=None, image_cache=None,",
          "60:                   identifier=None, variant=None, version=None, forms=False,",
          "61:                   custom_metadata=False):",
          "62:         # Override function to set PDF size optimization to False by default",
          "63:         return super().write_pdf(",
          "64:             target, stylesheets, zoom, attachments, finisher,",
          "65:             presentational_hints, optimize_size, jpeg_quality, dpi,",
          "66:             font_config, counter_style, image_cache, identifier, variant,",
          "67:             version, forms, custom_metadata)",
          "",
          "[Added Lines]",
          "51:     def __init__(self, *args, force_uncompressed_pdf=True, **kwargs):",
          "52:         super().__init__(*args, **kwargs)",
          "53:         self._force_uncompressed_pdf = force_uncompressed_pdf",
          "60:     def write_pdf(self, target=None, zoom=1, finisher=None, **options):",
          "61:         # Override function to force the generation of uncompressed PDFs",
          "62:         if self._force_uncompressed_pdf:",
          "63:             options['uncompressed_pdf'] = True",
          "64:         return super().write_pdf(target, zoom, finisher, **options)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:     style_for = get_all_computed_styles(document, counter_style=counter_style)",
          "196:     get_image_from_uri = functools.partial(",
          "197:         images.get_image_from_uri, cache={}, url_fetcher=document.url_fetcher,",
          "199:     target_collector = TargetCollector()",
          "200:     footnotes = []",
          "201:     return (",
          "",
          "[Removed Lines]",
          "198:         optimize_size=(), jpeg_quality=None, dpi=None)",
          "",
          "[Added Lines]",
          "195:         options=DEFAULT_OPTIONS)",
          "",
          "---------------"
        ],
        "weasyprint/__init__.py||weasyprint/__init__.py": [
          "File: weasyprint/__init__.py -> weasyprint/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: VERSION = __version__ = '58.1'",
          "18: __all__ = [",
          "23: # Import after setting the version, as the version is used in other modules",
          "",
          "[Removed Lines]",
          "19:     'HTML', 'CSS', 'Attachment', 'Document', 'Page', 'default_url_fetcher',",
          "20:     'VERSION', '__version__']",
          "",
          "[Added Lines]",
          "18: #: Default values for command-line and Python API options. See",
          "19: #: :func:`__main__.main` to learn more about specific options for",
          "20: #: command-line.",
          "21: #:",
          "22: #: :param list stylesheets:",
          "23: #:     An optional list of user stylesheets. The list can include",
          "24: #:     are :class:`CSS` objects, filenames, URLs, or file-like",
          "25: #:     objects. (See :ref:`Stylesheet Origins`.)",
          "26: #: :param str media_type:",
          "27: #:     Media type to use for @media.",
          "28: #: :param list attachments:",
          "29: #:     A list of additional file attachments for the generated PDF",
          "30: #:     document or :obj:`None`. The list's elements are",
          "31: #:     :class:`Attachment` objects, filenames, URLs or file-like objects.",
          "32: #: :param bytes pdf_identifier:",
          "33: #:     A bytestring used as PDF file identifier.",
          "34: #: :param str pdf_variant:",
          "35: #:     A PDF variant name.",
          "36: #: :param str pdf_version:",
          "37: #:     A PDF version number.",
          "38: #: :param bool pdf_forms:",
          "39: #:     Whether PDF forms have to be included.",
          "40: #: :param bool uncompressed_pdf:",
          "41: #:     Whether PDF content should be compressed.",
          "42: #: :param bool custom_metadata:",
          "43: #:     Whether custom HTML metadata should be stored in the generated PDF.",
          "44: #: :param bool presentational_hints:",
          "45: #:     Whether HTML presentational hints are followed.",
          "46: #: :param bool optimize_images:",
          "47: #:     Whether size of embedded images should be optimized, with no quality",
          "48: #:     loss.",
          "49: #: :param int jpeg_quality:",
          "50: #:     JPEG quality between 0 (worst) to 95 (best).",
          "51: #: :param int dpi:",
          "52: #:     Maximum resolution of images embedded in the PDF.",
          "53: #: :param bool full_fonts:",
          "54: #:     Whether unmodified font files should be embedded when possible.",
          "55: #: :param bool hinting:",
          "56: #:     Whether hinting information should be kept in embedded fonts.",
          "57: #: :type image_cache: :obj:`dict` or :obj:`str`",
          "58: #: :param cache_folder:",
          "59: #:     A dictionary used to cache images, or a folder path where images",
          "60: #:     are temporarily stored.",
          "61: DEFAULT_OPTIONS = {",
          "62:     'stylesheets': None,",
          "63:     'media_type': 'print',",
          "64:     'attachments': None,",
          "65:     'pdf_identifier': None,",
          "66:     'pdf_variant': None,",
          "67:     'pdf_version': None,",
          "68:     'pdf_forms': None,",
          "69:     'uncompressed_pdf': False,",
          "70:     'custom_metadata': False,",
          "71:     'presentational_hints': False,",
          "72:     'optimize_images': False,",
          "73:     'jpeg_quality': None,",
          "74:     'dpi': None,",
          "75:     'full_fonts': False,",
          "76:     'hinting': False,",
          "77:     'cache_folder': None,",
          "78: }",
          "81:     'HTML', 'CSS', 'DEFAULT_OPTIONS', 'Attachment', 'Document', 'Page',",
          "82:     'default_url_fetcher', 'VERSION', '__version__']",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     Alternatively, use **one** named argument so that no guessing is involved:",
          "55:     :type filename: str or pathlib.Path",
          "59:     :type file_obj: :term:`file object`",
          "63:     Specifying multiple inputs is an error:",
          "64:     ``HTML(filename=\"foo.html\", url=\"localhost://bar.html\")``",
          "",
          "[Removed Lines]",
          "56:     :param filename: A filename, relative to the current directory, or",
          "57:         absolute.",
          "58:     :param str url: An absolute, fully qualified URL.",
          "60:     :param file_obj: Any object with a ``read`` method.",
          "61:     :param str string: A string of HTML source.",
          "",
          "[Added Lines]",
          "118:     :param filename:",
          "119:         A filename, relative to the current directory, or absolute.",
          "120:     :param str url:",
          "121:         An absolute, fully qualified URL.",
          "123:     :param file_obj:",
          "124:         Any object with a ``read`` method.",
          "125:     :param str string:",
          "126:         A string of HTML source.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     You can also pass optional named arguments:",
          "84:     \"\"\"",
          "85:     def __init__(self, guess=None, filename=None, url=None, file_obj=None,",
          "",
          "[Removed Lines]",
          "69:     :param str encoding: Force the source character encoding.",
          "70:     :param str base_url: The base used to resolve relative URLs",
          "71:         (e.g. in ``<img src=\"../foo.png\">``). If not provided, try to use",
          "72:         the input filename, URL, or ``name`` attribute of :term:`file objects",
          "73:         <file object>`.",
          "74:     :type url_fetcher: :term:`function`",
          "75:     :param url_fetcher: A function or other callable",
          "76:         with the same signature as :func:`default_url_fetcher` called to",
          "77:         fetch external resources such as stylesheets and images.",
          "78:         (See :ref:`URL Fetchers`.)",
          "79:     :param str media_type: The media type to use for ``@media``.",
          "80:         Defaults to ``'print'``. **Note:** In some cases like",
          "81:         ``HTML(string=foo)`` relative URLs will be invalid if ``base_url``",
          "82:         is not provided.",
          "",
          "[Added Lines]",
          "134:     :param str encoding:",
          "135:         Force the source character encoding.",
          "136:     :param str base_url:",
          "137:         The base used to resolve relative URLs (e.g. in",
          "138:         ``<img src=\"../foo.png\">``). If not provided, try to use the input",
          "139:         filename, URL, or ``name`` attribute of",
          "140:         :term:`file objects <file object>`.",
          "141:     :type url_fetcher: :term:`callable`",
          "142:     :param url_fetcher:",
          "143:         A function or other callable with the same signature as",
          "144:         :func:`default_url_fetcher` called to fetch external resources such as",
          "145:         stylesheets and images. (See :ref:`URL Fetchers`.)",
          "146:     :param str media_type:",
          "147:         The media type to use for ``@media``. Defaults to ``'print'``.",
          "149:         invalid if ``base_url`` is not provided.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:     def _ph_stylesheets(self):",
          "118:         return [HTML5_PH_STYLESHEET]",
          "124:         \"\"\"Lay out and paginate the document, but do not (yet) export it.",
          "126:         This returns a :class:`document.Document` object which provides",
          "127:         access to individual pages and various meta-data.",
          "128:         See :meth:`write_pdf` to get a PDF directly.",
          "141:         :type font_config: :class:`text.fonts.FontConfiguration`",
          "143:         :type counter_style: :class:`css.counters.CounterStyle`",
          "150:         :returns: A :class:`document.Document` object.",
          "152:         \"\"\"",
          "163:         \"\"\"Render the document to a PDF file.",
          "165:         This is a shortcut for calling :meth:`render`, then",
          "",
          "[Removed Lines]",
          "120:     def render(self, stylesheets=None, presentational_hints=False,",
          "121:                optimize_size=('fonts', 'hinting', 'pdf'), jpeg_quality=None,",
          "122:                dpi=None, font_config=None, counter_style=None,",
          "123:                image_cache=None, forms=False):",
          "130:         :param list stylesheets:",
          "131:             An optional list of user stylesheets. List elements are",
          "132:             :class:`CSS` objects, filenames, URLs, or file",
          "133:             objects. (See :ref:`Stylesheet Origins`.)",
          "134:         :param bool presentational_hints:",
          "135:             Whether HTML presentational hints are followed.",
          "136:         :param tuple optimize_size:",
          "137:             Optimize size of generated PDF. Can contain \"images\", \"fonts\",",
          "138:             \"hinting\" and \"pdf\".",
          "139:         :param int jpeg_quality: JPEG quality between 0 (worst) to 95 (best).",
          "140:         :param int dpi: Maximum resolution of images embedded in the PDF.",
          "142:         :param font_config: A font configuration handling ``@font-face`` rules.",
          "144:         :param counter_style: A dictionary storing ``@counter-style`` rules.",
          "145:         :param image_cache:",
          "146:             A dictionary used to cache images, or a folder path where images",
          "147:             are temporarily stored.",
          "148:         :type image_cache: :obj:`dict` or :obj:`str`",
          "149:         :param bool forms: Whether PDF forms have to be included.",
          "153:         return Document._render(",
          "154:             self, stylesheets, presentational_hints, optimize_size,",
          "155:             jpeg_quality, dpi, font_config, counter_style, image_cache, forms)",
          "157:     def write_pdf(self, target=None, stylesheets=None, zoom=1,",
          "158:                   attachments=None, finisher=None, presentational_hints=False,",
          "159:                   optimize_size=('fonts', 'hinting', 'pdf'), jpeg_quality=None,",
          "160:                   dpi=None, font_config=None, counter_style=None,",
          "161:                   image_cache=None, identifier=None, variant=None,",
          "162:                   version=None, forms=False, custom_metadata=False):",
          "",
          "[Added Lines]",
          "187:     def render(self, font_config=None, counter_style=None, **options):",
          "195:         :param font_config:",
          "196:             A font configuration handling ``@font-face`` rules.",
          "198:         :param counter_style:",
          "199:             A dictionary storing ``@counter-style`` rules.",
          "200:         :param options:",
          "201:             The ``options`` parameter includes by default the",
          "202:             :data:`DEFAULT_OPTIONS` values.",
          "206:         new_options = DEFAULT_OPTIONS.copy()",
          "207:         new_options.update(options)",
          "208:         options = new_options",
          "209:         return Document._render(self, font_config, counter_style, options)",
          "211:     def write_pdf(self, target=None, zoom=1, finisher=None,",
          "212:                   font_config=None, counter_style=None, **options):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170:         :param target:",
          "171:             A filename where the PDF file is generated, a file object, or",
          "172:             :obj:`None`.",
          "177:         :param float zoom:",
          "178:             The zoom factor in PDF units per CSS units.  **Warning**:",
          "179:             All CSS units are affected, including physical units like",
          "180:             ``cm`` and named sizes like ``A4``.  For values other than",
          "181:             1, the physical CSS units will thus be \"wrong\".",
          "187:             post-processing on the PDF right before the trailer is written.",
          "195:         :type font_config: :class:`text.fonts.FontConfiguration`",
          "197:         :type counter_style: :class:`css.counters.CounterStyle`",
          "209:         :returns:",
          "210:             The PDF as :obj:`bytes` if ``target`` is not provided or",
          "211:             :obj:`None`, otherwise :obj:`None` (the PDF is written to",
          "212:             ``target``).",
          "214:         \"\"\"",
          "215:         return (",
          "224: class CSS:",
          "",
          "[Removed Lines]",
          "173:         :param list stylesheets:",
          "174:             An optional list of user stylesheets. The list's elements",
          "175:             are :class:`CSS` objects, filenames, URLs, or file-like",
          "176:             objects. (See :ref:`Stylesheet Origins`.)",
          "182:         :param list attachments: A list of additional file attachments for the",
          "183:             generated PDF document or :obj:`None`. The list's elements are",
          "184:             :class:`Attachment` objects, filenames, URLs or file-like objects.",
          "185:         :param finisher: A finisher function, that accepts the document and a",
          "186:             :class:`pydyf.PDF` object as parameters, can be passed to perform",
          "188:         :param bool presentational_hints: Whether HTML presentational hints are",
          "189:             followed.",
          "190:         :param tuple optimize_size:",
          "191:             Optimize size of generated PDF. Can contain \"images\", \"fonts\",",
          "192:             \"hinting\" and \"pdf\".",
          "193:         :param int jpeg_quality: JPEG quality between 0 (worst) to 95 (best).",
          "194:         :param int dpi: Maximum resolution of images embedded in the PDF.",
          "196:         :param font_config: A font configuration handling ``@font-face`` rules.",
          "198:         :param counter_style: A dictionary storing ``@counter-style`` rules.",
          "199:         :param image_cache:",
          "200:             A dictionary used to cache images, or a folder path where images",
          "201:             are temporarily stored.",
          "202:         :type image_cache: :obj:`dict` or :obj:`str`",
          "203:         :param bytes identifier: A bytestring used as PDF file identifier.",
          "204:         :param str variant: A PDF variant name.",
          "205:         :param str version: A PDF version number.",
          "206:         :param bool forms: Whether PDF forms have to be included.",
          "207:         :param bool custom_metadata: Whether custom HTML metadata should be",
          "208:             stored in the generated PDF.",
          "216:             self.render(",
          "217:                 stylesheets, presentational_hints, optimize_size, jpeg_quality,",
          "218:                 dpi, font_config, counter_style, image_cache, forms)",
          "219:             .write_pdf(",
          "220:                 target, zoom, attachments, finisher, identifier, variant,",
          "221:                 version, custom_metadata))",
          "",
          "[Added Lines]",
          "228:         :type finisher: :term:`callable`",
          "229:         :param finisher:",
          "230:             A finisher function or callable that accepts the document and a",
          "231:             :class:`pydyf.PDF` object as parameters. Can be passed to perform",
          "234:         :param font_config:",
          "235:             A font configuration handling ``@font-face`` rules.",
          "237:         :param counter_style:",
          "238:             A dictionary storing ``@counter-style`` rules.",
          "239:         :param options:",
          "240:             The ``options`` parameter includes by default the",
          "241:             :data:`DEFAULT_OPTIONS` values.",
          "248:         new_options = DEFAULT_OPTIONS.copy()",
          "249:         new_options.update(options)",
          "250:         options = new_options",
          "252:             self.render(font_config, counter_style, **options)",
          "253:             .write_pdf(target, zoom, finisher, **options))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "274:     supported. An optional description can be provided with the ``description``",
          "275:     argument.",
          "280:     \"\"\"",
          "281:     def __init__(self, guess=None, filename=None, url=None, file_obj=None,",
          "",
          "[Removed Lines]",
          "277:     :param description: A description of the attachment to be included in the",
          "278:         PDF document. May be :obj:`None`.",
          "",
          "[Added Lines]",
          "309:     :param description:",
          "310:         A description of the attachment to be included in the PDF document.",
          "311:         May be :obj:`None`.",
          "",
          "---------------"
        ],
        "weasyprint/__main__.py||weasyprint/__main__.py": [
          "File: weasyprint/__main__.py -> weasyprint/__main__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import logging",
          "5: import platform",
          "6: import sys",
          "8: import pydyf",
          "11: from .pdf import VARIANTS",
          "12: from .text.ffi import pango",
          "",
          "[Removed Lines]",
          "10: from . import HTML, LOGGER, __version__",
          "",
          "[Added Lines]",
          "7: from warnings import warn",
          "11: from . import DEFAULT_OPTIONS, HTML, LOGGER, __version__",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:         sys.exit()",
          "31:     \"\"\"The ``weasyprint`` program takes at least two arguments:",
          "33:     .. code-block:: sh",
          "35:         weasyprint [options] <input> <output>",
          "131:     \"\"\"",
          "198:     if args.input == '-':",
          "199:         source = stdin or sys.stdin.buffer",
          "",
          "[Removed Lines]",
          "30: def main(argv=None, stdout=None, stdin=None):",
          "37:     The input is a filename or URL to an HTML document, or ``-`` to read",
          "38:     HTML from stdin. The output is a filename, or ``-`` to write to stdout.",
          "40:     Options can be mixed anywhere before, between, or after the input and",
          "41:     output.",
          "43:     .. option:: -e <input_encoding>, --encoding <input_encoding>",
          "45:         Force the input character encoding (e.g. ``-e utf-8``).",
          "47:     .. option:: -s <filename_or_URL>, --stylesheet <filename_or_URL>",
          "49:         Filename or URL of a user cascading stylesheet (see",
          "50:         :ref:`Stylesheet Origins`) to add to the document",
          "51:         (e.g. ``-s print.css``). Multiple stylesheets are allowed.",
          "53:     .. option:: -m <type>, --media-type <type>",
          "55:         Set the media type to use for ``@media``. Defaults to ``print``.",
          "57:     .. option:: -u <URL>, --base-url <URL>",
          "59:         Set the base for relative URLs in the HTML input.",
          "60:         Defaults to the input\u2019s own URL, or the current directory for stdin.",
          "62:     .. option:: -a <file>, --attachment <file>",
          "64:         Adds an attachment to the document. The attachment is included in the",
          "65:         PDF output. This option can be used multiple times.",
          "67:     .. option:: --pdf-identifier <identifier>",
          "69:         PDF file identifier, used to check whether two different files",
          "70:         are two different versions of the same original document.",
          "72:     .. option:: --pdf-variant <variant-name>",
          "74:         PDF variant to generate (e.g. ``--pdf-variant pdf/a-3b``).",
          "76:     .. option:: --pdf-version <version-number>",
          "78:         PDF version number (default is 1.7).",
          "80:     .. option:: --custom-metadata",
          "82:         Include custom HTML meta tags in PDF metadata.",
          "84:     .. option:: -p, --presentational-hints",
          "86:         Follow `HTML presentational hints",
          "87:         <https://www.w3.org/TR/html/rendering.html\\",
          "88:         #the-css-user-agent-style-sheet-and-presentational-hints>`_.",
          "90:     .. option:: -O <type>, --optimize-size <type>",
          "92:         Optimize the size of generated documents. Supported types are",
          "93:         ``images``, ``fonts``, ``hinting``, ``pdf``, ``all`` and ``none``.",
          "94:         This option can be used multiple times, ``all`` adds all allowed",
          "95:         values, ``none`` removes all previously set values (including the",
          "96:         default ones, ``fonts`` and ``pdf``).",
          "98:     .. option:: -c <folder>, --cache-folder <folder>",
          "100:         Store cache on disk instead of memory. The ``folder`` is created if",
          "101:         needed and cleaned after the PDF is generated.",
          "103:     .. option:: -j <quality>, --jpeg-quality <quality>",
          "105:         JPEG quality between 0 (worst) to 95 (best).",
          "107:     .. option:: -D <dpi>, --dpi <dpi>",
          "109:         Maximum resolution of images embedded in the PDF.",
          "111:     .. option:: -v, --verbose",
          "113:         Show warnings and information messages.",
          "115:     .. option:: -d, --debug",
          "117:         Show debugging messages.",
          "119:     .. option:: -q, --quiet",
          "121:         Hide logging messages.",
          "123:     .. option:: --version",
          "125:         Show the version number. Other options and arguments are ignored.",
          "127:     .. option:: -h, --help",
          "129:         Show the command-line usage. Other options and arguments are ignored.",
          "132:     parser = argparse.ArgumentParser(",
          "133:         prog='weasyprint', description='Render web pages to PDF.')",
          "134:     parser.add_argument(",
          "135:         '--version', action='version',",
          "136:         version=f'WeasyPrint version {__version__}',",
          "137:         help='print WeasyPrint\u2019s version number and exit')",
          "138:     parser.add_argument(",
          "139:         '-i', '--info', action=PrintInfo, nargs=0,",
          "140:         help='print system information and exit')",
          "141:     parser.add_argument(",
          "142:         '-e', '--encoding', help='character encoding of the input')",
          "143:     parser.add_argument(",
          "144:         '-s', '--stylesheet', action='append',",
          "145:         help='URL or filename for a user CSS stylesheet, '",
          "146:         'may be given multiple times')",
          "147:     parser.add_argument(",
          "148:         '-m', '--media-type', default='print',",
          "149:         help='media type to use for @media, defaults to print')",
          "150:     parser.add_argument(",
          "151:         '-u', '--base-url',",
          "152:         help='base for relative URLs in the HTML input, defaults to the '",
          "153:         'input\u2019s own filename or URL or the current directory for stdin')",
          "154:     parser.add_argument(",
          "155:         '-a', '--attachment', action='append',",
          "156:         help='URL or filename of a file to attach to the PDF document')",
          "157:     parser.add_argument('--pdf-identifier', help='PDF file identifier')",
          "158:     parser.add_argument(",
          "159:         '--pdf-variant', choices=VARIANTS, help='PDF variant to generate')",
          "160:     parser.add_argument('--pdf-version', help='PDF version number')",
          "161:     parser.add_argument(",
          "162:         '--pdf-forms', action='store_true', help='Include PDF forms')",
          "163:     parser.add_argument(",
          "164:         '--custom-metadata', action='store_true',",
          "165:         help='include custom HTML meta tags in PDF metadata')",
          "166:     parser.add_argument(",
          "167:         '-p', '--presentational-hints', action='store_true',",
          "168:         help='follow HTML presentational hints')",
          "169:     parser.add_argument(",
          "170:         '-O', '--optimize-size', action='append',",
          "171:         help='optimize output size for specified features',",
          "172:         choices=('images', 'fonts', 'hinting', 'pdf', 'all', 'none'),",
          "173:         default=['fonts', 'hinting', 'pdf'])",
          "174:     parser.add_argument(",
          "175:         '-c', '--cache-folder',",
          "176:         help='Store cache on disk instead of memory. The ``folder`` is '",
          "177:         'created if needed and cleaned after the PDF is generated.')",
          "178:     parser.add_argument(",
          "179:         '-j', '--jpeg-quality', type=int,",
          "180:         help='JPEG quality between 0 (worst) to 95 (best)')",
          "181:     parser.add_argument(",
          "182:         '-D', '--dpi', type=int,",
          "183:         help='Maximum resolution of images embedded in the PDF')",
          "184:     parser.add_argument(",
          "185:         '-v', '--verbose', action='store_true',",
          "186:         help='show warnings and information messages')",
          "187:     parser.add_argument(",
          "188:         '-d', '--debug', action='store_true', help='show debugging messages')",
          "189:     parser.add_argument(",
          "190:         '-q', '--quiet', action='store_true', help='hide logging messages')",
          "191:     parser.add_argument(",
          "192:         'input', help='URL or filename of the HTML input, or - for stdin')",
          "193:     parser.add_argument(",
          "194:         'output', help='filename where output is written, or - for stdout')",
          "196:     args = parser.parse_args(argv)",
          "",
          "[Added Lines]",
          "31: class Parser(argparse.ArgumentParser):",
          "32:     def __init__(self, *args, **kwargs):",
          "33:         self._arguments = {}",
          "34:         super().__init__(*args, **kwargs)",
          "36:     def add_argument(self, *args, **kwargs):",
          "37:         super().add_argument(*args, **kwargs)",
          "38:         key = args[-1].lstrip('-')",
          "39:         kwargs['flags'] = args",
          "40:         kwargs['positional'] = args[-1][0] != '-'",
          "41:         self._arguments[key] = kwargs",
          "43:     @property",
          "44:     def docstring(self):",
          "45:         self._arguments['help'] = self._arguments.pop('help')",
          "46:         data = []",
          "47:         for key, args in self._arguments.items():",
          "48:             data.append('.. option:: ')",
          "49:             action = args.get('action', 'store')",
          "50:             for flag in args['flags']:",
          "51:                 data.append(flag)",
          "52:                 if not args['positional'] and action in ('store', 'append'):",
          "53:                     data.append(f' <{key}>')",
          "54:                 data.append(', ')",
          "55:             data[-1] = '\\n\\n'",
          "56:             data.append(f'  {args[\"help\"][0].upper()}{args[\"help\"][1:]}.\\n\\n')",
          "57:             if 'choices' in args:",
          "58:                 choices = \", \".join(args['choices'])",
          "59:                 data.append(f'  Possible choices: {choices}.\\n\\n')",
          "60:             if action == 'append':",
          "61:                 data.append('  This option can be passed multiple times.\\n\\n')",
          "62:         return ''.join(data)",
          "65: PARSER = Parser(",
          "66:     prog='weasyprint', description='Render web pages to PDF.')",
          "67: PARSER.add_argument(",
          "68:     'input', help='URL or filename of the HTML input, or - for stdin')",
          "69: PARSER.add_argument(",
          "70:     'output', help='filename where output is written, or - for stdout')",
          "71: PARSER.add_argument(",
          "72:     '-e', '--encoding', help='force the input character encoding')",
          "73: PARSER.add_argument(",
          "74:     '-s', '--stylesheet', action='append', dest='stylesheets',",
          "75:     help='URL or filename for a user CSS stylesheet')",
          "76: PARSER.add_argument(",
          "77:     '-m', '--media-type',",
          "78:     help='media type to use for @media, defaults to print')",
          "79: PARSER.add_argument(",
          "80:     '-u', '--base-url',",
          "81:     help='base for relative URLs in the HTML input, defaults to the '",
          "82:     'input\u2019s own filename or URL or the current directory for stdin')",
          "83: PARSER.add_argument(",
          "84:     '-a', '--attachment', action='append', dest='attachments',",
          "85:     help='URL or filename of a file to attach to the PDF document')",
          "86: PARSER.add_argument('--pdf-identifier', help='PDF file identifier')",
          "87: PARSER.add_argument(",
          "88:     '--pdf-variant', choices=VARIANTS, help='PDF variant to generate')",
          "89: PARSER.add_argument('--pdf-version', help='PDF version number')",
          "90: PARSER.add_argument(",
          "91:     '--pdf-forms', action='store_true', help='include PDF forms')",
          "92: PARSER.add_argument(",
          "93:     '--uncompressed-pdf', action='store_true',",
          "94:     help='do not compress PDF content, mainly for debugging purpose')",
          "95: PARSER.add_argument(",
          "96:     '--custom-metadata', action='store_true',",
          "97:     help='include custom HTML meta tags in PDF metadata')",
          "98: PARSER.add_argument(",
          "99:     '-p', '--presentational-hints', action='store_true',",
          "100:     help='follow HTML presentational hints')",
          "101: PARSER.add_argument(",
          "102:     '--optimize-images', action='store_true',",
          "103:     help='optimize size of embedded images with no quality loss')",
          "104: PARSER.add_argument(",
          "105:     '-j', '--jpeg-quality', type=int,",
          "106:     help='JPEG quality between 0 (worst) to 95 (best)')",
          "107: PARSER.add_argument(",
          "108:     '--full-fonts', action='store_true',",
          "109:     help='embed unmodified font files when possible')",
          "110: PARSER.add_argument(",
          "111:     '--hinting', action='store_true',",
          "112:     help='keep hinting information in embedded fonts')",
          "113: PARSER.add_argument(",
          "114:     '-c', '--cache-folder',",
          "115:     help='store cache on disk instead of memory, folder is '",
          "116:     'created if needed and cleaned after the PDF is generated')",
          "117: PARSER.add_argument(",
          "118:     '-D', '--dpi', type=int,",
          "119:     help='set maximum resolution of images embedded in the PDF')",
          "120: PARSER.add_argument(",
          "121:     '-v', '--verbose', action='store_true',",
          "122:     help='show warnings and information messages')",
          "123: PARSER.add_argument(",
          "124:     '-d', '--debug', action='store_true', help='show debugging messages')",
          "125: PARSER.add_argument(",
          "126:     '-q', '--quiet', action='store_true', help='hide logging messages')",
          "127: PARSER.add_argument(",
          "128:     '--version', action='version',",
          "129:     version=f'WeasyPrint version {__version__}',",
          "130:     help='print WeasyPrint\u2019s version number and exit')",
          "131: PARSER.add_argument(",
          "132:     '-i', '--info', action=PrintInfo, nargs=0,",
          "133:     help='print system information and exit')",
          "134: PARSER.add_argument(",
          "135:     '-O', '--optimize-size', action='append',",
          "136:     help='deprecated, use other options instead',",
          "137:     choices=('images', 'fonts', 'hinting', 'pdf', 'all', 'none'))",
          "138: PARSER.set_defaults(**DEFAULT_OPTIONS)",
          "141: def main(argv=None, stdout=None, stdin=None, HTML=HTML):",
          "149:     args = PARSER.parse_args(argv)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "209:     else:",
          "210:         output = args.output",
          "236:     # Default to logging to stderr.",
          "237:     if args.debug:",
          "",
          "[Removed Lines]",
          "212:     optimize_size = set()",
          "213:     for arg in args.optimize_size:",
          "214:         if arg == 'none':",
          "215:             optimize_size.clear()",
          "216:         elif arg == 'all':",
          "217:             optimize_size |= {'images', 'fonts', 'hinting', 'pdf'}",
          "218:         else:",
          "219:             optimize_size.add(arg)",
          "221:     kwargs = {",
          "222:         'stylesheets': args.stylesheet,",
          "223:         'presentational_hints': args.presentational_hints,",
          "224:         'optimize_size': tuple(optimize_size),",
          "225:         'jpeg_quality': args.jpeg_quality,",
          "226:         'dpi': args.dpi,",
          "227:         'attachments': args.attachment,",
          "228:         'identifier': args.pdf_identifier,",
          "229:         'variant': args.pdf_variant,",
          "230:         'version': args.pdf_version,",
          "231:         'forms': args.pdf_forms,",
          "232:         'custom_metadata': args.custom_metadata,",
          "233:         'image_cache': args.cache_folder,",
          "234:     }",
          "",
          "[Added Lines]",
          "165:     # TODO: to be removed when --optimize-size is removed",
          "166:     optimize_size = {'fonts', 'hinting', 'pdf'}",
          "167:     if args.optimize_size is not None:",
          "168:         warn(",
          "169:             'The --optimize-size option is now deprecated '",
          "170:             'and will be removed in next version. '",
          "171:             'Please use the other options available in --help instead.',",
          "172:             category=FutureWarning)",
          "173:         for arg in args.optimize_size:",
          "174:             if arg == 'none':",
          "175:                 optimize_size.clear()",
          "176:             elif arg == 'all':",
          "177:                 optimize_size |= {'images', 'fonts', 'hinting', 'pdf'}",
          "178:             else:",
          "179:                 optimize_size.add(arg)",
          "180:     del args.optimize_size",
          "182:     options = vars(args)",
          "184:     # TODO: to be removed when --optimize-size is removed",
          "185:     if 'images' in optimize_size:",
          "186:         options['optimize_images'] = True",
          "187:     if 'fonts' not in optimize_size:",
          "188:         options['full_fonts'] = True",
          "189:     if 'hinting' not in optimize_size:",
          "190:         options['hinting'] = True",
          "191:     if 'pdf' not in optimize_size:",
          "192:         options['uncompressed_pdf'] = True",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:     html = HTML(",
          "247:         source, base_url=args.base_url, encoding=args.encoding,",
          "248:         media_type=args.media_type)",
          "252: if __name__ == '__main__':  # pragma: no cover",
          "",
          "[Removed Lines]",
          "249:     html.write_pdf(output, **kwargs)",
          "",
          "[Added Lines]",
          "207:     html.write_pdf(output, **options)",
          "210: main.__doc__ += '\\n\\n' + PARSER.docstring",
          "",
          "---------------"
        ],
        "weasyprint/document.py||weasyprint/document.py": [
          "File: weasyprint/document.py -> weasyprint/document.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from hashlib import md5",
          "6: from pathlib import Path",
          "9: from .anchors import gather_anchors, make_page_bookmark_tree",
          "10: from .css import get_all_computed_styles",
          "11: from .css.counters import CounterStyle",
          "",
          "[Removed Lines]",
          "8: from . import CSS",
          "",
          "[Added Lines]",
          "8: from . import CSS, DEFAULT_OPTIONS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:     \"\"\"",
          "220:     @classmethod",
          "224:         if font_config is None:",
          "225:             font_config = FontConfiguration()",
          "226:         if counter_style is None:",
          "",
          "[Removed Lines]",
          "221:     def _build_layout_context(cls, html, stylesheets, presentational_hints,",
          "222:                               optimize_size, jpeg_quality, dpi, font_config,",
          "223:                               counter_style, image_cache, forms):",
          "",
          "[Added Lines]",
          "221:     def _build_layout_context(cls, html, font_config, counter_style, options):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:         target_collector = TargetCollector()",
          "229:         page_rules = []",
          "230:         user_stylesheets = []",
          "236:             if not hasattr(css, 'matcher'):",
          "237:                 css = CSS(",
          "238:                     guess=css, media_type=html.media_type,",
          "239:                     font_config=font_config, counter_style=counter_style)",
          "240:             user_stylesheets.append(css)",
          "241:         style_for = get_all_computed_styles(",
          "244:         get_image_from_uri = functools.partial(",
          "248:         PROGRESS_LOGGER.info('Step 4 - Creating formatting structure')",
          "249:         context = LayoutContext(",
          "250:             style_for, get_image_from_uri, font_config, counter_style,",
          "",
          "[Removed Lines]",
          "231:         if image_cache is None:",
          "232:             image_cache = {}",
          "233:         elif not isinstance(image_cache, (dict, DiskCache)):",
          "234:             image_cache = DiskCache(image_cache)",
          "235:         for css in stylesheets or []:",
          "242:             html, user_stylesheets, presentational_hints, font_config,",
          "243:             counter_style, page_rules, target_collector, forms)",
          "245:             original_get_image_from_uri, cache=image_cache,",
          "246:             url_fetcher=html.url_fetcher, optimize_size=optimize_size,",
          "247:             jpeg_quality=jpeg_quality, dpi=dpi)",
          "",
          "[Added Lines]",
          "229:         cache_folder = options['cache_folder']",
          "230:         if cache_folder is None:",
          "231:             cache_folder = {}",
          "232:         elif not isinstance(cache_folder, (dict, DiskCache)):",
          "233:             cache_folder = DiskCache(cache_folder)",
          "234:         for css in options['stylesheets'] or []:",
          "241:             html, user_stylesheets, options['presentational_hints'],",
          "242:             font_config, counter_style, page_rules, target_collector,",
          "243:             options['pdf_forms'])",
          "245:             original_get_image_from_uri, cache=cache_folder,",
          "246:             url_fetcher=html.url_fetcher, options=options)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "252:         return context",
          "254:     @classmethod",
          "258:         if font_config is None:",
          "259:             font_config = FontConfiguration()",
          "",
          "[Removed Lines]",
          "255:     def _render(cls, html, stylesheets, presentational_hints, optimize_size,",
          "256:                 jpeg_quality, dpi, font_config, counter_style, image_cache,",
          "257:                 forms):",
          "",
          "[Added Lines]",
          "254:     def _render(cls, html, font_config, counter_style, options):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "262:             counter_style = CounterStyle()",
          "264:         context = cls._build_layout_context(",
          "268:         root_box = build_formatting_structure(",
          "269:             html.etree_element, context.style_for, context.get_image_from_uri,",
          "",
          "[Removed Lines]",
          "265:             html, stylesheets, presentational_hints, optimize_size,",
          "266:             jpeg_quality, dpi, font_config, counter_style, image_cache, forms)",
          "",
          "[Added Lines]",
          "262:             html, font_config, counter_style, options)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "274:         rendering = cls(",
          "275:             [Page(page_box) for page_box in page_boxes],",
          "276:             DocumentMetadata(**get_html_metadata(html)),",
          "278:         rendering._html = html",
          "279:         return rendering",
          "283:         #: A list of :class:`Page` objects.",
          "284:         self.pages = pages",
          "285:         #: A :class:`DocumentMetadata` object.",
          "",
          "[Removed Lines]",
          "277:             html.url_fetcher, font_config, optimize_size)",
          "281:     def __init__(self, pages, metadata, url_fetcher, font_config,",
          "282:                  optimize_size):",
          "",
          "[Added Lines]",
          "273:             html.url_fetcher, font_config)",
          "277:     def __init__(self, pages, metadata, url_fetcher, font_config):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "298:         # rendering is destroyed. This is needed as font_config.__del__ removes",
          "299:         # fonts that may be used when rendering",
          "300:         self.font_config = font_config",
          "305:     def build_element_structure(self, structure, etree_element=None):",
          "306:         if etree_element is None:",
          "",
          "[Removed Lines]",
          "301:         # Set of flags for PDF size optimization. Can contain \"images\", \"fonts\"",
          "302:         # and \"pdf\".",
          "303:         self._optimize_size = optimize_size",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "340:         elif not isinstance(pages, list):",
          "341:             pages = list(pages)",
          "342:         return type(self)(",
          "346:     def make_bookmark_tree(self, scale=1, transform_pages=False):",
          "347:         \"\"\"Make a tree of all bookmarks in the document.",
          "",
          "[Removed Lines]",
          "343:             pages, self.metadata, self.url_fetcher, self.font_config,",
          "344:             self._optimize_size)",
          "",
          "[Added Lines]",
          "335:             pages, self.metadata, self.url_fetcher, self.font_config)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "376:                 page_number, matrix)",
          "377:         return root",
          "382:         \"\"\"Paint the pages in a PDF file, with metadata.",
          "384:         :type target:",
          "",
          "[Removed Lines]",
          "379:     def write_pdf(self, target=None, zoom=1, attachments=None, finisher=None,",
          "380:                   identifier=None, variant=None, version=None,",
          "381:                   custom_metadata=False):",
          "",
          "[Added Lines]",
          "370:     def write_pdf(self, target=None, zoom=1, finisher=None, **options):",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "391:             All CSS units are affected, including physical units like",
          "392:             ``cm`` and named sizes like ``A4``.  For values other than",
          "393:             1, the physical CSS units will thus be \"wrong\".",
          "400:             post-processing on the PDF right before the trailer is written.",
          "406:         :returns:",
          "407:             The PDF as :obj:`bytes` if ``target`` is not provided or",
          "408:             :obj:`None`, otherwise :obj:`None` (the PDF is written to",
          "409:             ``target``).",
          "411:         \"\"\"",
          "416:         if finisher:",
          "417:             finisher(self, pdf)",
          "421:         if target is None:",
          "422:             output = io.BytesIO()",
          "423:             pdf.write(output, pdf.version, identifier, compress)",
          "",
          "[Removed Lines]",
          "394:         :param list attachments: A list of additional file attachments for the",
          "395:             generated PDF document or :obj:`None`. The list's elements are",
          "396:             :class:`weasyprint.Attachment` objects, filenames, URLs or",
          "397:             file-like objects.",
          "398:         :param finisher: A finisher function, that accepts the document and a",
          "399:             :class:`pydyf.PDF` object as parameters, can be passed to perform",
          "401:         :param bytes identifier: A bytestring used as PDF file identifier.",
          "402:         :param str variant: A PDF variant name.",
          "403:         :param str version: A PDF version number.",
          "404:         :param bool custom_metadata: A boolean defining whether custom HTML",
          "405:             metadata should be stored in the generated PDF.",
          "412:         pdf = generate_pdf(",
          "413:             self, target, zoom, attachments, self._optimize_size, identifier,",
          "414:             variant, version, custom_metadata)",
          "419:         compress = 'pdf' in self._optimize_size",
          "",
          "[Added Lines]",
          "383:         :type finisher: :term:`callable`",
          "384:         :param finisher:",
          "385:             A finisher function or callable that accepts the document and a",
          "386:             :class:`pydyf.PDF` object as parameters. Can be passed to perform",
          "388:         :param options:",
          "389:             The ``options`` parameter includes by default the",
          "390:             :data:`weasyprint.DEFAULT_OPTIONS` values.",
          "397:         new_options = DEFAULT_OPTIONS.copy()",
          "398:         new_options.update(options)",
          "399:         options = new_options",
          "400:         pdf = generate_pdf(self, target, zoom, **options)",
          "402:         identifier = options['pdf_identifier']",
          "403:         compress = not options['uncompressed_pdf']",
          "",
          "---------------"
        ],
        "weasyprint/html.py||weasyprint/html.py": [
          "File: weasyprint/html.py -> weasyprint/html.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: def ascii_lower(string):",
          "46:     r\"\"\"Transform (only) ASCII letters to lower case: A-Z is mapped to a-z.",
          "51:     This is used for `ASCII case-insensitive",
          "52:     <https://whatwg.org/C#ascii-case-insensitive>`_ matching.",
          "",
          "[Removed Lines]",
          "48:     :param string: An Unicode string.",
          "49:     :returns: A new Unicode string.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: def element_has_link_type(element, link_type):",
          "80: # Maps HTML tag names to function taking an HTML element and returning a Box.",
          "",
          "[Removed Lines]",
          "69:     \"\"\"",
          "70:     Return whether the given element has a ``rel`` attribute with the",
          "71:     given link type.",
          "73:     :param link_type: Must be a lower-case string.",
          "75:     \"\"\"",
          "76:     return any(ascii_lower(token) == link_type for token in",
          "77:                HTML_SPACE_SEPARATED_TOKENS_RE.findall(element.get('rel', '')))",
          "",
          "[Added Lines]",
          "66:     \"\"\"Return whether element has a ``rel`` attribute with given link type.\"\"\"",
          "67:     tokens = HTML_SPACE_SEPARATED_TOKENS_RE.findall(element.get('rel', ''))",
          "68:     return any(ascii_lower(token) == link_type for token in tokens)",
          "",
          "---------------"
        ],
        "weasyprint/images.py||weasyprint/images.py": [
          "File: weasyprint/images.py -> weasyprint/images.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import pydyf",
          "16: from PIL import Image, ImageFile, ImageOps",
          "18: from .layout.percent import percentage",
          "19: from .logger import LOGGER",
          "20: from .svg import SVG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: from . import DEFAULT_OPTIONS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: class RasterImage:",
          "42:     def __init__(self, pillow_image, image_id, image_data, filename=None,",
          "45:         # Transpose image",
          "46:         original_pillow_image = pillow_image",
          "47:         pillow_image = rotate_pillow_image(pillow_image, orientation)",
          "",
          "[Removed Lines]",
          "43:                  cache=None, optimize_size=(), jpeg_quality=None, dpi=None,",
          "44:                  orientation='none'):",
          "",
          "[Added Lines]",
          "44:                  cache=None, orientation='none', options=DEFAULT_OPTIONS):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:         self.id = image_id",
          "55:         self._cache = {} if cache is None else cache",
          "59:         if 'transparency' in pillow_image.info:",
          "60:             pillow_image = pillow_image.convert('RGBA')",
          "",
          "[Removed Lines]",
          "56:         self._jpeg_quality = jpeg_quality",
          "57:         self._dpi = dpi",
          "",
          "[Added Lines]",
          "56:         self._jpeg_quality = jpeg_quality = options['jpeg_quality']",
          "57:         self._dpi = options['dpi']",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:         self.width = pillow_image.width",
          "66:         self.height = pillow_image.height",
          "67:         self.ratio = (self.width / self.height) if self.height != 0 else inf",
          "70:         if pillow_image.format in ('JPEG', 'MPO'):",
          "71:             self.format = 'JPEG'",
          "72:             if image_data is None or optimize or jpeg_quality is not None:",
          "73:                 image_file = io.BytesIO()",
          "74:                 options = {'format': 'JPEG', 'optimize': optimize}",
          "77:                 pillow_image.save(image_file, **options)",
          "78:                 image_data = image_file.getvalue()",
          "79:                 filename = None",
          "",
          "[Removed Lines]",
          "68:         self.optimize = optimize = 'images' in optimize_size",
          "75:                 if jpeg_quality is not None:",
          "76:                     options['quality'] = jpeg_quality",
          "",
          "[Added Lines]",
          "68:         self.optimize = optimize = options['optimize_images']",
          "75:                 if self._jpeg_quality is not None:",
          "76:                     options['quality'] = self._jpeg_quality",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "277:             self._url_fetcher, self._context)",
          "283:     \"\"\"Get an Image instance from an image URI.\"\"\"",
          "284:     if url in cache:",
          "285:         return cache[url]",
          "",
          "[Removed Lines]",
          "280: def get_image_from_uri(cache, url_fetcher, optimize_size, jpeg_quality, dpi,",
          "281:                        url, forced_mime_type=None, context=None,",
          "282:                        orientation='from-image'):",
          "",
          "[Added Lines]",
          "280: def get_image_from_uri(cache, url_fetcher, options, url, forced_mime_type=None,",
          "281:                        context=None, orientation='from-image'):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "326:                 image_id = md5(url.encode()).hexdigest()",
          "327:                 image = RasterImage(",
          "328:                     pillow_image, image_id, string, filename, cache,",
          "331:     except (URLFetchingError, ImageLoadingError) as exception:",
          "332:         LOGGER.error('Failed to load image at %r: %s', url, exception)",
          "",
          "[Removed Lines]",
          "329:                     optimize_size, jpeg_quality, dpi, orientation)",
          "",
          "[Added Lines]",
          "328:                     orientation, options)",
          "",
          "---------------"
        ],
        "weasyprint/layout/__init__.py||weasyprint/layout/__init__.py": [
          "File: weasyprint/layout/__init__.py -> weasyprint/layout/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     This includes line breaks, page breaks, absolute size and position for all",
          "106:     boxes. Page based counters might require multiple passes.",
          "113:     \"\"\"",
          "114:     initialize_page_maker(context, root_box)",
          "",
          "[Removed Lines]",
          "108:     :param root_box: root of the box tree (formatting structure of the html)",
          "109:                      the pages' boxes are created from that tree, i.e. this",
          "110:                      structure is not lost during pagination",
          "111:     :returns: a list of laid out Page objects.",
          "",
          "[Added Lines]",
          "108:     :param root_box:",
          "109:         Root of the box tree (formatting structure of the HTML). The page boxes",
          "110:         are created from that tree, this structure is not lost during",
          "111:         pagination.",
          "112:     :returns:",
          "113:         A list of laid out Page objects.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:         Value depends on current page.",
          "288:         https://drafts.csswg.org/css-gcpm/#funcdef-string",
          "298:         \"\"\"",
          "299:         if self.current_page in store[name]:",
          "",
          "[Removed Lines]",
          "290:         :param store: dictionary where the resolved value is stored.",
          "291:         :param page: current page.",
          "292:         :param name: name of the named string or running element.",
          "293:         :param keyword: indicates which value of the named string or running",
          "294:                         element to use. Default is the first assignment on the",
          "295:                         current page else the most recent assignment.",
          "296:         :returns: text for string set, box for running element",
          "",
          "[Added Lines]",
          "292:         :param dict store:",
          "293:             Dictionary where the resolved value is stored.",
          "294:         :param page:",
          "295:             Current page.",
          "296:         :param str name:",
          "297:             Name of the named string or running element.",
          "298:         :param str keyword:",
          "299:             Indicates which value of the named string or running element to",
          "300:             use. Default is the first assignment on the current page else the",
          "301:             most recent assignment.",
          "302:         :returns:",
          "303:             Text for string set, box for running element.",
          "",
          "---------------"
        ],
        "weasyprint/layout/page.py||weasyprint/layout/page.py": [
          "File: weasyprint/layout/page.py -> weasyprint/layout/page.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: def compute_variable_dimension(context, side_boxes, vertical, outer_sum):",
          "182:         A list of:",
          "183:         - A @*-left or @*-top margin box",
          "184:         - A @*-center or @*-middle margin box",
          "185:         - A @*-right or @*-bottom margin box",
          "186:     :param vertical:",
          "189:     :param outer_sum:",
          "192:     \"\"\"",
          "193:     box_class = VerticalBox if vertical else HorizontalBox",
          "",
          "[Removed Lines]",
          "177:     \"\"\"",
          "178:     Compute and set a margin box fixed dimension on ``box``, as described in:",
          "179:     https://drafts.csswg.org/css-page-3/#margin-dimension",
          "181:     :param side_boxes: Three boxes on a same side (as opposed to a corner.)",
          "187:         True to set height, margin-top and margin-bottom; False for width,",
          "188:         margin-left and margin-right",
          "190:         The target total outer dimension (max box width or height)",
          "",
          "[Added Lines]",
          "177:     \"\"\"Compute and set a margin box fixed dimension on ``box``",
          "179:     Described in: https://drafts.csswg.org/css-page-3/#margin-dimension",
          "181:     :param side_boxes:",
          "182:         Three boxes on a same side (as opposed to a corner).",
          "188:         ``True`` to set height, margin-top and margin-bottom;",
          "189:         ``False`` for width, margin-left and margin-right.",
          "191:         The target total outer dimension (max box width or height).",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "311:         Return ``None`` if this margin box should not be generated.",
          "316:         \"\"\"",
          "317:         style = context.style_for(page.page_type, at_keyword)",
          "",
          "[Removed Lines]",
          "313:         :param at_keyword: which margin box to return, eg. '@top-left'",
          "314:         :param containing_block: as expected by :func:`resolve_percentages`.",
          "",
          "[Added Lines]",
          "314:         :param at_keyword:",
          "315:             Which margin box to return, e.g. '@top-left'",
          "316:         :param containing_block:",
          "317:             As expected by :func:`resolve_percentages`.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "507:     and ``resume_at`` indicates where in the document to start the next page,",
          "508:     or is ``None`` if this was the last page.",
          "514:     \"\"\"",
          "515:     style = context.style_for(page_type)",
          "",
          "[Removed Lines]",
          "510:     :param page_number: integer, start at 1 for the first page",
          "511:     :param resume_at: as returned by ``make_page()`` for the previous page,",
          "512:                       or ``None`` for the first page.",
          "",
          "[Added Lines]",
          "513:     :param int page_number:",
          "514:         Page number, starts at 1 for the first page.",
          "515:     :param resume_at:",
          "516:         As returned by ``make_page()`` for the previous page, or ``None`` for",
          "517:         the first page.",
          "",
          "---------------"
        ],
        "weasyprint/pdf/__init__.py||weasyprint/pdf/__init__.py": [
          "File: weasyprint/pdf/__init__.py -> weasyprint/pdf/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:             alpha['SMask']['G'] = alpha['SMask']['G'].reference",
          "105:     # 0.75 = 72 PDF point per inch / 96 CSS pixel per inch",
          "106:     scale = zoom * 0.75",
          "",
          "[Removed Lines]",
          "103: def generate_pdf(document, target, zoom, attachments, optimize_size,",
          "104:                  identifier, variant, version, custom_metadata):",
          "",
          "[Added Lines]",
          "103: def generate_pdf(document, target, zoom, **options):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     # Set properties according to PDF variants",
          "111:     mark = False",
          "112:     if variant:",
          "113:         variant_function, properties = VARIANTS[variant]",
          "114:         if 'version' in properties:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     variant, version = options['pdf_variant'], options['pdf_version']",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:         if 'mark' in properties:",
          "117:             mark = properties['mark']",
          "119:     pdf = pydyf.PDF((version or '1.7'), identifier)",
          "120:     states = pydyf.Dictionary()",
          "121:     x_objects = pydyf.Dictionary()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:     identifier = options['pdf_identifier']",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137:     annot_files = {}",
          "138:     pdf_pages, page_streams = [], []",
          "139:     for page_number, (page, links_and_anchors) in enumerate(",
          "140:             zip(document.pages, page_links_and_anchors)):",
          "141:         # Draw from the top-left corner",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     compress = not options['uncompressed_pdf']",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:         page_rectangle = (",
          "154:             left / scale, top / scale,",
          "155:             (right - left) / scale, (bottom - top) / scale)",
          "157:         stream = Stream(",
          "158:             document.fonts, page_rectangle, states, x_objects, patterns,",
          "159:             shadings, images, mark, compress=compress)",
          "",
          "[Removed Lines]",
          "156:         compress = 'pdf' in optimize_size",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "229:             _w3c_date_to_pdf(metadata.modified, 'modified'))",
          "230:     if metadata.lang:",
          "231:         pdf.catalog['Lang'] = pydyf.String(metadata.lang)",
          "233:         for key, value in metadata.custom.items():",
          "234:             key = ''.join(char for char in key if char.isalnum())",
          "235:             key = key.encode('ascii', errors='ignore').decode()",
          "",
          "[Removed Lines]",
          "232:     if custom_metadata:",
          "",
          "[Added Lines]",
          "233:     if options['custom_metadata']:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "237:                 pdf.info[key] = pydyf.String(value)",
          "239:     # Embedded files",
          "241:     pdf_attachments = []",
          "242:     for attachment in attachments:",
          "243:         pdf_attachment = write_pdf_attachment(",
          "",
          "[Removed Lines]",
          "240:     attachments = metadata.attachments + (attachments or [])",
          "",
          "[Added Lines]",
          "241:     attachments = metadata.attachments + (options['attachments'] or [])",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "255:         pdf.catalog['Names']['EmbeddedFiles'] = content.reference",
          "257:     # Embedded fonts",
          "259:     pdf.add_object(pdf_fonts)",
          "260:     if 'AcroForm' in pdf.catalog:",
          "261:         # Include Dingbats for forms",
          "",
          "[Removed Lines]",
          "258:     pdf_fonts = build_fonts_dictionary(pdf, document.fonts, optimize_size)",
          "",
          "[Added Lines]",
          "259:     subset = not options['full_fonts']",
          "260:     hinting = options['hinting']",
          "261:     pdf_fonts = build_fonts_dictionary(",
          "262:         pdf, document.fonts, compress, subset, hinting)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "284:     # Apply PDF variants functions",
          "285:     if variant:",
          "287:         variant_function(pdf, metadata, document, page_streams, compress)",
          "289:     return pdf",
          "",
          "[Removed Lines]",
          "286:         compress = 'pdf' in optimize_size",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "weasyprint/pdf/fonts.py||weasyprint/pdf/fonts.py": [
          "File: weasyprint/pdf/fonts.py -> weasyprint/pdf/fonts.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from ..logger import LOGGER",
          "12:     pdf_fonts = pydyf.Dictionary()",
          "13:     fonts_by_file_hash = {}",
          "14:     for font in fonts.values():",
          "",
          "[Removed Lines]",
          "10: def build_fonts_dictionary(pdf, fonts, optimize_size):",
          "11:     compress = 'pdf' in optimize_size",
          "",
          "[Added Lines]",
          "10: def build_fonts_dictionary(pdf, fonts, compress_pdf, subset, hinting):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:         # Clean font, optimize and handle emojis",
          "24:         cmap = {}",
          "26:             for file_font in file_fonts:",
          "27:                 cmap = {**cmap, **file_font.cmap}",
          "29:         font.clean(cmap, hinting)",
          "31:         # Include font",
          "",
          "[Removed Lines]",
          "25:         if 'fonts' in optimize_size and not font.used_in_forms:",
          "28:         hinting = 'hinting' not in optimize_size",
          "",
          "[Added Lines]",
          "24:         if subset and not font.used_in_forms:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:         else:",
          "35:             font_extra = pydyf.Dictionary({'Length1': len(font.file_content)})",
          "36:         font_stream = pydyf.Stream(",
          "38:         pdf.add_object(font_stream)",
          "39:         font_references_by_file_hash[file_hash] = font_stream.reference",
          "41:     for font in fonts.values():",
          "46:             # Only store widths and map for used glyphs",
          "47:             font_widths = font.widths",
          "48:             cmap = font.cmap",
          "",
          "[Removed Lines]",
          "37:             [font.file_content], font_extra, compress=compress)",
          "42:         optimize = (",
          "43:             'fonts' in optimize_size and",
          "44:             font.ttfont and not font.used_in_forms)",
          "45:         if optimize:",
          "",
          "[Added Lines]",
          "35:             [font.file_content], font_extra, compress=compress_pdf)",
          "40:         if subset and font.ttfont and not font.used_in_forms:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:             b'1 begincodespacerange',",
          "83:             b'<0000> <ffff>',",
          "84:             b'endcodespacerange',",
          "86:         for glyph, text in cmap.items():",
          "87:             unicode_codepoints = ''.join(",
          "88:                 f'{letter.encode(\"utf-16-be\").hex()}' for letter in text)",
          "",
          "[Removed Lines]",
          "85:             f'{len(cmap)} beginbfchar'.encode()], compress=compress)",
          "",
          "[Added Lines]",
          "80:             f'{len(cmap)} beginbfchar'.encode()], compress=compress_pdf)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "105:         if font.bitmap:",
          "106:             _build_bitmap_font_dictionary(",
          "108:         else:",
          "109:             font_descriptor = pydyf.Dictionary({",
          "110:                 'Type': '/FontDescriptor',",
          "",
          "[Removed Lines]",
          "107:                 font_dictionary, pdf, font, widths, optimize_size)",
          "",
          "[Added Lines]",
          "102:                 font_dictionary, pdf, font, widths, compress_pdf, subset)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "128:                     bits[cid] = '1'",
          "129:                 stream = pydyf.Stream(",
          "130:                     (int(''.join(bits), 2).to_bytes(padded_width, 'big'),),",
          "132:                 pdf.add_object(stream)",
          "133:                 font_descriptor['CIDSet'] = stream.reference",
          "134:             if font.type == 'otf':",
          "",
          "[Removed Lines]",
          "131:                     compress=compress)",
          "",
          "[Added Lines]",
          "126:                     compress=compress_pdf)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "160: def _build_bitmap_font_dictionary(font_dictionary, pdf, font, widths,",
          "163:     # https://docs.microsoft.com/typography/opentype/spec/ebdt",
          "164:     font_dictionary['FontBBox'] = pydyf.Array([0, 0, 1, 1])",
          "165:     font_dictionary['FontMatrix'] = pydyf.Array([1, 0, 0, 1, 0, 0])",
          "167:         chars = tuple(sorted(font.cmap))",
          "168:     else:",
          "169:         chars = tuple(range(256))",
          "",
          "[Removed Lines]",
          "161:                                   optimize_size):",
          "162:     compress = 'pdf' in optimize_size",
          "166:     if 'fonts' in optimize_size:",
          "",
          "[Added Lines]",
          "156:                                   compress_pdf, subset):",
          "160:     if subset:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "312:             b'/BPC 1',",
          "313:             b'/D [1 0]',",
          "314:             b'ID', bitmap, b'EI'",
          "316:         pdf.add_object(bitmap_stream)",
          "317:         char_procs[glyph_id] = bitmap_stream.reference",
          "",
          "[Removed Lines]",
          "315:         ], compress=compress)",
          "",
          "[Added Lines]",
          "309:         ], compress=compress_pdf)",
          "",
          "---------------"
        ],
        "weasyprint/text/line_break.py||weasyprint/text/line_break.py": [
          "File: weasyprint/text/line_break.py -> weasyprint/text/line_break.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "237: def create_layout(text, style, context, max_width, justification_spacing):",
          "247:     layout = Layout(context, style, justification_spacing, max_width)",
          "249:     # Make sure that max_width * Pango.SCALE == max_width * 1024 fits in a",
          "",
          "[Removed Lines]",
          "238:     \"\"\"Return an opaque Pango layout with default Pango line-breaks.",
          "240:     :param text: Unicode",
          "241:     :param style: a style dict of computed values",
          "242:     :param max_width:",
          "243:         The maximum available width in the same unit as ``style['font_size']``,",
          "244:         or ``None`` for unlimited width.",
          "246:     \"\"\"",
          "",
          "[Added Lines]",
          "238:     \"\"\"Return an opaque Pango layout with default Pango line-breaks.\"\"\"",
          "",
          "---------------"
        ],
        "weasyprint/urls.py||weasyprint/urls.py": [
          "File: weasyprint/urls.py -> weasyprint/urls.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:     ``url_fetcher`` argument to :class:`HTML` or :class:`CSS`.",
          "176:     (See :ref:`URL Fetchers`.)",
          "181:     :raises: An exception indicating failure, e.g. :obj:`ValueError` on",
          "182:         syntactically invalid URL.",
          "183:     :returns: A :obj:`dict` with the following keys:",
          "",
          "[Removed Lines]",
          "178:     :param str url: The URL of the resource to fetch.",
          "179:     :param int timeout: The number of seconds before HTTP requests are dropped.",
          "180:     :param ssl.SSLContext ssl_context: An SSL context used for HTTP requests.",
          "",
          "[Added Lines]",
          "178:     :param str url:",
          "179:         The URL of the resource to fetch.",
          "180:     :param int timeout:",
          "181:         The number of seconds before HTTP requests are dropped.",
          "182:     :param ssl.SSLContext ssl_context:",
          "183:         An SSL context used for HTTP requests.",
          "",
          "---------------"
        ]
      }
    }
  ]
}