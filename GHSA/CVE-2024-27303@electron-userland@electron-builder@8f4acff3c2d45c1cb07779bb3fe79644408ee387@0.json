{
  "cve_id": "CVE-2024-27303",
  "cve_desc": "electron-builder is a solution to package and build a ready for distribution Electron, Proton Native app for macOS, Windows and Linux. A vulnerability that only affects eletron-builder prior to 24.13.2 in Windows, the NSIS installer makes a system call to open cmd.exe via NSExec in the `.nsh` installer script. NSExec by default searches the current directory of where the installer is located before searching `PATH`. This means that if an attacker can place a malicious executable file named cmd.exe in the same folder as the installer, the installer will run the malicious file. Version 24.13.2 fixes this issue. No known workaround exists. The code executes at the installer-level before the app is present on the system, so there's no way to check if it exists in a current installer.",
  "repo": "electron-userland/electron-builder",
  "patch_hash": "8f4acff3c2d45c1cb07779bb3fe79644408ee387",
  "patch_info": {
    "commit_hash": "8f4acff3c2d45c1cb07779bb3fe79644408ee387",
    "repo": "electron-userland/electron-builder",
    "commit_url": "https://github.com/electron-userland/electron-builder/commit/8f4acff3c2d45c1cb07779bb3fe79644408ee387",
    "files": [
      ".changeset/large-trainers-enjoy.md",
      "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh"
    ],
    "message": "fix: execute `%SYSTEMROOT%` cmd.exe directly during NSIS installer (#8059)",
    "before_after_code_files": [
      "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh"
    ]
  },
  "patch_diff": {
    "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh": [
      "File: packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh -> packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     ${nsProcess::FindProcess} \"${_FILE}\" ${_ERR}",
      "43:   !else",
      "44:     # find process owned by current user",
      "46:     Pop ${_ERR}",
      "47:   !endif",
      "48: !macroend",
      "",
      "[Removed Lines]",
      "45:     nsExec::Exec `cmd /c tasklist /FI \"USERNAME eq %USERNAME%\" /FI \"IMAGENAME eq ${_FILE}\" /FO csv | %SYSTEMROOT%\\System32\\find.exe \"${_FILE}\"`",
      "",
      "[Added Lines]",
      "45:     nsExec::Exec `%SYSTEMROOT%\\System32\\cmd.exe /c tasklist /FI \"USERNAME eq %USERNAME%\" /FI \"IMAGENAME eq ${_FILE}\" /FO csv | %SYSTEMROOT%\\System32\\find.exe \"${_FILE}\"`",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73:       !ifdef INSTALL_MODE_PER_ALL_USERS",
      "74:         nsExec::Exec `taskkill /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\"`",
      "75:       !else",
      "77:       !endif",
      "78:       # to ensure that files are not \"in-use\"",
      "79:       Sleep 300",
      "",
      "[Removed Lines]",
      "76:         nsExec::Exec `cmd /c taskkill /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\" /fi \"USERNAME eq %USERNAME%\"`",
      "",
      "[Added Lines]",
      "76:         nsExec::Exec `%SYSTEMROOT%\\System32\\cmd.exe /c taskkill /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\" /fi \"USERNAME eq %USERNAME%\"`",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:           !ifdef INSTALL_MODE_PER_ALL_USERS",
      "92:             nsExec::Exec `taskkill /f /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\"`",
      "93:           !else",
      "95:           !endif",
      "96:           !insertmacro FIND_PROCESS \"${APP_EXECUTABLE_FILENAME}\" $R0",
      "97:           ${If} $R0 == 0",
      "",
      "[Removed Lines]",
      "94:             nsExec::Exec `cmd /c taskkill /f /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\" /fi \"USERNAME eq %USERNAME%\"`",
      "",
      "[Added Lines]",
      "94:             nsExec::Exec `%SYSTEMROOT%\\System32\\cmd.exe /c taskkill /f /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\" /fi \"USERNAME eq %USERNAME%\"`",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "88e61bc410fae8c0bea0b2029ee1347864af98ac",
      "candidate_info": {
        "commit_hash": "88e61bc410fae8c0bea0b2029ee1347864af98ac",
        "repo": "electron-userland/electron-builder",
        "commit_url": "https://github.com/electron-userland/electron-builder/commit/88e61bc410fae8c0bea0b2029ee1347864af98ac",
        "files": [
          ".changeset/happy-otters-heal.md",
          "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh"
        ],
        "message": "fix(win): product file name is too long causing the find process exe failed (#7955)",
        "before_after_code_files": [
          "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh"
          ],
          "candidate": [
            "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh"
          ]
        }
      },
      "candidate_diff": {
        "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh": [
          "File: packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh -> packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     ${nsProcess::FindProcess} \"${_FILE}\" ${_ERR}",
          "43:   !else",
          "44:     # find process owned by current user",
          "46:     Pop ${_ERR}",
          "47:   !endif",
          "48: !macroend",
          "",
          "[Removed Lines]",
          "45:     nsExec::Exec `cmd /c tasklist /FI \"USERNAME eq %USERNAME%\" /FI \"IMAGENAME eq ${_FILE}\" | %SYSTEMROOT%\\System32\\find.exe \"${_FILE}\"`",
          "",
          "[Added Lines]",
          "45:     nsExec::Exec `cmd /c tasklist /FI \"USERNAME eq %USERNAME%\" /FI \"IMAGENAME eq ${_FILE}\" /FO csv | %SYSTEMROOT%\\System32\\find.exe \"${_FILE}\"`",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44b04463bf581b4c013586c9010733b518a802a4",
      "candidate_info": {
        "commit_hash": "44b04463bf581b4c013586c9010733b518a802a4",
        "repo": "electron-userland/electron-builder",
        "commit_url": "https://github.com/electron-userland/electron-builder/commit/44b04463bf581b4c013586c9010733b518a802a4",
        "files": [
          ".changeset/popular-jobs-protect.md",
          "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh"
        ],
        "message": "fix(nsis): replace `SYSTEMROOT` with `SYSDIR` (#8133)",
        "before_after_code_files": [
          "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh"
          ],
          "candidate": [
            "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh"
          ]
        }
      },
      "candidate_diff": {
        "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh": [
          "File: packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh -> packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     ${nsProcess::FindProcess} \"${_FILE}\" ${_ERR}",
          "43:   !else",
          "44:     # find process owned by current user",
          "46:     Pop ${_ERR}",
          "47:   !endif",
          "48: !macroend",
          "",
          "[Removed Lines]",
          "45:     nsExec::Exec `%SYSTEMROOT%\\System32\\cmd.exe /c tasklist /FI \"USERNAME eq %USERNAME%\" /FI \"IMAGENAME eq ${_FILE}\" /FO csv | %SYSTEMROOT%\\System32\\find.exe \"${_FILE}\"`",
          "",
          "[Added Lines]",
          "45:     nsExec::Exec `\"$SYSDIR\\cmd.exe\" /c tasklist /FI \"USERNAME eq %USERNAME%\" /FI \"IMAGENAME eq ${_FILE}\" /FO csv | \"$SYSDIR\\find.exe\" \"${_FILE}\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:       !ifdef INSTALL_MODE_PER_ALL_USERS",
          "74:         nsExec::Exec `taskkill /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\"`",
          "75:       !else",
          "77:       !endif",
          "78:       # to ensure that files are not \"in-use\"",
          "79:       Sleep 300",
          "",
          "[Removed Lines]",
          "76:         nsExec::Exec `%SYSTEMROOT%\\System32\\cmd.exe /c taskkill /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\" /fi \"USERNAME eq %USERNAME%\"`",
          "",
          "[Added Lines]",
          "76:         nsExec::Exec `\"$SYSDIR\\cmd.exe\" /c taskkill /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\" /fi \"USERNAME eq %USERNAME%\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:           !ifdef INSTALL_MODE_PER_ALL_USERS",
          "92:             nsExec::Exec `taskkill /f /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\"`",
          "93:           !else",
          "95:           !endif",
          "96:           !insertmacro FIND_PROCESS \"${APP_EXECUTABLE_FILENAME}\" $R0",
          "97:           ${If} $R0 == 0",
          "",
          "[Removed Lines]",
          "94:             nsExec::Exec `%SYSTEMROOT%\\System32\\cmd.exe /c taskkill /f /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\" /fi \"USERNAME eq %USERNAME%\"`",
          "",
          "[Added Lines]",
          "94:             nsExec::Exec `\"$SYSDIR\\cmd.exe\" /c taskkill /f /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\" /fi \"USERNAME eq %USERNAME%\"`",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8705fd0c3a6288e2643d01cc407f6c0b47ac7659",
      "candidate_info": {
        "commit_hash": "8705fd0c3a6288e2643d01cc407f6c0b47ac7659",
        "repo": "electron-userland/electron-builder",
        "commit_url": "https://github.com/electron-userland/electron-builder/commit/8705fd0c3a6288e2643d01cc407f6c0b47ac7659",
        "files": [
          ".github/workflows/test.yaml",
          "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh",
          "packages/electron-updater/src/AppUpdater.ts",
          "packages/electron-updater/src/BaseUpdater.ts",
          "packages/electron-updater/src/DebUpdater.ts",
          "packages/electron-updater/src/RpmUpdater.ts",
          "test/src/helpers/updaterTestUtil.ts",
          "test/src/updater/linuxUpdaterTest.ts"
        ],
        "message": "adding error handling via stderr log detection",
        "before_after_code_files": [
          "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh",
          "packages/electron-updater/src/AppUpdater.ts||packages/electron-updater/src/AppUpdater.ts",
          "packages/electron-updater/src/BaseUpdater.ts||packages/electron-updater/src/BaseUpdater.ts",
          "packages/electron-updater/src/DebUpdater.ts||packages/electron-updater/src/DebUpdater.ts",
          "packages/electron-updater/src/RpmUpdater.ts||packages/electron-updater/src/RpmUpdater.ts",
          "test/src/helpers/updaterTestUtil.ts||test/src/helpers/updaterTestUtil.ts",
          "test/src/updater/linuxUpdaterTest.ts||test/src/updater/linuxUpdaterTest.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh"
          ],
          "candidate": [
            "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh"
          ]
        }
      },
      "candidate_diff": {
        "packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh||packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh": [
          "File: packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh -> packages/app-builder-lib/templates/nsis/include/allowOnlyOneInstallerInstance.nsh",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     ${nsProcess::FindProcess} \"${_FILE}\" ${_ERR}",
          "43:   !else",
          "44:     # find process owned by current user",
          "46:     Pop ${_ERR}",
          "47:   !endif",
          "48: !macroend",
          "",
          "[Removed Lines]",
          "45:     nsExec::Exec `cmd /c tasklist /FI \"USERNAME eq %USERNAME%\" /FI \"IMAGENAME eq ${_FILE}\" /FO csv | %SYSTEMROOT%\\System32\\find.exe \"${_FILE}\"`",
          "",
          "[Added Lines]",
          "45:     nsExec::Exec `%SYSTEMROOT%\\System32\\cmd.exe /c tasklist /FI \"USERNAME eq %USERNAME%\" /FI \"IMAGENAME eq ${_FILE}\" /FO csv | %SYSTEMROOT%\\System32\\find.exe \"${_FILE}\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:       !ifdef INSTALL_MODE_PER_ALL_USERS",
          "74:         nsExec::Exec `taskkill /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\"`",
          "75:       !else",
          "77:       !endif",
          "78:       # to ensure that files are not \"in-use\"",
          "79:       Sleep 300",
          "",
          "[Removed Lines]",
          "76:         nsExec::Exec `cmd /c taskkill /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\" /fi \"USERNAME eq %USERNAME%\"`",
          "",
          "[Added Lines]",
          "76:         nsExec::Exec `%SYSTEMROOT%\\System32\\cmd.exe /c taskkill /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\" /fi \"USERNAME eq %USERNAME%\"`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:           !ifdef INSTALL_MODE_PER_ALL_USERS",
          "92:             nsExec::Exec `taskkill /f /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\"`",
          "93:           !else",
          "95:           !endif",
          "96:           !insertmacro FIND_PROCESS \"${APP_EXECUTABLE_FILENAME}\" $R0",
          "97:           ${If} $R0 == 0",
          "",
          "[Removed Lines]",
          "94:             nsExec::Exec `cmd /c taskkill /f /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\" /fi \"USERNAME eq %USERNAME%\"`",
          "",
          "[Added Lines]",
          "94:             nsExec::Exec `%SYSTEMROOT%\\System32\\cmd.exe /c taskkill /f /im \"${APP_EXECUTABLE_FILENAME}\" /fi \"PID ne $pid\" /fi \"USERNAME eq %USERNAME%\"`",
          "",
          "---------------"
        ],
        "packages/electron-updater/src/AppUpdater.ts||packages/electron-updater/src/AppUpdater.ts": [
          "File: packages/electron-updater/src/AppUpdater.ts -> packages/electron-updater/src/AppUpdater.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   \"download-progress\": (info: ProgressInfo) => void",
          "41:   \"update-cancelled\": (info: UpdateInfo) => void",
          "42:   \"appimage-filename-updated\": (path: string) => void",
          "43: }",
          "45: export abstract class AppUpdater extends (EventEmitter as new () => TypedEmitter<AppUpdaterEvents>) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:   \"before-quit-for-update\": () => void",
          "",
          "---------------"
        ],
        "packages/electron-updater/src/BaseUpdater.ts||packages/electron-updater/src/BaseUpdater.ts": [
          "File: packages/electron-updater/src/BaseUpdater.ts -> packages/electron-updater/src/BaseUpdater.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     if (isInstalled) {",
          "19:       setImmediate(() => {",
          "22:         this.app.quit()",
          "23:       })",
          "24:     } else {",
          "",
          "[Removed Lines]",
          "21:         require(\"electron\").autoUpdater.emit(\"before-quit-for-update\")",
          "",
          "[Added Lines]",
          "21:         try {",
          "22:           require(\"electron\").autoUpdater.emit(\"before-quit-for-update\")",
          "23:         } catch {",
          "25:         }",
          "26:         this.emit(\"before-quit-for-update\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:   protected wrapSudo() {",
          "104:     const { name } = this.app",
          "105:     const installComment = `\"${name} would like to update\"`",
          "107:     const command = [sudo]",
          "108:     if (/kdesudo/i.test(sudo)) {",
          "109:       command.push(\"--comment\", installComment)",
          "",
          "[Removed Lines]",
          "106:     const sudo = this.spawnSyncLog(\"which gksudo || which kdesudo || which pkexec || which beesu\")",
          "",
          "[Added Lines]",
          "111:     const sudo = this.spawnSyncLog(\"which gksudo || which kdesudo || which pkexec || which beesu\").stdout",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:     return command.join(\" \")",
          "117:   }",
          "120:     this._logger.info(`Executing: ${cmd} with args: ${args}`)",
          "121:     const response = spawnSync(cmd, args, {",
          "122:       env: { ...process.env, ...env },",
          "123:       encoding: \"utf-8\",",
          "124:       shell: true,",
          "125:     })",
          "127:   }",
          "",
          "[Removed Lines]",
          "119:   protected spawnSyncLog(cmd: string, args: string[] = [], env = {}): string {",
          "126:     return response.stdout.trim()",
          "",
          "[Added Lines]",
          "124:   protected spawnSyncLog(cmd: string, args: string[] = [], env = {}): { stdout: string; stderr: string } {",
          "131:     const stdout = response.stdout.trim()",
          "132:     const stderr = response.stderr.trim()",
          "133:     return { stdout, stderr }",
          "",
          "---------------"
        ],
        "packages/electron-updater/src/DebUpdater.ts||packages/electron-updater/src/DebUpdater.ts": [
          "File: packages/electron-updater/src/DebUpdater.ts -> packages/electron-updater/src/DebUpdater.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     const wrapper = /pkexec/i.test(sudo) ? \"\" : `\"`",
          "34:     const cmd = [\"dpkg\", \"-i\", options.installerPath, \"||\", \"apt-get\", \"install\", \"-f\", \"-y\"]",
          "36:     if (options.isForceRunAfter) {",
          "37:       this.app.relaunch()",
          "38:     }",
          "",
          "[Removed Lines]",
          "35:     this.spawnSyncLog(sudo, [`${wrapper}/bin/bash`, \"-c\", `'${cmd.join(\" \")}'${wrapper}`])",
          "",
          "[Added Lines]",
          "35:     const { stderr } = this.spawnSyncLog(sudo, [`${wrapper}/bin/bash`, \"-c\", `'${cmd.join(\" \")}'${wrapper}`])",
          "36:     if (stderr) {",
          "37:       throw new Error(stderr)",
          "38:     }",
          "",
          "---------------"
        ],
        "packages/electron-updater/src/RpmUpdater.ts||packages/electron-updater/src/RpmUpdater.ts": [
          "File: packages/electron-updater/src/RpmUpdater.ts -> packages/electron-updater/src/RpmUpdater.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     const sudo = this.wrapSudo()",
          "34:     const wrapper = /pkexec/i.test(sudo) ? \"\" : `\"`",
          "36:     let cmd: string[]",
          "37:     if (!packageManager) {",
          "39:       cmd = [packageManager, \"-y\", \"remove\", `'${this.app.name}'`, \";\", packageManager, \"-y\", \"install\", upgradePath]",
          "40:     } else {",
          "41:       cmd = [",
          "",
          "[Removed Lines]",
          "35:     const packageManager = this.spawnSyncLog(\"which zypper\")",
          "38:       const packageManager = this.spawnSyncLog(\"which dnf || which yum\")",
          "",
          "[Added Lines]",
          "35:     let packageManager = this.spawnSyncLog(\"which zypper\").stdout",
          "38:       const manager = this.spawnSyncLog(\"which dnf || which yum\")",
          "39:       if (manager.stderr) {",
          "40:         throw new Error(manager.stderr)",
          "41:       }",
          "42:       packageManager = manager.stdout",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:         upgradePath,",
          "58:       ]",
          "59:     }",
          "61:     if (options.isForceRunAfter) {",
          "62:       this.app.relaunch()",
          "63:     }",
          "",
          "[Removed Lines]",
          "60:     this.spawnSyncLog(sudo, [`${wrapper}/bin/bash`, \"-c\", `'${cmd.join(\" \")}'${wrapper}`])",
          "",
          "[Added Lines]",
          "64:     const { stderr } = this.spawnSyncLog(sudo, [`${wrapper}/bin/bash`, \"-c\", `'${cmd.join(\" \")}'${wrapper}`])",
          "65:     if (stderr) {",
          "66:       throw new Error(stderr)",
          "67:     }",
          "",
          "---------------"
        ],
        "test/src/helpers/updaterTestUtil.ts||test/src/helpers/updaterTestUtil.ts": [
          "File: test/src/helpers/updaterTestUtil.ts -> test/src/helpers/updaterTestUtil.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: export function trackEvents(updater: AppUpdater) {",
          "82:   const actualEvents: Array<string> = []",
          "84:     updater.addListener(eventName, () => {",
          "85:       actualEvents.push(eventName)",
          "86:     })",
          "",
          "[Removed Lines]",
          "83:   for (const eventName of [\"checking-for-update\", \"update-available\", \"update-downloaded\", \"error\"] as const) {",
          "",
          "[Added Lines]",
          "84:   for (const eventName of [\"checking-for-update\", \"update-available\", \"update-downloaded\", \"error\", \"before-quit-for-update\"] as const) {",
          "",
          "---------------"
        ],
        "test/src/updater/linuxUpdaterTest.ts||test/src/updater/linuxUpdaterTest.ts": [
          "File: test/src/updater/linuxUpdaterTest.ts -> test/src/updater/linuxUpdaterTest.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { GithubOptions } from \"builder-util-runtime\"",
          "3: import { assertThat } from \"../helpers/fileAssert\"",
          "7:   const testAppAdapter = await createTestAppAdapter(\"1.0.1\")",
          "9:   tuneTestUpdater(updater, { platform: \"linux\" })",
          "11:   updater.updateConfigPath = await writeUpdateConfig<GithubOptions>({",
          "12:     provider: \"github\",",
          "13:     owner: \"mmaietta\",",
          "",
          "[Removed Lines]",
          "2: import { DebUpdater, RpmUpdater } from \"electron-updater\"",
          "4: import { createTestAppAdapter, tuneTestUpdater, validateDownload, writeUpdateConfig } from \"../helpers/updaterTestUtil\"",
          "6: const runTest = async (updaterClass: any, expectedExtension: \"deb\" | \"rpm\" | \"AppImage\") => {",
          "8:   const updater = new updaterClass(null, testAppAdapter)",
          "",
          "[Added Lines]",
          "2: import { AppImageUpdater, BaseUpdater, DebUpdater, RpmUpdater } from \"electron-updater\"",
          "4: import { createTestAppAdapter, trackEvents, tuneTestUpdater, validateDownload, writeUpdateConfig } from \"../helpers/updaterTestUtil\"",
          "6: const runTest = async (updaterClass: typeof BaseUpdater, expectedExtension: \"deb\" | \"rpm\" | \"AppImage\") => {",
          "8:   const updater = new (updaterClass as any)(null, testAppAdapter)",
          "10:   const actualEvents = trackEvents(updater)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   const updateCheckResult = await validateDownload(updater)",
          "22:   expect(installer.endsWith(`.${expectedExtension}`)).toBeTruthy()",
          "23:   await assertThat(installer).isFile()",
          "26: }",
          "29:   await runTest(RpmUpdater, \"rpm\")",
          "30: })",
          "33:   await runTest(DebUpdater, \"deb\")",
          "34: })",
          "",
          "[Removed Lines]",
          "19:   const files = await updateCheckResult?.downloadPromise",
          "20:   expect(files!.length).toEqual(1)",
          "21:   const installer = files![0]",
          "28: test(\"test rpm download\", async () => {",
          "32: test(\"test deb download\", async () => {",
          "",
          "[Added Lines]",
          "19:   const files = (await updateCheckResult?.downloadPromise)!",
          "20:   expect(files.length).toEqual(1)",
          "21:   const installer = files[0]",
          "25:   expect(actualEvents).toMatchObject([\"checking-for-update\", \"update-available\", \"update-downloaded\"])",
          "35: test.ifLinux(\"test rpm download\", async () => {",
          "39: test.ifLinux(\"test deb download\", async () => {",
          "43: test.ifLinux.skip(\"test AppImage download\", async () => {",
          "44:   await runTest(AppImageUpdater, \"AppImage\")",
          "45: })",
          "",
          "---------------"
        ]
      }
    }
  ]
}